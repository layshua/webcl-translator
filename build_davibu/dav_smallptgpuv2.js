
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
    function fetchRemotePackage(packageName, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        if (event.loaded && event.total) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: event.total
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };
    function handleError(error) {
      console.error('package error:', error);
    };
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage('dav_smallptgpuv2.data', function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
  function runWithFS() {
function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'scenes', true, true);
    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
          this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 12946, 0, 0).open('GET', '/rendering_kernel.cl');
    new DataRequest(12946, 14499, 0, 0).open('GET', '/scene_build_complex.pl');
    new DataRequest(14499, 14689, 0, 0).open('GET', '/scenes/caustic.scn');
    new DataRequest(14689, 14982, 0, 0).open('GET', '/scenes/caustic3.scn');
    new DataRequest(14982, 54502, 0, 0).open('GET', '/scenes/complex.scn');
    new DataRequest(54502, 55081, 0, 0).open('GET', '/scenes/cornell_large.scn');
    new DataRequest(55081, 55658, 0, 0).open('GET', '/scenes/cornell.scn');
    new DataRequest(55658, 55950, 0, 0).open('GET', '/scenes/simple.scn');
    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = '../build/dav_smallptgpuv2.data';
    var REMOTE_PACKAGE_NAME = 'dav_smallptgpuv2.data';
    var PACKAGE_UUID = '497c9a84-4f18-4b78-b2c5-9621cfa40bb4';
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/rendering_kernel.cl"].onload();
          DataRequest.prototype.requests["/scene_build_complex.pl"].onload();
          DataRequest.prototype.requests["/scenes/caustic.scn"].onload();
          DataRequest.prototype.requests["/scenes/caustic3.scn"].onload();
          DataRequest.prototype.requests["/scenes/complex.scn"].onload();
          DataRequest.prototype.requests["/scenes/cornell_large.scn"].onload();
          DataRequest.prototype.requests["/scenes/cornell.scn"].onload();
          DataRequest.prototype.requests["/scenes/simple.scn"].onload();
          Module['removeRunDependency']('datafile_../build/dav_smallptgpuv2.data');
    };
    Module['addRunDependency']('datafile_../build/dav_smallptgpuv2.data');
    if (!Module.preloadResults) Module.preloadResults = {};
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }
})();
// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };
  Module['load'] = function load(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function print(x) {
      console.log(x);
    };
    Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 52428800;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 17672;
var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a21() } },{ func: function() { __GLOBAL__I_a84() } },{ func: function() { __GLOBAL__I_a132() } },{ func: function() { __GLOBAL__I_a249() } });
var _glutBitmap9By15;
var _glutBitmap8By13;
var ___fsmu8;
var ___dso_handle;
var ___dso_handle=___dso_handle=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,248,50,0,0,36,3,0,0,26,3,0,0,168,0,0,0,174,1,0,0,214,0,0,0,110,0,0,0,2,1,0,0,38,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,8,51,0,0,36,3,0,0,236,0,0,0,168,0,0,0,174,1,0,0,214,0,0,0,94,2,0,0,32,1,0,0,192,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZN12RenderConfigC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEjjbbj;
var __ZN12RenderConfigD1Ev;
var __ZN12RenderDeviceC1ERKN2cl6DeviceERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEjP6CameraP6Spherej;
var __ZN12RenderDeviceD1Ev;
var __ZNSt13runtime_errorC1EPKc;
var __ZNSt13runtime_errorD1Ev;
var __ZNSt12length_errorD1Ev;
var __ZNSt3__16localeC1Ev;
var __ZNSt3__16localeC1ERKS0_;
var __ZNSt3__16localeD1Ev;
var __ZNSt8bad_castC1Ev;
var __ZNSt8bad_castD1Ev;
/* memory initializer */ allocate([0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,93,32,67,97,109,101,114,97,32,98,117,102,102,101,114,32,115,105,122,101,58,32,0,0,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,65,112,114,0,0,0,0,0,77,97,114,0,0,0,0,0,70,101,98,0,0,0,0,0,83,109,97,108,108,112,116,71,80,85,32,86,50,46,48,32,40,87,114,105,116,116,101,110,32,98,121,32,68,97,118,105,100,32,66,117,99,99,105,97,114,101,108,108,105,41,0,0,74,97,110,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,97,116,101,114,105,97,108,32,116,121,112,101,32,102,111,114,32,115,112,104,101,114,101,32,35,37,100,58,32,37,100,10,0,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,79,99,116,111,98,101,114,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,82,101,97,100,105,110,103,32,115,99,101,110,101,58,32,37,115,10,0,0,0,0,0,0,32,70,111,114,99,101,100,32,119,111,114,107,32,103,114,111,117,112,32,115,105,122,101,58,32,0,0,0,0,0,0,0,65,117,103,117,115,116,0,0,74,117,108,121,0,0,0,0,74,117,110,101,0,0,0,0,77,97,121,0,0,0,0,0,97,110,111,110,121,109,111,117,115,101,0,0,0,0,0,0,65,112,114,105,108,0,0,0,80,108,101,97,115,101,44,32,119,97,105,116,32,102,111,114,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,112,114,111,102,105,108,105,110,103,32,112,104,97,115,101,0,77,97,114,99,104,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,115,112,104,101,114,101,32,37,102,32,32,37,102,32,37,102,32,37,102,32,32,37,102,32,37,102,32,37,102,32,32,37,102,32,37,102,32,37,102,32,32,37,100,10,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,115,116,100,58,58,101,120,99,101,112,116,105,111,110,0,0,32,83,117,103,103,101,115,116,101,100,32,119,111,114,107,32,103,114,111,117,112,32,115,105,122,101,58,32,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,83,101,108,101,99,116,101,100,32,115,112,104,101,114,101,32,37,100,32,40,37,102,32,37,102,32,37,102,41,10,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,83,99,101,110,101,32,115,105,122,101,58,32,37,100,10,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,101,109,112,116,121,0,0,0,82,97,100,105,97,110,99,101,71,80,85,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,111,110,101,46,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,115,112,104,101,114,101,32,99,111,117,110,116,58,32,37,100,10,0,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,32,67,111,109,112,105,108,97,116,105,111,110,32,101,114,114,111,114,58,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,80,77,0,0,0,0,0,0,82,101,108,101,97,115,105,110,103,32,114,101,115,111,117,114,99,101,115,0,0,0,0,0,65,77,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,115,105,122,101,32,37,117,10,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,32,67,111,109,112,105,108,97,116,105,111,110,32,114,101,115,117,108,116,58,32,0,0,0,99,108,67,114,101,97,116,101,67,111,110,116,101,120,116,70,114,111,109,84,121,112,101,0,99,108,67,114,101,97,116,101,67,111,109,109,97,110,100,81,117,101,117,101,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,99,108,67,114,101,97,116,101,80,114,111,103,114,97,109,87,105,116,104,83,111,117,114,99,101,0,0,0,0,0,0,0,99,108,66,117,105,108,100,80,114,111,103,114,97,109,0,0,99,108,67,114,101,97,116,101,75,101,114,110,101,108,0,0,37,100,32,37,100,32,37,100,32,0,0,0,0,0,0,0,99,108,67,114,101,97,116,101,66,117,102,102,101,114,0,0,99,108,83,101,116,75,101,114,110,101,108,65,114,103,0,0,99,108,69,110,113,117,101,117,101,78,68,82,97,110,103,101,75,101,114,110,101,108,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,54,32,99,97,109,101,114,97,32,112,97,114,97,109,101,116,101,114,115,58,32,37,100,10,0,99,108,69,110,113,117,101,117,101,82,101,97,100,66,117,102,102,101,114,0,0,0,0,0,99,108,87,97,105,116,70,111,114,69,118,101,110,116,115,0,40,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,99,108,71,101,116,69,118,101,110,116,80,114,111,102,105,108,101,73,110,102,111,0,0,0,93,0,0,0,0,0,0,0,105,109,97,103,101,46,112,112,109,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,99,108,71,101,116,80,108,97,116,102,111,114,109,73,68,115,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,99,108,71,101,116,80,114,111,103,114,97,109,66,117,105,108,100,73,110,102,111,0,0,0,99,108,71,101,116,68,101,118,105,99,101,73,68,115,0,0,37,115,10,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,99,108,71,101,116,75,101,114,110,101,108,87,111,114,107,71,114,111,117,112,73,110,102,111,0,0,0,0,0,0,0,0,85,112,100,97,116,105,110,103,32,79,112,101,110,67,76,32,68,101,118,105,99,101,32,119,111,114,107,108,111,97,100,115,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,91,80,114,111,102,105,108,105,110,103,93,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,80,51,10,37,100,32,37,100,10,37,100,10,0,0,0,0,99,108,70,105,110,105,115,104,0,0,0,0,0,0,0,0,79,112,101,110,67,76,32,68,101,118,105,99,101,115,58,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,99,108,103,101,116,68,101,118,105,99,101,73,110,102,111,0,99,108,69,110,113,117,101,117,101,87,114,105,116,101,66,117,102,102,101,114,0,0,0,0,91,37,115,93,91,80,114,102,32,73,100,120,32,37,46,50,102,93,91,65,115,103,110,100,32,80,114,102,32,73,100,120,32,37,46,50,102,93,91,87,114,107,108,100,32,100,111,110,101,32,37,46,49,102,37,37,93,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,97,43,98,0,0,0,0,0,118,44,32,98,32,45,32,105,110,99,114,101,97,115,101,47,100,101,99,114,101,97,115,101,32,116,104,101,32,119,111,114,108,111,97,100,32,111,102,32,116,104,101,32,115,101,108,101,99,116,101,100,32,79,112,101,110,67,76,32,100,101,118,105,99,101,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,99,97,109,101,114,97,32,37,102,32,37,102,32,37,102,32,32,37,102,32,37,102,32,37,102,10,0,0,0,0,0,0,119,43,98,0,0,0,0,0,110,44,32,109,32,45,32,115,101,108,101,99,116,32,112,114,101,118,105,111,117,115,47,110,101,120,116,32,79,112,101,110,67,76,32,100,101,118,105,99,101,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,114,43,98,0,0,0,0,0,69,82,82,79,82,58,32,0,107,32,45,32,116,111,103,103,108,101,32,119,111,114,107,108,111,97,100,32,118,105,115,117,97,108,105,122,97,116,105,111,110,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,99,108,103,101,116,68,101,118,105,99,101,73,110,102,111,0,91,68,101,118,105,99,101,58,58,0,0,0,0,0,0,0,108,32,45,32,114,101,115,101,116,32,108,111,97,100,32,98,97,108,97,110,99,105,110,103,32,112,114,111,99,101,100,117,114,101,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,97,98,0,0,0,0,0,0,50,44,32,51,44,32,52,44,32,53,44,32,54,44,32,56,44,32,57,32,45,32,116,111,32,109,111,118,101,32,115,101,108,101,99,116,101,100,32,111,98,106,101,99,116,0,0,0,37,112,0,0,0,0,0,0,102,97,108,115,101,0,0,0,119,98,0,0,0,0,0,0,93,0,0,0,0,0,0,0,43,32,97,110,100,32,45,32,45,32,116,111,32,115,101,108,101,99,116,32,110,101,120,116,47,112,114,101,118,105,111,117,115,32,111,98,106,101,99,116,0,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,97,43,0,0,0,0,0,0,91,0,0,0,0,0,0,0,80,97,103,101,85,112,32,97,110,100,32,80,97,103,101,68,111,119,110,32,45,32,109,111,118,101,32,99,97,109,101,114,97,32,116,97,114,103,101,116,32,117,112,32,97,110,100,32,100,111,119,110,0,0,0,0,116,114,117,101,0,0,0,0,119,43,0,0,0,0,0,0,79,112,101,110,67,76,32,68,101,118,105,99,101,32,117,115,101,100,58,32,0,0,0,0,114,32,97,110,100,32,102,32,45,32,109,111,118,101,32,99,97,109,101,114,97,32,117,112,32,97,110,100,32,100,111,119,110,0,0,0,0,0,0,0,114,43,0,0,0,0,0,0,58,32,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,105,109,97,103,101,32,102,105,108,101,58,32,105,109,97,103,101,46,112,112,109,10,0,0,0,114,101,110,100,101,114,105,110,103,95,107,101,114,110,101,108,46,99,108,0,0,0,0,0,119,32,97,110,100,32,115,32,45,32,109,111,118,101,32,99,97,109,101,114,97,32,102,111,114,119,97,114,100,32,97,110,100,32,98,97,99,107,119,97,114,100,0,0,0,0,0,0,114,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,97,110,32,97,112,112,114,111,112,105,97,116,101,32,79,112,101,110,67,76,32,100,101,118,105,99,101,0,0,0,0,0,0,97,32,97,110,100,32,100,32,45,32,109,111,118,101,32,99,97,109,101,114,97,32,108,101,102,116,32,97,110,100,32,114,105,103,104,116,0,0,0,0,97,0,0,0,0,0,0,0,79,112,101,110,67,76,32,68,101,118,105,99,101,32,117,110,105,116,115,32,0,0,0,0,97,114,114,111,119,32,75,101,121,115,32,45,32,114,111,116,97,116,101,32,99,97,109,101,114,97,32,108,101,102,116,47,114,105,103,104,116,47,117,112,47,100,111,119,110,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,119,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,0,0,79,112,101,110,67,76,32,68,101,118,105,99,101,32,116,121,112,101,32,0,0,0,0,0,104,32,45,32,116,111,103,103,108,101,32,72,101,108,112,0,84,89,80,69,95,85,78,75,78,79,87,78,0,0,0,0,115,99,101,110,101,115,47,99,111,114,110,101,108,108,46,115,99,110,0,0,0,0,0,0,72,101,108,112,32,38,32,68,101,118,105,99,101,115,0,0,93,32,83,101,101,100,115,32,98,117,102,102,101,114,32,115,105,122,101,58,32,0,0,0,84,89,80,69,95,71,80,85,0,0,0,0,0,0,0,0,93,32,80,105,120,101,108,32,98,117,102,102,101,114,32,115,105,122,101,58,32,0,0,0,84,89,80,69,95,67,80,85,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,93,32,67,111,108,111,114,32,98,117,102,102,101,114,32,115,105,122,101,58,32,0,0,0,84,89,80,69,95,68,69,70,65,85,76,84,0,0,0,0,118,101,99,116,111,114,0,0,98,121,116,101,115,0,0,0,84,89,80,69,95,65,76,76,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,93,32,75,101,114,110,101,108,32,102,105,108,101,32,115,105,122,101,32,0,0,0,0,0,79,112,101,110,67,76,32,68,101,118,105,99,101,32,110,97,109,101,32,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,41,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,97,110,32,97,112,112,114,111,112,105,97,116,101,32,79,112,101,110,67,76,32,112,108,97,116,102,111,114,109,0,0,0,0,40,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,37,76,102,0,0,0,0,0,84,104,117,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,97,110,111,110,121,109,111,117,115,0,0,0,0,0,0,0,93,32,69,82,82,79,82,58,32,0,0,0,0,0,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,91,82,101,110,100,101,114,105,110,103,32,116,105,109,101,32,37,46,51,102,32,115,101,99,32,40,112,97,115,115,32,37,100,41,93,91,65,118,103,46,32,115,97,109,112,108,101,47,115,101,99,32,37,46,49,102,75,93,91,73,110,115,116,97,110,116,32,115,97,109,112,108,101,47,115,101,99,32,37,46,49,102,75,93,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,77,111,110,100,97,121,0,0,83,117,110,100,97,121,0,0,58,32,0,0,0,0,0,0,93,32,83,99,101,110,101,32,98,117,102,102,101,114,32,115,105,122,101,58,32,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,67,114,101,97,116,105,110,103,32,84,101,120,116,117,114,101,32,49,32,37,100,32,120,32,37,100,46,46,46,10,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,79,112,101,110,67,76,32,80,108,97,116,102,111,114,109,32,0,0,0,0,0,0,0,0,75,98,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,68,101,99,0,0,0,0,0,78,111,118,0,0,0,0,0,79,99,116,0,0,0,0,0,83,101,112,0,0,0,0,0,65,117,103,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,115,112,104,101,114,101,32,35,37,100,58,32,37,100,10,0,0,32,60,117,115,101,32,67,80,85,32,100,101,118,105,99,101,115,32,40,48,32,111,114,32,49,41,62,32,60,117,115,101,32,71,80,85,32,100,101,118,105,99,101,115,32,40,48,32,111,114,32,49,41,62,32,60,71,80,85,32,119,111,114,107,103,114,111,117,112,32,115,105,122,101,32,40,48,61,100,101,102,97,117,108,116,32,118,97,108,117,101,32,111,114,32,97,110,121,116,104,105,110,103,32,62,32,48,32,97,110,100,32,112,111,119,101,114,32,111,102,32,50,41,62,32,60,119,105,110,100,111,119,32,119,105,100,116,104,62,32,60,119,105,110,100,111,119,32,104,101,105,103,104,116,62,32,60,115,99,101,110,101,32,102,105,108,101,62,0,0,0,0,0,0,0,0,85,115,97,103,101,58,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,184,44,0,0,170,0,0,0,10,3,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,44,0,0,74,0,0,0,86,1,0,0,182,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,44,0,0,68,2,0,0,206,1,0,0,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,44,0,0,200,0,0,0,64,3,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,44,0,0,14,1,0,0,18,0,0,0,148,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,14,1,0,0,40,0,0,0,148,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,45,0,0,214,1,0,0,238,0,0,0,126,0,0,0,2,2,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,45,0,0,50,3,0,0,18,2,0,0,126,0,0,0,4,3,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,45,0,0,204,1,0,0,22,2,0,0,126,0,0,0,8,2,0,0,34,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,45,0,0,56,3,0,0,150,1,0,0,126,0,0,0,242,1,0,0,82,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,45,0,0,146,2,0,0,94,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,46,0,0,42,3,0,0,10,1,0,0,126,0,0,0,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,46,0,0,202,1,0,0,68,1,0,0,126,0,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,46,0,0,96,0,0,0,70,1,0,0,126,0,0,0,198,2,0,0,22,0,0,0,24,2,0,0,30,0,0,0,212,0,0,0,200,2,0,0,244,0,0,0,248,255,255,255,88,46,0,0,122,0,0,0,50,0,0,0,192,0,0,0,84,0,0,0,10,0,0,0,176,0,0,0,232,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,46,0,0,24,3,0,0,210,2,0,0,126,0,0,0,118,0,0,0,140,0,0,0,234,2,0,0,168,1,0,0,174,0,0,0,16,0,0,0,174,2,0,0,248,255,255,255,128,46,0,0,136,1,0,0,118,2,0,0,176,2,0,0,218,2,0,0,80,2,0,0,4,1,0,0,50,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,46,0,0,222,0,0,0,28,2,0,0,126,0,0,0,28,1,0,0,242,0,0,0,124,0,0,0,140,1,0,0,226,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,46,0,0,164,0,0,0,186,0,0,0,126,0,0,0,252,0,0,0,16,2,0,0,166,0,0,0,252,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,46,0,0,30,3,0,0,2,0,0,0,126,0,0,0,178,1,0,0,44,3,0,0,98,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,46,0,0,120,0,0,0,168,2,0,0,126,0,0,0,208,2,0,0,220,0,0,0,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,47,0,0,188,2,0,0,80,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,47,0,0,70,0,0,0,148,1,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,47,0,0,14,0,0,0,220,1,0,0,126,0,0,0,108,0,0,0,94,0,0,0,88,0,0,0,92,0,0,0,86,0,0,0,104,0,0,0,102,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,47,0,0,22,1,0,0,38,0,0,0,126,0,0,0,62,2,0,0,66,2,0,0,52,2,0,0,64,2,0,0,20,1,0,0,56,2,0,0,54,2,0,0,92,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,47,0,0,98,0,0,0,52,0,0,0,126,0,0,0,132,2,0,0,126,2,0,0,116,2,0,0,120,2,0,0,14,2,0,0,124,2,0,0,114,2,0,0,138,2,0,0,136,2,0,0,134,2,0,0,120,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,47,0,0,144,0,0,0,4,0,0,0,126,0,0,0,220,2,0,0,2,3,0,0,250,2,0,0,252,2,0,0,230,2,0,0,0,3,0,0,248,2,0,0,12,3,0,0,8,3,0,0,6,3,0,0,122,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,47,0,0,210,0,0,0,6,1,0,0,126,0,0,0,116,1,0,0,48,2,0,0,72,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,47,0,0,68,0,0,0,228,1,0,0,126,0,0,0,42,2,0,0,160,2,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,47,0,0,24,0,0,0,12,2,0,0,126,0,0,0,82,0,0,0,254,1,0,0,248,1,0,0,196,2,0,0,104,2,0,0,186,2,0,0,164,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,47,0,0,236,1,0,0,132,1,0,0,126,0,0,0,238,2,0,0,48,3,0,0,74,2,0,0,34,1,0,0,48,0,0,0,78,2,0,0,60,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,236,1,0,0,42,0,0,0,126,0,0,0,12,1,0,0,116,0,0,0,248,0,0,0,96,2,0,0,82,1,0,0,198,1,0,0,14,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,48,0,0,236,1,0,0,42,1,0,0,126,0,0,0,50,2,0,0,222,1,0,0,158,2,0,0,162,0,0,0,170,1,0,0,146,1,0,0,54,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,48,0,0,236,1,0,0,80,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,48,0,0,154,0,0,0,190,1,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,48,0,0,236,1,0,0,228,0,0,0,126,0,0,0,158,1,0,0,198,0,0,0,104,1,0,0,38,3,0,0,202,0,0,0,84,2,0,0,32,2,0,0,62,0,0,0,128,0,0,0,180,2,0,0,54,1,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,48,0,0,62,3,0,0,90,0,0,0,126,0,0,0,158,0,0,0,58,0,0,0,122,1,0,0,170,2,0,0,150,0,0,0,130,1,0,0,208,1,0,0,200,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,48,0,0,190,0,0,0,202,2,0,0,194,1,0,0,126,1,0,0,92,1,0,0,142,2,0,0,150,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,48,0,0,236,1,0,0,240,0,0,0,126,0,0,0,50,2,0,0,222,1,0,0,158,2,0,0,162,0,0,0,170,1,0,0,146,1,0,0,54,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,48,0,0,236,1,0,0,210,1,0,0,126,0,0,0,50,2,0,0,222,1,0,0,158,2,0,0,162,0,0,0,170,1,0,0,146,1,0,0,54,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,48,0,0,110,1,0,0,240,2,0,0,206,0,0,0,176,1,0,0,16,1,0,0,90,2,0,0,36,2,0,0,108,2,0,0,162,2,0,0,156,0,0,0,146,0,0,0,136,0,0,0,58,3,0,0,26,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,48,0,0,20,0,0,0,88,1,0,0,30,2,0,0,224,2,0,0,216,2,0,0,44,2,0,0,30,1,0,0,20,2,0,0,118,1,0,0,34,0,0,0,64,0,0,0,242,2,0,0,98,1,0,0,214,2,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,56,49,0,0,114,0,0,0,154,2,0,0,252,255,255,255,252,255,255,255,56,49,0,0,162,1,0,0,108,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,80,49,0,0,190,2,0,0,244,2,0,0,252,255,255,255,252,255,255,255,80,49,0,0,66,1,0,0,86,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,104,49,0,0,246,0,0,0,66,3,0,0,248,255,255,255,248,255,255,255,104,49,0,0,238,1,0,0,236,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,128,49,0,0,62,1,0,0,112,2,0,0,248,255,255,255,248,255,255,255,128,49,0,0,142,1,0,0,142,0,0,0,0,0,0,0,0,0,0,0,112,0,0,0,0,0,0,0,152,49,0,0,56,0,0,0,6,2,0,0,104,0,0,0,248,255,255,255,152,49,0,0,28,3,0,0,224,1,0,0,144,255,255,255,144,255,255,255,152,49,0,0,226,0,0,0,216,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,49,0,0,172,2,0,0,26,1,0,0,180,1,0,0,46,2,0,0,106,1,0,0,138,0,0,0,24,1,0,0,20,2,0,0,118,1,0,0,58,2,0,0,64,0,0,0,100,1,0,0,98,1,0,0,228,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,49,0,0,102,2,0,0,240,1,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,49,0,0,32,3,0,0,244,1,0,0,194,0,0,0,176,1,0,0,16,1,0,0,90,2,0,0,58,1,0,0,108,2,0,0,162,2,0,0,156,0,0,0,146,0,0,0,136,0,0,0,128,2,0,0,246,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,49,0,0,184,1,0,0,234,1,0,0,76,1,0,0,224,2,0,0,216,2,0,0,44,2,0,0,38,2,0,0,20,2,0,0,118,1,0,0,34,0,0,0,64,0,0,0,242,2,0,0,16,3,0,0,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,50,0,0,172,0,0,0,160,1,0,0,126,0,0,0,134,1,0,0,182,2,0,0,74,1,0,0,40,3,0,0,60,0,0,0,44,1,0,0,40,1,0,0,224,0,0,0,124,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,50,0,0,60,1,0,0,152,0,0,0,126,0,0,0,156,2,0,0,12,0,0,0,106,2,0,0,206,2,0,0,226,2,0,0,0,1,0,0,166,2,0,0,230,1,0,0,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,50,0,0,212,2,0,0,84,1,0,0,126,0,0,0,106,0,0,0,78,1,0,0,76,0,0,0,186,1,0,0,52,3,0,0,232,1,0,0,76,2,0,0,0,2,0,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,50,0,0,218,0,0,0,218,1,0,0,126,0,0,0,110,2,0,0,140,2,0,0,36,1,0,0,178,2,0,0,8,1,0,0,208,0,0,0,196,1,0,0,152,2,0,0,144,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,50,0,0,250,0,0,0,36,0,0,0,114,1,0,0,176,1,0,0,16,1,0,0,90,2,0,0,36,2,0,0,108,2,0,0,162,2,0,0,144,1,0,0,250,1,0,0,182,0,0,0,58,3,0,0,26,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,50,0,0,28,0,0,0,192,2,0,0,100,2,0,0,224,2,0,0,216,2,0,0,44,2,0,0,30,1,0,0,20,2,0,0,118,1,0,0,88,2,0,0,134,0,0,0,32,0,0,0,98,1,0,0,214,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,50,0,0,112,1,0,0,166,1,0,0,56,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,50,0,0,36,3,0,0,72,2,0,0,168,0,0,0,174,1,0,0,214,0,0,0,72,0,0,0,184,2,0,0,46,1,0,0,0,0,0,0,0,0,0,0,44,29,0,0,92,51,0,0,156,51,0,0,176,51,0,0,52,51,0,0,72,51,0,0,132,51,0,0,112,51,0,0,84,29,0,0,64,29,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105].concat([116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,50,99,108,53,69,114,114,111,114,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,0,0,0,0,104,32,0,0,0,0,0,0,120,32,0,0,0,0,0,0,136,32,0,0,184,44,0,0,0,0,0,0,0,0,0,0,152,32,0,0,184,44,0,0,0,0,0,0,0,0,0,0,168,32,0,0,184,44,0,0,0,0,0,0,0,0,0,0,192,32,0,0,0,45,0,0,0,0,0,0,0,0,0,0,216,32,0,0,184,44,0,0,0,0,0,0,0,0,0,0,232,32,0,0,24,32,0,0,0,33,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,0,50,0,0,0,0,0,0,24,32,0,0,72,33,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,8,50,0,0,0,0,0,0,24,32,0,0,144,33,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,16,50,0,0,0,0,0,0,24,32,0,0,216,33,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,24,50,0,0,0,0,0,0,0,0,0,0,32,34,0,0,8,47,0,0,0,0,0,0,0,0,0,0,80,34,0,0,8,47,0,0,0,0,0,0,24,32,0,0,128,34,0,0,0,0,0,0,1,0,0,0,32,49,0,0,0,0,0,0,24,32,0,0,152,34,0,0,0,0,0,0,1,0,0,0,32,49,0,0,0,0,0,0,24,32,0,0,176,34,0,0,0,0,0,0,1,0,0,0,40,49,0,0,0,0,0,0,24,32,0,0,200,34,0,0,0,0,0,0,1,0,0,0,40,49,0,0,0,0,0,0,24,32,0,0,224,34,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,176,50,0,0,0,8,0,0,24,32,0,0,40,35,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,176,50,0,0,0,8,0,0,24,32,0,0,112,35,0,0,0,0,0,0,3,0,0,0,64,48,0,0,2,0,0,0,16,45,0,0,2,0,0,0,160,48,0,0,0,8,0,0,24,32,0,0,184,35,0,0,0,0,0,0,3,0,0,0,64,48,0,0,2,0,0,0,16,45,0,0,2,0,0,0,168,48,0,0,0,8,0,0,0,0,0,0,0,36,0,0,64,48,0,0,0,0,0,0,0,0,0,0,24,36,0,0,64,48,0,0,0,0,0,0,24,32,0,0,48,36,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,48,49,0,0,2,0,0,0,24,32,0,0,72,36,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,48,49,0,0,2,0,0,0,0,0,0,0,96,36,0,0,0,0,0,0,120,36,0,0,184,49,0,0,0,0,0,0,24,32,0,0,152,36,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,184,45,0,0,0,0,0,0,24,32,0,0,224,36,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,208,45,0,0,0,0,0,0,24,32,0,0,40,37,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,232,45,0,0,0,0,0,0,24,32,0,0,112,37,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,184,37,0,0,64,48,0,0,0,0,0,0,0,0,0,0,208,37,0,0,64,48,0,0,0,0,0,0,24,32,0,0,232,37,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,200,49,0,0,2,0,0,0,24,32,0,0,16,38,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,200,49,0,0,2,0,0,0,24,32,0,0,56,38,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,200,49,0,0,2,0,0,0,24,32,0,0,96,38,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,200,49,0,0,2,0,0,0,0,0,0,0,136,38,0,0,24,49,0,0,0,0,0,0,0,0,0,0,160,38,0,0,64,48,0,0,0,0,0,0,24,32,0,0,184,38,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,168,50,0,0,2,0,0,0,24,32,0,0,208,38,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,168,50,0,0,2,0,0,0,0,0,0,0,232,38,0,0,0,0,0,0,16,39,0,0,0,0,0,0,56,39,0,0,208,49,0,0,0,0,0,0,0,0,0,0,88,39,0,0,32,48,0,0,0,0,0,0,0,0,0,0,128,39,0,0,32,48,0,0,0,0,0,0,0,0,0,0,168,39,0,0,0,0,0,0,224,39,0,0,0,0,0,0,24,40,0,0,24,32,0,0,56,40,0,0,3,0,0,0,2,0,0,0,128,49,0,0,2,0,0,0,80,49,0,0,2,8,0,0,0,0,0,0,104,40,0,0,0,0,0,0,136,40,0,0,0,0,0,0,168,40,0,0,0,0,0,0,200,40,0,0,24,32,0,0,224,40,0,0,0,0,0,0,1,0,0,0,152,45,0,0,3,244,255,255,24,32,0,0,16,41,0,0,0,0,0,0,1,0,0,0,168,45,0,0,3,244,255,255,24,32,0,0,64,41,0,0,0,0,0,0,1,0,0,0,152,45,0,0,3,244,255,255,24,32,0,0,112,41,0,0,0,0,0,0,1,0,0,0,168,45,0,0,3,244,255,255,0,0,0,0,160,41,0,0,248,48,0,0,0,0,0,0,0,0,0,0,208,41,0,0,232,48,0,0,0,0,0,0,0,0,0,0,0,42,0,0,224,44,0,0,0,0,0,0,0,0,0,0,24,42,0,0,0,0,0,0,48,42,0,0,240,48,0,0,0,0,0,0,0,0,0,0,72,42,0,0,224,48,0,0,0,0,0,0,0,0,0,0,104,42,0,0,232,48,0,0,0,0,0,0,0,0,0,0,136,42,0,0,0,0,0,0,168,42,0,0,0,0,0,0,200,42,0,0,0,0,0,0,232,42,0,0,24,32,0,0,8,43,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,160,50,0,0,2,0,0,0,24,32,0,0,40,43,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,160,50,0,0,2,0,0,0,24,32,0,0,72,43,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,160,50,0,0,2,0,0,0,24,32,0,0,104,43,0,0,0,0,0,0,2,0,0,0,64,48,0,0,2,0,0,0,160,50,0,0,2,0,0,0,0,0,0,0,136,43,0,0,0,0,0,0,160,43,0,0,0,0,0,0,184,43,0,0,0,0,0,0,208,43,0,0,224,48,0,0,0,0,0,0,0,0,0,0,232,43,0,0,232,48,0,0,0,0,0,0,0,0,0,0,0,44,0,0,184,44,0,0,0,0,0,0,0,0,0,0,16,44,0,0,8,51,0,0,0,0,0,0,0,0,0,0,56,44,0,0,8,51,0,0,0,0,0,0,0,0,0,0,96,44,0,0,24,51,0,0,0,0,0,0,0,0,0,0,136,44,0,0,176,44,0,0,0,0,0,0,104,0,0,0,0,0,0,0,80,49,0,0,190,2,0,0,244,2,0,0,152,255,255,255,152,255,255,255,80,49,0,0,66,1,0,0,86,2,0,0,112,0,0,0,0,0,0,0,248,48,0,0,46,3,0,0,4,2,0,0,104,0,0,0,248,255,255,255,248,48,0,0,18,3,0,0,204,2,0,0,144,255,255,255,144,255,255,255,248,48,0,0,152,1,0,0,48,1,0,0,0,0,0,0,112,0,0,0,0,0,0,0,128,49,0,0,62,1,0,0,112,2,0,0,144,255,255,255,144,255,255,255,128,49,0,0,142,1,0,0,142,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,193,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,25,0,0,0,0,0,0,225,13,0,0,0,0,0,0,8,25,0,0,0,0,0,0,1,20,0,0,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[((11440 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11448 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11456 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11472 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11488 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11504 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11520 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11536 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11672 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11688 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11944 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11960 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12040 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12048 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12192 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12208 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12352 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12368 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12448 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12456 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12464 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12480 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12496 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12512 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12520 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12528 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12568 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12576 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12584 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12592 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12696 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12712 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12728 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12744 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12752 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12768 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12784 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12800 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12808 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12816 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12824 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12960 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12968 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12976 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12984 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13000 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13016 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13032 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13048 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13064 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13080 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;
  function ___gxx_personality_v0() {
    }
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return tempRet0 = (tempDouble=ret,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0),ret>>>0;
      }
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }
  function __ZSt9terminatev() {
      _exit(-1234);
    }
  function _llvm_eh_typeid_for(type) {
      return type;
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }function ___cxa_get_exception_ptr(ptr) {
      return ptr;
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr;;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;
  var _llvm_memcpy_p0i8_p0i8_i64=_memcpy;
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.errnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      function get() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      function unget() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }
  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x*y > 4294967295,(x*y)>>>0;
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,tempBufferIndexLookup:null,tempVertexBuffers:null,tempIndexBuffers:null,tempQuadIndexBuffer:null,generateTempBuffers:function (quads) {
        GL.tempBufferIndexLookup = new Uint8Array(GL.MAX_TEMP_BUFFER_SIZE+1);
        GL.tempVertexBuffers = [];
        GL.tempIndexBuffers = [];
        var last = -1, curr = -1;
        var size = 1;
        for (var i = 0; i <= GL.MAX_TEMP_BUFFER_SIZE; i++) {
          if (i > size) {
            size <<= 1;
          }
          if (size != last) {
            curr++;
            GL.tempVertexBuffers[curr] = Module.ctx.createBuffer();
            Module.ctx.bindBuffer(Module.ctx.ARRAY_BUFFER, GL.tempVertexBuffers[curr]);
            Module.ctx.bufferData(Module.ctx.ARRAY_BUFFER, size, Module.ctx.DYNAMIC_DRAW);
            Module.ctx.bindBuffer(Module.ctx.ARRAY_BUFFER, null);
            GL.tempIndexBuffers[curr] = Module.ctx.createBuffer();
            Module.ctx.bindBuffer(Module.ctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[curr]);
            Module.ctx.bufferData(Module.ctx.ELEMENT_ARRAY_BUFFER, size, Module.ctx.DYNAMIC_DRAW);
            Module.ctx.bindBuffer(Module.ctx.ELEMENT_ARRAY_BUFFER, null);
            last = size;
          }
          GL.tempBufferIndexLookup[i] = curr;
        }
        if (quads) {
          // GL_QUAD indexes can be precalculated
          GL.tempQuadIndexBuffer = Module.ctx.createBuffer();
          Module.ctx.bindBuffer(Module.ctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          Module.ctx.bufferData(Module.ctx.ELEMENT_ARRAY_BUFFER, quadIndexes, Module.ctx.STATIC_DRAW);
          Module.ctx.bindBuffer(Module.ctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },findToken:function (source, token) {
        function isIdentChar(ch) {
          if (ch >= 48 && ch <= 57) // 0-9
            return true;
          if (ch >= 65 && ch <= 90) // A-Z
            return true;
          if (ch >= 97 && ch <= 122) // a-z
            return true;
          return false;
        }
        var i = -1;
        do {
          i = source.indexOf(token, i + 1);
          if (i < 0) {
            break;
          }
          if (i > 0 && isIdentChar(source[i - 1])) {
            continue;
          }
          i += token.length;
          if (i < source.length - 1 && isIdentChar(source[i + 1])) {
            continue;
          }
          return true;
        } while (true);
        return false;
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        // Let's see if we need to enable the standard derivatives extension
        type = Module.ctx.getShaderParameter(GL.shaders[shader], 0x8B4F /* GL_SHADER_TYPE */);
        if (type == 0x8B30 /* GL_FRAGMENT_SHADER */) {
          if (GL.findToken(source, "dFdx") ||
              GL.findToken(source, "dFdy") ||
              GL.findToken(source, "fwidth")) {
            source = "#extension GL_OES_standard_derivatives : enable\n" + source;
            var extension = Module.ctx.getExtension("OES_standard_derivatives");
          }
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type === 'Integer') {
              // fall through, see gles2_conformance.cpp
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = Module.ctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
        if (ret === undefined) {
          var result = Module.ctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))|0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[(p)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            assert(GL.floatExt, 'Must have OES_texture_float to use float textures');
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            internalFormat = Module.ctx.RGBA;
            break;
          default:
            throw 'Invalid type (' + type + ')';
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        }
      },enabledClientAttribIndices:[],enableVertexAttribArray:function enableVertexAttribArray(index) {
        if (!GL.enabledClientAttribIndices[index]) {
          GL.enabledClientAttribIndices[index] = true;
          Module.ctx.enableVertexAttribArray(index);
        }
      },disableVertexAttribArray:function disableVertexAttribArray(index) {
        if (GL.enabledClientAttribIndices[index]) {
          GL.enabledClientAttribIndices[index] = false;
          Module.ctx.disableVertexAttribArray(index);
        }
      },initExtensions:function () {
        if (GL.initExtensions.done) return;
        GL.initExtensions.done = true;
        if (!Module.useWebGL) return; // an app might link both gl and 2d backends
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
        GL.maxVertexAttribs = Module.ctx.getParameter(Module.ctx.MAX_VERTEX_ATTRIBS);
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        GL.compressionExt = Module.ctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            Module.ctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            Module.ctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
        GL.anisotropicExt = Module.ctx.getExtension('EXT_texture_filter_anisotropic') ||
                            Module.ctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            Module.ctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
        GL.floatExt = Module.ctx.getExtension('OES_texture_float');
        // Tested on WebKit and FF25
        GL.vaoExt = Module.ctx.getExtension('OES_vertex_array_object');     
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources" ];
        function shouldEnableAutomatically(extension) {
          for(var i in automaticallyEnabledExtensions) {
            var include = automaticallyEnabledExtensions[i];
            if (ext.indexOf(include) != -1) {
              return true;
            }
          }
          return false;
        }
        var extensions = Module.ctx.getSupportedExtensions();
        for(var e in extensions) {
          var ext = extensions[e].replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            Module.ctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = Module.ctx.getProgramParameter(p, Module.ctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = Module.ctx.getActiveUniform(p, i);
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = Module.ctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = Module.ctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
            GL.uniforms[id] = loc;
          }
        }
      }};var CL={cl_init:0,cl_extensions:["KHR_GL_SHARING","KHR_fp16","KHR_fp64"],cl_digits:[1,2,3,4,5,6,7,8,9,0],cl_kernels_sig:{},cl_structs_sig:{},cl_pn_type:[],cl_objects:{},cl_objects_retains:{},cl_elapsed_time:0,cl_objects_counter:0,init:function () {
        if (CL.cl_init == 0) {
          console.log('%c WebCL-Translator V2.0 by Anthony Liot & Steven Eliuk ! ', 'background: #222; color: #bada55');
          var nodejs = (typeof window === 'undefined');
          if(nodejs) {
            webcl = require('../webcl');
          }
          if (webcl == undefined) {
            alert("Unfortunately your system does not support WebCL. " +
            "Make sure that you have WebKit Samsung or Firefox Nokia plugin");
            console.error("Unfortunately your system does not support WebCL.\n");
            console.error("Make sure that you have WebKit Samsung or Firefox Nokia plugin\n");  
          } else {
            // Add webcl constant for parser
            webcl["SAMPLER"]          = 0x1300;
            webcl["IMAGE2D"]          = 0x1301;
            webcl["UNSIGNED_LONG"]    = 0x1302;
            for (var i = 0; i < CL.cl_extensions.length; i ++) {
              if (webcl.enableExtension(CL.cl_extensions[i])) {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" supported.");
              } else {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" not supported !!!");
              }
            }
            CL.cl_init = 1;
          }
        }
        return CL.cl_init;
      },udid:function (obj) {    
        var _id;
        if (obj !== undefined) {
          if ( obj.hasOwnProperty('udid') ) {
           _id = obj.udid;
           if (_id !== undefined) {
             return _id;
           }
          }
        }
        var _uuid = [];
        _uuid[0] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length-1]; // First digit of udid can't be 0
        for (var i = 1; i < 6; i++) _uuid[i] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length];
        _id = _uuid.join('');
        // /!\ Call udid when you add inside cl_objects if you pass object in parameter
        if (obj !== undefined) {
          Object.defineProperty(obj, "udid", { value : _id,writable : false });
          CL.cl_objects[_id]=obj;
          CL.cl_objects_counter++;
          //console.info("Counter++ HashMap Object : " + CL.cl_objects_counter + " - Udid : " + _id);
        }
        return _id;      
      },stringType:function (pn_type) {
        switch(pn_type) {
          case webcl.SIGNED_INT8:
            return 'INT8';
          case webcl.SIGNED_INT16:
            return 'INT16';
          case webcl.SIGNED_INT32:
            return 'INT32';
          case webcl.UNSIGNED_INT8:
            return 'UINT8';
          case webcl.UNSIGNED_INT16:
            return 'UINT16';
          case webcl.UNSIGNED_INT32:
            return 'UINT32';
          case webcl.UNSIGNED_LONG:
            return 'ULONG';          
          case webcl.FLOAT:
            return 'FLOAT';
          case webcl.LOCAL:
            return '__local';   
          case webcl.SAMPLER:
            return 'sampler_t';   
          case webcl.IMAGE2D:
            return 'image2d_t';          
          default:
            if (typeof(pn_type) == "string") return 'struct';
            return 'UNKNOWN';
        }
      },parseType:function (string) {
        var _value = -1;
        // First ulong for the webcl validator
        if ( (string.indexOf("ulong") >= 0 ) || (string.indexOf("unsigned long") >= 0 ) ) {
          // \todo : long ???? 
          _value = webcl.UNSIGNED_LONG;  
        } else if (string.indexOf("float") >= 0 ) {
          _value = webcl.FLOAT;
        } else if ( (string.indexOf("uchar") >= 0 ) || (string.indexOf("unsigned char") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT8;
        } else if ( string.indexOf("char") >= 0 ) {
          _value = webcl.SIGNED_INT8;
        } else if ( (string.indexOf("ushort") >= 0 ) || (string.indexOf("unsigned short") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT16;
        } else if ( string.indexOf("short") >= 0 ) {
          _value = webcl.SIGNED_INT16;                     
        } else if ( (string.indexOf("uint") >= 0 ) || (string.indexOf("unsigned int") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT32;          
        } else if ( ( string.indexOf("int") >= 0 ) || ( string.indexOf("enum") >= 0 ) ) {
          _value = webcl.SIGNED_INT32;
        } else if ( string.indexOf("image2d_t") >= 0 ) {
          _value = webcl.IMAGE2D;
        } else if ( string.indexOf("sampler_t") >= 0 ) {
          _value = webcl.SAMPLER;
        }
        return _value;
      },parseStruct:function (kernel_string,struct_name) {
        // Experimental parse of Struct
        // Search kernel function like 'struct_name { }' or '{ } struct_name'
        // --------------------------------------------------------------------------------
        // Step 1 : Search pattern struct_name { }
        // Step 2 : if no result : Search pattern { } struct_name
        // Step 3 : if no result : return
        // Step 4 : split by ; // Num of variable of the structure  : int toto; float tata;
        // Step 5 : split by , // Num of variable for each type     : float toto,tata,titi;
        // Step 6 : Search pattern [num] // Array Variable          : float toto[4];
        // Step 7 : Search type of the line
        // Step 8 : if exist add type else search other struct
        // --------------------------------------------------------------------------------
        CL.cl_structs_sig[struct_name] = [];
        // search pattern : struct_name { } ;
        var _re_before = new RegExp(struct_name+"[\ ]"+"\{([^}]+)\}");
        // search pattern : { } struct_name;
        var _re_after = new RegExp("\{([^}]+)\}"+"[\ ]"+struct_name);
        var _res = kernel_string.match(_re_before);
        var _contains_struct = "";
        if (_res != null && _res.length == 2) {
          _contains_struct = _res[1];
        } else {
          _res = kernel_string.match(_re_after);
          if (_res != null && _res.length == 2) {
              _contains_struct = _res[1];
          } else {
            return;
          }
        }
        var _var = _contains_struct.split(";");
        for (var i = 0; i < _var.length-1; i++ ) {
          // Need for unsigned int width, height;
          var _subvar = _var[i].split(","); 
          // Get type of the line
          var _type = CL.parseType(_var[i]);
          // Need for float mu[4];
          var _arrayNum = 0;
          _res = _var[i].match(/[0-9]+/); 
          if (_res != null) _arrayNum = _res;
          if ( _type != -1) {
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name].push(_type);
            }
          } else {
            // Search name of the parameter
            var _struct = _subvar[0].replace(/^\s+|\s+$/g, ""); // trim
            var _name = "";
            var _start = _struct.lastIndexOf(" "); 
            for (var j = _start - 1; j >= 0 ; j--) {
              var _chara = _struct.charAt(j);
              if (_chara == ' ' && _name.length > 0) {
                break;
              } else if (_chara != ' ') {
                _name = _chara + _name;
              }
            }
            // If struct is unknow search it
            if (!(_name in CL.cl_structs_sig && CL.cl_structs_sig[_name].length > 0)) {
              CL.parseStruct(kernel_string,_name);
            }
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name] = CL.cl_structs_sig[struct_name].concat(CL.cl_structs_sig[_name]);  
            }
          }
        }
      },parseKernel:function (kernel_string) {
        // Experimental parse of Kernel
        // ----------------------------
        //
        // /!\ The minify kernel could be use by the program but some trouble with line
        // /!\ containing macro #define, for the moment only use the minify kernel for 
        // /!\ parsing __kernel and struct
        //
        // Search kernel function like __kernel ... NAME ( p1 , p2 , p3)  
        // --------------------------------------------------------------------------------
        // Step 1 : Minimize kernel removing all the comment and \r \n \t and multispace
        // Step 2 : Search pattern __kernel ... ( ... )
        // Step 3 : For each kernel
        // Step 3 . 1 : Search Open Brace
        // Step 3 . 2 : Search Kernel Name
        // Step 3 . 3 : Search Kernel Parameter
        // Step 3 . 4 : Grab { name : [ param, ... ] }
        // --------------------------------------------------------------------------------
        // Remove all comments ...
        var _mini_kernel_string  = kernel_string.replace(/(?:((["'])(?:(?:\\\\)|\\\2|(?!\\\2)\\|(?!\2).|[\n\r])*\2)|(\/\*(?:(?!\*\/).|[\n\r])*\*\/)|(\/\/[^\n\r]*(?:[\n\r]+|$))|((?:=|:)\s*(?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/)[gimy]?\.(?:exec|test|match|search|replace|split)\()|(\.(?:exec|test|match|search|replace|split)\((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|(<!--(?:(?!-->).)*-->))/g
  , "");
        // Remove all char \n \r \t ...
        _mini_kernel_string = _mini_kernel_string.replace(/\n/g, " ");
        _mini_kernel_string = _mini_kernel_string.replace(/\r/g, " ");
        // Remove all the multispace
        _mini_kernel_string = _mini_kernel_string.replace(/\s{2,}/g, " ");
        // Search pattern : __kernel ... ( ... )
        // var _matches = _mini_kernel_string.match(/__kernel[A-Za-z0-9_\s]+\(([^)]+)\)/g);
        // if (_matches == null) {
        //   console.error("/!\\ Not found kernel !!!");
        //   return;
        // }
        // Search kernel (Pattern doesn't work with extra __attribute__)
        var _matches = [];
        var _found = 1;
        var _stringKern = _mini_kernel_string;
        var _security = 10;
        // Search all the kernel
        while (_found && _security) {
          // Just in case no more than 10 loop
          _security --;
          var _kern = _stringKern.indexOf("__kernel");
          if (_kern == -1) {
            _found = 0;
            continue;
          }
          _stringKern = _stringKern.substr(_kern + 8,_stringKern.length - _kern);
          var _brace = _stringKern.indexOf("{");
          var _stringKern2 = _stringKern.substr(0,_brace);
          var _braceOpen = _stringKern2.lastIndexOf("(");
          var _braceClose = _stringKern2.lastIndexOf(")");
          var _stringKern3 = _stringKern2.substr(0,_braceOpen);
          var _space = _stringKern3.lastIndexOf(" ");
          _stringKern2 = _stringKern2.substr(_space,_braceClose);
          // Add the kernel result like name_kernel(..., ... ,...)
          _matches.push(_stringKern2);
        }
        // For each kernel ....
        for (var i = 0; i < _matches.length; i ++) {
          // Search the open Brace
          var _brace = _matches[i].lastIndexOf("(");
          // Part before '('
          var _first_part = _matches[i].substr(0,_brace);
          _first_part = _first_part.replace(/^\s+|\s+$/g, ""); // trim
          // Part after ')'
          var _second_part = _matches[i].substr(_brace+1,_matches[i].length-_brace-2);
          _second_part = _second_part.replace(/^\s+|\s+$/g, ""); // trim
          // Search name part
          var _name = _first_part.substr(_first_part.lastIndexOf(" ") + 1);
          // Do not reparse again if the file was already parse (ie: Reduce sample)
          if (_name in CL.cl_kernels_sig) return;
          // Search parameter part
          var _param = [];
          var _array = _second_part.split(","); 
          for (var j = 0; j < _array.length; j++) {
            var _type = CL.parseType(_array[j]);
            if (_array[j].indexOf("__local") >= 0 ) {
              _param.push(webcl.LOCAL);
            } else if (_type == -1) {
              _array[j] = _array[j].replace(/^\s+|\s+$/g, "");
              _array[j] = _array[j].replace("*", "");
              var _start = _array[j].lastIndexOf(" "); 
              if (_start != -1) {
                var _kernels_struct_name = "";
                // Search Parameter type Name
                for (var k = _start - 1; k >= 0 ; k--) {
                  var _chara = _array[j].charAt(k);
                  if (_chara == ' ' && _kernels_struct_name.length > 0) {
                    break;
                  } else if (_chara != ' ') {
                    _kernels_struct_name = _chara + _kernels_struct_name;
                  }
                }
                // Parse struct only if is not already inside the map
                if (!(_kernels_struct_name in CL.cl_structs_sig))
                  CL.parseStruct(_mini_kernel_string, _kernels_struct_name);
                // Add the name of the struct inside the map of param kernel
                _param.push(_kernels_struct_name);         
              } else {
                _param.push(webcl.FLOAT);
              }
            } else {
              _param.push(_type);
            }
          }        
          CL.cl_kernels_sig[_name] = _param;
        }
        for (var name in CL.cl_kernels_sig) {
          var _length = CL.cl_kernels_sig[name].length;
          var _str = "";
          for (var i = 0; i < _length ; i++) {
            var _type = CL.cl_kernels_sig[name][i];
            _str += _type + "("+CL.stringType(_type)+")";
            if (i < _length - 1) _str += ", ";
          }
          console.info("Kernel " + name + "(" + _length + ")");  
          console.info("\t" + _str);  
        }
        for (var name in CL.cl_structs_sig) {
          var _length = CL.cl_structs_sig[name].length;
          var _str = "";
          for (var i = 0; i < _length ; i++) {
            var _type = CL.cl_structs_sig[name][i];
            _str += _type + "("+CL.stringType(_type)+")";
            if (i < _length - 1) _str += ", ";
          }
          console.info("\n\tStruct " + name + "(" + _length + ")");  
          console.info("\t\t" + _str);              
        }
        return _mini_kernel_string;
      },getImageSizeType:function (image) {
        var _sizeType = 0;
        var _info = CL.cl_objects[image].getInfo(webcl.IMAGE_FORMAT);
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _sizeType = 1;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
          case webcl.HALF_FLOAT:
            _sizeType = 2;      
            break;
          case webcl.SIGNED_INT32:
          case webcl.UNSIGNED_INT32:      
          case webcl.FLOAT:
            _sizeType = 4;
            break;
          default:
            console.error("getImageSizeType : This channel type is not yet implemented => "+_info.channelType);
        }
        return _sizeType;
      },getImageFormatType:function (image) {
        var _type = 0;
        var _info = CL.cl_objects[image].getInfo(webcl.IMAGE_FORMAT);
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
            _type = webcl.SIGNED_INT8;
            break;
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _type = webcl.UNSIGNED_INT8;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
            _type = webcl.SIGNED_INT16;
            break;
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
            _type = webcl.UNSIGNED_INT16;
            break;
          case webcl.SIGNED_INT32:
            _type = SIGNED_INT32;
          case webcl.UNSIGNED_INT32:
            _type = UNSIGNED_INT32;
            break;        
          case webcl.FLOAT:
            _type = webcl.FLOAT;
            break;
          default:
            console.error("getImageFormatType : This channel type is not yet implemented => "+_info.channelType);
        }
        return _type;
      },getImageSizeOrder:function (image) {
        var _sizeOrder = 0;
        var _info = CL.cl_objects[image].getInfo(webcl.IMAGE_FORMAT);
        switch (_info.channelOrder) {
          case webcl.R:
          case webcl.A:
          case webcl.INTENSITY:
          case webcl.LUMINANCE:
            _sizeOrder = 1;
            break;
          case webcl.RG:
          case webcl.RA:
            _sizeOrder = 2;
            break;
          case webcl.RGB:
            _sizeOrder = 3;
            break; 
          case webcl.RGBA:
          case webcl.BGRA:
          case webcl.ARGB:      
            _sizeOrder = 4;
            break;        
          default:
            console.error("getImageFormatType : This channel order is not yet implemented => "+_info.channelOrder);
        }
        return _sizeOrder;
      },getCopyPointerToArray:function (ptr,size,type) { 
        var _host_ptr = null;
        if (type.length == 0) {
        }
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;         
            default:
              _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
          // console.info("------");
          // _host_ptr = new DataView(new ArrayBuffer(size));
          // var _offset = 0;
          // for (var i = 0; i < type.length; i++) {
          //   var _type = type[i][0];
          //   var _num = type[i][1];
          //   switch(_type) {
          //     case webcl.SIGNED_INT8:
          //       _host_ptr.setInt8(_offset,new Int8Array( HEAP8.subarray((ptr+_offset),(ptr+_offset+_num)) ));
          //       console.info("setInt8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.SIGNED_INT16:
          //       _host_ptr.setInt16(_offset,new Int16Array( HEAP16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) ));
          //       console.info("setInt16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.SIGNED_INT32:
          //       _host_ptr.setInt32(_offset,new Int32Array( HEAP32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setInt32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //     case webcl.UNSIGNED_INT8:
          //       _host_ptr.setUint8(_offset,new Uint8Array( HEAPU8.subarray((ptr+_offset),(ptr+_offset+_num)) ));
          //       console.info("setUint8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.UNSIGNED_INT16:
          //       host_ptr.setUint16(_offset,new Uint16Array( HEAPU16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) ));
          //       console.info("setUint16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.UNSIGNED_INT32:
          //       _host_ptr.setUint32(_offset,new Uint32Array( HEAPU32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setUint32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;         
          //     default:
          //       _host_ptr.setFloat32(_offset,new Float32Array( HEAPF32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setFloat32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //   }
          // }
        }
        return _host_ptr;
      },getReferencePointerToArray:function (ptr,size,type) {  
        var _host_ptr = null;
        if (type.length == 0) {
        }
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = HEAP8.subarray((ptr),(ptr+size));
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = HEAP16.subarray((ptr)>>1,(ptr+size)>>1);
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = HEAP32.subarray((ptr)>>2,(ptr+size)>>2);
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = HEAPU8.subarray((ptr),(ptr+size));
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = HEAPU16.subarray((ptr)>>1,(ptr+size)>>1);
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = HEAPU32.subarray((ptr)>>2,(ptr+size)>>2);
              break;         
            default:
              _host_ptr = HEAPF32.subarray((ptr)>>2,(ptr+size)>>2);
              break;
          }
        } else {
          _host_ptr = HEAPF32.subarray((ptr)>>2,(ptr+size)>>2);
          // console.info("------");
          // _host_ptr = new DataView(new ArrayBuffer(size));
          // var _offset = 0;
          // for (var i = 0; i < type.length; i++) {
          //   var _type = type[i][0];
          //   var _num = type[i][1];
          //   switch(_type) {
          //     case webcl.SIGNED_INT8:
          //       _host_ptr.setInt8(_offset,HEAP8.subarray((ptr+_offset),(ptr+_offset+_num)) );
          //       console.info("setInt8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.SIGNED_INT16:
          //       _host_ptr.setInt16(_offset,HEAP16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) );
          //       console.info("setInt16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.SIGNED_INT32:
          //       _host_ptr.setInt32(_offset,HEAP32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setInt32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //     case webcl.UNSIGNED_INT8:
          //       _host_ptr.setUint8(_offset,HEAPU8.subarray((ptr+_offset),(ptr+_offset+_num)) );
          //       console.info("setUint8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.UNSIGNED_INT16:
          //       host_ptr.setUint16(_offset,HEAPU16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) );
          //       console.info("setUint16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.UNSIGNED_INT32:
          //       _host_ptr.setUint32(_offset,HEAPU32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setUint32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;         
          //     default:
          //       _host_ptr.setFloat32(_offset,HEAPF32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setFloat32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //   }
          // }
        }
        return _host_ptr;
      },catchError:function (e) {
        console.error(e);
        var _error = -1;
        if (e instanceof WebCLException) {
          var _str=e.message;
          var _n=_str.lastIndexOf(" ");
          _error = _str.substr(_n+1,_str.length-_n-1);
        }
        return _error;
      }};function _clGetDeviceInfo(device,param_name,param_value_size,param_value,param_value_size_ret) {
      var  _info = null;
      try { 
          var _object = CL.cl_objects[device];
          _info = _object.getInfo(param_name);
      } catch (e) {
        var _error = CL.catchError(e);
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
        return _error;
      }
      if(typeof(_info) == "number") {
        if (param_value_size == 8) {
          if (param_value != 0) (tempI64 = [_info>>>0,(Math_abs(_info) >= 1 ? (_info > 0 ? Math_min(Math_floor((_info)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((_info - +(((~~(_info)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((param_value)>>2)]=tempI64[0],HEAP32[(((param_value)+(4))>>2)]=tempI64[1]);
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=8;
        } else {
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
        } 
      } else if(typeof(_info) == "boolean") {
        if (param_value != 0) (_info == true) ? HEAP32[((param_value)>>2)]=1 : HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
      } else if(typeof(_info) == "string") {
        if (param_value != 0) writeStringToMemory(_info, param_value);
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length;
      } else if(typeof(_info) == "object") {
        if (_info instanceof Int32Array) {
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_info[i];
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
        } else if (_info instanceof WebCLPlatform) {
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
        } else if (_info == null) {
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
        } else {
          return webcl.INVALID_VALUE;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
      return webcl.SUCCESS;
    }
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  var _sqrtf=Math_sqrt;
  function _clEnqueueWriteBuffer(command_queue,buffer,blocking_write,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
      var _event_wait_list = [];
      var _host_ptr = CL.getReferencePointerToArray(ptr,cb,CL.cl_pn_type);
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
      try {
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],blocking_write,offset,cb,_host_ptr,_event_wait_list,_event);    
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],blocking_write,offset,cb,_host_ptr,_event_wait_list);    
        }
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;  
    }
  function _clFinish(command_queue) {
      try {
        CL.cl_objects[command_queue].finish();
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;
    }
  function _clGetDeviceIDs(platform,device_type_i64_1,device_type_i64_2,num_entries,devices,num_devices) {
      // Assume the device_type is i32 
      assert(device_type_i64_2 == 0, 'Invalid device_type i64');
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
      if ( num_entries == 0 && devices != 0) {
        return webcl.INVALID_VALUE;
      }
      if ( num_devices == 0 && devices == 0) {
        return webcl.INVALID_VALUE;
      }
      if ( platform != 0 && !(platform in CL.cl_objects)) {
        return webcl.INVALID_PLATFORM;  
      }
      var _device = null;
      try {
        // If platform is NULL use the first platform found ...
        if (platform == 0) {
          var _platforms = webcl.getPlatforms();
          if (_platforms.length == 0) {
            return webcl.INVALID_PLATFORM;  
          }
          // Create a new UDID 
          platform = CL.udid(_platforms[0]);
        } 
        var _platform = CL.cl_objects[platform];
        _devices = _platform.getDevices(device_type_i64_1);
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      if (num_devices != 0) {
        HEAP32[((num_devices)>>2)]=_devices.length /* Num of device */;
      } 
      if (devices != 0) {
        for (var i = 0; i < Math.min(num_entries,_devices.length); i++) {
          var _id = CL.udid(_devices[i]);
          HEAP32[(((devices)+(i*4))>>2)]=_id;
        }
      }
      return webcl.SUCCESS;
    }
  function _clGetPlatformIDs(num_entries,platforms,num_platforms) {
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
      if ( num_entries == 0 && platforms != 0) {
        return webcl.INVALID_VALUE;
      }
      if ( num_platforms == 0 && platforms == 0) {
        return webcl.INVALID_VALUE;
      }
      var _platforms = null;
      try { 
        _platforms = webcl.getPlatforms();
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      if (num_platforms != 0) {
        HEAP32[((num_platforms)>>2)]=_platforms.length /* Num of platforms */;
      } 
      if (platforms != 0) {
        for (var i = 0; i < Math.min(num_entries,_platforms.length); i++) {
          var _id = CL.udid(_platforms[i]);
          HEAP32[(((platforms)+(i*4))>>2)]=_id;
        }
      }
      return webcl.SUCCESS;
    }
  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }
  function _glEnable(x0) { Module.ctx.enable(x0) }
  function _glBindTexture(target, texture) {
      Module.ctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }
  function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
        pixels = data.pixels;
      } else {
        pixels = null;
      }
      Module.ctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
  function _glDisable(x0) { Module.ctx.disable(x0) }
  function _glIsEnabled(x0) { return Module.ctx.isEnabled(x0) }
  function _glGetBooleanv(name_, p) {
      return GL.get(name_, p, 'Boolean');
    }
  function _glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(Module.ctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = Module.ctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = Module.ctx.createShader(shaderType);
      return id;
    }
  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      Module.ctx.shaderSource(GL.shaders[shader], source);
    }
  function _glCompileShader(shader) {
      Module.ctx.compileShader(GL.shaders[shader]);
    }
  function _glAttachShader(program, shader) {
      Module.ctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  function _glDetachShader(program, shader) {
      Module.ctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  function _glUseProgram(program) {
      Module.ctx.useProgram(program ? GL.programs[program] : null);
    }
  function _glDeleteProgram(program) {
      var program = GL.programs[program];
      Module.ctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }
  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      Module.ctx.bindAttribLocation(GL.programs[program], index, name);
    }
  function _glLinkProgram(program) {
      Module.ctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }
  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
      if (target == Module.ctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
      } else if (target == Module.ctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
      Module.ctx.bindBuffer(target, bufferObj);
    }
  function _glGetFloatv(name_, p) {
      return GL.get(name_, p, 'Float');
    }
  function _glHint(x0, x1) { Module.ctx.hint(x0, x1) }
  function _glEnableVertexAttribArray(index) {
      Module.ctx.enableVertexAttribArray(index);
    }
  function _glDisableVertexAttribArray(index) {
      Module.ctx.disableVertexAttribArray(index);
    }
  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      Module.ctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }
  function _glActiveTexture(x0) { Module.ctx.activeTexture(x0) }var GLEmulation={fogStart:0,fogEnd:1,fogDensity:1,fogColor:null,fogMode:2048,fogEnabled:false,vaos:[],currentVao:null,enabledVertexAttribArrays:{},hasRunInit:false,init:function () {
        // Do not activate immediate/emulation code (e.g. replace glDrawElements) when in FULL_ES2 mode.
        // We do not need full emulation, we instead emulate client-side arrays etc. in FULL_ES2 code in
        // a straightforward manner, and avoid not having a bound buffer be ambiguous between es2 emulation
        // code and legacy gl emulation code.
        if (GLEmulation.hasRunInit) {
          return;
        }
        GLEmulation.hasRunInit = true;
        GLEmulation.fogColor = new Float32Array(4);
        // Add some emulation workarounds
        Module.printErr('WARNING: using emscripten GL emulation. This is a collection of limited workarounds, do not expect it to work.');
        Module.printErr('WARNING: using emscripten GL emulation unsafe opts. If weirdness happens, try -s GL_UNSAFE_OPTS=0');
        // XXX some of the capabilities we don't support may lead to incorrect rendering, if we do not emulate them in shaders
        var validCapabilities = {
          0x0B44: 1, // GL_CULL_FACE
          0x0BE2: 1, // GL_BLEND
          0x0BD0: 1, // GL_DITHER,
          0x0B90: 1, // GL_STENCIL_TEST
          0x0B71: 1, // GL_DEPTH_TEST
          0x0C11: 1, // GL_SCISSOR_TEST
          0x8037: 1, // GL_POLYGON_OFFSET_FILL
          0x809E: 1, // GL_SAMPLE_ALPHA_TO_COVERAGE
          0x80A0: 1  // GL_SAMPLE_COVERAGE
        };
        var glEnable = _glEnable;
        _glEnable = function _glEnable(cap) {
          // Clean up the renderer on any change to the rendering state. The optimization of
          // skipping renderer setup is aimed at the case of multiple glDraw* right after each other
          if (GL.immediate.lastRenderer) GL.immediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            GLEmulation.fogEnabled = true;
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glEnableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glEnableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glEnable(cap);
        };
        var glDisable = _glDisable;
        _glDisable = function _glDisable(cap) {
          if (GL.immediate.lastRenderer) GL.immediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            GLEmulation.fogEnabled = false;
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glDisableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glDisableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glDisable(cap);
        };
        _glIsEnabled = function _glIsEnabled(cap) {
          if (cap == 0x0B60 /* GL_FOG */) {
            return GLEmulation.fogEnabled ? 1 : 0;
          } else if (!(cap in validCapabilities)) {
            return 0;
          }
          return Module.ctx.isEnabled(cap);
        };
        var glGetBooleanv = _glGetBooleanv;
        _glGetBooleanv = function _glGetBooleanv(pname, p) {
          var attrib = GLEmulation.getAttributeFromCapability(pname);
          if (attrib !== null) {
            var result = GL.immediate.enabledClientAttributes[attrib];
            HEAP8[(p)]=result === true ? 1 : 0;
            return;
          }
          glGetBooleanv(pname, p);
        };
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x84E2: pname = Module.ctx.MAX_TEXTURE_IMAGE_UNITS /* fake it */; break; // GL_MAX_TEXTURE_UNITS
            case 0x8B4A: { // GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
              var result = Module.ctx.getParameter(Module.ctx.MAX_VERTEX_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B49: { // GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
              var result = Module.ctx.getParameter(Module.ctx.MAX_FRAGMENT_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B4B: { // GL_MAX_VARYING_FLOATS_ARB
              var result = Module.ctx.getParameter(Module.ctx.MAX_VARYING_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8871: pname = Module.ctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS /* close enough */; break; // GL_MAX_TEXTURE_COORDS
            case 0x807A: { // GL_VERTEX_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x807B: { // GL_VERTEX_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x807C: { // GL_VERTEX_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8081: { // GL_COLOR_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8082: { // GL_COLOR_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x8083: { // GL_COLOR_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8088: { // GL_TEXTURE_COORD_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8089: { // GL_TEXTURE_COORD_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x808A: { // GL_TEXTURE_COORD_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
          }
          glGetIntegerv(pname, params);
        };
        var glGetString = _glGetString;
        _glGetString = function _glGetString(name_) {
          if (GL.stringCache[name_]) return GL.stringCache[name_];
          switch(name_) {
            case 0x1F03 /* GL_EXTENSIONS */: // Add various extensions that we can support
              var ret = allocate(intArrayFromString(Module.ctx.getSupportedExtensions().join(' ') +
                     ' GL_EXT_texture_env_combine GL_ARB_texture_env_crossbar GL_ATI_texture_env_combine3 GL_NV_texture_env_combine4 GL_EXT_texture_env_dot3 GL_ARB_multitexture GL_ARB_vertex_buffer_object GL_EXT_framebuffer_object GL_ARB_vertex_program GL_ARB_fragment_program GL_ARB_shading_language_100 GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_fragment_shader GL_ARB_texture_cube_map GL_EXT_draw_range_elements' +
                     (GL.compressionExt ? ' GL_ARB_texture_compression GL_EXT_texture_compression_s3tc' : '') +
                     (GL.anisotropicExt ? ' GL_EXT_texture_filter_anisotropic' : '')
              ), 'i8', ALLOC_NORMAL);
              GL.stringCache[name_] = ret;
              return ret;
          }
          return glGetString(name_);
        };
        // Do some automatic rewriting to work around GLSL differences. Note that this must be done in
        // tandem with the rest of the program, by itself it cannot suffice.
        // Note that we need to remember shader types for this rewriting, saving sources makes it easier to debug.
        GL.shaderInfos = {};
        var glCreateShader = _glCreateShader;
        _glCreateShader = function _glCreateShader(shaderType) {
          var id = glCreateShader(shaderType);
          GL.shaderInfos[id] = {
            type: shaderType,
            ftransform: false
          };
          return id;
        };
        var glShaderSource = _glShaderSource;
        _glShaderSource = function _glShaderSource(shader, count, string, length) {
          var source = GL.getSource(shader, count, string, length);
          // XXX We add attributes and uniforms to shaders. The program can ask for the # of them, and see the
          // ones we generated, potentially confusing it? Perhaps we should hide them.
          if (GL.shaderInfos[shader].type == Module.ctx.VERTEX_SHADER) {
            // Replace ftransform() with explicit project/modelview transforms, and add position and matrix info.
            var has_pm = source.search(/u_projection/) >= 0;
            var has_mm = source.search(/u_modelView/) >= 0;
            var has_pv = source.search(/a_position/) >= 0;
            var need_pm = 0, need_mm = 0, need_pv = 0;
            var old = source;
            source = source.replace(/ftransform\(\)/g, '(u_projection * u_modelView * a_position)');
            if (old != source) need_pm = need_mm = need_pv = 1;
            old = source;
            source = source.replace(/gl_ProjectionMatrix/g, 'u_projection');
            if (old != source) need_pm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrixTranspose\[2\]/g, 'vec4(u_modelView[0][2], u_modelView[1][2], u_modelView[2][2], u_modelView[3][2])'); // XXX extremely inefficient
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrix/g, 'u_modelView');
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_Vertex/g, 'a_position');
            if (old != source) need_pv = 1;
            old = source;
            source = source.replace(/gl_ModelViewProjectionMatrix/g, '(u_projection * u_modelView)');
            if (old != source) need_pm = need_mm = 1;
            if (need_pv && !has_pv) source = 'attribute vec4 a_position; \n' + source;
            if (need_mm && !has_mm) source = 'uniform mat4 u_modelView; \n' + source;
            if (need_pm && !has_pm) source = 'uniform mat4 u_projection; \n' + source;
            GL.shaderInfos[shader].ftransform = need_pm || need_mm || need_pv; // we will need to provide the fixed function stuff as attributes and uniforms
            for (var i = 0; i < GL.immediate.MAX_TEXTURES; i++) {
              // XXX To handle both regular texture mapping and cube mapping, we use vec4 for tex coordinates.
              var old = source;
              var need_vtc = source.search('v_texCoord' + i) == -1;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i)
                             .replace(new RegExp('gl_MultiTexCoord' + i, 'g'), 'a_texCoord' + i);
              if (source != old) {
                source = 'attribute vec4 a_texCoord' + i + '; \n' + source;
                if (need_vtc) {
                  source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
                }
              }
              old = source;
              source = source.replace(new RegExp('gl_TextureMatrix\\[' + i + '\\]', 'g'), 'u_textureMatrix' + i);
              if (source != old) {
                source = 'uniform mat4 u_textureMatrix' + i + '; \n' + source;
              }
            }
            if (source.indexOf('gl_FrontColor') >= 0) {
              source = 'varying vec4 v_color; \n' +
                       source.replace(/gl_FrontColor/g, 'v_color');
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'attribute vec4 a_color; \n' +
                       source.replace(/gl_Color/g, 'a_color');
            }
            if (source.indexOf('gl_Normal') >= 0) {
              source = 'attribute vec3 a_normal; \n' +
                       source.replace(/gl_Normal/g, 'a_normal');
            }
            // fog
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
          } else { // Fragment shader
            for (var i = 0; i < GL.immediate.MAX_TEXTURES; i++) {
              var old = source;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i);
              if (source != old) {
                source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
              }
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'varying vec4 v_color; \n' + source.replace(/gl_Color/g, 'v_color');
            }
            if (source.indexOf('gl_Fog.color') >= 0) {
              source = 'uniform vec4 u_fogColor;   \n' +
                       source.replace(/gl_Fog.color/g, 'u_fogColor');
            }
            if (source.indexOf('gl_Fog.end') >= 0) {
              source = 'uniform float u_fogEnd;   \n' +
                       source.replace(/gl_Fog.end/g, 'u_fogEnd');
            }
            if (source.indexOf('gl_Fog.scale') >= 0) {
              source = 'uniform float u_fogScale;   \n' +
                       source.replace(/gl_Fog.scale/g, 'u_fogScale');
            }
            if (source.indexOf('gl_Fog.density') >= 0) {
              source = 'uniform float u_fogDensity;   \n' +
                       source.replace(/gl_Fog.density/g, 'u_fogDensity');
            }
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = 'precision mediump float;\n' + source;
          }
          Module.ctx.shaderSource(GL.shaders[shader], source);
        };
        var glCompileShader = _glCompileShader;
        _glCompileShader = function _glCompileShader(shader) {
          Module.ctx.compileShader(GL.shaders[shader]);
        };
        GL.programShaders = {};
        var glAttachShader = _glAttachShader;
        _glAttachShader = function _glAttachShader(program, shader) {
          if (!GL.programShaders[program]) GL.programShaders[program] = [];
          GL.programShaders[program].push(shader);
          glAttachShader(program, shader);
        };
        var glDetachShader = _glDetachShader;
        _glDetachShader = function _glDetachShader(program, shader) {
          var programShader = GL.programShaders[program];
          if (!programShader) {
            Module.printErr('WARNING: _glDetachShader received invalid program: ' + program);
            return;
          }
          var index = programShader.indexOf(shader);
          programShader.splice(index, 1);
          glDetachShader(program, shader);
        };
        var glUseProgram = _glUseProgram;
        _glUseProgram = function _glUseProgram(program) {
          if (GL.currProgram != program) {
            GL.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = program;
          }
          glUseProgram(program);
        }
        var glDeleteProgram = _glDeleteProgram;
        _glDeleteProgram = function _glDeleteProgram(program) {
          glDeleteProgram(program);
          if (program == GL.currProgram) GL.currProgram = 0;
        };
        // If attribute 0 was not bound, bind it to 0 for WebGL performance reasons. Track if 0 is free for that.
        var zeroUsedPrograms = {};
        var glBindAttribLocation = _glBindAttribLocation;
        _glBindAttribLocation = function _glBindAttribLocation(program, index, name) {
          if (index == 0) zeroUsedPrograms[program] = true;
          glBindAttribLocation(program, index, name);
        };
        var glLinkProgram = _glLinkProgram;
        _glLinkProgram = function _glLinkProgram(program) {
          if (!(program in zeroUsedPrograms)) {
            Module.ctx.bindAttribLocation(GL.programs[program], 0, 'a_position');
          }
          glLinkProgram(program);
        };
        var glBindBuffer = _glBindBuffer;
        _glBindBuffer = function _glBindBuffer(target, buffer) {
          glBindBuffer(target, buffer);
          if (target == Module.ctx.ARRAY_BUFFER) {
            if (GLEmulation.currentVao) {
              assert(GLEmulation.currentVao.arrayBuffer == buffer || GLEmulation.currentVao.arrayBuffer == 0 || buffer == 0, 'TODO: support for multiple array buffers in vao');
              GLEmulation.currentVao.arrayBuffer = buffer;
            }
          } else if (target == Module.ctx.ELEMENT_ARRAY_BUFFER) {
            if (GLEmulation.currentVao) GLEmulation.currentVao.elementArrayBuffer = buffer;
          }
        };
        var glGetFloatv = _glGetFloatv;
        _glGetFloatv = function _glGetFloatv(pname, params) {
          if (pname == 0x0BA6) { // GL_MODELVIEW_MATRIX
            HEAPF32.set(GL.immediate.matrix['m'], params >> 2);
          } else if (pname == 0x0BA7) { // GL_PROJECTION_MATRIX
            HEAPF32.set(GL.immediate.matrix['p'], params >> 2);
          } else if (pname == 0x0BA8) { // GL_TEXTURE_MATRIX
            HEAPF32.set(GL.immediate.matrix['t' + GL.immediate.clientActiveTexture], params >> 2);
          } else if (pname == 0x0B66) { // GL_FOG_COLOR
            HEAPF32.set(GLEmulation.fogColor, params >> 2);
          } else if (pname == 0x0B63) { // GL_FOG_START
            HEAPF32[((params)>>2)]=GLEmulation.fogStart;
          } else if (pname == 0x0B64) { // GL_FOG_END
            HEAPF32[((params)>>2)]=GLEmulation.fogEnd;
          } else if (pname == 0x0B62) { // GL_FOG_DENSITY
            HEAPF32[((params)>>2)]=GLEmulation.fogDensity;
          } else if (pname == 0x0B65) { // GL_FOG_MODE
            HEAPF32[((params)>>2)]=GLEmulation.fogMode;
          } else {
            glGetFloatv(pname, params);
          }
        };
        var glHint = _glHint;
        _glHint = function _glHint(target, mode) {
          if (target == 0x84EF) { // GL_TEXTURE_COMPRESSION_HINT
            return;
          }
          glHint(target, mode);
        };
        var glEnableVertexAttribArray = _glEnableVertexAttribArray;
        _glEnableVertexAttribArray = function _glEnableVertexAttribArray(index) {
          glEnableVertexAttribArray(index);
          GLEmulation.enabledVertexAttribArrays[index] = 1;
          if (GLEmulation.currentVao) GLEmulation.currentVao.enabledVertexAttribArrays[index] = 1;
        };
        var glDisableVertexAttribArray = _glDisableVertexAttribArray;
        _glDisableVertexAttribArray = function _glDisableVertexAttribArray(index) {
          glDisableVertexAttribArray(index);
          delete GLEmulation.enabledVertexAttribArrays[index];
          if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledVertexAttribArrays[index];
        };
        var glVertexAttribPointer = _glVertexAttribPointer;
        _glVertexAttribPointer = function _glVertexAttribPointer(index, size, type, normalized, stride, pointer) {
          glVertexAttribPointer(index, size, type, normalized, stride, pointer);
          if (GLEmulation.currentVao) { // TODO: avoid object creation here? likely not hot though
            GLEmulation.currentVao.vertexAttribPointers[index] = [index, size, type, normalized, stride, pointer];
          }
        };
      },getAttributeFromCapability:function (cap) {
        var attrib = null;
        switch (cap) {
          case 0x0de1: // GL_TEXTURE_2D - XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support it
            abort("GL_TEXTURE_2D is not a spec-defined capability for gl{Enable,Disable}ClientState.");
            // Fall through:
          case 0x8078: // GL_TEXTURE_COORD_ARRAY
            attrib = GL.immediate.TEXTURE0 + GL.immediate.clientActiveTexture; break;
          case 0x8074: // GL_VERTEX_ARRAY
            attrib = GL.immediate.VERTEX; break;
          case 0x8075: // GL_NORMAL_ARRAY
            attrib = GL.immediate.NORMAL; break;
          case 0x8076: // GL_COLOR_ARRAY
            attrib = GL.immediate.COLOR; break;
        }
        return attrib;
      }};var GLImmediate={MapTreeLib:null,spawnMapTreeLib:function () {
        /* A naive implementation of a map backed by an array, and accessed by
         * naive iteration along the array. (hashmap with only one bucket)
         */
        function CNaiveListMap() {
          var list = [];
          this.insert = function CNaiveListMap_insert(key, val) {
            if (this.contains(key|0)) return false;
            list.push([key, val]);
            return true;
          };
          var __contains_i;
          this.contains = function CNaiveListMap_contains(key) {
            for (__contains_i = 0; __contains_i < list.length; ++__contains_i) {
              if (list[__contains_i][0] === key) return true;
            }
            return false;
          };
          var __get_i;
          this.get = function CNaiveListMap_get(key) {
            for (__get_i = 0; __get_i < list.length; ++__get_i) {
              if (list[__get_i][0] === key) return list[__get_i][1];
            }
            return undefined;
          };
        };
        /* A tree of map nodes.
          Uses `KeyView`s to allow descending the tree without garbage.
          Example: {
            // Create our map object.
            var map = new ObjTreeMap();
            // Grab the static keyView for the map.
            var keyView = map.GetStaticKeyView();
            // Let's make a map for:
            // root: <undefined>
            //   1: <undefined>
            //     2: <undefined>
            //       5: "Three, sir!"
            //       3: "Three!"
            // Note how we can chain together `Reset` and `Next` to
            // easily descend based on multiple key fragments.
            keyView.Reset().Next(1).Next(2).Next(5).Set("Three, sir!");
            keyView.Reset().Next(1).Next(2).Next(3).Set("Three!");
          }
        */
        function CMapTree() {
          function CNLNode() {
            var map = new CNaiveListMap();
            this.child = function CNLNode_child(keyFrag) {
              if (!map.contains(keyFrag|0)) {
                map.insert(keyFrag|0, new CNLNode());
              }
              return map.get(keyFrag|0);
            };
            this.value = undefined;
            this.get = function CNLNode_get() {
              return this.value;
            };
            this.set = function CNLNode_set(val) {
              this.value = val;
            };
          }
          function CKeyView(root) {
            var cur;
            this.reset = function CKeyView_reset() {
              cur = root;
              return this;
            };
            this.reset();
            this.next = function CKeyView_next(keyFrag) {
              cur = cur.child(keyFrag);
              return this;
            };
            this.get = function CKeyView_get() {
              return cur.get();
            };
            this.set = function CKeyView_set(val) {
              cur.set(val);
            };
          };
          var root;
          var staticKeyView;
          this.createKeyView = function CNLNode_createKeyView() {
            return new CKeyView(root);
          }
          this.clear = function CNLNode_clear() {
            root = new CNLNode();
            staticKeyView = this.createKeyView();
          };
          this.clear();
          this.getStaticKeyView = function CNLNode_getStaticKeyView() {
            staticKeyView.reset();
            return staticKeyView;
          };
        };
        // Exports:
        return {
          create: function() {
            return new CMapTree();
          },
        };
      },TexEnvJIT:null,spawnTexEnvJIT:function () {
        // GL defs:
        var GL_TEXTURE0 = 0x84C0;
        var GL_TEXTURE_1D = 0x0DE0;
        var GL_TEXTURE_2D = 0x0DE1;
        var GL_TEXTURE_3D = 0x806f;
        var GL_TEXTURE_CUBE_MAP = 0x8513;
        var GL_TEXTURE_ENV = 0x2300;
        var GL_TEXTURE_ENV_MODE = 0x2200;
        var GL_TEXTURE_ENV_COLOR = 0x2201;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        var GL_SRC0_RGB = 0x8580;
        var GL_SRC1_RGB = 0x8581;
        var GL_SRC2_RGB = 0x8582;
        var GL_SRC0_ALPHA = 0x8588;
        var GL_SRC1_ALPHA = 0x8589;
        var GL_SRC2_ALPHA = 0x858A;
        var GL_OPERAND0_RGB = 0x8590;
        var GL_OPERAND1_RGB = 0x8591;
        var GL_OPERAND2_RGB = 0x8592;
        var GL_OPERAND0_ALPHA = 0x8598;
        var GL_OPERAND1_ALPHA = 0x8599;
        var GL_OPERAND2_ALPHA = 0x859A;
        var GL_COMBINE_RGB = 0x8571;
        var GL_COMBINE_ALPHA = 0x8572;
        var GL_RGB_SCALE = 0x8573;
        var GL_ALPHA_SCALE = 0x0D1C;
        // env.mode
        var GL_ADD      = 0x0104;
        var GL_BLEND    = 0x0BE2;
        var GL_REPLACE  = 0x1E01;
        var GL_MODULATE = 0x2100;
        var GL_DECAL    = 0x2101;
        var GL_COMBINE  = 0x8570;
        // env.color/alphaCombiner
        //var GL_ADD         = 0x0104;
        //var GL_REPLACE     = 0x1E01;
        //var GL_MODULATE    = 0x2100;
        var GL_SUBTRACT    = 0x84E7;
        var GL_INTERPOLATE = 0x8575;
        // env.color/alphaSrc
        var GL_TEXTURE       = 0x1702;
        var GL_CONSTANT      = 0x8576;
        var GL_PRIMARY_COLOR = 0x8577;
        var GL_PREVIOUS      = 0x8578;
        // env.color/alphaOp
        var GL_SRC_COLOR           = 0x0300;
        var GL_ONE_MINUS_SRC_COLOR = 0x0301;
        var GL_SRC_ALPHA           = 0x0302;
        var GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        var GL_RGB  = 0x1907;
        var GL_RGBA = 0x1908;
        // Our defs:
        var TEXENVJIT_NAMESPACE_PREFIX = "tej_";
        // Not actually constant, as they can be changed between JIT passes:
        var TEX_UNIT_UNIFORM_PREFIX = "uTexUnit";
        var TEX_COORD_VARYING_PREFIX = "vTexCoord";
        var PRIM_COLOR_VARYING = "vPrimColor";
        var TEX_MATRIX_UNIFORM_PREFIX = "uTexMatrix";
        // Static vars:
        var s_texUnits = null; //[];
        var s_activeTexture = 0;
        var s_requiredTexUnitsForPass = [];
        // Static funcs:
        function abort(info) {
          assert(false, "[TexEnvJIT] ABORT: " + info);
        }
        function abort_noSupport(info) {
          abort("No support: " + info);
        }
        function abort_sanity(info) {
          abort("Sanity failure: " + info);
        }
        function genTexUnitSampleExpr(texUnitID) {
          var texUnit = s_texUnits[texUnitID];
          var texType = texUnit.getTexType();
          var func = null;
          switch (texType) {
            case GL_TEXTURE_1D:
              func = "texture2D";
              break;
            case GL_TEXTURE_2D:
              func = "texture2D";
              break;
            case GL_TEXTURE_3D:
              return abort_noSupport("No support for 3D textures.");
            case GL_TEXTURE_CUBE_MAP:
              func = "textureCube";
              break;
            default:
              return abort_sanity("Unknown texType: 0x" + texType.toString(16));
          }
          var texCoordExpr = TEX_COORD_VARYING_PREFIX + texUnitID;
          if (TEX_MATRIX_UNIFORM_PREFIX != null) {
            texCoordExpr = "(" + TEX_MATRIX_UNIFORM_PREFIX + texUnitID + " * " + texCoordExpr + ")";
          }
          return func + "(" + TEX_UNIT_UNIFORM_PREFIX + texUnitID + ", " + texCoordExpr + ".xy)";
        }
        function getTypeFromCombineOp(op) {
          switch (op) {
            case GL_SRC_COLOR:
            case GL_ONE_MINUS_SRC_COLOR:
              return "vec3";
            case GL_SRC_ALPHA:
            case GL_ONE_MINUS_SRC_ALPHA:
              return "float";
          }
          return Abort_NoSupport("Unsupported combiner op: 0x" + op.toString(16));
        }
        function getCurTexUnit() {
          return s_texUnits[s_activeTexture];
        }
        function genCombinerSourceExpr(texUnitID, constantExpr, previousVar,
                                       src, op)
        {
          var srcExpr = null;
          switch (src) {
            case GL_TEXTURE:
              srcExpr = genTexUnitSampleExpr(texUnitID);
              break;
            case GL_CONSTANT:
              srcExpr = constantExpr;
              break;
            case GL_PRIMARY_COLOR:
              srcExpr = PRIM_COLOR_VARYING;
              break;
            case GL_PREVIOUS:
              srcExpr = previousVar;
              break;
            default:
                return abort_noSupport("Unsupported combiner src: 0x" + src.toString(16));
          }
          var expr = null;
          switch (op) {
            case GL_SRC_COLOR:
              expr = srcExpr + ".rgb";
              break;
            case GL_ONE_MINUS_SRC_COLOR:
              expr = "(vec3(1.0) - " + srcExpr + ".rgb)";
              break;
            case GL_SRC_ALPHA:
              expr = srcExpr + ".a";
              break;
            case GL_ONE_MINUS_SRC_ALPHA:
              expr = "(1.0 - " + srcExpr + ".a)";
              break;
            default:
              return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
          }
          return expr;
        }
        function valToFloatLiteral(val) {
          if (val == Math.round(val)) return val + '.0';
          return val;
        }
        // Classes:
        function CTexEnv() {
          this.mode = GL_MODULATE;
          this.colorCombiner = GL_MODULATE;
          this.alphaCombiner = GL_MODULATE;
          this.colorScale = 1;
          this.alphaScale = 1;
          this.envColor = [0, 0, 0, 0];
          this.colorSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.alphaSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.colorOp = [
            GL_SRC_COLOR,
            GL_SRC_COLOR,
            GL_SRC_ALPHA
          ];
          this.alphaOp = [
            GL_SRC_ALPHA,
            GL_SRC_ALPHA,
            GL_SRC_ALPHA
          ];
          // Map GLenums to small values to efficiently pack the enums to bits for tighter access.
          this.traverseKey = {
            // mode
            0x1E01 /* GL_REPLACE */: 0,
            0x2100 /* GL_MODULATE */: 1,
            0x0104 /* GL_ADD */: 2,
            0x0BE2 /* GL_BLEND */: 3,
            0x2101 /* GL_DECAL */: 4,
            0x8570 /* GL_COMBINE */: 5,
            // additional color and alpha combiners
            0x84E7 /* GL_SUBTRACT */: 3,
            0x8575 /* GL_INTERPOLATE */: 4,
            // color and alpha src
            0x1702 /* GL_TEXTURE */: 0,
            0x8576 /* GL_CONSTANT */: 1,
            0x8577 /* GL_PRIMARY_COLOR */: 2,
            0x8578 /* GL_PREVIOUS */: 3,
            // color and alpha op
            0x0300 /* GL_SRC_COLOR */: 0,
            0x0301 /* GL_ONE_MINUS_SRC_COLOR */: 1,
            0x0302 /* GL_SRC_ALPHA */: 2,
            0x0300 /* GL_ONE_MINUS_SRC_ALPHA */: 3
          };
          // The tuple (key0,key1,key2) uniquely identifies the state of the variables in CTexEnv.
          // -1 on key0 denotes 'the whole cached key is dirty'
          this.key0 = -1;
          this.key1 = 0;
          this.key2 = 0;
          this.computeKey0 = function() {
            var k = this.traverseKey;
            var key = k[this.mode] * 1638400; // 6 distinct values.
            key += k[this.colorCombiner] * 327680; // 5 distinct values.
            key += k[this.alphaCombiner] * 65536; // 5 distinct values.
            // The above three fields have 6*5*5=150 distinct values -> 8 bits.
            key += (this.colorScale-1) * 16384; // 10 bits used.
            key += (this.alphaScale-1) * 4096; // 12 bits used.
            key += k[this.colorSrc[0]] * 1024; // 14
            key += k[this.colorSrc[1]] * 256; // 16
            key += k[this.colorSrc[2]] * 64; // 18
            key += k[this.alphaSrc[0]] * 16; // 20
            key += k[this.alphaSrc[1]] * 4; // 22
            key += k[this.alphaSrc[2]]; // 24 bits used total.
            return key;
          }
          this.computeKey1 = function() {
            var k = this.traverseKey;
            key = k[this.colorOp[0]] * 4096;
            key += k[this.colorOp[1]] * 1024;             
            key += k[this.colorOp[2]] * 256;
            key += k[this.alphaOp[0]] * 16;
            key += k[this.alphaOp[1]] * 4;
            key += k[this.alphaOp[2]];
            return key;            
          }
          // TODO: remove this. The color should not be part of the key!
          this.computeKey2 = function() {
            return this.envColor[0] * 16777216 + this.envColor[1] * 65536 + this.envColor[2] * 256 + 1 + this.envColor[3];
          }
          this.recomputeKey = function() {
            this.key0 = this.computeKey0();
            this.key1 = this.computeKey1();
            this.key2 = this.computeKey2();
          }
          this.invalidateKey = function() {
            this.key0 = -1; // The key of this texture unit must be recomputed when rendering the next time.
            GL.immediate.currentRenderer = null; // The currently used renderer must be re-evaluated at next render.
          }
          this.traverseState = function(keyView) {
            if (this.key0 == -1) {
              this.recomputeKey();
            }
            keyView.next(this.key0);
            keyView.next(this.key1);
            keyView.next(this.key2);
          };
        }
        function CTexUnit() {
          this.env = new CTexEnv();
          this.enabled_tex1D   = false;
          this.enabled_tex2D   = false;
          this.enabled_tex3D   = false;
          this.enabled_texCube = false;
          this.traverseState = function CTexUnit_traverseState(keyView) {
            var texUnitType = this.getTexType();
            keyView.next(texUnitType);
            if (!texUnitType) return;
            this.env.traverseState(keyView);
          };
        };
        // Class impls:
        CTexUnit.prototype.enabled = function CTexUnit_enabled() {
          return this.getTexType() != 0;
        }
        CTexUnit.prototype.genPassLines = function CTexUnit_genPassLines(passOutputVar, passInputVar, texUnitID) {
          if (!this.enabled()) {
            return ["vec4 " + passOutputVar + " = " + passInputVar + ";"];
          }
          return this.env.genPassLines(passOutputVar, passInputVar, texUnitID);
        }
        CTexUnit.prototype.getTexType = function CTexUnit_getTexType() {
          if (this.enabled_texCube) {
            return GL_TEXTURE_CUBE_MAP;
          } else if (this.enabled_tex3D) {
            return GL_TEXTURE_3D;
          } else if (this.enabled_tex2D) {
            return GL_TEXTURE_2D;
          } else if (this.enabled_tex1D) {
            return GL_TEXTURE_1D;
          }
          return 0;
        }
        CTexEnv.prototype.genPassLines = function CTexEnv_genPassLines(passOutputVar, passInputVar, texUnitID) {
          switch (this.mode) {
            case GL_REPLACE: {
              /* RGB:
               * Cv = Cs
               * Av = Ap // Note how this is different, and that we'll
               *            need to track the bound texture internalFormat
               *            to get this right.
               *
               * RGBA:
               * Cv = Cs
               * Av = As
               */
              return [
                "vec4 " + passOutputVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
              ];
            }
            case GL_ADD: {
              /* RGBA:
               * Cv = Cp + Cs
               * Av = ApAs
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                "vec3 " + colorVar + " = " + passInputVar + ".rgb + " + texVar + ".rgb;",
                "float " + alphaVar + " = " + passInputVar + ".a * " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_MODULATE: {
              /* RGBA:
               * Cv = CpCs
               * Av = ApAs
               */
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  passInputVar,
                  " * ",
                  genTexUnitSampleExpr(texUnitID),
                ";",
              ];
              return [line.join("")];
            }
            case GL_DECAL: {
              /* RGBA:
               * Cv = Cp(1 - As) + CsAs
               * Av = Ap
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".a)",
                      " + ",
                    texVar + ".rgb * " + texVar + ".a",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + passInputVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_BLEND: {
              /* RGBA:
               * Cv = Cp(1 - Cs) + CcCs
               * Av = As
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".rgb)",
                      " + ",
                    PRIM_COLOR_VARYING + ".rgb * " + texVar + ".rgb",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_COMBINE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              var colorLines = this.genCombinerLines(true, colorVar,
                                                     passInputVar, texUnitID,
                                                     this.colorCombiner, this.colorSrc, this.colorOp);
              var alphaLines = this.genCombinerLines(false, alphaVar,
                                                     passInputVar, texUnitID,
                                                     this.alphaCombiner, this.alphaSrc, this.alphaOp);
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  "vec4(",
                      colorVar + " * " + valToFloatLiteral(this.colorScale),
                      ", ",
                      alphaVar + " * " + valToFloatLiteral(this.alphaScale),
                  ")",
                ";",
              ].join("");
              return [].concat(colorLines, alphaLines, [line]);
            }
          }
          return Abort_NoSupport("Unsupported TexEnv mode: 0x" + this.mode.toString(16));
        }
        CTexEnv.prototype.genCombinerLines = function CTexEnv_getCombinerLines(isColor, outputVar,
                                                                               passInputVar, texUnitID,
                                                                               combiner, srcArr, opArr)
        {
          var argsNeeded = null;
          switch (combiner) {
            case GL_REPLACE:
              argsNeeded = 1;
              break;
            case GL_MODULATE:
            case GL_ADD:
            case GL_SUBTRACT:
              argsNeeded = 2;
              break;
            case GL_INTERPOLATE:
              argsNeeded = 3;
              break;
            default:
              return abort_noSupport("Unsupported combiner: 0x" + combiner.toString(16));
          }
          var constantExpr = [
            "vec4(",
              valToFloatLiteral(this.envColor[0]),
              ", ",
              valToFloatLiteral(this.envColor[1]),
              ", ",
              valToFloatLiteral(this.envColor[2]),
              ", ",
              valToFloatLiteral(this.envColor[3]),
            ")",
          ].join("");
          var src0Expr = (argsNeeded >= 1) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[0], opArr[0])
                                           : null;
          var src1Expr = (argsNeeded >= 2) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[1], opArr[1])
                                           : null;
          var src2Expr = (argsNeeded >= 3) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[2], opArr[2])
                                           : null;
          var outputType = isColor ? "vec3" : "float";
          var lines = null;
          switch (combiner) {
            case GL_REPLACE: {
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_MODULATE: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " * " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_ADD: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " + " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_SUBTRACT: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " - " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_INTERPOLATE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var arg2Var = prefix + "colorSrc2";
              var arg2Line = getTypeFromCombineOp(this.colorOp[2]) + " " + arg2Var + " = " + src2Expr + ";";
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr + " * " + arg2Var,
                  " + ",
                  src1Expr + " * (1.0 - " + arg2Var + ")",
                ";",
              ];
              lines = [
                arg2Line,
                line.join(""),
              ];
              break;
            }
            default:
              return abort_sanity("Unmatched TexEnv.colorCombiner?");
          }
          return lines;
        }
        return {
          // Exports:
          init: function(gl, specifiedMaxTextureImageUnits) {
            var maxTexUnits = 0;
            if (specifiedMaxTextureImageUnits) {
              maxTexUnits = specifiedMaxTextureImageUnits;
            } else if (gl) {
              maxTexUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            }
            assert(maxTexUnits > 0);
            s_texUnits = [];
            for (var i = 0; i < maxTexUnits; i++) {
              s_texUnits.push(new CTexUnit());
            }
          },
          setGLSLVars: function(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix) {
            TEX_UNIT_UNIFORM_PREFIX   = uTexUnitPrefix;
            TEX_COORD_VARYING_PREFIX  = vTexCoordPrefix;
            PRIM_COLOR_VARYING        = vPrimColor;
            TEX_MATRIX_UNIFORM_PREFIX = uTexMatrixPrefix;
          },
          genAllPassLines: function(resultDest, indentSize) {
            indentSize = indentSize || 0;
            s_requiredTexUnitsForPass.length = 0; // Clear the list.
            var lines = [];
            var lastPassVar = PRIM_COLOR_VARYING;
            for (var i = 0; i < s_texUnits.length; i++) {
              if (!s_texUnits[i].enabled()) continue;
              s_requiredTexUnitsForPass.push(i);
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + i + "_";
              var passOutputVar = prefix + "result";
              var newLines = s_texUnits[i].genPassLines(passOutputVar, lastPassVar, i);
              lines = lines.concat(newLines, [""]);
              lastPassVar = passOutputVar;
            }
            lines.push(resultDest + " = " + lastPassVar + ";");
            var indent = "";
            for (var i = 0; i < indentSize; i++) indent += " ";
            var output = indent + lines.join("\n" + indent);
            return output;
          },
          getUsedTexUnitList: function() {
            return s_requiredTexUnitsForPass;
          },
          traverseState: function(keyView) {
            for (var i = 0; i < s_texUnits.length; i++) {
              var texUnit = s_texUnits[i];
              var enabled = texUnit.enabled();
              keyView.next(enabled);
              if (enabled) {
                texUnit.traverseState(keyView);
              }
            }
          },
          getTexUnitType: function(texUnitID) {
            assert(texUnitID >= 0 &&
                   texUnitID < s_texUnits.length);
            return s_texUnits[texUnitID].getTexType();
          },
          // Hooks:
          hook_activeTexture: function(texture) {
            s_activeTexture = texture - GL_TEXTURE0;
          },
          hook_enable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (!cur.enabled_tex1D) {
                  GL.immediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = true;
                }
                break;
              case GL_TEXTURE_2D:
                if (!cur.enabled_tex2D) {
                  GL.immediate.currentRenderer = null;
                  cur.enabled_tex2D = true;
                }
                break;
              case GL_TEXTURE_3D:
                if (!cur.enabled_tex3D) {
                  GL.immediate.currentRenderer = null;
                  cur.enabled_tex3D = true;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (!cur.enabled_texCube) {
                  GL.immediate.currentRenderer = null;
                  cur.enabled_texCube = true;
                }
                break;
            }
          },
          hook_disable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (cur.enabled_tex1D) {
                  GL.immediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = false;
                }
                break;
              case GL_TEXTURE_2D:
                if (cur.enabled_tex2D) {
                  GL.immediate.currentRenderer = null;
                  cur.enabled_tex2D = false;
                }
                break;
              case GL_TEXTURE_3D:
                if (cur.enabled_tex3D) {
                  GL.immediate.currentRenderer = null;
                  cur.enabled_tex3D = false;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (cur.enabled_texCube) {
                  GL.immediate.currentRenderer = null;
                  cur.enabled_texCube = false;
                }
                break;
            }
          },
          hook_texEnvf: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvf`.');
            }
          },
          hook_texEnvi: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                if (env.mode != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.mode = param;
                }
                break;
              case GL_COMBINE_RGB:
                if (env.colorCombiner != param) {
                  env.invalidateKey();
                  env.colorCombiner = param;
                }
                break;
              case GL_COMBINE_ALPHA:
                if (env.alphaCombiner != param) {
                  env.invalidateKey();
                  env.alphaCombiner = param;
                }
                break;
              case GL_SRC0_RGB:
                if (env.colorSrc[0] != param) {
                  env.invalidateKey();
                  env.colorSrc[0] = param;
                }
                break;
              case GL_SRC1_RGB:
                if (env.colorSrc[1] != param) {
                  env.invalidateKey();
                  env.colorSrc[1] = param;
                }
                break;
              case GL_SRC2_RGB:
                if (env.colorSrc[2] != param) {
                  env.invalidateKey();
                  env.colorSrc[2] = param;
                }
                break;
              case GL_SRC0_ALPHA:
                if (env.alphaSrc[0] != param) {
                  env.invalidateKey();
                  env.alphaSrc[0] = param;
                }
                break;
              case GL_SRC1_ALPHA:
                if (env.alphaSrc[1] != param) {
                  env.invalidateKey();
                  env.alphaSrc[1] = param;
                }
                break;
              case GL_SRC2_ALPHA:
                if (env.alphaSrc[2] != param) {
                  env.invalidateKey();
                  env.alphaSrc[2] = param;
                }
                break;
              case GL_OPERAND0_RGB:
                if (env.colorOp[0] != param) {
                  env.invalidateKey();
                  env.colorOp[0] = param;
                }
                break;
              case GL_OPERAND1_RGB:
                if (env.colorOp[1] != param) {
                  env.invalidateKey();
                  env.colorOp[1] = param;
                }
                break;
              case GL_OPERAND2_RGB:
                if (env.colorOp[2] != param) {
                  env.invalidateKey();
                  env.colorOp[2] = param;
                }
                break;
              case GL_OPERAND0_ALPHA:
                if (env.alphaOp[0] != param) {
                  env.invalidateKey();
                  env.alphaOp[0] = param;
                }
                break;
              case GL_OPERAND1_ALPHA:
                if (env.alphaOp[1] != param) {
                  env.invalidateKey();
                  env.alphaOp[1] = param;
                }
                break;
              case GL_OPERAND2_ALPHA:
                if (env.alphaOp[2] != param) {
                  env.invalidateKey();
                  env.alphaOp[2] = param;
                }
                break;
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey();
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvi`.');
            }
          },
          hook_texEnvfv: function(target, pname, params) {
            if (target != GL_TEXTURE_ENV) return;
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR: {
                for (var i = 0; i < 4; i++) {
                  var param = HEAPF32[(((params)+(i*4))>>2)];
                  if (env.envColor[i] != param) {
                    env.invalidateKey(); // We changed FFP emulation renderer state.
                    env.envColor[i] = param;
                  }
                }
                break
              }
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvfv`.');
            }
          },
        };
      },vertexData:null,vertexDataU8:null,tempData:null,indexData:null,vertexCounter:0,mode:-1,rendererCache:null,rendererComponents:[],rendererComponentPointer:0,lastRenderer:null,lastArrayBuffer:null,lastProgram:null,lastStride:-1,matrix:{},matrixStack:{},currentMatrix:"m",tempMatrix:null,matricesModified:false,useTextureMatrix:false,VERTEX:0,NORMAL:1,COLOR:2,TEXTURE0:3,NUM_ATTRIBUTES:-1,MAX_TEXTURES:-1,totalEnabledClientAttributes:0,enabledClientAttributes:[0,0],clientAttributes:[],liveClientAttributes:[],currentRenderer:null,modifiedClientAttributes:false,clientActiveTexture:0,clientColor:null,usedTexUnitList:[],fixedFunctionProgram:null,setClientAttribute:function setClientAttribute(name, size, type, stride, pointer) {
        var attrib = this.clientAttributes[name];
        if (!attrib) {
          for (var i = 0; i <= name; i++) { // keep flat
            if (!this.clientAttributes[i]) {
              this.clientAttributes[i] = {
                name: name,
                size: size,
                type: type,
                stride: stride,
                pointer: pointer,
                offset: 0
              };
            }
          }
        } else {
          attrib.name = name;
          attrib.size = size;
          attrib.type = type;
          attrib.stride = stride;
          attrib.pointer = pointer;
          attrib.offset = 0;
        }
        this.modifiedClientAttributes = true;
      },addRendererComponent:function addRendererComponent(name, size, type) {
        if (!this.rendererComponents[name]) {
          this.rendererComponents[name] = 1;
          if (this.enabledClientAttributes[name]) {
            console.log("Warning: glTexCoord used after EnableClientState for TEXTURE_COORD_ARRAY for TEXTURE0. Disabling TEXTURE_COORD_ARRAY...");
          }
          this.enabledClientAttributes[name] = true;
          this.setClientAttribute(name, size, type, 0, this.rendererComponentPointer);
          this.rendererComponentPointer += size * GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        } else {
          this.rendererComponents[name]++;
        }
      },disableBeginEndClientAttributes:function disableBeginEndClientAttributes() {
        for (var i = 0; i < this.NUM_ATTRIBUTES; i++) {
          if (this.rendererComponents[i]) this.enabledClientAttributes[i] = false;
        }
      },getRenderer:function getRenderer() {
        // If no FFP state has changed that would have forced to re-evaluate which FFP emulation shader to use,
        // we have the currently used renderer in cache, and can immediately return that.
        if (this.currentRenderer) {
          return this.currentRenderer;
        }
        // return a renderer object given the liveClientAttributes
        // we maintain a cache of renderers, optimized to not generate garbage
        var attributes = GL.immediate.liveClientAttributes;
        var cacheMap = GL.immediate.rendererCache;
        var temp;
        var keyView = cacheMap.getStaticKeyView().reset();
        // By attrib state:
        var enabledAttributesKey = 0;
        for (var i = 0; i < attributes.length; i++) {
          enabledAttributesKey |= 1 << attributes[i].name;
        }
        keyView.next(enabledAttributesKey);
        // By fog state:
        var fogParam = 0;
        if (GLEmulation.fogEnabled) {
          switch (GLEmulation.fogMode) {
            case 0x0801: // GL_EXP2
              fogParam = 1;
              break;
            case 0x2601: // GL_LINEAR
              fogParam = 2;
              break;
            default: // default to GL_EXP
              fogParam = 3;
              break;
          }
        }
        keyView.next(fogParam);
        // By cur program:
        keyView.next(GL.currProgram);
        if (!GL.currProgram) {
          GL.immediate.TexEnvJIT.traverseState(keyView);
        }
        // If we don't already have it, create it.
        var renderer = keyView.get();
        if (!renderer) {
          renderer = this.createRenderer();
          this.currentRenderer = renderer;
          keyView.set(renderer);
          return renderer;
        }
        this.currentRenderer = renderer; // Cache the currently used renderer, so later lookups without state changes can get this fast.
        return renderer;
      },createRenderer:function createRenderer(renderer) {
        var useCurrProgram = !!GL.currProgram;
        var hasTextures = false;
        for (var i = 0; i < GL.immediate.MAX_TEXTURES; i++) {
          var texAttribName = GL.immediate.TEXTURE0 + i;
          if (!GL.immediate.enabledClientAttributes[texAttribName])
            continue;
          if (!useCurrProgram) {
            if (GL.immediate.TexEnvJIT.getTexUnitType(i) == 0) {
               Runtime.warnOnce("GL_TEXTURE" + i + " coords are supplied, but that texture unit is disabled in the fixed-function pipeline.");
            }
          }
          hasTextures = true;
        }
        var ret = {
          init: function init() {
            // For fixed-function shader generation.
            var uTexUnitPrefix = 'u_texUnit';
            var aTexCoordPrefix = 'a_texCoord';
            var vTexCoordPrefix = 'v_texCoord';
            var vPrimColor = 'v_color';
            var uTexMatrixPrefix = GL.immediate.useTextureMatrix ? 'u_textureMatrix' : null;
            if (useCurrProgram) {
              if (GL.shaderInfos[GL.programShaders[GL.currProgram][0]].type == Module.ctx.VERTEX_SHADER) {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
              } else {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
              }
              this.program = GL.programs[GL.currProgram];
              this.usedTexUnitList = [];
            } else {
              // IMPORTANT NOTE: If you parameterize the shader source based on any runtime values
              // in order to create the least expensive shader possible based on the features being
              // used, you should also update the code in the beginning of getRenderer to make sure
              // that you cache the renderer based on the said parameters.
              if (GLEmulation.fogEnabled) {
                switch (GLEmulation.fogMode) {
                  case 0x0801: // GL_EXP2
                    // fog = exp(-(gl_Fog.density * gl_FogFragCoord)^2)
                    var fogFormula = '  float fog = exp(-u_fogDensity * u_fogDensity * ecDistance * ecDistance); \n';
                    break;
                  case 0x2601: // GL_LINEAR
                    // fog = (gl_Fog.end - gl_FogFragCoord) * gl_fog.scale
                    var fogFormula = '  float fog = (u_fogEnd - ecDistance) * u_fogScale; \n';
                    break;
                  default: // default to GL_EXP
                    // fog = exp(-gl_Fog.density * gl_FogFragCoord)
                    var fogFormula = '  float fog = exp(-u_fogDensity * ecDistance); \n';
                    break;
                }
              }
              GL.immediate.TexEnvJIT.setGLSLVars(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix);
              var fsTexEnvPass = GL.immediate.TexEnvJIT.genAllPassLines('gl_FragColor', 2);
              var texUnitAttribList = '';
              var texUnitVaryingList = '';
              var texUnitUniformList = '';
              var vsTexCoordInits = '';
              this.usedTexUnitList = GL.immediate.TexEnvJIT.getUsedTexUnitList();
              for (var i = 0; i < this.usedTexUnitList.length; i++) {
                var texUnit = this.usedTexUnitList[i];
                texUnitAttribList += 'attribute vec4 ' + aTexCoordPrefix + texUnit + ';\n';
                texUnitVaryingList += 'varying vec4 ' + vTexCoordPrefix + texUnit + ';\n';
                texUnitUniformList += 'uniform sampler2D ' + uTexUnitPrefix + texUnit + ';\n';
                vsTexCoordInits += '  ' + vTexCoordPrefix + texUnit + ' = ' + aTexCoordPrefix + texUnit + ';\n';
                if (GL.immediate.useTextureMatrix) {
                  texUnitUniformList += 'uniform mat4 ' + uTexMatrixPrefix + texUnit + ';\n';
                }
              }
              var vsFogVaryingInit = null;
              if (GLEmulation.fogEnabled) {
                vsFogVaryingInit = '  v_fogFragCoord = abs(ecPosition.z);\n';
              }
              var vsSource = [
                'attribute vec4 a_position;',
                'attribute vec4 a_color;',
                'varying vec4 v_color;',
                texUnitAttribList,
                texUnitVaryingList,
                (GLEmulation.fogEnabled ? 'varying float v_fogFragCoord;' : null),
                'uniform mat4 u_modelView;',
                'uniform mat4 u_projection;',
                'void main()',
                '{',
                '  vec4 ecPosition = u_modelView * a_position;', // eye-coordinate position
                '  gl_Position = u_projection * ecPosition;',
                '  v_color = a_color;',
                vsTexCoordInits,
                vsFogVaryingInit,
                '}',
                ''
              ].join('\n').replace(/\n\n+/g, '\n');
              this.vertexShader = Module.ctx.createShader(Module.ctx.VERTEX_SHADER);
              Module.ctx.shaderSource(this.vertexShader, vsSource);
              Module.ctx.compileShader(this.vertexShader);
              var fogHeaderIfNeeded = null;
              if (GLEmulation.fogEnabled) {
                fogHeaderIfNeeded = [
                  '',
                  'varying float v_fogFragCoord; ',
                  'uniform vec4 u_fogColor;      ',
                  'uniform float u_fogEnd;       ',
                  'uniform float u_fogScale;     ',
                  'uniform float u_fogDensity;   ',
                  'float ffog(in float ecDistance) { ',
                  fogFormula,
                  '  fog = clamp(fog, 0.0, 1.0); ',
                  '  return fog;                 ',
                  '}',
                  '',
                ].join("\n");
              }
              var fogPass = null;
              if (GLEmulation.fogEnabled) {
                fogPass = 'gl_FragColor = vec4(mix(u_fogColor.rgb, gl_FragColor.rgb, ffog(v_fogFragCoord)), gl_FragColor.a);\n';
              }
              var fsSource = [
                'precision mediump float;',
                texUnitVaryingList,
                texUnitUniformList,
                'varying vec4 v_color;',
                fogHeaderIfNeeded,
                'void main()',
                '{',
                fsTexEnvPass,
                fogPass,
                '}',
                ''
              ].join("\n").replace(/\n\n+/g, '\n');
              this.fragmentShader = Module.ctx.createShader(Module.ctx.FRAGMENT_SHADER);
              Module.ctx.shaderSource(this.fragmentShader, fsSource);
              Module.ctx.compileShader(this.fragmentShader);
              this.program = Module.ctx.createProgram();
              Module.ctx.attachShader(this.program, this.vertexShader);
              Module.ctx.attachShader(this.program, this.fragmentShader);
              // As optimization, bind all attributes to prespecified locations, so that the FFP emulation
              // code can submit attributes to any generated FFP shader without having to examine each shader in turn.
              // These prespecified locations are only assumed if GL_FFP_ONLY is specified, since user could also create their
              // own shaders that didn't have attributes in the same locations.
              Module.ctx.bindAttribLocation(this.program, GL.immediate.VERTEX, 'a_position');
              Module.ctx.bindAttribLocation(this.program, GL.immediate.COLOR, 'a_color');
              Module.ctx.bindAttribLocation(this.program, GL.immediate.NORMAL, 'a_normal');
              for (var i = 0; i < GL.immediate.MAX_TEXTURES; i++) {
                Module.ctx.bindAttribLocation(this.program, GL.immediate.TEXTURE0 + i, 'a_texCoord'+i);
                Module.ctx.bindAttribLocation(this.program, GL.immediate.TEXTURE0 + i, aTexCoordPrefix+i);
              }
              Module.ctx.linkProgram(this.program);
            }
            // Stores a map that remembers which matrix uniforms are up-to-date in this FFP renderer, so they don't need to be resubmitted
            // each time we render with this program.
            this.textureMatrixVersion = {};
            this.positionLocation = Module.ctx.getAttribLocation(this.program, 'a_position');
            this.texCoordLocations = [];
            for (var i = 0; i < GL.immediate.MAX_TEXTURES; i++) {
              if (!GL.immediate.enabledClientAttributes[GL.immediate.TEXTURE0 + i]) {
                this.texCoordLocations[i] = -1;
                continue;
              }
              if (useCurrProgram) {
                this.texCoordLocations[i] = Module.ctx.getAttribLocation(this.program, 'a_texCoord' + i);
              } else {
                this.texCoordLocations[i] = Module.ctx.getAttribLocation(this.program, aTexCoordPrefix + i);
              }
            }
            if (!useCurrProgram) {
              // Temporarily switch to the program so we can set our sampler uniforms early.
              var prevBoundProg = Module.ctx.getParameter(Module.ctx.CURRENT_PROGRAM);
              Module.ctx.useProgram(this.program);
              {
                for (var i = 0; i < this.usedTexUnitList.length; i++) {
                  var texUnitID = this.usedTexUnitList[i];
                  var texSamplerLoc = Module.ctx.getUniformLocation(this.program, uTexUnitPrefix + texUnitID);
                  Module.ctx.uniform1i(texSamplerLoc, texUnitID);
                }
              }
              Module.ctx.useProgram(prevBoundProg);
            }
            this.textureMatrixLocations = [];
            for (var i = 0; i < GL.immediate.MAX_TEXTURES; i++) {
              this.textureMatrixLocations[i] = Module.ctx.getUniformLocation(this.program, 'u_textureMatrix' + i);
            }
            this.colorLocation = Module.ctx.getAttribLocation(this.program, 'a_color');
            this.normalLocation = Module.ctx.getAttribLocation(this.program, 'a_normal');
            this.modelViewLocation = Module.ctx.getUniformLocation(this.program, 'u_modelView');
            this.projectionLocation = Module.ctx.getUniformLocation(this.program, 'u_projection');
            this.hasTextures = hasTextures;
            this.hasNormal = GL.immediate.enabledClientAttributes[GL.immediate.NORMAL] &&
                             GL.immediate.clientAttributes[GL.immediate.NORMAL].size > 0 &&
                             this.normalLocation >= 0;
            this.hasColor = (this.colorLocation === 0) || this.colorLocation > 0;
            this.floatType = Module.ctx.FLOAT; // minor optimization
            this.fogColorLocation = Module.ctx.getUniformLocation(this.program, 'u_fogColor');
            this.fogEndLocation = Module.ctx.getUniformLocation(this.program, 'u_fogEnd');
            this.fogScaleLocation = Module.ctx.getUniformLocation(this.program, 'u_fogScale');
            this.fogDensityLocation = Module.ctx.getUniformLocation(this.program, 'u_fogDensity');
            this.hasFog = !!(this.fogColorLocation || this.fogEndLocation ||
                             this.fogScaleLocation || this.fogDensityLocation);
          },
          prepare: function prepare() {
            // Calculate the array buffer
            var arrayBuffer;
            if (!GL.currArrayBuffer) {
              var start = GL.immediate.firstVertex*GL.immediate.stride;
              var end = GL.immediate.lastVertex*GL.immediate.stride;
              assert(end <= GL.MAX_TEMP_BUFFER_SIZE, 'too much vertex data');
              arrayBuffer = GL.tempVertexBuffers[GL.tempBufferIndexLookup[end]];
              // TODO: consider using the last buffer we bound, if it was larger. downside is larger buffer, but we might avoid rebinding and preparing
            } else {
              arrayBuffer = GL.currArrayBuffer;
            }
            // If the array buffer is unchanged and the renderer as well, then we can avoid all the work here
            // XXX We use some heuristics here, and this may not work in all cases. Try disabling GL_UNSAFE_OPTS if you
            // have odd glitches
            var lastRenderer = GL.immediate.lastRenderer;
            var canSkip = this == lastRenderer &&
                          arrayBuffer == GL.immediate.lastArrayBuffer &&
                          (GL.currProgram || this.program) == GL.immediate.lastProgram &&
                          GL.immediate.stride == GL.immediate.lastStride &&
                          !GL.immediate.matricesModified;
            if (!canSkip && lastRenderer) lastRenderer.cleanup();
            if (!GL.currArrayBuffer) {
              // Bind the array buffer and upload data after cleaning up the previous renderer
              // Potentially unsafe, since lastArrayBuffer might not reflect the true array buffer in code that mixes immediate/non-immediate
              if (arrayBuffer != GL.immediate.lastArrayBuffer) {
                Module.ctx.bindBuffer(Module.ctx.ARRAY_BUFFER, arrayBuffer);
              }
              Module.ctx.bufferSubData(Module.ctx.ARRAY_BUFFER, start, GL.immediate.vertexData.subarray(start >> 2, end >> 2));
            }
            if (canSkip) return;
            GL.immediate.lastRenderer = this;
            GL.immediate.lastArrayBuffer = arrayBuffer;
            GL.immediate.lastProgram = GL.currProgram || this.program;
            GL.immediate.lastStride == GL.immediate.stride;
            GL.immediate.matricesModified = false;
            if (!GL.currProgram) {
              Module.ctx.useProgram(this.program);
              GL.immediate.fixedFunctionProgram = this.program;
            }
            if (this.modelViewLocation && this.modelViewMatrixVersion != GL.immediate.matrixVersion['m']) {
              this.modelViewMatrixVersion = GL.immediate.matrixVersion['m'];
              Module.ctx.uniformMatrix4fv(this.modelViewLocation, false, GL.immediate.matrix['m']);
            }
            if (this.projectionLocation && this.projectionMatrixVersion != GL.immediate.matrixVersion['p']) {
              this.projectionMatrixVersion = GL.immediate.matrixVersion['p'];
              Module.ctx.uniformMatrix4fv(this.projectionLocation, false, GL.immediate.matrix['p']);
            }
            var clientAttributes = GL.immediate.clientAttributes;
            var posAttr = clientAttributes[GL.immediate.VERTEX];
            if (!GL.currArrayBuffer) {
              Module.ctx.vertexAttribPointer(GL.immediate.VERTEX, posAttr.size, posAttr.type, false, GL.immediate.stride, posAttr.offset);
              GL.enableVertexAttribArray(GL.immediate.VERTEX);
              if (this.hasNormal) {
                var normalAttr = clientAttributes[GL.immediate.NORMAL];
                Module.ctx.vertexAttribPointer(GL.immediate.NORMAL, normalAttr.size, normalAttr.type, true, GL.immediate.stride, normalAttr.offset);
                GL.enableVertexAttribArray(GL.immediate.NORMAL);
              }
            }
            if (this.hasTextures) {
              for (var i = 0; i < GL.immediate.MAX_TEXTURES; i++) {
                if (!GL.currArrayBuffer) {
                  var attribLoc = GL.immediate.TEXTURE0+i;
                  var texAttr = clientAttributes[attribLoc];
                  if (texAttr.size) {
                    Module.ctx.vertexAttribPointer(attribLoc, texAttr.size, texAttr.type, false, GL.immediate.stride, texAttr.offset);
                    GL.enableVertexAttribArray(attribLoc);
                  } else {
                    // These two might be dangerous, but let's try them.
                    Module.ctx.vertexAttrib4f(attribLoc, 0, 0, 0, 1);
                    GL.disableVertexAttribArray(attribLoc);
                  }
                }
                var t = 't'+i;
                if (this.textureMatrixLocations[i] && this.textureMatrixVersion[t] != GL.immediate.matrixVersion[t]) { // XXX might we need this even without the condition we are currently in?
                  this.textureMatrixVersion[t] = GL.immediate.matrixVersion[t];
                  Module.ctx.uniformMatrix4fv(this.textureMatrixLocations[i], false, GL.immediate.matrix[t]);
                }
              }
            }
            if (GL.immediate.enabledClientAttributes[GL.immediate.COLOR]) {
              var colorAttr = clientAttributes[GL.immediate.COLOR];
              if (!GL.currArrayBuffer) {
                Module.ctx.vertexAttribPointer(GL.immediate.COLOR, colorAttr.size, colorAttr.type, true, GL.immediate.stride, colorAttr.offset);
                GL.enableVertexAttribArray(GL.immediate.COLOR);
              }
            } else if (this.hasColor) {
              GL.disableVertexAttribArray(GL.immediate.COLOR);
              Module.ctx.vertexAttrib4fv(GL.immediate.COLOR, GL.immediate.clientColor);
            }
            if (this.hasFog) {
              if (this.fogColorLocation) Module.ctx.uniform4fv(this.fogColorLocation, GLEmulation.fogColor);
              if (this.fogEndLocation) Module.ctx.uniform1f(this.fogEndLocation, GLEmulation.fogEnd);
              if (this.fogScaleLocation) Module.ctx.uniform1f(this.fogScaleLocation, 1/(GLEmulation.fogEnd - GLEmulation.fogStart));
              if (this.fogDensityLocation) Module.ctx.uniform1f(this.fogDensityLocation, GLEmulation.fogDensity);
            }
          },
          cleanup: function cleanup() {
          }
        };
        ret.init();
        return ret;
      },setupFuncs:function () {
        // Replace some functions with immediate-mode aware versions. If there are no client
        // attributes enabled, and we use webgl-friendly modes (no GL_QUADS), then no need
        // for emulation
        _glDrawArrays = function _glDrawArrays(mode, first, count) {
          if (GL.immediate.totalEnabledClientAttributes == 0 && mode <= 6) {
            Module.ctx.drawArrays(mode, first, count);
            return;
          }
          GL.immediate.prepareClientAttributes(count, false);
          GL.immediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GL.immediate.vertexData = HEAPF32.subarray((GL.immediate.vertexPointer)>>2,(GL.immediate.vertexPointer + (first+count)*GL.immediate.stride)>>2); // XXX assuming float
            GL.immediate.firstVertex = first;
            GL.immediate.lastVertex = first + count;
          }
          GL.immediate.flush(null, first);
          GL.immediate.mode = -1;
        };
        _glDrawElements = function _glDrawElements(mode, count, type, indices, start, end) { // start, end are given if we come from glDrawRangeElements
          if (GL.immediate.totalEnabledClientAttributes == 0 && mode <= 6 && GL.currElementArrayBuffer) {
            Module.ctx.drawElements(mode, count, type, indices);
            return;
          }
          if (!GL.currElementArrayBuffer) {
            assert(type == Module.ctx.UNSIGNED_SHORT); // We can only emulate buffers of this kind, for now
          }
          console.log("DrawElements doesn't actually prepareClientAttributes properly.");
          GL.immediate.prepareClientAttributes(count, false);
          GL.immediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GL.immediate.firstVertex = end ? start : TOTAL_MEMORY; // if we don't know the start, set an invalid value and we will calculate it later from the indices
            GL.immediate.lastVertex = end ? end+1 : 0;
            GL.immediate.vertexData = HEAPF32.subarray((GL.immediate.vertexPointer)>>2,((end ? GL.immediate.vertexPointer + (end+1)*GL.immediate.stride : TOTAL_MEMORY))>>2); // XXX assuming float
          }
          GL.immediate.flush(count, 0, indices);
          GL.immediate.mode = -1;
        };
        // TexEnv stuff needs to be prepared early, so do it here.
        // init() is too late for -O2, since it freezes the GL functions
        // by that point.
        GL.immediate.MapTreeLib = GL.immediate.spawnMapTreeLib();
        GL.immediate.spawnMapTreeLib = null;
        GL.immediate.TexEnvJIT = GL.immediate.spawnTexEnvJIT();
        GL.immediate.spawnTexEnvJIT = null;
        GL.immediate.setupHooks();
      },setupHooks:function () {
        if (!GLEmulation.hasRunInit) {
          GLEmulation.init();
        }
        var glActiveTexture = _glActiveTexture;
        _glActiveTexture = function _glActiveTexture(texture) {
          GL.immediate.TexEnvJIT.hook_activeTexture(texture);
          glActiveTexture(texture);
        };
        var glEnable = _glEnable;
        _glEnable = function _glEnable(cap) {
          GL.immediate.TexEnvJIT.hook_enable(cap);
          glEnable(cap);
        };
        var glDisable = _glDisable;
        _glDisable = function _glDisable(cap) {
          GL.immediate.TexEnvJIT.hook_disable(cap);
          glDisable(cap);
        };
        var glTexEnvf = (typeof(_glTexEnvf) != 'undefined') ? _glTexEnvf : function(){};
        _glTexEnvf = function _glTexEnvf(target, pname, param) {
          GL.immediate.TexEnvJIT.hook_texEnvf(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvf(target, pname, param);
        };
        var glTexEnvi = (typeof(_glTexEnvi) != 'undefined') ? _glTexEnvi : function(){};
        _glTexEnvi = function _glTexEnvi(target, pname, param) {
          GL.immediate.TexEnvJIT.hook_texEnvi(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvi(target, pname, param);
        };
        var glTexEnvfv = (typeof(_glTexEnvfv) != 'undefined') ? _glTexEnvfv : function(){};
        _glTexEnvfv = function _glTexEnvfv(target, pname, param) {
          GL.immediate.TexEnvJIT.hook_texEnvfv(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvfv(target, pname, param);
        };
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x8B8D: { // GL_CURRENT_PROGRAM
              // Just query directly so we're working with WebGL objects.
              var cur = Module.ctx.getParameter(Module.ctx.CURRENT_PROGRAM);
              if (cur == GL.immediate.fixedFunctionProgram) {
                // Pretend we're not using a program.
                HEAP32[((params)>>2)]=0;
                return;
              }
              break;
            }
          }
          glGetIntegerv(pname, params);
        };
      },initted:false,init:function () {
        Module.printErr('WARNING: using emscripten GL immediate mode emulation. This is very limited in what it supports');
        GL.immediate.initted = true;
        if (!Module.useWebGL) return; // a 2D canvas may be currently used TODO: make sure we are actually called in that case
        this.TexEnvJIT.init(Module.ctx);
        // User can override the maximum number of texture units that we emulate. Using fewer texture units increases runtime performance
        // slightly, so it is advantageous to choose as small value as needed.
        GL.immediate.MAX_TEXTURES = Module['GL_MAX_TEXTURE_IMAGE_UNITS'] || Module.ctx.getParameter(Module.ctx.MAX_TEXTURE_IMAGE_UNITS);
        GL.immediate.NUM_ATTRIBUTES = 3 /*pos+normal+color attributes*/ + GL.immediate.MAX_TEXTURES;
        GL.immediate.clientAttributes = [];
        GLEmulation.enabledClientAttribIndices = [];
        for (var i = 0; i < GL.immediate.NUM_ATTRIBUTES; i++) {
          GL.immediate.clientAttributes.push({});
          GLEmulation.enabledClientAttribIndices.push(false);
        }
        this.matrixStack['m'] = [];
        this.matrixStack['p'] = [];
        for (var i = 0; i < GL.immediate.MAX_TEXTURES; i++) {
          this.matrixStack['t' + i] = [];
        }
        // Initialize matrix library
        // When user sets a matrix, increment a 'version number' on the new data, and when rendering, submit
        // the matrices to the shader program only if they have an old version of the data.
        GL.immediate.matrixVersion = {};
        GL.immediate.matrix['m'] = GL.immediate.matrix.lib.mat4.create();
        GL.immediate.matrixVersion['m'] = 0;
        GL.immediate.matrix.lib.mat4.identity(GL.immediate.matrix['m']);
        GL.immediate.matrix['p'] = GL.immediate.matrix.lib.mat4.create();
        GL.immediate.matrixVersion['p'] = 0;
        GL.immediate.matrix.lib.mat4.identity(GL.immediate.matrix['p']);
        for (var i = 0; i < GL.immediate.MAX_TEXTURES; i++) {
          GL.immediate.matrix['t' + i] = GL.immediate.matrix.lib.mat4.create();
          GL.immediate.matrixVersion['t' + i] = 0;
        }
        // Renderer cache
        this.rendererCache = this.MapTreeLib.create();
        // Buffers for data
        this.tempData = new Float32Array(GL.MAX_TEMP_BUFFER_SIZE >> 2);
        this.indexData = new Uint16Array(GL.MAX_TEMP_BUFFER_SIZE >> 1);
        this.vertexDataU8 = new Uint8Array(this.tempData.buffer);
        GL.generateTempBuffers(true);
        this.clientColor = new Float32Array([1, 1, 1, 1]);
      },prepareClientAttributes:function prepareClientAttributes(count, beginEnd) {
        // If no client attributes were modified since we were last called, do nothing. Note that this
        // does not work for glBegin/End, where we generate renderer components dynamically and then
        // disable them ourselves, but it does help with glDrawElements/Arrays.
        if (!this.modifiedClientAttributes) {
          GL.immediate.vertexCounter = (GL.immediate.stride * count) / 4; // XXX assuming float
          return;
        }
        this.modifiedClientAttributes = false;
        var stride = 0, start;
        var attributes = GL.immediate.liveClientAttributes;
        attributes.length = 0;
        for (var i = 0; i < GL.immediate.NUM_ATTRIBUTES; i++) {
          if (GL.immediate.enabledClientAttributes[i]) attributes.push(GL.immediate.clientAttributes[i]);
        }
        attributes.sort(function(x, y) { return !x ? (!y ? 0 : 1) : (!y ? -1 : (x.pointer - y.pointer)) });
        start = GL.currArrayBuffer ? 0 : attributes[0].pointer;
        var multiStrides = false;
        for (var i = 0; i < attributes.length; i++) {
          var attribute = attributes[i];
          if (!attribute) break;
          if (stride != 0 && stride != attribute.stride) multiStrides = true;
          if (attribute.stride) stride = attribute.stride;
        }
        if (multiStrides) stride = 0; // we will need to restride
        var bytes = 0; // total size in bytes
        if (!stride && !beginEnd) {
          // beginEnd can not have stride in the attributes, that is fine. otherwise,
          // no stride means that all attributes are in fact packed. to keep the rest of
          // our emulation code simple, we perform unpacking/restriding here. this adds overhead, so
          // it is a good idea to not hit this!
          Runtime.warnOnce('Unpacking/restriding attributes, this is slow and dangerous');
          if (!GL.immediate.restrideBuffer) GL.immediate.restrideBuffer = _malloc(GL.MAX_TEMP_BUFFER_SIZE);
          start = GL.immediate.restrideBuffer;
          assert(start % 4 == 0);
          // calculate restrided offsets and total size
          for (var i = 0; i < attributes.length; i++) {
            var attribute = attributes[i];
            if (!attribute) break;
            var size = attribute.size * GL.byteSizeByType[attribute.type - GL.byteSizeByTypeRoot];
            if (size % 4 != 0) size += 4 - (size % 4); // align everything
            attribute.offset = bytes;
            bytes += size;
          }
          assert(count*bytes <= GL.MAX_TEMP_BUFFER_SIZE);
          // copy out the data (we need to know the stride for that, and define attribute.pointer
          for (var i = 0; i < attributes.length; i++) {
            var attribute = attributes[i];
            if (!attribute) break;
            var size4 = Math.floor((attribute.size * GL.byteSizeByType[attribute.type - GL.byteSizeByTypeRoot])/4);
            for (var j = 0; j < count; j++) {
              for (var k = 0; k < size4; k++) { // copy in chunks of 4 bytes, our alignment makes this possible
                HEAP32[((start + attribute.offset + bytes*j)>>2) + k] = HEAP32[(attribute.pointer>>2) + j*size4 + k];
              }
            }
            attribute.pointer = start + attribute.offset;
          }
        } else {
          // normal situation, everything is strided and in the same buffer
          for (var i = 0; i < attributes.length; i++) {
            var attribute = attributes[i];
            if (!attribute) break;
            attribute.offset = attribute.pointer - start;
            if (attribute.offset > bytes) { // ensure we start where we should
              assert((attribute.offset - bytes)%4 == 0); // XXX assuming 4-alignment
              bytes += attribute.offset - bytes;
            }
            bytes += attribute.size * GL.byteSizeByType[attribute.type - GL.byteSizeByTypeRoot];
            if (bytes % 4 != 0) bytes += 4 - (bytes % 4); // XXX assuming 4-alignment
          }
          assert(beginEnd || bytes <= stride); // if not begin-end, explicit stride should make sense with total byte size
          if (bytes < stride) { // ensure the size is that of the stride
            bytes = stride;
          }
        }
        GL.immediate.stride = bytes;
        if (!beginEnd) {
          bytes *= count;
          if (!GL.currArrayBuffer) {
            GL.immediate.vertexPointer = start;
          }
          GL.immediate.vertexCounter = bytes / 4; // XXX assuming float
        }
      },flush:function flush(numProvidedIndexes, startIndex, ptr) {
        assert(numProvidedIndexes >= 0 || !numProvidedIndexes);
        startIndex = startIndex || 0;
        ptr = ptr || 0;
        var renderer = this.getRenderer();
        // Generate index data in a format suitable for GLES 2.0/WebGL
        var numVertexes = 4 * this.vertexCounter / GL.immediate.stride;
        assert(numVertexes % 1 == 0, "`numVertexes` must be an integer.");
        var emulatedElementArrayBuffer = false;
        var numIndexes = 0;
        if (numProvidedIndexes) {
          numIndexes = numProvidedIndexes;
          if (!GL.currArrayBuffer && GL.immediate.firstVertex > GL.immediate.lastVertex) {
            // Figure out the first and last vertex from the index data
            assert(!GL.currElementArrayBuffer); // If we are going to upload array buffer data, we need to find which range to
                                                // upload based on the indices. If they are in a buffer on the GPU, that is very
                                                // inconvenient! So if you do not have an array buffer, you should also not have
                                                // an element array buffer. But best is to use both buffers!
            for (var i = 0; i < numProvidedIndexes; i++) {
              var currIndex = HEAPU16[(((ptr)+(i*2))>>1)];
              GL.immediate.firstVertex = Math.min(GL.immediate.firstVertex, currIndex);
              GL.immediate.lastVertex = Math.max(GL.immediate.lastVertex, currIndex+1);
            }
          }
          if (!GL.currElementArrayBuffer) {
            // If no element array buffer is bound, then indices is a literal pointer to clientside data
            assert(numProvidedIndexes << 1 <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (a)');
            var indexBuffer = GL.tempIndexBuffers[GL.tempBufferIndexLookup[numProvidedIndexes << 1]];
            Module.ctx.bindBuffer(Module.ctx.ELEMENT_ARRAY_BUFFER, indexBuffer);
            Module.ctx.bufferSubData(Module.ctx.ELEMENT_ARRAY_BUFFER, 0, HEAPU16.subarray((ptr)>>1,(ptr + (numProvidedIndexes << 1))>>1));
            ptr = 0;
            emulatedElementArrayBuffer = true;
          }
        } else if (GL.immediate.mode > 6) { // above GL_TRIANGLE_FAN are the non-GL ES modes
          if (GL.immediate.mode != 7) throw 'unsupported immediate mode ' + GL.immediate.mode; // GL_QUADS
          // GL.immediate.firstVertex is the first vertex we want. Quad indexes are in the pattern
          // 0 1 2, 0 2 3, 4 5 6, 4 6 7, so we need to look at index firstVertex * 1.5 to see it.
          // Then since indexes are 2 bytes each, that means 3
          assert(GL.immediate.firstVertex % 4 == 0);
          ptr = GL.immediate.firstVertex*3;
          var numQuads = numVertexes / 4;
          numIndexes = numQuads * 6; // 0 1 2, 0 2 3 pattern
          assert(ptr + (numIndexes << 1) <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (b)');
          Module.ctx.bindBuffer(Module.ctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          emulatedElementArrayBuffer = true;
        }
        renderer.prepare();
        if (numIndexes) {
          Module.ctx.drawElements(Module.ctx.TRIANGLES, numIndexes, Module.ctx.UNSIGNED_SHORT, ptr);
        } else {
          Module.ctx.drawArrays(GL.immediate.mode, startIndex, numVertexes);
        }
        if (emulatedElementArrayBuffer) {
          Module.ctx.bindBuffer(Module.ctx.ELEMENT_ARRAY_BUFFER, GL.buffers[GL.currElementArrayBuffer] || null);
        }
      }};
  GL.immediate = GLImmediate; GL.immediate.matrix.lib = (function() {
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
   * @author Brandon Jones
   * @version 1.2.4
   */
  // Modifed for emscripten: Global scoping etc.
  /*
   * Copyright (c) 2011 Brandon Jones
   *
   * This software is provided 'as-is', without any express or implied
   * warranty. In no event will the authors be held liable for any damages
   * arising from the use of this software.
   *
   * Permission is granted to anyone to use this software for any purpose,
   * including commercial applications, and to alter it and redistribute it
   * freely, subject to the following restrictions:
   *
   *    1. The origin of this software must not be misrepresented; you must not
   *    claim that you wrote the original software. If you use this software
   *    in a product, an acknowledgment in the product documentation would be
   *    appreciated but is not required.
   *
   *    2. Altered source versions must be plainly marked as such, and must not
   *    be misrepresented as being the original software.
   *
   *    3. This notice may not be removed or altered from any source
   *    distribution.
   */
  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */
  var vec3 = {};
  /**
   * @class 3x3 Matrix
   * @name mat3
   */
  var mat3 = {};
  /**
   * @class 4x4 Matrix
   * @name mat4
   */
  var mat4 = {};
  /**
   * @class Quaternion
   * @name quat4
   */
  var quat4 = {};
  var MatrixArray = Float32Array;
  /*
   * vec3
   */
  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */
  vec3.create = function (vec) {
      var dest = new MatrixArray(3);
      if (vec) {
          dest[0] = vec[0];
          dest[1] = vec[1];
          dest[2] = vec[2];
      } else {
          dest[0] = dest[1] = dest[2] = 0;
      }
      return dest;
  };
  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */
  vec3.set = function (vec, dest) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
      return dest;
  };
  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.add = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] += vec2[0];
          vec[1] += vec2[1];
          vec[2] += vec2[2];
          return vec;
      }
      dest[0] = vec[0] + vec2[0];
      dest[1] = vec[1] + vec2[1];
      dest[2] = vec[2] + vec2[2];
      return dest;
  };
  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.subtract = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] -= vec2[0];
          vec[1] -= vec2[1];
          vec[2] -= vec2[2];
          return vec;
      }
      dest[0] = vec[0] - vec2[0];
      dest[1] = vec[1] - vec2[1];
      dest[2] = vec[2] - vec2[2];
      return dest;
  };
  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.multiply = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] *= vec2[0];
          vec[1] *= vec2[1];
          vec[2] *= vec2[2];
          return vec;
      }
      dest[0] = vec[0] * vec2[0];
      dest[1] = vec[1] * vec2[1];
      dest[2] = vec[2] * vec2[2];
      return dest;
  };
  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.negate = function (vec, dest) {
      if (!dest) { dest = vec; }
      dest[0] = -vec[0];
      dest[1] = -vec[1];
      dest[2] = -vec[2];
      return dest;
  };
  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.scale = function (vec, val, dest) {
      if (!dest || vec === dest) {
          vec[0] *= val;
          vec[1] *= val;
          vec[2] *= val;
          return vec;
      }
      dest[0] = vec[0] * val;
      dest[1] = vec[1] * val;
      dest[2] = vec[2] * val;
      return dest;
  };
  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.normalize = function (vec, dest) {
      if (!dest) { dest = vec; }
      var x = vec[0], y = vec[1], z = vec[2],
          len = Math.sqrt(x * x + y * y + z * z);
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      } else if (len === 1) {
          dest[0] = x;
          dest[1] = y;
          dest[2] = z;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.cross = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
      var x = vec[0], y = vec[1], z = vec[2],
          x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];
      dest[0] = y * z2 - z * y2;
      dest[1] = z * x2 - x * z2;
      dest[2] = x * y2 - y * x2;
      return dest;
  };
  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */
  vec3.length = function (vec) {
      var x = vec[0], y = vec[1], z = vec[2];
      return Math.sqrt(x * x + y * y + z * z);
  };
  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */
  vec3.dot = function (vec, vec2) {
      return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };
  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.direction = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
      var x = vec[0] - vec2[0],
          y = vec[1] - vec2[1],
          z = vec[2] - vec2[2],
          len = Math.sqrt(x * x + y * y + z * z);
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.lerp = function (vec, vec2, lerp, dest) {
      if (!dest) { dest = vec; }
      dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
      dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
      dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);
      return dest;
  };
  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */
  vec3.dist = function (vec, vec2) {
      var x = vec2[0] - vec[0],
          y = vec2[1] - vec[1],
          z = vec2[2] - vec[2];
      return Math.sqrt(x*x + y*y + z*z);
  };
  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.unproject = function (vec, view, proj, viewport, dest) {
      if (!dest) { dest = vec; }
      var m = mat4.create();
      var v = new MatrixArray(4);
      v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;
      v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;
      v[2] = 2.0 * vec[2] - 1.0;
      v[3] = 1.0;
      mat4.multiply(proj, view, m);
      if(!mat4.inverse(m)) { return null; }
      mat4.multiplyVec4(m, v);
      if(v[3] === 0.0) { return null; }
      dest[0] = v[0] / v[3];
      dest[1] = v[1] / v[3];
      dest[2] = v[2] / v[3];
      return dest;
  };
  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */
  vec3.str = function (vec) {
      return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';
  };
  /*
   * mat3
   */
  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */
  mat3.create = function (mat) {
      var dest = new MatrixArray(9);
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
      }
      return dest;
  };
  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */
  mat3.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      return dest;
  };
  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */
  mat3.identity = function (dest) {
      if (!dest) { dest = mat3.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 1;
      dest[5] = 0;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 1;
      return dest;
  };
  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */
  mat3.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2],
              a12 = mat[5];
          mat[1] = mat[3];
          mat[2] = mat[6];
          mat[3] = a01;
          mat[5] = mat[7];
          mat[6] = a02;
          mat[7] = a12;
          return mat;
      }
      dest[0] = mat[0];
      dest[1] = mat[3];
      dest[2] = mat[6];
      dest[3] = mat[1];
      dest[4] = mat[4];
      dest[5] = mat[7];
      dest[6] = mat[2];
      dest[7] = mat[5];
      dest[8] = mat[8];
      return dest;
  };
  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat3.toMat4 = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
      dest[15] = 1;
      dest[14] = 0;
      dest[13] = 0;
      dest[12] = 0;
      dest[11] = 0;
      dest[10] = mat[8];
      dest[9] = mat[7];
      dest[8] = mat[6];
      dest[7] = 0;
      dest[6] = mat[5];
      dest[5] = mat[4];
      dest[4] = mat[3];
      dest[3] = 0;
      dest[2] = mat[2];
      dest[1] = mat[1];
      dest[0] = mat[0];
      return dest;
  };
  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */
  mat3.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] +
          ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] +
          ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';
  };
  /*
   * mat4
   */
  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */
  mat4.create = function (mat) {
      var dest = new MatrixArray(16);
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
      return dest;
  };
  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */
  mat4.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */
  mat4.identity = function (dest) {
      if (!dest) { dest = mat4.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 1;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = 1;
      dest[11] = 0;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */
  mat4.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2], a03 = mat[3],
              a12 = mat[6], a13 = mat[7],
              a23 = mat[11];
          mat[1] = mat[4];
          mat[2] = mat[8];
          mat[3] = mat[12];
          mat[4] = a01;
          mat[6] = mat[9];
          mat[7] = mat[13];
          mat[8] = a02;
          mat[9] = a12;
          mat[11] = mat[14];
          mat[12] = a03;
          mat[13] = a13;
          mat[14] = a23;
          return mat;
      }
      dest[0] = mat[0];
      dest[1] = mat[4];
      dest[2] = mat[8];
      dest[3] = mat[12];
      dest[4] = mat[1];
      dest[5] = mat[5];
      dest[6] = mat[9];
      dest[7] = mat[13];
      dest[8] = mat[2];
      dest[9] = mat[6];
      dest[10] = mat[10];
      dest[11] = mat[14];
      dest[12] = mat[3];
      dest[13] = mat[7];
      dest[14] = mat[11];
      dest[15] = mat[15];
      return dest;
  };
  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */
  mat4.determinant = function (mat) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
      return (a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +
              a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +
              a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +
              a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +
              a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +
              a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33);
  };
  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */
  mat4.inverse = function (mat, dest) {
      if (!dest) { dest = mat; }
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,
          d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06),
          invDet;
          // Calculate the determinant
          if (!d) { return null; }
          invDet = 1 / d;
      dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
      return dest;
  };
  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */
  mat4.toRotationMat = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */
  mat4.toMat3 = function (mat, dest) {
      if (!dest) { dest = mat3.create(); }
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[4];
      dest[4] = mat[5];
      dest[5] = mat[6];
      dest[6] = mat[8];
      dest[7] = mat[9];
      dest[8] = mat[10];
      return dest;
  };
  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */
  mat4.toInverseMat3 = function (mat, dest) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2],
          a10 = mat[4], a11 = mat[5], a12 = mat[6],
          a20 = mat[8], a21 = mat[9], a22 = mat[10],
          b01 = a22 * a11 - a12 * a21,
          b11 = -a22 * a10 + a12 * a20,
          b21 = a21 * a10 - a11 * a20,
          d = a00 * b01 + a01 * b11 + a02 * b21,
          id;
      if (!d) { return null; }
      id = 1 / d;
      if (!dest) { dest = mat3.create(); }
      dest[0] = b01 * id;
      dest[1] = (-a22 * a01 + a02 * a21) * id;
      dest[2] = (a12 * a01 - a02 * a11) * id;
      dest[3] = b11 * id;
      dest[4] = (a22 * a00 - a02 * a20) * id;
      dest[5] = (-a12 * a00 + a02 * a10) * id;
      dest[6] = b21 * id;
      dest[7] = (-a21 * a00 + a01 * a20) * id;
      dest[8] = (a11 * a00 - a01 * a10) * id;
      return dest;
  };
  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.multiply = function (mat, mat2, dest) {
      if (!dest) { dest = mat; }
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
          b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3],
          b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7],
          b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11],
          b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];
      dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
      dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
      dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
      dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
      dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
      dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
      dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
      dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
      dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
      dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
      dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
      dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
      dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
      dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
      dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
      dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
      return dest;
  };
  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  mat4.multiplyVec3 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
      var x = vec[0], y = vec[1], z = vec[2];
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
      return dest;
  };
  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */
  mat4.multiplyVec4 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
      var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
      dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
      return dest;
  };
  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.translate = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2],
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23;
      if (!dest || mat === dest) {
          mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
          mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
          mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
          mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
          return mat;
      }
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
      dest[0] = a00; dest[1] = a01; dest[2] = a02; dest[3] = a03;
      dest[4] = a10; dest[5] = a11; dest[6] = a12; dest[7] = a13;
      dest[8] = a20; dest[9] = a21; dest[10] = a22; dest[11] = a23;
      dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
      dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
      dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
      dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
      return dest;
  };
  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */
  mat4.scale = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2];
      if (!dest || mat === dest) {
          mat[0] *= x;
          mat[1] *= x;
          mat[2] *= x;
          mat[3] *= x;
          mat[4] *= y;
          mat[5] *= y;
          mat[6] *= y;
          mat[7] *= y;
          mat[8] *= z;
          mat[9] *= z;
          mat[10] *= z;
          mat[11] *= z;
          return mat;
      }
      dest[0] = mat[0] * x;
      dest[1] = mat[1] * x;
      dest[2] = mat[2] * x;
      dest[3] = mat[3] * x;
      dest[4] = mat[4] * y;
      dest[5] = mat[5] * y;
      dest[6] = mat[6] * y;
      dest[7] = mat[7] * y;
      dest[8] = mat[8] * z;
      dest[9] = mat[9] * z;
      dest[10] = mat[10] * z;
      dest[11] = mat[11] * z;
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around 
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotate = function (mat, angle, axis, dest) {
      var x = axis[0], y = axis[1], z = axis[2],
          len = Math.sqrt(x * x + y * y + z * z),
          s, c, t,
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23,
          b00, b01, b02,
          b10, b11, b12,
          b20, b21, b22;
      if (!len) { return null; }
      if (len !== 1) {
          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
      }
      s = Math.sin(angle);
      c = Math.cos(angle);
      t = 1 - c;
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
      // Construct the elements of the rotation matrix
      b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
      b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
      b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
      // Perform rotation-specific matrix multiplication
      dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
      dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
      dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
      dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
      dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
      dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
      dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
      dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
      dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
      dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
      dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
      dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
      return dest;
  };
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateX = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
      // Perform axis-specific matrix multiplication
      dest[4] = a10 * c + a20 * s;
      dest[5] = a11 * c + a21 * s;
      dest[6] = a12 * c + a22 * s;
      dest[7] = a13 * c + a23 * s;
      dest[8] = a10 * -s + a20 * c;
      dest[9] = a11 * -s + a21 * c;
      dest[10] = a12 * -s + a22 * c;
      dest[11] = a13 * -s + a23 * c;
      return dest;
  };
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateY = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a20 * -s;
      dest[1] = a01 * c + a21 * -s;
      dest[2] = a02 * c + a22 * -s;
      dest[3] = a03 * c + a23 * -s;
      dest[8] = a00 * s + a20 * c;
      dest[9] = a01 * s + a21 * c;
      dest[10] = a02 * s + a22 * c;
      dest[11] = a03 * s + a23 * c;
      return dest;
  };
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateZ = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7];
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a10 * s;
      dest[1] = a01 * c + a11 * s;
      dest[2] = a02 * c + a12 * s;
      dest[3] = a03 * c + a13 * s;
      dest[4] = a00 * -s + a10 * c;
      dest[5] = a01 * -s + a11 * c;
      dest[6] = a02 * -s + a12 * c;
      dest[7] = a03 * -s + a13 * c;
      return dest;
  };
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = (near * 2) / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = (near * 2) / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = (right + left) / rl;
      dest[9] = (top + bottom) / tb;
      dest[10] = -(far + near) / fn;
      dest[11] = -1;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = -(far * near * 2) / fn;
      dest[15] = 0;
      return dest;
  };
  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.perspective = function (fovy, aspect, near, far, dest) {
      var top = near * Math.tan(fovy * Math.PI / 360.0),
          right = top * aspect;
      return mat4.frustum(-right, right, -top, top, near, far, dest);
  };
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = 2 / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 2 / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = -2 / fn;
      dest[11] = 0;
      dest[12] = -(left + right) / rl;
      dest[13] = -(top + bottom) / tb;
      dest[14] = -(far + near) / fn;
      dest[15] = 1;
      return dest;
  };
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.lookAt = function (eye, center, up, dest) {
      if (!dest) { dest = mat4.create(); }
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
          eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2],
          centerx = center[0],
          centery = center[1],
          centerz = center[2];
      if (eyex === centerx && eyey === centery && eyez === centerz) {
          return mat4.identity(dest);
      }
      //vec3.direction(eye, center, z);
      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
      // normalize (no check needed for 0 because of early return)
      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
      //vec3.normalize(vec3.cross(up, z, x));
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
      if (!len) {
          x0 = 0;
          x1 = 0;
          x2 = 0;
      } else {
          len = 1 / len;
          x0 *= len;
          x1 *= len;
          x2 *= len;
      }
      //vec3.normalize(vec3.cross(z, x, y));
      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
      if (!len) {
          y0 = 0;
          y1 = 0;
          y2 = 0;
      } else {
          len = 1 / len;
          y0 *= len;
          y1 *= len;
          y2 *= len;
      }
      dest[0] = x0;
      dest[1] = y0;
      dest[2] = z0;
      dest[3] = 0;
      dest[4] = x1;
      dest[5] = y1;
      dest[6] = z1;
      dest[7] = 0;
      dest[8] = x2;
      dest[9] = y2;
      dest[10] = z2;
      dest[11] = 0;
      dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      dest[15] = 1;
      return dest;
  };
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.fromRotationTranslation = function (quat, vec, dest) {
      if (!dest) { dest = mat4.create(); }
      // Quaternion math
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
      dest[12] = vec[0];
      dest[13] = vec[1];
      dest[14] = vec[2];
      dest[15] = 1;
      return dest;
  };
  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */
  mat4.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] +
          ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] +
          ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] +
          ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
  };
  /*
   * quat4
   */
  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */
  quat4.create = function (quat) {
      var dest = new MatrixArray(4);
      if (quat) {
          dest[0] = quat[0];
          dest[1] = quat[1];
          dest[2] = quat[2];
          dest[3] = quat[3];
      }
      return dest;
  };
  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */
  quat4.set = function (quat, dest) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
      return dest;
  };
  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length. 
   * Any existing W component will be ignored. 
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.calculateW = function (quat, dest) {
      var x = quat[0], y = quat[1], z = quat[2];
      if (!dest || quat === dest) {
          quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
          return quat;
      }
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return dest;
  };
  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */
  quat4.dot = function(quat, quat2){
      return quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];
  };
  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.inverse = function(quat, dest) {
      var q0 = quat[0], q1 = quat[1], q2 = quat[2], q3 = quat[3],
          dot = q0*q0 + q1*q1 + q2*q2 + q3*q3,
          invDot = dot ? 1.0/dot : 0;
      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
      if(!dest || quat === dest) {
          quat[0] *= -invDot;
          quat[1] *= -invDot;
          quat[2] *= -invDot;
          quat[3] *= invDot;
          return quat;
      }
      dest[0] = -quat[0]*invDot;
      dest[1] = -quat[1]*invDot;
      dest[2] = -quat[2]*invDot;
      dest[3] = quat[3]*invDot;
      return dest;
  };
  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.conjugate = function (quat, dest) {
      if (!dest || quat === dest) {
          quat[0] *= -1;
          quat[1] *= -1;
          quat[2] *= -1;
          return quat;
      }
      dest[0] = -quat[0];
      dest[1] = -quat[1];
      dest[2] = -quat[2];
      dest[3] = quat[3];
      return dest;
  };
  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */
  quat4.length = function (quat) {
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.normalize = function (quat, dest) {
      if (!dest) { dest = quat; }
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          len = Math.sqrt(x * x + y * y + z * z + w * w);
      if (len === 0) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          dest[3] = 0;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      dest[3] = w * len;
      return dest;
  };
  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.add = function (quat, quat2, dest) {
      if(!dest || quat === dest) {
          quat[0] += quat2[0];
          quat[1] += quat2[1];
          quat[2] += quat2[2];
          quat[3] += quat2[3];
          return quat;
      }
      dest[0] = quat[0]+quat2[0];
      dest[1] = quat[1]+quat2[1];
      dest[2] = quat[2]+quat2[2];
      dest[3] = quat[3]+quat2[3];
      return dest;
  };
  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.multiply = function (quat, quat2, dest) {
      if (!dest) { dest = quat; }
      var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3],
          qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];
      dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      return dest;
  };
  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */
  quat4.multiplyVec3 = function (quat, vec, dest) {
      if (!dest) { dest = vec; }
      var x = vec[0], y = vec[1], z = vec[2],
          qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3],
          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;
      // calculate result * inverse quat
      dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      return dest;
  };
  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.scale = function (quat, val, dest) {
      if(!dest || quat === dest) {
          quat[0] *= val;
          quat[1] *= val;
          quat[2] *= val;
          quat[3] *= val;
          return quat;
      }
      dest[0] = quat[0]*val;
      dest[1] = quat[1]*val;
      dest[2] = quat[2]*val;
      dest[3] = quat[3]*val;
      return dest;
  };
  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */
  quat4.toMat3 = function (quat, dest) {
      if (!dest) { dest = mat3.create(); }
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = xy - wz;
      dest[4] = 1 - (xx + zz);
      dest[5] = yz + wx;
      dest[6] = xz + wy;
      dest[7] = yz - wx;
      dest[8] = 1 - (xx + yy);
      return dest;
  };
  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  quat4.toMat4 = function (quat, dest) {
      if (!dest) { dest = mat4.create(); }
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.slerp = function (quat, quat2, slerp, dest) {
      if (!dest) { dest = quat; }
      var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],
          halfTheta,
          sinHalfTheta,
          ratioA,
          ratioB;
      if (Math.abs(cosHalfTheta) >= 1.0) {
          if (dest !== quat) {
              dest[0] = quat[0];
              dest[1] = quat[1];
              dest[2] = quat[2];
              dest[3] = quat[3];
          }
          return dest;
      }
      halfTheta = Math.acos(cosHalfTheta);
      sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
      if (Math.abs(sinHalfTheta) < 0.001) {
          dest[0] = (quat[0] * 0.5 + quat2[0] * 0.5);
          dest[1] = (quat[1] * 0.5 + quat2[1] * 0.5);
          dest[2] = (quat[2] * 0.5 + quat2[2] * 0.5);
          dest[3] = (quat[3] * 0.5 + quat2[3] * 0.5);
          return dest;
      }
      ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
      ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;
      dest[0] = (quat[0] * ratioA + quat2[0] * ratioB);
      dest[1] = (quat[1] * ratioA + quat2[1] * ratioB);
      dest[2] = (quat[2] * ratioA + quat2[2] * ratioB);
      dest[3] = (quat[3] * ratioA + quat2[3] * ratioB);
      return dest;
  };
  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */
  quat4.str = function (quat) {
      return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';
  };
  return {
    vec3: vec3,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4
  };
  })();
  ;
  var GLImmediateSetup={};function _glBegin(mode) {
      // Push the old state:
      GL.immediate.enabledClientAttributes_preBegin = GL.immediate.enabledClientAttributes;
      GL.immediate.enabledClientAttributes = [];
      GL.immediate.clientAttributes_preBegin = GL.immediate.clientAttributes;
      GL.immediate.clientAttributes = []
      for (var i = 0; i < GL.immediate.clientAttributes_preBegin.length; i++) {
        GL.immediate.clientAttributes.push({});
      }
      GL.immediate.mode = mode;
      GL.immediate.vertexCounter = 0;
      var components = GL.immediate.rendererComponents = [];
      for (var i = 0; i < GL.immediate.NUM_ATTRIBUTES; i++) {
        components[i] = 0;
      }
      GL.immediate.rendererComponentPointer = 0;
      GL.immediate.vertexData = GL.immediate.tempData;
    }
  function _glColor4f(r, g, b, a) {
      r = Math.max(Math.min(r, 1), 0);
      g = Math.max(Math.min(g, 1), 0);
      b = Math.max(Math.min(b, 1), 0);
      a = Math.max(Math.min(a, 1), 0);
      // TODO: make ub the default, not f, save a few mathops
      if (GL.immediate.mode >= 0) {
        var start = GL.immediate.vertexCounter << 2;
        GL.immediate.vertexDataU8[start + 0] = r * 255;
        GL.immediate.vertexDataU8[start + 1] = g * 255;
        GL.immediate.vertexDataU8[start + 2] = b * 255;
        GL.immediate.vertexDataU8[start + 3] = a * 255;
        GL.immediate.vertexCounter++;
        GL.immediate.addRendererComponent(GL.immediate.COLOR, 4, Module.ctx.UNSIGNED_BYTE);
      } else {
        GL.immediate.clientColor[0] = r;
        GL.immediate.clientColor[1] = g;
        GL.immediate.clientColor[2] = b;
        GL.immediate.clientColor[3] = a;
      }
    }function _glColor3f(r, g, b) {
      _glColor4f(r, g, b, 1);
    }
  function _glTexCoord2i(u, v) {
      assert(GL.immediate.mode >= 0); // must be in begin/end
      GL.immediate.vertexData[GL.immediate.vertexCounter++] = u;
      GL.immediate.vertexData[GL.immediate.vertexCounter++] = v;
      GL.immediate.addRendererComponent(GL.immediate.TEXTURE0, 2, Module.ctx.FLOAT);
    }
  function _glVertex3f(x, y, z) {
      assert(GL.immediate.mode >= 0); // must be in begin/end
      GL.immediate.vertexData[GL.immediate.vertexCounter++] = x;
      GL.immediate.vertexData[GL.immediate.vertexCounter++] = y;
      GL.immediate.vertexData[GL.immediate.vertexCounter++] = z || 0;
      assert(GL.immediate.vertexCounter << 2 < GL.MAX_TEMP_BUFFER_SIZE);
      GL.immediate.addRendererComponent(GL.immediate.VERTEX, 3, Module.ctx.FLOAT);
    }
  function _glEnd() {
      GL.immediate.prepareClientAttributes(GL.immediate.rendererComponents[GL.immediate.VERTEX], true);
      GL.immediate.firstVertex = 0;
      GL.immediate.lastVertex = GL.immediate.vertexCounter / (GL.immediate.stride >> 2);
      GL.immediate.flush();
      GL.immediate.disableBeginEndClientAttributes();
      GL.immediate.mode = -1;
      // Pop the old state:
      GL.immediate.enabledClientAttributes = GL.immediate.enabledClientAttributes_preBegin;
      GL.immediate.clientAttributes = GL.immediate.clientAttributes_preBegin;
      GL.immediate.modifiedClientAttributes = true;
    }
  var _glVertex2i=_glVertex3f;
  function _glPushMatrix() {
      GL.immediate.matricesModified = true;
      GL.immediate.matrixVersion[GL.immediate.currentMatrix] = (GL.immediate.matrixVersion[GL.immediate.currentMatrix] + 1)|0;
      GL.immediate.matrixStack[GL.immediate.currentMatrix].push(
          Array.prototype.slice.call(GL.immediate.matrix[GL.immediate.currentMatrix]));
    }
  function _glLoadIdentity() {
      GL.immediate.matricesModified = true;
      GL.immediate.matrixVersion[GL.immediate.currentMatrix] = (GL.immediate.matrixVersion[GL.immediate.currentMatrix] + 1)|0;
      GL.immediate.matrix.lib.mat4.identity(GL.immediate.matrix[GL.immediate.currentMatrix]);
    }
  function _glOrtho(left, right, bottom, top_, nearVal, farVal) {
      GL.immediate.matricesModified = true;
      GL.immediate.matrixVersion[GL.immediate.currentMatrix] = (GL.immediate.matrixVersion[GL.immediate.currentMatrix] + 1)|0;
      GL.immediate.matrix.lib.mat4.multiply(GL.immediate.matrix[GL.immediate.currentMatrix],
          GL.immediate.matrix.lib.mat4.ortho(left, right, bottom, top_, nearVal, farVal));
    }
  function _glPopMatrix() {
      GL.immediate.matricesModified = true;
      GL.immediate.matrixVersion[GL.immediate.currentMatrix] = (GL.immediate.matrixVersion[GL.immediate.currentMatrix] + 1)|0;
      GL.immediate.matrix[GL.immediate.currentMatrix] = GL.immediate.matrixStack[GL.immediate.currentMatrix].pop();
    }
  var GLUT={initTime:null,idleFunc:null,displayFunc:null,keyboardFunc:null,keyboardUpFunc:null,specialFunc:null,specialUpFunc:null,reshapeFunc:null,motionFunc:null,passiveMotionFunc:null,mouseFunc:null,buttons:0,modifiers:0,initWindowWidth:256,initWindowHeight:256,initDisplayMode:18,windowX:0,windowY:0,windowWidth:0,windowHeight:0,saveModifiers:function (event) {
        GLUT.modifiers = 0;
        if (event['shiftKey'])
          GLUT.modifiers += 1; /* GLUT_ACTIVE_SHIFT */
        if (event['ctrlKey'])
          GLUT.modifiers += 2; /* GLUT_ACTIVE_CTRL */
        if (event['altKey'])
          GLUT.modifiers += 4; /* GLUT_ACTIVE_ALT */
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.passiveMotionFunc, [lastX, lastY]);
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.motionFunc, [lastX, lastY]);
        }
      },getSpecialKey:function (keycode) {
          var key = null;
          switch (keycode) {
            case 8:  key = 120 /* backspace */; break;
            case 46: key = 111 /* delete */; break;
            case 0x70 /*DOM_VK_F1*/: key = 1 /* GLUT_KEY_F1 */; break;
            case 0x71 /*DOM_VK_F2*/: key = 2 /* GLUT_KEY_F2 */; break;
            case 0x72 /*DOM_VK_F3*/: key = 3 /* GLUT_KEY_F3 */; break;
            case 0x73 /*DOM_VK_F4*/: key = 4 /* GLUT_KEY_F4 */; break;
            case 0x74 /*DOM_VK_F5*/: key = 5 /* GLUT_KEY_F5 */; break;
            case 0x75 /*DOM_VK_F6*/: key = 6 /* GLUT_KEY_F6 */; break;
            case 0x76 /*DOM_VK_F7*/: key = 7 /* GLUT_KEY_F7 */; break;
            case 0x77 /*DOM_VK_F8*/: key = 8 /* GLUT_KEY_F8 */; break;
            case 0x78 /*DOM_VK_F9*/: key = 9 /* GLUT_KEY_F9 */; break;
            case 0x79 /*DOM_VK_F10*/: key = 10 /* GLUT_KEY_F10 */; break;
            case 0x7a /*DOM_VK_F11*/: key = 11 /* GLUT_KEY_F11 */; break;
            case 0x7b /*DOM_VK_F12*/: key = 12 /* GLUT_KEY_F12 */; break;
            case 0x25 /*DOM_VK_LEFT*/: key = 100 /* GLUT_KEY_LEFT */; break;
            case 0x26 /*DOM_VK_UP*/: key = 101 /* GLUT_KEY_UP */; break;
            case 0x27 /*DOM_VK_RIGHT*/: key = 102 /* GLUT_KEY_RIGHT */; break;
            case 0x28 /*DOM_VK_DOWN*/: key = 103 /* GLUT_KEY_DOWN */; break;
            case 0x21 /*DOM_VK_PAGE_UP*/: key = 104 /* GLUT_KEY_PAGE_UP */; break;
            case 0x22 /*DOM_VK_PAGE_DOWN*/: key = 105 /* GLUT_KEY_PAGE_DOWN */; break;
            case 0x24 /*DOM_VK_HOME*/: key = 106 /* GLUT_KEY_HOME */; break;
            case 0x23 /*DOM_VK_END*/: key = 107 /* GLUT_KEY_END */; break;
            case 0x2d /*DOM_VK_INSERT*/: key = 108 /* GLUT_KEY_INSERT */; break;
            case 16   /*DOM_VK_SHIFT*/:
            case 0x05 /*DOM_VK_LEFT_SHIFT*/:
              key = 112 /* GLUT_KEY_SHIFT_L */;
              break;
            case 0x06 /*DOM_VK_RIGHT_SHIFT*/:
              key = 113 /* GLUT_KEY_SHIFT_R */;
              break;
            case 17   /*DOM_VK_CONTROL*/:
            case 0x03 /*DOM_VK_LEFT_CONTROL*/:
              key = 114 /* GLUT_KEY_CONTROL_L */;
              break;
            case 0x04 /*DOM_VK_RIGHT_CONTROL*/:
              key = 115 /* GLUT_KEY_CONTROL_R */;
              break;
            case 18   /*DOM_VK_ALT*/:
            case 0x02 /*DOM_VK_LEFT_ALT*/:
              key = 116 /* GLUT_KEY_ALT_L */;
              break;
            case 0x01 /*DOM_VK_RIGHT_ALT*/:
              key = 117 /* GLUT_KEY_ALT_R */;
              break;
          };
          return key;
      },getASCIIKey:function (event) {
        if (event['ctrlKey'] || event['altKey'] || event['metaKey']) return null;
        var keycode = event['keyCode'];
        /* The exact list is soooo hard to find in a canonical place! */
        if (48 <= keycode && keycode <= 57)
          return keycode; // numeric  TODO handle shift?
        if (65 <= keycode && keycode <= 90)
          return event['shiftKey'] ? keycode : keycode + 32;
        if (106 <= keycode && keycode <= 111)
          return keycode - 106 + 42; // *,+-./  TODO handle shift?
        switch (keycode) {
          case 27: // escape
          case 32: // space
          case 61: // equal
            return keycode;
        }
        var s = event['shiftKey'];
        switch (keycode) {
          case 186: return s ? 58 : 59; // colon / semi-colon
          case 187: return s ? 43 : 61; // add / equal (these two may be wrong)
          case 188: return s ? 60 : 44; // less-than / comma
          case 189: return s ? 95 : 45; // dash
          case 190: return s ? 62 : 46; // greater-than / period
          case 191: return s ? 63 : 47; // forward slash
          case 219: return s ? 123 : 91; // open bracket
          case 220: return s ? 124 : 47; // back slash
          case 221: return s ? 125 : 93; // close braket
          case 222: return s ? 34 : 39; // single quote
        }
        return null;
      },onKeydown:function (event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if( GLUT.specialFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onKeyup:function (event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if(GLUT.specialUpFunc) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardUpFunc ) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onMouseButtonDown:function (event) {
        Browser.calculateMouseEvent(event);
        GLUT.buttons |= (1 << event['button']);
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
          try {
            event.target.setCapture();
          } catch (e) {}
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseButtonUp:function (event) {
        Browser.calculateMouseEvent(event);
        GLUT.buttons &= ~(1 << event['button']);
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 1/*GLUT_UP*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseWheel:function (event) {
        Browser.calculateMouseEvent(event);
        // cross-browser wheel delta
        var e = window.event || event; // old IE support
        var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
        var button = 3; // wheel up
        if (delta < 0) {
          button = 4; // wheel down
        }
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [button, 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLUT.windowWidth;
          height = GLUT.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLUT.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
        /* Can't call _glutReshapeWindow as that requests cancelling fullscreen. */
        if (GLUT.reshapeFunc) {
          // console.log("GLUT.reshapeFunc (from FS): " + width + ", " + height);
          Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
        }
        _glutPostRedisplay();
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
                  (function() {});
        CFS.apply(document, []);
      }};function _glutSwapBuffers() {}
  function _glViewport(x0, x1, x2, x3) { Module.ctx.viewport(x0, x1, x2, x3) }
  function _glutPostRedisplay() {
      if (GLUT.displayFunc) {
        Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          Runtime.dynCall('v', GLUT.displayFunc);
        });
      }
    }
  var _cos=Math_cos;
  var _sin=Math_sin;
  function _glutInitWindowSize(width, height) {
      Browser.setCanvasSize( GLUT.initWindowWidth = width,
                             GLUT.initWindowHeight = height );
    }
  function _glutInitWindowPosition(x, y) {
      // Ignore for now
    }
  function _glutInitDisplayMode(mode) {
      GLUT.initDisplayMode = mode;
    }
  function _glutInit(argcp, argv) {
      // Ignore arguments
      GLUT.initTime = Date.now();
      var isTouchDevice = 'ontouchstart' in document.documentElement;
      window.addEventListener("keydown", GLUT.onKeydown, true);
      window.addEventListener("keyup", GLUT.onKeyup, true);
      if (isTouchDevice) {
        window.addEventListener("touchmove", GLUT.onMousemove, true);
        window.addEventListener("touchstart", GLUT.onMouseButtonDown, true);
        window.addEventListener("touchend", GLUT.onMouseButtonUp, true);
      } else {
        window.addEventListener("mousemove", GLUT.onMousemove, true);
        window.addEventListener("mousedown", GLUT.onMouseButtonDown, true);
        window.addEventListener("mouseup", GLUT.onMouseButtonUp, true);
        // IE9, Chrome, Safari, Opera
        window.addEventListener("mousewheel", GLUT.onMouseWheel, true);
        // Firefox
        window.addEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
      }
      Browser.resizeListeners.push(function(width, height) {
        if (GLUT.reshapeFunc) {
        	Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
        }
      });
      __ATEXIT__.push({ func: function() {
        window.removeEventListener("keydown", GLUT.onKeydown, true);
        window.removeEventListener("keyup", GLUT.onKeyup, true);
        if (isTouchDevice) {
          window.removeEventListener("touchmove", GLUT.onMousemove, true);
          window.removeEventListener("touchstart", GLUT.onMouseButtonDown, true);
          window.removeEventListener("touchend", GLUT.onMouseButtonUp, true);
        } else {
          window.removeEventListener("mousemove", GLUT.onMousemove, true);
          window.removeEventListener("mousedown", GLUT.onMouseButtonDown, true);
          window.removeEventListener("mouseup", GLUT.onMouseButtonUp, true);
          // IE9, Chrome, Safari, Opera
          window.removeEventListener("mousewheel", GLUT.onMouseWheel, true);
          // Firefox
          window.removeEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
        }
        Module["canvas"].width = Module["canvas"].height = 1;
      } });
    }
  function _glutCreateWindow(name) {
      var contextAttributes = {
        antialias: ((GLUT.initDisplayMode & 0x0080 /*GLUT_MULTISAMPLE*/) != 0),
        depth: ((GLUT.initDisplayMode & 0x0010 /*GLUT_DEPTH*/) != 0),
        stencil: ((GLUT.initDisplayMode & 0x0020 /*GLUT_STENCIL*/) != 0)
      };
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return Module.ctx ? 1 /* a new GLUT window ID for the created context */ : 0 /* failure */;
    }
  function _glutReshapeFunc(func) {
      GLUT.reshapeFunc = func;
    }
  function _glutKeyboardFunc(func) {
      GLUT.keyboardFunc = func;
    }
  function _glutSpecialFunc(func) {
      GLUT.specialFunc = func;
    }
  function _glutDisplayFunc(func) {
      GLUT.displayFunc = func;
    }
  function _glutIdleFunc(func) {
      function callback() {
        if (GLUT.idleFunc) {
          Runtime.dynCall('v', GLUT.idleFunc);
          Browser.safeSetTimeout(callback, 0);
        }
      }
      if (!GLUT.idleFunc) {
        Browser.safeSetTimeout(callback, 0);
      }
      GLUT.idleFunc = func;
    }
  function _glMatrixMode(mode) {
      if (mode == 0x1700 /* GL_MODELVIEW */) {
        GL.immediate.currentMatrix = 'm';
      } else if (mode == 0x1701 /* GL_PROJECTION */) {
        GL.immediate.currentMatrix = 'p';
      } else if (mode == 0x1702) { // GL_TEXTURE
        GL.immediate.useTextureMatrix = true;
        GL.immediate.currentMatrix = 't' + GL.immediate.clientActiveTexture;
      } else {
        throw "Wrong mode " + mode + " passed to glMatrixMode";
      }
    }
  function _glutReshapeWindow(width, height) {
      GLUT.cancelFullScreen();
      Browser.setCanvasSize(width, height);
      if (GLUT.reshapeFunc) {
        Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
      }
      _glutPostRedisplay();
    }function _glutMainLoop() {
      _glutReshapeWindow(Module['canvas'].width, Module['canvas'].height);
      _glutPostRedisplay();
      throw 'SimulateInfiniteLoop';
    }
  function _glClearColor(x0, x1, x2, x3) { Module.ctx.clearColor(x0, x1, x2, x3) }
  function _glEnableClientState(cap, disable) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        Module.printErr('WARNING: unhandled clientstate: ' + cap);
        return;
      }
      if (disable && GL.immediate.enabledClientAttributes[attrib]) {
        GL.immediate.enabledClientAttributes[attrib] = false;
        GL.immediate.totalEnabledClientAttributes--;
        this.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledClientStates[cap];
      } else if (!disable && !GL.immediate.enabledClientAttributes[attrib]) {
        GL.immediate.enabledClientAttributes[attrib] = true;
        GL.immediate.totalEnabledClientAttributes++;
        this.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) GLEmulation.currentVao.enabledClientStates[cap] = 1;
      }
      GL.immediate.modifiedClientAttributes = true;
    }
  function _glVertexPointer(size, type, stride, pointer) {
      GL.immediate.setClientAttribute(GL.immediate.VERTEX, size, type, stride, pointer);
      if (GL.currArrayBuffer) {
        Module.ctx.vertexAttribPointer(GL.immediate.VERTEX, size, type, false, stride, pointer);
        GL.enableVertexAttribArray(GL.immediate.VERTEX);
      }
    }
  function _glClientActiveTexture(texture) {
      GL.immediate.clientActiveTexture = texture - 0x84C0; // GL_TEXTURE0
    }
  function _glTexCoordPointer(size, type, stride, pointer) {
      GL.immediate.setClientAttribute(GL.immediate.TEXTURE0 + GL.immediate.clientActiveTexture, size, type, stride, pointer);
      if (GL.currArrayBuffer) {
        var loc = GL.immediate.TEXTURE0 + GL.immediate.clientActiveTexture;
        Module.ctx.vertexAttribPointer(loc, size, type, false, stride, pointer);
        GL.enableVertexAttribArray(loc);
      }
    }
  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = Module.ctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }
  function _glTexParameteri(x0, x1, x2) { Module.ctx.texParameteri(x0, x1, x2) }
  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      Module.ctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  function _glBlendFunc(x0, x1) { Module.ctx.blendFunc(x0, x1) }
  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }
  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      throw HEAP32[((_llvm_eh_exception.buf)>>2)];;
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }
  var _fseeko=_fseek;
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }var _ftello=_ftell;
  function _clGetKernelWorkGroupInfo(kernel,device,param_name,param_value_size,param_value,param_value_size_ret) {
      try {
        var _info = CL.cl_objects[kernel].getWorkGroupInfo(CL.cl_objects[device], param_name);
        if(typeof(_info) == "number") {
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
        } else if (_info instanceof Int32Array) {
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_info[i];
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
        } else {
          console.error("clGetKernelWorkGroupInfo: unknow type of info '"+_info+"'")
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
        }
      } catch (e) {
        var _error = CL.catchError(e);
        if (param_value != 0) HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
        return _error;
      }
      return webcl.SUCCESS;
    }
  function _clGetProgramBuildInfo(program,device,param_name,param_value_size,param_value,param_value_size_ret) {
      var _info = null;
      try { 
        _info = CL.cl_objects[program].getBuildInfo(CL.cl_objects[device], param_name);
      } catch (e) {
        var _error = CL.catchError(e);
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
        return _error;
      }
      if(typeof(_info) == "number") {
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
      } else if(typeof(_info) == "string") {
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
      return webcl.SUCCESS;
    }
  function _clGetEventProfilingInfo(event,param_name,param_value_size,param_value,param_value_size_ret) {
      try { 
        var _info = CL.cl_objects[event].getProfilingInfo(param_name);
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
      } catch (e) {
        var _error = CL.catchError(e);
        if (param_value != 0) HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
        return _error;
      }
      return webcl.SUCCESS;
    }
  function _clWaitForEvents(num_events,event_list) {
      var _events = [];
      for (var i = 0; i < num_events; i++) {
        var _event = HEAP32[(((event_list)+(i*4))>>2)];
        _events.push(CL.cl_objects[_event]) 
      }
      try {
        webcl.waitForEvents(_events);
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;
    }
  function _clEnqueueReadBuffer(command_queue,buffer,blocking_read,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
      var _event_wait_list = [];
      var _host_ptr = CL.getReferencePointerToArray(ptr,cb,CL.cl_pn_type);
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
      try {
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],blocking_read,offset,cb,_host_ptr,_event_wait_list,_event);
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],blocking_read,offset,cb,_host_ptr,_event_wait_list);
        } 
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;    
    }
  function _clEnqueueNDRangeKernel(command_queue,kernel,work_dim,global_work_offset,global_work_size,local_work_size,num_events_in_wait_list,event_wait_list,event) {
      var _event_wait_list = [];
      var _global_work_offset = [];
      var _global_work_size = [];
      var _local_work_size = [];
      for (var i = 0; i < work_dim; i++) {
        _global_work_size.push(HEAP32[(((global_work_size)+(i*4))>>2)]);
        if (global_work_offset != 0)
          _global_work_offset.push(HEAP32[(((global_work_offset)+(i*4))>>2)]);
        if (local_work_size != 0)
          _local_work_size.push(HEAP32[(((local_work_size)+(i*4))>>2)]);
      }
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
      try { 
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list,_event);  
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list);  
        }
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;    
    }
  function _clRetainEvent(event) {
      CL.cl_objects_retains[event] = CL.cl_objects[event];
      return webcl.SUCCESS;
    }
  function _clReleaseEvent(event) {
      // If is an object retain don't release it ...
      if (event in CL.cl_objects_retains) {
        return webcl.SUCCESS;
      }
      try {
        CL.cl_objects[event].release();
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      delete CL.cl_objects[event];
      CL.cl_objects_counter--;
      return webcl.SUCCESS;
    }
  function _clSetKernelArg(kernel,arg_index,arg_size,arg_value) {
      if (CL.cl_objects[kernel].sig.length < arg_index) {
        return webcl.INVALID_KERNEL;          
      }
      var _kernel = CL.cl_objects[kernel];
      var _posarg = arg_index;
      var _sig = _kernel.sig[_posarg];
      try {
        // LOCAL ARG
        if (_sig == webcl.LOCAL) {
          var _array = new Uint32Array([arg_size]);
          _kernel.setArg(_posarg,_array);
        } else {
          var _value = HEAP32[((arg_value)>>2)];
          // WEBCL OBJECT ARG
          if (_value in CL.cl_objects) {
            _kernel.setArg(_posarg,CL.cl_objects[_value]);
          } else {
            var _array = CL.getReferencePointerToArray(arg_value,arg_size,[[_sig,1]]);
            _kernel.setArg(_posarg,_array);
          }
        }
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;
    }
  function _clRetainMemObject(memobj) {
      CL.cl_objects_retains[memobj] = CL.cl_objects[memobj];
      return webcl.SUCCESS;
    }
  function _clReleaseContext(context) {
      // If is an object retain don't release it ...
      if (context in CL.cl_objects_retains) {
        return webcl.SUCCESS;
      }
      try {
          CL.cl_objects[context].release();
          delete CL.cl_objects[context];
          CL.cl_objects_counter--;
          //console.info("Counter-- HashMap Object : " + CL.cl_objects_counter + " - Udid : " + context);
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;
    }
  function _clReleaseMemObject(memobj) {
      // If is an object retain don't release it ...
      if (memobj in CL.cl_objects_retains) {
        return webcl.SUCCESS;
      }
      try {
        CL.cl_objects[memobj].release();
        delete CL.cl_objects[memobj];
        CL.cl_objects_counter--;
        //console.info("Counter-- HashMap Object : " + CL.cl_objects_counter + " - Udid : " + memobj);
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;
    }
  function _clReleaseKernel(kernel) {
      // If is an object retain don't release it ...
      if (kernel in CL.cl_objects_retains) {
        return webcl.SUCCESS;
      }
      try {
        CL.cl_objects[kernel].release();
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      delete CL.cl_objects[kernel];
      CL.cl_objects_counter--;
      return webcl.SUCCESS;
    }
  function _clReleaseCommandQueue(command_queue) {
      // If is an object retain don't release it ...
      if (command_queue in CL.cl_objects_retains) {
        return webcl.SUCCESS;
      }
      try {
          CL.cl_objects[command_queue].release();
          delete CL.cl_objects[command_queue];
          CL.cl_objects_counter--;
          //console.info("Counter-- HashMap Object : " + CL.cl_objects_counter + " - Udid : " + command_queue);
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;
    }
  function _clReleaseProgram(program) {
      // If is an object retain don't release it ...
      if (program in CL.cl_objects_retains) {
        return webcl.SUCCESS;
      }
      try {
          CL.cl_objects[program].release();
          delete CL.cl_objects[program];
          CL.cl_objects_counter--;
          //console.info("Counter-- HashMap Object : " + CL.cl_objects_counter + " - Udid : " + program);
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;
    }
  function _clCreateBuffer(context,flags_i64_1,flags_i64_2,size,host_ptr,cl_errcode_ret) {
      // Assume the flags is i32 
      assert(flags_i64_2 == 0, 'Invalid flags i64');
      var _id = null;
      var _buffer = null;
      // Context must be created
      var _flags;
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        }
        return 0; 
      }
      var _host_ptr = null;
      if (flags_i64_1 & (1 << 4) /* CL_MEM_ALLOC_HOST_PTR */) {
        _host_ptr = new ArrayBuffer(size);
      } else if ( (host_ptr != 0 && (flags_i64_1 & (1 << 5) /* CL_MEM_COPY_HOST_PTR */)) || (host_ptr != 0 && (flags_i64_1 & (1 << 3) /* CL_MEM_USE_HOST_PTR */)) ) {      
        _host_ptr = CL.getCopyPointerToArray(host_ptr,size,CL.cl_pn_type);      
      } else if (flags_i64_1 & ~_flags) {
        console.error("clCreateBuffer : This flag is not yet implemented => "+(flags_i64_1 & ~_flags));
      }
      try {
        if (_host_ptr != null) {
          _buffer = CL.cl_objects[context].createBuffer(_flags,size,_host_ptr);
        } else
          _buffer = CL.cl_objects[context].createBuffer(_flags,size);
      } catch (e) {
        var _error = CL.catchError(e);
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
        return 0; // NULL Pointer
      }
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
      _id = CL.udid(_buffer);
      // \todo need to be remove when firefox will be support hot_ptr
      /**** **** **** **** **** **** **** ****/
      if (_host_ptr != null) {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
          // Search command
          var commandqueue = null;
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLCommandQueue) {
              commandqueue = CL.cl_objects[obj];
              break;
            }
          }
          if (commandqueue != null) {
            _clEnqueueWriteBuffer(obj,_id,true,0,size,host_ptr,0,0,0);
          } else {
            if (cl_errcode_ret != 0) {
              HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
            }
            return 0; 
          }
        }
      }
      /**** **** **** **** **** **** **** ****/
      return _id;
    }
  function _clCreateKernel(program,kernel_name,cl_errcode_ret) {
      var _id = null;
      var _kernel = null;
      var _name = (kernel_name == 0) ? "" : Pointer_stringify(kernel_name);
      // program must be created
      try {
        _kernel = CL.cl_objects[program].createKernel(_name);
        Object.defineProperty(_kernel, "name", { value : _name,writable : false });
        Object.defineProperty(_kernel, "sig", { value : CL.cl_kernels_sig[_name],writable : false });
      } catch (e) {
        var _error = CL.catchError(e);
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
        return 0; // NULL Pointer
      }
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
      _id = CL.udid(_kernel);
      return _id;
    }
  function _clBuildProgram(program,num_devices,device_list,options,pfn_notify,user_data) {
      try {
        var _devices = [];
        var _option = (options == 0) ? "" : Pointer_stringify(options); 
        // \todo need to be remove when webkit work with -D
        // if (navigator.userAgent.toLowerCase().indexOf('firefox') == -1) {
        //   _option = _option.replace(/-D/g, "-D ");
        //   _option = _option.replace(/-D\s{2,}/g, "-D ");
        // }
        if (device_list != 0 && num_devices > 0 ) {
          for (var i = 0; i < num_devices ; i++) {
            var _device = HEAP32[(((device_list)+(i*4))>>2)]
              _devices.push(CL.cl_objects[_device]);
          }
        }
        // If device_list is NULL value, the program executable is built for all devices associated with program.
        if (_devices.length == 0) {
          _devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_DEVICES); 
        }
        var _callback = null
        if (pfn_notify != 0) {
          /**
           * Description
           * @return 
           */
          _callback = function() { FUNCTION_TABLE[pfn_notify](program, user_data) };
        }
        CL.cl_objects[program].build(_devices,_option,_callback);
      } catch (e) {
        var _error = CL.catchError(e);
        return _error;
      }
      return webcl.SUCCESS;      
    }
  function _clCreateProgramWithSource(context,count,strings,lengths,cl_errcode_ret) {
      var _id = null;
      var _program = null;
      // Context must be created
      try {
        var _string = "";
        for (var i = 0; i < count; i++) {
          if (lengths) {
            var _len = HEAP32[(((lengths)+(i*4))>>2)];
            if (_len < 0) {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);   
            } else {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)], _len);   
            }
          } else {
            _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]); 
          }
        }
        CL.parseKernel(_string);
        _program = CL.cl_objects[context].createProgram(_string);
      } catch (e) {
        var _error = CL.catchError(e);
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
        return 0; // NULL Pointer
      }
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
      _id = CL.udid(_program);
      return _id;
    }
  function _clCreateCommandQueue(context,device,properties_1,properties_2,cl_errcode_ret) {
      // Assume the properties is i32 
      assert(properties_2 == 0, 'Invalid properties i64');
      var _id = null;
      var _command = null;
      // Context must be created
      // Context must be created
      try { 
        _command = CL.cl_objects[context].createCommandQueue(CL.cl_objects[device],properties_1);
      } catch (e) {
        var _error = CL.catchError(e);
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
        return 0; // NULL Pointer
      }
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
      _id = CL.udid(_command);
      return _id;
    }
  function _clCreateContext(properties,num_devices,devices,pfn_notify,user_data,cl_errcode_ret) {
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
      var _id = null;
      var _context = null;
      try { 
        var _platform = null;
        var _devices = [];
        var _deviceType = null;
        var _glclSharedContext = false;
        // Verify the device, theorically on OpenCL there are CL_INVALID_VALUE when devices or num_devices is null,
        // WebCL can work using default device / platform, we check only if parameter are set.
        for (var i = 0; i < num_devices; i++) {
          var _idxDevice = HEAP32[(((devices)+(i*4))>>2)];
            _devices.push(CL.cl_objects[_idxDevice]);
        }
        // Verify the property
        if (properties != 0) {
          var _propertiesCounter = 0;
          while(1) {
            var _readprop = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
            if (_readprop == 0) break;
            switch (_readprop) {
              case webcl.CONTEXT_PLATFORM:
                _propertiesCounter ++;
                var _idxPlatform = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
                  _platform = CL.cl_objects[_idxPlatform];
                break;
              // /!\ This part, it's for the CL_GL_Interop
              case (0x200A) /*CL_GLX_DISPLAY_KHR*/:
              case (0x2008) /*CL_GL_CONTEXT_KHR*/:
              case (0x200C) /*CL_CGL_SHAREGROUP_KHR*/:            
                _propertiesCounter ++;
                _glclSharedContext = true;
                break;
              default:
                if (cl_errcode_ret != 0) {
                  HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_PROPERTY;
                }
                return 0; 
            };
            _propertiesCounter ++;
          }
        }
        var _prop = {platform: _platform, devices: _devices, deviceType: _deviceType};
        if (_glclSharedContext)
          _context = webcl.createContext(Module.ctx, _prop);
        else
          _context = webcl.createContext(_prop);
      } catch (e) {
        var _error = CL.catchError(e);
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
        return 0; // NULL Pointer
      }
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
      _id = CL.udid(_context);
      return _id;
    }
  function _pthread_mutex_lock() {}
  function _pthread_mutex_unlock() {}
  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }
  function ___cxa_guard_release() {}
  function _pthread_cond_broadcast() {
      return 0;
    }
  function _pthread_cond_wait() {
      return 0;
    }
  var _llvm_memset_p0i8_i64=_memset;
  function _llvm_lifetime_start() {}
  function _llvm_lifetime_end() {}
  var _getc=_fgetc;
  function ___errno_location() {
      return ___errno_state;
    }
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function _abort() {
      Module['abort']();
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function ___cxa_guard_abort() {}
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }var _isxdigit_l=_isxdigit;
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }var _isdigit_l=_isdigit;
  function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _catopen() { throw 'TODO: ' + aborter }
  function _catgets() { throw 'TODO: ' + aborter }
  function _catclose() { throw 'TODO: ' + aborter }
  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }
  function _freelocale(locale) {
      _free(locale);
    }
  function _isascii(chr) {
      return chr >= 0 && (chr & 0x80) == 0;
    }
  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i]
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
      var pattern = Pointer_stringify(format);
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }var _strftime_l=_strftime;
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }var _strtoull_l=_strtoull;
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }var _strtoll_l=_strtoll;
  function _uselocale(locale) {
      return 0;
    }
  var _llvm_va_start=undefined;
  function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
GL.init()
GL.immediate.setupFuncs(); Browser.moduleContextCreatedCallbacks.push(function() { GL.immediate.init() });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
GLEmulation.init();
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZNSt3__16locale2id6__initEv,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt11logic_errorD0Ev,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__Z11reshapeFuncii,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__15ctypeIcED0Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castC2Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZNKSt9exception4whatEv,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZNSt9exceptionD1Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__Z8idleFuncv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNSt3__119__iostream_categoryD1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,__ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__15ctypeIwED0Ev,0,__ZN12RenderConfigC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEjjbbj,0,__ZNKSt13runtime_error4whatEv,0,__ZN12RenderDeviceC2ERKN2cl6DeviceERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEjP6CameraP6Spherej,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwED1Ev,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,_clGetProgramBuildInfo,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNSt3__16localeC2ERKS0_,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,__ZNK2cl5Error4whatEv,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,_clGetKernelWorkGroupInfo,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,_clGetDeviceInfo,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,0,___cxx_global_array_dtor53,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZN2cl5ErrorD1Ev,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__114error_category23default_error_conditionEi,0,_clGetEventProfilingInfo,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNSt8bad_castD2Ev,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZN12RenderConfigD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__16localeD2Ev,0,__ZN2cl5ErrorD0Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,___cxx_global_array_dtor105,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt3__111__stdoutbufIcED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNSt13runtime_errorC2EPKc,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__18numpunctIwE12do_falsenameEv,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__Z11displayFuncv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,_fclose,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,___cxx_global_array_dtor81,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt8bad_castD2Ev,0,__ZN12RenderDeviceD2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,0,_free,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZNSt3__18messagesIcED0Ev,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_baseD2Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZNSt3__16localeC2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__Z11specialFunciii,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__111__stdoutbufIwE8overflowEj,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__Z7keyFunchii,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNSt9exceptionD0Ev,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,0,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,0,___cxx_global_array_dtor,0,__ZN2cl7NDRangeD1Ev,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,___cxx_global_array_dtor120,0];
// EMSCRIPTEN_START_FUNCS
function ___cxx_global_var_init(){
 var label=0;
 __ZN2cl7NDRangeC1Ev(17400);
 var $1=_atexit((790),17400,___dso_handle);
 return;
}
function __ZN2cl7NDRangeC1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl7NDRangeC2Ev($2);
 return;
}
function __ZN2cl7NDRangeD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl7NDRangeD2Ev($2);
 return;
}
function _main($argc,$argv){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $width;
 var $height;
 var $30=sp;
 var $31;
 var $32=(sp)+(16);
 var $33;
 var $err=(sp)+(32);
 $25=0;
 $26=$argc;
 $27=$argv;
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,4872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $36=$27;
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($34,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=14;break; }
 case 3: 
 $23=$39;
 $24=8;
 var $41=$23;
 var $42=$24;
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=14;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $45=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,4872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=14;break; }
 case 6: 
 var $47=$27;
 var $48=(($47)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($45,$49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=14;break; }
 case 7: 
 var $52=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($50,4696) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=14;break; }
 case 8: 
 $21=$52;
 $22=8;
 var $54=$21;
 var $55=$22;
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=14;break; }
 case 9: 
 label=10;break;
 case 10: 
 var $58=$26;
 var $59=($58|0)==7;
 if($59){label=11;break;}else{label=15;break;}
 case 11: 
 var $61=$27;
 var $62=(($61+16)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return _atoi($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=14;break; }
 case 12: 
 $width=$64;
 var $66=$27;
 var $67=(($66+20)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(function() { try { __THREW__ = 0; return _atoi($68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=14;break; }
 case 13: 
 $height=$69;
 label=20;break;
 case 14: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1,13016); var $72$1 = tempRet0;
 var $73=$72$0;
 $28=$73;
 var $74=$72$1;
 $29=$74;
 label=52;break;
 case 15: 
 var $76=$26;
 var $77=($76|0)==1;
 if($77){label=16;break;}else{label=17;break;}
 case 16: 
 $width=512;
 $height=512;
 label=19;break;
 case 17: 
 (function() { try { __THREW__ = 0; return _exit(-1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=14;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 label=20;break;
 case 20: 
 var $83=$26;
 var $84=$27;
 var $85=$width;
 var $86=$height;
 (function() { try { __THREW__ = 0; return __Z8InitGlutiPPcjj($83,$84,$85,$86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=14;break; }
 case 21: 
 var $88=$26;
 var $89=($88|0)==7;
 if($89){label=22;break;}else{label=38;break;}
 case 22: 
 var $91=(function() { try { __THREW__ = 0; return __Znwj(624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=14;break; }
 case 23: 
 $31=1;
 var $93=$91;
 var $94=$27;
 var $95=(($94+24)|0);
 var $96=HEAP32[(($95)>>2)];
 $19=$30;
 $20=$96;
 var $97=$19;
 var $98=$20;
 $17=$97;
 $18=$98;
 var $99=$17;
 var $100=$99;
 var $101=(($99)|0);
 $16=$101;
 var $102=$16;
 $15=$102;
 var $103=$15;
 var $104=$103;
 $14=$104;
 var $105=$14;
 var $106=$105;
 $13=$106;
 var $107=$13;
 var $108=(($105)|0);
 var $109=$18;
 var $110=$18;
 $12=$110;
 var $111=$12;
 var $112=(function() { try { __THREW__ = 0; return _strlen($111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($99,$109,$112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 label=26;break;
 case 26: 
 var $114=$width;
 var $115=$height;
 var $116=$27;
 var $117=(($116+4)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return _atoi($118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $121=($119|0)==1;
 var $122=$27;
 var $123=(($122+8)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(function() { try { __THREW__ = 0; return _atoi($124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=33;break; }
 case 28: 
 var $127=($125|0)==1;
 var $128=$27;
 var $129=(($128+12)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(function() { try { __THREW__ = 0; return _atoi($130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=33;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return __ZN12RenderConfigC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEjjbbj($93,$30,$114,$115,$121,$127,$131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=33;break; }
 case 30: 
 $31=0;
 HEAP32[((13400)>>2)]=$93;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=32;break; }
 case 31: 
 label=66;break;
 case 32: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1,13016); var $136$1 = tempRet0;
 var $137=$136$0;
 $28=$137;
 var $138=$136$1;
 $29=$138;
 label=35;break;
 case 33: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1,13016); var $140$1 = tempRet0;
 var $141=$140$0;
 $28=$141;
 var $142=$140$1;
 $29=$142;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=71;break; }
 case 34: 
 label=35;break;
 case 35: 
 var $145=$31;
 if($145){label=36;break;}else{label=37;break;}
 case 36: 
 __ZdlPv($91);
 label=37;break;
 case 37: 
 label=52;break;
 case 38: 
 var $149=$26;
 var $150=($149|0)==1;
 if($150){label=39;break;}else{label=63;break;}
 case 39: 
 var $152=(function() { try { __THREW__ = 0; return __Znwj(624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=14;break; }
 case 40: 
 $33=1;
 var $154=$152;
 $10=$32;
 $11=3496;
 var $155=$10;
 var $156=$11;
 $8=$155;
 $9=$156;
 var $157=$8;
 var $158=$157;
 var $159=(($157)|0);
 $7=$159;
 var $160=$7;
 $6=$160;
 var $161=$6;
 var $162=$161;
 $5=$162;
 var $163=$5;
 var $164=$163;
 $4=$164;
 var $165=$4;
 var $166=(($163)|0);
 var $167=$9;
 var $168=$9;
 $3=$168;
 var $169=$3;
 var $170=(function() { try { __THREW__ = 0; return _strlen($169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=46;break; }
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($157,$167,$170) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=46;break; }
 case 42: 
 label=43;break;
 case 43: 
 var $172=$width;
 var $173=$height;
 (function() { try { __THREW__ = 0; return __ZN12RenderConfigC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEjjbbj($154,$32,$172,$173,1,1,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=47;break; }
 case 44: 
 $33=0;
 HEAP32[((13400)>>2)]=$154;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=46;break; }
 case 45: 
 label=65;break;
 case 46: 
 var $177$0 = ___cxa_find_matching_catch(-1, -1,13016); var $177$1 = tempRet0;
 var $178=$177$0;
 $28=$178;
 var $179=$177$1;
 $29=$179;
 label=49;break;
 case 47: 
 var $181$0 = ___cxa_find_matching_catch(-1, -1,13016); var $181$1 = tempRet0;
 var $182=$181$0;
 $28=$182;
 var $183=$181$1;
 $29=$183;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=71;break; }
 case 48: 
 label=49;break;
 case 49: 
 var $186=$33;
 if($186){label=50;break;}else{label=51;break;}
 case 50: 
 __ZdlPv($152);
 label=51;break;
 case 51: 
 label=52;break;
 case 52: 
 var $190=$29;
 var $191=_llvm_eh_typeid_for(13016);
 var $192=($190|0)==($191|0);
 if($192){label=53;break;}else{label=70;break;}
 case 53: 
 var $194=$28;
 var $195=___cxa_get_exception_ptr($194);
 var $196=$195;
 __ZN2cl5ErrorC1ERKS0_($err,$196);
 var $197=___cxa_begin_catch($194);
 var $198=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2616) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=68;break; }
 case 54: 
 var $200=__ZNK2cl5Error4whatEv($err);
 var $201=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($198,$200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=68;break; }
 case 55: 
 var $203=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($201,1744) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=68;break; }
 case 56: 
 var $205=(function() { try { __THREW__ = 0; return __ZNK2cl5Error3errEv($err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=68;break; }
 case 57: 
 var $207=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($203,$205) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=68;break; }
 case 58: 
 var $209=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($207,1432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=68;break; }
 case 59: 
 $1=$209;
 $2=8;
 var $211=$1;
 var $212=$2;
 var $213=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$212]($211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=68;break; }
 case 60: 
 label=61;break;
 case 61: 
 __ZN2cl5ErrorD1Ev($err);
 ___cxa_end_catch();
 label=62;break;
 case 62: 
 STACKTOP=sp;return 0;
 case 63: 
 (function() { try { __THREW__ = 0; return _exit(-1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=14;break; }
 case 64: 
 throw "Reached an unreachable!";
 case 65: 
 label=66;break;
 case 66: 
 (function() { try { __THREW__ = 0; return __Z7RunGlutv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=14;break; }
 case 67: 
 label=62;break;
 case 68: 
 var $222$0 = ___cxa_find_matching_catch(-1, -1); var $222$1 = tempRet0;
 var $223=$222$0;
 $28=$223;
 var $224=$222$1;
 $29=$224;
 __ZN2cl5ErrorD1Ev($err);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=71;break; }
 case 69: 
 label=70;break;
 case 70: 
 var $227=$28;
 var $228=$29;
 var $229$0=$227;
 var $229$1=0;
 var $230$0=$229$0;
 var $230$1=$228;
 ___resumeException($230$0)
 case 71: 
 var $232$0 = ___cxa_find_matching_catch(-1, -1,0); var $232$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
Module["_main"] = _main;
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9=sp;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $__s=(sp)+(8);
 var $30;
 var $31;
 var $__len;
 var $32=(sp)+(16);
 var $33=(sp)+(24);
 $28=$__os;
 $29=$__str;
 var $34=$28;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=25;break; }
 case 2: 
 $27=$__s;
 var $36=$27;
 var $37=(($36)|0);
 var $38=HEAP8[($37)];
 var $39=(($38)&1);
 label=3;break;
 case 3: 
 if($39){label=4;break;}else{label=29;break;}
 case 4: 
 var $42=$29;
 $26=$42;
 var $43=$26;
 var $44=(function() { try { __THREW__ = 0; return _strlen($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=26;break; }
 case 5: 
 label=6;break;
 case 6: 
 $__len=$44;
 var $46=$28;
 $24=$32;
 $25=$46;
 var $47=$24;
 var $48=$25;
 $20=$47;
 $21=$48;
 var $49=$20;
 var $50=$49;
 var $51=(($49)|0);
 var $52=$21;
 var $53=$52;
 var $54=HEAP32[(($53)>>2)];
 var $55=((($54)-(12))|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $58=$52;
 var $59=(($58+$57)|0);
 var $60=$59;
 $19=$60;
 var $61=$19;
 var $62=$61;
 $18=$62;
 var $63=$18;
 var $64=(($63+24)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$65;
 HEAP32[(($51)>>2)]=$66;
 var $67=$29;
 var $68=$28;
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=((($70)-(12))|0);
 var $72=$71;
 var $73=HEAP32[(($72)>>2)];
 var $74=$68;
 var $75=(($74+$73)|0);
 var $76=$75;
 $17=$76;
 var $77=$17;
 var $78=(($77+4)|0);
 var $79=HEAP32[(($78)>>2)];
 label=7;break;
 case 7: 
 var $81=$79&176;
 var $82=($81|0)==32;
 if($82){label=8;break;}else{label=9;break;}
 case 8: 
 var $84=$29;
 var $85=$__len;
 var $86=(($84+$85)|0);
 var $90=$86;label=10;break;
 case 9: 
 var $88=$29;
 var $90=$88;label=10;break;
 case 10: 
 var $90;
 var $91=$29;
 var $92=$__len;
 var $93=(($91+$92)|0);
 var $94=$28;
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $97=((($96)-(12))|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 var $100=$94;
 var $101=(($100+$99)|0);
 var $102=$101;
 var $103=$28;
 var $104=$103;
 var $105=HEAP32[(($104)>>2)];
 var $106=((($105)-(12))|0);
 var $107=$106;
 var $108=HEAP32[(($107)>>2)];
 var $109=$103;
 var $110=(($109+$108)|0);
 var $111=$110;
 $12=$111;
 var $112=$12;
 var $113=(($112+76)|0);
 var $114=HEAP32[(($113)>>2)];
 $2=-1;
 $3=$114;
 var $115=$2;
 var $116=$3;
 var $117=($115|0)==($116|0);
 if($117){label=11;break;}else{label=19;break;}
 case 11: 
 $7=$112;
 $8=32;
 var $119=$7;
 var $120=$119;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($9,$120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=26;break; }
 case 12: 
 $6=$9;
 var $121=$6;
 var $122=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($121,16840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=14;break; }
 case 13: 
 var $123=$122;
 var $124=$8;
 $4=$123;
 $5=$124;
 var $125=$4;
 var $126=$125;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+28)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=$5;
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($125,$130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=14;break; }
 case 14: 
 var $133$0 = ___cxa_find_matching_catch(-1, -1,0); var $133$1 = tempRet0;
 var $134=$133$0;
 $10=$134;
 var $135=$133$1;
 $11=$135;
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=16;break; }
 case 15: 
 var $137=$10;
 var $138=$11;
 var $139$0=$137;
 var $139$1=0;
 var $140$0=$139$0;
 var $140$1=$138;
 var $eh_lpad_body$1=$140$1;var $eh_lpad_body$0=$140$0;label=27;break;
 case 16: 
 var $142$0 = ___cxa_find_matching_catch(-1, -1,0,0); var $142$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=26;break; }
 case 18: 
 var $143=(($131<<24)>>24);
 var $144=(($112+76)|0);
 HEAP32[(($144)>>2)]=$143;
 label=19;break;
 case 19: 
 var $145=(($112+76)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146)&255);
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($33,$32,$67,$90,$93,$102,$147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=26;break; }
 case 21: 
 $1=$33;
 var $150=$1;
 var $151=(($150)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)==0;
 if($153){label=22;break;}else{label=28;break;}
 case 22: 
 var $155=$28;
 var $156=$155;
 var $157=HEAP32[(($156)>>2)];
 var $158=((($157)-(12))|0);
 var $159=$158;
 var $160=HEAP32[(($159)>>2)];
 var $161=$155;
 var $162=(($161+$160)|0);
 var $163=$162;
 $15=$163;
 $16=5;
 var $164=$15;
 var $165=$164;
 var $166=$16;
 $13=$165;
 $14=$166;
 var $167=$13;
 var $168=(($167+16)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$14;
 var $171=$169|$170;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($167,$171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=26;break; }
 case 23: 
 label=24;break;
 case 24: 
 label=28;break;
 case 25: 
 var $174$0 = ___cxa_find_matching_catch(-1, -1,0); var $174$1 = tempRet0;
 var $175=$174$0;
 $30=$175;
 var $176=$174$1;
 $31=$176;
 label=32;break;
 case 26: 
 var $178$0 = ___cxa_find_matching_catch(-1, -1,0); var $178$1 = tempRet0;
 var $eh_lpad_body$1=$178$1;var $eh_lpad_body$0=$178$0;label=27;break;
 case 27: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $179=$eh_lpad_body$0;
 $30=$179;
 var $180=$eh_lpad_body$1;
 $31=$180;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=38;break; }
 case 28: 
 label=29;break;
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=25;break; }
 case 30: 
 label=34;break;
 case 31: 
 label=32;break;
 case 32: 
 var $186=$30;
 var $187=___cxa_begin_catch($186);
 var $188=$28;
 var $189=$188;
 var $190=HEAP32[(($189)>>2)];
 var $191=((($190)-(12))|0);
 var $192=$191;
 var $193=HEAP32[(($192)>>2)];
 var $194=$188;
 var $195=(($194+$193)|0);
 var $196=$195;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($196) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=35;break; }
 case 33: 
 ___cxa_end_catch();
 label=34;break;
 case 34: 
 var $199=$28;
 STACKTOP=sp;return $199;
 case 35: 
 var $201$0 = ___cxa_find_matching_catch(-1, -1); var $201$1 = tempRet0;
 var $202=$201$0;
 $30=$202;
 var $203=$201$1;
 $31=$203;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=38;break; }
 case 36: 
 label=37;break;
 case 37: 
 var $206=$30;
 var $207=$31;
 var $208$0=$206;
 var $208$1=0;
 var $209$0=$208$0;
 var $209$1=$207;
 ___resumeException($209$0)
 case 38: 
 var $211$0 = ___cxa_find_matching_catch(-1, -1,0); var $211$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9;
 $9=$__os;
 var $10=$9;
 var $11=$9;
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=((($13)-(12))|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$11;
 var $18=(($17+$16)|0);
 var $19=$18;
 $4=$19;
 $5=10;
 var $20=$4;
 var $21=$20;
 __ZNKSt3__18ios_base6getlocEv($6,$21);
 $3=$6;
 var $22=$3;
 var $23=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($22,16840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $24=$23;
 var $25=$5;
 $1=$24;
 $2=$25;
 var $26=$1;
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+28)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$2;
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26,$31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=3;break; }
 case 3: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 var $35=$34$0;
 $7=$35;
 var $36=$34$1;
 $8=$36;
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 var $38=$7;
 var $39=$8;
 var $40$0=$38;
 var $40$1=0;
 var $41$0=$40$0;
 var $41$1=$39;
 ___resumeException($41$0)
 case 5: 
 var $43$0 = ___cxa_find_matching_catch(-1, -1,0); var $43$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 __ZNSt3__16localeD2Ev($6);
 var $44=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($10,$32);
 var $45=$9;
 var $46=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($45);
 var $47=$9;
 STACKTOP=sp;return $47;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl5ErrorC1ERKS0_($this,$0){
 var label=0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$3;
 __ZN2cl5ErrorC2ERKS0_($4,$5);
 return;
}
function __ZNK2cl5Error4whatEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 var $4=(($3+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=880;
 label=4;break;
 case 3: 
 var $9=(($3+8)|0);
 var $10=HEAP32[(($9)>>2)];
 $1=$10;
 label=4;break;
 case 4: 
 var $12=$1;
 return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl5Error3errEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN2cl5ErrorD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl5ErrorD2Ev($2);
 return;
}
// WARNING: content after a branch in a label, line: 1827
// WARNING: content after a branch in a label, line: 1829
// WARNING: content after a branch in a label, line: 1830
// WARNING: content after a branch in a label, line: 1831
// WARNING: content after a branch in a label, line: 1832
// WARNING: content after a branch in a label, line: 1833
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $__r_i;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62=sp;
 var $__sz;
 var $__ns;
 var $__np;
 var $63=(sp)+(8);
 var $__sp=(sp)+(16);
 var $64;
 var $65;
 var $66=(sp)+(32);
 var $67;
 var $68=(sp)+(40);
 $57=$__ob;
 $58=$__op;
 $59=$__oe;
 $60=$__iob;
 $61=$__fl;
 var $69=(($__s)|0);
 var $70=HEAP32[(($69)>>2)];
 $55=$62;
 $56=-1;
 var $71=$55;
 var $72=$56;
 $53=$71;
 $54=$72;
 var $73=$53;
 var $74=(($73)|0);
 HEAP32[(($74)>>2)]=0;
 $42=$62;
 var $75=$42;
 var $76=($70|0)==0;
 if($76){label=2;break;}else{label=3;break;}
 case 2: 
 var $78=$agg_result;
 var $79=$__s;
 assert(4 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];
 label=30;break;
 case 3: 
 var $81=$59;
 var $82=$57;
 var $83=$81;
 var $84=$82;
 var $85=((($83)-($84))|0);
 $__sz=$85;
 var $86=$60;
 $41=$86;
 var $87=$41;
 var $88=(($87+12)|0);
 var $89=HEAP32[(($88)>>2)];
 $__ns=$89;
 var $90=$__ns;
 var $91=$__sz;
 var $92=($90|0)>($91|0);
 if($92){label=4;break;}else{label=5;break;}
 case 4: 
 var $94=$__sz;
 var $95=$__ns;
 var $96=((($95)-($94))|0);
 $__ns=$96;
 label=6;break;
 case 5: 
 $__ns=0;
 label=6;break;
 case 6: 
 var $99=$58;
 var $100=$57;
 var $101=$99;
 var $102=$100;
 var $103=((($101)-($102))|0);
 $__np=$103;
 var $104=$__np;
 var $105=($104|0)>0;
 if($105){label=7;break;}else{label=10;break;}
 case 7: 
 var $107=(($__s)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$57;
 var $110=$__np;
 $38=$108;
 $39=$109;
 $40=$110;
 var $111=$38;
 var $112=$111;
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113+48)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=$39;
 var $117=$40;
 var $118=FUNCTION_TABLE[$115]($111,$116,$117);
 var $119=$__np;
 var $120=($118|0)!=($119|0);
 if($120){label=8;break;}else{label=9;break;}
 case 8: 
 $36=$63;
 $37=-1;
 var $122=$36;
 var $123=$37;
 $34=$122;
 $35=$123;
 var $124=$34;
 var $125=(($124)|0);
 HEAP32[(($125)>>2)]=0;
 $25=$63;
 var $126=$25;
 var $127=(($__s)|0);
 HEAP32[(($127)>>2)]=0;
 var $128=$agg_result;
 var $129=$__s;
 assert(4 % 1 === 0);HEAP32[(($128)>>2)]=HEAP32[(($129)>>2)];
 label=30;break;
 case 9: 
 label=10;break;
 case 10: 
 var $132=$__ns;
 var $133=($132|0)>0;
 if($133){label=11;break;}else{label=25;break;}
 case 11: 
 var $135=$__ns;
 var $136=$61;
 $8=$__sp;
 $9=$135;
 $10=$136;
 var $137=$8;
 var $138=$9;
 var $139=$10;
 $5=$137;
 $6=$138;
 $7=$139;
 var $140=$5;
 var $141=$140;
 var $142=(($140)|0);
 $4=$142;
 var $143=$4;
 $3=$143;
 var $144=$3;
 var $145=$144;
 $2=$145;
 var $146=$2;
 var $147=$146;
 $1=$147;
 var $148=$1;
 var $149=(($146)|0);
 var $150=$6;
 var $151=$7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($140,$150,$151);
 var $152=(($__s)|0);
 var $153=HEAP32[(($152)>>2)];
 $24=$__sp;
 var $154=$24;
 $23=$154;
 var $155=$23;
 $22=$155;
 var $156=$22;
 var $157=(($156)|0);
 $21=$157;
 var $158=$21;
 var $159=$158;
 $20=$159;
 var $160=$20;
 var $161=(($160)|0);
 var $162=(($161)|0);
 var $163=$162;
 var $164=(($163)|0);
 var $165=$164;
 var $166=HEAP8[($165)];
 var $167=($166&255);
 var $168=$167&1;
 var $169=($168|0)!=0;
 if($169){label=12;break;}else{label=13;break;}
 case 12: 
 $14=$155;
 var $171=$14;
 var $172=(($171)|0);
 $13=$172;
 var $173=$13;
 var $174=$173;
 $12=$174;
 var $175=$12;
 var $176=(($175)|0);
 var $177=(($176)|0);
 var $178=$177;
 var $179=(($178+8)|0);
 var $180=HEAP32[(($179)>>2)];
 var $194=$180;label=14;break;
 case 13: 
 $19=$155;
 var $182=$19;
 var $183=(($182)|0);
 $18=$183;
 var $184=$18;
 var $185=$184;
 $17=$185;
 var $186=$17;
 var $187=(($186)|0);
 var $188=(($187)|0);
 var $189=$188;
 var $190=(($189+1)|0);
 var $191=(($190)|0);
 $16=$191;
 var $192=$16;
 $15=$192;
 var $193=$15;
 var $194=$193;label=14;break;
 case 14: 
 var $194;
 $11=$194;
 var $195=$11;
 var $196=$__ns;
 $26=$153;
 $27=$195;
 $28=$196;
 var $197=$26;
 var $198=$197;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+48)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$27;
 var $203=$28;
 var $204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($197,$202,$203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 label=16;break;
 case 16: 
 var $206=$__ns;
 var $207=($204|0)!=($206|0);
 if($207){label=17;break;}else{label=21;break;}
 case 17: 
 $31=$66;
 $32=-1;
 var $209=$31;
 var $210=$32;
 $29=$209;
 $30=$210;
 var $211=$29;
 var $212=(($211)|0);
 HEAP32[(($212)>>2)]=0;
 label=18;break;
 case 18: 
 $33=$66;
 var $214=$33;
 label=19;break;
 case 19: 
 var $216=(($__s)|0);
 HEAP32[(($216)>>2)]=0;
 var $217=$agg_result;
 var $218=$__s;
 assert(4 % 1 === 0);HEAP32[(($217)>>2)]=HEAP32[(($218)>>2)];
 $67=1;
 label=22;break;
 case 20: 
 var $220$0 = ___cxa_find_matching_catch(-1, -1); var $220$1 = tempRet0;
 var $221=$220$0;
 $64=$221;
 var $222=$220$1;
 $65=$222;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 21: 
 $67=0;
 label=22;break;
 case 22: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 var $cleanup_dest=$67;
 if(($cleanup_dest|0)==0){ label=23;break;}else if(($cleanup_dest|0)==1){ label=30;break;}else{label=33;break;}
 case 23: 
 label=25;break;
 case 24: 
 label=31;break;
 case 25: 
 var $228=$59;
 var $229=$58;
 var $230=$228;
 var $231=$229;
 var $232=((($230)-($231))|0);
 $__np=$232;
 var $233=$__np;
 var $234=($233|0)>0;
 if($234){label=26;break;}else{label=29;break;}
 case 26: 
 var $236=(($__s)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=$58;
 var $239=$__np;
 $43=$237;
 $44=$238;
 $45=$239;
 var $240=$43;
 var $241=$240;
 var $242=HEAP32[(($241)>>2)];
 var $243=(($242+48)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=$44;
 var $246=$45;
 var $247=FUNCTION_TABLE[$244]($240,$245,$246);
 var $248=$__np;
 var $249=($247|0)!=($248|0);
 if($249){label=27;break;}else{label=28;break;}
 case 27: 
 $48=$68;
 $49=-1;
 var $251=$48;
 var $252=$49;
 $46=$251;
 $47=$252;
 var $253=$46;
 var $254=(($253)|0);
 HEAP32[(($254)>>2)]=0;
 $50=$68;
 var $255=$50;
 var $256=(($__s)|0);
 HEAP32[(($256)>>2)]=0;
 var $257=$agg_result;
 var $258=$__s;
 assert(4 % 1 === 0);HEAP32[(($257)>>2)]=HEAP32[(($258)>>2)];
 label=30;break;
 case 28: 
 label=29;break;
 case 29: 
 var $261=$60;
 $51=$261;
 $52=0;
 var $262=$51;
 var $263=(($262+12)|0);
 var $264=HEAP32[(($263)>>2)];
 $__r_i=$264;
 var $265=$52;
 var $266=(($262+12)|0);
 HEAP32[(($266)>>2)]=$265;
 var $267=$__r_i;
 var $268=$agg_result;
 var $269=$__s;
 assert(4 % 1 === 0);HEAP32[(($268)>>2)]=HEAP32[(($269)>>2)];
 label=30;break;
 case 30: 
 STACKTOP=sp;return;
 case 31: 
 var $272=$64;
 var $273=$65;
 var $274$0=$272;
 var $274$1=0;
 var $275$0=$274$0;
 var $275$1=$273;
 ___resumeException($275$0)
 case 32: 
 var $277$0 = ___cxa_find_matching_catch(-1, -1,0); var $277$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 33: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl5ErrorD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt9exceptionD2Ev($3);
 return;
}
function __ZNSt9exceptionD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZN2cl5ErrorC2ERKS0_($this,$0){
 var label=0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$4;
 var $6=$3;
 var $7=$6;
 __ZNSt9exceptionC2ERKS_($5,$7);
 var $8=$4;
 HEAP32[(($8)>>2)]=8184;
 var $9=(($4+4)|0);
 var $10=$3;
 var $11=(($10+4)|0);
 var $12=HEAP32[(($11)>>2)];
 HEAP32[(($9)>>2)]=$12;
 var $13=(($4+8)|0);
 var $14=$3;
 var $15=(($14+8)|0);
 var $16=HEAP32[(($15)>>2)];
 HEAP32[(($13)>>2)]=$16;
 return;
}
function __ZNSt9exceptionC2ERKS_($this,$0){
 var label=0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$4;
 HEAP32[(($5)>>2)]=5320;
 return;
}
function __ZN2cl5ErrorD0Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl5ErrorD1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt9exceptionD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt9exceptionD2Ev($2);
 return;
}
function __ZNSt9exceptionD0Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt9exceptionD1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNKSt9exception4whatEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 return 624;
}
function __ZN2cl7NDRangeD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZN2cl6size_tILi3EED1Ev($3);
 return;
}
function __ZN2cl6size_tILi3EED1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6size_tILi3EED2Ev($2);
 return;
}
function __ZN2cl6size_tILi3EED2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6vectorIjLj3EED2Ev($3);
 return;
}
function __ZN2cl6vectorIjLj3EED2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZN2cl7NDRangeC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZN2cl6size_tILi3EEC1Ev($3);
 var $4=(($2+20)|0);
 HEAP32[(($4)>>2)]=0;
 return;
}
function __ZN2cl6size_tILi3EEC1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6size_tILi3EEC2Ev($2);
 return;
}
function __ZN2cl6size_tILi3EEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6vectorIjLj3EEC2Ev($3);
 return;
}
function __ZN2cl6vectorIjLj3EEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($2+16)|0);
 HEAP8[($4)]=1;
 return;
}
function __GLOBAL__I_a(){
 var label=0;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init20(){
 var label=0;
 __ZN2cl7NDRangeC1Ev(17376);
 var $1=_atexit((790),17376,___dso_handle);
 return;
}
function __ZN12RenderConfigC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEjjbbj($this,$sceneFileName,$w,$h,$useCPUs,$useGPUs,$forceGPUWorkSize){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34=sp;
 var $35;
 var $36;
 var $37=(sp)+(8);
 var $38;
 var $39;
 var $40;
 var $41;
 var $42=(sp)+(16);
 var $43=(sp)+(24);
 var $44=(sp)+(32);
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56=(sp)+(40);
 $47=$this;
 $48=$sceneFileName;
 $49=$w;
 $50=$h;
 var $57=($useCPUs&1);
 $51=$57;
 var $58=($useGPUs&1);
 $52=$58;
 $53=$forceGPUWorkSize;
 var $59=$47;
 var $60=(($59)|0);
 HEAP32[(($60)>>2)]=0;
 var $61=(($59+516)|0);
 var $62=$49;
 HEAP32[(($61)>>2)]=$62;
 var $63=(($59+520)|0);
 var $64=$50;
 HEAP32[(($63)>>2)]=$64;
 var $65=(($59+524)|0);
 HEAP32[(($65)>>2)]=0;
 var $66=(($59+548)|0);
 __ZN2cl6vectorIP12RenderDeviceLj10EEC1Ev($66);
 var $67=(($59+596)|0);
 $46=$67;
 var $68=$46;
 $45=$68;
 var $69=$45;
 var $70=$69;
 $41=$70;
 var $71=$41;
 var $72=$71;
 $40=$72;
 var $73=$40;
 var $74=(($71)|0);
 $18=$42;
 $19=-1;
 var $75=$18;
 var $76=$19;
 $16=$75;
 $17=$76;
 var $77=$16;
 var $78=(($77)|0);
 HEAP32[(($78)>>2)]=0;
 $20=$42;
 var $79=$20;
 HEAP32[(($74)>>2)]=0;
 var $80=(($71+4)|0);
 $23=$43;
 $24=-1;
 var $81=$23;
 var $82=$24;
 $21=$81;
 $22=$82;
 var $83=$21;
 var $84=(($83)|0);
 HEAP32[(($84)>>2)]=0;
 $25=$43;
 var $85=$25;
 HEAP32[(($80)>>2)]=0;
 var $86=(($71+8)|0);
 $28=$44;
 $29=-1;
 var $87=$28;
 var $88=$29;
 $26=$87;
 $27=$88;
 var $89=$26;
 var $90=(($89)|0);
 HEAP32[(($90)>>2)]=0;
 $30=$44;
 var $91=$30;
 $38=$86;
 $39=0;
 var $92=$38;
 var $93=$39;
 $36=$92;
 HEAP32[(($37)>>2)]=$93;
 var $94=$36;
 var $95=$94;
 $35=$37;
 var $96=$35;
 var $97=HEAP32[(($96)>>2)];
 $33=$95;
 HEAP32[(($34)>>2)]=$97;
 var $98=$33;
 var $99=$98;
 $32=$99;
 var $100=$32;
 var $101=(($98)|0);
 $31=$34;
 var $102=$31;
 var $103=HEAP32[(($102)>>2)];
 HEAP32[(($101)>>2)]=$103;
 label=2;break;
 case 2: 
 var $105=(($59+4)|0);
 var $106=(($105)|0);
 HEAP8[($106)]=0;
 var $107=(($59+596)|0);
 var $108=(($59+548)|0);
 var $109=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 HEAPF64[(($56)>>3)]=1;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEjRKd($107,$109,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=12;break; }
 case 4: 
 var $112=$48;
 $15=$112;
 var $113=$15;
 $14=$113;
 var $114=$14;
 $13=$114;
 var $115=$13;
 $12=$115;
 var $116=$12;
 var $117=(($116)|0);
 $11=$117;
 var $118=$11;
 var $119=$118;
 $10=$119;
 var $120=$10;
 var $121=(($120)|0);
 var $122=(($121)|0);
 var $123=$122;
 var $124=(($123)|0);
 var $125=$124;
 var $126=HEAP8[($125)];
 var $127=($126&255);
 var $128=$127&1;
 var $129=($128|0)!=0;
 if($129){label=5;break;}else{label=6;break;}
 case 5: 
 $4=$115;
 var $131=$4;
 var $132=(($131)|0);
 $3=$132;
 var $133=$3;
 var $134=$133;
 $2=$134;
 var $135=$2;
 var $136=(($135)|0);
 var $137=(($136)|0);
 var $138=$137;
 var $139=(($138+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $154=$140;label=7;break;
 case 6: 
 $9=$115;
 var $142=$9;
 var $143=(($142)|0);
 $8=$143;
 var $144=$8;
 var $145=$144;
 $7=$145;
 var $146=$7;
 var $147=(($146)|0);
 var $148=(($147)|0);
 var $149=$148;
 var $150=(($149+1)|0);
 var $151=(($150)|0);
 $6=$151;
 var $152=$6;
 $5=$152;
 var $153=$5;
 var $154=$153;label=7;break;
 case 7: 
 var $154;
 $1=$154;
 var $155=$1;
 (function() { try { __THREW__ = 0; return __ZN12RenderConfig9ReadSceneEPKc($59,$155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=12;break; }
 case 8: 
 var $157=$51;
 var $158=(($157)&1);
 var $159=$52;
 var $160=(($159)&1);
 var $161=$53;
 (function() { try { __THREW__ = 0; return __ZN12RenderConfig11SetUpOpenCLEbbj($59,$158,$160,$161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $163=(($59+548)|0);
 var $164=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 var $166=($164>>>0)>1;
 var $167=(($59+616)|0);
 var $168=($166&1);
 HEAP8[($167)]=$168;
 var $169=(function() { try { __THREW__ = 0; return __Z13WallClockTimev() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=12;break; }
 case 11: 
 var $171=(($59+608)|0);
 HEAPF64[(($171)>>3)]=$169;
 STACKTOP=sp;return;
 case 12: 
 var $177$0 = ___cxa_find_matching_catch(-1, -1); var $177$1 = tempRet0;
 var $178=$177$0;
 $54=$178;
 var $179=$177$1;
 $55=$179;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev($67) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 label=14;break;
 case 14: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 label=16;break;
 case 16: 
 var $184=$54;
 var $185=$55;
 var $186$0=$184;
 var $186$1=0;
 var $187$0=$186$0;
 var $187$1=$185;
 ___resumeException($187$0)
 case 17: 
 var $189$0 = ___cxa_find_matching_catch(-1, -1,0); var $189$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorIP12RenderDeviceLj10EEC1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6vectorIP12RenderDeviceLj10EEC2Ev($2);
 return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEjRKd($this,$__sz,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 var $7=(sp)+(8);
 var $8=(sp)+(16);
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__cs;
 $19=$this;
 $20=$__sz;
 $21=$__x;
 var $22=$19;
 $18=$22;
 var $23=$18;
 var $24=$23;
 var $25=(($24+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$23;
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$26;
 var $31=$29;
 var $32=((($30)-($31))|0);
 var $33=(((($32|0))/(8))&-1);
 $__cs=$33;
 var $34=$__cs;
 var $35=$20;
 var $36=($34>>>0)<($35>>>0);
 if($36){label=2;break;}else{label=3;break;}
 case 2: 
 var $38=$20;
 var $39=$__cs;
 var $40=((($38)-($39))|0);
 var $41=$21;
 __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEjRKd($22,$40,$41);
 label=9;break;
 case 3: 
 var $43=$__cs;
 var $44=$20;
 var $45=($43>>>0)>($44>>>0);
 if($45){label=4;break;}else{label=8;break;}
 case 4: 
 var $47=$22;
 var $48=(($47)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$20;
 var $51=(($49+($50<<3))|0);
 $16=$22;
 $17=$51;
 var $52=$16;
 var $53=$52;
 var $54=$17;
 $12=$53;
 $13=$54;
 var $55=$12;
 label=5;break;
 case 5: 
 var $57=$13;
 var $58=(($55+4)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($57|0)!=($59|0);
 if($60){label=6;break;}else{label=7;break;}
 case 6: 
 $11=$55;
 var $62=$11;
 var $63=(($62+8)|0);
 $10=$63;
 var $64=$10;
 var $65=$64;
 $9=$65;
 var $66=$9;
 var $67=$66;
 var $68=(($55+4)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=((($69)-(8))|0);
 HEAP32[(($68)>>2)]=$70;
 $1=$70;
 var $71=$1;
 $5=$67;
 $6=$71;
 var $72=$8;
 var $73=$5;
 var $74=$6;
 var $tmp_i_i_i=$4;
 var $tmp1_i_i_i=$7;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $2=$73;
 $3=$74;
 var $75=$3;
 label=5;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+40)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)+(1))|0);
 return $5;
}
function __ZN12RenderConfig9ReadSceneEPKc($this,$fileName){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $f;
 var $c;
 var $i;
 var $s;
 var $mat=sp;
 var $c1;
 $1=$this;
 $2=$fileName;
 var $3=$1;
 var $4=HEAP32[((_stderr)>>2)];
 var $5=$2;
 var $6=_fprintf($4,352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$5,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=$2;
 var $8=_fopen($7,4448);
 $f=$8;
 var $9=$f;
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 var $12=HEAP32[((_stderr)>>2)];
 var $13=$2;
 var $14=_fprintf($12,3408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$13,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(-1);
 throw "Reached an unreachable!";
 case 3: 
 var $16=__Znwj(60);
 var $17=$16;
 var $18=$17;
 _memset($18, 0, 60)|0;
 var $19=(($3+532)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$f;
 var $21=(($3+532)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22)|0);
 var $24=(($23)|0);
 var $25=(($3+532)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26)|0);
 var $28=(($27+4)|0);
 var $29=(($3+532)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30)|0);
 var $32=(($31+8)|0);
 var $33=(($3+532)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+12)|0);
 var $36=(($35)|0);
 var $37=(($3+532)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+12)|0);
 var $40=(($39+4)|0);
 var $41=(($3+532)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+12)|0);
 var $44=(($43+8)|0);
 var $45=_fscanf($20,2504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 48)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$24,HEAP32[(((tempVarArgs)+(8))>>2)]=$28,HEAP32[(((tempVarArgs)+(16))>>2)]=$32,HEAP32[(((tempVarArgs)+(24))>>2)]=$36,HEAP32[(((tempVarArgs)+(32))>>2)]=$40,HEAP32[(((tempVarArgs)+(40))>>2)]=$44,tempVarArgs)); STACKTOP=tempVarArgs;
 $c=$45;
 var $46=$c;
 var $47=($46|0)!=6;
 if($47){label=4;break;}else{label=5;break;}
 case 4: 
 var $49=HEAP32[((_stderr)>>2)];
 var $50=$c;
 var $51=_fprintf($49,1664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$50,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(-1);
 throw "Reached an unreachable!";
 case 5: 
 var $53=$f;
 var $54=(($3+540)|0);
 var $55=_fscanf($53,1400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$54,tempVarArgs)); STACKTOP=tempVarArgs;
 $c=$55;
 var $56=$c;
 var $57=($56|0)!=1;
 if($57){label=6;break;}else{label=7;break;}
 case 6: 
 var $59=HEAP32[((_stderr)>>2)];
 var $60=$c;
 var $61=_fprintf($59,1160,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$60,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(-1);
 throw "Reached an unreachable!";
 case 7: 
 var $63=HEAP32[((_stderr)>>2)];
 var $64=(($3+540)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=_fprintf($63,832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$65,tempVarArgs)); STACKTOP=tempVarArgs;
 var $67=(($3+540)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69$0=_llvm_umul_with_overflow_i32($68,44);
 var $69$1=tempRet0;
 var $70=$69$1;
 var $71=$69$0;
 var $72=($70?-1:$71);
 var $73=__Znaj($72);
 var $74=$73;
 var $75=(($3+536)|0);
 HEAP32[(($75)>>2)]=$74;
 $i=0;
 label=8;break;
 case 8: 
 var $77=$i;
 var $78=(($3+540)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($77>>>0)<($79>>>0);
 if($80){label=9;break;}else{label=18;break;}
 case 9: 
 var $82=$i;
 var $83=(($3+536)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+((($82)*(44))&-1))|0);
 $s=$85;
 var $86=$f;
 var $87=$s;
 var $88=(($87)|0);
 var $89=$s;
 var $90=(($89+4)|0);
 var $91=(($90)|0);
 var $92=$s;
 var $93=(($92+4)|0);
 var $94=(($93+4)|0);
 var $95=$s;
 var $96=(($95+4)|0);
 var $97=(($96+8)|0);
 var $98=$s;
 var $99=(($98+16)|0);
 var $100=(($99)|0);
 var $101=$s;
 var $102=(($101+16)|0);
 var $103=(($102+4)|0);
 var $104=$s;
 var $105=(($104+16)|0);
 var $106=(($105+8)|0);
 var $107=$s;
 var $108=(($107+28)|0);
 var $109=(($108)|0);
 var $110=$s;
 var $111=(($110+28)|0);
 var $112=(($111+4)|0);
 var $113=$s;
 var $114=(($113+28)|0);
 var $115=(($114+8)|0);
 var $116=_fscanf($86,544,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 88)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$88,HEAP32[(((tempVarArgs)+(8))>>2)]=$91,HEAP32[(((tempVarArgs)+(16))>>2)]=$94,HEAP32[(((tempVarArgs)+(24))>>2)]=$97,HEAP32[(((tempVarArgs)+(32))>>2)]=$100,HEAP32[(((tempVarArgs)+(40))>>2)]=$103,HEAP32[(((tempVarArgs)+(48))>>2)]=$106,HEAP32[(((tempVarArgs)+(56))>>2)]=$109,HEAP32[(((tempVarArgs)+(64))>>2)]=$112,HEAP32[(((tempVarArgs)+(72))>>2)]=$115,HEAP32[(((tempVarArgs)+(80))>>2)]=$mat,tempVarArgs)); STACKTOP=tempVarArgs;
 $c1=$116;
 var $117=HEAP32[(($mat)>>2)];
 if(($117|0)==0){ label=10;break;}else if(($117|0)==1){ label=11;break;}else if(($117|0)==2){ label=12;break;}else{label=13;break;}
 case 10: 
 var $119=$s;
 var $120=(($119+40)|0);
 HEAP32[(($120)>>2)]=0;
 label=14;break;
 case 11: 
 var $122=$s;
 var $123=(($122+40)|0);
 HEAP32[(($123)>>2)]=1;
 label=14;break;
 case 12: 
 var $125=$s;
 var $126=(($125+40)|0);
 HEAP32[(($126)>>2)]=2;
 label=14;break;
 case 13: 
 var $128=HEAP32[((_stderr)>>2)];
 var $129=$i;
 var $130=HEAP32[(($mat)>>2)];
 var $131=_fprintf($128,232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$129,HEAP32[(((tempVarArgs)+(8))>>2)]=$130,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(-1);
 throw "Reached an unreachable!";
 case 14: 
 var $133=$c1;
 var $134=($133|0)!=11;
 if($134){label=15;break;}else{label=16;break;}
 case 15: 
 var $136=HEAP32[((_stderr)>>2)];
 var $137=$i;
 var $138=$c1;
 var $139=_fprintf($136,4664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$137,HEAP32[(((tempVarArgs)+(8))>>2)]=$138,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(-1);
 throw "Reached an unreachable!";
 case 16: 
 label=17;break;
 case 17: 
 var $142=$i;
 var $143=((($142)+(1))|0);
 $i=$143;
 label=8;break;
 case 18: 
 var $145=$f;
 var $146=_fclose($145);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderConfig11SetUpOpenCLEbbj($this,$useCPUs,$useGPUs,$forceGPUWorkSize){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $__a_i_i_i;
 var $__i_i_i_i;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $platforms=sp;
 var $43;
 var $44;
 var $i;
 var $platform=(sp)+(48);
 var $devices=(sp)+(56);
 var $selectedDevices=(sp)+(104);
 var $i1;
 var $type;
 var $stype=(sp)+(152);
 var $i2;
 var $45=(sp)+(168);
 var $46;
 var $47=(sp)+(184);
 var $i3;
 var $i4;
 $39=$this;
 var $48=($useCPUs&1);
 $40=$48;
 var $49=($useGPUs&1);
 $41=$49;
 $42=$forceGPUWorkSize;
 var $50=$39;
 __ZN2cl6vectorINS_8PlatformELj10EEC1Ev($platforms);
 var $51=(function() { try { __THREW__ = 0; return __ZN2cl8Platform3getEPNS_6vectorIS0_Lj10EEE($platforms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=13;break; }
 case 2: 
 $i=0;
 label=3;break;
 case 3: 
 var $54=$i;
 var $55=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorINS_8PlatformELj10EE4sizeEv($platforms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=13;break; }
 case 4: 
 var $57=($54>>>0)<($55>>>0);
 if($57){label=5;break;}else{label=14;break;}
 case 5: 
 var $59=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,4456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 var $61=$i;
 var $62=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($59,$61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=13;break; }
 case 7: 
 var $64=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($62,4120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=13;break; }
 case 8: 
 var $66=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($64,3904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=13;break; }
 case 9: 
 $37=$66;
 $38=8;
 var $68=$37;
 var $69=$38;
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $73=$i;
 var $74=((($73)+(1))|0);
 $i=$74;
 label=3;break;
 case 13: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=$76$0;
 $43=$77;
 var $78=$76$1;
 $44=$78;
 label=141;break;
 case 14: 
 var $80=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorINS_8PlatformELj10EE4sizeEv($platforms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=13;break; }
 case 15: 
 var $82=($80|0)==0;
 if($82){label=16;break;}else{label=19;break;}
 case 16: 
 var $84=___cxa_allocate_exception(8);
 var $85=$84;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($85,3776) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($84,11488,(44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=13;break; }
 case 18: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1); var $88$1 = tempRet0;
 var $89=$88$0;
 $43=$89;
 var $90=$88$1;
 $44=$90;
 ___cxa_free_exception($84);
 label=141;break;
 case 19: 
 var $92=(function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_8PlatformELj10EEixEi($platforms,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=13;break; }
 case 20: 
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformC1ERKS0_($platform,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=13;break; }
 case 21: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EEC1Ev($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=40;break; }
 case 22: 
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $96=(function() { try { __THREW__ = 0; return __ZNK2cl8Platform10getDevicesEyPNS_6vectorINS_6DeviceELj10EEE($platform,$$etemp$0$0,$$etemp$0$1,$devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=41;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EEC1Ev($selectedDevices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=41;break; }
 case 24: 
 $i1=0;
 label=25;break;
 case 25: 
 var $100=$i1;
 var $101=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=42;break; }
 case 26: 
 var $103=($100>>>0)<($101>>>0);
 if($103){label=27;break;}else{label=85;break;}
 case 27: 
 var $105=$i1;
 var $106=(function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EEixEi($devices,$105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=42;break; }
 case 28: 
 var $108$r=(function() { try { __THREW__ = 0; return __ZNK2cl6Device7getInfoILi4096EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi($106,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $108$0=$108$r;var $108$1=tempRet0;if (!__THREW__) { label=29;break; } else { label=42;break; }
 case 29: 
 var $110$0=$108$0;
 var $110=$110$0;
 $type=$110;
 var $111=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,3728) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=42;break; }
 case 30: 
 var $113=$i1;
 var $114=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($111,$113) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $116=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($114,4120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=42;break; }
 case 32: 
 var $118=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($116,3904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=42;break; }
 case 33: 
 $35=$118;
 $36=8;
 var $120=$35;
 var $121=$36;
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=42;break; }
 case 34: 
 label=35;break;
 case 35: 
 $34=$stype;
 var $124=$34;
 $33=$124;
 var $125=$33;
 var $126=$125;
 var $127=(($125)|0);
 $32=$127;
 var $128=$32;
 $31=$128;
 var $129=$31;
 var $130=$129;
 $30=$130;
 var $131=$30;
 var $132=$131;
 $29=$132;
 var $133=$29;
 var $134=(($131)|0);
 $28=$125;
 var $135=$28;
 var $136=(($135)|0);
 $27=$136;
 var $137=$27;
 var $138=$137;
 $26=$138;
 var $139=$26;
 var $140=(($139)|0);
 var $141=(($140)|0);
 var $142=$141;
 var $143=(($142)|0);
 $__a_i_i_i=$143;
 $__i_i_i_i=0;
 label=36;break;
 case 36: 
 var $145=$__i_i_i_i;
 var $146=($145>>>0)<3;
 if($146){label=37;break;}else{label=38;break;}
 case 37: 
 var $148=$__i_i_i_i;
 var $149=$__a_i_i_i;
 var $150=(($149+($148<<2))|0);
 HEAP32[(($150)>>2)]=0;
 var $151=$__i_i_i_i;
 var $152=((($151)+(1))|0);
 $__i_i_i_i=$152;
 label=36;break;
 case 38: 
 label=39;break;
 case 39: 
 var $154=$type;
 if(($154|0)==-1){ label=43;break;}else if(($154|0)==1){ label=47;break;}else if(($154|0)==2){ label=50;break;}else if(($154|0)==4){ label=57;break;}else{label=64;break;}
 case 40: 
 var $156$0 = ___cxa_find_matching_catch(-1, -1); var $156$1 = tempRet0;
 var $157=$156$0;
 $43=$157;
 var $158=$156$1;
 $44=$158;
 label=139;break;
 case 41: 
 var $160$0 = ___cxa_find_matching_catch(-1, -1); var $160$1 = tempRet0;
 var $161=$160$0;
 $43=$161;
 var $162=$160$1;
 $44=$162;
 label=137;break;
 case 42: 
 var $164$0 = ___cxa_find_matching_catch(-1, -1); var $164$1 = tempRet0;
 var $165=$164$0;
 $43=$165;
 var $166=$164$1;
 $44=$166;
 label=135;break;
 case 43: 
 $24=$stype;
 $25=3680;
 var $168=$24;
 var $169=$25;
 var $170=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($168,$169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=46;break; }
 case 44: 
 label=45;break;
 case 45: 
 label=67;break;
 case 46: 
 var $173$0 = ___cxa_find_matching_catch(-1, -1); var $173$1 = tempRet0;
 var $174=$173$0;
 $43=$174;
 var $175=$173$1;
 $44=$175;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($stype) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=144;break; }
 case 47: 
 $22=$stype;
 $23=3648;
 var $177=$22;
 var $178=$23;
 var $179=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($177,$178) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=46;break; }
 case 48: 
 label=49;break;
 case 49: 
 label=67;break;
 case 50: 
 $20=$stype;
 $21=3600;
 var $182=$20;
 var $183=$21;
 var $184=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($182,$183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=46;break; }
 case 51: 
 label=52;break;
 case 52: 
 var $186=$40;
 var $187=(($186)&1);
 if($187){label=53;break;}else{label=56;break;}
 case 53: 
 var $189=$i1;
 var $190=(function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EEixEi($devices,$189) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=46;break; }
 case 54: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EE9push_backERKS1_($selectedDevices,$190) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=46;break; }
 case 55: 
 label=56;break;
 case 56: 
 label=67;break;
 case 57: 
 $18=$stype;
 $19=3560;
 var $195=$18;
 var $196=$19;
 var $197=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($195,$196) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=46;break; }
 case 58: 
 label=59;break;
 case 59: 
 var $199=$41;
 var $200=(($199)&1);
 if($200){label=60;break;}else{label=63;break;}
 case 60: 
 var $202=$i1;
 var $203=(function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EEixEi($devices,$202) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=46;break; }
 case 61: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EE9push_backERKS1_($selectedDevices,$203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=46;break; }
 case 62: 
 label=63;break;
 case 63: 
 label=67;break;
 case 64: 
 $16=$stype;
 $17=3480;
 var $208=$16;
 var $209=$17;
 var $210=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($208,$209) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=46;break; }
 case 65: 
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 var $213=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,3440) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=46;break; }
 case 68: 
 var $215=$i1;
 var $216=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($213,$215) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=46;break; }
 case 69: 
 var $218=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($216,4120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=46;break; }
 case 70: 
 var $220=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($218,$stype) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=46;break; }
 case 71: 
 $14=$220;
 $15=8;
 var $222=$14;
 var $223=$15;
 var $224=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$223]($222) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=46;break; }
 case 72: 
 label=73;break;
 case 73: 
 var $226=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,3312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=46;break; }
 case 74: 
 var $228=$i1;
 var $229=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($226,$228) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=46;break; }
 case 75: 
 var $231=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($229,4120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=46;break; }
 case 76: 
 var $233=$i1;
 var $234=(function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EEixEi($devices,$233) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=46;break; }
 case 77: 
 var $236=(function() { try { __THREW__ = 0; return __ZNK2cl6Device7getInfoILi4098EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi($234,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=46;break; }
 case 78: 
 var $238=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($231,$236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=79;break; } else { label=46;break; }
 case 79: 
 $12=$238;
 $13=8;
 var $240=$12;
 var $241=$13;
 var $242=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$241]($240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=46;break; }
 case 80: 
 label=81;break;
 case 81: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($stype) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=42;break; }
 case 82: 
 label=83;break;
 case 83: 
 var $246=$i1;
 var $247=((($246)+(1))|0);
 $i1=$247;
 label=25;break;
 case 84: 
 label=135;break;
 case 85: 
 var $250=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv($selectedDevices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=42;break; }
 case 86: 
 var $252=($250|0)==0;
 if($252){label=87;break;}else{label=90;break;}
 case 87: 
 var $254=___cxa_allocate_exception(8);
 var $255=$254;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($255,3216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { label=89;break; }
 case 88: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($254,11488,(44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=42;break; }
 case 89: 
 var $258$0 = ___cxa_find_matching_catch(-1, -1); var $258$1 = tempRet0;
 var $259=$258$0;
 $43=$259;
 var $260=$258$1;
 $44=$260;
 ___cxa_free_exception($254);
 label=135;break;
 case 90: 
 $i2=0;
 label=91;break;
 case 91: 
 var $263=$i2;
 var $264=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv($selectedDevices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=92;break; } else { label=42;break; }
 case 92: 
 var $266=($263>>>0)<($264>>>0);
 if($266){label=93;break;}else{label=109;break;}
 case 93: 
 var $268=(($50+548)|0);
 var $269=(function() { try { __THREW__ = 0; return __Znwj(104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=42;break; }
 case 94: 
 $46=1;
 var $271=$269;
 var $272=$i2;
 var $273=(function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EEixEi($selectedDevices,$272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=103;break; }
 case 95: 
 $10=$45;
 $11=3136;
 var $275=$10;
 var $276=$11;
 $8=$275;
 $9=$276;
 var $277=$8;
 var $278=$277;
 var $279=(($277)|0);
 $7=$279;
 var $280=$7;
 $6=$280;
 var $281=$6;
 var $282=$281;
 $5=$282;
 var $283=$5;
 var $284=$283;
 $4=$284;
 var $285=$4;
 var $286=(($283)|0);
 var $287=$9;
 var $288=$9;
 $3=$288;
 var $289=$3;
 var $290=(function() { try { __THREW__ = 0; return _strlen($289) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=96;break; } else { label=103;break; }
 case 96: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($277,$287,$290) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=103;break; }
 case 97: 
 label=98;break;
 case 98: 
 var $292=$42;
 var $293=(($50+532)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=(($50+536)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($50+540)|0);
 var $298=HEAP32[(($297)>>2)];
 (function() { try { __THREW__ = 0; return __ZN12RenderDeviceC2ERKN2cl6DeviceERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEjP6CameraP6Spherej($271,$273,$45,$292,$294,$296,$298) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=99;break; } else { label=104;break; }
 case 99: 
 $46=0;
 HEAP32[(($47)>>2)]=$271;
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorIP12RenderDeviceLj10EE9push_backERKS2_($268,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { label=104;break; }
 case 100: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=101;break; } else { label=103;break; }
 case 101: 
 label=102;break;
 case 102: 
 var $303=$i2;
 var $304=((($303)+(1))|0);
 $i2=$304;
 label=91;break;
 case 103: 
 var $306$0 = ___cxa_find_matching_catch(-1, -1); var $306$1 = tempRet0;
 var $307=$306$0;
 $43=$307;
 var $308=$306$1;
 $44=$308;
 label=106;break;
 case 104: 
 var $310$0 = ___cxa_find_matching_catch(-1, -1); var $310$1 = tempRet0;
 var $311=$310$0;
 $43=$311;
 var $312=$310$1;
 $44=$312;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=144;break; }
 case 105: 
 label=106;break;
 case 106: 
 var $315=$46;
 if($315){label=107;break;}else{label=108;break;}
 case 107: 
 __ZdlPv($269);
 label=108;break;
 case 108: 
 label=135;break;
 case 109: 
 var $319=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,3016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=42;break; }
 case 110: 
 $i3=0;
 label=111;break;
 case 111: 
 var $322=$i3;
 var $323=(($50+548)|0);
 var $324=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($323) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=112;break; } else { label=42;break; }
 case 112: 
 var $326=($322>>>0)<($324>>>0);
 if($326){label=113;break;}else{label=120;break;}
 case 113: 
 var $328=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2936) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=114;break; } else { label=42;break; }
 case 114: 
 var $330=(($50+548)|0);
 var $331=$i3;
 var $332=(function() { try { __THREW__ = 0; return __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($330,$331) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=42;break; }
 case 115: 
 var $334=HEAP32[(($332)>>2)];
 var $335=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice7GetNameEv($334) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=42;break; }
 case 116: 
 var $337=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($328,$335) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=117;break; } else { label=42;break; }
 case 117: 
 var $339=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($337,2848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=118;break; } else { label=42;break; }
 case 118: 
 label=119;break;
 case 119: 
 var $342=$i3;
 var $343=((($342)+(1))|0);
 $i3=$343;
 label=111;break;
 case 120: 
 $1=17112;
 $2=8;
 var $345=$1;
 var $346=$2;
 var $347=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$346]($345) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=121;break; } else { label=42;break; }
 case 121: 
 label=122;break;
 case 122: 
 label=123;break;
 case 123: 
 var $350=(($50+516)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=(($50+520)|0);
 var $353=HEAP32[(($352)>>2)];
 var $354=(Math_imul($351,$353)|0);
 var $355$0=_llvm_umul_with_overflow_i32($354,4);
 var $355$1=tempRet0;
 var $356=$355$1;
 var $357=$355$0;
 var $358=($356?-1:$357);
 var $359=(function() { try { __THREW__ = 0; return __Znaj($358) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=124;break; } else { label=42;break; }
 case 124: 
 var $361=$359;
 var $362=(($50+528)|0);
 HEAP32[(($362)>>2)]=$361;
 $i4=0;
 label=125;break;
 case 125: 
 var $364=$i4;
 var $365=(($50+516)|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=(($50+520)|0);
 var $368=HEAP32[(($367)>>2)];
 var $369=(Math_imul($366,$368)|0);
 var $370=($364>>>0)<($369>>>0);
 if($370){label=126;break;}else{label=128;break;}
 case 126: 
 var $372=$i4;
 var $373=$i4;
 var $374=(($50+528)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=(($375+($373<<2))|0);
 HEAP32[(($376)>>2)]=$372;
 label=127;break;
 case 127: 
 var $378=$i4;
 var $379=((($378)+(1))|0);
 $i4=$379;
 label=125;break;
 case 128: 
 (function() { try { __THREW__ = 0; return __ZN12RenderConfig20UpdateDeviceWorkloadEb($50,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=129;break; } else { label=42;break; }
 case 129: 
 (function() { try { __THREW__ = 0; return __ZN12RenderConfig11ReInitSceneEv($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=130;break; } else { label=42;break; }
 case 130: 
 (function() { try { __THREW__ = 0; return __ZN12RenderConfig6ReInitEi($50,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=131;break; } else { label=42;break; }
 case 131: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EED1Ev($selectedDevices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=41;break; }
 case 132: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EED1Ev($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=40;break; }
 case 133: 
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformD1Ev($platform) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=134;break; } else { label=13;break; }
 case 134: 
 __ZN2cl6vectorINS_8PlatformELj10EED1Ev($platforms);
 STACKTOP=sp;return;
 case 135: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EED1Ev($selectedDevices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=136;break; } else { label=144;break; }
 case 136: 
 label=137;break;
 case 137: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EED1Ev($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=138;break; } else { label=144;break; }
 case 138: 
 label=139;break;
 case 139: 
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformD1Ev($platform) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=140;break; } else { label=144;break; }
 case 140: 
 label=141;break;
 case 141: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_8PlatformELj10EED1Ev($platforms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=142;break; } else { label=144;break; }
 case 142: 
 label=143;break;
 case 143: 
 var $396=$43;
 var $397=$44;
 var $398$0=$396;
 var $398$1=0;
 var $399$0=$398$0;
 var $399$1=$397;
 ___resumeException($399$0)
 case 144: 
 var $401$0 = ___cxa_find_matching_catch(-1, -1,0); var $401$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 145: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($2);
 return;
}
function __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6vectorIP12RenderDeviceLj10EED2Ev($2);
 return;
}
function __ZN12RenderConfigD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 $i=0;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=(($4+548)|0);
 var $8=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $10=($6>>>0)<($8>>>0);
 if($10){label=4;break;}else{label=12;break;}
 case 4: 
 var $12=(($4+548)|0);
 var $13=$i;
 var $14=(function() { try { __THREW__ = 0; return __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($12,$13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=10;break; }
 case 5: 
 var $16=HEAP32[(($14)>>2)];
 var $17=($16|0)==0;
 if($17){label=8;break;}else{label=6;break;}
 case 6: 
 (function() { try { __THREW__ = 0; return __ZN12RenderDeviceD2Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=11;break; }
 case 7: 
 var $20=$16;
 __ZdlPv($20);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $23=$i;
 var $24=((($23)+(1))|0);
 $i=$24;
 label=2;break;
 case 10: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=$26$0;
 $2=$27;
 var $28=$26$1;
 $3=$28;
 label=21;break;
 case 11: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 var $31=$30$0;
 $2=$31;
 var $32=$30$1;
 $3=$32;
 var $33=$16;
 __ZdlPv($33);
 label=21;break;
 case 12: 
 var $35=(($4+528)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==0;
 if($37){label=14;break;}else{label=13;break;}
 case 13: 
 var $39=$36;
 __ZdlPv($39);
 label=14;break;
 case 14: 
 var $41=(($4+532)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==0;
 if($43){label=16;break;}else{label=15;break;}
 case 15: 
 var $45=$42;
 __ZdlPv($45);
 label=16;break;
 case 16: 
 var $47=(($4+536)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)==0;
 if($49){label=18;break;}else{label=17;break;}
 case 17: 
 var $51=$48;
 __ZdlPv($51);
 label=18;break;
 case 18: 
 var $53=(($4+596)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=20;break; }
 case 19: 
 var $55=(($4+548)|0);
 __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($55);
 return;
 case 20: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=$57$0;
 $2=$58;
 var $59=$57$1;
 $3=$59;
 label=23;break;
 case 21: 
 var $61=(($4+596)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=26;break; }
 case 22: 
 label=23;break;
 case 23: 
 var $64=(($4+548)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=26;break; }
 case 24: 
 label=25;break;
 case 25: 
 var $67=$2;
 var $68=$3;
 var $69$0=$67;
 var $69$1=0;
 var $70$0=$69$0;
 var $70$1=$68;
 ___resumeException($70$0)
 case 26: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1,0); var $72$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($this,$index){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$index;
 var $3=$1;
 var $4=$2;
 var $5=(($3)|0);
 var $6=(($5+($4<<2))|0);
 return $6;
}
function __ZN2cl6vectorINS_8PlatformELj10EEC1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6vectorINS_8PlatformELj10EEC2Ev($2);
 return;
}
function __ZN2cl8Platform3getEPNS_6vectorIS0_Lj10EEE($platforms){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $n=sp;
 var $err;
 var $ids;
 $2=$platforms;
 HEAP32[(($n)>>2)]=0;
 var $3=_clGetPlatformIDs(0,0,$n);
 $err=$3;
 var $4=$err;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$err;
 var $8=__ZN2cl6detailL10errHandlerEiPKc($7,1872);
 $1=$8;
 label=6;break;
 case 3: 
 var $10=HEAP32[(($n)>>2)];
 var $11=($10<<2);
 var $12=STACKTOP;STACKTOP = (STACKTOP + $11)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 $ids=$13;
 var $14=HEAP32[(($n)>>2)];
 var $15=$ids;
 var $16=_clGetPlatformIDs($14,$15,0);
 $err=$16;
 var $17=$err;
 var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$err;
 var $21=__ZN2cl6detailL10errHandlerEiPKc($20,1872);
 $1=$21;
 label=6;break;
 case 5: 
 var $23=$2;
 var $24=$ids;
 var $25=(($24)|0);
 var $26=HEAP32[(($n)>>2)];
 var $27=$ids;
 var $28=(($27+($26<<2))|0);
 __ZN2cl6vectorINS_8PlatformELj10EE6assignIPP15_cl_platform_idEEvT_S7_($23,$25,$28);
 $1=0;
 label=6;break;
 case 6: 
 var $30=$1;
 STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6vectorINS_8PlatformELj10EE4sizeEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+40)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)+(1))|0);
 return $5;
}
function __ZN2cl8PlatformC1ERKS0_($this,$platform){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$platform;
 var $3=$1;
 var $4=$2;
 __ZN2cl8PlatformC2ERKS0_($3,$4);
 return;
}
function __ZN2cl6vectorINS_8PlatformELj10EEixEi($this,$index){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$index;
 var $3=$1;
 var $4=$2;
 var $5=(($3)|0);
 var $6=(($5+($4<<2))|0);
 return $6;
}
function __ZN2cl6vectorINS_6DeviceELj10EEC1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6vectorINS_6DeviceELj10EEC2Ev($2);
 return;
}
function __ZNK2cl8Platform10getDevicesEyPNS_6vectorINS_6DeviceELj10EEE($this,$type$0,$type$1,$devices){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $n=(sp)+(8);
 var $err;
 var $ids;
 $2=$this;
 var $st$0$0=(($3)|0);
 HEAP32[(($st$0$0)>>2)]=$type$0;
 var $st$1$1=(($3+4)|0);
 HEAP32[(($st$1$1)>>2)]=$type$1;
 $4=$devices;
 var $5=$2;
 HEAP32[(($n)>>2)]=0;
 var $6=$5;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $ld$2$0=(($3)|0);
 var $9$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $9$1=HEAP32[(($ld$3$1)>>2)];
 var $10=_clGetDeviceIDs($8,$9$0,$9$1,0,0,$n);
 $err=$10;
 var $11=$err;
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=$err;
 var $15=__ZN2cl6detailL10errHandlerEiPKc($14,1936);
 $1=$15;
 label=6;break;
 case 3: 
 var $17=HEAP32[(($n)>>2)];
 var $18=($17<<2);
 var $19=STACKTOP;STACKTOP = (STACKTOP + $18)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $20=$19;
 $ids=$20;
 var $21=$5;
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $ld$4$0=(($3)|0);
 var $24$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($3+4)|0);
 var $24$1=HEAP32[(($ld$5$1)>>2)];
 var $25=HEAP32[(($n)>>2)];
 var $26=$ids;
 var $27=_clGetDeviceIDs($23,$24$0,$24$1,$25,$26,0);
 $err=$27;
 var $28=$err;
 var $29=($28|0)!=0;
 if($29){label=4;break;}else{label=5;break;}
 case 4: 
 var $31=$err;
 var $32=__ZN2cl6detailL10errHandlerEiPKc($31,1936);
 $1=$32;
 label=6;break;
 case 5: 
 var $34=$4;
 var $35=$ids;
 var $36=(($35)|0);
 var $37=HEAP32[(($n)>>2)];
 var $38=$ids;
 var $39=(($38+($37<<2))|0);
 __ZN2cl6vectorINS_6DeviceELj10EE6assignIPP13_cl_device_idEEvT_S7_($34,$36,$39);
 $1=0;
 label=6;break;
 case 6: 
 var $41=$1;
 STACKTOP=sp;return $41;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+40)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)+(1))|0);
 return $5;
}
function __ZN2cl6vectorINS_6DeviceELj10EEixEi($this,$index){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$index;
 var $3=$1;
 var $4=$2;
 var $5=(($3)|0);
 var $6=(($5+($4<<2))|0);
 return $6;
}
function __ZNK2cl6Device7getInfoILi4096EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi($this,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $param=sp;
 var $result;
 $1=$this;
 $2=$err;
 var $3=$1;
 var $4=__ZNK2cl6Device7getInfoIyEEijPT_($3,4096,$param);
 $result=$4;
 var $5=$2;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$result;
 var $9=$2;
 HEAP32[(($9)>>2)]=$8;
 label=3;break;
 case 3: 
 var $ld$0$0=(($param)|0);
 var $11$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($param+4)|0);
 var $11$1=HEAP32[(($ld$1$1)>>2)];
 STACKTOP=sp;return (tempRet0=$11$1,$11$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorINS_6DeviceELj10EE9push_backERKS1_($this,$x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$x;
 var $3=$1;
 var $4=__ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv($3);
 var $5=($4>>>0)<10;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($3+40)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)+(1))|0);
 HEAP32[(($7)>>2)]=$9;
 var $10=(($3+40)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($3)|0);
 var $13=(($12+($11<<2))|0);
 var $14=$2;
 var $15=__ZN2cl6DeviceaSERKS0_($13,$14);
 var $16=(($3+44)|0);
 HEAP8[($16)]=0;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50=sp;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $__s=(sp)+(8);
 var $95;
 var $96;
 var $__len;
 var $97=(sp)+(16);
 var $98=(sp)+(24);
 $93=$__os;
 $94=$__str;
 var $99=$93;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s,$99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 $92=$__s;
 var $101=$92;
 var $102=(($101)|0);
 var $103=HEAP8[($102)];
 var $104=(($103)&1);
 label=3;break;
 case 3: 
 if($104){label=4;break;}else{label=42;break;}
 case 4: 
 var $107=$94;
 $91=$107;
 var $108=$91;
 $90=$108;
 var $109=$90;
 var $110=(($109)|0);
 $89=$110;
 var $111=$89;
 var $112=$111;
 $88=$112;
 var $113=$88;
 var $114=(($113)|0);
 var $115=(($114)|0);
 var $116=$115;
 var $117=(($116)|0);
 var $118=$117;
 var $119=HEAP8[($118)];
 var $120=($119&255);
 var $121=$120&1;
 var $122=($121|0)!=0;
 if($122){label=5;break;}else{label=6;break;}
 case 5: 
 $84=$108;
 var $124=$84;
 var $125=(($124)|0);
 $83=$125;
 var $126=$83;
 var $127=$126;
 $82=$127;
 var $128=$82;
 var $129=(($128)|0);
 var $130=(($129)|0);
 var $131=$130;
 var $132=(($131+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $148=$133;label=7;break;
 case 6: 
 $87=$108;
 var $135=$87;
 var $136=(($135)|0);
 $86=$136;
 var $137=$86;
 var $138=$137;
 $85=$138;
 var $139=$85;
 var $140=(($139)|0);
 var $141=(($140)|0);
 var $142=$141;
 var $143=(($142)|0);
 var $144=$143;
 var $145=HEAP8[($144)];
 var $146=($145&255);
 var $147=$146>>1;
 var $148=$147;label=7;break;
 case 7: 
 var $148;
 $__len=$148;
 var $149=$93;
 $80=$97;
 $81=$149;
 var $150=$80;
 var $151=$81;
 $76=$150;
 $77=$151;
 var $152=$76;
 var $153=$152;
 var $154=(($152)|0);
 var $155=$77;
 var $156=$155;
 var $157=HEAP32[(($156)>>2)];
 var $158=((($157)-(12))|0);
 var $159=$158;
 var $160=HEAP32[(($159)>>2)];
 var $161=$155;
 var $162=(($161+$160)|0);
 var $163=$162;
 $75=$163;
 var $164=$75;
 var $165=$164;
 $74=$165;
 var $166=$74;
 var $167=(($166+24)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=$168;
 HEAP32[(($154)>>2)]=$169;
 var $170=$94;
 $69=$170;
 var $171=$69;
 $68=$171;
 var $172=$68;
 $67=$172;
 var $173=$67;
 var $174=(($173)|0);
 $66=$174;
 var $175=$66;
 var $176=$175;
 $65=$176;
 var $177=$65;
 var $178=(($177)|0);
 var $179=(($178)|0);
 var $180=$179;
 var $181=(($180)|0);
 var $182=$181;
 var $183=HEAP8[($182)];
 var $184=($183&255);
 var $185=$184&1;
 var $186=($185|0)!=0;
 if($186){label=8;break;}else{label=9;break;}
 case 8: 
 $59=$172;
 var $188=$59;
 var $189=(($188)|0);
 $58=$189;
 var $190=$58;
 var $191=$190;
 $57=$191;
 var $192=$57;
 var $193=(($192)|0);
 var $194=(($193)|0);
 var $195=$194;
 var $196=(($195+8)|0);
 var $197=HEAP32[(($196)>>2)];
 var $211=$197;label=10;break;
 case 9: 
 $64=$172;
 var $199=$64;
 var $200=(($199)|0);
 $63=$200;
 var $201=$63;
 var $202=$201;
 $62=$202;
 var $203=$62;
 var $204=(($203)|0);
 var $205=(($204)|0);
 var $206=$205;
 var $207=(($206+1)|0);
 var $208=(($207)|0);
 $61=$208;
 var $209=$61;
 $60=$209;
 var $210=$60;
 var $211=$210;label=10;break;
 case 10: 
 var $211;
 $56=$211;
 var $212=$56;
 var $213=$93;
 var $214=$213;
 var $215=HEAP32[(($214)>>2)];
 var $216=((($215)-(12))|0);
 var $217=$216;
 var $218=HEAP32[(($217)>>2)];
 var $219=$213;
 var $220=(($219+$218)|0);
 var $221=$220;
 $54=$221;
 var $222=$54;
 var $223=(($222+4)|0);
 var $224=HEAP32[(($223)>>2)];
 label=11;break;
 case 11: 
 var $226=$224&176;
 var $227=($226|0)==32;
 if($227){label=12;break;}else{label=16;break;}
 case 12: 
 var $229=$94;
 $42=$229;
 var $230=$42;
 $41=$230;
 var $231=$41;
 $40=$231;
 var $232=$40;
 var $233=(($232)|0);
 $39=$233;
 var $234=$39;
 var $235=$234;
 $38=$235;
 var $236=$38;
 var $237=(($236)|0);
 var $238=(($237)|0);
 var $239=$238;
 var $240=(($239)|0);
 var $241=$240;
 var $242=HEAP8[($241)];
 var $243=($242&255);
 var $244=$243&1;
 var $245=($244|0)!=0;
 if($245){label=13;break;}else{label=14;break;}
 case 13: 
 $32=$231;
 var $247=$32;
 var $248=(($247)|0);
 $31=$248;
 var $249=$31;
 var $250=$249;
 $30=$250;
 var $251=$30;
 var $252=(($251)|0);
 var $253=(($252)|0);
 var $254=$253;
 var $255=(($254+8)|0);
 var $256=HEAP32[(($255)>>2)];
 var $270=$256;label=15;break;
 case 14: 
 $37=$231;
 var $258=$37;
 var $259=(($258)|0);
 $36=$259;
 var $260=$36;
 var $261=$260;
 $35=$261;
 var $262=$35;
 var $263=(($262)|0);
 var $264=(($263)|0);
 var $265=$264;
 var $266=(($265+1)|0);
 var $267=(($266)|0);
 $34=$267;
 var $268=$34;
 $33=$268;
 var $269=$33;
 var $270=$269;label=15;break;
 case 15: 
 var $270;
 $29=$270;
 var $271=$29;
 var $272=$__len;
 var $273=(($271+$272)|0);
 var $319=$273;label=20;break;
 case 16: 
 var $275=$94;
 $28=$275;
 var $276=$28;
 $27=$276;
 var $277=$27;
 $26=$277;
 var $278=$26;
 var $279=(($278)|0);
 $25=$279;
 var $280=$25;
 var $281=$280;
 $24=$281;
 var $282=$24;
 var $283=(($282)|0);
 var $284=(($283)|0);
 var $285=$284;
 var $286=(($285)|0);
 var $287=$286;
 var $288=HEAP8[($287)];
 var $289=($288&255);
 var $290=$289&1;
 var $291=($290|0)!=0;
 if($291){label=17;break;}else{label=18;break;}
 case 17: 
 $18=$277;
 var $293=$18;
 var $294=(($293)|0);
 $17=$294;
 var $295=$17;
 var $296=$295;
 $16=$296;
 var $297=$16;
 var $298=(($297)|0);
 var $299=(($298)|0);
 var $300=$299;
 var $301=(($300+8)|0);
 var $302=HEAP32[(($301)>>2)];
 var $316=$302;label=19;break;
 case 18: 
 $23=$277;
 var $304=$23;
 var $305=(($304)|0);
 $22=$305;
 var $306=$22;
 var $307=$306;
 $21=$307;
 var $308=$21;
 var $309=(($308)|0);
 var $310=(($309)|0);
 var $311=$310;
 var $312=(($311+1)|0);
 var $313=(($312)|0);
 $20=$313;
 var $314=$20;
 $19=$314;
 var $315=$19;
 var $316=$315;label=19;break;
 case 19: 
 var $316;
 $15=$316;
 var $317=$15;
 var $319=$317;label=20;break;
 case 20: 
 var $319;
 var $320=$94;
 $14=$320;
 var $321=$14;
 $13=$321;
 var $322=$13;
 $12=$322;
 var $323=$12;
 var $324=(($323)|0);
 $11=$324;
 var $325=$11;
 var $326=$325;
 $10=$326;
 var $327=$10;
 var $328=(($327)|0);
 var $329=(($328)|0);
 var $330=$329;
 var $331=(($330)|0);
 var $332=$331;
 var $333=HEAP8[($332)];
 var $334=($333&255);
 var $335=$334&1;
 var $336=($335|0)!=0;
 if($336){label=21;break;}else{label=22;break;}
 case 21: 
 $4=$322;
 var $338=$4;
 var $339=(($338)|0);
 $3=$339;
 var $340=$3;
 var $341=$340;
 $2=$341;
 var $342=$2;
 var $343=(($342)|0);
 var $344=(($343)|0);
 var $345=$344;
 var $346=(($345+8)|0);
 var $347=HEAP32[(($346)>>2)];
 var $361=$347;label=23;break;
 case 22: 
 $9=$322;
 var $349=$9;
 var $350=(($349)|0);
 $8=$350;
 var $351=$8;
 var $352=$351;
 $7=$352;
 var $353=$7;
 var $354=(($353)|0);
 var $355=(($354)|0);
 var $356=$355;
 var $357=(($356+1)|0);
 var $358=(($357)|0);
 $6=$358;
 var $359=$6;
 $5=$359;
 var $360=$5;
 var $361=$360;label=23;break;
 case 23: 
 var $361;
 $1=$361;
 var $362=$1;
 var $363=$__len;
 var $364=(($362+$363)|0);
 var $365=$93;
 var $366=$365;
 var $367=HEAP32[(($366)>>2)];
 var $368=((($367)-(12))|0);
 var $369=$368;
 var $370=HEAP32[(($369)>>2)];
 var $371=$365;
 var $372=(($371+$370)|0);
 var $373=$372;
 var $374=$93;
 var $375=$374;
 var $376=HEAP32[(($375)>>2)];
 var $377=((($376)-(12))|0);
 var $378=$377;
 var $379=HEAP32[(($378)>>2)];
 var $380=$374;
 var $381=(($380+$379)|0);
 var $382=$381;
 $53=$382;
 var $383=$53;
 var $384=(($383+76)|0);
 var $385=HEAP32[(($384)>>2)];
 $43=-1;
 $44=$385;
 var $386=$43;
 var $387=$44;
 var $388=($386|0)==($387|0);
 if($388){label=24;break;}else{label=32;break;}
 case 24: 
 $48=$383;
 $49=32;
 var $390=$48;
 var $391=$390;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($50,$391) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=39;break; }
 case 25: 
 $47=$50;
 var $392=$47;
 var $393=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($392,16840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=27;break; }
 case 26: 
 var $394=$393;
 var $395=$49;
 $45=$394;
 $46=$395;
 var $396=$45;
 var $397=$396;
 var $398=HEAP32[(($397)>>2)];
 var $399=(($398+28)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=$46;
 var $402=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$400]($396,$401) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=27;break; }
 case 27: 
 var $404$0 = ___cxa_find_matching_catch(-1, -1,0); var $404$1 = tempRet0;
 var $405=$404$0;
 $51=$405;
 var $406=$404$1;
 $52=$406;
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 var $408=$51;
 var $409=$52;
 var $410$0=$408;
 var $410$1=0;
 var $411$0=$410$0;
 var $411$1=$409;
 var $eh_lpad_body$1=$411$1;var $eh_lpad_body$0=$411$0;label=40;break;
 case 29: 
 var $413$0 = ___cxa_find_matching_catch(-1, -1,0,0); var $413$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=39;break; }
 case 31: 
 var $414=(($402<<24)>>24);
 var $415=(($383+76)|0);
 HEAP32[(($415)>>2)]=$414;
 label=32;break;
 case 32: 
 var $416=(($383+76)|0);
 var $417=HEAP32[(($416)>>2)];
 var $418=(($417)&255);
 label=33;break;
 case 33: 
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($98,$97,$212,$319,$364,$373,$418) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=39;break; }
 case 34: 
 $55=$98;
 var $421=$55;
 var $422=(($421)|0);
 var $423=HEAP32[(($422)>>2)];
 var $424=($423|0)==0;
 if($424){label=35;break;}else{label=41;break;}
 case 35: 
 var $426=$93;
 var $427=$426;
 var $428=HEAP32[(($427)>>2)];
 var $429=((($428)-(12))|0);
 var $430=$429;
 var $431=HEAP32[(($430)>>2)];
 var $432=$426;
 var $433=(($432+$431)|0);
 var $434=$433;
 $72=$434;
 $73=5;
 var $435=$72;
 var $436=$435;
 var $437=$73;
 $70=$436;
 $71=$437;
 var $438=$70;
 var $439=(($438+16)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=$71;
 var $442=$440|$441;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($438,$442) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=39;break; }
 case 36: 
 label=37;break;
 case 37: 
 label=41;break;
 case 38: 
 var $445$0 = ___cxa_find_matching_catch(-1, -1,0); var $445$1 = tempRet0;
 var $446=$445$0;
 $95=$446;
 var $447=$445$1;
 $96=$447;
 label=45;break;
 case 39: 
 var $449$0 = ___cxa_find_matching_catch(-1, -1,0); var $449$1 = tempRet0;
 var $eh_lpad_body$1=$449$1;var $eh_lpad_body$0=$449$0;label=40;break;
 case 40: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $450=$eh_lpad_body$0;
 $95=$450;
 var $451=$eh_lpad_body$1;
 $96=$451;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=51;break; }
 case 41: 
 label=42;break;
 case 42: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=38;break; }
 case 43: 
 label=47;break;
 case 44: 
 label=45;break;
 case 45: 
 var $457=$95;
 var $458=___cxa_begin_catch($457);
 var $459=$93;
 var $460=$459;
 var $461=HEAP32[(($460)>>2)];
 var $462=((($461)-(12))|0);
 var $463=$462;
 var $464=HEAP32[(($463)>>2)];
 var $465=$459;
 var $466=(($465+$464)|0);
 var $467=$466;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($467) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=48;break; }
 case 46: 
 ___cxa_end_catch();
 label=47;break;
 case 47: 
 var $470=$93;
 STACKTOP=sp;return $470;
 case 48: 
 var $472$0 = ___cxa_find_matching_catch(-1, -1); var $472$1 = tempRet0;
 var $473=$472$0;
 $95=$473;
 var $474=$472$1;
 $96=$474;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=51;break; }
 case 49: 
 label=50;break;
 case 50: 
 var $477=$95;
 var $478=$96;
 var $479$0=$477;
 var $479$1=0;
 var $480$0=$479$0;
 var $480$1=$478;
 ___resumeException($480$0)
 case 51: 
 var $482$0 = ___cxa_find_matching_catch(-1, -1,0); var $482$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6Device7getInfoILi4098EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi($this,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $param=sp;
 var $result;
 $1=$this;
 $2=$err;
 var $3=$1;
 var $4=__ZNK2cl6Device7getInfoIjEEijPT_($3,4098,$param);
 $result=$4;
 var $5=$2;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$result;
 var $9=$2;
 HEAP32[(($9)>>2)]=$8;
 label=3;break;
 case 3: 
 var $11=HEAP32[(($param)>>2)];
 STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorIP12RenderDeviceLj10EE9push_backERKS2_($this,$x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$x;
 var $3=$1;
 var $4=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($3);
 var $5=($4>>>0)<10;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($3+40)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)+(1))|0);
 HEAP32[(($7)>>2)]=$9;
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($3+40)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($3)|0);
 var $15=(($14+($13<<2))|0);
 HEAP32[(($15)>>2)]=$11;
 var $16=(($3+44)|0);
 HEAP8[($16)]=0;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK12RenderDevice7GetNameEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 return $3;
}
function __ZN12RenderConfig20UpdateDeviceWorkloadEb($this,$calculateNewLoad){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11=sp;
 var $i;
 var $totalPerformance;
 var $i1;
 var $totalWorkload;
 var $workOffset;
 var $i2;
 var $workLeft;
 var $workAmount;
 $9=$this;
 var $12=($calculateNewLoad&1);
 $10=$12;
 var $13=$9;
 var $14=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2080);
 $7=$14;
 $8=8;
 var $15=$7;
 var $16=$8;
 var $17=FUNCTION_TABLE[$16]($15);
 var $18=$10;
 var $19=(($18)&1);
 if($19){label=2;break;}else{label=7;break;}
 case 2: 
 var $21=(($13+596)|0);
 var $22=(($13+548)|0);
 var $23=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($22);
 HEAPF64[(($11)>>3)]=1;
 __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEjRKd($21,$23,$11);
 $i=0;
 label=3;break;
 case 3: 
 var $25=$i;
 var $26=(($13+548)|0);
 var $27=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($26);
 var $28=($25>>>0)<($27>>>0);
 if($28){label=4;break;}else{label=6;break;}
 case 4: 
 var $30=(($13+548)|0);
 var $31=$i;
 var $32=__ZN2cl6vectorIP12RenderDeviceLj10EEixEi($30,$31);
 var $33=HEAP32[(($32)>>2)];
 var $34=__ZNK12RenderDevice14GetPerformanceEv($33);
 var $35=(($13+596)|0);
 var $36=$i;
 $5=$35;
 $6=$36;
 var $37=$5;
 var $38=$6;
 var $39=$37;
 var $40=(($39)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+($38<<3))|0);
 (HEAPF64[(tempDoublePtr)>>3]=$34,HEAP32[(($42)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($42)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 label=5;break;
 case 5: 
 var $44=$i;
 var $45=((($44)+(1))|0);
 $i=$45;
 label=3;break;
 case 6: 
 label=7;break;
 case 7: 
 $totalPerformance=0;
 $i1=0;
 label=8;break;
 case 8: 
 var $49=$i1;
 var $50=(($13+548)|0);
 var $51=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($50);
 var $52=($49>>>0)<($51>>>0);
 if($52){label=9;break;}else{label=11;break;}
 case 9: 
 var $54=(($13+596)|0);
 var $55=$i1;
 $3=$54;
 $4=$55;
 var $56=$3;
 var $57=$4;
 var $58=$56;
 var $59=(($58)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+($57<<3))|0);
 var $62=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($61)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($61)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $63=$totalPerformance;
 var $64=($63)+($62);
 $totalPerformance=$64;
 label=10;break;
 case 10: 
 var $66=$i1;
 var $67=((($66)+(1))|0);
 $i1=$67;
 label=8;break;
 case 11: 
 var $69=(($13+516)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($13+520)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(Math_imul($70,$72)|0);
 $totalWorkload=$73;
 $workOffset=0;
 $i2=0;
 label=12;break;
 case 12: 
 var $75=$i2;
 var $76=(($13+548)|0);
 var $77=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($76);
 var $78=($75>>>0)<($77>>>0);
 if($78){label=13;break;}else{label=21;break;}
 case 13: 
 var $80=$totalWorkload;
 var $81=$workOffset;
 var $82=((($80)-($81))|0);
 $workLeft=$82;
 var $83=$workLeft;
 var $84=($83>>>0)<=0;
 if($84){label=14;break;}else{label=15;break;}
 case 14: 
 var $86=$totalWorkload;
 $workOffset=$86;
 $workAmount=1;
 label=19;break;
 case 15: 
 var $88=$i2;
 var $89=(($13+548)|0);
 var $90=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($89);
 var $91=((($90)-(1))|0);
 var $92=($88|0)==($91|0);
 if($92){label=16;break;}else{label=17;break;}
 case 16: 
 var $94=$workLeft;
 $workAmount=$94;
 label=18;break;
 case 17: 
 var $96=$workLeft;
 var $97=($96>>>0);
 var $98=(($13+596)|0);
 var $99=$i2;
 $1=$98;
 $2=$99;
 var $100=$1;
 var $101=$2;
 var $102=$100;
 var $103=(($102)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+($101<<3))|0);
 var $106=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($105)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($105)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $107=($97)*($106);
 var $108=$totalPerformance;
 var $109=($107)/($108);
 var $110=($109>=0 ? Math_floor($109) : Math_ceil($109));
 $workAmount=$110;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $113=(($13+548)|0);
 var $114=$i2;
 var $115=__ZN2cl6vectorIP12RenderDeviceLj10EEixEi($113,$114);
 var $116=HEAP32[(($115)>>2)];
 var $117=$workOffset;
 var $118=$workAmount;
 var $119=(($13+516)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(($13+520)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(($13+528)|0);
 var $124=HEAP32[(($123)>>2)];
 __ZN12RenderDevice11SetWorkLoadEjjjjPj($116,$117,$118,$120,$122,$124);
 var $125=$workAmount;
 var $126=$workOffset;
 var $127=((($126)+($125))|0);
 $workOffset=$127;
 label=20;break;
 case 20: 
 var $129=$i2;
 var $130=((($129)+(1))|0);
 $i2=$130;
 label=12;break;
 case 21: 
 var $132=(($13+524)|0);
 HEAP32[(($132)>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderConfig11ReInitSceneEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $i1;
 $1=$this;
 var $2=$1;
 $i=0;
 label=2;break;
 case 2: 
 var $4=$i;
 var $5=(($2+548)|0);
 var $6=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($5);
 var $7=($4>>>0)<($6>>>0);
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 var $9=(($2+548)|0);
 var $10=$i;
 var $11=__ZN2cl6vectorIP12RenderDeviceLj10EEixEi($9,$10);
 var $12=HEAP32[(($11)>>2)];
 __ZN12RenderDevice6FinishEv($12);
 label=4;break;
 case 4: 
 var $14=$i;
 var $15=((($14)+(1))|0);
 $i=$15;
 label=2;break;
 case 5: 
 var $17=(($2+524)|0);
 HEAP32[(($17)>>2)]=0;
 $i1=0;
 label=6;break;
 case 6: 
 var $19=$i1;
 var $20=(($2+548)|0);
 var $21=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($20);
 var $22=($19>>>0)<($21>>>0);
 if($22){label=7;break;}else{label=9;break;}
 case 7: 
 var $24=(($2+548)|0);
 var $25=$i1;
 var $26=__ZN2cl6vectorIP12RenderDeviceLj10EEixEi($24,$25);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($2+536)|0);
 var $29=HEAP32[(($28)>>2)];
 __ZN12RenderDevice17UpdateSceneBufferEP6Sphere($27,$29);
 label=8;break;
 case 8: 
 var $31=$i1;
 var $32=((($31)+(1))|0);
 $i1=$32;
 label=6;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderConfig6ReInitEi($this,$reallocBuffers){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $i1;
 $1=$this;
 $2=$reallocBuffers;
 var $3=$1;
 $i=0;
 label=2;break;
 case 2: 
 var $5=$i;
 var $6=(($3+548)|0);
 var $7=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($6);
 var $8=($5>>>0)<($7>>>0);
 if($8){label=3;break;}else{label=5;break;}
 case 3: 
 var $10=(($3+548)|0);
 var $11=$i;
 var $12=__ZN2cl6vectorIP12RenderDeviceLj10EEixEi($10,$11);
 var $13=HEAP32[(($12)>>2)];
 __ZN12RenderDevice6FinishEv($13);
 label=4;break;
 case 4: 
 var $15=$i;
 var $16=((($15)+(1))|0);
 $i=$16;
 label=2;break;
 case 5: 
 var $18=$2;
 var $19=($18|0)!=0;
 if($19){label=6;break;}else{label=13;break;}
 case 6: 
 var $21=(($3+528)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=$22;
 __ZdlPv($25);
 label=8;break;
 case 8: 
 var $27=(($3+516)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($3+520)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(Math_imul($28,$30)|0);
 var $32$0=_llvm_umul_with_overflow_i32($31,4);
 var $32$1=tempRet0;
 var $33=$32$1;
 var $34=$32$0;
 var $35=($33?-1:$34);
 var $36=__Znaj($35);
 var $37=$36;
 var $38=(($3+528)|0);
 HEAP32[(($38)>>2)]=$37;
 $i1=0;
 label=9;break;
 case 9: 
 var $40=$i1;
 var $41=(($3+516)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($3+520)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(Math_imul($42,$44)|0);
 var $46=($40>>>0)<($45>>>0);
 if($46){label=10;break;}else{label=12;break;}
 case 10: 
 var $48=$i1;
 var $49=$i1;
 var $50=(($3+528)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+($49<<2))|0);
 HEAP32[(($52)>>2)]=$48;
 label=11;break;
 case 11: 
 var $54=$i1;
 var $55=((($54)+(1))|0);
 $i1=$55;
 label=9;break;
 case 12: 
 __ZN12RenderConfig20UpdateDeviceWorkloadEb($3,0);
 label=13;break;
 case 13: 
 __ZN12RenderConfig12UpdateCameraEv($3);
 var $58=(($3+524)|0);
 HEAP32[(($58)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorINS_6DeviceELj10EED1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6vectorINS_6DeviceELj10EED2Ev($2);
 return;
}
function __ZN2cl8PlatformD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl8PlatformD2Ev($2);
 return;
}
function __ZN2cl6vectorINS_8PlatformELj10EED1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6vectorINS_8PlatformELj10EED2Ev($2);
 return;
}
function __ZNK2cl6Device7getInfoIjEEijPT_($this,$name,$param){
 var label=0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$name;
 $3=$param;
 var $4=$1;
 var $5=$4;
 var $6=(($5)|0);
 var $7=$2;
 var $8=$3;
 var $9=__ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_jEEiT_RKT0_jPT1_(346,$6,$7,$8);
 var $10=__ZN2cl6detailL10errHandlerEiPKc($9,2672);
 return $10;
}
function __ZN2cl6detailL10errHandlerEiPKc($err,$errStr){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$err;
 $2=$errStr;
 var $5=$1;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=8;break;}
 case 2: 
 var $8=___cxa_allocate_exception(12);
 var $9=$8;
 var $10=$1;
 var $11=$2;
 (function() { try { __THREW__ = 0; return __ZN2cl5ErrorC1EiPKc($9,$10,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($8,13016,(368)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=5;break; }
 case 4: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 var $15=$14$0;
 $3=$15;
 var $16=$14$1;
 $4=$16;
 ___cxa_free_exception($8);
 label=6;break;
 case 5: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $19=$18$0;
 $3=$19;
 var $20=$18$1;
 $4=$20;
 label=6;break;
 case 6: 
 var $22=$4;
 var $23=($22|0)<0;
 if($23){label=7;break;}else{label=9;break;}
 case 7: 
 var $25=$3;
 ___cxa_call_unexpected($25);
 throw "Reached an unreachable!";
 case 8: 
 var $27=$1;
 return $27;
 case 9: 
 var $29=$3;
 var $30=$4;
 var $31$0=$29;
 var $31$1=0;
 var $32$0=$31$0;
 var $32$1=$30;
 ___resumeException($32$0)
 case 10: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_jEEiT_RKT0_jPT1_($f,$arg0,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $f0=sp;
 var $5=(sp)+(8);
 $1=$f;
 $2=$arg0;
 $3=$name;
 $4=$param;
 var $6=(($f0)|0);
 var $7=$1;
 HEAP32[(($6)>>2)]=$7;
 var $8=(($f0+4)|0);
 var $9=$2;
 HEAP32[(($8)>>2)]=$9;
 var $10=$5;
 var $11=$f0;
 assert(8 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
 var $12=$3;
 var $13=$4;
 var $14=__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEjE3getES9_jS6_($5,$12,$13);
 STACKTOP=sp;return $14;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEjE3getES9_jS6_($f,$name,$param){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $f; $f=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($f)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 $1=$name;
 $2=$param;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=__ZN2cl6detail15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES3_EclEjjS4_S5_($f,$3,4,$5,0);
 STACKTOP=sp;return $6;
}
function __ZN2cl6detail15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES3_EclEjjS4_S5_($this,$param,$size,$value,$size_ret){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$param;
 $3=$size;
 $4=$value;
 $5=$size_ret;
 var $6=$1;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($6+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[(($10)>>2)];
 var $12=$2;
 var $13=$3;
 var $14=$4;
 var $15=$5;
 var $16=FUNCTION_TABLE[$8]($11,$12,$13,$14,$15);
 return $16;
}
function __ZN2cl5ErrorC1EiPKc($this,$err,$errStr){
 var label=0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$err;
 $3=$errStr;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 __ZN2cl5ErrorC2EiPKc($4,$5,$6);
 return;
}
function __ZN2cl5ErrorC2EiPKc($this,$err,$errStr){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$this;
 $3=$err;
 $4=$errStr;
 var $5=$2;
 var $6=$5;
 $1=$6;
 var $7=$1;
 var $8=$7;
 HEAP32[(($8)>>2)]=5320;
 var $9=$5;
 HEAP32[(($9)>>2)]=8184;
 var $10=(($5+4)|0);
 var $11=$3;
 HEAP32[(($10)>>2)]=$11;
 var $12=(($5+8)|0);
 var $13=$4;
 HEAP32[(($12)>>2)]=$13;
 return;
}
function __ZN2cl6DeviceaSERKS0_($this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_($7,$9);
 label=3;break;
 case 3: 
 return $3;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_($this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=__ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($3);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($3)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=__ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($3);
 label=5;break;
 case 5: 
 return $3;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE7releaseES3_($4);
 return $5;
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE6retainES3_($4);
 return $5;
}
function __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE6retainES3_($0){
 var label=0;
 var $2;
 $2=$0;
 return -33;
}
function __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE7releaseES3_($0){
 var label=0;
 var $2;
 $2=$0;
 return -33;
}
function __ZNK2cl6Device7getInfoIyEEijPT_($this,$name,$param){
 var label=0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$name;
 $3=$param;
 var $4=$1;
 var $5=$4;
 var $6=(($5)|0);
 var $7=$2;
 var $8=$3;
 var $9=__ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_yEEiT_RKT0_jPT1_(346,$6,$7,$8);
 var $10=__ZN2cl6detailL10errHandlerEiPKc($9,2672);
 return $10;
}
function __ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_yEEiT_RKT0_jPT1_($f,$arg0,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $f0=sp;
 var $5=(sp)+(8);
 $1=$f;
 $2=$arg0;
 $3=$name;
 $4=$param;
 var $6=(($f0)|0);
 var $7=$1;
 HEAP32[(($6)>>2)]=$7;
 var $8=(($f0+4)|0);
 var $9=$2;
 HEAP32[(($8)>>2)]=$9;
 var $10=$5;
 var $11=$f0;
 assert(8 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
 var $12=$3;
 var $13=$4;
 var $14=__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEyE3getES9_jPy($5,$12,$13);
 STACKTOP=sp;return $14;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEyE3getES9_jPy($f,$name,$param){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $f; $f=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($f)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 $1=$name;
 $2=$param;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=__ZN2cl6detail15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES3_EclEjjS4_S5_($f,$3,8,$5,0);
 STACKTOP=sp;return $6;
}
function __ZN2cl6vectorINS_6DeviceELj10EED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=(($6+40)|0);
 var $9=$7;label=2;break;
 case 2: 
 var $9;
 var $10=((($9)-(4))|0);
 (function() { try { __THREW__ = 0; return __ZN2cl6DeviceD1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $12=($10|0)==($6|0);
 if($12){label=4;break;}else{var $9=$10;label=2;break;}
 case 4: 
 return;
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=$15$0;
 $2=$16;
 var $17=$15$1;
 $3=$17;
 var $18=($6|0)==($10|0);
 if($18){label=8;break;}else{var $20=$10;label=6;break;}
 case 6: 
 var $20;
 var $21=((($20)-(4))|0);
 (function() { try { __THREW__ = 0; return __ZN2cl6DeviceD1Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $23=($21|0)==($6|0);
 if($23){label=8;break;}else{var $20=$21;label=6;break;}
 case 8: 
 label=9;break;
 case 9: 
 var $26=$2;
 var $27=$3;
 var $28$0=$26;
 var $28$1=0;
 var $29$0=$28$0;
 var $29$1=$27;
 ___resumeException($29$0)
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1,0); var $31$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6DeviceD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6DeviceD2Ev($2);
 return;
}
function __ZN2cl6DeviceD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP13_cl_device_idED2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP13_cl_device_idED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=__ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($2);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorINS_6DeviceELj10EEC2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=(($6+40)|0);
 var $9=$6;label=2;break;
 case 2: 
 var $9;
 (function() { try { __THREW__ = 0; return __ZN2cl6DeviceC1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $11=(($9+4)|0);
 var $12=($11|0)==($7|0);
 if($12){label=4;break;}else{var $9=$11;label=2;break;}
 case 4: 
 var $14=(($4+40)|0);
 HEAP32[(($14)>>2)]=-1;
 var $15=(($4+44)|0);
 HEAP8[($15)]=1;
 return;
 case 5: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 var $18=$17$0;
 $2=$18;
 var $19=$17$1;
 $3=$19;
 var $20=($6|0)==($9|0);
 if($20){label=8;break;}else{var $22=$9;label=6;break;}
 case 6: 
 var $22;
 var $23=((($22)-(4))|0);
 (function() { try { __THREW__ = 0; return __ZN2cl6DeviceD1Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $25=($23|0)==($6|0);
 if($25){label=8;break;}else{var $22=$23;label=6;break;}
 case 8: 
 label=9;break;
 case 9: 
 var $28=$2;
 var $29=$3;
 var $30$0=$28;
 var $30$1=0;
 var $31$0=$30$0;
 var $31$1=$29;
 ___resumeException($31$0)
 case 10: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1,0); var $33$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6DeviceC1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6DeviceC2Ev($2);
 return;
}
function __ZN2cl6DeviceC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP13_cl_device_idEC2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP13_cl_device_idEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZN2cl6vectorINS_8PlatformELj10EED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=(($6+40)|0);
 var $9=$7;label=2;break;
 case 2: 
 var $9;
 var $10=((($9)-(4))|0);
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformD1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $12=($10|0)==($6|0);
 if($12){label=4;break;}else{var $9=$10;label=2;break;}
 case 4: 
 return;
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=$15$0;
 $2=$16;
 var $17=$15$1;
 $3=$17;
 var $18=($6|0)==($10|0);
 if($18){label=8;break;}else{var $20=$10;label=6;break;}
 case 6: 
 var $20;
 var $21=((($20)-(4))|0);
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformD1Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $23=($21|0)==($6|0);
 if($23){label=8;break;}else{var $20=$21;label=6;break;}
 case 8: 
 label=9;break;
 case 9: 
 var $26=$2;
 var $27=$3;
 var $28$0=$26;
 var $28$1=0;
 var $29$0=$28$0;
 var $29$1=$27;
 ___resumeException($29$0)
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1,0); var $31$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorINS_8PlatformELj10EEC2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=(($6+40)|0);
 var $9=$6;label=2;break;
 case 2: 
 var $9;
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformC1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $11=(($9+4)|0);
 var $12=($11|0)==($7|0);
 if($12){label=4;break;}else{var $9=$11;label=2;break;}
 case 4: 
 var $14=(($4+40)|0);
 HEAP32[(($14)>>2)]=-1;
 var $15=(($4+44)|0);
 HEAP8[($15)]=1;
 return;
 case 5: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 var $18=$17$0;
 $2=$18;
 var $19=$17$1;
 $3=$19;
 var $20=($6|0)==($9|0);
 if($20){label=8;break;}else{var $22=$9;label=6;break;}
 case 6: 
 var $22;
 var $23=((($22)-(4))|0);
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformD1Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $25=($23|0)==($6|0);
 if($25){label=8;break;}else{var $22=$23;label=6;break;}
 case 8: 
 label=9;break;
 case 9: 
 var $28=$2;
 var $29=$3;
 var $30$0=$28;
 var $30$1=0;
 var $31$0=$30$0;
 var $31$1=$29;
 ___resumeException($31$0)
 case 10: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1,0); var $33$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl8PlatformC1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl8PlatformC2Ev($2);
 return;
}
function __ZN2cl8PlatformC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZN2cl6vectorIP12RenderDeviceLj10EED2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZN2cl6vectorIP12RenderDeviceLj10EEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+40)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($2+44)|0);
 HEAP8[($4)]=1;
 return;
}
// WARNING: content after a branch in a label, line: 6116
// WARNING: content after a branch in a label, line: 6118
// WARNING: content after a branch in a label, line: 6119
// WARNING: content after a branch in a label, line: 6120
// WARNING: content after a branch in a label, line: 6121
// WARNING: content after a branch in a label, line: 6122
function __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEjRKd($this,$__n,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 var $8;
 var $9;
 var $10=(sp)+(8);
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=(sp)+(16);
 var $__ms_i;
 var $__cap_i;
 var $19=(sp)+(24);
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $__a_i;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $__a;
 var $__v=(sp)+(32);
 var $40;
 var $41;
 $37=$this;
 $38=$__n;
 $39=$__x;
 var $42=$37;
 var $43=$42;
 $36=$43;
 var $44=$36;
 var $45=(($44+8)|0);
 $35=$45;
 var $46=$35;
 var $47=$46;
 $34=$47;
 var $48=$34;
 var $49=(($48)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$42;
 var $52=(($51+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=$50;
 var $55=$53;
 var $56=((($54)-($55))|0);
 var $57=(((($56|0))/(8))&-1);
 var $58=$38;
 var $59=($57>>>0)>=($58>>>0);
 if($59){label=2;break;}else{label=7;break;}
 case 2: 
 var $61=$38;
 var $62=$39;
 $31=$42;
 $32=$61;
 $33=$62;
 var $63=$31;
 var $64=$63;
 $30=$64;
 var $65=$30;
 var $66=(($65+8)|0);
 $29=$66;
 var $67=$29;
 var $68=$67;
 $28=$68;
 var $69=$28;
 var $70=$69;
 $__a_i=$70;
 label=3;break;
 case 3: 
 var $72=$__a_i;
 var $73=$63;
 var $74=(($73+4)|0);
 var $75=HEAP32[(($74)>>2)];
 $24=$75;
 var $76=$24;
 var $77=$33;
 $25=$72;
 $26=$76;
 $27=$77;
 var $78=$26;
 var $79=$78;
 var $80=($79|0)==0;
 if($80){var $85=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $82=$79;
 var $83=$27;
 var $84=HEAPF64[(($83)>>3)];
 HEAPF64[(($82)>>3)]=$84;
 var $85=$82;label=5;break;
 case 5: 
 var $85;
 var $86=$63;
 var $87=(($86+4)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+8)|0);
 HEAP32[(($87)>>2)]=$89;
 var $90=$32;
 var $91=((($90)-(1))|0);
 $32=$91;
 var $92=$32;
 var $93=($92>>>0)>0;
 if($93){label=3;break;}else{label=6;break;}
 case 6: 
 label=20;break;
 case 7: 
 var $95=$42;
 $23=$95;
 var $96=$23;
 var $97=(($96+8)|0);
 $22=$97;
 var $98=$22;
 var $99=$98;
 $21=$99;
 var $100=$21;
 var $101=$100;
 $__a=$101;
 $20=$42;
 var $102=$20;
 var $103=$102;
 var $104=(($103+4)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$102;
 var $107=(($106)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$105;
 var $110=$108;
 var $111=((($109)-($110))|0);
 var $112=(((($111|0))/(8))&-1);
 var $113=$38;
 var $114=((($112)+($113))|0);
 $17=$42;
 HEAP32[(($18)>>2)]=$114;
 var $115=$17;
 var $116=__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($115);
 $__ms_i=$116;
 var $117=HEAP32[(($18)>>2)];
 var $118=$__ms_i;
 var $119=($117>>>0)>($118>>>0);
 if($119){label=8;break;}else{label=9;break;}
 case 8: 
 var $121=$115;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($121);
 label=9;break;
 case 9: 
 $15=$115;
 var $123=$15;
 var $124=$123;
 $14=$124;
 var $125=$14;
 $13=$125;
 var $126=$13;
 var $127=(($126+8)|0);
 $12=$127;
 var $128=$12;
 var $129=$128;
 $11=$129;
 var $130=$11;
 var $131=(($130)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($125)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=$132;
 var $136=$134;
 var $137=((($135)-($136))|0);
 var $138=(((($137|0))/(8))&-1);
 $__cap_i=$138;
 var $139=$__cap_i;
 var $140=$__ms_i;
 var $141=(((($140>>>0))/(2))&-1);
 var $142=($139>>>0)>=($141>>>0);
 if($142){label=10;break;}else{label=11;break;}
 case 10: 
 var $144=$__ms_i;
 $16=$144;
 label=15;break;
 case 11: 
 var $146=$__cap_i;
 var $147=($146<<1);
 HEAP32[(($19)>>2)]=$147;
 $8=$19;
 $9=$18;
 var $148=$8;
 var $149=$9;
 var $tmp_i_i=$7;
 var $tmp1_i_i=$10;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $5=$148;
 $6=$149;
 var $150=$5;
 var $151=$6;
 $2=$7;
 $3=$150;
 $4=$151;
 var $152=$2;
 var $153=$3;
 var $154=HEAP32[(($153)>>2)];
 var $155=$4;
 var $156=HEAP32[(($155)>>2)];
 var $157=($154>>>0)<($156>>>0);
 if($157){label=12;break;}else{label=13;break;}
 case 12: 
 var $159=$6;
 var $162=$159;label=14;break;
 case 13: 
 var $161=$5;
 var $162=$161;label=14;break;
 case 14: 
 var $162;
 var $163=HEAP32[(($162)>>2)];
 $16=$163;
 label=15;break;
 case 15: 
 var $164=$16;
 $1=$42;
 var $165=$1;
 var $166=$165;
 var $167=(($166+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=$165;
 var $170=(($169)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=$168;
 var $173=$171;
 var $174=((($172)-($173))|0);
 var $175=(((($174|0))/(8))&-1);
 var $176=$__a;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EjjS3_($__v,$164,$175,$176);
 var $177=$38;
 var $178=$39;
 (function() { try { __THREW__ = 0; return __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEjRKd($__v,$177,$178) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($42,$__v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev($__v);
 label=20;break;
 case 18: 
 var $182$0 = ___cxa_find_matching_catch(-1, -1); var $182$1 = tempRet0;
 var $183=$182$0;
 $40=$183;
 var $184=$182$1;
 $41=$184;
 (function() { try { __THREW__ = 0; return __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev($__v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 label=21;break;
 case 20: 
 STACKTOP=sp;return;
 case 21: 
 var $188=$40;
 var $189=$41;
 var $190$0=$188;
 var $190$1=0;
 var $191$0=$190$0;
 var $191$1=$189;
 ___resumeException($191$0)
 case 22: 
 var $193$0 = ___cxa_find_matching_catch(-1, -1,0); var $193$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EjjS3_($this,$__cap,$__start,$__a){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$__cap;
 $3=$__start;
 $4=$__a;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($5,$6,$7,$8);
 return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEjRKd($this,$__n,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $__a;
 $8=$this;
 $9=$__n;
 $10=$__x;
 var $11=$8;
 $7=$11;
 var $12=$7;
 var $13=(($12+12)|0);
 $6=$13;
 var $14=$6;
 var $15=$14;
 $5=$15;
 var $16=$5;
 var $17=(($16+4)|0);
 var $18=HEAP32[(($17)>>2)];
 $__a=$18;
 label=2;break;
 case 2: 
 var $20=$__a;
 var $21=(($11+8)|0);
 var $22=HEAP32[(($21)>>2)];
 $1=$22;
 var $23=$1;
 var $24=$10;
 $2=$20;
 $3=$23;
 $4=$24;
 var $25=$3;
 var $26=$25;
 var $27=($26|0)==0;
 if($27){var $32=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $29=$26;
 var $30=$4;
 var $31=HEAPF64[(($30)>>3)];
 HEAPF64[(($29)>>3)]=$31;
 var $32=$29;label=4;break;
 case 4: 
 var $32;
 var $33=(($11+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+8)|0);
 HEAP32[(($33)>>2)]=$35;
 var $36=$9;
 var $37=((($36)-(1))|0);
 $9=$37;
 label=5;break;
 case 5: 
 var $39=$9;
 var $40=($39>>>0)>0;
 if($40){label=2;break;}else{label=6;break;}
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $_Np_i;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $__t_i2=sp;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $__t_i1=(sp)+(8);
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $__t_i=(sp)+(16);
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 $30=$this;
 $31=$__v;
 var $32=$30;
 var $33=$32;
 $29=$33;
 var $34=$29;
 var $35=(($34+8)|0);
 $28=$35;
 var $36=$28;
 var $37=$36;
 $27=$37;
 var $38=$27;
 var $39=$38;
 var $40=$32;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$32;
 var $44=(($43+4)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$31;
 var $47=(($46+4)|0);
 $1=$39;
 $2=$42;
 $3=$45;
 $4=$47;
 var $48=$3;
 var $49=$2;
 var $50=$48;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=(((($52|0))/(8))&-1);
 $_Np_i=$53;
 var $54=$_Np_i;
 var $55=$4;
 var $56=HEAP32[(($55)>>2)];
 var $57=(((-$54))|0);
 var $58=(($56+($57<<3))|0);
 HEAP32[(($55)>>2)]=$58;
 var $59=$4;
 var $60=HEAP32[(($59)>>2)];
 var $61=$60;
 var $62=$2;
 var $63=$62;
 var $64=$_Np_i;
 var $65=($64<<3);
 assert($65 % 1 === 0);(_memcpy($61, $63, $65)|0);
 var $66=$32;
 var $67=(($66)|0);
 var $68=$31;
 var $69=(($68+4)|0);
 $8=$67;
 $9=$69;
 var $70=$8;
 $7=$70;
 var $71=$7;
 var $72=HEAP32[(($71)>>2)];
 HEAP32[(($__t_i2)>>2)]=$72;
 var $73=$9;
 $5=$73;
 var $74=$5;
 var $75=HEAP32[(($74)>>2)];
 var $76=$8;
 HEAP32[(($76)>>2)]=$75;
 $6=$__t_i2;
 var $77=$6;
 var $78=HEAP32[(($77)>>2)];
 var $79=$9;
 HEAP32[(($79)>>2)]=$78;
 var $80=$32;
 var $81=(($80+4)|0);
 var $82=$31;
 var $83=(($82+8)|0);
 $13=$81;
 $14=$83;
 var $84=$13;
 $12=$84;
 var $85=$12;
 var $86=HEAP32[(($85)>>2)];
 HEAP32[(($__t_i1)>>2)]=$86;
 var $87=$14;
 $10=$87;
 var $88=$10;
 var $89=HEAP32[(($88)>>2)];
 var $90=$13;
 HEAP32[(($90)>>2)]=$89;
 $11=$__t_i1;
 var $91=$11;
 var $92=HEAP32[(($91)>>2)];
 var $93=$14;
 HEAP32[(($93)>>2)]=$92;
 var $94=$32;
 $17=$94;
 var $95=$17;
 var $96=(($95+8)|0);
 $16=$96;
 var $97=$16;
 var $98=$97;
 $15=$98;
 var $99=$15;
 var $100=(($99)|0);
 var $101=$31;
 $20=$101;
 var $102=$20;
 var $103=(($102+12)|0);
 $19=$103;
 var $104=$19;
 var $105=$104;
 $18=$105;
 var $106=$18;
 var $107=(($106)|0);
 $24=$100;
 $25=$107;
 var $108=$24;
 $23=$108;
 var $109=$23;
 var $110=HEAP32[(($109)>>2)];
 HEAP32[(($__t_i)>>2)]=$110;
 var $111=$25;
 $21=$111;
 var $112=$21;
 var $113=HEAP32[(($112)>>2)];
 var $114=$24;
 HEAP32[(($114)>>2)]=$113;
 $22=$__t_i;
 var $115=$22;
 var $116=HEAP32[(($115)>>2)];
 var $117=$25;
 HEAP32[(($117)>>2)]=$116;
 var $118=$31;
 var $119=(($118+4)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$31;
 var $122=(($121)|0);
 HEAP32[(($122)>>2)]=$120;
 $26=$32;
 var $123=$26;
 STACKTOP=sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
 return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17=sp;
 var $18;
 var $19;
 var $20=(sp)+(8);
 var $21=(sp)+(16);
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29=(sp)+(24);
 var $30;
 var $31;
 var $32=(sp)+(32);
 var $33;
 var $34;
 $34=$this;
 var $35=$34;
 $33=$35;
 var $36=$33;
 var $37=(($36+4)|0);
 var $38=HEAP32[(($37)>>2)];
 $30=$36;
 $31=$38;
 var $39=$30;
 var $40=$31;
 var $tmp_i_i=$29;
 var $tmp1_i_i=$32;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $25=$39;
 $26=$40;
 var $41=$25;
 label=2;break;
 case 2: 
 var $43=$26;
 var $44=(($41+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)!=($45|0);
 if($46){label=3;break;}else{label=4;break;}
 case 3: 
 $24=$41;
 var $48=$24;
 var $49=(($48+12)|0);
 $23=$49;
 var $50=$23;
 var $51=$50;
 $22=$51;
 var $52=$22;
 var $53=(($52+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($41+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=((($56)-(8))|0);
 HEAP32[(($55)>>2)]=$57;
 $14=$57;
 var $58=$14;
 $18=$54;
 $19=$58;
 var $59=$21;
 var $60=$18;
 var $61=$19;
 var $tmp_i_i_i_i=$17;
 var $tmp1_i_i_i_i=$20;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
 $15=$60;
 $16=$61;
 var $62=$16;
 label=2;break;
 case 4: 
 var $63=(($35)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)!=0;
 if($65){label=5;break;}else{label=6;break;}
 case 5: 
 $7=$35;
 var $67=$7;
 var $68=(($67+12)|0);
 $6=$68;
 var $69=$6;
 var $70=$69;
 $5=$70;
 var $71=$5;
 var $72=(($71+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($35)|0);
 var $75=HEAP32[(($74)>>2)];
 $4=$35;
 var $76=$4;
 $3=$76;
 var $77=$3;
 var $78=(($77+12)|0);
 $2=$78;
 var $79=$2;
 var $80=$79;
 $1=$80;
 var $81=$1;
 var $82=(($81)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($76)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$83;
 var $87=$85;
 var $88=((($86)-($87))|0);
 var $89=(((($88|0))/(8))&-1);
 $11=$73;
 $12=$75;
 $13=$89;
 var $90=$11;
 var $91=$12;
 var $92=$13;
 $8=$90;
 $9=$91;
 $10=$92;
 var $93=$8;
 var $94=$9;
 var $95=$94;
 __ZdlPv($95);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $5=(sp)+(8);
 var $6=(sp)+(16);
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14=(sp)+(24);
 var $15;
 var $16;
 var $17=(sp)+(32);
 var $18;
 var $19;
 var $20;
 var $21;
 var $22=(sp)+(40);
 var $23=(sp)+(48);
 var $24;
 var $25;
 $21=$this;
 var $26=$21;
 var $27=$26;
 $20=$27;
 var $28=$20;
 var $29=(($28+8)|0);
 $19=$29;
 var $30=$19;
 var $31=$30;
 $18=$31;
 var $32=$18;
 var $33=$32;
 $4=$33;
 var $34=$6;
 var $35=$4;
 var $tmp_i1=$3;
 var $tmp1_i2=$5;
 assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
 $2=$35;
 var $36=$2;
 $1=$36;
 var $37=$1;
 HEAP32[(($22)>>2)]=536870911;
 var $38=((2147483647)&-1);
 HEAP32[(($23)>>2)]=$38;
 $15=$22;
 $16=$23;
 var $39=$15;
 var $40=$16;
 var $tmp_i=$14;
 var $tmp1_i=$17;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $12=$39;
 $13=$40;
 var $41=$13;
 var $42=$12;
 $9=$14;
 $10=$41;
 $11=$42;
 var $43=$9;
 var $44=$10;
 var $45=HEAP32[(($44)>>2)];
 var $46=$11;
 var $47=HEAP32[(($46)>>2)];
 var $48=($45>>>0)<($47>>>0);
 if($48){label=2;break;}else{label=3;break;}
 case 2: 
 var $50=$13;
 var $53=$50;label=4;break;
 case 3: 
 var $52=$12;
 var $53=$52;label=4;break;
 case 4: 
 var $53;
 label=5;break;
 case 5: 
 var $55=HEAP32[(($53)>>2)];
 STACKTOP=sp;return $55;
 case 6: 
 var $61=$24;
 ___cxa_call_unexpected($61);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($this,$__cap,$__start,$__a){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39=(sp)+(16);
 var $40=(sp)+(24);
 $35=$this;
 $36=$__cap;
 $37=$__start;
 $38=$__a;
 var $41=$35;
 var $42=$41;
 var $43=(($41+12)|0);
 $33=$39;
 $34=-1;
 var $44=$33;
 var $45=$34;
 $31=$44;
 $32=$45;
 var $46=$31;
 var $47=(($46)|0);
 HEAP32[(($47)>>2)]=0;
 $17=$39;
 var $48=$17;
 var $49=$38;
 $11=$43;
 $12=0;
 $13=$49;
 var $50=$11;
 var $51=$12;
 var $52=$13;
 $8=$50;
 HEAP32[(($9)>>2)]=$51;
 $10=$52;
 var $53=$8;
 var $54=$53;
 $7=$9;
 var $55=$7;
 var $56=HEAP32[(($55)>>2)];
 var $57=$10;
 $1=$57;
 var $58=$1;
 $4=$54;
 HEAP32[(($5)>>2)]=$56;
 $6=$58;
 var $59=$4;
 var $60=(($59)|0);
 $3=$5;
 var $61=$3;
 var $62=HEAP32[(($61)>>2)];
 HEAP32[(($60)>>2)]=$62;
 var $63=(($59+4)|0);
 var $64=$6;
 $2=$64;
 var $65=$2;
 HEAP32[(($63)>>2)]=$65;
 var $66=$36;
 var $67=($66|0)!=0;
 if($67){label=2;break;}else{label=3;break;}
 case 2: 
 $16=$41;
 var $69=$16;
 var $70=(($69+12)|0);
 $15=$70;
 var $71=$15;
 var $72=$71;
 $14=$72;
 var $73=$14;
 var $74=(($73+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$36;
 $21=$75;
 $22=$76;
 var $77=$21;
 var $78=$22;
 $18=$77;
 $19=$78;
 $20=0;
 var $79=$18;
 var $80=$19;
 var $81=($80<<3);
 var $82=__Znwj($81);
 var $83=$82;
 var $91=$83;label=4;break;
 case 3: 
 $25=$40;
 $26=-1;
 var $85=$25;
 var $86=$26;
 $23=$85;
 $24=$86;
 var $87=$23;
 var $88=(($87)|0);
 HEAP32[(($88)>>2)]=0;
 $27=$40;
 var $89=$27;
 var $91=0;label=4;break;
 case 4: 
 var $91;
 var $92=(($41)|0);
 HEAP32[(($92)>>2)]=$91;
 var $93=(($41)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=$37;
 var $96=(($94+($95<<3))|0);
 var $97=(($41+8)|0);
 HEAP32[(($97)>>2)]=$96;
 var $98=(($41+4)|0);
 HEAP32[(($98)>>2)]=$96;
 var $99=(($41)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=$36;
 var $102=(($100+($101<<3))|0);
 $30=$41;
 var $103=$30;
 var $104=(($103+12)|0);
 $29=$104;
 var $105=$29;
 var $106=$105;
 $28=$106;
 var $107=$28;
 var $108=(($107)|0);
 HEAP32[(($108)>>2)]=$102;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl8PlatformD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP15_cl_platform_idED2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=__ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($2);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE7releaseES3_($4);
 return $5;
}
function __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE7releaseES3_($0){
 var label=0;
 var $2;
 $2=$0;
 return -32;
}
function __ZN12RenderDevice6FinishEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+16)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZNK2cl12CommandQueue6finishEv($4);
 return;
}
function __ZN12RenderConfig12UpdateCameraEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $l;
 var $k;
 var $fov;
 var $l1;
 var $k2;
 var $k3;
 var $l4;
 var $k5;
 var $k6;
 var $i;
 $1=$this;
 var $2=$1;
 var $3=(($2+532)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+12)|0);
 var $6=(($5)|0);
 var $7=HEAPF32[(($6)>>2)];
 var $8=(($2+532)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)|0);
 var $11=(($10)|0);
 var $12=HEAPF32[(($11)>>2)];
 var $13=($7)-($12);
 var $14=(($2+532)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+24)|0);
 var $17=(($16)|0);
 HEAPF32[(($17)>>2)]=$13;
 var $18=(($2+532)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+12)|0);
 var $21=(($20+4)|0);
 var $22=HEAPF32[(($21)>>2)];
 var $23=(($2+532)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24)|0);
 var $26=(($25+4)|0);
 var $27=HEAPF32[(($26)>>2)];
 var $28=($22)-($27);
 var $29=(($2+532)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+24)|0);
 var $32=(($31+4)|0);
 HEAPF32[(($32)>>2)]=$28;
 var $33=(($2+532)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+12)|0);
 var $36=(($35+8)|0);
 var $37=HEAPF32[(($36)>>2)];
 var $38=(($2+532)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39)|0);
 var $41=(($40+8)|0);
 var $42=HEAPF32[(($41)>>2)];
 var $43=($37)-($42);
 var $44=(($2+532)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+24)|0);
 var $47=(($46+8)|0);
 HEAPF32[(($47)>>2)]=$43;
 var $48=(($2+532)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+24)|0);
 var $51=(($50)|0);
 var $52=HEAPF32[(($51)>>2)];
 var $53=(($2+532)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+24)|0);
 var $56=(($55)|0);
 var $57=HEAPF32[(($56)>>2)];
 var $58=($52)*($57);
 var $59=(($2+532)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+24)|0);
 var $62=(($61+4)|0);
 var $63=HEAPF32[(($62)>>2)];
 var $64=(($2+532)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+24)|0);
 var $67=(($66+4)|0);
 var $68=HEAPF32[(($67)>>2)];
 var $69=($63)*($68);
 var $70=($58)+($69);
 var $71=(($2+532)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+24)|0);
 var $74=(($73+8)|0);
 var $75=HEAPF32[(($74)>>2)];
 var $76=(($2+532)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+24)|0);
 var $79=(($78+8)|0);
 var $80=HEAPF32[(($79)>>2)];
 var $81=($75)*($80);
 var $82=($70)+($81);
 var $83=Math_sqrt($82);
 var $84=(1)/($83);
 $l=$84;
 var $85=$l;
 $k=$85;
 var $86=$k;
 var $87=(($2+532)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+24)|0);
 var $90=(($89)|0);
 var $91=HEAPF32[(($90)>>2)];
 var $92=($86)*($91);
 var $93=(($2+532)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+24)|0);
 var $96=(($95)|0);
 HEAPF32[(($96)>>2)]=$92;
 var $97=$k;
 var $98=(($2+532)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+24)|0);
 var $101=(($100+4)|0);
 var $102=HEAPF32[(($101)>>2)];
 var $103=($97)*($102);
 var $104=(($2+532)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+24)|0);
 var $107=(($106+4)|0);
 HEAPF32[(($107)>>2)]=$103;
 var $108=$k;
 var $109=(($2+532)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+24)|0);
 var $112=(($111+8)|0);
 var $113=HEAPF32[(($112)>>2)];
 var $114=($108)*($113);
 var $115=(($2+532)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+24)|0);
 var $118=(($117+8)|0);
 HEAPF32[(($118)>>2)]=$114;
 $fov=0.7853981852531433;
 var $119=(($2+532)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+24)|0);
 var $122=(($121+4)|0);
 var $123=HEAPF32[(($122)>>2)];
 var $124=HEAPF32[((5304)>>2)];
 var $125=($123)*($124);
 var $126=(($2+532)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+24)|0);
 var $129=(($128+8)|0);
 var $130=HEAPF32[(($129)>>2)];
 var $131=HEAPF32[((5300)>>2)];
 var $132=($130)*($131);
 var $133=($125)-($132);
 var $134=(($2+532)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135+36)|0);
 var $137=(($136)|0);
 HEAPF32[(($137)>>2)]=$133;
 var $138=(($2+532)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139+24)|0);
 var $141=(($140+8)|0);
 var $142=HEAPF32[(($141)>>2)];
 var $143=HEAPF32[((5296)>>2)];
 var $144=($142)*($143);
 var $145=(($2+532)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+24)|0);
 var $148=(($147)|0);
 var $149=HEAPF32[(($148)>>2)];
 var $150=HEAPF32[((5304)>>2)];
 var $151=($149)*($150);
 var $152=($144)-($151);
 var $153=(($2+532)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+36)|0);
 var $156=(($155+4)|0);
 HEAPF32[(($156)>>2)]=$152;
 var $157=(($2+532)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+24)|0);
 var $160=(($159)|0);
 var $161=HEAPF32[(($160)>>2)];
 var $162=HEAPF32[((5300)>>2)];
 var $163=($161)*($162);
 var $164=(($2+532)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+24)|0);
 var $167=(($166+4)|0);
 var $168=HEAPF32[(($167)>>2)];
 var $169=HEAPF32[((5296)>>2)];
 var $170=($168)*($169);
 var $171=($163)-($170);
 var $172=(($2+532)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+36)|0);
 var $175=(($174+8)|0);
 HEAPF32[(($175)>>2)]=$171;
 var $176=(($2+532)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=(($178)|0);
 var $180=HEAPF32[(($179)>>2)];
 var $181=(($2+532)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182+36)|0);
 var $184=(($183)|0);
 var $185=HEAPF32[(($184)>>2)];
 var $186=($180)*($185);
 var $187=(($2+532)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188+36)|0);
 var $190=(($189+4)|0);
 var $191=HEAPF32[(($190)>>2)];
 var $192=(($2+532)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193+36)|0);
 var $195=(($194+4)|0);
 var $196=HEAPF32[(($195)>>2)];
 var $197=($191)*($196);
 var $198=($186)+($197);
 var $199=(($2+532)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+36)|0);
 var $202=(($201+8)|0);
 var $203=HEAPF32[(($202)>>2)];
 var $204=(($2+532)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205+36)|0);
 var $207=(($206+8)|0);
 var $208=HEAPF32[(($207)>>2)];
 var $209=($203)*($208);
 var $210=($198)+($209);
 var $211=Math_sqrt($210);
 var $212=(1)/($211);
 $l1=$212;
 var $213=$l1;
 $k2=$213;
 var $214=$k2;
 var $215=(($2+532)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+36)|0);
 var $218=(($217)|0);
 var $219=HEAPF32[(($218)>>2)];
 var $220=($214)*($219);
 var $221=(($2+532)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(($222+36)|0);
 var $224=(($223)|0);
 HEAPF32[(($224)>>2)]=$220;
 var $225=$k2;
 var $226=(($2+532)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227+36)|0);
 var $229=(($228+4)|0);
 var $230=HEAPF32[(($229)>>2)];
 var $231=($225)*($230);
 var $232=(($2+532)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233+36)|0);
 var $235=(($234+4)|0);
 HEAPF32[(($235)>>2)]=$231;
 var $236=$k2;
 var $237=(($2+532)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+36)|0);
 var $240=(($239+8)|0);
 var $241=HEAPF32[(($240)>>2)];
 var $242=($236)*($241);
 var $243=(($2+532)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+36)|0);
 var $246=(($245+8)|0);
 HEAPF32[(($246)>>2)]=$242;
 var $247=(($2+516)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($248>>>0);
 var $250=($249)*((0.7853981852531433));
 var $251=(($2+520)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=($252>>>0);
 var $254=($250)/($253);
 $k3=$254;
 var $255=$k3;
 var $256=(($2+532)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=(($257+36)|0);
 var $259=(($258)|0);
 var $260=HEAPF32[(($259)>>2)];
 var $261=($255)*($260);
 var $262=(($2+532)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($263+36)|0);
 var $265=(($264)|0);
 HEAPF32[(($265)>>2)]=$261;
 var $266=$k3;
 var $267=(($2+532)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+36)|0);
 var $270=(($269+4)|0);
 var $271=HEAPF32[(($270)>>2)];
 var $272=($266)*($271);
 var $273=(($2+532)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=(($274+36)|0);
 var $276=(($275+4)|0);
 HEAPF32[(($276)>>2)]=$272;
 var $277=$k3;
 var $278=(($2+532)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279+36)|0);
 var $281=(($280+8)|0);
 var $282=HEAPF32[(($281)>>2)];
 var $283=($277)*($282);
 var $284=(($2+532)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(($285+36)|0);
 var $287=(($286+8)|0);
 HEAPF32[(($287)>>2)]=$283;
 var $288=(($2+532)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+36)|0);
 var $291=(($290+4)|0);
 var $292=HEAPF32[(($291)>>2)];
 var $293=(($2+532)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=(($294+24)|0);
 var $296=(($295+8)|0);
 var $297=HEAPF32[(($296)>>2)];
 var $298=($292)*($297);
 var $299=(($2+532)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($300+36)|0);
 var $302=(($301+8)|0);
 var $303=HEAPF32[(($302)>>2)];
 var $304=(($2+532)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+24)|0);
 var $307=(($306+4)|0);
 var $308=HEAPF32[(($307)>>2)];
 var $309=($303)*($308);
 var $310=($298)-($309);
 var $311=(($2+532)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=(($312+48)|0);
 var $314=(($313)|0);
 HEAPF32[(($314)>>2)]=$310;
 var $315=(($2+532)|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=(($316+36)|0);
 var $318=(($317+8)|0);
 var $319=HEAPF32[(($318)>>2)];
 var $320=(($2+532)|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=(($321+24)|0);
 var $323=(($322)|0);
 var $324=HEAPF32[(($323)>>2)];
 var $325=($319)*($324);
 var $326=(($2+532)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=(($327+36)|0);
 var $329=(($328)|0);
 var $330=HEAPF32[(($329)>>2)];
 var $331=(($2+532)|0);
 var $332=HEAP32[(($331)>>2)];
 var $333=(($332+24)|0);
 var $334=(($333+8)|0);
 var $335=HEAPF32[(($334)>>2)];
 var $336=($330)*($335);
 var $337=($325)-($336);
 var $338=(($2+532)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(($339+48)|0);
 var $341=(($340+4)|0);
 HEAPF32[(($341)>>2)]=$337;
 var $342=(($2+532)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=(($343+36)|0);
 var $345=(($344)|0);
 var $346=HEAPF32[(($345)>>2)];
 var $347=(($2+532)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=(($348+24)|0);
 var $350=(($349+4)|0);
 var $351=HEAPF32[(($350)>>2)];
 var $352=($346)*($351);
 var $353=(($2+532)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=(($354+36)|0);
 var $356=(($355+4)|0);
 var $357=HEAPF32[(($356)>>2)];
 var $358=(($2+532)|0);
 var $359=HEAP32[(($358)>>2)];
 var $360=(($359+24)|0);
 var $361=(($360)|0);
 var $362=HEAPF32[(($361)>>2)];
 var $363=($357)*($362);
 var $364=($352)-($363);
 var $365=(($2+532)|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=(($366+48)|0);
 var $368=(($367+8)|0);
 HEAPF32[(($368)>>2)]=$364;
 var $369=(($2+532)|0);
 var $370=HEAP32[(($369)>>2)];
 var $371=(($370+48)|0);
 var $372=(($371)|0);
 var $373=HEAPF32[(($372)>>2)];
 var $374=(($2+532)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=(($375+48)|0);
 var $377=(($376)|0);
 var $378=HEAPF32[(($377)>>2)];
 var $379=($373)*($378);
 var $380=(($2+532)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($381+48)|0);
 var $383=(($382+4)|0);
 var $384=HEAPF32[(($383)>>2)];
 var $385=(($2+532)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=(($386+48)|0);
 var $388=(($387+4)|0);
 var $389=HEAPF32[(($388)>>2)];
 var $390=($384)*($389);
 var $391=($379)+($390);
 var $392=(($2+532)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=(($393+48)|0);
 var $395=(($394+8)|0);
 var $396=HEAPF32[(($395)>>2)];
 var $397=(($2+532)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=(($398+48)|0);
 var $400=(($399+8)|0);
 var $401=HEAPF32[(($400)>>2)];
 var $402=($396)*($401);
 var $403=($391)+($402);
 var $404=Math_sqrt($403);
 var $405=(1)/($404);
 $l4=$405;
 var $406=$l4;
 $k5=$406;
 var $407=$k5;
 var $408=(($2+532)|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=(($409+48)|0);
 var $411=(($410)|0);
 var $412=HEAPF32[(($411)>>2)];
 var $413=($407)*($412);
 var $414=(($2+532)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=(($415+48)|0);
 var $417=(($416)|0);
 HEAPF32[(($417)>>2)]=$413;
 var $418=$k5;
 var $419=(($2+532)|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=(($420+48)|0);
 var $422=(($421+4)|0);
 var $423=HEAPF32[(($422)>>2)];
 var $424=($418)*($423);
 var $425=(($2+532)|0);
 var $426=HEAP32[(($425)>>2)];
 var $427=(($426+48)|0);
 var $428=(($427+4)|0);
 HEAPF32[(($428)>>2)]=$424;
 var $429=$k5;
 var $430=(($2+532)|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=(($431+48)|0);
 var $433=(($432+8)|0);
 var $434=HEAPF32[(($433)>>2)];
 var $435=($429)*($434);
 var $436=(($2+532)|0);
 var $437=HEAP32[(($436)>>2)];
 var $438=(($437+48)|0);
 var $439=(($438+8)|0);
 HEAPF32[(($439)>>2)]=$435;
 $k6=0.7853981852531433;
 var $440=$k6;
 var $441=(($2+532)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=(($442+48)|0);
 var $444=(($443)|0);
 var $445=HEAPF32[(($444)>>2)];
 var $446=($440)*($445);
 var $447=(($2+532)|0);
 var $448=HEAP32[(($447)>>2)];
 var $449=(($448+48)|0);
 var $450=(($449)|0);
 HEAPF32[(($450)>>2)]=$446;
 var $451=$k6;
 var $452=(($2+532)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=(($453+48)|0);
 var $455=(($454+4)|0);
 var $456=HEAPF32[(($455)>>2)];
 var $457=($451)*($456);
 var $458=(($2+532)|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=(($459+48)|0);
 var $461=(($460+4)|0);
 HEAPF32[(($461)>>2)]=$457;
 var $462=$k6;
 var $463=(($2+532)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=(($464+48)|0);
 var $466=(($465+8)|0);
 var $467=HEAPF32[(($466)>>2)];
 var $468=($462)*($467);
 var $469=(($2+532)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=(($470+48)|0);
 var $472=(($471+8)|0);
 HEAPF32[(($472)>>2)]=$468;
 $i=0;
 label=2;break;
 case 2: 
 var $474=$i;
 var $475=(($2+548)|0);
 var $476=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($475);
 var $477=($474>>>0)<($476>>>0);
 if($477){label=3;break;}else{label=5;break;}
 case 3: 
 var $479=(($2+548)|0);
 var $480=$i;
 var $481=__ZN2cl6vectorIP12RenderDeviceLj10EEixEi($479,$480);
 var $482=HEAP32[(($481)>>2)];
 var $483=(($2+532)|0);
 var $484=HEAP32[(($483)>>2)];
 __ZN12RenderDevice18UpdateCameraBufferEP6Camera($482,$484);
 label=4;break;
 case 4: 
 var $486=$i;
 var $487=((($486)+(1))|0);
 $i=$487;
 label=2;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderDevice18UpdateCameraBufferEP6Camera($this,$camera){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$camera;
 var $3=$1;
 var $4=(($3+16)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($3+68)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $9=$8;
 var $10=__ZNK2cl12CommandQueue18enqueueWriteBufferERKNS_6BufferEjjjPKvPKNS_6vectorINS_5EventELj10EEEPS7_($5,$7,0,0,60,$9,0,0);
 return;
}
function __ZNK2cl12CommandQueue18enqueueWriteBufferERKNS_6BufferEjjjPKvPKNS_6vectorINS_5EventELj10EEEPS7_($this,$buffer,$blocking,$offset,$size,$ptr,$events,$event){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 $1=$this;
 $2=$buffer;
 $3=$blocking;
 $4=$offset;
 $5=$size;
 $6=$ptr;
 $7=$events;
 $8=$event;
 var $9=$1;
 var $10=$9;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$2;
 var $14=$13;
 var $15=__ZNK2cl6detail7WrapperIP7_cl_memEclEv($14);
 var $16=$3;
 var $17=$4;
 var $18=$5;
 var $19=$6;
 var $20=$7;
 var $21=($20|0)!=0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 var $23=$7;
 var $24=__ZNK2cl6vectorINS_5EventELj10EE4sizeEv($23);
 var $27=$24;label=4;break;
 case 3: 
 var $27=0;label=4;break;
 case 4: 
 var $27;
 var $28=$7;
 var $29=($28|0)!=0;
 if($29){label=5;break;}else{label=7;break;}
 case 5: 
 var $31=$7;
 var $32=__ZNK2cl6vectorINS_5EventELj10EE4sizeEv($31);
 var $33=($32>>>0)>0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=$7;
 var $36=__ZNK2cl6vectorINS_5EventELj10EE5frontEv($35);
 var $37=$36;
 var $40=$37;label=8;break;
 case 7: 
 var $40=0;label=8;break;
 case 8: 
 var $40;
 var $41=$8;
 var $42=$41;
 var $43=_clEnqueueWriteBuffer($12,$15,$16,$17,$18,$19,$27,$40,$42);
 var $44=__ZN2cl6detailL10errHandlerEiPKc($43,2280);
 return $44;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP7_cl_memEclEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK2cl6vectorINS_5EventELj10EE4sizeEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+40)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)+(1))|0);
 return $5;
}
function __ZNK2cl6vectorINS_5EventELj10EE5frontEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZNK2cl12CommandQueue6finishEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_clFinish($5);
 var $7=__ZN2cl6detailL10errHandlerEiPKc($6,2192);
 return $7;
}
function __ZN12RenderDevice17UpdateSceneBufferEP6Sphere($this,$spheres){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$spheres;
 var $3=$1;
 var $4=(($3+16)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($3+64)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($3+36)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($9)*(44))&-1);
 var $11=$2;
 var $12=$11;
 var $13=__ZNK2cl12CommandQueue18enqueueWriteBufferERKNS_6BufferEjjjPKvPKNS_6vectorINS_5EventELj10EEEPS7_($5,$7,0,0,$10,$12,0,0);
 return;
}
function __ZNK12RenderDevice14GetPerformanceEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+96)|0);
 var $4=HEAPF64[(($3)>>3)];
 var $5=$4==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($2+88)|0);
 var $8=HEAPF64[(($7)>>3)];
 var $9=$8==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $18=1;label=5;break;
 case 4: 
 var $12=(($2+88)|0);
 var $13=HEAPF64[(($12)>>3)];
 var $14=(($2+96)|0);
 var $15=HEAPF64[(($14)>>3)];
 var $16=($13)/($15);
 var $18=$16;label=5;break;
 case 5: 
 var $18;
 return $18;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorINS_6DeviceELj10EE6assignIPP13_cl_device_idEEvT_S7_($this,$start,$end){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 $1=$this;
 $2=$start;
 $3=$end;
 var $7=$1;
 __ZN2cl6vectorINS_6DeviceELj10EE5clearEv($7);
 label=2;break;
 case 2: 
 var $9=$2;
 var $10=$3;
 var $11=($9>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=7;break;}
 case 3: 
 var $13=$2;
 var $14=HEAP32[(($13)>>2)];
 __ZN2cl6DeviceC1EP13_cl_device_id($4,$14);
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EE9push_backERKS1_($7,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZN2cl6DeviceD1Ev($4);
 var $16=$2;
 var $17=(($16+4)|0);
 $2=$17;
 label=2;break;
 case 5: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $20=$19$0;
 $5=$20;
 var $21=$19$1;
 $6=$21;
 (function() { try { __THREW__ = 0; return __ZN2cl6DeviceD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 label=8;break;
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 var $25=$5;
 var $26=$6;
 var $27$0=$25;
 var $27$1=0;
 var $28$0=$27$0;
 var $28$1=$26;
 ___resumeException($28$0)
 case 9: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorINS_6DeviceELj10EE5clearEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+40)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($2+44)|0);
 HEAP8[($4)]=1;
 return;
}
function __ZN2cl6DeviceC1EP13_cl_device_id($this,$device){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$device;
 var $3=$1;
 var $4=$2;
 __ZN2cl6DeviceC2EP13_cl_device_id($3,$4);
 return;
}
function __ZN2cl6DeviceC2EP13_cl_device_id($this,$device){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$device;
 var $3=$1;
 var $4=$3;
 __ZN2cl6detail7WrapperIP13_cl_device_idEC2Ev($4);
 var $5=$2;
 var $6=$3;
 var $7=(($6)|0);
 HEAP32[(($7)>>2)]=$5;
 return;
}
function __ZN2cl8PlatformC2ERKS0_($this,$platform){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$platform;
 var $3=$1;
 var $4=$3;
 var $5=$2;
 var $6=$5;
 __ZN2cl6detail7WrapperIP15_cl_platform_idEC2ERKS4_($4,$6);
 return;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEC2ERKS4_($this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($3)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($3)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=__ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE6retainES3_($4);
 return $5;
}
function __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE6retainES3_($0){
 var label=0;
 var $2;
 $2=$0;
 return -32;
}
function __ZN2cl6vectorINS_8PlatformELj10EE6assignIPP15_cl_platform_idEEvT_S7_($this,$start,$end){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 $1=$this;
 $2=$start;
 $3=$end;
 var $7=$1;
 __ZN2cl6vectorINS_8PlatformELj10EE5clearEv($7);
 label=2;break;
 case 2: 
 var $9=$2;
 var $10=$3;
 var $11=($9>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=7;break;}
 case 3: 
 var $13=$2;
 var $14=HEAP32[(($13)>>2)];
 __ZN2cl8PlatformC1EP15_cl_platform_id($4,$14);
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_8PlatformELj10EE9push_backERKS1_($7,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZN2cl8PlatformD1Ev($4);
 var $16=$2;
 var $17=(($16+4)|0);
 $2=$17;
 label=2;break;
 case 5: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $20=$19$0;
 $5=$20;
 var $21=$19$1;
 $6=$21;
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 label=8;break;
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 var $25=$5;
 var $26=$6;
 var $27$0=$25;
 var $27$1=0;
 var $28$0=$27$0;
 var $28$1=$26;
 ___resumeException($28$0)
 case 9: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorINS_8PlatformELj10EE5clearEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+40)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($2+44)|0);
 HEAP8[($4)]=1;
 return;
}
function __ZN2cl6vectorINS_8PlatformELj10EE9push_backERKS1_($this,$x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$x;
 var $3=$1;
 var $4=__ZNK2cl6vectorINS_8PlatformELj10EE4sizeEv($3);
 var $5=($4>>>0)<10;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($3+40)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)+(1))|0);
 HEAP32[(($7)>>2)]=$9;
 var $10=(($3+40)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($3)|0);
 var $13=(($12+($11<<2))|0);
 var $14=$2;
 var $15=__ZN2cl8PlatformaSERKS0_($13,$14);
 var $16=(($3+44)|0);
 HEAP8[($16)]=0;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl8PlatformC1EP15_cl_platform_id($this,$platform){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$platform;
 var $3=$1;
 var $4=$2;
 __ZN2cl8PlatformC2EP15_cl_platform_id($3,$4);
 return;
}
function __ZN2cl8PlatformC2EP15_cl_platform_id($this,$platform){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$platform;
 var $3=$1;
 var $4=$3;
 __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($4);
 var $5=$2;
 var $6=$3;
 var $7=(($6)|0);
 HEAP32[(($7)>>2)]=$5;
 return;
}
function __ZN2cl8PlatformaSERKS0_($this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6detail7WrapperIP15_cl_platform_idEaSERKS4_($7,$9);
 label=3;break;
 case 3: 
 return $3;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEaSERKS4_($this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=__ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($3);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($3)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=__ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($3);
 label=5;break;
 case 5: 
 return $3;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($3);
 return;
}
function __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 var $7=(sp)+(8);
 var $8=(sp)+(16);
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36=(sp)+(24);
 $35=$this;
 var $37=$35;
 var $38=(($37)|0);
 var $39=HEAP32[(($38)>>2)];
 $33=$36;
 $34=-1;
 var $40=$33;
 var $41=$34;
 $31=$40;
 $32=$41;
 var $42=$31;
 var $43=(($42)|0);
 HEAP32[(($43)>>2)]=0;
 $24=$36;
 var $44=$24;
 var $45=($39|0)!=0;
 if($45){label=2;break;}else{label=6;break;}
 case 2: 
 $16=$37;
 var $47=$16;
 var $48=(($47)|0);
 var $49=HEAP32[(($48)>>2)];
 $12=$47;
 $13=$49;
 var $50=$12;
 label=3;break;
 case 3: 
 var $52=$13;
 var $53=(($50+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($52|0)!=($54|0);
 if($55){label=4;break;}else{label=5;break;}
 case 4: 
 $11=$50;
 var $57=$11;
 var $58=(($57+8)|0);
 $10=$58;
 var $59=$10;
 var $60=$59;
 $9=$60;
 var $61=$9;
 var $62=$61;
 var $63=(($50+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=((($64)-(8))|0);
 HEAP32[(($63)>>2)]=$65;
 $1=$65;
 var $66=$1;
 $5=$62;
 $6=$66;
 var $67=$8;
 var $68=$5;
 var $69=$6;
 var $tmp_i_i_i=$4;
 var $tmp1_i_i_i=$7;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $2=$68;
 $3=$69;
 var $70=$3;
 label=3;break;
 case 5: 
 $19=$37;
 var $71=$19;
 var $72=(($71+8)|0);
 $18=$72;
 var $73=$18;
 var $74=$73;
 $17=$74;
 var $75=$17;
 var $76=$75;
 var $77=(($37)|0);
 var $78=HEAP32[(($77)>>2)];
 $23=$37;
 var $79=$23;
 $22=$79;
 var $80=$22;
 var $81=(($80+8)|0);
 $21=$81;
 var $82=$21;
 var $83=$82;
 $20=$83;
 var $84=$20;
 var $85=(($84)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($79)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$86;
 var $90=$88;
 var $91=((($89)-($90))|0);
 var $92=(((($91|0))/(8))&-1);
 $28=$76;
 $29=$78;
 $30=$92;
 var $93=$28;
 var $94=$29;
 var $95=$30;
 $25=$93;
 $26=$94;
 $27=$95;
 var $96=$25;
 var $97=$26;
 var $98=$97;
 __ZdlPv($98);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a21(){
 var label=0;
 ___cxx_global_var_init20();
 return;
}
function ___cxx_global_var_init76(){
 var label=0;
 __ZN2cl7NDRangeC1Ev(17352);
 var $1=_atexit((790),17352,___dso_handle);
 return;
}
function __Z13WallClockTimev(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $t=sp;
 var $1=_gettimeofday($t,0);
 var $2=(($t)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0);
 var $5=(($t+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0);
 var $8=($7)/(1000000);
 var $9=($4)+($8);
 STACKTOP=sp;return $9;
}
function __Z11displayFuncv(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $devices=sp;
 var $i;
 var $16;
 var $17;
 var $start;
 var $i1;
 var $end;
 var $18=HEAP32[((13400)>>2)];
 var $19=__ZNK12RenderConfig15GetRenderDeviceEv($18);
 __ZN2cl6vectorIP12RenderDeviceLj10EEC1ERKS3_($devices,$19);
 $i=0;
 label=2;break;
 case 2: 
 var $21=$i;
 var $22=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $24=($21>>>0)<($22>>>0);
 if($24){label=4;break;}else{label=9;break;}
 case 4: 
 var $26=$i;
 var $27=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,$26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 (function() { try { __THREW__ = 0; return __ZN12RenderDevice12RenderThreadEPS_($27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 label=7;break;
 case 7: 
 var $31=$i;
 var $32=((($31)+(1))|0);
 $i=$32;
 label=2;break;
 case 8: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 var $35=$34$0;
 $16=$35;
 var $36=$34$1;
 $17=$36;
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=75;break; }
 case 9: 
 var $38=HEAP32[((13336)>>2)];
 (function() { try { __THREW__ = 0; return _glEnable($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 10: 
 var $40=HEAP32[((13336)>>2)];
 var $41=HEAP32[((17672)>>2)];
 (function() { try { __THREW__ = 0; return _glBindTexture($40,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=8;break; }
 case 11: 
 var $43=HEAP32[((13400)>>2)];
 var $44=(($43+528)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)!=0;
 if($46){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=HEAP32[((13336)>>2)];
 var $49=HEAP32[((13400)>>2)];
 var $50=(($49+516)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=HEAP32[((13400)>>2)];
 var $53=(($52+520)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=HEAP32[((13344)>>2)];
 var $56=HEAP32[((13352)>>2)];
 var $57=HEAP32[((13400)>>2)];
 var $58=(($57+528)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=$59;
 (function() { try { __THREW__ = 0; return _glTexSubImage2D($48,0,0,0,$51,$54,$55,$56,$60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 label=14;break;
 case 14: 
 (function() { try { __THREW__ = 0; return _glBegin(5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=8;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return _glColor3f(1,1,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=8;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return _glTexCoord2i(0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=8;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return _glVertex3f(0,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=8;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return _glColor3f(1,1,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=8;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return _glTexCoord2i(0,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=8;break; }
 case 20: 
 var $69=HEAP32[((13400)>>2)];
 var $70=(($69+520)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($71>>>0);
 (function() { try { __THREW__ = 0; return _glVertex3f(0,$72,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=8;break; }
 case 21: 
 (function() { try { __THREW__ = 0; return _glColor3f(1,1,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=8;break; }
 case 22: 
 (function() { try { __THREW__ = 0; return _glTexCoord2i(1,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=8;break; }
 case 23: 
 var $76=HEAP32[((13400)>>2)];
 var $77=(($76+516)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($78>>>0);
 (function() { try { __THREW__ = 0; return _glVertex3f($79,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=8;break; }
 case 24: 
 (function() { try { __THREW__ = 0; return _glColor3f(1,1,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=8;break; }
 case 25: 
 (function() { try { __THREW__ = 0; return _glTexCoord2i(1,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=8;break; }
 case 26: 
 var $83=HEAP32[((13400)>>2)];
 var $84=(($83+516)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85>>>0);
 var $87=HEAP32[((13400)>>2)];
 var $88=(($87+520)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89>>>0);
 (function() { try { __THREW__ = 0; return _glVertex3f($86,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=8;break; }
 case 27: 
 (function() { try { __THREW__ = 0; return _glEnd() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=8;break; }
 case 28: 
 var $93=HEAP32[((13336)>>2)];
 (function() { try { __THREW__ = 0; return _glDisable($93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=8;break; }
 case 29: 
 var $95=HEAP32[((13336)>>2)];
 (function() { try { __THREW__ = 0; return _glBindTexture($95,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=8;break; }
 case 30: 
 var $97=HEAP8[(17472)];
 var $98=(($97)&1);
 if($98){label=31;break;}else{label=63;break;}
 case 31: 
 $start=0;
 $i1=0;
 label=32;break;
 case 32: 
 var $101=$i1;
 var $102=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=8;break; }
 case 33: 
 var $104=($101>>>0)<($102>>>0);
 if($104){label=34;break;}else{label=62;break;}
 case 34: 
 var $106=$i1;
 var $107=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,$106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=8;break; }
 case 35: 
 var $109=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice13GetWorkOffsetEv($107) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=8;break; }
 case 36: 
 var $111=$i1;
 var $112=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,$111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=8;break; }
 case 37: 
 var $114=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice13GetWorkAmountEv($112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=8;break; }
 case 38: 
 var $116=((($109)+($114))|0);
 var $117=HEAP32[((13400)>>2)];
 var $118=(($117+516)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(((($116>>>0))/(($119>>>0)))&-1);
 $end=$120;
 var $121=$i1;
 var $122=(((($121>>>0))%(4))&-1);
 if(($122|0)==0){ label=39;break;}else if(($122|0)==1){ label=41;break;}else if(($122|0)==2){ label=43;break;}else if(($122|0)==3){ label=45;break;}else{label=47;break;}
 case 39: 
 (function() { try { __THREW__ = 0; return _glColor3f(1,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=8;break; }
 case 40: 
 label=47;break;
 case 41: 
 (function() { try { __THREW__ = 0; return _glColor3f(0,1,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=8;break; }
 case 42: 
 label=47;break;
 case 43: 
 (function() { try { __THREW__ = 0; return _glColor3f(0,0,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=8;break; }
 case 44: 
 label=47;break;
 case 45: 
 (function() { try { __THREW__ = 0; return _glColor3f(1,1,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=8;break; }
 case 46: 
 label=47;break;
 case 47: 
 (function() { try { __THREW__ = 0; return _glBegin(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=8;break; }
 case 48: 
 var $133=$start;
 (function() { try { __THREW__ = 0; return _glVertex3f(0,$133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=8;break; }
 case 49: 
 var $135=HEAP32[((13400)>>2)];
 var $136=(($135+516)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=$start;
 (function() { try { __THREW__ = 0; return _glVertex3f($137,$138) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=8;break; }
 case 50: 
 var $140=$end;
 (function() { try { __THREW__ = 0; return _glVertex3f(0,$140) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=8;break; }
 case 51: 
 var $142=HEAP32[((13400)>>2)];
 var $143=(($142+516)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=$end;
 (function() { try { __THREW__ = 0; return _glVertex3f($144,$145) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=8;break; }
 case 52: 
 (function() { try { __THREW__ = 0; return _glEnd() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=8;break; }
 case 53: 
 (function() { try { __THREW__ = 0; return _glColor3f(1,1,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=8;break; }
 case 54: 
 var $149=$i1;
 var $150=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,$149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=8;break; }
 case 55: 
 var $152=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice7GetNameEv($150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=8;break; }
 case 56: 
 $15=$152;
 var $154=$15;
 $14=$154;
 var $155=$14;
 $13=$155;
 var $156=$13;
 $12=$156;
 var $157=$12;
 var $158=(($157)|0);
 $11=$158;
 var $159=$11;
 var $160=$159;
 $10=$160;
 var $161=$10;
 var $162=(($161)|0);
 var $163=(($162)|0);
 var $164=$163;
 var $165=(($164)|0);
 var $166=$165;
 var $167=HEAP8[($166)];
 var $168=($167&255);
 var $169=$168&1;
 var $170=($169|0)!=0;
 if($170){label=57;break;}else{label=58;break;}
 case 57: 
 $4=$156;
 var $172=$4;
 var $173=(($172)|0);
 $3=$173;
 var $174=$3;
 var $175=$174;
 $2=$175;
 var $176=$2;
 var $177=(($176)|0);
 var $178=(($177)|0);
 var $179=$178;
 var $180=(($179+8)|0);
 var $181=HEAP32[(($180)>>2)];
 var $195=$181;label=59;break;
 case 58: 
 $9=$156;
 var $183=$9;
 var $184=(($183)|0);
 $8=$184;
 var $185=$8;
 var $186=$185;
 $7=$186;
 var $187=$7;
 var $188=(($187)|0);
 var $189=(($188)|0);
 var $190=$189;
 var $191=(($190+1)|0);
 var $192=(($191)|0);
 $6=$192;
 var $193=$6;
 $5=$193;
 var $194=$5;
 var $195=$194;label=59;break;
 case 59: 
 var $195;
 $1=$195;
 var $196=$1;
 (function() { try { __THREW__ = 0; return __ZL11PrintStringPvPKc(_glutBitmap8By13,$196) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=8;break; }
 case 60: 
 var $198=$end;
 var $199=((($198)+(1))|0);
 $start=$199;
 label=61;break;
 case 61: 
 var $201=$i1;
 var $202=((($201)+(1))|0);
 $i1=$202;
 label=32;break;
 case 62: 
 label=63;break;
 case 63: 
 (function() { try { __THREW__ = 0; return __ZL13PrintCaptionsv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=8;break; }
 case 64: 
 var $206=HEAP8[(17424)];
 var $207=(($206)&1);
 if($207){label=65;break;}else{label=71;break;}
 case 65: 
 (function() { try { __THREW__ = 0; return _glPushMatrix() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=8;break; }
 case 66: 
 (function() { try { __THREW__ = 0; return _glLoadIdentity() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=8;break; }
 case 67: 
 (function() { try { __THREW__ = 0; return _glOrtho(-0.5,639.5,-0.5,479.5,-1,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=8;break; }
 case 68: 
 (function() { try { __THREW__ = 0; return __ZL19PrintHelpAndDevicesv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=8;break; }
 case 69: 
 (function() { try { __THREW__ = 0; return _glPopMatrix() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=8;break; }
 case 70: 
 label=71;break;
 case 71: 
 (function() { try { __THREW__ = 0; return _glutSwapBuffers() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=8;break; }
 case 72: 
 __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($devices);
 STACKTOP=sp;return;
 case 73: 
 label=74;break;
 case 74: 
 var $218=$16;
 var $219=$17;
 var $220$0=$218;
 var $220$1=0;
 var $221$0=$220$0;
 var $221$1=$219;
 ___resumeException($221$0)
 case 75: 
 var $223$0 = ___cxa_find_matching_catch(-1, -1,0); var $223$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorIP12RenderDeviceLj10EEC1ERKS3_($this,$vec){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$vec;
 var $3=$1;
 var $4=$2;
 __ZN2cl6vectorIP12RenderDeviceLj10EEC2ERKS3_($3,$4);
 return;
}
function __ZNK12RenderConfig15GetRenderDeviceEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+548)|0);
 return $3;
}
function __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($this,$index){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$index;
 var $3=$1;
 var $4=$2;
 var $5=(($3)|0);
 var $6=(($5+($4<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 return $7;
}
function __ZNK12RenderDevice13GetWorkOffsetEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+28)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK12RenderDevice13GetWorkAmountEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+32)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZL11PrintStringPvPKc($font,$string){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$font;
 $2=$string;
 var $3=$2;
 var $4=_printf(1952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$3,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}
function __ZL13PrintCaptionsv(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 _glEnable(3042);
 _glBlendFunc(770,771);
 _glColor4f(0,0,0,0.800000011920929);
 _glDisable(3042);
 var $1=HEAP32[((13400)>>2)];
 var $2=__ZNK12RenderConfig11IsProfilingEv($1);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 _glColor3f(1,0,0);
 __ZL11PrintStringPvPKc(_glutBitmap8By13,2136);
 _glColor3f(1,1,1);
 var $4=HEAP32[((13400)>>2)];
 var $5=(($4+4)|0);
 var $6=(($5)|0);
 __ZL11PrintStringPvPKc(_glutBitmap8By13,$6);
 label=4;break;
 case 3: 
 _glColor3f(1,1,1);
 var $8=HEAP32[((13400)>>2)];
 var $9=(($8+4)|0);
 var $10=(($9)|0);
 __ZL11PrintStringPvPKc(_glutBitmap8By13,$10);
 label=4;break;
 case 4: 
 __ZL11PrintStringPvPKc(_glutBitmap8By13,144);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19PrintHelpAndDevicesv(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+592)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21=sp;
 var $22;
 var $23;
 var $24=(sp)+(8);
 var $devices=(sp)+(16);
 var $minPerf=(sp)+(64);
 var $25;
 var $26;
 var $totalPerf;
 var $totalAmount;
 var $i;
 var $27=(sp)+(72);
 var $offset;
 var $buff=(sp)+(80);
 var $i1;
 _glEnable(3042);
 _glBlendFunc(770,771);
 _glColor4f(0,0,0,0.5);
 _glDisable(3042);
 _glColor3f(1,1,1);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,3520);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,3464);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,3336);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,3264);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,3160);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,3040);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,2944);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,2856);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,2776);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,2704);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,2624);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,2544);
 __ZL11PrintStringPvPKc(_glutBitmap9By15,2392);
 var $28=HEAP32[((13400)>>2)];
 var $29=__ZNK12RenderConfig15GetRenderDeviceEv($28);
 __ZN2cl6vectorIP12RenderDeviceLj10EEC1ERKS3_($devices,$29);
 var $30=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=20;break; }
 case 2: 
 var $32=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice14GetPerformanceEv($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=20;break; }
 case 3: 
 HEAPF64[(($minPerf)>>3)]=$32;
 var $34=HEAP32[((13400)>>2)];
 var $35=(function() { try { __THREW__ = 0; return __ZNK12RenderConfig12GetPerfIndexEj($34,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=20;break; }
 case 4: 
 $totalPerf=$35;
 var $37=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=20;break; }
 case 5: 
 var $39=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice13GetWorkAmountEv($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=20;break; }
 case 6: 
 var $41=($39>>>0);
 $totalAmount=$41;
 $i=1;
 label=7;break;
 case 7: 
 var $43=$i;
 var $44=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=20;break; }
 case 8: 
 var $46=($43>>>0)<($44>>>0);
 if($46){label=9;break;}else{label=21;break;}
 case 9: 
 var $48=$i;
 var $49=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=20;break; }
 case 10: 
 var $51=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice14GetPerformanceEv($49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=20;break; }
 case 11: 
 HEAPF64[(($27)>>3)]=$51;
 $22=$minPerf;
 $23=$27;
 var $53=$22;
 var $54=$23;
 var $tmp_i=$21;
 var $tmp1_i=$24;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $19=$53;
 $20=$54;
 var $55=$20;
 var $56=$19;
 $16=$21;
 $17=$55;
 $18=$56;
 var $57=$16;
 var $58=$17;
 var $59=HEAPF64[(($58)>>3)];
 var $60=$18;
 var $61=HEAPF64[(($60)>>3)];
 var $62=$59<$61;
 if($62){label=12;break;}else{label=13;break;}
 case 12: 
 var $64=$20;
 var $67=$64;label=14;break;
 case 13: 
 var $66=$19;
 var $67=$66;label=14;break;
 case 14: 
 var $67;
 label=15;break;
 case 15: 
 var $69=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($67)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($67)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 HEAPF64[(($minPerf)>>3)]=$69;
 var $70=HEAP32[((13400)>>2)];
 var $71=$i;
 var $72=(function() { try { __THREW__ = 0; return __ZNK12RenderConfig12GetPerfIndexEj($70,$71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=20;break; }
 case 16: 
 var $74=$totalPerf;
 var $75=($74)+($72);
 $totalPerf=$75;
 var $76=$i;
 var $77=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $79=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice13GetWorkAmountEv($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 var $81=($79>>>0);
 var $82=$totalAmount;
 var $83=($82)+($81);
 $totalAmount=$83;
 label=19;break;
 case 19: 
 var $85=$i;
 var $86=((($85)+(1))|0);
 $i=$86;
 label=7;break;
 case 20: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1); var $88$1 = tempRet0;
 var $89=$88$0;
 $25=$89;
 var $90=$88$1;
 $26=$90;
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=47;break; }
 case 21: 
 (function() { try { __THREW__ = 0; return _glColor3f(1,0.5,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=20;break; }
 case 22: 
 $offset=85;
 $i1=0;
 label=23;break;
 case 23: 
 var $94=$i1;
 var $95=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=20;break; }
 case 24: 
 var $97=($94>>>0)<($95>>>0);
 if($97){label=25;break;}else{label=43;break;}
 case 25: 
 var $99=(($buff)|0);
 var $100=$i1;
 var $101=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,$100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=20;break; }
 case 26: 
 var $103=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice7GetNameEv($101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=20;break; }
 case 27: 
 $15=$103;
 var $105=$15;
 $14=$105;
 var $106=$14;
 $13=$106;
 var $107=$13;
 $12=$107;
 var $108=$12;
 var $109=(($108)|0);
 $11=$109;
 var $110=$11;
 var $111=$110;
 $10=$111;
 var $112=$10;
 var $113=(($112)|0);
 var $114=(($113)|0);
 var $115=$114;
 var $116=(($115)|0);
 var $117=$116;
 var $118=HEAP8[($117)];
 var $119=($118&255);
 var $120=$119&1;
 var $121=($120|0)!=0;
 if($121){label=28;break;}else{label=29;break;}
 case 28: 
 $4=$107;
 var $123=$4;
 var $124=(($123)|0);
 $3=$124;
 var $125=$3;
 var $126=$125;
 $2=$126;
 var $127=$2;
 var $128=(($127)|0);
 var $129=(($128)|0);
 var $130=$129;
 var $131=(($130+8)|0);
 var $132=HEAP32[(($131)>>2)];
 var $146=$132;label=30;break;
 case 29: 
 $9=$107;
 var $134=$9;
 var $135=(($134)|0);
 $8=$135;
 var $136=$8;
 var $137=$136;
 $7=$137;
 var $138=$7;
 var $139=(($138)|0);
 var $140=(($139)|0);
 var $141=$140;
 var $142=(($141+1)|0);
 var $143=(($142)|0);
 $6=$143;
 var $144=$6;
 $5=$144;
 var $145=$5;
 var $146=$145;label=30;break;
 case 30: 
 var $146;
 $1=$146;
 var $147=$1;
 var $148=$i1;
 var $149=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,$148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=20;break; }
 case 31: 
 var $151=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice14GetPerformanceEv($149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=20;break; }
 case 32: 
 var $153=HEAPF64[(($minPerf)>>3)];
 var $154=($151)/($153);
 var $155=HEAP32[((13400)>>2)];
 var $156=$i1;
 var $157=(function() { try { __THREW__ = 0; return __ZNK12RenderConfig12GetPerfIndexEj($155,$156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=20;break; }
 case 33: 
 var $159=$totalPerf;
 var $160=($157)/($159);
 var $161=$i1;
 var $162=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($devices,$161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=20;break; }
 case 34: 
 var $164=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice13GetWorkAmountEv($162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=20;break; }
 case 35: 
 var $166=($164>>>0);
 var $167=($166)*(100);
 var $168=$totalAmount;
 var $169=($167)/($168);
 var $170=(function() { try { __THREW__ = 0; return _sprintf($99,2304,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$147,HEAPF64[(((tempVarArgs)+(8))>>3)]=$154,HEAPF64[(((tempVarArgs)+(16))>>3)]=$160,HEAPF64[(((tempVarArgs)+(24))>>3)]=$169,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=36;break; } else { label=20;break; }
 case 36: 
 var $172=$i1;
 var $173=HEAP32[((13400)>>2)];
 var $174=(($173)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($172|0)==($175|0);
 if($176){label=37;break;}else{label=40;break;}
 case 37: 
 (function() { try { __THREW__ = 0; return _glColor3f(0,0,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=20;break; }
 case 38: 
 (function() { try { __THREW__ = 0; return _glColor3f(1,0.5,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=20;break; }
 case 39: 
 label=40;break;
 case 40: 
 var $181=(($buff)|0);
 (function() { try { __THREW__ = 0; return __ZL11PrintStringPvPKc(_glutBitmap9By15,$181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=20;break; }
 case 41: 
 var $183=$offset;
 var $184=((($183)+(16))|0);
 $offset=$184;
 label=42;break;
 case 42: 
 var $186=$i1;
 var $187=((($186)+(1))|0);
 $i1=$187;
 label=23;break;
 case 43: 
 (function() { try { __THREW__ = 0; return __ZL11PrintStringPvPKc(_glutBitmap9By15,2208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=20;break; }
 case 44: 
 __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($devices);
 STACKTOP=sp;return;
 case 45: 
 label=46;break;
 case 46: 
 var $192=$25;
 var $193=$26;
 var $194$0=$192;
 var $194$1=0;
 var $195$0=$194$0;
 var $195$1=$193;
 ___resumeException($195$0)
 case 47: 
 var $197$0 = ___cxa_find_matching_catch(-1, -1,0); var $197$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Z11reshapeFuncii($newWidth,$newHeight){
 var label=0;
 var $1;
 var $2;
 $1=$newWidth;
 $2=$newHeight;
 var $3=$1;
 var $4=HEAP32[((13400)>>2)];
 var $5=(($4+516)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$2;
 var $7=HEAP32[((13400)>>2)];
 var $8=(($7+520)|0);
 HEAP32[(($8)>>2)]=$6;
 var $9=$1;
 var $10=$2;
 _glViewport(0,0,$9,$10);
 _glLoadIdentity();
 var $11=$1;
 var $12=($11|0);
 var $13=($12)-(1);
 var $14=$13;
 var $15=$2;
 var $16=($15|0);
 var $17=($16)-(1);
 var $18=$17;
 _glOrtho(0,$14,0,$18,-1,1);
 var $19=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($19,1);
 _glutPostRedisplay();
 return;
}
function __Z7keyFunchii($key,$x,$y){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $f;
 var $y1;
 var $p;
 var $x2;
 var $12;
 var $13;
 var $dir=sp;
 var $l;
 var $k;
 var $k3;
 var $dir4=(sp)+(16);
 var $l5;
 var $k6;
 var $k7;
 var $dir8=(sp)+(32);
 var $k9;
 var $dir10=(sp)+(48);
 var $k11;
 $9=$key;
 $10=$x;
 $11=$y;
 var $14=$9;
 var $15=($14&255);
 switch(($15|0)){case 27:{ label=14;break;}case 32:{ label=19;break;}case 112:{ label=2;break;}case 108:{ label=20;break;}case 97:{ label=21;break;}case 100:{ label=22;break;}case 119:{ label=23;break;}case 115:{ label=24;break;}case 114:{ label=25;break;}case 102:{ label=26;break;}case 43:{ label=27;break;}case 45:{ label=28;break;}case 52:{ label=29;break;}case 54:{ label=30;break;}case 56:{ label=31;break;}case 50:{ label=32;break;}case 57:{ label=33;break;}case 51:{ label=34;break;}case 104:{ label=35;break;}case 107:{ label=36;break;}case 110:{ label=37;break;}case 109:{ label=38;break;}case 118:{ label=39;break;}case 98:{ label=43;break;}default:{label=47;break;}}break;
 case 2: 
 var $17=_fopen(1808,3832);
 $f=$17;
 var $18=$f;
 var $19=($18|0)!=0;
 if($19){label=4;break;}else{label=3;break;}
 case 3: 
 var $21=HEAP32[((_stderr)>>2)];
 var $22=_fprintf($21,3096,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 4: 
 var $24=$f;
 var $25=HEAP32[((13400)>>2)];
 var $26=(($25+516)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=HEAP32[((13400)>>2)];
 var $29=(($28+520)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=_fprintf($24,2176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$27,HEAP32[(((tempVarArgs)+(8))>>2)]=$30,HEAP32[(((tempVarArgs)+(16))>>2)]=255,tempVarArgs)); STACKTOP=tempVarArgs;
 var $32=HEAP32[((13400)>>2)];
 var $33=(($32+520)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=((($34)-(1))|0);
 $y1=$35;
 label=5;break;
 case 5: 
 var $37=$y1;
 var $38=($37|0)>=0;
 if($38){label=6;break;}else{label=12;break;}
 case 6: 
 var $40=$y1;
 var $41=HEAP32[((13400)>>2)];
 var $42=(($41+516)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(Math_imul($40,$43)|0);
 var $45=HEAP32[((13400)>>2)];
 var $46=(($45+528)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+($44<<2))|0);
 var $49=$48;
 $p=$49;
 $x2=0;
 label=7;break;
 case 7: 
 var $51=$x2;
 var $52=HEAP32[((13400)>>2)];
 var $53=(($52+516)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($51>>>0)<($54>>>0);
 if($55){label=8;break;}else{label=10;break;}
 case 8: 
 var $57=$f;
 var $58=$p;
 var $59=(($58)|0);
 var $60=HEAP8[($59)];
 var $61=($60&255);
 var $62=$p;
 var $63=(($62+1)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 var $66=$p;
 var $67=(($66+2)|0);
 var $68=HEAP8[($67)];
 var $69=($68&255);
 var $70=_fprintf($57,1592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$61,HEAP32[(((tempVarArgs)+(8))>>2)]=$65,HEAP32[(((tempVarArgs)+(16))>>2)]=$69,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 var $72=$x2;
 var $73=((($72)+(1))|0);
 $x2=$73;
 var $74=$p;
 var $75=(($74+4)|0);
 $p=$75;
 label=7;break;
 case 10: 
 label=11;break;
 case 11: 
 var $78=$y1;
 var $79=((($78)-(1))|0);
 $y1=$79;
 label=5;break;
 case 12: 
 var $81=$f;
 var $82=_fclose($81);
 label=13;break;
 case 13: 
 label=48;break;
 case 14: 
 var $85=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,1352);
 $7=$85;
 $8=8;
 var $86=$7;
 var $87=$8;
 var $88=FUNCTION_TABLE[$87]($86);
 var $89=HEAP32[((13400)>>2)];
 var $90=($89|0)==0;
 if($90){label=17;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return __ZN12RenderConfigD2Ev($89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $93=$89;
 __ZdlPv($93);
 label=17;break;
 case 17: 
 var $95=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,1072);
 $5=$95;
 $6=8;
 var $96=$5;
 var $97=$6;
 var $98=FUNCTION_TABLE[$97]($96);
 _exit(0);
 throw "Reached an unreachable!";
 case 18: 
 var $100$0 = ___cxa_find_matching_catch(-1, -1); var $100$1 = tempRet0;
 var $101=$100$0;
 $12=$101;
 var $102=$100$1;
 $13=$102;
 var $103=$89;
 __ZdlPv($103);
 label=49;break;
 case 19: 
 var $105=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($105,1);
 label=48;break;
 case 20: 
 var $107=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($107,0);
 var $108=HEAP32[((13400)>>2)];
 __ZN12RenderConfig24RestartWorkloadProcedureEv($108);
 label=48;break;
 case 21: 
 var $110=HEAP32[((13400)>>2)];
 var $111=(($110+532)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=$dir;
 var $115=$113;
 assert(12 % 1 === 0);HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($115)+(4))>>2)];HEAP32[((($114)+(8))>>2)]=HEAP32[((($115)+(8))>>2)];
 var $116=(($dir)|0);
 var $117=HEAPF32[(($116)>>2)];
 var $118=(($dir)|0);
 var $119=HEAPF32[(($118)>>2)];
 var $120=($117)*($119);
 var $121=(($dir+4)|0);
 var $122=HEAPF32[(($121)>>2)];
 var $123=(($dir+4)|0);
 var $124=HEAPF32[(($123)>>2)];
 var $125=($122)*($124);
 var $126=($120)+($125);
 var $127=(($dir+8)|0);
 var $128=HEAPF32[(($127)>>2)];
 var $129=(($dir+8)|0);
 var $130=HEAPF32[(($129)>>2)];
 var $131=($128)*($130);
 var $132=($126)+($131);
 var $133=Math_sqrt($132);
 var $134=(1)/($133);
 $l=$134;
 var $135=$l;
 $k=$135;
 var $136=$k;
 var $137=(($dir)|0);
 var $138=HEAPF32[(($137)>>2)];
 var $139=($136)*($138);
 var $140=(($dir)|0);
 HEAPF32[(($140)>>2)]=$139;
 var $141=$k;
 var $142=(($dir+4)|0);
 var $143=HEAPF32[(($142)>>2)];
 var $144=($141)*($143);
 var $145=(($dir+4)|0);
 HEAPF32[(($145)>>2)]=$144;
 var $146=$k;
 var $147=(($dir+8)|0);
 var $148=HEAPF32[(($147)>>2)];
 var $149=($146)*($148);
 var $150=(($dir+8)|0);
 HEAPF32[(($150)>>2)]=$149;
 $k3=-10;
 var $151=$k3;
 var $152=(($dir)|0);
 var $153=HEAPF32[(($152)>>2)];
 var $154=($151)*($153);
 var $155=(($dir)|0);
 HEAPF32[(($155)>>2)]=$154;
 var $156=$k3;
 var $157=(($dir+4)|0);
 var $158=HEAPF32[(($157)>>2)];
 var $159=($156)*($158);
 var $160=(($dir+4)|0);
 HEAPF32[(($160)>>2)]=$159;
 var $161=$k3;
 var $162=(($dir+8)|0);
 var $163=HEAPF32[(($162)>>2)];
 var $164=($161)*($163);
 var $165=(($dir+8)|0);
 HEAPF32[(($165)>>2)]=$164;
 var $166=HEAP32[((13400)>>2)];
 var $167=(($166+532)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168)|0);
 var $170=(($169)|0);
 var $171=HEAPF32[(($170)>>2)];
 var $172=(($dir)|0);
 var $173=HEAPF32[(($172)>>2)];
 var $174=($171)+($173);
 var $175=HEAP32[((13400)>>2)];
 var $176=(($175+532)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177)|0);
 var $179=(($178)|0);
 HEAPF32[(($179)>>2)]=$174;
 var $180=HEAP32[((13400)>>2)];
 var $181=(($180+532)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182)|0);
 var $184=(($183+4)|0);
 var $185=HEAPF32[(($184)>>2)];
 var $186=(($dir+4)|0);
 var $187=HEAPF32[(($186)>>2)];
 var $188=($185)+($187);
 var $189=HEAP32[((13400)>>2)];
 var $190=(($189+532)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191)|0);
 var $193=(($192+4)|0);
 HEAPF32[(($193)>>2)]=$188;
 var $194=HEAP32[((13400)>>2)];
 var $195=(($194+532)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196)|0);
 var $198=(($197+8)|0);
 var $199=HEAPF32[(($198)>>2)];
 var $200=(($dir+8)|0);
 var $201=HEAPF32[(($200)>>2)];
 var $202=($199)+($201);
 var $203=HEAP32[((13400)>>2)];
 var $204=(($203+532)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205)|0);
 var $207=(($206+8)|0);
 HEAPF32[(($207)>>2)]=$202;
 var $208=HEAP32[((13400)>>2)];
 var $209=(($208+532)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+12)|0);
 var $212=(($211)|0);
 var $213=HEAPF32[(($212)>>2)];
 var $214=(($dir)|0);
 var $215=HEAPF32[(($214)>>2)];
 var $216=($213)+($215);
 var $217=HEAP32[((13400)>>2)];
 var $218=(($217+532)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+12)|0);
 var $221=(($220)|0);
 HEAPF32[(($221)>>2)]=$216;
 var $222=HEAP32[((13400)>>2)];
 var $223=(($222+532)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($224+12)|0);
 var $226=(($225+4)|0);
 var $227=HEAPF32[(($226)>>2)];
 var $228=(($dir+4)|0);
 var $229=HEAPF32[(($228)>>2)];
 var $230=($227)+($229);
 var $231=HEAP32[((13400)>>2)];
 var $232=(($231+532)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233+12)|0);
 var $235=(($234+4)|0);
 HEAPF32[(($235)>>2)]=$230;
 var $236=HEAP32[((13400)>>2)];
 var $237=(($236+532)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+12)|0);
 var $240=(($239+8)|0);
 var $241=HEAPF32[(($240)>>2)];
 var $242=(($dir+8)|0);
 var $243=HEAPF32[(($242)>>2)];
 var $244=($241)+($243);
 var $245=HEAP32[((13400)>>2)];
 var $246=(($245+532)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+12)|0);
 var $249=(($248+8)|0);
 HEAPF32[(($249)>>2)]=$244;
 var $250=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($250,0);
 label=48;break;
 case 22: 
 var $252=HEAP32[((13400)>>2)];
 var $253=(($252+532)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254+36)|0);
 var $256=$dir4;
 var $257=$255;
 assert(12 % 1 === 0);HEAP32[(($256)>>2)]=HEAP32[(($257)>>2)];HEAP32[((($256)+(4))>>2)]=HEAP32[((($257)+(4))>>2)];HEAP32[((($256)+(8))>>2)]=HEAP32[((($257)+(8))>>2)];
 var $258=(($dir4)|0);
 var $259=HEAPF32[(($258)>>2)];
 var $260=(($dir4)|0);
 var $261=HEAPF32[(($260)>>2)];
 var $262=($259)*($261);
 var $263=(($dir4+4)|0);
 var $264=HEAPF32[(($263)>>2)];
 var $265=(($dir4+4)|0);
 var $266=HEAPF32[(($265)>>2)];
 var $267=($264)*($266);
 var $268=($262)+($267);
 var $269=(($dir4+8)|0);
 var $270=HEAPF32[(($269)>>2)];
 var $271=(($dir4+8)|0);
 var $272=HEAPF32[(($271)>>2)];
 var $273=($270)*($272);
 var $274=($268)+($273);
 var $275=Math_sqrt($274);
 var $276=(1)/($275);
 $l5=$276;
 var $277=$l5;
 $k6=$277;
 var $278=$k6;
 var $279=(($dir4)|0);
 var $280=HEAPF32[(($279)>>2)];
 var $281=($278)*($280);
 var $282=(($dir4)|0);
 HEAPF32[(($282)>>2)]=$281;
 var $283=$k6;
 var $284=(($dir4+4)|0);
 var $285=HEAPF32[(($284)>>2)];
 var $286=($283)*($285);
 var $287=(($dir4+4)|0);
 HEAPF32[(($287)>>2)]=$286;
 var $288=$k6;
 var $289=(($dir4+8)|0);
 var $290=HEAPF32[(($289)>>2)];
 var $291=($288)*($290);
 var $292=(($dir4+8)|0);
 HEAPF32[(($292)>>2)]=$291;
 $k7=10;
 var $293=$k7;
 var $294=(($dir4)|0);
 var $295=HEAPF32[(($294)>>2)];
 var $296=($293)*($295);
 var $297=(($dir4)|0);
 HEAPF32[(($297)>>2)]=$296;
 var $298=$k7;
 var $299=(($dir4+4)|0);
 var $300=HEAPF32[(($299)>>2)];
 var $301=($298)*($300);
 var $302=(($dir4+4)|0);
 HEAPF32[(($302)>>2)]=$301;
 var $303=$k7;
 var $304=(($dir4+8)|0);
 var $305=HEAPF32[(($304)>>2)];
 var $306=($303)*($305);
 var $307=(($dir4+8)|0);
 HEAPF32[(($307)>>2)]=$306;
 var $308=HEAP32[((13400)>>2)];
 var $309=(($308+532)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=(($310)|0);
 var $312=(($311)|0);
 var $313=HEAPF32[(($312)>>2)];
 var $314=(($dir4)|0);
 var $315=HEAPF32[(($314)>>2)];
 var $316=($313)+($315);
 var $317=HEAP32[((13400)>>2)];
 var $318=(($317+532)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($319)|0);
 var $321=(($320)|0);
 HEAPF32[(($321)>>2)]=$316;
 var $322=HEAP32[((13400)>>2)];
 var $323=(($322+532)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=(($324)|0);
 var $326=(($325+4)|0);
 var $327=HEAPF32[(($326)>>2)];
 var $328=(($dir4+4)|0);
 var $329=HEAPF32[(($328)>>2)];
 var $330=($327)+($329);
 var $331=HEAP32[((13400)>>2)];
 var $332=(($331+532)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($333)|0);
 var $335=(($334+4)|0);
 HEAPF32[(($335)>>2)]=$330;
 var $336=HEAP32[((13400)>>2)];
 var $337=(($336+532)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=(($338)|0);
 var $340=(($339+8)|0);
 var $341=HEAPF32[(($340)>>2)];
 var $342=(($dir4+8)|0);
 var $343=HEAPF32[(($342)>>2)];
 var $344=($341)+($343);
 var $345=HEAP32[((13400)>>2)];
 var $346=(($345+532)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=(($347)|0);
 var $349=(($348+8)|0);
 HEAPF32[(($349)>>2)]=$344;
 var $350=HEAP32[((13400)>>2)];
 var $351=(($350+532)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=(($352+12)|0);
 var $354=(($353)|0);
 var $355=HEAPF32[(($354)>>2)];
 var $356=(($dir4)|0);
 var $357=HEAPF32[(($356)>>2)];
 var $358=($355)+($357);
 var $359=HEAP32[((13400)>>2)];
 var $360=(($359+532)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=(($361+12)|0);
 var $363=(($362)|0);
 HEAPF32[(($363)>>2)]=$358;
 var $364=HEAP32[((13400)>>2)];
 var $365=(($364+532)|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=(($366+12)|0);
 var $368=(($367+4)|0);
 var $369=HEAPF32[(($368)>>2)];
 var $370=(($dir4+4)|0);
 var $371=HEAPF32[(($370)>>2)];
 var $372=($369)+($371);
 var $373=HEAP32[((13400)>>2)];
 var $374=(($373+532)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=(($375+12)|0);
 var $377=(($376+4)|0);
 HEAPF32[(($377)>>2)]=$372;
 var $378=HEAP32[((13400)>>2)];
 var $379=(($378+532)|0);
 var $380=HEAP32[(($379)>>2)];
 var $381=(($380+12)|0);
 var $382=(($381+8)|0);
 var $383=HEAPF32[(($382)>>2)];
 var $384=(($dir4+8)|0);
 var $385=HEAPF32[(($384)>>2)];
 var $386=($383)+($385);
 var $387=HEAP32[((13400)>>2)];
 var $388=(($387+532)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=(($389+12)|0);
 var $391=(($390+8)|0);
 HEAPF32[(($391)>>2)]=$386;
 var $392=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($392,0);
 label=48;break;
 case 23: 
 var $394=HEAP32[((13400)>>2)];
 var $395=(($394+532)|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=(($396+24)|0);
 var $398=$dir8;
 var $399=$397;
 assert(12 % 1 === 0);HEAP32[(($398)>>2)]=HEAP32[(($399)>>2)];HEAP32[((($398)+(4))>>2)]=HEAP32[((($399)+(4))>>2)];HEAP32[((($398)+(8))>>2)]=HEAP32[((($399)+(8))>>2)];
 $k9=10;
 var $400=$k9;
 var $401=(($dir8)|0);
 var $402=HEAPF32[(($401)>>2)];
 var $403=($400)*($402);
 var $404=(($dir8)|0);
 HEAPF32[(($404)>>2)]=$403;
 var $405=$k9;
 var $406=(($dir8+4)|0);
 var $407=HEAPF32[(($406)>>2)];
 var $408=($405)*($407);
 var $409=(($dir8+4)|0);
 HEAPF32[(($409)>>2)]=$408;
 var $410=$k9;
 var $411=(($dir8+8)|0);
 var $412=HEAPF32[(($411)>>2)];
 var $413=($410)*($412);
 var $414=(($dir8+8)|0);
 HEAPF32[(($414)>>2)]=$413;
 var $415=HEAP32[((13400)>>2)];
 var $416=(($415+532)|0);
 var $417=HEAP32[(($416)>>2)];
 var $418=(($417)|0);
 var $419=(($418)|0);
 var $420=HEAPF32[(($419)>>2)];
 var $421=(($dir8)|0);
 var $422=HEAPF32[(($421)>>2)];
 var $423=($420)+($422);
 var $424=HEAP32[((13400)>>2)];
 var $425=(($424+532)|0);
 var $426=HEAP32[(($425)>>2)];
 var $427=(($426)|0);
 var $428=(($427)|0);
 HEAPF32[(($428)>>2)]=$423;
 var $429=HEAP32[((13400)>>2)];
 var $430=(($429+532)|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=(($431)|0);
 var $433=(($432+4)|0);
 var $434=HEAPF32[(($433)>>2)];
 var $435=(($dir8+4)|0);
 var $436=HEAPF32[(($435)>>2)];
 var $437=($434)+($436);
 var $438=HEAP32[((13400)>>2)];
 var $439=(($438+532)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(($440)|0);
 var $442=(($441+4)|0);
 HEAPF32[(($442)>>2)]=$437;
 var $443=HEAP32[((13400)>>2)];
 var $444=(($443+532)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=(($445)|0);
 var $447=(($446+8)|0);
 var $448=HEAPF32[(($447)>>2)];
 var $449=(($dir8+8)|0);
 var $450=HEAPF32[(($449)>>2)];
 var $451=($448)+($450);
 var $452=HEAP32[((13400)>>2)];
 var $453=(($452+532)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=(($454)|0);
 var $456=(($455+8)|0);
 HEAPF32[(($456)>>2)]=$451;
 var $457=HEAP32[((13400)>>2)];
 var $458=(($457+532)|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=(($459+12)|0);
 var $461=(($460)|0);
 var $462=HEAPF32[(($461)>>2)];
 var $463=(($dir8)|0);
 var $464=HEAPF32[(($463)>>2)];
 var $465=($462)+($464);
 var $466=HEAP32[((13400)>>2)];
 var $467=(($466+532)|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=(($468+12)|0);
 var $470=(($469)|0);
 HEAPF32[(($470)>>2)]=$465;
 var $471=HEAP32[((13400)>>2)];
 var $472=(($471+532)|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=(($473+12)|0);
 var $475=(($474+4)|0);
 var $476=HEAPF32[(($475)>>2)];
 var $477=(($dir8+4)|0);
 var $478=HEAPF32[(($477)>>2)];
 var $479=($476)+($478);
 var $480=HEAP32[((13400)>>2)];
 var $481=(($480+532)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=(($482+12)|0);
 var $484=(($483+4)|0);
 HEAPF32[(($484)>>2)]=$479;
 var $485=HEAP32[((13400)>>2)];
 var $486=(($485+532)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=(($487+12)|0);
 var $489=(($488+8)|0);
 var $490=HEAPF32[(($489)>>2)];
 var $491=(($dir8+8)|0);
 var $492=HEAPF32[(($491)>>2)];
 var $493=($490)+($492);
 var $494=HEAP32[((13400)>>2)];
 var $495=(($494+532)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=(($496+12)|0);
 var $498=(($497+8)|0);
 HEAPF32[(($498)>>2)]=$493;
 var $499=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($499,0);
 label=48;break;
 case 24: 
 var $501=HEAP32[((13400)>>2)];
 var $502=(($501+532)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=(($503+24)|0);
 var $505=$dir10;
 var $506=$504;
 assert(12 % 1 === 0);HEAP32[(($505)>>2)]=HEAP32[(($506)>>2)];HEAP32[((($505)+(4))>>2)]=HEAP32[((($506)+(4))>>2)];HEAP32[((($505)+(8))>>2)]=HEAP32[((($506)+(8))>>2)];
 $k11=-10;
 var $507=$k11;
 var $508=(($dir10)|0);
 var $509=HEAPF32[(($508)>>2)];
 var $510=($507)*($509);
 var $511=(($dir10)|0);
 HEAPF32[(($511)>>2)]=$510;
 var $512=$k11;
 var $513=(($dir10+4)|0);
 var $514=HEAPF32[(($513)>>2)];
 var $515=($512)*($514);
 var $516=(($dir10+4)|0);
 HEAPF32[(($516)>>2)]=$515;
 var $517=$k11;
 var $518=(($dir10+8)|0);
 var $519=HEAPF32[(($518)>>2)];
 var $520=($517)*($519);
 var $521=(($dir10+8)|0);
 HEAPF32[(($521)>>2)]=$520;
 var $522=HEAP32[((13400)>>2)];
 var $523=(($522+532)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=(($524)|0);
 var $526=(($525)|0);
 var $527=HEAPF32[(($526)>>2)];
 var $528=(($dir10)|0);
 var $529=HEAPF32[(($528)>>2)];
 var $530=($527)+($529);
 var $531=HEAP32[((13400)>>2)];
 var $532=(($531+532)|0);
 var $533=HEAP32[(($532)>>2)];
 var $534=(($533)|0);
 var $535=(($534)|0);
 HEAPF32[(($535)>>2)]=$530;
 var $536=HEAP32[((13400)>>2)];
 var $537=(($536+532)|0);
 var $538=HEAP32[(($537)>>2)];
 var $539=(($538)|0);
 var $540=(($539+4)|0);
 var $541=HEAPF32[(($540)>>2)];
 var $542=(($dir10+4)|0);
 var $543=HEAPF32[(($542)>>2)];
 var $544=($541)+($543);
 var $545=HEAP32[((13400)>>2)];
 var $546=(($545+532)|0);
 var $547=HEAP32[(($546)>>2)];
 var $548=(($547)|0);
 var $549=(($548+4)|0);
 HEAPF32[(($549)>>2)]=$544;
 var $550=HEAP32[((13400)>>2)];
 var $551=(($550+532)|0);
 var $552=HEAP32[(($551)>>2)];
 var $553=(($552)|0);
 var $554=(($553+8)|0);
 var $555=HEAPF32[(($554)>>2)];
 var $556=(($dir10+8)|0);
 var $557=HEAPF32[(($556)>>2)];
 var $558=($555)+($557);
 var $559=HEAP32[((13400)>>2)];
 var $560=(($559+532)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=(($561)|0);
 var $563=(($562+8)|0);
 HEAPF32[(($563)>>2)]=$558;
 var $564=HEAP32[((13400)>>2)];
 var $565=(($564+532)|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=(($566+12)|0);
 var $568=(($567)|0);
 var $569=HEAPF32[(($568)>>2)];
 var $570=(($dir10)|0);
 var $571=HEAPF32[(($570)>>2)];
 var $572=($569)+($571);
 var $573=HEAP32[((13400)>>2)];
 var $574=(($573+532)|0);
 var $575=HEAP32[(($574)>>2)];
 var $576=(($575+12)|0);
 var $577=(($576)|0);
 HEAPF32[(($577)>>2)]=$572;
 var $578=HEAP32[((13400)>>2)];
 var $579=(($578+532)|0);
 var $580=HEAP32[(($579)>>2)];
 var $581=(($580+12)|0);
 var $582=(($581+4)|0);
 var $583=HEAPF32[(($582)>>2)];
 var $584=(($dir10+4)|0);
 var $585=HEAPF32[(($584)>>2)];
 var $586=($583)+($585);
 var $587=HEAP32[((13400)>>2)];
 var $588=(($587+532)|0);
 var $589=HEAP32[(($588)>>2)];
 var $590=(($589+12)|0);
 var $591=(($590+4)|0);
 HEAPF32[(($591)>>2)]=$586;
 var $592=HEAP32[((13400)>>2)];
 var $593=(($592+532)|0);
 var $594=HEAP32[(($593)>>2)];
 var $595=(($594+12)|0);
 var $596=(($595+8)|0);
 var $597=HEAPF32[(($596)>>2)];
 var $598=(($dir10+8)|0);
 var $599=HEAPF32[(($598)>>2)];
 var $600=($597)+($599);
 var $601=HEAP32[((13400)>>2)];
 var $602=(($601+532)|0);
 var $603=HEAP32[(($602)>>2)];
 var $604=(($603+12)|0);
 var $605=(($604+8)|0);
 HEAPF32[(($605)>>2)]=$600;
 var $606=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($606,0);
 label=48;break;
 case 25: 
 var $608=HEAP32[((13400)>>2)];
 var $609=(($608+532)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=(($610)|0);
 var $612=(($611+4)|0);
 var $613=HEAPF32[(($612)>>2)];
 var $614=($613)+(10);
 HEAPF32[(($612)>>2)]=$614;
 var $615=HEAP32[((13400)>>2)];
 var $616=(($615+532)|0);
 var $617=HEAP32[(($616)>>2)];
 var $618=(($617+12)|0);
 var $619=(($618+4)|0);
 var $620=HEAPF32[(($619)>>2)];
 var $621=($620)+(10);
 HEAPF32[(($619)>>2)]=$621;
 var $622=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($622,0);
 label=48;break;
 case 26: 
 var $624=HEAP32[((13400)>>2)];
 var $625=(($624+532)|0);
 var $626=HEAP32[(($625)>>2)];
 var $627=(($626)|0);
 var $628=(($627+4)|0);
 var $629=HEAPF32[(($628)>>2)];
 var $630=($629)-(10);
 HEAPF32[(($628)>>2)]=$630;
 var $631=HEAP32[((13400)>>2)];
 var $632=(($631+532)|0);
 var $633=HEAP32[(($632)>>2)];
 var $634=(($633+12)|0);
 var $635=(($634+4)|0);
 var $636=HEAPF32[(($635)>>2)];
 var $637=($636)-(10);
 HEAPF32[(($635)>>2)]=$637;
 var $638=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($638,0);
 label=48;break;
 case 27: 
 var $640=HEAP32[((13400)>>2)];
 var $641=(($640+544)|0);
 var $642=HEAP32[(($641)>>2)];
 var $643=((($642)+(1))|0);
 var $644=HEAP32[((13400)>>2)];
 var $645=(($644+540)|0);
 var $646=HEAP32[(($645)>>2)];
 var $647=(((($643>>>0))%(($646>>>0)))&-1);
 var $648=HEAP32[((13400)>>2)];
 var $649=(($648+544)|0);
 HEAP32[(($649)>>2)]=$647;
 var $650=HEAP32[((_stderr)>>2)];
 var $651=HEAP32[((13400)>>2)];
 var $652=(($651+544)|0);
 var $653=HEAP32[(($652)>>2)];
 var $654=HEAP32[((13400)>>2)];
 var $655=(($654+544)|0);
 var $656=HEAP32[(($655)>>2)];
 var $657=HEAP32[((13400)>>2)];
 var $658=(($657+536)|0);
 var $659=HEAP32[(($658)>>2)];
 var $660=(($659+((($656)*(44))&-1))|0);
 var $661=(($660+4)|0);
 var $662=(($661)|0);
 var $663=HEAPF32[(($662)>>2)];
 var $664=$663;
 var $665=HEAP32[((13400)>>2)];
 var $666=(($665+544)|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=HEAP32[((13400)>>2)];
 var $669=(($668+536)|0);
 var $670=HEAP32[(($669)>>2)];
 var $671=(($670+((($667)*(44))&-1))|0);
 var $672=(($671+4)|0);
 var $673=(($672+4)|0);
 var $674=HEAPF32[(($673)>>2)];
 var $675=$674;
 var $676=HEAP32[((13400)>>2)];
 var $677=(($676+544)|0);
 var $678=HEAP32[(($677)>>2)];
 var $679=HEAP32[((13400)>>2)];
 var $680=(($679+536)|0);
 var $681=HEAP32[(($680)>>2)];
 var $682=(($681+((($678)*(44))&-1))|0);
 var $683=(($682+4)|0);
 var $684=(($683+8)|0);
 var $685=HEAPF32[(($684)>>2)];
 var $686=$685;
 var $687=_fprintf($650,752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$653,HEAPF64[(((tempVarArgs)+(8))>>3)]=$664,HEAPF64[(((tempVarArgs)+(16))>>3)]=$675,HEAPF64[(((tempVarArgs)+(24))>>3)]=$686,tempVarArgs)); STACKTOP=tempVarArgs;
 var $688=HEAP32[((13400)>>2)];
 __ZN12RenderConfig11ReInitSceneEv($688);
 label=48;break;
 case 28: 
 var $690=HEAP32[((13400)>>2)];
 var $691=(($690+544)|0);
 var $692=HEAP32[(($691)>>2)];
 var $693=HEAP32[((13400)>>2)];
 var $694=(($693+540)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=((($695)-(1))|0);
 var $697=((($692)+($696))|0);
 var $698=HEAP32[((13400)>>2)];
 var $699=(($698+540)|0);
 var $700=HEAP32[(($699)>>2)];
 var $701=(((($697>>>0))%(($700>>>0)))&-1);
 var $702=HEAP32[((13400)>>2)];
 var $703=(($702+544)|0);
 HEAP32[(($703)>>2)]=$701;
 var $704=HEAP32[((_stderr)>>2)];
 var $705=HEAP32[((13400)>>2)];
 var $706=(($705+544)|0);
 var $707=HEAP32[(($706)>>2)];
 var $708=HEAP32[((13400)>>2)];
 var $709=(($708+544)|0);
 var $710=HEAP32[(($709)>>2)];
 var $711=HEAP32[((13400)>>2)];
 var $712=(($711+536)|0);
 var $713=HEAP32[(($712)>>2)];
 var $714=(($713+((($710)*(44))&-1))|0);
 var $715=(($714+4)|0);
 var $716=(($715)|0);
 var $717=HEAPF32[(($716)>>2)];
 var $718=$717;
 var $719=HEAP32[((13400)>>2)];
 var $720=(($719+544)|0);
 var $721=HEAP32[(($720)>>2)];
 var $722=HEAP32[((13400)>>2)];
 var $723=(($722+536)|0);
 var $724=HEAP32[(($723)>>2)];
 var $725=(($724+((($721)*(44))&-1))|0);
 var $726=(($725+4)|0);
 var $727=(($726+4)|0);
 var $728=HEAPF32[(($727)>>2)];
 var $729=$728;
 var $730=HEAP32[((13400)>>2)];
 var $731=(($730+544)|0);
 var $732=HEAP32[(($731)>>2)];
 var $733=HEAP32[((13400)>>2)];
 var $734=(($733+536)|0);
 var $735=HEAP32[(($734)>>2)];
 var $736=(($735+((($732)*(44))&-1))|0);
 var $737=(($736+4)|0);
 var $738=(($737+8)|0);
 var $739=HEAPF32[(($738)>>2)];
 var $740=$739;
 var $741=_fprintf($704,752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$707,HEAPF64[(((tempVarArgs)+(8))>>3)]=$718,HEAPF64[(((tempVarArgs)+(16))>>3)]=$729,HEAPF64[(((tempVarArgs)+(24))>>3)]=$740,tempVarArgs)); STACKTOP=tempVarArgs;
 var $742=HEAP32[((13400)>>2)];
 __ZN12RenderConfig11ReInitSceneEv($742);
 label=48;break;
 case 29: 
 var $744=HEAP32[((13400)>>2)];
 var $745=(($744+544)|0);
 var $746=HEAP32[(($745)>>2)];
 var $747=HEAP32[((13400)>>2)];
 var $748=(($747+536)|0);
 var $749=HEAP32[(($748)>>2)];
 var $750=(($749+((($746)*(44))&-1))|0);
 var $751=(($750+4)|0);
 var $752=(($751)|0);
 var $753=HEAPF32[(($752)>>2)];
 var $754=($753)-(5);
 HEAPF32[(($752)>>2)]=$754;
 var $755=HEAP32[((13400)>>2)];
 __ZN12RenderConfig11ReInitSceneEv($755);
 label=48;break;
 case 30: 
 var $757=HEAP32[((13400)>>2)];
 var $758=(($757+544)|0);
 var $759=HEAP32[(($758)>>2)];
 var $760=HEAP32[((13400)>>2)];
 var $761=(($760+536)|0);
 var $762=HEAP32[(($761)>>2)];
 var $763=(($762+((($759)*(44))&-1))|0);
 var $764=(($763+4)|0);
 var $765=(($764)|0);
 var $766=HEAPF32[(($765)>>2)];
 var $767=($766)+(5);
 HEAPF32[(($765)>>2)]=$767;
 var $768=HEAP32[((13400)>>2)];
 __ZN12RenderConfig11ReInitSceneEv($768);
 label=48;break;
 case 31: 
 var $770=HEAP32[((13400)>>2)];
 var $771=(($770+544)|0);
 var $772=HEAP32[(($771)>>2)];
 var $773=HEAP32[((13400)>>2)];
 var $774=(($773+536)|0);
 var $775=HEAP32[(($774)>>2)];
 var $776=(($775+((($772)*(44))&-1))|0);
 var $777=(($776+4)|0);
 var $778=(($777+8)|0);
 var $779=HEAPF32[(($778)>>2)];
 var $780=($779)-(5);
 HEAPF32[(($778)>>2)]=$780;
 var $781=HEAP32[((13400)>>2)];
 __ZN12RenderConfig11ReInitSceneEv($781);
 label=48;break;
 case 32: 
 var $783=HEAP32[((13400)>>2)];
 var $784=(($783+544)|0);
 var $785=HEAP32[(($784)>>2)];
 var $786=HEAP32[((13400)>>2)];
 var $787=(($786+536)|0);
 var $788=HEAP32[(($787)>>2)];
 var $789=(($788+((($785)*(44))&-1))|0);
 var $790=(($789+4)|0);
 var $791=(($790+8)|0);
 var $792=HEAPF32[(($791)>>2)];
 var $793=($792)+(5);
 HEAPF32[(($791)>>2)]=$793;
 var $794=HEAP32[((13400)>>2)];
 __ZN12RenderConfig11ReInitSceneEv($794);
 label=48;break;
 case 33: 
 var $796=HEAP32[((13400)>>2)];
 var $797=(($796+544)|0);
 var $798=HEAP32[(($797)>>2)];
 var $799=HEAP32[((13400)>>2)];
 var $800=(($799+536)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($801+((($798)*(44))&-1))|0);
 var $803=(($802+4)|0);
 var $804=(($803+4)|0);
 var $805=HEAPF32[(($804)>>2)];
 var $806=($805)+(5);
 HEAPF32[(($804)>>2)]=$806;
 var $807=HEAP32[((13400)>>2)];
 __ZN12RenderConfig11ReInitSceneEv($807);
 label=48;break;
 case 34: 
 var $809=HEAP32[((13400)>>2)];
 var $810=(($809+544)|0);
 var $811=HEAP32[(($810)>>2)];
 var $812=HEAP32[((13400)>>2)];
 var $813=(($812+536)|0);
 var $814=HEAP32[(($813)>>2)];
 var $815=(($814+((($811)*(44))&-1))|0);
 var $816=(($815+4)|0);
 var $817=(($816+4)|0);
 var $818=HEAPF32[(($817)>>2)];
 var $819=($818)-(5);
 HEAPF32[(($817)>>2)]=$819;
 var $820=HEAP32[((13400)>>2)];
 __ZN12RenderConfig11ReInitSceneEv($820);
 label=48;break;
 case 35: 
 var $822=HEAP8[(17424)];
 var $823=(($822)&1);
 var $824=$823^1;
 var $825=($824&1);
 HEAP8[(17424)]=$825;
 label=48;break;
 case 36: 
 var $827=HEAP8[(17472)];
 var $828=(($827)&1);
 var $829=$828^1;
 var $830=($829&1);
 HEAP8[(17472)]=$830;
 label=48;break;
 case 37: 
 var $832=HEAP32[((13400)>>2)];
 var $833=(($832)|0);
 var $834=HEAP32[(($833)>>2)];
 var $835=HEAP32[((13400)>>2)];
 var $836=__ZNK12RenderConfig15GetRenderDeviceEv($835);
 var $837=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($836);
 var $838=((($834)+($837))|0);
 var $839=((($838)-(1))|0);
 var $840=HEAP32[((13400)>>2)];
 var $841=__ZNK12RenderConfig15GetRenderDeviceEv($840);
 var $842=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($841);
 var $843=(((($839>>>0))%(($842>>>0)))&-1);
 var $844=HEAP32[((13400)>>2)];
 var $845=(($844)|0);
 HEAP32[(($845)>>2)]=$843;
 label=48;break;
 case 38: 
 var $847=HEAP32[((13400)>>2)];
 var $848=(($847)|0);
 var $849=HEAP32[(($848)>>2)];
 var $850=((($849)+(1))|0);
 var $851=HEAP32[((13400)>>2)];
 var $852=__ZNK12RenderConfig15GetRenderDeviceEv($851);
 var $853=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($852);
 var $854=(((($850>>>0))%(($853>>>0)))&-1);
 var $855=HEAP32[((13400)>>2)];
 var $856=(($855)|0);
 HEAP32[(($856)>>2)]=$854;
 label=48;break;
 case 39: 
 var $858=HEAP32[((13400)>>2)];
 var $859=__ZNK12RenderConfig11IsProfilingEv($858);
 if($859){label=40;break;}else{label=41;break;}
 case 40: 
 var $861=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,464);
 $3=$861;
 $4=8;
 var $862=$3;
 var $863=$4;
 var $864=FUNCTION_TABLE[$863]($862);
 label=42;break;
 case 41: 
 var $866=HEAP32[((13400)>>2)];
 var $867=HEAP32[((13400)>>2)];
 var $868=(($867)|0);
 var $869=HEAP32[(($868)>>2)];
 __ZN12RenderConfig12DecPerfIndexEj($866,$869);
 label=42;break;
 case 42: 
 label=48;break;
 case 43: 
 var $872=HEAP32[((13400)>>2)];
 var $873=__ZNK12RenderConfig11IsProfilingEv($872);
 if($873){label=44;break;}else{label=45;break;}
 case 44: 
 var $875=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,464);
 $1=$875;
 $2=8;
 var $876=$1;
 var $877=$2;
 var $878=FUNCTION_TABLE[$877]($876);
 label=46;break;
 case 45: 
 var $880=HEAP32[((13400)>>2)];
 var $881=HEAP32[((13400)>>2)];
 var $882=(($881)|0);
 var $883=HEAP32[(($882)>>2)];
 __ZN12RenderConfig12IncPerfIndexEj($880,$883);
 label=46;break;
 case 46: 
 label=48;break;
 case 47: 
 label=48;break;
 case 48: 
 STACKTOP=sp;return;
 case 49: 
 var $888=$12;
 var $889=$13;
 var $890$0=$888;
 var $890$1=0;
 var $891$0=$890$0;
 var $891$1=$889;
 ___resumeException($891$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderConfig24RestartWorkloadProcedureEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 $1=$this;
 var $2=$1;
 var $3=(($2+548)|0);
 var $4=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($3);
 var $5=($4>>>0)>1;
 if($5){label=2;break;}else{label=7;break;}
 case 2: 
 $i=0;
 label=3;break;
 case 3: 
 var $8=$i;
 var $9=(($2+548)|0);
 var $10=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($9);
 var $11=($8>>>0)<($10>>>0);
 if($11){label=4;break;}else{label=6;break;}
 case 4: 
 var $13=(($2+548)|0);
 var $14=$i;
 var $15=__ZN2cl6vectorIP12RenderDeviceLj10EEixEi($13,$14);
 var $16=HEAP32[(($15)>>2)];
 __ZN12RenderDevice16ResetPerformanceEv($16);
 label=5;break;
 case 5: 
 var $18=$i;
 var $19=((($18)+(1))|0);
 $i=$19;
 label=3;break;
 case 6: 
 __ZN12RenderConfig20UpdateDeviceWorkloadEb($2,1);
 var $21=__Z13WallClockTimev();
 var $22=(($2+608)|0);
 HEAPF64[(($22)>>3)]=$21;
 var $23=(($2+616)|0);
 HEAP8[($23)]=1;
 label=7;break;
 case 7: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK12RenderConfig11IsProfilingEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+616)|0);
 var $4=HEAP8[($3)];
 var $5=(($4)&1);
 return $5;
}
function __ZN12RenderConfig12DecPerfIndexEj($this,$deviceIndex){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 $3=$this;
 $4=$deviceIndex;
 var $5=$3;
 var $6=(($5+596)|0);
 var $7=$4;
 $1=$6;
 $2=$7;
 var $8=$1;
 var $9=$2;
 var $10=$8;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+($9<<3))|0);
 var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($13)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($13)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $15=($14)*((0.95));
 (HEAPF64[(tempDoublePtr)>>3]=$15,HEAP32[(($13)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($13)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 __ZN12RenderConfig20UpdateDeviceWorkloadEb($5,0);
 return;
}
function __ZN12RenderConfig12IncPerfIndexEj($this,$deviceIndex){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 $3=$this;
 $4=$deviceIndex;
 var $5=$3;
 var $6=(($5+596)|0);
 var $7=$4;
 $1=$6;
 $2=$7;
 var $8=$1;
 var $9=$2;
 var $10=$8;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+($9<<3))|0);
 var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($13)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($13)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $15=($14)*((1.05));
 (HEAPF64[(tempDoublePtr)>>3]=$15,HEAP32[(($13)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($13)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 __ZN12RenderConfig20UpdateDeviceWorkloadEb($5,0);
 return;
}
function __Z11specialFunciii($key,$x,$y){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $t=sp;
 var $t1=(sp)+(16);
 var $t2=(sp)+(32);
 var $t3=(sp)+(48);
 $1=$key;
 $2=$x;
 $3=$y;
 var $4=$1;
 switch(($4|0)){case 101:{ label=2;break;}case 103:{ label=3;break;}case 100:{ label=4;break;}case 102:{ label=5;break;}case 104:{ label=6;break;}case 105:{ label=7;break;}default:{label=8;break;}}break;
 case 2: 
 var $6=HEAP32[((13400)>>2)];
 var $7=(($6+532)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+12)|0);
 var $10=$t;
 var $11=$9;
 assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
 var $12=(($t)|0);
 var $13=HEAPF32[(($12)>>2)];
 var $14=HEAP32[((13400)>>2)];
 var $15=(($14+532)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16)|0);
 var $18=(($17)|0);
 var $19=HEAPF32[(($18)>>2)];
 var $20=($13)-($19);
 var $21=(($t)|0);
 HEAPF32[(($21)>>2)]=$20;
 var $22=(($t+4)|0);
 var $23=HEAPF32[(($22)>>2)];
 var $24=HEAP32[((13400)>>2)];
 var $25=(($24+532)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26)|0);
 var $28=(($27+4)|0);
 var $29=HEAPF32[(($28)>>2)];
 var $30=($23)-($29);
 var $31=(($t+4)|0);
 HEAPF32[(($31)>>2)]=$30;
 var $32=(($t+8)|0);
 var $33=HEAPF32[(($32)>>2)];
 var $34=HEAP32[((13400)>>2)];
 var $35=(($34+532)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36)|0);
 var $38=(($37+8)|0);
 var $39=HEAPF32[(($38)>>2)];
 var $40=($33)-($39);
 var $41=(($t+8)|0);
 HEAPF32[(($41)>>2)]=$40;
 var $42=(($t+4)|0);
 var $43=HEAPF32[(($42)>>2)];
 var $44=$43;
 var $45=Math_cos(-0.03490658503988659);
 var $46=($44)*($45);
 var $47=(($t+8)|0);
 var $48=HEAPF32[(($47)>>2)];
 var $49=$48;
 var $50=Math_sin(-0.03490658503988659);
 var $51=($49)*($50);
 var $52=($46)+($51);
 var $53=$52;
 var $54=(($t+4)|0);
 HEAPF32[(($54)>>2)]=$53;
 var $55=(($t+4)|0);
 var $56=HEAPF32[(($55)>>2)];
 var $57=((-.0))-($56);
 var $58=$57;
 var $59=Math_sin(-0.03490658503988659);
 var $60=($58)*($59);
 var $61=(($t+8)|0);
 var $62=HEAPF32[(($61)>>2)];
 var $63=$62;
 var $64=Math_cos(-0.03490658503988659);
 var $65=($63)*($64);
 var $66=($60)+($65);
 var $67=$66;
 var $68=(($t+8)|0);
 HEAPF32[(($68)>>2)]=$67;
 var $69=(($t)|0);
 var $70=HEAPF32[(($69)>>2)];
 var $71=HEAP32[((13400)>>2)];
 var $72=(($71+532)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73)|0);
 var $75=(($74)|0);
 var $76=HEAPF32[(($75)>>2)];
 var $77=($70)+($76);
 var $78=(($t)|0);
 HEAPF32[(($78)>>2)]=$77;
 var $79=(($t+4)|0);
 var $80=HEAPF32[(($79)>>2)];
 var $81=HEAP32[((13400)>>2)];
 var $82=(($81+532)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83)|0);
 var $85=(($84+4)|0);
 var $86=HEAPF32[(($85)>>2)];
 var $87=($80)+($86);
 var $88=(($t+4)|0);
 HEAPF32[(($88)>>2)]=$87;
 var $89=(($t+8)|0);
 var $90=HEAPF32[(($89)>>2)];
 var $91=HEAP32[((13400)>>2)];
 var $92=(($91+532)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93)|0);
 var $95=(($94+8)|0);
 var $96=HEAPF32[(($95)>>2)];
 var $97=($90)+($96);
 var $98=(($t+8)|0);
 HEAPF32[(($98)>>2)]=$97;
 var $99=HEAP32[((13400)>>2)];
 var $100=(($99+532)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+12)|0);
 var $103=$102;
 var $104=$t;
 assert(12 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];HEAP32[((($103)+(8))>>2)]=HEAP32[((($104)+(8))>>2)];
 var $105=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($105,0);
 label=9;break;
 case 3: 
 var $107=HEAP32[((13400)>>2)];
 var $108=(($107+532)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+12)|0);
 var $111=$t1;
 var $112=$110;
 assert(12 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($112)+(4))>>2)];HEAP32[((($111)+(8))>>2)]=HEAP32[((($112)+(8))>>2)];
 var $113=(($t1)|0);
 var $114=HEAPF32[(($113)>>2)];
 var $115=HEAP32[((13400)>>2)];
 var $116=(($115+532)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117)|0);
 var $119=(($118)|0);
 var $120=HEAPF32[(($119)>>2)];
 var $121=($114)-($120);
 var $122=(($t1)|0);
 HEAPF32[(($122)>>2)]=$121;
 var $123=(($t1+4)|0);
 var $124=HEAPF32[(($123)>>2)];
 var $125=HEAP32[((13400)>>2)];
 var $126=(($125+532)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127)|0);
 var $129=(($128+4)|0);
 var $130=HEAPF32[(($129)>>2)];
 var $131=($124)-($130);
 var $132=(($t1+4)|0);
 HEAPF32[(($132)>>2)]=$131;
 var $133=(($t1+8)|0);
 var $134=HEAPF32[(($133)>>2)];
 var $135=HEAP32[((13400)>>2)];
 var $136=(($135+532)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137)|0);
 var $139=(($138+8)|0);
 var $140=HEAPF32[(($139)>>2)];
 var $141=($134)-($140);
 var $142=(($t1+8)|0);
 HEAPF32[(($142)>>2)]=$141;
 var $143=(($t1+4)|0);
 var $144=HEAPF32[(($143)>>2)];
 var $145=$144;
 var $146=Math_cos(0.03490658503988659);
 var $147=($145)*($146);
 var $148=(($t1+8)|0);
 var $149=HEAPF32[(($148)>>2)];
 var $150=$149;
 var $151=Math_sin(0.03490658503988659);
 var $152=($150)*($151);
 var $153=($147)+($152);
 var $154=$153;
 var $155=(($t1+4)|0);
 HEAPF32[(($155)>>2)]=$154;
 var $156=(($t1+4)|0);
 var $157=HEAPF32[(($156)>>2)];
 var $158=((-.0))-($157);
 var $159=$158;
 var $160=Math_sin(0.03490658503988659);
 var $161=($159)*($160);
 var $162=(($t1+8)|0);
 var $163=HEAPF32[(($162)>>2)];
 var $164=$163;
 var $165=Math_cos(0.03490658503988659);
 var $166=($164)*($165);
 var $167=($161)+($166);
 var $168=$167;
 var $169=(($t1+8)|0);
 HEAPF32[(($169)>>2)]=$168;
 var $170=(($t1)|0);
 var $171=HEAPF32[(($170)>>2)];
 var $172=HEAP32[((13400)>>2)];
 var $173=(($172+532)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174)|0);
 var $176=(($175)|0);
 var $177=HEAPF32[(($176)>>2)];
 var $178=($171)+($177);
 var $179=(($t1)|0);
 HEAPF32[(($179)>>2)]=$178;
 var $180=(($t1+4)|0);
 var $181=HEAPF32[(($180)>>2)];
 var $182=HEAP32[((13400)>>2)];
 var $183=(($182+532)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184)|0);
 var $186=(($185+4)|0);
 var $187=HEAPF32[(($186)>>2)];
 var $188=($181)+($187);
 var $189=(($t1+4)|0);
 HEAPF32[(($189)>>2)]=$188;
 var $190=(($t1+8)|0);
 var $191=HEAPF32[(($190)>>2)];
 var $192=HEAP32[((13400)>>2)];
 var $193=(($192+532)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(($194)|0);
 var $196=(($195+8)|0);
 var $197=HEAPF32[(($196)>>2)];
 var $198=($191)+($197);
 var $199=(($t1+8)|0);
 HEAPF32[(($199)>>2)]=$198;
 var $200=HEAP32[((13400)>>2)];
 var $201=(($200+532)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+12)|0);
 var $204=$203;
 var $205=$t1;
 assert(12 % 1 === 0);HEAP32[(($204)>>2)]=HEAP32[(($205)>>2)];HEAP32[((($204)+(4))>>2)]=HEAP32[((($205)+(4))>>2)];HEAP32[((($204)+(8))>>2)]=HEAP32[((($205)+(8))>>2)];
 var $206=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($206,0);
 label=9;break;
 case 4: 
 var $208=HEAP32[((13400)>>2)];
 var $209=(($208+532)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+12)|0);
 var $212=$t2;
 var $213=$211;
 assert(12 % 1 === 0);HEAP32[(($212)>>2)]=HEAP32[(($213)>>2)];HEAP32[((($212)+(4))>>2)]=HEAP32[((($213)+(4))>>2)];HEAP32[((($212)+(8))>>2)]=HEAP32[((($213)+(8))>>2)];
 var $214=(($t2)|0);
 var $215=HEAPF32[(($214)>>2)];
 var $216=HEAP32[((13400)>>2)];
 var $217=(($216+532)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218)|0);
 var $220=(($219)|0);
 var $221=HEAPF32[(($220)>>2)];
 var $222=($215)-($221);
 var $223=(($t2)|0);
 HEAPF32[(($223)>>2)]=$222;
 var $224=(($t2+4)|0);
 var $225=HEAPF32[(($224)>>2)];
 var $226=HEAP32[((13400)>>2)];
 var $227=(($226+532)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228)|0);
 var $230=(($229+4)|0);
 var $231=HEAPF32[(($230)>>2)];
 var $232=($225)-($231);
 var $233=(($t2+4)|0);
 HEAPF32[(($233)>>2)]=$232;
 var $234=(($t2+8)|0);
 var $235=HEAPF32[(($234)>>2)];
 var $236=HEAP32[((13400)>>2)];
 var $237=(($236+532)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238)|0);
 var $240=(($239+8)|0);
 var $241=HEAPF32[(($240)>>2)];
 var $242=($235)-($241);
 var $243=(($t2+8)|0);
 HEAPF32[(($243)>>2)]=$242;
 var $244=(($t2)|0);
 var $245=HEAPF32[(($244)>>2)];
 var $246=$245;
 var $247=Math_cos(-0.03490658503988659);
 var $248=($246)*($247);
 var $249=(($t2+8)|0);
 var $250=HEAPF32[(($249)>>2)];
 var $251=$250;
 var $252=Math_sin(-0.03490658503988659);
 var $253=($251)*($252);
 var $254=($248)-($253);
 var $255=$254;
 var $256=(($t2)|0);
 HEAPF32[(($256)>>2)]=$255;
 var $257=(($t2)|0);
 var $258=HEAPF32[(($257)>>2)];
 var $259=$258;
 var $260=Math_sin(-0.03490658503988659);
 var $261=($259)*($260);
 var $262=(($t2+8)|0);
 var $263=HEAPF32[(($262)>>2)];
 var $264=$263;
 var $265=Math_cos(-0.03490658503988659);
 var $266=($264)*($265);
 var $267=($261)+($266);
 var $268=$267;
 var $269=(($t2+8)|0);
 HEAPF32[(($269)>>2)]=$268;
 var $270=(($t2)|0);
 var $271=HEAPF32[(($270)>>2)];
 var $272=HEAP32[((13400)>>2)];
 var $273=(($272+532)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=(($274)|0);
 var $276=(($275)|0);
 var $277=HEAPF32[(($276)>>2)];
 var $278=($271)+($277);
 var $279=(($t2)|0);
 HEAPF32[(($279)>>2)]=$278;
 var $280=(($t2+4)|0);
 var $281=HEAPF32[(($280)>>2)];
 var $282=HEAP32[((13400)>>2)];
 var $283=(($282+532)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=(($284)|0);
 var $286=(($285+4)|0);
 var $287=HEAPF32[(($286)>>2)];
 var $288=($281)+($287);
 var $289=(($t2+4)|0);
 HEAPF32[(($289)>>2)]=$288;
 var $290=(($t2+8)|0);
 var $291=HEAPF32[(($290)>>2)];
 var $292=HEAP32[((13400)>>2)];
 var $293=(($292+532)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=(($294)|0);
 var $296=(($295+8)|0);
 var $297=HEAPF32[(($296)>>2)];
 var $298=($291)+($297);
 var $299=(($t2+8)|0);
 HEAPF32[(($299)>>2)]=$298;
 var $300=HEAP32[((13400)>>2)];
 var $301=(($300+532)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302+12)|0);
 var $304=$303;
 var $305=$t2;
 assert(12 % 1 === 0);HEAP32[(($304)>>2)]=HEAP32[(($305)>>2)];HEAP32[((($304)+(4))>>2)]=HEAP32[((($305)+(4))>>2)];HEAP32[((($304)+(8))>>2)]=HEAP32[((($305)+(8))>>2)];
 var $306=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($306,0);
 label=9;break;
 case 5: 
 var $308=HEAP32[((13400)>>2)];
 var $309=(($308+532)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=(($310+12)|0);
 var $312=$t3;
 var $313=$311;
 assert(12 % 1 === 0);HEAP32[(($312)>>2)]=HEAP32[(($313)>>2)];HEAP32[((($312)+(4))>>2)]=HEAP32[((($313)+(4))>>2)];HEAP32[((($312)+(8))>>2)]=HEAP32[((($313)+(8))>>2)];
 var $314=(($t3)|0);
 var $315=HEAPF32[(($314)>>2)];
 var $316=HEAP32[((13400)>>2)];
 var $317=(($316+532)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=(($318)|0);
 var $320=(($319)|0);
 var $321=HEAPF32[(($320)>>2)];
 var $322=($315)-($321);
 var $323=(($t3)|0);
 HEAPF32[(($323)>>2)]=$322;
 var $324=(($t3+4)|0);
 var $325=HEAPF32[(($324)>>2)];
 var $326=HEAP32[((13400)>>2)];
 var $327=(($326+532)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(($328)|0);
 var $330=(($329+4)|0);
 var $331=HEAPF32[(($330)>>2)];
 var $332=($325)-($331);
 var $333=(($t3+4)|0);
 HEAPF32[(($333)>>2)]=$332;
 var $334=(($t3+8)|0);
 var $335=HEAPF32[(($334)>>2)];
 var $336=HEAP32[((13400)>>2)];
 var $337=(($336+532)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=(($338)|0);
 var $340=(($339+8)|0);
 var $341=HEAPF32[(($340)>>2)];
 var $342=($335)-($341);
 var $343=(($t3+8)|0);
 HEAPF32[(($343)>>2)]=$342;
 var $344=(($t3)|0);
 var $345=HEAPF32[(($344)>>2)];
 var $346=$345;
 var $347=Math_cos(0.03490658503988659);
 var $348=($346)*($347);
 var $349=(($t3+8)|0);
 var $350=HEAPF32[(($349)>>2)];
 var $351=$350;
 var $352=Math_sin(0.03490658503988659);
 var $353=($351)*($352);
 var $354=($348)-($353);
 var $355=$354;
 var $356=(($t3)|0);
 HEAPF32[(($356)>>2)]=$355;
 var $357=(($t3)|0);
 var $358=HEAPF32[(($357)>>2)];
 var $359=$358;
 var $360=Math_sin(0.03490658503988659);
 var $361=($359)*($360);
 var $362=(($t3+8)|0);
 var $363=HEAPF32[(($362)>>2)];
 var $364=$363;
 var $365=Math_cos(0.03490658503988659);
 var $366=($364)*($365);
 var $367=($361)+($366);
 var $368=$367;
 var $369=(($t3+8)|0);
 HEAPF32[(($369)>>2)]=$368;
 var $370=(($t3)|0);
 var $371=HEAPF32[(($370)>>2)];
 var $372=HEAP32[((13400)>>2)];
 var $373=(($372+532)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=(($374)|0);
 var $376=(($375)|0);
 var $377=HEAPF32[(($376)>>2)];
 var $378=($371)+($377);
 var $379=(($t3)|0);
 HEAPF32[(($379)>>2)]=$378;
 var $380=(($t3+4)|0);
 var $381=HEAPF32[(($380)>>2)];
 var $382=HEAP32[((13400)>>2)];
 var $383=(($382+532)|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=(($384)|0);
 var $386=(($385+4)|0);
 var $387=HEAPF32[(($386)>>2)];
 var $388=($381)+($387);
 var $389=(($t3+4)|0);
 HEAPF32[(($389)>>2)]=$388;
 var $390=(($t3+8)|0);
 var $391=HEAPF32[(($390)>>2)];
 var $392=HEAP32[((13400)>>2)];
 var $393=(($392+532)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=(($394)|0);
 var $396=(($395+8)|0);
 var $397=HEAPF32[(($396)>>2)];
 var $398=($391)+($397);
 var $399=(($t3+8)|0);
 HEAPF32[(($399)>>2)]=$398;
 var $400=HEAP32[((13400)>>2)];
 var $401=(($400+532)|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=(($402+12)|0);
 var $404=$403;
 var $405=$t3;
 assert(12 % 1 === 0);HEAP32[(($404)>>2)]=HEAP32[(($405)>>2)];HEAP32[((($404)+(4))>>2)]=HEAP32[((($405)+(4))>>2)];HEAP32[((($404)+(8))>>2)]=HEAP32[((($405)+(8))>>2)];
 var $406=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($406,0);
 label=9;break;
 case 6: 
 var $408=HEAP32[((13400)>>2)];
 var $409=(($408+532)|0);
 var $410=HEAP32[(($409)>>2)];
 var $411=(($410+12)|0);
 var $412=(($411+4)|0);
 var $413=HEAPF32[(($412)>>2)];
 var $414=($413)+(10);
 HEAPF32[(($412)>>2)]=$414;
 var $415=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($415,0);
 label=9;break;
 case 7: 
 var $417=HEAP32[((13400)>>2)];
 var $418=(($417+532)|0);
 var $419=HEAP32[(($418)>>2)];
 var $420=(($419+12)|0);
 var $421=(($420+4)|0);
 var $422=HEAPF32[(($421)>>2)];
 var $423=($422)-(10);
 HEAPF32[(($421)>>2)]=$423;
 var $424=HEAP32[((13400)>>2)];
 __ZN12RenderConfig6ReInitEi($424,0);
 label=9;break;
 case 8: 
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z8idleFuncv(){
 var label=0;
 __ZL15UpdateRenderingv();
 _glutPostRedisplay();
 return;
}
function __ZL15UpdateRenderingv(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $startSampleCount;
 var $startTime;
 var $elapsedTime;
 var $samples;
 var $sampleSec;
 var $1=HEAP32[((13400)>>2)];
 var $2=(($1+524)|0);
 var $3=HEAP32[(($2)>>2)];
 $startSampleCount=$3;
 var $4=$startSampleCount;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 HEAPF64[((13320)>>3)]=0;
 label=3;break;
 case 3: 
 var $8=__Z13WallClockTimev();
 $startTime=$8;
 var $9=HEAP32[((13400)>>2)];
 __ZN12RenderConfig7ExecuteEv($9);
 var $10=__Z13WallClockTimev();
 var $11=$startTime;
 var $12=($10)-($11);
 $elapsedTime=$12;
 var $13=$elapsedTime;
 var $14=HEAPF64[((13320)>>3)];
 var $15=($14)+($13);
 HEAPF64[((13320)>>3)]=$15;
 var $16=HEAP32[((13400)>>2)];
 var $17=(($16+524)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$startSampleCount;
 var $20=((($18)-($19))|0);
 $samples=$20;
 var $21=$samples;
 var $22=HEAP32[((13400)>>2)];
 var $23=(($22+520)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(Math_imul($21,$24)|0);
 var $26=HEAP32[((13400)>>2)];
 var $27=(($26+516)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(Math_imul($25,$28)|0);
 var $30=($29>>>0);
 var $31=$elapsedTime;
 var $32=($30)/($31);
 $sampleSec=$32;
 var $33=HEAP32[((13400)>>2)];
 var $34=(($33+4)|0);
 var $35=(($34)|0);
 var $36=$elapsedTime;
 var $37=HEAP32[((13400)>>2)];
 var $38=(($37+524)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=HEAP32[((13400)>>2)];
 var $41=(($40+524)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=HEAP32[((13400)>>2)];
 var $44=(($43+520)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(Math_imul($42,$45)|0);
 var $47=HEAP32[((13400)>>2)];
 var $48=(($47+516)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(Math_imul($46,$49)|0);
 var $51=($50>>>0);
 var $52=HEAPF64[((13320)>>3)];
 var $53=($51)/($52);
 var $54=($53)/(1000);
 var $55=$sampleSec;
 var $56=($55)/(1000);
 var $57=_sprintf($35,3976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$36,HEAP32[(((tempVarArgs)+(8))>>2)]=$39,HEAPF64[(((tempVarArgs)+(16))>>3)]=$54,HEAPF64[(((tempVarArgs)+(24))>>3)]=$56,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z8InitGlutiPPcjj($argc,$argv,$width,$height){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=sp;
 var $2;
 var $3;
 var $4;
 HEAP32[(($1)>>2)]=$argc;
 $2=$argv;
 $3=$width;
 $4=$height;
 var $5=$3;
 var $6=$4;
 _glutInitWindowSize($5,$6);
 _glutInitWindowPosition(0,0);
 _glutInitDisplayMode(2);
 var $7=$2;
 _glutInit($1,$7);
 var $8=_glutCreateWindow(144);
 STACKTOP=sp;return;
}
function __Z7RunGlutv(){
 var label=0;
 _glutReshapeFunc(66);
 _glutKeyboardFunc(766);
 _glutSpecialFunc(734);
 _glutDisplayFunc(502);
 _glutIdleFunc(180);
 var $1=HEAP32[((13400)>>2)];
 var $2=(($1+516)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP32[((13400)>>2)];
 var $5=(($4+520)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=__ZL13SetupGraphicsjj($3,$6);
 _glMatrixMode(5889);
 var $8=HEAP32[((13400)>>2)];
 var $9=(($8+516)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[((13400)>>2)];
 var $12=(($11+520)|0);
 var $13=HEAP32[(($12)>>2)];
 _glViewport(0,0,$10,$13);
 _glLoadIdentity();
 var $14=HEAP32[((13400)>>2)];
 var $15=(($14+516)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16>>>0);
 var $18=($17)-(1);
 var $19=$18;
 var $20=HEAP32[((13400)>>2)];
 var $21=(($20+520)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22>>>0);
 var $24=($23)-(1);
 var $25=$24;
 _glOrtho(0,$19,0,$25,-1,1);
 _glutMainLoop();
 return;
}
function __ZL13SetupGraphicsjj($width,$height){
 var label=0;
 var $1;
 var $2;
 $1=$width;
 $2=$height;
 var $3=$1;
 var $4=$2;
 __ZL13CreateTexturejj($3,$4);
 _glClearColor(0,0,0,0);
 _glDisable(2929);
 _glActiveTexture(33984);
 var $5=$1;
 var $6=$2;
 _glViewport(0,0,$5,$6);
 _glMatrixMode(5888);
 _glLoadIdentity();
 _glMatrixMode(5889);
 _glLoadIdentity();
 HEAPF32[((17456)>>2)]=0;
 HEAPF32[((17460)>>2)]=0;
 var $7=$1;
 var $8=($7>>>0);
 HEAPF32[((17448)>>2)]=$8;
 HEAPF32[((17452)>>2)]=0;
 var $9=$1;
 var $10=($9>>>0);
 HEAPF32[((17440)>>2)]=$10;
 var $11=$2;
 var $12=($11>>>0);
 HEAPF32[((17444)>>2)]=$12;
 HEAPF32[((17432)>>2)]=0;
 var $13=$2;
 var $14=($13>>>0);
 HEAPF32[((17436)>>2)]=$14;
 _glEnableClientState(32884);
 _glEnableClientState(32888);
 _glVertexPointer(2,5126,0,13280);
 _glClientActiveTexture(33984);
 _glTexCoordPointer(2,5126,0,17432);
 return 0;
}
function __ZN2cl6vectorIP12RenderDeviceLj10EEC2ERKS3_($this,$vec){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$vec;
 var $3=$1;
 var $4=(($3+40)|0);
 var $5=$2;
 var $6=(($5+40)|0);
 var $7=HEAP32[(($6)>>2)];
 HEAP32[(($4)>>2)]=$7;
 var $8=(($3+44)|0);
 var $9=$2;
 var $10=(($9+44)|0);
 var $11=HEAP8[($10)];
 var $12=(($11)&1);
 var $13=($12&1);
 HEAP8[($8)]=$13;
 var $14=(($3+44)|0);
 var $15=HEAP8[($14)];
 var $16=(($15)&1);
 if($16){label=3;break;}else{label=2;break;}
 case 2: 
 var $18=(($3)|0);
 var $19=(($18)|0);
 var $20=$19;
 var $21=$2;
 var $22=(($21)|0);
 var $23=(($22)|0);
 var $24=$23;
 var $25=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($3);
 var $26=($25<<2);
 assert($26 % 1 === 0);(_memcpy($20, $24, $26)|0);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL13CreateTexturejj($width,$height){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$width;
 $2=$height;
 var $3=$1;
 var $4=$2;
 var $5=_printf(4232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$3,HEAP32[(((tempVarArgs)+(8))>>2)]=$4,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=HEAP32[((13312)>>2)];
 _glActiveTexture($6);
 _glGenTextures(1,17672);
 var $7=HEAP32[((13336)>>2)];
 var $8=HEAP32[((17672)>>2)];
 _glBindTexture($7,$8);
 var $9=HEAP32[((13336)>>2)];
 _glTexParameteri($9,10240,9728);
 var $10=HEAP32[((13336)>>2)];
 _glTexParameteri($10,10241,9728);
 var $11=HEAP32[((13336)>>2)];
 var $12=HEAP32[((13328)>>2)];
 var $13=$1;
 var $14=$2;
 var $15=HEAP32[((13344)>>2)];
 var $16=HEAP32[((13352)>>2)];
 _glTexImage2D($11,0,$12,$13,$14,0,$15,$16,0);
 var $17=HEAP32[((13336)>>2)];
 _glBindTexture($17,0);
 STACKTOP=sp;return;
}
function __ZN12RenderConfig7ExecuteEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10;
 var $startTime;
 var $k;
 var $11=(sp)+(16);
 var $12=(sp)+(24);
 var $tresholdTime;
 var $elapsedTime;
 $10=$this;
 var $13=$10;
 var $14=(($13+524)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15>>>0)<20;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 __ZN12RenderConfig14ExecuteKernelsEv($13);
 var $18=(($13+524)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=((($19)+(1))|0);
 HEAP32[(($18)>>2)]=$20;
 label=11;break;
 case 3: 
 var $22=__Z13WallClockTimev();
 $startTime=$22;
 var $23=(($13+524)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=((($24)-(20))|0);
 HEAP32[(($11)>>2)]=$25;
 HEAP32[(($12)>>2)]=100;
 $7=$11;
 $8=$12;
 var $26=$7;
 var $27=$8;
 var $tmp_i=$6;
 var $tmp1_i=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $4=$26;
 $5=$27;
 var $28=$5;
 var $29=$4;
 $1=$6;
 $2=$28;
 $3=$29;
 var $30=$1;
 var $31=$2;
 var $32=HEAP32[(($31)>>2)];
 var $33=$3;
 var $34=HEAP32[(($33)>>2)];
 var $35=($32>>>0)<($34>>>0);
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 var $37=$5;
 var $40=$37;label=6;break;
 case 5: 
 var $39=$4;
 var $40=$39;label=6;break;
 case 6: 
 var $40;
 var $41=HEAP32[(($40)>>2)];
 var $42=($41>>>0);
 var $43=($42)/(100);
 $k=$43;
 var $44=$k;
 var $45=((0.5))*($44);
 $tresholdTime=$45;
 label=7;break;
 case 7: 
 __ZN12RenderConfig14ExecuteKernelsEv($13);
 var $47=(($13+524)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=((($48)+(1))|0);
 HEAP32[(($47)>>2)]=$49;
 var $50=__Z13WallClockTimev();
 var $51=$startTime;
 var $52=($50)-($51);
 var $53=$52;
 $elapsedTime=$53;
 var $54=$elapsedTime;
 var $55=$tresholdTime;
 var $56=$54>$55;
 if($56){label=8;break;}else{label=9;break;}
 case 8: 
 label=10;break;
 case 9: 
 label=7;break;
 case 10: 
 label=11;break;
 case 11: 
 __ZN12RenderConfig19CheckDeviceWorkloadEv($13);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderConfig14ExecuteKernelsEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 $1=$this;
 var $2=$1;
 $i=0;
 label=2;break;
 case 2: 
 var $4=$i;
 var $5=(($2+548)|0);
 var $6=__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($5);
 var $7=($4>>>0)<($6>>>0);
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 var $9=(($2+548)|0);
 var $10=$i;
 var $11=__ZN2cl6vectorIP12RenderDeviceLj10EEixEi($9,$10);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($2+524)|0);
 var $14=HEAP32[(($13)>>2)];
 __ZN12RenderDevice7SetArgsEj($12,$14);
 label=4;break;
 case 4: 
 var $16=$i;
 var $17=((($16)+(1))|0);
 $i=$17;
 label=2;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderConfig19CheckDeviceWorkloadEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $t;
 $1=$this;
 var $2=$1;
 var $3=__Z13WallClockTimev();
 $t=$3;
 var $4=(($2+616)|0);
 var $5=HEAP8[($4)];
 var $6=(($5)&1);
 if($6){label=2;break;}else{label=4;break;}
 case 2: 
 var $8=$t;
 var $9=(($2+608)|0);
 var $10=HEAPF64[(($9)>>3)];
 var $11=($8)-($10);
 var $12=$11>10;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 __ZN12RenderConfig20UpdateDeviceWorkloadEb($2,1);
 var $14=(($2+616)|0);
 HEAP8[($14)]=0;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderDevice7SetArgsEj($this,$count){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$count;
 var $3=$1;
 var $4=$2;
 var $5=(($3+48)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN12RenderDevice16ResetPerformanceEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+96)|0);
 HEAPF64[(($3)>>3)]=0;
 var $4=(($2+88)|0);
 HEAPF64[(($4)>>3)]=0;
 return;
}
function __ZNK12RenderConfig12GetPerfIndexEj($this,$deviceIndex){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 $3=$this;
 $4=$deviceIndex;
 var $5=$3;
 var $6=(($5+596)|0);
 var $7=$4;
 $1=$6;
 $2=$7;
 var $8=$1;
 var $9=$2;
 var $10=$8;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+($9<<3))|0);
 var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($13)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($13)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 return $14;
}
function __GLOBAL__I_a84(){
 var label=0;
 ___cxx_global_var_init76();
 return;
}
function ___cxx_global_var_init126(){
 var label=0;
 __ZN2cl7NDRangeC1Ev(17328);
 var $1=_atexit((790),17328,___dso_handle);
 return;
}
function __ZN12RenderDeviceC2ERKN2cl6DeviceERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEjP6CameraP6Spherej($this,$device,$kernelFileName,$forceGPUWorkSize,$camera,$spheres,$sceneSphereCount){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+296)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21=sp;
 var $22=(sp)+(8);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $__a_i_i_i;
 var $__i_i_i_i;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $platform=(sp)+(16);
 var $devices=(sp)+(24);
 var $cps=(sp)+(72);
 var $prop=(sp)+(88);
 var $src=(sp)+(96);
 var $source=(sp)+(112);
 var $69=(sp)+(200);
 var $program=(sp)+(208);
 var $buildDevice=(sp)+(216);
 var $result=(sp)+(264);
 var $err=(sp)+(272);
 var $strError=(sp)+(288);
 $60=$this;
 $61=$device;
 $62=$kernelFileName;
 $63=$forceGPUWorkSize;
 $64=$camera;
 $65=$spheres;
 $66=$sceneSphereCount;
 var $70=$60;
 var $71=(($70)|0);
 $59=$71;
 var $72=$59;
 $58=$72;
 var $73=$58;
 var $74=$73;
 var $75=(($73)|0);
 $57=$75;
 var $76=$57;
 $56=$76;
 var $77=$56;
 var $78=$77;
 $55=$78;
 var $79=$55;
 var $80=$79;
 $54=$80;
 var $81=$54;
 var $82=(($79)|0);
 $53=$73;
 var $83=$53;
 var $84=(($83)|0);
 $52=$84;
 var $85=$52;
 var $86=$85;
 $51=$86;
 var $87=$51;
 var $88=(($87)|0);
 var $89=(($88)|0);
 var $90=$89;
 var $91=(($90)|0);
 $__a_i_i_i=$91;
 $__i_i_i_i=0;
 label=2;break;
 case 2: 
 var $93=$__i_i_i_i;
 var $94=($93>>>0)<3;
 if($94){label=3;break;}else{label=4;break;}
 case 3: 
 var $96=$__i_i_i_i;
 var $97=$__a_i_i_i;
 var $98=(($97+($96<<2))|0);
 HEAP32[(($98)>>2)]=0;
 var $99=$__i_i_i_i;
 var $100=((($99)+(1))|0);
 $__i_i_i_i=$100;
 label=2;break;
 case 4: 
 var $101=(($70+36)|0);
 var $102=$66;
 HEAP32[(($101)>>2)]=$102;
 var $103=(($70+52)|0);
 HEAP32[(($103)>>2)]=0;
 var $104=(($70+56)|0);
 HEAP32[(($104)>>2)]=0;
 var $105=(($70+60)|0);
 HEAP32[(($105)>>2)]=0;
 var $106=(($70+72)|0);
 HEAP32[(($106)>>2)]=0;
 var $107=(($70+76)|0);
 HEAP32[(($107)>>2)]=0;
 var $108=(($70+80)|0);
 HEAP32[(($108)>>2)]=0;
 var $109=(($70+84)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl5EventC1Ev($109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=41;break; }
 case 5: 
 var $111=(($70+88)|0);
 HEAPF64[(($111)>>3)]=0;
 var $112=(($70+96)|0);
 HEAPF64[(($112)>>3)]=0;
 var $113=(($70)|0);
 $49=$113;
 $50=440;
 var $114=$49;
 var $115=$50;
 var $116=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($114,$115) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 label=7;break;
 case 7: 
 var $118=$61;
 var $119=(function() { try { __THREW__ = 0; return __ZNK2cl6Device7getInfoILi4145EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi($118,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=42;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformC1EP15_cl_platform_id($platform,$119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=42;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EEC1Ev($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=43;break; }
 case 10: 
 var $123=$61;
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EE9push_backERKS1_($devices,$123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=44;break; }
 case 11: 
 var $125=(($cps)|0);
 HEAP32[(($125)>>2)]=4228;
 var $126=(($125+4)|0);
 var $127=$platform;
 var $128=(function() { try { __THREW__ = 0; return __ZN2cl6detail7WrapperIP15_cl_platform_idEclEv($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=44;break; }
 case 12: 
 var $130=HEAP32[(($128)>>2)];
 var $131=$130;
 HEAP32[(($126)>>2)]=$131;
 var $132=(($126+4)|0);
 HEAP32[(($132)>>2)]=0;
 var $133=(function() { try { __THREW__ = 0; return __Znwj(4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=44;break; }
 case 13: 
 var $135=$133;
 var $136=(($cps)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl7ContextC1ERKNS_6vectorINS_6DeviceELj10EEEPiPFvPKcPKvjPvESB_S6_($135,$devices,$136,0,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=45;break; }
 case 14: 
 var $138=(($70+12)|0);
 HEAP32[(($138)>>2)]=$135;
 var $$etemp$0$0=2;
 var $$etemp$0$1=0;
 var $st$1$0=(($prop)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($prop+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $139=(function() { try { __THREW__ = 0; return __Znwj(4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=44;break; }
 case 15: 
 var $141=$139;
 var $142=(($70+12)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$61;
 var $ld$3$0=(($prop)|0);
 var $145$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($prop+4)|0);
 var $145$1=HEAP32[(($ld$4$1)>>2)];
 (function() { try { __THREW__ = 0; return __ZN2cl12CommandQueueC1ERKNS_7ContextERKNS_6DeviceEyPi($141,$143,$144,$145$0,$145$1,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=46;break; }
 case 16: 
 var $147=(($70+16)|0);
 HEAP32[(($147)>>2)]=$141;
 var $148=$62;
 (function() { try { __THREW__ = 0; return __ZN12RenderDevice11ReadSourcesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($src,$70,$148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 $48=$src;
 var $150=$48;
 $47=$150;
 var $151=$47;
 $46=$151;
 var $152=$46;
 $45=$152;
 var $153=$45;
 var $154=(($153)|0);
 $44=$154;
 var $155=$44;
 var $156=$155;
 $43=$156;
 var $157=$43;
 var $158=(($157)|0);
 var $159=(($158)|0);
 var $160=$159;
 var $161=(($160)|0);
 var $162=$161;
 var $163=HEAP8[($162)];
 var $164=($163&255);
 var $165=$164&1;
 var $166=($165|0)!=0;
 if($166){label=18;break;}else{label=19;break;}
 case 18: 
 $37=$152;
 var $168=$37;
 var $169=(($168)|0);
 $36=$169;
 var $170=$36;
 var $171=$170;
 $35=$171;
 var $172=$35;
 var $173=(($172)|0);
 var $174=(($173)|0);
 var $175=$174;
 var $176=(($175+8)|0);
 var $177=HEAP32[(($176)>>2)];
 var $191=$177;label=20;break;
 case 19: 
 $42=$152;
 var $179=$42;
 var $180=(($179)|0);
 $41=$180;
 var $181=$41;
 var $182=$181;
 $40=$182;
 var $183=$40;
 var $184=(($183)|0);
 var $185=(($184)|0);
 var $186=$185;
 var $187=(($186+1)|0);
 var $188=(($187)|0);
 $39=$188;
 var $189=$39;
 $38=$189;
 var $190=$38;
 var $191=$190;label=20;break;
 case 20: 
 var $191;
 $34=$191;
 var $192=$34;
 $33=$src;
 var $193=$33;
 $32=$193;
 var $194=$32;
 $31=$194;
 var $195=$31;
 var $196=(($195)|0);
 $30=$196;
 var $197=$30;
 var $198=$197;
 $29=$198;
 var $199=$29;
 var $200=(($199)|0);
 var $201=(($200)|0);
 var $202=$201;
 var $203=(($202)|0);
 var $204=$203;
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=$206&1;
 var $208=($207|0)!=0;
 if($208){label=21;break;}else{label=22;break;}
 case 21: 
 $25=$194;
 var $210=$25;
 var $211=(($210)|0);
 $24=$211;
 var $212=$24;
 var $213=$212;
 $23=$213;
 var $214=$23;
 var $215=(($214)|0);
 var $216=(($215)|0);
 var $217=$216;
 var $218=(($217+4)|0);
 var $219=HEAP32[(($218)>>2)];
 var $234=$219;label=23;break;
 case 22: 
 $28=$194;
 var $221=$28;
 var $222=(($221)|0);
 $27=$222;
 var $223=$27;
 var $224=$223;
 $26=$224;
 var $225=$26;
 var $226=(($225)|0);
 var $227=(($226)|0);
 var $228=$227;
 var $229=(($228)|0);
 var $230=$229;
 var $231=HEAP8[($230)];
 var $232=($231&255);
 var $233=$232>>1;
 var $234=$233;label=23;break;
 case 23: 
 var $234;
 HEAP32[(($21)>>2)]=$192;
 HEAP32[(($22)>>2)]=$234;
 $18=$69;
 $19=$21;
 $20=$22;
 var $235=$18;
 var $236=$19;
 var $237=$20;
 $15=$235;
 $16=$236;
 $17=$237;
 var $238=$15;
 var $239=(($238)|0);
 var $240=$16;
 var $241=HEAP32[(($240)>>2)];
 HEAP32[(($239)>>2)]=$241;
 var $242=(($238+4)|0);
 var $243=$17;
 var $244=HEAP32[(($243)>>2)];
 HEAP32[(($242)>>2)]=$244;
 label=24;break;
 case 24: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINSt3__14pairIPKcjEELj10EEC1EjRKS5_($source,1,$69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=47;break; }
 case 25: 
 var $247=(($70+12)|0);
 var $248=HEAP32[(($247)>>2)];
 (function() { try { __THREW__ = 0; return __ZN2cl7ProgramC1ERKNS_7ContextERKNS_6vectorINSt3__14pairIPKcjEELj10EEEPi($program,$248,$source,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=48;break; }
 case 26: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EEC1Ev($buildDevice) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=49;break; }
 case 27: 
 var $251=$61;
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EE9push_backERKS1_($buildDevice,$251) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=50;break; }
 case 28: 
 var $253=(function() { try { __THREW__ = 0; return __ZNK2cl7Program5buildERKNS_6vectorINS_6DeviceELj10EEEPKcPFvP11_cl_programPvESA_($program,$buildDevice,13408,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=50;break; }
 case 29: 
 var $255=$61;
 (function() { try { __THREW__ = 0; return __ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi($result,$program,$255,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=50;break; }
 case 30: 
 var $257=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=51;break; }
 case 31: 
 var $259=(($70)|0);
 var $260=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($257,$259) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=51;break; }
 case 32: 
 var $262=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($260,1800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=51;break; }
 case 33: 
 var $264=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($262,1440) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=51;break; }
 case 34: 
 var $266=(function() { try { __THREW__ = 0; return __ZNK2cl6string5c_strEv($result) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=51;break; }
 case 35: 
 var $268=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($264,$266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=51;break; }
 case 36: 
 $13=$268;
 $14=8;
 var $270=$13;
 var $271=$14;
 var $272=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$271]($270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=51;break; }
 case 37: 
 label=38;break;
 case 38: 
 (function() { try { __THREW__ = 0; return __ZN2cl6stringD1Ev($result) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=50;break; }
 case 39: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EED1Ev($buildDevice) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=49;break; }
 case 40: 
 label=73;break;
 case 41: 
 var $277$0 = ___cxa_find_matching_catch(-1, -1); var $277$1 = tempRet0;
 var $278=$277$0;
 $67=$278;
 var $279=$277$1;
 $68=$279;
 label=134;break;
 case 42: 
 var $281$0 = ___cxa_find_matching_catch(-1, -1); var $281$1 = tempRet0;
 var $282=$281$0;
 $67=$282;
 var $283=$281$1;
 $68=$283;
 label=132;break;
 case 43: 
 var $285$0 = ___cxa_find_matching_catch(-1, -1); var $285$1 = tempRet0;
 var $286=$285$0;
 $67=$286;
 var $287=$285$1;
 $68=$287;
 label=130;break;
 case 44: 
 var $289$0 = ___cxa_find_matching_catch(-1, -1); var $289$1 = tempRet0;
 var $290=$289$0;
 $67=$290;
 var $291=$289$1;
 $68=$291;
 label=128;break;
 case 45: 
 var $293$0 = ___cxa_find_matching_catch(-1, -1); var $293$1 = tempRet0;
 var $294=$293$0;
 $67=$294;
 var $295=$293$1;
 $68=$295;
 __ZdlPv($133);
 label=128;break;
 case 46: 
 var $297$0 = ___cxa_find_matching_catch(-1, -1); var $297$1 = tempRet0;
 var $298=$297$0;
 $67=$298;
 var $299=$297$1;
 $68=$299;
 __ZdlPv($139);
 label=128;break;
 case 47: 
 var $301$0 = ___cxa_find_matching_catch(-1, -1); var $301$1 = tempRet0;
 var $302=$301$0;
 $67=$302;
 var $303=$301$1;
 $68=$303;
 label=126;break;
 case 48: 
 var $305$0 = ___cxa_find_matching_catch(-1, -1); var $305$1 = tempRet0;
 var $306=$305$0;
 $67=$306;
 var $307=$305$1;
 $68=$307;
 label=124;break;
 case 49: 
 var $309$0 = ___cxa_find_matching_catch(-1, -1,13016); var $309$1 = tempRet0;
 var $310=$309$0;
 $67=$310;
 var $311=$309$1;
 $68=$311;
 label=55;break;
 case 50: 
 var $313$0 = ___cxa_find_matching_catch(-1, -1,13016); var $313$1 = tempRet0;
 var $314=$313$0;
 $67=$314;
 var $315=$313$1;
 $68=$315;
 label=53;break;
 case 51: 
 var $317$0 = ___cxa_find_matching_catch(-1, -1,13016); var $317$1 = tempRet0;
 var $318=$317$0;
 $67=$318;
 var $319=$317$1;
 $68=$319;
 (function() { try { __THREW__ = 0; return __ZN2cl6stringD1Ev($result) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=137;break; }
 case 52: 
 label=53;break;
 case 53: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EED1Ev($buildDevice) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=137;break; }
 case 54: 
 label=55;break;
 case 55: 
 var $324=$68;
 var $325=_llvm_eh_typeid_for(13016);
 var $326=($324|0)==($325|0);
 if($326){label=56;break;}else{label=122;break;}
 case 56: 
 var $328=$67;
 var $329=___cxa_get_exception_ptr($328);
 var $330=$329;
 __ZN2cl5ErrorC1ERKS0_($err,$330);
 var $331=___cxa_begin_catch($328);
 var $332=$61;
 (function() { try { __THREW__ = 0; return __ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi($strError,$program,$332,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=68;break; }
 case 57: 
 var $334=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=69;break; }
 case 58: 
 var $336=(($70)|0);
 var $337=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($334,$336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=69;break; }
 case 59: 
 var $339=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($337,1800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=69;break; }
 case 60: 
 var $341=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($339,1224) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=69;break; }
 case 61: 
 $11=$341;
 $12=8;
 var $343=$11;
 var $344=$12;
 var $345=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$344]($343) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=69;break; }
 case 62: 
 label=63;break;
 case 63: 
 var $347=(function() { try { __THREW__ = 0; return __ZNK2cl6string5c_strEv($strError) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=69;break; }
 case 64: 
 var $349=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($345,$347) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=69;break; }
 case 65: 
 $9=$349;
 $10=8;
 var $351=$9;
 var $352=$10;
 var $353=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$352]($351) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=69;break; }
 case 66: 
 label=67;break;
 case 67: 
 var $355=___cxa_allocate_exception(12);
 var $356=$355;
 __ZN2cl5ErrorC1ERKS0_($356,$err);
 (function() { try { __THREW__ = 0; return ___cxa_throw($355,13016,(368)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=138;break; } else { label=69;break; }
 case 68: 
 var $358$0 = ___cxa_find_matching_catch(-1, -1); var $358$1 = tempRet0;
 var $359=$358$0;
 $67=$359;
 var $360=$358$1;
 $68=$360;
 label=71;break;
 case 69: 
 var $362$0 = ___cxa_find_matching_catch(-1, -1); var $362$1 = tempRet0;
 var $363=$362$0;
 $67=$363;
 var $364=$362$1;
 $68=$364;
 (function() { try { __THREW__ = 0; return __ZN2cl6stringD1Ev($strError) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=137;break; }
 case 70: 
 label=71;break;
 case 71: 
 __ZN2cl5ErrorD1Ev($err);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=137;break; }
 case 72: 
 label=122;break;
 case 73: 
 var $369=(function() { try { __THREW__ = 0; return __Znwj(4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=94;break; }
 case 74: 
 var $371=$369;
 (function() { try { __THREW__ = 0; return __ZN2cl6KernelC1ERKNS_7ProgramEPKcPi($371,$program,888,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=95;break; }
 case 75: 
 var $373=(($70+20)|0);
 HEAP32[(($373)>>2)]=$371;
 var $374=(($70+20)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=$61;
 var $377=(($70+24)|0);
 var $378=(function() { try { __THREW__ = 0; return __ZNK2cl6Kernel16getWorkGroupInfoIjEEiRKNS_6DeviceEjPT_($375,$376,4528,$377) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=94;break; }
 case 76: 
 var $380=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=94;break; }
 case 77: 
 var $382=(($70)|0);
 var $383=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($380,$382) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=94;break; }
 case 78: 
 var $385=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($383,1800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=79;break; } else { label=94;break; }
 case 79: 
 var $387=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($385,640) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=94;break; }
 case 80: 
 var $389=(($70+24)|0);
 var $390=HEAP32[(($389)>>2)];
 var $391=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($387,$390) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=94;break; }
 case 81: 
 $7=$391;
 $8=8;
 var $393=$7;
 var $394=$8;
 var $395=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$394]($393) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=94;break; }
 case 82: 
 label=83;break;
 case 83: 
 var $397=$63;
 var $398=($397>>>0)>0;
 if($398){label=84;break;}else{label=96;break;}
 case 84: 
 var $400=$61;
 var $401$r=(function() { try { __THREW__ = 0; return __ZNK2cl6Device7getInfoILi4096EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi($400,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $401$0=$401$r;var $401$1=tempRet0;if (!__THREW__) { label=85;break; } else { label=94;break; }
 case 85: 
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;
 var $403=(($401$0|0) == ($$etemp$5$0|0)) & (($401$1|0) == ($$etemp$5$1|0));
 if($403){label=86;break;}else{label=96;break;}
 case 86: 
 var $405=$63;
 var $406=(($70+24)|0);
 HEAP32[(($406)>>2)]=$405;
 var $407=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=94;break; }
 case 87: 
 var $409=(($70)|0);
 var $410=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($407,$409) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { label=94;break; }
 case 88: 
 var $412=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($410,1800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { label=94;break; }
 case 89: 
 var $414=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($412,376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=94;break; }
 case 90: 
 var $416=(($70+24)|0);
 var $417=HEAP32[(($416)>>2)];
 var $418=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($414,$417) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=94;break; }
 case 91: 
 $5=$418;
 $6=8;
 var $420=$5;
 var $421=$6;
 var $422=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$421]($420) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=92;break; } else { label=94;break; }
 case 92: 
 label=93;break;
 case 93: 
 label=96;break;
 case 94: 
 var $425$0 = ___cxa_find_matching_catch(-1, -1); var $425$1 = tempRet0;
 var $426=$425$0;
 $67=$426;
 var $427=$425$1;
 $68=$427;
 label=122;break;
 case 95: 
 var $429$0 = ___cxa_find_matching_catch(-1, -1); var $429$1 = tempRet0;
 var $430=$429$0;
 $67=$430;
 var $431=$429$1;
 $68=$431;
 __ZdlPv($369);
 label=122;break;
 case 96: 
 var $433=(function() { try { __THREW__ = 0; return __Znwj(4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=94;break; }
 case 97: 
 var $435=$433;
 var $436=(($70+12)|0);
 var $437=HEAP32[(($436)>>2)];
 var $438=$64;
 var $439=$438;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($435,$437,$$etemp$6$0,$$etemp$6$1,60,$439,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=120;break; }
 case 98: 
 var $441=(($70+68)|0);
 HEAP32[(($441)>>2)]=$435;
 var $442=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=99;break; } else { label=94;break; }
 case 99: 
 var $444=(($70)|0);
 var $445=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($442,$444) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { label=94;break; }
 case 100: 
 var $447=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($445,80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=101;break; } else { label=94;break; }
 case 101: 
 var $449=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($447,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=94;break; }
 case 102: 
 var $451=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($449,4480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=94;break; }
 case 103: 
 $3=$451;
 $4=8;
 var $453=$3;
 var $454=$4;
 var $455=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$454]($453) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=94;break; }
 case 104: 
 label=105;break;
 case 105: 
 var $457=(function() { try { __THREW__ = 0; return __Znwj(4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=94;break; }
 case 106: 
 var $459=$457;
 var $460=(($70+12)|0);
 var $461=HEAP32[(($460)>>2)];
 var $462=(($70+36)|0);
 var $463=HEAP32[(($462)>>2)];
 var $464=((($463)*(44))&-1);
 var $465=$65;
 var $466=$465;
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($459,$461,$$etemp$7$0,$$etemp$7$1,$464,$466,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { label=121;break; }
 case 107: 
 var $468=(($70+64)|0);
 HEAP32[(($468)>>2)]=$459;
 var $469=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=94;break; }
 case 108: 
 var $471=(($70)|0);
 var $472=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($469,$471) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=94;break; }
 case 109: 
 var $474=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($472,4128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=94;break; }
 case 110: 
 var $476=(($70+36)|0);
 var $477=HEAP32[(($476)>>2)];
 var $478=((($477)*(44))&-1);
 var $479=(((($478>>>0))/(1024))&-1);
 var $480=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($474,$479) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=111;break; } else { label=94;break; }
 case 111: 
 var $482=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($480,4480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=112;break; } else { label=94;break; }
 case 112: 
 $1=$482;
 $2=8;
 var $484=$1;
 var $485=$2;
 var $486=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$485]($484) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=94;break; }
 case 113: 
 label=114;break;
 case 114: 
 (function() { try { __THREW__ = 0; return __ZN2cl7ProgramD1Ev($program) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=48;break; }
 case 115: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINSt3__14pairIPKcjEELj10EED1Ev($source) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=47;break; }
 case 116: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($src) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=117;break; } else { label=44;break; }
 case 117: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EED1Ev($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=118;break; } else { label=43;break; }
 case 118: 
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformD1Ev($platform) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { label=42;break; }
 case 119: 
 STACKTOP=sp;return;
 case 120: 
 var $494$0 = ___cxa_find_matching_catch(-1, -1); var $494$1 = tempRet0;
 var $495=$494$0;
 $67=$495;
 var $496=$494$1;
 $68=$496;
 __ZdlPv($433);
 label=122;break;
 case 121: 
 var $498$0 = ___cxa_find_matching_catch(-1, -1); var $498$1 = tempRet0;
 var $499=$498$0;
 $67=$499;
 var $500=$498$1;
 $68=$500;
 __ZdlPv($457);
 label=122;break;
 case 122: 
 (function() { try { __THREW__ = 0; return __ZN2cl7ProgramD1Ev($program) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=123;break; } else { label=137;break; }
 case 123: 
 label=124;break;
 case 124: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINSt3__14pairIPKcjEELj10EED1Ev($source) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=125;break; } else { label=137;break; }
 case 125: 
 label=126;break;
 case 126: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($src) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=127;break; } else { label=137;break; }
 case 127: 
 label=128;break;
 case 128: 
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorINS_6DeviceELj10EED1Ev($devices) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=129;break; } else { label=137;break; }
 case 129: 
 label=130;break;
 case 130: 
 (function() { try { __THREW__ = 0; return __ZN2cl8PlatformD1Ev($platform) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=131;break; } else { label=137;break; }
 case 131: 
 label=132;break;
 case 132: 
 (function() { try { __THREW__ = 0; return __ZN2cl5EventD1Ev($109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=137;break; }
 case 133: 
 label=134;break;
 case 134: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=135;break; } else { label=137;break; }
 case 135: 
 label=136;break;
 case 136: 
 var $516=$67;
 var $517=$68;
 var $518$0=$516;
 var $518$1=0;
 var $519$0=$518$0;
 var $519$1=$517;
 ___resumeException($519$0)
 case 137: 
 var $521$0 = ___cxa_find_matching_catch(-1, -1,0); var $521$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 138: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl5EventC1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl5EventC2Ev($2);
 return;
}
function __ZNK2cl6Device7getInfoILi4145EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi($this,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $param=sp;
 var $result;
 $1=$this;
 $2=$err;
 var $3=$1;
 var $4=__ZNK2cl6Device7getInfoIP15_cl_platform_idEEijPT_($3,4145,$param);
 $result=$4;
 var $5=$2;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$result;
 var $9=$2;
 HEAP32[(($9)>>2)]=$8;
 label=3;break;
 case 3: 
 var $11=HEAP32[(($param)>>2)];
 STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEclEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 return $3;
}
function __ZN2cl7ContextC1ERKNS_6vectorINS_6DeviceELj10EEEPiPFvPKcPKvjPvESB_S6_($this,$devices,$properties,$notifyFptr,$data,$err){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 $1=$this;
 $2=$devices;
 $3=$properties;
 $4=$notifyFptr;
 $5=$data;
 $6=$err;
 var $7=$1;
 var $8=$3;
 var $9=$4;
 var $10=$5;
 var $11=$6;
 var $12=$2;
 __ZN2cl7ContextC2ERKNS_6vectorINS_6DeviceELj10EEEPiPFvPKcPKvjPvESB_S6_($7,$12,$8,$9,$10,$11);
 return;
}
function __ZN2cl12CommandQueueC1ERKNS_7ContextERKNS_6DeviceEyPi($this,$context,$device,$properties$0,$properties$1,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 $1=$this;
 $2=$context;
 $3=$device;
 var $st$0$0=(($4)|0);
 HEAP32[(($st$0$0)>>2)]=$properties$0;
 var $st$1$1=(($4+4)|0);
 HEAP32[(($st$1$1)>>2)]=$properties$1;
 $5=$err;
 var $6=$1;
 var $ld$2$0=(($4)|0);
 var $7$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($4+4)|0);
 var $7$1=HEAP32[(($ld$3$1)>>2)];
 var $8=$5;
 var $9=$2;
 var $10=$3;
 __ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEyPi($6,$9,$10,$7$0,$7$1,$8);
 STACKTOP=sp;return;
}
function __ZN12RenderDevice11ReadSourcesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg_result,$this,$fileName){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19=sp;
 var $20=(sp)+(8);
 var $__last3_i=(sp)+(16);
 var $__first1_i=(sp)+(24);
 var $21;
 var $22=(sp)+(32);
 var $23=(sp)+(40);
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $file=(sp)+(48);
 var $72;
 var $73;
 var $74;
 var $75=(sp)+(240);
 var $76=(sp)+(248);
 var $77;
 $70=$this;
 $71=$fileName;
 var $78=$70;
 $67=$file;
 var $79=$67;
 var $80=$79;
 var $81=(($80+112)|0);
 var $82=$81;
 $66=$82;
 var $83=$66;
 var $84=$83;
 $65=$84;
 var $85=$65;
 var $86=$85;
 HEAP32[(($86)>>2)]=6128;
 var $87=$83;
 HEAP32[(($87)>>2)]=5672;
 var $88=$79;
 HEAP32[(($88)>>2)]=7468;
 var $89=$79;
 var $90=(($89+112)|0);
 var $91=$90;
 HEAP32[(($91)>>2)]=7508;
 var $92=$79;
 var $93=(($92+8)|0);
 var $94=$93;
 HEAP32[(($94)>>2)]=7488;
 var $95=$79;
 var $96=(($79+12)|0);
 var $97=$96;
 $60=$95;
 $61=8260;
 $62=$97;
 var $98=$60;
 var $99=$61;
 var $100=$98;
 var $101=(($99+4)|0);
 var $102=$62;
 $57=$100;
 $58=$101;
 $59=$102;
 var $103=$57;
 var $104=$58;
 var $105=HEAP32[(($104)>>2)];
 var $106=$103;
 HEAP32[(($106)>>2)]=$105;
 var $107=(($104+4)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$103;
 var $110=HEAP32[(($109)>>2)];
 var $111=((($110)-(12))|0);
 var $112=$111;
 var $113=HEAP32[(($112)>>2)];
 var $114=$103;
 var $115=(($114+$113)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$108;
 var $117=(($103+4)|0);
 HEAP32[(($117)>>2)]=0;
 var $118=$103;
 var $119=HEAP32[(($118)>>2)];
 var $120=((($119)-(12))|0);
 var $121=$120;
 var $122=HEAP32[(($121)>>2)];
 var $123=$103;
 var $124=(($123+$122)|0);
 var $125=$124;
 var $126=$59;
 $55=$125;
 $56=$126;
 var $127=$55;
 var $128=$127;
 var $129=$56;
 var $130=$129;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($128,$130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $131=(($127+72)|0);
 HEAP32[(($131)>>2)]=0;
 var $132=(($127+76)|0);
 HEAP32[(($132)>>2)]=-1;
 var $133=$98;
 var $134=(($133+8)|0);
 var $135=$134;
 var $136=(($99+12)|0);
 $53=$135;
 $54=$136;
 var $137=$53;
 var $138=$54;
 var $139=HEAP32[(($138)>>2)];
 var $140=$137;
 HEAP32[(($140)>>2)]=$139;
 var $141=(($138+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$137;
 var $144=HEAP32[(($143)>>2)];
 var $145=((($144)-(12))|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $148=$137;
 var $149=(($148+$147)|0);
 var $150=$149;
 HEAP32[(($150)>>2)]=$142;
 var $151=HEAP32[(($99)>>2)];
 var $152=$98;
 HEAP32[(($152)>>2)]=$151;
 var $153=(($99+20)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=$98;
 var $156=HEAP32[(($155)>>2)];
 var $157=((($156)-(12))|0);
 var $158=$157;
 var $159=HEAP32[(($158)>>2)];
 var $160=$98;
 var $161=(($160+$159)|0);
 var $162=$161;
 HEAP32[(($162)>>2)]=$154;
 var $163=(($99+24)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=$98;
 var $166=(($165+8)|0);
 var $167=$166;
 HEAP32[(($167)>>2)]=$164;
 var $168=$79;
 HEAP32[(($168)>>2)]=7468;
 var $169=$79;
 var $170=(($169+112)|0);
 var $171=$170;
 HEAP32[(($171)>>2)]=7508;
 var $172=$79;
 var $173=(($172+8)|0);
 var $174=$173;
 HEAP32[(($174)>>2)]=7488;
 var $175=(($79+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($175) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=4;break; }
 case 3: 
 var $177$0 = ___cxa_find_matching_catch(-1, -1); var $177$1 = tempRet0;
 var $178=$177$0;
 $68=$178;
 var $179=$177$1;
 $69=$179;
 label=6;break;
 case 4: 
 var $181$0 = ___cxa_find_matching_catch(-1, -1); var $181$1 = tempRet0;
 var $182=$181$0;
 $68=$182;
 var $183=$181$1;
 $69=$183;
 var $184=$79;
 (function() { try { __THREW__ = 0; return __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($184,8260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 label=6;break;
 case 6: 
 var $187=$79;
 var $188=(($187+112)|0);
 var $189=$188;
 (function() { try { __THREW__ = 0; return __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($189) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $191=$68;
 var $192=$69;
 var $193$0=$191;
 var $193$1=0;
 var $194$0=$193$0;
 var $194$1=$192;
 ___resumeException($194$0)
 case 8: 
 var $196$0 = ___cxa_find_matching_catch(-1, -1,0); var $196$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 var $197=$file;
 var $198=HEAP32[(($197)>>2)];
 var $199=((($198)-(12))|0);
 var $200=$199;
 var $201=HEAP32[(($200)>>2)];
 var $202=$file;
 var $203=(($202+$201)|0);
 var $204=$203;
 $51=$204;
 $52=7;
 var $205=$51;
 var $206=$205;
 var $207=$52;
 $49=$206;
 $50=$207;
 var $208=$49;
 var $209=$50;
 var $210=(($208+20)|0);
 HEAP32[(($210)>>2)]=$209;
 var $211=(($208+16)|0);
 var $212=HEAP32[(($211)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($208,$212) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=28;break; }
 case 10: 
 label=11;break;
 case 11: 
 var $214=$71;
 $48=$214;
 var $215=$48;
 $47=$215;
 var $216=$47;
 $46=$216;
 var $217=$46;
 $45=$217;
 var $218=$45;
 var $219=(($218)|0);
 $44=$219;
 var $220=$44;
 var $221=$220;
 $43=$221;
 var $222=$43;
 var $223=(($222)|0);
 var $224=(($223)|0);
 var $225=$224;
 var $226=(($225)|0);
 var $227=$226;
 var $228=HEAP8[($227)];
 var $229=($228&255);
 var $230=$229&1;
 var $231=($230|0)!=0;
 if($231){label=12;break;}else{label=13;break;}
 case 12: 
 $37=$217;
 var $233=$37;
 var $234=(($233)|0);
 $36=$234;
 var $235=$36;
 var $236=$235;
 $35=$236;
 var $237=$35;
 var $238=(($237)|0);
 var $239=(($238)|0);
 var $240=$239;
 var $241=(($240+8)|0);
 var $242=HEAP32[(($241)>>2)];
 var $256=$242;label=14;break;
 case 13: 
 $42=$217;
 var $244=$42;
 var $245=(($244)|0);
 $41=$245;
 var $246=$41;
 var $247=$246;
 $40=$247;
 var $248=$40;
 var $249=(($248)|0);
 var $250=(($249)|0);
 var $251=$250;
 var $252=(($251+1)|0);
 var $253=(($252)|0);
 $39=$253;
 var $254=$39;
 $38=$254;
 var $255=$38;
 var $256=$255;label=14;break;
 case 14: 
 var $256;
 $34=$256;
 var $257=$34;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEE4openEPKcj($file,$257,12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=28;break; }
 case 15: 
 $74=0;
 var $259=$file;
 $32=$75;
 $33=$259;
 var $260=$32;
 var $261=$33;
 $28=$260;
 $29=$261;
 var $262=$28;
 var $263=$262;
 var $264=(($262)|0);
 var $265=$29;
 var $266=$265;
 var $267=HEAP32[(($266)>>2)];
 var $268=((($267)-(12))|0);
 var $269=$268;
 var $270=HEAP32[(($269)>>2)];
 var $271=$265;
 var $272=(($271+$270)|0);
 var $273=$272;
 $27=$273;
 var $274=$27;
 var $275=$274;
 $26=$275;
 var $276=$26;
 var $277=(($276+24)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=$278;
 HEAP32[(($264)>>2)]=$279;
 $25=$76;
 var $280=$25;
 $24=$280;
 var $281=$24;
 var $282=$281;
 var $283=(($281)|0);
 HEAP32[(($283)>>2)]=0;
 var $tmp=$23;
 var $tmp1=$75;
 assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
 var $tmp2=$22;
 var $tmp3=$76;
 assert(4 % 1 === 0);HEAP8[($tmp2)]=HEAP8[($tmp3)];HEAP8[((($tmp2)+(1))|0)]=HEAP8[((($tmp3)+(1))|0)];HEAP8[((($tmp2)+(2))|0)]=HEAP8[((($tmp3)+(2))|0)];HEAP8[((($tmp2)+(3))|0)]=HEAP8[((($tmp3)+(3))|0)];
 $21=$agg_result;
 var $284=$21;
 var $tmp_i=$__first1_i;
 var $tmp2_i=$23;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp2_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp2_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp2_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp2_i)+(3))|0)];
 var $tmp4_i=$__last3_i;
 var $tmp5_i=$22;
 assert(4 % 1 === 0);HEAP8[($tmp4_i)]=HEAP8[($tmp5_i)];HEAP8[((($tmp4_i)+(1))|0)]=HEAP8[((($tmp5_i)+(1))|0)];HEAP8[((($tmp4_i)+(2))|0)]=HEAP8[((($tmp5_i)+(2))|0)];HEAP8[((($tmp4_i)+(3))|0)]=HEAP8[((($tmp5_i)+(3))|0)];
 $18=$284;
 var $285=$18;
 var $286=$285;
 var $287=(($285)|0);
 $17=$287;
 var $288=$17;
 $16=$288;
 var $289=$16;
 var $290=$289;
 $15=$290;
 var $291=$15;
 var $292=$291;
 $14=$292;
 var $293=$14;
 var $294=(($291)|0);
 var $295=$19;
 var $296=$__first1_i;
 assert(4 % 1 === 0);HEAP32[(($295)>>2)]=HEAP32[(($296)>>2)];
 var $297=$20;
 var $298=$__last3_i;
 assert(4 % 1 === 0);HEAP32[(($297)>>2)]=HEAP32[(($298)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_19istreambuf_iteratorIcS2_EEEENS_9enable_ifIXaasr19__is_input_iteratorIT_EE5valuentsr21__is_forward_iteratorISA_EE5valueEvE4typeESA_SA_($285,$19,$20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=28;break; }
 case 16: 
 label=17;break;
 case 17: 
 var $300=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=29;break; }
 case 18: 
 var $302=(($78)|0);
 var $303=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($300,$302) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=29;break; }
 case 19: 
 var $305=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($303,3704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=29;break; }
 case 20: 
 $13=$agg_result;
 var $307=$13;
 $12=$307;
 var $308=$12;
 $11=$308;
 var $309=$11;
 var $310=(($309)|0);
 $10=$310;
 var $311=$10;
 var $312=$311;
 $9=$312;
 var $313=$9;
 var $314=(($313)|0);
 var $315=(($314)|0);
 var $316=$315;
 var $317=(($316)|0);
 var $318=$317;
 var $319=HEAP8[($318)];
 var $320=($319&255);
 var $321=$320&1;
 var $322=($321|0)!=0;
 if($322){label=21;break;}else{label=22;break;}
 case 21: 
 $5=$308;
 var $324=$5;
 var $325=(($324)|0);
 $4=$325;
 var $326=$4;
 var $327=$326;
 $3=$327;
 var $328=$3;
 var $329=(($328)|0);
 var $330=(($329)|0);
 var $331=$330;
 var $332=(($331+4)|0);
 var $333=HEAP32[(($332)>>2)];
 var $348=$333;label=23;break;
 case 22: 
 $8=$308;
 var $335=$8;
 var $336=(($335)|0);
 $7=$336;
 var $337=$7;
 var $338=$337;
 $6=$338;
 var $339=$6;
 var $340=(($339)|0);
 var $341=(($340)|0);
 var $342=$341;
 var $343=(($342)|0);
 var $344=$343;
 var $345=HEAP8[($344)];
 var $346=($345&255);
 var $347=$346>>1;
 var $348=$347;label=23;break;
 case 23: 
 var $348;
 var $349=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($305,$348) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=29;break; }
 case 24: 
 var $351=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($349,3672) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=29;break; }
 case 25: 
 $1=$351;
 $2=8;
 var $353=$1;
 var $354=$2;
 var $355=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$354]($353) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=29;break; }
 case 26: 
 label=27;break;
 case 27: 
 $74=1;
 $77=1;
 var $357=$74;
 if($357){label=32;break;}else{label=30;break;}
 case 28: 
 var $359$0 = ___cxa_find_matching_catch(-1, -1); var $359$1 = tempRet0;
 var $360=$359$0;
 $72=$360;
 var $361=$359$1;
 $73=$361;
 label=34;break;
 case 29: 
 var $363$0 = ___cxa_find_matching_catch(-1, -1); var $363$1 = tempRet0;
 var $364=$363$0;
 $72=$364;
 var $365=$363$1;
 $73=$365;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=37;break; }
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=28;break; }
 case 31: 
 label=32;break;
 case 32: 
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($file);
 STACKTOP=sp;return;
 case 33: 
 label=34;break;
 case 34: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($file) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=37;break; }
 case 35: 
 label=36;break;
 case 36: 
 var $373=$72;
 var $374=$73;
 var $375$0=$373;
 var $375$1=0;
 var $376$0=$375$0;
 var $376$1=$374;
 ___resumeException($376$0)
 case 37: 
 var $378$0 = ___cxa_find_matching_catch(-1, -1,0); var $378$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorINSt3__14pairIPKcjEELj10EEC1EjRKS5_($this,$size,$val){
 var label=0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$size;
 $3=$val;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 __ZN2cl6vectorINSt3__14pairIPKcjEELj10EEC2EjRKS5_($4,$5,$6);
 return;
}
function __ZN2cl7ProgramC1ERKNS_7ContextERKNS_6vectorINSt3__14pairIPKcjEELj10EEEPi($this,$context,$sources,$err){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$context;
 $3=$sources;
 $4=$err;
 var $5=$1;
 var $6=$4;
 var $7=$2;
 var $8=$3;
 __ZN2cl7ProgramC2ERKNS_7ContextERKNS_6vectorINSt3__14pairIPKcjEELj10EEEPi($5,$7,$8,$6);
 return;
}
function __ZNK2cl7Program5buildERKNS_6vectorINS_6DeviceELj10EEEPKcPFvP11_cl_programPvESA_($this,$devices,$options,$notifyFptr,$data){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$devices;
 $3=$options;
 $4=$notifyFptr;
 $5=$data;
 var $6=$1;
 var $7=$6;
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$2;
 var $11=__ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv($10);
 var $12=$2;
 var $13=__ZNK2cl6vectorINS_6DeviceELj10EE5frontEv($12);
 var $14=$13;
 var $15=$3;
 var $16=$4;
 var $17=$5;
 var $18=_clBuildProgram($9,$11,$14,$15,$16,$17);
 var $19=__ZN2cl6detailL10errHandlerEiPKc131($18,1560);
 return $19;
}
function __ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi($agg_result,$this,$device,$err){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $result;
 var $5;
 var $6;
 var $7;
 $1=$this;
 $2=$device;
 $3=$err;
 var $8=$1;
 $4=0;
 __ZN2cl6stringC1Ev($agg_result);
 var $9=$2;
 var $10=(function() { try { __THREW__ = 0; return __ZNK2cl7Program12getBuildInfoINS_6stringEEEiRKNS_6DeviceEjPT_($8,$9,4483,$agg_result) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 $result=$10;
 var $12=$3;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=5;break;}
 case 3: 
 var $15=$result;
 var $16=$3;
 HEAP32[(($16)>>2)]=$15;
 label=5;break;
 case 4: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $19=$18$0;
 $5=$19;
 var $20=$18$1;
 $6=$20;
 (function() { try { __THREW__ = 0; return __ZN2cl6stringD1Ev($agg_result) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 5: 
 $4=1;
 $7=1;
 var $22=$4;
 if($22){label=7;break;}else{label=6;break;}
 case 6: 
 __ZN2cl6stringD1Ev($agg_result);
 label=7;break;
 case 7: 
 return;
 case 8: 
 label=9;break;
 case 9: 
 var $27=$5;
 var $28=$6;
 var $29$0=$27;
 var $29$1=0;
 var $30$0=$29$0;
 var $30$1=$28;
 ___resumeException($30$0)
 case 10: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1,0); var $32$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6string5c_strEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($2+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $11=$8;label=4;break;
 case 3: 
 var $11=13408;label=4;break;
 case 4: 
 var $11;
 return $11;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6stringD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6stringD2Ev($2);
 return;
}
function __ZN2cl6KernelC1ERKNS_7ProgramEPKcPi($this,$program,$name,$err){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$program;
 $3=$name;
 $4=$err;
 var $5=$1;
 var $6=$3;
 var $7=$4;
 var $8=$2;
 __ZN2cl6KernelC2ERKNS_7ProgramEPKcPi($5,$8,$6,$7);
 return;
}
function __ZNK2cl6Kernel16getWorkGroupInfoIjEEiRKNS_6DeviceEjPT_($this,$device,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$this;
 $2=$device;
 $3=$name;
 $4=$param;
 var $6=$1;
 var $7=$6;
 var $8=(($7)|0);
 var $9=$2;
 var $10=$9;
 var $11=__ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($10);
 HEAP32[(($5)>>2)]=$11;
 var $12=$3;
 var $13=$4;
 var $14=__ZN2cl6detail7getInfoIPFiP10_cl_kernelP13_cl_device_idjjPvPjES3_S5_jEEiT_RKT0_RKT1_jPT2_(320,$8,$5,$12,$13);
 var $15=__ZN2cl6detailL10errHandlerEiPKc131($14,2048);
 STACKTOP=sp;return $15;
}
function __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($this,$context,$flags$0,$flags$1,$size,$host_ptr,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $5;
 var $6;
 $1=$this;
 $2=$context;
 var $st$0$0=(($3)|0);
 HEAP32[(($st$0$0)>>2)]=$flags$0;
 var $st$1$1=(($3+4)|0);
 HEAP32[(($st$1$1)>>2)]=$flags$1;
 $4=$size;
 $5=$host_ptr;
 $6=$err;
 var $7=$1;
 var $ld$2$0=(($3)|0);
 var $8$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $8$1=HEAP32[(($ld$3$1)>>2)];
 var $9=$4;
 var $10=$5;
 var $11=$6;
 var $12=$2;
 __ZN2cl6BufferC2ERKNS_7ContextEyjPvPi($7,$12,$8$0,$8$1,$9,$10,$11);
 STACKTOP=sp;return;
}
function __ZN2cl7ProgramD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl7ProgramD2Ev($2);
 return;
}
function __ZN2cl6vectorINSt3__14pairIPKcjEELj10EED1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6vectorINSt3__14pairIPKcjEELj10EED2Ev($2);
 return;
}
function __ZN2cl5EventD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl5EventD2Ev($2);
 return;
}
function __ZN12RenderDeviceD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=(($4+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=2;break;}
 case 2: 
 (function() { try { __THREW__ = 0; return __ZN2cl12CommandQueueD1Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $10=$6;
 __ZdlPv($10);
 label=4;break;
 case 4: 
 var $12=(($4+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if($14){label=7;break;}else{label=5;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZN2cl6KernelD1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=19;break; }
 case 6: 
 var $17=$13;
 __ZdlPv($17);
 label=7;break;
 case 7: 
 var $19=(($4+64)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=10;break;}else{label=8;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=20;break; }
 case 9: 
 var $24=$20;
 __ZdlPv($24);
 label=10;break;
 case 10: 
 var $26=(($4+68)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=21;break; }
 case 12: 
 var $31=$27;
 __ZdlPv($31);
 label=13;break;
 case 13: 
 var $33=(($4+52)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)!=0;
 if($35){label=14;break;}else{label=23;break;}
 case 14: 
 var $37=(($4+52)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=17;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $42=$38;
 __ZdlPv($42);
 label=17;break;
 case 17: 
 label=23;break;
 case 18: 
 var $45$0 = ___cxa_find_matching_catch(-1, -1); var $45$1 = tempRet0;
 var $46=$45$0;
 $2=$46;
 var $47=$45$1;
 $3=$47;
 var $48=$6;
 __ZdlPv($48);
 label=50;break;
 case 19: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1); var $50$1 = tempRet0;
 var $51=$50$0;
 $2=$51;
 var $52=$50$1;
 $3=$52;
 var $53=$13;
 __ZdlPv($53);
 label=50;break;
 case 20: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=$55$0;
 $2=$56;
 var $57=$55$1;
 $3=$57;
 var $58=$20;
 __ZdlPv($58);
 label=50;break;
 case 21: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=$60$0;
 $2=$61;
 var $62=$60$1;
 $3=$62;
 var $63=$27;
 __ZdlPv($63);
 label=50;break;
 case 22: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=$65$0;
 $2=$66;
 var $67=$65$1;
 $3=$67;
 var $68=$38;
 __ZdlPv($68);
 label=50;break;
 case 23: 
 var $70=(($4+56)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($71|0)!=0;
 if($72){label=24;break;}else{label=29;break;}
 case 24: 
 var $74=(($4+56)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==0;
 if($76){label=27;break;}else{label=25;break;}
 case 25: 
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=28;break; }
 case 26: 
 var $79=$75;
 __ZdlPv($79);
 label=27;break;
 case 27: 
 label=29;break;
 case 28: 
 var $82$0 = ___cxa_find_matching_catch(-1, -1); var $82$1 = tempRet0;
 var $83=$82$0;
 $2=$83;
 var $84=$82$1;
 $3=$84;
 var $85=$75;
 __ZdlPv($85);
 label=50;break;
 case 29: 
 var $87=(($4+60)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0)!=0;
 if($89){label=30;break;}else{label=35;break;}
 case 30: 
 var $91=(($4+60)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){label=33;break;}else{label=31;break;}
 case 31: 
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=34;break; }
 case 32: 
 var $96=$92;
 __ZdlPv($96);
 label=33;break;
 case 33: 
 label=35;break;
 case 34: 
 var $99$0 = ___cxa_find_matching_catch(-1, -1); var $99$1 = tempRet0;
 var $100=$99$0;
 $2=$100;
 var $101=$99$1;
 $3=$101;
 var $102=$92;
 __ZdlPv($102);
 label=50;break;
 case 35: 
 var $104=(($4+76)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($105|0)!=0;
 if($106){label=36;break;}else{label=39;break;}
 case 36: 
 var $108=(($4+76)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($109|0)==0;
 if($110){label=38;break;}else{label=37;break;}
 case 37: 
 var $112=$109;
 __ZdlPv($112);
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 var $115=(($4+80)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($116|0)!=0;
 if($117){label=40;break;}else{label=43;break;}
 case 40: 
 var $119=(($4+80)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=($120|0)==0;
 if($121){label=42;break;}else{label=41;break;}
 case 41: 
 var $123=$120;
 __ZdlPv($123);
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 var $126=(($4+12)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)==0;
 if($128){label=46;break;}else{label=44;break;}
 case 44: 
 (function() { try { __THREW__ = 0; return __ZN2cl7ContextD1Ev($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=48;break; }
 case 45: 
 var $131=$127;
 __ZdlPv($131);
 label=46;break;
 case 46: 
 var $133=(($4+84)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl5EventD1Ev($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=49;break; }
 case 47: 
 var $135=(($4)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($135);
 return;
 case 48: 
 var $137$0 = ___cxa_find_matching_catch(-1, -1); var $137$1 = tempRet0;
 var $138=$137$0;
 $2=$138;
 var $139=$137$1;
 $3=$139;
 var $140=$127;
 __ZdlPv($140);
 label=50;break;
 case 49: 
 var $142$0 = ___cxa_find_matching_catch(-1, -1); var $142$1 = tempRet0;
 var $143=$142$0;
 $2=$143;
 var $144=$142$1;
 $3=$144;
 label=52;break;
 case 50: 
 var $146=(($4+84)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl5EventD1Ev($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=55;break; }
 case 51: 
 label=52;break;
 case 52: 
 var $149=(($4)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=55;break; }
 case 53: 
 label=54;break;
 case 54: 
 var $152=$2;
 var $153=$3;
 var $154$0=$152;
 var $154$1=0;
 var $155$0=$154$0;
 var $155$1=$153;
 ___resumeException($155$0)
 case 55: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1,0); var $157$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl12CommandQueueD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl12CommandQueueD2Ev($2);
 return;
}
function __ZN2cl6KernelD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6KernelD2Ev($2);
 return;
}
function __ZN2cl6BufferD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6BufferD2Ev($2);
 return;
}
function __ZN2cl7ContextD1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl7ContextD2Ev($2);
 return;
}
function __ZN12RenderDevice12RenderThreadEPS_($renderDevice){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $err=sp;
 $3=$renderDevice;
 var $6=$3;
 (function() { try { __THREW__ = 0; return __ZN12RenderDevice13SetKernelArgsEv($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=7;break; }
 case 2: 
 var $8=$3;
 (function() { try { __THREW__ = 0; return __ZN12RenderDevice13ExecuteKernelEv($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $10=$3;
 (function() { try { __THREW__ = 0; return __ZN12RenderDevice15ReadPixelBufferEv($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $12=$3;
 (function() { try { __THREW__ = 0; return __ZN12RenderDevice19FinishExecuteKernelEv($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $14=$3;
 (function() { try { __THREW__ = 0; return __ZN12RenderDevice6FinishEv($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=7;break; }
 case 6: 
 label=21;break;
 case 7: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,13016); var $17$1 = tempRet0;
 var $18=$17$0;
 $4=$18;
 var $19=$17$1;
 $5=$19;
 label=8;break;
 case 8: 
 var $21=$5;
 var $22=_llvm_eh_typeid_for(13016);
 var $23=($21|0)==($22|0);
 if($23){label=9;break;}else{label=24;break;}
 case 9: 
 var $25=$4;
 var $26=___cxa_get_exception_ptr($25);
 var $27=$26;
 __ZN2cl5ErrorC1ERKS0_($err,$27);
 var $28=___cxa_begin_catch($25);
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $31=$3;
 var $32=(function() { try { __THREW__ = 0; return __ZNK12RenderDevice7GetNameEv($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($29,$32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($34,3920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $38=__ZNK2cl5Error4whatEv($err);
 var $39=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($36,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $41=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($39,3824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $43=(function() { try { __THREW__ = 0; return __ZNK2cl5Error3errEv($err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $45=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($41,$43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $47=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($45,3768) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 $1=$47;
 $2=8;
 var $49=$1;
 var $50=$2;
 var $51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$50]($49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 label=20;break;
 case 20: 
 __ZN2cl5ErrorD1Ev($err);
 ___cxa_end_catch();
 label=21;break;
 case 21: 
 STACKTOP=sp;return;
 case 22: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=$55$0;
 $4=$56;
 var $57=$55$1;
 $5=$57;
 __ZN2cl5ErrorD1Ev($err);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=25;break; }
 case 23: 
 label=24;break;
 case 24: 
 var $60=$4;
 var $61=$5;
 var $62$0=$60;
 var $62$1=0;
 var $63$0=$62$0;
 var $63$1=$61;
 ___resumeException($63$0)
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1,0); var $65$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderDevice13SetKernelArgsEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $4;
 var $5=(sp)+(8);
 var $6=(sp)+(16);
 var $7=(sp)+(24);
 var $8=(sp)+(32);
 $1=$this;
 var $9=$1;
 var $10=(($9+20)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($9+52)|0);
 var $13=HEAP32[(($12)>>2)];
 __ZN2cl6BufferC1ERKS0_($2,$13);
 var $14=(function() { try { __THREW__ = 0; return __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($11,0,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=7;break; }
 case 2: 
 __ZN2cl6BufferD1Ev($2);
 var $16=(($9+20)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($9+60)|0);
 var $19=HEAP32[(($18)>>2)];
 __ZN2cl6BufferC1ERKS0_($5,$19);
 var $20=(function() { try { __THREW__ = 0; return __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($17,1,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=9;break; }
 case 3: 
 __ZN2cl6BufferD1Ev($5);
 var $22=(($9+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($9+64)|0);
 var $25=HEAP32[(($24)>>2)];
 __ZN2cl6BufferC1ERKS0_($6,$25);
 var $26=(function() { try { __THREW__ = 0; return __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($23,2,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 __ZN2cl6BufferD1Ev($6);
 var $28=(($9+20)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($9+68)|0);
 var $31=HEAP32[(($30)>>2)];
 __ZN2cl6BufferC1ERKS0_($7,$31);
 var $32=(function() { try { __THREW__ = 0; return __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($29,3,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=13;break; }
 case 5: 
 __ZN2cl6BufferD1Ev($7);
 var $34=(($9+20)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($9+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=__ZN2cl6Kernel6setArgIjEEijT_($35,4,$37);
 var $39=(($9+20)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($9+40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=__ZN2cl6Kernel6setArgIjEEijT_($40,5,$42);
 var $44=(($9+20)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($9+44)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=__ZN2cl6Kernel6setArgIjEEijT_($45,6,$47);
 var $49=(($9+20)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($9+48)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=__ZN2cl6Kernel6setArgIjEEijT_($50,7,$52);
 var $54=(($9+20)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($9+56)|0);
 var $57=HEAP32[(($56)>>2)];
 __ZN2cl6BufferC1ERKS0_($8,$57);
 var $58=(function() { try { __THREW__ = 0; return __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($55,8,$8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=15;break; }
 case 6: 
 __ZN2cl6BufferD1Ev($8);
 var $60=(($9+20)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($9+28)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=__ZN2cl6Kernel6setArgIjEEijT_($61,9,$63);
 var $65=(($9+20)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($9+32)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=__ZN2cl6Kernel6setArgIjEEijT_($66,10,$68);
 STACKTOP=sp;return;
 case 7: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 var $72=$71$0;
 $3=$72;
 var $73=$71$1;
 $4=$73;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 label=17;break;
 case 9: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=$76$0;
 $3=$77;
 var $78=$76$1;
 $4=$78;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 label=17;break;
 case 11: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $82=$81$0;
 $3=$82;
 var $83=$81$1;
 $4=$83;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=18;break; }
 case 12: 
 label=17;break;
 case 13: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1); var $86$1 = tempRet0;
 var $87=$86$0;
 $3=$87;
 var $88=$86$1;
 $4=$88;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 label=17;break;
 case 15: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;
 var $92=$91$0;
 $3=$92;
 var $93=$91$1;
 $4=$93;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 label=17;break;
 case 17: 
 var $96=$3;
 var $97=$4;
 var $98$0=$96;
 var $98$1=0;
 var $99$0=$98$0;
 var $99$1=$97;
 ___resumeException($99$0)
 case 18: 
 var $101$0 = ___cxa_find_matching_catch(-1, -1,0); var $101$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderDevice13ExecuteKernelEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $w;
 var $2=sp;
 var $3;
 var $4;
 var $5=(sp)+(8);
 var $6=(sp)+(32);
 $1=$this;
 var $7=$1;
 var $8=(($7+32)|0);
 var $9=HEAP32[(($8)>>2)];
 $w=$9;
 var $10=$w;
 var $11=(($7+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(((($10>>>0))%(($12>>>0)))&-1);
 var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 var $16=$w;
 var $17=(($7+24)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(((($16>>>0))/(($18>>>0)))&-1);
 var $20=((($19)+(1))|0);
 var $21=(($7+24)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(Math_imul($20,$22)|0);
 $w=$23;
 label=3;break;
 case 3: 
 var $25=(($7+84)|0);
 __ZN2cl5EventC1Ev($2);
 var $26=(function() { try { __THREW__ = 0; return __ZN2cl5EventaSERKS0_($25,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=8;break; }
 case 4: 
 __ZN2cl5EventD1Ev($2);
 var $28=(($7+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($7+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$w;
 __ZN2cl7NDRangeC1Ej($5,$32);
 var $33=(($7+24)|0);
 var $34=HEAP32[(($33)>>2)];
 (function() { try { __THREW__ = 0; return __ZN2cl7NDRangeC1Ej($6,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=10;break; }
 case 5: 
 var $36=(($7+84)|0);
 var $37=(function() { try { __THREW__ = 0; return __ZNK2cl12CommandQueue20enqueueNDRangeKernelERKNS_6KernelERKNS_7NDRangeES6_S6_PKNS_6vectorINS_5EventELj10EEEPS8_($29,$31,17328,$5,$6,0,$36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 (function() { try { __THREW__ = 0; return __ZN2cl7NDRangeD1Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 __ZN2cl7NDRangeD1Ev($5);
 var $40=(($7+32)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41>>>0);
 var $43=(($7+88)|0);
 var $44=HEAPF64[(($43)>>3)];
 var $45=($44)+($42);
 HEAPF64[(($43)>>3)]=$45;
 STACKTOP=sp;return;
 case 8: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1); var $47$1 = tempRet0;
 var $48=$47$0;
 $3=$48;
 var $49=$47$1;
 $4=$49;
 (function() { try { __THREW__ = 0; return __ZN2cl5EventD1Ev($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=16;break; }
 case 9: 
 label=15;break;
 case 10: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 var $53=$52$0;
 $3=$53;
 var $54=$52$1;
 $4=$54;
 label=13;break;
 case 11: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=$56$0;
 $3=$57;
 var $58=$56$1;
 $4=$58;
 (function() { try { __THREW__ = 0; return __ZN2cl7NDRangeD1Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 label=13;break;
 case 13: 
 (function() { try { __THREW__ = 0; return __ZN2cl7NDRangeD1Ev($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=16;break; }
 case 14: 
 label=15;break;
 case 15: 
 var $63=$3;
 var $64=$4;
 var $65$0=$63;
 var $65$1=0;
 var $66$0=$65$0;
 var $66$1=$64;
 ___resumeException($66$0)
 case 16: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1,0); var $68$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderDevice15ReadPixelBufferEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+16)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+56)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8<<2);
 var $10=(($2+28)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($2+72)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+($11<<2))|0);
 var $15=$14;
 var $16=__ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNS_6vectorINS_5EventELj10EEEPS6_($4,$6,0,0,$9,$15,0,0);
 return;
}
function __ZN12RenderDevice19FinishExecuteKernelEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $t1=sp;
 var $t2=(sp)+(8);
 $1=$this;
 var $2=$1;
 var $3=(($2+84)|0);
 var $4=__ZNK2cl5Event4waitEv($3);
 var $5=(($2+84)|0);
 var $6=__ZNK2cl5Event16getProfilingInfoIyEEijPT_($5,4738,$t1);
 var $7=(($2+84)|0);
 var $8=__ZNK2cl5Event16getProfilingInfoIyEEijPT_($7,4739,$t2);
 var $ld$0$0=(($t2)|0);
 var $9$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($t2+4)|0);
 var $9$1=HEAP32[(($ld$1$1)>>2)];
 var $ld$2$0=(($t1)|0);
 var $10$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($t1+4)|0);
 var $10$1=HEAP32[(($ld$3$1)>>2)];
 var $11$0=_i64Subtract($9$0,$9$1,$10$0,$10$1);var $11$1=tempRet0;
 var $12=(($11$0>>>0)+(($11$1>>>0)*4294967296));
 var $13=($12)/(1000000000);
 var $14=(($2+96)|0);
 var $15=HEAPF64[(($14)>>3)];
 var $16=($15)+($13);
 HEAPF64[(($14)>>3)]=$16;
 STACKTOP=sp;return;
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 $7=$this;
 $8=$__s;
 $9=$__mode;
 var $10=$7;
 var $11=(($10+12)|0);
 var $12=$8;
 var $13=$9;
 var $14=__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($11,$12,$13);
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=$10;
 var $18=HEAP32[(($17)>>2)];
 var $19=((($18)-(12))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$10;
 var $23=(($22+$21)|0);
 var $24=$23;
 $5=$24;
 $6=0;
 var $25=$5;
 var $26=$25;
 var $27=$6;
 __ZNSt3__18ios_base5clearEj($26,$27);
 label=4;break;
 case 3: 
 var $29=$10;
 var $30=HEAP32[(($29)>>2)];
 var $31=((($30)-(12))|0);
 var $32=$31;
 var $33=HEAP32[(($32)>>2)];
 var $34=$10;
 var $35=(($34+$33)|0);
 var $36=$35;
 $3=$36;
 $4=4;
 var $37=$3;
 var $38=$37;
 var $39=$4;
 $1=$38;
 $2=$39;
 var $40=$1;
 var $41=(($40+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$2;
 var $44=$42|$43;
 __ZNSt3__18ios_base5clearEj($40,$44);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED2Ev($4,8256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=$4;
 var $7=(($6+112)|0);
 var $8=$7;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($8);
 return;
 case 3: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;
 var $11=$10$0;
 $2=$11;
 var $12=$10$1;
 $3=$12;
 var $13=$4;
 var $14=(($13+112)|0);
 var $15=$14;
 (function() { try { __THREW__ = 0; return __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $18=$2;
 var $19=$3;
 var $20$0=$18;
 var $20$1=0;
 var $21$0=$20$0;
 var $21$1=$19;
 ___resumeException($21$0)
 case 6: 
 var $23$0 = ___cxa_find_matching_catch(-1, -1,0); var $23$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RenderDevice11SetWorkLoadEjjjjPj($this,$offset,$amount,$screenWidth,$screenHeght,$screenPixels){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $i;
 $7=$this;
 $8=$offset;
 $9=$amount;
 $10=$screenWidth;
 $11=$screenHeght;
 $12=$screenPixels;
 var $15=$7;
 var $16=(($15+52)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)!=0;
 if($18){label=2;break;}else{label=7;break;}
 case 2: 
 var $20=(($15+52)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $25=$21;
 __ZdlPv($25);
 label=5;break;
 case 5: 
 label=7;break;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $29=$28$0;
 $13=$29;
 var $30=$28$1;
 $14=$30;
 var $31=$21;
 __ZdlPv($31);
 label=40;break;
 case 7: 
 var $33=(($15+56)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)!=0;
 if($35){label=8;break;}else{label=13;break;}
 case 8: 
 var $37=(($15+56)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=11;break;}else{label=9;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 var $42=$38;
 __ZdlPv($42);
 label=11;break;
 case 11: 
 label=13;break;
 case 12: 
 var $45$0 = ___cxa_find_matching_catch(-1, -1); var $45$1 = tempRet0;
 var $46=$45$0;
 $13=$46;
 var $47=$45$1;
 $14=$47;
 var $48=$38;
 __ZdlPv($48);
 label=40;break;
 case 13: 
 var $50=(($15+60)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)!=0;
 if($52){label=14;break;}else{label=19;break;}
 case 14: 
 var $54=(($15+60)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==0;
 if($56){label=17;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferD1Ev($55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $59=$55;
 __ZdlPv($59);
 label=17;break;
 case 17: 
 label=19;break;
 case 18: 
 var $62$0 = ___cxa_find_matching_catch(-1, -1); var $62$1 = tempRet0;
 var $63=$62$0;
 $13=$63;
 var $64=$62$1;
 $14=$64;
 var $65=$55;
 __ZdlPv($65);
 label=40;break;
 case 19: 
 var $67=(($15+76)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)!=0;
 if($69){label=20;break;}else{label=23;break;}
 case 20: 
 var $71=(($15+76)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($72|0)==0;
 if($73){label=22;break;}else{label=21;break;}
 case 21: 
 var $75=$72;
 __ZdlPv($75);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $78=(($15+80)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)!=0;
 if($80){label=24;break;}else{label=27;break;}
 case 24: 
 var $82=(($15+80)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($83|0)==0;
 if($84){label=26;break;}else{label=25;break;}
 case 25: 
 var $86=$83;
 __ZdlPv($86);
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $89=$8;
 var $90=(($15+28)|0);
 HEAP32[(($90)>>2)]=$89;
 var $91=$9;
 var $92=(($15+32)|0);
 HEAP32[(($92)>>2)]=$91;
 var $93=$10;
 var $94=(($15+40)|0);
 HEAP32[(($94)>>2)]=$93;
 var $95=$11;
 var $96=(($15+44)|0);
 HEAP32[(($96)>>2)]=$95;
 var $97=$12;
 var $98=(($15+72)|0);
 HEAP32[(($98)>>2)]=$97;
 var $99=(($15+32)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101$0=_llvm_umul_with_overflow_i32($100,12);
 var $101$1=tempRet0;
 var $102=$101$1;
 var $103=$101$0;
 var $104=($102?-1:$103);
 var $105=__Znaj($104);
 var $106=$105;
 var $107=(($15+76)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=__Znwj(4);
 var $109=$108;
 var $110=(($15+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($15+32)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=((($113)*(12))&-1);
 var $115=(($15+76)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$116;
 var $$etemp$0$0=9;
 var $$etemp$0$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($109,$111,$$etemp$0$0,$$etemp$0$1,$114,$117,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=33;break; }
 case 28: 
 var $119=(($15+52)|0);
 HEAP32[(($119)>>2)]=$109;
 var $120=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688);
 var $121=(($15)|0);
 var $122=__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($120,$121);
 var $123=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($122,3624);
 var $124=(($15+32)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=((($125)*(12))&-1);
 var $127=(((($126>>>0))/(1024))&-1);
 var $128=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($123,$127);
 var $129=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($128,4480);
 $5=$129;
 $6=8;
 var $130=$5;
 var $131=$6;
 var $132=FUNCTION_TABLE[$131]($130);
 var $133=__Znwj(4);
 var $134=$133;
 var $135=(($15+12)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($15+32)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138<<2);
 var $140=(($15+28)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($15+72)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($143+($141<<2))|0);
 var $145=$144;
 var $$etemp$1$0=2;
 var $$etemp$1$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($134,$136,$$etemp$1$0,$$etemp$1$1,$139,$145,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=34;break; }
 case 29: 
 var $147=(($15+56)|0);
 HEAP32[(($147)>>2)]=$134;
 var $148=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688);
 var $149=(($15)|0);
 var $150=__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($148,$149);
 var $151=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($150,3576);
 var $152=(($15+32)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153<<2);
 var $155=(((($154>>>0))/(1024))&-1);
 var $156=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($151,$155);
 var $157=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($156,4480);
 $3=$157;
 $4=8;
 var $158=$3;
 var $159=$4;
 var $160=FUNCTION_TABLE[$159]($158);
 var $161=(($15+32)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=($162<<1);
 var $164$0=_llvm_umul_with_overflow_i32($163,4);
 var $164$1=tempRet0;
 var $165=$164$1;
 var $166=$164$0;
 var $167=($165?-1:$166);
 var $168=__Znaj($167);
 var $169=$168;
 var $170=(($15+80)|0);
 HEAP32[(($170)>>2)]=$169;
 $i=0;
 label=30;break;
 case 30: 
 var $172=$i;
 var $173=(($15+32)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=($174<<1);
 var $176=($172>>>0)<($175>>>0);
 if($176){label=31;break;}else{label=37;break;}
 case 31: 
 var $178=_rand();
 var $179=$i;
 var $180=(($15+80)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+($179<<2))|0);
 HEAP32[(($182)>>2)]=$178;
 var $183=$i;
 var $184=(($15+80)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+($183<<2))|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($187>>>0)<2;
 if($188){label=32;break;}else{label=35;break;}
 case 32: 
 var $190=$i;
 var $191=(($15+80)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+($190<<2))|0);
 HEAP32[(($193)>>2)]=2;
 label=35;break;
 case 33: 
 var $195$0 = ___cxa_find_matching_catch(-1, -1); var $195$1 = tempRet0;
 var $196=$195$0;
 $13=$196;
 var $197=$195$1;
 $14=$197;
 __ZdlPv($108);
 label=40;break;
 case 34: 
 var $199$0 = ___cxa_find_matching_catch(-1, -1); var $199$1 = tempRet0;
 var $200=$199$0;
 $13=$200;
 var $201=$199$1;
 $14=$201;
 __ZdlPv($133);
 label=40;break;
 case 35: 
 label=36;break;
 case 36: 
 var $204=$i;
 var $205=((($204)+(1))|0);
 $i=$205;
 label=30;break;
 case 37: 
 var $207=__Znwj(4);
 var $208=$207;
 var $209=(($15+12)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($15+32)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212<<2);
 var $214=($213<<1);
 var $215=(($15+80)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=$216;
 var $$etemp$2$0=9;
 var $$etemp$2$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($208,$210,$$etemp$2$0,$$etemp$2$1,$214,$217,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=39;break; }
 case 38: 
 var $219=(($15+60)|0);
 HEAP32[(($219)>>2)]=$208;
 var $220=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17112,2688);
 var $221=(($15)|0);
 var $222=__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($220,$221);
 var $223=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($222,3536);
 var $224=(($15+32)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225<<3);
 var $227=(((($226>>>0))/(1024))&-1);
 var $228=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($223,$227);
 var $229=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($228,4480);
 $1=$229;
 $2=8;
 var $230=$1;
 var $231=$2;
 var $232=FUNCTION_TABLE[$231]($230);
 var $233=(($15+48)|0);
 HEAP32[(($233)>>2)]=0;
 return;
 case 39: 
 var $235$0 = ___cxa_find_matching_catch(-1, -1); var $235$1 = tempRet0;
 var $236=$235$0;
 $13=$236;
 var $237=$235$1;
 $14=$237;
 __ZdlPv($207);
 label=40;break;
 case 40: 
 var $239=$13;
 var $240=$14;
 var $241$0=$239;
 var $241$1=0;
 var $242$0=$241$0;
 var $242$1=$240;
 ___resumeException($242$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_19istreambuf_iteratorIcS2_EEEENS_9enable_ifIXaasr19__is_input_iteratorIT_EE5valuentsr21__is_forward_iteratorISA_EE5valueEvE4typeESA_SA_($this,$__first,$__last){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__first; $__first=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__first)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__last; $__last=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__last)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $__a_i;
 var $__i_i;
 var $46;
 var $47;
 var $48;
 $46=$this;
 var $49=$46;
 $45=$49;
 var $50=$45;
 var $51=(($50)|0);
 $44=$51;
 var $52=$44;
 var $53=$52;
 $43=$53;
 var $54=$43;
 var $55=(($54)|0);
 var $56=(($55)|0);
 var $57=$56;
 var $58=(($57)|0);
 $__a_i=$58;
 $__i_i=0;
 label=2;break;
 case 2: 
 var $60=$__i_i;
 var $61=($60>>>0)<3;
 if($61){label=3;break;}else{label=4;break;}
 case 3: 
 var $63=$__i_i;
 var $64=$__a_i;
 var $65=(($64+($63<<2))|0);
 HEAP32[(($65)>>2)]=0;
 var $66=$__i_i;
 var $67=((($66)+(1))|0);
 $__i_i=$67;
 label=2;break;
 case 4: 
 label=5;break;
 case 5: 
 $35=$__first;
 $36=$__last;
 var $69=$35;
 var $70=$36;
 $33=$69;
 $34=$70;
 var $71=$33;
 $32=$71;
 var $72=$32;
 var $73=(($72)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($74|0)!=0;
 if($75){label=6;break;}else{label=12;break;}
 case 6: 
 var $77=(($72)|0);
 var $78=HEAP32[(($77)>>2)];
 $31=$78;
 var $79=$31;
 var $80=(($79+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($79+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=7;break;}else{label=9;break;}
 case 7: 
 var $86=$79;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=34;break; }
 case 8: 
 $30=$90;
 label=10;break;
 case 9: 
 var $92=(($79+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=HEAP8[($93)];
 $29=$94;
 var $95=$29;
 var $96=($95&255);
 $30=$96;
 label=10;break;
 case 10: 
 var $97=$30;
 $27=$97;
 $28=-1;
 var $98=$27;
 var $99=$28;
 var $100=($98|0)==($99|0);
 if($100){label=11;break;}else{label=12;break;}
 case 11: 
 var $102=(($72)|0);
 HEAP32[(($102)>>2)]=0;
 label=12;break;
 case 12: 
 var $103=(($72)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($104|0)==0;
 var $106=($105&1);
 var $107=$34;
 $26=$107;
 var $108=$26;
 var $109=(($108)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($110|0)!=0;
 if($111){label=13;break;}else{label=19;break;}
 case 13: 
 var $113=(($108)|0);
 var $114=HEAP32[(($113)>>2)];
 $25=$114;
 var $115=$25;
 var $116=(($115+12)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($115+16)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($117|0)==($119|0);
 if($120){label=14;break;}else{label=16;break;}
 case 14: 
 var $122=$115;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+36)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$125]($115) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=34;break; }
 case 15: 
 $24=$126;
 label=17;break;
 case 16: 
 var $128=(($115+12)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=HEAP8[($129)];
 $23=$130;
 var $131=$23;
 var $132=($131&255);
 $24=$132;
 label=17;break;
 case 17: 
 var $133=$24;
 $21=$133;
 $22=-1;
 var $134=$21;
 var $135=$22;
 var $136=($134|0)==($135|0);
 if($136){label=18;break;}else{label=19;break;}
 case 18: 
 var $138=(($108)|0);
 HEAP32[(($138)>>2)]=0;
 label=19;break;
 case 19: 
 var $139=(($108)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==0;
 var $142=($141&1);
 var $143=($106|0)==($142|0);
 var $144=$143^1;
 label=20;break;
 case 20: 
 if($144){label=21;break;}else{label=37;break;}
 case 21: 
 $20=$__first;
 var $147=$20;
 var $148=(($147)|0);
 var $149=HEAP32[(($148)>>2)];
 $19=$149;
 var $150=$19;
 var $151=(($150+12)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($150+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($152|0)==($154|0);
 if($155){label=22;break;}else{label=24;break;}
 case 22: 
 var $157=$150;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+36)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$160]($150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=34;break; }
 case 23: 
 $18=$161;
 label=25;break;
 case 24: 
 var $163=(($150+12)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=HEAP8[($164)];
 $17=$165;
 var $166=$17;
 var $167=($166&255);
 $18=$167;
 label=25;break;
 case 25: 
 var $168=$18;
 var $169=(($168)&255);
 label=26;break;
 case 26: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($49,$169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=34;break; }
 case 27: 
 label=28;break;
 case 28: 
 $16=$__first;
 var $173=$16;
 var $174=(($173)|0);
 var $175=HEAP32[(($174)>>2)];
 $15=$175;
 var $176=$15;
 var $177=(($176+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($176+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=29;break;}else{label=31;break;}
 case 29: 
 var $183=$176;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+40)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=34;break; }
 case 30: 
 $14=$187;
 label=32;break;
 case 31: 
 var $189=(($176+12)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(($190+1)|0);
 HEAP32[(($189)>>2)]=$191;
 var $192=HEAP8[($190)];
 $13=$192;
 var $193=$13;
 var $194=($193&255);
 $14=$194;
 label=32;break;
 case 32: 
 var $195=$14;
 label=33;break;
 case 33: 
 label=5;break;
 case 34: 
 var $198$0 = ___cxa_find_matching_catch(-1, -1,0); var $198$1 = tempRet0;
 var $199=$198$0;
 $47=$199;
 var $200=$198$1;
 $48=$200;
 label=35;break;
 case 35: 
 var $202=$47;
 var $203=___cxa_begin_catch($202);
 $12=$49;
 var $204=$12;
 var $205=(($204)|0);
 $11=$205;
 var $206=$11;
 var $207=$206;
 $10=$207;
 var $208=$10;
 var $209=(($208)|0);
 var $210=(($209)|0);
 var $211=$210;
 var $212=(($211)|0);
 var $213=$212;
 var $214=HEAP8[($213)];
 var $215=($214&255);
 var $216=$215&1;
 var $217=($216|0)!=0;
 if($217){label=36;break;}else{label=38;break;}
 case 36: 
 $9=$49;
 var $219=$9;
 var $220=(($219)|0);
 $8=$220;
 var $221=$8;
 var $222=$221;
 $7=$222;
 var $223=$7;
 var $224=$223;
 $3=$49;
 var $225=$3;
 var $226=(($225)|0);
 $2=$226;
 var $227=$2;
 var $228=$227;
 $1=$228;
 var $229=$1;
 var $230=(($229)|0);
 var $231=(($230)|0);
 var $232=$231;
 var $233=(($232+8)|0);
 var $234=HEAP32[(($233)>>2)];
 $6=$49;
 var $235=$6;
 var $236=(($235)|0);
 $5=$236;
 var $237=$5;
 var $238=$237;
 $4=$238;
 var $239=$4;
 var $240=(($239)|0);
 var $241=(($240)|0);
 var $242=$241;
 var $243=(($242)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=$244&-2;
 $40=$224;
 $41=$234;
 $42=$245;
 var $246=$40;
 var $247=$41;
 var $248=$42;
 $37=$246;
 $38=$247;
 $39=$248;
 var $249=$37;
 var $250=$38;
 __ZdlPv($250);
 label=38;break;
 case 37: 
 label=41;break;
 case 38: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=39;break; }
 case 39: 
 var $254$0 = ___cxa_find_matching_catch(-1, -1); var $254$1 = tempRet0;
 var $255=$254$0;
 $47=$255;
 var $256=$254$1;
 $48=$256;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=43;break; }
 case 40: 
 label=42;break;
 case 41: 
 STACKTOP=sp;return;
 case 42: 
 var $260=$47;
 var $261=$48;
 var $262$0=$260;
 var $262$1=0;
 var $263$0=$262$0;
 var $263$1=$261;
 ___resumeException($263$0)
 case 43: 
 var $265$0 = ___cxa_find_matching_catch(-1, -1,0); var $265$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 44: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $__rt;
 var $__mdstr;
 $1=$this;
 $2=$__s;
 $3=$__mode;
 var $4=$1;
 $__rt=0;
 var $5=(($4+64)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=26;break;}
 case 2: 
 $__rt=$4;
 var $9=$3;
 var $10=$9&-3;
 switch(($10|0)){case 21:case 5:{ label=10;break;}case 12:{ label=11;break;}case 28:{ label=12;break;}case 60:{ label=13;break;}case 29:case 13:{ label=14;break;}case 16:case 48:{ label=3;break;}case 17:case 1:{ label=4;break;}case 8:{ label=5;break;}case 24:{ label=6;break;}case 56:{ label=7;break;}case 25:case 9:{ label=8;break;}case 20:case 52:{ label=9;break;}default:{label=15;break;}}break;
 case 3: 
 $__mdstr=3400;
 label=16;break;
 case 4: 
 $__mdstr=3304;
 label=16;break;
 case 5: 
 $__mdstr=3208;
 label=16;break;
 case 6: 
 $__mdstr=3080;
 label=16;break;
 case 7: 
 $__mdstr=3008;
 label=16;break;
 case 8: 
 $__mdstr=2928;
 label=16;break;
 case 9: 
 $__mdstr=2840;
 label=16;break;
 case 10: 
 $__mdstr=2768;
 label=16;break;
 case 11: 
 $__mdstr=2664;
 label=16;break;
 case 12: 
 $__mdstr=2608;
 label=16;break;
 case 13: 
 $__mdstr=2536;
 label=16;break;
 case 14: 
 $__mdstr=2384;
 label=16;break;
 case 15: 
 $__rt=0;
 label=16;break;
 case 16: 
 var $25=$__rt;
 var $26=($25|0)!=0;
 if($26){label=17;break;}else{label=25;break;}
 case 17: 
 var $28=$2;
 var $29=$__mdstr;
 var $30=_fopen($28,$29);
 var $31=(($4+64)|0);
 HEAP32[(($31)>>2)]=$30;
 var $32=(($4+64)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)!=0;
 if($34){label=18;break;}else{label=23;break;}
 case 18: 
 var $36=$3;
 var $37=(($4+88)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=$3;
 var $39=$38&2;
 var $40=($39|0)!=0;
 if($40){label=19;break;}else{label=22;break;}
 case 19: 
 var $42=(($4+64)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=_fseek($43,0,2);
 var $45=($44|0)!=0;
 if($45){label=20;break;}else{label=21;break;}
 case 20: 
 var $47=(($4+64)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=_fclose($48);
 var $50=(($4+64)|0);
 HEAP32[(($50)>>2)]=0;
 $__rt=0;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=24;break;
 case 23: 
 $__rt=0;
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $57=$__rt;
 return $57;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($2);
 return;
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=$4;
 __ZdlPv($6);
 return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1); var $8$1 = tempRet0;
 var $9=$8$0;
 $2=$9;
 var $10=$8$1;
 $3=$10;
 var $11=$4;
 __ZdlPv($11);
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=$3;
 var $15$0=$13;
 var $15$1=0;
 var $16$0=$15$0;
 var $16$1=$14;
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=((($3)-(8))|0);
 var $5=$4;
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($5);
 return;
}
function __ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=((($3)-(8))|0);
 var $5=$4;
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($5);
 return;
}
function __ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($10);
 return;
}
function __ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($10);
 return;
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$vtt;
 var $5=$1;
 var $6=$2;
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 HEAP32[(($8)>>2)]=$7;
 var $9=(($6+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5;
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)-(12))|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=$5;
 var $17=(($16+$15)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=$10;
 var $19=(($6+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$5;
 var $22=(($21+8)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=$20;
 var $24=(($5+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $26=$5;
 var $27=(($6+4)|0);
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($26,$27);
 return;
 case 3: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 var $30=$29$0;
 $3=$30;
 var $31=$29$1;
 $4=$31;
 var $32=$5;
 var $33=(($6+4)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($32,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $36=$3;
 var $37=$4;
 var $38$0=$36;
 var $38$1=0;
 var $39$0=$38$0;
 var $39$1=$37;
 ___resumeException($39$0)
 case 6: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1,0); var $41$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($2);
 return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=$4;
 HEAP32[(($5)>>2)]=7536;
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 label=6;break;
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 $2=$10;
 var $11=$9$1;
 $3=$11;
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=___cxa_begin_catch($13);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=10;break; }
 case 5: 
 label=6;break;
 case 6: 
 var $17=(($4+96)|0);
 var $18=HEAP8[($17)];
 var $19=(($18)&1);
 if($19){label=7;break;}else{label=11;break;}
 case 7: 
 var $21=(($4+32)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=8;break;}
 case 8: 
 __ZdaPv($22);
 label=9;break;
 case 9: 
 label=11;break;
 case 10: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=$27$0;
 $2=$28;
 var $29=$27$1;
 $3=$29;
 var $30=$4;
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 11: 
 var $32=(($4+97)|0);
 var $33=HEAP8[($32)];
 var $34=(($33)&1);
 if($34){label=12;break;}else{label=15;break;}
 case 12: 
 var $36=(($4+56)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=14;break;}else{label=13;break;}
 case 13: 
 __ZdaPv($37);
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $42=$4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($42);
 return;
 case 16: 
 label=17;break;
 case 17: 
 var $45=$2;
 var $46=$3;
 var $47$0=$45;
 var $47$1=0;
 var $48$0=$47$0;
 var $48$1=$46;
 ___resumeException($48$0)
 case 18: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1,0); var $50$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $__t_i;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $__tmp_i_i_i1;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $__tmp_i_i_i;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35=sp;
 var $36=(sp)+(8);
 var $37;
 var $38;
 var $39=(sp)+(16);
 var $40=(sp)+(24);
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46=(sp)+(32);
 var $47=(sp)+(40);
 var $48;
 var $49;
 var $50;
 var $51;
 var $__rt;
 var $__h=(sp)+(48);
 var $52;
 var $53;
 $51=$this;
 var $54=$51;
 $__rt=0;
 var $55=(($54+64)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)!=0;
 if($57){label=2;break;}else{label=20;break;}
 case 2: 
 $__rt=$54;
 var $59=(($54+64)|0);
 var $60=HEAP32[(($59)>>2)];
 $48=$__h;
 $49=$60;
 $50=522;
 var $61=$48;
 var $62=$49;
 var $63=$50;
 $45=$61;
 HEAP32[(($46)>>2)]=$62;
 HEAP32[(($47)>>2)]=$63;
 var $64=$45;
 var $65=(($64)|0);
 $44=$46;
 var $66=$44;
 var $67=HEAP32[(($66)>>2)];
 $30=$47;
 var $68=$30;
 var $69=HEAP32[(($68)>>2)];
 $41=$65;
 $42=$67;
 $43=$69;
 var $70=$41;
 var $71=$42;
 var $72=$43;
 $38=$70;
 HEAP32[(($39)>>2)]=$71;
 HEAP32[(($40)>>2)]=$72;
 var $73=$38;
 var $74=$73;
 $37=$39;
 var $75=$37;
 var $76=HEAP32[(($75)>>2)];
 $31=$40;
 var $77=$31;
 var $78=HEAP32[(($77)>>2)];
 $34=$74;
 HEAP32[(($35)>>2)]=$76;
 HEAP32[(($36)>>2)]=$78;
 var $79=$34;
 var $80=(($79)|0);
 $33=$35;
 var $81=$33;
 var $82=HEAP32[(($81)>>2)];
 HEAP32[(($80)>>2)]=$82;
 var $83=(($79+4)|0);
 $32=$36;
 var $84=$32;
 var $85=HEAP32[(($84)>>2)];
 HEAP32[(($83)>>2)]=$85;
 var $86=$54;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+24)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $92=($90|0)!=0;
 if($92){label=4;break;}else{label=10;break;}
 case 4: 
 $__rt=0;
 label=10;break;
 case 5: 
 var $95$0 = ___cxa_find_matching_catch(-1, -1); var $95$1 = tempRet0;
 var $96=$95$0;
 $52=$96;
 var $97=$95$1;
 $53=$97;
 $17=$__h;
 var $98=$17;
 $16=$98;
 var $99=$16;
 $12=$99;
 $13=0;
 var $100=$12;
 var $101=(($100)|0);
 $11=$101;
 var $102=$11;
 var $103=$102;
 $10=$103;
 var $104=$10;
 var $105=(($104)|0);
 var $106=HEAP32[(($105)>>2)];
 $__tmp_i_i_i1=$106;
 var $107=$13;
 var $108=(($100)|0);
 $9=$108;
 var $109=$9;
 var $110=$109;
 $8=$110;
 var $111=$8;
 var $112=(($111)|0);
 HEAP32[(($112)>>2)]=$107;
 var $113=$__tmp_i_i_i1;
 var $114=($113|0)!=0;
 if($114){label=6;break;}else{label=9;break;}
 case 6: 
 var $116=(($100)|0);
 $7=$116;
 var $117=$7;
 var $118=$117;
 $6=$118;
 var $119=$6;
 var $120=(($119+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=$__tmp_i_i_i1;
 var $123=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 label=9;break;
 case 8: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1,0); var $126$1 = tempRet0;
 var $127=$126$0;
 $14=$127;
 var $128=$126$1;
 $15=$128;
 var $129=$14;
 ___cxa_call_unexpected($129);
 throw "Reached an unreachable!";
 case 9: 
 label=19;break;
 case 10: 
 $5=$__h;
 var $131=$5;
 var $132=(($131)|0);
 $4=$132;
 var $133=$4;
 var $134=$133;
 $3=$134;
 var $135=$3;
 var $136=(($135)|0);
 var $137=HEAP32[(($136)>>2)];
 $__t_i=$137;
 var $138=(($131)|0);
 $2=$138;
 var $139=$2;
 var $140=$139;
 $1=$140;
 var $141=$1;
 var $142=(($141)|0);
 HEAP32[(($142)>>2)]=0;
 var $143=$__t_i;
 var $144=(function() { try { __THREW__ = 0; return _fclose($143) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=5;break; }
 case 11: 
 var $146=($144|0)==0;
 if($146){label=12;break;}else{label=13;break;}
 case 12: 
 var $148=(($54+64)|0);
 HEAP32[(($148)>>2)]=0;
 label=14;break;
 case 13: 
 $__rt=0;
 label=14;break;
 case 14: 
 $29=$__h;
 var $151=$29;
 $28=$151;
 var $152=$28;
 $24=$152;
 $25=0;
 var $153=$24;
 var $154=(($153)|0);
 $23=$154;
 var $155=$23;
 var $156=$155;
 $22=$156;
 var $157=$22;
 var $158=(($157)|0);
 var $159=HEAP32[(($158)>>2)];
 $__tmp_i_i_i=$159;
 var $160=$25;
 var $161=(($153)|0);
 $21=$161;
 var $162=$21;
 var $163=$162;
 $20=$163;
 var $164=$20;
 var $165=(($164)|0);
 HEAP32[(($165)>>2)]=$160;
 var $166=$__tmp_i_i_i;
 var $167=($166|0)!=0;
 if($167){label=15;break;}else{label=18;break;}
 case 15: 
 var $169=(($153)|0);
 $19=$169;
 var $170=$19;
 var $171=$170;
 $18=$171;
 var $172=$18;
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$__tmp_i_i_i;
 var $176=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($175) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 label=18;break;
 case 17: 
 var $179$0 = ___cxa_find_matching_catch(-1, -1); var $179$1 = tempRet0;
 var $180=$179$0;
 $26=$180;
 var $181=$179$1;
 $27=$181;
 var $182=$26;
 ___cxa_call_unexpected($182);
 throw "Reached an unreachable!";
 case 18: 
 label=20;break;
 case 19: 
 label=21;break;
 case 20: 
 var $185=$__rt;
 STACKTOP=sp;return $185;
 case 21: 
 var $187=$52;
 var $188=$53;
 var $189$0=$187;
 var $189$1=0;
 var $190$0=$189$0;
 var $190$1=$188;
 ___resumeException($190$0)
 var $192$0 = ___cxa_find_matching_catch(-1, -1,0); var $192$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=$4;
 __ZdlPv($6);
 return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1); var $8$1 = tempRet0;
 var $9=$8$0;
 $2=$9;
 var $10=$8$1;
 $3=$10;
 var $11=$4;
 __ZdlPv($11);
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=$3;
 var $15$0=$13;
 var $15$1=0;
 var $16$0=$15$0;
 var $16$1=$14;
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $__old_anc;
 $10=$this;
 $11=$__loc;
 var $12=$10;
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($12);
 var $18=$11;
 $9=$18;
 var $19=$9;
 var $20=__ZNKSt3__16locale9use_facetERNS0_2idE($19,16536);
 var $21=$20;
 var $22=(($12+68)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($12+98)|0);
 var $24=HEAP8[($23)];
 var $25=(($24)&1);
 var $26=($25&1);
 $__old_anc=$26;
 var $27=(($12+68)|0);
 var $28=HEAP32[(($27)>>2)];
 $8=$28;
 var $29=$8;
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+28)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=FUNCTION_TABLE[$33]($29);
 var $35=(($12+98)|0);
 var $36=($34&1);
 HEAP8[($35)]=$36;
 var $37=$__old_anc;
 var $38=(($37)&1);
 var $39=($38&1);
 var $40=(($12+98)|0);
 var $41=HEAP8[($40)];
 var $42=(($41)&1);
 var $43=($42&1);
 var $44=($39|0)!=($43|0);
 if($44){label=2;break;}else{label=14;break;}
 case 2: 
 var $46=$12;
 $4=$46;
 $5=0;
 $6=0;
 $7=0;
 var $47=$4;
 var $48=$5;
 var $49=(($47+8)|0);
 HEAP32[(($49)>>2)]=$48;
 var $50=$6;
 var $51=(($47+12)|0);
 HEAP32[(($51)>>2)]=$50;
 var $52=$7;
 var $53=(($47+16)|0);
 HEAP32[(($53)>>2)]=$52;
 var $54=$12;
 $1=$54;
 $2=0;
 $3=0;
 var $55=$1;
 var $56=$2;
 var $57=(($55+24)|0);
 HEAP32[(($57)>>2)]=$56;
 var $58=(($55+20)|0);
 HEAP32[(($58)>>2)]=$56;
 var $59=$3;
 var $60=(($55+28)|0);
 HEAP32[(($60)>>2)]=$59;
 var $61=(($12+98)|0);
 var $62=HEAP8[($61)];
 var $63=(($62)&1);
 if($63){label=3;break;}else{label=8;break;}
 case 3: 
 var $65=(($12+96)|0);
 var $66=HEAP8[($65)];
 var $67=(($66)&1);
 if($67){label=4;break;}else{label=7;break;}
 case 4: 
 var $69=(($12+32)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)==0;
 if($71){label=6;break;}else{label=5;break;}
 case 5: 
 __ZdaPv($70);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $75=(($12+97)|0);
 var $76=HEAP8[($75)];
 var $77=(($76)&1);
 var $78=(($12+96)|0);
 var $79=($77&1);
 HEAP8[($78)]=$79;
 var $80=(($12+60)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($12+52)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($12+56)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($12+32)|0);
 HEAP32[(($85)>>2)]=$84;
 var $86=(($12+60)|0);
 HEAP32[(($86)>>2)]=0;
 var $87=(($12+56)|0);
 HEAP32[(($87)>>2)]=0;
 var $88=(($12+97)|0);
 HEAP8[($88)]=0;
 label=13;break;
 case 8: 
 var $90=(($12+96)|0);
 var $91=HEAP8[($90)];
 var $92=(($91)&1);
 if($92){label=11;break;}else{label=9;break;}
 case 9: 
 var $94=(($12+32)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($12+44)|0);
 var $97=(($96)|0);
 var $98=($95|0)!=($97|0);
 if($98){label=10;break;}else{label=11;break;}
 case 10: 
 var $100=(($12+52)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($12+60)|0);
 HEAP32[(($102)>>2)]=$101;
 var $103=(($12+32)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($12+56)|0);
 HEAP32[(($105)>>2)]=$104;
 var $106=(($12+97)|0);
 HEAP8[($106)]=0;
 var $107=(($12+52)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=__Znaj($108);
 var $110=(($12+32)|0);
 HEAP32[(($110)>>2)]=$109;
 var $111=(($12+96)|0);
 HEAP8[($111)]=1;
 label=12;break;
 case 11: 
 var $113=(($12+52)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(($12+60)|0);
 HEAP32[(($115)>>2)]=$114;
 var $116=(($12+60)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=__Znaj($117);
 var $119=(($12+56)|0);
 HEAP32[(($119)>>2)]=$118;
 var $120=(($12+97)|0);
 HEAP8[($120)]=1;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9=sp;
 var $10;
 var $11;
 var $12=(sp)+(8);
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19=(sp)+(16);
 var $20=(sp)+(24);
 $17=$this;
 $18=$__s;
 HEAP32[(($19)>>2)]=$__n;
 var $21=$17;
 var $22=$21;
 $13=$22;
 $14=0;
 $15=0;
 $16=0;
 var $23=$13;
 var $24=$14;
 var $25=(($23+8)|0);
 HEAP32[(($25)>>2)]=$24;
 var $26=$15;
 var $27=(($23+12)|0);
 HEAP32[(($27)>>2)]=$26;
 var $28=$16;
 var $29=(($23+16)|0);
 HEAP32[(($29)>>2)]=$28;
 var $30=$21;
 $1=$30;
 $2=0;
 $3=0;
 var $31=$1;
 var $32=$2;
 var $33=(($31+24)|0);
 HEAP32[(($33)>>2)]=$32;
 var $34=(($31+20)|0);
 HEAP32[(($34)>>2)]=$32;
 var $35=$3;
 var $36=(($31+28)|0);
 HEAP32[(($36)>>2)]=$35;
 var $37=(($21+96)|0);
 var $38=HEAP8[($37)];
 var $39=(($38)&1);
 if($39){label=2;break;}else{label=5;break;}
 case 2: 
 var $41=(($21+32)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==0;
 if($43){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($42);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $47=(($21+97)|0);
 var $48=HEAP8[($47)];
 var $49=(($48)&1);
 if($49){label=6;break;}else{label=9;break;}
 case 6: 
 var $51=(($21+56)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=8;break;}else{label=7;break;}
 case 7: 
 __ZdaPv($52);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $57=HEAP32[(($19)>>2)];
 var $58=(($21+52)|0);
 HEAP32[(($58)>>2)]=$57;
 var $59=(($21+52)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60>>>0)>8;
 if($61){label=10;break;}else{label=15;break;}
 case 10: 
 var $63=(($21+98)|0);
 var $64=HEAP8[($63)];
 var $65=(($64)&1);
 if($65){label=11;break;}else{label=13;break;}
 case 11: 
 var $67=$18;
 var $68=($67|0)!=0;
 if($68){label=12;break;}else{label=13;break;}
 case 12: 
 var $70=$18;
 var $71=(($21+32)|0);
 HEAP32[(($71)>>2)]=$70;
 var $72=(($21+96)|0);
 HEAP8[($72)]=0;
 label=14;break;
 case 13: 
 var $74=(($21+52)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=__Znaj($75);
 var $77=(($21+32)|0);
 HEAP32[(($77)>>2)]=$76;
 var $78=(($21+96)|0);
 HEAP8[($78)]=1;
 label=14;break;
 case 14: 
 label=16;break;
 case 15: 
 var $81=(($21+44)|0);
 var $82=(($81)|0);
 var $83=(($21+32)|0);
 HEAP32[(($83)>>2)]=$82;
 var $84=(($21+52)|0);
 HEAP32[(($84)>>2)]=8;
 var $85=(($21+96)|0);
 HEAP8[($85)]=0;
 label=16;break;
 case 16: 
 var $87=(($21+98)|0);
 var $88=HEAP8[($87)];
 var $89=(($88)&1);
 if($89){label=25;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($20)>>2)]=8;
 $10=$19;
 $11=$20;
 var $91=$10;
 var $92=$11;
 var $tmp_i=$9;
 var $tmp1_i=$12;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $7=$91;
 $8=$92;
 var $93=$7;
 var $94=$8;
 $4=$9;
 $5=$93;
 $6=$94;
 var $95=$4;
 var $96=$5;
 var $97=HEAP32[(($96)>>2)];
 var $98=$6;
 var $99=HEAP32[(($98)>>2)];
 var $100=($97|0)<($99|0);
 if($100){label=18;break;}else{label=19;break;}
 case 18: 
 var $102=$8;
 var $105=$102;label=20;break;
 case 19: 
 var $104=$7;
 var $105=$104;label=20;break;
 case 20: 
 var $105;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($21+60)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=$18;
 var $109=($108|0)!=0;
 if($109){label=21;break;}else{label=23;break;}
 case 21: 
 var $111=(($21+60)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112>>>0)>=8;
 if($113){label=22;break;}else{label=23;break;}
 case 22: 
 var $115=$18;
 var $116=(($21+56)|0);
 HEAP32[(($116)>>2)]=$115;
 var $117=(($21+97)|0);
 HEAP8[($117)]=0;
 label=24;break;
 case 23: 
 var $119=(($21+60)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=__Znaj($120);
 var $122=(($21+56)|0);
 HEAP32[(($122)>>2)]=$121;
 var $123=(($21+97)|0);
 HEAP8[($123)]=1;
 label=24;break;
 case 24: 
 label=26;break;
 case 25: 
 var $126=(($21+60)|0);
 HEAP32[(($126)>>2)]=0;
 var $127=(($21+56)|0);
 HEAP32[(($127)>>2)]=0;
 var $128=(($21+97)|0);
 HEAP8[($128)]=0;
 label=26;break;
 case 26: 
 var $130=$21;
 STACKTOP=sp;return $130;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$__off$0,$__off$1,$__way,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3=sp;
 var $4;
 var $5=(sp)+(8);
 var $6;
 var $7=(sp)+(16);
 var $8;
 var $9=(sp)+(24);
 var $10;
 var $11=(sp)+(32);
 var $12;
 var $13=(sp)+(40);
 var $14;
 var $15=(sp)+(48);
 var $16;
 var $17=(sp)+(56);
 var $18;
 var $19=(sp)+(64);
 var $20;
 var $21;
 var $22=(sp)+(72);
 var $23;
 var $24;
 var $__width;
 var $__whence;
 var $__r=(sp)+(80);
 var $25=(sp)+(96);
 $21=$this;
 var $st$0$0=(($22)|0);
 HEAP32[(($st$0$0)>>2)]=$__off$0;
 var $st$1$1=(($22+4)|0);
 HEAP32[(($st$1$1)>>2)]=$__off$1;
 $23=$__way;
 $24=$0;
 var $26=$21;
 var $27=(($26+68)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)!=0;
 if($29){label=3;break;}else{label=2;break;}
 case 2: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 __ZNSt8bad_castC2Ev($32);
 ___cxa_throw($31,11472,(394));
 throw "Reached an unreachable!";
 case 3: 
 var $34=(($26+68)|0);
 var $35=HEAP32[(($34)>>2)];
 $20=$35;
 var $36=$20;
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+24)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($36);
 $__width=$41;
 var $42=(($26+64)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){label=7;break;}else{label=4;break;}
 case 4: 
 var $46=$__width;
 var $47=($46|0)<=0;
 if($47){label=5;break;}else{label=6;break;}
 case 5: 
 var $ld$2$0=(($22)|0);
 var $49$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($22+4)|0);
 var $49$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $50=(($49$0|0) != ($$etemp$4$0|0)) | (($49$1|0) != ($$etemp$4$1|0));
 if($50){label=7;break;}else{label=6;break;}
 case 6: 
 var $52=$26;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+24)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=FUNCTION_TABLE[$55]($26);
 var $57=($56|0)!=0;
 if($57){label=7;break;}else{label=8;break;}
 case 7: 
 $18=$agg_result;
 var $$etemp$5$0=-1;
 var $$etemp$5$1=-1;
 var $st$6$0=(($19)|0);
 HEAP32[(($st$6$0)>>2)]=$$etemp$5$0;
 var $st$7$1=(($19+4)|0);
 HEAP32[(($st$7$1)>>2)]=$$etemp$5$1;
 var $59=$18;
 var $ld$8$0=(($19)|0);
 var $60$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($19+4)|0);
 var $60$1=HEAP32[(($ld$9$1)>>2)];
 $16=$59;
 var $st$10$0=(($17)|0);
 HEAP32[(($st$10$0)>>2)]=$60$0;
 var $st$11$1=(($17+4)|0);
 HEAP32[(($st$11$1)>>2)]=$60$1;
 var $61=$16;
 var $62=(($61)|0);
 var $63=$62;
 HEAP32[(($63)>>2)]=0; HEAP32[((($63)+(4))>>2)]=0;
 var $64=(($61+8)|0);
 var $ld$12$0=(($17)|0);
 var $65$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($17+4)|0);
 var $65$1=HEAP32[(($ld$13$1)>>2)];
 var $st$14$0=(($64)|0);
 HEAP32[(($st$14$0)>>2)]=$65$0;
 var $st$15$1=(($64+4)|0);
 HEAP32[(($st$15$1)>>2)]=$65$1;
 label=19;break;
 case 8: 
 var $67=$23;
 if(($67|0)==1){ label=10;break;}else if(($67|0)==2){ label=11;break;}else if(($67|0)==0){ label=9;break;}else{label=12;break;}
 case 9: 
 $__whence=0;
 label=13;break;
 case 10: 
 $__whence=1;
 label=13;break;
 case 11: 
 $__whence=2;
 label=13;break;
 case 12: 
 $4=$agg_result;
 var $$etemp$16$0=-1;
 var $$etemp$16$1=-1;
 var $st$17$0=(($5)|0);
 HEAP32[(($st$17$0)>>2)]=$$etemp$16$0;
 var $st$18$1=(($5+4)|0);
 HEAP32[(($st$18$1)>>2)]=$$etemp$16$1;
 var $72=$4;
 var $ld$19$0=(($5)|0);
 var $73$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($5+4)|0);
 var $73$1=HEAP32[(($ld$20$1)>>2)];
 $2=$72;
 var $st$21$0=(($3)|0);
 HEAP32[(($st$21$0)>>2)]=$73$0;
 var $st$22$1=(($3+4)|0);
 HEAP32[(($st$22$1)>>2)]=$73$1;
 var $74=$2;
 var $75=(($74)|0);
 var $76=$75;
 HEAP32[(($76)>>2)]=0; HEAP32[((($76)+(4))>>2)]=0;
 var $77=(($74+8)|0);
 var $ld$23$0=(($3)|0);
 var $78$0=HEAP32[(($ld$23$0)>>2)];
 var $ld$24$1=(($3+4)|0);
 var $78$1=HEAP32[(($ld$24$1)>>2)];
 var $st$25$0=(($77)|0);
 HEAP32[(($st$25$0)>>2)]=$78$0;
 var $st$26$1=(($77+4)|0);
 HEAP32[(($st$26$1)>>2)]=$78$1;
 label=19;break;
 case 13: 
 var $80=(($26+64)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$__width;
 var $83=($82|0)>0;
 if($83){label=14;break;}else{label=15;break;}
 case 14: 
 var $85=$__width;
 var $86$0=$85;
 var $86$1=((((($85|0)<0))|0)?-1:0);
 var $ld$27$0=(($22)|0);
 var $87$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($22+4)|0);
 var $87$1=HEAP32[(($ld$28$1)>>2)];
 var $88$0=___muldi3($86$0,$86$1,$87$0,$87$1);var $88$1=tempRet0;
 var $91$1=$88$1;var $91$0=$88$0;label=16;break;
 case 15: 
 var $91$1=0;var $91$0=0;label=16;break;
 case 16: 
 var $91$0;
 var $91$1;
 var $92$0=$91$0;
 var $92=$92$0;
 var $93=$__whence;
 var $94=_fseek($81,$92,$93);
 var $95=($94|0)!=0;
 if($95){label=17;break;}else{label=18;break;}
 case 17: 
 $8=$agg_result;
 var $$etemp$29$0=-1;
 var $$etemp$29$1=-1;
 var $st$30$0=(($9)|0);
 HEAP32[(($st$30$0)>>2)]=$$etemp$29$0;
 var $st$31$1=(($9+4)|0);
 HEAP32[(($st$31$1)>>2)]=$$etemp$29$1;
 var $97=$8;
 var $ld$32$0=(($9)|0);
 var $98$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($9+4)|0);
 var $98$1=HEAP32[(($ld$33$1)>>2)];
 $6=$97;
 var $st$34$0=(($7)|0);
 HEAP32[(($st$34$0)>>2)]=$98$0;
 var $st$35$1=(($7+4)|0);
 HEAP32[(($st$35$1)>>2)]=$98$1;
 var $99=$6;
 var $100=(($99)|0);
 var $101=$100;
 HEAP32[(($101)>>2)]=0; HEAP32[((($101)+(4))>>2)]=0;
 var $102=(($99+8)|0);
 var $ld$36$0=(($7)|0);
 var $103$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($7+4)|0);
 var $103$1=HEAP32[(($ld$37$1)>>2)];
 var $st$38$0=(($102)|0);
 HEAP32[(($st$38$0)>>2)]=$103$0;
 var $st$39$1=(($102+4)|0);
 HEAP32[(($st$39$1)>>2)]=$103$1;
 label=19;break;
 case 18: 
 var $105=(($26+64)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=_ftell($106);
 var $108$0=$107;
 var $108$1=((((($107|0)<0))|0)?-1:0);
 $12=$__r;
 var $st$40$0=(($13)|0);
 HEAP32[(($st$40$0)>>2)]=$108$0;
 var $st$41$1=(($13+4)|0);
 HEAP32[(($st$41$1)>>2)]=$108$1;
 var $109=$12;
 var $ld$42$0=(($13)|0);
 var $110$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($13+4)|0);
 var $110$1=HEAP32[(($ld$43$1)>>2)];
 $10=$109;
 var $st$44$0=(($11)|0);
 HEAP32[(($st$44$0)>>2)]=$110$0;
 var $st$45$1=(($11+4)|0);
 HEAP32[(($st$45$1)>>2)]=$110$1;
 var $111=$10;
 var $112=(($111)|0);
 var $113=$112;
 HEAP32[(($113)>>2)]=0; HEAP32[((($113)+(4))>>2)]=0;
 var $114=(($111+8)|0);
 var $ld$46$0=(($11)|0);
 var $115$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($11+4)|0);
 var $115$1=HEAP32[(($ld$47$1)>>2)];
 var $st$48$0=(($114)|0);
 HEAP32[(($st$48$0)>>2)]=$115$0;
 var $st$49$1=(($114+4)|0);
 HEAP32[(($st$49$1)>>2)]=$115$1;
 var $116=(($26+72)|0);
 var $117=$25;
 var $118=$116;
 assert(8 % 1 === 0);HEAP32[(($117)>>2)]=HEAP32[(($118)>>2)];HEAP32[((($117)+(4))>>2)]=HEAP32[((($118)+(4))>>2)];
 var $tmp=$15;
 var $tmp1=$25;
 assert(8 % 1 === 0);(_memcpy($tmp, $tmp1, 8)|0);
 $14=$__r;
 var $119=$14;
 var $120=(($119)|0);
 var $121=$120;
 var $122=$15;
 assert(8 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];
 var $123=$agg_result;
 var $124=$__r;
 assert(16 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];HEAP32[((($123)+(8))>>2)]=HEAP32[((($124)+(8))>>2)];HEAP32[((($123)+(12))>>2)]=HEAP32[((($124)+(12))>>2)];
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$__sp,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__sp; $__sp=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__sp)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($__sp)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($__sp)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($__sp)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6=(sp)+(8);
 var $7;
 var $8;
 var $9=(sp)+(16);
 var $10;
 var $11=(sp)+(24);
 var $12;
 var $13;
 var $14=(sp)+(32);
 $12=$this;
 $13=$0;
 var $15=$12;
 var $16=(($15+64)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=$15;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($15);
 var $25=($24|0)!=0;
 if($25){label=3;break;}else{label=4;break;}
 case 3: 
 $10=$agg_result;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $st$1$0=(($11)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($11+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $27=$10;
 var $ld$3$0=(($11)|0);
 var $28$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($11+4)|0);
 var $28$1=HEAP32[(($ld$4$1)>>2)];
 $8=$27;
 var $st$5$0=(($9)|0);
 HEAP32[(($st$5$0)>>2)]=$28$0;
 var $st$6$1=(($9+4)|0);
 HEAP32[(($st$6$1)>>2)]=$28$1;
 var $29=$8;
 var $30=(($29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=0; HEAP32[((($31)+(4))>>2)]=0;
 var $32=(($29+8)|0);
 var $ld$7$0=(($9)|0);
 var $33$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($9+4)|0);
 var $33$1=HEAP32[(($ld$8$1)>>2)];
 var $st$9$0=(($32)|0);
 HEAP32[(($st$9$0)>>2)]=$33$0;
 var $st$10$1=(($32+4)|0);
 HEAP32[(($st$10$1)>>2)]=$33$1;
 label=7;break;
 case 4: 
 var $35=(($15+64)|0);
 var $36=HEAP32[(($35)>>2)];
 $2=$__sp;
 var $37=$2;
 var $38=(($37+8)|0);
 var $ld$11$0=(($38)|0);
 var $39$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$12$1)>>2)];
 var $40$0=$39$0;
 var $40=$40$0;
 var $41=_fseek($36,$40,0);
 var $42=($41|0)!=0;
 if($42){label=5;break;}else{label=6;break;}
 case 5: 
 $5=$agg_result;
 var $$etemp$13$0=-1;
 var $$etemp$13$1=-1;
 var $st$14$0=(($6)|0);
 HEAP32[(($st$14$0)>>2)]=$$etemp$13$0;
 var $st$15$1=(($6+4)|0);
 HEAP32[(($st$15$1)>>2)]=$$etemp$13$1;
 var $44=$5;
 var $ld$16$0=(($6)|0);
 var $45$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($6+4)|0);
 var $45$1=HEAP32[(($ld$17$1)>>2)];
 $3=$44;
 var $st$18$0=(($4)|0);
 HEAP32[(($st$18$0)>>2)]=$45$0;
 var $st$19$1=(($4+4)|0);
 HEAP32[(($st$19$1)>>2)]=$45$1;
 var $46=$3;
 var $47=(($46)|0);
 var $48=$47;
 HEAP32[(($48)>>2)]=0; HEAP32[((($48)+(4))>>2)]=0;
 var $49=(($46+8)|0);
 var $ld$20$0=(($4)|0);
 var $50$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($4+4)|0);
 var $50$1=HEAP32[(($ld$21$1)>>2)];
 var $st$22$0=(($49)|0);
 HEAP32[(($st$22$0)>>2)]=$50$0;
 var $st$23$1=(($49+4)|0);
 HEAP32[(($st$23$1)>>2)]=$50$1;
 label=7;break;
 case 6: 
 var $52=(($15+72)|0);
 $7=$__sp;
 var $53=$7;
 var $54=(($53)|0);
 var $55=$14;
 var $56=$54;
 assert(8 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];
 var $57=$52;
 var $58=$14;
 assert(8 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];
 var $59=$agg_result;
 var $60=$__sp;
 assert(16 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];HEAP32[((($59)+(12))>>2)]=HEAP32[((($60)+(12))>>2)];
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $__r;
 var $__extbe=sp;
 var $__nmemb;
 var $__c=(sp)+(8);
 var $__state=(sp)+(16);
 var $__update_st;
 var $__width;
 var $__off;
 $27=$this;
 var $28=$27;
 var $29=(($28+64)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=2;break;}else{label=3;break;}
 case 2: 
 $26=0;
 label=36;break;
 case 3: 
 var $34=(($28+68)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)!=0;
 if($36){label=5;break;}else{label=4;break;}
 case 4: 
 var $38=___cxa_allocate_exception(4);
 var $39=$38;
 __ZNSt8bad_castC2Ev($39);
 ___cxa_throw($38,11472,(394));
 throw "Reached an unreachable!";
 case 5: 
 var $41=(($28+92)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42&16;
 var $44=($43|0)!=0;
 if($44){label=6;break;}else{label=20;break;}
 case 6: 
 var $46=$28;
 $25=$46;
 var $47=$25;
 var $48=(($47+24)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$28;
 $15=$50;
 var $51=$15;
 var $52=(($51+20)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($49|0)!=($53|0);
 if($54){label=7;break;}else{label=10;break;}
 case 7: 
 var $56=$28;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+52)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($28,-1);
 var $61=($60|0)==-1;
 if($61){label=8;break;}else{label=9;break;}
 case 8: 
 $26=-1;
 label=36;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $66=(($28+68)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($28+72)|0);
 var $69=(($28+32)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($28+32)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($28+52)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($72+$74)|0);
 $1=$67;
 $2=$68;
 $3=$70;
 $4=$75;
 $5=$__extbe;
 var $76=$1;
 var $77=$76;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+20)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$2;
 var $82=$3;
 var $83=$4;
 var $84=$5;
 var $85=FUNCTION_TABLE[$80]($76,$81,$82,$83,$84);
 $__r=$85;
 var $86=HEAP32[(($__extbe)>>2)];
 var $87=(($28+32)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$86;
 var $90=$88;
 var $91=((($89)-($90))|0);
 $__nmemb=$91;
 var $92=(($28+32)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$__nmemb;
 var $95=(($28+64)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=_fwrite($93,1,$94,$96);
 var $98=$__nmemb;
 var $99=($97|0)!=($98|0);
 if($99){label=12;break;}else{label=13;break;}
 case 12: 
 $26=-1;
 label=36;break;
 case 13: 
 label=14;break;
 case 14: 
 var $103=$__r;
 var $104=($103|0)==1;
 if($104){label=11;break;}else{label=15;break;}
 case 15: 
 var $106=$__r;
 var $107=($106|0)==2;
 if($107){label=16;break;}else{label=17;break;}
 case 16: 
 $26=-1;
 label=36;break;
 case 17: 
 var $110=(($28+64)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=_fflush($111);
 var $113=($112|0)!=0;
 if($113){label=18;break;}else{label=19;break;}
 case 18: 
 $26=-1;
 label=36;break;
 case 19: 
 label=35;break;
 case 20: 
 var $117=(($28+92)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$118&8;
 var $120=($119|0)!=0;
 if($120){label=21;break;}else{label=34;break;}
 case 21: 
 var $122=(($28+80)|0);
 var $123=$__state;
 var $124=$122;
 assert(8 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];
 $__update_st=0;
 var $125=(($28+98)|0);
 var $126=HEAP8[($125)];
 var $127=(($126)&1);
 if($127){label=22;break;}else{label=23;break;}
 case 22: 
 var $129=$28;
 $6=$129;
 var $130=$6;
 var $131=(($130+16)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=$28;
 $7=$133;
 var $134=$7;
 var $135=(($134+12)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=$132;
 var $138=$136;
 var $139=((($137)-($138))|0);
 var $140$0=$139;
 var $140$1=((((($139|0)<0))|0)?-1:0);
 var $st$0$0=(($__c)|0);
 HEAP32[(($st$0$0)>>2)]=$140$0;
 var $st$1$1=(($__c+4)|0);
 HEAP32[(($st$1$1)>>2)]=$140$1;
 label=29;break;
 case 23: 
 var $142=(($28+68)|0);
 var $143=HEAP32[(($142)>>2)];
 $8=$143;
 var $144=$8;
 var $145=$144;
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+24)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=FUNCTION_TABLE[$148]($144);
 $__width=$149;
 var $150=(($28+40)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($28+36)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$151;
 var $155=$153;
 var $156=((($154)-($155))|0);
 var $157$0=$156;
 var $157$1=((((($156|0)<0))|0)?-1:0);
 var $st$2$0=(($__c)|0);
 HEAP32[(($st$2$0)>>2)]=$157$0;
 var $st$3$1=(($__c+4)|0);
 HEAP32[(($st$3$1)>>2)]=$157$1;
 var $158=$__width;
 var $159=($158|0)>0;
 if($159){label=24;break;}else{label=25;break;}
 case 24: 
 var $161=$__width;
 var $162=$28;
 $9=$162;
 var $163=$9;
 var $164=(($163+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=$28;
 $10=$166;
 var $167=$10;
 var $168=(($167+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$165;
 var $171=$169;
 var $172=((($170)-($171))|0);
 var $173=(Math_imul($161,$172)|0);
 var $174$0=$173;
 var $174$1=((((($173|0)<0))|0)?-1:0);
 var $ld$4$0=(($__c)|0);
 var $175$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($__c+4)|0);
 var $175$1=HEAP32[(($ld$5$1)>>2)];
 var $176$0=_i64Add($175$0,$175$1,$174$0,$174$1);var $176$1=tempRet0;
 var $st$6$0=(($__c)|0);
 HEAP32[(($st$6$0)>>2)]=$176$0;
 var $st$7$1=(($__c+4)|0);
 HEAP32[(($st$7$1)>>2)]=$176$1;
 label=28;break;
 case 25: 
 var $178=$28;
 $11=$178;
 var $179=$11;
 var $180=(($179+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=$28;
 $12=$182;
 var $183=$12;
 var $184=(($183+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($181|0)!=($185|0);
 if($186){label=26;break;}else{label=27;break;}
 case 26: 
 var $188=(($28+68)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($28+32)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($28+36)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=$28;
 $13=$194;
 var $195=$13;
 var $196=(($195+12)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=$28;
 $14=$198;
 var $199=$14;
 var $200=(($199+8)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$197;
 var $203=$201;
 var $204=((($202)-($203))|0);
 $16=$189;
 $17=$__state;
 $18=$191;
 $19=$193;
 $20=$204;
 var $205=$16;
 var $206=$205;
 var $207=HEAP32[(($206)>>2)];
 var $208=(($207+32)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=$17;
 var $211=$18;
 var $212=$19;
 var $213=$20;
 var $214=FUNCTION_TABLE[$209]($205,$210,$211,$212,$213);
 $__off=$214;
 var $215=(($28+36)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(($28+32)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$216;
 var $220=$218;
 var $221=((($219)-($220))|0);
 var $222=$__off;
 var $223=((($221)-($222))|0);
 var $224$0=$223;
 var $224$1=((((($223|0)<0))|0)?-1:0);
 var $ld$8$0=(($__c)|0);
 var $225$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($__c+4)|0);
 var $225$1=HEAP32[(($ld$9$1)>>2)];
 var $226$0=_i64Add($225$0,$225$1,$224$0,$224$1);var $226$1=tempRet0;
 var $st$10$0=(($__c)|0);
 HEAP32[(($st$10$0)>>2)]=$226$0;
 var $st$11$1=(($__c+4)|0);
 HEAP32[(($st$11$1)>>2)]=$226$1;
 $__update_st=1;
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $230=(($28+64)|0);
 var $231=HEAP32[(($230)>>2)];
 var $ld$12$0=(($__c)|0);
 var $232$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($__c+4)|0);
 var $232$1=HEAP32[(($ld$13$1)>>2)];
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $233$0=_i64Subtract($$etemp$14$0,$$etemp$14$1,$232$0,$232$1);var $233$1=tempRet0;
 var $234$0=$233$0;
 var $234=$234$0;
 var $235=_fseek($231,$234,1);
 var $236=($235|0)!=0;
 if($236){label=30;break;}else{label=31;break;}
 case 30: 
 $26=-1;
 label=36;break;
 case 31: 
 var $239=$__update_st;
 var $240=(($239)&1);
 if($240){label=32;break;}else{label=33;break;}
 case 32: 
 var $242=(($28+72)|0);
 var $243=$242;
 var $244=$__state;
 assert(8 % 1 === 0);HEAP32[(($243)>>2)]=HEAP32[(($244)>>2)];HEAP32[((($243)+(4))>>2)]=HEAP32[((($244)+(4))>>2)];
 label=33;break;
 case 33: 
 var $246=(($28+32)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($28+40)|0);
 HEAP32[(($248)>>2)]=$247;
 var $249=(($28+36)|0);
 HEAP32[(($249)>>2)]=$247;
 var $250=$28;
 $21=$250;
 $22=0;
 $23=0;
 $24=0;
 var $251=$21;
 var $252=$22;
 var $253=(($251+8)|0);
 HEAP32[(($253)>>2)]=$252;
 var $254=$23;
 var $255=(($251+12)|0);
 HEAP32[(($255)>>2)]=$254;
 var $256=$24;
 var $257=(($251+16)|0);
 HEAP32[(($257)>>2)]=$256;
 var $258=(($28+92)|0);
 HEAP32[(($258)>>2)]=0;
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 $26=0;
 label=36;break;
 case 36: 
 var $262=$26;
 STACKTOP=sp;return $262;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12=sp;
 var $13;
 var $14;
 var $15=(sp)+(8);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37=(sp)+(16);
 var $38;
 var $39;
 var $40=(sp)+(24);
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $__initial;
 var $__1buf=(sp)+(32);
 var $__unget_sz;
 var $76=(sp)+(40);
 var $77=(sp)+(48);
 var $__c;
 var $__nmemb;
 var $__nmemb1;
 var $78=(sp)+(56);
 var $79=(sp)+(64);
 var $__r;
 var $__nr;
 var $__inext=(sp)+(72);
 $75=$this;
 var $80=$75;
 var $81=(($80+64)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)==0;
 if($83){label=2;break;}else{label=3;break;}
 case 2: 
 $74=-1;
 label=37;break;
 case 3: 
 var $86=__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($80);
 var $87=($86&1);
 $__initial=$87;
 var $88=$80;
 $43=$88;
 var $89=$43;
 var $90=(($89+12)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($91|0)==0;
 if($92){label=4;break;}else{label=5;break;}
 case 4: 
 var $94=$80;
 var $95=(($__1buf+1)|0);
 var $96=(($__1buf+1)|0);
 $1=$94;
 $2=$__1buf;
 $3=$95;
 $4=$96;
 var $97=$1;
 var $98=$2;
 var $99=(($97+8)|0);
 HEAP32[(($99)>>2)]=$98;
 var $100=$3;
 var $101=(($97+12)|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=$4;
 var $103=(($97+16)|0);
 HEAP32[(($103)>>2)]=$102;
 label=5;break;
 case 5: 
 var $105=$__initial;
 var $106=(($105)&1);
 if($106){label=6;break;}else{label=7;break;}
 case 6: 
 var $138=0;label=11;break;
 case 7: 
 var $109=$80;
 $5=$109;
 var $110=$5;
 var $111=(($110+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$80;
 $6=$113;
 var $114=$6;
 var $115=(($114+8)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$112;
 var $118=$116;
 var $119=((($117)-($118))|0);
 var $120=(((($119|0))/(2))&-1);
 HEAP32[(($76)>>2)]=$120;
 HEAP32[(($77)>>2)]=4;
 $13=$76;
 $14=$77;
 var $121=$13;
 var $122=$14;
 var $tmp_i2=$12;
 var $tmp1_i3=$15;
 assert(1 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];
 $10=$121;
 $11=$122;
 var $123=$11;
 var $124=$10;
 $7=$12;
 $8=$123;
 $9=$124;
 var $125=$7;
 var $126=$8;
 var $127=HEAP32[(($126)>>2)];
 var $128=$9;
 var $129=HEAP32[(($128)>>2)];
 var $130=($127>>>0)<($129>>>0);
 if($130){label=8;break;}else{label=9;break;}
 case 8: 
 var $132=$11;
 var $135=$132;label=10;break;
 case 9: 
 var $134=$10;
 var $135=$134;label=10;break;
 case 10: 
 var $135;
 var $136=HEAP32[(($135)>>2)];
 var $138=$136;label=11;break;
 case 11: 
 var $138;
 $__unget_sz=$138;
 $__c=-1;
 var $139=$80;
 $16=$139;
 var $140=$16;
 var $141=(($140+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$80;
 $17=$143;
 var $144=$17;
 var $145=(($144+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($142|0)==($146|0);
 if($147){label=12;break;}else{label=33;break;}
 case 12: 
 var $149=$80;
 $18=$149;
 var $150=$18;
 var $151=(($150+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$80;
 $19=$153;
 var $154=$19;
 var $155=(($154+16)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=$__unget_sz;
 var $158=(((-$157))|0);
 var $159=(($156+$158)|0);
 var $160=$__unget_sz;
 var $161=$160;
 _memmove($152,$159,$161,1,0);
 var $162=(($80+98)|0);
 var $163=HEAP8[($162)];
 var $164=(($163)&1);
 if($164){label=13;break;}else{label=16;break;}
 case 13: 
 var $166=$80;
 $20=$166;
 var $167=$20;
 var $168=(($167+16)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$80;
 $21=$170;
 var $171=$21;
 var $172=(($171+8)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=$169;
 var $175=$173;
 var $176=((($174)-($175))|0);
 var $177=$__unget_sz;
 var $178=((($176)-($177))|0);
 $__nmemb=$178;
 var $179=$80;
 $22=$179;
 var $180=$22;
 var $181=(($180+8)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=$__unget_sz;
 var $184=(($182+$183)|0);
 var $185=$__nmemb;
 var $186=(($80+64)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=_fread($184,1,$185,$187);
 $__nmemb=$188;
 var $189=$__nmemb;
 var $190=($189|0)!=0;
 if($190){label=14;break;}else{label=15;break;}
 case 14: 
 var $192=$80;
 var $193=$80;
 $23=$193;
 var $194=$23;
 var $195=(($194+8)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=$80;
 $24=$197;
 var $198=$24;
 var $199=(($198+8)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=$__unget_sz;
 var $202=(($200+$201)|0);
 var $203=$80;
 $25=$203;
 var $204=$25;
 var $205=(($204+8)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=$__unget_sz;
 var $208=(($206+$207)|0);
 var $209=$__nmemb;
 var $210=(($208+$209)|0);
 $26=$192;
 $27=$196;
 $28=$202;
 $29=$210;
 var $211=$26;
 var $212=$27;
 var $213=(($211+8)|0);
 HEAP32[(($213)>>2)]=$212;
 var $214=$28;
 var $215=(($211+12)|0);
 HEAP32[(($215)>>2)]=$214;
 var $216=$29;
 var $217=(($211+16)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=$80;
 $30=$218;
 var $219=$30;
 var $220=(($219+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=HEAP8[($221)];
 $31=$222;
 var $223=$31;
 var $224=($223&255);
 $__c=$224;
 label=15;break;
 case 15: 
 label=32;break;
 case 16: 
 var $227=(($80+32)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($80+36)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(($80+40)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($80+36)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$232;
 var $236=$234;
 var $237=((($235)-($236))|0);
 _memmove($228,$230,$237,1,0);
 var $238=(($80+32)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(($80+40)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(($80+36)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=$241;
 var $245=$243;
 var $246=((($244)-($245))|0);
 var $247=(($239+$246)|0);
 var $248=(($80+36)|0);
 HEAP32[(($248)>>2)]=$247;
 var $249=(($80+32)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($80+32)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=(($80+44)|0);
 var $254=(($253)|0);
 var $255=($252|0)==($254|0);
 if($255){label=17;break;}else{label=18;break;}
 case 17: 
 var $261=8;label=19;break;
 case 18: 
 var $258=(($80+52)|0);
 var $259=HEAP32[(($258)>>2)];
 var $261=$259;label=19;break;
 case 19: 
 var $261;
 var $262=(($250+$261)|0);
 var $263=(($80+40)|0);
 HEAP32[(($263)>>2)]=$262;
 var $264=(($80+60)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=$__unget_sz;
 var $267=((($265)-($266))|0);
 HEAP32[(($78)>>2)]=$267;
 var $268=(($80+40)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=(($80+36)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=$269;
 var $273=$271;
 var $274=((($272)-($273))|0);
 HEAP32[(($79)>>2)]=$274;
 $38=$78;
 $39=$79;
 var $275=$38;
 var $276=$39;
 var $tmp_i=$37;
 var $tmp1_i=$40;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $35=$275;
 $36=$276;
 var $277=$36;
 var $278=$35;
 $32=$37;
 $33=$277;
 $34=$278;
 var $279=$32;
 var $280=$33;
 var $281=HEAP32[(($280)>>2)];
 var $282=$34;
 var $283=HEAP32[(($282)>>2)];
 var $284=($281>>>0)<($283>>>0);
 if($284){label=20;break;}else{label=21;break;}
 case 20: 
 var $286=$36;
 var $289=$286;label=22;break;
 case 21: 
 var $288=$35;
 var $289=$288;label=22;break;
 case 22: 
 var $289;
 var $290=HEAP32[(($289)>>2)];
 $__nmemb1=$290;
 var $291=(($80+80)|0);
 var $292=(($80+72)|0);
 var $293=$291;
 var $294=$292;
 assert(8 % 1 === 0);HEAP32[(($293)>>2)]=HEAP32[(($294)>>2)];HEAP32[((($293)+(4))>>2)]=HEAP32[((($294)+(4))>>2)];
 var $295=(($80+36)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=$__nmemb1;
 var $298=(($80+64)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=_fread($296,1,$297,$299);
 $__nr=$300;
 var $301=$__nr;
 var $302=($301|0)!=0;
 if($302){label=23;break;}else{label=31;break;}
 case 23: 
 var $304=(($80+68)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=($305|0)!=0;
 if($306){label=25;break;}else{label=24;break;}
 case 24: 
 var $308=___cxa_allocate_exception(4);
 var $309=$308;
 __ZNSt8bad_castC2Ev($309);
 ___cxa_throw($308,11472,(394));
 throw "Reached an unreachable!";
 case 25: 
 var $311=(($80+36)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=$__nr;
 var $314=(($312+$313)|0);
 var $315=(($80+40)|0);
 HEAP32[(($315)>>2)]=$314;
 var $316=(($80+68)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=(($80+72)|0);
 var $319=(($80+32)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($80+40)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=(($80+36)|0);
 var $324=$80;
 $41=$324;
 var $325=$41;
 var $326=(($325+8)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=$__unget_sz;
 var $329=(($327+$328)|0);
 var $330=$80;
 $42=$330;
 var $331=$42;
 var $332=(($331+8)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($80+60)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=(($333+$335)|0);
 $44=$317;
 $45=$318;
 $46=$320;
 $47=$322;
 $48=$323;
 $49=$329;
 $50=$336;
 $51=$__inext;
 var $337=$44;
 var $338=$337;
 var $339=HEAP32[(($338)>>2)];
 var $340=(($339+16)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=$45;
 var $343=$46;
 var $344=$47;
 var $345=$48;
 var $346=$49;
 var $347=$50;
 var $348=$51;
 var $349=FUNCTION_TABLE[$341]($337,$342,$343,$344,$345,$346,$347,$348);
 $__r=$349;
 var $350=$__r;
 var $351=($350|0)==3;
 if($351){label=26;break;}else{label=27;break;}
 case 26: 
 var $353=$80;
 var $354=(($80+32)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($80+32)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($80+40)|0);
 var $359=HEAP32[(($358)>>2)];
 $52=$353;
 $53=$355;
 $54=$357;
 $55=$359;
 var $360=$52;
 var $361=$53;
 var $362=(($360+8)|0);
 HEAP32[(($362)>>2)]=$361;
 var $363=$54;
 var $364=(($360+12)|0);
 HEAP32[(($364)>>2)]=$363;
 var $365=$55;
 var $366=(($360+16)|0);
 HEAP32[(($366)>>2)]=$365;
 var $367=$80;
 $56=$367;
 var $368=$56;
 var $369=(($368+12)|0);
 var $370=HEAP32[(($369)>>2)];
 var $371=HEAP8[($370)];
 $57=$371;
 var $372=$57;
 var $373=($372&255);
 $__c=$373;
 label=30;break;
 case 27: 
 var $375=HEAP32[(($__inext)>>2)];
 var $376=$80;
 $58=$376;
 var $377=$58;
 var $378=(($377+8)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=$__unget_sz;
 var $381=(($379+$380)|0);
 var $382=($375|0)!=($381|0);
 if($382){label=28;break;}else{label=29;break;}
 case 28: 
 var $384=$80;
 var $385=$80;
 $59=$385;
 var $386=$59;
 var $387=(($386+8)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=$80;
 $60=$389;
 var $390=$60;
 var $391=(($390+8)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$__unget_sz;
 var $394=(($392+$393)|0);
 var $395=HEAP32[(($__inext)>>2)];
 $61=$384;
 $62=$388;
 $63=$394;
 $64=$395;
 var $396=$61;
 var $397=$62;
 var $398=(($396+8)|0);
 HEAP32[(($398)>>2)]=$397;
 var $399=$63;
 var $400=(($396+12)|0);
 HEAP32[(($400)>>2)]=$399;
 var $401=$64;
 var $402=(($396+16)|0);
 HEAP32[(($402)>>2)]=$401;
 var $403=$80;
 $65=$403;
 var $404=$65;
 var $405=(($404+12)|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=HEAP8[($406)];
 $66=$407;
 var $408=$66;
 var $409=($408&255);
 $__c=$409;
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=34;break;
 case 33: 
 var $415=$80;
 $67=$415;
 var $416=$67;
 var $417=(($416+12)|0);
 var $418=HEAP32[(($417)>>2)];
 var $419=HEAP8[($418)];
 $68=$419;
 var $420=$68;
 var $421=($420&255);
 $__c=$421;
 label=34;break;
 case 34: 
 var $423=$80;
 $69=$423;
 var $424=$69;
 var $425=(($424+8)|0);
 var $426=HEAP32[(($425)>>2)];
 var $427=($426|0)==($__1buf|0);
 if($427){label=35;break;}else{label=36;break;}
 case 35: 
 var $429=$80;
 $70=$429;
 $71=0;
 $72=0;
 $73=0;
 var $430=$70;
 var $431=$71;
 var $432=(($430+8)|0);
 HEAP32[(($432)>>2)]=$431;
 var $433=$72;
 var $434=(($430+12)|0);
 HEAP32[(($434)>>2)]=$433;
 var $435=$73;
 var $436=(($430+16)|0);
 HEAP32[(($436)>>2)]=$435;
 label=36;break;
 case 36: 
 var $438=$__c;
 $74=$438;
 label=37;break;
 case 37: 
 var $440=$74;
 STACKTOP=sp;return $440;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 $19=$this;
 $20=$__c;
 var $21=$19;
 var $22=(($21+64)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)!=0;
 if($24){label=2;break;}else{label=12;break;}
 case 2: 
 var $26=$21;
 $17=$26;
 var $27=$17;
 var $28=(($27+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$21;
 $1=$30;
 var $31=$1;
 var $32=(($31+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($29>>>0)<($33>>>0);
 if($34){label=3;break;}else{label=12;break;}
 case 3: 
 var $36=$20;
 $2=$36;
 $3=-1;
 var $37=$2;
 var $38=$3;
 var $39=($37|0)==($38|0);
 if($39){label=4;break;}else{label=8;break;}
 case 4: 
 var $41=$21;
 $4=$41;
 $5=-1;
 var $42=$4;
 var $43=$5;
 var $44=(($42+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+$43)|0);
 HEAP32[(($44)>>2)]=$46;
 var $47=$20;
 $8=$47;
 var $48=$8;
 $6=$48;
 $7=-1;
 var $49=$6;
 var $50=$7;
 var $51=($49|0)==($50|0);
 if($51){label=5;break;}else{label=6;break;}
 case 5: 
 var $55=0;label=7;break;
 case 6: 
 var $54=$8;
 var $55=$54;label=7;break;
 case 7: 
 var $55;
 $18=$55;
 label=13;break;
 case 8: 
 var $57=(($21+88)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$58&16;
 var $60=($59|0)!=0;
 if($60){label=10;break;}else{label=9;break;}
 case 9: 
 var $62=$20;
 $9=$62;
 var $63=$9;
 var $64=(($63)&255);
 var $65=$21;
 $10=$65;
 var $66=$10;
 var $67=(($66+12)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=((($68)-(1))|0);
 var $70=HEAP8[($69)];
 $11=$64;
 $12=$70;
 var $71=$11;
 var $72=(($71<<24)>>24);
 var $73=$12;
 var $74=(($73<<24)>>24);
 var $75=($72|0)==($74|0);
 if($75){label=10;break;}else{label=11;break;}
 case 10: 
 var $77=$21;
 $13=$77;
 $14=-1;
 var $78=$13;
 var $79=$14;
 var $80=(($78+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+$79)|0);
 HEAP32[(($80)>>2)]=$82;
 var $83=$20;
 $15=$83;
 var $84=$15;
 var $85=(($84)&255);
 var $86=$21;
 $16=$86;
 var $87=$16;
 var $88=(($87+12)|0);
 var $89=HEAP32[(($88)>>2)];
 HEAP8[($89)]=$85;
 var $90=$20;
 $18=$90;
 label=13;break;
 case 11: 
 label=12;break;
 case 12: 
 $18=-1;
 label=13;break;
 case 13: 
 var $94=$18;
 return $94;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $__1buf=sp;
 var $__pb_save;
 var $__epb_save;
 var $__nmemb;
 var $__extbe=(sp)+(8);
 var $__r;
 var $__e=(sp)+(16);
 var $__nmemb1;
 var $__nmemb2;
 $47=$this;
 $48=$__c;
 var $49=$47;
 var $50=(($49+64)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)==0;
 if($52){label=2;break;}else{label=3;break;}
 case 2: 
 $46=-1;
 label=38;break;
 case 3: 
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($49);
 var $55=$49;
 $19=$55;
 var $56=$19;
 var $57=(($56+20)|0);
 var $58=HEAP32[(($57)>>2)];
 $__pb_save=$58;
 var $59=$49;
 $1=$59;
 var $60=$1;
 var $61=(($60+28)|0);
 var $62=HEAP32[(($61)>>2)];
 $__epb_save=$62;
 var $63=$48;
 $2=$63;
 $3=-1;
 var $64=$2;
 var $65=$3;
 var $66=($64|0)==($65|0);
 if($66){label=7;break;}else{label=4;break;}
 case 4: 
 var $68=$49;
 $4=$68;
 var $69=$4;
 var $70=(($69+24)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($71|0)==0;
 if($72){label=5;break;}else{label=6;break;}
 case 5: 
 var $74=$49;
 var $75=(($__1buf+1)|0);
 $5=$74;
 $6=$__1buf;
 $7=$75;
 var $76=$5;
 var $77=$6;
 var $78=(($76+24)|0);
 HEAP32[(($78)>>2)]=$77;
 var $79=(($76+20)|0);
 HEAP32[(($79)>>2)]=$77;
 var $80=$7;
 var $81=(($76+28)|0);
 HEAP32[(($81)>>2)]=$80;
 label=6;break;
 case 6: 
 var $83=$48;
 $8=$83;
 var $84=$8;
 var $85=(($84)&255);
 var $86=$49;
 $9=$86;
 var $87=$9;
 var $88=(($87+24)|0);
 var $89=HEAP32[(($88)>>2)];
 HEAP8[($89)]=$85;
 var $90=$49;
 $10=$90;
 $11=1;
 var $91=$10;
 var $92=$11;
 var $93=(($91+24)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+$92)|0);
 HEAP32[(($93)>>2)]=$95;
 label=7;break;
 case 7: 
 var $97=$49;
 $12=$97;
 var $98=$12;
 var $99=(($98+24)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=$49;
 $13=$101;
 var $102=$13;
 var $103=(($102+20)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($100|0)!=($104|0);
 if($105){label=8;break;}else{label=34;break;}
 case 8: 
 var $107=(($49+98)|0);
 var $108=HEAP8[($107)];
 var $109=(($108)&1);
 if($109){label=9;break;}else{label=12;break;}
 case 9: 
 var $111=$49;
 $14=$111;
 var $112=$14;
 var $113=(($112+24)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$49;
 $15=$115;
 var $116=$15;
 var $117=(($116+20)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$114;
 var $120=$118;
 var $121=((($119)-($120))|0);
 $__nmemb=$121;
 var $122=$49;
 $16=$122;
 var $123=$16;
 var $124=(($123+20)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$__nmemb;
 var $127=(($49+64)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=_fwrite($125,1,$126,$128);
 var $130=$__nmemb;
 var $131=($129|0)!=($130|0);
 if($131){label=10;break;}else{label=11;break;}
 case 10: 
 $46=-1;
 label=38;break;
 case 11: 
 label=33;break;
 case 12: 
 var $135=(($49+32)|0);
 var $136=HEAP32[(($135)>>2)];
 HEAP32[(($__extbe)>>2)]=$136;
 label=13;break;
 case 13: 
 var $138=(($49+68)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=($139|0)!=0;
 if($140){label=15;break;}else{label=14;break;}
 case 14: 
 var $142=___cxa_allocate_exception(4);
 var $143=$142;
 __ZNSt8bad_castC2Ev($143);
 ___cxa_throw($142,11472,(394));
 throw "Reached an unreachable!";
 case 15: 
 var $145=(($49+68)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($49+72)|0);
 var $148=$49;
 $17=$148;
 var $149=$17;
 var $150=(($149+20)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$49;
 $18=$152;
 var $153=$18;
 var $154=(($153+24)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($49+32)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($49+32)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($49+52)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($159+$161)|0);
 $20=$146;
 $21=$147;
 $22=$151;
 $23=$155;
 $24=$__e;
 $25=$157;
 $26=$162;
 $27=$__extbe;
 var $163=$20;
 var $164=$163;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+12)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=$21;
 var $169=$22;
 var $170=$23;
 var $171=$24;
 var $172=$25;
 var $173=$26;
 var $174=$27;
 var $175=FUNCTION_TABLE[$167]($163,$168,$169,$170,$171,$172,$173,$174);
 $__r=$175;
 var $176=HEAP32[(($__e)>>2)];
 var $177=$49;
 $28=$177;
 var $178=$28;
 var $179=(($178+20)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($176|0)==($180|0);
 if($181){label=16;break;}else{label=17;break;}
 case 16: 
 $46=-1;
 label=38;break;
 case 17: 
 var $184=$__r;
 var $185=($184|0)==3;
 if($185){label=18;break;}else{label=21;break;}
 case 18: 
 var $187=$49;
 $29=$187;
 var $188=$29;
 var $189=(($188+24)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=$49;
 $30=$191;
 var $192=$30;
 var $193=(($192+20)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$190;
 var $196=$194;
 var $197=((($195)-($196))|0);
 $__nmemb1=$197;
 var $198=$49;
 $31=$198;
 var $199=$31;
 var $200=(($199+20)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$__nmemb1;
 var $203=(($49+64)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=_fwrite($201,1,$202,$204);
 var $206=$__nmemb1;
 var $207=($205|0)!=($206|0);
 if($207){label=19;break;}else{label=20;break;}
 case 19: 
 $46=-1;
 label=38;break;
 case 20: 
 label=30;break;
 case 21: 
 var $211=$__r;
 var $212=($211|0)==0;
 if($212){label=23;break;}else{label=22;break;}
 case 22: 
 var $214=$__r;
 var $215=($214|0)==1;
 if($215){label=23;break;}else{label=28;break;}
 case 23: 
 var $217=HEAP32[(($__extbe)>>2)];
 var $218=(($49+32)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=$217;
 var $221=$219;
 var $222=((($220)-($221))|0);
 $__nmemb2=$222;
 var $223=(($49+32)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$__nmemb2;
 var $226=(($49+64)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=_fwrite($224,1,$225,$227);
 var $229=$__nmemb2;
 var $230=($228|0)!=($229|0);
 if($230){label=24;break;}else{label=25;break;}
 case 24: 
 $46=-1;
 label=38;break;
 case 25: 
 var $233=$__r;
 var $234=($233|0)==1;
 if($234){label=26;break;}else{label=27;break;}
 case 26: 
 var $236=$49;
 var $237=HEAP32[(($__e)>>2)];
 var $238=$49;
 $32=$238;
 var $239=$32;
 var $240=(($239+24)|0);
 var $241=HEAP32[(($240)>>2)];
 $33=$236;
 $34=$237;
 $35=$241;
 var $242=$33;
 var $243=$34;
 var $244=(($242+24)|0);
 HEAP32[(($244)>>2)]=$243;
 var $245=(($242+20)|0);
 HEAP32[(($245)>>2)]=$243;
 var $246=$35;
 var $247=(($242+28)|0);
 HEAP32[(($247)>>2)]=$246;
 var $248=$49;
 var $249=$49;
 $36=$249;
 var $250=$36;
 var $251=(($250+28)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=$49;
 $37=$253;
 var $254=$37;
 var $255=(($254+20)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=$252;
 var $258=$256;
 var $259=((($257)-($258))|0);
 $38=$248;
 $39=$259;
 var $260=$38;
 var $261=$39;
 var $262=(($260+24)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($263+$261)|0);
 HEAP32[(($262)>>2)]=$264;
 label=27;break;
 case 27: 
 label=29;break;
 case 28: 
 $46=-1;
 label=38;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $270=$__r;
 var $271=($270|0)==1;
 if($271){label=13;break;}else{label=32;break;}
 case 32: 
 label=33;break;
 case 33: 
 var $274=$49;
 var $275=$__pb_save;
 var $276=$__epb_save;
 $40=$274;
 $41=$275;
 $42=$276;
 var $277=$40;
 var $278=$41;
 var $279=(($277+24)|0);
 HEAP32[(($279)>>2)]=$278;
 var $280=(($277+20)|0);
 HEAP32[(($280)>>2)]=$278;
 var $281=$42;
 var $282=(($277+28)|0);
 HEAP32[(($282)>>2)]=$281;
 label=34;break;
 case 34: 
 var $284=$48;
 $45=$284;
 var $285=$45;
 $43=$285;
 $44=-1;
 var $286=$43;
 var $287=$44;
 var $288=($286|0)==($287|0);
 if($288){label=35;break;}else{label=36;break;}
 case 35: 
 var $292=0;label=37;break;
 case 36: 
 var $291=$45;
 var $292=$291;label=37;break;
 case 37: 
 var $292;
 $46=$292;
 label=38;break;
 case 38: 
 var $294=$46;
 STACKTOP=sp;return $294;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 $14=$this;
 var $15=$14;
 var $16=(($15+92)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&16;
 var $19=($18|0)!=0;
 if($19){label=9;break;}else{label=2;break;}
 case 2: 
 var $21=$15;
 $10=$21;
 $11=0;
 $12=0;
 $13=0;
 var $22=$10;
 var $23=$11;
 var $24=(($22+8)|0);
 HEAP32[(($24)>>2)]=$23;
 var $25=$12;
 var $26=(($22+12)|0);
 HEAP32[(($26)>>2)]=$25;
 var $27=$13;
 var $28=(($22+16)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=(($15+52)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30>>>0)>8;
 if($31){label=3;break;}else{label=7;break;}
 case 3: 
 var $33=(($15+98)|0);
 var $34=HEAP8[($33)];
 var $35=(($34)&1);
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 var $37=$15;
 var $38=(($15+32)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($15+32)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($15+52)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=((($43)-(1))|0);
 var $45=(($41+$44)|0);
 $1=$37;
 $2=$39;
 $3=$45;
 var $46=$1;
 var $47=$2;
 var $48=(($46+24)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=(($46+20)|0);
 HEAP32[(($49)>>2)]=$47;
 var $50=$3;
 var $51=(($46+28)|0);
 HEAP32[(($51)>>2)]=$50;
 label=6;break;
 case 5: 
 var $53=$15;
 var $54=(($15+56)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($15+56)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($15+60)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=((($59)-(1))|0);
 var $61=(($57+$60)|0);
 $4=$53;
 $5=$55;
 $6=$61;
 var $62=$4;
 var $63=$5;
 var $64=(($62+24)|0);
 HEAP32[(($64)>>2)]=$63;
 var $65=(($62+20)|0);
 HEAP32[(($65)>>2)]=$63;
 var $66=$6;
 var $67=(($62+28)|0);
 HEAP32[(($67)>>2)]=$66;
 label=6;break;
 case 6: 
 label=8;break;
 case 7: 
 var $70=$15;
 $7=$70;
 $8=0;
 $9=0;
 var $71=$7;
 var $72=$8;
 var $73=(($71+24)|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=(($71+20)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=$9;
 var $76=(($71+28)|0);
 HEAP32[(($76)>>2)]=$75;
 label=8;break;
 case 8: 
 var $78=(($15+92)|0);
 HEAP32[(($78)>>2)]=16;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 $13=$this;
 var $14=$13;
 var $15=(($14+92)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&8;
 var $18=($17|0)!=0;
 if($18){label=6;break;}else{label=2;break;}
 case 2: 
 var $20=$14;
 $9=$20;
 $10=0;
 $11=0;
 var $21=$9;
 var $22=$10;
 var $23=(($21+24)|0);
 HEAP32[(($23)>>2)]=$22;
 var $24=(($21+20)|0);
 HEAP32[(($24)>>2)]=$22;
 var $25=$11;
 var $26=(($21+28)|0);
 HEAP32[(($26)>>2)]=$25;
 var $27=(($14+98)|0);
 var $28=HEAP8[($27)];
 var $29=(($28)&1);
 if($29){label=3;break;}else{label=4;break;}
 case 3: 
 var $31=$14;
 var $32=(($14+32)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($14+32)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($14+52)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($35+$37)|0);
 var $39=(($14+32)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($14+52)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($40+$42)|0);
 $1=$31;
 $2=$33;
 $3=$38;
 $4=$43;
 var $44=$1;
 var $45=$2;
 var $46=(($44+8)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=$3;
 var $48=(($44+12)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=$4;
 var $50=(($44+16)|0);
 HEAP32[(($50)>>2)]=$49;
 label=5;break;
 case 4: 
 var $52=$14;
 var $53=(($14+56)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($14+56)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($14+60)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($56+$58)|0);
 var $60=(($14+56)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($14+60)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($61+$63)|0);
 $5=$52;
 $6=$54;
 $7=$59;
 $8=$64;
 var $65=$5;
 var $66=$6;
 var $67=(($65+8)|0);
 HEAP32[(($67)>>2)]=$66;
 var $68=$7;
 var $69=(($65+12)|0);
 HEAP32[(($69)>>2)]=$68;
 var $70=$8;
 var $71=(($65+16)|0);
 HEAP32[(($71)>>2)]=$70;
 label=5;break;
 case 5: 
 var $73=(($14+92)|0);
 HEAP32[(($73)>>2)]=8;
 $12=1;
 label=7;break;
 case 6: 
 $12=0;
 label=7;break;
 case 7: 
 var $76=$12;
 return $76;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14=sp;
 var $15;
 var $16;
 var $17=(sp)+(8);
 var $18=(sp)+(16);
 $13=$this;
 var $19=$13;
 var $20=$19;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($20);
 var $21=$19;
 HEAP32[(($21)>>2)]=7536;
 var $22=(($19+32)|0);
 HEAP32[(($22)>>2)]=0;
 var $23=(($19+36)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=(($19+40)|0);
 HEAP32[(($24)>>2)]=0;
 var $25=(($19+52)|0);
 HEAP32[(($25)>>2)]=0;
 var $26=(($19+56)|0);
 HEAP32[(($26)>>2)]=0;
 var $27=(($19+60)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=(($19+64)|0);
 HEAP32[(($28)>>2)]=0;
 var $29=(($19+68)|0);
 $11=$14;
 $12=-1;
 var $30=$11;
 var $31=$12;
 $9=$30;
 $10=$31;
 var $32=$9;
 var $33=(($32)|0);
 HEAP32[(($33)>>2)]=0;
 label=2;break;
 case 2: 
 $8=$14;
 var $35=$8;
 label=3;break;
 case 3: 
 HEAP32[(($29)>>2)]=0;
 var $37=(($19+72)|0);
 var $38=$37;
 HEAP32[(($38)>>2)]=0; HEAP32[((($38)+(4))>>2)]=0;
 var $39=(($19+80)|0);
 var $40=$39;
 HEAP32[(($40)>>2)]=0; HEAP32[((($40)+(4))>>2)]=0;
 var $41=(($19+88)|0);
 HEAP32[(($41)>>2)]=0;
 var $42=(($19+92)|0);
 HEAP32[(($42)>>2)]=0;
 var $43=(($19+96)|0);
 HEAP8[($43)]=0;
 var $44=(($19+97)|0);
 HEAP8[($44)]=0;
 var $45=(($19+98)|0);
 HEAP8[($45)]=0;
 var $46=$19;
 $7=$46;
 var $47=$7;
 var $48=(($47+4)|0);
 __ZNSt3__16localeC2ERKS0_($17,$48);
 label=4;break;
 case 4: 
 $4=$17;
 var $50=$4;
 var $51=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9has_facetERNS0_2idE($50,16536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $54=$53$0;
 $5=$54;
 var $55=$53$1;
 $6=$55;
 var $56=$5;
 ___cxa_call_unexpected($56);
 throw "Reached an unreachable!";
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=13;break; }
 case 7: 
 if($51){label=8;break;}else{label=16;break;}
 case 8: 
 var $59=$19;
 $3=$59;
 var $60=$3;
 var $61=(($60+4)|0);
 __ZNSt3__16localeC2ERKS0_($18,$61);
 label=9;break;
 case 9: 
 $2=$18;
 var $63=$2;
 var $64=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($63,16536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $65=$64;
 label=11;break;
 case 11: 
 var $67=(($19+68)|0);
 HEAP32[(($67)>>2)]=$65;
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=13;break; }
 case 12: 
 var $69=(($19+68)|0);
 var $70=HEAP32[(($69)>>2)];
 $1=$70;
 var $71=$1;
 var $72=$71;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($71);
 var $77=(($19+98)|0);
 var $78=($76&1);
 HEAP8[($77)]=$78;
 label=16;break;
 case 13: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $81=$80$0;
 $15=$81;
 var $82=$80$1;
 $16=$82;
 label=18;break;
 case 14: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1); var $84$1 = tempRet0;
 var $85=$84$0;
 $15=$85;
 var $86=$84$1;
 $16=$86;
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=21;break; }
 case 15: 
 label=18;break;
 case 16: 
 var $89=$19;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($19,0,4096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=13;break; }
 case 17: 
 STACKTOP=sp;return;
 case 18: 
 var $96=$19;
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=21;break; }
 case 19: 
 label=20;break;
 case 20: 
 var $99=$15;
 var $100=$16;
 var $101$0=$99;
 var $101$1=0;
 var $102$0=$101$0;
 var $102$1=$100;
 ___resumeException($102$0)
 case 21: 
 var $104$0 = ___cxa_find_matching_catch(-1, -1,0); var $104$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detailL10errHandlerEiPKc131($err,$errStr){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$err;
 $2=$errStr;
 var $5=$1;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=8;break;}
 case 2: 
 var $8=___cxa_allocate_exception(12);
 var $9=$8;
 var $10=$1;
 var $11=$2;
 (function() { try { __THREW__ = 0; return __ZN2cl5ErrorC1EiPKc($9,$10,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($8,13016,(368)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=5;break; }
 case 4: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 var $15=$14$0;
 $3=$15;
 var $16=$14$1;
 $4=$16;
 ___cxa_free_exception($8);
 label=6;break;
 case 5: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $19=$18$0;
 $3=$19;
 var $20=$18$1;
 $4=$20;
 label=6;break;
 case 6: 
 var $22=$4;
 var $23=($22|0)<0;
 if($23){label=7;break;}else{label=9;break;}
 case 7: 
 var $25=$3;
 ___cxa_call_unexpected($25);
 throw "Reached an unreachable!";
 case 8: 
 var $27=$1;
 return $27;
 case 9: 
 var $29=$3;
 var $30=$4;
 var $31$0=$29;
 var $31$1=0;
 var $32$0=$31$0;
 var $32$1=$30;
 ___resumeException($32$0)
 case 10: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detail7getInfoIPFiP10_cl_kernelP13_cl_device_idjjPvPjES3_S5_jEEiT_RKT0_RKT1_jPT2_($f,$arg0,$arg1,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $f0=sp;
 var $6=(sp)+(16);
 $1=$f;
 $2=$arg0;
 $3=$arg1;
 $4=$name;
 $5=$param;
 var $7=(($f0)|0);
 var $8=$1;
 HEAP32[(($7)>>2)]=$8;
 var $9=(($f0+4)|0);
 var $10=$2;
 HEAP32[(($9)>>2)]=$10;
 var $11=(($f0+8)|0);
 var $12=$3;
 HEAP32[(($11)>>2)]=$12;
 var $13=$6;
 var $14=$f0;
 assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 var $15=$4;
 var $16=$5;
 var $17=__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP10_cl_kernelP13_cl_device_idjjPvPjES4_S6_EEjE3getESB_jS8_($6,$15,$16);
 STACKTOP=sp;return $17;
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP10_cl_kernelP13_cl_device_idjjPvPjES4_S6_EEjE3getESB_jS8_($f,$name,$param){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $f; $f=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($f)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($f)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$name;
 $2=$param;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=__ZN2cl6detail15GetInfoFunctor1IPFiP10_cl_kernelP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$3,4,$5,0);
 STACKTOP=sp;return $6;
}
function __ZN2cl6detail15GetInfoFunctor1IPFiP10_cl_kernelP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($this,$param,$size,$value,$size_ret){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$param;
 $3=$size;
 $4=$value;
 $5=$size_ret;
 var $6=$1;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($6+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[(($10)>>2)];
 var $12=(($6+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=HEAP32[(($13)>>2)];
 var $15=$2;
 var $16=$3;
 var $17=$4;
 var $18=$5;
 var $19=FUNCTION_TABLE[$8]($11,$14,$15,$16,$17,$18);
 return $19;
}
function __ZN2cl6stringC1Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6stringC2Ev($2);
 return;
}
function __ZNK2cl7Program12getBuildInfoINS_6stringEEEiRKNS_6DeviceEjPT_($this,$device,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$this;
 $2=$device;
 $3=$name;
 $4=$param;
 var $6=$1;
 var $7=$6;
 var $8=(($7)|0);
 var $9=$2;
 var $10=$9;
 var $11=__ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($10);
 HEAP32[(($5)>>2)]=$11;
 var $12=$3;
 var $13=$4;
 var $14=__ZN2cl6detail7getInfoIPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_NS_6stringEEEiT_RKT0_RKT1_jPT2_(254,$8,$5,$12,$13);
 var $15=__ZN2cl6detailL10errHandlerEiPKc131($14,1912);
 STACKTOP=sp;return $15;
}
function __ZN2cl6detail7getInfoIPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_NS_6stringEEEiT_RKT0_RKT1_jPT2_($f,$arg0,$arg1,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $f0=sp;
 var $6=(sp)+(16);
 $1=$f;
 $2=$arg0;
 $3=$arg1;
 $4=$name;
 $5=$param;
 var $7=(($f0)|0);
 var $8=$1;
 HEAP32[(($7)>>2)]=$8;
 var $9=(($f0+4)|0);
 var $10=$2;
 HEAP32[(($9)>>2)]=$10;
 var $11=(($f0+8)|0);
 var $12=$3;
 HEAP32[(($11)>>2)]=$12;
 var $13=$6;
 var $14=$f0;
 assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 var $15=$4;
 var $16=$5;
 var $17=__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES4_S6_EENS_6stringEE3getESB_jPSC_($6,$15,$16);
 STACKTOP=sp;return $17;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES4_S6_EENS_6stringEE3getESB_jPSC_($f,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $f; $f=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($f)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($f)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $required=sp;
 var $err;
 var $value;
 var $4=(sp)+(8);
 var $5;
 var $6;
 $2=$name;
 $3=$param;
 var $7=$2;
 var $8=__ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$7,0,0,$required);
 $err=$8;
 var $9=$err;
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$err;
 $1=$12;
 label=9;break;
 case 3: 
 var $14=HEAP32[(($required)>>2)];
 var $15=STACKTOP;STACKTOP = (STACKTOP + $14)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 $value=$15;
 var $16=$2;
 var $17=HEAP32[(($required)>>2)];
 var $18=$value;
 var $19=__ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$16,$17,$18,0);
 $err=$19;
 var $20=$err;
 var $21=($20|0)!=0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=$err;
 $1=$23;
 label=9;break;
 case 5: 
 var $25=$3;
 var $26=$value;
 __ZN2cl6stringC1EPc($4,$26);
 var $27=(function() { try { __THREW__ = 0; return __ZN2cl6stringaSERKS0_($25,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=7;break; }
 case 6: 
 __ZN2cl6stringD1Ev($4);
 $1=0;
 label=9;break;
 case 7: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 var $31=$30$0;
 $5=$31;
 var $32=$30$1;
 $6=$32;
 (function() { try { __THREW__ = 0; return __ZN2cl6stringD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 label=10;break;
 case 9: 
 var $35=$1;
 STACKTOP=sp;return $35;
 case 10: 
 var $37=$5;
 var $38=$6;
 var $39$0=$37;
 var $39$1=0;
 var $40$0=$39$0;
 var $40$1=$38;
 ___resumeException($40$0)
 case 11: 
 var $42$0 = ___cxa_find_matching_catch(-1, -1,0); var $42$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($this,$param,$size,$value,$size_ret){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$param;
 $3=$size;
 $4=$value;
 $5=$size_ret;
 var $6=$1;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($6+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[(($10)>>2)];
 var $12=(($6+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=HEAP32[(($13)>>2)];
 var $15=$2;
 var $16=$3;
 var $17=$4;
 var $18=$5;
 var $19=FUNCTION_TABLE[$8]($11,$14,$15,$16,$17,$18);
 return $19;
}
function __ZN2cl6stringaSERKS0_($this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$this;
 $3=$rhs;
 var $4=$2;
 var $5=$3;
 var $6=($4|0)==($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=$4;
 label=11;break;
 case 3: 
 var $9=$3;
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=4;break;}
 case 4: 
 var $14=$3;
 var $15=(($14+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 var $19=(($4)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=(($4+4)|0);
 HEAP32[(($20)>>2)]=0;
 label=10;break;
 case 6: 
 var $22=$3;
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($4)|0);
 HEAP32[(($25)>>2)]=$24;
 var $26=(($4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($27)+(1))|0);
 var $29=__Znaj($28);
 var $30=(($4+4)|0);
 HEAP32[(($30)>>2)]=$29;
 var $31=(($4+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)!=0;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=(($4+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$3;
 var $38=(($37+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($4)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=((($41)+(1))|0);
 var $43=$42;
 assert($43 % 1 === 0);(_memcpy($36, $39, $43)|0);
 label=9;break;
 case 8: 
 var $45=(($4)|0);
 HEAP32[(($45)>>2)]=0;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 $1=$4;
 label=11;break;
 case 11: 
 var $49=$1;
 return $49;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6stringC1EPc($this,$str){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$str;
 var $3=$1;
 var $4=$2;
 __ZN2cl6stringC2EPc($3,$4);
 return;
}
function __ZN2cl6stringC2EPc($this,$str){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$str;
 var $3=$1;
 var $4=(($3+4)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=$2;
 var $6=_strlen($5);
 var $7=(($3)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($3)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($9)+(1))|0);
 var $11=__Znaj($10);
 var $12=(($3+4)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=(($3+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=(($3+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$2;
 var $20=(($3)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=((($21)+(1))|0);
 var $23=$22;
 assert($23 % 1 === 0);(_memcpy($18, $19, $23)|0);
 label=4;break;
 case 3: 
 var $25=(($3)|0);
 HEAP32[(($25)>>2)]=0;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6stringC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($2+4)|0);
 HEAP32[(($4)>>2)]=0;
 return;
}
function __ZN2cl6vectorINSt3__14pairIPKcjEELj10EED2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZN2cl6vectorINSt3__14pairIPKcjEELj10EEC2EjRKS5_($this,$size,$val){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 $3=$this;
 $4=$size;
 $5=$val;
 var $6=$3;
 var $7=(($6)|0);
 var $8=(($7)|0);
 var $9=(($8+80)|0);
 var $11=$8;label=2;break;
 case 2: 
 var $11;
 $2=$11;
 var $12=$2;
 $1=$12;
 var $13=$1;
 var $14=(($13)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=(($13+4)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=(($11+8)|0);
 var $17=($16|0)==($9|0);
 if($17){label=3;break;}else{var $11=$16;label=2;break;}
 case 3: 
 var $19=(($6+80)|0);
 HEAP32[(($19)>>2)]=-1;
 var $20=(($6+84)|0);
 HEAP8[($20)]=1;
 $i=0;
 label=4;break;
 case 4: 
 var $22=$i;
 var $23=$4;
 var $24=($22>>>0)<($23>>>0);
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=$5;
 __ZN2cl6vectorINSt3__14pairIPKcjEELj10EE9push_backERKS5_($6,$26);
 label=6;break;
 case 6: 
 var $28=$i;
 var $29=((($28)+(1))|0);
 $i=$29;
 label=4;break;
 case 7: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorINSt3__14pairIPKcjEELj10EE9push_backERKS5_($this,$x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $3=$this;
 $4=$x;
 var $5=$3;
 var $6=__ZNK2cl6vectorINSt3__14pairIPKcjEELj10EE4sizeEv($5);
 var $7=($6>>>0)<10;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=(($5+80)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=((($10)+(1))|0);
 HEAP32[(($9)>>2)]=$11;
 var $12=(($5+80)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($5)|0);
 var $15=(($14+($13<<3))|0);
 var $16=$4;
 $1=$15;
 $2=$16;
 var $17=$1;
 var $18=$2;
 var $19=(($18)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($17)|0);
 HEAP32[(($21)>>2)]=$20;
 var $22=$2;
 var $23=(($22+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($17+4)|0);
 HEAP32[(($25)>>2)]=$24;
 var $26=(($5+84)|0);
 HEAP8[($26)]=0;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6vectorINSt3__14pairIPKcjEELj10EE4sizeEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+80)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)+(1))|0);
 return $5;
}
function __ZNK2cl6Device7getInfoIP15_cl_platform_idEEijPT_($this,$name,$param){
 var label=0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$name;
 $3=$param;
 var $4=$1;
 var $5=$4;
 var $6=(($5)|0);
 var $7=$2;
 var $8=$3;
 var $9=__ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_P15_cl_platform_idEEiT_RKT0_jPT1_(346,$6,$7,$8);
 var $10=__ZN2cl6detailL10errHandlerEiPKc131($9,2264);
 return $10;
}
function __ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_P15_cl_platform_idEEiT_RKT0_jPT1_($f,$arg0,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $f0=sp;
 var $5=(sp)+(8);
 $1=$f;
 $2=$arg0;
 $3=$name;
 $4=$param;
 var $6=(($f0)|0);
 var $7=$1;
 HEAP32[(($6)>>2)]=$7;
 var $8=(($f0+4)|0);
 var $9=$2;
 HEAP32[(($8)>>2)]=$9;
 var $10=$5;
 var $11=$f0;
 assert(8 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
 var $12=$3;
 var $13=$4;
 var $14=__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEP15_cl_platform_idE3getES9_jPSB_($5,$12,$13);
 STACKTOP=sp;return $14;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEP15_cl_platform_idE3getES9_jPSB_($f,$name,$param){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $f; $f=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($f)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 $1=$name;
 $2=$param;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=__ZN2cl6detail15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES3_EclEjjS4_S5_($f,$3,4,$5,0);
 STACKTOP=sp;return $6;
}
function __ZNK2cl5Event4waitEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=(($3)|0);
 var $5=_clWaitForEvents(1,$4);
 var $6=__ZN2cl6detailL10errHandlerEiPKc131($5,1728);
 return $6;
}
function __ZNK2cl5Event16getProfilingInfoIyEEijPT_($this,$name,$param){
 var label=0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$name;
 $3=$param;
 var $4=$1;
 var $5=$4;
 var $6=(($5)|0);
 var $7=$2;
 var $8=$3;
 var $9=__ZN2cl6detail7getInfoIPFiP9_cl_eventjjPvPjES3_yEEiT_RKT0_jPT1_(384,$6,$7,$8);
 var $10=__ZN2cl6detailL10errHandlerEiPKc131($9,1776);
 return $10;
}
function __ZN2cl6detail7getInfoIPFiP9_cl_eventjjPvPjES3_yEEiT_RKT0_jPT1_($f,$arg0,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $f0=sp;
 var $5=(sp)+(8);
 $1=$f;
 $2=$arg0;
 $3=$name;
 $4=$param;
 var $6=(($f0)|0);
 var $7=$1;
 HEAP32[(($6)>>2)]=$7;
 var $8=(($f0+4)|0);
 var $9=$2;
 HEAP32[(($8)>>2)]=$9;
 var $10=$5;
 var $11=$f0;
 assert(8 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
 var $12=$3;
 var $13=$4;
 var $14=__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP9_cl_eventjjPvPjES4_EEyE3getES9_jPy($5,$12,$13);
 STACKTOP=sp;return $14;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP9_cl_eventjjPvPjES4_EEyE3getES9_jPy($f,$name,$param){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $f; $f=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($f)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 $1=$name;
 $2=$param;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=__ZN2cl6detail15GetInfoFunctor0IPFiP9_cl_eventjjPvPjES3_EclEjjS4_S5_($f,$3,8,$5,0);
 STACKTOP=sp;return $6;
}
function __ZN2cl6detail15GetInfoFunctor0IPFiP9_cl_eventjjPvPjES3_EclEjjS4_S5_($this,$param,$size,$value,$size_ret){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$param;
 $3=$size;
 $4=$value;
 $5=$size_ret;
 var $6=$1;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($6+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[(($10)>>2)];
 var $12=$2;
 var $13=$3;
 var $14=$4;
 var $15=$5;
 var $16=FUNCTION_TABLE[$8]($11,$12,$13,$14,$15);
 return $16;
}
function __ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNS_6vectorINS_5EventELj10EEEPS6_($this,$buffer,$blocking,$offset,$size,$ptr,$events,$event){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 $1=$this;
 $2=$buffer;
 $3=$blocking;
 $4=$offset;
 $5=$size;
 $6=$ptr;
 $7=$events;
 $8=$event;
 var $9=$1;
 var $10=$9;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$2;
 var $14=$13;
 var $15=__ZNK2cl6detail7WrapperIP7_cl_memEclEv($14);
 var $16=$3;
 var $17=$4;
 var $18=$5;
 var $19=$6;
 var $20=$7;
 var $21=($20|0)!=0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 var $23=$7;
 var $24=__ZNK2cl6vectorINS_5EventELj10EE4sizeEv($23);
 var $27=$24;label=4;break;
 case 3: 
 var $27=0;label=4;break;
 case 4: 
 var $27;
 var $28=$7;
 var $29=($28|0)!=0;
 if($29){label=5;break;}else{label=7;break;}
 case 5: 
 var $31=$7;
 var $32=__ZNK2cl6vectorINS_5EventELj10EE4sizeEv($31);
 var $33=($32>>>0)>0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=$7;
 var $36=__ZNK2cl6vectorINS_5EventELj10EE5frontEv($35);
 var $37=$36;
 var $40=$37;label=8;break;
 case 7: 
 var $40=0;label=8;break;
 case 8: 
 var $40;
 var $41=$8;
 var $42=$41;
 var $43=_clEnqueueReadBuffer($12,$15,$16,$17,$18,$19,$27,$40,$42);
 var $44=__ZN2cl6detailL10errHandlerEiPKc131($43,1704);
 return $44;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl5EventaSERKS0_($this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6detail7WrapperIP9_cl_eventEaSERKS4_($7,$9);
 label=3;break;
 case 3: 
 return $3;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl12CommandQueue20enqueueNDRangeKernelERKNS_6KernelERKNS_7NDRangeES6_S6_PKNS_6vectorINS_5EventELj10EEEPS8_($this,$kernel,$offset,$global,$local,$events,$event){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $1=$this;
 $2=$kernel;
 $3=$offset;
 $4=$global;
 $5=$local;
 $6=$events;
 $7=$event;
 var $8=$1;
 var $9=$8;
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$2;
 var $13=$12;
 var $14=__ZNK2cl6detail7WrapperIP10_cl_kernelEclEv($13);
 var $15=$4;
 var $16=__ZNK2cl7NDRange10dimensionsEv($15);
 var $17=$3;
 var $18=__ZNK2cl7NDRange10dimensionsEv($17);
 var $19=($18|0)!=0;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 var $21=$3;
 var $22=__ZNK2cl7NDRangecvPKjEv($21);
 var $25=$22;label=4;break;
 case 3: 
 var $25=0;label=4;break;
 case 4: 
 var $25;
 var $26=$4;
 var $27=__ZNK2cl7NDRangecvPKjEv($26);
 var $28=$5;
 var $29=__ZNK2cl7NDRange10dimensionsEv($28);
 var $30=($29|0)!=0;
 if($30){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=$5;
 var $33=__ZNK2cl7NDRangecvPKjEv($32);
 var $36=$33;label=7;break;
 case 6: 
 var $36=0;label=7;break;
 case 7: 
 var $36;
 var $37=$6;
 var $38=($37|0)!=0;
 if($38){label=8;break;}else{label=9;break;}
 case 8: 
 var $40=$6;
 var $41=__ZNK2cl6vectorINS_5EventELj10EE4sizeEv($40);
 var $44=$41;label=10;break;
 case 9: 
 var $44=0;label=10;break;
 case 10: 
 var $44;
 var $45=$6;
 var $46=($45|0)!=0;
 if($46){label=11;break;}else{label=13;break;}
 case 11: 
 var $48=$6;
 var $49=__ZNK2cl6vectorINS_5EventELj10EE4sizeEv($48);
 var $50=($49>>>0)>0;
 if($50){label=12;break;}else{label=13;break;}
 case 12: 
 var $52=$6;
 var $53=__ZNK2cl6vectorINS_5EventELj10EE5frontEv($52);
 var $54=$53;
 var $57=$54;label=14;break;
 case 13: 
 var $57=0;label=14;break;
 case 14: 
 var $57;
 var $58=$7;
 var $59=$58;
 var $60=_clEnqueueNDRangeKernel($11,$14,$16,$25,$27,$36,$44,$57,$59);
 var $61=__ZN2cl6detailL10errHandlerEiPKc131($60,1640);
 return $61;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl7NDRangeC1Ej($this,$size0){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$size0;
 var $3=$1;
 var $4=$2;
 __ZN2cl7NDRangeC2Ej($3,$4);
 return;
}
function __ZN2cl7NDRangeC2Ej($this,$size0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $4;
 $1=$this;
 HEAP32[(($2)>>2)]=$size0;
 var $5=$1;
 var $6=(($5)|0);
 __ZN2cl6size_tILi3EEC1Ev($6);
 var $7=(($5+20)|0);
 HEAP32[(($7)>>2)]=1;
 var $8=(($5)|0);
 var $9=$8;
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorIjLj3EE9push_backERKj($9,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 STACKTOP=sp;return;
 case 3: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=$12$0;
 $3=$13;
 var $14=$12$1;
 $4=$14;
 (function() { try { __THREW__ = 0; return __ZN2cl6size_tILi3EED1Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $17=$3;
 var $18=$4;
 var $19$0=$17;
 var $19$1=0;
 var $20$0=$19$0;
 var $20$1=$18;
 ___resumeException($20$0)
 case 6: 
 var $22$0 = ___cxa_find_matching_catch(-1, -1,0); var $22$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6vectorIjLj3EE9push_backERKj($this,$x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$x;
 var $3=$1;
 var $4=__ZNK2cl6vectorIjLj3EE4sizeEv($3);
 var $5=($4>>>0)<3;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($3+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)+(1))|0);
 HEAP32[(($7)>>2)]=$9;
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($3+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($3)|0);
 var $15=(($14+($13<<2))|0);
 HEAP32[(($15)>>2)]=$11;
 var $16=(($3+16)|0);
 HEAP8[($16)]=0;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6vectorIjLj3EE4sizeEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)+(1))|0);
 return $5;
}
function __ZNK2cl6detail7WrapperIP10_cl_kernelEclEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK2cl7NDRange10dimensionsEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+20)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK2cl7NDRangecvPKjEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=$3;
 var $5=__ZNK2cl6vectorIjLj3EEcvPKjEv($4);
 return $5;
}
function __ZNK2cl6vectorIjLj3EEcvPKjEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZN2cl6detail7WrapperIP9_cl_eventEaSERKS4_($this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=__ZNK2cl6detail7WrapperIP9_cl_eventE7releaseEv($3);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($3)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=__ZNK2cl6detail7WrapperIP9_cl_eventE6retainEv($3);
 label=5;break;
 case 5: 
 return $3;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP9_cl_eventE7releaseEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP9_cl_eventE7releaseES3_($4);
 return $5;
}
function __ZNK2cl6detail7WrapperIP9_cl_eventE6retainEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP9_cl_eventE6retainES3_($4);
 return $5;
}
function __ZN2cl6detail16ReferenceHandlerIP9_cl_eventE6retainES3_($event){
 var label=0;
 var $1;
 $1=$event;
 var $2=$1;
 var $3=_clRetainEvent($2);
 return $3;
}
function __ZN2cl6detail16ReferenceHandlerIP9_cl_eventE7releaseES3_($event){
 var label=0;
 var $1;
 $1=$event;
 var $2=$1;
 var $3=_clReleaseEvent($2);
 return $3;
}
function __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($this,$index,$value){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$index;
 var $3=$1;
 var $4=$3;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 var $8=__ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE4sizeERKS2_($value);
 var $9=__ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE3ptrERS2_($value);
 var $10=$9;
 var $11=_clSetKernelArg($6,$7,$8,$10);
 var $12=__ZN2cl6detailL10errHandlerEiPKc131($11,1624);
 return $12;
}
function __ZN2cl6BufferC1ERKS0_($this,$buffer){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$buffer;
 var $3=$1;
 var $4=$2;
 __ZN2cl6BufferC2ERKS0_($3,$4);
 return;
}
function __ZN2cl6Kernel6setArgIjEEijT_($this,$index,$value){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3=sp;
 $1=$this;
 $2=$index;
 HEAP32[(($3)>>2)]=$value;
 var $4=$1;
 var $5=$4;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $9=__ZN2cl6detail21KernelArgumentHandlerIjE4sizeERKj($3);
 var $10=__ZN2cl6detail21KernelArgumentHandlerIjE3ptrERj($3);
 var $11=$10;
 var $12=_clSetKernelArg($7,$8,$9,$11);
 var $13=__ZN2cl6detailL10errHandlerEiPKc131($12,1624);
 STACKTOP=sp;return $13;
}
function __ZN2cl6detail21KernelArgumentHandlerIjE4sizeERKj($0){
 var label=0;
 var $2;
 $2=$0;
 return 4;
}
function __ZN2cl6detail21KernelArgumentHandlerIjE3ptrERj($value){
 var label=0;
 var $1;
 $1=$value;
 var $2=$1;
 return $2;
}
function __ZN2cl6BufferC2ERKS0_($this,$buffer){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$buffer;
 var $3=$1;
 var $4=$3;
 var $5=$2;
 var $6=$5;
 __ZN2cl6MemoryC2ERKS0_($4,$6);
 return;
}
function __ZN2cl6MemoryC2ERKS0_($this,$memory){
 var label=0;
 var $1;
 var $2;
 $1=$this;
 $2=$memory;
 var $3=$1;
 var $4=$3;
 var $5=$2;
 var $6=$5;
 __ZN2cl6detail7WrapperIP7_cl_memEC2ERKS4_($4,$6);
 return;
}
function __ZN2cl6detail7WrapperIP7_cl_memEC2ERKS4_($this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($3)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($3)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=__ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP7_cl_memE6retainES3_($4);
 return $5;
}
function __ZN2cl6detail16ReferenceHandlerIP7_cl_memE6retainES3_($memory){
 var label=0;
 var $1;
 $1=$memory;
 var $2=$1;
 var $3=_clRetainMemObject($2);
 return $3;
}
function __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE4sizeERKS2_($0){
 var label=0;
 var $2;
 $2=$0;
 return 4;
}
function __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE3ptrERS2_($value){
 var label=0;
 var $1;
 $1=$value;
 var $2=$1;
 return $2;
}
function __ZN2cl7ContextD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=__ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($2);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP11_cl_contextE7releaseES3_($4);
 return $5;
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_contextE7releaseES3_($context){
 var label=0;
 var $1;
 $1=$context;
 var $2=$1;
 var $3=_clReleaseContext($2);
 return $3;
}
function __ZN2cl6BufferD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6MemoryD2Ev($3);
 return;
}
function __ZN2cl6MemoryD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP7_cl_memED2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP7_cl_memED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=__ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($2);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP7_cl_memE7releaseES3_($4);
 return $5;
}
function __ZN2cl6detail16ReferenceHandlerIP7_cl_memE7releaseES3_($memory){
 var label=0;
 var $1;
 $1=$memory;
 var $2=$1;
 var $3=_clReleaseMemObject($2);
 return $3;
}
function __ZN2cl6KernelD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=__ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($2);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE7releaseES3_($4);
 return $5;
}
function __ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE7releaseES3_($kernel){
 var label=0;
 var $1;
 $1=$kernel;
 var $2=$1;
 var $3=_clReleaseKernel($2);
 return $3;
}
function __ZN2cl12CommandQueueD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=__ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($2);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE7releaseES3_($4);
 return $5;
}
function __ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE7releaseES3_($queue){
 var label=0;
 var $1;
 $1=$queue;
 var $2=$1;
 var $3=_clReleaseCommandQueue($2);
 return $3;
}
function __ZN2cl5EventD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP9_cl_eventED2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP9_cl_eventED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=__ZNK2cl6detail7WrapperIP9_cl_eventE7releaseEv($2);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl7ProgramD2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP11_cl_programED2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP11_cl_programED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=__ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($2);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP11_cl_programE7releaseES3_($4);
 return $5;
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_programE7releaseES3_($program){
 var label=0;
 var $1;
 $1=$program;
 var $2=$1;
 var $3=_clReleaseProgram($2);
 return $3;
}
function __ZN2cl6BufferC2ERKNS_7ContextEyjPvPi($this,$context,$flags$0,$flags$1,$size,$host_ptr,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $5;
 var $6;
 var $error=(sp)+(8);
 var $7;
 var $8;
 $1=$this;
 $2=$context;
 var $st$0$0=(($3)|0);
 HEAP32[(($st$0$0)>>2)]=$flags$0;
 var $st$1$1=(($3+4)|0);
 HEAP32[(($st$1$1)>>2)]=$flags$1;
 $4=$size;
 $5=$host_ptr;
 $6=$err;
 var $9=$1;
 var $10=$9;
 __ZN2cl6MemoryC2Ev($10);
 var $11=$2;
 var $12=$11;
 var $13=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $ld$2$0=(($3)|0);
 var $15$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $15$1=HEAP32[(($ld$3$1)>>2)];
 var $16=$4;
 var $17=$5;
 var $18=(function() { try { __THREW__ = 0; return _clCreateBuffer($13,$15$0,$15$1,$16,$17,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $20=$9;
 var $21=(($20)|0);
 HEAP32[(($21)>>2)]=$18;
 var $22=HEAP32[(($error)>>2)];
 var $23=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc131($22,1608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $25=$6;
 var $26=($25|0)!=0;
 if($26){label=5;break;}else{label=7;break;}
 case 5: 
 var $28=HEAP32[(($error)>>2)];
 var $29=$6;
 HEAP32[(($29)>>2)]=$28;
 label=7;break;
 case 6: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=$31$0;
 $7=$32;
 var $33=$31$1;
 $8=$33;
 var $34=$9;
 (function() { try { __THREW__ = 0; return __ZN2cl6MemoryD2Ev($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 label=9;break;
 case 9: 
 var $38=$7;
 var $39=$8;
 var $40$0=$38;
 var $40$1=0;
 var $41$0=$40$0;
 var $41$1=$39;
 ___resumeException($41$0)
 case 10: 
 var $43$0 = ___cxa_find_matching_catch(-1, -1,0); var $43$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6MemoryC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP7_cl_memEC2Ev($3);
 return;
}
function __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN2cl6detail7WrapperIP7_cl_memEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZN2cl6KernelC2ERKNS_7ProgramEPKcPi($this,$program,$name,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $error=sp;
 var $5;
 var $6;
 $1=$this;
 $2=$program;
 $3=$name;
 $4=$err;
 var $7=$1;
 var $8=$7;
 __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($8);
 var $9=$2;
 var $10=$9;
 var $11=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_programEclEv($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $13=$3;
 var $14=(function() { try { __THREW__ = 0; return _clCreateKernel($11,$13,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $16=$7;
 var $17=(($16)|0);
 HEAP32[(($17)>>2)]=$14;
 var $18=HEAP32[(($error)>>2)];
 var $19=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc131($18,1576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $21=$4;
 var $22=($21|0)!=0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=HEAP32[(($error)>>2)];
 var $25=$4;
 HEAP32[(($25)>>2)]=$24;
 label=7;break;
 case 6: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=$27$0;
 $5=$28;
 var $29=$27$1;
 $6=$29;
 var $30=$7;
 (function() { try { __THREW__ = 0; return __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 label=9;break;
 case 9: 
 var $34=$5;
 var $35=$6;
 var $36$0=$34;
 var $36$1=0;
 var $37$0=$36$0;
 var $37$1=$35;
 ___resumeException($37$0)
 case 10: 
 var $39$0 = ___cxa_find_matching_catch(-1, -1,0); var $39$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZNK2cl6detail7WrapperIP11_cl_programEclEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN2cl6stringD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($2+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($8);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK2cl6vectorINS_6DeviceELj10EE5frontEv($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZN2cl7ProgramC2ERKNS_7ContextERKNS_6vectorINSt3__14pairIPKcjEELj10EEEPi($this,$context,$sources,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $error=sp;
 var $n;
 var $5;
 var $6;
 var $lengths;
 var $strings;
 var $i;
 var $7=(sp)+(8);
 var $8=(sp)+(16);
 $1=$this;
 $2=$context;
 $3=$sources;
 $4=$err;
 var $9=$1;
 var $10=$9;
 __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($10);
 var $11=$3;
 var $12=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorINSt3__14pairIPKcjEELj10EE4sizeEv($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=8;break; }
 case 2: 
 $n=$12;
 var $14=$n;
 var $15=($14<<2);
 var $16=STACKTOP;STACKTOP = (STACKTOP + $15)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $17=$16;
 $lengths=$17;
 var $18=$n;
 var $19=($18<<2);
 var $20=STACKTOP;STACKTOP = (STACKTOP + $19)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $21=$20;
 $strings=$21;
 $i=0;
 label=3;break;
 case 3: 
 var $23=$i;
 var $24=$n;
 var $25=($23>>>0)<($24>>>0);
 if($25){label=4;break;}else{label=9;break;}
 case 4: 
 var $27=$3;
 var $28=$i;
 (function() { try { __THREW__ = 0; return __ZNK2cl6vectorINSt3__14pairIPKcjEELj10EEixEi($7,$27,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 var $30=(($7)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$i;
 var $33=$strings;
 var $34=(($33+($32<<2))|0);
 HEAP32[(($34)>>2)]=$31;
 var $35=$3;
 var $36=$i;
 (function() { try { __THREW__ = 0; return __ZNK2cl6vectorINSt3__14pairIPKcjEELj10EEixEi($8,$35,$36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $38=(($8+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$i;
 var $41=$lengths;
 var $42=(($41+($40<<2))|0);
 HEAP32[(($42)>>2)]=$39;
 label=7;break;
 case 7: 
 var $44=$i;
 var $45=((($44)+(1))|0);
 $i=$45;
 label=3;break;
 case 8: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1); var $47$1 = tempRet0;
 var $48=$47$0;
 $5=$48;
 var $49=$47$1;
 $6=$49;
 var $50=$9;
 (function() { try { __THREW__ = 0; return __ZN2cl6detail7WrapperIP11_cl_programED2Ev($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 9: 
 var $52=$2;
 var $53=$52;
 var $54=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 10: 
 var $56=$n;
 var $57=$strings;
 var $58=$lengths;
 var $59=(function() { try { __THREW__ = 0; return _clCreateProgramWithSource($54,$56,$57,$58,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=8;break; }
 case 11: 
 var $61=$9;
 var $62=(($61)|0);
 HEAP32[(($62)>>2)]=$59;
 var $63=HEAP32[(($error)>>2)];
 var $64=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc131($63,1528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=8;break; }
 case 12: 
 var $66=$4;
 var $67=($66|0)!=0;
 if($67){label=13;break;}else{label=14;break;}
 case 13: 
 var $69=HEAP32[(($error)>>2)];
 var $70=$4;
 HEAP32[(($70)>>2)]=$69;
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
 case 15: 
 label=16;break;
 case 16: 
 var $74=$5;
 var $75=$6;
 var $76$0=$74;
 var $76$1=0;
 var $77$0=$76$0;
 var $77$1=$75;
 ___resumeException($77$0)
 case 17: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1,0); var $79$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZNK2cl6vectorINSt3__14pairIPKcjEELj10EEixEi($agg_result,$this,$index){
 var label=0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 $5=$this;
 $6=$index;
 var $7=$5;
 var $8=$6;
 var $9=(($7)|0);
 var $10=(($9+($8<<3))|0);
 $3=$agg_result;
 $4=$10;
 var $11=$3;
 var $12=$4;
 $1=$11;
 $2=$12;
 var $13=$1;
 var $14=(($13)|0);
 var $15=$2;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 HEAP32[(($14)>>2)]=$17;
 var $18=(($13+4)|0);
 var $19=$2;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 HEAP32[(($18)>>2)]=$21;
 return;
}
function __ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEyPi($this,$context,$device,$properties$0,$properties$1,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $error=(sp)+(8);
 var $6;
 var $7;
 $1=$this;
 $2=$context;
 $3=$device;
 var $st$0$0=(($4)|0);
 HEAP32[(($st$0$0)>>2)]=$properties$0;
 var $st$1$1=(($4+4)|0);
 HEAP32[(($st$1$1)>>2)]=$properties$1;
 $5=$err;
 var $8=$1;
 var $9=$8;
 __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($9);
 var $10=$2;
 var $11=$10;
 var $12=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=7;break; }
 case 2: 
 var $14=$3;
 var $15=$14;
 var $16=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $ld$2$0=(($4)|0);
 var $18$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($4+4)|0);
 var $18$1=HEAP32[(($ld$3$1)>>2)];
 var $19=(function() { try { __THREW__ = 0; return _clCreateCommandQueue($12,$16,$18$0,$18$1,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $21=$8;
 var $22=(($21)|0);
 HEAP32[(($22)>>2)]=$19;
 var $23=HEAP32[(($error)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc131($23,1488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $26=$5;
 var $27=($26|0)!=0;
 if($27){label=6;break;}else{label=8;break;}
 case 6: 
 var $29=HEAP32[(($error)>>2)];
 var $30=$5;
 HEAP32[(($30)>>2)]=$29;
 label=8;break;
 case 7: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1); var $32$1 = tempRet0;
 var $33=$32$0;
 $6=$33;
 var $34=$32$1;
 $7=$34;
 var $35=$8;
 (function() { try { __THREW__ = 0; return __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=11;break; }
 case 8: 
 STACKTOP=sp;return;
 case 9: 
 label=10;break;
 case 10: 
 var $39=$6;
 var $40=$7;
 var $41$0=$39;
 var $41$1=0;
 var $42$0=$41$0;
 var $42$1=$40;
 ___resumeException($42$0)
 case 11: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1,0); var $44$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZN2cl7ContextC2ERKNS_6vectorINS_6DeviceELj10EEEPiPFvPKcPKvjPvESB_S6_($this,$devices,$properties,$notifyFptr,$data,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $error=sp;
 var $7;
 var $8;
 $1=$this;
 $2=$devices;
 $3=$properties;
 $4=$notifyFptr;
 $5=$data;
 $6=$err;
 var $9=$1;
 var $10=$9;
 __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($10);
 var $11=$3;
 var $12=$2;
 var $13=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=7;break; }
 case 2: 
 var $15=$2;
 var $16=(function() { try { __THREW__ = 0; return __ZNK2cl6vectorINS_6DeviceELj10EE5frontEv($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $18=$16;
 var $19=$4;
 var $20=$5;
 var $21=(function() { try { __THREW__ = 0; return _clCreateContext($11,$13,$18,$19,$20,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $23=$9;
 var $24=(($23)|0);
 HEAP32[(($24)>>2)]=$21;
 var $25=HEAP32[(($error)>>2)];
 var $26=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc131($25,1464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $28=$6;
 var $29=($28|0)!=0;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $31=HEAP32[(($error)>>2)];
 var $32=$6;
 HEAP32[(($32)>>2)]=$31;
 label=8;break;
 case 7: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 var $35=$34$0;
 $7=$35;
 var $36=$34$1;
 $8=$36;
 var $37=$9;
 (function() { try { __THREW__ = 0; return __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=11;break; }
 case 8: 
 STACKTOP=sp;return;
 case 9: 
 label=10;break;
 case 10: 
 var $41=$7;
 var $42=$8;
 var $43$0=$41;
 var $43$1=0;
 var $44$0=$43$0;
 var $44$1=$42;
 ___resumeException($44$0)
 case 11: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1,0); var $46$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZN2cl5EventC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP9_cl_eventEC2Ev($3);
 return;
}
function __ZN2cl6detail7WrapperIP9_cl_eventEC2Ev($this){
 var label=0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __GLOBAL__I_a132(){
 var label=0;
 ___cxx_global_var_init126();
 return;
}
function __ZNSt3__18ios_base4InitC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(sp)+(24);
 var $5=HEAP32[((_stdin)>>2)];
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(16208,$5,16336);
 HEAP32[((17200)>>2)]=7420;
 HEAP32[((17208)>>2)]=7440;
 HEAP32[((17204)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17208,16208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=2;break; }
 case 2: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1); var $7$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17208);
 ___resumeException($7$0)
 case 3: 
 HEAP32[((17280)>>2)]=0;
 HEAP32[((17284)>>2)]=-1;
 var $8=HEAP32[((_stdout)>>2)];
 var $9=$4;
 HEAP32[((16112)>>2)]=7200;
 __ZNSt3__16localeC2Ev(16116);
 HEAP32[((16120)>>2)]=0; HEAP32[((16124)>>2)]=0; HEAP32[((16128)>>2)]=0; HEAP32[((16132)>>2)]=0; HEAP32[((16136)>>2)]=0; HEAP32[((16140)>>2)]=0;
 HEAP32[((16112)>>2)]=7712;
 HEAP32[((16144)>>2)]=$8;
 __ZNSt3__16localeC2ERKS0_($4,16116);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($4,16536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 __ZNSt3__16localeD2Ev($4);
 HEAP32[((16112)>>2)]=7200;
 __ZNSt3__16localeD2Ev(16116);
 ___resumeException($12$0)
 case 5: 
 var $13=$10;
 __ZNSt3__16localeD2Ev($4);
 HEAP32[((16148)>>2)]=$13;
 HEAP32[((16152)>>2)]=16344;
 var $14=$10;
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=FUNCTION_TABLE[$17]($13);
 var $19=($18&1);
 HEAP8[(16156)]=$19;
 HEAP32[((16936)>>2)]=7324;
 HEAP32[((16940)>>2)]=7344;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(16940,16112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=6;break; }
 case 6: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(16940);
 ___resumeException($21$0)
 case 7: 
 HEAP32[((17012)>>2)]=0;
 HEAP32[((17016)>>2)]=-1;
 var $22=HEAP32[((_stderr)>>2)];
 var $23=$3;
 HEAP32[((16160)>>2)]=7200;
 __ZNSt3__16localeC2Ev(16164);
 HEAP32[((16168)>>2)]=0; HEAP32[((16172)>>2)]=0; HEAP32[((16176)>>2)]=0; HEAP32[((16180)>>2)]=0; HEAP32[((16184)>>2)]=0; HEAP32[((16188)>>2)]=0;
 HEAP32[((16160)>>2)]=7712;
 HEAP32[((16192)>>2)]=$22;
 __ZNSt3__16localeC2ERKS0_($3,16164);
 var $24=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($3,16536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 __ZNSt3__16localeD2Ev($3);
 HEAP32[((16160)>>2)]=7200;
 __ZNSt3__16localeD2Ev(16164);
 ___resumeException($26$0)
 case 9: 
 var $27=$24;
 __ZNSt3__16localeD2Ev($3);
 HEAP32[((16196)>>2)]=$27;
 HEAP32[((16200)>>2)]=16352;
 var $28=$24;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+28)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($27);
 var $33=($32&1);
 HEAP8[(16204)]=$33;
 HEAP32[((17112)>>2)]=7324;
 HEAP32[((17116)>>2)]=7344;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17116,16160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=10;break; }
 case 10: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17116);
 ___resumeException($35$0)
 case 11: 
 HEAP32[((17188)>>2)]=0;
 HEAP32[((17192)>>2)]=-1;
 var $36=HEAP32[((17112)>>2)];
 var $37=((($36)-(12))|0);
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $_sum96=((($39)+(24))|0);
 var $40=((17112+$_sum96)|0);
 var $41=$40;
 var $42=HEAP32[(($41)>>2)];
 HEAP32[((17024)>>2)]=7324;
 HEAP32[((17028)>>2)]=7344;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17028,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1); var $44$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17028);
 ___resumeException($44$0)
 case 13: 
 HEAP32[((17100)>>2)]=0;
 HEAP32[((17104)>>2)]=-1;
 var $45=HEAP32[((17200)>>2)];
 var $46=((($45)-(12))|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $_sum99=((($48)+(72))|0);
 var $49=((17200+$_sum99)|0);
 var $50=$49;
 HEAP32[(($50)>>2)]=16936;
 var $51=HEAP32[((17112)>>2)];
 var $52=((($51)-(12))|0);
 var $53=$52;
 var $54=HEAP32[(($53)>>2)];
 var $_sum100=((($54)+(4))|0);
 var $55=((17112+$_sum100)|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $58=$57|8192;
 HEAP32[(($56)>>2)]=$58;
 var $59=HEAP32[((17112)>>2)];
 var $60=((($59)-(12))|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $_sum101=((($62)+(72))|0);
 var $63=((17112+$_sum101)|0);
 var $64=$63;
 HEAP32[(($64)>>2)]=16936;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(16056,$5,16360);
 HEAP32[((16848)>>2)]=7372;
 HEAP32[((16856)>>2)]=7392;
 HEAP32[((16852)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(16856,16056) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(16856);
 ___resumeException($66$0)
 case 15: 
 HEAP32[((16928)>>2)]=0;
 HEAP32[((16932)>>2)]=-1;
 var $67=$2;
 HEAP32[((15960)>>2)]=7128;
 __ZNSt3__16localeC2Ev(15964);
 HEAP32[((15968)>>2)]=0; HEAP32[((15972)>>2)]=0; HEAP32[((15976)>>2)]=0; HEAP32[((15980)>>2)]=0; HEAP32[((15984)>>2)]=0; HEAP32[((15988)>>2)]=0;
 HEAP32[((15960)>>2)]=7640;
 HEAP32[((15992)>>2)]=$8;
 __ZNSt3__16localeC2ERKS0_($2,15964);
 var $68=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2,16528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1); var $70$1 = tempRet0;
 __ZNSt3__16localeD2Ev($2);
 HEAP32[((15960)>>2)]=7128;
 __ZNSt3__16localeD2Ev(15964);
 ___resumeException($70$0)
 case 17: 
 var $71=$68;
 __ZNSt3__16localeD2Ev($2);
 HEAP32[((15996)>>2)]=$71;
 HEAP32[((16000)>>2)]=16368;
 var $72=$68;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($71);
 var $77=($76&1);
 HEAP8[(16004)]=$77;
 HEAP32[((16568)>>2)]=7276;
 HEAP32[((16572)>>2)]=7296;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(16572,15960) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(16572);
 ___resumeException($79$0)
 case 19: 
 HEAP32[((16644)>>2)]=0;
 HEAP32[((16648)>>2)]=-1;
 var $80=$1;
 HEAP32[((16008)>>2)]=7128;
 __ZNSt3__16localeC2Ev(16012);
 HEAP32[((16016)>>2)]=0; HEAP32[((16020)>>2)]=0; HEAP32[((16024)>>2)]=0; HEAP32[((16028)>>2)]=0; HEAP32[((16032)>>2)]=0; HEAP32[((16036)>>2)]=0;
 HEAP32[((16008)>>2)]=7640;
 HEAP32[((16040)>>2)]=$22;
 __ZNSt3__16localeC2ERKS0_($1,16012);
 var $81=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,16528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=20;break; }
 case 20: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1); var $83$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[((16008)>>2)]=7128;
 __ZNSt3__16localeD2Ev(16012);
 ___resumeException($83$0)
 case 21: 
 var $84=$81;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[((16044)>>2)]=$84;
 HEAP32[((16048)>>2)]=16376;
 var $85=$81;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+28)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($84);
 var $90=($89&1);
 HEAP8[(16052)]=$90;
 HEAP32[((16744)>>2)]=7276;
 HEAP32[((16748)>>2)]=7296;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(16748,16008) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(16748);
 ___resumeException($92$0)
 case 23: 
 HEAP32[((16820)>>2)]=0;
 HEAP32[((16824)>>2)]=-1;
 var $93=HEAP32[((16744)>>2)];
 var $94=((($93)-(12))|0);
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $_sum108=((($96)+(24))|0);
 var $97=((16744+$_sum108)|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 HEAP32[((16656)>>2)]=7276;
 HEAP32[((16660)>>2)]=7296;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(16660,$99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $101$0 = ___cxa_find_matching_catch(-1, -1); var $101$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(16660);
 ___resumeException($101$0)
 case 25: 
 HEAP32[((16732)>>2)]=0;
 HEAP32[((16736)>>2)]=-1;
 var $102=HEAP32[((16848)>>2)];
 var $103=((($102)-(12))|0);
 var $104=$103;
 var $105=HEAP32[(($104)>>2)];
 var $_sum111=((($105)+(72))|0);
 var $106=((16848+$_sum111)|0);
 var $107=$106;
 HEAP32[(($107)>>2)]=16568;
 var $108=HEAP32[((16744)>>2)];
 var $109=((($108)-(12))|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $_sum112=((($111)+(4))|0);
 var $112=((16744+$_sum112)|0);
 var $113=$112;
 var $114=HEAP32[(($113)>>2)];
 var $115=$114|8192;
 HEAP32[(($113)>>2)]=$115;
 var $116=HEAP32[((16744)>>2)];
 var $117=((($116)-(12))|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $_sum113=((($119)+(72))|0);
 var $120=((16744+$_sum113)|0);
 var $121=$120;
 HEAP32[(($121)>>2)]=16568;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(16936) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $3=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(17024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(16568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(16656) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 return;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7128;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7128;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,16528);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$this;
 var $6=($__n|0)>0;
 if($6){var $_01011=$__s;var $__i_012=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $8=$__s;
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($8,4,$__n,$10);
 var $_0=$11;label=6;break;
 case 4: 
 var $__i_012;
 var $_01011;
 var $12=HEAP32[(($5)>>2)];
 var $13=(($12+52)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=HEAP32[(($_01011)>>2)];
 var $16=FUNCTION_TABLE[$14]($this,$15);
 var $17=($16|0)==-1;
 if($17){var $_0=$__i_012;label=6;break;}else{label=5;break;}
 case 5: 
 var $19=((($__i_012)+(1))|0);
 var $20=(($_01011+4)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_01011=$20;var $__i_012=$19;label=4;break;}else{var $_0=$19;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 HEAP32[(($__1buf)>>2)]=$__c;
 var $3=(($this+44)|0);
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=$__1buf;
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($8,4,1,$10);
 var $12=($11|0)==1;
 if($12){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $14=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$14;
 var $15=(($__1buf+4)|0);
 var $16=(($this+36)|0);
 var $17=(($this+40)|0);
 var $18=(($__extbuf+8)|0);
 var $19=$__extbuf;
 var $20=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $22=HEAP32[(($16)>>2)];
 var $23=HEAP32[(($17)>>2)];
 var $24=$22;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($22,$23,$pbase_0,$15,$__e,$14,$18,$__extbe);
 var $29=HEAP32[(($__e)>>2)];
 var $30=($29|0)==($pbase_0|0);
 if($30){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $32=($28|0)==3;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$pbase_0;
 var $35=HEAP32[(($20)>>2)];
 var $36=_fwrite($34,1,1,$35);
 var $37=($36|0)==1;
 if($37){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $39=($28|0)==1;
 var $40=($28>>>0)<2;
 if($40){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $42=HEAP32[(($__extbe)>>2)];
 var $43=$42;
 var $44=((($43)-($19))|0);
 var $45=HEAP32[(($20)>>2)];
 var $46=_fwrite($14,1,$44,$45);
 var $47=($46|0)==($44|0);
 if($47){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $49=HEAP32[(($__e)>>2)];
 var $_pbase_0=($39?$49:$pbase_0);
 if($39){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $50=($1?0:$__c);
 var $_0=$50;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=7128;
 var $3=(($this+4)|0);
 __ZNSt3__16localeC2Ev($3);
 var $4=(($this+8)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0;
 HEAP32[(($2)>>2)]=8040;
 var $6=(($this+32)|0);
 HEAP32[(($6)>>2)]=$__fp;
 var $7=(($this+40)|0);
 HEAP32[(($7)>>2)]=$__st;
 var $8=(($this+48)|0);
 HEAP32[(($8)>>2)]=-1;
 var $9=(($this+52)|0);
 HEAP8[($9)]=0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,16528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $11=$10;
 var $12=(($this+36)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=$10;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($11);
 var $18=(($this+44)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=HEAP32[(($12)>>2)];
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($19);
 var $25=(($this+53)|0);
 var $26=($24&1);
 HEAP8[($25)]=$26;
 var $27=HEAP32[(($18)>>2)];
 var $28=($27|0)>8;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($1);
 STACKTOP=sp;return;
 case 5: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($2)>>2)]=7128;
 __ZNSt3__16localeD2Ev($3);
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7128;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7128;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,16528);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(288);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,0);
 return $1;
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,1);
 return $1;
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($5){var $_019=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+48)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=-1;
 var $11=($10&1);
 HEAP8[($2)]=$11;
 var $_019=$9;label=11;break;
 case 4: 
 var $13=(($this+48)|0);
 if($5){label=5;break;}else{label=10;break;}
 case 5: 
 var $15=HEAP32[(($13)>>2)];
 HEAP32[(($__ci)>>2)]=$15;
 var $16=(($this+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+40)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($__ci+4)|0);
 var $21=(($__extbuf)|0);
 var $22=(($__extbuf+8)|0);
 var $23=$17;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($17,$19,$__ci,$20,$__inxt,$21,$22,$__enxt);
 if(($27|0)==2|($27|0)==1){ var $_019=-1;label=11;break;}else if(($27|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $29=HEAP32[(($13)>>2)];
 var $30=(($29)&255);
 HEAP8[($21)]=$30;
 var $31=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$31;
 label=7;break;
 case 7: 
 var $32=(($this+32)|0);
 label=8;break;
 case 8: 
 var $33=HEAP32[(($__enxt)>>2)];
 var $34=($33>>>0)>($21>>>0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=((($33)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$36;
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=HEAP32[(($32)>>2)];
 var $40=_ungetc($38,$39);
 var $41=($40|0)==-1;
 if($41){var $_019=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($13)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_019=$__c;label=11;break;
 case 11: 
 var $_019;
 STACKTOP=sp;return $_019;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+48)|0);
 var $7=HEAP32[(($6)>>2)];
 if($__consume){label=3;break;}else{var $_0=$7;label=22;break;}
 case 3: 
 HEAP32[(($6)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$7;label=22;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $_sroa_speculated=($11?$10:1);
 var $12=($_sroa_speculated|0)>0;
 if($12){label=5;break;}else{label=8;break;}
 case 5: 
 var $13=(($this+32)|0);
 var $__i_044=0;label=6;break;
 case 6: 
 var $__i_044;
 var $15=HEAP32[(($13)>>2)];
 var $16=_fgetc($15);
 var $17=($16|0)==-1;
 if($17){var $_0=-1;label=22;break;}else{label=7;break;}
 case 7: 
 var $19=(($16)&255);
 var $20=(($__extbuf+$__i_044)|0);
 HEAP8[($20)]=$19;
 var $21=((($__i_044)+(1))|0);
 var $22=($21|0)<($_sroa_speculated|0);
 if($22){var $__i_044=$21;label=6;break;}else{label=8;break;}
 case 8: 
 var $23=(($this+53)|0);
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+4)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$_sroa_speculated;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 var $35=(($34<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$35;
 var $__nread_2=$_sroa_speculated;label=16;break;
 case 11: 
 var $__nread_0;
 var $37=HEAP32[(($27)>>2)];
 var $38=$37;
 var $ld$0$0=(($38)|0);
 var $39$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$1$1)>>2)];
 var $40=HEAP32[(($28)>>2)];
 var $41=(($__extbuf+$__nread_0)|0);
 var $42=$40;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($40,$37,$29,$41,$__enxt,$__1buf,$30,$__inxt);
 if(($46|0)==1){ label=12;break;}else if(($46|0)==3){ label=14;break;}else if(($46|0)==2){ var $_0=-1;label=22;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $48=HEAP32[(($27)>>2)];
 var $49=$48;
 var $st$2$0=(($49)|0);
 HEAP32[(($st$2$0)>>2)]=$39$0;
 var $st$3$1=(($49+4)|0);
 HEAP32[(($st$3$1)>>2)]=$39$1;
 var $50=($__nread_0|0)==8;
 if($50){var $_0=-1;label=22;break;}else{label=13;break;}
 case 13: 
 var $52=HEAP32[(($31)>>2)];
 var $53=_fgetc($52);
 var $54=($53|0)==-1;
 if($54){var $_0=-1;label=22;break;}else{label=15;break;}
 case 14: 
 var $56=HEAP8[($29)];
 var $57=(($56<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$57;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $59=(($53)&255);
 HEAP8[($41)]=$59;
 var $60=((($__nread_0)+(1))|0);
 var $__nread_0=$60;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $61=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $63=($__i2_0|0)>0;
 if($63){label=19;break;}else{label=21;break;}
 case 19: 
 var $65=((($__i2_0)-(1))|0);
 var $66=(($__extbuf+$65)|0);
 var $67=HEAP8[($66)];
 var $68=(($67<<24)>>24);
 var $69=HEAP32[(($61)>>2)];
 var $70=_ungetc($68,$69);
 var $71=($70|0)==-1;
 if($71){var $_0=-1;label=22;break;}else{var $__i2_0=$65;label=18;break;}
 case 20: 
 var $73=HEAP32[(($__1buf)>>2)];
 var $74=(($this+48)|0);
 HEAP32[(($74)>>2)]=$73;
 var $_0=$73;label=22;break;
 case 21: 
 var $_pre=HEAP32[(($__1buf)>>2)];
 var $_0=$_pre;label=22;break;
 case 22: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7200;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7200;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,16536);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$this;
 var $6=($__n|0)>0;
 if($6){var $_01011=$__s;var $__i_012=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($__s,1,$__n,$9);
 var $_0=$10;label=6;break;
 case 4: 
 var $__i_012;
 var $_01011;
 var $11=HEAP32[(($5)>>2)];
 var $12=(($11+52)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=HEAP8[($_01011)];
 var $15=($14&255);
 var $16=FUNCTION_TABLE[$13]($this,$15);
 var $17=($16|0)==-1;
 if($17){var $_0=$__i_012;label=6;break;}else{label=5;break;}
 case 5: 
 var $19=((($__i_012)+(1))|0);
 var $20=(($_01011+1)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_01011=$20;var $__i_012=$19;label=4;break;}else{var $_0=$19;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=(($__c)&255);
 HEAP8[($__1buf)]=$3;
 var $4=(($this+44)|0);
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($__1buf,1,1,$10);
 var $12=($11|0)==1;
 if($12){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $14=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$14;
 var $15=(($__1buf+1)|0);
 var $16=(($this+36)|0);
 var $17=(($this+40)|0);
 var $18=(($__extbuf+8)|0);
 var $19=$__extbuf;
 var $20=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $22=HEAP32[(($16)>>2)];
 var $23=HEAP32[(($17)>>2)];
 var $24=$22;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($22,$23,$pbase_0,$15,$__e,$14,$18,$__extbe);
 var $29=HEAP32[(($__e)>>2)];
 var $30=($29|0)==($pbase_0|0);
 if($30){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $32=($28|0)==3;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=HEAP32[(($20)>>2)];
 var $35=_fwrite($pbase_0,1,1,$34);
 var $36=($35|0)==1;
 if($36){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $38=($28|0)==1;
 var $39=($28>>>0)<2;
 if($39){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $41=HEAP32[(($__extbe)>>2)];
 var $42=$41;
 var $43=((($42)-($19))|0);
 var $44=HEAP32[(($20)>>2)];
 var $45=_fwrite($14,1,$43,$44);
 var $46=($45|0)==($43|0);
 if($46){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $48=HEAP32[(($__e)>>2)];
 var $_pbase_0=($38?$48:$pbase_0);
 if($38){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $49=($1?0:$__c);
 var $_0=$49;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=7200;
 var $3=(($this+4)|0);
 __ZNSt3__16localeC2Ev($3);
 var $4=(($this+8)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0;
 HEAP32[(($2)>>2)]=8112;
 var $6=(($this+32)|0);
 HEAP32[(($6)>>2)]=$__fp;
 var $7=(($this+40)|0);
 HEAP32[(($7)>>2)]=$__st;
 var $8=(($this+48)|0);
 HEAP32[(($8)>>2)]=-1;
 var $9=(($this+52)|0);
 HEAP8[($9)]=0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,16536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $11=$10;
 var $12=(($this+36)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=$10;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($11);
 var $18=(($this+44)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=HEAP32[(($12)>>2)];
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($19);
 var $25=(($this+53)|0);
 var $26=($24&1);
 HEAP8[($25)]=$26;
 var $27=HEAP32[(($18)>>2)];
 var $28=($27|0)>8;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($1);
 STACKTOP=sp;return;
 case 5: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($2)>>2)]=7200;
 __ZNSt3__16localeD2Ev($3);
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7200;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7200;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,16536);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(288);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,0);
 return $1;
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,1);
 return $1;
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($5){var $_019=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+48)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=-1;
 var $11=($10&1);
 HEAP8[($2)]=$11;
 var $_019=$9;label=11;break;
 case 4: 
 var $13=(($this+48)|0);
 if($5){label=5;break;}else{label=10;break;}
 case 5: 
 var $15=HEAP32[(($13)>>2)];
 var $16=(($15)&255);
 HEAP8[($__ci)]=$16;
 var $17=(($this+36)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($this+40)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($__ci+1)|0);
 var $22=(($__extbuf)|0);
 var $23=(($__extbuf+8)|0);
 var $24=$18;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($18,$20,$__ci,$21,$__inxt,$22,$23,$__enxt);
 if(($28|0)==2|($28|0)==1){ var $_019=-1;label=11;break;}else if(($28|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $30=HEAP32[(($13)>>2)];
 var $31=(($30)&255);
 HEAP8[($22)]=$31;
 var $32=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$32;
 label=7;break;
 case 7: 
 var $33=(($this+32)|0);
 label=8;break;
 case 8: 
 var $34=HEAP32[(($__enxt)>>2)];
 var $35=($34>>>0)>($22>>>0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=((($34)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$37;
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=HEAP32[(($33)>>2)];
 var $41=_ungetc($39,$40);
 var $42=($41|0)==-1;
 if($42){var $_019=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($13)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_019=$__c;label=11;break;
 case 11: 
 var $_019;
 STACKTOP=sp;return $_019;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+48)|0);
 var $7=HEAP32[(($6)>>2)];
 if($__consume){label=3;break;}else{var $_0=$7;label=23;break;}
 case 3: 
 HEAP32[(($6)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$7;label=23;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $_sroa_speculated=($11?$10:1);
 var $12=($_sroa_speculated|0)>0;
 if($12){label=5;break;}else{label=8;break;}
 case 5: 
 var $13=(($this+32)|0);
 var $__i_044=0;label=6;break;
 case 6: 
 var $__i_044;
 var $15=HEAP32[(($13)>>2)];
 var $16=_fgetc($15);
 var $17=($16|0)==-1;
 if($17){var $_0=-1;label=23;break;}else{label=7;break;}
 case 7: 
 var $19=(($16)&255);
 var $20=(($__extbuf+$__i_044)|0);
 HEAP8[($20)]=$19;
 var $21=((($__i_044)+(1))|0);
 var $22=($21|0)<($_sroa_speculated|0);
 if($22){var $__i_044=$21;label=6;break;}else{label=8;break;}
 case 8: 
 var $23=(($this+53)|0);
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+1)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$_sroa_speculated;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 HEAP8[($__1buf)]=$34;
 var $__nread_2=$_sroa_speculated;label=16;break;
 case 11: 
 var $__nread_0;
 var $36=HEAP32[(($27)>>2)];
 var $37=$36;
 var $ld$0$0=(($37)|0);
 var $38$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$1$1)>>2)];
 var $39=HEAP32[(($28)>>2)];
 var $40=(($__extbuf+$__nread_0)|0);
 var $41=$39;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=FUNCTION_TABLE[$44]($39,$36,$29,$40,$__enxt,$__1buf,$30,$__inxt);
 if(($45|0)==1){ label=12;break;}else if(($45|0)==3){ label=14;break;}else if(($45|0)==2){ var $_0=-1;label=23;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $47=HEAP32[(($27)>>2)];
 var $48=$47;
 var $st$2$0=(($48)|0);
 HEAP32[(($st$2$0)>>2)]=$38$0;
 var $st$3$1=(($48+4)|0);
 HEAP32[(($st$3$1)>>2)]=$38$1;
 var $49=($__nread_0|0)==8;
 if($49){var $_0=-1;label=23;break;}else{label=13;break;}
 case 13: 
 var $51=HEAP32[(($31)>>2)];
 var $52=_fgetc($51);
 var $53=($52|0)==-1;
 if($53){var $_0=-1;label=23;break;}else{label=15;break;}
 case 14: 
 var $55=HEAP8[($29)];
 HEAP8[($__1buf)]=$55;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $57=(($52)&255);
 HEAP8[($40)]=$57;
 var $58=((($__nread_0)+(1))|0);
 var $__nread_0=$58;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $59=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $61=($__i2_0|0)>0;
 if($61){label=19;break;}else{label=21;break;}
 case 19: 
 var $63=((($__i2_0)-(1))|0);
 var $64=(($__extbuf+$63)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=HEAP32[(($59)>>2)];
 var $68=_ungetc($66,$67);
 var $69=($68|0)==-1;
 if($69){var $_0=-1;label=23;break;}else{var $__i2_0=$63;label=18;break;}
 case 20: 
 var $71=HEAP8[($__1buf)];
 var $72=($71&255);
 var $73=(($this+48)|0);
 HEAP32[(($73)>>2)]=$72;
 var $75=$71;label=22;break;
 case 21: 
 var $_pre=HEAP8[($__1buf)];
 var $75=$_pre;label=22;break;
 case 22: 
 var $75;
 var $76=($75&255);
 var $_0=$76;label=23;break;
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a249(){
 var label=0;
 __ZNSt3__18ios_base4InitC2Ev(0);
 var $1=_atexit((410),17288,___dso_handle);
 return;
}
function __ZNSt3__114__shared_countD2Ev($this){
 var label=0;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this){
 var label=0;
 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+1,tempValue);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
 var $3=($2|0)==0;
 if($3){label=2;break;}else{var $_0=0;label=3;break;}
 case 2: 
 var $5=$this;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+8)|0);
 var $8=HEAP32[(($7)>>2)];
 FUNCTION_TABLE[$8]($this);
 var $_0=1;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorC2EPKc($this,$msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5480;
 var $2=(($this+4)|0);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=_strlen($msg);
 var $5=((($4)+(1))|0);
 var $6=((($4)+(13))|0);
 var $7=__Znaj($6);
 var $8=$7;
 var $9=(($7+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$4;
 HEAP32[(($8)>>2)]=$4;
 var $11=(($7+12)|0);
 HEAP32[(($2)>>2)]=$11;
 var $12=(($7+8)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 assert($5 % 1 === 0);(_memcpy($11, $msg, $5)|0);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5480;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($10);
 label=4;break;
 case 4: 
 var $13=$this;
 __ZdlPv($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5480;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt11logic_error4whatEv($this){
 var label=0;
 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5416;
 var $2=(($this+4)|0);
 var $3=($2|0)==0;
 if($3){label=6;break;}else{label=2;break;}
 case 2: 
 var $5=$msg;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($msg+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=5;break;
 case 4: 
 var $13=$msg;
 var $14=(($13+1)|0);
 var $15=$14;label=5;break;
 case 5: 
 var $15;
 var $16=_strlen($15);
 var $17=((($16)+(1))|0);
 var $18=((($16)+(13))|0);
 var $19=__Znaj($18);
 var $20=$19;
 var $21=(($19+4)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=$16;
 HEAP32[(($20)>>2)]=$16;
 var $23=(($19+12)|0);
 HEAP32[(($2)>>2)]=$23;
 var $24=(($19+8)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=0;
 assert($17 % 1 === 0);(_memcpy($23, $15, $17)|0);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5416;
 var $2=(($this+4)|0);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=_strlen($msg);
 var $5=((($4)+(1))|0);
 var $6=((($4)+(13))|0);
 var $7=__Znaj($6);
 var $8=$7;
 var $9=(($7+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$4;
 HEAP32[(($8)>>2)]=$4;
 var $11=(($7+12)|0);
 HEAP32[(($2)>>2)]=$11;
 var $12=(($7+8)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 assert($5 % 1 === 0);(_memcpy($11, $msg, $5)|0);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5416;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($10);
 label=4;break;
 case 4: 
 var $13=$this;
 __ZdlPv($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5416;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt13runtime_error4whatEv($this){
 var label=0;
 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}
function __ZNSt12length_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5480;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($10);
 label=4;break;
 case 4: 
 var $13=$this;
 __ZdlPv($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114error_categoryD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;
 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$ev;
 var $2=(($agg_result+4)|0);
 HEAP32[(($2)>>2)]=$this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 FUNCTION_TABLE[$5]($1,$this,$code);
 var $6=(($1+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($condition+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=2;break;}else{var $17=0;label=3;break;}
 case 2: 
 var $12=(($1)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($condition)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $17=$16;label=3;break;
 case 3: 
 var $17;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($code+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{var $9=0;label=3;break;}
 case 2: 
 var $5=(($code)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($condition|0);
 var $9=$7;label=3;break;
 case 3: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__112__do_message7messageEi($agg_result,$this,$ev){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strerror($ev);
 var $2=_strlen($1);
 var $3=($2>>>0)>4294967279;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $6=($2>>>0)<11;
 if($6){label=4;break;}else{label=5;break;}
 case 4: 
 var $8=$2<<1;
 var $9=(($8)&255);
 var $10=$agg_result;
 var $11=$agg_result;
 HEAP8[($11)]=$9;
 var $12=(($10+1)|0);
 var $__p_0_i=$12;label=6;break;
 case 5: 
 var $13=((($2)+(16))|0);
 var $14=$13&-16;
 var $15=__Znwj($14);
 var $16=(($agg_result+8)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=$14|1;
 var $18=(($agg_result)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($agg_result+4)|0);
 HEAP32[(($19)>>2)]=$2;
 var $__p_0_i=$15;label=6;break;
 case 6: 
 var $__p_0_i;
 assert($2 % 1 === 0);(_memcpy($__p_0_i, $1, $2)|0);
 var $20=(($__p_0_i+$2)|0);
 HEAP8[($20)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$what_arg;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=(($ec)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){label=19;break;}else{label=2;break;}
 case 2: 
 var $7=HEAP8[($1)];
 var $8=($7&255);
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 var $12=(($what_arg+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $16=$13;label=5;break;
 case 4: 
 var $15=$8>>>1;
 var $16=$15;label=5;break;
 case 5: 
 var $16;
 var $17=($16|0)==0;
 if($17){var $21=$4;label=7;break;}else{label=6;break;}
 case 6: 
 var $19=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,3088,2);
 var $_pre=HEAP32[(($3)>>2)];
 var $21=$_pre;label=7;break;
 case 7: 
 var $21;
 var $22=(($ec+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+24)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($2,$23,$21);
 var $28=$2;
 var $29=HEAP8[($28)];
 var $30=$29&1;
 var $31=(($30<<24)>>24)==0;
 if($31){label=9;break;}else{label=8;break;}
 case 8: 
 var $33=(($2+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $38=$34;label=10;break;
 case 9: 
 var $36=$2;
 var $37=(($36+1)|0);
 var $38=$37;label=10;break;
 case 10: 
 var $38;
 var $39=($29&255);
 var $40=$39&1;
 var $41=($40|0)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($2+4)|0);
 var $44=HEAP32[(($43)>>2)];
 var $47=$44;label=13;break;
 case 12: 
 var $46=$39>>>1;
 var $47=$46;label=13;break;
 case 13: 
 var $47;
 var $48=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,$38,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=16;break; }
 case 14: 
 var $49=HEAP8[($28)];
 var $50=$49&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=19;break;}else{label=15;break;}
 case 15: 
 var $53=(($2+8)|0);
 var $54=HEAP32[(($53)>>2)];
 __ZdlPv($54);
 label=19;break;
 case 16: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=HEAP8[($28)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=18;break;}else{label=17;break;}
 case 17: 
 var $61=(($2+8)|0);
 var $62=HEAP32[(($61)>>2)];
 __ZdlPv($62);
 label=18;break;
 case 18: 
 ___resumeException($56$0)
 case 19: 
 var $63=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ec; $ec=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ec)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ec)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=_strlen($what_arg);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $7=($3>>>0)<11;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$3<<1;
 var $10=(($9)&255);
 var $11=$2;
 var $12=$2;
 HEAP8[($12)]=$10;
 var $13=(($11+1)|0);
 var $__p_0_i=$13;label=6;break;
 case 5: 
 var $14=((($3)+(16))|0);
 var $15=$14&-16;
 var $16=__Znwj($15);
 var $17=(($2+8)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=$15|1;
 var $19=(($2)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=(($2+4)|0);
 HEAP32[(($20)>>2)]=$3;
 var $__p_0_i=$16;label=6;break;
 case 6: 
 var $__p_0_i;
 assert($3 % 1 === 0);(_memcpy($__p_0_i, $what_arg, $3)|0);
 var $21=(($__p_0_i+$3)|0);
 HEAP8[($21)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1,$ec,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=13;break; }
 case 7: 
 var $23=(($this)|0);
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($23,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=14;break; }
 case 8: 
 var $25=$1;
 var $26=HEAP8[($25)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 var $30=(($1+8)|0);
 var $31=HEAP32[(($30)>>2)];
 __ZdlPv($31);
 label=10;break;
 case 10: 
 var $32=$2;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($2+8)|0);
 var $38=HEAP32[(($37)>>2)];
 __ZdlPv($38);
 label=12;break;
 case 12: 
 var $39=(($this)|0);
 HEAP32[(($39)>>2)]=7608;
 var $40=(($this+8)|0);
 var $41=$ec;
 var $42=$40;
 var $ld$0$0=(($41)|0);
 var $43$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($41+4)|0);
 var $43$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($42)|0);
 HEAP32[(($st$2$0)>>2)]=$43$0;
 var $st$3$1=(($42+4)|0);
 HEAP32[(($st$3$1)>>2)]=$43$1;
 STACKTOP=sp;return;
 case 13: 
 var $45$0 = ___cxa_find_matching_catch(-1, -1); var $45$1 = tempRet0;
 var $46=$45$0;
 var $47=$45$1;
 var $_0=$47;var $_014=$46;label=16;break;
 case 14: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 var $50=$49$0;
 var $51=$49$1;
 var $52=$1;
 var $53=HEAP8[($52)];
 var $54=$53&1;
 var $55=(($54<<24)>>24)==0;
 if($55){var $_0=$51;var $_014=$50;label=16;break;}else{label=15;break;}
 case 15: 
 var $57=(($1+8)|0);
 var $58=HEAP32[(($57)>>2)];
 __ZdlPv($58);
 var $_0=$51;var $_014=$50;label=16;break;
 case 16: 
 var $_014;
 var $_0;
 var $59=$2;
 var $60=HEAP8[($59)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=18;break;}else{label=17;break;}
 case 17: 
 var $64=(($2+8)|0);
 var $65=HEAP32[(($64)>>2)];
 __ZdlPv($65);
 label=18;break;
 case 18: 
 var $66$0=$_014;
 var $66$1=0;
 var $67$0=$66$0;
 var $67$1=$_0;
 ___resumeException($67$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__112system_errorD2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=HEAP32[(($flag)>>2)];
 var $3=($2|0)==1;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_pthread_cond_wait(16288,16264);
 var $5=HEAP32[(($flag)>>2)];
 var $6=($5|0)==1;
 if($6){label=2;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP32[(($flag)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=14;break;}
 case 4: 
 HEAP32[(($flag)>>2)]=1;
 var $10=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(16264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$func]($arg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $13=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(16264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=9;break; }
 case 7: 
 HEAP32[(($flag)>>2)]=-1;
 var $15=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(16264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 var $17=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(16288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 9: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $20=$19$0;
 var $21=___cxa_begin_catch($20);
 var $22=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(16264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 HEAP32[(($flag)>>2)]=0;
 var $24=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(16264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $26=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(16288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=13;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 13: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 14: 
 var $31;
 label=15;break;
 case 15: 
 return;
 case 16: 
 ___resumeException($29$0)
 case 17: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1,0); var $35$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 18: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2,592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=$1;
 HEAP32[(($3)>>2)]=5448;
 ___cxa_throw($1,11504,(78));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__str;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$this;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 label=9;break;
 case 3: 
 var $8=(($__str+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($__str+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11>>>0)>4294967279;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 5: 
 var $15=($11>>>0)<11;
 if($15){label=6;break;}else{label=7;break;}
 case 6: 
 var $17=$11<<1;
 var $18=(($17)&255);
 var $19=$this;
 var $20=$this;
 HEAP8[($20)]=$18;
 var $21=(($19+1)|0);
 var $__p_0_i_i=$21;label=8;break;
 case 7: 
 var $22=((($11)+(16))|0);
 var $23=$22&-16;
 var $24=__Znwj($23);
 var $25=(($this+8)|0);
 HEAP32[(($25)>>2)]=$24;
 var $26=$23|1;
 var $27=(($this)|0);
 HEAP32[(($27)>>2)]=$26;
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$11;
 var $__p_0_i_i=$24;label=8;break;
 case 8: 
 var $__p_0_i_i;
 assert($11 % 1 === 0);(_memcpy($__p_0_i_i, $9, $11)|0);
 var $29=(($__p_0_i_i+$11)|0);
 HEAP8[($29)]=0;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 var $9=$this;
 HEAP8[($9)]=$7;
 var $10=(($8+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__sz)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__sz;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 assert($__sz % 1 === 0);(_memcpy($__p_0, $__s, $__sz)|0);
 var $19=(($__p_0+$__sz)|0);
 HEAP8[($19)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 var $9=$this;
 HEAP8[($9)]=$7;
 var $10=(($8+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__n)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__n;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 _memset($__p_0, $__c, $__n)|0;
 var $19=(($__p_0+$__n)|0);
 HEAP8[($19)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 __ZdlPv($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($__s);
 var $2=$this;
 var $3=$this;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){var $13=10;var $12=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9&-2;
 var $phitmp_i=((($10)-(1))|0);
 var $11=(($9)&255);
 var $13=$phitmp_i;var $12=$11;label=3;break;
 case 3: 
 var $12;
 var $13;
 var $14=($13>>>0)<($1>>>0);
 if($14){label=10;break;}else{label=4;break;}
 case 4: 
 var $16=$12&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($this+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=7;break;
 case 6: 
 var $22=(($2+1)|0);
 var $23=$22;label=7;break;
 case 7: 
 var $23;
 _memmove($23,$__s,$1,1,0);
 var $24=(($23+$1)|0);
 HEAP8[($24)]=0;
 var $25=HEAP8[($3)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=9;break;}else{label=8;break;}
 case 8: 
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$1;
 label=14;break;
 case 9: 
 var $31=$1<<1;
 var $32=(($31)&255);
 HEAP8[($3)]=$32;
 label=14;break;
 case 10: 
 var $34=($12&255);
 var $35=$34&1;
 var $36=($35|0)==0;
 if($36){label=12;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $42=$39;label=13;break;
 case 12: 
 var $41=$34>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=((($1)-($13))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$13,$43,$42,0,$42,$1,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($12>>>0)<($__n>>>0);
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 var $15=((($__n)-($12))|0);
 var $16=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$15,$__c);
 label=9;break;
 case 6: 
 var $18=$3&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($this+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+$__n)|0);
 HEAP8[($23)]=0;
 var $24=(($this+4)|0);
 HEAP32[(($24)>>2)]=$__n;
 label=9;break;
 case 8: 
 var $26=(($1+1+$__n)|0);
 HEAP8[($26)]=0;
 var $27=$__n<<1;
 var $28=(($27)&255);
 HEAP8[($2)]=$28;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n|0)==0;
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=$this;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){var $14=10;var $13=$5;label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $phitmp=((($11)-(1))|0);
 var $12=(($10)&255);
 var $14=$phitmp;var $13=$12;label=4;break;
 case 4: 
 var $13;
 var $14;
 var $15=($13&255);
 var $16=$15&1;
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($this+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=7;break;
 case 6: 
 var $22=$15>>>1;
 var $23=$22;label=7;break;
 case 7: 
 var $23;
 var $24=((($14)-($23))|0);
 var $25=($24>>>0)<($__n>>>0);
 if($25){label=8;break;}else{var $30=$13;label=9;break;}
 case 8: 
 var $27=((($__n)-($14))|0);
 var $28=((($27)+($23))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$14,$28,$23,$23,0,0);
 var $_pre=HEAP8[($4)];
 var $30=$_pre;label=9;break;
 case 9: 
 var $30;
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=11;break;}else{label=10;break;}
 case 10: 
 var $34=(($this+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $38=$35;label=12;break;
 case 11: 
 var $37=(($3+1)|0);
 var $38=$37;label=12;break;
 case 12: 
 var $38;
 var $39=(($38+$23)|0);
 _memset($39, $__c, $__n)|0;
 var $40=((($23)+($__n))|0);
 var $41=HEAP8[($4)];
 var $42=$41&1;
 var $43=(($42<<24)>>24)==0;
 if($43){label=14;break;}else{label=13;break;}
 case 13: 
 var $45=(($this+4)|0);
 HEAP32[(($45)>>2)]=$40;
 label=15;break;
 case 14: 
 var $47=$40<<1;
 var $48=(($47)&255);
 HEAP8[($4)]=$48;
 label=15;break;
 case 15: 
 var $49=(($38+$40)|0);
 HEAP8[($49)]=0;
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=$this;
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){var $15=10;var $14=$6;label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11&-2;
 var $phitmp=((($12)-(1))|0);
 var $13=(($11)&255);
 var $15=$phitmp;var $14=$13;label=5;break;
 case 5: 
 var $14;
 var $15;
 var $16=($14&255);
 var $17=$16&1;
 var $18=($17|0)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($this+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $24=$21;label=8;break;
 case 7: 
 var $23=$16>>>1;
 var $24=$23;label=8;break;
 case 8: 
 var $24;
 var $25=($24>>>0)>($__res_arg>>>0);
 var $_sroa_speculated=($25?$24:$__res_arg);
 var $26=($_sroa_speculated>>>0)<11;
 if($26){var $30=11;label=10;break;}else{label=9;break;}
 case 9: 
 var $28=((($_sroa_speculated)+(16))|0);
 var $29=$28&-16;
 var $30=$29;label=10;break;
 case 10: 
 var $30;
 var $31=((($30)-(1))|0);
 var $32=($31|0)==($15|0);
 if($32){label=29;break;}else{label=11;break;}
 case 11: 
 var $34=($31|0)==10;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $36=(($4+1)|0);
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $__new_data_1=$36;var $__p_0=$38;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=21;break;
 case 13: 
 var $40=($31>>>0)>($15>>>0);
 if($40){label=14;break;}else{label=15;break;}
 case 14: 
 var $42=__Znwj($30);
 var $__new_data_0=$42;label=17;break;
 case 15: 
 var $44=(function() { try { __THREW__ = 0; return __Znwj($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0=$44;label=17;break; } else { label=16;break; }
 case 16: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1,0); var $46$1 = tempRet0;
 var $47=$46$0;
 var $48=___cxa_begin_catch($47);
 ___cxa_end_catch();
 label=29;break;
 case 17: 
 var $__new_data_0;
 var $49=$14&1;
 var $50=(($49<<24)>>24)==0;
 if($50){label=19;break;}else{label=18;break;}
 case 18: 
 var $52=(($this+8)|0);
 var $53=HEAP32[(($52)>>2)];
 var $56=$53;label=20;break;
 case 19: 
 var $55=(($4+1)|0);
 var $56=$55;label=20;break;
 case 20: 
 var $56;
 var $extract_t=(($49<<24)>>24)!=0;
 var $__new_data_1=$__new_data_0;var $__p_0=$56;var $__was_long_0_off0=$extract_t;var $__now_long_0_off0=1;label=21;break;
 case 21: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $58=($14&255);
 var $59=$58&1;
 var $60=($59|0)==0;
 if($60){label=23;break;}else{label=22;break;}
 case 22: 
 var $62=(($this+4)|0);
 var $63=HEAP32[(($62)>>2)];
 var $66=$63;label=24;break;
 case 23: 
 var $65=$58>>>1;
 var $66=$65;label=24;break;
 case 24: 
 var $66;
 var $67=((($66)+(1))|0);
 assert($67 % 1 === 0);(_memcpy($__new_data_1, $__p_0, $67)|0);
 if($__was_long_0_off0){label=25;break;}else{label=26;break;}
 case 25: 
 __ZdlPv($__p_0);
 label=26;break;
 case 26: 
 if($__now_long_0_off0){label=27;break;}else{label=28;break;}
 case 27: 
 var $71=$30|1;
 var $72=(($this)|0);
 HEAP32[(($72)>>2)]=$71;
 var $73=(($this+4)|0);
 HEAP32[(($73)>>2)]=$24;
 var $74=(($this+8)|0);
 HEAP32[(($74)>>2)]=$__new_data_1;
 label=29;break;
 case 28: 
 var $76=$24<<1;
 var $77=(($76)&255);
 HEAP8[($5)]=$77;
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($3&255);
 var $8=$7>>>1;
 var $__sz_0=$8;var $__cap_0=10;label=4;break;
 case 3: 
 var $10=(($this)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11&-2;
 var $13=((($12)-(1))|0);
 var $14=(($this+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $__sz_0=$15;var $__cap_0=$13;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $17=($__sz_0|0)==($__cap_0|0);
 if($17){label=5;break;}else{var $__is_short_0_off0_in_in=$3;label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $19=HEAP8[($2)];
 var $__is_short_0_off0_in_in=$19;label=6;break;
 case 6: 
 var $__is_short_0_off0_in_in;
 var $__is_short_0_off0_in=$__is_short_0_off0_in_in&1;
 var $__is_short_0_off0=(($__is_short_0_off0_in<<24)>>24)==0;
 if($__is_short_0_off0){label=7;break;}else{label=8;break;}
 case 7: 
 var $22=(($1+1)|0);
 var $23=$__sz_0<<1;
 var $24=((($23)+(2))|0);
 var $25=(($24)&255);
 HEAP8[($2)]=$25;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$22;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($__sz_0)+(1))|0);
 var $30=(($this+4)|0);
 HEAP32[(($30)>>2)]=$29;
 var $_pn=$28;var $__p_0_sum_pre_phi=$29;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+$__sz_0)|0);
 HEAP8[($__p_0)]=$__c;
 var $32=(($_pn+$__p_0_sum_pre_phi)|0);
 HEAP8[($32)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $12=10;var $11=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2;
 var $phitmp=((($9)-(1))|0);
 var $10=(($8)&255);
 var $12=$phitmp;var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12;
 var $13=($11&255);
 var $14=$13&1;
 var $15=($14|0)==0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=(($this+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $21=$18;label=6;break;
 case 5: 
 var $20=$13>>>1;
 var $21=$20;label=6;break;
 case 6: 
 var $21;
 var $22=((($12)-($21))|0);
 var $23=($22>>>0)<($__n>>>0);
 if($23){label=15;break;}else{label=7;break;}
 case 7: 
 var $25=($__n|0)==0;
 if($25){label=16;break;}else{label=8;break;}
 case 8: 
 var $27=$11&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 var $30=(($this+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $34=$31;label=11;break;
 case 10: 
 var $33=(($1+1)|0);
 var $34=$33;label=11;break;
 case 11: 
 var $34;
 var $35=(($34+$21)|0);
 assert($__n % 1 === 0);(_memcpy($35, $__s, $__n)|0);
 var $36=((($21)+($__n))|0);
 var $37=HEAP8[($2)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=13;break;}else{label=12;break;}
 case 12: 
 var $41=(($this+4)|0);
 HEAP32[(($41)>>2)]=$36;
 label=14;break;
 case 13: 
 var $43=$36<<1;
 var $44=(($43)&255);
 HEAP8[($2)]=$44;
 label=14;break;
 case 14: 
 var $45=(($34+$36)|0);
 HEAP8[($45)]=0;
 label=16;break;
 case 15: 
 var $47=((($__n)-($12))|0);
 var $48=((($47)+($21))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$12,$48,$21,$21,0,$__n,$__s);
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-18)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $_sink=-17;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $_sroa_speculated=($19?$18:$17);
 var $20=($_sroa_speculated>>>0)<11;
 if($20){var $_sink=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $22=((($_sroa_speculated)+(16))|0);
 var $23=$22&-16;
 var $_sink=$23;label=9;break;
 case 9: 
 var $_sink;
 var $24=__Znwj($_sink);
 var $25=($__n_copy|0)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($24, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $28=($__n_add|0)==0;
 if($28){label=13;break;}else{label=12;break;}
 case 12: 
 var $30=(($24+$__n_copy)|0);
 assert($__n_add % 1 === 0);(_memcpy($30, $__p_new_stuff, $__n_add)|0);
 label=13;break;
 case 13: 
 var $32=((($__old_sz)-($__n_del))|0);
 var $33=($32|0)==($__n_copy|0);
 if($33){label=15;break;}else{label=14;break;}
 case 14: 
 var $35=((($32)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $36=(($24+$_sum)|0);
 var $_sum118=((($__n_del)+($__n_copy))|0);
 var $37=(($15+$_sum118)|0);
 assert($35 % 1 === 0);(_memcpy($36, $37, $35)|0);
 label=15;break;
 case 15: 
 var $39=($__old_cap|0)==10;
 if($39){label=17;break;}else{label=16;break;}
 case 16: 
 __ZdlPv($15);
 label=17;break;
 case 17: 
 var $42=(($this+8)|0);
 HEAP32[(($42)>>2)]=$24;
 var $43=$_sink|1;
 var $44=(($this)|0);
 HEAP32[(($44)>>2)]=$43;
 var $45=((($32)+($__n_add))|0);
 var $46=(($this+4)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=(($24+$45)|0);
 HEAP8[($47)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-17)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $_sink=-17;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $_sroa_speculated=($19?$18:$17);
 var $20=($_sroa_speculated>>>0)<11;
 if($20){var $_sink=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $22=((($_sroa_speculated)+(16))|0);
 var $23=$22&-16;
 var $_sink=$23;label=9;break;
 case 9: 
 var $_sink;
 var $24=__Znwj($_sink);
 var $25=($__n_copy|0)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($24, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $28=((($__old_sz)-($__n_del))|0);
 var $29=($28|0)==($__n_copy|0);
 if($29){label=13;break;}else{label=12;break;}
 case 12: 
 var $31=((($28)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $32=(($24+$_sum)|0);
 var $_sum96=((($__n_del)+($__n_copy))|0);
 var $33=(($15+$_sum96)|0);
 assert($31 % 1 === 0);(_memcpy($32, $33, $31)|0);
 label=13;break;
 case 13: 
 var $35=($__old_cap|0)==10;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 __ZdlPv($15);
 label=15;break;
 case 15: 
 var $38=(($this+8)|0);
 HEAP32[(($38)>>2)]=$24;
 var $39=$_sink|1;
 var $40=(($this)|0);
 HEAP32[(($40)>>2)]=$39;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__sz)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__sz;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=_wmemcpy($__p_0,$__s,$__sz);
 var $21=(($__p_0+($__sz<<2))|0);
 HEAP32[(($21)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__n)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__n;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=_wmemset($__p_0,$__c,$__n);
 var $21=(($__p_0+($__n<<2))|0);
 HEAP32[(($21)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZdlPv($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s){
 var label=0;
 var $1=_wcslen($__s);
 var $2=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$1);
 return $2;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=1;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 if($12){label=10;break;}else{label=4;break;}
 case 4: 
 var $14=$10&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $21=$18;label=7;break;
 case 6: 
 var $20=(($this+4)|0);
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=_wmemmove($21,$__s,$__n);
 var $23=(($21+($__n<<2))|0);
 HEAP32[(($23)>>2)]=0;
 var $24=HEAP8[($1)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$__n;
 label=14;break;
 case 9: 
 var $30=$__n<<1;
 var $31=(($30)&255);
 HEAP8[($1)]=$31;
 label=14;break;
 case 10: 
 var $33=($10&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($this+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=13;break;
 case 12: 
 var $40=$33>>>1;
 var $41=$40;label=13;break;
 case 13: 
 var $41;
 var $42=((($__n)-($11))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$11,$42,$41,0,$41,$__n,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=$this;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){var $14=1;var $13=$5;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $phitmp=((($11)-(1))|0);
 var $12=(($10)&255);
 var $14=$phitmp;var $13=$12;label=5;break;
 case 5: 
 var $13;
 var $14;
 var $15=($13&255);
 var $16=$15&1;
 var $17=($16|0)==0;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $19=(($this+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=8;break;
 case 7: 
 var $22=$15>>>1;
 var $23=$22;label=8;break;
 case 8: 
 var $23;
 var $24=($23>>>0)>($__res_arg>>>0);
 var $_sroa_speculated=($24?$23:$__res_arg);
 var $25=($_sroa_speculated>>>0)<2;
 if($25){var $29=2;label=10;break;}else{label=9;break;}
 case 9: 
 var $27=((($_sroa_speculated)+(4))|0);
 var $28=$27&-4;
 var $29=$28;label=10;break;
 case 10: 
 var $29;
 var $30=((($29)-(1))|0);
 var $31=($30|0)==($14|0);
 if($31){label=29;break;}else{label=11;break;}
 case 11: 
 var $33=($30|0)==1;
 if($33){label=12;break;}else{label=13;break;}
 case 12: 
 var $35=(($this+4)|0);
 var $36=$35;
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $__new_data_1_in=$36;var $__p_0=$38;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=21;break;
 case 13: 
 var $40=($30>>>0)>($14>>>0);
 var $41=$29<<2;
 if($40){label=14;break;}else{label=15;break;}
 case 14: 
 var $43=__Znwj($41);
 var $__new_data_0_in=$43;label=17;break;
 case 15: 
 var $45=(function() { try { __THREW__ = 0; return __Znwj($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0_in=$45;label=17;break; } else { label=16;break; }
 case 16: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1,0); var $47$1 = tempRet0;
 var $48=$47$0;
 var $49=___cxa_begin_catch($48);
 ___cxa_end_catch();
 label=29;break;
 case 17: 
 var $__new_data_0_in;
 var $50=$13&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=19;break;}else{label=18;break;}
 case 18: 
 var $53=(($this+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $57=$54;label=20;break;
 case 19: 
 var $56=(($this+4)|0);
 var $57=$56;label=20;break;
 case 20: 
 var $57;
 var $extract_t=(($50<<24)>>24)!=0;
 var $__new_data_1_in=$__new_data_0_in;var $__p_0=$57;var $__was_long_0_off0=$extract_t;var $__now_long_0_off0=1;label=21;break;
 case 21: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1_in;
 var $__new_data_1=$__new_data_1_in;
 var $59=($13&255);
 var $60=$59&1;
 var $61=($60|0)==0;
 if($61){label=23;break;}else{label=22;break;}
 case 22: 
 var $63=(($this+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $67=$64;label=24;break;
 case 23: 
 var $66=$59>>>1;
 var $67=$66;label=24;break;
 case 24: 
 var $67;
 var $68=((($67)+(1))|0);
 var $69=_wmemcpy($__new_data_1,$__p_0,$68);
 if($__was_long_0_off0){label=25;break;}else{label=26;break;}
 case 25: 
 var $71=$__p_0;
 __ZdlPv($71);
 label=26;break;
 case 26: 
 if($__now_long_0_off0){label=27;break;}else{label=28;break;}
 case 27: 
 var $74=$29|1;
 var $75=(($this)|0);
 HEAP32[(($75)>>2)]=$74;
 var $76=(($this+4)|0);
 HEAP32[(($76)>>2)]=$23;
 var $77=(($this+8)|0);
 HEAP32[(($77)>>2)]=$__new_data_1;
 label=29;break;
 case 28: 
 var $79=$23<<1;
 var $80=(($79)&255);
 HEAP8[($4)]=$80;
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=1;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $__sz_0=$14;var $__cap_0=$12;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $16=($__sz_0|0)==($__cap_0|0);
 if($16){label=5;break;}else{var $__is_short_0_off0_in_in=$2;label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $18=HEAP8[($1)];
 var $__is_short_0_off0_in_in=$18;label=6;break;
 case 6: 
 var $__is_short_0_off0_in_in;
 var $__is_short_0_off0_in=$__is_short_0_off0_in_in&1;
 var $__is_short_0_off0=(($__is_short_0_off0_in<<24)>>24)==0;
 if($__is_short_0_off0){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=(($this+4)|0);
 var $22=$__sz_0<<1;
 var $23=((($22)+(2))|0);
 var $24=(($23)&255);
 HEAP8[($1)]=$24;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$21;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $26=(($this+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($__sz_0)+(1))|0);
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$28;
 var $_pn=$27;var $__p_0_sum_pre_phi=$28;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+($__sz_0<<2))|0);
 HEAP32[(($__p_0)>>2)]=$__c;
 var $31=(($_pn+($__p_0_sum_pre_phi<<2))|0);
 HEAP32[(($31)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741806)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870887;
 if($15){label=7;break;}else{var $_sink=1073741807;label=9;break;}
 case 7: 
 var $16=((($__delta_cap)+($__old_cap))|0);
 var $17=$__old_cap<<1;
 var $18=($16>>>0)<($17>>>0);
 var $_sroa_speculated=($18?$17:$16);
 var $19=($_sroa_speculated>>>0)<2;
 if($19){var $_sink=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $21=((($_sroa_speculated)+(4))|0);
 var $22=$21&-4;
 var $_sink=$22;label=9;break;
 case 9: 
 var $_sink;
 var $23=$_sink<<2;
 var $24=__Znwj($23);
 var $25=$24;
 var $26=($__n_copy|0)==0;
 if($26){label=11;break;}else{label=10;break;}
 case 10: 
 var $28=_wmemcpy($25,$14,$__n_copy);
 label=11;break;
 case 11: 
 var $30=($__n_add|0)==0;
 if($30){label=13;break;}else{label=12;break;}
 case 12: 
 var $32=(($25+($__n_copy<<2))|0);
 var $33=_wmemcpy($32,$__p_new_stuff,$__n_add);
 label=13;break;
 case 13: 
 var $35=((($__old_sz)-($__n_del))|0);
 var $36=($35|0)==($__n_copy|0);
 if($36){label=15;break;}else{label=14;break;}
 case 14: 
 var $38=((($35)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $39=(($25+($_sum<<2))|0);
 var $_sum118=((($__n_del)+($__n_copy))|0);
 var $40=(($14+($_sum118<<2))|0);
 var $41=_wmemcpy($39,$40,$38);
 label=15;break;
 case 15: 
 var $43=($__old_cap|0)==1;
 if($43){label=17;break;}else{label=16;break;}
 case 16: 
 var $45=$14;
 __ZdlPv($45);
 label=17;break;
 case 17: 
 var $47=(($this+8)|0);
 HEAP32[(($47)>>2)]=$25;
 var $48=$_sink|1;
 var $49=(($this)|0);
 HEAP32[(($49)>>2)]=$48;
 var $50=((($35)+($__n_add))|0);
 var $51=(($this+4)|0);
 HEAP32[(($51)>>2)]=$50;
 var $52=(($25+($50<<2))|0);
 HEAP32[(($52)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741807)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870887;
 if($15){label=7;break;}else{var $_sink=1073741807;label=9;break;}
 case 7: 
 var $16=((($__delta_cap)+($__old_cap))|0);
 var $17=$__old_cap<<1;
 var $18=($16>>>0)<($17>>>0);
 var $_sroa_speculated=($18?$17:$16);
 var $19=($_sroa_speculated>>>0)<2;
 if($19){var $_sink=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $21=((($_sroa_speculated)+(4))|0);
 var $22=$21&-4;
 var $_sink=$22;label=9;break;
 case 9: 
 var $_sink;
 var $23=$_sink<<2;
 var $24=__Znwj($23);
 var $25=$24;
 var $26=($__n_copy|0)==0;
 if($26){label=11;break;}else{label=10;break;}
 case 10: 
 var $28=_wmemcpy($25,$14,$__n_copy);
 label=11;break;
 case 11: 
 var $30=((($__old_sz)-($__n_del))|0);
 var $31=($30|0)==($__n_copy|0);
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=((($30)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $34=(($25+($_sum<<2))|0);
 var $_sum96=((($__n_del)+($__n_copy))|0);
 var $35=(($14+($_sum96<<2))|0);
 var $36=_wmemcpy($34,$35,$33);
 label=13;break;
 case 13: 
 var $38=($__old_cap|0)==1;
 if($38){label=15;break;}else{label=14;break;}
 case 14: 
 var $40=$14;
 __ZdlPv($40);
 label=15;break;
 case 15: 
 var $42=(($this+8)|0);
 HEAP32[(($42)>>2)]=$25;
 var $43=$_sink|1;
 var $44=(($this)|0);
 HEAP32[(($44)>>2)]=$43;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base5clearEj($this,$state){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+24)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+16)|0);
 HEAP32[(($6)>>2)]=$state;
 label=4;break;
 case 3: 
 var $8=$state|1;
 var $9=(($this+16)|0);
 HEAP32[(($9)>>2)]=$8;
 label=4;break;
 case 4: 
 var $11=($4&1);
 var $12=$11|$state;
 var $13=(($this+20)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12&$14;
 var $16=($15|0)==0;
 if($16){label=11;break;}else{label=5;break;}
 case 5: 
 var $18=___cxa_allocate_exception(16);
 var $19=HEAP8[(17552)];
 var $20=(($19<<24)>>24)==0;
 if($20){label=6;break;}else{label=8;break;}
 case 6: 
 var $22=___cxa_guard_acquire(17552);
 var $23=($22|0)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[((15416)>>2)]=6968;
 var $25=_atexit((190),15416,___dso_handle);
 label=8;break;
 case 8: 
 var $26=$1;
 var $tmpcast_i=$1;
 var $27=$18;
 var $$etemp$2$0=1;
 var $$etemp$2$1=0;
 var $$etemp$4$0=0;
 var $$etemp$4$1=-1;
 var $$etemp$6$0=32;
 var $$etemp$6$1=0;
 var $$etemp$7=15416;
 var $$etemp$5$0=$$etemp$7;
 var $$etemp$5$1=0;
 var $$etemp$3$0=_bitshift64Shl($$etemp$5$0,$$etemp$5$1,$$etemp$6$0);var $$etemp$3$1=tempRet0;
 var $$etemp$1$0=$$etemp$3$0&$$etemp$4$0;
 var $$etemp$1$1=$$etemp$3$1&$$etemp$4$1;
 var $$etemp$0$0=$$etemp$1$0|$$etemp$2$0;
 var $$etemp$0$1=$$etemp$1$1|$$etemp$2$1;
 var $st$8$0=(($1)|0);
 HEAP32[(($st$8$0)>>2)]=$$etemp$0$0;
 var $st$9$1=(($1+4)|0);
 HEAP32[(($st$9$1)>>2)]=$$etemp$0$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($27,$tmpcast_i,3384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $29=$18;
 HEAP32[(($29)>>2)]=6152;
 ___cxa_throw($18,12048,(70));
 throw "Reached an unreachable!";
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 ___cxa_free_exception($18);
 ___resumeException($31$0)
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_baseD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6128;
 var $2=(($this+40)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre=(($this+32)|0);
 var $_pre1=(($this+36)|0);
 if($4){label=4;break;}else{var $i_05_i=$3;label=2;break;}
 case 2: 
 var $i_05_i;
 var $5=((($i_05_i)-(1))|0);
 var $6=HEAP32[(($_pre)>>2)];
 var $7=(($6+($5<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($_pre1)>>2)];
 var $10=(($9+($5<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8](0,$this,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $12=($5|0)==0;
 if($12){label=4;break;}else{var $i_05_i=$5;label=2;break;}
 case 4: 
 var $13=(($this+28)|0);
 var $14=$13;
 __ZNSt3__16localeD2Ev($14);
 var $15=HEAP32[(($_pre)>>2)];
 var $16=$15;
 _free($16);
 var $17=HEAP32[(($_pre1)>>2)];
 var $18=$17;
 _free($18);
 var $19=(($this+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 _free($21);
 var $22=(($this+60)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 _free($24);
 return;
 case 5: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1,0); var $26$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZNKSt3__18ios_base6getlocEv($agg_result,$this){
 var label=0;
 var $1=(($this+28)|0);
 var $2=$1;
 __ZNSt3__16localeC2ERKS0_($agg_result,$2);
 return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=$sb;
 var $not_=($sb|0)==0;
 var $2=($not_&1);
 var $3=(($this+16)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($this+20)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+4)|0);
 HEAP32[(($5)>>2)]=4098;
 var $6=(($this+12)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this+8)|0);
 HEAP32[(($7)>>2)]=6;
 var $8=(($this+32)|0);
 var $9=(($this+28)|0);
 var $10=($9|0)==0;
 var $11=$8;
 _memset($11, 0, 40)|0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 var $13=$9;
 __ZNSt3__16localeC2Ev($13);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7200;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7200;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7200;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7200;
 var $2=(($this+4)|0);
 __ZNSt3__16localeC2Ev($2);
 var $3=(($this+8)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0){
 var label=0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1){
 var label=0;
 return $this;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;
 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_08=$__s;var $__i_09=0;label=3;break;
 case 3: 
 var $__i_09;
 var $_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $storemerge=$11;label=7;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_09;label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($16)&255);
 var $storemerge=$19;label=7;break;
 case 7: 
 var $storemerge;
 HEAP8[($_08)]=$storemerge;
 var $21=((($__i_09)+(1))|0);
 var $22=(($_08+1)|0);
 var $23=($21|0)<($__n|0);
 if($23){var $_08=$22;var $__i_09=$21;label=3;break;}else{var $__i_0_lcssa=$21;label=8;break;}
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+1)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP8[($9)];
 var $12=($11&255);
 var $_0=$12;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_08=0;var $_09=$__s;label=3;break;
 case 3: 
 var $_09;
 var $__i_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP8[($_09)];
 var $11=(($6+1)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP8[($6)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP8[($_09)];
 var $17=($16&255);
 var $18=FUNCTION_TABLE[$15]($this,$17);
 var $19=($18|0)==-1;
 if($19){var $__i_0_lcssa=$__i_08;label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($_09+1)|0);
 var $22=((($__i_08)+(1))|0);
 var $23=($22|0)<($__n|0);
 if($23){var $__i_08=$22;var $_09=$21;label=3;break;}else{var $__i_0_lcssa=$22;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7128;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7128;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0){
 var label=0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1){
 var label=0;
 return $this;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;
 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_08=$__s;var $__i_09=0;label=3;break;
 case 3: 
 var $__i_09;
 var $_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+4)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($6)>>2)];
 var $storemerge=$11;label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_09;label=7;break;}else{var $storemerge=$16;label=6;break;}
 case 6: 
 var $storemerge;
 HEAP32[(($_08)>>2)]=$storemerge;
 var $19=((($__i_09)+(1))|0);
 var $20=(($_08+4)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_08=$20;var $__i_09=$19;label=3;break;}else{var $__i_0_lcssa=$19;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+4)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP32[(($9)>>2)];
 var $_0=$11;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_08=0;var $_09=$__s;label=3;break;
 case 3: 
 var $_09;
 var $__i_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP32[(($_09)>>2)];
 var $11=(($6+4)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP32[(($6)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP32[(($_09)>>2)];
 var $17=FUNCTION_TABLE[$15]($this,$16);
 var $18=($17|0)==-1;
 if($18){var $__i_0_lcssa=$__i_08;label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($_09+4)|0);
 var $21=((($__i_08)+(1))|0);
 var $22=($21|0)<($__n|0);
 if($22){var $__i_08=$21;var $_09=$20;label=3;break;}else{var $__i_0_lcssa=$21;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=14;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=15;break;}
 case 3: 
 var $_sum9_i=((($5)+(72))|0);
 var $19=(($6+$_sum9_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[($12)]=1;
 var $26=HEAP32[(($1)>>2)];
 var $27=((($26)-(12))|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum14=((($29)+(24))|0);
 var $30=(($6+$_sum14)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 var $34=$32;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $39=($38|0)==-1;
 if($39){label=7;break;}else{label=15;break;}
 case 7: 
 var $41=HEAP32[(($1)>>2)];
 var $42=((($41)-(12))|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($6+$44)|0);
 var $46=$45;
 var $_sum15=((($44)+(16))|0);
 var $47=(($6+$_sum15)|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=$49|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($46,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1,0); var $52$1 = tempRet0;
 var $53=$52$0;
 var $_0=$53;label=10;break;
 case 9: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1,0); var $55$1 = tempRet0;
 var $56=$55$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$56;label=10;break;
 case 10: 
 var $_0;
 var $58=___cxa_begin_catch($_0);
 var $59=HEAP32[(($1)>>2)];
 var $60=((($59)-(12))|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $_sum18=((($62)+(16))|0);
 var $63=(($6+$_sum18)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65|1;
 HEAP32[(($64)>>2)]=$66;
 var $_sum19=((($62)+(20))|0);
 var $67=(($6+$_sum19)|0);
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=$69&1;
 var $71=($70|0)==0;
 if($71){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return $this;
 case 15: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($75$0)
 case 18: 
 var $78$0 = ___cxa_find_matching_catch(-1, -1,0); var $78$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2|1;
 HEAP32[(($1)>>2)]=$3;
 var $4=(($this+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 ___cxa_rethrow();
 throw "Reached an unreachable!";
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=14;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=15;break;}
 case 3: 
 var $_sum9_i=((($5)+(72))|0);
 var $19=(($6+$_sum9_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[($12)]=1;
 var $26=HEAP32[(($1)>>2)];
 var $27=((($26)-(12))|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum14=((($29)+(24))|0);
 var $30=(($6+$_sum14)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 var $34=$32;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $39=($38|0)==-1;
 if($39){label=7;break;}else{label=15;break;}
 case 7: 
 var $41=HEAP32[(($1)>>2)];
 var $42=((($41)-(12))|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($6+$44)|0);
 var $46=$45;
 var $_sum15=((($44)+(16))|0);
 var $47=(($6+$_sum15)|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=$49|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($46,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1,0); var $52$1 = tempRet0;
 var $53=$52$0;
 var $_0=$53;label=10;break;
 case 9: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1,0); var $55$1 = tempRet0;
 var $56=$55$0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 var $_0=$56;label=10;break;
 case 10: 
 var $_0;
 var $58=___cxa_begin_catch($_0);
 var $59=HEAP32[(($1)>>2)];
 var $60=((($59)-(12))|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $_sum18=((($62)+(16))|0);
 var $63=(($6+$_sum18)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65|1;
 HEAP32[(($64)>>2)]=$66;
 var $_sum19=((($62)+(20))|0);
 var $67=(($6+$_sum19)|0);
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=$69&1;
 var $71=($70|0)==0;
 if($71){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return $this;
 case 15: 
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($75$0)
 case 18: 
 var $78$0 = ___cxa_find_matching_catch(-1, -1,0); var $78$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP8[($1)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=$__os;
 var $3=$__os;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$__os;
 var $_sum_i=((($7)+(16))|0);
 var $9=(($8+$_sum_i)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=5;break;}
 case 2: 
 var $_sum9_i=((($7)+(72))|0);
 var $14=(($8+$_sum9_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 var $19=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($16);
 label=4;break;
 case 4: 
 HEAP8[($1)]=1;
 label=5;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this){
 var label=0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum14=((($7)+(16))|0);
 var $14=(($8+$_sum14)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum15=((($7)+(4))|0);
 var $19=(($8+$_sum15)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum16=((($32)+(24))|0);
 var $34=(($33+$_sum16)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum17=((($50)+(16))|0);
 var $54=(($51+$_sum17)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $__s=(sp)+(16);
 var $3=(sp)+(24);
 var $4=(sp)+(32);
 var $5=(($__s)|0);
 HEAP8[($5)]=0;
 var $6=(($__s+4)|0);
 HEAP32[(($6)>>2)]=$this;
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)-(12))|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$this;
 var $_sum_i_i=((($11)+(16))|0);
 var $13=(($12+$_sum_i_i)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){label=2;break;}else{label=17;break;}
 case 2: 
 var $_sum9_i_i=((($11)+(72))|0);
 var $18=(($12+$_sum9_i_i)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=4;break;}else{label=3;break;}
 case 3: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=13;break; }
 case 4: 
 HEAP8[($5)]=1;
 var $25=HEAP32[(($7)>>2)];
 var $26=((($25)-(12))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $_sum40=((($28)+(28))|0);
 var $29=(($12+$_sum40)|0);
 var $30=$29;
 __ZNSt3__16localeC2ERKS0_($3,$30);
 var $31=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($3,16488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=16;break; }
 case 5: 
 var $32=$31;
 __ZNSt3__16localeD2Ev($3);
 var $33=HEAP32[(($7)>>2)];
 var $34=((($33)-(12))|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($12+$36)|0);
 var $_sum37=((($36)+(24))|0);
 var $38=(($12+$_sum37)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$40;
 var $42=$37;
 var $_sum38=((($36)+(76))|0);
 var $43=(($12+$_sum38)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)==-1;
 var $extract_t44=(($45)&255);
 if($46){label=6;break;}else{var $_off0=$extract_t44;label=10;break;}
 case 6: 
 var $_sum43=((($36)+(28))|0);
 var $48=(($12+$_sum43)|0);
 var $49=$48;
 __ZNSt3__16localeC2ERKS0_($2,$49);
 var $50=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2,16840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $51=$50;
 var $52=$50;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($51,32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $58$0 = ___cxa_find_matching_catch(-1, -1,0); var $58$1 = tempRet0;
 __ZNSt3__16localeD2Ev($2);
 var $eh_lpad_body$1=$58$1;var $eh_lpad_body$0=$58$0;label=15;break;
 case 9: 
 __ZNSt3__16localeD2Ev($2);
 var $59=(($56<<24)>>24);
 HEAP32[(($44)>>2)]=$59;
 var $_off0=$56;label=10;break;
 case 10: 
 var $_off0;
 var $60=$31;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+16)|0);
 var $63=HEAP32[(($62)>>2)];
 var $_sroa_0_0__idx=(($1)|0);
 HEAP32[(($_sroa_0_0__idx)>>2)]=$41;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($4,$32,$1,$42,$_off0,$__n) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 11: 
 var $64=(($4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==0;
 if($66){label=12;break;}else{label=17;break;}
 case 12: 
 var $68=HEAP32[(($7)>>2)];
 var $69=((($68)-(12))|0);
 var $70=$69;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($12+$71)|0);
 var $73=$72;
 var $_sum=((($71)+(16))|0);
 var $74=(($12+$_sum)|0);
 var $75=$74;
 var $76=HEAP32[(($75)>>2)];
 var $77=$76|5;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($73,$77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=14;break; }
 case 13: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1,0); var $79$1 = tempRet0;
 var $80=$79$0;
 var $_1=$80;label=19;break;
 case 14: 
 var $82$0 = ___cxa_find_matching_catch(-1, -1,0); var $82$1 = tempRet0;
 var $eh_lpad_body$1=$82$1;var $eh_lpad_body$0=$82$0;label=15;break;
 case 15: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $83=$eh_lpad_body$0;
 var $_0=$83;label=18;break;
 case 16: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1,0); var $85$1 = tempRet0;
 var $86=$85$0;
 __ZNSt3__16localeD2Ev($3);
 var $_0=$86;label=18;break;
 case 17: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=23;break;
 case 18: 
 var $_0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_1=$_0;label=19;break;
 case 19: 
 var $_1;
 var $89=___cxa_begin_catch($_1);
 var $90=HEAP32[(($7)>>2)];
 var $91=((($90)-(12))|0);
 var $92=$91;
 var $93=HEAP32[(($92)>>2)];
 var $_sum41=((($93)+(16))|0);
 var $94=(($12+$_sum41)|0);
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $97=$96|1;
 HEAP32[(($95)>>2)]=$97;
 var $_sum42=((($93)+(20))|0);
 var $98=(($12+$_sum42)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=$100&1;
 var $102=($101|0)==0;
 if($102){label=22;break;}else{label=20;break;}
 case 20: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=24;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 ___cxa_end_catch();
 label=23;break;
 case 23: 
 STACKTOP=sp;return $this;
 case 24: 
 var $106$0 = ___cxa_find_matching_catch(-1, -1); var $106$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=26;break; }
 case 25: 
 ___resumeException($106$0)
 case 26: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1,0); var $109$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $__s=(sp)+(16);
 var $3=(sp)+(24);
 var $4=(sp)+(32);
 var $5=(($__s)|0);
 HEAP8[($5)]=0;
 var $6=(($__s+4)|0);
 HEAP32[(($6)>>2)]=$this;
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)-(12))|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$this;
 var $_sum_i_i=((($11)+(16))|0);
 var $13=(($12+$_sum_i_i)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){label=2;break;}else{label=17;break;}
 case 2: 
 var $_sum9_i_i=((($11)+(72))|0);
 var $18=(($12+$_sum9_i_i)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=4;break;}else{label=3;break;}
 case 3: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=13;break; }
 case 4: 
 HEAP8[($5)]=1;
 var $25=HEAP32[(($7)>>2)];
 var $26=((($25)-(12))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $_sum36=((($28)+(28))|0);
 var $29=(($12+$_sum36)|0);
 var $30=$29;
 __ZNSt3__16localeC2ERKS0_($3,$30);
 var $31=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($3,16488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=16;break; }
 case 5: 
 var $32=$31;
 __ZNSt3__16localeD2Ev($3);
 var $33=HEAP32[(($7)>>2)];
 var $34=((($33)-(12))|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($12+$36)|0);
 var $_sum=((($36)+(24))|0);
 var $38=(($12+$_sum)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$40;
 var $42=$37;
 var $_sum33=((($36)+(76))|0);
 var $43=(($12+$_sum33)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)==-1;
 var $extract_t40=(($45)&255);
 if($46){label=6;break;}else{var $_off0=$extract_t40;label=10;break;}
 case 6: 
 var $_sum39=((($36)+(28))|0);
 var $48=(($12+$_sum39)|0);
 var $49=$48;
 __ZNSt3__16localeC2ERKS0_($2,$49);
 var $50=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2,16840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $51=$50;
 var $52=$50;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($51,32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $58$0 = ___cxa_find_matching_catch(-1, -1,0); var $58$1 = tempRet0;
 __ZNSt3__16localeD2Ev($2);
 var $eh_lpad_body$1=$58$1;var $eh_lpad_body$0=$58$0;label=15;break;
 case 9: 
 __ZNSt3__16localeD2Ev($2);
 var $59=(($56<<24)>>24);
 HEAP32[(($44)>>2)]=$59;
 var $_off0=$56;label=10;break;
 case 10: 
 var $_off0;
 var $60=$31;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+24)|0);
 var $63=HEAP32[(($62)>>2)];
 var $_sroa_0_0__idx=(($1)|0);
 HEAP32[(($_sroa_0_0__idx)>>2)]=$41;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($4,$32,$1,$42,$_off0,$__n) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 11: 
 var $64=(($4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==0;
 if($66){label=12;break;}else{label=17;break;}
 case 12: 
 var $68=HEAP32[(($7)>>2)];
 var $69=((($68)-(12))|0);
 var $70=$69;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($12+$71)|0);
 var $73=$72;
 var $_sum34=((($71)+(16))|0);
 var $74=(($12+$_sum34)|0);
 var $75=$74;
 var $76=HEAP32[(($75)>>2)];
 var $77=$76|5;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($73,$77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=14;break; }
 case 13: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1,0); var $79$1 = tempRet0;
 var $80=$79$0;
 var $_1=$80;label=19;break;
 case 14: 
 var $82$0 = ___cxa_find_matching_catch(-1, -1,0); var $82$1 = tempRet0;
 var $eh_lpad_body$1=$82$1;var $eh_lpad_body$0=$82$0;label=15;break;
 case 15: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $83=$eh_lpad_body$0;
 var $_0=$83;label=18;break;
 case 16: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1,0); var $85$1 = tempRet0;
 var $86=$85$0;
 __ZNSt3__16localeD2Ev($3);
 var $_0=$86;label=18;break;
 case 17: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=23;break;
 case 18: 
 var $_0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_1=$_0;label=19;break;
 case 19: 
 var $_1;
 var $89=___cxa_begin_catch($_1);
 var $90=HEAP32[(($7)>>2)];
 var $91=((($90)-(12))|0);
 var $92=$91;
 var $93=HEAP32[(($92)>>2)];
 var $_sum37=((($93)+(16))|0);
 var $94=(($12+$_sum37)|0);
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $97=$96|1;
 HEAP32[(($95)>>2)]=$97;
 var $_sum38=((($93)+(20))|0);
 var $98=(($12+$_sum38)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=$100&1;
 var $102=($101|0)==0;
 if($102){label=22;break;}else{label=20;break;}
 case 20: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=24;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 ___cxa_end_catch();
 label=23;break;
 case 23: 
 STACKTOP=sp;return $this;
 case 24: 
 var $106$0 = ___cxa_find_matching_catch(-1, -1); var $106$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=26;break; }
 case 25: 
 ___resumeException($106$0)
 case 26: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1,0); var $109$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=(($__s)|0);
 HEAP8[($1)]=0;
 var $2=(($__s+4)|0);
 HEAP32[(($2)>>2)]=$this;
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$this;
 var $_sum_i_i=((($7)+(16))|0);
 var $9=(($8+$_sum_i_i)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=18;break;}
 case 2: 
 var $_sum9_i_i=((($7)+(72))|0);
 var $14=(($8+$_sum9_i_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 HEAP8[($1)]=1;
 var $21=HEAP32[(($3)>>2)];
 var $22=((($21)-(12))|0);
 var $23=$22;
 var $24=HEAP32[(($23)>>2)];
 var $_sum=((($24)+(24))|0);
 var $25=(($8+$_sum)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=$27;
 var $29=($27|0)==0;
 if($29){var $__o_sroa_0_0=$28;label=9;break;}else{label=5;break;}
 case 5: 
 var $31=(($27+24)|0);
 var $32=$31;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($27+28)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=($33|0)==($36|0);
 if($37){label=6;break;}else{label=7;break;}
 case 6: 
 var $39=$27;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+52)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($__c&255);
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($28,$43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_029=$44;label=8;break; } else { label=12;break; }
 case 7: 
 var $46=(($33+1)|0);
 HEAP32[(($32)>>2)]=$46;
 HEAP8[($33)]=$__c;
 var $47=($__c&255);
 var $_029=$47;label=8;break;
 case 8: 
 var $_029;
 var $48=($_029|0)==-1;
 var $_=($48?0:$28);
 var $__o_sroa_0_0=$_;label=9;break;
 case 9: 
 var $__o_sroa_0_0;
 var $49=($__o_sroa_0_0|0)==0;
 if($49){label=10;break;}else{label=18;break;}
 case 10: 
 var $51=HEAP32[(($3)>>2)];
 var $52=((($51)-(12))|0);
 var $53=$52;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($8+$54)|0);
 var $56=$55;
 var $_sum32=((($54)+(16))|0);
 var $57=(($8+$_sum32)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $60=$59|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($56,$60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=12;break; }
 case 11: 
 var $62$0 = ___cxa_find_matching_catch(-1, -1,0); var $62$1 = tempRet0;
 var $63=$62$0;
 var $_0=$63;label=13;break;
 case 12: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1,0); var $65$1 = tempRet0;
 var $66=$65$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$66;label=13;break;
 case 13: 
 var $_0;
 var $68=___cxa_begin_catch($_0);
 var $69=HEAP32[(($3)>>2)];
 var $70=((($69)-(12))|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum34=((($72)+(16))|0);
 var $73=(($8+$_sum34)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=$75|1;
 HEAP32[(($74)>>2)]=$76;
 var $_sum35=((($72)+(20))|0);
 var $77=(($8+$_sum35)|0);
 var $78=$77;
 var $79=HEAP32[(($78)>>2)];
 var $80=$79&1;
 var $81=($80|0)==0;
 if($81){label=16;break;}else{label=14;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=19;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 ___cxa_end_catch();
 label=17;break;
 case 17: 
 STACKTOP=sp;return $this;
 case 18: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=17;break;
 case 19: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1); var $85$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=21;break; }
 case 20: 
 ___resumeException($85$0)
 case 21: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1,0); var $88$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum14=((($7)+(16))|0);
 var $14=(($8+$_sum14)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum15=((($7)+(4))|0);
 var $19=(($8+$_sum15)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum16=((($32)+(24))|0);
 var $34=(($33+$_sum16)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum17=((($50)+(16))|0);
 var $54=(($51+$_sum17)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=(($this+12)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=(($this+12)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=((($this)-(92)+84)|0);
 var $2=(($1+12)|0);
 var $3=$2;
 __ZNSt3__18ios_baseD2Ev($3);
 var $4=$1;
 __ZdlPv($4);
 return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(12))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt){
 var label=0;
 return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=((($this)-(92)+84)|0);
 var $2=(($1+12)|0);
 var $3=$2;
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(12))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this){
 var label=0;
 return 3856;
}
function __ZNKSt3__119__iostream_category7messageEi($agg_result,$this,$ev){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)==1;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=(($this)|0);
 __ZNKSt3__112__do_message7messageEi($agg_result,$3,$ev);
 label=4;break;
 case 3: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,4280,35);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18ios_base7failureD2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this){
 var label=0;
 __ZNSt3__18ios_baseD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17collateIcED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17collateIcED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNSt3__16locale5facetD2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_013_lcssa=$__lo1;label=6;break;}else{var $_01315=$__lo1;var $_01216=$__lo2;label=2;break;}
 case 2: 
 var $_01216;
 var $_01315;
 var $2=($_01315|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[($_01315)];
 var $5=HEAP8[($_01216)];
 var $6=(($4<<24)>>24)<(($5<<24)>>24);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=(($5<<24)>>24)<(($4<<24)>>24);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_01315+1)|0);
 var $11=(($_01216+1)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_013_lcssa=$10;label=6;break;}else{var $_01315=$10;var $_01216=$11;label=2;break;}
 case 6: 
 var $_013_lcssa;
 var $13=($_013_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result,$this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($6);
 label=3;break;
 case 3: 
 var $8=($3>>>0)<11;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$3<<1;
 var $11=(($10)&255);
 var $12=$agg_result;
 var $13=$agg_result;
 HEAP8[($13)]=$11;
 var $14=(($12+1)|0);
 var $__p_0_ph_i=$14;label=6;break;
 case 5: 
 var $15=((($3)+(16))|0);
 var $16=$15&-16;
 var $17=__Znwj($16);
 var $18=(($agg_result+8)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=$16|1;
 var $20=(($agg_result)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=(($agg_result+4)|0);
 HEAP32[(($21)>>2)]=$3;
 var $__p_0_ph_i=$17;label=6;break;
 case 6: 
 var $__p_0_ph_i;
 var $22=($__lo|0)==($__hi|0);
 if($22){var $__p_0_lcssa_i=$__p_0_ph_i;label=10;break;}else{label=7;break;}
 case 7: 
 var $23=(((-$1))|0);
 var $scevgep_i=(($__hi+$23)|0);
 var $__p_062_i=$__p_0_ph_i;var $_063_i=$__lo;label=8;break;
 case 8: 
 var $_063_i;
 var $__p_062_i;
 var $25=HEAP8[($_063_i)];
 HEAP8[($__p_062_i)]=$25;
 var $26=(($_063_i+1)|0);
 var $27=(($__p_062_i+1)|0);
 var $28=($26|0)==($__hi|0);
 if($28){label=9;break;}else{var $__p_062_i=$27;var $_063_i=$26;label=8;break;}
 case 9: 
 var $scevgep64_i=$scevgep_i;
 var $scevgep65_i=(($__p_0_ph_i+$scevgep64_i)|0);
 var $__p_0_lcssa_i=$scevgep65_i;label=10;break;
 case 10: 
 var $__p_0_lcssa_i;
 HEAP8[($__p_0_lcssa_i)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_08=$__lo;var $__h_09=0;label=2;break;}
 case 2: 
 var $__h_09;
 var $__p_08;
 var $2=$__h_09<<4;
 var $3=HEAP8[($__p_08)];
 var $4=(($3<<24)>>24);
 var $5=((($4)+($2))|0);
 var $6=$5&-268435456;
 var $7=$6>>>24;
 var $8=$7|$6;
 var $9=$8^$5;
 var $10=(($__p_08+1)|0);
 var $11=($10|0)==($__hi|0);
 if($11){var $__h_0_lcssa=$9;label=3;break;}else{var $__p_08=$10;var $__h_09=$9;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17collateIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17collateIwED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_013_lcssa=$__lo1;label=6;break;}else{var $_01315=$__lo1;var $_01216=$__lo2;label=2;break;}
 case 2: 
 var $_01216;
 var $_01315;
 var $2=($_01315|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_01315)>>2)];
 var $5=HEAP32[(($_01216)>>2)];
 var $6=($4|0)<($5|0);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=($5|0)<($4|0);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_01315+4)|0);
 var $11=(($_01216+4)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_013_lcssa=$10;label=6;break;}else{var $_01315=$10;var $_01216=$11;label=2;break;}
 case 6: 
 var $_013_lcssa;
 var $13=($_013_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result,$this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=$3>>2;
 var $5=($4>>>0)>1073741807;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($7);
 label=3;break;
 case 3: 
 var $9=($4>>>0)<2;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 var $11=$3>>>1;
 var $12=(($11)&255);
 var $13=$agg_result;
 HEAP8[($13)]=$12;
 var $14=(($agg_result+4)|0);
 var $__p_0_ph_i=$14;label=6;break;
 case 5: 
 var $15=((($4)+(4))|0);
 var $16=$15&-4;
 var $17=$16<<2;
 var $18=__Znwj($17);
 var $19=$18;
 var $20=(($agg_result+8)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=$16|1;
 var $22=(($agg_result)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($agg_result+4)|0);
 HEAP32[(($23)>>2)]=$4;
 var $__p_0_ph_i=$19;label=6;break;
 case 6: 
 var $__p_0_ph_i;
 var $24=($__lo|0)==($__hi|0);
 if($24){var $__p_0_lcssa_i=$__p_0_ph_i;label=10;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i=((($__hi)-(4))|0);
 var $scevgep64_i=$scevgep_i;
 var $25=(((-$1))|0);
 var $uglygep_i=(($scevgep64_i+$25)|0);
 var $uglygep65_i=$uglygep_i;
 var $26=$uglygep65_i>>>2;
 var $__p_062_i=$__p_0_ph_i;var $_063_i=$__lo;label=8;break;
 case 8: 
 var $_063_i;
 var $__p_062_i;
 var $28=HEAP32[(($_063_i)>>2)];
 HEAP32[(($__p_062_i)>>2)]=$28;
 var $29=(($_063_i+4)|0);
 var $30=(($__p_062_i+4)|0);
 var $31=($29|0)==($__hi|0);
 if($31){label=9;break;}else{var $__p_062_i=$30;var $_063_i=$29;label=8;break;}
 case 9: 
 var $32=((($26)+(1))|0);
 var $scevgep66_i=(($__p_0_ph_i+($32<<2))|0);
 var $__p_0_lcssa_i=$scevgep66_i;label=10;break;
 case 10: 
 var $__p_0_lcssa_i;
 HEAP32[(($__p_0_lcssa_i)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_08=$__lo;var $__h_09=0;label=2;break;}
 case 2: 
 var $__h_09;
 var $__p_08;
 var $2=$__h_09<<4;
 var $3=HEAP32[(($__p_08)>>2)];
 var $4=((($3)+($2))|0);
 var $5=$4&-268435456;
 var $6=$5>>>24;
 var $7=$6|$5;
 var $8=$7^$4;
 var $9=(($__p_08+4)|0);
 var $10=($9|0)==($__hi|0);
 if($10){var $__h_0_lcssa=$8;label=3;break;}else{var $__p_08=$9;var $__h_09=$8;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i24=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $__names=(sp)+(80);
 var $6=(sp)+(104);
 var $7=(($__iob+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $12=$this;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($__b)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($3)|0);
 HEAP32[(($21)>>2)]=$20;
 FUNCTION_TABLE[$15]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $22=(($1)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($16)>>2)]=$23;
 var $24=HEAP32[(($__lv)>>2)];
 if(($24|0)==0){ label=3;break;}else if(($24|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$23;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 var $31=(($4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$__p_i_i_i;
 var $34=HEAP32[((16840)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$33,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $37=HEAP32[((16844)>>2)];
 var $38=((($37)-(1))|0);
 var $39=(($32+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($32+8)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$40;
 var $44=$42;
 var $45=((($43)-($44))|0);
 var $46=$45>>2;
 var $47=($46>>>0)>($38>>>0);
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=(($42+($38<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($49|0)==0;
 if($50){label=11;break;}else{label=13;break;}
 case 11: 
 var $51=___cxa_allocate_exception(4);
 var $52=$51;
 __ZNSt8bad_castC2Ev($52);
 (function() { try { __THREW__ = 0; return ___cxa_throw($51,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $53=$49;
 var $54=HEAP32[(($31)>>2)];
 var $55=(($54)|0);
 var $56=__ZNSt3__114__shared_count16__release_sharedEv($55);
 __ZNKSt3__18ios_base6getlocEv($5,$__iob);
 var $57=(($5)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$__p_i_i_i24;
 var $60=HEAP32[((16456)>>2)];
 var $61=($60|0)==-1;
 if($61){label=15;break;}else{label=14;break;}
 case 14: 
 var $_sroa_016_0__idx_i_i25=(($__p_i_i_i24)|0);
 HEAP32[(($_sroa_016_0__idx_i_i25)>>2)]=16456;
 var $_sroa_117_4__idx18_i_i26=(($__p_i_i_i24+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i26)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i27=(($__p_i_i_i24+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i27)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16456,$59,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $63=HEAP32[((16460)>>2)];
 var $64=((($63)-(1))|0);
 var $65=(($58+12)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($58+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$66;
 var $70=$68;
 var $71=((($69)-($70))|0);
 var $72=$71>>2;
 var $73=($72>>>0)>($64>>>0);
 if($73){label=16;break;}else{label=17;break;}
 case 16: 
 var $74=(($68+($64<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==0;
 if($76){label=17;break;}else{label=19;break;}
 case 17: 
 var $77=___cxa_allocate_exception(4);
 var $78=$77;
 __ZNSt8bad_castC2Ev($78);
 (function() { try { __THREW__ = 0; return ___cxa_throw($77,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $79=$75;
 var $80=HEAP32[(($57)>>2)];
 var $81=(($80)|0);
 var $82=__ZNSt3__114__shared_count16__release_sharedEv($81);
 var $83=(($__names)|0);
 var $84=$75;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+24)|0);
 var $87=HEAP32[(($86)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($83,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $_022=$83;label=25;break; }
 case 20: 
 var $88=(($__names+12)|0);
 var $89=HEAP32[(($84)>>2)];
 var $90=(($89+28)|0);
 var $91=HEAP32[(($90)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($88,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $_022=$88;label=25;break; }
 case 21: 
 var $92=(($__e)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($6)|0);
 HEAP32[(($94)>>2)]=$93;
 var $95=(($__names+24)|0);
 var $96=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$83,$95,$53,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $97=($96|0)==($83|0);
 var $98=($97&1);
 HEAP8[($__v)]=$98;
 var $99=(($__b)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($agg_result)|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($102);
 var $103=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
 label=28;break;
 case 23: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1); var $105$1 = tempRet0;
 var $106=$105$0;
 var $107=$105$1;
 var $108=HEAP32[(($31)>>2)];
 var $109=(($108)|0);
 var $110=__ZNSt3__114__shared_count16__release_sharedEv($109);
 var $_0=$106;var $_021=$107;label=29;break;
 case 24: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1); var $112$1 = tempRet0;
 var $113=$112$0;
 var $114=$112$1;
 var $115=HEAP32[(($57)>>2)];
 var $116=(($115)|0);
 var $117=__ZNSt3__114__shared_count16__release_sharedEv($116);
 var $_0=$113;var $_021=$114;label=29;break;
 case 25: 
 var $_022;
 var $119$0 = ___cxa_find_matching_catch(-1, -1); var $119$1 = tempRet0;
 var $120=$119$0;
 var $121=$119$1;
 var $122=($83|0)==($_022|0);
 if($122){var $_0=$120;var $_021=$121;label=29;break;}else{var $123=$_022;label=26;break;}
 case 26: 
 var $123;
 var $124=((($123)-(12))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($124);
 var $125=($124|0)==($83|0);
 if($125){var $_0=$120;var $_021=$121;label=29;break;}else{var $123=$124;label=26;break;}
 case 27: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($128);
 var $129=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($129);
 var $130=$126$1;
 var $_0=$127;var $_021=$130;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $_021;
 var $_0;
 var $132$0=$_0;
 var $132$1=0;
 var $133$0=$132$0;
 var $133$1=$_021;
 ___resumeException($133$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $__stat_hold_sroa_0_1=0;label=10;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $__stat_hold_sroa_0_1=$8;label=10;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $__stat_hold_sroa_0_1=0;label=10;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $266$1=$11$1;var $266$0=$11$0;label=104;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit253$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit253$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit253$1;var $lpad_phi$0=$lpad_nonloopexit253$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $12=($__stat_hold_sroa_0_1|0)==0;
 if($12){var $266$1=$lpad_phi$1;var $266$0=$lpad_phi$0;label=104;break;}else{label=9;break;}
 case 9: 
 _free($__stat_hold_sroa_0_1);
 var $266$1=$lpad_phi$1;var $266$0=$lpad_phi$0;label=104;break;
 case 10: 
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $14=($__kb|0)==($__ke|0);
 if($14){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=11;break;}else{var $__n_might_match_0263=$4;var $__n_does_match_0264=0;var $__st_0265=$__status_0;var $__ky_0266=$__kb;label=12;break;}
 case 11: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $15=(($__b)|0);
 var $16=(($__e)|0);
 var $17=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=19;break;
 case 12: 
 var $__ky_0266;
 var $__st_0265;
 var $__n_does_match_0264;
 var $__n_might_match_0263;
 var $18=$__ky_0266;
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=$20&1;
 var $22=($21|0)==0;
 if($22){label=14;break;}else{label=13;break;}
 case 13: 
 var $24=(($__ky_0266+4)|0);
 var $25=HEAP32[(($24)>>2)];
 var $28=$25;label=15;break;
 case 14: 
 var $27=$20>>>1;
 var $28=$27;label=15;break;
 case 15: 
 var $28;
 var $29=($28|0)==0;
 if($29){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP8[($__st_0265)]=1;
 var $__n_does_match_1=$__n_does_match_0264;var $__n_might_match_1=$__n_might_match_0263;label=18;break;
 case 17: 
 HEAP8[($__st_0265)]=2;
 var $32=((($__n_might_match_0263)-(1))|0);
 var $33=((($__n_does_match_0264)+(1))|0);
 var $__n_does_match_1=$33;var $__n_might_match_1=$32;label=18;break;
 case 18: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $35=(($__ky_0266+12)|0);
 var $36=(($__st_0265+1)|0);
 var $37=($35|0)==($__ke|0);
 if($37){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=11;break;}else{var $__n_might_match_0263=$__n_might_match_1;var $__n_does_match_0264=$__n_does_match_1;var $__st_0265=$36;var $__ky_0266=$35;label=12;break;}
 case 19: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){var $55=0;label=25;break;}else{label=20;break;}
 case 20: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=21;break;}else{var $55=$39;label=25;break;}
 case 21: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=6;break; }
 case 22: 
 var $53=($52|0)==-1;
 if($53){label=24;break;}else{label=23;break;}
 case 23: 
 var $_pre=HEAP32[(($15)>>2)];
 var $55=$_pre;label=25;break;
 case 24: 
 HEAP32[(($15)>>2)]=0;
 var $55=0;label=25;break;
 case 25: 
 var $55;
 var $56=($55|0)==0;
 var $57=HEAP32[(($16)>>2)];
 var $58=($57|0)==0;
 if($58){var $75=$55;var $74=0;label=31;break;}else{label=26;break;}
 case 26: 
 var $60=(($57+12)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($57+16)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($61|0)==($63|0);
 if($64){label=27;break;}else{var $73=$57;label=30;break;}
 case 27: 
 var $66=$57;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+36)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=6;break; }
 case 28: 
 var $71=($70|0)==-1;
 if($71){label=29;break;}else{var $73=$57;label=30;break;}
 case 29: 
 HEAP32[(($16)>>2)]=0;
 var $73=0;label=30;break;
 case 30: 
 var $73;
 var $_pr=HEAP32[(($15)>>2)];
 var $75=$_pr;var $74=$73;label=31;break;
 case 31: 
 var $74;
 var $75;
 var $76=($74|0)==0;
 var $77=$56^$76;
 var $78=($__n_might_match_2|0)!=0;
 var $_=$77&$78;
 if($_){label=32;break;}else{label=81;break;}
 case 32: 
 var $80=(($75+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($75+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=33;break;}else{label=35;break;}
 case 33: 
 var $86=$75;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=6;break; }
 case 34: 
 var $extract_t=(($90)&255);
 var $_0206_off0=$extract_t;label=36;break;
 case 35: 
 var $92=HEAP8[($81)];
 var $_0206_off0=$92;label=36;break;
 case 36: 
 var $_0206_off0;
 if($__case_sensitive){var $__c_0=$_0206_off0;label=38;break;}else{label=37;break;}
 case 37: 
 var $94=HEAP32[(($17)>>2)];
 var $95=(($94+12)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($__ct,$_0206_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$97;label=38;break; } else { label=6;break; }
 case 38: 
 var $__c_0;
 if($14){var $__n_does_match_7=$__n_does_match_2;var $__n_might_match_3_lcssa279=$__n_might_match_2;label=80;break;}else{label=39;break;}
 case 39: 
 var $98=((($__indx_0)+(1))|0);
 if($__case_sensitive){var $__n_might_match_3233_us=$__n_might_match_2;var $__n_does_match_3234_us=$__n_does_match_2;var $__st_1235_us=$__status_0;var $__consume_0_off0237_us=0;var $__ky1_0238_us=$__kb;label=40;break;}else{var $__n_might_match_3233=$__n_might_match_2;var $__n_does_match_3234=$__n_does_match_2;var $__st_1235=$__status_0;var $__consume_0_off0237=0;var $__ky1_0238=$__kb;label=53;break;}
 case 40: 
 var $__ky1_0238_us;
 var $__consume_0_off0237_us;
 var $__st_1235_us;
 var $__n_does_match_3234_us;
 var $__n_might_match_3233_us;
 var $99=HEAP8[($__st_1235_us)];
 var $100=(($99<<24)>>24)==1;
 if($100){label=41;break;}else{var $__consume_1_off0_us=$__consume_0_off0237_us;var $__n_does_match_4_us=$__n_does_match_3234_us;var $__n_might_match_4_us=$__n_might_match_3233_us;label=51;break;}
 case 41: 
 var $102=$__ky1_0238_us;
 var $103=HEAP8[($102)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=43;break;}else{label=42;break;}
 case 42: 
 var $107=(($__ky1_0238_us+8)|0);
 var $108=HEAP32[(($107)>>2)];
 var $112=$108;label=44;break;
 case 43: 
 var $110=$__ky1_0238_us;
 var $111=(($110+1)|0);
 var $112=$111;label=44;break;
 case 44: 
 var $112;
 var $113=(($112+$__indx_0)|0);
 var $114=HEAP8[($113)];
 var $115=(($__c_0<<24)>>24)==(($114<<24)>>24);
 if($115){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP8[($__st_1235_us)]=0;
 var $117=((($__n_might_match_3233_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off0237_us;var $__n_does_match_4_us=$__n_does_match_3234_us;var $__n_might_match_4_us=$117;label=51;break;
 case 46: 
 var $119=HEAP8[($102)];
 var $120=($119&255);
 var $121=$120&1;
 var $122=($121|0)==0;
 if($122){label=48;break;}else{label=47;break;}
 case 47: 
 var $124=(($__ky1_0238_us+4)|0);
 var $125=HEAP32[(($124)>>2)];
 var $128=$125;label=49;break;
 case 48: 
 var $127=$120>>>1;
 var $128=$127;label=49;break;
 case 49: 
 var $128;
 var $129=($128|0)==($98|0);
 if($129){label=50;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_3234_us;var $__n_might_match_4_us=$__n_might_match_3233_us;label=51;break;}
 case 50: 
 HEAP8[($__st_1235_us)]=2;
 var $131=((($__n_might_match_3233_us)-(1))|0);
 var $132=((($__n_does_match_3234_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$132;var $__n_might_match_4_us=$131;label=51;break;
 case 51: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $134=(($__ky1_0238_us+12)|0);
 var $135=($134|0)==($__ke|0);
 if($135){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=67;break;}else{label=52;break;}
 case 52: 
 var $136=(($__st_1235_us+1)|0);
 var $__n_might_match_3233_us=$__n_might_match_4_us;var $__n_does_match_3234_us=$__n_does_match_4_us;var $__st_1235_us=$136;var $__consume_0_off0237_us=$__consume_1_off0_us;var $__ky1_0238_us=$134;label=40;break;
 case 53: 
 var $__ky1_0238;
 var $__consume_0_off0237;
 var $__st_1235;
 var $__n_does_match_3234;
 var $__n_might_match_3233;
 var $137=HEAP8[($__st_1235)];
 var $138=(($137<<24)>>24)==1;
 if($138){label=54;break;}else{var $__consume_1_off0=$__consume_0_off0237;var $__n_does_match_4=$__n_does_match_3234;var $__n_might_match_4=$__n_might_match_3233;label=65;break;}
 case 54: 
 var $140=$__ky1_0238;
 var $141=HEAP8[($140)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=56;break;}else{label=55;break;}
 case 55: 
 var $145=(($__ky1_0238+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $151=$146;label=57;break;
 case 56: 
 var $148=$__ky1_0238;
 var $149=(($148+1)|0);
 var $151=$149;label=57;break;
 case 57: 
 var $151;
 var $152=(($151+$__indx_0)|0);
 var $153=HEAP8[($152)];
 var $154=HEAP32[(($17)>>2)];
 var $155=(($154+12)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($__ct,$153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=5;break; }
 case 58: 
 var $158=(($__c_0<<24)>>24)==(($157<<24)>>24);
 if($158){label=59;break;}else{label=64;break;}
 case 59: 
 var $160=HEAP8[($140)];
 var $161=($160&255);
 var $162=$161&1;
 var $163=($162|0)==0;
 if($163){label=61;break;}else{label=60;break;}
 case 60: 
 var $165=(($__ky1_0238+4)|0);
 var $166=HEAP32[(($165)>>2)];
 var $169=$166;label=62;break;
 case 61: 
 var $168=$161>>>1;
 var $169=$168;label=62;break;
 case 62: 
 var $169;
 var $170=($169|0)==($98|0);
 if($170){label=63;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_3234;var $__n_might_match_4=$__n_might_match_3233;label=65;break;}
 case 63: 
 HEAP8[($__st_1235)]=2;
 var $172=((($__n_might_match_3233)-(1))|0);
 var $173=((($__n_does_match_3234)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$173;var $__n_might_match_4=$172;label=65;break;
 case 64: 
 HEAP8[($__st_1235)]=0;
 var $175=((($__n_might_match_3233)-(1))|0);
 var $__consume_1_off0=$__consume_0_off0237;var $__n_does_match_4=$__n_does_match_3234;var $__n_might_match_4=$175;label=65;break;
 case 65: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $177=(($__ky1_0238+12)|0);
 var $178=($177|0)==($__ke|0);
 if($178){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=67;break;}else{label=66;break;}
 case 66: 
 var $179=(($__st_1235+1)|0);
 var $__n_might_match_3233=$__n_might_match_4;var $__n_does_match_3234=$__n_does_match_4;var $__st_1235=$179;var $__consume_0_off0237=$__consume_1_off0;var $__ky1_0238=$177;label=53;break;
 case 67: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=68;break;}else{var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa279=$__n_might_match_3_lcssa;label=80;break;}
 case 68: 
 var $181=HEAP32[(($15)>>2)];
 var $182=(($181+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($181+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=69;break;}else{label=70;break;}
 case 69: 
 var $188=$181;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+40)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=6;break; }
 case 70: 
 var $194=(($183+1)|0);
 HEAP32[(($182)>>2)]=$194;
 label=71;break;
 case 71: 
 var $195=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
 var $_not=($195>>>0)<2;
 var $brmerge=$_not|$14;
 if($brmerge){var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa279=$__n_might_match_3_lcssa;label=80;break;}else{label=72;break;}
 case 72: 
 var $196=((($__indx_0)+(1))|0);
 var $__n_does_match_5247=$__n_does_match_3_lcssa;var $__st_2248=$__status_0;var $__ky2_0249=$__kb;label=73;break;
 case 73: 
 var $__ky2_0249;
 var $__st_2248;
 var $__n_does_match_5247;
 var $198=HEAP8[($__st_2248)];
 var $199=(($198<<24)>>24)==2;
 if($199){label=74;break;}else{var $__n_does_match_6=$__n_does_match_5247;label=79;break;}
 case 74: 
 var $201=$__ky2_0249;
 var $202=HEAP8[($201)];
 var $203=($202&255);
 var $204=$203&1;
 var $205=($204|0)==0;
 if($205){label=76;break;}else{label=75;break;}
 case 75: 
 var $207=(($__ky2_0249+4)|0);
 var $208=HEAP32[(($207)>>2)];
 var $211=$208;label=77;break;
 case 76: 
 var $210=$203>>>1;
 var $211=$210;label=77;break;
 case 77: 
 var $211;
 var $212=($211|0)==($196|0);
 if($212){var $__n_does_match_6=$__n_does_match_5247;label=79;break;}else{label=78;break;}
 case 78: 
 HEAP8[($__st_2248)]=0;
 var $214=((($__n_does_match_5247)-(1))|0);
 var $__n_does_match_6=$214;label=79;break;
 case 79: 
 var $__n_does_match_6;
 var $216=(($__ky2_0249+12)|0);
 var $217=(($__st_2248+1)|0);
 var $218=($216|0)==($__ke|0);
 if($218){var $__n_does_match_7=$__n_does_match_6;var $__n_might_match_3_lcssa279=$__n_might_match_3_lcssa;label=80;break;}else{var $__n_does_match_5247=$__n_does_match_6;var $__st_2248=$217;var $__ky2_0249=$216;label=73;break;}
 case 80: 
 var $__n_might_match_3_lcssa279;
 var $__n_does_match_7;
 var $219=((($__indx_0)+(1))|0);
 var $__indx_0=$219;var $__n_does_match_2=$__n_does_match_7;var $__n_might_match_2=$__n_might_match_3_lcssa279;label=19;break;
 case 81: 
 var $221=($75|0)==0;
 if($221){var $236=0;label=87;break;}else{label=82;break;}
 case 82: 
 var $223=(($75+12)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($75+16)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($224|0)==($226|0);
 if($227){label=83;break;}else{var $236=$75;label=87;break;}
 case 83: 
 var $229=$75;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+36)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$232]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=7;break; }
 case 84: 
 var $234=($233|0)==-1;
 if($234){label=86;break;}else{label=85;break;}
 case 85: 
 var $_pre278=HEAP32[(($15)>>2)];
 var $236=$_pre278;label=87;break;
 case 86: 
 HEAP32[(($15)>>2)]=0;
 var $236=0;label=87;break;
 case 87: 
 var $236;
 var $237=($236|0)==0;
 if($76){label=93;break;}else{label=88;break;}
 case 88: 
 var $239=(($74+12)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(($74+16)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($240|0)==($242|0);
 if($243){label=90;break;}else{label=89;break;}
 case 89: 
 if($237){label=96;break;}else{label=95;break;}
 case 90: 
 var $245=$74;
 var $246=HEAP32[(($245)>>2)];
 var $247=(($246+36)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$248]($74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=7;break; }
 case 91: 
 var $250=($249|0)==-1;
 if($250){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($16)>>2)]=0;
 label=93;break;
 case 93: 
 if($237){label=95;break;}else{label=96;break;}
 case 94: 
 var $252=($74|0)==0;
 var $tmp218=$237^$252;
 if($tmp218){label=96;break;}else{label=95;break;}
 case 95: 
 var $254=HEAP32[(($__err)>>2)];
 var $255=$254|2;
 HEAP32[(($__err)>>2)]=$255;
 label=96;break;
 case 96: 
 if($14){label=100;break;}else{var $_0209227=$__kb;var $__st_3228=$__status_0;label=97;break;}
 case 97: 
 var $__st_3228;
 var $_0209227;
 var $256=HEAP8[($__st_3228)];
 var $257=(($256<<24)>>24)==2;
 if($257){var $_0209226=$_0209227;label=101;break;}else{label=98;break;}
 case 98: 
 var $259=(($_0209227+12)|0);
 var $260=($259|0)==($__ke|0);
 if($260){label=100;break;}else{label=99;break;}
 case 99: 
 var $261=(($__st_3228+1)|0);
 var $_0209227=$259;var $__st_3228=$261;label=97;break;
 case 100: 
 var $262=HEAP32[(($__err)>>2)];
 var $263=$262|4;
 HEAP32[(($__err)>>2)]=$263;
 var $_0209226=$__ke;label=101;break;
 case 101: 
 var $_0209226;
 var $264=($__stat_hold_sroa_0_1|0)==0;
 if($264){label=103;break;}else{label=102;break;}
 case 102: 
 _free($__stat_hold_sroa_0_1);
 label=103;break;
 case 103: 
 STACKTOP=sp;return $_0209226;
 case 104: 
 var $266$0;
 var $266$1;
 ___resumeException($266$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $152$0=$152$r;var $152$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$152$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$152$1;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP16[(($__v)>>1)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $152$0=$152$r;var $152$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$152$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$152$1;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre162=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre162;var $_pre_phi164=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi164=$_pre163;label=5;break;
 case 5: 
 var $_pre_phi164;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $35=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{var $35=$19;label=11;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $33=($32|0)==-1;
 if($33){label=10;break;}else{var $35=$19;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $35=0;label=11;break;
 case 11: 
 var $35;
 var $36=($35|0)==0;
 var $37=HEAP32[(($14)>>2)];
 var $38=($37|0)==0;
 if($38){label=17;break;}else{label=12;break;}
 case 12: 
 var $40=(($37+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($37+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=13;break;}
 case 13: 
 if($36){var $56=$37;var $55=0;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=0;label=41;break;}
 case 14: 
 var $46=$37;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $51=($50|0)==-1;
 if($51){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($36){var $__a_2=$__a_0;var $123=0;var $122=1;label=41;break;}else{var $56=0;var $55=1;label=19;break;}
 case 18: 
 var $53=($37|0)==0;
 var $54=$36^$53;
 if($54){var $56=$37;var $55=$53;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=$53;label=41;break;}
 case 19: 
 var $55;
 var $56;
 var $57=HEAP32[(($__a_end)>>2)];
 var $58=$57;
 var $59=$__a_0;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($0)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($16)>>2)];
 var $66=$62>>>1;
 var $67=($64?$66:$65);
 var $68=($60|0)==($67|0);
 if($68){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=HEAP32[(($16)>>2)];
 var $76=$71;var $75=$71;label=23;break;
 case 22: 
 var $73=$62>>>1;
 var $74=$62>>>1;
 var $76=$74;var $75=$73;label=23;break;
 case 23: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $78=HEAP8[($0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp158=((($83)-(1))|0);
 var $84=$phitmp158;label=26;break;
 case 26: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $85=HEAP8[($0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $89=HEAP32[(($_pre_phi164)>>2)];
 var $90=$89;label=29;break;
 case 29: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=33;break;
 case 30: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $93=(($35+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($35+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=34;break;}else{label=36;break;}
 case 34: 
 var $99=$35;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($103)&255);
 var $_0_off0=$extract_t;label=37;break;
 case 36: 
 var $105=HEAP8[($94)];
 var $_0_off0=$105;label=37;break;
 case 37: 
 var $_0_off0;
 var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $108=($107|0)==0;
 if($108){label=38;break;}else{var $__a_2=$__a_1;var $123=$56;var $122=$55;label=41;break;}
 case 38: 
 var $110=HEAP32[(($93)>>2)];
 var $111=HEAP32[(($95)>>2)];
 var $112=($110|0)==($111|0);
 if($112){label=39;break;}else{label=40;break;}
 case 39: 
 var $114=$35;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+40)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$35;label=6;break; } else { label=30;break; }
 case 40: 
 var $120=(($110+1)|0);
 HEAP32[(($93)>>2)]=$120;
 var $__a_0=$__a_1;var $19=$35;label=6;break;
 case 41: 
 var $122;
 var $123;
 var $__a_2;
 var $124=$__grouping;
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$126&1;
 var $128=($127|0)==0;
 if($128){label=43;break;}else{label=42;break;}
 case 42: 
 var $130=(($__grouping+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $134=$131;label=44;break;
 case 43: 
 var $133=$126>>>1;
 var $134=$133;label=44;break;
 case 44: 
 var $134;
 var $135=($134|0)==0;
 if($135){label=48;break;}else{label=45;break;}
 case 45: 
 var $137=HEAP8[($__in_units)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=48;break;}else{label=46;break;}
 case 46: 
 var $141=HEAP32[(($__g_end)>>2)];
 var $142=$141;
 var $143=$__g;
 var $144=((($142)-($143))|0);
 var $145=($144|0)<160;
 if($145){label=47;break;}else{label=48;break;}
 case 47: 
 var $147=HEAP32[(($__dc)>>2)];
 var $148=(($141+4)|0);
 HEAP32[(($__g_end)>>2)]=$148;
 HEAP32[(($141)>>2)]=$147;
 label=48;break;
 case 48: 
 var $149=HEAP32[(($__a_end)>>2)];
 var $150=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$149,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF32[(($__v)>>2)]=$150;
 var $152=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$152,$__err);
 if($36){var $167=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $154=(($35+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($35+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=51;break;}else{var $167=$35;label=54;break;}
 case 51: 
 var $160=$35;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+36)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $165=($164|0)==-1;
 if($165){label=53;break;}else{var $167=$35;label=54;break;}
 case 53: 
 HEAP32[(($13)>>2)]=0;
 var $167=0;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($122){label=59;break;}else{label=55;break;}
 case 55: 
 var $170=(($123+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($123+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=56;break;}else{label=60;break;}
 case 56: 
 var $176=$123;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $181=($180|0)==-1;
 if($181){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($14)>>2)]=0;
 label=59;break;
 case 59: 
 if($168){label=61;break;}else{label=62;break;}
 case 60: 
 var $183=($123|0)==0;
 var $tmp156=$168^$183;
 if($tmp156){label=62;break;}else{label=61;break;}
 case 61: 
 var $185=HEAP32[(($__err)>>2)];
 var $186=$185|2;
 HEAP32[(($__err)>>2)]=$186;
 label=62;break;
 case 62: 
 var $188=(($agg_result)|0);
 HEAP32[(($188)>>2)]=$167;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre162=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre162;var $_pre_phi164=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi164=$_pre163;label=5;break;
 case 5: 
 var $_pre_phi164;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $35=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{var $35=$19;label=11;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $33=($32|0)==-1;
 if($33){label=10;break;}else{var $35=$19;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $35=0;label=11;break;
 case 11: 
 var $35;
 var $36=($35|0)==0;
 var $37=HEAP32[(($14)>>2)];
 var $38=($37|0)==0;
 if($38){label=17;break;}else{label=12;break;}
 case 12: 
 var $40=(($37+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($37+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=13;break;}
 case 13: 
 if($36){var $56=$37;var $55=0;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=0;label=41;break;}
 case 14: 
 var $46=$37;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $51=($50|0)==-1;
 if($51){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($36){var $__a_2=$__a_0;var $123=0;var $122=1;label=41;break;}else{var $56=0;var $55=1;label=19;break;}
 case 18: 
 var $53=($37|0)==0;
 var $54=$36^$53;
 if($54){var $56=$37;var $55=$53;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=$53;label=41;break;}
 case 19: 
 var $55;
 var $56;
 var $57=HEAP32[(($__a_end)>>2)];
 var $58=$57;
 var $59=$__a_0;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($0)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($16)>>2)];
 var $66=$62>>>1;
 var $67=($64?$66:$65);
 var $68=($60|0)==($67|0);
 if($68){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=HEAP32[(($16)>>2)];
 var $76=$71;var $75=$71;label=23;break;
 case 22: 
 var $73=$62>>>1;
 var $74=$62>>>1;
 var $76=$74;var $75=$73;label=23;break;
 case 23: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $78=HEAP8[($0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp158=((($83)-(1))|0);
 var $84=$phitmp158;label=26;break;
 case 26: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $85=HEAP8[($0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $89=HEAP32[(($_pre_phi164)>>2)];
 var $90=$89;label=29;break;
 case 29: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=33;break;
 case 30: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $93=(($35+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($35+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=34;break;}else{label=36;break;}
 case 34: 
 var $99=$35;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($103)&255);
 var $_0_off0=$extract_t;label=37;break;
 case 36: 
 var $105=HEAP8[($94)];
 var $_0_off0=$105;label=37;break;
 case 37: 
 var $_0_off0;
 var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $108=($107|0)==0;
 if($108){label=38;break;}else{var $__a_2=$__a_1;var $123=$56;var $122=$55;label=41;break;}
 case 38: 
 var $110=HEAP32[(($93)>>2)];
 var $111=HEAP32[(($95)>>2)];
 var $112=($110|0)==($111|0);
 if($112){label=39;break;}else{label=40;break;}
 case 39: 
 var $114=$35;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+40)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$35;label=6;break; } else { label=30;break; }
 case 40: 
 var $120=(($110+1)|0);
 HEAP32[(($93)>>2)]=$120;
 var $__a_0=$__a_1;var $19=$35;label=6;break;
 case 41: 
 var $122;
 var $123;
 var $__a_2;
 var $124=$__grouping;
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$126&1;
 var $128=($127|0)==0;
 if($128){label=43;break;}else{label=42;break;}
 case 42: 
 var $130=(($__grouping+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $134=$131;label=44;break;
 case 43: 
 var $133=$126>>>1;
 var $134=$133;label=44;break;
 case 44: 
 var $134;
 var $135=($134|0)==0;
 if($135){label=48;break;}else{label=45;break;}
 case 45: 
 var $137=HEAP8[($__in_units)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=48;break;}else{label=46;break;}
 case 46: 
 var $141=HEAP32[(($__g_end)>>2)];
 var $142=$141;
 var $143=$__g;
 var $144=((($142)-($143))|0);
 var $145=($144|0)<160;
 if($145){label=47;break;}else{label=48;break;}
 case 47: 
 var $147=HEAP32[(($__dc)>>2)];
 var $148=(($141+4)|0);
 HEAP32[(($__g_end)>>2)]=$148;
 HEAP32[(($141)>>2)]=$147;
 label=48;break;
 case 48: 
 var $149=HEAP32[(($__a_end)>>2)];
 var $150=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$149,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$150;
 var $152=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$152,$__err);
 if($36){var $167=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $154=(($35+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($35+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=51;break;}else{var $167=$35;label=54;break;}
 case 51: 
 var $160=$35;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+36)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $165=($164|0)==-1;
 if($165){label=53;break;}else{var $167=$35;label=54;break;}
 case 53: 
 HEAP32[(($13)>>2)]=0;
 var $167=0;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($122){label=59;break;}else{label=55;break;}
 case 55: 
 var $170=(($123+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($123+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=56;break;}else{label=60;break;}
 case 56: 
 var $176=$123;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $181=($180|0)==-1;
 if($181){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($14)>>2)]=0;
 label=59;break;
 case 59: 
 if($168){label=61;break;}else{label=62;break;}
 case 60: 
 var $183=($123|0)==0;
 var $tmp156=$168^$183;
 if($tmp156){label=62;break;}else{label=61;break;}
 case 61: 
 var $185=HEAP32[(($__err)>>2)];
 var $186=$185|2;
 HEAP32[(($__err)>>2)]=$186;
 label=62;break;
 case 62: 
 var $188=(($agg_result)|0);
 HEAP32[(($188)>>2)]=$167;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre162=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre162;var $_pre_phi164=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi164=$_pre163;label=5;break;
 case 5: 
 var $_pre_phi164;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $35=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{var $35=$19;label=11;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $33=($32|0)==-1;
 if($33){label=10;break;}else{var $35=$19;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $35=0;label=11;break;
 case 11: 
 var $35;
 var $36=($35|0)==0;
 var $37=HEAP32[(($14)>>2)];
 var $38=($37|0)==0;
 if($38){label=17;break;}else{label=12;break;}
 case 12: 
 var $40=(($37+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($37+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=13;break;}
 case 13: 
 if($36){var $56=$37;var $55=0;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=0;label=41;break;}
 case 14: 
 var $46=$37;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $51=($50|0)==-1;
 if($51){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($36){var $__a_2=$__a_0;var $123=0;var $122=1;label=41;break;}else{var $56=0;var $55=1;label=19;break;}
 case 18: 
 var $53=($37|0)==0;
 var $54=$36^$53;
 if($54){var $56=$37;var $55=$53;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=$53;label=41;break;}
 case 19: 
 var $55;
 var $56;
 var $57=HEAP32[(($__a_end)>>2)];
 var $58=$57;
 var $59=$__a_0;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($0)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($16)>>2)];
 var $66=$62>>>1;
 var $67=($64?$66:$65);
 var $68=($60|0)==($67|0);
 if($68){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=HEAP32[(($16)>>2)];
 var $76=$71;var $75=$71;label=23;break;
 case 22: 
 var $73=$62>>>1;
 var $74=$62>>>1;
 var $76=$74;var $75=$73;label=23;break;
 case 23: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $78=HEAP8[($0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp158=((($83)-(1))|0);
 var $84=$phitmp158;label=26;break;
 case 26: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $85=HEAP8[($0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $89=HEAP32[(($_pre_phi164)>>2)];
 var $90=$89;label=29;break;
 case 29: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=33;break;
 case 30: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $93=(($35+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($35+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=34;break;}else{label=36;break;}
 case 34: 
 var $99=$35;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($103)&255);
 var $_0_off0=$extract_t;label=37;break;
 case 36: 
 var $105=HEAP8[($94)];
 var $_0_off0=$105;label=37;break;
 case 37: 
 var $_0_off0;
 var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $108=($107|0)==0;
 if($108){label=38;break;}else{var $__a_2=$__a_1;var $123=$56;var $122=$55;label=41;break;}
 case 38: 
 var $110=HEAP32[(($93)>>2)];
 var $111=HEAP32[(($95)>>2)];
 var $112=($110|0)==($111|0);
 if($112){label=39;break;}else{label=40;break;}
 case 39: 
 var $114=$35;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+40)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$35;label=6;break; } else { label=30;break; }
 case 40: 
 var $120=(($110+1)|0);
 HEAP32[(($93)>>2)]=$120;
 var $__a_0=$__a_1;var $19=$35;label=6;break;
 case 41: 
 var $122;
 var $123;
 var $__a_2;
 var $124=$__grouping;
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$126&1;
 var $128=($127|0)==0;
 if($128){label=43;break;}else{label=42;break;}
 case 42: 
 var $130=(($__grouping+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $134=$131;label=44;break;
 case 43: 
 var $133=$126>>>1;
 var $134=$133;label=44;break;
 case 44: 
 var $134;
 var $135=($134|0)==0;
 if($135){label=48;break;}else{label=45;break;}
 case 45: 
 var $137=HEAP8[($__in_units)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=48;break;}else{label=46;break;}
 case 46: 
 var $141=HEAP32[(($__g_end)>>2)];
 var $142=$141;
 var $143=$__g;
 var $144=((($142)-($143))|0);
 var $145=($144|0)<160;
 if($145){label=47;break;}else{label=48;break;}
 case 47: 
 var $147=HEAP32[(($__dc)>>2)];
 var $148=(($141+4)|0);
 HEAP32[(($__g_end)>>2)]=$148;
 HEAP32[(($141)>>2)]=$147;
 label=48;break;
 case 48: 
 var $149=HEAP32[(($__a_end)>>2)];
 var $150=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$149,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$150;
 var $152=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$152,$__err);
 if($36){var $167=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $154=(($35+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($35+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=51;break;}else{var $167=$35;label=54;break;}
 case 51: 
 var $160=$35;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+36)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $165=($164|0)==-1;
 if($165){label=53;break;}else{var $167=$35;label=54;break;}
 case 53: 
 HEAP32[(($13)>>2)]=0;
 var $167=0;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($122){label=59;break;}else{label=55;break;}
 case 55: 
 var $170=(($123+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($123+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=56;break;}else{label=60;break;}
 case 56: 
 var $176=$123;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $181=($180|0)==-1;
 if($181){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($14)>>2)]=0;
 label=59;break;
 case 59: 
 if($168){label=61;break;}else{label=62;break;}
 case 60: 
 var $183=($123|0)==0;
 var $tmp156=$168^$183;
 if($tmp156){label=62;break;}else{label=61;break;}
 case 61: 
 var $185=HEAP32[(($__err)>>2)];
 var $186=$185|2;
 HEAP32[(($__err)>>2)]=$186;
 label=62;break;
 case 62: 
 var $188=(($agg_result)|0);
 HEAP32[(($188)>>2)]=$167;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(48);
 var $__grouping171=$__grouping;
 var $0=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__grouping171)>>2)]=0; HEAP32[((($__grouping171)+(4))>>2)]=0; HEAP32[((($__grouping171)+(8))>>2)]=0;
 var $1=$__buf;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($0,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 var $3=(($0)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((16840)>>2)];
 var $7=($6|0)==-1;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$5,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=39;break; }
 case 4: 
 var $9=HEAP32[((16844)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=8;break;}
 case 6: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=39;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $25=$21;
 var $26=(($__atoms)|0);
 var $27=$21;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+32)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($25,13240,13266,$26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=39;break; }
 case 9: 
 var $32=HEAP32[(($3)>>2)];
 var $33=(($32)|0);
 var $34=__ZNSt3__114__shared_count16__release_sharedEv($33);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $35=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=41;break; }
 case 10: 
 var $36=HEAP8[($1)];
 var $37=$36&1;
 var $38=(($37<<24)>>24)==0;
 if($38){label=12;break;}else{label=11;break;}
 case 11: 
 var $40=(($__buf+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $_pre172=(($35+1)|0);
 var $44=$41;var $_pre_phi=$_pre172;var $_pre_phi174=$40;label=13;break;
 case 12: 
 var $43=(($35+1)|0);
 var $_pre173=(($__buf+8)|0);
 var $44=$43;var $_pre_phi=$43;var $_pre_phi174=$_pre173;label=13;break;
 case 13: 
 var $_pre_phi174;
 var $_pre_phi;
 var $44;
 HEAP32[(($__a_end)>>2)]=$44;
 var $45=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$45;
 HEAP32[(($__dc)>>2)]=0;
 var $46=(($__b)|0);
 var $47=(($__e)|0);
 var $48=(($__buf)|0);
 var $49=(($__buf+4)|0);
 var $_pre=HEAP32[(($46)>>2)];
 var $__a_0=$44;var $50=$_pre;label=14;break;
 case 14: 
 var $50;
 var $__a_0;
 var $51=($50|0)==0;
 if($51){var $66=0;label=19;break;}else{label=15;break;}
 case 15: 
 var $53=(($50+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($50+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($54|0)==($56|0);
 if($57){label=16;break;}else{var $66=$50;label=19;break;}
 case 16: 
 var $59=$50;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+36)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=40;break; }
 case 17: 
 var $64=($63|0)==-1;
 if($64){label=18;break;}else{var $66=$50;label=19;break;}
 case 18: 
 HEAP32[(($46)>>2)]=0;
 var $66=0;label=19;break;
 case 19: 
 var $66;
 var $67=($66|0)==0;
 var $68=HEAP32[(($47)>>2)];
 var $69=($68|0)==0;
 if($69){label=25;break;}else{label=20;break;}
 case 20: 
 var $71=(($68+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($68+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=22;break;}else{label=21;break;}
 case 21: 
 if($67){label=27;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 22: 
 var $77=$68;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+36)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]($68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=40;break; }
 case 23: 
 var $82=($81|0)==-1;
 if($82){label=24;break;}else{label=26;break;}
 case 24: 
 HEAP32[(($47)>>2)]=0;
 label=25;break;
 case 25: 
 if($67){var $__a_2=$__a_0;label=51;break;}else{label=27;break;}
 case 26: 
 var $84=($68|0)==0;
 var $85=$67^$84;
 if($85){label=27;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 27: 
 var $86=HEAP32[(($__a_end)>>2)];
 var $87=$86;
 var $88=$__a_0;
 var $89=((($87)-($88))|0);
 var $90=HEAP8[($1)];
 var $91=($90&255);
 var $92=$91&1;
 var $93=($92|0)==0;
 var $94=HEAP32[(($49)>>2)];
 var $95=$91>>>1;
 var $96=($93?$95:$94);
 var $97=($89|0)==($96|0);
 if($97){label=28;break;}else{var $__a_1=$__a_0;label=43;break;}
 case 28: 
 if($93){label=30;break;}else{label=29;break;}
 case 29: 
 var $100=HEAP32[(($49)>>2)];
 var $105=$100;var $104=$100;label=31;break;
 case 30: 
 var $102=$91>>>1;
 var $103=$91>>>1;
 var $105=$103;var $104=$102;label=31;break;
 case 31: 
 var $104;
 var $105;
 var $106=$105<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$106,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=40;break; }
 case 32: 
 var $107=HEAP8[($1)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){var $113=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $111=HEAP32[(($48)>>2)];
 var $112=$111&-2;
 var $phitmp166=((($112)-(1))|0);
 var $113=$phitmp166;label=34;break;
 case 34: 
 var $113;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$113,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=40;break; }
 case 35: 
 var $114=HEAP8[($1)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){var $119=$_pre_phi;label=37;break;}else{label=36;break;}
 case 36: 
 var $118=HEAP32[(($_pre_phi174)>>2)];
 var $119=$118;label=37;break;
 case 37: 
 var $119;
 var $120=(($119+$104)|0);
 HEAP32[(($__a_end)>>2)]=$120;
 var $__a_1=$119;label=43;break;
 case 38: 
 var $122$0 = ___cxa_find_matching_catch(-1, -1); var $122$1 = tempRet0;
 var $123=$122$0;
 var $124=$122$1;
 var $_0158=$124;var $_0159=$123;label=74;break;
 case 39: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=$126$1;
 var $129=HEAP32[(($3)>>2)];
 var $130=(($129)|0);
 var $131=__ZNSt3__114__shared_count16__release_sharedEv($130);
 var $_0158=$128;var $_0159=$127;label=74;break;
 case 40: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=42;break;
 case 42: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $132=$eh_lpad_body$0;
 var $133=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $_0158=$133;var $_0159=$132;label=74;break;
 case 43: 
 var $__a_1;
 var $134=(($66+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($66+16)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($135|0)==($137|0);
 if($138){label=44;break;}else{label=46;break;}
 case 44: 
 var $140=$66;
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$143]($66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=40;break; }
 case 45: 
 var $extract_t=(($144)&255);
 var $_0_off0=$extract_t;label=47;break;
 case 46: 
 var $146=HEAP8[($135)];
 var $_0_off0=$146;label=47;break;
 case 47: 
 var $_0_off0;
 var $148=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,16,$__a_1,$__a_end,$__dc,0,$__grouping,$45,$__g_end,$26);
 var $149=($148|0)==0;
 if($149){label=48;break;}else{var $__a_2=$__a_1;label=51;break;}
 case 48: 
 var $151=HEAP32[(($134)>>2)];
 var $152=HEAP32[(($136)>>2)];
 var $153=($151|0)==($152|0);
 if($153){label=49;break;}else{label=50;break;}
 case 49: 
 var $155=$66;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+40)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $50=$66;label=14;break; } else { label=40;break; }
 case 50: 
 var $161=(($151+1)|0);
 HEAP32[(($134)>>2)]=$161;
 var $__a_0=$__a_1;var $50=$66;label=14;break;
 case 51: 
 var $__a_2;
 var $163=(($__a_2+3)|0);
 HEAP8[($163)]=0;
 var $164=HEAP8[(17544)];
 var $165=(($164<<24)>>24)==0;
 if($165){label=52;break;}else{label=56;break;}
 case 52: 
 var $167=___cxa_guard_acquire(17544);
 var $168=($167|0)==0;
 if($168){label=56;break;}else{label=53;break;}
 case 53: 
 var $170=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=55;break; }
 case 54: 
 HEAP32[((15408)>>2)]=$170;
 label=56;break;
 case 55: 
 var $173$0 = ___cxa_find_matching_catch(-1, -1); var $173$1 = tempRet0;
 var $eh_lpad_body$1=$173$1;var $eh_lpad_body$0=$173$0;label=42;break;
 case 56: 
 var $175=HEAP32[((15408)>>2)];
 var $176=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$175,2824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=41;break; }
 case 57: 
 var $178=($176|0)==1;
 if($178){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 var $181=HEAP32[(($46)>>2)];
 var $182=($181|0)==0;
 if($182){var $197=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $184=(($181+12)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($181+16)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($185|0)==($187|0);
 if($188){label=61;break;}else{var $197=$181;label=64;break;}
 case 61: 
 var $190=$181;
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+36)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=41;break; }
 case 62: 
 var $195=($194|0)==-1;
 if($195){label=63;break;}else{var $197=$181;label=64;break;}
 case 63: 
 HEAP32[(($46)>>2)]=0;
 var $197=0;label=64;break;
 case 64: 
 var $197;
 var $198=($197|0)==0;
 var $199=HEAP32[(($47)>>2)];
 var $200=($199|0)==0;
 if($200){label=70;break;}else{label=65;break;}
 case 65: 
 var $202=(($199+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(($199+16)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=($203|0)==($205|0);
 if($206){label=67;break;}else{label=66;break;}
 case 66: 
 if($198){label=73;break;}else{label=72;break;}
 case 67: 
 var $208=$199;
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+36)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$211]($199) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=41;break; }
 case 68: 
 var $213=($212|0)==-1;
 if($213){label=69;break;}else{label=71;break;}
 case 69: 
 HEAP32[(($47)>>2)]=0;
 label=70;break;
 case 70: 
 if($198){label=72;break;}else{label=73;break;}
 case 71: 
 var $215=($199|0)==0;
 var $tmp164=$198^$215;
 if($tmp164){label=73;break;}else{label=72;break;}
 case 72: 
 var $217=HEAP32[(($__err)>>2)];
 var $218=$217|2;
 HEAP32[(($__err)>>2)]=$218;
 label=73;break;
 case 73: 
 var $220=(($agg_result)|0);
 HEAP32[(($220)>>2)]=$197;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
 case 74: 
 var $_0159;
 var $_0158;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $222$0=$_0159;
 var $222$1=0;
 var $223$0=$222$0;
 var $223$1=$_0158;
 ___resumeException($223$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+24)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==(($__ct<<24)>>24);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+25)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)==(($__ct<<24)>>24);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17&1;
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($__grouping+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $25=$22;label=8;break;
 case 7: 
 var $24=$17>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_049=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 11: 
 var $38=(($__atoms+26)|0);
 var $_0=$__atoms;label=12;break;
 case 12: 
 var $_0;
 var $40=($_0|0)==($38|0);
 if($40){var $_0_lcssa=$38;label=14;break;}else{label=13;break;}
 case 13: 
 var $42=HEAP8[($_0)];
 var $43=(($42<<24)>>24)==(($__ct<<24)>>24);
 var $44=(($_0+1)|0);
 if($43){var $_0_lcssa=$_0;label=14;break;}else{var $_0=$44;label=12;break;}
 case 14: 
 var $_0_lcssa;
 var $45=$_0_lcssa;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=($47|0)>23;
 if($48){var $_049=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $51=($47|0)<($__base|0);
 if($51){label=22;break;}else{var $_049=-1;label=23;break;}
 case 17: 
 var $53=($47|0)<22;
 if($53){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_049=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $56=$1;
 var $57=$__a;
 var $58=((($56)-($57))|0);
 var $59=($58|0)<3;
 if($59){label=20;break;}else{var $_049=-1;label=23;break;}
 case 20: 
 var $61=((($1)-(1))|0);
 var $62=HEAP8[($61)];
 var $63=(($62<<24)>>24)==48;
 if($63){label=21;break;}else{var $_049=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $65=((13240+$47)|0);
 var $66=HEAP8[($65)];
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=(($67+1)|0);
 HEAP32[(($__a_end)>>2)]=$68;
 HEAP8[($67)]=$66;
 var $_049=0;label=23;break;
 case 22: 
 var $70=((13240+$47)|0);
 var $71=HEAP8[($70)];
 var $72=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$72;
 HEAP8[($1)]=$71;
 var $73=HEAP32[(($__dc)>>2)];
 var $74=((($73)+(1))|0);
 HEAP32[(($__dc)>>2)]=$74;
 var $_049=0;label=23;break;
 case 23: 
 var $_049;
 return $_049;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsscanf($__s,$__format,$1);
 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i24=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $__names=(sp)+(80);
 var $6=(sp)+(104);
 var $7=(($__iob+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $12=$this;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($__b)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($3)|0);
 HEAP32[(($21)>>2)]=$20;
 FUNCTION_TABLE[$15]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $22=(($1)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($16)>>2)]=$23;
 var $24=HEAP32[(($__lv)>>2)];
 if(($24|0)==0){ label=3;break;}else if(($24|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$23;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 var $31=(($4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$__p_i_i_i;
 var $34=HEAP32[((16832)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$33,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $37=HEAP32[((16836)>>2)];
 var $38=((($37)-(1))|0);
 var $39=(($32+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($32+8)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$40;
 var $44=$42;
 var $45=((($43)-($44))|0);
 var $46=$45>>2;
 var $47=($46>>>0)>($38>>>0);
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=(($42+($38<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($49|0)==0;
 if($50){label=11;break;}else{label=13;break;}
 case 11: 
 var $51=___cxa_allocate_exception(4);
 var $52=$51;
 __ZNSt8bad_castC2Ev($52);
 (function() { try { __THREW__ = 0; return ___cxa_throw($51,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $53=$49;
 var $54=HEAP32[(($31)>>2)];
 var $55=(($54)|0);
 var $56=__ZNSt3__114__shared_count16__release_sharedEv($55);
 __ZNKSt3__18ios_base6getlocEv($5,$__iob);
 var $57=(($5)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$__p_i_i_i24;
 var $60=HEAP32[((16448)>>2)];
 var $61=($60|0)==-1;
 if($61){label=15;break;}else{label=14;break;}
 case 14: 
 var $_sroa_016_0__idx_i_i25=(($__p_i_i_i24)|0);
 HEAP32[(($_sroa_016_0__idx_i_i25)>>2)]=16448;
 var $_sroa_117_4__idx18_i_i26=(($__p_i_i_i24+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i26)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i27=(($__p_i_i_i24+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i27)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16448,$59,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $63=HEAP32[((16452)>>2)];
 var $64=((($63)-(1))|0);
 var $65=(($58+12)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($58+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$66;
 var $70=$68;
 var $71=((($69)-($70))|0);
 var $72=$71>>2;
 var $73=($72>>>0)>($64>>>0);
 if($73){label=16;break;}else{label=17;break;}
 case 16: 
 var $74=(($68+($64<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==0;
 if($76){label=17;break;}else{label=19;break;}
 case 17: 
 var $77=___cxa_allocate_exception(4);
 var $78=$77;
 __ZNSt8bad_castC2Ev($78);
 (function() { try { __THREW__ = 0; return ___cxa_throw($77,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $79=$75;
 var $80=HEAP32[(($57)>>2)];
 var $81=(($80)|0);
 var $82=__ZNSt3__114__shared_count16__release_sharedEv($81);
 var $83=(($__names)|0);
 var $84=$75;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+24)|0);
 var $87=HEAP32[(($86)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($83,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $_022=$83;label=25;break; }
 case 20: 
 var $88=(($__names+12)|0);
 var $89=HEAP32[(($84)>>2)];
 var $90=(($89+28)|0);
 var $91=HEAP32[(($90)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($88,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $_022=$88;label=25;break; }
 case 21: 
 var $92=(($__e)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($6)|0);
 HEAP32[(($94)>>2)]=$93;
 var $95=(($__names+24)|0);
 var $96=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$83,$95,$53,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $97=($96|0)==($83|0);
 var $98=($97&1);
 HEAP8[($__v)]=$98;
 var $99=(($__b)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($agg_result)|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($102);
 var $103=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($103);
 label=28;break;
 case 23: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1); var $105$1 = tempRet0;
 var $106=$105$0;
 var $107=$105$1;
 var $108=HEAP32[(($31)>>2)];
 var $109=(($108)|0);
 var $110=__ZNSt3__114__shared_count16__release_sharedEv($109);
 var $_0=$106;var $_021=$107;label=29;break;
 case 24: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1); var $112$1 = tempRet0;
 var $113=$112$0;
 var $114=$112$1;
 var $115=HEAP32[(($57)>>2)];
 var $116=(($115)|0);
 var $117=__ZNSt3__114__shared_count16__release_sharedEv($116);
 var $_0=$113;var $_021=$114;label=29;break;
 case 25: 
 var $_022;
 var $119$0 = ___cxa_find_matching_catch(-1, -1); var $119$1 = tempRet0;
 var $120=$119$0;
 var $121=$119$1;
 var $122=($83|0)==($_022|0);
 if($122){var $_0=$120;var $_021=$121;label=29;break;}else{var $123=$_022;label=26;break;}
 case 26: 
 var $123;
 var $124=((($123)-(12))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($124);
 var $125=($124|0)==($83|0);
 if($125){var $_0=$120;var $_021=$121;label=29;break;}else{var $123=$124;label=26;break;}
 case 27: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($128);
 var $129=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($129);
 var $130=$126$1;
 var $_0=$127;var $_021=$130;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $_021;
 var $_0;
 var $132$0=$_0;
 var $132$1=0;
 var $133$0=$132$0;
 var $133$1=$_021;
 ___resumeException($133$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $__stat_hold_sroa_0_1=0;label=10;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $__stat_hold_sroa_0_1=$8;label=10;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $__stat_hold_sroa_0_1=0;label=10;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $271$1=$11$1;var $271$0=$11$0;label=106;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit251$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit251$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit251$1;var $lpad_phi$0=$lpad_nonloopexit251$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $12=($__stat_hold_sroa_0_1|0)==0;
 if($12){var $271$1=$lpad_phi$1;var $271$0=$lpad_phi$0;label=106;break;}else{label=9;break;}
 case 9: 
 _free($__stat_hold_sroa_0_1);
 var $271$1=$lpad_phi$1;var $271$0=$lpad_phi$0;label=106;break;
 case 10: 
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $14=($__kb|0)==($__ke|0);
 if($14){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=11;break;}else{var $__n_might_match_0261=$4;var $__n_does_match_0262=0;var $__st_0263=$__status_0;var $__ky_0264=$__kb;label=12;break;}
 case 11: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $15=(($__b)|0);
 var $16=(($__e)|0);
 var $17=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=19;break;
 case 12: 
 var $__ky_0264;
 var $__st_0263;
 var $__n_does_match_0262;
 var $__n_might_match_0261;
 var $18=$__ky_0264;
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=$20&1;
 var $22=($21|0)==0;
 if($22){label=14;break;}else{label=13;break;}
 case 13: 
 var $24=(($__ky_0264+4)|0);
 var $25=HEAP32[(($24)>>2)];
 var $28=$25;label=15;break;
 case 14: 
 var $27=$20>>>1;
 var $28=$27;label=15;break;
 case 15: 
 var $28;
 var $29=($28|0)==0;
 if($29){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP8[($__st_0263)]=1;
 var $__n_does_match_1=$__n_does_match_0262;var $__n_might_match_1=$__n_might_match_0261;label=18;break;
 case 17: 
 HEAP8[($__st_0263)]=2;
 var $32=((($__n_might_match_0261)-(1))|0);
 var $33=((($__n_does_match_0262)+(1))|0);
 var $__n_does_match_1=$33;var $__n_might_match_1=$32;label=18;break;
 case 18: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $35=(($__ky_0264+12)|0);
 var $36=(($__st_0263+1)|0);
 var $37=($35|0)==($__ke|0);
 if($37){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=11;break;}else{var $__n_might_match_0261=$__n_might_match_1;var $__n_does_match_0262=$__n_does_match_1;var $__st_0263=$36;var $__ky_0264=$35;label=12;break;}
 case 19: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){var $57=0;label=26;break;}else{label=20;break;}
 case 20: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=21;break;}else{label=22;break;}
 case 21: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0208=$52;label=23;break; } else { label=6;break; }
 case 22: 
 var $54=HEAP32[(($43)>>2)];
 var $_0208=$54;label=23;break;
 case 23: 
 var $_0208;
 var $55=($_0208|0)==-1;
 if($55){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre=HEAP32[(($15)>>2)];
 var $57=$_pre;label=26;break;
 case 25: 
 HEAP32[(($15)>>2)]=0;
 var $57=0;label=26;break;
 case 26: 
 var $57;
 var $58=($57|0)==0;
 var $59=HEAP32[(($16)>>2)];
 var $60=($59|0)==0;
 if($60){var $79=$57;var $78=0;label=33;break;}else{label=27;break;}
 case 27: 
 var $62=(($59+12)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($59+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($63|0)==($65|0);
 if($66){label=28;break;}else{label=29;break;}
 case 28: 
 var $68=$59;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+36)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0207=$72;label=30;break; } else { label=6;break; }
 case 29: 
 var $74=HEAP32[(($63)>>2)];
 var $_0207=$74;label=30;break;
 case 30: 
 var $_0207;
 var $75=($_0207|0)==-1;
 if($75){label=31;break;}else{var $77=$59;label=32;break;}
 case 31: 
 HEAP32[(($16)>>2)]=0;
 var $77=0;label=32;break;
 case 32: 
 var $77;
 var $_pr=HEAP32[(($15)>>2)];
 var $79=$_pr;var $78=$77;label=33;break;
 case 33: 
 var $78;
 var $79;
 var $80=($78|0)==0;
 var $81=$58^$80;
 var $82=($__n_might_match_2|0)!=0;
 var $_=$81&$82;
 if($_){label=34;break;}else{label=82;break;}
 case 34: 
 var $84=(($79+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($79+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=35;break;}else{label=36;break;}
 case 35: 
 var $90=$79;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0206=$94;label=37;break; } else { label=6;break; }
 case 36: 
 var $96=HEAP32[(($85)>>2)];
 var $_0206=$96;label=37;break;
 case 37: 
 var $_0206;
 if($__case_sensitive){var $__c_0=$_0206;label=39;break;}else{label=38;break;}
 case 38: 
 var $98=HEAP32[(($17)>>2)];
 var $99=(($98+28)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($__ct,$_0206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$101;label=39;break; } else { label=6;break; }
 case 39: 
 var $__c_0;
 if($14){var $__n_does_match_7=$__n_does_match_2;var $__n_might_match_3_lcssa276=$__n_might_match_2;label=81;break;}else{label=40;break;}
 case 40: 
 var $102=((($__indx_0)+(1))|0);
 if($__case_sensitive){var $__n_might_match_3231_us=$__n_might_match_2;var $__n_does_match_3232_us=$__n_does_match_2;var $__st_1233_us=$__status_0;var $__consume_0_off0235_us=0;var $__ky1_0236_us=$__kb;label=41;break;}else{var $__n_might_match_3231=$__n_might_match_2;var $__n_does_match_3232=$__n_does_match_2;var $__st_1233=$__status_0;var $__consume_0_off0235=0;var $__ky1_0236=$__kb;label=54;break;}
 case 41: 
 var $__ky1_0236_us;
 var $__consume_0_off0235_us;
 var $__st_1233_us;
 var $__n_does_match_3232_us;
 var $__n_might_match_3231_us;
 var $103=HEAP8[($__st_1233_us)];
 var $104=(($103<<24)>>24)==1;
 if($104){label=42;break;}else{var $__consume_1_off0_us=$__consume_0_off0235_us;var $__n_does_match_4_us=$__n_does_match_3232_us;var $__n_might_match_4_us=$__n_might_match_3231_us;label=52;break;}
 case 42: 
 var $106=$__ky1_0236_us;
 var $107=HEAP8[($106)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=44;break;}else{label=43;break;}
 case 43: 
 var $111=(($__ky1_0236_us+8)|0);
 var $112=HEAP32[(($111)>>2)];
 var $115=$112;label=45;break;
 case 44: 
 var $114=(($__ky1_0236_us+4)|0);
 var $115=$114;label=45;break;
 case 45: 
 var $115;
 var $116=(($115+($__indx_0<<2))|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($__c_0|0)==($117|0);
 if($118){label=47;break;}else{label=46;break;}
 case 46: 
 HEAP8[($__st_1233_us)]=0;
 var $120=((($__n_might_match_3231_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off0235_us;var $__n_does_match_4_us=$__n_does_match_3232_us;var $__n_might_match_4_us=$120;label=52;break;
 case 47: 
 var $122=HEAP8[($106)];
 var $123=($122&255);
 var $124=$123&1;
 var $125=($124|0)==0;
 if($125){label=49;break;}else{label=48;break;}
 case 48: 
 var $127=(($__ky1_0236_us+4)|0);
 var $128=HEAP32[(($127)>>2)];
 var $131=$128;label=50;break;
 case 49: 
 var $130=$123>>>1;
 var $131=$130;label=50;break;
 case 50: 
 var $131;
 var $132=($131|0)==($102|0);
 if($132){label=51;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_3232_us;var $__n_might_match_4_us=$__n_might_match_3231_us;label=52;break;}
 case 51: 
 HEAP8[($__st_1233_us)]=2;
 var $134=((($__n_might_match_3231_us)-(1))|0);
 var $135=((($__n_does_match_3232_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$135;var $__n_might_match_4_us=$134;label=52;break;
 case 52: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $137=(($__ky1_0236_us+12)|0);
 var $138=($137|0)==($__ke|0);
 if($138){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=68;break;}else{label=53;break;}
 case 53: 
 var $139=(($__st_1233_us+1)|0);
 var $__n_might_match_3231_us=$__n_might_match_4_us;var $__n_does_match_3232_us=$__n_does_match_4_us;var $__st_1233_us=$139;var $__consume_0_off0235_us=$__consume_1_off0_us;var $__ky1_0236_us=$137;label=41;break;
 case 54: 
 var $__ky1_0236;
 var $__consume_0_off0235;
 var $__st_1233;
 var $__n_does_match_3232;
 var $__n_might_match_3231;
 var $140=HEAP8[($__st_1233)];
 var $141=(($140<<24)>>24)==1;
 if($141){label=55;break;}else{var $__consume_1_off0=$__consume_0_off0235;var $__n_does_match_4=$__n_does_match_3232;var $__n_might_match_4=$__n_might_match_3231;label=66;break;}
 case 55: 
 var $143=$__ky1_0236;
 var $144=HEAP8[($143)];
 var $145=$144&1;
 var $146=(($145<<24)>>24)==0;
 if($146){label=57;break;}else{label=56;break;}
 case 56: 
 var $148=(($__ky1_0236+8)|0);
 var $149=HEAP32[(($148)>>2)];
 var $153=$149;label=58;break;
 case 57: 
 var $151=(($__ky1_0236+4)|0);
 var $153=$151;label=58;break;
 case 58: 
 var $153;
 var $154=(($153+($__indx_0<<2))|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=HEAP32[(($17)>>2)];
 var $157=(($156+28)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($__ct,$155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=5;break; }
 case 59: 
 var $160=($__c_0|0)==($159|0);
 if($160){label=60;break;}else{label=65;break;}
 case 60: 
 var $162=HEAP8[($143)];
 var $163=($162&255);
 var $164=$163&1;
 var $165=($164|0)==0;
 if($165){label=62;break;}else{label=61;break;}
 case 61: 
 var $167=(($__ky1_0236+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $171=$168;label=63;break;
 case 62: 
 var $170=$163>>>1;
 var $171=$170;label=63;break;
 case 63: 
 var $171;
 var $172=($171|0)==($102|0);
 if($172){label=64;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_3232;var $__n_might_match_4=$__n_might_match_3231;label=66;break;}
 case 64: 
 HEAP8[($__st_1233)]=2;
 var $174=((($__n_might_match_3231)-(1))|0);
 var $175=((($__n_does_match_3232)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$175;var $__n_might_match_4=$174;label=66;break;
 case 65: 
 HEAP8[($__st_1233)]=0;
 var $177=((($__n_might_match_3231)-(1))|0);
 var $__consume_1_off0=$__consume_0_off0235;var $__n_does_match_4=$__n_does_match_3232;var $__n_might_match_4=$177;label=66;break;
 case 66: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $179=(($__ky1_0236+12)|0);
 var $180=($179|0)==($__ke|0);
 if($180){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=68;break;}else{label=67;break;}
 case 67: 
 var $181=(($__st_1233+1)|0);
 var $__n_might_match_3231=$__n_might_match_4;var $__n_does_match_3232=$__n_does_match_4;var $__st_1233=$181;var $__consume_0_off0235=$__consume_1_off0;var $__ky1_0236=$179;label=54;break;
 case 68: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=69;break;}else{var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa276=$__n_might_match_3_lcssa;label=81;break;}
 case 69: 
 var $183=HEAP32[(($15)>>2)];
 var $184=(($183+12)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($183+16)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($185|0)==($187|0);
 if($188){label=70;break;}else{label=71;break;}
 case 70: 
 var $190=$183;
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+40)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=6;break; }
 case 71: 
 var $196=(($185+4)|0);
 HEAP32[(($184)>>2)]=$196;
 label=72;break;
 case 72: 
 var $197=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
 var $_not=($197>>>0)<2;
 var $brmerge=$_not|$14;
 if($brmerge){var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa276=$__n_might_match_3_lcssa;label=81;break;}else{label=73;break;}
 case 73: 
 var $198=((($__indx_0)+(1))|0);
 var $__n_does_match_5245=$__n_does_match_3_lcssa;var $__st_2246=$__status_0;var $__ky2_0247=$__kb;label=74;break;
 case 74: 
 var $__ky2_0247;
 var $__st_2246;
 var $__n_does_match_5245;
 var $200=HEAP8[($__st_2246)];
 var $201=(($200<<24)>>24)==2;
 if($201){label=75;break;}else{var $__n_does_match_6=$__n_does_match_5245;label=80;break;}
 case 75: 
 var $203=$__ky2_0247;
 var $204=HEAP8[($203)];
 var $205=($204&255);
 var $206=$205&1;
 var $207=($206|0)==0;
 if($207){label=77;break;}else{label=76;break;}
 case 76: 
 var $209=(($__ky2_0247+4)|0);
 var $210=HEAP32[(($209)>>2)];
 var $213=$210;label=78;break;
 case 77: 
 var $212=$205>>>1;
 var $213=$212;label=78;break;
 case 78: 
 var $213;
 var $214=($213|0)==($198|0);
 if($214){var $__n_does_match_6=$__n_does_match_5245;label=80;break;}else{label=79;break;}
 case 79: 
 HEAP8[($__st_2246)]=0;
 var $216=((($__n_does_match_5245)-(1))|0);
 var $__n_does_match_6=$216;label=80;break;
 case 80: 
 var $__n_does_match_6;
 var $218=(($__ky2_0247+12)|0);
 var $219=(($__st_2246+1)|0);
 var $220=($218|0)==($__ke|0);
 if($220){var $__n_does_match_7=$__n_does_match_6;var $__n_might_match_3_lcssa276=$__n_might_match_3_lcssa;label=81;break;}else{var $__n_does_match_5245=$__n_does_match_6;var $__st_2246=$219;var $__ky2_0247=$218;label=74;break;}
 case 81: 
 var $__n_might_match_3_lcssa276;
 var $__n_does_match_7;
 var $221=((($__indx_0)+(1))|0);
 var $__indx_0=$221;var $__n_does_match_2=$__n_does_match_7;var $__n_might_match_2=$__n_might_match_3_lcssa276;label=19;break;
 case 82: 
 var $223=($79|0)==0;
 if($223){var $240=1;label=89;break;}else{label=83;break;}
 case 83: 
 var $225=(($79+12)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($79+16)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($226|0)==($228|0);
 if($229){label=84;break;}else{label=85;break;}
 case 84: 
 var $231=$79;
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+36)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$234]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0204=$235;label=86;break; } else { label=7;break; }
 case 85: 
 var $237=HEAP32[(($226)>>2)];
 var $_0204=$237;label=86;break;
 case 86: 
 var $_0204;
 var $238=($_0204|0)==-1;
 if($238){label=88;break;}else{label=87;break;}
 case 87: 
 var $_pre275=HEAP32[(($15)>>2)];
 var $phitmp=($_pre275|0)==0;
 var $240=$phitmp;label=89;break;
 case 88: 
 HEAP32[(($15)>>2)]=0;
 var $240=1;label=89;break;
 case 89: 
 var $240;
 if($80){label=95;break;}else{label=90;break;}
 case 90: 
 var $242=(($78+12)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=(($78+16)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($243|0)==($245|0);
 if($246){label=91;break;}else{label=92;break;}
 case 91: 
 var $248=$78;
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+36)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$251]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$252;label=93;break; } else { label=7;break; }
 case 92: 
 var $254=HEAP32[(($243)>>2)];
 var $_0=$254;label=93;break;
 case 93: 
 var $_0;
 var $255=($_0|0)==-1;
 if($255){label=94;break;}else{label=96;break;}
 case 94: 
 HEAP32[(($16)>>2)]=0;
 label=95;break;
 case 95: 
 if($240){label=97;break;}else{label=98;break;}
 case 96: 
 var $257=($78|0)==0;
 var $tmp218=$240^$257;
 if($tmp218){label=98;break;}else{label=97;break;}
 case 97: 
 var $259=HEAP32[(($__err)>>2)];
 var $260=$259|2;
 HEAP32[(($__err)>>2)]=$260;
 label=98;break;
 case 98: 
 if($14){label=102;break;}else{var $_0209225=$__kb;var $__st_3226=$__status_0;label=99;break;}
 case 99: 
 var $__st_3226;
 var $_0209225;
 var $261=HEAP8[($__st_3226)];
 var $262=(($261<<24)>>24)==2;
 if($262){var $_0209224=$_0209225;label=103;break;}else{label=100;break;}
 case 100: 
 var $264=(($_0209225+12)|0);
 var $265=($264|0)==($__ke|0);
 if($265){label=102;break;}else{label=101;break;}
 case 101: 
 var $266=(($__st_3226+1)|0);
 var $_0209225=$264;var $__st_3226=$266;label=99;break;
 case 102: 
 var $267=HEAP32[(($__err)>>2)];
 var $268=$267|4;
 HEAP32[(($__err)>>2)]=$268;
 var $_0209224=$__ke;label=103;break;
 case 103: 
 var $_0209224;
 var $269=($__stat_hold_sroa_0_1|0)==0;
 if($269){label=105;break;}else{label=104;break;}
 case 104: 
 _free($__stat_hold_sroa_0_1);
 label=105;break;
 case 105: 
 STACKTOP=sp;return $_0209224;
 case 106: 
 var $271$0;
 var $271$1;
 ___resumeException($271$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $156$0=$156$r;var $156$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$156$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$156$1;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP16[(($__v)>>1)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $156$0=$156$r;var $156$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$156$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$156$1;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre161=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre161;var $_pre_phi163=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre162=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi163=$_pre162;label=5;break;
 case 5: 
 var $_pre_phi163;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP32[(($__decimal_point)>>2)];
 var $18=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0153=$32;label=10;break; } else { label=31;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0153=$34;label=10;break;
 case 10: 
 var $_0153;
 var $35=($_0153|0)==-1;
 if($35){label=11;break;}else{var $37=$19;label=12;break;}
 case 11: 
 HEAP32[(($13)>>2)]=0;
 var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 var $39=HEAP32[(($14)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0152=$52;label=16;break; } else { label=31;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0152=$54;label=16;break;
 case 16: 
 var $_0152;
 var $55=($_0152|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($14)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $127=0;var $126=1;label=41;break;}else{var $60=0;var $59=1;label=20;break;}
 case 19: 
 var $57=($39|0)==0;
 var $58=$38^$57;
 if($58){var $60=$39;var $59=$57;label=20;break;}else{var $__a_2=$__a_0;var $127=$39;var $126=$57;label=41;break;}
 case 20: 
 var $59;
 var $60;
 var $61=HEAP32[(($__a_end)>>2)];
 var $62=$61;
 var $63=$__a_0;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($0)];
 var $66=($65&255);
 var $67=$66&1;
 var $68=($67|0)==0;
 var $69=HEAP32[(($16)>>2)];
 var $70=$66>>>1;
 var $71=($68?$70:$69);
 var $72=($64|0)==($71|0);
 if($72){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($68){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=HEAP32[(($16)>>2)];
 var $80=$75;var $79=$75;label=24;break;
 case 23: 
 var $77=$66>>>1;
 var $78=$66>>>1;
 var $80=$78;var $79=$77;label=24;break;
 case 24: 
 var $79;
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$81,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $82=HEAP8[($0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $86=HEAP32[(($15)>>2)];
 var $87=$86&-2;
 var $phitmp157=((($87)-(1))|0);
 var $88=$phitmp157;label=27;break;
 case 27: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$88,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $89=HEAP8[($0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $93=HEAP32[(($_pre_phi163)>>2)];
 var $94=$93;label=30;break;
 case 30: 
 var $94;
 var $95=(($94+$79)|0);
 HEAP32[(($__a_end)>>2)]=$95;
 var $__a_1=$94;label=34;break;
 case 31: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $97=(($37+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($37+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=35;break;}else{label=36;break;}
 case 35: 
 var $103=$37;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$107;label=37;break; } else { label=31;break; }
 case 36: 
 var $109=HEAP32[(($98)>>2)];
 var $_0=$109;label=37;break;
 case 37: 
 var $_0;
 var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $112=($111|0)==0;
 if($112){label=38;break;}else{var $__a_2=$__a_1;var $127=$60;var $126=$59;label=41;break;}
 case 38: 
 var $114=HEAP32[(($97)>>2)];
 var $115=HEAP32[(($99)>>2)];
 var $116=($114|0)==($115|0);
 if($116){label=39;break;}else{label=40;break;}
 case 39: 
 var $118=$37;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+40)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$37;label=6;break; } else { label=31;break; }
 case 40: 
 var $124=(($114+4)|0);
 HEAP32[(($97)>>2)]=$124;
 var $__a_0=$__a_1;var $19=$37;label=6;break;
 case 41: 
 var $126;
 var $127;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=$130&1;
 var $132=($131|0)==0;
 if($132){label=43;break;}else{label=42;break;}
 case 42: 
 var $134=(($__grouping+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$130>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=48;break;}else{label=45;break;}
 case 45: 
 var $141=HEAP8[($__in_units)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=47;break;}else{label=48;break;}
 case 47: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=48;break;
 case 48: 
 var $153=HEAP32[(($__a_end)>>2)];
 var $154=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$153,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF32[(($__v)>>2)]=$154;
 var $156=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$156,$__err);
 if($38){var $173=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$168;label=53;break; } else { label=32;break; }
 case 52: 
 var $170=HEAP32[(($159)>>2)];
 var $_0155=$170;label=53;break;
 case 53: 
 var $_0155;
 var $171=($_0155|0)==-1;
 if($171){label=54;break;}else{var $173=$37;label=55;break;}
 case 54: 
 HEAP32[(($13)>>2)]=0;
 var $173=0;label=55;break;
 case 55: 
 var $173;
 var $174=($173|0)==0;
 if($126){label=61;break;}else{label=56;break;}
 case 56: 
 var $176=(($127+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($127+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=57;break;}else{label=58;break;}
 case 57: 
 var $182=$127;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$186;label=59;break; } else { label=32;break; }
 case 58: 
 var $188=HEAP32[(($177)>>2)];
 var $_0154=$188;label=59;break;
 case 59: 
 var $_0154;
 var $189=($_0154|0)==-1;
 if($189){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($14)>>2)]=0;
 label=61;break;
 case 61: 
 if($174){label=63;break;}else{label=64;break;}
 case 62: 
 var $191=($127|0)==0;
 var $tmp156=$174^$191;
 if($tmp156){label=64;break;}else{label=63;break;}
 case 63: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=64;break;
 case 64: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre161=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre161;var $_pre_phi163=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre162=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi163=$_pre162;label=5;break;
 case 5: 
 var $_pre_phi163;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP32[(($__decimal_point)>>2)];
 var $18=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0153=$32;label=10;break; } else { label=31;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0153=$34;label=10;break;
 case 10: 
 var $_0153;
 var $35=($_0153|0)==-1;
 if($35){label=11;break;}else{var $37=$19;label=12;break;}
 case 11: 
 HEAP32[(($13)>>2)]=0;
 var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 var $39=HEAP32[(($14)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0152=$52;label=16;break; } else { label=31;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0152=$54;label=16;break;
 case 16: 
 var $_0152;
 var $55=($_0152|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($14)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $127=0;var $126=1;label=41;break;}else{var $60=0;var $59=1;label=20;break;}
 case 19: 
 var $57=($39|0)==0;
 var $58=$38^$57;
 if($58){var $60=$39;var $59=$57;label=20;break;}else{var $__a_2=$__a_0;var $127=$39;var $126=$57;label=41;break;}
 case 20: 
 var $59;
 var $60;
 var $61=HEAP32[(($__a_end)>>2)];
 var $62=$61;
 var $63=$__a_0;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($0)];
 var $66=($65&255);
 var $67=$66&1;
 var $68=($67|0)==0;
 var $69=HEAP32[(($16)>>2)];
 var $70=$66>>>1;
 var $71=($68?$70:$69);
 var $72=($64|0)==($71|0);
 if($72){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($68){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=HEAP32[(($16)>>2)];
 var $80=$75;var $79=$75;label=24;break;
 case 23: 
 var $77=$66>>>1;
 var $78=$66>>>1;
 var $80=$78;var $79=$77;label=24;break;
 case 24: 
 var $79;
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$81,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $82=HEAP8[($0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $86=HEAP32[(($15)>>2)];
 var $87=$86&-2;
 var $phitmp157=((($87)-(1))|0);
 var $88=$phitmp157;label=27;break;
 case 27: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$88,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $89=HEAP8[($0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $93=HEAP32[(($_pre_phi163)>>2)];
 var $94=$93;label=30;break;
 case 30: 
 var $94;
 var $95=(($94+$79)|0);
 HEAP32[(($__a_end)>>2)]=$95;
 var $__a_1=$94;label=34;break;
 case 31: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $97=(($37+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($37+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=35;break;}else{label=36;break;}
 case 35: 
 var $103=$37;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$107;label=37;break; } else { label=31;break; }
 case 36: 
 var $109=HEAP32[(($98)>>2)];
 var $_0=$109;label=37;break;
 case 37: 
 var $_0;
 var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $112=($111|0)==0;
 if($112){label=38;break;}else{var $__a_2=$__a_1;var $127=$60;var $126=$59;label=41;break;}
 case 38: 
 var $114=HEAP32[(($97)>>2)];
 var $115=HEAP32[(($99)>>2)];
 var $116=($114|0)==($115|0);
 if($116){label=39;break;}else{label=40;break;}
 case 39: 
 var $118=$37;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+40)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$37;label=6;break; } else { label=31;break; }
 case 40: 
 var $124=(($114+4)|0);
 HEAP32[(($97)>>2)]=$124;
 var $__a_0=$__a_1;var $19=$37;label=6;break;
 case 41: 
 var $126;
 var $127;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=$130&1;
 var $132=($131|0)==0;
 if($132){label=43;break;}else{label=42;break;}
 case 42: 
 var $134=(($__grouping+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$130>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=48;break;}else{label=45;break;}
 case 45: 
 var $141=HEAP8[($__in_units)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=47;break;}else{label=48;break;}
 case 47: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=48;break;
 case 48: 
 var $153=HEAP32[(($__a_end)>>2)];
 var $154=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$153,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$154;
 var $156=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$156,$__err);
 if($38){var $173=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$168;label=53;break; } else { label=32;break; }
 case 52: 
 var $170=HEAP32[(($159)>>2)];
 var $_0155=$170;label=53;break;
 case 53: 
 var $_0155;
 var $171=($_0155|0)==-1;
 if($171){label=54;break;}else{var $173=$37;label=55;break;}
 case 54: 
 HEAP32[(($13)>>2)]=0;
 var $173=0;label=55;break;
 case 55: 
 var $173;
 var $174=($173|0)==0;
 if($126){label=61;break;}else{label=56;break;}
 case 56: 
 var $176=(($127+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($127+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=57;break;}else{label=58;break;}
 case 57: 
 var $182=$127;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$186;label=59;break; } else { label=32;break; }
 case 58: 
 var $188=HEAP32[(($177)>>2)];
 var $_0154=$188;label=59;break;
 case 59: 
 var $_0154;
 var $189=($_0154|0)==-1;
 if($189){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($14)>>2)]=0;
 label=61;break;
 case 61: 
 if($174){label=63;break;}else{label=64;break;}
 case 62: 
 var $191=($127|0)==0;
 var $tmp156=$174^$191;
 if($tmp156){label=64;break;}else{label=63;break;}
 case 63: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=64;break;
 case 64: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre161=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre161;var $_pre_phi163=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre162=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi163=$_pre162;label=5;break;
 case 5: 
 var $_pre_phi163;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP32[(($__decimal_point)>>2)];
 var $18=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0153=$32;label=10;break; } else { label=31;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0153=$34;label=10;break;
 case 10: 
 var $_0153;
 var $35=($_0153|0)==-1;
 if($35){label=11;break;}else{var $37=$19;label=12;break;}
 case 11: 
 HEAP32[(($13)>>2)]=0;
 var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 var $39=HEAP32[(($14)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0152=$52;label=16;break; } else { label=31;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0152=$54;label=16;break;
 case 16: 
 var $_0152;
 var $55=($_0152|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($14)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $127=0;var $126=1;label=41;break;}else{var $60=0;var $59=1;label=20;break;}
 case 19: 
 var $57=($39|0)==0;
 var $58=$38^$57;
 if($58){var $60=$39;var $59=$57;label=20;break;}else{var $__a_2=$__a_0;var $127=$39;var $126=$57;label=41;break;}
 case 20: 
 var $59;
 var $60;
 var $61=HEAP32[(($__a_end)>>2)];
 var $62=$61;
 var $63=$__a_0;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($0)];
 var $66=($65&255);
 var $67=$66&1;
 var $68=($67|0)==0;
 var $69=HEAP32[(($16)>>2)];
 var $70=$66>>>1;
 var $71=($68?$70:$69);
 var $72=($64|0)==($71|0);
 if($72){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($68){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=HEAP32[(($16)>>2)];
 var $80=$75;var $79=$75;label=24;break;
 case 23: 
 var $77=$66>>>1;
 var $78=$66>>>1;
 var $80=$78;var $79=$77;label=24;break;
 case 24: 
 var $79;
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$81,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $82=HEAP8[($0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $86=HEAP32[(($15)>>2)];
 var $87=$86&-2;
 var $phitmp157=((($87)-(1))|0);
 var $88=$phitmp157;label=27;break;
 case 27: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$88,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $89=HEAP8[($0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $93=HEAP32[(($_pre_phi163)>>2)];
 var $94=$93;label=30;break;
 case 30: 
 var $94;
 var $95=(($94+$79)|0);
 HEAP32[(($__a_end)>>2)]=$95;
 var $__a_1=$94;label=34;break;
 case 31: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $97=(($37+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($37+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=35;break;}else{label=36;break;}
 case 35: 
 var $103=$37;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$107;label=37;break; } else { label=31;break; }
 case 36: 
 var $109=HEAP32[(($98)>>2)];
 var $_0=$109;label=37;break;
 case 37: 
 var $_0;
 var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $112=($111|0)==0;
 if($112){label=38;break;}else{var $__a_2=$__a_1;var $127=$60;var $126=$59;label=41;break;}
 case 38: 
 var $114=HEAP32[(($97)>>2)];
 var $115=HEAP32[(($99)>>2)];
 var $116=($114|0)==($115|0);
 if($116){label=39;break;}else{label=40;break;}
 case 39: 
 var $118=$37;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+40)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$37;label=6;break; } else { label=31;break; }
 case 40: 
 var $124=(($114+4)|0);
 HEAP32[(($97)>>2)]=$124;
 var $__a_0=$__a_1;var $19=$37;label=6;break;
 case 41: 
 var $126;
 var $127;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=$130&1;
 var $132=($131|0)==0;
 if($132){label=43;break;}else{label=42;break;}
 case 42: 
 var $134=(($__grouping+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$130>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=48;break;}else{label=45;break;}
 case 45: 
 var $141=HEAP8[($__in_units)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=47;break;}else{label=48;break;}
 case 47: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=48;break;
 case 48: 
 var $153=HEAP32[(($__a_end)>>2)];
 var $154=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$153,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$154;
 var $156=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$156,$__err);
 if($38){var $173=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$168;label=53;break; } else { label=32;break; }
 case 52: 
 var $170=HEAP32[(($159)>>2)];
 var $_0155=$170;label=53;break;
 case 53: 
 var $_0155;
 var $171=($_0155|0)==-1;
 if($171){label=54;break;}else{var $173=$37;label=55;break;}
 case 54: 
 HEAP32[(($13)>>2)]=0;
 var $173=0;label=55;break;
 case 55: 
 var $173;
 var $174=($173|0)==0;
 if($126){label=61;break;}else{label=56;break;}
 case 56: 
 var $176=(($127+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($127+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=57;break;}else{label=58;break;}
 case 57: 
 var $182=$127;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$186;label=59;break; } else { label=32;break; }
 case 58: 
 var $188=HEAP32[(($177)>>2)];
 var $_0154=$188;label=59;break;
 case 59: 
 var $_0154;
 var $189=($_0154|0)==-1;
 if($189){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($14)>>2)]=0;
 label=61;break;
 case 61: 
 if($174){label=63;break;}else{label=64;break;}
 case 62: 
 var $191=($127|0)==0;
 var $tmp156=$174^$191;
 if($tmp156){label=64;break;}else{label=63;break;}
 case 63: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=64;break;
 case 64: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(120);
 var $__grouping170=$__grouping;
 var $0=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__grouping170)>>2)]=0; HEAP32[((($__grouping170)+(4))>>2)]=0; HEAP32[((($__grouping170)+(8))>>2)]=0;
 var $1=$__buf;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($0,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=39;break; }
 case 2: 
 var $3=(($0)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((16832)>>2)];
 var $7=($6|0)==-1;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$5,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=40;break; }
 case 4: 
 var $9=HEAP32[((16836)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=8;break;}
 case 6: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=40;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $25=$21;
 var $26=(($__atoms)|0);
 var $27=$21;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+48)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($25,13240,13266,$26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=40;break; }
 case 9: 
 var $32=HEAP32[(($3)>>2)];
 var $33=(($32)|0);
 var $34=__ZNSt3__114__shared_count16__release_sharedEv($33);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $35=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=42;break; }
 case 10: 
 var $36=HEAP8[($1)];
 var $37=$36&1;
 var $38=(($37<<24)>>24)==0;
 if($38){label=12;break;}else{label=11;break;}
 case 11: 
 var $40=(($__buf+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $_pre171=(($35+1)|0);
 var $44=$41;var $_pre_phi=$_pre171;var $_pre_phi173=$40;label=13;break;
 case 12: 
 var $43=(($35+1)|0);
 var $_pre172=(($__buf+8)|0);
 var $44=$43;var $_pre_phi=$43;var $_pre_phi173=$_pre172;label=13;break;
 case 13: 
 var $_pre_phi173;
 var $_pre_phi;
 var $44;
 HEAP32[(($__a_end)>>2)]=$44;
 var $45=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$45;
 HEAP32[(($__dc)>>2)]=0;
 var $46=(($__b)|0);
 var $47=(($__e)|0);
 var $48=(($__buf)|0);
 var $49=(($__buf+4)|0);
 var $_pre=HEAP32[(($46)>>2)];
 var $__a_0=$44;var $50=$_pre;label=14;break;
 case 14: 
 var $50;
 var $__a_0;
 var $51=($50|0)==0;
 if($51){var $68=0;label=20;break;}else{label=15;break;}
 case 15: 
 var $53=(($50+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($50+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($54|0)==($56|0);
 if($57){label=16;break;}else{label=17;break;}
 case 16: 
 var $59=$50;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+36)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0161=$63;label=18;break; } else { label=41;break; }
 case 17: 
 var $65=HEAP32[(($54)>>2)];
 var $_0161=$65;label=18;break;
 case 18: 
 var $_0161;
 var $66=($_0161|0)==-1;
 if($66){label=19;break;}else{var $68=$50;label=20;break;}
 case 19: 
 HEAP32[(($46)>>2)]=0;
 var $68=0;label=20;break;
 case 20: 
 var $68;
 var $69=($68|0)==0;
 var $70=HEAP32[(($47)>>2)];
 var $71=($70|0)==0;
 if($71){label=26;break;}else{label=21;break;}
 case 21: 
 var $73=(($70+12)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($70+16)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($74|0)==($76|0);
 if($77){label=22;break;}else{label=23;break;}
 case 22: 
 var $79=$70;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+36)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0160=$83;label=24;break; } else { label=41;break; }
 case 23: 
 var $85=HEAP32[(($74)>>2)];
 var $_0160=$85;label=24;break;
 case 24: 
 var $_0160;
 var $86=($_0160|0)==-1;
 if($86){label=25;break;}else{label=27;break;}
 case 25: 
 HEAP32[(($47)>>2)]=0;
 label=26;break;
 case 26: 
 if($69){var $__a_2=$__a_0;label=51;break;}else{label=28;break;}
 case 27: 
 var $88=($70|0)==0;
 var $89=$69^$88;
 if($89){label=28;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 28: 
 var $90=HEAP32[(($__a_end)>>2)];
 var $91=$90;
 var $92=$__a_0;
 var $93=((($91)-($92))|0);
 var $94=HEAP8[($1)];
 var $95=($94&255);
 var $96=$95&1;
 var $97=($96|0)==0;
 var $98=HEAP32[(($49)>>2)];
 var $99=$95>>>1;
 var $100=($97?$99:$98);
 var $101=($93|0)==($100|0);
 if($101){label=29;break;}else{var $__a_1=$__a_0;label=44;break;}
 case 29: 
 if($97){label=31;break;}else{label=30;break;}
 case 30: 
 var $104=HEAP32[(($49)>>2)];
 var $109=$104;var $108=$104;label=32;break;
 case 31: 
 var $106=$95>>>1;
 var $107=$95>>>1;
 var $109=$107;var $108=$106;label=32;break;
 case 32: 
 var $108;
 var $109;
 var $110=$109<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$110,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=41;break; }
 case 33: 
 var $111=HEAP8[($1)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){var $117=10;label=35;break;}else{label=34;break;}
 case 34: 
 var $115=HEAP32[(($48)>>2)];
 var $116=$115&-2;
 var $phitmp165=((($116)-(1))|0);
 var $117=$phitmp165;label=35;break;
 case 35: 
 var $117;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$117,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=41;break; }
 case 36: 
 var $118=HEAP8[($1)];
 var $119=$118&1;
 var $120=(($119<<24)>>24)==0;
 if($120){var $123=$_pre_phi;label=38;break;}else{label=37;break;}
 case 37: 
 var $122=HEAP32[(($_pre_phi173)>>2)];
 var $123=$122;label=38;break;
 case 38: 
 var $123;
 var $124=(($123+$108)|0);
 HEAP32[(($__a_end)>>2)]=$124;
 var $__a_1=$123;label=44;break;
 case 39: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=$126$1;
 var $_0158=$128;var $_0159=$127;label=75;break;
 case 40: 
 var $130$0 = ___cxa_find_matching_catch(-1, -1); var $130$1 = tempRet0;
 var $131=$130$0;
 var $132=$130$1;
 var $133=HEAP32[(($3)>>2)];
 var $134=(($133)|0);
 var $135=__ZNSt3__114__shared_count16__release_sharedEv($134);
 var $_0158=$132;var $_0159=$131;label=75;break;
 case 41: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=43;break;
 case 43: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $136=$eh_lpad_body$0;
 var $137=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $_0158=$137;var $_0159=$136;label=75;break;
 case 44: 
 var $__a_1;
 var $138=(($68+12)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($68+16)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($139|0)==($141|0);
 if($142){label=45;break;}else{label=46;break;}
 case 45: 
 var $144=$68;
 var $145=HEAP32[(($144)>>2)];
 var $146=(($145+36)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$147]($68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$148;label=47;break; } else { label=41;break; }
 case 46: 
 var $150=HEAP32[(($139)>>2)];
 var $_0=$150;label=47;break;
 case 47: 
 var $_0;
 var $152=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,16,$__a_1,$__a_end,$__dc,0,$__grouping,$45,$__g_end,$26);
 var $153=($152|0)==0;
 if($153){label=48;break;}else{var $__a_2=$__a_1;label=51;break;}
 case 48: 
 var $155=HEAP32[(($138)>>2)];
 var $156=HEAP32[(($140)>>2)];
 var $157=($155|0)==($156|0);
 if($157){label=49;break;}else{label=50;break;}
 case 49: 
 var $159=$68;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+40)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $50=$68;label=14;break; } else { label=41;break; }
 case 50: 
 var $165=(($155+4)|0);
 HEAP32[(($138)>>2)]=$165;
 var $__a_0=$__a_1;var $50=$68;label=14;break;
 case 51: 
 var $__a_2;
 var $167=(($__a_2+3)|0);
 HEAP8[($167)]=0;
 var $168=HEAP8[(17544)];
 var $169=(($168<<24)>>24)==0;
 if($169){label=52;break;}else{label=56;break;}
 case 52: 
 var $171=___cxa_guard_acquire(17544);
 var $172=($171|0)==0;
 if($172){label=56;break;}else{label=53;break;}
 case 53: 
 var $174=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=55;break; }
 case 54: 
 HEAP32[((15408)>>2)]=$174;
 label=56;break;
 case 55: 
 var $177$0 = ___cxa_find_matching_catch(-1, -1); var $177$1 = tempRet0;
 var $eh_lpad_body$1=$177$1;var $eh_lpad_body$0=$177$0;label=43;break;
 case 56: 
 var $179=HEAP32[((15408)>>2)];
 var $180=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$179,2824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=42;break; }
 case 57: 
 var $182=($180|0)==1;
 if($182){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 var $185=HEAP32[(($46)>>2)];
 var $186=($185|0)==0;
 if($186){var $203=0;label=65;break;}else{label=60;break;}
 case 60: 
 var $188=(($185+12)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($185+16)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=($189|0)==($191|0);
 if($192){label=61;break;}else{label=62;break;}
 case 61: 
 var $194=$185;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+36)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0163=$198;label=63;break; } else { label=42;break; }
 case 62: 
 var $200=HEAP32[(($189)>>2)];
 var $_0163=$200;label=63;break;
 case 63: 
 var $_0163;
 var $201=($_0163|0)==-1;
 if($201){label=64;break;}else{var $203=$185;label=65;break;}
 case 64: 
 HEAP32[(($46)>>2)]=0;
 var $203=0;label=65;break;
 case 65: 
 var $203;
 var $204=($203|0)==0;
 var $205=HEAP32[(($47)>>2)];
 var $206=($205|0)==0;
 if($206){label=71;break;}else{label=66;break;}
 case 66: 
 var $208=(($205+12)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($205+16)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=($209|0)==($211|0);
 if($212){label=67;break;}else{label=68;break;}
 case 67: 
 var $214=$205;
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215+36)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$217]($205) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0162=$218;label=69;break; } else { label=42;break; }
 case 68: 
 var $220=HEAP32[(($209)>>2)];
 var $_0162=$220;label=69;break;
 case 69: 
 var $_0162;
 var $221=($_0162|0)==-1;
 if($221){label=70;break;}else{label=72;break;}
 case 70: 
 HEAP32[(($47)>>2)]=0;
 label=71;break;
 case 71: 
 if($204){label=73;break;}else{label=74;break;}
 case 72: 
 var $223=($205|0)==0;
 var $tmp164=$204^$223;
 if($tmp164){label=74;break;}else{label=73;break;}
 case 73: 
 var $225=HEAP32[(($__err)>>2)];
 var $226=$225|2;
 HEAP32[(($__err)>>2)]=$226;
 label=74;break;
 case 74: 
 var $228=(($agg_result)|0);
 HEAP32[(($228)>>2)]=$203;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
 case 75: 
 var $_0159;
 var $_0158;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $230$0=$_0159;
 var $230$1=0;
 var $231$0=$230$0;
 var $231$1=$_0158;
 ___resumeException($231$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+96)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==($__ct|0);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+100)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($__ct|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17&1;
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($__grouping+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $25=$22;label=8;break;
 case 7: 
 var $24=$17>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=($__ct|0)==($__thousands_sep|0);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_049=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 11: 
 var $38=(($__atoms+104)|0);
 var $_0=$__atoms;label=12;break;
 case 12: 
 var $_0;
 var $40=($_0|0)==($38|0);
 if($40){var $_0_lcssa=$38;label=14;break;}else{label=13;break;}
 case 13: 
 var $42=HEAP32[(($_0)>>2)];
 var $43=($42|0)==($__ct|0);
 var $44=(($_0+4)|0);
 if($43){var $_0_lcssa=$_0;label=14;break;}else{var $_0=$44;label=12;break;}
 case 14: 
 var $_0_lcssa;
 var $45=$_0_lcssa;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=$47>>2;
 var $49=($47|0)>92;
 if($49){var $_049=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $52=($48|0)<($__base|0);
 if($52){label=22;break;}else{var $_049=-1;label=23;break;}
 case 17: 
 var $54=($47|0)<88;
 if($54){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_049=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $57=$1;
 var $58=$__a;
 var $59=((($57)-($58))|0);
 var $60=($59|0)<3;
 if($60){label=20;break;}else{var $_049=-1;label=23;break;}
 case 20: 
 var $62=((($1)-(1))|0);
 var $63=HEAP8[($62)];
 var $64=(($63<<24)>>24)==48;
 if($64){label=21;break;}else{var $_049=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $66=((13240+$48)|0);
 var $67=HEAP8[($66)];
 var $68=HEAP32[(($__a_end)>>2)];
 var $69=(($68+1)|0);
 HEAP32[(($__a_end)>>2)]=$69;
 HEAP8[($68)]=$67;
 var $_049=0;label=23;break;
 case 22: 
 var $71=((13240+$48)|0);
 var $72=HEAP8[($71)];
 var $73=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$73;
 HEAP8[($1)]=$72;
 var $74=HEAP32[(($__dc)>>2)];
 var $75=((($74)+(1))|0);
 HEAP32[(($__dc)>>2)]=$75;
 var $_049=0;label=23;break;
 case 23: 
 var $_049;
 return $_049;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i15=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((16840)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$3,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $7=HEAP32[((16844)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 (function() { try { __THREW__ = 0; return ___cxa_throw($21,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $23=$19;
 var $24=$19;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+32)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23,13240,13266,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$__p_i_i_i15;
 var $31=HEAP32[((16456)>>2)];
 var $32=($31|0)==-1;
 if($32){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i16=(($__p_i_i_i15)|0);
 HEAP32[(($_sroa_016_0__idx_i_i16)>>2)]=16456;
 var $_sroa_117_4__idx18_i_i17=(($__p_i_i_i15+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i17)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i18=(($__p_i_i_i15+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i18)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16456,$30,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $34=HEAP32[((16460)>>2)];
 var $35=((($34)-(1))|0);
 var $36=(($29+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($29+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$37;
 var $41=$39;
 var $42=((($40)-($41))|0);
 var $43=$42>>2;
 var $44=($43>>>0)>($35>>>0);
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=(($39+($35<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=___cxa_allocate_exception(4);
 var $49=$48;
 __ZNSt8bad_castC2Ev($49);
 (function() { try { __THREW__ = 0; return ___cxa_throw($48,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $50=$46;
 var $51=$46;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+16)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP8[($__thousands_sep)]=$55;
 var $56=$46;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+20)|0);
 var $59=HEAP32[(($58)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($agg_result,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $60=HEAP32[(($1)>>2)];
 var $61=(($60)|0);
 var $62=__ZNSt3__114__shared_count16__release_sharedEv($61);
 STACKTOP=sp;return;
 case 17: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65)|0);
 var $67=__ZNSt3__114__shared_count16__release_sharedEv($66);
 ___resumeException($64$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i18=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((16840)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$3,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $7=HEAP32[((16844)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 (function() { try { __THREW__ = 0; return ___cxa_throw($21,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $23=$19;
 var $24=$19;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+32)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23,13240,13272,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$__p_i_i_i18;
 var $31=HEAP32[((16456)>>2)];
 var $32=($31|0)==-1;
 if($32){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i19=(($__p_i_i_i18)|0);
 HEAP32[(($_sroa_016_0__idx_i_i19)>>2)]=16456;
 var $_sroa_117_4__idx18_i_i20=(($__p_i_i_i18+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i20)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i21=(($__p_i_i_i18+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i21)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16456,$30,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $34=HEAP32[((16460)>>2)];
 var $35=((($34)-(1))|0);
 var $36=(($29+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($29+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$37;
 var $41=$39;
 var $42=((($40)-($41))|0);
 var $43=$42>>2;
 var $44=($43>>>0)>($35>>>0);
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=(($39+($35<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=___cxa_allocate_exception(4);
 var $49=$48;
 __ZNSt8bad_castC2Ev($49);
 (function() { try { __THREW__ = 0; return ___cxa_throw($48,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $50=$46;
 var $51=$46;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP8[($__decimal_point)]=$55;
 var $56=HEAP32[(($51)>>2)];
 var $57=(($56+16)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP8[($__thousands_sep)]=$59;
 var $60=$46;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+20)|0);
 var $63=HEAP32[(($62)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($agg_result,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $64=HEAP32[(($1)>>2)];
 var $65=(($64)|0);
 var $66=__ZNSt3__114__shared_count16__release_sharedEv($65);
 STACKTOP=sp;return;
 case 18: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1); var $68$1 = tempRet0;
 var $69=HEAP32[(($1)>>2)];
 var $70=(($69)|0);
 var $71=__ZNSt3__114__shared_count16__release_sharedEv($70);
 ___resumeException($68$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__ct<<24)>>24)==(($__decimal_point<<24)>>24);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $_082=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $7=HEAP32[(($__a_end)>>2)];
 var $8=(($7+1)|0);
 HEAP32[(($__a_end)>>2)]=$8;
 HEAP8[($7)]=46;
 var $9=$__grouping;
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$11&1;
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($__grouping+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $19=$16;label=6;break;
 case 5: 
 var $18=$11>>>1;
 var $19=$18;label=6;break;
 case 6: 
 var $19;
 var $20=($19|0)==0;
 if($20){var $_082=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $22=HEAP32[(($__g_end)>>2)];
 var $23=$22;
 var $24=$__g;
 var $25=((($23)-($24))|0);
 var $26=($25|0)<160;
 if($26){label=8;break;}else{var $_082=0;label=36;break;}
 case 8: 
 var $28=HEAP32[(($__dc)>>2)];
 var $29=(($22+4)|0);
 HEAP32[(($__g_end)>>2)]=$29;
 HEAP32[(($22)>>2)]=$28;
 var $_082=0;label=36;break;
 case 9: 
 var $31=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 if($31){label=10;break;}else{label=17;break;}
 case 10: 
 var $33=$__grouping;
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$35&1;
 var $37=($36|0)==0;
 if($37){label=12;break;}else{label=11;break;}
 case 11: 
 var $39=(($__grouping+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $43=$40;label=13;break;
 case 12: 
 var $42=$35>>>1;
 var $43=$42;label=13;break;
 case 13: 
 var $43;
 var $44=($43|0)==0;
 if($44){label=17;break;}else{label=14;break;}
 case 14: 
 var $46=HEAP8[($__in_units)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $_082=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $50=HEAP32[(($__g_end)>>2)];
 var $51=$50;
 var $52=$__g;
 var $53=((($51)-($52))|0);
 var $54=($53|0)<160;
 if($54){label=16;break;}else{var $_082=0;label=36;break;}
 case 16: 
 var $56=HEAP32[(($__dc)>>2)];
 var $57=(($50+4)|0);
 HEAP32[(($__g_end)>>2)]=$57;
 HEAP32[(($50)>>2)]=$56;
 HEAP32[(($__dc)>>2)]=0;
 var $_082=0;label=36;break;
 case 17: 
 var $59=(($__atoms+32)|0);
 var $_0=$__atoms;label=18;break;
 case 18: 
 var $_0;
 var $61=($_0|0)==($59|0);
 if($61){var $_0_lcssa=$59;label=20;break;}else{label=19;break;}
 case 19: 
 var $63=HEAP8[($_0)];
 var $64=(($63<<24)>>24)==(($__ct<<24)>>24);
 var $65=(($_0+1)|0);
 if($64){var $_0_lcssa=$_0;label=20;break;}else{var $_0=$65;label=18;break;}
 case 20: 
 var $_0_lcssa;
 var $66=$_0_lcssa;
 var $67=$__atoms;
 var $68=((($66)-($67))|0);
 var $69=($68|0)>31;
 if($69){var $_082=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $71=((13240+$68)|0);
 var $72=HEAP8[($71)];
 if(($68|0)==25|($68|0)==24){ label=22;break;}else if(($68|0)==22|($68|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $74=HEAP32[(($__a_end)>>2)];
 var $75=($74|0)==($__a|0);
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=((($74)-(1))|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=$79&95;
 var $81=HEAP8[($__exp)];
 var $82=($81&255);
 var $83=$82&127;
 var $84=($80|0)==($83|0);
 if($84){label=24;break;}else{var $_082=-1;label=36;break;}
 case 24: 
 var $86=(($74+1)|0);
 HEAP32[(($__a_end)>>2)]=$86;
 HEAP8[($74)]=$72;
 var $_082=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 var $87=HEAP32[(($__a_end)>>2)];
 var $88=(($87+1)|0);
 HEAP32[(($__a_end)>>2)]=$88;
 HEAP8[($87)]=$72;
 var $_082=0;label=36;break;
 case 26: 
 var $90=($72&255);
 var $91=$90&95;
 var $92=HEAP8[($__exp)];
 var $93=(($92<<24)>>24);
 var $94=($91|0)==($93|0);
 if($94){label=27;break;}else{label=34;break;}
 case 27: 
 var $96=$92|-128;
 HEAP8[($__exp)]=$96;
 var $97=HEAP8[($__in_units)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $101=$__grouping;
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$103&1;
 var $105=($104|0)==0;
 if($105){label=30;break;}else{label=29;break;}
 case 29: 
 var $107=(($__grouping+4)|0);
 var $108=HEAP32[(($107)>>2)];
 var $111=$108;label=31;break;
 case 30: 
 var $110=$103>>>1;
 var $111=$110;label=31;break;
 case 31: 
 var $111;
 var $112=($111|0)==0;
 if($112){label=34;break;}else{label=32;break;}
 case 32: 
 var $114=HEAP32[(($__g_end)>>2)];
 var $115=$114;
 var $116=$__g;
 var $117=((($115)-($116))|0);
 var $118=($117|0)<160;
 if($118){label=33;break;}else{label=34;break;}
 case 33: 
 var $120=HEAP32[(($__dc)>>2)];
 var $121=(($114+4)|0);
 HEAP32[(($__g_end)>>2)]=$121;
 HEAP32[(($114)>>2)]=$120;
 label=34;break;
 case 34: 
 var $123=HEAP32[(($__a_end)>>2)];
 var $124=(($123+1)|0);
 HEAP32[(($__a_end)>>2)]=$124;
 HEAP8[($123)]=$72;
 var $125=($68|0)>21;
 if($125){var $_082=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $127=HEAP32[(($__dc)>>2)];
 var $128=((($127)+(1))|0);
 HEAP32[(($__dc)>>2)]=$128;
 var $_082=0;label=36;break;
 case 36: 
 var $_082;
 return $_082;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i15=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((16832)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$3,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $7=HEAP32[((16836)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 (function() { try { __THREW__ = 0; return ___cxa_throw($21,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $23=$19;
 var $24=$19;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+48)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23,13240,13266,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$__p_i_i_i15;
 var $31=HEAP32[((16448)>>2)];
 var $32=($31|0)==-1;
 if($32){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i16=(($__p_i_i_i15)|0);
 HEAP32[(($_sroa_016_0__idx_i_i16)>>2)]=16448;
 var $_sroa_117_4__idx18_i_i17=(($__p_i_i_i15+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i17)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i18=(($__p_i_i_i15+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i18)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16448,$30,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $34=HEAP32[((16452)>>2)];
 var $35=((($34)-(1))|0);
 var $36=(($29+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($29+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$37;
 var $41=$39;
 var $42=((($40)-($41))|0);
 var $43=$42>>2;
 var $44=($43>>>0)>($35>>>0);
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=(($39+($35<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=___cxa_allocate_exception(4);
 var $49=$48;
 __ZNSt8bad_castC2Ev($49);
 (function() { try { __THREW__ = 0; return ___cxa_throw($48,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $50=$46;
 var $51=$46;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+16)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP32[(($__thousands_sep)>>2)]=$55;
 var $56=$46;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+20)|0);
 var $59=HEAP32[(($58)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($agg_result,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $60=HEAP32[(($1)>>2)];
 var $61=(($60)|0);
 var $62=__ZNSt3__114__shared_count16__release_sharedEv($61);
 STACKTOP=sp;return;
 case 17: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65)|0);
 var $67=__ZNSt3__114__shared_count16__release_sharedEv($66);
 ___resumeException($64$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i18=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((16832)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$3,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $7=HEAP32[((16836)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 (function() { try { __THREW__ = 0; return ___cxa_throw($21,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $23=$19;
 var $24=$19;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+48)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23,13240,13272,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$__p_i_i_i18;
 var $31=HEAP32[((16448)>>2)];
 var $32=($31|0)==-1;
 if($32){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i19=(($__p_i_i_i18)|0);
 HEAP32[(($_sroa_016_0__idx_i_i19)>>2)]=16448;
 var $_sroa_117_4__idx18_i_i20=(($__p_i_i_i18+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i20)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i21=(($__p_i_i_i18+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i21)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16448,$30,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $34=HEAP32[((16452)>>2)];
 var $35=((($34)-(1))|0);
 var $36=(($29+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($29+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$37;
 var $41=$39;
 var $42=((($40)-($41))|0);
 var $43=$42>>2;
 var $44=($43>>>0)>($35>>>0);
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=(($39+($35<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=___cxa_allocate_exception(4);
 var $49=$48;
 __ZNSt8bad_castC2Ev($49);
 (function() { try { __THREW__ = 0; return ___cxa_throw($48,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $50=$46;
 var $51=$46;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP32[(($__decimal_point)>>2)]=$55;
 var $56=HEAP32[(($51)>>2)];
 var $57=(($56+16)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP32[(($__thousands_sep)>>2)]=$59;
 var $60=$46;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+20)|0);
 var $63=HEAP32[(($62)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($agg_result,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $64=HEAP32[(($1)>>2)];
 var $65=(($64)|0);
 var $66=__ZNSt3__114__shared_count16__release_sharedEv($65);
 STACKTOP=sp;return;
 case 18: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1); var $68$1 = tempRet0;
 var $69=HEAP32[(($1)>>2)];
 var $70=(($69)|0);
 var $71=__ZNSt3__114__shared_count16__release_sharedEv($70);
 ___resumeException($68$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__ct|0)==($__decimal_point|0);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $_082=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $7=HEAP32[(($__a_end)>>2)];
 var $8=(($7+1)|0);
 HEAP32[(($__a_end)>>2)]=$8;
 HEAP8[($7)]=46;
 var $9=$__grouping;
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$11&1;
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($__grouping+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $19=$16;label=6;break;
 case 5: 
 var $18=$11>>>1;
 var $19=$18;label=6;break;
 case 6: 
 var $19;
 var $20=($19|0)==0;
 if($20){var $_082=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $22=HEAP32[(($__g_end)>>2)];
 var $23=$22;
 var $24=$__g;
 var $25=((($23)-($24))|0);
 var $26=($25|0)<160;
 if($26){label=8;break;}else{var $_082=0;label=36;break;}
 case 8: 
 var $28=HEAP32[(($__dc)>>2)];
 var $29=(($22+4)|0);
 HEAP32[(($__g_end)>>2)]=$29;
 HEAP32[(($22)>>2)]=$28;
 var $_082=0;label=36;break;
 case 9: 
 var $31=($__ct|0)==($__thousands_sep|0);
 if($31){label=10;break;}else{label=17;break;}
 case 10: 
 var $33=$__grouping;
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$35&1;
 var $37=($36|0)==0;
 if($37){label=12;break;}else{label=11;break;}
 case 11: 
 var $39=(($__grouping+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $43=$40;label=13;break;
 case 12: 
 var $42=$35>>>1;
 var $43=$42;label=13;break;
 case 13: 
 var $43;
 var $44=($43|0)==0;
 if($44){label=17;break;}else{label=14;break;}
 case 14: 
 var $46=HEAP8[($__in_units)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $_082=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $50=HEAP32[(($__g_end)>>2)];
 var $51=$50;
 var $52=$__g;
 var $53=((($51)-($52))|0);
 var $54=($53|0)<160;
 if($54){label=16;break;}else{var $_082=0;label=36;break;}
 case 16: 
 var $56=HEAP32[(($__dc)>>2)];
 var $57=(($50+4)|0);
 HEAP32[(($__g_end)>>2)]=$57;
 HEAP32[(($50)>>2)]=$56;
 HEAP32[(($__dc)>>2)]=0;
 var $_082=0;label=36;break;
 case 17: 
 var $59=(($__atoms+128)|0);
 var $_0=$__atoms;label=18;break;
 case 18: 
 var $_0;
 var $61=($_0|0)==($59|0);
 if($61){var $_0_lcssa=$59;label=20;break;}else{label=19;break;}
 case 19: 
 var $63=HEAP32[(($_0)>>2)];
 var $64=($63|0)==($__ct|0);
 var $65=(($_0+4)|0);
 if($64){var $_0_lcssa=$_0;label=20;break;}else{var $_0=$65;label=18;break;}
 case 20: 
 var $_0_lcssa;
 var $66=$_0_lcssa;
 var $67=$__atoms;
 var $68=((($66)-($67))|0);
 var $69=$68>>2;
 var $70=($68|0)>124;
 if($70){var $_082=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $72=((13240+$69)|0);
 var $73=HEAP8[($72)];
 if(($69|0)==25|($69|0)==24){ label=22;break;}else if(($69|0)==22|($69|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $75=HEAP32[(($__a_end)>>2)];
 var $76=($75|0)==($__a|0);
 if($76){label=24;break;}else{label=23;break;}
 case 23: 
 var $78=((($75)-(1))|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=$80&95;
 var $82=HEAP8[($__exp)];
 var $83=($82&255);
 var $84=$83&127;
 var $85=($81|0)==($84|0);
 if($85){label=24;break;}else{var $_082=-1;label=36;break;}
 case 24: 
 var $87=(($75+1)|0);
 HEAP32[(($__a_end)>>2)]=$87;
 HEAP8[($75)]=$73;
 var $_082=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 label=34;break;
 case 26: 
 var $90=($73&255);
 var $91=$90&95;
 var $92=HEAP8[($__exp)];
 var $93=(($92<<24)>>24);
 var $94=($91|0)==($93|0);
 if($94){label=27;break;}else{label=34;break;}
 case 27: 
 var $96=$92|-128;
 HEAP8[($__exp)]=$96;
 var $97=HEAP8[($__in_units)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $101=$__grouping;
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$103&1;
 var $105=($104|0)==0;
 if($105){label=30;break;}else{label=29;break;}
 case 29: 
 var $107=(($__grouping+4)|0);
 var $108=HEAP32[(($107)>>2)];
 var $111=$108;label=31;break;
 case 30: 
 var $110=$103>>>1;
 var $111=$110;label=31;break;
 case 31: 
 var $111;
 var $112=($111|0)==0;
 if($112){label=34;break;}else{label=32;break;}
 case 32: 
 var $114=HEAP32[(($__g_end)>>2)];
 var $115=$114;
 var $116=$__g;
 var $117=((($115)-($116))|0);
 var $118=($117|0)<160;
 if($118){label=33;break;}else{label=34;break;}
 case 33: 
 var $120=HEAP32[(($__dc)>>2)];
 var $121=(($114+4)|0);
 HEAP32[(($__g_end)>>2)]=$121;
 HEAP32[(($114)>>2)]=$120;
 label=34;break;
 case 34: 
 var $123=HEAP32[(($__a_end)>>2)];
 var $124=(($123+1)|0);
 HEAP32[(($__a_end)>>2)]=$124;
 HEAP8[($123)]=$73;
 var $125=($68|0)>84;
 if($125){var $_082=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $127=HEAP32[(($__dc)>>2)];
 var $128=((($127)+(1))|0);
 HEAP32[(($__dc)>>2)]=$128;
 var $_082=0;label=36;break;
 case 36: 
 var $_082;
 return $_082;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $__nm=(sp)+(32);
 var $3=(($__iob+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__s)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($1)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=($__v&1);
 FUNCTION_TABLE[$11]($agg_result,$this,$1,$__iob,$__fl,$15);
 label=29;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $17=(($2)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$__p_i_i_i;
 var $20=HEAP32[((16456)>>2)];
 var $21=($20|0)==-1;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16456;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16456,$19,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=26;break; }
 case 5: 
 var $23=HEAP32[((16460)>>2)];
 var $24=((($23)-(1))|0);
 var $25=(($18+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($18+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$26;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=$31>>2;
 var $33=($32>>>0)>($24>>>0);
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=(($28+($24<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=7;break;}else{label=9;break;}
 case 7: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 __ZNSt8bad_castC2Ev($38);
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=26;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $39=$35;
 var $40=HEAP32[(($17)>>2)];
 var $41=(($40)|0);
 var $42=__ZNSt3__114__shared_count16__release_sharedEv($41);
 var $43=$35;
 var $44=HEAP32[(($43)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=(($44+24)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($__nm,$39);
 label=12;break;
 case 11: 
 var $49=(($44+28)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($__nm,$39);
 label=12;break;
 case 12: 
 var $52=$__nm;
 var $53=$__nm;
 var $54=HEAP8[($53)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=14;break;}else{label=13;break;}
 case 13: 
 var $58=(($__nm+8)|0);
 var $59=HEAP32[(($58)>>2)];
 var $_pre83=(($52+1)|0);
 var $__i_sroa_0_0_ph=$59;var $_pre_phi=$_pre83;var $_pre_phi85=$58;label=15;break;
 case 14: 
 var $61=(($52+1)|0);
 var $_pre84=(($__nm+8)|0);
 var $__i_sroa_0_0_ph=$61;var $_pre_phi=$61;var $_pre_phi85=$_pre84;label=15;break;
 case 15: 
 var $_pre_phi85;
 var $_pre_phi;
 var $__i_sroa_0_0_ph;
 var $62=(($__s)|0);
 var $63=(($__nm+4)|0);
 var $__i_sroa_0_0=$__i_sroa_0_0_ph;var $64=$54;label=16;break;
 case 16: 
 var $64;
 var $__i_sroa_0_0;
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){var $69=$_pre_phi;label=18;break;}else{label=17;break;}
 case 17: 
 var $68=HEAP32[(($_pre_phi85)>>2)];
 var $69=$68;label=18;break;
 case 18: 
 var $69;
 var $70=($64&255);
 var $71=$70&1;
 var $72=($71|0)==0;
 var $73=HEAP32[(($63)>>2)];
 var $74=$70>>>1;
 var $75=($72?$74:$73);
 var $76=(($69+$75)|0);
 var $77=($__i_sroa_0_0|0)==($76|0);
 if($77){label=28;break;}else{label=19;break;}
 case 19: 
 var $79=HEAP8[($__i_sroa_0_0)];
 var $80=HEAP32[(($62)>>2)];
 var $81=($80|0)==0;
 if($81){label=25;break;}else{label=20;break;}
 case 20: 
 var $83=(($80+24)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($80+28)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($84|0)==($86|0);
 if($87){label=21;break;}else{label=22;break;}
 case 21: 
 var $89=$80;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+52)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($79&255);
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($80,$93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=27;break; }
 case 22: 
 var $95=(($84+1)|0);
 HEAP32[(($83)>>2)]=$95;
 HEAP8[($84)]=$79;
 label=25;break;
 case 23: 
 var $96=($94|0)==-1;
 if($96){label=24;break;}else{label=25;break;}
 case 24: 
 HEAP32[(($62)>>2)]=0;
 label=25;break;
 case 25: 
 var $98=(($__i_sroa_0_0+1)|0);
 var $_pre=HEAP8[($53)];
 var $__i_sroa_0_0=$98;var $64=$_pre;label=16;break;
 case 26: 
 var $100$0 = ___cxa_find_matching_catch(-1, -1); var $100$1 = tempRet0;
 var $101=$100$0;
 var $102=$100$1;
 var $103=HEAP32[(($17)>>2)];
 var $104=(($103)|0);
 var $105=__ZNSt3__114__shared_count16__release_sharedEv($104);
 var $_078=$102;var $_079=$101;label=30;break;
 case 27: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;
 var $108=$107$0;
 var $109=$107$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 var $_078=$109;var $_079=$108;label=30;break;
 case 28: 
 var $111=HEAP32[(($62)>>2)];
 var $112=(($agg_result)|0);
 HEAP32[(($112)>>2)]=$111;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 label=29;break;
 case 29: 
 STACKTOP=sp;return;
 case 30: 
 var $_079;
 var $_078;
 var $115$0=$_079;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_078;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(sp)+(72);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(5280)];HEAP8[((($3)+(1))|0)]=HEAP8[(5281)];HEAP8[((($3)+(2))|0)]=HEAP8[(5282)];HEAP8[((($3)+(3))|0)]=HEAP8[(5283)];HEAP8[((($3)+(4))|0)]=HEAP8[(5284)];HEAP8[((($3)+(5))|0)]=HEAP8[(5285)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(17544)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(17544);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15408)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((15408)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsnprintf($__s,$__n,$__format,$1);
 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i158=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((16840)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$3,274);
 label=3;break;
 case 3: 
 var $7=HEAP32[((16844)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 ___cxa_throw($21,11472,(394));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i158;
 var $26=HEAP32[((16456)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i159=(($__p_i_i_i158)|0);
 HEAP32[(($_sroa_016_0__idx_i_i159)>>2)]=16456;
 var $_sroa_117_4__idx18_i_i160=(($__p_i_i_i158+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i160)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i161=(($__p_i_i_i158+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i161)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16456,$25,274);
 label=8;break;
 case 8: 
 var $29=HEAP32[((16460)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 __ZNSt8bad_castC2Ev($44);
 ___cxa_throw($43,11472,(394));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 var $50=$__grouping;
 var $51=$__grouping;
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=$53&1;
 var $55=($54|0)==0;
 if($55){label=13;break;}else{label=12;break;}
 case 12: 
 var $57=(($__grouping+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $61=$58;label=14;break;
 case 13: 
 var $60=$53>>>1;
 var $61=$60;label=14;break;
 case 14: 
 var $61;
 var $62=($61|0)==0;
 if($62){label=15;break;}else{label=20;break;}
 case 15: 
 var $64=$19;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+32)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($23,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $69=$__ne;
 var $70=$__nb;
 var $71=((($69)-($70))|0);
 var $72=(($__ob+$71)|0);
 HEAP32[(($__oe)>>2)]=$72;
 label=43;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $75=HEAP8[($__nb)];
 if((($75<<24)>>24)==45|(($75<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $77=$19;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+28)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]($23,$75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $82=(($__nb+1)|0);
 var $83=HEAP32[(($__oe)>>2)];
 var $84=(($83+1)|0);
 HEAP32[(($__oe)>>2)]=$84;
 HEAP8[($83)]=$81;
 var $__nf_0=$82;label=23;break;
 case 23: 
 var $__nf_0;
 var $86=$__ne;
 var $87=$__nf_0;
 var $88=((($86)-($87))|0);
 var $89=($88|0)>1;
 if($89){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $91=HEAP8[($__nf_0)];
 var $92=(($91<<24)>>24)==48;
 if($92){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $94=(($__nf_0+1)|0);
 var $95=HEAP8[($94)];
 if((($95<<24)>>24)==120|(($95<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $97=$19;
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+28)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $102=HEAP32[(($__oe)>>2)];
 var $103=(($102+1)|0);
 HEAP32[(($__oe)>>2)]=$103;
 HEAP8[($102)]=$101;
 var $104=HEAP8[($94)];
 var $105=HEAP32[(($97)>>2)];
 var $106=(($105+28)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($23,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $109=(($__nf_0+2)|0);
 var $110=HEAP32[(($__oe)>>2)];
 var $111=(($110+1)|0);
 HEAP32[(($__oe)>>2)]=$111;
 HEAP8[($110)]=$108;
 var $__nf_1=$109;label=29;break;
 case 29: 
 var $__nf_1;
 var $113=($__nf_1|0)==($__ne|0);
 if($113){label=32;break;}else{label=30;break;}
 case 30: 
 var $114=((($__ne)-(1))|0);
 var $115=($__nf_1>>>0)<($114>>>0);
 if($115){var $_0172=$__nf_1;var $116=$114;label=31;break;}else{label=32;break;}
 case 31: 
 var $116;
 var $_0172;
 var $117=HEAP8[($_0172)];
 var $118=HEAP8[($116)];
 HEAP8[($_0172)]=$118;
 HEAP8[($116)]=$117;
 var $119=(($_0172+1)|0);
 var $120=((($116)-(1))|0);
 var $121=($119>>>0)<($120>>>0);
 if($121){var $_0172=$119;var $116=$120;label=31;break;}else{label=32;break;}
 case 32: 
 var $122=$41;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$125]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $127=($__nf_1>>>0)<($__ne>>>0);
 if($127){label=34;break;}else{label=40;break;}
 case 34: 
 var $128=(($50+1)|0);
 var $129=$19;
 var $130=(($__grouping+4)|0);
 var $131=(($__grouping+8)|0);
 var $__dc_0167=0;var $__dg_0168=0;var $__p_0169=$__nf_1;label=35;break;
 case 35: 
 var $__p_0169;
 var $__dg_0168;
 var $__dc_0167;
 var $132=HEAP8[($51)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 var $135=HEAP32[(($131)>>2)];
 var $_=($134?$128:$135);
 var $136=(($_+$__dg_0168)|0);
 var $137=HEAP8[($136)];
 var $138=(($137<<24)>>24)==0;
 if($138){var $__dg_1=$__dg_0168;var $__dc_1=$__dc_0167;label=38;break;}else{label=36;break;}
 case 36: 
 var $139=HEAP32[(($131)>>2)];
 var $_174=($134?$128:$139);
 var $140=(($_174+$__dg_0168)|0);
 var $141=HEAP8[($140)];
 var $142=(($141<<24)>>24);
 var $143=($__dc_0167|0)==($142|0);
 if($143){label=37;break;}else{var $__dg_1=$__dg_0168;var $__dc_1=$__dc_0167;label=38;break;}
 case 37: 
 var $144=HEAP32[(($__oe)>>2)];
 var $145=(($144+1)|0);
 HEAP32[(($__oe)>>2)]=$145;
 HEAP8[($144)]=$126;
 var $146=HEAP8[($51)];
 var $147=($146&255);
 var $148=$147&1;
 var $149=($148|0)==0;
 var $150=HEAP32[(($130)>>2)];
 var $151=$147>>>1;
 var $152=($149?$151:$150);
 var $153=((($152)-(1))|0);
 var $154=($__dg_0168>>>0)<($153>>>0);
 var $155=($154&1);
 var $___dg_0=((($155)+($__dg_0168))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=38;break;
 case 38: 
 var $__dc_1;
 var $__dg_1;
 var $157=HEAP8[($__p_0169)];
 var $158=HEAP32[(($129)>>2)];
 var $159=(($158+28)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$160]($23,$157) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=17;break; }
 case 39: 
 var $162=HEAP32[(($__oe)>>2)];
 var $163=(($162+1)|0);
 HEAP32[(($__oe)>>2)]=$163;
 HEAP8[($162)]=$161;
 var $164=((($__dc_1)+(1))|0);
 var $165=(($__p_0169+1)|0);
 var $166=($165>>>0)<($__ne>>>0);
 if($166){var $__dc_0167=$164;var $__dg_0168=$__dg_1;var $__p_0169=$165;label=35;break;}else{label=40;break;}
 case 40: 
 var $167=$__nf_1;
 var $168=$__nb;
 var $169=((($167)-($168))|0);
 var $170=(($__ob+$169)|0);
 var $171=HEAP32[(($__oe)>>2)];
 var $172=($170|0)==($171|0);
 if($172){label=43;break;}else{label=41;break;}
 case 41: 
 var $173=((($171)-(1))|0);
 var $174=($170>>>0)<($173>>>0);
 if($174){var $_0156166=$170;var $175=$173;label=42;break;}else{label=43;break;}
 case 42: 
 var $175;
 var $_0156166;
 var $176=HEAP8[($_0156166)];
 var $177=HEAP8[($175)];
 HEAP8[($_0156166)]=$177;
 HEAP8[($175)]=$176;
 var $178=(($_0156166+1)|0);
 var $179=((($175)-(1))|0);
 var $180=($178>>>0)<($179>>>0);
 if($180){var $_0156166=$178;var $175=$179;label=42;break;}else{label=43;break;}
 case 43: 
 var $181=($__np|0)==($__ne|0);
 if($181){label=44;break;}else{label=45;break;}
 case 44: 
 var $183=HEAP32[(($__oe)>>2)];
 var $storemerge=$183;label=46;break;
 case 45: 
 var $185=$__np;
 var $186=$__nb;
 var $187=((($185)-($186))|0);
 var $188=(($__ob+$187)|0);
 var $storemerge=$188;label=46;break;
 case 46: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $2=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $16=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(17544)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(17544);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15408)>>2)]=$32;
 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((15408)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,22,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i11=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i11=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i11=$52;label=23;break;
 case 22: 
 var $_0_i11=$25;label=23;break;
 case 23: 
 var $_0_i11;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25,$_0_i11,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(sp)+(72);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(5280)];HEAP8[((($3)+(1))|0)]=HEAP8[(5281)];HEAP8[((($3)+(2))|0)]=HEAP8[(5282)];HEAP8[((($3)+(3))|0)]=HEAP8[(5283)];HEAP8[((($3)+(4))|0)]=HEAP8[(5284)];HEAP8[((($3)+(5))|0)]=HEAP8[(5285)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(17544)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(17544);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15408)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((15408)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $2=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $16=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(17544)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(17544);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15408)>>2)]=$32;
 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((15408)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,23,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i11=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i11=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i11=$52;label=23;break;
 case 22: 
 var $_0_i11=$25;label=23;break;
 case 23: 
 var $_0_i11;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25,$_0_i11,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($22)]=70;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 9: 
 HEAP8[($22)]=102;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($22)]=69;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 12: 
 HEAP8[($22)]=101;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 13: 
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($22)]=71;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 18: 
 HEAP8[($22)]=103;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i144;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(17544)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(17544);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((15408)>>2)]=$50;
 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((15408)>>2)];
 if($specify_precision_0_off0_ph_i144){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre151=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $102=$_pre151;label=47;break;
 case 29: 
 var $64=HEAP8[(17544)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i144){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(17544);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((15408)>>2)]=$71;
 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((15408)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1121149=$83;var $_1150=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(17544);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((15408)>>2)]=$89;
 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((15408)>>2)];
 var $95=(($__iob+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$97;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $99=HEAP32[(($__nb)>>2)];
 var $100=($99|0)==0;
 if($100){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$99;var $102=$99;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $102=$_pre;label=47;break;
 case 47: 
 var $102;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $103=(($102+$__nc_2)|0);
 var $104=HEAP32[(($6)>>2)];
 var $105=$104&176;
 if(($105|0)==16){ label=48;break;}else if(($105|0)==32){ var $_0_i143=$103;label=54;break;}else{label=53;break;}
 case 48: 
 var $107=HEAP8[($102)];
 if((($107<<24)>>24)==45|(($107<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $109=(($102+1)|0);
 var $_0_i143=$109;label=54;break;
 case 50: 
 var $111=($__nc_2|0)>1;
 var $112=(($107<<24)>>24)==48;
 var $or_cond_i=$111&$112;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $114=(($102+1)|0);
 var $115=HEAP8[($114)];
 if((($115<<24)>>24)==120|(($115<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $117=(($102+2)|0);
 var $_0_i143=$117;label=54;break;
 case 53: 
 var $_0_i143=$102;label=54;break;
 case 54: 
 var $_0_i143;
 var $119=(($__o)|0);
 var $120=($102|0)==($43|0);
 if($120){var $__ob_0=$119;var $__obh_sroa_0_1=0;var $130=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $122=$__nc_2<<1;
 var $123=_malloc($122);
 var $124=($123|0)==0;
 if($124){label=56;break;}else{var $__ob_0=$123;var $__obh_sroa_0_1=$123;var $130=$102;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre152=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $__obh_sroa_0_1=0;var $130=$_pre152;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $_0=$128;var $_0120=$129;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $130;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($130,$_0_i143,$103,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $133=(($1)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($134)|0);
 var $136=__ZNSt3__114__shared_count16__release_sharedEv($135);
 var $137=(($__s)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($3)|0);
 HEAP32[(($139)>>2)]=$138;
 var $140=HEAP32[(($__op)>>2)];
 var $141=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$140,$141,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $143=(($2)|0);
 var $144=HEAP32[(($143)>>2)];
 HEAP32[(($137)>>2)]=$144;
 var $145=(($agg_result)|0);
 HEAP32[(($145)>>2)]=$144;
 var $146=($__obh_sroa_0_1|0)==0;
 if($146){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__obh_sroa_0_1);
 label=64;break;
 case 64: 
 var $148=($__nbh_sroa_0_1|0)==0;
 if($148){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $151$0 = ___cxa_find_matching_catch(-1, -1); var $151$1 = tempRet0;
 var $152=$151$0;
 var $153=$151$1;
 var $154=(($1)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155)|0);
 var $157=__ZNSt3__114__shared_count16__release_sharedEv($156);
 var $_0=$152;var $_0120=$153;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_0120;
 var $_0;
 var $159=($__obh_sroa_0_2|0)==0;
 if($159){label=70;break;}else{label=69;break;}
 case 69: 
 _free($__obh_sroa_0_2);
 label=70;break;
 case 70: 
 var $161=($__nbh_sroa_0_1|0)==0;
 if($161){var $_1121149=$_0120;var $_1150=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_1121149=$_0120;var $_1150=$_0;label=72;break;
 case 72: 
 var $_1150;
 var $_1121149;
 var $163$0=$_1150;
 var $163$1=0;
 var $164$0=$163$0;
 var $164$1=$_1121149;
 ___resumeException($164$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=(function() { try { __THREW__ = 0; return _vasprintf($__s,$__format,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $6=($3|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 STACKTOP=sp;return $4;
 case 6: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=($3|0)==0;
 if($13){label=9;break;}else{label=7;break;}
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,0); var $17$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 ___resumeException($12$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i191=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((16840)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$3,274);
 label=3;break;
 case 3: 
 var $7=HEAP32[((16844)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 ___cxa_throw($21,11472,(394));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i191;
 var $26=HEAP32[((16456)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i192=(($__p_i_i_i191)|0);
 HEAP32[(($_sroa_016_0__idx_i_i192)>>2)]=16456;
 var $_sroa_117_4__idx18_i_i193=(($__p_i_i_i191+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i193)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i194=(($__p_i_i_i191+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i194)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16456,$25,274);
 label=8;break;
 case 8: 
 var $29=HEAP32[((16460)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 __ZNSt8bad_castC2Ev($44);
 ___cxa_throw($43,11472,(394));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $50=HEAP8[($__nb)];
 if((($50<<24)>>24)==45|(($50<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $52=$19;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($23,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $57=(($__nb+1)|0);
 var $58=HEAP32[(($__oe)>>2)];
 var $59=(($58+1)|0);
 HEAP32[(($__oe)>>2)]=$59;
 HEAP8[($58)]=$56;
 var $__nf_0=$57;label=20;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit208$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit208$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit208$1;var $eh_lpad_body$0=$lpad_loopexit208$0;label=19;break;
 case 16: 
 var $lpad_loopexit220$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit220$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit220$1;var $eh_lpad_body$0=$lpad_loopexit220$0;label=19;break;
 case 17: 
 var $lpad_loopexit225$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit225$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit225$1;var $eh_lpad_body$0=$lpad_loopexit225$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit226$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit226$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit226$1;var $eh_lpad_body$0=$lpad_nonloopexit226$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $61=$__ne;
 var $62=$__nf_0;
 var $63=((($61)-($62))|0);
 var $64=($63|0)>1;
 if($64){label=21;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 21: 
 var $66=HEAP8[($__nf_0)];
 var $67=(($66<<24)>>24)==48;
 if($67){label=22;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 22: 
 var $69=(($__nf_0+1)|0);
 var $70=HEAP8[($69)];
 if((($70<<24)>>24)==120|(($70<<24)>>24)==88){ label=23;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 23: 
 var $72=$19;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=18;break; }
 case 24: 
 var $77=HEAP32[(($__oe)>>2)];
 var $78=(($77+1)|0);
 HEAP32[(($__oe)>>2)]=$78;
 HEAP8[($77)]=$76;
 var $79=(($__nf_0+2)|0);
 var $80=HEAP8[($69)];
 var $81=HEAP32[(($72)>>2)];
 var $82=(($81+28)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]($23,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $85=HEAP32[(($__oe)>>2)];
 var $86=(($85+1)|0);
 HEAP32[(($__oe)>>2)]=$86;
 HEAP8[($85)]=$84;
 var $__ns_0=$79;label=26;break;
 case 26: 
 var $__ns_0;
 var $88=($__ns_0>>>0)<($__ne>>>0);
 if($88){label=27;break;}else{var $__ns_2=$__ns_0;var $__nf_1=$79;label=42;break;}
 case 27: 
 var $90=HEAP8[($__ns_0)];
 var $91=HEAP8[(17544)];
 var $92=(($91<<24)>>24)==0;
 if($92){label=28;break;}else{label=32;break;}
 case 28: 
 var $94=___cxa_guard_acquire(17544);
 var $95=($94|0)==0;
 if($95){label=32;break;}else{label=29;break;}
 case 29: 
 var $97=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=31;break; }
 case 30: 
 HEAP32[((15408)>>2)]=$97;
 label=32;break;
 case 31: 
 var $100$0 = ___cxa_find_matching_catch(-1, -1); var $100$1 = tempRet0;
 var $eh_lpad_body$1=$100$1;var $eh_lpad_body$0=$100$0;label=19;break;
 case 32: 
 var $102=HEAP32[((15408)>>2)];
 var $103=(($90<<24)>>24);
 var $104=(function() { try { __THREW__ = 0; return _isxdigit($103,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=17;break; }
 case 33: 
 var $106=($104|0)==0;
 var $107=(($__ns_0+1)|0);
 if($106){var $__ns_2=$__ns_0;var $__nf_1=$79;label=42;break;}else{var $__ns_0=$107;label=26;break;}
 case 34: 
 var $__ns_1;
 var $108=($__ns_1>>>0)<($__ne>>>0);
 if($108){label=35;break;}else{var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}
 case 35: 
 var $110=HEAP8[($__ns_1)];
 var $111=HEAP8[(17544)];
 var $112=(($111<<24)>>24)==0;
 if($112){label=36;break;}else{label=40;break;}
 case 36: 
 var $114=___cxa_guard_acquire(17544);
 var $115=($114|0)==0;
 if($115){label=40;break;}else{label=37;break;}
 case 37: 
 var $117=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=39;break; }
 case 38: 
 HEAP32[((15408)>>2)]=$117;
 label=40;break;
 case 39: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1); var $120$1 = tempRet0;
 var $eh_lpad_body$1=$120$1;var $eh_lpad_body$0=$120$0;label=19;break;
 case 40: 
 var $122=HEAP32[((15408)>>2)];
 var $123=(($110<<24)>>24);
 var $124=(function() { try { __THREW__ = 0; return _isdigit($123,$122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=16;break; }
 case 41: 
 var $126=($124|0)==0;
 var $127=(($__ns_1+1)|0);
 if($126){var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}else{var $__ns_1=$127;label=34;break;}
 case 42: 
 var $__nf_1;
 var $__ns_2;
 var $128=$__grouping;
 var $129=$__grouping;
 var $130=HEAP8[($129)];
 var $131=($130&255);
 var $132=$131&1;
 var $133=($132|0)==0;
 if($133){label=44;break;}else{label=43;break;}
 case 43: 
 var $135=(($__grouping+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $139=$136;label=45;break;
 case 44: 
 var $138=$131>>>1;
 var $139=$138;label=45;break;
 case 45: 
 var $139;
 var $140=($139|0)==0;
 if($140){label=46;break;}else{label=50;break;}
 case 46: 
 var $142=HEAP32[(($__oe)>>2)];
 var $143=$19;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+32)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($23,$__nf_1,$__ns_2,$142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=18;break; }
 case 47: 
 var $148=$__ns_2;
 var $149=$__nf_1;
 var $150=((($148)-($149))|0);
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+$150)|0);
 HEAP32[(($__oe)>>2)]=$152;
 label=48;break;
 case 48: 
 var $153=($__ns_2>>>0)<($__ne>>>0);
 if($153){label=49;break;}else{var $__nf_3=$__ns_2;label=69;break;}
 case 49: 
 var $154=$19;
 var $__nf_2205=$__ns_2;label=64;break;
 case 50: 
 var $156=($__nf_1|0)==($__ns_2|0);
 if($156){label=53;break;}else{label=51;break;}
 case 51: 
 var $157=((($__ns_2)-(1))|0);
 var $158=($__nf_1>>>0)<($157>>>0);
 if($158){var $_0189216=$__nf_1;var $159=$157;label=52;break;}else{label=53;break;}
 case 52: 
 var $159;
 var $_0189216;
 var $160=HEAP8[($_0189216)];
 var $161=HEAP8[($159)];
 HEAP8[($_0189216)]=$161;
 HEAP8[($159)]=$160;
 var $162=(($_0189216+1)|0);
 var $163=((($159)-(1))|0);
 var $164=($162>>>0)<($163>>>0);
 if($164){var $_0189216=$162;var $159=$163;label=52;break;}else{label=53;break;}
 case 53: 
 var $165=$41;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$168]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=18;break; }
 case 54: 
 var $170=($__nf_1>>>0)<($__ns_2>>>0);
 if($170){label=55;break;}else{label=61;break;}
 case 55: 
 var $171=(($128+1)|0);
 var $172=(($__grouping+4)|0);
 var $173=(($__grouping+8)|0);
 var $174=$19;
 var $__dc_0211=0;var $__dg_0212=0;var $__p_0213=$__nf_1;label=56;break;
 case 56: 
 var $__p_0213;
 var $__dg_0212;
 var $__dc_0211;
 var $175=HEAP8[($129)];
 var $176=$175&1;
 var $177=(($176<<24)>>24)==0;
 var $178=HEAP32[(($173)>>2)];
 var $_=($177?$171:$178);
 var $179=(($_+$__dg_0212)|0);
 var $180=HEAP8[($179)];
 var $181=(($180<<24)>>24)>0;
 if($181){label=57;break;}else{var $__dg_1=$__dg_0212;var $__dc_1=$__dc_0211;label=59;break;}
 case 57: 
 var $182=HEAP32[(($173)>>2)];
 var $_236=($177?$171:$182);
 var $183=(($_236+$__dg_0212)|0);
 var $184=HEAP8[($183)];
 var $185=(($184<<24)>>24);
 var $186=($__dc_0211|0)==($185|0);
 if($186){label=58;break;}else{var $__dg_1=$__dg_0212;var $__dc_1=$__dc_0211;label=59;break;}
 case 58: 
 var $187=HEAP32[(($__oe)>>2)];
 var $188=(($187+1)|0);
 HEAP32[(($__oe)>>2)]=$188;
 HEAP8[($187)]=$169;
 var $189=HEAP8[($129)];
 var $190=($189&255);
 var $191=$190&1;
 var $192=($191|0)==0;
 var $193=HEAP32[(($172)>>2)];
 var $194=$190>>>1;
 var $195=($192?$194:$193);
 var $196=((($195)-(1))|0);
 var $197=($__dg_0212>>>0)<($196>>>0);
 var $198=($197&1);
 var $___dg_0=((($198)+($__dg_0212))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=59;break;
 case 59: 
 var $__dc_1;
 var $__dg_1;
 var $200=HEAP8[($__p_0213)];
 var $201=HEAP32[(($174)>>2)];
 var $202=(($201+28)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($23,$200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=15;break; }
 case 60: 
 var $205=HEAP32[(($__oe)>>2)];
 var $206=(($205+1)|0);
 HEAP32[(($__oe)>>2)]=$206;
 HEAP8[($205)]=$204;
 var $207=((($__dc_1)+(1))|0);
 var $208=(($__p_0213+1)|0);
 var $209=($208>>>0)<($__ns_2>>>0);
 if($209){var $__dc_0211=$207;var $__dg_0212=$__dg_1;var $__p_0213=$208;label=56;break;}else{label=61;break;}
 case 61: 
 var $210=$__nf_1;
 var $211=$__nb;
 var $212=((($210)-($211))|0);
 var $213=(($__ob+$212)|0);
 var $214=HEAP32[(($__oe)>>2)];
 var $215=($213|0)==($214|0);
 if($215){label=48;break;}else{label=62;break;}
 case 62: 
 var $216=((($214)-(1))|0);
 var $217=($213>>>0)<($216>>>0);
 if($217){var $_0206=$213;var $218=$216;label=63;break;}else{label=48;break;}
 case 63: 
 var $218;
 var $_0206;
 var $219=HEAP8[($_0206)];
 var $220=HEAP8[($218)];
 HEAP8[($_0206)]=$220;
 HEAP8[($218)]=$219;
 var $221=(($_0206+1)|0);
 var $222=((($218)-(1))|0);
 var $223=($221>>>0)<($222>>>0);
 if($223){var $_0206=$221;var $218=$222;label=63;break;}else{label=48;break;}
 case 64: 
 var $__nf_2205;
 var $225=HEAP8[($__nf_2205)];
 var $226=(($225<<24)>>24)==46;
 if($226){label=65;break;}else{label=67;break;}
 case 65: 
 var $228=$41;
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$231]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=18;break; }
 case 66: 
 var $233=HEAP32[(($__oe)>>2)];
 var $234=(($233+1)|0);
 HEAP32[(($__oe)>>2)]=$234;
 HEAP8[($233)]=$232;
 var $235=(($__nf_2205+1)|0);
 var $__nf_3=$235;label=69;break;
 case 67: 
 var $237=HEAP32[(($154)>>2)];
 var $238=(($237+28)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$239]($23,$225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=14;break; }
 case 68: 
 var $241=HEAP32[(($__oe)>>2)];
 var $242=(($241+1)|0);
 HEAP32[(($__oe)>>2)]=$242;
 HEAP8[($241)]=$240;
 var $243=(($__nf_2205+1)|0);
 var $244=($243>>>0)<($__ne>>>0);
 if($244){var $__nf_2205=$243;label=64;break;}else{var $__nf_3=$243;label=69;break;}
 case 69: 
 var $__nf_3;
 var $245=HEAP32[(($__oe)>>2)];
 var $246=$19;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+32)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$249]($23,$__nf_3,$__ne,$245) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=18;break; }
 case 70: 
 var $251=$__nf_3;
 var $252=((($61)-($251))|0);
 var $253=HEAP32[(($__oe)>>2)];
 var $254=(($253+$252)|0);
 HEAP32[(($__oe)>>2)]=$254;
 var $255=($__np|0)==($__ne|0);
 if($255){var $storemerge=$254;label=72;break;}else{label=71;break;}
 case 71: 
 var $257=$__np;
 var $258=$__nb;
 var $259=((($257)-($258))|0);
 var $260=(($__ob+$259)|0);
 var $storemerge=$260;label=72;break;
 case 72: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 HEAP8[($22)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep146=(($_1_i+1)|0);
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep146)]=65;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 15: 
 HEAP8[($scevgep146)]=97;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i147;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(17544)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(17544);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((15408)>>2)]=$50;
 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((15408)>>2)];
 if($specify_precision_0_off0_ph_i147){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre144=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $100=$_pre144;label=47;break;
 case 29: 
 var $64=HEAP8[(17544)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i147){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(17544);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((15408)>>2)]=$71;
 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((15408)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1119142=$83;var $_1143=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(17544);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((15408)>>2)]=$89;
 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((15408)>>2)];
 var $95=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$95;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $97=HEAP32[(($__nb)>>2)];
 var $98=($97|0)==0;
 if($98){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$97;var $100=$97;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $100=$_pre;label=47;break;
 case 47: 
 var $100;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $101=(($100+$__nc_2)|0);
 var $102=HEAP32[(($6)>>2)];
 var $103=$102&176;
 if(($103|0)==16){ label=48;break;}else if(($103|0)==32){ var $_0_i141=$101;label=54;break;}else{label=53;break;}
 case 48: 
 var $105=HEAP8[($100)];
 if((($105<<24)>>24)==45|(($105<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $107=(($100+1)|0);
 var $_0_i141=$107;label=54;break;
 case 50: 
 var $109=($__nc_2|0)>1;
 var $110=(($105<<24)>>24)==48;
 var $or_cond_i=$109&$110;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $112=(($100+1)|0);
 var $113=HEAP8[($112)];
 if((($113<<24)>>24)==120|(($113<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $115=(($100+2)|0);
 var $_0_i141=$115;label=54;break;
 case 53: 
 var $_0_i141=$100;label=54;break;
 case 54: 
 var $_0_i141;
 var $117=(($__o)|0);
 var $118=($100|0)==($43|0);
 if($118){var $__ob_0=$117;var $__obh_sroa_0_1=0;var $128=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $120=$__nc_2<<1;
 var $121=_malloc($120);
 var $122=($121|0)==0;
 if($122){label=56;break;}else{var $__ob_0=$121;var $__obh_sroa_0_1=$121;var $128=$100;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre145=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $__obh_sroa_0_1=0;var $128=$_pre145;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $_0=$126;var $_0118=$127;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $128;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($128,$_0_i141,$101,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $131=(($1)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132)|0);
 var $134=__ZNSt3__114__shared_count16__release_sharedEv($133);
 var $135=(($__s)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($3)|0);
 HEAP32[(($137)>>2)]=$136;
 var $138=HEAP32[(($__op)>>2)];
 var $139=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$138,$139,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $141=(($2)|0);
 var $142=HEAP32[(($141)>>2)];
 HEAP32[(($135)>>2)]=$142;
 var $143=(($agg_result)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=($__obh_sroa_0_1|0)==0;
 if($144){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__obh_sroa_0_1);
 label=64;break;
 case 64: 
 var $146=($__nbh_sroa_0_1|0)==0;
 if($146){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $149$0 = ___cxa_find_matching_catch(-1, -1); var $149$1 = tempRet0;
 var $150=$149$0;
 var $151=$149$1;
 var $152=(($1)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153)|0);
 var $155=__ZNSt3__114__shared_count16__release_sharedEv($154);
 var $_0=$150;var $_0118=$151;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_0118;
 var $_0;
 var $157=($__obh_sroa_0_2|0)==0;
 if($157){label=70;break;}else{label=69;break;}
 case 69: 
 _free($__obh_sroa_0_2);
 label=70;break;
 case 70: 
 var $159=($__nbh_sroa_0_1|0)==0;
 if($159){var $_1119142=$_0118;var $_1143=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_1119142=$_0118;var $_1143=$_0;label=72;break;
 case 72: 
 var $_1143;
 var $_1119142;
 var $161$0=$_1143;
 var $161$1=0;
 var $162$0=$161$0;
 var $162$1=$_1119142;
 ___resumeException($162$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(sp)+(88);
 var $2=(sp)+(96);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(5288)];HEAP8[((($3)+(1))|0)]=HEAP8[(5289)];HEAP8[((($3)+(2))|0)]=HEAP8[(5290)];HEAP8[((($3)+(3))|0)]=HEAP8[(5291)];HEAP8[((($3)+(4))|0)]=HEAP8[(5292)];HEAP8[((($3)+(5))|0)]=HEAP8[(5293)];
 var $4=(($__nar)|0);
 var $5=HEAP8[(17544)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=___cxa_guard_acquire(17544);
 var $9=($8|0)==0;
 if($9){label=6;break;}else{label=3;break;}
 case 3: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15408)>>2)]=$11;
 label=6;break;
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 6: 
 var $15=HEAP32[((15408)>>2)];
 var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$15,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=(($__nar+$16)|0);
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&176;
 if(($20|0)==32){ var $_0_i=$17;label=13;break;}else if(($20|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $22=HEAP8[($4)];
 if((($22<<24)>>24)==45|(($22<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $24=(($__nar+1)|0);
 var $_0_i=$24;label=13;break;
 case 9: 
 var $26=($16|0)>1;
 var $27=(($22<<24)>>24)==48;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $29=(($__nar+1)|0);
 var $30=HEAP8[($29)];
 if((($30<<24)>>24)==120|(($30<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $32=(($__nar+2)|0);
 var $_0_i=$32;label=13;break;
 case 12: 
 var $_0_i=$4;label=13;break;
 case 13: 
 var $_0_i;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $34=(($1)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$__p_i_i_i;
 var $37=HEAP32[((16840)>>2)];
 var $38=($37|0)==-1;
 if($38){label=15;break;}else{label=14;break;}
 case 14: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$36,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $40=HEAP32[((16844)>>2)];
 var $41=((($40)-(1))|0);
 var $42=(($35+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($35+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=16;break;}else{label=17;break;}
 case 16: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=17;break;}else{label=19;break;}
 case 17: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $56=$52;
 var $57=HEAP32[(($34)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__o)|0);
 var $61=$52;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+32)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=FUNCTION_TABLE[$64]($56,$4,$17,$60);
 var $66=(($__o+$16)|0);
 var $67=($_0_i|0)==($17|0);
 if($67){var $__op_0=$66;label=22;break;}else{label=21;break;}
 case 20: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1); var $69$1 = tempRet0;
 var $70=HEAP32[(($34)>>2)];
 var $71=(($70)|0);
 var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
 ___resumeException($69$0)
 case 21: 
 var $74=$__nar;
 var $75=$_0_i;
 var $76=((($75)-($74))|0);
 var $77=(($__o+$76)|0);
 var $__op_0=$77;label=22;break;
 case 22: 
 var $__op_0;
 var $79=(($__s)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($2)|0);
 HEAP32[(($81)>>2)]=$80;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$60,$__op_0,$66,$__iob,$__fl);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $__nm=(sp)+(32);
 var $3=(($__iob+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__s)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($1)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=($__v&1);
 FUNCTION_TABLE[$11]($agg_result,$this,$1,$__iob,$__fl,$15);
 label=32;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $17=(($2)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$__p_i_i_i;
 var $20=HEAP32[((16448)>>2)];
 var $21=($20|0)==-1;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16448;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16448,$19,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=29;break; }
 case 5: 
 var $23=HEAP32[((16452)>>2)];
 var $24=((($23)-(1))|0);
 var $25=(($18+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($18+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$26;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=$31>>2;
 var $33=($32>>>0)>($24>>>0);
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=(($28+($24<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=7;break;}else{label=9;break;}
 case 7: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 __ZNSt8bad_castC2Ev($38);
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=29;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $39=$35;
 var $40=HEAP32[(($17)>>2)];
 var $41=(($40)|0);
 var $42=__ZNSt3__114__shared_count16__release_sharedEv($41);
 var $43=$35;
 var $44=HEAP32[(($43)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=(($44+24)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($__nm,$39);
 label=12;break;
 case 11: 
 var $49=(($44+28)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($__nm,$39);
 label=12;break;
 case 12: 
 var $52=$__nm;
 var $53=HEAP8[($52)];
 var $54=$53&1;
 var $55=(($54<<24)>>24)==0;
 if($55){label=14;break;}else{label=13;break;}
 case 13: 
 var $57=(($__nm+8)|0);
 var $58=HEAP32[(($57)>>2)];
 var $_pre83=(($__nm+4)|0);
 var $__i_sroa_0_0_ph=$58;var $_pre_phi=$_pre83;var $_pre_phi85=$57;label=15;break;
 case 14: 
 var $60=(($__nm+4)|0);
 var $_pre84=(($__nm+8)|0);
 var $__i_sroa_0_0_ph=$60;var $_pre_phi=$60;var $_pre_phi85=$_pre84;label=15;break;
 case 15: 
 var $_pre_phi85;
 var $_pre_phi;
 var $__i_sroa_0_0_ph;
 var $61=(($__s)|0);
 var $__i_sroa_0_0=$__i_sroa_0_0_ph;var $62=$53;label=16;break;
 case 16: 
 var $62;
 var $__i_sroa_0_0;
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){var $67=$_pre_phi;label=18;break;}else{label=17;break;}
 case 17: 
 var $66=HEAP32[(($_pre_phi85)>>2)];
 var $67=$66;label=18;break;
 case 18: 
 var $67;
 var $68=($62&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 if($70){label=20;break;}else{label=19;break;}
 case 19: 
 var $72=HEAP32[(($_pre_phi)>>2)];
 var $75=$72;label=21;break;
 case 20: 
 var $74=$68>>>1;
 var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76=(($67+($75<<2))|0);
 var $77=($__i_sroa_0_0|0)==($76|0);
 if($77){label=31;break;}else{label=22;break;}
 case 22: 
 var $79=HEAP32[(($__i_sroa_0_0)>>2)];
 var $80=HEAP32[(($61)>>2)];
 var $81=($80|0)==0;
 if($81){label=28;break;}else{label=23;break;}
 case 23: 
 var $83=(($80+24)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($80+28)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($84|0)==($86|0);
 if($87){label=24;break;}else{label=25;break;}
 case 24: 
 var $89=$80;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+52)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($80,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$93;label=26;break; } else { label=30;break; }
 case 25: 
 var $95=(($84+4)|0);
 HEAP32[(($83)>>2)]=$95;
 HEAP32[(($84)>>2)]=$79;
 var $_0=$79;label=26;break;
 case 26: 
 var $_0;
 var $96=($_0|0)==-1;
 if($96){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($61)>>2)]=0;
 label=28;break;
 case 28: 
 var $98=(($__i_sroa_0_0+4)|0);
 var $_pre=HEAP8[($52)];
 var $__i_sroa_0_0=$98;var $62=$_pre;label=16;break;
 case 29: 
 var $100$0 = ___cxa_find_matching_catch(-1, -1); var $100$1 = tempRet0;
 var $101=$100$0;
 var $102=$100$1;
 var $103=HEAP32[(($17)>>2)];
 var $104=(($103)|0);
 var $105=__ZNSt3__114__shared_count16__release_sharedEv($104);
 var $_078=$102;var $_079=$101;label=33;break;
 case 30: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;
 var $108=$107$0;
 var $109=$107$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 var $_078=$109;var $_079=$108;label=33;break;
 case 31: 
 var $111=HEAP32[(($61)>>2)];
 var $112=(($agg_result)|0);
 HEAP32[(($112)>>2)]=$111;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 label=32;break;
 case 32: 
 STACKTOP=sp;return;
 case 33: 
 var $_079;
 var $_078;
 var $115$0=$_079;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_078;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(5280)];HEAP8[((($3)+(1))|0)]=HEAP8[(5281)];HEAP8[((($3)+(2))|0)]=HEAP8[(5282)];HEAP8[((($3)+(3))|0)]=HEAP8[(5283)];HEAP8[((($3)+(4))|0)]=HEAP8[(5284)];HEAP8[((($3)+(5))|0)]=HEAP8[(5285)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(17544)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(17544);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15408)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((15408)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i158=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((16832)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$3,274);
 label=3;break;
 case 3: 
 var $7=HEAP32[((16836)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 ___cxa_throw($21,11472,(394));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i158;
 var $26=HEAP32[((16448)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i159=(($__p_i_i_i158)|0);
 HEAP32[(($_sroa_016_0__idx_i_i159)>>2)]=16448;
 var $_sroa_117_4__idx18_i_i160=(($__p_i_i_i158+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i160)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i161=(($__p_i_i_i158+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i161)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16448,$25,274);
 label=8;break;
 case 8: 
 var $29=HEAP32[((16452)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 __ZNSt8bad_castC2Ev($44);
 ___cxa_throw($43,11472,(394));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 var $50=$__grouping;
 var $51=$__grouping;
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=$53&1;
 var $55=($54|0)==0;
 if($55){label=13;break;}else{label=12;break;}
 case 12: 
 var $57=(($__grouping+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $61=$58;label=14;break;
 case 13: 
 var $60=$53>>>1;
 var $61=$60;label=14;break;
 case 14: 
 var $61;
 var $62=($61|0)==0;
 if($62){label=15;break;}else{label=20;break;}
 case 15: 
 var $64=$19;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+48)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($23,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $69=$__ne;
 var $70=$__nb;
 var $71=((($69)-($70))|0);
 var $72=(($__ob+($71<<2))|0);
 HEAP32[(($__oe)>>2)]=$72;
 label=43;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $75=HEAP8[($__nb)];
 if((($75<<24)>>24)==45|(($75<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $77=$19;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+44)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]($23,$75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $82=(($__nb+1)|0);
 var $83=HEAP32[(($__oe)>>2)];
 var $84=(($83+4)|0);
 HEAP32[(($__oe)>>2)]=$84;
 HEAP32[(($83)>>2)]=$81;
 var $__nf_0=$82;label=23;break;
 case 23: 
 var $__nf_0;
 var $86=$__ne;
 var $87=$__nf_0;
 var $88=((($86)-($87))|0);
 var $89=($88|0)>1;
 if($89){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $91=HEAP8[($__nf_0)];
 var $92=(($91<<24)>>24)==48;
 if($92){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $94=(($__nf_0+1)|0);
 var $95=HEAP8[($94)];
 if((($95<<24)>>24)==120|(($95<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $97=$19;
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+44)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $102=HEAP32[(($__oe)>>2)];
 var $103=(($102+4)|0);
 HEAP32[(($__oe)>>2)]=$103;
 HEAP32[(($102)>>2)]=$101;
 var $104=HEAP8[($94)];
 var $105=HEAP32[(($97)>>2)];
 var $106=(($105+44)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($23,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $109=(($__nf_0+2)|0);
 var $110=HEAP32[(($__oe)>>2)];
 var $111=(($110+4)|0);
 HEAP32[(($__oe)>>2)]=$111;
 HEAP32[(($110)>>2)]=$108;
 var $__nf_1=$109;label=29;break;
 case 29: 
 var $__nf_1;
 var $113=($__nf_1|0)==($__ne|0);
 if($113){label=32;break;}else{label=30;break;}
 case 30: 
 var $114=((($__ne)-(1))|0);
 var $115=($__nf_1>>>0)<($114>>>0);
 if($115){var $_0172=$__nf_1;var $116=$114;label=31;break;}else{label=32;break;}
 case 31: 
 var $116;
 var $_0172;
 var $117=HEAP8[($_0172)];
 var $118=HEAP8[($116)];
 HEAP8[($_0172)]=$118;
 HEAP8[($116)]=$117;
 var $119=(($_0172+1)|0);
 var $120=((($116)-(1))|0);
 var $121=($119>>>0)<($120>>>0);
 if($121){var $_0172=$119;var $116=$120;label=31;break;}else{label=32;break;}
 case 32: 
 var $122=$41;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$125]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $127=($__nf_1>>>0)<($__ne>>>0);
 if($127){label=34;break;}else{label=40;break;}
 case 34: 
 var $128=(($50+1)|0);
 var $129=$19;
 var $130=(($__grouping+4)|0);
 var $131=(($__grouping+8)|0);
 var $__dc_0167=0;var $__dg_0168=0;var $__p_0169=$__nf_1;label=35;break;
 case 35: 
 var $__p_0169;
 var $__dg_0168;
 var $__dc_0167;
 var $132=HEAP8[($51)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 var $135=HEAP32[(($131)>>2)];
 var $_=($134?$128:$135);
 var $136=(($_+$__dg_0168)|0);
 var $137=HEAP8[($136)];
 var $138=(($137<<24)>>24)==0;
 if($138){var $__dg_1=$__dg_0168;var $__dc_1=$__dc_0167;label=38;break;}else{label=36;break;}
 case 36: 
 var $139=HEAP32[(($131)>>2)];
 var $_174=($134?$128:$139);
 var $140=(($_174+$__dg_0168)|0);
 var $141=HEAP8[($140)];
 var $142=(($141<<24)>>24);
 var $143=($__dc_0167|0)==($142|0);
 if($143){label=37;break;}else{var $__dg_1=$__dg_0168;var $__dc_1=$__dc_0167;label=38;break;}
 case 37: 
 var $144=HEAP32[(($__oe)>>2)];
 var $145=(($144+4)|0);
 HEAP32[(($__oe)>>2)]=$145;
 HEAP32[(($144)>>2)]=$126;
 var $146=HEAP8[($51)];
 var $147=($146&255);
 var $148=$147&1;
 var $149=($148|0)==0;
 var $150=HEAP32[(($130)>>2)];
 var $151=$147>>>1;
 var $152=($149?$151:$150);
 var $153=((($152)-(1))|0);
 var $154=($__dg_0168>>>0)<($153>>>0);
 var $155=($154&1);
 var $___dg_0=((($155)+($__dg_0168))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=38;break;
 case 38: 
 var $__dc_1;
 var $__dg_1;
 var $157=HEAP8[($__p_0169)];
 var $158=HEAP32[(($129)>>2)];
 var $159=(($158+44)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$160]($23,$157) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=17;break; }
 case 39: 
 var $162=HEAP32[(($__oe)>>2)];
 var $163=(($162+4)|0);
 HEAP32[(($__oe)>>2)]=$163;
 HEAP32[(($162)>>2)]=$161;
 var $164=((($__dc_1)+(1))|0);
 var $165=(($__p_0169+1)|0);
 var $166=($165>>>0)<($__ne>>>0);
 if($166){var $__dc_0167=$164;var $__dg_0168=$__dg_1;var $__p_0169=$165;label=35;break;}else{label=40;break;}
 case 40: 
 var $167=$__nf_1;
 var $168=$__nb;
 var $169=((($167)-($168))|0);
 var $170=(($__ob+($169<<2))|0);
 var $171=HEAP32[(($__oe)>>2)];
 var $172=($170|0)==($171|0);
 if($172){label=43;break;}else{label=41;break;}
 case 41: 
 var $173=((($171)-(4))|0);
 var $174=($170>>>0)<($173>>>0);
 if($174){var $_0156166=$170;var $175=$173;label=42;break;}else{label=43;break;}
 case 42: 
 var $175;
 var $_0156166;
 var $176=HEAP32[(($_0156166)>>2)];
 var $177=HEAP32[(($175)>>2)];
 HEAP32[(($_0156166)>>2)]=$177;
 HEAP32[(($175)>>2)]=$176;
 var $178=(($_0156166+4)|0);
 var $179=((($175)-(4))|0);
 var $180=($178>>>0)<($179>>>0);
 if($180){var $_0156166=$178;var $175=$179;label=42;break;}else{label=43;break;}
 case 43: 
 var $181=($__np|0)==($__ne|0);
 if($181){label=44;break;}else{label=45;break;}
 case 44: 
 var $183=HEAP32[(($__oe)>>2)];
 var $storemerge=$183;label=46;break;
 case 45: 
 var $185=$__np;
 var $186=$__nb;
 var $187=((($185)-($186))|0);
 var $188=(($__ob+($187<<2))|0);
 var $storemerge=$188;label=46;break;
 case 46: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=(($__s)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=0;
 label=19;break;
 case 3: 
 var $7=$__oe;
 var $8=$__ob;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=(($__iob+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)>($10|0);
 var $14=((($12)-($10))|0);
 var $__ns_0=($13?$14:0);
 var $15=$__op;
 var $16=((($15)-($8))|0);
 var $17=$16>>2;
 var $18=($16|0)>0;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=$2;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+48)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($2,$__ob,$17);
 var $25=($24|0)==($17|0);
 if($25){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $27=(($agg_result)|0);
 HEAP32[(($27)>>2)]=0;
 label=19;break;
 case 6: 
 var $29=($__ns_0|0)>0;
 if($29){label=7;break;}else{label=15;break;}
 case 7: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns_0,$__fl);
 var $31=$__sp;
 var $32=HEAP8[($31)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 var $36=(($__sp+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $40=$37;label=10;break;
 case 9: 
 var $39=(($__sp+4)|0);
 var $40=$39;label=10;break;
 case 10: 
 var $40;
 var $41=$2;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+48)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($2,$40,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $46=($45|0)==($__ns_0|0);
 if($46){label=14;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($1)>>2)]=0;
 var $47=(($agg_result)|0);
 HEAP32[(($47)>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=19;break;
 case 13: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 ___resumeException($49$0)
 case 14: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=15;break;
 case 15: 
 var $52=((($7)-($15))|0);
 var $53=$52>>2;
 var $54=($52|0)>0;
 if($54){label=16;break;}else{label=18;break;}
 case 16: 
 var $56=$2;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+48)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($2,$__op,$53);
 var $61=($60|0)==($53|0);
 if($61){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($1)>>2)]=0;
 var $63=(($agg_result)|0);
 HEAP32[(($63)>>2)]=0;
 label=19;break;
 case 18: 
 HEAP32[(($11)>>2)]=0;
 var $65=(($agg_result)|0);
 HEAP32[(($65)>>2)]=$2;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(200);
 var $__oe=(sp)+(208);
 var $1=(sp)+(216);
 var $2=(sp)+(224);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $16=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(17544)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(17544);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15408)>>2)]=$32;
 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((15408)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,22,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i11=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i11=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i11=$52;label=23;break;
 case 22: 
 var $_0_i11=$25;label=23;break;
 case 23: 
 var $_0_i11;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25,$_0_i11,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(5280)];HEAP8[((($3)+(1))|0)]=HEAP8[(5281)];HEAP8[((($3)+(2))|0)]=HEAP8[(5282)];HEAP8[((($3)+(3))|0)]=HEAP8[(5283)];HEAP8[((($3)+(4))|0)]=HEAP8[(5284)];HEAP8[((($3)+(5))|0)]=HEAP8[(5285)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(17544)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(17544);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15408)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((15408)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(208);
 var $__oe=(sp)+(216);
 var $1=(sp)+(224);
 var $2=(sp)+(232);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $16=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(17544)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(17544);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15408)>>2)]=$32;
 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((15408)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,23,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i11=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i11=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i11=$52;label=23;break;
 case 22: 
 var $_0_i11=$25;label=23;break;
 case 23: 
 var $_0_i11;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25,$_0_i11,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $3=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($22)]=70;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 9: 
 HEAP8[($22)]=102;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($22)]=69;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 12: 
 HEAP8[($22)]=101;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 13: 
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($22)]=71;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 18: 
 HEAP8[($22)]=103;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i144;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(17544)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(17544);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((15408)>>2)]=$50;
 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((15408)>>2)];
 if($specify_precision_0_off0_ph_i144){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre151=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $102=$_pre151;label=47;break;
 case 29: 
 var $64=HEAP8[(17544)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i144){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(17544);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((15408)>>2)]=$71;
 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((15408)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1121149=$83;var $_1150=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(17544);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((15408)>>2)]=$89;
 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((15408)>>2)];
 var $95=(($__iob+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$97;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $99=HEAP32[(($__nb)>>2)];
 var $100=($99|0)==0;
 if($100){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$99;var $102=$99;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $102=$_pre;label=47;break;
 case 47: 
 var $102;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $103=(($102+$__nc_2)|0);
 var $104=HEAP32[(($6)>>2)];
 var $105=$104&176;
 if(($105|0)==16){ label=48;break;}else if(($105|0)==32){ var $_0_i143=$103;label=54;break;}else{label=53;break;}
 case 48: 
 var $107=HEAP8[($102)];
 if((($107<<24)>>24)==45|(($107<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $109=(($102+1)|0);
 var $_0_i143=$109;label=54;break;
 case 50: 
 var $111=($__nc_2|0)>1;
 var $112=(($107<<24)>>24)==48;
 var $or_cond_i=$111&$112;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $114=(($102+1)|0);
 var $115=HEAP8[($114)];
 if((($115<<24)>>24)==120|(($115<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $117=(($102+2)|0);
 var $_0_i143=$117;label=54;break;
 case 53: 
 var $_0_i143=$102;label=54;break;
 case 54: 
 var $_0_i143;
 var $119=(($__o)|0);
 var $120=($102|0)==($43|0);
 if($120){var $__ob_0=$119;var $__obh_sroa_0_1=0;var $131=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $122=$__nc_2<<3;
 var $123=_malloc($122);
 var $124=$123;
 var $125=($123|0)==0;
 if($125){label=56;break;}else{var $__ob_0=$124;var $__obh_sroa_0_1=$124;var $131=$102;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre152=HEAP32[(($__nb)>>2)];
 var $__ob_0=$124;var $__obh_sroa_0_1=$124;var $131=$_pre152;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=$128$0;
 var $130=$128$1;
 var $_0=$129;var $_0120=$130;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $131;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($131,$_0_i143,$103,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $134=(($1)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135)|0);
 var $137=__ZNSt3__114__shared_count16__release_sharedEv($136);
 var $138=(($__s)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($3)|0);
 HEAP32[(($140)>>2)]=$139;
 var $141=HEAP32[(($__op)>>2)];
 var $142=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$141,$142,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $144=(($2)|0);
 var $145=HEAP32[(($144)>>2)];
 HEAP32[(($138)>>2)]=$145;
 var $146=(($agg_result)|0);
 HEAP32[(($146)>>2)]=$145;
 var $147=($__obh_sroa_0_1|0)==0;
 if($147){label=64;break;}else{label=63;break;}
 case 63: 
 var $149=$__obh_sroa_0_1;
 _free($149);
 label=64;break;
 case 64: 
 var $150=($__nbh_sroa_0_1|0)==0;
 if($150){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $153$0 = ___cxa_find_matching_catch(-1, -1); var $153$1 = tempRet0;
 var $154=$153$0;
 var $155=$153$1;
 var $156=(($1)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157)|0);
 var $159=__ZNSt3__114__shared_count16__release_sharedEv($158);
 var $_0=$154;var $_0120=$155;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_0120;
 var $_0;
 var $161=($__obh_sroa_0_2|0)==0;
 if($161){label=70;break;}else{label=69;break;}
 case 69: 
 var $163=$__obh_sroa_0_2;
 _free($163);
 label=70;break;
 case 70: 
 var $164=($__nbh_sroa_0_1|0)==0;
 if($164){var $_1121149=$_0120;var $_1150=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_1121149=$_0120;var $_1150=$_0;label=72;break;
 case 72: 
 var $_1150;
 var $_1121149;
 var $166$0=$_1150;
 var $166$1=0;
 var $167$0=$166$0;
 var $167$1=$_1121149;
 ___resumeException($167$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i191=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((16832)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$3,274);
 label=3;break;
 case 3: 
 var $7=HEAP32[((16836)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 ___cxa_throw($21,11472,(394));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i191;
 var $26=HEAP32[((16448)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i192=(($__p_i_i_i191)|0);
 HEAP32[(($_sroa_016_0__idx_i_i192)>>2)]=16448;
 var $_sroa_117_4__idx18_i_i193=(($__p_i_i_i191+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i193)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i194=(($__p_i_i_i191+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i194)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16448,$25,274);
 label=8;break;
 case 8: 
 var $29=HEAP32[((16452)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 __ZNSt8bad_castC2Ev($44);
 ___cxa_throw($43,11472,(394));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $50=HEAP8[($__nb)];
 if((($50<<24)>>24)==45|(($50<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $52=$19;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+44)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($23,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $57=(($__nb+1)|0);
 var $58=HEAP32[(($__oe)>>2)];
 var $59=(($58+4)|0);
 HEAP32[(($__oe)>>2)]=$59;
 HEAP32[(($58)>>2)]=$56;
 var $__nf_0=$57;label=20;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit208$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit208$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit208$1;var $eh_lpad_body$0=$lpad_loopexit208$0;label=19;break;
 case 16: 
 var $lpad_loopexit220$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit220$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit220$1;var $eh_lpad_body$0=$lpad_loopexit220$0;label=19;break;
 case 17: 
 var $lpad_loopexit225$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit225$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit225$1;var $eh_lpad_body$0=$lpad_loopexit225$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit226$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit226$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit226$1;var $eh_lpad_body$0=$lpad_nonloopexit226$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $61=$__ne;
 var $62=$__nf_0;
 var $63=((($61)-($62))|0);
 var $64=($63|0)>1;
 if($64){label=21;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 21: 
 var $66=HEAP8[($__nf_0)];
 var $67=(($66<<24)>>24)==48;
 if($67){label=22;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 22: 
 var $69=(($__nf_0+1)|0);
 var $70=HEAP8[($69)];
 if((($70<<24)>>24)==120|(($70<<24)>>24)==88){ label=23;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 23: 
 var $72=$19;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+44)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=18;break; }
 case 24: 
 var $77=HEAP32[(($__oe)>>2)];
 var $78=(($77+4)|0);
 HEAP32[(($__oe)>>2)]=$78;
 HEAP32[(($77)>>2)]=$76;
 var $79=(($__nf_0+2)|0);
 var $80=HEAP8[($69)];
 var $81=HEAP32[(($72)>>2)];
 var $82=(($81+44)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]($23,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $85=HEAP32[(($__oe)>>2)];
 var $86=(($85+4)|0);
 HEAP32[(($__oe)>>2)]=$86;
 HEAP32[(($85)>>2)]=$84;
 var $__ns_0=$79;label=26;break;
 case 26: 
 var $__ns_0;
 var $88=($__ns_0>>>0)<($__ne>>>0);
 if($88){label=27;break;}else{var $__ns_2=$__ns_0;var $__nf_1=$79;label=42;break;}
 case 27: 
 var $90=HEAP8[($__ns_0)];
 var $91=HEAP8[(17544)];
 var $92=(($91<<24)>>24)==0;
 if($92){label=28;break;}else{label=32;break;}
 case 28: 
 var $94=___cxa_guard_acquire(17544);
 var $95=($94|0)==0;
 if($95){label=32;break;}else{label=29;break;}
 case 29: 
 var $97=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=31;break; }
 case 30: 
 HEAP32[((15408)>>2)]=$97;
 label=32;break;
 case 31: 
 var $100$0 = ___cxa_find_matching_catch(-1, -1); var $100$1 = tempRet0;
 var $eh_lpad_body$1=$100$1;var $eh_lpad_body$0=$100$0;label=19;break;
 case 32: 
 var $102=HEAP32[((15408)>>2)];
 var $103=(($90<<24)>>24);
 var $104=(function() { try { __THREW__ = 0; return _isxdigit($103,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=17;break; }
 case 33: 
 var $106=($104|0)==0;
 var $107=(($__ns_0+1)|0);
 if($106){var $__ns_2=$__ns_0;var $__nf_1=$79;label=42;break;}else{var $__ns_0=$107;label=26;break;}
 case 34: 
 var $__ns_1;
 var $108=($__ns_1>>>0)<($__ne>>>0);
 if($108){label=35;break;}else{var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}
 case 35: 
 var $110=HEAP8[($__ns_1)];
 var $111=HEAP8[(17544)];
 var $112=(($111<<24)>>24)==0;
 if($112){label=36;break;}else{label=40;break;}
 case 36: 
 var $114=___cxa_guard_acquire(17544);
 var $115=($114|0)==0;
 if($115){label=40;break;}else{label=37;break;}
 case 37: 
 var $117=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=39;break; }
 case 38: 
 HEAP32[((15408)>>2)]=$117;
 label=40;break;
 case 39: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1); var $120$1 = tempRet0;
 var $eh_lpad_body$1=$120$1;var $eh_lpad_body$0=$120$0;label=19;break;
 case 40: 
 var $122=HEAP32[((15408)>>2)];
 var $123=(($110<<24)>>24);
 var $124=(function() { try { __THREW__ = 0; return _isdigit($123,$122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=16;break; }
 case 41: 
 var $126=($124|0)==0;
 var $127=(($__ns_1+1)|0);
 if($126){var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}else{var $__ns_1=$127;label=34;break;}
 case 42: 
 var $__nf_1;
 var $__ns_2;
 var $128=$__grouping;
 var $129=$__grouping;
 var $130=HEAP8[($129)];
 var $131=($130&255);
 var $132=$131&1;
 var $133=($132|0)==0;
 if($133){label=44;break;}else{label=43;break;}
 case 43: 
 var $135=(($__grouping+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $139=$136;label=45;break;
 case 44: 
 var $138=$131>>>1;
 var $139=$138;label=45;break;
 case 45: 
 var $139;
 var $140=($139|0)==0;
 if($140){label=46;break;}else{label=50;break;}
 case 46: 
 var $142=HEAP32[(($__oe)>>2)];
 var $143=$19;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+48)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($23,$__nf_1,$__ns_2,$142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=18;break; }
 case 47: 
 var $148=$__ns_2;
 var $149=$__nf_1;
 var $150=((($148)-($149))|0);
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+($150<<2))|0);
 HEAP32[(($__oe)>>2)]=$152;
 label=48;break;
 case 48: 
 var $153=($__ns_2>>>0)<($__ne>>>0);
 if($153){label=49;break;}else{var $__nf_3=$__ns_2;label=69;break;}
 case 49: 
 var $154=$19;
 var $__nf_2205=$__ns_2;label=64;break;
 case 50: 
 var $156=($__nf_1|0)==($__ns_2|0);
 if($156){label=53;break;}else{label=51;break;}
 case 51: 
 var $157=((($__ns_2)-(1))|0);
 var $158=($__nf_1>>>0)<($157>>>0);
 if($158){var $_0189216=$__nf_1;var $159=$157;label=52;break;}else{label=53;break;}
 case 52: 
 var $159;
 var $_0189216;
 var $160=HEAP8[($_0189216)];
 var $161=HEAP8[($159)];
 HEAP8[($_0189216)]=$161;
 HEAP8[($159)]=$160;
 var $162=(($_0189216+1)|0);
 var $163=((($159)-(1))|0);
 var $164=($162>>>0)<($163>>>0);
 if($164){var $_0189216=$162;var $159=$163;label=52;break;}else{label=53;break;}
 case 53: 
 var $165=$41;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$168]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=18;break; }
 case 54: 
 var $170=($__nf_1>>>0)<($__ns_2>>>0);
 if($170){label=55;break;}else{label=61;break;}
 case 55: 
 var $171=(($128+1)|0);
 var $172=(($__grouping+4)|0);
 var $173=(($__grouping+8)|0);
 var $174=$19;
 var $__dc_0211=0;var $__dg_0212=0;var $__p_0213=$__nf_1;label=56;break;
 case 56: 
 var $__p_0213;
 var $__dg_0212;
 var $__dc_0211;
 var $175=HEAP8[($129)];
 var $176=$175&1;
 var $177=(($176<<24)>>24)==0;
 var $178=HEAP32[(($173)>>2)];
 var $_=($177?$171:$178);
 var $179=(($_+$__dg_0212)|0);
 var $180=HEAP8[($179)];
 var $181=(($180<<24)>>24)>0;
 if($181){label=57;break;}else{var $__dg_1=$__dg_0212;var $__dc_1=$__dc_0211;label=59;break;}
 case 57: 
 var $182=HEAP32[(($173)>>2)];
 var $_236=($177?$171:$182);
 var $183=(($_236+$__dg_0212)|0);
 var $184=HEAP8[($183)];
 var $185=(($184<<24)>>24);
 var $186=($__dc_0211|0)==($185|0);
 if($186){label=58;break;}else{var $__dg_1=$__dg_0212;var $__dc_1=$__dc_0211;label=59;break;}
 case 58: 
 var $187=HEAP32[(($__oe)>>2)];
 var $188=(($187+4)|0);
 HEAP32[(($__oe)>>2)]=$188;
 HEAP32[(($187)>>2)]=$169;
 var $189=HEAP8[($129)];
 var $190=($189&255);
 var $191=$190&1;
 var $192=($191|0)==0;
 var $193=HEAP32[(($172)>>2)];
 var $194=$190>>>1;
 var $195=($192?$194:$193);
 var $196=((($195)-(1))|0);
 var $197=($__dg_0212>>>0)<($196>>>0);
 var $198=($197&1);
 var $___dg_0=((($198)+($__dg_0212))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=59;break;
 case 59: 
 var $__dc_1;
 var $__dg_1;
 var $200=HEAP8[($__p_0213)];
 var $201=HEAP32[(($174)>>2)];
 var $202=(($201+44)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($23,$200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=15;break; }
 case 60: 
 var $205=HEAP32[(($__oe)>>2)];
 var $206=(($205+4)|0);
 HEAP32[(($__oe)>>2)]=$206;
 HEAP32[(($205)>>2)]=$204;
 var $207=((($__dc_1)+(1))|0);
 var $208=(($__p_0213+1)|0);
 var $209=($208>>>0)<($__ns_2>>>0);
 if($209){var $__dc_0211=$207;var $__dg_0212=$__dg_1;var $__p_0213=$208;label=56;break;}else{label=61;break;}
 case 61: 
 var $210=$__nf_1;
 var $211=$__nb;
 var $212=((($210)-($211))|0);
 var $213=(($__ob+($212<<2))|0);
 var $214=HEAP32[(($__oe)>>2)];
 var $215=($213|0)==($214|0);
 if($215){label=48;break;}else{label=62;break;}
 case 62: 
 var $216=((($214)-(4))|0);
 var $217=($213>>>0)<($216>>>0);
 if($217){var $_0206=$213;var $218=$216;label=63;break;}else{label=48;break;}
 case 63: 
 var $218;
 var $_0206;
 var $219=HEAP32[(($_0206)>>2)];
 var $220=HEAP32[(($218)>>2)];
 HEAP32[(($_0206)>>2)]=$220;
 HEAP32[(($218)>>2)]=$219;
 var $221=(($_0206+4)|0);
 var $222=((($218)-(4))|0);
 var $223=($221>>>0)<($222>>>0);
 if($223){var $_0206=$221;var $218=$222;label=63;break;}else{label=48;break;}
 case 64: 
 var $__nf_2205;
 var $225=HEAP8[($__nf_2205)];
 var $226=(($225<<24)>>24)==46;
 if($226){label=65;break;}else{label=67;break;}
 case 65: 
 var $228=$41;
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$231]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=18;break; }
 case 66: 
 var $233=HEAP32[(($__oe)>>2)];
 var $234=(($233+4)|0);
 HEAP32[(($__oe)>>2)]=$234;
 HEAP32[(($233)>>2)]=$232;
 var $235=(($__nf_2205+1)|0);
 var $__nf_3=$235;label=69;break;
 case 67: 
 var $237=HEAP32[(($154)>>2)];
 var $238=(($237+44)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$239]($23,$225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=14;break; }
 case 68: 
 var $241=HEAP32[(($__oe)>>2)];
 var $242=(($241+4)|0);
 HEAP32[(($__oe)>>2)]=$242;
 HEAP32[(($241)>>2)]=$240;
 var $243=(($__nf_2205+1)|0);
 var $244=($243>>>0)<($__ne>>>0);
 if($244){var $__nf_2205=$243;label=64;break;}else{var $__nf_3=$243;label=69;break;}
 case 69: 
 var $__nf_3;
 var $245=HEAP32[(($__oe)>>2)];
 var $246=$19;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+48)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$249]($23,$__nf_3,$__ne,$245) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=18;break; }
 case 70: 
 var $251=$__nf_3;
 var $252=((($61)-($251))|0);
 var $253=HEAP32[(($__oe)>>2)];
 var $254=(($253+($252<<2))|0);
 HEAP32[(($__oe)>>2)]=$254;
 var $255=($__np|0)==($__ne|0);
 if($255){var $storemerge=$254;label=72;break;}else{label=71;break;}
 case 71: 
 var $257=$__np;
 var $258=$__nb;
 var $259=((($257)-($258))|0);
 var $260=(($__ob+($259<<2))|0);
 var $storemerge=$260;label=72;break;
 case 72: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $3=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 HEAP8[($22)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep146=(($_1_i+1)|0);
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep146)]=65;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 15: 
 HEAP8[($scevgep146)]=97;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i147;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(17544)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(17544);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((15408)>>2)]=$50;
 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((15408)>>2)];
 if($specify_precision_0_off0_ph_i147){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre144=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $100=$_pre144;label=47;break;
 case 29: 
 var $64=HEAP8[(17544)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i147){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(17544);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((15408)>>2)]=$71;
 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((15408)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1119142=$83;var $_1143=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(17544);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((15408)>>2)]=$89;
 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((15408)>>2)];
 var $95=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$95;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $97=HEAP32[(($__nb)>>2)];
 var $98=($97|0)==0;
 if($98){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$97;var $100=$97;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $100=$_pre;label=47;break;
 case 47: 
 var $100;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $101=(($100+$__nc_2)|0);
 var $102=HEAP32[(($6)>>2)];
 var $103=$102&176;
 if(($103|0)==16){ label=48;break;}else if(($103|0)==32){ var $_0_i141=$101;label=54;break;}else{label=53;break;}
 case 48: 
 var $105=HEAP8[($100)];
 if((($105<<24)>>24)==45|(($105<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $107=(($100+1)|0);
 var $_0_i141=$107;label=54;break;
 case 50: 
 var $109=($__nc_2|0)>1;
 var $110=(($105<<24)>>24)==48;
 var $or_cond_i=$109&$110;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $112=(($100+1)|0);
 var $113=HEAP8[($112)];
 if((($113<<24)>>24)==120|(($113<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $115=(($100+2)|0);
 var $_0_i141=$115;label=54;break;
 case 53: 
 var $_0_i141=$100;label=54;break;
 case 54: 
 var $_0_i141;
 var $117=(($__o)|0);
 var $118=($100|0)==($43|0);
 if($118){var $__ob_0=$117;var $__obh_sroa_0_1=0;var $129=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $120=$__nc_2<<3;
 var $121=_malloc($120);
 var $122=$121;
 var $123=($121|0)==0;
 if($123){label=56;break;}else{var $__ob_0=$122;var $__obh_sroa_0_1=$122;var $129=$100;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre145=HEAP32[(($__nb)>>2)];
 var $__ob_0=$122;var $__obh_sroa_0_1=$122;var $129=$_pre145;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=$126$1;
 var $_0=$127;var $_0118=$128;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $129;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($129,$_0_i141,$101,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $132=(($1)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133)|0);
 var $135=__ZNSt3__114__shared_count16__release_sharedEv($134);
 var $136=(($__s)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($3)|0);
 HEAP32[(($138)>>2)]=$137;
 var $139=HEAP32[(($__op)>>2)];
 var $140=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$139,$140,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $142=(($2)|0);
 var $143=HEAP32[(($142)>>2)];
 HEAP32[(($136)>>2)]=$143;
 var $144=(($agg_result)|0);
 HEAP32[(($144)>>2)]=$143;
 var $145=($__obh_sroa_0_1|0)==0;
 if($145){label=64;break;}else{label=63;break;}
 case 63: 
 var $147=$__obh_sroa_0_1;
 _free($147);
 label=64;break;
 case 64: 
 var $148=($__nbh_sroa_0_1|0)==0;
 if($148){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $151$0 = ___cxa_find_matching_catch(-1, -1); var $151$1 = tempRet0;
 var $152=$151$0;
 var $153=$151$1;
 var $154=(($1)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155)|0);
 var $157=__ZNSt3__114__shared_count16__release_sharedEv($156);
 var $_0=$152;var $_0118=$153;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_0118;
 var $_0;
 var $159=($__obh_sroa_0_2|0)==0;
 if($159){label=70;break;}else{label=69;break;}
 case 69: 
 var $161=$__obh_sroa_0_2;
 _free($161);
 label=70;break;
 case 70: 
 var $162=($__nbh_sroa_0_1|0)==0;
 if($162){var $_1119142=$_0118;var $_1143=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_1119142=$_0118;var $_1143=$_0;label=72;break;
 case 72: 
 var $_1143;
 var $_1119142;
 var $164$0=$_1143;
 var $164$1=0;
 var $165$0=$164$0;
 var $165$1=$_1119142;
 ___resumeException($165$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(sp)+(200);
 var $2=(sp)+(208);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(5288)];HEAP8[((($3)+(1))|0)]=HEAP8[(5289)];HEAP8[((($3)+(2))|0)]=HEAP8[(5290)];HEAP8[((($3)+(3))|0)]=HEAP8[(5291)];HEAP8[((($3)+(4))|0)]=HEAP8[(5292)];HEAP8[((($3)+(5))|0)]=HEAP8[(5293)];
 var $4=(($__nar)|0);
 var $5=HEAP8[(17544)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=___cxa_guard_acquire(17544);
 var $9=($8|0)==0;
 if($9){label=6;break;}else{label=3;break;}
 case 3: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15408)>>2)]=$11;
 label=6;break;
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 6: 
 var $15=HEAP32[((15408)>>2)];
 var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$15,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=(($__nar+$16)|0);
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&176;
 if(($20|0)==32){ var $_0_i=$17;label=13;break;}else if(($20|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $22=HEAP8[($4)];
 if((($22<<24)>>24)==45|(($22<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $24=(($__nar+1)|0);
 var $_0_i=$24;label=13;break;
 case 9: 
 var $26=($16|0)>1;
 var $27=(($22<<24)>>24)==48;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $29=(($__nar+1)|0);
 var $30=HEAP8[($29)];
 if((($30<<24)>>24)==120|(($30<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $32=(($__nar+2)|0);
 var $_0_i=$32;label=13;break;
 case 12: 
 var $_0_i=$4;label=13;break;
 case 13: 
 var $_0_i;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $34=(($1)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$__p_i_i_i;
 var $37=HEAP32[((16832)>>2)];
 var $38=($37|0)==-1;
 if($38){label=15;break;}else{label=14;break;}
 case 14: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$36,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $40=HEAP32[((16836)>>2)];
 var $41=((($40)-(1))|0);
 var $42=(($35+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($35+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=16;break;}else{label=17;break;}
 case 16: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=17;break;}else{label=19;break;}
 case 17: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $56=$52;
 var $57=HEAP32[(($34)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__o)|0);
 var $61=$52;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+48)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=FUNCTION_TABLE[$64]($56,$4,$17,$60);
 var $66=(($__o+($16<<2))|0);
 var $67=($_0_i|0)==($17|0);
 if($67){var $__op_0=$66;label=22;break;}else{label=21;break;}
 case 20: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1); var $69$1 = tempRet0;
 var $70=HEAP32[(($34)>>2)];
 var $71=(($70)|0);
 var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
 ___resumeException($69$0)
 case 21: 
 var $74=$__nar;
 var $75=$_0_i;
 var $76=((($75)-($74))|0);
 var $77=(($__o+($76<<2))|0);
 var $__op_0=$77;label=22;break;
 case 22: 
 var $__op_0;
 var $79=(($__s)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($2)|0);
 HEAP32[(($81)>>2)]=$80;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$60,$__op_0,$66,$__iob,$__fl);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $5=(($1)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$__p_i_i_i;
 var $8=HEAP32[((16840)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$7,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=22;break; }
 case 3: 
 var $11=HEAP32[((16844)>>2)];
 var $12=((($11)-(1))|0);
 var $13=(($6+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($6+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14;
 var $18=$16;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>($12>>>0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=(($16+($12<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 __ZNSt8bad_castC2Ev($26);
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=22;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$23;
 var $28=HEAP32[(($5)>>2)];
 var $29=(($28)|0);
 var $30=__ZNSt3__114__shared_count16__release_sharedEv($29);
 HEAP32[(($__err)>>2)]=0;
 var $31=($__fmtb|0)==($__fmte|0);
 var $_phi_trans_insert_pre_pre=(($__b)|0);
 if($31){label=67;break;}else{label=8;break;}
 case 8: 
 var $32=(($__e)|0);
 var $33=$23;
 var $34=$23;
 var $35=(($23+8)|0);
 var $36=$35;
 var $37=$this;
 var $38=(($3)|0);
 var $39=(($4)|0);
 var $40=(($2)|0);
 var $_0140_ph167=$__fmtb;var $_pre168=0;label=9;break;
 case 9: 
 var $_pre168;
 var $_0140_ph167;
 var $42=$_pre168;label=10;break;
 case 10: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=11;break;}else{label=67;break;}
 case 11: 
 var $45=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $46=($45|0)==0;
 if($46){var $60=0;label=15;break;}else{label=12;break;}
 case 12: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=13;break;}else{var $60=$45;label=15;break;}
 case 13: 
 var $53=$45;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($45);
 var $58=($57|0)==-1;
 if($58){label=14;break;}else{var $60=$45;label=15;break;}
 case 14: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $60=0;label=15;break;
 case 15: 
 var $60;
 var $61=($60|0)==0;
 var $62=HEAP32[(($32)>>2)];
 var $63=($62|0)==0;
 if($63){label=20;break;}else{label=16;break;}
 case 16: 
 var $65=(($62+12)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($62+16)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($66|0)==($68|0);
 if($69){label=17;break;}else{label=19;break;}
 case 17: 
 var $70=$62;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+36)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=FUNCTION_TABLE[$73]($62);
 var $75=($74|0)==-1;
 if($75){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($32)>>2)]=0;
 label=20;break;
 case 19: 
 if($61){var $84=$62;label=23;break;}else{label=21;break;}
 case 20: 
 if($61){label=21;break;}else{var $84=0;label=23;break;}
 case 21: 
 HEAP32[(($__err)>>2)]=4;
 var $240=$60;label=68;break;
 case 22: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 var $80=HEAP32[(($5)>>2)];
 var $81=(($80)|0);
 var $82=__ZNSt3__114__shared_count16__release_sharedEv($81);
 ___resumeException($79$0)
 case 23: 
 var $84;
 var $85=HEAP8[($_0140_ph167)];
 var $86=HEAP32[(($33)>>2)];
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($27,$85,0);
 var $90=(($89<<24)>>24)==37;
 if($90){label=24;break;}else{label=33;break;}
 case 24: 
 var $92=(($_0140_ph167+1)|0);
 var $93=($92|0)==($__fmte|0);
 if($93){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $240=$60;label=68;break;
 case 26: 
 var $96=HEAP8[($92)];
 var $97=HEAP32[(($33)>>2)];
 var $98=(($97+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=FUNCTION_TABLE[$99]($27,$96,0);
 if((($100<<24)>>24)==69|(($100<<24)>>24)==48){ label=27;break;}else{var $__opt_0=0;var $__cmd_0=$100;var $_1=$92;label=30;break;}
 case 27: 
 var $102=(($_0140_ph167+2)|0);
 var $103=($102|0)==($__fmte|0);
 if($103){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($__err)>>2)]=4;
 var $240=$60;label=68;break;
 case 29: 
 var $106=HEAP8[($102)];
 var $107=HEAP32[(($33)>>2)];
 var $108=(($107+36)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=FUNCTION_TABLE[$109]($27,$106,0);
 var $__opt_0=$100;var $__cmd_0=$110;var $_1=$102;label=30;break;
 case 30: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $112=HEAP32[(($37)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 HEAP32[(($38)>>2)]=$60;
 HEAP32[(($39)>>2)]=$84;
 FUNCTION_TABLE[$114]($2,$this,$3,$4,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $115=HEAP32[(($40)>>2)];
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$115;
 var $116=(($_1+1)|0);
 var $_0140_ph_be=$116;label=31;break;
 case 31: 
 var $_0140_ph_be;
 var $117=($_0140_ph_be|0)==($__fmte|0);
 if($117){label=67;break;}else{label=32;break;}
 case 32: 
 var $_pre168_pre=HEAP32[(($__err)>>2)];
 var $_0140_ph167=$_0140_ph_be;var $_pre168=$_pre168_pre;label=9;break;
 case 33: 
 var $119=HEAP8[($_0140_ph167)];
 var $120=(($119<<24)>>24)<0;
 if($120){label=58;break;}else{label=34;break;}
 case 34: 
 var $121=(($119<<24)>>24);
 var $122=HEAP32[(($36)>>2)];
 var $123=(($122+($121<<1))|0);
 var $124=HEAP16[(($123)>>1)];
 var $125=$124&8192;
 var $126=(($125<<16)>>16)==0;
 if($126){label=58;break;}else{var $_0140_pn=$_0140_ph167;label=35;break;}
 case 35: 
 var $_0140_pn;
 var $_2=(($_0140_pn+1)|0);
 var $127=($_2|0)==($__fmte|0);
 if($127){var $_2_lcssa=$__fmte;label=38;break;}else{label=36;break;}
 case 36: 
 var $129=HEAP8[($_2)];
 var $130=(($129<<24)>>24)<0;
 if($130){var $_2_lcssa=$_2;label=38;break;}else{label=37;break;}
 case 37: 
 var $131=(($129<<24)>>24);
 var $132=(($122+($131<<1))|0);
 var $133=HEAP16[(($132)>>1)];
 var $134=$133&8192;
 var $135=(($134<<16)>>16)==0;
 if($135){var $_2_lcssa=$_2;label=38;break;}else{var $_0140_pn=$_2;label=35;break;}
 case 38: 
 var $_2_lcssa;
 var $137=$60;var $136=$84;label=39;break;
 case 39: 
 var $136;
 var $137;
 var $138=($137|0)==0;
 if($138){var $152=0;label=43;break;}else{label=40;break;}
 case 40: 
 var $140=(($137+12)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($137+16)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($141|0)==($143|0);
 if($144){label=41;break;}else{var $152=$137;label=43;break;}
 case 41: 
 var $145=$137;
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+36)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=FUNCTION_TABLE[$148]($137);
 var $150=($149|0)==-1;
 if($150){label=42;break;}else{var $152=$137;label=43;break;}
 case 42: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $152=0;label=43;break;
 case 43: 
 var $152;
 var $153=($152|0)==0;
 var $154=($136|0)==0;
 if($154){label=48;break;}else{label=44;break;}
 case 44: 
 var $156=(($136+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($136+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=46;break;}else{label=45;break;}
 case 45: 
 if($153){var $171=$136;label=50;break;}else{var $_0140_ph_be=$_2_lcssa;label=31;break;}
 case 46: 
 var $161=$136;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+36)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=FUNCTION_TABLE[$164]($136);
 var $166=($165|0)==-1;
 if($166){label=47;break;}else{label=49;break;}
 case 47: 
 HEAP32[(($32)>>2)]=0;
 label=48;break;
 case 48: 
 if($153){var $_0140_ph_be=$_2_lcssa;label=31;break;}else{var $171=0;label=50;break;}
 case 49: 
 var $168=($136|0)==0;
 var $169=$153^$168;
 if($169){var $171=$136;label=50;break;}else{var $_0140_ph_be=$_2_lcssa;label=31;break;}
 case 50: 
 var $171;
 var $172=(($152+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($152+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=51;break;}else{label=52;break;}
 case 51: 
 var $178=$152;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=FUNCTION_TABLE[$181]($152);
 var $extract_t150=(($182)&255);
 var $_0142_off0=$extract_t150;label=53;break;
 case 52: 
 var $184=HEAP8[($173)];
 var $_0142_off0=$184;label=53;break;
 case 53: 
 var $_0142_off0;
 var $185=(($_0142_off0<<24)>>24)<0;
 if($185){var $_0140_ph_be=$_2_lcssa;label=31;break;}else{label=54;break;}
 case 54: 
 var $186=(($_0142_off0<<24)>>24);
 var $187=HEAP32[(($36)>>2)];
 var $188=(($187+($186<<1))|0);
 var $189=HEAP16[(($188)>>1)];
 var $190=$189&8192;
 var $191=(($190<<16)>>16)==0;
 if($191){var $_0140_ph_be=$_2_lcssa;label=31;break;}else{label=55;break;}
 case 55: 
 var $193=HEAP32[(($172)>>2)];
 var $194=HEAP32[(($174)>>2)];
 var $195=($193|0)==($194|0);
 if($195){label=56;break;}else{label=57;break;}
 case 56: 
 var $197=$152;
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+40)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=FUNCTION_TABLE[$200]($152);
 var $137=$152;var $136=$171;label=39;break;
 case 57: 
 var $203=(($193+1)|0);
 HEAP32[(($172)>>2)]=$203;
 var $137=$152;var $136=$171;label=39;break;
 case 58: 
 var $204=(($60+12)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($60+16)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=($205|0)==($207|0);
 if($208){label=59;break;}else{label=60;break;}
 case 59: 
 var $210=$60;
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211+36)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=FUNCTION_TABLE[$213]($60);
 var $extract_t=(($214)&255);
 var $_0139_off0=$extract_t;label=61;break;
 case 60: 
 var $216=HEAP8[($205)];
 var $_0139_off0=$216;label=61;break;
 case 61: 
 var $_0139_off0;
 var $217=HEAP32[(($34)>>2)];
 var $218=(($217+12)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=FUNCTION_TABLE[$219]($27,$_0139_off0);
 var $221=HEAP8[($_0140_ph167)];
 var $222=HEAP32[(($34)>>2)];
 var $223=(($222+12)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=FUNCTION_TABLE[$224]($27,$221);
 var $226=(($220<<24)>>24)==(($225<<24)>>24);
 if($226){label=62;break;}else{label=66;break;}
 case 62: 
 var $228=HEAP32[(($204)>>2)];
 var $229=HEAP32[(($206)>>2)];
 var $230=($228|0)==($229|0);
 if($230){label=63;break;}else{label=64;break;}
 case 63: 
 var $232=$60;
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233+40)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=FUNCTION_TABLE[$235]($60);
 label=65;break;
 case 64: 
 var $238=(($228+1)|0);
 HEAP32[(($204)>>2)]=$238;
 label=65;break;
 case 65: 
 var $239=(($_0140_ph167+1)|0);
 var $_0140_ph_be=$239;label=31;break;
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 var $42=4;label=10;break;
 case 67: 
 var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $240=$_pre;label=68;break;
 case 68: 
 var $240;
 var $241=(($__b)|0);
 var $242=($240|0)==0;
 if($242){label=72;break;}else{label=69;break;}
 case 69: 
 var $244=(($240+12)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($240+16)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($245|0)==($247|0);
 if($248){label=70;break;}else{label=72;break;}
 case 70: 
 var $249=$240;
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250+36)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=FUNCTION_TABLE[$252]($240);
 var $254=($253|0)==-1;
 if($254){label=71;break;}else{label=72;break;}
 case 71: 
 HEAP32[(($241)>>2)]=0;
 label=72;break;
 case 72: 
 var $256=HEAP32[(($241)>>2)];
 var $257=($256|0)==0;
 var $258=(($__e)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==0;
 if($260){label=77;break;}else{label=73;break;}
 case 73: 
 var $262=(($259+12)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($259+16)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($263|0)==($265|0);
 if($266){label=74;break;}else{label=76;break;}
 case 74: 
 var $267=$259;
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+36)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=FUNCTION_TABLE[$270]($259);
 var $272=($271|0)==-1;
 if($272){label=75;break;}else{label=76;break;}
 case 75: 
 HEAP32[(($258)>>2)]=0;
 label=77;break;
 case 76: 
 if($257){label=79;break;}else{label=78;break;}
 case 77: 
 if($257){label=78;break;}else{label=79;break;}
 case 78: 
 var $275=HEAP32[(($__err)>>2)];
 var $276=$275|2;
 HEAP32[(($__err)>>2)]=$276;
 label=79;break;
 case 79: 
 var $278=(($agg_result)|0);
 HEAP32[(($278)>>2)]=$256;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this){
 var label=0;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,5272,5280);
 STACKTOP=sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($this+8)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($3);
 var $9=(($__b)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($__e)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$8;
 var $16=$8;
 var $17=HEAP8[($16)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=3;break;}else{label=2;break;}
 case 2: 
 var $21=(($8+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $27=$22;var $26=$22;label=4;break;
 case 3: 
 var $24=(($15+1)|0);
 var $25=(($15+1)|0);
 var $27=$25;var $26=$24;label=4;break;
 case 4: 
 var $26;
 var $27;
 var $28=($17&255);
 var $29=$28&1;
 var $30=($29|0)==0;
 if($30){label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($8+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $36=$33;label=7;break;
 case 6: 
 var $35=$28>>>1;
 var $36=$35;label=7;break;
 case 7: 
 var $36;
 var $37=(($27+$36)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,$26,$37);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((16840)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$5,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $9=HEAP32[((16844)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__e)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$1;
 var $32=(($this+8)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=HEAP32[(($34)>>2)];
 var $36=FUNCTION_TABLE[$35]($32);
 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$30;
 var $38=(($36+168)|0);
 var $39=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$36,$38,$25,$__err,0);
 var $40=$39;
 var $41=$36;
 var $42=((($40)-($41))|0);
 var $43=($42|0)<168;
 if($43){label=8;break;}else{label=9;break;}
 case 8: 
 var $45=(($__tm+24)|0);
 var $46=(((($42|0))/(12))&-1);
 var $47=(((($46|0))%(7))&-1);
 HEAP32[(($45)>>2)]=$47;
 label=9;break;
 case 9: 
 var $48=(($__b)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($agg_result)|0);
 HEAP32[(($50)>>2)]=$49;
 STACKTOP=sp;return;
 case 10: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 var $53=HEAP32[(($3)>>2)];
 var $54=(($53)|0);
 var $55=__ZNSt3__114__shared_count16__release_sharedEv($54);
 ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((16840)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$5,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $9=HEAP32[((16844)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__e)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$1;
 var $32=(($this+8)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=FUNCTION_TABLE[$36]($32);
 var $38=(($1)|0);
 HEAP32[(($38)>>2)]=$30;
 var $39=(($37+288)|0);
 var $40=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$37,$39,$25,$__err,0);
 var $41=$40;
 var $42=$37;
 var $43=((($41)-($42))|0);
 var $44=($43|0)<288;
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=(($__tm+16)|0);
 var $47=(((($43|0))/(12))&-1);
 var $48=(((($47|0))%(12))&-1);
 HEAP32[(($46)>>2)]=$48;
 label=9;break;
 case 9: 
 var $49=(($__b)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($agg_result)|0);
 HEAP32[(($51)>>2)]=$50;
 STACKTOP=sp;return;
 case 10: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $54=HEAP32[(($3)>>2)];
 var $55=(($54)|0);
 var $56=__ZNSt3__114__shared_count16__release_sharedEv($55);
 ___resumeException($53$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((16840)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$5,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $9=HEAP32[((16844)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__tm+20)|0);
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$1;
 var $33=(($1)|0);
 HEAP32[(($33)>>2)]=$31;
 var $34=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$1,$__err,$25,4);
 var $35=HEAP32[(($__err)>>2)];
 var $36=$35&4;
 var $37=($36|0)==0;
 if($37){label=8;break;}else{label=12;break;}
 case 8: 
 var $39=($34|0)<69;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $41=((($34)+(2000))|0);
 var $__t_0_i=$41;label=11;break;
 case 10: 
 var $_off_i=((($34)-(69))|0);
 var $43=($_off_i>>>0)<31;
 var $44=((($34)+(1900))|0);
 var $__i=($43?$44:$34);
 var $__t_0_i=$__i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $46=((($__t_0_i)-(1900))|0);
 HEAP32[(($29)>>2)]=$46;
 label=12;break;
 case 12: 
 var $47=(($__b)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($agg_result)|0);
 HEAP32[(($49)>>2)]=$48;
 STACKTOP=sp;return;
 case 13: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=HEAP32[(($3)>>2)];
 var $53=(($52)|0);
 var $54=__ZNSt3__114__shared_count16__release_sharedEv($53);
 ___resumeException($51$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 var $11=(sp)+(72);
 var $12=(sp)+(80);
 var $13=(sp)+(88);
 var $__p_i_i_i=(sp)+(96);
 var $14=(sp)+(112);
 var $15=(sp)+(120);
 var $16=(sp)+(128);
 var $17=(sp)+(136);
 var $18=(sp)+(144);
 var $19=(sp)+(152);
 var $20=(sp)+(160);
 var $21=(sp)+(168);
 var $22=(sp)+(176);
 var $23=(sp)+(184);
 var $24=(sp)+(192);
 var $25=(sp)+(200);
 var $26=(sp)+(208);
 var $27=(sp)+(216);
 var $28=(sp)+(224);
 var $29=(sp)+(232);
 var $30=(sp)+(240);
 var $31=(sp)+(248);
 var $32=(sp)+(256);
 var $33=(sp)+(264);
 var $34=(sp)+(272);
 var $35=(sp)+(280);
 var $36=(sp)+(288);
 var $37=(sp)+(296);
 var $38=(sp)+(304);
 var $39=(sp)+(312);
 var $40=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 var $41=(($14)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$__p_i_i_i;
 var $44=HEAP32[((16840)>>2)];
 var $45=($44|0)==-1;
 if($45){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$43,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $47=HEAP32[((16844)>>2)];
 var $48=((($47)-(1))|0);
 var $49=(($42+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($42+8)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$50;
 var $54=$52;
 var $55=((($53)-($54))|0);
 var $56=$55>>2;
 var $57=($56>>>0)>($48>>>0);
 if($57){label=4;break;}else{label=5;break;}
 case 4: 
 var $58=(($52+($48<<2))|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==0;
 if($60){label=5;break;}else{label=7;break;}
 case 5: 
 var $61=___cxa_allocate_exception(4);
 var $62=$61;
 __ZNSt8bad_castC2Ev($62);
 (function() { try { __THREW__ = 0; return ___cxa_throw($61,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $63=$59;
 var $64=HEAP32[(($41)>>2)];
 var $65=(($64)|0);
 var $66=__ZNSt3__114__shared_count16__release_sharedEv($65);
 var $67=(($__fmt<<24)>>24);
 switch(($67|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=20;break;}case 68:{ label=24;break;}case 70:{ label=25;break;}case 72:{ label=26;break;}case 73:{ label=29;break;}case 106:{ label=33;break;}case 109:{ label=36;break;}case 77:{ label=39;break;}case 110:case 116:{ label=42;break;}case 112:{ label=43;break;}case 114:{ label=44;break;}case 82:{ label=45;break;}case 83:{ label=46;break;}case 84:{ label=49;break;}case 119:{ label=50;break;}case 120:{ label=53;break;}case 88:{ label=54;break;}case 121:{ label=61;break;}case 89:{ label=66;break;}case 37:{ label=68;break;}case 97:case 65:{ label=9;break;}default:{label=69;break;}}break;
 case 8: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1); var $69$1 = tempRet0;
 var $70=HEAP32[(($41)>>2)];
 var $71=(($70)|0);
 var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
 ___resumeException($69$0)
 case 9: 
 var $74=(($__e)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$13;
 var $77=(($this+8)|0);
 var $78=$77;
 var $79=HEAP32[(($78)>>2)];
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($77);
 var $82=(($13)|0);
 HEAP32[(($82)>>2)]=$75;
 var $83=(($81+168)|0);
 var $84=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$13,$81,$83,$63,$__err,0);
 var $85=$84;
 var $86=$81;
 var $87=((($85)-($86))|0);
 var $88=($87|0)<168;
 if($88){label=10;break;}else{label=70;break;}
 case 10: 
 var $90=(($__tm+24)|0);
 var $91=(((($87|0))/(12))&-1);
 var $92=(((($91|0))%(7))&-1);
 HEAP32[(($90)>>2)]=$92;
 label=70;break;
 case 11: 
 var $94=(($__e)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$12;
 var $97=(($this+8)|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+4)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=FUNCTION_TABLE[$101]($97);
 var $103=(($12)|0);
 HEAP32[(($103)>>2)]=$95;
 var $104=(($102+288)|0);
 var $105=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$12,$102,$104,$63,$__err,0);
 var $106=$105;
 var $107=$102;
 var $108=((($106)-($107))|0);
 var $109=($108|0)<288;
 if($109){label=12;break;}else{label=70;break;}
 case 12: 
 var $111=(($__tm+16)|0);
 var $112=(((($108|0))/(12))&-1);
 var $113=(((($112|0))%(12))&-1);
 HEAP32[(($111)>>2)]=$113;
 label=70;break;
 case 13: 
 var $115=(($this+8)|0);
 var $116=$115;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=FUNCTION_TABLE[$119]($115);
 var $121=(($__b)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(($16)|0);
 HEAP32[(($123)>>2)]=$122;
 var $124=(($__e)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($17)|0);
 HEAP32[(($126)>>2)]=$125;
 var $127=$120;
 var $128=$120;
 var $129=HEAP8[($128)];
 var $130=$129&1;
 var $131=(($130<<24)>>24)==0;
 if($131){label=15;break;}else{label=14;break;}
 case 14: 
 var $133=(($120+8)|0);
 var $134=HEAP32[(($133)>>2)];
 var $139=$134;var $138=$134;label=16;break;
 case 15: 
 var $136=(($127+1)|0);
 var $137=(($127+1)|0);
 var $139=$137;var $138=$136;label=16;break;
 case 16: 
 var $138;
 var $139;
 var $140=($129&255);
 var $141=$140&1;
 var $142=($141|0)==0;
 if($142){label=18;break;}else{label=17;break;}
 case 17: 
 var $144=(($120+4)|0);
 var $145=HEAP32[(($144)>>2)];
 var $148=$145;label=19;break;
 case 18: 
 var $147=$140>>>1;
 var $148=$147;label=19;break;
 case 19: 
 var $148;
 var $149=(($139+$148)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($15,$this,$16,$17,$__iob,$__err,$__tm,$138,$149);
 var $150=(($15)|0);
 var $151=HEAP32[(($150)>>2)];
 HEAP32[(($121)>>2)]=$151;
 label=70;break;
 case 20: 
 var $153=(($__tm+12)|0);
 var $154=(($__e)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$11;
 var $157=(($11)|0);
 HEAP32[(($157)>>2)]=$155;
 var $158=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$11,$__err,$63,2);
 var $159=HEAP32[(($__err)>>2)];
 var $160=$159&4;
 var $161=($160|0)==0;
 if($161){label=21;break;}else{label=23;break;}
 case 21: 
 var $_off_i=((($158)-(1))|0);
 var $163=($_off_i>>>0)<31;
 if($163){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($153)>>2)]=$158;
 label=70;break;
 case 23: 
 var $166=$159|4;
 HEAP32[(($__err)>>2)]=$166;
 label=70;break;
 case 24: 
 var $168=(($__b)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($19)|0);
 HEAP32[(($170)>>2)]=$169;
 var $171=(($__e)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($20)|0);
 HEAP32[(($173)>>2)]=$172;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($18,$this,$19,$20,$__iob,$__err,$__tm,5264,5272);
 var $174=(($18)|0);
 var $175=HEAP32[(($174)>>2)];
 HEAP32[(($168)>>2)]=$175;
 label=70;break;
 case 25: 
 var $177=(($__b)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($22)|0);
 HEAP32[(($179)>>2)]=$178;
 var $180=(($__e)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($23)|0);
 HEAP32[(($182)>>2)]=$181;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$22,$23,$__iob,$__err,$__tm,5256,5264);
 var $183=(($21)|0);
 var $184=HEAP32[(($183)>>2)];
 HEAP32[(($177)>>2)]=$184;
 label=70;break;
 case 26: 
 var $186=(($__e)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$10;
 var $189=(($10)|0);
 HEAP32[(($189)>>2)]=$187;
 var $190=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$10,$__err,$63,2);
 var $191=HEAP32[(($__err)>>2)];
 var $192=$191&4;
 var $193=($192|0)==0;
 var $194=($190|0)<24;
 var $or_cond_i=$193&$194;
 if($or_cond_i){label=27;break;}else{label=28;break;}
 case 27: 
 var $196=(($__tm+8)|0);
 HEAP32[(($196)>>2)]=$190;
 label=70;break;
 case 28: 
 var $198=$191|4;
 HEAP32[(($__err)>>2)]=$198;
 label=70;break;
 case 29: 
 var $200=(($__tm+8)|0);
 var $201=(($__e)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=$9;
 var $204=(($9)|0);
 HEAP32[(($204)>>2)]=$202;
 var $205=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$9,$__err,$63,2);
 var $206=HEAP32[(($__err)>>2)];
 var $207=$206&4;
 var $208=($207|0)==0;
 if($208){label=30;break;}else{label=32;break;}
 case 30: 
 var $_off_i164=((($205)-(1))|0);
 var $210=($_off_i164>>>0)<12;
 if($210){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($200)>>2)]=$205;
 label=70;break;
 case 32: 
 var $213=$206|4;
 HEAP32[(($__err)>>2)]=$213;
 label=70;break;
 case 33: 
 var $215=(($__e)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=$8;
 var $218=(($8)|0);
 HEAP32[(($218)>>2)]=$216;
 var $219=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$8,$__err,$63,3);
 var $220=HEAP32[(($__err)>>2)];
 var $221=$220&4;
 var $222=($221|0)==0;
 var $223=($219|0)<366;
 var $or_cond_i167=$222&$223;
 if($or_cond_i167){label=34;break;}else{label=35;break;}
 case 34: 
 var $225=(($__tm+28)|0);
 HEAP32[(($225)>>2)]=$219;
 label=70;break;
 case 35: 
 var $227=$220|4;
 HEAP32[(($__err)>>2)]=$227;
 label=70;break;
 case 36: 
 var $229=(($__e)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=$7;
 var $232=(($7)|0);
 HEAP32[(($232)>>2)]=$230;
 var $233=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$7,$__err,$63,2);
 var $234=((($233)-(1))|0);
 var $235=HEAP32[(($__err)>>2)];
 var $236=$235&4;
 var $237=($236|0)==0;
 var $238=($234|0)<12;
 var $or_cond_i170=$237&$238;
 if($or_cond_i170){label=37;break;}else{label=38;break;}
 case 37: 
 var $240=(($__tm+16)|0);
 HEAP32[(($240)>>2)]=$234;
 label=70;break;
 case 38: 
 var $242=$235|4;
 HEAP32[(($__err)>>2)]=$242;
 label=70;break;
 case 39: 
 var $244=(($__e)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=$6;
 var $247=(($6)|0);
 HEAP32[(($247)>>2)]=$245;
 var $248=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$6,$__err,$63,2);
 var $249=HEAP32[(($__err)>>2)];
 var $250=$249&4;
 var $251=($250|0)==0;
 var $252=($248|0)<60;
 var $or_cond_i173=$251&$252;
 if($or_cond_i173){label=40;break;}else{label=41;break;}
 case 40: 
 var $254=(($__tm+4)|0);
 HEAP32[(($254)>>2)]=$248;
 label=70;break;
 case 41: 
 var $256=$249|4;
 HEAP32[(($__err)>>2)]=$256;
 label=70;break;
 case 42: 
 var $258=(($__e)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=(($24)|0);
 HEAP32[(($260)>>2)]=$259;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$24,$__err,$63);
 label=70;break;
 case 43: 
 var $262=(($__tm+8)|0);
 var $263=(($__e)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=(($25)|0);
 HEAP32[(($265)>>2)]=$264;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$262,$__b,$25,$__err,$63);
 label=70;break;
 case 44: 
 var $267=(($__b)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=(($27)|0);
 HEAP32[(($269)>>2)]=$268;
 var $270=(($__e)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(($28)|0);
 HEAP32[(($272)>>2)]=$271;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($26,$this,$27,$28,$__iob,$__err,$__tm,5240,5251);
 var $273=(($26)|0);
 var $274=HEAP32[(($273)>>2)];
 HEAP32[(($267)>>2)]=$274;
 label=70;break;
 case 45: 
 var $276=(($__b)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=(($30)|0);
 HEAP32[(($278)>>2)]=$277;
 var $279=(($__e)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($31)|0);
 HEAP32[(($281)>>2)]=$280;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($29,$this,$30,$31,$__iob,$__err,$__tm,5232,5237);
 var $282=(($29)|0);
 var $283=HEAP32[(($282)>>2)];
 HEAP32[(($276)>>2)]=$283;
 label=70;break;
 case 46: 
 var $285=(($__e)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=$5;
 var $288=(($5)|0);
 HEAP32[(($288)>>2)]=$286;
 var $289=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$5,$__err,$63,2);
 var $290=HEAP32[(($__err)>>2)];
 var $291=$290&4;
 var $292=($291|0)==0;
 var $293=($289|0)<61;
 var $or_cond_i176=$292&$293;
 if($or_cond_i176){label=47;break;}else{label=48;break;}
 case 47: 
 var $295=(($__tm)|0);
 HEAP32[(($295)>>2)]=$289;
 label=70;break;
 case 48: 
 var $297=$290|4;
 HEAP32[(($__err)>>2)]=$297;
 label=70;break;
 case 49: 
 var $299=(($__b)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($33)|0);
 HEAP32[(($301)>>2)]=$300;
 var $302=(($__e)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=(($34)|0);
 HEAP32[(($304)>>2)]=$303;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($32,$this,$33,$34,$__iob,$__err,$__tm,5224,5232);
 var $305=(($32)|0);
 var $306=HEAP32[(($305)>>2)];
 HEAP32[(($299)>>2)]=$306;
 label=70;break;
 case 50: 
 var $308=(($__e)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=$4;
 var $311=(($4)|0);
 HEAP32[(($311)>>2)]=$309;
 var $312=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$4,$__err,$63,1);
 var $313=HEAP32[(($__err)>>2)];
 var $314=$313&4;
 var $315=($314|0)==0;
 var $316=($312|0)<7;
 var $or_cond_i179=$315&$316;
 if($or_cond_i179){label=51;break;}else{label=52;break;}
 case 51: 
 var $318=(($__tm+24)|0);
 HEAP32[(($318)>>2)]=$312;
 label=70;break;
 case 52: 
 var $320=$313|4;
 HEAP32[(($__err)>>2)]=$320;
 label=70;break;
 case 53: 
 var $322=$this;
 var $323=HEAP32[(($322)>>2)];
 var $324=(($323+20)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=(($__b)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=(($35)|0);
 HEAP32[(($328)>>2)]=$327;
 var $329=(($__e)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($36)|0);
 HEAP32[(($331)>>2)]=$330;
 FUNCTION_TABLE[$325]($agg_result,$this,$35,$36,$__iob,$__err,$__tm);
 label=71;break;
 case 54: 
 var $333=(($this+8)|0);
 var $334=$333;
 var $335=HEAP32[(($334)>>2)];
 var $336=(($335+24)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=FUNCTION_TABLE[$337]($333);
 var $339=(($__b)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=(($38)|0);
 HEAP32[(($341)>>2)]=$340;
 var $342=(($__e)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=(($39)|0);
 HEAP32[(($344)>>2)]=$343;
 var $345=$338;
 var $346=$338;
 var $347=HEAP8[($346)];
 var $348=$347&1;
 var $349=(($348<<24)>>24)==0;
 if($349){label=56;break;}else{label=55;break;}
 case 55: 
 var $351=(($338+8)|0);
 var $352=HEAP32[(($351)>>2)];
 var $357=$352;var $356=$352;label=57;break;
 case 56: 
 var $354=(($345+1)|0);
 var $355=(($345+1)|0);
 var $357=$355;var $356=$354;label=57;break;
 case 57: 
 var $356;
 var $357;
 var $358=($347&255);
 var $359=$358&1;
 var $360=($359|0)==0;
 if($360){label=59;break;}else{label=58;break;}
 case 58: 
 var $362=(($338+4)|0);
 var $363=HEAP32[(($362)>>2)];
 var $366=$363;label=60;break;
 case 59: 
 var $365=$358>>>1;
 var $366=$365;label=60;break;
 case 60: 
 var $366;
 var $367=(($357+$366)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($37,$this,$38,$39,$__iob,$__err,$__tm,$356,$367);
 var $368=(($37)|0);
 var $369=HEAP32[(($368)>>2)];
 HEAP32[(($339)>>2)]=$369;
 label=70;break;
 case 61: 
 var $371=(($__tm+20)|0);
 var $372=(($__e)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=$3;
 var $375=(($3)|0);
 HEAP32[(($375)>>2)]=$373;
 var $376=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$3,$__err,$63,4);
 var $377=HEAP32[(($__err)>>2)];
 var $378=$377&4;
 var $379=($378|0)==0;
 if($379){label=62;break;}else{label=70;break;}
 case 62: 
 var $381=($376|0)<69;
 if($381){label=63;break;}else{label=64;break;}
 case 63: 
 var $383=((($376)+(2000))|0);
 var $__t_0_i=$383;label=65;break;
 case 64: 
 var $_off_i182=((($376)-(69))|0);
 var $385=($_off_i182>>>0)<31;
 var $386=((($376)+(1900))|0);
 var $__i=($385?$386:$376);
 var $__t_0_i=$__i;label=65;break;
 case 65: 
 var $__t_0_i;
 var $388=((($__t_0_i)-(1900))|0);
 HEAP32[(($371)>>2)]=$388;
 label=70;break;
 case 66: 
 var $390=(($__e)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=$2;
 var $393=(($2)|0);
 HEAP32[(($393)>>2)]=$391;
 var $394=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$2,$__err,$63,4);
 var $395=HEAP32[(($__err)>>2)];
 var $396=$395&4;
 var $397=($396|0)==0;
 if($397){label=67;break;}else{label=70;break;}
 case 67: 
 var $399=(($__tm+20)|0);
 var $400=((($394)-(1900))|0);
 HEAP32[(($399)>>2)]=$400;
 label=70;break;
 case 68: 
 var $402=(($__e)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=(($40)|0);
 HEAP32[(($404)>>2)]=$403;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$40,$__err,$63);
 label=70;break;
 case 69: 
 var $406=HEAP32[(($__err)>>2)];
 var $407=$406|4;
 HEAP32[(($__err)>>2)]=$407;
 label=70;break;
 case 70: 
 var $408=(($__b)|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=(($agg_result)|0);
 HEAP32[(($410)>>2)]=$409;
 label=71;break;
 case 71: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=(($__e)|0);
 var $3=(($__ct+8)|0);
 label=2;break;
 case 2: 
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 if($5){var $19=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=4;break;}else{var $19=$4;label=7;break;}
 case 4: 
 var $12=$4;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($4);
 var $17=($16|0)==-1;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $_pre=HEAP32[(($1)>>2)];
 var $19=$_pre;label=7;break;
 case 6: 
 HEAP32[(($1)>>2)]=0;
 var $19=0;label=7;break;
 case 7: 
 var $19;
 var $20=($19|0)==0;
 var $21=HEAP32[(($2)>>2)];
 var $22=($21|0)==0;
 if($22){label=12;break;}else{label=8;break;}
 case 8: 
 var $24=(($21+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($21+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($25|0)==($27|0);
 if($28){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=$21;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($21);
 var $34=($33|0)==-1;
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($2)>>2)]=0;
 label=12;break;
 case 11: 
 if($20){var $38=$21;var $37=0;label=13;break;}else{var $76=$21;var $75=0;label=21;break;}
 case 12: 
 if($20){var $76=0;var $75=1;label=21;break;}else{var $38=0;var $37=1;label=13;break;}
 case 13: 
 var $37;
 var $38;
 var $39=HEAP32[(($1)>>2)];
 var $40=(($39+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($39+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=$39;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=FUNCTION_TABLE[$49]($39);
 var $extract_t=(($50)&255);
 var $_054_off0=$extract_t;label=16;break;
 case 15: 
 var $52=HEAP8[($41)];
 var $_054_off0=$52;label=16;break;
 case 16: 
 var $_054_off0;
 var $53=(($_054_off0<<24)>>24)<0;
 if($53){var $76=$38;var $75=$37;label=21;break;}else{label=17;break;}
 case 17: 
 var $54=(($_054_off0<<24)>>24);
 var $55=HEAP32[(($3)>>2)];
 var $56=(($55+($54<<1))|0);
 var $57=HEAP16[(($56)>>1)];
 var $58=$57&8192;
 var $59=(($58<<16)>>16)==0;
 if($59){var $76=$38;var $75=$37;label=21;break;}else{label=18;break;}
 case 18: 
 var $61=HEAP32[(($1)>>2)];
 var $62=(($61+12)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($61+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($63|0)==($65|0);
 if($66){label=19;break;}else{label=20;break;}
 case 19: 
 var $68=$61;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+40)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=FUNCTION_TABLE[$71]($61);
 label=2;break;
 case 20: 
 var $74=(($63+1)|0);
 HEAP32[(($62)>>2)]=$74;
 label=2;break;
 case 21: 
 var $75;
 var $76;
 var $77=HEAP32[(($1)>>2)];
 var $78=($77|0)==0;
 if($78){var $92=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $80=(($77+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($77+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=23;break;}else{var $92=$77;label=26;break;}
 case 23: 
 var $85=$77;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($77);
 var $90=($89|0)==-1;
 if($90){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre61=HEAP32[(($1)>>2)];
 var $92=$_pre61;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $92=0;label=26;break;
 case 26: 
 var $92;
 var $93=($92|0)==0;
 if($75){label=31;break;}else{label=27;break;}
 case 27: 
 var $95=(($76+12)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($76+16)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($96|0)==($98|0);
 if($99){label=28;break;}else{label=32;break;}
 case 28: 
 var $100=$76;
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+36)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=FUNCTION_TABLE[$103]($76);
 var $105=($104|0)==-1;
 if($105){label=30;break;}else{label=29;break;}
 case 29: 
 if($93){label=34;break;}else{label=33;break;}
 case 30: 
 HEAP32[(($2)>>2)]=0;
 label=31;break;
 case 31: 
 if($93){label=33;break;}else{label=34;break;}
 case 32: 
 var $107=($76|0)==0;
 var $tmp57=$93^$107;
 if($tmp57){label=34;break;}else{label=33;break;}
 case 33: 
 var $109=HEAP32[(($__err)>>2)];
 var $110=$109|2;
 HEAP32[(($__err)>>2)]=$110;
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+8)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=FUNCTION_TABLE[$6]($2);
 var $8=$7;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10&1;
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 var $14=(($7+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$10>>>1;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 var $19=(($7+12)|0);
 var $20=$19;
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=$22&1;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=5;break;}
 case 5: 
 var $26=(($7+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $30=$27;label=7;break;
 case 6: 
 var $29=$22>>>1;
 var $30=$29;label=7;break;
 case 7: 
 var $30;
 var $31=(((-$30))|0);
 var $32=($18|0)==($31|0);
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=HEAP32[(($__err)>>2)];
 var $35=$34|4;
 HEAP32[(($__err)>>2)]=$35;
 label=15;break;
 case 9: 
 var $37=(($__e)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($1)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($7+24)|0);
 var $41=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$7,$40,$__ct,$__err,0);
 var $42=$41;
 var $43=$7;
 var $44=((($42)-($43))|0);
 var $45=($41|0)==($7|0);
 if($45){label=10;break;}else{label=12;break;}
 case 10: 
 var $47=HEAP32[(($__h)>>2)];
 var $48=($47|0)==12;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($__h)>>2)]=0;
 label=15;break;
 case 12: 
 var $51=($44|0)==12;
 if($51){label=13;break;}else{label=15;break;}
 case 13: 
 var $53=HEAP32[(($__h)>>2)];
 var $54=($53|0)<12;
 if($54){label=14;break;}else{label=15;break;}
 case 14: 
 var $56=((($53)+(12))|0);
 HEAP32[(($__h)>>2)]=$56;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre=HEAP32[(($1)>>2)];
 var $17=$_pre;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=(($20+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $28=$20;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($20);
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($19)>>2)]=0;
 label=11;break;
 case 10: 
 if($18){var $40=$20;var $39=0;label=13;break;}else{label=12;break;}
 case 11: 
 if($18){label=12;break;}else{var $40=0;var $39=1;label=13;break;}
 case 12: 
 var $36=HEAP32[(($__err)>>2)];
 var $37=$36|6;
 HEAP32[(($__err)>>2)]=$37;
 label=34;break;
 case 13: 
 var $39;
 var $40;
 var $41=HEAP32[(($1)>>2)];
 var $42=(($41+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($41+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$41;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=FUNCTION_TABLE[$51]($41);
 var $extract_t=(($52)&255);
 var $_053_off0=$extract_t;label=16;break;
 case 15: 
 var $54=HEAP8[($43)];
 var $_053_off0=$54;label=16;break;
 case 16: 
 var $_053_off0;
 var $55=$__ct;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+36)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=FUNCTION_TABLE[$58]($__ct,$_053_off0,0);
 var $60=(($59<<24)>>24)==37;
 if($60){label=18;break;}else{label=17;break;}
 case 17: 
 var $62=HEAP32[(($__err)>>2)];
 var $63=$62|4;
 HEAP32[(($__err)>>2)]=$63;
 label=34;break;
 case 18: 
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65+12)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($65+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)==($69|0);
 if($70){label=19;break;}else{label=20;break;}
 case 19: 
 var $72=$65;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+40)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($65);
 label=21;break;
 case 20: 
 var $78=(($67+1)|0);
 HEAP32[(($66)>>2)]=$78;
 label=21;break;
 case 21: 
 var $79=HEAP32[(($1)>>2)];
 var $80=($79|0)==0;
 if($80){var $94=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $82=(($79+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($79+16)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($83|0)==($85|0);
 if($86){label=23;break;}else{var $94=$79;label=26;break;}
 case 23: 
 var $87=$79;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=FUNCTION_TABLE[$90]($79);
 var $92=($91|0)==-1;
 if($92){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre58=HEAP32[(($1)>>2)];
 var $94=$_pre58;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $94=0;label=26;break;
 case 26: 
 var $94;
 var $95=($94|0)==0;
 if($39){label=31;break;}else{label=27;break;}
 case 27: 
 var $97=(($40+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($40+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=28;break;}else{label=32;break;}
 case 28: 
 var $102=$40;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+36)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($40);
 var $107=($106|0)==-1;
 if($107){label=30;break;}else{label=29;break;}
 case 29: 
 if($95){label=34;break;}else{label=33;break;}
 case 30: 
 HEAP32[(($19)>>2)]=0;
 label=31;break;
 case 31: 
 if($95){label=33;break;}else{label=34;break;}
 case 32: 
 var $109=($40|0)==0;
 var $tmp57=$95^$109;
 if($tmp57){label=34;break;}else{label=33;break;}
 case 33: 
 var $111=HEAP32[(($__err)>>2)];
 var $112=$111|2;
 HEAP32[(($__err)>>2)]=$112;
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre=HEAP32[(($1)>>2)];
 var $17=$_pre;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=(($20+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $28=$20;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($20);
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($19)>>2)]=0;
 label=11;break;
 case 10: 
 if($18){var $39=$20;label=13;break;}else{label=12;break;}
 case 11: 
 if($18){label=12;break;}else{var $39=0;label=13;break;}
 case 12: 
 var $36=HEAP32[(($__err)>>2)];
 var $37=$36|6;
 HEAP32[(($__err)>>2)]=$37;
 var $_0102=0;label=53;break;
 case 13: 
 var $39;
 var $40=HEAP32[(($1)>>2)];
 var $41=(($40+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($40+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($42|0)==($44|0);
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=$40;
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+36)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=FUNCTION_TABLE[$50]($40);
 var $extract_t=(($51)&255);
 var $_0107_off0=$extract_t;label=16;break;
 case 15: 
 var $53=HEAP8[($42)];
 var $_0107_off0=$53;label=16;break;
 case 16: 
 var $_0107_off0;
 var $54=(($_0107_off0<<24)>>24)<0;
 if($54){label=18;break;}else{label=17;break;}
 case 17: 
 var $55=(($_0107_off0<<24)>>24);
 var $56=(($__ct+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+($55<<1))|0);
 var $59=HEAP16[(($58)>>1)];
 var $60=$59&2048;
 var $61=(($60<<16)>>16)==0;
 if($61){label=18;break;}else{label=19;break;}
 case 18: 
 var $62=HEAP32[(($__err)>>2)];
 var $63=$62|4;
 HEAP32[(($__err)>>2)]=$63;
 var $_0102=0;label=53;break;
 case 19: 
 var $65=$__ct;
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+36)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=FUNCTION_TABLE[$68]($__ct,$_0107_off0,0);
 var $70=(($69<<24)>>24);
 var $71=HEAP32[(($1)>>2)];
 var $72=(($71+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($71+16)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($73|0)==($75|0);
 if($76){label=20;break;}else{label=21;break;}
 case 20: 
 var $78=$71;
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+40)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=FUNCTION_TABLE[$81]($71);
 var $__r_0_in=$70;var $_0_in=$__n;var $85=$39;label=22;break;
 case 21: 
 var $84=(($73+1)|0);
 HEAP32[(($72)>>2)]=$84;
 var $__r_0_in=$70;var $_0_in=$__n;var $85=$39;label=22;break;
 case 22: 
 var $85;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $86=HEAP32[(($1)>>2)];
 var $87=($86|0)==0;
 if($87){var $101=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $89=(($86+12)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($86+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($90|0)==($92|0);
 if($93){label=24;break;}else{var $101=$86;label=27;break;}
 case 24: 
 var $94=$86;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+36)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($86);
 var $99=($98|0)==-1;
 if($99){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre123=HEAP32[(($1)>>2)];
 var $101=$_pre123;label=27;break;
 case 26: 
 HEAP32[(($1)>>2)]=0;
 var $101=0;label=27;break;
 case 27: 
 var $101;
 var $102=($101|0)==0;
 var $103=($85|0)==0;
 if($103){var $119=$101;var $118=0;label=32;break;}else{label=28;break;}
 case 28: 
 var $105=(($85+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($85+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=29;break;}else{var $117=$85;label=31;break;}
 case 29: 
 var $110=$85;
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111+36)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=FUNCTION_TABLE[$113]($85);
 var $115=($114|0)==-1;
 if($115){label=30;break;}else{var $117=$85;label=31;break;}
 case 30: 
 HEAP32[(($19)>>2)]=0;
 var $117=0;label=31;break;
 case 31: 
 var $117;
 var $_pr=HEAP32[(($1)>>2)];
 var $119=$_pr;var $118=$117;label=32;break;
 case 32: 
 var $118;
 var $119;
 var $120=($118|0)==0;
 var $121=$102^$120;
 var $122=($_0|0)>0;
 var $_=$121&$122;
 if($_){label=33;break;}else{label=41;break;}
 case 33: 
 var $124=(($119+12)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($119+16)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($125|0)==($127|0);
 if($128){label=34;break;}else{label=35;break;}
 case 34: 
 var $130=$119;
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+36)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=FUNCTION_TABLE[$133]($119);
 var $extract_t113=(($134)&255);
 var $_0103_off0=$extract_t113;label=36;break;
 case 35: 
 var $136=HEAP8[($125)];
 var $_0103_off0=$136;label=36;break;
 case 36: 
 var $_0103_off0;
 var $137=(($_0103_off0<<24)>>24)<0;
 if($137){var $_0102=$__r_0;label=53;break;}else{label=37;break;}
 case 37: 
 var $138=(($_0103_off0<<24)>>24);
 var $139=HEAP32[(($56)>>2)];
 var $140=(($139+($138<<1))|0);
 var $141=HEAP16[(($140)>>1)];
 var $142=$141&2048;
 var $143=(($142<<16)>>16)==0;
 if($143){var $_0102=$__r_0;label=53;break;}else{label=38;break;}
 case 38: 
 var $145=((($__r_0)*(10))&-1);
 var $146=HEAP32[(($65)>>2)];
 var $147=(($146+36)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=FUNCTION_TABLE[$148]($__ct,$_0103_off0,0);
 var $150=(($149<<24)>>24);
 var $151=((($150)+($145))|0);
 var $152=HEAP32[(($1)>>2)];
 var $153=(($152+12)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($152+16)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=($154|0)==($156|0);
 if($157){label=39;break;}else{label=40;break;}
 case 39: 
 var $159=$152;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+40)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=FUNCTION_TABLE[$162]($152);
 var $__r_0_in=$151;var $_0_in=$_0;var $85=$118;label=22;break;
 case 40: 
 var $165=(($154+1)|0);
 HEAP32[(($153)>>2)]=$165;
 var $__r_0_in=$151;var $_0_in=$_0;var $85=$118;label=22;break;
 case 41: 
 var $167=($119|0)==0;
 if($167){var $181=0;label=46;break;}else{label=42;break;}
 case 42: 
 var $169=(($119+12)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(($119+16)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=($170|0)==($172|0);
 if($173){label=43;break;}else{var $181=$119;label=46;break;}
 case 43: 
 var $174=$119;
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+36)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=FUNCTION_TABLE[$177]($119);
 var $179=($178|0)==-1;
 if($179){label=45;break;}else{label=44;break;}
 case 44: 
 var $_pre124=HEAP32[(($1)>>2)];
 var $181=$_pre124;label=46;break;
 case 45: 
 HEAP32[(($1)>>2)]=0;
 var $181=0;label=46;break;
 case 46: 
 var $181;
 var $182=($181|0)==0;
 if($120){label=51;break;}else{label=47;break;}
 case 47: 
 var $184=(($118+12)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($118+16)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($185|0)==($187|0);
 if($188){label=48;break;}else{label=50;break;}
 case 48: 
 var $189=$118;
 var $190=HEAP32[(($189)>>2)];
 var $191=(($190+36)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=FUNCTION_TABLE[$192]($118);
 var $194=($193|0)==-1;
 if($194){label=49;break;}else{label=50;break;}
 case 49: 
 HEAP32[(($19)>>2)]=0;
 label=51;break;
 case 50: 
 if($182){var $_0102=$__r_0;label=53;break;}else{label=52;break;}
 case 51: 
 if($182){label=52;break;}else{var $_0102=$__r_0;label=53;break;}
 case 52: 
 var $197=HEAP32[(($__err)>>2)];
 var $198=$197|2;
 HEAP32[(($__err)>>2)]=$198;
 var $_0102=$__r_0;label=53;break;
 case 53: 
 var $_0102;
 STACKTOP=sp;return $_0102;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $5=(($1)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$__p_i_i_i;
 var $8=HEAP32[((16832)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$7,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=26;break; }
 case 3: 
 var $11=HEAP32[((16836)>>2)];
 var $12=((($11)-(1))|0);
 var $13=(($6+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($6+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14;
 var $18=$16;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>($12>>>0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=(($16+($12<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 __ZNSt8bad_castC2Ev($26);
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=26;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$23;
 var $28=HEAP32[(($5)>>2)];
 var $29=(($28)|0);
 var $30=__ZNSt3__114__shared_count16__release_sharedEv($29);
 HEAP32[(($__err)>>2)]=0;
 var $31=($__fmtb|0)==($__fmte|0);
 var $_phi_trans_insert_pre_pre=(($__b)|0);
 if($31){label=71;break;}else{label=8;break;}
 case 8: 
 var $32=(($__e)|0);
 var $33=$23;
 var $34=$23;
 var $35=$23;
 var $36=$this;
 var $37=(($3)|0);
 var $38=(($4)|0);
 var $39=(($2)|0);
 var $_0134_ph154=$__fmtb;var $_pre155=0;label=9;break;
 case 9: 
 var $_pre155;
 var $_0134_ph154;
 var $41=$_pre155;label=10;break;
 case 10: 
 var $41;
 var $42=($41|0)==0;
 if($42){label=11;break;}else{label=71;break;}
 case 11: 
 var $44=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $45=($44|0)==0;
 if($45){var $62=0;label=17;break;}else{label=12;break;}
 case 12: 
 var $47=(($44+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($44+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($48|0)==($50|0);
 if($51){label=13;break;}else{label=14;break;}
 case 13: 
 var $53=$44;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($44);
 var $_0140=$57;label=15;break;
 case 14: 
 var $59=HEAP32[(($48)>>2)];
 var $_0140=$59;label=15;break;
 case 15: 
 var $_0140;
 var $60=($_0140|0)==-1;
 if($60){label=16;break;}else{var $62=$44;label=17;break;}
 case 16: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $62=0;label=17;break;
 case 17: 
 var $62;
 var $63=($62|0)==0;
 var $64=HEAP32[(($32)>>2)];
 var $65=($64|0)==0;
 if($65){label=23;break;}else{label=18;break;}
 case 18: 
 var $67=(($64+12)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($64+16)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($68|0)==($70|0);
 if($71){label=19;break;}else{label=20;break;}
 case 19: 
 var $73=$64;
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+36)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=FUNCTION_TABLE[$76]($64);
 var $_0139=$77;label=21;break;
 case 20: 
 var $79=HEAP32[(($68)>>2)];
 var $_0139=$79;label=21;break;
 case 21: 
 var $_0139;
 var $80=($_0139|0)==-1;
 if($80){label=22;break;}else{label=24;break;}
 case 22: 
 HEAP32[(($32)>>2)]=0;
 label=23;break;
 case 23: 
 if($63){label=25;break;}else{var $90=0;label=27;break;}
 case 24: 
 var $82=($64|0)==0;
 var $tmp141=$63^$82;
 if($tmp141){var $90=$64;label=27;break;}else{label=25;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $245=$62;label=72;break;
 case 26: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1); var $85$1 = tempRet0;
 var $86=HEAP32[(($5)>>2)];
 var $87=(($86)|0);
 var $88=__ZNSt3__114__shared_count16__release_sharedEv($87);
 ___resumeException($85$0)
 case 27: 
 var $90;
 var $91=HEAP32[(($_0134_ph154)>>2)];
 var $92=HEAP32[(($33)>>2)];
 var $93=(($92+52)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=FUNCTION_TABLE[$94]($27,$91,0);
 var $96=(($95<<24)>>24)==37;
 if($96){label=28;break;}else{label=37;break;}
 case 28: 
 var $98=(($_0134_ph154+4)|0);
 var $99=($98|0)==($__fmte|0);
 if($99){label=29;break;}else{label=30;break;}
 case 29: 
 HEAP32[(($__err)>>2)]=4;
 var $245=$62;label=72;break;
 case 30: 
 var $102=HEAP32[(($98)>>2)];
 var $103=HEAP32[(($33)>>2)];
 var $104=(($103+52)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($27,$102,0);
 if((($106<<24)>>24)==69|(($106<<24)>>24)==48){ label=31;break;}else{var $__opt_0=0;var $__cmd_0=$106;var $_1=$98;label=34;break;}
 case 31: 
 var $108=(($_0134_ph154+8)|0);
 var $109=($108|0)==($__fmte|0);
 if($109){label=32;break;}else{label=33;break;}
 case 32: 
 HEAP32[(($__err)>>2)]=4;
 var $245=$62;label=72;break;
 case 33: 
 var $112=HEAP32[(($108)>>2)];
 var $113=HEAP32[(($33)>>2)];
 var $114=(($113+52)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=FUNCTION_TABLE[$115]($27,$112,0);
 var $__opt_0=$106;var $__cmd_0=$116;var $_1=$108;label=34;break;
 case 34: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $118=HEAP32[(($36)>>2)];
 var $119=(($118+36)|0);
 var $120=HEAP32[(($119)>>2)];
 HEAP32[(($37)>>2)]=$62;
 HEAP32[(($38)>>2)]=$90;
 FUNCTION_TABLE[$120]($2,$this,$3,$4,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $121=HEAP32[(($39)>>2)];
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$121;
 var $122=(($_1+4)|0);
 var $_0134_ph_be=$122;label=35;break;
 case 35: 
 var $_0134_ph_be;
 var $123=($_0134_ph_be|0)==($__fmte|0);
 if($123){label=71;break;}else{label=36;break;}
 case 36: 
 var $_pre155_pre=HEAP32[(($__err)>>2)];
 var $_0134_ph154=$_0134_ph_be;var $_pre155=$_pre155_pre;label=9;break;
 case 37: 
 var $125=HEAP32[(($_0134_ph154)>>2)];
 var $126=HEAP32[(($34)>>2)];
 var $127=(($126+12)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=FUNCTION_TABLE[$128]($27,8192,$125);
 if($129){var $_0134_pn=$_0134_ph154;label=38;break;}else{label=62;break;}
 case 38: 
 var $_0134_pn;
 var $_2=(($_0134_pn+4)|0);
 var $130=($_2|0)==($__fmte|0);
 if($130){var $_2_lcssa=$__fmte;label=40;break;}else{label=39;break;}
 case 39: 
 var $132=HEAP32[(($_2)>>2)];
 var $133=HEAP32[(($34)>>2)];
 var $134=(($133+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=FUNCTION_TABLE[$135]($27,8192,$132);
 if($136){var $_0134_pn=$_2;label=38;break;}else{var $_2_lcssa=$_2;label=40;break;}
 case 40: 
 var $_2_lcssa;
 var $138=$62;var $137=$90;label=41;break;
 case 41: 
 var $137;
 var $138;
 var $139=($138|0)==0;
 if($139){var $156=0;label=47;break;}else{label=42;break;}
 case 42: 
 var $141=(($138+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($138+16)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){label=43;break;}else{label=44;break;}
 case 43: 
 var $147=$138;
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148+36)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=FUNCTION_TABLE[$150]($138);
 var $_0138=$151;label=45;break;
 case 44: 
 var $153=HEAP32[(($142)>>2)];
 var $_0138=$153;label=45;break;
 case 45: 
 var $_0138;
 var $154=($_0138|0)==-1;
 if($154){label=46;break;}else{var $156=$138;label=47;break;}
 case 46: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $156=0;label=47;break;
 case 47: 
 var $156;
 var $157=($156|0)==0;
 var $158=($137|0)==0;
 if($158){label=53;break;}else{label=48;break;}
 case 48: 
 var $160=(($137+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($137+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=49;break;}else{label=50;break;}
 case 49: 
 var $166=$137;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=FUNCTION_TABLE[$169]($137);
 var $_0137=$170;label=51;break;
 case 50: 
 var $172=HEAP32[(($161)>>2)];
 var $_0137=$172;label=51;break;
 case 51: 
 var $_0137;
 var $173=($_0137|0)==-1;
 if($173){label=52;break;}else{label=54;break;}
 case 52: 
 HEAP32[(($32)>>2)]=0;
 label=53;break;
 case 53: 
 if($157){var $_0134_ph_be=$_2_lcssa;label=35;break;}else{var $178=0;label=55;break;}
 case 54: 
 var $175=($137|0)==0;
 var $176=$157^$175;
 if($176){var $178=$137;label=55;break;}else{var $_0134_ph_be=$_2_lcssa;label=35;break;}
 case 55: 
 var $178;
 var $179=(($156+12)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($156+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($180|0)==($182|0);
 if($183){label=56;break;}else{label=57;break;}
 case 56: 
 var $185=$156;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=FUNCTION_TABLE[$188]($156);
 var $_0136=$189;label=58;break;
 case 57: 
 var $191=HEAP32[(($180)>>2)];
 var $_0136=$191;label=58;break;
 case 58: 
 var $_0136;
 var $192=HEAP32[(($34)>>2)];
 var $193=(($192+12)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=FUNCTION_TABLE[$194]($27,8192,$_0136);
 if($195){label=59;break;}else{var $_0134_ph_be=$_2_lcssa;label=35;break;}
 case 59: 
 var $197=HEAP32[(($179)>>2)];
 var $198=HEAP32[(($181)>>2)];
 var $199=($197|0)==($198|0);
 if($199){label=60;break;}else{label=61;break;}
 case 60: 
 var $201=$156;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+40)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=FUNCTION_TABLE[$204]($156);
 var $138=$156;var $137=$178;label=41;break;
 case 61: 
 var $207=(($197+4)|0);
 HEAP32[(($179)>>2)]=$207;
 var $138=$156;var $137=$178;label=41;break;
 case 62: 
 var $209=(($62+12)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($62+16)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($210|0)==($212|0);
 if($213){label=63;break;}else{label=64;break;}
 case 63: 
 var $215=$62;
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+36)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=FUNCTION_TABLE[$218]($62);
 var $_0133=$219;label=65;break;
 case 64: 
 var $221=HEAP32[(($210)>>2)];
 var $_0133=$221;label=65;break;
 case 65: 
 var $_0133;
 var $222=HEAP32[(($35)>>2)];
 var $223=(($222+28)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=FUNCTION_TABLE[$224]($27,$_0133);
 var $226=HEAP32[(($_0134_ph154)>>2)];
 var $227=HEAP32[(($35)>>2)];
 var $228=(($227+28)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=FUNCTION_TABLE[$229]($27,$226);
 var $231=($225|0)==($230|0);
 if($231){label=66;break;}else{label=70;break;}
 case 66: 
 var $233=HEAP32[(($209)>>2)];
 var $234=HEAP32[(($211)>>2)];
 var $235=($233|0)==($234|0);
 if($235){label=67;break;}else{label=68;break;}
 case 67: 
 var $237=$62;
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+40)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=FUNCTION_TABLE[$240]($62);
 label=69;break;
 case 68: 
 var $243=(($233+4)|0);
 HEAP32[(($209)>>2)]=$243;
 label=69;break;
 case 69: 
 var $244=(($_0134_ph154+4)|0);
 var $_0134_ph_be=$244;label=35;break;
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 var $41=4;label=10;break;
 case 71: 
 var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $245=$_pre;label=72;break;
 case 72: 
 var $245;
 var $246=(($__b)|0);
 var $247=($245|0)==0;
 if($247){label=78;break;}else{label=73;break;}
 case 73: 
 var $249=(($245+12)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($245+16)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=($250|0)==($252|0);
 if($253){label=74;break;}else{label=75;break;}
 case 74: 
 var $255=$245;
 var $256=HEAP32[(($255)>>2)];
 var $257=(($256+36)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=FUNCTION_TABLE[$258]($245);
 var $_0131=$259;label=76;break;
 case 75: 
 var $261=HEAP32[(($250)>>2)];
 var $_0131=$261;label=76;break;
 case 76: 
 var $_0131;
 var $262=($_0131|0)==-1;
 if($262){label=77;break;}else{label=78;break;}
 case 77: 
 HEAP32[(($246)>>2)]=0;
 label=78;break;
 case 78: 
 var $264=HEAP32[(($246)>>2)];
 var $265=($264|0)==0;
 var $266=(($__e)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==0;
 if($268){label=84;break;}else{label=79;break;}
 case 79: 
 var $270=(($267+12)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(($267+16)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($271|0)==($273|0);
 if($274){label=80;break;}else{label=81;break;}
 case 80: 
 var $276=$267;
 var $277=HEAP32[(($276)>>2)];
 var $278=(($277+36)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=FUNCTION_TABLE[$279]($267);
 var $_0=$280;label=82;break;
 case 81: 
 var $282=HEAP32[(($271)>>2)];
 var $_0=$282;label=82;break;
 case 82: 
 var $_0;
 var $283=($_0|0)==-1;
 if($283){label=83;break;}else{label=85;break;}
 case 83: 
 HEAP32[(($266)>>2)]=0;
 label=84;break;
 case 84: 
 if($265){label=86;break;}else{label=87;break;}
 case 85: 
 var $285=($267|0)==0;
 var $tmp=$265^$285;
 if($tmp){label=87;break;}else{label=86;break;}
 case 86: 
 var $287=HEAP32[(($__err)>>2)];
 var $288=$287|2;
 HEAP32[(($__err)>>2)]=$288;
 label=87;break;
 case 87: 
 var $290=(($agg_result)|0);
 HEAP32[(($290)>>2)]=$264;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this){
 var label=0;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,5192,5224);
 STACKTOP=sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($this+8)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($3);
 var $9=(($__b)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($__e)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$8;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $26=$21;var $25=$21;label=4;break;
 case 3: 
 var $23=(($8+4)|0);
 var $24=(($8+4)|0);
 var $26=$24;var $25=$23;label=4;break;
 case 4: 
 var $25;
 var $26;
 var $27=($16&255);
 var $28=$27&1;
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=5;break;}
 case 5: 
 var $31=(($8+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $35=$32;label=7;break;
 case 6: 
 var $34=$27>>>1;
 var $35=$34;label=7;break;
 case 7: 
 var $35;
 var $36=(($26+($35<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,$25,$36);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((16832)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$5,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $9=HEAP32[((16836)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__e)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$1;
 var $32=(($this+8)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=HEAP32[(($34)>>2)];
 var $36=FUNCTION_TABLE[$35]($32);
 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$30;
 var $38=(($36+168)|0);
 var $39=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$36,$38,$25,$__err,0);
 var $40=$39;
 var $41=$36;
 var $42=((($40)-($41))|0);
 var $43=($42|0)<168;
 if($43){label=8;break;}else{label=9;break;}
 case 8: 
 var $45=(($__tm+24)|0);
 var $46=(((($42|0))/(12))&-1);
 var $47=(((($46|0))%(7))&-1);
 HEAP32[(($45)>>2)]=$47;
 label=9;break;
 case 9: 
 var $48=(($__b)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($agg_result)|0);
 HEAP32[(($50)>>2)]=$49;
 STACKTOP=sp;return;
 case 10: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 var $53=HEAP32[(($3)>>2)];
 var $54=(($53)|0);
 var $55=__ZNSt3__114__shared_count16__release_sharedEv($54);
 ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((16832)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$5,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $9=HEAP32[((16836)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__e)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$1;
 var $32=(($this+8)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=FUNCTION_TABLE[$36]($32);
 var $38=(($1)|0);
 HEAP32[(($38)>>2)]=$30;
 var $39=(($37+288)|0);
 var $40=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$37,$39,$25,$__err,0);
 var $41=$40;
 var $42=$37;
 var $43=((($41)-($42))|0);
 var $44=($43|0)<288;
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=(($__tm+16)|0);
 var $47=(((($43|0))/(12))&-1);
 var $48=(((($47|0))%(12))&-1);
 HEAP32[(($46)>>2)]=$48;
 label=9;break;
 case 9: 
 var $49=(($__b)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($agg_result)|0);
 HEAP32[(($51)>>2)]=$50;
 STACKTOP=sp;return;
 case 10: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $54=HEAP32[(($3)>>2)];
 var $55=(($54)|0);
 var $56=__ZNSt3__114__shared_count16__release_sharedEv($55);
 ___resumeException($53$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((16832)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$5,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $9=HEAP32[((16836)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__tm+20)|0);
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$1;
 var $33=(($1)|0);
 HEAP32[(($33)>>2)]=$31;
 var $34=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$1,$__err,$25,4);
 var $35=HEAP32[(($__err)>>2)];
 var $36=$35&4;
 var $37=($36|0)==0;
 if($37){label=8;break;}else{label=12;break;}
 case 8: 
 var $39=($34|0)<69;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $41=((($34)+(2000))|0);
 var $__t_0_i=$41;label=11;break;
 case 10: 
 var $_off_i=((($34)-(69))|0);
 var $43=($_off_i>>>0)<31;
 var $44=((($34)+(1900))|0);
 var $__i=($43?$44:$34);
 var $__t_0_i=$__i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $46=((($__t_0_i)-(1900))|0);
 HEAP32[(($29)>>2)]=$46;
 label=12;break;
 case 12: 
 var $47=(($__b)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($agg_result)|0);
 HEAP32[(($49)>>2)]=$48;
 STACKTOP=sp;return;
 case 13: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=HEAP32[(($3)>>2)];
 var $53=(($52)|0);
 var $54=__ZNSt3__114__shared_count16__release_sharedEv($53);
 ___resumeException($51$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 var $11=(sp)+(72);
 var $12=(sp)+(80);
 var $13=(sp)+(88);
 var $__p_i_i_i=(sp)+(96);
 var $14=(sp)+(112);
 var $15=(sp)+(120);
 var $16=(sp)+(128);
 var $17=(sp)+(136);
 var $18=(sp)+(144);
 var $19=(sp)+(152);
 var $20=(sp)+(160);
 var $21=(sp)+(168);
 var $22=(sp)+(176);
 var $23=(sp)+(184);
 var $24=(sp)+(192);
 var $25=(sp)+(200);
 var $26=(sp)+(208);
 var $27=(sp)+(216);
 var $28=(sp)+(224);
 var $29=(sp)+(232);
 var $30=(sp)+(240);
 var $31=(sp)+(248);
 var $32=(sp)+(256);
 var $33=(sp)+(264);
 var $34=(sp)+(272);
 var $35=(sp)+(280);
 var $36=(sp)+(288);
 var $37=(sp)+(296);
 var $38=(sp)+(304);
 var $39=(sp)+(312);
 var $40=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 var $41=(($14)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$__p_i_i_i;
 var $44=HEAP32[((16832)>>2)];
 var $45=($44|0)==-1;
 if($45){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$43,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $47=HEAP32[((16836)>>2)];
 var $48=((($47)-(1))|0);
 var $49=(($42+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($42+8)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$50;
 var $54=$52;
 var $55=((($53)-($54))|0);
 var $56=$55>>2;
 var $57=($56>>>0)>($48>>>0);
 if($57){label=4;break;}else{label=5;break;}
 case 4: 
 var $58=(($52+($48<<2))|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==0;
 if($60){label=5;break;}else{label=7;break;}
 case 5: 
 var $61=___cxa_allocate_exception(4);
 var $62=$61;
 __ZNSt8bad_castC2Ev($62);
 (function() { try { __THREW__ = 0; return ___cxa_throw($61,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $63=$59;
 var $64=HEAP32[(($41)>>2)];
 var $65=(($64)|0);
 var $66=__ZNSt3__114__shared_count16__release_sharedEv($65);
 var $67=(($__fmt<<24)>>24);
 switch(($67|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=20;break;}case 68:{ label=24;break;}case 70:{ label=25;break;}case 72:{ label=26;break;}case 73:{ label=29;break;}case 106:{ label=33;break;}case 109:{ label=36;break;}case 77:{ label=39;break;}case 110:case 116:{ label=42;break;}case 112:{ label=43;break;}case 114:{ label=44;break;}case 82:{ label=45;break;}case 83:{ label=46;break;}case 84:{ label=49;break;}case 119:{ label=50;break;}case 120:{ label=53;break;}case 88:{ label=54;break;}case 121:{ label=61;break;}case 89:{ label=66;break;}case 37:{ label=68;break;}case 97:case 65:{ label=9;break;}default:{label=69;break;}}break;
 case 8: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1); var $69$1 = tempRet0;
 var $70=HEAP32[(($41)>>2)];
 var $71=(($70)|0);
 var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
 ___resumeException($69$0)
 case 9: 
 var $74=(($__e)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$13;
 var $77=(($this+8)|0);
 var $78=$77;
 var $79=HEAP32[(($78)>>2)];
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($77);
 var $82=(($13)|0);
 HEAP32[(($82)>>2)]=$75;
 var $83=(($81+168)|0);
 var $84=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$13,$81,$83,$63,$__err,0);
 var $85=$84;
 var $86=$81;
 var $87=((($85)-($86))|0);
 var $88=($87|0)<168;
 if($88){label=10;break;}else{label=70;break;}
 case 10: 
 var $90=(($__tm+24)|0);
 var $91=(((($87|0))/(12))&-1);
 var $92=(((($91|0))%(7))&-1);
 HEAP32[(($90)>>2)]=$92;
 label=70;break;
 case 11: 
 var $94=(($__e)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$12;
 var $97=(($this+8)|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+4)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=FUNCTION_TABLE[$101]($97);
 var $103=(($12)|0);
 HEAP32[(($103)>>2)]=$95;
 var $104=(($102+288)|0);
 var $105=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$12,$102,$104,$63,$__err,0);
 var $106=$105;
 var $107=$102;
 var $108=((($106)-($107))|0);
 var $109=($108|0)<288;
 if($109){label=12;break;}else{label=70;break;}
 case 12: 
 var $111=(($__tm+16)|0);
 var $112=(((($108|0))/(12))&-1);
 var $113=(((($112|0))%(12))&-1);
 HEAP32[(($111)>>2)]=$113;
 label=70;break;
 case 13: 
 var $115=(($this+8)|0);
 var $116=$115;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=FUNCTION_TABLE[$119]($115);
 var $121=(($__b)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(($16)|0);
 HEAP32[(($123)>>2)]=$122;
 var $124=(($__e)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($17)|0);
 HEAP32[(($126)>>2)]=$125;
 var $127=$120;
 var $128=HEAP8[($127)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=15;break;}else{label=14;break;}
 case 14: 
 var $132=(($120+8)|0);
 var $133=HEAP32[(($132)>>2)];
 var $138=$133;var $137=$133;label=16;break;
 case 15: 
 var $135=(($120+4)|0);
 var $136=(($120+4)|0);
 var $138=$136;var $137=$135;label=16;break;
 case 16: 
 var $137;
 var $138;
 var $139=($128&255);
 var $140=$139&1;
 var $141=($140|0)==0;
 if($141){label=18;break;}else{label=17;break;}
 case 17: 
 var $143=(($120+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $147=$144;label=19;break;
 case 18: 
 var $146=$139>>>1;
 var $147=$146;label=19;break;
 case 19: 
 var $147;
 var $148=(($138+($147<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($15,$this,$16,$17,$__iob,$__err,$__tm,$137,$148);
 var $149=(($15)|0);
 var $150=HEAP32[(($149)>>2)];
 HEAP32[(($121)>>2)]=$150;
 label=70;break;
 case 20: 
 var $152=(($__tm+12)|0);
 var $153=(($__e)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=$11;
 var $156=(($11)|0);
 HEAP32[(($156)>>2)]=$154;
 var $157=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$11,$__err,$63,2);
 var $158=HEAP32[(($__err)>>2)];
 var $159=$158&4;
 var $160=($159|0)==0;
 if($160){label=21;break;}else{label=23;break;}
 case 21: 
 var $_off_i=((($157)-(1))|0);
 var $162=($_off_i>>>0)<31;
 if($162){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($152)>>2)]=$157;
 label=70;break;
 case 23: 
 var $165=$158|4;
 HEAP32[(($__err)>>2)]=$165;
 label=70;break;
 case 24: 
 var $167=(($__b)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($19)|0);
 HEAP32[(($169)>>2)]=$168;
 var $170=(($__e)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($20)|0);
 HEAP32[(($172)>>2)]=$171;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($18,$this,$19,$20,$__iob,$__err,$__tm,5160,5192);
 var $173=(($18)|0);
 var $174=HEAP32[(($173)>>2)];
 HEAP32[(($167)>>2)]=$174;
 label=70;break;
 case 25: 
 var $176=(($__b)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($22)|0);
 HEAP32[(($178)>>2)]=$177;
 var $179=(($__e)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($23)|0);
 HEAP32[(($181)>>2)]=$180;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$22,$23,$__iob,$__err,$__tm,5024,5056);
 var $182=(($21)|0);
 var $183=HEAP32[(($182)>>2)];
 HEAP32[(($176)>>2)]=$183;
 label=70;break;
 case 26: 
 var $185=(($__e)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=$10;
 var $188=(($10)|0);
 HEAP32[(($188)>>2)]=$186;
 var $189=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$10,$__err,$63,2);
 var $190=HEAP32[(($__err)>>2)];
 var $191=$190&4;
 var $192=($191|0)==0;
 var $193=($189|0)<24;
 var $or_cond_i=$192&$193;
 if($or_cond_i){label=27;break;}else{label=28;break;}
 case 27: 
 var $195=(($__tm+8)|0);
 HEAP32[(($195)>>2)]=$189;
 label=70;break;
 case 28: 
 var $197=$190|4;
 HEAP32[(($__err)>>2)]=$197;
 label=70;break;
 case 29: 
 var $199=(($__tm+8)|0);
 var $200=(($__e)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$9;
 var $203=(($9)|0);
 HEAP32[(($203)>>2)]=$201;
 var $204=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$9,$__err,$63,2);
 var $205=HEAP32[(($__err)>>2)];
 var $206=$205&4;
 var $207=($206|0)==0;
 if($207){label=30;break;}else{label=32;break;}
 case 30: 
 var $_off_i164=((($204)-(1))|0);
 var $209=($_off_i164>>>0)<12;
 if($209){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($199)>>2)]=$204;
 label=70;break;
 case 32: 
 var $212=$205|4;
 HEAP32[(($__err)>>2)]=$212;
 label=70;break;
 case 33: 
 var $214=(($__e)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=$8;
 var $217=(($8)|0);
 HEAP32[(($217)>>2)]=$215;
 var $218=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$8,$__err,$63,3);
 var $219=HEAP32[(($__err)>>2)];
 var $220=$219&4;
 var $221=($220|0)==0;
 var $222=($218|0)<366;
 var $or_cond_i167=$221&$222;
 if($or_cond_i167){label=34;break;}else{label=35;break;}
 case 34: 
 var $224=(($__tm+28)|0);
 HEAP32[(($224)>>2)]=$218;
 label=70;break;
 case 35: 
 var $226=$219|4;
 HEAP32[(($__err)>>2)]=$226;
 label=70;break;
 case 36: 
 var $228=(($__e)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=$7;
 var $231=(($7)|0);
 HEAP32[(($231)>>2)]=$229;
 var $232=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$7,$__err,$63,2);
 var $233=((($232)-(1))|0);
 var $234=HEAP32[(($__err)>>2)];
 var $235=$234&4;
 var $236=($235|0)==0;
 var $237=($233|0)<12;
 var $or_cond_i170=$236&$237;
 if($or_cond_i170){label=37;break;}else{label=38;break;}
 case 37: 
 var $239=(($__tm+16)|0);
 HEAP32[(($239)>>2)]=$233;
 label=70;break;
 case 38: 
 var $241=$234|4;
 HEAP32[(($__err)>>2)]=$241;
 label=70;break;
 case 39: 
 var $243=(($__e)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=$6;
 var $246=(($6)|0);
 HEAP32[(($246)>>2)]=$244;
 var $247=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$6,$__err,$63,2);
 var $248=HEAP32[(($__err)>>2)];
 var $249=$248&4;
 var $250=($249|0)==0;
 var $251=($247|0)<60;
 var $or_cond_i173=$250&$251;
 if($or_cond_i173){label=40;break;}else{label=41;break;}
 case 40: 
 var $253=(($__tm+4)|0);
 HEAP32[(($253)>>2)]=$247;
 label=70;break;
 case 41: 
 var $255=$248|4;
 HEAP32[(($__err)>>2)]=$255;
 label=70;break;
 case 42: 
 var $257=(($__e)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=(($24)|0);
 HEAP32[(($259)>>2)]=$258;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$24,$__err,$63);
 label=70;break;
 case 43: 
 var $261=(($__tm+8)|0);
 var $262=(($__e)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($25)|0);
 HEAP32[(($264)>>2)]=$263;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$261,$__b,$25,$__err,$63);
 label=70;break;
 case 44: 
 var $266=(($__b)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($27)|0);
 HEAP32[(($268)>>2)]=$267;
 var $269=(($__e)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(($28)|0);
 HEAP32[(($271)>>2)]=$270;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($26,$this,$27,$28,$__iob,$__err,$__tm,5112,5156);
 var $272=(($26)|0);
 var $273=HEAP32[(($272)>>2)];
 HEAP32[(($266)>>2)]=$273;
 label=70;break;
 case 45: 
 var $275=(($__b)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(($30)|0);
 HEAP32[(($277)>>2)]=$276;
 var $278=(($__e)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($31)|0);
 HEAP32[(($280)>>2)]=$279;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($29,$this,$30,$31,$__iob,$__err,$__tm,5088,5108);
 var $281=(($29)|0);
 var $282=HEAP32[(($281)>>2)];
 HEAP32[(($275)>>2)]=$282;
 label=70;break;
 case 46: 
 var $284=(($__e)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=$5;
 var $287=(($5)|0);
 HEAP32[(($287)>>2)]=$285;
 var $288=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$5,$__err,$63,2);
 var $289=HEAP32[(($__err)>>2)];
 var $290=$289&4;
 var $291=($290|0)==0;
 var $292=($288|0)<61;
 var $or_cond_i176=$291&$292;
 if($or_cond_i176){label=47;break;}else{label=48;break;}
 case 47: 
 var $294=(($__tm)|0);
 HEAP32[(($294)>>2)]=$288;
 label=70;break;
 case 48: 
 var $296=$289|4;
 HEAP32[(($__err)>>2)]=$296;
 label=70;break;
 case 49: 
 var $298=(($__b)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($33)|0);
 HEAP32[(($300)>>2)]=$299;
 var $301=(($__e)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($34)|0);
 HEAP32[(($303)>>2)]=$302;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($32,$this,$33,$34,$__iob,$__err,$__tm,5056,5088);
 var $304=(($32)|0);
 var $305=HEAP32[(($304)>>2)];
 HEAP32[(($298)>>2)]=$305;
 label=70;break;
 case 50: 
 var $307=(($__e)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=$4;
 var $310=(($4)|0);
 HEAP32[(($310)>>2)]=$308;
 var $311=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$4,$__err,$63,1);
 var $312=HEAP32[(($__err)>>2)];
 var $313=$312&4;
 var $314=($313|0)==0;
 var $315=($311|0)<7;
 var $or_cond_i179=$314&$315;
 if($or_cond_i179){label=51;break;}else{label=52;break;}
 case 51: 
 var $317=(($__tm+24)|0);
 HEAP32[(($317)>>2)]=$311;
 label=70;break;
 case 52: 
 var $319=$312|4;
 HEAP32[(($__err)>>2)]=$319;
 label=70;break;
 case 53: 
 var $321=$this;
 var $322=HEAP32[(($321)>>2)];
 var $323=(($322+20)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=(($__b)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=(($35)|0);
 HEAP32[(($327)>>2)]=$326;
 var $328=(($__e)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($36)|0);
 HEAP32[(($330)>>2)]=$329;
 FUNCTION_TABLE[$324]($agg_result,$this,$35,$36,$__iob,$__err,$__tm);
 label=71;break;
 case 54: 
 var $332=(($this+8)|0);
 var $333=$332;
 var $334=HEAP32[(($333)>>2)];
 var $335=(($334+24)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=FUNCTION_TABLE[$336]($332);
 var $338=(($__b)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(($38)|0);
 HEAP32[(($340)>>2)]=$339;
 var $341=(($__e)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=(($39)|0);
 HEAP32[(($343)>>2)]=$342;
 var $344=$337;
 var $345=HEAP8[($344)];
 var $346=$345&1;
 var $347=(($346<<24)>>24)==0;
 if($347){label=56;break;}else{label=55;break;}
 case 55: 
 var $349=(($337+8)|0);
 var $350=HEAP32[(($349)>>2)];
 var $355=$350;var $354=$350;label=57;break;
 case 56: 
 var $352=(($337+4)|0);
 var $353=(($337+4)|0);
 var $355=$353;var $354=$352;label=57;break;
 case 57: 
 var $354;
 var $355;
 var $356=($345&255);
 var $357=$356&1;
 var $358=($357|0)==0;
 if($358){label=59;break;}else{label=58;break;}
 case 58: 
 var $360=(($337+4)|0);
 var $361=HEAP32[(($360)>>2)];
 var $364=$361;label=60;break;
 case 59: 
 var $363=$356>>>1;
 var $364=$363;label=60;break;
 case 60: 
 var $364;
 var $365=(($355+($364<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($37,$this,$38,$39,$__iob,$__err,$__tm,$354,$365);
 var $366=(($37)|0);
 var $367=HEAP32[(($366)>>2)];
 HEAP32[(($338)>>2)]=$367;
 label=70;break;
 case 61: 
 var $369=(($__tm+20)|0);
 var $370=(($__e)|0);
 var $371=HEAP32[(($370)>>2)];
 var $372=$3;
 var $373=(($3)|0);
 HEAP32[(($373)>>2)]=$371;
 var $374=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$3,$__err,$63,4);
 var $375=HEAP32[(($__err)>>2)];
 var $376=$375&4;
 var $377=($376|0)==0;
 if($377){label=62;break;}else{label=70;break;}
 case 62: 
 var $379=($374|0)<69;
 if($379){label=63;break;}else{label=64;break;}
 case 63: 
 var $381=((($374)+(2000))|0);
 var $__t_0_i=$381;label=65;break;
 case 64: 
 var $_off_i182=((($374)-(69))|0);
 var $383=($_off_i182>>>0)<31;
 var $384=((($374)+(1900))|0);
 var $__i=($383?$384:$374);
 var $__t_0_i=$__i;label=65;break;
 case 65: 
 var $__t_0_i;
 var $386=((($__t_0_i)-(1900))|0);
 HEAP32[(($369)>>2)]=$386;
 label=70;break;
 case 66: 
 var $388=(($__e)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=$2;
 var $391=(($2)|0);
 HEAP32[(($391)>>2)]=$389;
 var $392=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$2,$__err,$63,4);
 var $393=HEAP32[(($__err)>>2)];
 var $394=$393&4;
 var $395=($394|0)==0;
 if($395){label=67;break;}else{label=70;break;}
 case 67: 
 var $397=(($__tm+20)|0);
 var $398=((($392)-(1900))|0);
 HEAP32[(($397)>>2)]=$398;
 label=70;break;
 case 68: 
 var $400=(($__e)|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=(($40)|0);
 HEAP32[(($402)>>2)]=$401;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$40,$__err,$63);
 label=70;break;
 case 69: 
 var $404=HEAP32[(($__err)>>2)];
 var $405=$404|4;
 HEAP32[(($__err)>>2)]=$405;
 label=70;break;
 case 70: 
 var $406=(($__b)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=(($agg_result)|0);
 HEAP32[(($408)>>2)]=$407;
 label=71;break;
 case 71: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=(($__e)|0);
 var $3=$__ct;
 label=2;break;
 case 2: 
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 if($5){var $22=1;label=9;break;}else{label=3;break;}
 case 3: 
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$4;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($4);
 var $_054=$17;label=6;break;
 case 5: 
 var $19=HEAP32[(($8)>>2)];
 var $_054=$19;label=6;break;
 case 6: 
 var $_054;
 var $20=($_054|0)==-1;
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre=HEAP32[(($1)>>2)];
 var $phitmp=($_pre|0)==0;
 var $22=$phitmp;label=9;break;
 case 8: 
 HEAP32[(($1)>>2)]=0;
 var $22=1;label=9;break;
 case 9: 
 var $22;
 var $23=HEAP32[(($2)>>2)];
 var $24=($23|0)==0;
 if($24){label=15;break;}else{label=10;break;}
 case 10: 
 var $26=(($23+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($23+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($27|0)==($29|0);
 if($30){label=11;break;}else{label=12;break;}
 case 11: 
 var $32=$23;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=FUNCTION_TABLE[$35]($23);
 var $_053=$36;label=13;break;
 case 12: 
 var $38=HEAP32[(($27)>>2)];
 var $_053=$38;label=13;break;
 case 13: 
 var $_053;
 var $39=($_053|0)==-1;
 if($39){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($2)>>2)]=0;
 label=15;break;
 case 15: 
 if($22){var $80=0;var $79=1;label=24;break;}else{var $45=0;var $44=1;label=17;break;}
 case 16: 
 var $41=($23|0)==0;
 var $42=$22^$41;
 if($42){var $45=$23;var $44=$41;label=17;break;}else{var $80=$23;var $79=$41;label=24;break;}
 case 17: 
 var $44;
 var $45;
 var $46=HEAP32[(($1)>>2)];
 var $47=(($46+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($46+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($48|0)==($50|0);
 if($51){label=18;break;}else{label=19;break;}
 case 18: 
 var $53=$46;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($46);
 var $_052=$57;label=20;break;
 case 19: 
 var $59=HEAP32[(($48)>>2)];
 var $_052=$59;label=20;break;
 case 20: 
 var $_052;
 var $60=HEAP32[(($3)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=FUNCTION_TABLE[$62]($__ct,8192,$_052);
 if($63){label=21;break;}else{var $80=$45;var $79=$44;label=24;break;}
 case 21: 
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65+12)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($65+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)==($69|0);
 if($70){label=22;break;}else{label=23;break;}
 case 22: 
 var $72=$65;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+40)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($65);
 label=2;break;
 case 23: 
 var $78=(($67+4)|0);
 HEAP32[(($66)>>2)]=$78;
 label=2;break;
 case 24: 
 var $79;
 var $80;
 var $81=HEAP32[(($1)>>2)];
 var $82=($81|0)==0;
 if($82){var $99=1;label=31;break;}else{label=25;break;}
 case 25: 
 var $84=(($81+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($81+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=26;break;}else{label=27;break;}
 case 26: 
 var $90=$81;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=FUNCTION_TABLE[$93]($81);
 var $_050=$94;label=28;break;
 case 27: 
 var $96=HEAP32[(($85)>>2)];
 var $_050=$96;label=28;break;
 case 28: 
 var $_050;
 var $97=($_050|0)==-1;
 if($97){label=30;break;}else{label=29;break;}
 case 29: 
 var $_pre57=HEAP32[(($1)>>2)];
 var $phitmp58=($_pre57|0)==0;
 var $99=$phitmp58;label=31;break;
 case 30: 
 HEAP32[(($1)>>2)]=0;
 var $99=1;label=31;break;
 case 31: 
 var $99;
 if($79){label=37;break;}else{label=32;break;}
 case 32: 
 var $101=(($80+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($80+16)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($102|0)==($104|0);
 if($105){label=33;break;}else{label=34;break;}
 case 33: 
 var $107=$80;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+36)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=FUNCTION_TABLE[$110]($80);
 var $_0=$111;label=35;break;
 case 34: 
 var $113=HEAP32[(($102)>>2)];
 var $_0=$113;label=35;break;
 case 35: 
 var $_0;
 var $114=($_0|0)==-1;
 if($114){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($2)>>2)]=0;
 label=37;break;
 case 37: 
 if($99){label=39;break;}else{label=40;break;}
 case 38: 
 var $116=($80|0)==0;
 var $tmp55=$99^$116;
 if($tmp55){label=40;break;}else{label=39;break;}
 case 39: 
 var $118=HEAP32[(($__err)>>2)];
 var $119=$118|2;
 HEAP32[(($__err)>>2)]=$119;
 label=40;break;
 case 40: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+8)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=FUNCTION_TABLE[$6]($2);
 var $8=$7;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10&1;
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 var $14=(($7+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$10>>>1;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 var $19=(($7+12)|0);
 var $20=$19;
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=$22&1;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=5;break;}
 case 5: 
 var $26=(($7+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $30=$27;label=7;break;
 case 6: 
 var $29=$22>>>1;
 var $30=$29;label=7;break;
 case 7: 
 var $30;
 var $31=(((-$30))|0);
 var $32=($18|0)==($31|0);
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=HEAP32[(($__err)>>2)];
 var $35=$34|4;
 HEAP32[(($__err)>>2)]=$35;
 label=15;break;
 case 9: 
 var $37=(($__e)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($1)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($7+24)|0);
 var $41=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$7,$40,$__ct,$__err,0);
 var $42=$41;
 var $43=$7;
 var $44=((($42)-($43))|0);
 var $45=($41|0)==($7|0);
 if($45){label=10;break;}else{label=12;break;}
 case 10: 
 var $47=HEAP32[(($__h)>>2)];
 var $48=($47|0)==12;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($__h)>>2)]=0;
 label=15;break;
 case 12: 
 var $51=($44|0)==12;
 if($51){label=13;break;}else{label=15;break;}
 case 13: 
 var $53=HEAP32[(($__h)>>2)];
 var $54=($53|0)<12;
 if($54){label=14;break;}else{label=15;break;}
 case 14: 
 var $56=((($53)+(12))|0);
 HEAP32[(($__h)>>2)]=$56;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_055=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_055=$17;label=5;break;
 case 5: 
 var $_055;
 var $18=($_055|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($1)>>2)];
 var $phitmp=($_pre|0)==0;
 var $20=$phitmp;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=(($22+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($22+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=$22;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+36)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($22);
 var $_054=$35;label=12;break;
 case 11: 
 var $37=HEAP32[(($26)>>2)];
 var $_054=$37;label=12;break;
 case 12: 
 var $_054;
 var $38=($_054|0)==-1;
 if($38){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($21)>>2)]=0;
 label=14;break;
 case 14: 
 if($20){label=16;break;}else{var $46=0;var $45=1;label=17;break;}
 case 15: 
 var $40=($22|0)==0;
 var $tmp=$20^$40;
 if($tmp){var $46=$22;var $45=$40;label=17;break;}else{label=16;break;}
 case 16: 
 var $42=HEAP32[(($__err)>>2)];
 var $43=$42|6;
 HEAP32[(($__err)>>2)]=$43;
 label=41;break;
 case 17: 
 var $45;
 var $46;
 var $47=HEAP32[(($1)>>2)];
 var $48=(($47+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($47+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$47;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=FUNCTION_TABLE[$57]($47);
 var $_053=$58;label=20;break;
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_053=$60;label=20;break;
 case 20: 
 var $_053;
 var $61=$__ct;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+52)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=FUNCTION_TABLE[$64]($__ct,$_053,0);
 var $66=(($65<<24)>>24)==37;
 if($66){label=22;break;}else{label=21;break;}
 case 21: 
 var $68=HEAP32[(($__err)>>2)];
 var $69=$68|4;
 HEAP32[(($__err)>>2)]=$69;
 label=41;break;
 case 22: 
 var $71=HEAP32[(($1)>>2)];
 var $72=(($71+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($71+16)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($73|0)==($75|0);
 if($76){label=23;break;}else{label=24;break;}
 case 23: 
 var $78=$71;
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+40)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=FUNCTION_TABLE[$81]($71);
 label=25;break;
 case 24: 
 var $84=(($73+4)|0);
 HEAP32[(($72)>>2)]=$84;
 label=25;break;
 case 25: 
 var $85=HEAP32[(($1)>>2)];
 var $86=($85|0)==0;
 if($86){var $103=1;label=32;break;}else{label=26;break;}
 case 26: 
 var $88=(($85+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($85+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=28;break;}
 case 27: 
 var $94=$85;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+36)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($85);
 var $_051=$98;label=29;break;
 case 28: 
 var $100=HEAP32[(($89)>>2)];
 var $_051=$100;label=29;break;
 case 29: 
 var $_051;
 var $101=($_051|0)==-1;
 if($101){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre57=HEAP32[(($1)>>2)];
 var $phitmp58=($_pre57|0)==0;
 var $103=$phitmp58;label=32;break;
 case 31: 
 HEAP32[(($1)>>2)]=0;
 var $103=1;label=32;break;
 case 32: 
 var $103;
 if($45){label=38;break;}else{label=33;break;}
 case 33: 
 var $105=(($46+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($46+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=34;break;}else{label=35;break;}
 case 34: 
 var $111=$46;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=FUNCTION_TABLE[$114]($46);
 var $_0=$115;label=36;break;
 case 35: 
 var $117=HEAP32[(($106)>>2)];
 var $_0=$117;label=36;break;
 case 36: 
 var $_0;
 var $118=($_0|0)==-1;
 if($118){label=37;break;}else{label=39;break;}
 case 37: 
 HEAP32[(($21)>>2)]=0;
 label=38;break;
 case 38: 
 if($103){label=40;break;}else{label=41;break;}
 case 39: 
 var $120=($46|0)==0;
 var $tmp56=$103^$120;
 if($tmp56){label=41;break;}else{label=40;break;}
 case 40: 
 var $122=HEAP32[(($__err)>>2)];
 var $123=$122|2;
 HEAP32[(($__err)>>2)]=$123;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_0107=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_0107=$17;label=5;break;
 case 5: 
 var $_0107;
 var $18=($_0107|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($1)>>2)];
 var $phitmp=($_pre|0)==0;
 var $20=$phitmp;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=(($22+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($22+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=$22;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+36)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($22);
 var $_0106=$35;label=12;break;
 case 11: 
 var $37=HEAP32[(($26)>>2)];
 var $_0106=$37;label=12;break;
 case 12: 
 var $_0106;
 var $38=($_0106|0)==-1;
 if($38){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($21)>>2)]=0;
 label=14;break;
 case 14: 
 if($20){label=16;break;}else{var $45=0;label=17;break;}
 case 15: 
 var $40=($22|0)==0;
 var $tmp=$20^$40;
 if($tmp){var $45=$22;label=17;break;}else{label=16;break;}
 case 16: 
 var $42=HEAP32[(($__err)>>2)];
 var $43=$42|6;
 HEAP32[(($__err)>>2)]=$43;
 var $_0100=0;label=63;break;
 case 17: 
 var $45;
 var $46=HEAP32[(($1)>>2)];
 var $47=(($46+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($46+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($48|0)==($50|0);
 if($51){label=18;break;}else{label=19;break;}
 case 18: 
 var $53=$46;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($46);
 var $_0105=$57;label=20;break;
 case 19: 
 var $59=HEAP32[(($48)>>2)];
 var $_0105=$59;label=20;break;
 case 20: 
 var $_0105;
 var $60=$__ct;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+12)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=FUNCTION_TABLE[$63]($__ct,2048,$_0105);
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $66=HEAP32[(($__err)>>2)];
 var $67=$66|4;
 HEAP32[(($__err)>>2)]=$67;
 var $_0100=0;label=63;break;
 case 22: 
 var $69=$__ct;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+52)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=FUNCTION_TABLE[$72]($__ct,$_0105,0);
 var $74=(($73<<24)>>24);
 var $75=HEAP32[(($1)>>2)];
 var $76=(($75+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($75+16)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($77|0)==($79|0);
 if($80){label=23;break;}else{label=24;break;}
 case 23: 
 var $82=$75;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+40)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=FUNCTION_TABLE[$85]($75);
 var $__r_0_in=$74;var $_0_in=$__n;var $89=$45;label=25;break;
 case 24: 
 var $88=(($77+4)|0);
 HEAP32[(($76)>>2)]=$88;
 var $__r_0_in=$74;var $_0_in=$__n;var $89=$45;label=25;break;
 case 25: 
 var $89;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $90=HEAP32[(($1)>>2)];
 var $91=($90|0)==0;
 if($91){var $108=0;label=32;break;}else{label=26;break;}
 case 26: 
 var $93=(($90+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($90+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=27;break;}else{label=28;break;}
 case 27: 
 var $99=$90;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=FUNCTION_TABLE[$102]($90);
 var $_0103=$103;label=29;break;
 case 28: 
 var $105=HEAP32[(($94)>>2)];
 var $_0103=$105;label=29;break;
 case 29: 
 var $_0103;
 var $106=($_0103|0)==-1;
 if($106){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre114=HEAP32[(($1)>>2)];
 var $108=$_pre114;label=32;break;
 case 31: 
 HEAP32[(($1)>>2)]=0;
 var $108=0;label=32;break;
 case 32: 
 var $108;
 var $109=($108|0)==0;
 var $110=($89|0)==0;
 if($110){var $129=$108;var $128=0;label=39;break;}else{label=33;break;}
 case 33: 
 var $112=(($89+12)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($89+16)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($113|0)==($115|0);
 if($116){label=34;break;}else{label=35;break;}
 case 34: 
 var $118=$89;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+36)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=FUNCTION_TABLE[$121]($89);
 var $_0102=$122;label=36;break;
 case 35: 
 var $124=HEAP32[(($113)>>2)];
 var $_0102=$124;label=36;break;
 case 36: 
 var $_0102;
 var $125=($_0102|0)==-1;
 if($125){label=37;break;}else{var $127=$89;label=38;break;}
 case 37: 
 HEAP32[(($21)>>2)]=0;
 var $127=0;label=38;break;
 case 38: 
 var $127;
 var $_pr=HEAP32[(($1)>>2)];
 var $129=$_pr;var $128=$127;label=39;break;
 case 39: 
 var $128;
 var $129;
 var $130=($128|0)==0;
 var $131=$109^$130;
 var $132=($_0|0)>0;
 var $_=$131&$132;
 if($_){label=40;break;}else{label=47;break;}
 case 40: 
 var $134=(($129+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($129+16)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($135|0)==($137|0);
 if($138){label=41;break;}else{label=42;break;}
 case 41: 
 var $140=$129;
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=FUNCTION_TABLE[$143]($129);
 var $_0101=$144;label=43;break;
 case 42: 
 var $146=HEAP32[(($135)>>2)];
 var $_0101=$146;label=43;break;
 case 43: 
 var $_0101;
 var $147=HEAP32[(($60)>>2)];
 var $148=(($147+12)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=FUNCTION_TABLE[$149]($__ct,2048,$_0101);
 if($150){label=44;break;}else{var $_0100=$__r_0;label=63;break;}
 case 44: 
 var $152=((($__r_0)*(10))&-1);
 var $153=HEAP32[(($69)>>2)];
 var $154=(($153+52)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=FUNCTION_TABLE[$155]($__ct,$_0101,0);
 var $157=(($156<<24)>>24);
 var $158=((($157)+($152))|0);
 var $159=HEAP32[(($1)>>2)];
 var $160=(($159+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($159+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=45;break;}else{label=46;break;}
 case 45: 
 var $166=$159;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+40)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=FUNCTION_TABLE[$169]($159);
 var $__r_0_in=$158;var $_0_in=$_0;var $89=$128;label=25;break;
 case 46: 
 var $172=(($161+4)|0);
 HEAP32[(($160)>>2)]=$172;
 var $__r_0_in=$158;var $_0_in=$_0;var $89=$128;label=25;break;
 case 47: 
 var $174=($129|0)==0;
 if($174){var $191=1;label=54;break;}else{label=48;break;}
 case 48: 
 var $176=(($129+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($129+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=49;break;}else{label=50;break;}
 case 49: 
 var $182=$129;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=FUNCTION_TABLE[$185]($129);
 var $_098=$186;label=51;break;
 case 50: 
 var $188=HEAP32[(($177)>>2)];
 var $_098=$188;label=51;break;
 case 51: 
 var $_098;
 var $189=($_098|0)==-1;
 if($189){label=53;break;}else{label=52;break;}
 case 52: 
 var $_pre115=HEAP32[(($1)>>2)];
 var $phitmp116=($_pre115|0)==0;
 var $191=$phitmp116;label=54;break;
 case 53: 
 HEAP32[(($1)>>2)]=0;
 var $191=1;label=54;break;
 case 54: 
 var $191;
 if($130){label=60;break;}else{label=55;break;}
 case 55: 
 var $193=(($128+12)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(($128+16)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($194|0)==($196|0);
 if($197){label=56;break;}else{label=57;break;}
 case 56: 
 var $199=$128;
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+36)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=FUNCTION_TABLE[$202]($128);
 var $_097=$203;label=58;break;
 case 57: 
 var $205=HEAP32[(($194)>>2)];
 var $_097=$205;label=58;break;
 case 58: 
 var $_097;
 var $206=($_097|0)==-1;
 if($206){label=59;break;}else{label=61;break;}
 case 59: 
 HEAP32[(($21)>>2)]=0;
 label=60;break;
 case 60: 
 if($191){label=62;break;}else{var $_0100=$__r_0;label=63;break;}
 case 61: 
 var $208=($128|0)==0;
 var $tmp109=$191^$208;
 if($tmp109){var $_0100=$__r_0;label=63;break;}else{label=62;break;}
 case 62: 
 var $210=HEAP32[(($__err)>>2)];
 var $211=$210|2;
 HEAP32[(($__err)>>2)]=$211;
 var $_0100=$__r_0;label=63;break;
 case 63: 
 var $_0100;
 STACKTOP=sp;return $_0100;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(17544)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(17544);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15408)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 label=9;break;
 case 6: 
 var $15=HEAP32[((15408)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 __ZdlPv($1);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(17544)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(17544);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15408)>>2)]=$9;
 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;
 label=9;break;
 case 6: 
 var $14=HEAP32[((15408)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $20=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($20);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $3=(($__nar)|0);
 var $4=(($fmt_i)|0);
 HEAP8[($4)]=37;
 var $5=(($fmt_i+1)|0);
 HEAP8[($5)]=$__fmt;
 var $6=(($fmt_i+2)|0);
 HEAP8[($6)]=$__mod;
 var $7=(($fmt_i+3)|0);
 HEAP8[($7)]=0;
 var $8=(($__mod<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($5)]=$__mod;
 HEAP8[($6)]=$__fmt;
 label=3;break;
 case 3: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=_strftime($3,100,$4,$__tm,$11);
 var $13=(($__nar+$12)|0);
 var $_sroa_0_0__idx=(($__s)|0);
 var $_sroa_0_0_copyload1=HEAP32[(($_sroa_0_0__idx)>>2)];
 var $14=($12|0)==0;
 if($14){var $_sroa_0_0_lcssa=$_sroa_0_0_copyload1;label=10;break;}else{var $_sroa_0_037=$_sroa_0_0_copyload1;var $_03338=$3;label=4;break;}
 case 4: 
 var $_03338;
 var $_sroa_0_037;
 var $15=HEAP8[($_03338)];
 var $16=($_sroa_0_037|0)==0;
 if($16){var $_sroa_0_1=0;label=9;break;}else{label=5;break;}
 case 5: 
 var $18=(($_sroa_0_037+24)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($_sroa_0_037+28)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($19|0)==($21|0);
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=$_sroa_0_037;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+52)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($15&255);
 var $29=FUNCTION_TABLE[$27]($_sroa_0_037,$28);
 var $_0=$29;label=8;break;
 case 7: 
 var $31=(($19+1)|0);
 HEAP32[(($18)>>2)]=$31;
 HEAP8[($19)]=$15;
 var $32=($15&255);
 var $_0=$32;label=8;break;
 case 8: 
 var $_0;
 var $33=($_0|0)==-1;
 var $__sroa_0_0=($33?0:$_sroa_0_037);
 var $_sroa_0_1=$__sroa_0_0;label=9;break;
 case 9: 
 var $_sroa_0_1;
 var $34=(($_03338+1)|0);
 var $35=($34|0)==($13|0);
 if($35){var $_sroa_0_0_lcssa=$_sroa_0_1;label=10;break;}else{var $_sroa_0_037=$_sroa_0_1;var $_03338=$34;label=4;break;}
 case 10: 
 var $_sroa_0_0_lcssa;
 var $_sroa_0_0__idx35=(($agg_result)|0);
 HEAP32[(($_sroa_0_0__idx35)>>2)]=$_sroa_0_0_lcssa;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(17544)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(17544);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15408)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 label=9;break;
 case 6: 
 var $15=HEAP32[((15408)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 __ZdlPv($1);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(17544)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(17544);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15408)>>2)]=$9;
 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;
 label=9;break;
 case 6: 
 var $14=HEAP32[((15408)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $20=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($20);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__nar=sp;
 var $__ne=(sp)+(400);
 var $3=(($__nar)|0);
 var $4=(($__nar+400)|0);
 HEAP32[(($__ne)>>2)]=$4;
 var $5=(($this+8)|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($5,$3,$__ne,$__tm,$__fmt,$__mod);
 var $6=HEAP32[(($__ne)>>2)];
 var $_sroa_0_0__idx=(($__s)|0);
 var $_sroa_0_0_copyload1=HEAP32[(($_sroa_0_0__idx)>>2)];
 var $7=($3|0)==($6|0);
 if($7){var $_sroa_0_0_lcssa=$_sroa_0_0_copyload1;label=8;break;}else{var $_sroa_0_036=$_sroa_0_0_copyload1;var $_03337=$3;label=2;break;}
 case 2: 
 var $_03337;
 var $_sroa_0_036;
 var $8=HEAP32[(($_03337)>>2)];
 var $9=($_sroa_0_036|0)==0;
 if($9){var $_sroa_0_1=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $11=(($_sroa_0_036+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($_sroa_0_036+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($12|0)==($14|0);
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$_sroa_0_036;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+52)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=FUNCTION_TABLE[$20]($_sroa_0_036,$8);
 var $_0=$21;label=6;break;
 case 5: 
 var $23=(($12+4)|0);
 HEAP32[(($11)>>2)]=$23;
 HEAP32[(($12)>>2)]=$8;
 var $_0=$8;label=6;break;
 case 6: 
 var $_0;
 var $24=($_0|0)==-1;
 var $__sroa_0_0=($24?0:$_sroa_0_036);
 var $_sroa_0_1=$__sroa_0_0;label=7;break;
 case 7: 
 var $_sroa_0_1;
 var $25=(($_03337+4)|0);
 var $26=($25|0)==($6|0);
 if($26){var $_sroa_0_0_lcssa=$_sroa_0_1;label=8;break;}else{var $_sroa_0_036=$_sroa_0_1;var $_03337=$25;label=2;break;}
 case 8: 
 var $_sroa_0_0_lcssa;
 var $_sroa_0_0__idx35=(($agg_result)|0);
 HEAP32[(($_sroa_0_0__idx35)>>2)]=$_sroa_0_0_lcssa;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $mb=(sp)+(112);
 var $tmpcast=$mb;
 var $__nb=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__nar)|0);
 var $2=(($fmt_i)|0);
 HEAP8[($2)]=37;
 var $3=(($fmt_i+1)|0);
 HEAP8[($3)]=$__fmt;
 var $4=(($fmt_i+2)|0);
 HEAP8[($4)]=$__mod;
 var $5=(($fmt_i+3)|0);
 HEAP8[($5)]=0;
 var $6=(($__mod<<24)>>24)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($3)]=$__mod;
 HEAP8[($4)]=$__fmt;
 label=3;break;
 case 3: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_strftime($1,100,$2,$__tm,$9);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($mb)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($mb+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 HEAP32[(($__nb)>>2)]=$1;
 var $11=HEAP32[(($__we)>>2)];
 var $12=$11;
 var $13=$__wb;
 var $14=((($12)-($13))|0);
 var $15=$14>>2;
 var $16=HEAP32[(($8)>>2)];
 var $17=_uselocale($16);
 var $18=(function() { try { __THREW__ = 0; return _mbsrtowcs($__wb,$__nb,$15,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $20=($17|0)==0;
 if($20){label=11;break;}else{label=5;break;}
 case 5: 
 var $22=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1,0); var $24$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 7: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=($17|0)==0;
 if($27){label=10;break;}else{label=8;break;}
 case 8: 
 var $29=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1,0); var $31$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($26$0)
 case 11: 
 var $32=($18|0)==-1;
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 __ZNSt3__121__throw_runtime_errorEPKc(1752);
 throw "Reached an unreachable!";
 case 13: 
 var $35=(($__wb+($18<<2))|0);
 HEAP32[(($__we)>>2)]=$35;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $1=(sp)+(152);
 var $__atoms=(sp)+(160);
 var $__nbuf=(sp)+(176);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=468;
 var $5=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((16840)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$9,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $13=HEAP32[((16844)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($8+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($8+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=8;break;}
 case 6: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $29=$25;
 HEAP8[($__neg)]=0;
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($1)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($__iob+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$1,$__intl,$__loc,$34,$__err,$__neg,$29,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($35){label=10;break;}else{label=34;break;}
 case 10: 
 var $38=(($__atoms)|0);
 var $39=$25;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+32)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($29,5008,5018,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $44=(($__nbuf)|0);
 var $45=HEAP32[(($__wn)>>2)];
 var $46=HEAP32[(($3)>>2)];
 var $47=$45;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=($49|0)>98;
 if($50){label=12;break;}else{var $__nc_0=$44;var $__h_sroa_0_1=0;label=19;break;}
 case 12: 
 var $51=((($49)+(2))|0);
 var $52=_malloc($51);
 var $53=($52|0)==0;
 if($53){label=13;break;}else{var $__nc_0=$52;var $__h_sroa_0_1=$52;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $__h_sroa_0_1=0;label=19;break; } else { var $__h_sroa_0_0=0;label=16;break; }
 case 14: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=$55$0;
 var $57=$55$1;
 HEAP32[(($3)>>2)]=0;
 var $161=$2;var $_1147170=$56;var $_1172=$57;label=53;break;
 case 15: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=$59$1;
 var $_0145=$61;var $_0146=$60;label=52;break;
 case 16: 
 var $__h_sroa_0_0;
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $eh_lpad_body$1=$63$1;var $eh_lpad_body$0=$63$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_0;label=17;break;
 case 17: 
 var $__h_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $64=$eh_lpad_body$0;
 var $65=$eh_lpad_body$1;
 var $66=($__h_sroa_0_0_lpad_body|0)==0;
 if($66){var $_0145=$65;var $_0146=$64;label=52;break;}else{label=18;break;}
 case 18: 
 _free($__h_sroa_0_0_lpad_body);
 var $_0145=$65;var $_0146=$64;label=52;break;
 case 19: 
 var $__h_sroa_0_1;
 var $__nc_0;
 var $69=HEAP8[($__neg)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $73=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$73;label=21;break;
 case 21: 
 var $__nc_1;
 var $75=($46>>>0)<($45>>>0);
 if($75){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $76=(($__atoms+10)|0);
 var $77=$__atoms;
 var $__nc_2166=$__nc_1;var $__w_0167=$46;label=23;break;
 case 23: 
 var $__w_0167;
 var $__nc_2166;
 var $_0=$38;label=24;break;
 case 24: 
 var $_0;
 var $80=($_0|0)==($76|0);
 if($80){var $_0_lcssa=$76;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP8[($_0)];
 var $83=HEAP8[($__w_0167)];
 var $84=(($82<<24)>>24)==(($83<<24)>>24);
 var $85=(($_0+1)|0);
 if($84){var $_0_lcssa=$_0;label=26;break;}else{var $_0=$85;label=24;break;}
 case 26: 
 var $_0_lcssa;
 var $86=$_0_lcssa;
 var $87=((($86)-($77))|0);
 var $88=((5008+$87)|0);
 var $89=HEAP8[($88)];
 HEAP8[($__nc_2166)]=$89;
 var $90=(($__w_0167+1)|0);
 var $91=(($__nc_2166+1)|0);
 var $92=HEAP32[(($__wn)>>2)];
 var $93=($90>>>0)<($92>>>0);
 if($93){var $__nc_2166=$91;var $__w_0167=$90;label=23;break;}else{var $__nc_2_lcssa=$91;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $94=_sscanf($44,3872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $95=($94|0)==1;
 if($95){label=32;break;}else{label=28;break;}
 case 28: 
 var $97=___cxa_allocate_exception(8);
 var $98=$97;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($98,3752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($97,11488,(44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $101$0 = ___cxa_find_matching_catch(-1, -1); var $101$1 = tempRet0;
 ___cxa_free_exception($97);
 var $eh_lpad_body$1=$101$1;var $eh_lpad_body$0=$101$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_1;label=17;break;
 case 32: 
 var $103=($__h_sroa_0_1|0)==0;
 if($103){label=34;break;}else{label=33;break;}
 case 33: 
 _free($__h_sroa_0_1);
 label=34;break;
 case 34: 
 var $105=(($__b)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($106|0)==0;
 if($107){var $122=0;label=39;break;}else{label=35;break;}
 case 35: 
 var $109=(($106+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($106+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=36;break;}else{var $122=$106;label=39;break;}
 case 36: 
 var $115=$106;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=15;break; }
 case 37: 
 var $120=($119|0)==-1;
 if($120){label=38;break;}else{var $122=$106;label=39;break;}
 case 38: 
 HEAP32[(($105)>>2)]=0;
 var $122=0;label=39;break;
 case 39: 
 var $122;
 var $123=($122|0)==0;
 var $124=HEAP32[(($30)>>2)];
 var $125=($124|0)==0;
 if($125){label=45;break;}else{label=40;break;}
 case 40: 
 var $127=(($124+12)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($124+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($128|0)==($130|0);
 if($131){label=42;break;}else{label=41;break;}
 case 41: 
 if($123){label=48;break;}else{label=47;break;}
 case 42: 
 var $133=$124;
 var $134=HEAP32[(($133)>>2)];
 var $135=(($134+36)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$136]($124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=15;break; }
 case 43: 
 var $138=($137|0)==-1;
 if($138){label=44;break;}else{label=46;break;}
 case 44: 
 HEAP32[(($30)>>2)]=0;
 label=45;break;
 case 45: 
 if($123){label=47;break;}else{label=48;break;}
 case 46: 
 var $140=($124|0)==0;
 var $tmp=$123^$140;
 if($tmp){label=48;break;}else{label=47;break;}
 case 47: 
 var $142=HEAP32[(($__err)>>2)];
 var $143=$142|2;
 HEAP32[(($__err)>>2)]=$143;
 label=48;break;
 case 48: 
 var $145=(($agg_result)|0);
 HEAP32[(($145)>>2)]=$122;
 var $146=HEAP32[(($7)>>2)];
 var $147=(($146)|0);
 var $148=__ZNSt3__114__shared_count16__release_sharedEv($147);
 var $149=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $150=($149|0)==0;
 if($150){label=51;break;}else{label=49;break;}
 case 49: 
 var $152=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$152]($149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=50;break; }
 case 50: 
 var $154$0 = ___cxa_find_matching_catch(-1, -1,0); var $154$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 51: 
 STACKTOP=sp;return;
 case 52: 
 var $_0146;
 var $_0145;
 var $156=HEAP32[(($7)>>2)];
 var $157=(($156)|0);
 var $158=__ZNSt3__114__shared_count16__release_sharedEv($157);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $159=($_pre|0)==0;
 if($159){var $_1147171=$_0146;var $_1173=$_0145;label=55;break;}else{var $161=$_pre;var $_1147170=$_0146;var $_1172=$_0145;label=53;break;}
 case 53: 
 var $_1172;
 var $_1147170;
 var $161;
 var $162=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1147171=$_1147170;var $_1173=$_1172;label=55;break; } else { label=54;break; }
 case 54: 
 var $164$0 = ___cxa_find_matching_catch(-1, -1,0); var $164$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 55: 
 var $_1173;
 var $_1147171;
 var $165$0=$_1147171;
 var $165$1=0;
 var $166$0=$165$0;
 var $166$1=$_1173;
 ___resumeException($166$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__do_nothingEPv($0){
 var label=0;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+440)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__gbuf=sp;
 var $__pat=(sp)+(400);
 var $__dp=(sp)+(408);
 var $__ts=(sp)+(416);
 var $__grp=(sp)+(424);
 var $0=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__gbuf)|0);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__sym;
 var $3=$__psn;
 var $4=$__nsn;
 var $5=$__spaces;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=25;break; }
 case 2: 
 var $7=(($__gbuf+400)|0);
 var $8=(($__wb)|0);
 var $9=HEAP32[(($8)>>2)];
 HEAP32[(($__wn)>>2)]=$9;
 var $10=(($__b)|0);
 var $11=(($__e)|0);
 var $12=(($__ct+8)|0);
 var $13=$__psn;
 var $14=$__nsn;
 var $15=(($14+1)|0);
 var $16=(($__nsn+4)|0);
 var $17=(($__nsn+8)|0);
 var $18=(($13+1)|0);
 var $19=(($__psn+4)|0);
 var $20=(($__psn+8)|0);
 var $21=$__flags&512;
 var $22=($21|0)!=0;
 var $23=$__sym;
 var $24=(($23+1)|0);
 var $25=(($__sym+4)|0);
 var $26=(($__sym+8)|0);
 var $27=$__spaces;
 var $28=(($27+1)|0);
 var $29=(($__spaces+4)|0);
 var $30=(($__spaces+8)|0);
 var $31=(($__pat+3)|0);
 var $32=(($__grp+4)|0);
 var $33=(($__wb+4)|0);
 var $__we10821215=$__we;var $__gb_sroa_1_4_load105710761218=468;var $35=$1;var $__gb_sroa_0_0_load104710611221=$1;var $34=$7;var $__trailing_sign_01224=0;var $__p_01226=0;label=3;break;
 case 3: 
 var $__p_01226;
 var $__trailing_sign_01224;
 var $34;
 var $__gb_sroa_0_0_load104710611221;
 var $35;
 var $__gb_sroa_1_4_load105710761218;
 var $__we10821215;
 var $36=HEAP32[(($10)>>2)];
 var $37=($36|0)==0;
 if($37){var $52=0;label=9;break;}else{label=4;break;}
 case 4: 
 var $39=(($36+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($36+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($40|0)==($42|0);
 if($43){label=5;break;}else{var $52=$36;label=9;break;}
 case 5: 
 var $45=$36;
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+36)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 6: 
 var $50=($49|0)==-1;
 if($50){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre1306=HEAP32[(($10)>>2)];
 var $52=$_pre1306;label=9;break;
 case 8: 
 HEAP32[(($10)>>2)]=0;
 var $52=0;label=9;break;
 case 9: 
 var $52;
 var $53=($52|0)==0;
 var $54=HEAP32[(($11)>>2)];
 var $55=($54|0)==0;
 if($55){label=15;break;}else{label=10;break;}
 case 10: 
 var $57=(($54+12)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($54+16)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($58|0)==($60|0);
 if($61){label=12;break;}else{label=11;break;}
 case 11: 
 if($53){var $71=$54;label=17;break;}else{var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load105710761218;var $_lcssa=$35;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load104710611221;var $__trailing_sign_0_lcssa=$__trailing_sign_01224;label=274;break;}
 case 12: 
 var $63=$54;
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+36)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$66]($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 13: 
 var $68=($67|0)==-1;
 if($68){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($11)>>2)]=0;
 label=15;break;
 case 15: 
 if($53){var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load105710761218;var $_lcssa=$35;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load104710611221;var $__trailing_sign_0_lcssa=$__trailing_sign_01224;label=274;break;}else{var $71=0;label=17;break;}
 case 16: 
 if($53){var $71=$54;label=17;break;}else{var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load105710761218;var $_lcssa=$35;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load104710611221;var $__trailing_sign_0_lcssa=$__trailing_sign_01224;label=274;break;}
 case 17: 
 var $71;
 var $72=(($__pat+$__p_01226)|0);
 var $73=HEAP8[($72)];
 var $74=(($73<<24)>>24);
 switch(($74|0)){case 2:{ label=111;break;}case 4:{ var $__ng_0=0;var $556=$34;var $__gb_sroa_0_0_load10471064=$__gb_sroa_0_0_load104710611221;var $555=$35;var $__gb_sroa_1_4_load10571074=$__gb_sroa_1_4_load105710761218;var $__we1087=$__we10821215;label=155;break;}case 1:{ label=29;break;}case 0:{ label=43;break;}case 3:{ label=70;break;}default:{var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}}break;
 case 18: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $75=$_lcssa;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571076_lcssa;label=26;break;
 case 19: 
 var $__gb_sroa_1_4_load10571069_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit1096$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1096$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1096$1;var $lpad_phi$0=$lpad_loopexit1096$0;var $75=$_ph_ph;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571069_ph_ph;label=26;break;
 case 20: 
 var $lpad_loopexit1118$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1118$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1118$1;var $lpad_phi$0=$lpad_loopexit1118$0;var $75=$725;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571071;label=26;break;
 case 21: 
 var $lpad_loopexit1124$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1124$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1124$1;var $lpad_phi$0=$lpad_loopexit1124$0;var $75=$35;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load105710761218;label=26;break;
 case 22: 
 var $lpad_loopexit1131$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1131$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1131$1;var $lpad_phi$0=$lpad_loopexit1131$0;var $75=$35;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load105710761218;label=26;break;
 case 23: 
 var $lpad_loopexit1135$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1135$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1135$1;var $lpad_phi$0=$lpad_loopexit1135$0;var $75=$35;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load105710761218;label=26;break;
 case 24: 
 var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph;
 var $_ph_ph1095_ph_ph_ph_ph_ph;
 var $lpad_loopexit1138$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1138$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1138$1;var $lpad_phi$0=$lpad_loopexit1138$0;var $75=$_ph_ph1095_ph_ph_ph_ph_ph;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph;label=26;break;
 case 25: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $75=$1;var $__gb_sroa_1_4_load10571069=468;label=26;break;
 case 26: 
 var $__gb_sroa_1_4_load10571069;
 var $75;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $76=($75|0)==0;
 if($76){label=312;break;}else{label=27;break;}
 case 27: 
 var $78=$75;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10571069]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=312;break; } else { label=28;break; }
 case 28: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1,0); var $80$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 29: 
 var $cond=($__p_01226|0)==3;
 if($cond){var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load105710761218;var $_lcssa=$35;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load104710611221;var $__trailing_sign_0_lcssa=$__trailing_sign_01224;label=274;break;}else{label=30;break;}
 case 30: 
 var $83=HEAP32[(($10)>>2)];
 var $84=(($83+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($83+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=31;break;}else{label=33;break;}
 case 31: 
 var $90=$83;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 32: 
 var $extract_t1003=(($94)&255);
 var $_0934_off0=$extract_t1003;label=34;break;
 case 33: 
 var $96=HEAP8[($85)];
 var $_0934_off0=$96;label=34;break;
 case 34: 
 var $_0934_off0;
 var $97=(($_0934_off0<<24)>>24);
 var $98=(function() { try { __THREW__ = 0; return _isascii($97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 35: 
 var $99=($98|0)==0;
 if($99){label=42;break;}else{label=36;break;}
 case 36: 
 var $100=HEAP32[(($12)>>2)];
 var $101=(($100+($97<<1))|0);
 var $102=HEAP16[(($101)>>1)];
 var $103=$102&8192;
 var $104=(($103<<16)>>16)==0;
 if($104){label=42;break;}else{label=37;break;}
 case 37: 
 var $106=HEAP32[(($10)>>2)];
 var $107=(($106+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($106+16)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($108|0)==($110|0);
 if($111){label=38;break;}else{label=40;break;}
 case 38: 
 var $113=$106;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+40)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 39: 
 var $extract_t1005=(($117)&255);
 var $_0933_off0=$extract_t1005;label=41;break;
 case 40: 
 var $119=(($108+1)|0);
 HEAP32[(($107)>>2)]=$119;
 var $120=HEAP8[($108)];
 var $_0933_off0=$120;label=41;break;
 case 41: 
 var $_0933_off0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0933_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 42: 
 var $121=HEAP32[(($__err)>>2)];
 var $122=$121|4;
 HEAP32[(($__err)>>2)]=$122;
 var $_0919=0;var $1030=$35;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load105710761218;label=308;break;
 case 43: 
 var $124=($__p_01226|0)==3;
 if($124){var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load105710761218;var $_lcssa=$35;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load104710611221;var $__trailing_sign_0_lcssa=$__trailing_sign_01224;label=274;break;}else{var $125=$71;label=44;break;}
 case 44: 
 var $125;
 var $126=HEAP32[(($10)>>2)];
 var $127=($126|0)==0;
 if($127){var $142=0;label=50;break;}else{label=45;break;}
 case 45: 
 var $129=(($126+12)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(($126+16)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($130|0)==($132|0);
 if($133){label=46;break;}else{var $142=$126;label=50;break;}
 case 46: 
 var $135=$126;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+36)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($126) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=23;break; }
 case 47: 
 var $140=($139|0)==-1;
 if($140){label=49;break;}else{label=48;break;}
 case 48: 
 var $_pre1307=HEAP32[(($10)>>2)];
 var $142=$_pre1307;label=50;break;
 case 49: 
 HEAP32[(($10)>>2)]=0;
 var $142=0;label=50;break;
 case 50: 
 var $142;
 var $143=($142|0)==0;
 var $144=($125|0)==0;
 if($144){label=56;break;}else{label=51;break;}
 case 51: 
 var $146=(($125+12)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($125+16)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=($147|0)==($149|0);
 if($150){label=53;break;}else{label=52;break;}
 case 52: 
 if($143){var $159=$125;label=58;break;}else{var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}
 case 53: 
 var $152=$125;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+36)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$155]($125) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=23;break; }
 case 54: 
 var $157=($156|0)==-1;
 if($157){label=55;break;}else{label=57;break;}
 case 55: 
 HEAP32[(($11)>>2)]=0;
 label=56;break;
 case 56: 
 if($143){var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}else{var $159=0;label=58;break;}
 case 57: 
 if($143){var $159=$125;label=58;break;}else{var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}
 case 58: 
 var $159;
 var $160=HEAP32[(($10)>>2)];
 var $161=(($160+12)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($160+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($162|0)==($164|0);
 if($165){label=59;break;}else{label=61;break;}
 case 59: 
 var $167=$160;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=23;break; }
 case 60: 
 var $extract_t999=(($171)&255);
 var $_0930_off0=$extract_t999;label=62;break;
 case 61: 
 var $173=HEAP8[($162)];
 var $_0930_off0=$173;label=62;break;
 case 62: 
 var $_0930_off0;
 var $174=(($_0930_off0<<24)>>24);
 var $175=(function() { try { __THREW__ = 0; return _isascii($174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=23;break; }
 case 63: 
 var $176=($175|0)==0;
 if($176){var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}else{label=64;break;}
 case 64: 
 var $177=HEAP32[(($12)>>2)];
 var $178=(($177+($174<<1))|0);
 var $179=HEAP16[(($178)>>1)];
 var $180=$179&8192;
 var $181=(($180<<16)>>16)==0;
 if($181){var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}else{label=65;break;}
 case 65: 
 var $183=HEAP32[(($10)>>2)];
 var $184=(($183+12)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($183+16)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($185|0)==($187|0);
 if($188){label=66;break;}else{label=68;break;}
 case 66: 
 var $190=$183;
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+40)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=23;break; }
 case 67: 
 var $extract_t1001=(($194)&255);
 var $_0929_off0=$extract_t1001;label=69;break;
 case 68: 
 var $196=(($185+1)|0);
 HEAP32[(($184)>>2)]=$196;
 var $197=HEAP8[($185)];
 var $_0929_off0=$197;label=69;break;
 case 69: 
 var $_0929_off0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0929_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $125=$159;label=44;break; } else { label=23;break; }
 case 70: 
 var $198=HEAP8[($3)];
 var $199=($198&255);
 var $200=$199&1;
 var $201=($200|0)==0;
 var $202=HEAP32[(($19)>>2)];
 var $203=$199>>>1;
 var $204=($201?$203:$202);
 var $205=HEAP8[($4)];
 var $206=($205&255);
 var $207=$206&1;
 var $208=($207|0)==0;
 var $209=HEAP32[(($16)>>2)];
 var $210=$206>>>1;
 var $211=($208?$210:$209);
 var $212=(((-$211))|0);
 var $213=($204|0)==($212|0);
 if($213){var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}else{label=71;break;}
 case 71: 
 var $214=($204|0)==0;
 var $215=($211|0)==0;
 var $or_cond1332=$214|$215;
 var $216=HEAP32[(($10)>>2)];
 var $217=(($216+12)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(($216+16)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=($218|0)==($220|0);
 if($or_cond1332){label=72;break;}else{label=92;break;}
 case 72: 
 if($214){label=83;break;}else{label=73;break;}
 case 73: 
 if($221){label=74;break;}else{label=76;break;}
 case 74: 
 var $224=$216;
 var $225=HEAP32[(($224)>>2)];
 var $226=(($225+36)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$227]($216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 75: 
 var $extract_t996=(($228)&255);
 var $_pre1297=HEAP8[($3)];
 var $_0926_off0=$extract_t996;var $231=$_pre1297;label=77;break;
 case 76: 
 var $230=HEAP8[($218)];
 var $_0926_off0=$230;var $231=$198;label=77;break;
 case 77: 
 var $231;
 var $_0926_off0;
 var $232=$231&1;
 var $233=(($232<<24)>>24)==0;
 var $234=HEAP32[(($20)>>2)];
 var $_=($233?$18:$234);
 var $235=HEAP8[($_)];
 var $236=(($_0926_off0<<24)>>24)==(($235<<24)>>24);
 if($236){label=78;break;}else{label=82;break;}
 case 78: 
 var $238=HEAP32[(($10)>>2)];
 var $239=(($238+12)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(($238+16)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($240|0)==($242|0);
 if($243){label=79;break;}else{label=80;break;}
 case 79: 
 var $245=$238;
 var $246=HEAP32[(($245)>>2)];
 var $247=(($246+40)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$248]($238) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 80: 
 var $251=(($240+1)|0);
 HEAP32[(($239)>>2)]=$251;
 label=81;break;
 case 81: 
 var $252=HEAP8[($3)];
 var $253=($252&255);
 var $254=$253&1;
 var $255=($254|0)==0;
 var $256=HEAP32[(($19)>>2)];
 var $257=$253>>>1;
 var $258=($255?$257:$256);
 var $259=($258>>>0)>1;
 var $__psn___trailing_sign_0=($259?$__psn:$__trailing_sign_01224);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;
 case 82: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;
 case 83: 
 if($221){label=84;break;}else{label=86;break;}
 case 84: 
 var $263=$216;
 var $264=HEAP32[(($263)>>2)];
 var $265=(($264+36)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$266]($216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 85: 
 var $extract_t994=(($267)&255);
 var $_pre=HEAP8[($4)];
 var $_0922_off0=$extract_t994;var $270=$_pre;label=87;break;
 case 86: 
 var $269=HEAP8[($218)];
 var $_0922_off0=$269;var $270=$205;label=87;break;
 case 87: 
 var $270;
 var $_0922_off0;
 var $271=$270&1;
 var $272=(($271<<24)>>24)==0;
 var $273=HEAP32[(($17)>>2)];
 var $_1320=($272?$15:$273);
 var $274=HEAP8[($_1320)];
 var $275=(($_0922_off0<<24)>>24)==(($274<<24)>>24);
 if($275){label=88;break;}else{var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}
 case 88: 
 var $277=HEAP32[(($10)>>2)];
 var $278=(($277+12)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($277+16)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=($279|0)==($281|0);
 if($282){label=89;break;}else{label=90;break;}
 case 89: 
 var $284=$277;
 var $285=HEAP32[(($284)>>2)];
 var $286=(($285+40)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$287]($277) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 90: 
 var $290=(($279+1)|0);
 HEAP32[(($278)>>2)]=$290;
 label=91;break;
 case 91: 
 HEAP8[($__neg)]=1;
 var $291=HEAP8[($4)];
 var $292=($291&255);
 var $293=$292&1;
 var $294=($293|0)==0;
 var $295=HEAP32[(($16)>>2)];
 var $296=$292>>>1;
 var $297=($294?$296:$295);
 var $298=($297>>>0)>1;
 var $__nsn___trailing_sign_0=($298?$__nsn:$__trailing_sign_01224);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;
 case 92: 
 if($221){label=93;break;}else{label=95;break;}
 case 93: 
 var $301=$216;
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302+36)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$304]($216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 94: 
 var $extract_t990=(($305)&255);
 var $_pre1298=HEAP8[($3)];
 var $_pre1452=HEAP32[(($10)>>2)];
 var $_phi_trans_insert=(($_pre1452+12)|0);
 var $_pre1453=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert1454=(($_pre1452+16)|0);
 var $_pre1455=HEAP32[(($_phi_trans_insert1454)>>2)];
 var $_0917_off0=$extract_t990;var $311=$_pre1298;var $310=$_pre1452;var $309=$_pre1453;var $308=$_pre1455;label=96;break;
 case 95: 
 var $307=HEAP8[($218)];
 var $_0917_off0=$307;var $311=$198;var $310=$216;var $309=$218;var $308=$220;label=96;break;
 case 96: 
 var $308;
 var $309;
 var $310;
 var $311;
 var $_0917_off0;
 var $312=$311&1;
 var $313=(($312<<24)>>24)==0;
 var $314=HEAP32[(($20)>>2)];
 var $_1321=($313?$18:$314);
 var $315=HEAP8[($_1321)];
 var $316=(($_0917_off0<<24)>>24)==(($315<<24)>>24);
 var $317=(($310+12)|0);
 var $318=($309|0)==($308|0);
 if($316){label=97;break;}else{label=101;break;}
 case 97: 
 if($318){label=98;break;}else{label=99;break;}
 case 98: 
 var $321=$310;
 var $322=HEAP32[(($321)>>2)];
 var $323=(($322+40)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$324]($310) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 99: 
 var $327=(($309+1)|0);
 HEAP32[(($317)>>2)]=$327;
 label=100;break;
 case 100: 
 var $328=HEAP8[($3)];
 var $329=($328&255);
 var $330=$329&1;
 var $331=($330|0)==0;
 var $332=HEAP32[(($19)>>2)];
 var $333=$329>>>1;
 var $334=($331?$333:$332);
 var $335=($334>>>0)>1;
 var $__psn___trailing_sign_01007=($335?$__psn:$__trailing_sign_01224);
 var $__trailing_sign_1=$__psn___trailing_sign_01007;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;
 case 101: 
 if($318){label=102;break;}else{label=104;break;}
 case 102: 
 var $338=$310;
 var $339=HEAP32[(($338)>>2)];
 var $340=(($339+36)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$341]($310) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 103: 
 var $extract_t992=(($342)&255);
 var $_0913_off0=$extract_t992;label=105;break;
 case 104: 
 var $344=HEAP8[($309)];
 var $_0913_off0=$344;label=105;break;
 case 105: 
 var $_0913_off0;
 var $345=HEAP8[($4)];
 var $346=$345&1;
 var $347=(($346<<24)>>24)==0;
 var $348=HEAP32[(($17)>>2)];
 var $_1322=($347?$15:$348);
 var $349=HEAP8[($_1322)];
 var $350=(($_0913_off0<<24)>>24)==(($349<<24)>>24);
 if($350){label=106;break;}else{label=110;break;}
 case 106: 
 var $352=HEAP32[(($10)>>2)];
 var $353=(($352+12)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=(($352+16)|0);
 var $356=HEAP32[(($355)>>2)];
 var $357=($354|0)==($356|0);
 if($357){label=107;break;}else{label=108;break;}
 case 107: 
 var $359=$352;
 var $360=HEAP32[(($359)>>2)];
 var $361=(($360+40)|0);
 var $362=HEAP32[(($361)>>2)];
 var $363=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$362]($352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=24;break; }
 case 108: 
 var $365=(($354+1)|0);
 HEAP32[(($353)>>2)]=$365;
 label=109;break;
 case 109: 
 HEAP8[($__neg)]=1;
 var $366=HEAP8[($4)];
 var $367=($366&255);
 var $368=$367&1;
 var $369=($368|0)==0;
 var $370=HEAP32[(($16)>>2)];
 var $371=$367>>>1;
 var $372=($369?$371:$370);
 var $373=($372>>>0)>1;
 var $__nsn___trailing_sign_01008=($373?$__nsn:$__trailing_sign_01224);
 var $__trailing_sign_1=$__nsn___trailing_sign_01008;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;
 case 110: 
 var $375=HEAP32[(($__err)>>2)];
 var $376=$375|4;
 HEAP32[(($__err)>>2)]=$376;
 var $_0919=0;var $1030=$35;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load105710761218;label=308;break;
 case 111: 
 var $378=($__trailing_sign_01224|0)!=0;
 var $379=($__p_01226>>>0)<2;
 var $or_cond=$378|$379;
 if($or_cond){label=115;break;}else{label=112;break;}
 case 112: 
 var $381=($__p_01226|0)==2;
 if($381){label=113;break;}else{var $386=0;label=114;break;}
 case 113: 
 var $383=HEAP8[($31)];
 var $384=(($383<<24)>>24)!=0;
 var $386=$384;label=114;break;
 case 114: 
 var $386;
 var $brmerge=$22|$386;
 if($brmerge){label=115;break;}else{var $__trailing_sign_1=0;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}
 case 115: 
 var $387=HEAP8[($2)];
 var $388=$387&1;
 var $389=(($388<<24)>>24)==0;
 var $390=HEAP32[(($26)>>2)];
 var $_1323=($389?$24:$390);
 var $391=($__p_01226|0)==0;
 if($391){var $__sym_curr_char_sroa_0_0_ph=$_1323;var $_ph=$387;var $451=$390;label=128;break;}else{label=116;break;}
 case 116: 
 var $393=((($__p_01226)-(1))|0);
 var $394=(($__pat+$393)|0);
 var $395=HEAP8[($394)];
 var $switch=($395&255)<2;
 if($switch){label=117;break;}else{var $__sym_curr_char_sroa_0_0_ph=$_1323;var $_ph=$387;var $451=$390;label=128;break;}
 case 117: 
 var $396=($387&255);
 var $397=$396&1;
 var $398=($397|0)==0;
 var $399=HEAP32[(($25)>>2)];
 var $400=$396>>>1;
 var $401=($398?$400:$399);
 var $402=($401|0)==0;
 if($402){var $__sym_space_end_sroa_0_0_lcssa=$_1323;var $425=$387;var $424=$390;label=123;break;}else{var $__sym_space_end_sroa_0_01349=$_1323;label=118;break;}
 case 118: 
 var $__sym_space_end_sroa_0_01349;
 var $403=HEAP8[($__sym_space_end_sroa_0_01349)];
 var $404=(($403<<24)>>24);
 var $405=(function() { try { __THREW__ = 0; return _isascii($404) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { label=21;break; }
 case 119: 
 var $406=($405|0)==0;
 if($406){label=122;break;}else{label=120;break;}
 case 120: 
 var $407=HEAP32[(($12)>>2)];
 var $408=(($407+($404<<1))|0);
 var $409=HEAP16[(($408)>>1)];
 var $410=$409&8192;
 var $411=(($410<<16)>>16)==0;
 if($411){label=122;break;}else{label=121;break;}
 case 121: 
 var $412=(($__sym_space_end_sroa_0_01349+1)|0);
 var $_pre1308=HEAP8[($2)];
 var $413=$_pre1308&1;
 var $414=(($413<<24)>>24)==0;
 var $415=HEAP32[(($26)>>2)];
 var $_1324=($414?$24:$415);
 var $416=($_pre1308&255);
 var $417=$416&1;
 var $418=($417|0)==0;
 var $419=HEAP32[(($25)>>2)];
 var $420=$416>>>1;
 var $421=($418?$420:$419);
 var $422=(($_1324+$421)|0);
 var $423=($412|0)==($422|0);
 if($423){var $__sym_space_end_sroa_0_0_lcssa=$412;var $425=$_pre1308;var $424=$415;label=123;break;}else{var $__sym_space_end_sroa_0_01349=$412;label=118;break;}
 case 122: 
 var $_pre1456=HEAP8[($2)];
 var $_pre1457=HEAP32[(($26)>>2)];
 var $__sym_space_end_sroa_0_0_lcssa=$__sym_space_end_sroa_0_01349;var $425=$_pre1456;var $424=$_pre1457;label=123;break;
 case 123: 
 var $424;
 var $425;
 var $__sym_space_end_sroa_0_0_lcssa;
 var $426=$425&1;
 var $427=(($426<<24)>>24)==0;
 var $_1325=($427?$24:$424);
 var $428=$__sym_space_end_sroa_0_0_lcssa;
 var $429=$_1325;
 var $430=((($428)-($429))|0);
 var $431=HEAP8[($5)];
 var $432=($431&255);
 var $433=$432&1;
 var $434=($433|0)==0;
 var $435=HEAP32[(($29)>>2)];
 var $436=$432>>>1;
 var $437=($434?$436:$435);
 var $438=($430>>>0)>($437>>>0);
 if($438){var $__sym_curr_char_sroa_0_0_ph=$_1325;var $_ph=$425;var $451=$424;label=128;break;}else{label=124;break;}
 case 124: 
 var $439=$431&1;
 var $440=(($439<<24)>>24)==0;
 var $441=HEAP32[(($30)>>2)];
 var $_1326=($440?$28:$441);
 var $442=(($_1326+$437)|0);
 var $443=($__sym_space_end_sroa_0_0_lcssa|0)==($_1325|0);
 if($443){var $__sym_curr_char_sroa_0_0_ph=$__sym_space_end_sroa_0_0_lcssa;var $_ph=$425;var $451=$424;label=128;break;}else{label=125;break;}
 case 125: 
 var $_sum=((($437)-($430))|0);
 var $444=(($_1326+$_sum)|0);
 var $_sroa_0946_01128=$444;var $_sroa_0944_01129=$_1325;label=126;break;
 case 126: 
 var $_sroa_0944_01129;
 var $_sroa_0946_01128;
 var $445=HEAP8[($_sroa_0946_01128)];
 var $446=HEAP8[($_sroa_0944_01129)];
 var $447=(($445<<24)>>24)==(($446<<24)>>24);
 if($447){label=127;break;}else{var $__sym_curr_char_sroa_0_0_ph=$_1325;var $_ph=$425;var $451=$424;label=128;break;}
 case 127: 
 var $448=(($_sroa_0946_01128+1)|0);
 var $449=(($_sroa_0944_01129+1)|0);
 var $450=($448|0)==($442|0);
 if($450){var $__sym_curr_char_sroa_0_0_ph=$__sym_space_end_sroa_0_0_lcssa;var $_ph=$425;var $451=$424;label=128;break;}else{var $_sroa_0946_01128=$448;var $_sroa_0944_01129=$449;label=126;break;}
 case 128: 
 var $451;
 var $_ph;
 var $__sym_curr_char_sroa_0_0_ph;
 var $452=$_ph&1;
 var $453=(($452<<24)>>24)==0;
 var $_13301352=($453?$24:$451);
 var $454=($_ph&255);
 var $455=$454&1;
 var $456=($455|0)==0;
 var $457=HEAP32[(($25)>>2)];
 var $458=$454>>>1;
 var $459=($456?$458:$457);
 var $460=(($_13301352+$459)|0);
 var $461=($__sym_curr_char_sroa_0_0_ph|0)==($460|0);
 if($461){var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0_ph;label=152;break;}else{var $462=$71;var $__sym_curr_char_sroa_0_01353=$__sym_curr_char_sroa_0_0_ph;label=129;break;}
 case 129: 
 var $__sym_curr_char_sroa_0_01353;
 var $462;
 var $463=HEAP32[(($10)>>2)];
 var $464=($463|0)==0;
 if($464){var $479=0;label=135;break;}else{label=130;break;}
 case 130: 
 var $466=(($463+12)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=(($463+16)|0);
 var $469=HEAP32[(($468)>>2)];
 var $470=($467|0)==($469|0);
 if($470){label=131;break;}else{var $479=$463;label=135;break;}
 case 131: 
 var $472=$463;
 var $473=HEAP32[(($472)>>2)];
 var $474=(($473+36)|0);
 var $475=HEAP32[(($474)>>2)];
 var $476=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$475]($463) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=22;break; }
 case 132: 
 var $477=($476|0)==-1;
 if($477){label=134;break;}else{label=133;break;}
 case 133: 
 var $_pre1309=HEAP32[(($10)>>2)];
 var $479=$_pre1309;label=135;break;
 case 134: 
 HEAP32[(($10)>>2)]=0;
 var $479=0;label=135;break;
 case 135: 
 var $479;
 var $480=($479|0)==0;
 var $481=($462|0)==0;
 if($481){label=141;break;}else{label=136;break;}
 case 136: 
 var $483=(($462+12)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=(($462+16)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=($484|0)==($486|0);
 if($487){label=138;break;}else{label=137;break;}
 case 137: 
 if($480){var $496=$462;label=143;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01353;label=152;break;}
 case 138: 
 var $489=$462;
 var $490=HEAP32[(($489)>>2)];
 var $491=(($490+36)|0);
 var $492=HEAP32[(($491)>>2)];
 var $493=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$492]($462) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=139;break; } else { label=22;break; }
 case 139: 
 var $494=($493|0)==-1;
 if($494){label=140;break;}else{label=142;break;}
 case 140: 
 HEAP32[(($11)>>2)]=0;
 label=141;break;
 case 141: 
 if($480){var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01353;label=152;break;}else{var $496=0;label=143;break;}
 case 142: 
 if($480){var $496=$462;label=143;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01353;label=152;break;}
 case 143: 
 var $496;
 var $497=HEAP32[(($10)>>2)];
 var $498=(($497+12)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=(($497+16)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=($499|0)==($501|0);
 if($502){label=144;break;}else{label=146;break;}
 case 144: 
 var $504=$497;
 var $505=HEAP32[(($504)>>2)];
 var $506=(($505+36)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$507]($497) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=22;break; }
 case 145: 
 var $extract_t988=(($508)&255);
 var $_0906_off0=$extract_t988;label=147;break;
 case 146: 
 var $510=HEAP8[($499)];
 var $_0906_off0=$510;label=147;break;
 case 147: 
 var $_0906_off0;
 var $511=HEAP8[($__sym_curr_char_sroa_0_01353)];
 var $512=(($_0906_off0<<24)>>24)==(($511<<24)>>24);
 if($512){label=148;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01353;label=152;break;}
 case 148: 
 var $514=HEAP32[(($10)>>2)];
 var $515=(($514+12)|0);
 var $516=HEAP32[(($515)>>2)];
 var $517=(($514+16)|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=($516|0)==($518|0);
 if($519){label=149;break;}else{label=150;break;}
 case 149: 
 var $521=$514;
 var $522=HEAP32[(($521)>>2)];
 var $523=(($522+40)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$524]($514) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=151;break; } else { label=22;break; }
 case 150: 
 var $527=(($516+1)|0);
 HEAP32[(($515)>>2)]=$527;
 label=151;break;
 case 151: 
 var $528=(($__sym_curr_char_sroa_0_01353+1)|0);
 var $_pre1299=HEAP8[($2)];
 var $529=$_pre1299&1;
 var $530=(($529<<24)>>24)==0;
 var $531=HEAP32[(($26)>>2)];
 var $_1330=($530?$24:$531);
 var $532=($_pre1299&255);
 var $533=$532&1;
 var $534=($533|0)==0;
 var $535=HEAP32[(($25)>>2)];
 var $536=$532>>>1;
 var $537=($534?$536:$535);
 var $538=(($_1330+$537)|0);
 var $539=($528|0)==($538|0);
 if($539){var $__sym_curr_char_sroa_0_0_lcssa=$528;label=152;break;}else{var $462=$496;var $__sym_curr_char_sroa_0_01353=$528;label=129;break;}
 case 152: 
 var $__sym_curr_char_sroa_0_0_lcssa;
 if($22){label=153;break;}else{var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}
 case 153: 
 var $540=HEAP8[($2)];
 var $541=$540&1;
 var $542=(($541<<24)>>24)==0;
 var $543=HEAP32[(($26)>>2)];
 var $_1331=($542?$24:$543);
 var $544=($540&255);
 var $545=$544&1;
 var $546=($545|0)==0;
 var $547=HEAP32[(($25)>>2)];
 var $548=$544>>>1;
 var $549=($546?$548:$547);
 var $550=(($_1331+$549)|0);
 var $551=($__sym_curr_char_sroa_0_0_lcssa|0)==($550|0);
 if($551){var $__trailing_sign_1=$__trailing_sign_01224;var $926=$34;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $925=$35;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;label=273;break;}else{label=154;break;}
 case 154: 
 var $553=HEAP32[(($__err)>>2)];
 var $554=$553|4;
 HEAP32[(($__err)>>2)]=$554;
 var $_0919=0;var $1030=$35;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load105710761218;label=308;break;
 case 155: 
 var $__we1087;
 var $__gb_sroa_1_4_load10571074;
 var $555;
 var $__gb_sroa_0_0_load10471064;
 var $556;
 var $__ng_0;
 var $557=HEAP32[(($10)>>2)];
 var $558=($557|0)==0;
 if($558){var $573=0;label=161;break;}else{label=156;break;}
 case 156: 
 var $560=(($557+12)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=(($557+16)|0);
 var $563=HEAP32[(($562)>>2)];
 var $564=($561|0)==($563|0);
 if($564){label=157;break;}else{var $573=$557;label=161;break;}
 case 157: 
 var $566=$557;
 var $567=HEAP32[(($566)>>2)];
 var $568=(($567+36)|0);
 var $569=HEAP32[(($568)>>2)];
 var $570=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$569]($557) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=158;break; } else { var $_ph_ph=$555;var $__gb_sroa_1_4_load10571069_ph_ph=$__gb_sroa_1_4_load10571074;label=19;break; }
 case 158: 
 var $571=($570|0)==-1;
 if($571){label=160;break;}else{label=159;break;}
 case 159: 
 var $_pre1310=HEAP32[(($10)>>2)];
 var $573=$_pre1310;label=161;break;
 case 160: 
 HEAP32[(($10)>>2)]=0;
 var $573=0;label=161;break;
 case 161: 
 var $573;
 var $574=($573|0)==0;
 var $575=HEAP32[(($11)>>2)];
 var $576=($575|0)==0;
 if($576){label=167;break;}else{label=162;break;}
 case 162: 
 var $578=(($575+12)|0);
 var $579=HEAP32[(($578)>>2)];
 var $580=(($575+16)|0);
 var $581=HEAP32[(($580)>>2)];
 var $582=($579|0)==($581|0);
 if($582){label=164;break;}else{label=163;break;}
 case 163: 
 if($574){label=169;break;}else{label=199;break;}
 case 164: 
 var $584=$575;
 var $585=HEAP32[(($584)>>2)];
 var $586=(($585+36)|0);
 var $587=HEAP32[(($586)>>2)];
 var $588=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$587]($575) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=165;break; } else { var $_ph_ph=$555;var $__gb_sroa_1_4_load10571069_ph_ph=$__gb_sroa_1_4_load10571074;label=19;break; }
 case 165: 
 var $589=($588|0)==-1;
 if($589){label=166;break;}else{label=168;break;}
 case 166: 
 HEAP32[(($11)>>2)]=0;
 label=167;break;
 case 167: 
 if($574){label=199;break;}else{label=169;break;}
 case 168: 
 if($574){label=169;break;}else{label=199;break;}
 case 169: 
 var $591=HEAP32[(($10)>>2)];
 var $592=(($591+12)|0);
 var $593=HEAP32[(($592)>>2)];
 var $594=(($591+16)|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=($593|0)==($595|0);
 if($596){label=170;break;}else{label=172;break;}
 case 170: 
 var $598=$591;
 var $599=HEAP32[(($598)>>2)];
 var $600=(($599+36)|0);
 var $601=HEAP32[(($600)>>2)];
 var $602=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$601]($591) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=171;break; } else { var $_ph_ph=$555;var $__gb_sroa_1_4_load10571069_ph_ph=$__gb_sroa_1_4_load10571074;label=19;break; }
 case 171: 
 var $extract_t985=(($602)&255);
 var $_0910_off0=$extract_t985;label=173;break;
 case 172: 
 var $604=HEAP8[($593)];
 var $_0910_off0=$604;label=173;break;
 case 173: 
 var $_0910_off0;
 var $605=(($_0910_off0<<24)>>24);
 var $606=(function() { try { __THREW__ = 0; return _isascii($605) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=174;break; } else { var $_ph_ph=$555;var $__gb_sroa_1_4_load10571069_ph_ph=$__gb_sroa_1_4_load10571074;label=19;break; }
 case 174: 
 var $607=($606|0)==0;
 if($607){label=187;break;}else{label=175;break;}
 case 175: 
 var $608=HEAP32[(($12)>>2)];
 var $609=(($608+($605<<1))|0);
 var $610=HEAP16[(($609)>>1)];
 var $611=$610&2048;
 var $612=(($611<<16)>>16)==0;
 if($612){label=187;break;}else{label=176;break;}
 case 176: 
 var $614=HEAP32[(($__wn)>>2)];
 var $615=($614|0)==($__we1087|0);
 if($615){label=177;break;}else{var $__we1089=$__we1087;var $640=$614;label=186;break;}
 case 177: 
 var $617=HEAP32[(($33)>>2)];
 var $618=($617|0)!=((468)|0);
 var $619=HEAP32[(($8)>>2)];
 var $620=$__we1087;
 var $621=$619;
 var $622=((($620)-($621))|0);
 var $623=($622>>>0)<2147483647;
 var $624=$622<<1;
 var $625=($623?$624:-1);
 var $__i=($618?$619:0);
 var $626=_realloc($__i,$625);
 var $627=($626|0)==0;
 if($627){label=178;break;}else{label=179;break;}
 case 178: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=179;break; } else { var $_ph_ph=$555;var $__gb_sroa_1_4_load10571069_ph_ph=$__gb_sroa_1_4_load10571074;label=19;break; }
 case 179: 
 if($618){label=180;break;}else{label=181;break;}
 case 180: 
 HEAP32[(($8)>>2)]=$626;
 var $635=$626;label=185;break;
 case 181: 
 var $_pr_i=HEAP32[(($8)>>2)];
 HEAP32[(($8)>>2)]=$626;
 var $630=($_pr_i|0)==0;
 if($630){var $635=$626;label=185;break;}else{label=182;break;}
 case 182: 
 var $632=HEAP32[(($33)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$632]($_pr_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=183;break; } else { label=184;break; }
 case 183: 
 var $_pre_i=HEAP32[(($8)>>2)];
 var $635=$_pre_i;label=185;break;
 case 184: 
 var $634$0 = ___cxa_find_matching_catch(-1, -1,0); var $634$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 185: 
 var $635;
 HEAP32[(($33)>>2)]=642;
 var $636=(($635+$622)|0);
 HEAP32[(($__wn)>>2)]=$636;
 var $637=HEAP32[(($8)>>2)];
 var $638=(($637+$625)|0);
 var $__we1089=$638;var $640=$636;label=186;break;
 case 186: 
 var $640;
 var $__we1089;
 var $641=(($640+1)|0);
 HEAP32[(($__wn)>>2)]=$641;
 HEAP8[($640)]=$_0910_off0;
 var $642=((($__ng_0)+(1))|0);
 var $__ng_1=$642;var $682=$556;var $__gb_sroa_0_0_load10471065=$__gb_sroa_0_0_load10471064;var $681=$555;var $__gb_sroa_1_4_load10571072=$__gb_sroa_1_4_load10571074;var $__we1088=$__we1089;label=196;break;
 case 187: 
 var $643=HEAP8[($0)];
 var $644=($643&255);
 var $645=$644&1;
 var $646=($645|0)==0;
 var $647=HEAP32[(($32)>>2)];
 var $648=$644>>>1;
 var $649=($646?$648:$647);
 var $650=($649|0)==0;
 var $651=($__ng_0|0)==0;
 var $or_cond1010=$650|$651;
 if($or_cond1010){label=199;break;}else{label=188;break;}
 case 188: 
 var $653=HEAP8[($__ts)];
 var $654=(($_0910_off0<<24)>>24)==(($653<<24)>>24);
 if($654){label=189;break;}else{label=199;break;}
 case 189: 
 var $656=($__gb_sroa_0_0_load10471064|0)==($556|0);
 if($656){label=190;break;}else{var $678=$556;var $__gb_sroa_0_0_load10471066=$__gb_sroa_0_0_load10471064;var $677=$555;var $__gb_sroa_1_4_load10571073=$__gb_sroa_1_4_load10571074;label=195;break;}
 case 190: 
 var $658=($__gb_sroa_1_4_load10571074|0)==((468)|0);
 var $659=$__gb_sroa_0_0_load10471064;
 var $660=$555;
 var $661=((($659)-($660))|0);
 var $662=($661>>>0)<2147483647;
 var $663=$661<<1;
 var $664=($662?$663:-1);
 var $665=$661>>2;
 if($658){var $668=0;label=192;break;}else{label=191;break;}
 case 191: 
 var $phitmp_i=$555;
 var $668=$phitmp_i;label=192;break;
 case 192: 
 var $668;
 var $669=_realloc($668,$664);
 var $670=$669;
 var $671=($669|0)==0;
 if($671){label=193;break;}else{label=194;break;}
 case 193: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=194;break; } else { var $_ph_ph=$555;var $__gb_sroa_1_4_load10571069_ph_ph=$__gb_sroa_1_4_load10571074;label=19;break; }
 case 194: 
 var $673=$664>>>2;
 var $674=(($670+($665<<2))|0);
 var $675=(($670+($673<<2))|0);
 var $678=$675;var $__gb_sroa_0_0_load10471066=$674;var $677=$670;var $__gb_sroa_1_4_load10571073=642;label=195;break;
 case 195: 
 var $__gb_sroa_1_4_load10571073;
 var $677;
 var $__gb_sroa_0_0_load10471066;
 var $678;
 var $679=(($__gb_sroa_0_0_load10471066+4)|0);
 HEAP32[(($__gb_sroa_0_0_load10471066)>>2)]=$__ng_0;
 var $__ng_1=0;var $682=$678;var $__gb_sroa_0_0_load10471065=$679;var $681=$677;var $__gb_sroa_1_4_load10571072=$__gb_sroa_1_4_load10571073;var $__we1088=$__we1087;label=196;break;
 case 196: 
 var $__we1088;
 var $__gb_sroa_1_4_load10571072;
 var $681;
 var $__gb_sroa_0_0_load10471065;
 var $682;
 var $__ng_1;
 var $683=HEAP32[(($10)>>2)];
 var $684=(($683+12)|0);
 var $685=HEAP32[(($684)>>2)];
 var $686=(($683+16)|0);
 var $687=HEAP32[(($686)>>2)];
 var $688=($685|0)==($687|0);
 if($688){label=197;break;}else{label=198;break;}
 case 197: 
 var $690=$683;
 var $691=HEAP32[(($690)>>2)];
 var $692=(($691+40)|0);
 var $693=HEAP32[(($692)>>2)];
 var $694=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$693]($683) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $556=$682;var $__gb_sroa_0_0_load10471064=$__gb_sroa_0_0_load10471065;var $555=$681;var $__gb_sroa_1_4_load10571074=$__gb_sroa_1_4_load10571072;var $__we1087=$__we1088;label=155;break; } else { var $_ph_ph=$681;var $__gb_sroa_1_4_load10571069_ph_ph=$__gb_sroa_1_4_load10571072;label=19;break; }
 case 198: 
 var $696=(($685+1)|0);
 HEAP32[(($684)>>2)]=$696;
 var $__ng_0=$__ng_1;var $556=$682;var $__gb_sroa_0_0_load10471064=$__gb_sroa_0_0_load10471065;var $555=$681;var $__gb_sroa_1_4_load10571074=$__gb_sroa_1_4_load10571072;var $__we1087=$__we1088;label=155;break;
 case 199: 
 var $698=($555|0)==($__gb_sroa_0_0_load10471064|0);
 var $699=($__ng_0|0)==0;
 var $or_cond1011=$698|$699;
 if($or_cond1011){var $726=$556;var $__gb_sroa_0_0_load10471063=$__gb_sroa_0_0_load10471064;var $725=$555;var $__gb_sroa_1_4_load10571071=$__gb_sroa_1_4_load10571074;label=207;break;}else{label=200;break;}
 case 200: 
 var $701=($__gb_sroa_0_0_load10471064|0)==($556|0);
 if($701){label=201;break;}else{var $723=$556;var $__gb_sroa_0_0_load10471067=$__gb_sroa_0_0_load10471064;var $722=$555;var $__gb_sroa_1_4_load10571070=$__gb_sroa_1_4_load10571074;label=206;break;}
 case 201: 
 var $703=($__gb_sroa_1_4_load10571074|0)==((468)|0);
 var $704=$__gb_sroa_0_0_load10471064;
 var $705=$555;
 var $706=((($704)-($705))|0);
 var $707=($706>>>0)<2147483647;
 var $708=$706<<1;
 var $709=($707?$708:-1);
 var $710=$706>>2;
 if($703){var $713=0;label=203;break;}else{label=202;break;}
 case 202: 
 var $phitmp_i1016=$555;
 var $713=$phitmp_i1016;label=203;break;
 case 203: 
 var $713;
 var $714=_realloc($713,$709);
 var $715=$714;
 var $716=($714|0)==0;
 if($716){label=204;break;}else{label=205;break;}
 case 204: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=205;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$555;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10571074;label=24;break; }
 case 205: 
 var $718=$709>>>2;
 var $719=(($715+($710<<2))|0);
 var $720=(($715+($718<<2))|0);
 var $723=$720;var $__gb_sroa_0_0_load10471067=$719;var $722=$715;var $__gb_sroa_1_4_load10571070=642;label=206;break;
 case 206: 
 var $__gb_sroa_1_4_load10571070;
 var $722;
 var $__gb_sroa_0_0_load10471067;
 var $723;
 var $724=(($__gb_sroa_0_0_load10471067+4)|0);
 HEAP32[(($__gb_sroa_0_0_load10471067)>>2)]=$__ng_0;
 var $726=$723;var $__gb_sroa_0_0_load10471063=$724;var $725=$722;var $__gb_sroa_1_4_load10571071=$__gb_sroa_1_4_load10571070;label=207;break;
 case 207: 
 var $__gb_sroa_1_4_load10571071;
 var $725;
 var $__gb_sroa_0_0_load10471063;
 var $726;
 var $727=HEAP32[(($__fd)>>2)];
 var $728=($727|0)>0;
 if($728){label=208;break;}else{var $__we1084=$__we1087;label=271;break;}
 case 208: 
 var $730=HEAP32[(($10)>>2)];
 var $731=($730|0)==0;
 if($731){var $746=0;label=214;break;}else{label=209;break;}
 case 209: 
 var $733=(($730+12)|0);
 var $734=HEAP32[(($733)>>2)];
 var $735=(($730+16)|0);
 var $736=HEAP32[(($735)>>2)];
 var $737=($734|0)==($736|0);
 if($737){label=210;break;}else{var $746=$730;label=214;break;}
 case 210: 
 var $739=$730;
 var $740=HEAP32[(($739)>>2)];
 var $741=(($740+36)|0);
 var $742=HEAP32[(($741)>>2)];
 var $743=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$742]($730) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=211;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$725;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10571071;label=24;break; }
 case 211: 
 var $744=($743|0)==-1;
 if($744){label=213;break;}else{label=212;break;}
 case 212: 
 var $_pre1311=HEAP32[(($10)>>2)];
 var $746=$_pre1311;label=214;break;
 case 213: 
 HEAP32[(($10)>>2)]=0;
 var $746=0;label=214;break;
 case 214: 
 var $746;
 var $747=($746|0)==0;
 var $748=HEAP32[(($11)>>2)];
 var $749=($748|0)==0;
 if($749){label=220;break;}else{label=215;break;}
 case 215: 
 var $751=(($748+12)|0);
 var $752=HEAP32[(($751)>>2)];
 var $753=(($748+16)|0);
 var $754=HEAP32[(($753)>>2)];
 var $755=($752|0)==($754|0);
 if($755){label=217;break;}else{label=216;break;}
 case 216: 
 if($747){var $764=$748;label=222;break;}else{label=227;break;}
 case 217: 
 var $757=$748;
 var $758=HEAP32[(($757)>>2)];
 var $759=(($758+36)|0);
 var $760=HEAP32[(($759)>>2)];
 var $761=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$760]($748) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=218;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$725;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10571071;label=24;break; }
 case 218: 
 var $762=($761|0)==-1;
 if($762){label=219;break;}else{label=221;break;}
 case 219: 
 HEAP32[(($11)>>2)]=0;
 label=220;break;
 case 220: 
 if($747){label=227;break;}else{var $764=0;label=222;break;}
 case 221: 
 if($747){var $764=$748;label=222;break;}else{label=227;break;}
 case 222: 
 var $764;
 var $765=HEAP32[(($10)>>2)];
 var $766=(($765+12)|0);
 var $767=HEAP32[(($766)>>2)];
 var $768=(($765+16)|0);
 var $769=HEAP32[(($768)>>2)];
 var $770=($767|0)==($769|0);
 if($770){label=223;break;}else{label=225;break;}
 case 223: 
 var $772=$765;
 var $773=HEAP32[(($772)>>2)];
 var $774=(($773+36)|0);
 var $775=HEAP32[(($774)>>2)];
 var $776=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$775]($765) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=224;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$725;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10571071;label=24;break; }
 case 224: 
 var $extract_t978=(($776)&255);
 var $_0918_off0=$extract_t978;label=226;break;
 case 225: 
 var $778=HEAP8[($767)];
 var $_0918_off0=$778;label=226;break;
 case 226: 
 var $_0918_off0;
 var $779=HEAP8[($__dp)];
 var $780=(($_0918_off0<<24)>>24)==(($779<<24)>>24);
 if($780){label=228;break;}else{label=227;break;}
 case 227: 
 var $782=HEAP32[(($__err)>>2)];
 var $783=$782|4;
 HEAP32[(($__err)>>2)]=$783;
 var $_0919=0;var $1030=$725;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571071;label=308;break;
 case 228: 
 var $785=HEAP32[(($10)>>2)];
 var $786=(($785+12)|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=(($785+16)|0);
 var $789=HEAP32[(($788)>>2)];
 var $790=($787|0)==($789|0);
 if($790){label=229;break;}else{label=230;break;}
 case 229: 
 var $792=$785;
 var $793=HEAP32[(($792)>>2)];
 var $794=(($793+40)|0);
 var $795=HEAP32[(($794)>>2)];
 var $796=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$795]($785) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__we10861123=$__we1087;var $799=$764;label=231;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph=$725;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10571071;label=24;break; }
 case 230: 
 var $798=(($787+1)|0);
 HEAP32[(($786)>>2)]=$798;
 var $__we10861123=$__we1087;var $799=$764;label=231;break;
 case 231: 
 var $799;
 var $__we10861123;
 var $800=HEAP32[(($10)>>2)];
 var $801=($800|0)==0;
 if($801){var $816=0;label=237;break;}else{label=232;break;}
 case 232: 
 var $803=(($800+12)|0);
 var $804=HEAP32[(($803)>>2)];
 var $805=(($800+16)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=($804|0)==($806|0);
 if($807){label=233;break;}else{var $816=$800;label=237;break;}
 case 233: 
 var $809=$800;
 var $810=HEAP32[(($809)>>2)];
 var $811=(($810+36)|0);
 var $812=HEAP32[(($811)>>2)];
 var $813=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$812]($800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=234;break; } else { label=20;break; }
 case 234: 
 var $814=($813|0)==-1;
 if($814){label=236;break;}else{label=235;break;}
 case 235: 
 var $_pre1312=HEAP32[(($10)>>2)];
 var $816=$_pre1312;label=237;break;
 case 236: 
 HEAP32[(($10)>>2)]=0;
 var $816=0;label=237;break;
 case 237: 
 var $816;
 var $817=($816|0)==0;
 var $818=($799|0)==0;
 if($818){label=243;break;}else{label=238;break;}
 case 238: 
 var $820=(($799+12)|0);
 var $821=HEAP32[(($820)>>2)];
 var $822=(($799+16)|0);
 var $823=HEAP32[(($822)>>2)];
 var $824=($821|0)==($823|0);
 if($824){label=240;break;}else{label=239;break;}
 case 239: 
 if($817){var $833=$799;label=245;break;}else{label=252;break;}
 case 240: 
 var $826=$799;
 var $827=HEAP32[(($826)>>2)];
 var $828=(($827+36)|0);
 var $829=HEAP32[(($828)>>2)];
 var $830=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$829]($799) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=241;break; } else { label=20;break; }
 case 241: 
 var $831=($830|0)==-1;
 if($831){label=242;break;}else{label=244;break;}
 case 242: 
 HEAP32[(($11)>>2)]=0;
 label=243;break;
 case 243: 
 if($817){label=252;break;}else{var $833=0;label=245;break;}
 case 244: 
 if($817){var $833=$799;label=245;break;}else{label=252;break;}
 case 245: 
 var $833;
 var $834=HEAP32[(($10)>>2)];
 var $835=(($834+12)|0);
 var $836=HEAP32[(($835)>>2)];
 var $837=(($834+16)|0);
 var $838=HEAP32[(($837)>>2)];
 var $839=($836|0)==($838|0);
 if($839){label=246;break;}else{label=248;break;}
 case 246: 
 var $841=$834;
 var $842=HEAP32[(($841)>>2)];
 var $843=(($842+36)|0);
 var $844=HEAP32[(($843)>>2)];
 var $845=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$844]($834) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=247;break; } else { label=20;break; }
 case 247: 
 var $extract_t981=(($845)&255);
 var $_0927_off0=$extract_t981;label=249;break;
 case 248: 
 var $847=HEAP8[($836)];
 var $_0927_off0=$847;label=249;break;
 case 249: 
 var $_0927_off0;
 var $848=(($_0927_off0<<24)>>24);
 var $849=(function() { try { __THREW__ = 0; return _isascii($848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=250;break; } else { label=20;break; }
 case 250: 
 var $850=($849|0)==0;
 if($850){label=252;break;}else{label=251;break;}
 case 251: 
 var $851=HEAP32[(($12)>>2)];
 var $852=(($851+($848<<1))|0);
 var $853=HEAP16[(($852)>>1)];
 var $854=$853&2048;
 var $855=(($854<<16)>>16)==0;
 if($855){label=252;break;}else{label=253;break;}
 case 252: 
 var $856=HEAP32[(($__err)>>2)];
 var $857=$856|4;
 HEAP32[(($__err)>>2)]=$857;
 var $_0919=0;var $1030=$725;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571071;label=308;break;
 case 253: 
 var $859=HEAP32[(($__wn)>>2)];
 var $860=($859|0)==($__we10861123|0);
 if($860){label=254;break;}else{var $__we1085=$__we10861123;var $885=$859;label=263;break;}
 case 254: 
 var $862=HEAP32[(($33)>>2)];
 var $863=($862|0)!=((468)|0);
 var $864=HEAP32[(($8)>>2)];
 var $865=$__we10861123;
 var $866=$864;
 var $867=((($865)-($866))|0);
 var $868=($867>>>0)<2147483647;
 var $869=$867<<1;
 var $870=($868?$869:-1);
 var $__i1023=($863?$864:0);
 var $871=_realloc($__i1023,$870);
 var $872=($871|0)==0;
 if($872){label=255;break;}else{label=256;break;}
 case 255: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=256;break; } else { label=20;break; }
 case 256: 
 if($863){label=257;break;}else{label=258;break;}
 case 257: 
 HEAP32[(($8)>>2)]=$871;
 var $880=$871;label=262;break;
 case 258: 
 var $_pr_i1025=HEAP32[(($8)>>2)];
 HEAP32[(($8)>>2)]=$871;
 var $875=($_pr_i1025|0)==0;
 if($875){var $880=$871;label=262;break;}else{label=259;break;}
 case 259: 
 var $877=HEAP32[(($33)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$877]($_pr_i1025) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=260;break; } else { label=261;break; }
 case 260: 
 var $_pre_i1026=HEAP32[(($8)>>2)];
 var $880=$_pre_i1026;label=262;break;
 case 261: 
 var $879$0 = ___cxa_find_matching_catch(-1, -1,0); var $879$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 262: 
 var $880;
 HEAP32[(($33)>>2)]=642;
 var $881=(($880+$867)|0);
 HEAP32[(($__wn)>>2)]=$881;
 var $882=HEAP32[(($8)>>2)];
 var $883=(($882+$870)|0);
 var $__we1085=$883;var $885=$881;label=263;break;
 case 263: 
 var $885;
 var $__we1085;
 var $886=HEAP32[(($10)>>2)];
 var $887=(($886+12)|0);
 var $888=HEAP32[(($887)>>2)];
 var $889=(($886+16)|0);
 var $890=HEAP32[(($889)>>2)];
 var $891=($888|0)==($890|0);
 if($891){label=264;break;}else{label=266;break;}
 case 264: 
 var $893=$886;
 var $894=HEAP32[(($893)>>2)];
 var $895=(($894+36)|0);
 var $896=HEAP32[(($895)>>2)];
 var $897=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$896]($886) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=265;break; } else { label=20;break; }
 case 265: 
 var $extract_t983=(($897)&255);
 var $_pre1300=HEAP32[(($__wn)>>2)];
 var $_0928_off0=$extract_t983;var $900=$_pre1300;label=267;break;
 case 266: 
 var $899=HEAP8[($888)];
 var $_0928_off0=$899;var $900=$885;label=267;break;
 case 267: 
 var $900;
 var $_0928_off0;
 var $901=(($900+1)|0);
 HEAP32[(($__wn)>>2)]=$901;
 HEAP8[($900)]=$_0928_off0;
 var $902=HEAP32[(($__fd)>>2)];
 var $903=((($902)-(1))|0);
 HEAP32[(($__fd)>>2)]=$903;
 var $904=HEAP32[(($10)>>2)];
 var $905=(($904+12)|0);
 var $906=HEAP32[(($905)>>2)];
 var $907=(($904+16)|0);
 var $908=HEAP32[(($907)>>2)];
 var $909=($906|0)==($908|0);
 if($909){label=268;break;}else{label=270;break;}
 case 268: 
 var $911=$904;
 var $912=HEAP32[(($911)>>2)];
 var $913=(($912+40)|0);
 var $914=HEAP32[(($913)>>2)];
 var $915=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$914]($904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=269;break; } else { label=20;break; }
 case 269: 
 var $916=($903|0)>0;
 if($916){var $__we10861123=$__we1085;var $799=$833;label=231;break;}else{var $__we1084=$__we1085;label=271;break;}
 case 270: 
 var $918=(($906+1)|0);
 HEAP32[(($905)>>2)]=$918;
 label=269;break;
 case 271: 
 var $__we1084;
 var $919=HEAP32[(($__wn)>>2)];
 var $920=HEAP32[(($8)>>2)];
 var $921=($919|0)==($920|0);
 if($921){label=272;break;}else{var $__trailing_sign_1=$__trailing_sign_01224;var $926=$726;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load10471063;var $925=$725;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load10571071;var $__we1083=$__we1084;label=273;break;}
 case 272: 
 var $923=HEAP32[(($__err)>>2)];
 var $924=$923|4;
 HEAP32[(($__err)>>2)]=$924;
 var $_0919=0;var $1030=$725;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571071;label=308;break;
 case 273: 
 var $__we1083;
 var $__gb_sroa_1_4_load10571075;
 var $925;
 var $__gb_sroa_0_0_load10471062;
 var $926;
 var $__trailing_sign_1;
 var $927=((($__p_01226)+(1))|0);
 var $928=($927>>>0)<4;
 if($928){var $__we10821215=$__we1083;var $__gb_sroa_1_4_load105710761218=$__gb_sroa_1_4_load10571075;var $35=$925;var $__gb_sroa_0_0_load104710611221=$__gb_sroa_0_0_load10471062;var $34=$926;var $__trailing_sign_01224=$__trailing_sign_1;var $__p_01226=$927;label=3;break;}else{var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load10571075;var $_lcssa=$925;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load10471062;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=274;break;}
 case 274: 
 var $__trailing_sign_0_lcssa;
 var $__gb_sroa_0_0_load10471061_lcssa;
 var $_lcssa;
 var $__gb_sroa_1_4_load10571076_lcssa;
 var $929=($__trailing_sign_0_lcssa|0)==0;
 if($929){label=305;break;}else{label=275;break;}
 case 275: 
 var $930=$__trailing_sign_0_lcssa;
 var $931=$__trailing_sign_0_lcssa;
 var $932=(($930+1)|0);
 var $933=(($__trailing_sign_0_lcssa+8)|0);
 var $934=(($__trailing_sign_0_lcssa+4)|0);
 var $__i_0=1;label=276;break;
 case 276: 
 var $__i_0;
 var $935=HEAP8[($931)];
 var $936=($935&255);
 var $937=$936&1;
 var $938=($937|0)==0;
 if($938){label=278;break;}else{label=277;break;}
 case 277: 
 var $940=HEAP32[(($934)>>2)];
 var $943=$940;label=279;break;
 case 278: 
 var $942=$936>>>1;
 var $943=$942;label=279;break;
 case 279: 
 var $943;
 var $944=($__i_0>>>0)<($943>>>0);
 if($944){label=280;break;}else{label=305;break;}
 case 280: 
 var $946=HEAP32[(($10)>>2)];
 var $947=($946|0)==0;
 if($947){var $962=0;label=286;break;}else{label=281;break;}
 case 281: 
 var $949=(($946+12)|0);
 var $950=HEAP32[(($949)>>2)];
 var $951=(($946+16)|0);
 var $952=HEAP32[(($951)>>2)];
 var $953=($950|0)==($952|0);
 if($953){label=282;break;}else{var $962=$946;label=286;break;}
 case 282: 
 var $955=$946;
 var $956=HEAP32[(($955)>>2)];
 var $957=(($956+36)|0);
 var $958=HEAP32[(($957)>>2)];
 var $959=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$958]($946) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=283;break; } else { label=18;break; }
 case 283: 
 var $960=($959|0)==-1;
 if($960){label=285;break;}else{label=284;break;}
 case 284: 
 var $_pre1313=HEAP32[(($10)>>2)];
 var $962=$_pre1313;label=286;break;
 case 285: 
 HEAP32[(($10)>>2)]=0;
 var $962=0;label=286;break;
 case 286: 
 var $962;
 var $963=($962|0)==0;
 var $964=HEAP32[(($11)>>2)];
 var $965=($964|0)==0;
 if($965){label=292;break;}else{label=287;break;}
 case 287: 
 var $967=(($964+12)|0);
 var $968=HEAP32[(($967)>>2)];
 var $969=(($964+16)|0);
 var $970=HEAP32[(($969)>>2)];
 var $971=($968|0)==($970|0);
 if($971){label=289;break;}else{label=288;break;}
 case 288: 
 if($963){label=294;break;}else{label=301;break;}
 case 289: 
 var $973=$964;
 var $974=HEAP32[(($973)>>2)];
 var $975=(($974+36)|0);
 var $976=HEAP32[(($975)>>2)];
 var $977=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$976]($964) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=290;break; } else { label=18;break; }
 case 290: 
 var $978=($977|0)==-1;
 if($978){label=291;break;}else{label=293;break;}
 case 291: 
 HEAP32[(($11)>>2)]=0;
 label=292;break;
 case 292: 
 if($963){label=301;break;}else{label=294;break;}
 case 293: 
 if($963){label=294;break;}else{label=301;break;}
 case 294: 
 var $980=HEAP32[(($10)>>2)];
 var $981=(($980+12)|0);
 var $982=HEAP32[(($981)>>2)];
 var $983=(($980+16)|0);
 var $984=HEAP32[(($983)>>2)];
 var $985=($982|0)==($984|0);
 if($985){label=295;break;}else{label=297;break;}
 case 295: 
 var $987=$980;
 var $988=HEAP32[(($987)>>2)];
 var $989=(($988+36)|0);
 var $990=HEAP32[(($989)>>2)];
 var $991=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$990]($980) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=296;break; } else { label=18;break; }
 case 296: 
 var $extract_t=(($991)&255);
 var $_0940_off0=$extract_t;label=298;break;
 case 297: 
 var $993=HEAP8[($982)];
 var $_0940_off0=$993;label=298;break;
 case 298: 
 var $_0940_off0;
 var $994=HEAP8[($931)];
 var $995=$994&1;
 var $996=(($995<<24)>>24)==0;
 if($996){var $999=$932;label=300;break;}else{label=299;break;}
 case 299: 
 var $998=HEAP32[(($933)>>2)];
 var $999=$998;label=300;break;
 case 300: 
 var $999;
 var $1000=(($999+$__i_0)|0);
 var $1001=HEAP8[($1000)];
 var $1002=(($_0940_off0<<24)>>24)==(($1001<<24)>>24);
 if($1002){label=302;break;}else{label=301;break;}
 case 301: 
 var $1004=HEAP32[(($__err)>>2)];
 var $1005=$1004|4;
 HEAP32[(($__err)>>2)]=$1005;
 var $_0919=0;var $1030=$_lcssa;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571076_lcssa;label=308;break;
 case 302: 
 var $1007=((($__i_0)+(1))|0);
 var $1008=HEAP32[(($10)>>2)];
 var $1009=(($1008+12)|0);
 var $1010=HEAP32[(($1009)>>2)];
 var $1011=(($1008+16)|0);
 var $1012=HEAP32[(($1011)>>2)];
 var $1013=($1010|0)==($1012|0);
 if($1013){label=303;break;}else{label=304;break;}
 case 303: 
 var $1015=$1008;
 var $1016=HEAP32[(($1015)>>2)];
 var $1017=(($1016+40)|0);
 var $1018=HEAP32[(($1017)>>2)];
 var $1019=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1018]($1008) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1007;label=276;break; } else { label=18;break; }
 case 304: 
 var $1021=(($1010+1)|0);
 HEAP32[(($1009)>>2)]=$1021;
 var $__i_0=$1007;label=276;break;
 case 305: 
 var $1022=($_lcssa|0)==($__gb_sroa_0_0_load10471061_lcssa|0);
 if($1022){var $_0919=1;var $1030=$__gb_sroa_0_0_load10471061_lcssa;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571076_lcssa;label=308;break;}else{label=306;break;}
 case 306: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa,$__gb_sroa_0_0_load10471061_lcssa,$__et);
 var $1024=HEAP32[(($__et)>>2)];
 var $1025=($1024|0)==0;
 if($1025){var $_0919=1;var $1030=$_lcssa;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571076_lcssa;label=308;break;}else{label=307;break;}
 case 307: 
 var $1027=HEAP32[(($__err)>>2)];
 var $1028=$1027|4;
 HEAP32[(($__err)>>2)]=$1028;
 var $_0919=0;var $1030=$_lcssa;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571076_lcssa;label=308;break;
 case 308: 
 var $__gb_sroa_1_4_load10571077;
 var $1030;
 var $_0919;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $1031=($1030|0)==0;
 if($1031){label=311;break;}else{label=309;break;}
 case 309: 
 var $1033=$1030;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10571077]($1033) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=311;break; } else { label=310;break; }
 case 310: 
 var $1035$0 = ___cxa_find_matching_catch(-1, -1,0); var $1035$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 311: 
 STACKTOP=sp;return $_0919;
 case 312: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($2,$msg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 ___cxa_throw($1,11488,(44));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $1=(sp)+(152);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=468;
 var $5=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((16840)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$9,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=40;break; }
 case 4: 
 var $13=HEAP32[((16844)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($8+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($8+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=8;break;}
 case 6: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=40;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $29=$25;
 HEAP8[($__neg)]=0;
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($1)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($__iob+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$1,$__intl,$__loc,$34,$__err,$__neg,$29,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=40;break; }
 case 9: 
 if($35){label=10;break;}else{label=22;break;}
 case 10: 
 var $38=$__v;
 var $39=HEAP8[($38)];
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($__v+8)|0);
 var $44=HEAP32[(($43)>>2)];
 HEAP8[($44)]=0;
 var $45=(($__v+4)|0);
 HEAP32[(($45)>>2)]=0;
 label=13;break;
 case 12: 
 var $47=$__v;
 var $48=(($47+1)|0);
 HEAP8[($48)]=0;
 HEAP8[($38)]=0;
 label=13;break;
 case 13: 
 var $49=HEAP8[($__neg)];
 var $50=$49&1;
 var $51=(($50<<24)>>24)==0;
 var $_pre114=$25;
 if($51){label=17;break;}else{label=14;break;}
 case 14: 
 var $53=HEAP32[(($_pre114)>>2)];
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($29,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=40;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=40;break; }
 case 16: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=$57$0;
 var $59=$57$1;
 HEAP32[(($3)>>2)]=0;
 var $133=$2;var $_0106117=$59;var $_0105119=$58;label=41;break;
 case 17: 
 var $60=HEAP32[(($_pre114)>>2)];
 var $61=(($60+28)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($29,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $64=HEAP32[(($3)>>2)];
 var $65=HEAP32[(($__wn)>>2)];
 var $66=((($65)-(1))|0);
 var $__w_0=$64;label=19;break;
 case 19: 
 var $__w_0;
 var $68=($__w_0>>>0)<($66>>>0);
 if($68){label=20;break;}else{label=21;break;}
 case 20: 
 var $70=HEAP8[($__w_0)];
 var $71=(($70<<24)>>24)==(($63<<24)>>24);
 var $72=(($__w_0+1)|0);
 if($71){var $__w_0=$72;label=19;break;}else{label=21;break;}
 case 21: 
 var $74=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0,$65) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=40;break; }
 case 22: 
 var $76=(($__b)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==0;
 if($78){var $93=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $80=(($77+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($77+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=24;break;}else{var $93=$77;label=27;break;}
 case 24: 
 var $86=$77;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=40;break; }
 case 25: 
 var $91=($90|0)==-1;
 if($91){label=26;break;}else{var $93=$77;label=27;break;}
 case 26: 
 HEAP32[(($76)>>2)]=0;
 var $93=0;label=27;break;
 case 27: 
 var $93;
 var $94=($93|0)==0;
 var $95=($31|0)==0;
 if($95){label=33;break;}else{label=28;break;}
 case 28: 
 var $97=(($31+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($31+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 if($94){label=36;break;}else{label=35;break;}
 case 30: 
 var $103=$31;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=40;break; }
 case 31: 
 var $108=($107|0)==-1;
 if($108){label=32;break;}else{label=34;break;}
 case 32: 
 HEAP32[(($30)>>2)]=0;
 label=33;break;
 case 33: 
 if($94){label=35;break;}else{label=36;break;}
 case 34: 
 var $110=($31|0)==0;
 var $tmp=$94^$110;
 if($tmp){label=36;break;}else{label=35;break;}
 case 35: 
 var $112=HEAP32[(($__err)>>2)];
 var $113=$112|2;
 HEAP32[(($__err)>>2)]=$113;
 label=36;break;
 case 36: 
 var $114=(($agg_result)|0);
 HEAP32[(($114)>>2)]=$93;
 var $115=HEAP32[(($7)>>2)];
 var $116=(($115)|0);
 var $117=__ZNSt3__114__shared_count16__release_sharedEv($116);
 var $118=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $119=($118|0)==0;
 if($119){label=39;break;}else{label=37;break;}
 case 37: 
 var $121=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=38;break; }
 case 38: 
 var $123$0 = ___cxa_find_matching_catch(-1, -1,0); var $123$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 39: 
 STACKTOP=sp;return;
 case 40: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $128=HEAP32[(($7)>>2)];
 var $129=(($128)|0);
 var $130=__ZNSt3__114__shared_count16__release_sharedEv($129);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $131=($_pre|0)==0;
 if($131){var $_0106118=$127;var $_0105120=$126;label=43;break;}else{var $133=$_pre;var $_0106117=$127;var $_0105119=$126;label=41;break;}
 case 41: 
 var $_0105119;
 var $_0106117;
 var $133;
 var $134=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0106118=$_0106117;var $_0105120=$_0105119;label=43;break; } else { label=42;break; }
 case 42: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1,0); var $136$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 43: 
 var $_0105120;
 var $_0106118;
 var $137$0=$_0105120;
 var $137$1=0;
 var $138$0=$137$0;
 var $138$1=$_0106118;
 ___resumeException($138$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=$__first;
 var $4=HEAP8[($2)];
 var $5=($4&255);
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($this+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $13=$10;label=4;break;
 case 3: 
 var $12=$5>>>1;
 var $13=$12;label=4;break;
 case 4: 
 var $13;
 var $14=$4&1;
 var $15=(($14<<24)>>24)==0;
 if($15){var $22=10;var $21=$4;label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&-2;
 var $phitmp=((($19)-(1))|0);
 var $20=(($18)&255);
 var $22=$phitmp;var $21=$20;label=6;break;
 case 6: 
 var $21;
 var $22;
 var $23=$__last;
 var $24=((($23)-($3))|0);
 var $25=($__last|0)==($__first|0);
 if($25){label=17;break;}else{label=7;break;}
 case 7: 
 var $27=((($22)-($13))|0);
 var $28=($27>>>0)<($24>>>0);
 if($28){label=8;break;}else{var $33=$21;label=9;break;}
 case 8: 
 var $30=((($13)+($24))|0);
 var $31=((($30)-($22))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$22,$31,$13,$13,0,0);
 var $_pre=HEAP8[($2)];
 var $33=$_pre;label=9;break;
 case 9: 
 var $33;
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=11;break;}else{label=10;break;}
 case 10: 
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=12;break;
 case 11: 
 var $40=(($1+1)|0);
 var $41=$40;label=12;break;
 case 12: 
 var $41;
 var $42=(($41+$13)|0);
 var $43=((($13)-($3))|0);
 var $scevgep=(($__last+$43)|0);
 var $scevgep71=$scevgep;
 var $_069=$__first;var $__p_070=$42;label=13;break;
 case 13: 
 var $__p_070;
 var $_069;
 var $45=HEAP8[($_069)];
 HEAP8[($__p_070)]=$45;
 var $46=(($__p_070+1)|0);
 var $47=(($_069+1)|0);
 var $48=($47|0)==($__last|0);
 if($48){label=14;break;}else{var $_069=$47;var $__p_070=$46;label=13;break;}
 case 14: 
 var $scevgep72=(($41+$scevgep71)|0);
 HEAP8[($scevgep72)]=0;
 var $50=((($13)+($24))|0);
 var $51=HEAP8[($2)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=16;break;}else{label=15;break;}
 case 15: 
 var $55=(($this+4)|0);
 HEAP32[(($55)>>2)]=$50;
 label=17;break;
 case 16: 
 var $57=$50<<1;
 var $58=(($57)&255);
 HEAP8[($2)]=$58;
 label=17;break;
 case 17: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i513=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=$4;
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=$6;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=$8;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=$11;
 var $13=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $14=$13;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast512=$1;
 var $20=(($__loc)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$__p_i_i_i;
 var $23=HEAP32[((17312)>>2)];
 var $24=($23|0)==-1;
 if($24){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17312;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17312,$22,274);
 label=4;break;
 case 4: 
 var $26=HEAP32[((17316)>>2)];
 var $27=((($26)-(1))|0);
 var $28=(($21+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($21+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 __ZNSt8bad_castC2Ev($41);
 ___cxa_throw($40,11472,(394));
 throw "Reached an unreachable!";
 case 7: 
 var $42=$38;
 var $43=$38;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+44)|0);
 var $46=HEAP32[(($45)>>2)];
 FUNCTION_TABLE[$46]($tmpcast512,$42);
 var $47=$__pat;
 var $48=HEAP32[(($1)>>2)];
 tempBigInt=$48;HEAP8[($47)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(3))|0)]=tempBigInt&0xff;
 var $49=$38;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+32)|0);
 var $52=HEAP32[(($51)>>2)];
 FUNCTION_TABLE[$52]($2,$42);
 var $53=$__nsn;
 var $54=HEAP8[($53)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=9;break;}else{label=8;break;}
 case 8: 
 var $58=(($__nsn+8)|0);
 var $59=HEAP32[(($58)>>2)];
 HEAP8[($59)]=0;
 var $60=(($__nsn+4)|0);
 HEAP32[(($60)>>2)]=0;
 label=10;break;
 case 9: 
 var $62=$__nsn;
 var $63=(($62+1)|0);
 HEAP8[($63)]=0;
 HEAP8[($53)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1,0); var $65$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 12: 
 assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $66=HEAP32[(($49)>>2)];
 var $67=(($66+28)|0);
 var $68=HEAP32[(($67)>>2)];
 FUNCTION_TABLE[$68]($4,$42);
 var $69=$__psn;
 var $70=HEAP8[($69)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=14;break;}else{label=13;break;}
 case 13: 
 var $74=(($__psn+8)|0);
 var $75=HEAP32[(($74)>>2)];
 HEAP8[($75)]=0;
 var $76=(($__psn+4)|0);
 HEAP32[(($76)>>2)]=0;
 label=15;break;
 case 14: 
 var $78=$__psn;
 var $79=(($78+1)|0);
 HEAP8[($79)]=0;
 HEAP8[($69)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1,0); var $81$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 var $82=$38;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=FUNCTION_TABLE[$85]($42);
 HEAP8[($__dp)]=$86;
 var $87=HEAP32[(($82)>>2)];
 var $88=(($87+16)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=FUNCTION_TABLE[$89]($42);
 HEAP8[($__ts)]=$90;
 var $91=HEAP32[(($49)>>2)];
 var $92=(($91+20)|0);
 var $93=HEAP32[(($92)>>2)];
 FUNCTION_TABLE[$93]($6,$42);
 var $94=$__grp;
 var $95=HEAP8[($94)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){label=19;break;}else{label=18;break;}
 case 18: 
 var $99=(($__grp+8)|0);
 var $100=HEAP32[(($99)>>2)];
 HEAP8[($100)]=0;
 var $101=(($__grp+4)|0);
 HEAP32[(($101)>>2)]=0;
 label=20;break;
 case 19: 
 var $103=$__grp;
 var $104=(($103+1)|0);
 HEAP8[($104)]=0;
 HEAP8[($94)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $106$0 = ___cxa_find_matching_catch(-1, -1,0); var $106$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 22: 
 assert(12 % 1 === 0);HEAP32[(($94)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($94)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($94)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 var $107=HEAP32[(($49)>>2)];
 var $108=(($107+24)|0);
 var $109=HEAP32[(($108)>>2)];
 FUNCTION_TABLE[$109]($8,$42);
 var $110=$__sym;
 var $111=HEAP8[($110)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=24;break;}else{label=23;break;}
 case 23: 
 var $115=(($__sym+8)|0);
 var $116=HEAP32[(($115)>>2)];
 HEAP8[($116)]=0;
 var $117=(($__sym+4)|0);
 HEAP32[(($117)>>2)]=0;
 label=25;break;
 case 24: 
 var $119=$__sym;
 var $120=(($119+1)|0);
 HEAP8[($120)]=0;
 HEAP8[($110)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $122$0 = ___cxa_find_matching_catch(-1, -1,0); var $122$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 27: 
 assert(12 % 1 === 0);HEAP32[(($110)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($110)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($110)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
 var $123=$38;
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+36)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=FUNCTION_TABLE[$126]($42);
 var $storemerge=$127;label=54;break;
 case 28: 
 var $tmpcast=$10;
 var $129=(($__loc)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$__p_i_i_i513;
 var $132=HEAP32[((17320)>>2)];
 var $133=($132|0)==-1;
 if($133){label=30;break;}else{label=29;break;}
 case 29: 
 var $_sroa_016_0__idx_i_i514=(($__p_i_i_i513)|0);
 HEAP32[(($_sroa_016_0__idx_i_i514)>>2)]=17320;
 var $_sroa_117_4__idx18_i_i515=(($__p_i_i_i513+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i515)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i516=(($__p_i_i_i513+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i516)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17320,$131,274);
 label=30;break;
 case 30: 
 var $135=HEAP32[((17324)>>2)];
 var $136=((($135)-(1))|0);
 var $137=(($130+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($130+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=$138;
 var $142=$140;
 var $143=((($141)-($142))|0);
 var $144=$143>>2;
 var $145=($144>>>0)>($136>>>0);
 if($145){label=31;break;}else{label=32;break;}
 case 31: 
 var $146=(($140+($136<<2))|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($147|0)==0;
 if($148){label=32;break;}else{label=33;break;}
 case 32: 
 var $149=___cxa_allocate_exception(4);
 var $150=$149;
 __ZNSt8bad_castC2Ev($150);
 ___cxa_throw($149,11472,(394));
 throw "Reached an unreachable!";
 case 33: 
 var $151=$147;
 var $152=$147;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+44)|0);
 var $155=HEAP32[(($154)>>2)];
 FUNCTION_TABLE[$155]($tmpcast,$151);
 var $156=$__pat;
 var $157=HEAP32[(($10)>>2)];
 tempBigInt=$157;HEAP8[($156)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($156)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($156)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($156)+(3))|0)]=tempBigInt&0xff;
 var $158=$147;
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159+32)|0);
 var $161=HEAP32[(($160)>>2)];
 FUNCTION_TABLE[$161]($11,$151);
 var $162=$__nsn;
 var $163=HEAP8[($162)];
 var $164=$163&1;
 var $165=(($164<<24)>>24)==0;
 if($165){label=35;break;}else{label=34;break;}
 case 34: 
 var $167=(($__nsn+8)|0);
 var $168=HEAP32[(($167)>>2)];
 HEAP8[($168)]=0;
 var $169=(($__nsn+4)|0);
 HEAP32[(($169)>>2)]=0;
 label=36;break;
 case 35: 
 var $171=$__nsn;
 var $172=(($171+1)|0);
 HEAP8[($172)]=0;
 HEAP8[($162)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $174$0 = ___cxa_find_matching_catch(-1, -1,0); var $174$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 38: 
 assert(12 % 1 === 0);HEAP32[(($162)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($162)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($162)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
 HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
 var $175=HEAP32[(($158)>>2)];
 var $176=(($175+28)|0);
 var $177=HEAP32[(($176)>>2)];
 FUNCTION_TABLE[$177]($13,$151);
 var $178=$__psn;
 var $179=HEAP8[($178)];
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=40;break;}else{label=39;break;}
 case 39: 
 var $183=(($__psn+8)|0);
 var $184=HEAP32[(($183)>>2)];
 HEAP8[($184)]=0;
 var $185=(($__psn+4)|0);
 HEAP32[(($185)>>2)]=0;
 label=41;break;
 case 40: 
 var $187=$__psn;
 var $188=(($187+1)|0);
 HEAP8[($188)]=0;
 HEAP8[($178)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $190$0 = ___cxa_find_matching_catch(-1, -1,0); var $190$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 43: 
 assert(12 % 1 === 0);HEAP32[(($178)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($178)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($178)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($13);
 var $191=$147;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+12)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=FUNCTION_TABLE[$194]($151);
 HEAP8[($__dp)]=$195;
 var $196=HEAP32[(($191)>>2)];
 var $197=(($196+16)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=FUNCTION_TABLE[$198]($151);
 HEAP8[($__ts)]=$199;
 var $200=HEAP32[(($158)>>2)];
 var $201=(($200+20)|0);
 var $202=HEAP32[(($201)>>2)];
 FUNCTION_TABLE[$202]($15,$151);
 var $203=$__grp;
 var $204=HEAP8[($203)];
 var $205=$204&1;
 var $206=(($205<<24)>>24)==0;
 if($206){label=45;break;}else{label=44;break;}
 case 44: 
 var $208=(($__grp+8)|0);
 var $209=HEAP32[(($208)>>2)];
 HEAP8[($209)]=0;
 var $210=(($__grp+4)|0);
 HEAP32[(($210)>>2)]=0;
 label=46;break;
 case 45: 
 var $212=$__grp;
 var $213=(($212+1)|0);
 HEAP8[($213)]=0;
 HEAP8[($203)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $215$0 = ___cxa_find_matching_catch(-1, -1,0); var $215$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($203)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($203)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($203)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
 var $216=HEAP32[(($158)>>2)];
 var $217=(($216+24)|0);
 var $218=HEAP32[(($217)>>2)];
 FUNCTION_TABLE[$218]($17,$151);
 var $219=$__sym;
 var $220=HEAP8[($219)];
 var $221=$220&1;
 var $222=(($221<<24)>>24)==0;
 if($222){label=50;break;}else{label=49;break;}
 case 49: 
 var $224=(($__sym+8)|0);
 var $225=HEAP32[(($224)>>2)];
 HEAP8[($225)]=0;
 var $226=(($__sym+4)|0);
 HEAP32[(($226)>>2)]=0;
 label=51;break;
 case 50: 
 var $228=$__sym;
 var $229=(($228+1)|0);
 HEAP8[($229)]=0;
 HEAP8[($219)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $231$0 = ___cxa_find_matching_catch(-1, -1,0); var $231$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 53: 
 assert(12 % 1 === 0);HEAP32[(($219)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($219)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($219)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 var $232=$147;
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233+36)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=FUNCTION_TABLE[$235]($151);
 var $storemerge=$236;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__grouping;
 var $2=$__grouping;
 var $3=HEAP8[($2)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__grouping+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($12|0)==0;
 if($13){label=24;break;}else{label=5;break;}
 case 5: 
 var $15=($__g|0)==($__g_end|0);
 if($15){var $24=$3;label=9;break;}else{label=6;break;}
 case 6: 
 var $16=((($__g_end)-(4))|0);
 var $17=($16>>>0)>($__g>>>0);
 if($17){var $_086=$__g;var $18=$16;label=7;break;}else{var $24=$3;label=9;break;}
 case 7: 
 var $18;
 var $_086;
 var $19=HEAP32[(($_086)>>2)];
 var $20=HEAP32[(($18)>>2)];
 HEAP32[(($_086)>>2)]=$20;
 HEAP32[(($18)>>2)]=$19;
 var $21=(($_086+4)|0);
 var $22=((($18)-(4))|0);
 var $23=($21>>>0)<($22>>>0);
 if($23){var $_086=$21;var $18=$22;label=7;break;}else{label=8;break;}
 case 8: 
 var $_pre_pre=HEAP8[($2)];
 var $24=$_pre_pre;label=9;break;
 case 9: 
 var $24;
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=11;break;}else{label=10;break;}
 case 10: 
 var $28=(($__grouping+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $32=$29;label=12;break;
 case 11: 
 var $31=(($1+1)|0);
 var $32=$31;label=12;break;
 case 12: 
 var $32;
 var $33=($24&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=14;break;}else{label=13;break;}
 case 13: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=15;break;
 case 14: 
 var $40=$33>>>1;
 var $41=$40;label=15;break;
 case 15: 
 var $41;
 var $42=((($__g_end)-(4))|0);
 var $43=($42>>>0)>($__g>>>0);
 var $44=HEAP8[($32)];
 var $45=(($44<<24)>>24);
 var $_not79=(($44<<24)>>24)<1;
 var $46=(($44<<24)>>24)==127;
 var $or_cond80=$_not79|$46;
 if($43){label=16;break;}else{var $_lcssa76=$45;var $or_cond_lcssa=$or_cond80;label=21;break;}
 case 16: 
 var $47=(($32+$41)|0);
 var $48=$47;
 var $__ig_081=$32;var $__r_082=$__g;var $50=$45;var $or_cond83=$or_cond80;label=17;break;
 case 17: 
 var $or_cond83;
 var $50;
 var $__r_082;
 var $__ig_081;
 if($or_cond83){label=20;break;}else{label=18;break;}
 case 18: 
 var $52=HEAP32[(($__r_082)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=20;break;}else{label=19;break;}
 case 19: 
 HEAP32[(($__err)>>2)]=4;
 label=24;break;
 case 20: 
 var $56=$__ig_081;
 var $57=((($48)-($56))|0);
 var $58=($57|0)>1;
 var $59=(($__ig_081+1)|0);
 var $___ig_0=($58?$59:$__ig_081);
 var $60=(($__r_082+4)|0);
 var $61=($60>>>0)<($42>>>0);
 var $62=HEAP8[($___ig_0)];
 var $63=(($62<<24)>>24);
 var $_not=(($62<<24)>>24)<1;
 var $64=(($62<<24)>>24)==127;
 var $or_cond=$_not|$64;
 if($61){var $__ig_081=$___ig_0;var $__r_082=$60;var $50=$63;var $or_cond83=$or_cond;label=17;break;}else{var $_lcssa76=$63;var $or_cond_lcssa=$or_cond;label=21;break;}
 case 21: 
 var $or_cond_lcssa;
 var $_lcssa76;
 if($or_cond_lcssa){label=24;break;}else{label=22;break;}
 case 22: 
 var $66=HEAP32[(($42)>>2)];
 var $67=($_lcssa76>>>0)<($66>>>0);
 var $68=($66|0)==0;
 var $or_cond74=$67|$68;
 if($or_cond74){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($__err)>>2)]=4;
 label=24;break;
 case 24: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+600)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $1=(sp)+(448);
 var $__atoms=(sp)+(456);
 var $__nbuf=(sp)+(496);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=468;
 var $5=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((16832)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$9,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $13=HEAP32[((16836)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($8+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($8+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=8;break;}
 case 6: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $29=$25;
 HEAP8[($__neg)]=0;
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($1)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($__iob+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$1,$__intl,$__loc,$34,$__err,$__neg,$29,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($35){label=10;break;}else{label=34;break;}
 case 10: 
 var $38=(($__atoms)|0);
 var $39=$25;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+48)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($29,4992,5002,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $44=(($__nbuf)|0);
 var $45=HEAP32[(($__wn)>>2)];
 var $46=HEAP32[(($3)>>2)];
 var $47=$45;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=($49|0)>392;
 if($50){label=12;break;}else{var $__nc_0=$44;var $__h_sroa_0_1=0;label=19;break;}
 case 12: 
 var $51=$49>>2;
 var $52=((($51)+(2))|0);
 var $53=_malloc($52);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{var $__nc_0=$53;var $__h_sroa_0_1=$53;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $__h_sroa_0_1=0;label=19;break; } else { var $__h_sroa_0_0=0;label=16;break; }
 case 14: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=$56$0;
 var $58=$56$1;
 HEAP32[(($3)>>2)]=0;
 var $168=$2;var $_1147169=$57;var $_1171=$58;label=54;break;
 case 15: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=$60$0;
 var $62=$60$1;
 var $_0145=$62;var $_0146=$61;label=53;break;
 case 16: 
 var $__h_sroa_0_0;
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $eh_lpad_body$1=$64$1;var $eh_lpad_body$0=$64$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_0;label=17;break;
 case 17: 
 var $__h_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $65=$eh_lpad_body$0;
 var $66=$eh_lpad_body$1;
 var $67=($__h_sroa_0_0_lpad_body|0)==0;
 if($67){var $_0145=$66;var $_0146=$65;label=53;break;}else{label=18;break;}
 case 18: 
 _free($__h_sroa_0_0_lpad_body);
 var $_0145=$66;var $_0146=$65;label=53;break;
 case 19: 
 var $__h_sroa_0_1;
 var $__nc_0;
 var $70=HEAP8[($__neg)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $74=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$74;label=21;break;
 case 21: 
 var $__nc_1;
 var $76=($46>>>0)<($45>>>0);
 if($76){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $77=(($__atoms+40)|0);
 var $78=$__atoms;
 var $__nc_2166=$__nc_1;var $__w_0167=$46;label=23;break;
 case 23: 
 var $__w_0167;
 var $__nc_2166;
 var $_0=$38;label=24;break;
 case 24: 
 var $_0;
 var $81=($_0|0)==($77|0);
 if($81){var $_0_lcssa=$77;label=26;break;}else{label=25;break;}
 case 25: 
 var $83=HEAP32[(($_0)>>2)];
 var $84=HEAP32[(($__w_0167)>>2)];
 var $85=($83|0)==($84|0);
 var $86=(($_0+4)|0);
 if($85){var $_0_lcssa=$_0;label=26;break;}else{var $_0=$86;label=24;break;}
 case 26: 
 var $_0_lcssa;
 var $87=$_0_lcssa;
 var $88=((($87)-($78))|0);
 var $89=$88>>2;
 var $90=((4992+$89)|0);
 var $91=HEAP8[($90)];
 HEAP8[($__nc_2166)]=$91;
 var $92=(($__w_0167+4)|0);
 var $93=(($__nc_2166+1)|0);
 var $94=HEAP32[(($__wn)>>2)];
 var $95=($92>>>0)<($94>>>0);
 if($95){var $__nc_2166=$93;var $__w_0167=$92;label=23;break;}else{var $__nc_2_lcssa=$93;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $96=_sscanf($44,3872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $97=($96|0)==1;
 if($97){label=32;break;}else{label=28;break;}
 case 28: 
 var $99=___cxa_allocate_exception(8);
 var $100=$99;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($100,3752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($99,11488,(44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $103$0 = ___cxa_find_matching_catch(-1, -1); var $103$1 = tempRet0;
 ___cxa_free_exception($99);
 var $eh_lpad_body$1=$103$1;var $eh_lpad_body$0=$103$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_1;label=17;break;
 case 32: 
 var $105=($__h_sroa_0_1|0)==0;
 if($105){label=34;break;}else{label=33;break;}
 case 33: 
 _free($__h_sroa_0_1);
 label=34;break;
 case 34: 
 var $107=(($__b)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($108|0)==0;
 if($109){var $126=0;label=40;break;}else{label=35;break;}
 case 35: 
 var $111=(($108+12)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($108+16)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=($112|0)==($114|0);
 if($115){label=36;break;}else{label=37;break;}
 case 36: 
 var $117=$108;
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118+36)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$120]($108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0148=$121;label=38;break; } else { label=15;break; }
 case 37: 
 var $123=HEAP32[(($112)>>2)];
 var $_0148=$123;label=38;break;
 case 38: 
 var $_0148;
 var $124=($_0148|0)==-1;
 if($124){label=39;break;}else{var $126=$108;label=40;break;}
 case 39: 
 HEAP32[(($107)>>2)]=0;
 var $126=0;label=40;break;
 case 40: 
 var $126;
 var $127=($126|0)==0;
 var $128=HEAP32[(($30)>>2)];
 var $129=($128|0)==0;
 if($129){label=46;break;}else{label=41;break;}
 case 41: 
 var $131=(($128+12)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($128+16)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($132|0)==($134|0);
 if($135){label=42;break;}else{label=43;break;}
 case 42: 
 var $137=$128;
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138+36)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$140]($128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0144=$141;label=44;break; } else { label=15;break; }
 case 43: 
 var $143=HEAP32[(($132)>>2)];
 var $_0144=$143;label=44;break;
 case 44: 
 var $_0144;
 var $144=($_0144|0)==-1;
 if($144){label=45;break;}else{label=47;break;}
 case 45: 
 HEAP32[(($30)>>2)]=0;
 label=46;break;
 case 46: 
 if($127){label=48;break;}else{label=49;break;}
 case 47: 
 var $146=($128|0)==0;
 var $tmp=$127^$146;
 if($tmp){label=49;break;}else{label=48;break;}
 case 48: 
 var $148=HEAP32[(($__err)>>2)];
 var $149=$148|2;
 HEAP32[(($__err)>>2)]=$149;
 label=49;break;
 case 49: 
 var $151=(($agg_result)|0);
 HEAP32[(($151)>>2)]=$126;
 var $152=HEAP32[(($7)>>2)];
 var $153=(($152)|0);
 var $154=__ZNSt3__114__shared_count16__release_sharedEv($153);
 var $155=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $156=($155|0)==0;
 if($156){label=52;break;}else{label=50;break;}
 case 50: 
 var $158=HEAP32[(($4)>>2)];
 var $159=$155;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($159) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=51;break; }
 case 51: 
 var $161$0 = ___cxa_find_matching_catch(-1, -1,0); var $161$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 var $_0146;
 var $_0145;
 var $163=HEAP32[(($7)>>2)];
 var $164=(($163)|0);
 var $165=__ZNSt3__114__shared_count16__release_sharedEv($164);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $166=($_pre|0)==0;
 if($166){var $_1147170=$_0146;var $_1172=$_0145;label=56;break;}else{var $168=$_pre;var $_1147169=$_0146;var $_1171=$_0145;label=54;break;}
 case 54: 
 var $_1171;
 var $_1147169;
 var $168;
 var $169=HEAP32[(($4)>>2)];
 var $170=$168;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($170) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1147170=$_1147169;var $_1172=$_1171;label=56;break; } else { label=55;break; }
 case 55: 
 var $172$0 = ___cxa_find_matching_catch(-1, -1,0); var $172$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 56: 
 var $_1172;
 var $_1147170;
 var $173$0=$_1147170;
 var $173$1=0;
 var $174$0=$173$0;
 var $174$1=$_1172;
 ___resumeException($174$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=sp;
 var $__gbuf=(sp)+(8);
 var $__pat=(sp)+(408);
 var $__dp=(sp)+(416);
 var $__ts=(sp)+(424);
 var $__grp=(sp)+(432);
 var $1=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($0)>>2)]=$__we;
 var $2=(($__gbuf)|0);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $3=$__sym;
 var $4=$__psn;
 var $5=$__nsn;
 var $6=$__spaces;
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=26;break; }
 case 2: 
 var $8=(($__gbuf+400)|0);
 var $9=(($__wb)|0);
 var $10=HEAP32[(($9)>>2)];
 HEAP32[(($__wn)>>2)]=$10;
 var $11=(($__b)|0);
 var $12=(($__e)|0);
 var $13=$__ct;
 var $14=(($__nsn+4)|0);
 var $15=(($__nsn+8)|0);
 var $16=(($__psn+4)|0);
 var $17=(($__psn+8)|0);
 var $18=$__flags&512;
 var $19=($18|0)!=0;
 var $20=(($__sym+4)|0);
 var $21=(($__sym+8)|0);
 var $22=(($__spaces+4)|0);
 var $23=(($__spaces+8)|0);
 var $24=(($__pat+3)|0);
 var $25=(($__grp+4)|0);
 var $__gb_sroa_1_4_load100910251134=468;var $27=$2;var $__gb_sroa_0_0_load99910101137=$2;var $26=$8;var $__trailing_sign_01140=0;var $__p_01142=0;label=3;break;
 case 3: 
 var $__p_01142;
 var $__trailing_sign_01140;
 var $26;
 var $__gb_sroa_0_0_load99910101137;
 var $27;
 var $__gb_sroa_1_4_load100910251134;
 var $28=HEAP32[(($11)>>2)];
 var $29=($28|0)==0;
 if($29){var $46=1;label=10;break;}else{label=4;break;}
 case 4: 
 var $31=(($28+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($28+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=$28;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0926=$41;label=7;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 6: 
 var $43=HEAP32[(($32)>>2)];
 var $_0926=$43;label=7;break;
 case 7: 
 var $_0926;
 var $44=($_0926|0)==-1;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $_pre1202=HEAP32[(($11)>>2)];
 var $phitmp=($_pre1202|0)==0;
 var $46=$phitmp;label=10;break;
 case 9: 
 HEAP32[(($11)>>2)]=0;
 var $46=1;label=10;break;
 case 10: 
 var $46;
 var $47=HEAP32[(($12)>>2)];
 var $48=($47|0)==0;
 if($48){label=16;break;}else{label=11;break;}
 case 11: 
 var $50=(($47+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($47+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=12;break;}else{label=13;break;}
 case 12: 
 var $56=$47;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0925=$60;label=14;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 13: 
 var $62=HEAP32[(($51)>>2)];
 var $_0925=$62;label=14;break;
 case 14: 
 var $_0925;
 var $63=($_0925|0)==-1;
 if($63){label=15;break;}else{label=17;break;}
 case 15: 
 HEAP32[(($12)>>2)]=0;
 label=16;break;
 case 16: 
 if($46){var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$27;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;label=256;break;}else{var $68=0;label=18;break;}
 case 17: 
 var $65=($47|0)==0;
 var $66=$46^$65;
 if($66){var $68=$47;label=18;break;}else{var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$27;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;label=256;break;}
 case 18: 
 var $68;
 var $69=(($__pat+$__p_01142)|0);
 var $70=HEAP8[($69)];
 var $71=(($70<<24)>>24);
 switch(($71|0)){case 2:{ label=107;break;}case 4:{ var $__ng_0=0;var $567=$26;var $__gb_sroa_0_0_load9991013=$__gb_sroa_0_0_load99910101137;var $566=$27;var $__gb_sroa_1_4_load10091023=$__gb_sroa_1_4_load100910251134;label=151;break;}case 1:{ label=30;break;}case 0:{ label=41;break;}case 3:{ label=66;break;}default:{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}}break;
 case 19: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $72=$_lcssa;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091025_lcssa;label=27;break;
 case 20: 
 var $__gb_sroa_1_4_load10091018_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit1037$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1037$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1037$1;var $lpad_phi$0=$lpad_loopexit1037$0;var $72=$_ph_ph;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091018_ph_ph;label=27;break;
 case 21: 
 var $lpad_loopexit1051$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1051$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1051$1;var $lpad_phi$0=$lpad_loopexit1051$0;var $72=$721;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091020;label=27;break;
 case 22: 
 var $lpad_loopexit1053$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1053$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1053$1;var $lpad_phi$0=$lpad_loopexit1053$0;var $72=$27;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load100910251134;label=27;break;
 case 23: 
 var $lpad_loopexit1060$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1060$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1060$1;var $lpad_phi$0=$lpad_loopexit1060$0;var $72=$27;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load100910251134;label=27;break;
 case 24: 
 var $lpad_loopexit1064$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1064$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1064$1;var $lpad_phi$0=$lpad_loopexit1064$0;var $72=$27;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load100910251134;label=27;break;
 case 25: 
 var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph;
 var $_ph_ph1036_ph_ph_ph_ph_ph;
 var $lpad_loopexit1067$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1067$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1067$1;var $lpad_phi$0=$lpad_loopexit1067$0;var $72=$_ph_ph1036_ph_ph_ph_ph_ph;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph;label=27;break;
 case 26: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $72=$2;var $__gb_sroa_1_4_load10091018=468;label=27;break;
 case 27: 
 var $__gb_sroa_1_4_load10091018;
 var $72;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $73=($72|0)==0;
 if($73){label=294;break;}else{label=28;break;}
 case 28: 
 var $75=$72;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10091018]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=29;break; }
 case 29: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1,0); var $77$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 var $cond=($__p_01142|0)==3;
 if($cond){var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$27;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;label=256;break;}else{label=31;break;}
 case 31: 
 var $80=HEAP32[(($11)>>2)];
 var $81=(($80+12)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($80+16)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($82|0)==($84|0);
 if($85){label=32;break;}else{label=33;break;}
 case 32: 
 var $87=$80;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0924=$91;label=34;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 33: 
 var $93=HEAP32[(($82)>>2)];
 var $_0924=$93;label=34;break;
 case 34: 
 var $_0924;
 var $94=HEAP32[(($13)>>2)];
 var $95=(($94+12)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($__ct,8192,$_0924) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 35: 
 if($97){label=36;break;}else{label=40;break;}
 case 36: 
 var $99=HEAP32[(($11)>>2)];
 var $100=(($99+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($99+16)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($101|0)==($103|0);
 if($104){label=37;break;}else{label=38;break;}
 case 37: 
 var $106=$99;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+40)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$109]($99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0923=$110;label=39;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 38: 
 var $112=(($101+4)|0);
 HEAP32[(($100)>>2)]=$112;
 var $113=HEAP32[(($101)>>2)];
 var $_0923=$113;label=39;break;
 case 39: 
 var $_0923;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_0923) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 40: 
 var $115=HEAP32[(($__err)>>2)];
 var $116=$115|4;
 HEAP32[(($__err)>>2)]=$116;
 var $_0909=0;var $1014=$27;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load100910251134;label=290;break;
 case 41: 
 var $118=($__p_01142|0)==3;
 if($118){var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$27;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;label=256;break;}else{var $119=$68;label=42;break;}
 case 42: 
 var $119;
 var $120=HEAP32[(($11)>>2)];
 var $121=($120|0)==0;
 if($121){var $138=1;label=49;break;}else{label=43;break;}
 case 43: 
 var $123=(($120+12)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($120+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($124|0)==($126|0);
 if($127){label=44;break;}else{label=45;break;}
 case 44: 
 var $129=$120;
 var $130=HEAP32[(($129)>>2)];
 var $131=(($130+36)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$132]($120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0922=$133;label=46;break; } else { label=24;break; }
 case 45: 
 var $135=HEAP32[(($124)>>2)];
 var $_0922=$135;label=46;break;
 case 46: 
 var $_0922;
 var $136=($_0922|0)==-1;
 if($136){label=48;break;}else{label=47;break;}
 case 47: 
 var $_pre1203=HEAP32[(($11)>>2)];
 var $phitmp1220=($_pre1203|0)==0;
 var $138=$phitmp1220;label=49;break;
 case 48: 
 HEAP32[(($11)>>2)]=0;
 var $138=1;label=49;break;
 case 49: 
 var $138;
 var $139=($119|0)==0;
 if($139){label=55;break;}else{label=50;break;}
 case 50: 
 var $141=(($119+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($119+16)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){label=51;break;}else{label=52;break;}
 case 51: 
 var $147=$119;
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148+36)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$150]($119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0921=$151;label=53;break; } else { label=24;break; }
 case 52: 
 var $153=HEAP32[(($142)>>2)];
 var $_0921=$153;label=53;break;
 case 53: 
 var $_0921;
 var $154=($_0921|0)==-1;
 if($154){label=54;break;}else{label=56;break;}
 case 54: 
 HEAP32[(($12)>>2)]=0;
 label=55;break;
 case 55: 
 if($138){var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}else{var $159=0;label=57;break;}
 case 56: 
 var $156=($119|0)==0;
 var $157=$138^$156;
 if($157){var $159=$119;label=57;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}
 case 57: 
 var $159;
 var $160=HEAP32[(($11)>>2)];
 var $161=(($160+12)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($160+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($162|0)==($164|0);
 if($165){label=58;break;}else{label=59;break;}
 case 58: 
 var $167=$160;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0920=$171;label=60;break; } else { label=24;break; }
 case 59: 
 var $173=HEAP32[(($162)>>2)];
 var $_0920=$173;label=60;break;
 case 60: 
 var $_0920;
 var $174=HEAP32[(($13)>>2)];
 var $175=(($174+12)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($__ct,8192,$_0920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=24;break; }
 case 61: 
 if($177){label=62;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}
 case 62: 
 var $179=HEAP32[(($11)>>2)];
 var $180=(($179+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($179+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=63;break;}else{label=64;break;}
 case 63: 
 var $186=$179;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+40)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0919=$190;label=65;break; } else { label=24;break; }
 case 64: 
 var $192=(($181+4)|0);
 HEAP32[(($180)>>2)]=$192;
 var $193=HEAP32[(($181)>>2)];
 var $_0919=$193;label=65;break;
 case 65: 
 var $_0919;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_0919) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $119=$159;label=42;break; } else { label=24;break; }
 case 66: 
 var $194=HEAP8[($4)];
 var $195=($194&255);
 var $196=$195&1;
 var $197=($196|0)==0;
 var $198=HEAP32[(($16)>>2)];
 var $199=$195>>>1;
 var $200=($197?$199:$198);
 var $201=HEAP8[($5)];
 var $202=($201&255);
 var $203=$202&1;
 var $204=($203|0)==0;
 var $205=HEAP32[(($14)>>2)];
 var $206=$202>>>1;
 var $207=($204?$206:$205);
 var $208=(((-$207))|0);
 var $209=($200|0)==($208|0);
 if($209){var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}else{label=67;break;}
 case 67: 
 var $210=HEAP32[(($16)>>2)];
 var $211=$195>>>1;
 var $212=($197?$211:$210);
 var $213=($212|0)==0;
 if($213){label=69;break;}else{label=68;break;}
 case 68: 
 var $214=HEAP32[(($14)>>2)];
 var $215=$202>>>1;
 var $216=($204?$215:$214);
 var $217=($216|0)==0;
 if($217){label=69;break;}else{label=89;break;}
 case 69: 
 var $218=HEAP32[(($16)>>2)];
 var $219=$195>>>1;
 var $220=($197?$219:$218);
 var $221=($220|0)==0;
 var $222=HEAP32[(($11)>>2)];
 var $223=(($222+12)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($222+16)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($224|0)==($226|0);
 if($221){label=80;break;}else{label=70;break;}
 case 70: 
 if($227){label=71;break;}else{label=73;break;}
 case 71: 
 var $230=$222;
 var $231=HEAP32[(($230)>>2)];
 var $232=(($231+36)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$233]($222) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 72: 
 var $_pre1205=HEAP8[($4)];
 var $_0916=$234;var $237=$_pre1205;label=74;break;
 case 73: 
 var $236=HEAP32[(($224)>>2)];
 var $_0916=$236;var $237=$194;label=74;break;
 case 74: 
 var $237;
 var $_0916;
 var $238=$237&1;
 var $239=(($238<<24)>>24)==0;
 var $240=HEAP32[(($17)>>2)];
 var $_=($239?$16:$240);
 var $241=HEAP32[(($_)>>2)];
 var $242=($_0916|0)==($241|0);
 if($242){label=75;break;}else{label=79;break;}
 case 75: 
 var $244=HEAP32[(($11)>>2)];
 var $245=(($244+12)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(($244+16)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($246|0)==($248|0);
 if($249){label=76;break;}else{label=77;break;}
 case 76: 
 var $251=$244;
 var $252=HEAP32[(($251)>>2)];
 var $253=(($252+40)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$254]($244) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 77: 
 var $257=(($246+4)|0);
 HEAP32[(($245)>>2)]=$257;
 label=78;break;
 case 78: 
 var $258=HEAP8[($4)];
 var $259=($258&255);
 var $260=$259&1;
 var $261=($260|0)==0;
 var $262=HEAP32[(($16)>>2)];
 var $263=$259>>>1;
 var $264=($261?$263:$262);
 var $265=($264>>>0)>1;
 var $__psn___trailing_sign_0=($265?$__psn:$__trailing_sign_01140);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;
 case 79: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;
 case 80: 
 if($227){label=81;break;}else{label=83;break;}
 case 81: 
 var $269=$222;
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270+36)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$272]($222) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 82: 
 var $_pre1204=HEAP8[($5)];
 var $_0912=$273;var $276=$_pre1204;label=84;break;
 case 83: 
 var $275=HEAP32[(($224)>>2)];
 var $_0912=$275;var $276=$201;label=84;break;
 case 84: 
 var $276;
 var $_0912;
 var $277=$276&1;
 var $278=(($277<<24)>>24)==0;
 var $279=HEAP32[(($15)>>2)];
 var $_1224=($278?$14:$279);
 var $280=HEAP32[(($_1224)>>2)];
 var $281=($_0912|0)==($280|0);
 if($281){label=85;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}
 case 85: 
 var $283=HEAP32[(($11)>>2)];
 var $284=(($283+12)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(($283+16)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=($285|0)==($287|0);
 if($288){label=86;break;}else{label=87;break;}
 case 86: 
 var $290=$283;
 var $291=HEAP32[(($290)>>2)];
 var $292=(($291+40)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$293]($283) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 87: 
 var $296=(($285+4)|0);
 HEAP32[(($284)>>2)]=$296;
 label=88;break;
 case 88: 
 HEAP8[($__neg)]=1;
 var $297=HEAP8[($5)];
 var $298=($297&255);
 var $299=$298&1;
 var $300=($299|0)==0;
 var $301=HEAP32[(($14)>>2)];
 var $302=$298>>>1;
 var $303=($300?$302:$301);
 var $304=($303>>>0)>1;
 var $__nsn___trailing_sign_0=($304?$__nsn:$__trailing_sign_01140);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;
 case 89: 
 var $306=HEAP32[(($11)>>2)];
 var $307=(($306+12)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=(($306+16)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=($308|0)==($310|0);
 if($311){label=90;break;}else{label=92;break;}
 case 90: 
 var $313=$306;
 var $314=HEAP32[(($313)>>2)];
 var $315=(($314+36)|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$316]($306) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 91: 
 var $_pre1206=HEAP8[($4)];
 var $_0907=$317;var $320=$_pre1206;label=93;break;
 case 92: 
 var $319=HEAP32[(($308)>>2)];
 var $_0907=$319;var $320=$194;label=93;break;
 case 93: 
 var $320;
 var $_0907;
 var $321=$320&1;
 var $322=(($321<<24)>>24)==0;
 var $323=HEAP32[(($17)>>2)];
 var $_1225=($322?$16:$323);
 var $324=HEAP32[(($_1225)>>2)];
 var $325=($_0907|0)==($324|0);
 var $326=HEAP32[(($11)>>2)];
 var $327=(($326+12)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(($326+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($328|0)==($330|0);
 if($325){label=94;break;}else{label=98;break;}
 case 94: 
 if($331){label=95;break;}else{label=96;break;}
 case 95: 
 var $334=$326;
 var $335=HEAP32[(($334)>>2)];
 var $336=(($335+40)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$337]($326) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 96: 
 var $340=(($328+4)|0);
 HEAP32[(($327)>>2)]=$340;
 label=97;break;
 case 97: 
 var $341=HEAP8[($4)];
 var $342=($341&255);
 var $343=$342&1;
 var $344=($343|0)==0;
 var $345=HEAP32[(($16)>>2)];
 var $346=$342>>>1;
 var $347=($344?$346:$345);
 var $348=($347>>>0)>1;
 var $__psn___trailing_sign_0970=($348?$__psn:$__trailing_sign_01140);
 var $__trailing_sign_1=$__psn___trailing_sign_0970;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;
 case 98: 
 if($331){label=99;break;}else{label=100;break;}
 case 99: 
 var $351=$326;
 var $352=HEAP32[(($351)>>2)];
 var $353=(($352+36)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$354]($326) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0903=$355;label=101;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 100: 
 var $357=HEAP32[(($328)>>2)];
 var $_0903=$357;label=101;break;
 case 101: 
 var $_0903;
 var $358=HEAP8[($5)];
 var $359=$358&1;
 var $360=(($359<<24)>>24)==0;
 var $361=HEAP32[(($15)>>2)];
 var $_1226=($360?$14:$361);
 var $362=HEAP32[(($_1226)>>2)];
 var $363=($_0903|0)==($362|0);
 if($363){label=102;break;}else{label=106;break;}
 case 102: 
 var $365=HEAP32[(($11)>>2)];
 var $366=(($365+12)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=(($365+16)|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=($367|0)==($369|0);
 if($370){label=103;break;}else{label=104;break;}
 case 103: 
 var $372=$365;
 var $373=HEAP32[(($372)>>2)];
 var $374=(($373+40)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$375]($365) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 104: 
 var $378=(($367+4)|0);
 HEAP32[(($366)>>2)]=$378;
 label=105;break;
 case 105: 
 HEAP8[($__neg)]=1;
 var $379=HEAP8[($5)];
 var $380=($379&255);
 var $381=$380&1;
 var $382=($381|0)==0;
 var $383=HEAP32[(($14)>>2)];
 var $384=$380>>>1;
 var $385=($382?$384:$383);
 var $386=($385>>>0)>1;
 var $__nsn___trailing_sign_0971=($386?$__nsn:$__trailing_sign_01140);
 var $__trailing_sign_1=$__nsn___trailing_sign_0971;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;
 case 106: 
 var $388=HEAP32[(($__err)>>2)];
 var $389=$388|4;
 HEAP32[(($__err)>>2)]=$389;
 var $_0909=0;var $1014=$27;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load100910251134;label=290;break;
 case 107: 
 var $391=($__trailing_sign_01140|0)!=0;
 var $392=($__p_01142>>>0)<2;
 var $or_cond=$391|$392;
 if($or_cond){label=111;break;}else{label=108;break;}
 case 108: 
 var $394=($__p_01142|0)==2;
 if($394){label=109;break;}else{var $399=0;label=110;break;}
 case 109: 
 var $396=HEAP8[($24)];
 var $397=(($396<<24)>>24)!=0;
 var $399=$397;label=110;break;
 case 110: 
 var $399;
 var $brmerge=$19|$399;
 if($brmerge){label=111;break;}else{var $__trailing_sign_1=0;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}
 case 111: 
 var $400=HEAP8[($3)];
 var $401=$400&1;
 var $402=(($401<<24)>>24)==0;
 var $403=HEAP32[(($21)>>2)];
 var $_1227=($402?$20:$403);
 var $404=($__p_01142|0)==0;
 if($404){var $__sym_curr_char_sroa_0_0=$_1227;var $466=$400;var $465=$68;label=124;break;}else{label=112;break;}
 case 112: 
 var $406=((($__p_01142)-(1))|0);
 var $407=(($__pat+$406)|0);
 var $408=HEAP8[($407)];
 var $switch=($408&255)<2;
 if($switch){var $__sym_space_end_sroa_0_0=$_1227;var $409=$400;label=113;break;}else{var $__sym_curr_char_sroa_0_0=$_1227;var $466=$400;var $465=$68;label=124;break;}
 case 113: 
 var $409;
 var $__sym_space_end_sroa_0_0;
 var $410=$409&1;
 var $411=(($410<<24)>>24)==0;
 var $412=HEAP32[(($21)>>2)];
 var $_1228=($411?$20:$412);
 var $413=($409&255);
 var $414=$413&1;
 var $415=($414|0)==0;
 var $416=HEAP32[(($20)>>2)];
 var $417=$413>>>1;
 var $418=($415?$417:$416);
 var $419=(($_1228+($418<<2))|0);
 var $420=($__sym_space_end_sroa_0_0|0)==($419|0);
 if($420){var $428=$409;label=118;break;}else{label=114;break;}
 case 114: 
 var $422=HEAP32[(($__sym_space_end_sroa_0_0)>>2)];
 var $423=HEAP32[(($13)>>2)];
 var $424=(($423+12)|0);
 var $425=HEAP32[(($424)>>2)];
 var $426=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$425]($__ct,8192,$422) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=22;break; }
 case 115: 
 if($426){label=116;break;}else{label=117;break;}
 case 116: 
 var $427=(($__sym_space_end_sroa_0_0+4)|0);
 var $_pre1207=HEAP8[($3)];
 var $__sym_space_end_sroa_0_0=$427;var $409=$_pre1207;label=113;break;
 case 117: 
 var $_pre1208=HEAP8[($3)];
 var $428=$_pre1208;label=118;break;
 case 118: 
 var $428;
 var $429=$428&1;
 var $430=(($429<<24)>>24)==0;
 var $431=HEAP32[(($21)>>2)];
 var $_1229=($430?$20:$431);
 var $432=$__sym_space_end_sroa_0_0;
 var $433=$_1229;
 var $434=((($432)-($433))|0);
 var $435=$434>>2;
 var $436=HEAP8[($6)];
 var $437=($436&255);
 var $438=$437&1;
 var $439=($438|0)==0;
 var $440=HEAP32[(($22)>>2)];
 var $441=$437>>>1;
 var $442=($439?$441:$440);
 var $443=($435>>>0)>($442>>>0);
 if($443){label=123;break;}else{label=119;break;}
 case 119: 
 var $444=$436&1;
 var $445=(($444<<24)>>24)==0;
 var $446=HEAP32[(($23)>>2)];
 var $_1230=($445?$22:$446);
 var $447=HEAP32[(($22)>>2)];
 var $448=$437>>>1;
 var $449=($439?$448:$447);
 var $_sum=((($449)-($435))|0);
 var $450=(($_1230+($_sum<<2))|0);
 var $451=HEAP32[(($23)>>2)];
 var $_1231=($445?$22:$451);
 var $452=HEAP32[(($22)>>2)];
 var $453=$437>>>1;
 var $454=($439?$453:$452);
 var $455=(($_1231+($454<<2))|0);
 var $456=HEAP32[(($21)>>2)];
 var $_1232=($430?$20:$456);
 var $457=($450|0)==($455|0);
 if($457){var $__sym_curr_char_sroa_0_0=$__sym_space_end_sroa_0_0;var $466=$428;var $465=$68;label=124;break;}else{var $_sroa_0936_01057=$450;var $_sroa_0934_01058=$_1232;label=120;break;}
 case 120: 
 var $_sroa_0934_01058;
 var $_sroa_0936_01057;
 var $458=HEAP32[(($_sroa_0936_01057)>>2)];
 var $459=HEAP32[(($_sroa_0934_01058)>>2)];
 var $460=($458|0)==($459|0);
 if($460){label=121;break;}else{label=123;break;}
 case 121: 
 var $461=(($_sroa_0936_01057+4)|0);
 var $462=($461|0)==($455|0);
 if($462){var $__sym_curr_char_sroa_0_0=$__sym_space_end_sroa_0_0;var $466=$428;var $465=$68;label=124;break;}else{label=122;break;}
 case 122: 
 var $463=(($_sroa_0934_01058+4)|0);
 var $_sroa_0936_01057=$461;var $_sroa_0934_01058=$463;label=120;break;
 case 123: 
 var $464=HEAP32[(($21)>>2)];
 var $_1233=($430?$20:$464);
 var $__sym_curr_char_sroa_0_0=$_1233;var $466=$428;var $465=$68;label=124;break;
 case 124: 
 var $465;
 var $466;
 var $__sym_curr_char_sroa_0_0;
 var $467=$466&1;
 var $468=(($467<<24)>>24)==0;
 var $469=HEAP32[(($21)>>2)];
 var $_1234=($468?$20:$469);
 var $470=($466&255);
 var $471=$470&1;
 var $472=($471|0)==0;
 var $473=HEAP32[(($20)>>2)];
 var $474=$470>>>1;
 var $475=($472?$474:$473);
 var $476=(($_1234+($475<<2))|0);
 var $477=($__sym_curr_char_sroa_0_0|0)==($476|0);
 if($477){label=148;break;}else{label=125;break;}
 case 125: 
 var $479=HEAP32[(($11)>>2)];
 var $480=($479|0)==0;
 if($480){var $497=1;label=132;break;}else{label=126;break;}
 case 126: 
 var $482=(($479+12)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=(($479+16)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=($483|0)==($485|0);
 if($486){label=127;break;}else{label=128;break;}
 case 127: 
 var $488=$479;
 var $489=HEAP32[(($488)>>2)];
 var $490=(($489+36)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$491]($479) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0895=$492;label=129;break; } else { label=23;break; }
 case 128: 
 var $494=HEAP32[(($483)>>2)];
 var $_0895=$494;label=129;break;
 case 129: 
 var $_0895;
 var $495=($_0895|0)==-1;
 if($495){label=131;break;}else{label=130;break;}
 case 130: 
 var $_pre1209=HEAP32[(($11)>>2)];
 var $phitmp1219=($_pre1209|0)==0;
 var $497=$phitmp1219;label=132;break;
 case 131: 
 HEAP32[(($11)>>2)]=0;
 var $497=1;label=132;break;
 case 132: 
 var $497;
 var $498=($465|0)==0;
 if($498){label=138;break;}else{label=133;break;}
 case 133: 
 var $500=(($465+12)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=(($465+16)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=($501|0)==($503|0);
 if($504){label=134;break;}else{label=135;break;}
 case 134: 
 var $506=$465;
 var $507=HEAP32[(($506)>>2)];
 var $508=(($507+36)|0);
 var $509=HEAP32[(($508)>>2)];
 var $510=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$509]($465) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0894=$510;label=136;break; } else { label=23;break; }
 case 135: 
 var $512=HEAP32[(($501)>>2)];
 var $_0894=$512;label=136;break;
 case 136: 
 var $_0894;
 var $513=($_0894|0)==-1;
 if($513){label=137;break;}else{label=139;break;}
 case 137: 
 HEAP32[(($12)>>2)]=0;
 label=138;break;
 case 138: 
 if($497){label=148;break;}else{var $518=0;label=140;break;}
 case 139: 
 var $515=($465|0)==0;
 var $516=$497^$515;
 if($516){var $518=$465;label=140;break;}else{label=148;break;}
 case 140: 
 var $518;
 var $519=HEAP32[(($11)>>2)];
 var $520=(($519+12)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=(($519+16)|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=($521|0)==($523|0);
 if($524){label=141;break;}else{label=142;break;}
 case 141: 
 var $526=$519;
 var $527=HEAP32[(($526)>>2)];
 var $528=(($527+36)|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$529]($519) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0896=$530;label=143;break; } else { label=23;break; }
 case 142: 
 var $532=HEAP32[(($521)>>2)];
 var $_0896=$532;label=143;break;
 case 143: 
 var $_0896;
 var $533=HEAP32[(($__sym_curr_char_sroa_0_0)>>2)];
 var $534=($_0896|0)==($533|0);
 if($534){label=144;break;}else{label=148;break;}
 case 144: 
 var $536=HEAP32[(($11)>>2)];
 var $537=(($536+12)|0);
 var $538=HEAP32[(($537)>>2)];
 var $539=(($536+16)|0);
 var $540=HEAP32[(($539)>>2)];
 var $541=($538|0)==($540|0);
 if($541){label=145;break;}else{label=146;break;}
 case 145: 
 var $543=$536;
 var $544=HEAP32[(($543)>>2)];
 var $545=(($544+40)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$546]($536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=147;break; } else { label=23;break; }
 case 146: 
 var $549=(($538+4)|0);
 HEAP32[(($537)>>2)]=$549;
 label=147;break;
 case 147: 
 var $550=(($__sym_curr_char_sroa_0_0+4)|0);
 var $_pre=HEAP8[($3)];
 var $__sym_curr_char_sroa_0_0=$550;var $466=$_pre;var $465=$518;label=124;break;
 case 148: 
 if($19){label=149;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}
 case 149: 
 var $551=HEAP8[($3)];
 var $552=$551&1;
 var $553=(($552<<24)>>24)==0;
 var $554=HEAP32[(($21)>>2)];
 var $_1235=($553?$20:$554);
 var $555=($551&255);
 var $556=$555&1;
 var $557=($556|0)==0;
 var $558=HEAP32[(($20)>>2)];
 var $559=$555>>>1;
 var $560=($557?$559:$558);
 var $561=(($_1235+($560<<2))|0);
 var $562=($__sym_curr_char_sroa_0_0|0)==($561|0);
 if($562){var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}else{label=150;break;}
 case 150: 
 var $564=HEAP32[(($__err)>>2)];
 var $565=$564|4;
 HEAP32[(($__err)>>2)]=$565;
 var $_0909=0;var $1014=$27;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load100910251134;label=290;break;
 case 151: 
 var $__gb_sroa_1_4_load10091023;
 var $566;
 var $__gb_sroa_0_0_load9991013;
 var $567;
 var $__ng_0;
 var $568=HEAP32[(($11)>>2)];
 var $569=($568|0)==0;
 if($569){var $586=1;label=158;break;}else{label=152;break;}
 case 152: 
 var $571=(($568+12)|0);
 var $572=HEAP32[(($571)>>2)];
 var $573=(($568+16)|0);
 var $574=HEAP32[(($573)>>2)];
 var $575=($572|0)==($574|0);
 if($575){label=153;break;}else{label=154;break;}
 case 153: 
 var $577=$568;
 var $578=HEAP32[(($577)>>2)];
 var $579=(($578+36)|0);
 var $580=HEAP32[(($579)>>2)];
 var $581=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$580]($568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0899=$581;label=155;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 154: 
 var $583=HEAP32[(($572)>>2)];
 var $_0899=$583;label=155;break;
 case 155: 
 var $_0899;
 var $584=($_0899|0)==-1;
 if($584){label=157;break;}else{label=156;break;}
 case 156: 
 var $_pre1210=HEAP32[(($11)>>2)];
 var $phitmp1216=($_pre1210|0)==0;
 var $586=$phitmp1216;label=158;break;
 case 157: 
 HEAP32[(($11)>>2)]=0;
 var $586=1;label=158;break;
 case 158: 
 var $586;
 var $587=HEAP32[(($12)>>2)];
 var $588=($587|0)==0;
 if($588){label=164;break;}else{label=159;break;}
 case 159: 
 var $590=(($587+12)|0);
 var $591=HEAP32[(($590)>>2)];
 var $592=(($587+16)|0);
 var $593=HEAP32[(($592)>>2)];
 var $594=($591|0)==($593|0);
 if($594){label=160;break;}else{label=161;break;}
 case 160: 
 var $596=$587;
 var $597=HEAP32[(($596)>>2)];
 var $598=(($597+36)|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$599]($587) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0898=$600;label=162;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 161: 
 var $602=HEAP32[(($591)>>2)];
 var $_0898=$602;label=162;break;
 case 162: 
 var $_0898;
 var $603=($_0898|0)==-1;
 if($603){label=163;break;}else{label=165;break;}
 case 163: 
 HEAP32[(($12)>>2)]=0;
 label=164;break;
 case 164: 
 if($586){label=189;break;}else{label=166;break;}
 case 165: 
 var $605=($587|0)==0;
 var $606=$586^$605;
 if($606){label=166;break;}else{label=189;break;}
 case 166: 
 var $608=HEAP32[(($11)>>2)];
 var $609=(($608+12)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=(($608+16)|0);
 var $612=HEAP32[(($611)>>2)];
 var $613=($610|0)==($612|0);
 if($613){label=167;break;}else{label=168;break;}
 case 167: 
 var $615=$608;
 var $616=HEAP32[(($615)>>2)];
 var $617=(($616+36)|0);
 var $618=HEAP32[(($617)>>2)];
 var $619=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$618]($608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0900=$619;label=169;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 168: 
 var $621=HEAP32[(($610)>>2)];
 var $_0900=$621;label=169;break;
 case 169: 
 var $_0900;
 var $622=HEAP32[(($13)>>2)];
 var $623=(($622+12)|0);
 var $624=HEAP32[(($623)>>2)];
 var $625=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$624]($__ct,2048,$_0900) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 170: 
 if($625){label=171;break;}else{label=175;break;}
 case 171: 
 var $627=HEAP32[(($__wn)>>2)];
 var $628=HEAP32[(($0)>>2)];
 var $629=($627|0)==($628|0);
 if($629){label=172;break;}else{var $632=$627;label=174;break;}
 case 172: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=173;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 173: 
 var $_pre1211=HEAP32[(($__wn)>>2)];
 var $632=$_pre1211;label=174;break;
 case 174: 
 var $632;
 var $633=(($632+4)|0);
 HEAP32[(($__wn)>>2)]=$633;
 HEAP32[(($632)>>2)]=$_0900;
 var $634=((($__ng_0)+(1))|0);
 var $__ng_1=$634;var $676=$567;var $__gb_sroa_0_0_load9991014=$__gb_sroa_0_0_load9991013;var $675=$566;var $__gb_sroa_1_4_load10091021=$__gb_sroa_1_4_load10091023;label=186;break;
 case 175: 
 var $635=HEAP8[($1)];
 var $636=($635&255);
 var $637=$636&1;
 var $638=($637|0)==0;
 var $639=HEAP32[(($25)>>2)];
 var $640=$636>>>1;
 var $641=($638?$640:$639);
 var $642=($641|0)==0;
 var $643=($__ng_0|0)==0;
 var $or_cond973=$642|$643;
 if($or_cond973){label=189;break;}else{label=176;break;}
 case 176: 
 var $645=HEAP32[(($__ts)>>2)];
 var $646=($_0900|0)==($645|0);
 if($646){label=177;break;}else{label=189;break;}
 case 177: 
 var $648=($__gb_sroa_0_0_load9991013|0)==($567|0);
 if($648){label=178;break;}else{var $672=$567;var $__gb_sroa_0_0_load9991015=$__gb_sroa_0_0_load9991013;var $671=$566;var $__gb_sroa_1_4_load10091022=$__gb_sroa_1_4_load10091023;label=185;break;}
 case 178: 
 var $650=($__gb_sroa_1_4_load10091023|0)!=((468)|0);
 var $651=$__gb_sroa_0_0_load9991013;
 var $652=$566;
 var $653=((($651)-($652))|0);
 var $654=($653>>>0)<2147483647;
 var $655=$653<<1;
 var $656=($654?$655:-1);
 var $657=$653>>2;
 if($650){label=179;break;}else{var $660=0;label=180;break;}
 case 179: 
 var $phitmp_i=$566;
 var $660=$phitmp_i;label=180;break;
 case 180: 
 var $660;
 var $661=_realloc($660,$656);
 var $662=$661;
 var $663=($661|0)==0;
 if($663){label=181;break;}else{label=182;break;}
 case 181: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=182;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 182: 
 var $665=($566|0)==0;
 var $or_cond1032=$650|$665;
 if($or_cond1032){label=184;break;}else{label=183;break;}
 case 183: 
 label=184;break;
 case 184: 
 var $667=$656>>>2;
 var $668=(($662+($657<<2))|0);
 var $669=(($662+($667<<2))|0);
 var $672=$669;var $__gb_sroa_0_0_load9991015=$668;var $671=$662;var $__gb_sroa_1_4_load10091022=642;label=185;break;
 case 185: 
 var $__gb_sroa_1_4_load10091022;
 var $671;
 var $__gb_sroa_0_0_load9991015;
 var $672;
 var $673=(($__gb_sroa_0_0_load9991015+4)|0);
 HEAP32[(($__gb_sroa_0_0_load9991015)>>2)]=$__ng_0;
 var $__ng_1=0;var $676=$672;var $__gb_sroa_0_0_load9991014=$673;var $675=$671;var $__gb_sroa_1_4_load10091021=$__gb_sroa_1_4_load10091022;label=186;break;
 case 186: 
 var $__gb_sroa_1_4_load10091021;
 var $675;
 var $__gb_sroa_0_0_load9991014;
 var $676;
 var $__ng_1;
 var $677=HEAP32[(($11)>>2)];
 var $678=(($677+12)|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=(($677+16)|0);
 var $681=HEAP32[(($680)>>2)];
 var $682=($679|0)==($681|0);
 if($682){label=187;break;}else{label=188;break;}
 case 187: 
 var $684=$677;
 var $685=HEAP32[(($684)>>2)];
 var $686=(($685+40)|0);
 var $687=HEAP32[(($686)>>2)];
 var $688=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$687]($677) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $567=$676;var $__gb_sroa_0_0_load9991013=$__gb_sroa_0_0_load9991014;var $566=$675;var $__gb_sroa_1_4_load10091023=$__gb_sroa_1_4_load10091021;label=151;break; } else { var $_ph_ph=$675;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091021;label=20;break; }
 case 188: 
 var $690=(($679+4)|0);
 HEAP32[(($678)>>2)]=$690;
 var $__ng_0=$__ng_1;var $567=$676;var $__gb_sroa_0_0_load9991013=$__gb_sroa_0_0_load9991014;var $566=$675;var $__gb_sroa_1_4_load10091023=$__gb_sroa_1_4_load10091021;label=151;break;
 case 189: 
 var $692=($566|0)==($__gb_sroa_0_0_load9991013|0);
 var $693=($__ng_0|0)==0;
 var $or_cond974=$692|$693;
 if($or_cond974){var $722=$567;var $__gb_sroa_0_0_load9991012=$__gb_sroa_0_0_load9991013;var $721=$566;var $__gb_sroa_1_4_load10091020=$__gb_sroa_1_4_load10091023;label=199;break;}else{label=190;break;}
 case 190: 
 var $695=($__gb_sroa_0_0_load9991013|0)==($567|0);
 if($695){label=191;break;}else{var $719=$567;var $__gb_sroa_0_0_load9991016=$__gb_sroa_0_0_load9991013;var $718=$566;var $__gb_sroa_1_4_load10091019=$__gb_sroa_1_4_load10091023;label=198;break;}
 case 191: 
 var $697=($__gb_sroa_1_4_load10091023|0)!=((468)|0);
 var $698=$__gb_sroa_0_0_load9991013;
 var $699=$566;
 var $700=((($698)-($699))|0);
 var $701=($700>>>0)<2147483647;
 var $702=$700<<1;
 var $703=($701?$702:-1);
 var $704=$700>>2;
 if($697){label=192;break;}else{var $707=0;label=193;break;}
 case 192: 
 var $phitmp_i975=$566;
 var $707=$phitmp_i975;label=193;break;
 case 193: 
 var $707;
 var $708=_realloc($707,$703);
 var $709=$708;
 var $710=($708|0)==0;
 if($710){label=194;break;}else{label=195;break;}
 case 194: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=195;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091023;label=25;break; }
 case 195: 
 var $712=($566|0)==0;
 var $or_cond1033=$697|$712;
 if($or_cond1033){label=197;break;}else{label=196;break;}
 case 196: 
 label=197;break;
 case 197: 
 var $714=$703>>>2;
 var $715=(($709+($704<<2))|0);
 var $716=(($709+($714<<2))|0);
 var $719=$716;var $__gb_sroa_0_0_load9991016=$715;var $718=$709;var $__gb_sroa_1_4_load10091019=642;label=198;break;
 case 198: 
 var $__gb_sroa_1_4_load10091019;
 var $718;
 var $__gb_sroa_0_0_load9991016;
 var $719;
 var $720=(($__gb_sroa_0_0_load9991016+4)|0);
 HEAP32[(($__gb_sroa_0_0_load9991016)>>2)]=$__ng_0;
 var $722=$719;var $__gb_sroa_0_0_load9991012=$720;var $721=$718;var $__gb_sroa_1_4_load10091020=$__gb_sroa_1_4_load10091019;label=199;break;
 case 199: 
 var $__gb_sroa_1_4_load10091020;
 var $721;
 var $__gb_sroa_0_0_load9991012;
 var $722;
 var $723=HEAP32[(($__fd)>>2)];
 var $724=($723|0)>0;
 if($724){label=200;break;}else{label=253;break;}
 case 200: 
 var $726=HEAP32[(($11)>>2)];
 var $727=($726|0)==0;
 if($727){var $744=1;label=207;break;}else{label=201;break;}
 case 201: 
 var $729=(($726+12)|0);
 var $730=HEAP32[(($729)>>2)];
 var $731=(($726+16)|0);
 var $732=HEAP32[(($731)>>2)];
 var $733=($730|0)==($732|0);
 if($733){label=202;break;}else{label=203;break;}
 case 202: 
 var $735=$726;
 var $736=HEAP32[(($735)>>2)];
 var $737=(($736+36)|0);
 var $738=HEAP32[(($737)>>2)];
 var $739=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$738]($726) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0906=$739;label=204;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=25;break; }
 case 203: 
 var $741=HEAP32[(($730)>>2)];
 var $_0906=$741;label=204;break;
 case 204: 
 var $_0906;
 var $742=($_0906|0)==-1;
 if($742){label=206;break;}else{label=205;break;}
 case 205: 
 var $_pre1212=HEAP32[(($11)>>2)];
 var $phitmp1217=($_pre1212|0)==0;
 var $744=$phitmp1217;label=207;break;
 case 206: 
 HEAP32[(($11)>>2)]=0;
 var $744=1;label=207;break;
 case 207: 
 var $744;
 var $745=HEAP32[(($12)>>2)];
 var $746=($745|0)==0;
 if($746){label=213;break;}else{label=208;break;}
 case 208: 
 var $748=(($745+12)|0);
 var $749=HEAP32[(($748)>>2)];
 var $750=(($745+16)|0);
 var $751=HEAP32[(($750)>>2)];
 var $752=($749|0)==($751|0);
 if($752){label=209;break;}else{label=210;break;}
 case 209: 
 var $754=$745;
 var $755=HEAP32[(($754)>>2)];
 var $756=(($755+36)|0);
 var $757=HEAP32[(($756)>>2)];
 var $758=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$757]($745) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0905=$758;label=211;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=25;break; }
 case 210: 
 var $760=HEAP32[(($749)>>2)];
 var $_0905=$760;label=211;break;
 case 211: 
 var $_0905;
 var $761=($_0905|0)==-1;
 if($761){label=212;break;}else{label=214;break;}
 case 212: 
 HEAP32[(($12)>>2)]=0;
 label=213;break;
 case 213: 
 if($744){label=219;break;}else{var $765=0;label=215;break;}
 case 214: 
 var $763=($745|0)==0;
 var $tmp966=$744^$763;
 if($tmp966){var $765=$745;label=215;break;}else{label=219;break;}
 case 215: 
 var $765;
 var $766=HEAP32[(($11)>>2)];
 var $767=(($766+12)|0);
 var $768=HEAP32[(($767)>>2)];
 var $769=(($766+16)|0);
 var $770=HEAP32[(($769)>>2)];
 var $771=($768|0)==($770|0);
 if($771){label=216;break;}else{label=217;break;}
 case 216: 
 var $773=$766;
 var $774=HEAP32[(($773)>>2)];
 var $775=(($774+36)|0);
 var $776=HEAP32[(($775)>>2)];
 var $777=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$776]($766) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0908=$777;label=218;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=25;break; }
 case 217: 
 var $779=HEAP32[(($768)>>2)];
 var $_0908=$779;label=218;break;
 case 218: 
 var $_0908;
 var $780=HEAP32[(($__dp)>>2)];
 var $781=($_0908|0)==($780|0);
 if($781){label=220;break;}else{label=219;break;}
 case 219: 
 var $783=HEAP32[(($__err)>>2)];
 var $784=$783|4;
 HEAP32[(($__err)>>2)]=$784;
 var $_0909=0;var $1014=$721;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091020;label=290;break;
 case 220: 
 var $786=HEAP32[(($11)>>2)];
 var $787=(($786+12)|0);
 var $788=HEAP32[(($787)>>2)];
 var $789=(($786+16)|0);
 var $790=HEAP32[(($789)>>2)];
 var $791=($788|0)==($790|0);
 if($791){label=221;break;}else{label=222;break;}
 case 221: 
 var $793=$786;
 var $794=HEAP32[(($793)>>2)];
 var $795=(($794+40)|0);
 var $796=HEAP32[(($795)>>2)];
 var $797=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$796]($786) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $801=$765;var $800=$723;label=223;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=25;break; }
 case 222: 
 var $799=(($788+4)|0);
 HEAP32[(($787)>>2)]=$799;
 var $801=$765;var $800=$723;label=223;break;
 case 223: 
 var $800;
 var $801;
 var $802=HEAP32[(($11)>>2)];
 var $803=($802|0)==0;
 if($803){var $820=1;label=230;break;}else{label=224;break;}
 case 224: 
 var $805=(($802+12)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=(($802+16)|0);
 var $808=HEAP32[(($807)>>2)];
 var $809=($806|0)==($808|0);
 if($809){label=225;break;}else{label=226;break;}
 case 225: 
 var $811=$802;
 var $812=HEAP32[(($811)>>2)];
 var $813=(($812+36)|0);
 var $814=HEAP32[(($813)>>2)];
 var $815=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$814]($802) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0915=$815;label=227;break; } else { label=21;break; }
 case 226: 
 var $817=HEAP32[(($806)>>2)];
 var $_0915=$817;label=227;break;
 case 227: 
 var $_0915;
 var $818=($_0915|0)==-1;
 if($818){label=229;break;}else{label=228;break;}
 case 228: 
 var $_pre1213=HEAP32[(($11)>>2)];
 var $phitmp1218=($_pre1213|0)==0;
 var $820=$phitmp1218;label=230;break;
 case 229: 
 HEAP32[(($11)>>2)]=0;
 var $820=1;label=230;break;
 case 230: 
 var $820;
 var $821=($801|0)==0;
 if($821){label=236;break;}else{label=231;break;}
 case 231: 
 var $823=(($801+12)|0);
 var $824=HEAP32[(($823)>>2)];
 var $825=(($801+16)|0);
 var $826=HEAP32[(($825)>>2)];
 var $827=($824|0)==($826|0);
 if($827){label=232;break;}else{label=233;break;}
 case 232: 
 var $829=$801;
 var $830=HEAP32[(($829)>>2)];
 var $831=(($830+36)|0);
 var $832=HEAP32[(($831)>>2)];
 var $833=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$832]($801) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0914=$833;label=234;break; } else { label=21;break; }
 case 233: 
 var $835=HEAP32[(($824)>>2)];
 var $_0914=$835;label=234;break;
 case 234: 
 var $_0914;
 var $836=($_0914|0)==-1;
 if($836){label=235;break;}else{label=237;break;}
 case 235: 
 HEAP32[(($12)>>2)]=0;
 label=236;break;
 case 236: 
 if($820){label=243;break;}else{var $840=0;label=238;break;}
 case 237: 
 var $838=($801|0)==0;
 var $tmp967=$820^$838;
 if($tmp967){var $840=$801;label=238;break;}else{label=243;break;}
 case 238: 
 var $840;
 var $841=HEAP32[(($11)>>2)];
 var $842=(($841+12)|0);
 var $843=HEAP32[(($842)>>2)];
 var $844=(($841+16)|0);
 var $845=HEAP32[(($844)>>2)];
 var $846=($843|0)==($845|0);
 if($846){label=239;break;}else{label=240;break;}
 case 239: 
 var $848=$841;
 var $849=HEAP32[(($848)>>2)];
 var $850=(($849+36)|0);
 var $851=HEAP32[(($850)>>2)];
 var $852=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$851]($841) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0917=$852;label=241;break; } else { label=21;break; }
 case 240: 
 var $854=HEAP32[(($843)>>2)];
 var $_0917=$854;label=241;break;
 case 241: 
 var $_0917;
 var $855=HEAP32[(($13)>>2)];
 var $856=(($855+12)|0);
 var $857=HEAP32[(($856)>>2)];
 var $858=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$857]($__ct,2048,$_0917) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=242;break; } else { label=21;break; }
 case 242: 
 if($858){label=244;break;}else{label=243;break;}
 case 243: 
 var $860=HEAP32[(($__err)>>2)];
 var $861=$860|4;
 HEAP32[(($__err)>>2)]=$861;
 var $_0909=0;var $1014=$721;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091020;label=290;break;
 case 244: 
 var $863=HEAP32[(($__wn)>>2)];
 var $864=HEAP32[(($0)>>2)];
 var $865=($863|0)==($864|0);
 if($865){label=245;break;}else{label=246;break;}
 case 245: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=246;break; } else { label=21;break; }
 case 246: 
 var $868=HEAP32[(($11)>>2)];
 var $869=(($868+12)|0);
 var $870=HEAP32[(($869)>>2)];
 var $871=(($868+16)|0);
 var $872=HEAP32[(($871)>>2)];
 var $873=($870|0)==($872|0);
 if($873){label=247;break;}else{label=248;break;}
 case 247: 
 var $875=$868;
 var $876=HEAP32[(($875)>>2)];
 var $877=(($876+36)|0);
 var $878=HEAP32[(($877)>>2)];
 var $879=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$878]($868) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0918=$879;label=249;break; } else { label=21;break; }
 case 248: 
 var $881=HEAP32[(($870)>>2)];
 var $_0918=$881;label=249;break;
 case 249: 
 var $_0918;
 var $882=HEAP32[(($__wn)>>2)];
 var $883=(($882+4)|0);
 HEAP32[(($__wn)>>2)]=$883;
 HEAP32[(($882)>>2)]=$_0918;
 var $884=((($800)-(1))|0);
 HEAP32[(($__fd)>>2)]=$884;
 var $885=HEAP32[(($11)>>2)];
 var $886=(($885+12)|0);
 var $887=HEAP32[(($886)>>2)];
 var $888=(($885+16)|0);
 var $889=HEAP32[(($888)>>2)];
 var $890=($887|0)==($889|0);
 if($890){label=250;break;}else{label=252;break;}
 case 250: 
 var $892=$885;
 var $893=HEAP32[(($892)>>2)];
 var $894=(($893+40)|0);
 var $895=HEAP32[(($894)>>2)];
 var $896=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$895]($885) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=251;break; } else { label=21;break; }
 case 251: 
 var $897=($884|0)>0;
 if($897){var $801=$840;var $800=$884;label=223;break;}else{label=253;break;}
 case 252: 
 var $899=(($887+4)|0);
 HEAP32[(($886)>>2)]=$899;
 label=251;break;
 case 253: 
 var $900=HEAP32[(($__wn)>>2)];
 var $901=HEAP32[(($9)>>2)];
 var $902=($900|0)==($901|0);
 if($902){label=254;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$722;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load9991012;var $906=$721;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load10091020;label=255;break;}
 case 254: 
 var $904=HEAP32[(($__err)>>2)];
 var $905=$904|4;
 HEAP32[(($__err)>>2)]=$905;
 var $_0909=0;var $1014=$721;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091020;label=290;break;
 case 255: 
 var $__gb_sroa_1_4_load10091024;
 var $906;
 var $__gb_sroa_0_0_load9991011;
 var $907;
 var $__trailing_sign_1;
 var $908=((($__p_01142)+(1))|0);
 var $909=($908>>>0)<4;
 if($909){var $__gb_sroa_1_4_load100910251134=$__gb_sroa_1_4_load10091024;var $27=$906;var $__gb_sroa_0_0_load99910101137=$__gb_sroa_0_0_load9991011;var $26=$907;var $__trailing_sign_01140=$__trailing_sign_1;var $__p_01142=$908;label=3;break;}else{var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load10091024;var $_lcssa=$906;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load9991011;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=256;break;}
 case 256: 
 var $__trailing_sign_0_lcssa;
 var $__gb_sroa_0_0_load9991010_lcssa;
 var $_lcssa;
 var $__gb_sroa_1_4_load10091025_lcssa;
 var $910=($__trailing_sign_0_lcssa|0)==0;
 if($910){label=287;break;}else{label=257;break;}
 case 257: 
 var $911=$__trailing_sign_0_lcssa;
 var $912=(($__trailing_sign_0_lcssa+4)|0);
 var $913=(($__trailing_sign_0_lcssa+8)|0);
 var $__i_0=1;label=258;break;
 case 258: 
 var $__i_0;
 var $914=HEAP8[($911)];
 var $915=($914&255);
 var $916=$915&1;
 var $917=($916|0)==0;
 if($917){label=260;break;}else{label=259;break;}
 case 259: 
 var $919=HEAP32[(($912)>>2)];
 var $922=$919;label=261;break;
 case 260: 
 var $921=$915>>>1;
 var $922=$921;label=261;break;
 case 261: 
 var $922;
 var $923=($__i_0>>>0)<($922>>>0);
 if($923){label=262;break;}else{label=287;break;}
 case 262: 
 var $925=HEAP32[(($11)>>2)];
 var $926=($925|0)==0;
 if($926){var $943=1;label=269;break;}else{label=263;break;}
 case 263: 
 var $928=(($925+12)|0);
 var $929=HEAP32[(($928)>>2)];
 var $930=(($925+16)|0);
 var $931=HEAP32[(($930)>>2)];
 var $932=($929|0)==($931|0);
 if($932){label=264;break;}else{label=265;break;}
 case 264: 
 var $934=$925;
 var $935=HEAP32[(($934)>>2)];
 var $936=(($935+36)|0);
 var $937=HEAP32[(($936)>>2)];
 var $938=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$937]($925) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0929=$938;label=266;break; } else { label=19;break; }
 case 265: 
 var $940=HEAP32[(($929)>>2)];
 var $_0929=$940;label=266;break;
 case 266: 
 var $_0929;
 var $941=($_0929|0)==-1;
 if($941){label=268;break;}else{label=267;break;}
 case 267: 
 var $_pre1214=HEAP32[(($11)>>2)];
 var $phitmp1215=($_pre1214|0)==0;
 var $943=$phitmp1215;label=269;break;
 case 268: 
 HEAP32[(($11)>>2)]=0;
 var $943=1;label=269;break;
 case 269: 
 var $943;
 var $944=HEAP32[(($12)>>2)];
 var $945=($944|0)==0;
 if($945){label=275;break;}else{label=270;break;}
 case 270: 
 var $947=(($944+12)|0);
 var $948=HEAP32[(($947)>>2)];
 var $949=(($944+16)|0);
 var $950=HEAP32[(($949)>>2)];
 var $951=($948|0)==($950|0);
 if($951){label=271;break;}else{label=272;break;}
 case 271: 
 var $953=$944;
 var $954=HEAP32[(($953)>>2)];
 var $955=(($954+36)|0);
 var $956=HEAP32[(($955)>>2)];
 var $957=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$956]($944) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0928=$957;label=273;break; } else { label=19;break; }
 case 272: 
 var $959=HEAP32[(($948)>>2)];
 var $_0928=$959;label=273;break;
 case 273: 
 var $_0928;
 var $960=($_0928|0)==-1;
 if($960){label=274;break;}else{label=276;break;}
 case 274: 
 HEAP32[(($12)>>2)]=0;
 label=275;break;
 case 275: 
 if($943){label=283;break;}else{label=277;break;}
 case 276: 
 var $962=($944|0)==0;
 var $tmp=$943^$962;
 if($tmp){label=277;break;}else{label=283;break;}
 case 277: 
 var $964=HEAP32[(($11)>>2)];
 var $965=(($964+12)|0);
 var $966=HEAP32[(($965)>>2)];
 var $967=(($964+16)|0);
 var $968=HEAP32[(($967)>>2)];
 var $969=($966|0)==($968|0);
 if($969){label=278;break;}else{label=279;break;}
 case 278: 
 var $971=$964;
 var $972=HEAP32[(($971)>>2)];
 var $973=(($972+36)|0);
 var $974=HEAP32[(($973)>>2)];
 var $975=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$974]($964) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0930=$975;label=280;break; } else { label=19;break; }
 case 279: 
 var $977=HEAP32[(($966)>>2)];
 var $_0930=$977;label=280;break;
 case 280: 
 var $_0930;
 var $978=HEAP8[($911)];
 var $979=$978&1;
 var $980=(($979<<24)>>24)==0;
 if($980){var $983=$912;label=282;break;}else{label=281;break;}
 case 281: 
 var $982=HEAP32[(($913)>>2)];
 var $983=$982;label=282;break;
 case 282: 
 var $983;
 var $984=(($983+($__i_0<<2))|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=($_0930|0)==($985|0);
 if($986){label=284;break;}else{label=283;break;}
 case 283: 
 var $988=HEAP32[(($__err)>>2)];
 var $989=$988|4;
 HEAP32[(($__err)>>2)]=$989;
 var $_0909=0;var $1014=$_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=290;break;
 case 284: 
 var $991=((($__i_0)+(1))|0);
 var $992=HEAP32[(($11)>>2)];
 var $993=(($992+12)|0);
 var $994=HEAP32[(($993)>>2)];
 var $995=(($992+16)|0);
 var $996=HEAP32[(($995)>>2)];
 var $997=($994|0)==($996|0);
 if($997){label=285;break;}else{label=286;break;}
 case 285: 
 var $999=$992;
 var $1000=HEAP32[(($999)>>2)];
 var $1001=(($1000+40)|0);
 var $1002=HEAP32[(($1001)>>2)];
 var $1003=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1002]($992) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$991;label=258;break; } else { label=19;break; }
 case 286: 
 var $1005=(($994+4)|0);
 HEAP32[(($993)>>2)]=$1005;
 var $__i_0=$991;label=258;break;
 case 287: 
 var $1006=($_lcssa|0)==($__gb_sroa_0_0_load9991010_lcssa|0);
 if($1006){var $_0909=1;var $1014=$__gb_sroa_0_0_load9991010_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=290;break;}else{label=288;break;}
 case 288: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa,$__gb_sroa_0_0_load9991010_lcssa,$__et);
 var $1008=HEAP32[(($__et)>>2)];
 var $1009=($1008|0)==0;
 if($1009){var $_0909=1;var $1014=$_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=290;break;}else{label=289;break;}
 case 289: 
 var $1011=HEAP32[(($__err)>>2)];
 var $1012=$1011|4;
 HEAP32[(($__err)>>2)]=$1012;
 var $_0909=0;var $1014=$_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=290;break;
 case 290: 
 var $__gb_sroa_1_4_load10091026;
 var $1014;
 var $_0909;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $1015=($1014|0)==0;
 if($1015){label=293;break;}else{label=291;break;}
 case 291: 
 var $1017=$1014;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10091026]($1017) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=293;break; } else { label=292;break; }
 case 292: 
 var $1019$0 = ___cxa_find_matching_catch(-1, -1,0); var $1019$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 293: 
 STACKTOP=sp;return $_0909;
 case 294: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+456)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $1=(sp)+(448);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=468;
 var $5=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((16832)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$9,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=41;break; }
 case 4: 
 var $13=HEAP32[((16836)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($8+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($8+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=8;break;}
 case 6: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=41;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $29=$25;
 HEAP8[($__neg)]=0;
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($1)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($__iob+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$1,$__intl,$__loc,$34,$__err,$__neg,$29,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=41;break; }
 case 9: 
 if($35){label=10;break;}else{label=22;break;}
 case 10: 
 var $38=$__v;
 var $39=HEAP8[($38)];
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($__v+8)|0);
 var $44=HEAP32[(($43)>>2)];
 HEAP32[(($44)>>2)]=0;
 var $45=(($__v+4)|0);
 HEAP32[(($45)>>2)]=0;
 label=13;break;
 case 12: 
 var $47=(($__v+4)|0);
 HEAP32[(($47)>>2)]=0;
 HEAP8[($38)]=0;
 label=13;break;
 case 13: 
 var $48=HEAP8[($__neg)];
 var $49=$48&1;
 var $50=(($49<<24)>>24)==0;
 var $_pre114=$25;
 if($50){label=17;break;}else{label=14;break;}
 case 14: 
 var $52=HEAP32[(($_pre114)>>2)];
 var $53=(($52+44)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($29,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=41;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=41;break; }
 case 16: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=$56$0;
 var $58=$56$1;
 HEAP32[(($3)>>2)]=0;
 var $137=$2;var $_0106116=$58;var $_0105118=$57;label=42;break;
 case 17: 
 var $59=HEAP32[(($_pre114)>>2)];
 var $60=(($59+44)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($29,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=41;break; }
 case 18: 
 var $63=HEAP32[(($3)>>2)];
 var $64=HEAP32[(($__wn)>>2)];
 var $65=((($64)-(4))|0);
 var $__w_0=$63;label=19;break;
 case 19: 
 var $__w_0;
 var $67=($__w_0>>>0)<($65>>>0);
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 var $69=HEAP32[(($__w_0)>>2)];
 var $70=($69|0)==($62|0);
 var $71=(($__w_0+4)|0);
 if($70){var $__w_0=$71;label=19;break;}else{label=21;break;}
 case 21: 
 var $73=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0,$64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=41;break; }
 case 22: 
 var $75=(($__b)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($76|0)==0;
 if($77){var $94=0;label=28;break;}else{label=23;break;}
 case 23: 
 var $79=(($76+12)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($76+16)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($80|0)==($82|0);
 if($83){label=24;break;}else{label=25;break;}
 case 24: 
 var $85=$76;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$88]($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0104=$89;label=26;break; } else { label=41;break; }
 case 25: 
 var $91=HEAP32[(($80)>>2)];
 var $_0104=$91;label=26;break;
 case 26: 
 var $_0104;
 var $92=($_0104|0)==-1;
 if($92){label=27;break;}else{var $94=$76;label=28;break;}
 case 27: 
 HEAP32[(($75)>>2)]=0;
 var $94=0;label=28;break;
 case 28: 
 var $94;
 var $95=($94|0)==0;
 var $96=($31|0)==0;
 if($96){label=34;break;}else{label=29;break;}
 case 29: 
 var $98=(($31+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($31+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=30;break;}else{label=31;break;}
 case 30: 
 var $104=$31;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+36)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$108;label=32;break; } else { label=41;break; }
 case 31: 
 var $110=HEAP32[(($99)>>2)];
 var $_0=$110;label=32;break;
 case 32: 
 var $_0;
 var $111=($_0|0)==-1;
 if($111){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($30)>>2)]=0;
 label=34;break;
 case 34: 
 if($95){label=36;break;}else{label=37;break;}
 case 35: 
 var $113=($31|0)==0;
 var $tmp=$95^$113;
 if($tmp){label=37;break;}else{label=36;break;}
 case 36: 
 var $115=HEAP32[(($__err)>>2)];
 var $116=$115|2;
 HEAP32[(($__err)>>2)]=$116;
 label=37;break;
 case 37: 
 var $117=(($agg_result)|0);
 HEAP32[(($117)>>2)]=$94;
 var $118=HEAP32[(($7)>>2)];
 var $119=(($118)|0);
 var $120=__ZNSt3__114__shared_count16__release_sharedEv($119);
 var $121=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $122=($121|0)==0;
 if($122){label=40;break;}else{label=38;break;}
 case 38: 
 var $124=HEAP32[(($4)>>2)];
 var $125=$121;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$124]($125) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=39;break; }
 case 39: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1,0); var $127$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 40: 
 STACKTOP=sp;return;
 case 41: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $132=HEAP32[(($7)>>2)];
 var $133=(($132)|0);
 var $134=__ZNSt3__114__shared_count16__release_sharedEv($133);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $135=($_pre|0)==0;
 if($135){var $_0106117=$131;var $_0105119=$130;label=44;break;}else{var $137=$_pre;var $_0106116=$131;var $_0105118=$130;label=42;break;}
 case 42: 
 var $_0105118;
 var $_0106116;
 var $137;
 var $138=HEAP32[(($4)>>2)];
 var $139=$137;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($139) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0106117=$_0106116;var $_0105119=$_0105118;label=44;break; } else { label=43;break; }
 case 43: 
 var $141$0 = ___cxa_find_matching_catch(-1, -1,0); var $141$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 44: 
 var $_0105119;
 var $_0106117;
 var $142$0=$_0105119;
 var $142$1=0;
 var $143$0=$142$0;
 var $143$1=$_0106117;
 ___resumeException($143$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$__first;
 var $3=HEAP8[($1)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=$3&1;
 var $14=(($13<<24)>>24)==0;
 if($14){var $21=1;var $20=$3;label=6;break;}else{label=5;break;}
 case 5: 
 var $16=(($this)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&-2;
 var $phitmp=((($18)-(1))|0);
 var $19=(($17)&255);
 var $21=$phitmp;var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21;
 var $22=$__last;
 var $23=((($22)-($2))|0);
 var $24=$23>>2;
 var $25=($24|0)==0;
 if($25){label=19;break;}else{label=7;break;}
 case 7: 
 var $27=((($21)-($12))|0);
 var $28=($27>>>0)<($24>>>0);
 if($28){label=8;break;}else{var $33=$20;label=9;break;}
 case 8: 
 var $30=((($12)+($24))|0);
 var $31=((($30)-($21))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$21,$31,$12,$12,0,0);
 var $_pre=HEAP8[($1)];
 var $33=$_pre;label=9;break;
 case 9: 
 var $33;
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=11;break;}else{label=10;break;}
 case 10: 
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=12;break;
 case 11: 
 var $40=(($this+4)|0);
 var $41=$40;label=12;break;
 case 12: 
 var $41;
 var $42=(($41+($12<<2))|0);
 var $43=($__first|0)==($__last|0);
 if($43){var $__p_0_lcssa=$42;label=16;break;}else{label=13;break;}
 case 13: 
 var $scevgep=((($__last)-(4))|0);
 var $scevgep71=$scevgep;
 var $44=(((-$2))|0);
 var $uglygep=(($scevgep71+$44)|0);
 var $uglygep72=$uglygep;
 var $45=$uglygep72>>>2;
 var $46=((($12)+($45))|0);
 var $47=((($46)+(1))|0);
 var $_069=$__first;var $__p_070=$42;label=14;break;
 case 14: 
 var $__p_070;
 var $_069;
 var $49=HEAP32[(($_069)>>2)];
 HEAP32[(($__p_070)>>2)]=$49;
 var $50=(($__p_070+4)|0);
 var $51=(($_069+4)|0);
 var $52=($51|0)==($__last|0);
 if($52){label=15;break;}else{var $_069=$51;var $__p_070=$50;label=14;break;}
 case 15: 
 var $scevgep73=(($41+($47<<2))|0);
 var $__p_0_lcssa=$scevgep73;label=16;break;
 case 16: 
 var $__p_0_lcssa;
 HEAP32[(($__p_0_lcssa)>>2)]=0;
 var $54=((($12)+($24))|0);
 var $55=HEAP8[($1)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 var $59=(($this+4)|0);
 HEAP32[(($59)>>2)]=$54;
 label=19;break;
 case 18: 
 var $61=$54<<1;
 var $62=(($61)&255);
 HEAP8[($1)]=$62;
 label=19;break;
 case 19: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i513=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=$4;
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=$6;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=$8;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=$11;
 var $13=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $14=$13;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast512=$1;
 var $20=(($__loc)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$__p_i_i_i;
 var $23=HEAP32[((17296)>>2)];
 var $24=($23|0)==-1;
 if($24){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17296;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17296,$22,274);
 label=4;break;
 case 4: 
 var $26=HEAP32[((17300)>>2)];
 var $27=((($26)-(1))|0);
 var $28=(($21+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($21+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 __ZNSt8bad_castC2Ev($41);
 ___cxa_throw($40,11472,(394));
 throw "Reached an unreachable!";
 case 7: 
 var $42=$38;
 var $43=$38;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+44)|0);
 var $46=HEAP32[(($45)>>2)];
 FUNCTION_TABLE[$46]($tmpcast512,$42);
 var $47=$__pat;
 var $48=HEAP32[(($1)>>2)];
 tempBigInt=$48;HEAP8[($47)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(3))|0)]=tempBigInt&0xff;
 var $49=$38;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+32)|0);
 var $52=HEAP32[(($51)>>2)];
 FUNCTION_TABLE[$52]($2,$42);
 var $53=$__nsn;
 var $54=HEAP8[($53)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=9;break;}else{label=8;break;}
 case 8: 
 var $58=(($__nsn+8)|0);
 var $59=HEAP32[(($58)>>2)];
 HEAP32[(($59)>>2)]=0;
 var $60=(($__nsn+4)|0);
 HEAP32[(($60)>>2)]=0;
 label=10;break;
 case 9: 
 var $62=(($__nsn+4)|0);
 HEAP32[(($62)>>2)]=0;
 HEAP8[($53)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1,0); var $64$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 12: 
 assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
 var $65=HEAP32[(($49)>>2)];
 var $66=(($65+28)|0);
 var $67=HEAP32[(($66)>>2)];
 FUNCTION_TABLE[$67]($4,$42);
 var $68=$__psn;
 var $69=HEAP8[($68)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=14;break;}else{label=13;break;}
 case 13: 
 var $73=(($__psn+8)|0);
 var $74=HEAP32[(($73)>>2)];
 HEAP32[(($74)>>2)]=0;
 var $75=(($__psn+4)|0);
 HEAP32[(($75)>>2)]=0;
 label=15;break;
 case 14: 
 var $77=(($__psn+4)|0);
 HEAP32[(($77)>>2)]=0;
 HEAP8[($68)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1,0); var $79$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($68)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($68)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($68)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
 var $80=$38;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=FUNCTION_TABLE[$83]($42);
 HEAP32[(($__dp)>>2)]=$84;
 var $85=HEAP32[(($80)>>2)];
 var $86=(($85+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($42);
 HEAP32[(($__ts)>>2)]=$88;
 var $89=$38;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+20)|0);
 var $92=HEAP32[(($91)>>2)];
 FUNCTION_TABLE[$92]($6,$42);
 var $93=$__grp;
 var $94=HEAP8[($93)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){label=19;break;}else{label=18;break;}
 case 18: 
 var $98=(($__grp+8)|0);
 var $99=HEAP32[(($98)>>2)];
 HEAP8[($99)]=0;
 var $100=(($__grp+4)|0);
 HEAP32[(($100)>>2)]=0;
 label=20;break;
 case 19: 
 var $102=$__grp;
 var $103=(($102+1)|0);
 HEAP8[($103)]=0;
 HEAP8[($93)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1,0); var $105$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 22: 
 assert(12 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($93)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($93)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 var $106=HEAP32[(($49)>>2)];
 var $107=(($106+24)|0);
 var $108=HEAP32[(($107)>>2)];
 FUNCTION_TABLE[$108]($8,$42);
 var $109=$__sym;
 var $110=HEAP8[($109)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){label=24;break;}else{label=23;break;}
 case 23: 
 var $114=(($__sym+8)|0);
 var $115=HEAP32[(($114)>>2)];
 HEAP32[(($115)>>2)]=0;
 var $116=(($__sym+4)|0);
 HEAP32[(($116)>>2)]=0;
 label=25;break;
 case 24: 
 var $118=(($__sym+4)|0);
 HEAP32[(($118)>>2)]=0;
 HEAP8[($109)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1,0); var $120$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 27: 
 assert(12 % 1 === 0);HEAP32[(($109)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($109)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($109)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
 var $121=HEAP32[(($80)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=FUNCTION_TABLE[$123]($42);
 var $storemerge=$124;label=54;break;
 case 28: 
 var $tmpcast=$10;
 var $126=(($__loc)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=$__p_i_i_i513;
 var $129=HEAP32[((17304)>>2)];
 var $130=($129|0)==-1;
 if($130){label=30;break;}else{label=29;break;}
 case 29: 
 var $_sroa_016_0__idx_i_i514=(($__p_i_i_i513)|0);
 HEAP32[(($_sroa_016_0__idx_i_i514)>>2)]=17304;
 var $_sroa_117_4__idx18_i_i515=(($__p_i_i_i513+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i515)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i516=(($__p_i_i_i513+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i516)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17304,$128,274);
 label=30;break;
 case 30: 
 var $132=HEAP32[((17308)>>2)];
 var $133=((($132)-(1))|0);
 var $134=(($127+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($127+8)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=$135;
 var $139=$137;
 var $140=((($138)-($139))|0);
 var $141=$140>>2;
 var $142=($141>>>0)>($133>>>0);
 if($142){label=31;break;}else{label=32;break;}
 case 31: 
 var $143=(($137+($133<<2))|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=32;break;}else{label=33;break;}
 case 32: 
 var $146=___cxa_allocate_exception(4);
 var $147=$146;
 __ZNSt8bad_castC2Ev($147);
 ___cxa_throw($146,11472,(394));
 throw "Reached an unreachable!";
 case 33: 
 var $148=$144;
 var $149=$144;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+44)|0);
 var $152=HEAP32[(($151)>>2)];
 FUNCTION_TABLE[$152]($tmpcast,$148);
 var $153=$__pat;
 var $154=HEAP32[(($10)>>2)];
 tempBigInt=$154;HEAP8[($153)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($153)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($153)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($153)+(3))|0)]=tempBigInt&0xff;
 var $155=$144;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+32)|0);
 var $158=HEAP32[(($157)>>2)];
 FUNCTION_TABLE[$158]($11,$148);
 var $159=$__nsn;
 var $160=HEAP8[($159)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=35;break;}else{label=34;break;}
 case 34: 
 var $164=(($__nsn+8)|0);
 var $165=HEAP32[(($164)>>2)];
 HEAP32[(($165)>>2)]=0;
 var $166=(($__nsn+4)|0);
 HEAP32[(($166)>>2)]=0;
 label=36;break;
 case 35: 
 var $168=(($__nsn+4)|0);
 HEAP32[(($168)>>2)]=0;
 HEAP8[($159)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $170$0 = ___cxa_find_matching_catch(-1, -1,0); var $170$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 38: 
 assert(12 % 1 === 0);HEAP32[(($159)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($159)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($159)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
 HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
 var $171=HEAP32[(($155)>>2)];
 var $172=(($171+28)|0);
 var $173=HEAP32[(($172)>>2)];
 FUNCTION_TABLE[$173]($13,$148);
 var $174=$__psn;
 var $175=HEAP8[($174)];
 var $176=$175&1;
 var $177=(($176<<24)>>24)==0;
 if($177){label=40;break;}else{label=39;break;}
 case 39: 
 var $179=(($__psn+8)|0);
 var $180=HEAP32[(($179)>>2)];
 HEAP32[(($180)>>2)]=0;
 var $181=(($__psn+4)|0);
 HEAP32[(($181)>>2)]=0;
 label=41;break;
 case 40: 
 var $183=(($__psn+4)|0);
 HEAP32[(($183)>>2)]=0;
 HEAP8[($174)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $185$0 = ___cxa_find_matching_catch(-1, -1,0); var $185$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 43: 
 assert(12 % 1 === 0);HEAP32[(($174)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($174)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($174)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($13);
 var $186=$144;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+12)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=FUNCTION_TABLE[$189]($148);
 HEAP32[(($__dp)>>2)]=$190;
 var $191=HEAP32[(($186)>>2)];
 var $192=(($191+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=FUNCTION_TABLE[$193]($148);
 HEAP32[(($__ts)>>2)]=$194;
 var $195=$144;
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+20)|0);
 var $198=HEAP32[(($197)>>2)];
 FUNCTION_TABLE[$198]($15,$148);
 var $199=$__grp;
 var $200=HEAP8[($199)];
 var $201=$200&1;
 var $202=(($201<<24)>>24)==0;
 if($202){label=45;break;}else{label=44;break;}
 case 44: 
 var $204=(($__grp+8)|0);
 var $205=HEAP32[(($204)>>2)];
 HEAP8[($205)]=0;
 var $206=(($__grp+4)|0);
 HEAP32[(($206)>>2)]=0;
 label=46;break;
 case 45: 
 var $208=$__grp;
 var $209=(($208+1)|0);
 HEAP8[($209)]=0;
 HEAP8[($199)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $211$0 = ___cxa_find_matching_catch(-1, -1,0); var $211$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($199)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($199)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($199)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
 var $212=HEAP32[(($155)>>2)];
 var $213=(($212+24)|0);
 var $214=HEAP32[(($213)>>2)];
 FUNCTION_TABLE[$214]($17,$148);
 var $215=$__sym;
 var $216=HEAP8[($215)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){label=50;break;}else{label=49;break;}
 case 49: 
 var $220=(($__sym+8)|0);
 var $221=HEAP32[(($220)>>2)];
 HEAP32[(($221)>>2)]=0;
 var $222=(($__sym+4)|0);
 HEAP32[(($222)>>2)]=0;
 label=51;break;
 case 50: 
 var $224=(($__sym+4)|0);
 HEAP32[(($224)>>2)]=0;
 HEAP8[($215)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $226$0 = ___cxa_find_matching_catch(-1, -1,0); var $226$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 53: 
 assert(12 % 1 === 0);HEAP32[(($215)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($215)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($215)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($17);
 var $227=HEAP32[(($186)>>2)];
 var $228=(($227+36)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=FUNCTION_TABLE[$229]($148);
 var $storemerge=$230;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)!=((468)|0);
 var $4=HEAP32[(($__e)>>2)];
 var $5=(($__b)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($9>>>0)<2147483647;
 var $11=$9<<1;
 var $12=($10?$11:-1);
 var $13=HEAP32[(($__n)>>2)];
 var $14=$13;
 var $15=((($14)-($8))|0);
 var $16=$15>>2;
 if($3){label=2;break;}else{var $19=0;label=3;break;}
 case 2: 
 var $phitmp=$6;
 var $19=$phitmp;label=3;break;
 case 3: 
 var $19;
 var $20=_realloc($19,$12);
 var $21=$20;
 var $22=($20|0)==0;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 __ZSt17__throw_bad_allocv();
 label=5;break;
 case 5: 
 if($3){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($5)>>2)]=$21;
 var $32=$21;label=11;break;
 case 7: 
 var $_pr=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$21;
 var $26=($_pr|0)==0;
 if($26){var $32=$21;label=11;break;}else{label=8;break;}
 case 8: 
 var $28=HEAP32[(($1)>>2)];
 var $29=$_pr;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$28]($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre=HEAP32[(($5)>>2)];
 var $32=$_pre;label=11;break;
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1,0); var $31$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 11: 
 var $32;
 HEAP32[(($1)>>2)]=642;
 var $33=$12>>>2;
 var $34=(($32+($16<<2))|0);
 HEAP32[(($__n)>>2)]=$34;
 var $35=HEAP32[(($5)>>2)];
 var $36=(($35+($33<<2))|0);
 HEAP32[(($__e)>>2)]=$36;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(232);
 var $__pat=(sp)+(240);
 var $__dp=(sp)+(248);
 var $__ts=(sp)+(256);
 var $__grp=(sp)+(264);
 var $__grp289=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=(($__buf)|0);
 HEAP32[(($__bb)>>2)]=$4;
 var $5=(($__digits)|0);
 var $6=_snprintf($4,100,3696,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=($6>>>0)>99;
 if($7){label=2;break;}else{var $__db_0=$5;var $__n_0=$6;var $__hn_sroa_0_1=0;var $__hd_sroa_0_1=0;label=15;break;}
 case 2: 
 var $9=HEAP8[(17544)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=3;break;}else{label=7;break;}
 case 3: 
 var $12=___cxa_guard_acquire(17544);
 var $13=($12|0)==0;
 if($13){label=7;break;}else{label=4;break;}
 case 4: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15408)>>2)]=$15;
 label=7;break;
 case 6: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $eh_lpad_body$1=$18$1;var $eh_lpad_body$0=$18$0;var $__hn_sroa_0_0_lpad_body=0;var $__hd_sroa_0_0_lpad_body=0;label=12;break;
 case 7: 
 var $20=HEAP32[((15408)>>2)];
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$20,3696,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 8: 
 var $23=HEAP32[(($__bb)>>2)];
 var $24=($23|0)==0;
 if($24){label=9;break;}else{var $30=$23;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $30=$_pre;label=13;break;
 case 11: 
 var $__hd_sroa_0_0;
 var $__hn_sroa_0_0;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body$1=$27$1;var $eh_lpad_body$0=$27$0;var $__hn_sroa_0_0_lpad_body=$__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body=$__hd_sroa_0_0;label=12;break;
 case 12: 
 var $__hd_sroa_0_0_lpad_body;
 var $__hn_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $28=$eh_lpad_body$0;
 var $29=$eh_lpad_body$1;
 var $_2=$29;var $_2255=$28;var $__hn_sroa_0_2=$__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2=$__hd_sroa_0_0_lpad_body;label=60;break;
 case 13: 
 var $30;
 var $31=_malloc($21);
 var $32=($31|0)==0;
 if($32){label=14;break;}else{var $__db_0=$31;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=$31;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=0;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=0;label=15;break; } else { var $__hn_sroa_0_0=$30;var $__hd_sroa_0_0=0;label=11;break; }
 case 15: 
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $__hn_sroa_0_0=$__hn_sroa_0_1;var $__hd_sroa_0_0=$__hd_sroa_0_1;label=11;break; }
 case 16: 
 var $36=(($__loc)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$__p_i_i_i;
 var $39=HEAP32[((16840)>>2)];
 var $40=($39|0)==-1;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$38,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=45;break; }
 case 18: 
 var $42=HEAP32[((16844)>>2)];
 var $43=((($42)-(1))|0);
 var $44=(($37+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($37+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$45;
 var $49=$47;
 var $50=((($48)-($49))|0);
 var $51=$50>>2;
 var $52=($51>>>0)>($43>>>0);
 if($52){label=19;break;}else{label=20;break;}
 case 19: 
 var $53=(($47+($43<<2))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)==0;
 if($55){label=20;break;}else{label=22;break;}
 case 20: 
 var $56=___cxa_allocate_exception(4);
 var $57=$56;
 __ZNSt8bad_castC2Ev($57);
 (function() { try { __THREW__ = 0; return ___cxa_throw($56,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=45;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $58=$54;
 var $59=HEAP32[(($__bb)>>2)];
 var $60=(($59+$__n_0)|0);
 var $61=$54;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+32)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($58,$59,$60,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=45;break; }
 case 23: 
 var $66=($__n_0|0)==0;
 if($66){var $71=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $68=HEAP32[(($__bb)>>2)];
 var $69=HEAP8[($68)];
 var $70=(($69<<24)>>24)==45;
 var $71=$70;label=25;break;
 case 25: 
 var $71;
 HEAP32[(($__grp289)>>2)]=0; HEAP32[((($__grp289)+(4))>>2)]=0; HEAP32[((($__grp289)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$71,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=46;break; }
 case 26: 
 var $73=(($__mbuf)|0);
 var $74=HEAP32[(($__fd)>>2)];
 var $75=($__n_0|0)>($74|0);
 if($75){label=27;break;}else{label=34;break;}
 case 27: 
 var $77=((($__n_0)-($74))|0);
 var $78=$77<<1;
 var $79=HEAP8[($2)];
 var $80=($79&255);
 var $81=$80&1;
 var $82=($81|0)==0;
 if($82){label=29;break;}else{label=28;break;}
 case 28: 
 var $84=(($__sn+4)|0);
 var $85=HEAP32[(($84)>>2)];
 var $88=$85;label=30;break;
 case 29: 
 var $87=$80>>>1;
 var $88=$87;label=30;break;
 case 30: 
 var $88;
 var $89=HEAP8[($1)];
 var $90=($89&255);
 var $91=$90&1;
 var $92=($91|0)==0;
 if($92){label=32;break;}else{label=31;break;}
 case 31: 
 var $94=(($__sym+4)|0);
 var $95=HEAP32[(($94)>>2)];
 var $98=$95;label=33;break;
 case 32: 
 var $97=$90>>>1;
 var $98=$97;label=33;break;
 case 33: 
 var $98;
 var $99=$78|1;
 var $100=((($99)+($88))|0);
 var $101=((($100)+($98))|0);
 var $_pn=$101;label=41;break;
 case 34: 
 var $103=HEAP8[($2)];
 var $104=($103&255);
 var $105=$104&1;
 var $106=($105|0)==0;
 if($106){label=36;break;}else{label=35;break;}
 case 35: 
 var $108=(($__sn+4)|0);
 var $109=HEAP32[(($108)>>2)];
 var $112=$109;label=37;break;
 case 36: 
 var $111=$104>>>1;
 var $112=$111;label=37;break;
 case 37: 
 var $112;
 var $113=HEAP8[($1)];
 var $114=($113&255);
 var $115=$114&1;
 var $116=($115|0)==0;
 if($116){label=39;break;}else{label=38;break;}
 case 38: 
 var $118=(($__sym+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $122=$119;label=40;break;
 case 39: 
 var $121=$114>>>1;
 var $122=$121;label=40;break;
 case 40: 
 var $122;
 var $123=((($112)+(2))|0);
 var $124=((($123)+($122))|0);
 var $_pn=$124;label=41;break;
 case 41: 
 var $_pn;
 var $126=((($_pn)+($74))|0);
 var $127=($126>>>0)>100;
 if($127){label=42;break;}else{var $__mb_0=$73;var $__hw_sroa_0_1=0;label=49;break;}
 case 42: 
 var $128=_malloc($126);
 var $129=($128|0)==0;
 if($129){label=43;break;}else{var $__mb_0=$128;var $__hw_sroa_0_1=$128;label=49;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=0;var $__hw_sroa_0_1=0;label=49;break; } else { label=44;break; }
 case 44: 
 var $131$0 = ___cxa_find_matching_catch(-1, -1); var $131$1 = tempRet0;
 var $132=$131$0;
 var $133=$131$1;
 var $_0=$133;var $_0253=$132;label=58;break;
 case 45: 
 var $135$0 = ___cxa_find_matching_catch(-1, -1); var $135$1 = tempRet0;
 var $136=$135$0;
 var $137=$135$1;
 var $_1=$137;var $_1254=$136;label=59;break;
 case 46: 
 var $139$0 = ___cxa_find_matching_catch(-1, -1); var $139$1 = tempRet0;
 var $140=$139$0;
 var $141=$139$1;
 var $_0=$141;var $_0253=$140;label=58;break;
 case 47: 
 var $143$0 = ___cxa_find_matching_catch(-1, -1); var $143$1 = tempRet0;
 var $144=$143$0;
 var $145=$143$1;
 var $146=($__hw_sroa_0_1|0)==0;
 if($146){var $_0=$145;var $_0253=$144;label=58;break;}else{label=48;break;}
 case 48: 
 _free($__hw_sroa_0_1);
 var $_0=$145;var $_0253=$144;label=58;break;
 case 49: 
 var $__hw_sroa_0_1;
 var $__mb_0;
 var $149=(($__iob+4)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($__db_0+$__n_0)|0);
 var $152=HEAP8[($__dp)];
 var $153=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$150,$__db_0,$151,$58,$71,$__pat,$152,$153,$__grp,$__sym,$__sn,$74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=47;break; }
 case 50: 
 var $155=(($__s)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($3)|0);
 HEAP32[(($157)>>2)]=$156;
 var $158=HEAP32[(($__mi)>>2)];
 var $159=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$158,$159,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=47;break; }
 case 51: 
 var $161=($__hw_sroa_0_1|0)==0;
 if($161){label=53;break;}else{label=52;break;}
 case 52: 
 _free($__hw_sroa_0_1);
 label=53;break;
 case 53: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $163=HEAP32[(($36)>>2)];
 var $164=(($163)|0);
 var $165=__ZNSt3__114__shared_count16__release_sharedEv($164);
 var $166=($__hd_sroa_0_1|0)==0;
 if($166){label=55;break;}else{label=54;break;}
 case 54: 
 _free($__hd_sroa_0_1);
 label=55;break;
 case 55: 
 var $168=($__hn_sroa_0_1|0)==0;
 if($168){label=57;break;}else{label=56;break;}
 case 56: 
 _free($__hn_sroa_0_1);
 label=57;break;
 case 57: 
 STACKTOP=sp;return;
 case 58: 
 var $_0253;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_1254=$_0253;label=59;break;
 case 59: 
 var $_1254;
 var $_1;
 var $171=HEAP32[(($36)>>2)];
 var $172=(($171)|0);
 var $173=__ZNSt3__114__shared_count16__release_sharedEv($172);
 var $_2=$_1;var $_2255=$_1254;var $__hn_sroa_0_2=$__hn_sroa_0_1;var $__hd_sroa_0_2=$__hd_sroa_0_1;label=60;break;
 case 60: 
 var $__hd_sroa_0_2;
 var $__hn_sroa_0_2;
 var $_2255;
 var $_2;
 var $175=($__hd_sroa_0_2|0)==0;
 if($175){label=62;break;}else{label=61;break;}
 case 61: 
 _free($__hd_sroa_0_2);
 label=62;break;
 case 62: 
 var $177=($__hn_sroa_0_2|0)==0;
 if($177){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__hn_sroa_0_2);
 label=64;break;
 case 64: 
 var $179$0=$_2255;
 var $179$1=0;
 var $180$0=$179$0;
 var $180$1=$_2;
 ___resumeException($180$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i519=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast518=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast517=$4;
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$5;
 var $7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $8=$7;
 var $9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $10=$9;
 var $11=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast516=$11;
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 var $14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$14;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 var $19=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $20=$19;
 var $21=(($__loc)|0);
 var $22=HEAP32[(($21)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $24=$__p_i_i_i;
 var $25=HEAP32[((17312)>>2)];
 var $26=($25|0)==-1;
 if($26){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17312;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17312,$24,274);
 label=4;break;
 case 4: 
 var $28=HEAP32[((17316)>>2)];
 var $29=((($28)-(1))|0);
 var $30=(($22+12)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($22+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$31;
 var $35=$33;
 var $36=((($34)-($35))|0);
 var $37=$36>>2;
 var $38=($37>>>0)>($29>>>0);
 if($38){label=5;break;}else{label=6;break;}
 case 5: 
 var $39=(($33+($29<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 if($41){label=6;break;}else{label=7;break;}
 case 6: 
 var $42=___cxa_allocate_exception(4);
 var $43=$42;
 __ZNSt8bad_castC2Ev($43);
 ___cxa_throw($42,11472,(394));
 throw "Reached an unreachable!";
 case 7: 
 var $44=$40;
 var $45=$40;
 var $46=HEAP32[(($45)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $48=(($46+44)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($tmpcast518,$44);
 var $50=$__pat;
 var $51=HEAP32[(($1)>>2)];
 tempBigInt=$51;HEAP8[($50)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(3))|0)]=tempBigInt&0xff;
 var $52=$40;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+32)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($2,$44);
 var $56=$__sn;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=10;break;}else{label=9;break;}
 case 9: 
 var $61=(($__sn+8)|0);
 var $62=HEAP32[(($61)>>2)];
 HEAP8[($62)]=0;
 var $63=(($__sn+4)|0);
 HEAP32[(($63)>>2)]=0;
 label=11;break;
 case 10: 
 var $65=$__sn;
 var $66=(($65+1)|0);
 HEAP8[($66)]=0;
 HEAP8[($56)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1,0); var $68$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 label=20;break;
 case 14: 
 var $70=(($46+40)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($tmpcast517,$44);
 var $72=$__pat;
 var $73=HEAP32[(($4)>>2)];
 tempBigInt=$73;HEAP8[($72)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($72)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($72)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($72)+(3))|0)]=tempBigInt&0xff;
 var $74=$40;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+28)|0);
 var $77=HEAP32[(($76)>>2)];
 FUNCTION_TABLE[$77]($5,$44);
 var $78=$__sn;
 var $79=HEAP8[($78)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=16;break;}else{label=15;break;}
 case 15: 
 var $83=(($__sn+8)|0);
 var $84=HEAP32[(($83)>>2)];
 HEAP8[($84)]=0;
 var $85=(($__sn+4)|0);
 HEAP32[(($85)>>2)]=0;
 label=17;break;
 case 16: 
 var $87=$__sn;
 var $88=(($87+1)|0);
 HEAP8[($88)]=0;
 HEAP8[($78)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $90$0 = ___cxa_find_matching_catch(-1, -1,0); var $90$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 19: 
 assert(12 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 label=20;break;
 case 20: 
 var $92=$40;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=FUNCTION_TABLE[$95]($44);
 HEAP8[($__dp)]=$96;
 var $97=HEAP32[(($92)>>2)];
 var $98=(($97+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=FUNCTION_TABLE[$99]($44);
 HEAP8[($__ts)]=$100;
 var $101=$40;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+20)|0);
 var $104=HEAP32[(($103)>>2)];
 FUNCTION_TABLE[$104]($7,$44);
 var $105=$__grp;
 var $106=HEAP8[($105)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=22;break;}else{label=21;break;}
 case 21: 
 var $110=(($__grp+8)|0);
 var $111=HEAP32[(($110)>>2)];
 HEAP8[($111)]=0;
 var $112=(($__grp+4)|0);
 HEAP32[(($112)>>2)]=0;
 label=23;break;
 case 22: 
 var $114=$__grp;
 var $115=(($114+1)|0);
 HEAP8[($115)]=0;
 HEAP8[($105)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $117$0 = ___cxa_find_matching_catch(-1, -1,0); var $117$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($105)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($105)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($105)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
 var $118=HEAP32[(($101)>>2)];
 var $119=(($118+24)|0);
 var $120=HEAP32[(($119)>>2)];
 FUNCTION_TABLE[$120]($9,$44);
 var $121=$__sym;
 var $122=HEAP8[($121)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=27;break;}else{label=26;break;}
 case 26: 
 var $126=(($__sym+8)|0);
 var $127=HEAP32[(($126)>>2)];
 HEAP8[($127)]=0;
 var $128=(($__sym+4)|0);
 HEAP32[(($128)>>2)]=0;
 label=28;break;
 case 27: 
 var $130=$__sym;
 var $131=(($130+1)|0);
 HEAP8[($131)]=0;
 HEAP8[($121)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $133$0 = ___cxa_find_matching_catch(-1, -1,0); var $133$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 assert(12 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
 var $134=$40;
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135+36)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=FUNCTION_TABLE[$137]($44);
 var $storemerge=$138;label=60;break;
 case 31: 
 var $140=$__p_i_i_i519;
 var $141=HEAP32[((17320)>>2)];
 var $142=($141|0)==-1;
 if($142){label=33;break;}else{label=32;break;}
 case 32: 
 var $_sroa_016_0__idx_i_i520=(($__p_i_i_i519)|0);
 HEAP32[(($_sroa_016_0__idx_i_i520)>>2)]=17320;
 var $_sroa_117_4__idx18_i_i521=(($__p_i_i_i519+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i521)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i522=(($__p_i_i_i519+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i522)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17320,$140,274);
 label=33;break;
 case 33: 
 var $144=HEAP32[((17324)>>2)];
 var $145=((($144)-(1))|0);
 var $146=(($22+12)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($22+8)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$147;
 var $151=$149;
 var $152=((($150)-($151))|0);
 var $153=$152>>2;
 var $154=($153>>>0)>($145>>>0);
 if($154){label=34;break;}else{label=35;break;}
 case 34: 
 var $155=(($149+($145<<2))|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=($156|0)==0;
 if($157){label=35;break;}else{label=36;break;}
 case 35: 
 var $158=___cxa_allocate_exception(4);
 var $159=$158;
 __ZNSt8bad_castC2Ev($159);
 ___cxa_throw($158,11472,(394));
 throw "Reached an unreachable!";
 case 36: 
 var $160=$156;
 var $161=$156;
 var $162=HEAP32[(($161)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $164=(($162+44)|0);
 var $165=HEAP32[(($164)>>2)];
 FUNCTION_TABLE[$165]($tmpcast516,$160);
 var $166=$__pat;
 var $167=HEAP32[(($11)>>2)];
 tempBigInt=$167;HEAP8[($166)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(3))|0)]=tempBigInt&0xff;
 var $168=$156;
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+32)|0);
 var $171=HEAP32[(($170)>>2)];
 FUNCTION_TABLE[$171]($12,$160);
 var $172=$__sn;
 var $173=HEAP8[($172)];
 var $174=$173&1;
 var $175=(($174<<24)>>24)==0;
 if($175){label=39;break;}else{label=38;break;}
 case 38: 
 var $177=(($__sn+8)|0);
 var $178=HEAP32[(($177)>>2)];
 HEAP8[($178)]=0;
 var $179=(($__sn+4)|0);
 HEAP32[(($179)>>2)]=0;
 label=40;break;
 case 39: 
 var $181=$__sn;
 var $182=(($181+1)|0);
 HEAP8[($182)]=0;
 HEAP8[($172)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $184$0 = ___cxa_find_matching_catch(-1, -1,0); var $184$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 42: 
 assert(12 % 1 === 0);HEAP32[(($172)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($172)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($172)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12);
 label=49;break;
 case 43: 
 var $186=(($162+40)|0);
 var $187=HEAP32[(($186)>>2)];
 FUNCTION_TABLE[$187]($tmpcast,$160);
 var $188=$__pat;
 var $189=HEAP32[(($14)>>2)];
 tempBigInt=$189;HEAP8[($188)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($188)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($188)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($188)+(3))|0)]=tempBigInt&0xff;
 var $190=$156;
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+28)|0);
 var $193=HEAP32[(($192)>>2)];
 FUNCTION_TABLE[$193]($15,$160);
 var $194=$__sn;
 var $195=HEAP8[($194)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=45;break;}else{label=44;break;}
 case 44: 
 var $199=(($__sn+8)|0);
 var $200=HEAP32[(($199)>>2)];
 HEAP8[($200)]=0;
 var $201=(($__sn+4)|0);
 HEAP32[(($201)>>2)]=0;
 label=46;break;
 case 45: 
 var $203=$__sn;
 var $204=(($203+1)|0);
 HEAP8[($204)]=0;
 HEAP8[($194)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $206$0 = ___cxa_find_matching_catch(-1, -1,0); var $206$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($194)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($194)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($194)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
 label=49;break;
 case 49: 
 var $208=$156;
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+12)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=FUNCTION_TABLE[$211]($160);
 HEAP8[($__dp)]=$212;
 var $213=HEAP32[(($208)>>2)];
 var $214=(($213+16)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=FUNCTION_TABLE[$215]($160);
 HEAP8[($__ts)]=$216;
 var $217=$156;
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+20)|0);
 var $220=HEAP32[(($219)>>2)];
 FUNCTION_TABLE[$220]($17,$160);
 var $221=$__grp;
 var $222=HEAP8[($221)];
 var $223=$222&1;
 var $224=(($223<<24)>>24)==0;
 if($224){label=51;break;}else{label=50;break;}
 case 50: 
 var $226=(($__grp+8)|0);
 var $227=HEAP32[(($226)>>2)];
 HEAP8[($227)]=0;
 var $228=(($__grp+4)|0);
 HEAP32[(($228)>>2)]=0;
 label=52;break;
 case 51: 
 var $230=$__grp;
 var $231=(($230+1)|0);
 HEAP8[($231)]=0;
 HEAP8[($221)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $233$0 = ___cxa_find_matching_catch(-1, -1,0); var $233$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($221)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($221)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($221)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 var $234=HEAP32[(($217)>>2)];
 var $235=(($234+24)|0);
 var $236=HEAP32[(($235)>>2)];
 FUNCTION_TABLE[$236]($19,$160);
 var $237=$__sym;
 var $238=HEAP8[($237)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=56;break;}else{label=55;break;}
 case 55: 
 var $242=(($__sym+8)|0);
 var $243=HEAP32[(($242)>>2)];
 HEAP8[($243)]=0;
 var $244=(($__sym+4)|0);
 HEAP32[(($244)>>2)]=0;
 label=57;break;
 case 56: 
 var $246=$__sym;
 var $247=(($246+1)|0);
 HEAP8[($247)]=0;
 HEAP8[($237)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $249$0 = ___cxa_find_matching_catch(-1, -1,0); var $249$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 59: 
 assert(12 % 1 === 0);HEAP32[(($237)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($237)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($237)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($19);
 var $250=$156;
 var $251=HEAP32[(($250)>>2)];
 var $252=(($251+36)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=FUNCTION_TABLE[$253]($160);
 var $storemerge=$254;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=$__sn;
 var $4=(($2+1)|0);
 var $5=(($__sn+8)|0);
 var $6=(($__sn+4)|0);
 var $7=$__sym;
 var $8=$__sym;
 var $9=$__flags&512;
 var $10=($9|0)==0;
 var $11=(($7+1)|0);
 var $12=(($__sym+4)|0);
 var $13=(($__sym+8)|0);
 var $14=(($__ct+8)|0);
 var $15=($__fd|0)>0;
 var $16=$__grp;
 var $17=$__grp;
 var $18=(($16+1)|0);
 var $19=(($__grp+8)|0);
 var $20=(($__grp+4)|0);
 var $21=(((-$__fd))|0);
 var $_0363405=$__db;var $__p_0406=0;label=2;break;
 case 2: 
 var $__p_0406;
 var $_0363405;
 var $23=(($__pat+$__p_0406)|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 switch(($25|0)){case 2:{ label=12;break;}case 4:{ label=24;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_0363405;label=62;break;}}break;
 case 3: 
 var $27=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$27;
 var $_2=$_0363405;label=62;break;
 case 4: 
 var $29=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$29;
 var $30=HEAP32[(($1)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__ct,32);
 var $34=HEAP32[(($__me)>>2)];
 var $35=(($34+1)|0);
 HEAP32[(($__me)>>2)]=$35;
 HEAP8[($34)]=$33;
 var $_2=$_0363405;label=62;break;
 case 5: 
 var $37=HEAP8[($3)];
 var $38=($37&255);
 var $39=$38&1;
 var $40=($39|0)==0;
 if($40){label=7;break;}else{label=6;break;}
 case 6: 
 var $42=HEAP32[(($6)>>2)];
 var $45=$42;label=8;break;
 case 7: 
 var $44=$38>>>1;
 var $45=$44;label=8;break;
 case 8: 
 var $45;
 var $46=($45|0)==0;
 if($46){var $_2=$_0363405;label=62;break;}else{label=9;break;}
 case 9: 
 var $48=$37&1;
 var $49=(($48<<24)>>24)==0;
 if($49){var $52=$4;label=11;break;}else{label=10;break;}
 case 10: 
 var $51=HEAP32[(($5)>>2)];
 var $52=$51;label=11;break;
 case 11: 
 var $52;
 var $53=HEAP8[($52)];
 var $54=HEAP32[(($__me)>>2)];
 var $55=(($54+1)|0);
 HEAP32[(($__me)>>2)]=$55;
 HEAP8[($54)]=$53;
 var $_2=$_0363405;label=62;break;
 case 12: 
 var $57=HEAP8[($8)];
 var $58=($57&255);
 var $59=$58&1;
 var $60=($59|0)==0;
 if($60){label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($12)>>2)];
 var $65=$62;label=15;break;
 case 14: 
 var $64=$58>>>1;
 var $65=$64;label=15;break;
 case 15: 
 var $65;
 var $66=($65|0)==0;
 var $brmerge=$66|$10;
 if($brmerge){var $_2=$_0363405;label=62;break;}else{label=16;break;}
 case 16: 
 var $68=$57&1;
 var $69=(($68<<24)>>24)==0;
 if($69){var $73=$11;var $72=$11;label=18;break;}else{label=17;break;}
 case 17: 
 var $71=HEAP32[(($13)>>2)];
 var $73=$71;var $72=$71;label=18;break;
 case 18: 
 var $72;
 var $73;
 if($60){label=20;break;}else{label=19;break;}
 case 19: 
 var $75=HEAP32[(($12)>>2)];
 var $78=$75;label=21;break;
 case 20: 
 var $77=$58>>>1;
 var $78=$77;label=21;break;
 case 21: 
 var $78;
 var $79=(($73+$78)|0);
 var $80=HEAP32[(($__me)>>2)];
 var $81=($72|0)==($79|0);
 if($81){var $_0_lcssa=$80;label=23;break;}else{var $_sroa_0364_0401=$72;var $_0402=$80;label=22;break;}
 case 22: 
 var $_0402;
 var $_sroa_0364_0401;
 var $82=HEAP8[($_sroa_0364_0401)];
 HEAP8[($_0402)]=$82;
 var $83=(($_sroa_0364_0401+1)|0);
 var $84=(($_0402+1)|0);
 var $85=($83|0)==($79|0);
 if($85){var $_0_lcssa=$84;label=23;break;}else{var $_sroa_0364_0401=$83;var $_0402=$84;label=22;break;}
 case 23: 
 var $_0_lcssa;
 HEAP32[(($__me)>>2)]=$_0_lcssa;
 var $_2=$_0363405;label=62;break;
 case 24: 
 var $87=HEAP32[(($__me)>>2)];
 var $88=(($_0363405+1)|0);
 var $__0363=($__neg?$88:$_0363405);
 var $__d_0=$__0363;label=25;break;
 case 25: 
 var $__d_0;
 var $90=($__d_0>>>0)<($__de>>>0);
 if($90){label=26;break;}else{label=28;break;}
 case 26: 
 var $92=HEAP8[($__d_0)];
 var $93=(($92<<24)>>24)<0;
 if($93){label=28;break;}else{label=27;break;}
 case 27: 
 var $94=(($92<<24)>>24);
 var $95=HEAP32[(($14)>>2)];
 var $96=(($95+($94<<1))|0);
 var $97=HEAP16[(($96)>>1)];
 var $98=$97&2048;
 var $99=(($98<<16)>>16)==0;
 var $100=(($__d_0+1)|0);
 if($99){label=28;break;}else{var $__d_0=$100;label=25;break;}
 case 28: 
 var $__d_0_lcssa413=$__d_0;
 if($15){label=29;break;}else{var $__d_2=$__d_0;label=38;break;}
 case 29: 
 var $101=($__d_0>>>0)>($__0363>>>0);
 if($101){label=30;break;}else{var $__f_0_lcssa427=$__fd;var $__d_1_lcssa429=$__d_0;label=34;break;}
 case 30: 
 var $102=(((-$__d_0_lcssa413))|0);
 var $scevgep=(($__0363+$102)|0);
 var $scevgep414=$scevgep;
 var $103=($scevgep414>>>0)<($21>>>0);
 var $umax=($103?$21:$scevgep414);
 var $umax415=$umax;
 var $scevgep416=(($umax415+$__fd)|0);
 var $scevgep416417=$scevgep416;
 var $__d_1382=$__d_0;var $__f_0383=$__fd;var $105=$87;label=31;break;
 case 31: 
 var $105;
 var $__f_0383;
 var $__d_1382;
 var $106=((($__d_1382)-(1))|0);
 var $107=HEAP8[($106)];
 var $108=(($105+1)|0);
 HEAP32[(($__me)>>2)]=$108;
 HEAP8[($105)]=$107;
 var $109=((($__f_0383)-(1))|0);
 var $110=($106>>>0)>($__0363>>>0);
 var $111=($109|0)>0;
 var $or_cond=$110&$111;
 if($or_cond){label=32;break;}else{label=33;break;}
 case 32: 
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_1382=$106;var $__f_0383=$109;var $105=$_pre;label=31;break;
 case 33: 
 var $scevgep418=(($__d_0+$umax)|0);
 if($111){var $__f_0_lcssa427=$scevgep416417;var $__d_1_lcssa429=$scevgep418;label=34;break;}else{var $116=0;var $__f_0_lcssa426=$scevgep416417;var $__d_1_lcssa428=$scevgep418;label=35;break;}
 case 34: 
 var $__d_1_lcssa429;
 var $__f_0_lcssa427;
 var $112=HEAP32[(($1)>>2)];
 var $113=(($112+28)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=FUNCTION_TABLE[$114]($__ct,48);
 var $116=$115;var $__f_0_lcssa426=$__f_0_lcssa427;var $__d_1_lcssa428=$__d_1_lcssa429;label=35;break;
 case 35: 
 var $__d_1_lcssa428;
 var $__f_0_lcssa426;
 var $116;
 var $117=($__f_0_lcssa426|0)>0;
 var $118=HEAP32[(($__me)>>2)];
 var $119=(($118+1)|0);
 HEAP32[(($__me)>>2)]=$119;
 if($117){var $__f_1389=$__f_0_lcssa426;var $120=$118;label=36;break;}else{var $_lcssa388=$118;label=37;break;}
 case 36: 
 var $120;
 var $__f_1389;
 HEAP8[($120)]=$116;
 var $121=((($__f_1389)-(1))|0);
 var $122=($121|0)>0;
 var $123=HEAP32[(($__me)>>2)];
 var $124=(($123+1)|0);
 HEAP32[(($__me)>>2)]=$124;
 if($122){var $__f_1389=$121;var $120=$123;label=36;break;}else{var $_lcssa388=$123;label=37;break;}
 case 37: 
 var $_lcssa388;
 HEAP8[($_lcssa388)]=$__dp;
 var $__d_2=$__d_1_lcssa428;label=38;break;
 case 38: 
 var $__d_2;
 var $126=($__d_2|0)==($__0363|0);
 if($126){label=39;break;}else{label=40;break;}
 case 39: 
 var $128=HEAP32[(($1)>>2)];
 var $129=(($128+28)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=FUNCTION_TABLE[$130]($__ct,48);
 var $132=HEAP32[(($__me)>>2)];
 var $133=(($132+1)|0);
 HEAP32[(($__me)>>2)]=$133;
 HEAP8[($132)]=$131;
 label=59;break;
 case 40: 
 var $135=HEAP8[($17)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=42;break;}else{label=41;break;}
 case 41: 
 var $140=HEAP32[(($20)>>2)];
 var $143=$140;label=43;break;
 case 42: 
 var $142=$136>>>1;
 var $143=$142;label=43;break;
 case 43: 
 var $143;
 var $144=($143|0)==0;
 if($144){var $__d_3393=$__d_2;var $__ng_0394=0;var $__ig_0395=0;var $__gl_0396=-1;label=47;break;}else{label=44;break;}
 case 44: 
 var $146=$135&1;
 var $147=(($146<<24)>>24)==0;
 if($147){var $150=$18;label=46;break;}else{label=45;break;}
 case 45: 
 var $149=HEAP32[(($19)>>2)];
 var $150=$149;label=46;break;
 case 46: 
 var $150;
 var $151=HEAP8[($150)];
 var $152=(($151<<24)>>24);
 var $__d_3393=$__d_2;var $__ng_0394=0;var $__ig_0395=0;var $__gl_0396=$152;label=47;break;
 case 47: 
 var $__gl_0396;
 var $__ig_0395;
 var $__ng_0394;
 var $__d_3393;
 var $153=($__ng_0394|0)==($__gl_0396|0);
 if($153){label=48;break;}else{var $__gl_1=$__gl_0396;var $__ig_1=$__ig_0395;var $__ng_1=$__ng_0394;label=58;break;}
 case 48: 
 var $155=HEAP32[(($__me)>>2)];
 var $156=(($155+1)|0);
 HEAP32[(($__me)>>2)]=$156;
 HEAP8[($155)]=$__ts;
 var $157=((($__ig_0395)+(1))|0);
 var $158=HEAP8[($17)];
 var $159=($158&255);
 var $160=$159&1;
 var $161=($160|0)==0;
 if($161){label=50;break;}else{label=49;break;}
 case 49: 
 var $163=HEAP32[(($20)>>2)];
 var $166=$163;label=51;break;
 case 50: 
 var $165=$159>>>1;
 var $166=$165;label=51;break;
 case 51: 
 var $166;
 var $167=($157>>>0)<($166>>>0);
 if($167){label=52;break;}else{var $__gl_1=$__gl_0396;var $__ig_1=$157;var $__ng_1=0;label=58;break;}
 case 52: 
 var $169=$158&1;
 var $170=(($169<<24)>>24)==0;
 if($170){var $173=$18;label=54;break;}else{label=53;break;}
 case 53: 
 var $172=HEAP32[(($19)>>2)];
 var $173=$172;label=54;break;
 case 54: 
 var $173;
 var $174=(($173+$157)|0);
 var $175=HEAP8[($174)];
 var $176=(($175<<24)>>24)==127;
 if($176){var $__gl_1=-1;var $__ig_1=$157;var $__ng_1=0;label=58;break;}else{label=55;break;}
 case 55: 
 if($170){var $180=$18;label=57;break;}else{label=56;break;}
 case 56: 
 var $179=HEAP32[(($19)>>2)];
 var $180=$179;label=57;break;
 case 57: 
 var $180;
 var $181=(($180+$157)|0);
 var $182=HEAP8[($181)];
 var $183=(($182<<24)>>24);
 var $__gl_1=$183;var $__ig_1=$157;var $__ng_1=0;label=58;break;
 case 58: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $184=((($__d_3393)-(1))|0);
 var $185=HEAP8[($184)];
 var $186=HEAP32[(($__me)>>2)];
 var $187=(($186+1)|0);
 HEAP32[(($__me)>>2)]=$187;
 HEAP8[($186)]=$185;
 var $188=((($__ng_1)+(1))|0);
 var $189=($184|0)==($__0363|0);
 if($189){label=59;break;}else{var $__d_3393=$184;var $__ng_0394=$188;var $__ig_0395=$__ig_1;var $__gl_0396=$__gl_1;label=47;break;}
 case 59: 
 var $190=HEAP32[(($__me)>>2)];
 var $191=($87|0)==($190|0);
 if($191){var $_2=$__0363;label=62;break;}else{label=60;break;}
 case 60: 
 var $192=((($190)-(1))|0);
 var $193=($87>>>0)<($192>>>0);
 if($193){var $_0360399=$87;var $194=$192;label=61;break;}else{var $_2=$__0363;label=62;break;}
 case 61: 
 var $194;
 var $_0360399;
 var $195=HEAP8[($_0360399)];
 var $196=HEAP8[($194)];
 HEAP8[($_0360399)]=$196;
 HEAP8[($194)]=$195;
 var $197=(($_0360399+1)|0);
 var $198=((($194)-(1))|0);
 var $199=($197>>>0)<($198>>>0);
 if($199){var $_0360399=$197;var $194=$198;label=61;break;}else{var $_2=$__0363;label=62;break;}
 case 62: 
 var $_2;
 var $200=((($__p_0406)+(1))|0);
 var $201=($200>>>0)<4;
 if($201){var $_0363405=$_2;var $__p_0406=$200;label=2;break;}else{label=63;break;}
 case 63: 
 var $203=HEAP8[($3)];
 var $204=($203&255);
 var $205=$204&1;
 var $206=($205|0)==0;
 if($206){label=65;break;}else{label=64;break;}
 case 64: 
 var $208=HEAP32[(($6)>>2)];
 var $211=$208;label=66;break;
 case 65: 
 var $210=$204>>>1;
 var $211=$210;label=66;break;
 case 66: 
 var $211;
 var $212=($211>>>0)>1;
 if($212){label=67;break;}else{label=75;break;}
 case 67: 
 var $214=$203&1;
 var $215=(($214<<24)>>24)==0;
 if($215){var $219=$4;var $218=$4;label=69;break;}else{label=68;break;}
 case 68: 
 var $217=HEAP32[(($5)>>2)];
 var $219=$217;var $218=$217;label=69;break;
 case 69: 
 var $218;
 var $219;
 if($206){label=71;break;}else{label=70;break;}
 case 70: 
 var $221=HEAP32[(($6)>>2)];
 var $224=$221;label=72;break;
 case 71: 
 var $223=$204>>>1;
 var $224=$223;label=72;break;
 case 72: 
 var $224;
 var $225=(($219+$224)|0);
 var $226=HEAP32[(($__me)>>2)];
 var $_sroa_0373_0378=(($218+1)|0);
 var $227=($_sroa_0373_0378|0)==($225|0);
 if($227){var $_0362_lcssa=$226;label=74;break;}else{var $_0362379=$226;var $_sroa_0373_0380=$_sroa_0373_0378;label=73;break;}
 case 73: 
 var $_sroa_0373_0380;
 var $_0362379;
 var $228=HEAP8[($_sroa_0373_0380)];
 HEAP8[($_0362379)]=$228;
 var $229=(($_0362379+1)|0);
 var $_sroa_0373_0=(($_sroa_0373_0380+1)|0);
 var $230=($_sroa_0373_0|0)==($225|0);
 if($230){var $_0362_lcssa=$229;label=74;break;}else{var $_0362379=$229;var $_sroa_0373_0380=$_sroa_0373_0;label=73;break;}
 case 74: 
 var $_0362_lcssa;
 HEAP32[(($__me)>>2)]=$_0362_lcssa;
 label=75;break;
 case 75: 
 var $232=$__flags&176;
 if(($232|0)==32){ label=76;break;}else if(($232|0)==16){ label=78;break;}else{label=77;break;}
 case 76: 
 var $234=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$234;
 label=78;break;
 case 77: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=78;break;
 case 78: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $__dp=(sp)+(32);
 var $__ts=(sp)+(40);
 var $__grp=(sp)+(48);
 var $__grp246=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $4=(($__loc)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$__p_i_i_i;
 var $7=HEAP32[((16840)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$6,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $10=HEAP32[((16844)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($5+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($5+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $26=$22;
 var $27=$__digits;
 var $28=$__digits;
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$30&1;
 var $32=($31|0)==0;
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 var $34=(($__digits+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $38=$35;label=10;break;
 case 9: 
 var $37=$30>>>1;
 var $38=$37;label=10;break;
 case 10: 
 var $38;
 var $39=($38|0)==0;
 if($39){var $56=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $41=$29&1;
 var $42=(($41<<24)>>24)==0;
 if($42){label=13;break;}else{label=12;break;}
 case 12: 
 var $44=(($__digits+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $48=$45;label=14;break;
 case 13: 
 var $47=(($27+1)|0);
 var $48=$47;label=14;break;
 case 14: 
 var $48;
 var $49=HEAP8[($48)];
 var $50=$22;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+28)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($26,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $55=(($49<<24)>>24)==(($54<<24)>>24);
 var $56=$55;label=16;break;
 case 16: 
 var $56;
 HEAP32[(($__grp246)>>2)]=0; HEAP32[((($__grp246)+(4))>>2)]=0; HEAP32[((($__grp246)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$56,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $58=(($__mbuf)|0);
 var $59=HEAP8[($28)];
 var $60=($59&255);
 var $61=$60&1;
 var $62=($61|0)==0;
 if($62){label=19;break;}else{label=18;break;}
 case 18: 
 var $64=(($__digits+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $68=$65;label=20;break;
 case 19: 
 var $67=$60>>>1;
 var $68=$67;label=20;break;
 case 20: 
 var $68;
 var $69=HEAP32[(($__fd)>>2)];
 var $70=($68|0)>($69|0);
 if($70){label=21;break;}else{label=31;break;}
 case 21: 
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $73=(($__digits+4)|0);
 var $74=HEAP32[(($73)>>2)];
 var $77=$74;label=24;break;
 case 23: 
 var $76=$60>>>1;
 var $77=$76;label=24;break;
 case 24: 
 var $77;
 var $78=((($77)-($69))|0);
 var $79=$78<<1;
 var $80=HEAP8[($2)];
 var $81=($80&255);
 var $82=$81&1;
 var $83=($82|0)==0;
 if($83){label=26;break;}else{label=25;break;}
 case 25: 
 var $85=(($__sn+4)|0);
 var $86=HEAP32[(($85)>>2)];
 var $89=$86;label=27;break;
 case 26: 
 var $88=$81>>>1;
 var $89=$88;label=27;break;
 case 27: 
 var $89;
 var $90=HEAP8[($1)];
 var $91=($90&255);
 var $92=$91&1;
 var $93=($92|0)==0;
 if($93){label=29;break;}else{label=28;break;}
 case 28: 
 var $95=(($__sym+4)|0);
 var $96=HEAP32[(($95)>>2)];
 var $99=$96;label=30;break;
 case 29: 
 var $98=$91>>>1;
 var $99=$98;label=30;break;
 case 30: 
 var $99;
 var $100=$79|1;
 var $101=((($100)+($89))|0);
 var $102=((($101)+($99))|0);
 var $_pn=$102;label=38;break;
 case 31: 
 var $104=HEAP8[($2)];
 var $105=($104&255);
 var $106=$105&1;
 var $107=($106|0)==0;
 if($107){label=33;break;}else{label=32;break;}
 case 32: 
 var $109=(($__sn+4)|0);
 var $110=HEAP32[(($109)>>2)];
 var $113=$110;label=34;break;
 case 33: 
 var $112=$105>>>1;
 var $113=$112;label=34;break;
 case 34: 
 var $113;
 var $114=HEAP8[($1)];
 var $115=($114&255);
 var $116=$115&1;
 var $117=($116|0)==0;
 if($117){label=36;break;}else{label=35;break;}
 case 35: 
 var $119=(($__sym+4)|0);
 var $120=HEAP32[(($119)>>2)];
 var $123=$120;label=37;break;
 case 36: 
 var $122=$115>>>1;
 var $123=$122;label=37;break;
 case 37: 
 var $123;
 var $124=((($113)+(2))|0);
 var $125=((($124)+($123))|0);
 var $_pn=$125;label=38;break;
 case 38: 
 var $_pn;
 var $127=((($_pn)+($69))|0);
 var $128=($127>>>0)>100;
 if($128){label=39;break;}else{var $__mb_0=$58;var $__h_sroa_0_1=0;var $150=$59;label=47;break;}
 case 39: 
 var $129=_malloc($127);
 var $130=($129|0)==0;
 if($130){label=40;break;}else{var $__mb_0=$129;var $__h_sroa_0_1=$129;var $150=$59;label=47;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 var $_pre=HEAP8[($28)];
 var $__mb_0=0;var $__h_sroa_0_1=0;var $150=$_pre;label=47;break;
 case 42: 
 var $132$0 = ___cxa_find_matching_catch(-1, -1); var $132$1 = tempRet0;
 var $133=$132$0;
 var $134=$132$1;
 var $_0=$134;var $_0231=$133;label=58;break;
 case 43: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1); var $136$1 = tempRet0;
 var $137=$136$0;
 var $138=$136$1;
 var $_1=$138;var $_1232=$137;label=59;break;
 case 44: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $_0=$142;var $_0231=$141;label=58;break;
 case 45: 
 var $144$0 = ___cxa_find_matching_catch(-1, -1); var $144$1 = tempRet0;
 var $145=$144$0;
 var $146=$144$1;
 var $147=($__h_sroa_0_1|0)==0;
 if($147){var $_0=$146;var $_0231=$145;label=58;break;}else{label=46;break;}
 case 46: 
 _free($__h_sroa_0_1);
 var $_0=$146;var $_0231=$145;label=58;break;
 case 47: 
 var $150;
 var $__h_sroa_0_1;
 var $__mb_0;
 var $151=(($__iob+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$150&1;
 var $154=(($153<<24)>>24)==0;
 if($154){label=49;break;}else{label=48;break;}
 case 48: 
 var $156=(($__digits+8)|0);
 var $157=HEAP32[(($156)>>2)];
 var $162=$157;var $161=$157;label=50;break;
 case 49: 
 var $159=(($27+1)|0);
 var $160=(($27+1)|0);
 var $162=$160;var $161=$159;label=50;break;
 case 50: 
 var $161;
 var $162;
 var $163=($150&255);
 var $164=$163&1;
 var $165=($164|0)==0;
 if($165){label=52;break;}else{label=51;break;}
 case 51: 
 var $167=(($__digits+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $171=$168;label=53;break;
 case 52: 
 var $170=$163>>>1;
 var $171=$170;label=53;break;
 case 53: 
 var $171;
 var $172=(($162+$171)|0);
 var $173=HEAP8[($__dp)];
 var $174=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$152,$161,$172,$26,$56,$__pat,$173,$174,$__grp,$__sym,$__sn,$69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=45;break; }
 case 54: 
 var $176=(($__s)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($3)|0);
 HEAP32[(($178)>>2)]=$177;
 var $179=HEAP32[(($__mi)>>2)];
 var $180=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$179,$180,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=45;break; }
 case 55: 
 var $182=($__h_sroa_0_1|0)==0;
 if($182){label=57;break;}else{label=56;break;}
 case 56: 
 _free($__h_sroa_0_1);
 label=57;break;
 case 57: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $184=HEAP32[(($4)>>2)];
 var $185=(($184)|0);
 var $186=__ZNSt3__114__shared_count16__release_sharedEv($185);
 STACKTOP=sp;return;
 case 58: 
 var $_0231;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_1232=$_0231;label=59;break;
 case 59: 
 var $_1232;
 var $_1;
 var $188=HEAP32[(($4)>>2)];
 var $189=(($188)|0);
 var $190=__ZNSt3__114__shared_count16__release_sharedEv($189);
 var $191$0=$_1232;
 var $191$1=0;
 var $192$0=$191$0;
 var $192$1=$_1;
 ___resumeException($192$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+576)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(528);
 var $__pat=(sp)+(536);
 var $__dp=(sp)+(544);
 var $__ts=(sp)+(552);
 var $__grp=(sp)+(560);
 var $__grp289=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=(($__buf)|0);
 HEAP32[(($__bb)>>2)]=$4;
 var $5=(($__digits)|0);
 var $6=_snprintf($4,100,3696,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=($6>>>0)>99;
 if($7){label=2;break;}else{var $__db_0=$5;var $__n_0=$6;var $__hn_sroa_0_1=0;var $__hd_sroa_0_1=0;label=15;break;}
 case 2: 
 var $9=HEAP8[(17544)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=3;break;}else{label=7;break;}
 case 3: 
 var $12=___cxa_guard_acquire(17544);
 var $13=($12|0)==0;
 if($13){label=7;break;}else{label=4;break;}
 case 4: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15408)>>2)]=$15;
 label=7;break;
 case 6: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $eh_lpad_body$1=$18$1;var $eh_lpad_body$0=$18$0;var $__hn_sroa_0_0_lpad_body=0;var $__hd_sroa_0_0_lpad_body=0;label=12;break;
 case 7: 
 var $20=HEAP32[((15408)>>2)];
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$20,3696,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 8: 
 var $23=HEAP32[(($__bb)>>2)];
 var $24=($23|0)==0;
 if($24){label=9;break;}else{var $30=$23;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $30=$_pre;label=13;break;
 case 11: 
 var $__hd_sroa_0_0;
 var $__hn_sroa_0_0;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body$1=$27$1;var $eh_lpad_body$0=$27$0;var $__hn_sroa_0_0_lpad_body=$__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body=$__hd_sroa_0_0;label=12;break;
 case 12: 
 var $__hd_sroa_0_0_lpad_body;
 var $__hn_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $28=$eh_lpad_body$0;
 var $29=$eh_lpad_body$1;
 var $_2=$29;var $_2255=$28;var $__hn_sroa_0_2=$__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2=$__hd_sroa_0_0_lpad_body;label=59;break;
 case 13: 
 var $30;
 var $31=$21<<2;
 var $32=_malloc($31);
 var $33=$32;
 var $34=($32|0)==0;
 if($34){label=14;break;}else{var $__db_0=$33;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=$33;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=$33;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=$33;label=15;break; } else { var $__hn_sroa_0_0=$30;var $__hd_sroa_0_0=$33;label=11;break; }
 case 15: 
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $__hn_sroa_0_0=$__hn_sroa_0_1;var $__hd_sroa_0_0=$__hd_sroa_0_1;label=11;break; }
 case 16: 
 var $38=(($__loc)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$__p_i_i_i;
 var $41=HEAP32[((16832)>>2)];
 var $42=($41|0)==-1;
 if($42){label=18;break;}else{label=17;break;}
 case 17: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$40,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=44;break; }
 case 18: 
 var $44=HEAP32[((16836)>>2)];
 var $45=((($44)-(1))|0);
 var $46=(($39+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($39+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$47;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=$52>>2;
 var $54=($53>>>0)>($45>>>0);
 if($54){label=19;break;}else{label=20;break;}
 case 19: 
 var $55=(($49+($45<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==0;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 var $58=___cxa_allocate_exception(4);
 var $59=$58;
 __ZNSt8bad_castC2Ev($59);
 (function() { try { __THREW__ = 0; return ___cxa_throw($58,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=44;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $60=$56;
 var $61=HEAP32[(($__bb)>>2)];
 var $62=(($61+$__n_0)|0);
 var $63=$56;
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+48)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$66]($60,$61,$62,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=44;break; }
 case 23: 
 var $68=($__n_0|0)==0;
 if($68){var $73=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $70=HEAP32[(($__bb)>>2)];
 var $71=HEAP8[($70)];
 var $72=(($71<<24)>>24)==45;
 var $73=$72;label=25;break;
 case 25: 
 var $73;
 HEAP32[(($__grp289)>>2)]=0; HEAP32[((($__grp289)+(4))>>2)]=0; HEAP32[((($__grp289)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$73,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=45;break; }
 case 26: 
 var $75=(($__mbuf)|0);
 var $76=HEAP32[(($__fd)>>2)];
 var $77=($__n_0|0)>($76|0);
 if($77){label=27;break;}else{label=34;break;}
 case 27: 
 var $79=((($__n_0)-($76))|0);
 var $80=$79<<1;
 var $81=HEAP8[($2)];
 var $82=($81&255);
 var $83=$82&1;
 var $84=($83|0)==0;
 if($84){label=29;break;}else{label=28;break;}
 case 28: 
 var $86=(($__sn+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $90=$87;label=30;break;
 case 29: 
 var $89=$82>>>1;
 var $90=$89;label=30;break;
 case 30: 
 var $90;
 var $91=HEAP8[($1)];
 var $92=($91&255);
 var $93=$92&1;
 var $94=($93|0)==0;
 if($94){label=32;break;}else{label=31;break;}
 case 31: 
 var $96=(($__sym+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $100=$97;label=33;break;
 case 32: 
 var $99=$92>>>1;
 var $100=$99;label=33;break;
 case 33: 
 var $100;
 var $101=$80|1;
 var $102=((($101)+($90))|0);
 var $103=((($102)+($100))|0);
 var $_pn=$103;label=41;break;
 case 34: 
 var $105=HEAP8[($2)];
 var $106=($105&255);
 var $107=$106&1;
 var $108=($107|0)==0;
 if($108){label=36;break;}else{label=35;break;}
 case 35: 
 var $110=(($__sn+4)|0);
 var $111=HEAP32[(($110)>>2)];
 var $114=$111;label=37;break;
 case 36: 
 var $113=$106>>>1;
 var $114=$113;label=37;break;
 case 37: 
 var $114;
 var $115=HEAP8[($1)];
 var $116=($115&255);
 var $117=$116&1;
 var $118=($117|0)==0;
 if($118){label=39;break;}else{label=38;break;}
 case 38: 
 var $120=(($__sym+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $124=$121;label=40;break;
 case 39: 
 var $123=$116>>>1;
 var $124=$123;label=40;break;
 case 40: 
 var $124;
 var $125=((($114)+(2))|0);
 var $126=((($125)+($124))|0);
 var $_pn=$126;label=41;break;
 case 41: 
 var $_pn;
 var $128=((($_pn)+($76))|0);
 var $129=($128>>>0)>100;
 if($129){label=42;break;}else{var $__mb_0=$75;var $__hw_sroa_0_1=0;label=48;break;}
 case 42: 
 var $130=$128<<2;
 var $131=_malloc($130);
 var $132=$131;
 var $133=($131|0)==0;
 if($133){label=43;break;}else{var $__mb_0=$132;var $__hw_sroa_0_1=$132;label=48;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=$132;var $__hw_sroa_0_1=$132;label=48;break; } else { var $__hw_sroa_0_0=$132;label=46;break; }
 case 44: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1); var $136$1 = tempRet0;
 var $137=$136$0;
 var $138=$136$1;
 var $_1=$138;var $_1254=$137;label=58;break;
 case 45: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $_0=$142;var $_0253=$141;label=57;break;
 case 46: 
 var $__hw_sroa_0_0;
 var $144$0 = ___cxa_find_matching_catch(-1, -1); var $144$1 = tempRet0;
 var $145=$144$0;
 var $146=$144$1;
 var $147=($__hw_sroa_0_0|0)==0;
 if($147){var $_0=$146;var $_0253=$145;label=57;break;}else{label=47;break;}
 case 47: 
 var $149=$__hw_sroa_0_0;
 _free($149);
 var $_0=$146;var $_0253=$145;label=57;break;
 case 48: 
 var $__hw_sroa_0_1;
 var $__mb_0;
 var $151=(($__iob+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($__db_0+($__n_0<<2))|0);
 var $154=HEAP32[(($__dp)>>2)];
 var $155=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$152,$__db_0,$153,$60,$73,$__pat,$154,$155,$__grp,$__sym,$__sn,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { var $__hw_sroa_0_0=$__hw_sroa_0_1;label=46;break; }
 case 49: 
 var $157=(($__s)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($3)|0);
 HEAP32[(($159)>>2)]=$158;
 var $160=HEAP32[(($__mi)>>2)];
 var $161=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$160,$161,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { var $__hw_sroa_0_0=$__hw_sroa_0_1;label=46;break; }
 case 50: 
 var $163=($__hw_sroa_0_1|0)==0;
 if($163){label=52;break;}else{label=51;break;}
 case 51: 
 var $165=$__hw_sroa_0_1;
 _free($165);
 label=52;break;
 case 52: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $166=HEAP32[(($38)>>2)];
 var $167=(($166)|0);
 var $168=__ZNSt3__114__shared_count16__release_sharedEv($167);
 var $169=($__hd_sroa_0_1|0)==0;
 if($169){label=54;break;}else{label=53;break;}
 case 53: 
 var $171=$__hd_sroa_0_1;
 _free($171);
 label=54;break;
 case 54: 
 var $172=($__hn_sroa_0_1|0)==0;
 if($172){label=56;break;}else{label=55;break;}
 case 55: 
 _free($__hn_sroa_0_1);
 label=56;break;
 case 56: 
 STACKTOP=sp;return;
 case 57: 
 var $_0253;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_1254=$_0253;label=58;break;
 case 58: 
 var $_1254;
 var $_1;
 var $175=HEAP32[(($38)>>2)];
 var $176=(($175)|0);
 var $177=__ZNSt3__114__shared_count16__release_sharedEv($176);
 var $_2=$_1;var $_2255=$_1254;var $__hn_sroa_0_2=$__hn_sroa_0_1;var $__hd_sroa_0_2=$__hd_sroa_0_1;label=59;break;
 case 59: 
 var $__hd_sroa_0_2;
 var $__hn_sroa_0_2;
 var $_2255;
 var $_2;
 var $179=($__hd_sroa_0_2|0)==0;
 if($179){label=61;break;}else{label=60;break;}
 case 60: 
 var $181=$__hd_sroa_0_2;
 _free($181);
 label=61;break;
 case 61: 
 var $182=($__hn_sroa_0_2|0)==0;
 if($182){label=63;break;}else{label=62;break;}
 case 62: 
 _free($__hn_sroa_0_2);
 label=63;break;
 case 63: 
 var $184$0=$_2255;
 var $184$1=0;
 var $185$0=$184$0;
 var $185$1=$_2;
 ___resumeException($185$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i519=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast518=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast517=$4;
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$5;
 var $7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $8=$7;
 var $9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $10=$9;
 var $11=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast516=$11;
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 var $14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$14;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 var $19=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $20=$19;
 var $21=(($__loc)|0);
 var $22=HEAP32[(($21)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $24=$__p_i_i_i;
 var $25=HEAP32[((17296)>>2)];
 var $26=($25|0)==-1;
 if($26){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17296;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17296,$24,274);
 label=4;break;
 case 4: 
 var $28=HEAP32[((17300)>>2)];
 var $29=((($28)-(1))|0);
 var $30=(($22+12)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($22+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$31;
 var $35=$33;
 var $36=((($34)-($35))|0);
 var $37=$36>>2;
 var $38=($37>>>0)>($29>>>0);
 if($38){label=5;break;}else{label=6;break;}
 case 5: 
 var $39=(($33+($29<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 if($41){label=6;break;}else{label=7;break;}
 case 6: 
 var $42=___cxa_allocate_exception(4);
 var $43=$42;
 __ZNSt8bad_castC2Ev($43);
 ___cxa_throw($42,11472,(394));
 throw "Reached an unreachable!";
 case 7: 
 var $44=$40;
 var $45=$40;
 var $46=HEAP32[(($45)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $48=(($46+44)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($tmpcast518,$44);
 var $50=$__pat;
 var $51=HEAP32[(($1)>>2)];
 tempBigInt=$51;HEAP8[($50)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(3))|0)]=tempBigInt&0xff;
 var $52=$40;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+32)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($2,$44);
 var $56=$__sn;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=10;break;}else{label=9;break;}
 case 9: 
 var $61=(($__sn+8)|0);
 var $62=HEAP32[(($61)>>2)];
 HEAP32[(($62)>>2)]=0;
 var $63=(($__sn+4)|0);
 HEAP32[(($63)>>2)]=0;
 label=11;break;
 case 10: 
 var $65=(($__sn+4)|0);
 HEAP32[(($65)>>2)]=0;
 HEAP8[($56)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $67$0 = ___cxa_find_matching_catch(-1, -1,0); var $67$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
 label=20;break;
 case 14: 
 var $69=(($46+40)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($tmpcast517,$44);
 var $71=$__pat;
 var $72=HEAP32[(($4)>>2)];
 tempBigInt=$72;HEAP8[($71)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($71)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($71)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($71)+(3))|0)]=tempBigInt&0xff;
 var $73=$40;
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+28)|0);
 var $76=HEAP32[(($75)>>2)];
 FUNCTION_TABLE[$76]($5,$44);
 var $77=$__sn;
 var $78=HEAP8[($77)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=16;break;}else{label=15;break;}
 case 15: 
 var $82=(($__sn+8)|0);
 var $83=HEAP32[(($82)>>2)];
 HEAP32[(($83)>>2)]=0;
 var $84=(($__sn+4)|0);
 HEAP32[(($84)>>2)]=0;
 label=17;break;
 case 16: 
 var $86=(($__sn+4)|0);
 HEAP32[(($86)>>2)]=0;
 HEAP8[($77)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1,0); var $88$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 19: 
 assert(12 % 1 === 0);HEAP32[(($77)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($77)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($77)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
 label=20;break;
 case 20: 
 var $90=$40;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=FUNCTION_TABLE[$93]($44);
 HEAP32[(($__dp)>>2)]=$94;
 var $95=HEAP32[(($90)>>2)];
 var $96=(($95+16)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($44);
 HEAP32[(($__ts)>>2)]=$98;
 var $99=$40;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+20)|0);
 var $102=HEAP32[(($101)>>2)];
 FUNCTION_TABLE[$102]($7,$44);
 var $103=$__grp;
 var $104=HEAP8[($103)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){label=22;break;}else{label=21;break;}
 case 21: 
 var $108=(($__grp+8)|0);
 var $109=HEAP32[(($108)>>2)];
 HEAP8[($109)]=0;
 var $110=(($__grp+4)|0);
 HEAP32[(($110)>>2)]=0;
 label=23;break;
 case 22: 
 var $112=$__grp;
 var $113=(($112+1)|0);
 HEAP8[($113)]=0;
 HEAP8[($103)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $115$0 = ___cxa_find_matching_catch(-1, -1,0); var $115$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($103)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
 var $116=$40;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+24)|0);
 var $119=HEAP32[(($118)>>2)];
 FUNCTION_TABLE[$119]($9,$44);
 var $120=$__sym;
 var $121=HEAP8[($120)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=27;break;}else{label=26;break;}
 case 26: 
 var $125=(($__sym+8)|0);
 var $126=HEAP32[(($125)>>2)];
 HEAP32[(($126)>>2)]=0;
 var $127=(($__sym+4)|0);
 HEAP32[(($127)>>2)]=0;
 label=28;break;
 case 27: 
 var $129=(($__sym+4)|0);
 HEAP32[(($129)>>2)]=0;
 HEAP8[($120)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $131$0 = ___cxa_find_matching_catch(-1, -1,0); var $131$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 assert(12 % 1 === 0);HEAP32[(($120)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($120)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($120)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
 var $132=HEAP32[(($90)>>2)];
 var $133=(($132+36)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=FUNCTION_TABLE[$134]($44);
 var $storemerge=$135;label=60;break;
 case 31: 
 var $137=$__p_i_i_i519;
 var $138=HEAP32[((17304)>>2)];
 var $139=($138|0)==-1;
 if($139){label=33;break;}else{label=32;break;}
 case 32: 
 var $_sroa_016_0__idx_i_i520=(($__p_i_i_i519)|0);
 HEAP32[(($_sroa_016_0__idx_i_i520)>>2)]=17304;
 var $_sroa_117_4__idx18_i_i521=(($__p_i_i_i519+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i521)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i522=(($__p_i_i_i519+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i522)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17304,$137,274);
 label=33;break;
 case 33: 
 var $141=HEAP32[((17308)>>2)];
 var $142=((($141)-(1))|0);
 var $143=(($22+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($22+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$144;
 var $148=$146;
 var $149=((($147)-($148))|0);
 var $150=$149>>2;
 var $151=($150>>>0)>($142>>>0);
 if($151){label=34;break;}else{label=35;break;}
 case 34: 
 var $152=(($146+($142<<2))|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153|0)==0;
 if($154){label=35;break;}else{label=36;break;}
 case 35: 
 var $155=___cxa_allocate_exception(4);
 var $156=$155;
 __ZNSt8bad_castC2Ev($156);
 ___cxa_throw($155,11472,(394));
 throw "Reached an unreachable!";
 case 36: 
 var $157=$153;
 var $158=$153;
 var $159=HEAP32[(($158)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $161=(($159+44)|0);
 var $162=HEAP32[(($161)>>2)];
 FUNCTION_TABLE[$162]($tmpcast516,$157);
 var $163=$__pat;
 var $164=HEAP32[(($11)>>2)];
 tempBigInt=$164;HEAP8[($163)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(3))|0)]=tempBigInt&0xff;
 var $165=$153;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+32)|0);
 var $168=HEAP32[(($167)>>2)];
 FUNCTION_TABLE[$168]($12,$157);
 var $169=$__sn;
 var $170=HEAP8[($169)];
 var $171=$170&1;
 var $172=(($171<<24)>>24)==0;
 if($172){label=39;break;}else{label=38;break;}
 case 38: 
 var $174=(($__sn+8)|0);
 var $175=HEAP32[(($174)>>2)];
 HEAP32[(($175)>>2)]=0;
 var $176=(($__sn+4)|0);
 HEAP32[(($176)>>2)]=0;
 label=40;break;
 case 39: 
 var $178=(($__sn+4)|0);
 HEAP32[(($178)>>2)]=0;
 HEAP8[($169)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $180$0 = ___cxa_find_matching_catch(-1, -1,0); var $180$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 42: 
 assert(12 % 1 === 0);HEAP32[(($169)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($169)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($169)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($12);
 label=49;break;
 case 43: 
 var $182=(($159+40)|0);
 var $183=HEAP32[(($182)>>2)];
 FUNCTION_TABLE[$183]($tmpcast,$157);
 var $184=$__pat;
 var $185=HEAP32[(($14)>>2)];
 tempBigInt=$185;HEAP8[($184)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($184)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($184)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($184)+(3))|0)]=tempBigInt&0xff;
 var $186=$153;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+28)|0);
 var $189=HEAP32[(($188)>>2)];
 FUNCTION_TABLE[$189]($15,$157);
 var $190=$__sn;
 var $191=HEAP8[($190)];
 var $192=$191&1;
 var $193=(($192<<24)>>24)==0;
 if($193){label=45;break;}else{label=44;break;}
 case 44: 
 var $195=(($__sn+8)|0);
 var $196=HEAP32[(($195)>>2)];
 HEAP32[(($196)>>2)]=0;
 var $197=(($__sn+4)|0);
 HEAP32[(($197)>>2)]=0;
 label=46;break;
 case 45: 
 var $199=(($__sn+4)|0);
 HEAP32[(($199)>>2)]=0;
 HEAP8[($190)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $201$0 = ___cxa_find_matching_catch(-1, -1,0); var $201$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($190)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($190)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($190)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($15);
 label=49;break;
 case 49: 
 var $203=$153;
 var $204=HEAP32[(($203)>>2)];
 var $205=(($204+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=FUNCTION_TABLE[$206]($157);
 HEAP32[(($__dp)>>2)]=$207;
 var $208=HEAP32[(($203)>>2)];
 var $209=(($208+16)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=FUNCTION_TABLE[$210]($157);
 HEAP32[(($__ts)>>2)]=$211;
 var $212=$153;
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213+20)|0);
 var $215=HEAP32[(($214)>>2)];
 FUNCTION_TABLE[$215]($17,$157);
 var $216=$__grp;
 var $217=HEAP8[($216)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=51;break;}else{label=50;break;}
 case 50: 
 var $221=(($__grp+8)|0);
 var $222=HEAP32[(($221)>>2)];
 HEAP8[($222)]=0;
 var $223=(($__grp+4)|0);
 HEAP32[(($223)>>2)]=0;
 label=52;break;
 case 51: 
 var $225=$__grp;
 var $226=(($225+1)|0);
 HEAP8[($226)]=0;
 HEAP8[($216)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $228$0 = ___cxa_find_matching_catch(-1, -1,0); var $228$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($216)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($216)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($216)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 var $229=$153;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+24)|0);
 var $232=HEAP32[(($231)>>2)];
 FUNCTION_TABLE[$232]($19,$157);
 var $233=$__sym;
 var $234=HEAP8[($233)];
 var $235=$234&1;
 var $236=(($235<<24)>>24)==0;
 if($236){label=56;break;}else{label=55;break;}
 case 55: 
 var $238=(($__sym+8)|0);
 var $239=HEAP32[(($238)>>2)];
 HEAP32[(($239)>>2)]=0;
 var $240=(($__sym+4)|0);
 HEAP32[(($240)>>2)]=0;
 label=57;break;
 case 56: 
 var $242=(($__sym+4)|0);
 HEAP32[(($242)>>2)]=0;
 HEAP8[($233)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $244$0 = ___cxa_find_matching_catch(-1, -1,0); var $244$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 59: 
 assert(12 % 1 === 0);HEAP32[(($233)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($233)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($233)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($19);
 var $245=HEAP32[(($203)>>2)];
 var $246=(($245+36)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=FUNCTION_TABLE[$247]($157);
 var $storemerge=$248;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=(($__sn+4)|0);
 var $4=(($__sn+8)|0);
 var $5=$__sym;
 var $6=$__flags&512;
 var $7=($6|0)==0;
 var $8=(($__sym+4)|0);
 var $9=(($__sym+8)|0);
 var $10=$__ct;
 var $11=($__fd|0)>0;
 var $12=$__grp;
 var $13=$__grp;
 var $14=(($12+1)|0);
 var $15=(($__grp+8)|0);
 var $16=(($__grp+4)|0);
 var $_0361402=$__db;var $__p_0403=0;label=2;break;
 case 2: 
 var $__p_0403;
 var $_0361402;
 var $18=(($__pat+$__p_0403)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 switch(($20|0)){case 2:{ label=12;break;}case 4:{ label=28;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_0361402;label=63;break;}}break;
 case 3: 
 var $22=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$22;
 var $_2=$_0361402;label=63;break;
 case 4: 
 var $24=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$24;
 var $25=HEAP32[(($1)>>2)];
 var $26=(($25+44)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($__ct,32);
 var $29=HEAP32[(($__me)>>2)];
 var $30=(($29+4)|0);
 HEAP32[(($__me)>>2)]=$30;
 HEAP32[(($29)>>2)]=$28;
 var $_2=$_0361402;label=63;break;
 case 5: 
 var $32=HEAP8[($2)];
 var $33=($32&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=7;break;}else{label=6;break;}
 case 6: 
 var $37=HEAP32[(($3)>>2)];
 var $40=$37;label=8;break;
 case 7: 
 var $39=$33>>>1;
 var $40=$39;label=8;break;
 case 8: 
 var $40;
 var $41=($40|0)==0;
 if($41){var $_2=$_0361402;label=63;break;}else{label=9;break;}
 case 9: 
 var $43=$32&1;
 var $44=(($43<<24)>>24)==0;
 if($44){var $47=$3;label=11;break;}else{label=10;break;}
 case 10: 
 var $46=HEAP32[(($4)>>2)];
 var $47=$46;label=11;break;
 case 11: 
 var $47;
 var $48=HEAP32[(($47)>>2)];
 var $49=HEAP32[(($__me)>>2)];
 var $50=(($49+4)|0);
 HEAP32[(($__me)>>2)]=$50;
 HEAP32[(($49)>>2)]=$48;
 var $_2=$_0361402;label=63;break;
 case 12: 
 var $52=HEAP8[($5)];
 var $53=($52&255);
 var $54=$53&1;
 var $55=($54|0)==0;
 if($55){label=14;break;}else{label=13;break;}
 case 13: 
 var $57=HEAP32[(($8)>>2)];
 var $60=$57;label=15;break;
 case 14: 
 var $59=$53>>>1;
 var $60=$59;label=15;break;
 case 15: 
 var $60;
 var $61=($60|0)==0;
 var $brmerge=$61|$7;
 if($brmerge){var $_2=$_0361402;label=63;break;}else{label=16;break;}
 case 16: 
 var $63=$52&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=18;break;}else{label=17;break;}
 case 17: 
 var $66=HEAP32[(($9)>>2)];
 var $69=$66;var $68=$66;var $_in427=$66;label=19;break;
 case 18: 
 var $69=$8;var $68=$8;var $_in427=$8;label=19;break;
 case 19: 
 var $_in427;
 var $68;
 var $69;
 var $70=$_in427;
 if($55){label=21;break;}else{label=20;break;}
 case 20: 
 var $72=HEAP32[(($8)>>2)];
 var $75=$72;label=22;break;
 case 21: 
 var $74=$53>>>1;
 var $75=$74;label=22;break;
 case 22: 
 var $75;
 var $76=(($69+($75<<2))|0);
 var $77=HEAP32[(($__me)>>2)];
 var $78=($68|0)==($76|0);
 if($78){var $_0_lcssa=$77;label=27;break;}else{label=23;break;}
 case 23: 
 var $scevgep414_sum=((($75)-(1))|0);
 var $scevgep415=(($69+($scevgep414_sum<<2))|0);
 var $scevgep415416=$scevgep415;
 var $79=(((-$70))|0);
 var $uglygep417=(($scevgep415416+$79)|0);
 var $uglygep417418=$uglygep417;
 var $80=$uglygep417418>>>2;
 var $_sroa_0362_0398=$68;var $_0399=$77;label=24;break;
 case 24: 
 var $_0399;
 var $_sroa_0362_0398;
 var $82=HEAP32[(($_sroa_0362_0398)>>2)];
 HEAP32[(($_0399)>>2)]=$82;
 var $83=(($_sroa_0362_0398+4)|0);
 var $84=($83|0)==($76|0);
 if($84){label=26;break;}else{label=25;break;}
 case 25: 
 var $85=(($_0399+4)|0);
 var $_sroa_0362_0398=$83;var $_0399=$85;label=24;break;
 case 26: 
 var $scevgep413_sum=((($80)+(1))|0);
 var $scevgep419=(($77+($scevgep413_sum<<2))|0);
 var $_0_lcssa=$scevgep419;label=27;break;
 case 27: 
 var $_0_lcssa;
 HEAP32[(($__me)>>2)]=$_0_lcssa;
 var $_2=$_0361402;label=63;break;
 case 28: 
 var $87=HEAP32[(($__me)>>2)];
 var $88=(($_0361402+4)|0);
 var $__0361=($__neg?$88:$_0361402);
 var $__d_0=$__0361;label=29;break;
 case 29: 
 var $__d_0;
 var $90=($__d_0>>>0)<($__de>>>0);
 if($90){label=30;break;}else{label=31;break;}
 case 30: 
 var $92=HEAP32[(($__d_0)>>2)];
 var $93=HEAP32[(($10)>>2)];
 var $94=(($93+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=FUNCTION_TABLE[$95]($__ct,2048,$92);
 var $97=(($__d_0+4)|0);
 if($96){var $__d_0=$97;label=29;break;}else{label=31;break;}
 case 31: 
 if($11){label=32;break;}else{var $__d_2=$__d_0;label=39;break;}
 case 32: 
 var $99=($__d_0>>>0)>($__0361>>>0);
 if($99){var $__d_1379=$__d_0;var $__f_0380=$__fd;label=33;break;}else{var $__f_0_lcssa424=$__fd;var $__d_1_lcssa426=$__d_0;label=35;break;}
 case 33: 
 var $__f_0380;
 var $__d_1379;
 var $100=((($__d_1379)-(4))|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=HEAP32[(($__me)>>2)];
 var $103=(($102+4)|0);
 HEAP32[(($__me)>>2)]=$103;
 HEAP32[(($102)>>2)]=$101;
 var $104=((($__f_0380)-(1))|0);
 var $105=($100>>>0)>($__0361>>>0);
 var $106=($104|0)>0;
 var $or_cond=$105&$106;
 if($or_cond){var $__d_1379=$100;var $__f_0380=$104;label=33;break;}else{label=34;break;}
 case 34: 
 if($106){var $__f_0_lcssa424=$104;var $__d_1_lcssa426=$100;label=35;break;}else{var $111=0;var $__f_0_lcssa423=$104;var $__d_1_lcssa425=$100;label=36;break;}
 case 35: 
 var $__d_1_lcssa426;
 var $__f_0_lcssa424;
 var $107=HEAP32[(($1)>>2)];
 var $108=(($107+44)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=FUNCTION_TABLE[$109]($__ct,48);
 var $111=$110;var $__f_0_lcssa423=$__f_0_lcssa424;var $__d_1_lcssa425=$__d_1_lcssa426;label=36;break;
 case 36: 
 var $__d_1_lcssa425;
 var $__f_0_lcssa423;
 var $111;
 var $112=($__f_0_lcssa423|0)>0;
 var $113=HEAP32[(($__me)>>2)];
 var $114=(($113+4)|0);
 HEAP32[(($__me)>>2)]=$114;
 if($112){var $__f_1386=$__f_0_lcssa423;var $115=$113;label=37;break;}else{var $_lcssa385=$113;label=38;break;}
 case 37: 
 var $115;
 var $__f_1386;
 HEAP32[(($115)>>2)]=$111;
 var $116=((($__f_1386)-(1))|0);
 var $117=($116|0)>0;
 var $118=HEAP32[(($__me)>>2)];
 var $119=(($118+4)|0);
 HEAP32[(($__me)>>2)]=$119;
 if($117){var $__f_1386=$116;var $115=$118;label=37;break;}else{var $_lcssa385=$118;label=38;break;}
 case 38: 
 var $_lcssa385;
 HEAP32[(($_lcssa385)>>2)]=$__dp;
 var $__d_2=$__d_1_lcssa425;label=39;break;
 case 39: 
 var $__d_2;
 var $121=($__d_2|0)==($__0361|0);
 if($121){label=40;break;}else{label=41;break;}
 case 40: 
 var $123=HEAP32[(($1)>>2)];
 var $124=(($123+44)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=FUNCTION_TABLE[$125]($__ct,48);
 var $127=HEAP32[(($__me)>>2)];
 var $128=(($127+4)|0);
 HEAP32[(($__me)>>2)]=$128;
 HEAP32[(($127)>>2)]=$126;
 label=60;break;
 case 41: 
 var $130=HEAP8[($13)];
 var $131=($130&255);
 var $132=$131&1;
 var $133=($132|0)==0;
 if($133){label=43;break;}else{label=42;break;}
 case 42: 
 var $135=HEAP32[(($16)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$131>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){var $__d_3390=$__d_2;var $__ng_0391=0;var $__ig_0392=0;var $__gl_0393=-1;label=48;break;}else{label=45;break;}
 case 45: 
 var $141=$130&1;
 var $142=(($141<<24)>>24)==0;
 if($142){var $145=$14;label=47;break;}else{label=46;break;}
 case 46: 
 var $144=HEAP32[(($15)>>2)];
 var $145=$144;label=47;break;
 case 47: 
 var $145;
 var $146=HEAP8[($145)];
 var $147=(($146<<24)>>24);
 var $__d_3390=$__d_2;var $__ng_0391=0;var $__ig_0392=0;var $__gl_0393=$147;label=48;break;
 case 48: 
 var $__gl_0393;
 var $__ig_0392;
 var $__ng_0391;
 var $__d_3390;
 var $148=($__ng_0391|0)==($__gl_0393|0);
 if($148){label=49;break;}else{var $__gl_1=$__gl_0393;var $__ig_1=$__ig_0392;var $__ng_1=$__ng_0391;label=59;break;}
 case 49: 
 var $150=HEAP32[(($__me)>>2)];
 var $151=(($150+4)|0);
 HEAP32[(($__me)>>2)]=$151;
 HEAP32[(($150)>>2)]=$__ts;
 var $152=((($__ig_0392)+(1))|0);
 var $153=HEAP8[($13)];
 var $154=($153&255);
 var $155=$154&1;
 var $156=($155|0)==0;
 if($156){label=51;break;}else{label=50;break;}
 case 50: 
 var $158=HEAP32[(($16)>>2)];
 var $161=$158;label=52;break;
 case 51: 
 var $160=$154>>>1;
 var $161=$160;label=52;break;
 case 52: 
 var $161;
 var $162=($152>>>0)<($161>>>0);
 if($162){label=53;break;}else{var $__gl_1=$__gl_0393;var $__ig_1=$152;var $__ng_1=0;label=59;break;}
 case 53: 
 var $164=$153&1;
 var $165=(($164<<24)>>24)==0;
 if($165){var $168=$14;label=55;break;}else{label=54;break;}
 case 54: 
 var $167=HEAP32[(($15)>>2)];
 var $168=$167;label=55;break;
 case 55: 
 var $168;
 var $169=(($168+$152)|0);
 var $170=HEAP8[($169)];
 var $171=(($170<<24)>>24)==127;
 if($171){var $__gl_1=-1;var $__ig_1=$152;var $__ng_1=0;label=59;break;}else{label=56;break;}
 case 56: 
 if($165){var $175=$14;label=58;break;}else{label=57;break;}
 case 57: 
 var $174=HEAP32[(($15)>>2)];
 var $175=$174;label=58;break;
 case 58: 
 var $175;
 var $176=(($175+$152)|0);
 var $177=HEAP8[($176)];
 var $178=(($177<<24)>>24);
 var $__gl_1=$178;var $__ig_1=$152;var $__ng_1=0;label=59;break;
 case 59: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $179=((($__d_3390)-(4))|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=HEAP32[(($__me)>>2)];
 var $182=(($181+4)|0);
 HEAP32[(($__me)>>2)]=$182;
 HEAP32[(($181)>>2)]=$180;
 var $183=((($__ng_1)+(1))|0);
 var $184=($179|0)==($__0361|0);
 if($184){label=60;break;}else{var $__d_3390=$179;var $__ng_0391=$183;var $__ig_0392=$__ig_1;var $__gl_0393=$__gl_1;label=48;break;}
 case 60: 
 var $185=HEAP32[(($__me)>>2)];
 var $186=($87|0)==($185|0);
 if($186){var $_2=$__0361;label=63;break;}else{label=61;break;}
 case 61: 
 var $187=((($185)-(4))|0);
 var $188=($87>>>0)<($187>>>0);
 if($188){var $_0358396=$87;var $189=$187;label=62;break;}else{var $_2=$__0361;label=63;break;}
 case 62: 
 var $189;
 var $_0358396;
 var $190=HEAP32[(($_0358396)>>2)];
 var $191=HEAP32[(($189)>>2)];
 HEAP32[(($_0358396)>>2)]=$191;
 HEAP32[(($189)>>2)]=$190;
 var $192=(($_0358396+4)|0);
 var $193=((($189)-(4))|0);
 var $194=($192>>>0)<($193>>>0);
 if($194){var $_0358396=$192;var $189=$193;label=62;break;}else{var $_2=$__0361;label=63;break;}
 case 63: 
 var $_2;
 var $195=((($__p_0403)+(1))|0);
 var $196=($195>>>0)<4;
 if($196){var $_0361402=$_2;var $__p_0403=$195;label=2;break;}else{label=64;break;}
 case 64: 
 var $198=HEAP8[($2)];
 var $199=($198&255);
 var $200=$199&1;
 var $201=($200|0)==0;
 if($201){label=66;break;}else{label=65;break;}
 case 65: 
 var $203=HEAP32[(($3)>>2)];
 var $206=$203;label=67;break;
 case 66: 
 var $205=$199>>>1;
 var $206=$205;label=67;break;
 case 67: 
 var $206;
 var $207=($206>>>0)>1;
 if($207){label=68;break;}else{label=79;break;}
 case 68: 
 var $209=$198&1;
 var $210=(($209<<24)>>24)==0;
 if($210){label=70;break;}else{label=69;break;}
 case 69: 
 var $212=HEAP32[(($4)>>2)];
 var $215=$212;var $214=$212;var $_in=$212;label=71;break;
 case 70: 
 var $215=$3;var $214=$3;var $_in=$3;label=71;break;
 case 71: 
 var $_in;
 var $214;
 var $215;
 var $216=$_in;
 if($201){label=73;break;}else{label=72;break;}
 case 72: 
 var $218=HEAP32[(($3)>>2)];
 var $221=$218;label=74;break;
 case 73: 
 var $220=$199>>>1;
 var $221=$220;label=74;break;
 case 74: 
 var $221;
 var $222=(($215+($221<<2))|0);
 var $223=HEAP32[(($__me)>>2)];
 var $_sroa_0371_0375=(($214+4)|0);
 var $224=($_sroa_0371_0375|0)==($222|0);
 if($224){var $_0360_lcssa=$223;label=78;break;}else{label=75;break;}
 case 75: 
 var $225=((($221)-(2))|0);
 var $scevgep=(($215+($225<<2))|0);
 var $scevgep405=$scevgep;
 var $226=(((-$216))|0);
 var $uglygep=(($scevgep405+$226)|0);
 var $uglygep406=$uglygep;
 var $227=$uglygep406>>>2;
 var $228=((($227)+(1))|0);
 var $_0360376=$223;var $_sroa_0371_0377=$_sroa_0371_0375;label=76;break;
 case 76: 
 var $_sroa_0371_0377;
 var $_0360376;
 var $230=HEAP32[(($_sroa_0371_0377)>>2)];
 HEAP32[(($_0360376)>>2)]=$230;
 var $231=(($_0360376+4)|0);
 var $_sroa_0371_0=(($_sroa_0371_0377+4)|0);
 var $232=($_sroa_0371_0|0)==($222|0);
 if($232){label=77;break;}else{var $_0360376=$231;var $_sroa_0371_0377=$_sroa_0371_0;label=76;break;}
 case 77: 
 var $scevgep407=(($223+($228<<2))|0);
 var $_0360_lcssa=$scevgep407;label=78;break;
 case 78: 
 var $_0360_lcssa;
 HEAP32[(($__me)>>2)]=$_0360_lcssa;
 label=79;break;
 case 79: 
 var $234=$__flags&176;
 if(($234|0)==32){ label=80;break;}else if(($234|0)==16){ label=82;break;}else{label=81;break;}
 case 80: 
 var $236=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$236;
 label=82;break;
 case 81: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=82;break;
 case 82: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $__dp=(sp)+(32);
 var $__ts=(sp)+(40);
 var $__grp=(sp)+(48);
 var $__grp246=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $4=(($__loc)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$__p_i_i_i;
 var $7=HEAP32[((16832)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$6,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=42;break; }
 case 3: 
 var $10=HEAP32[((16836)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($5+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($5+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,11472,(394)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $26=$22;
 var $27=$__digits;
 var $28=HEAP8[($27)];
 var $29=($28&255);
 var $30=$29&1;
 var $31=($30|0)==0;
 if($31){label=9;break;}else{label=8;break;}
 case 8: 
 var $33=(($__digits+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $37=$34;label=10;break;
 case 9: 
 var $36=$29>>>1;
 var $37=$36;label=10;break;
 case 10: 
 var $37;
 var $38=($37|0)==0;
 if($38){var $55=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $40=$28&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=13;break;}else{label=12;break;}
 case 12: 
 var $43=(($__digits+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $47=$44;label=14;break;
 case 13: 
 var $46=(($__digits+4)|0);
 var $47=$46;label=14;break;
 case 14: 
 var $47;
 var $48=HEAP32[(($47)>>2)];
 var $49=$22;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+44)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($26,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=42;break; }
 case 15: 
 var $54=($48|0)==($53|0);
 var $55=$54;label=16;break;
 case 16: 
 var $55;
 HEAP32[(($__grp246)>>2)]=0; HEAP32[((($__grp246)+(4))>>2)]=0; HEAP32[((($__grp246)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$55,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=43;break; }
 case 17: 
 var $57=(($__mbuf)|0);
 var $58=HEAP8[($27)];
 var $59=($58&255);
 var $60=$59&1;
 var $61=($60|0)==0;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $63=(($__digits+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $67=$64;label=20;break;
 case 19: 
 var $66=$59>>>1;
 var $67=$66;label=20;break;
 case 20: 
 var $67;
 var $68=HEAP32[(($__fd)>>2)];
 var $69=($67|0)>($68|0);
 if($69){label=21;break;}else{label=31;break;}
 case 21: 
 if($61){label=23;break;}else{label=22;break;}
 case 22: 
 var $72=(($__digits+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $76=$73;label=24;break;
 case 23: 
 var $75=$59>>>1;
 var $76=$75;label=24;break;
 case 24: 
 var $76;
 var $77=((($76)-($68))|0);
 var $78=$77<<1;
 var $79=HEAP8[($2)];
 var $80=($79&255);
 var $81=$80&1;
 var $82=($81|0)==0;
 if($82){label=26;break;}else{label=25;break;}
 case 25: 
 var $84=(($__sn+4)|0);
 var $85=HEAP32[(($84)>>2)];
 var $88=$85;label=27;break;
 case 26: 
 var $87=$80>>>1;
 var $88=$87;label=27;break;
 case 27: 
 var $88;
 var $89=HEAP8[($1)];
 var $90=($89&255);
 var $91=$90&1;
 var $92=($91|0)==0;
 if($92){label=29;break;}else{label=28;break;}
 case 28: 
 var $94=(($__sym+4)|0);
 var $95=HEAP32[(($94)>>2)];
 var $98=$95;label=30;break;
 case 29: 
 var $97=$90>>>1;
 var $98=$97;label=30;break;
 case 30: 
 var $98;
 var $99=$78|1;
 var $100=((($99)+($88))|0);
 var $101=((($100)+($98))|0);
 var $_pn=$101;label=38;break;
 case 31: 
 var $103=HEAP8[($2)];
 var $104=($103&255);
 var $105=$104&1;
 var $106=($105|0)==0;
 if($106){label=33;break;}else{label=32;break;}
 case 32: 
 var $108=(($__sn+4)|0);
 var $109=HEAP32[(($108)>>2)];
 var $112=$109;label=34;break;
 case 33: 
 var $111=$104>>>1;
 var $112=$111;label=34;break;
 case 34: 
 var $112;
 var $113=HEAP8[($1)];
 var $114=($113&255);
 var $115=$114&1;
 var $116=($115|0)==0;
 if($116){label=36;break;}else{label=35;break;}
 case 35: 
 var $118=(($__sym+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $122=$119;label=37;break;
 case 36: 
 var $121=$114>>>1;
 var $122=$121;label=37;break;
 case 37: 
 var $122;
 var $123=((($112)+(2))|0);
 var $124=((($123)+($122))|0);
 var $_pn=$124;label=38;break;
 case 38: 
 var $_pn;
 var $126=((($_pn)+($68))|0);
 var $127=($126>>>0)>100;
 if($127){label=39;break;}else{var $__mb_0=$57;var $__h_sroa_0_1=0;var $149=$58;label=46;break;}
 case 39: 
 var $128=$126<<2;
 var $129=_malloc($128);
 var $130=$129;
 var $131=($129|0)==0;
 if($131){label=40;break;}else{var $__mb_0=$130;var $__h_sroa_0_1=$130;var $149=$58;label=46;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { var $__h_sroa_0_0=$130;label=44;break; }
 case 41: 
 var $_pre=HEAP8[($27)];
 var $__mb_0=$130;var $__h_sroa_0_1=$130;var $149=$_pre;label=46;break;
 case 42: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=$134$1;
 var $_1=$136;var $_1232=$135;label=58;break;
 case 43: 
 var $138$0 = ___cxa_find_matching_catch(-1, -1); var $138$1 = tempRet0;
 var $139=$138$0;
 var $140=$138$1;
 var $_0=$140;var $_0231=$139;label=57;break;
 case 44: 
 var $__h_sroa_0_0;
 var $142$0 = ___cxa_find_matching_catch(-1, -1); var $142$1 = tempRet0;
 var $143=$142$0;
 var $144=$142$1;
 var $145=($__h_sroa_0_0|0)==0;
 if($145){var $_0=$144;var $_0231=$143;label=57;break;}else{label=45;break;}
 case 45: 
 var $147=$__h_sroa_0_0;
 _free($147);
 var $_0=$144;var $_0231=$143;label=57;break;
 case 46: 
 var $149;
 var $__h_sroa_0_1;
 var $__mb_0;
 var $150=(($__iob+4)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$149&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=48;break;}else{label=47;break;}
 case 47: 
 var $155=(($__digits+8)|0);
 var $156=HEAP32[(($155)>>2)];
 var $161=$156;var $160=$156;label=49;break;
 case 48: 
 var $158=(($__digits+4)|0);
 var $159=(($__digits+4)|0);
 var $161=$159;var $160=$158;label=49;break;
 case 49: 
 var $160;
 var $161;
 var $162=($149&255);
 var $163=$162&1;
 var $164=($163|0)==0;
 if($164){label=51;break;}else{label=50;break;}
 case 50: 
 var $166=(($__digits+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $170=$167;label=52;break;
 case 51: 
 var $169=$162>>>1;
 var $170=$169;label=52;break;
 case 52: 
 var $170;
 var $171=(($161+($170<<2))|0);
 var $172=HEAP32[(($__dp)>>2)];
 var $173=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$151,$160,$171,$26,$55,$__pat,$172,$173,$__grp,$__sym,$__sn,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=44;break; }
 case 53: 
 var $175=(($__s)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(($3)|0);
 HEAP32[(($177)>>2)]=$176;
 var $178=HEAP32[(($__mi)>>2)];
 var $179=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$178,$179,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=44;break; }
 case 54: 
 var $181=($__h_sroa_0_1|0)==0;
 if($181){label=56;break;}else{label=55;break;}
 case 55: 
 var $183=$__h_sroa_0_1;
 _free($183);
 label=56;break;
 case 56: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $184=HEAP32[(($4)>>2)];
 var $185=(($184)|0);
 var $186=__ZNSt3__114__shared_count16__release_sharedEv($185);
 STACKTOP=sp;return;
 case 57: 
 var $_0231;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_1232=$_0231;label=58;break;
 case 58: 
 var $_1232;
 var $_1;
 var $188=HEAP32[(($4)>>2)];
 var $189=(($188)|0);
 var $190=__ZNSt3__114__shared_count16__release_sharedEv($189);
 var $191$0=$_1232;
 var $191$1=0;
 var $192$0=$191$0;
 var $192$1=$_1;
 ___resumeException($192$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18messagesIcED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18messagesIcED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $__cat_0=$14>>>($15>>>0);
 return $__cat_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__ndflt=sp;
 var $0=$__ndflt;
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $agg_result135=$agg_result;
 var $1=$__dflt;
 var $2=$__dflt;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__dflt+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $13=$8;var $12=$8;label=4;break;
 case 3: 
 var $10=(($1+1)|0);
 var $11=(($1+1)|0);
 var $13=$11;var $12=$10;label=4;break;
 case 4: 
 var $12;
 var $13;
 var $14=($3&255);
 var $15=$14&1;
 var $16=($15|0)==0;
 if($16){label=6;break;}else{label=5;break;}
 case 5: 
 var $18=(($__dflt+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $22=$19;label=7;break;
 case 6: 
 var $21=$14>>>1;
 var $22=$21;label=7;break;
 case 7: 
 var $22;
 var $23=(($13+$22)|0);
 var $24=($12>>>0)<($23>>>0);
 if($24){var $_0132=$12;label=9;break;}else{label=8;break;}
 case 8: 
 var $25=($__c|0)==-1;
 var $26=$__c<<1;
 var $27=$26;
 var $28=($25?-1:$27);
 var $43=$28;label=16;break;
 case 9: 
 var $_0132;
 var $29=HEAP8[($_0132)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 var $30=(($_0132+1)|0);
 var $31=($30>>>0)<($23>>>0);
 if($31){var $_0132=$30;label=9;break;}else{label=11;break;}
 case 11: 
 var $_pre=HEAP8[($0)];
 var $phitmp=$_pre&1;
 var $phitmp136=(($phitmp<<24)>>24)==0;
 var $32=($__c|0)==-1;
 var $33=$__c<<1;
 var $34=$33;
 var $35=($32?-1:$34);
 if($phitmp136){var $43=$35;label=16;break;}else{label=15;break;}
 case 12: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=14;break;
 case 14: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $37=$lpad_phi$0;
 var $38=$lpad_phi$1;
 var $_0122=$38;var $_0123=$37;label=23;break;
 case 15: 
 var $40=(($__ndflt+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $47=$41;var $46=$35;label=17;break;
 case 16: 
 var $43;
 var $44=$__ndflt;
 var $45=(($44+1)|0);
 var $47=$45;var $46=$43;label=17;break;
 case 17: 
 var $46;
 var $47;
 var $48=(function() { try { __THREW__ = 0; return _catgets($46,$__set,$__msgid,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 18: 
 HEAP32[(($agg_result135)>>2)]=0; HEAP32[((($agg_result135)+(4))>>2)]=0; HEAP32[((($agg_result135)+(8))>>2)]=0;
 var $50=_strlen($48);
 var $51=(($48+$50)|0);
 var $52=($50|0)>0;
 if($52){var $_0120130=$48;label=19;break;}else{label=22;break;}
 case 19: 
 var $_0120130;
 var $53=HEAP8[($_0120130)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg_result,$53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=21;break; }
 case 20: 
 var $54=(($_0120130+1)|0);
 var $55=($54>>>0)<($51>>>0);
 if($55){var $_0120130=$54;label=19;break;}else{label=22;break;}
 case 21: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=$57$0;
 var $59=$57$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
 var $_0122=$59;var $_0123=$58;label=23;break;
 case 22: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 23: 
 var $_0123;
 var $_0122;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $61$0=$_0123;
 var $61$1=0;
 var $62$0=$61$0;
 var $62$1=$_0122;
 ___resumeException($62$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c){
 var label=0;
 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}
function __ZNSt3__18messagesIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18messagesIwED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $__cat_0=$14>>>($15>>>0);
 return $__cat_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__mb_i10=sp;
 var $__buf_i12=(sp)+(8);
 var $__bn_i13=(sp)+(40);
 var $__wn_i=(sp)+(48);
 var $__mb_i=(sp)+(56);
 var $__buf_i=(sp)+(64);
 var $__bn_i=(sp)+(192);
 var $__nn_i=(sp)+(200);
 var $__ndflt=(sp)+(208);
 var $0=$__ndflt;
 var $1=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $agg_result192=$agg_result;
 var $3=(($1)|0);
 var $4=(($1)|0);
 var $5=(($1+4)|0);
 HEAP32[(($5)>>2)]=0;
 HEAP32[(($4)>>2)]=7072;
 var $6=$__dflt;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__dflt+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $17=$12;var $16=$12;label=4;break;
 case 3: 
 var $14=(($__dflt+4)|0);
 var $15=(($__dflt+4)|0);
 var $17=$15;var $16=$14;label=4;break;
 case 4: 
 var $16;
 var $17;
 var $18=($7&255);
 var $19=$18&1;
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=5;break;}
 case 5: 
 var $22=(($__dflt+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $26=$23;label=7;break;
 case 6: 
 var $25=$18>>>1;
 var $26=$25;label=7;break;
 case 7: 
 var $26;
 var $27=(($17+($26<<2))|0);
 var $28=($16>>>0)<($27>>>0);
 if($28){label=8;break;}else{label=21;break;}
 case 8: 
 var $29=$1;
 var $30=(($__buf_i12)|0);
 var $31=(($__buf_i12+32)|0);
 var $_0189=$16;var $33=7072;label=9;break;
 case 9: 
 var $33;
 var $_0189;
 HEAP32[(($__wn_i)>>2)]=$_0189;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($3,$__mb_i10,$_0189,$27,$__wn_i,$30,$31,$__bn_i13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=24;break; }
 case 10: 
 var $37=($36|0)==2;
 var $38=HEAP32[(($__wn_i)>>2)];
 var $39=($38|0)==($_0189|0);
 var $or_cond163=$37|$39;
 if($or_cond163){label=12;break;}else{label=11;break;}
 case 11: 
 var $40=HEAP32[(($__bn_i13)>>2)];
 var $41=($30>>>0)<($40>>>0);
 if($41){var $__p_i14_0184=$30;label=16;break;}else{var $53=$38;label=19;break;}
 case 12: 
 var $43=___cxa_allocate_exception(8);
 var $44=$43;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($44,1752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=15;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($43,11488,(44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=25;break; }
 case 14: 
 throw "Reached an unreachable!";
 case 15: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1); var $47$1 = tempRet0;
 ___cxa_free_exception($43);
 var $eh_lpad_body$1=$47$1;var $eh_lpad_body$0=$47$0;label=26;break;
 case 16: 
 var $__p_i14_0184;
 var $48=HEAP8[($__p_i14_0184)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=23;break; }
 case 17: 
 var $49=(($__p_i14_0184+1)|0);
 var $50=HEAP32[(($__bn_i13)>>2)];
 var $51=($49>>>0)<($50>>>0);
 if($51){var $__p_i14_0184=$49;label=16;break;}else{label=18;break;}
 case 18: 
 var $_pre193=HEAP32[(($__wn_i)>>2)];
 var $53=$_pre193;label=19;break;
 case 19: 
 var $53;
 var $54=($53>>>0)<($27>>>0);
 if($54){label=20;break;}else{label=21;break;}
 case 20: 
 var $_pre196=HEAP32[(($29)>>2)];
 var $_0189=$53;var $33=$_pre196;label=9;break;
 case 21: 
 var $55=(($1)|0);
 __ZNSt3__114__shared_countD2Ev($55);
 var $56=($__c|0)==-1;
 var $57=$__c<<1;
 var $58=$57;
 var $59=($56?-1:$58);
 var $60=HEAP8[($0)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=28;break;}else{label=27;break;}
 case 22: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $65=$64$0;
 var $66=$64$1;
 var $_0153=$66;var $_0154=$65;label=49;break;
 case 23: 
 var $lpad_loopexit182$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit182$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit182$1;var $eh_lpad_body$0=$lpad_loopexit182$0;label=26;break;
 case 24: 
 var $lpad_loopexit186$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit186$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit186$1;var $eh_lpad_body$0=$lpad_loopexit186$0;label=26;break;
 case 25: 
 var $lpad_nonloopexit187$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit187$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit187$1;var $eh_lpad_body$0=$lpad_nonloopexit187$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $67=$eh_lpad_body$0;
 var $68=$eh_lpad_body$1;
 var $69=(($1)|0);
 __ZNSt3__114__shared_countD2Ev($69);
 var $_0153=$68;var $_0154=$67;label=49;break;
 case 27: 
 var $71=(($__ndflt+8)|0);
 var $72=HEAP32[(($71)>>2)];
 var $76=$72;label=29;break;
 case 28: 
 var $74=$__ndflt;
 var $75=(($74+1)|0);
 var $76=$75;label=29;break;
 case 29: 
 var $76;
 var $77=(function() { try { __THREW__ = 0; return _catgets($59,$__set,$__msgid,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=22;break; }
 case 30: 
 HEAP32[(($agg_result192)>>2)]=0; HEAP32[((($agg_result192)+(4))>>2)]=0; HEAP32[((($agg_result192)+(8))>>2)]=0;
 var $79=(($2)|0);
 var $80=(($2)|0);
 var $81=(($2+4)|0);
 HEAP32[(($81)>>2)]=0;
 HEAP32[(($80)>>2)]=7016;
 var $82=_strlen($77);
 var $83=(($77+$82)|0);
 var $84=($82|0)<1;
 if($84){label=44;break;}else{label=31;break;}
 case 31: 
 var $85=$2;
 var $86=$83;
 var $87=(($__buf_i)|0);
 var $88=(($__buf_i+128)|0);
 var $_0152177=$77;var $90=7016;label=32;break;
 case 32: 
 var $90;
 var $_0152177;
 HEAP32[(($__nn_i)>>2)]=$_0152177;
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$_0152177;
 var $94=((($86)-($93))|0);
 var $95=($94|0)>32;
 var $96=(($_0152177+32)|0);
 var $97=($95?$96:$83);
 var $98=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($79,$__mb_i,$_0152177,$97,$__nn_i,$87,$88,$__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=46;break; }
 case 33: 
 var $99=($98|0)==2;
 var $100=HEAP32[(($__nn_i)>>2)];
 var $101=($100|0)==($_0152177|0);
 var $or_cond166=$99|$101;
 if($or_cond166){label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[(($__bn_i)>>2)];
 var $103=($87>>>0)<($102>>>0);
 if($103){var $__p_i_0173=$87;label=39;break;}else{var $115=$100;label=42;break;}
 case 35: 
 var $105=___cxa_allocate_exception(8);
 var $106=$105;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($106,1752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=38;break; }
 case 36: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($105,11488,(44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=47;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1); var $109$1 = tempRet0;
 ___cxa_free_exception($105);
 var $eh_lpad_body170$1=$109$1;var $eh_lpad_body170$0=$109$0;label=48;break;
 case 39: 
 var $__p_i_0173;
 var $110=HEAP32[(($__p_i_0173)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg_result,$110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=45;break; }
 case 40: 
 var $111=(($__p_i_0173+4)|0);
 var $112=HEAP32[(($__bn_i)>>2)];
 var $113=($111>>>0)<($112>>>0);
 if($113){var $__p_i_0173=$111;label=39;break;}else{label=41;break;}
 case 41: 
 var $_pre=HEAP32[(($__nn_i)>>2)];
 var $115=$_pre;label=42;break;
 case 42: 
 var $115;
 var $116=($115>>>0)<($83>>>0);
 if($116){label=43;break;}else{label=44;break;}
 case 43: 
 var $_pre195=HEAP32[(($85)>>2)];
 var $_0152177=$115;var $90=$_pre195;label=32;break;
 case 44: 
 var $117=(($2)|0);
 __ZNSt3__114__shared_countD2Ev($117);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 45: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body170$1=$lpad_loopexit$1;var $eh_lpad_body170$0=$lpad_loopexit$0;label=48;break;
 case 46: 
 var $lpad_loopexit174$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit174$1 = tempRet0;
 var $eh_lpad_body170$1=$lpad_loopexit174$1;var $eh_lpad_body170$0=$lpad_loopexit174$0;label=48;break;
 case 47: 
 var $lpad_nonloopexit175$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit175$1 = tempRet0;
 var $eh_lpad_body170$1=$lpad_nonloopexit175$1;var $eh_lpad_body170$0=$lpad_nonloopexit175$0;label=48;break;
 case 48: 
 var $eh_lpad_body170$0;
 var $eh_lpad_body170$1;
 var $118=$eh_lpad_body170$0;
 var $119=$eh_lpad_body170$1;
 var $120=(($2)|0);
 __ZNSt3__114__shared_countD2Ev($120);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg_result);
 var $_0153=$119;var $_0154=$118;label=49;break;
 case 49: 
 var $_0154;
 var $_0153;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $122$0=$_0154;
 var $122$1=0;
 var $123$0=$122$0;
 var $123$1=$_0153;
 ___resumeException($123$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c){
 var label=0;
 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6536;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(17544)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(17544);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15408)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 label=9;break;
 case 6: 
 var $15=HEAP32[((15408)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $23=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($23);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2,3664) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=$1;
 HEAP32[(($3)>>2)]=5448;
 ___cxa_throw($1,11504,(78));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i223=sp;
 var $__p_i_i_i216=(sp)+(16);
 var $__p_i_i_i209=(sp)+(32);
 var $__p_i_i_i199=(sp)+(48);
 var $__p_i_i_i190=(sp)+(64);
 var $__p_i_i_i183=(sp)+(80);
 var $__p_i_i_i176=(sp)+(96);
 var $__p_i_i_i169=(sp)+(112);
 var $__p_i_i_i162=(sp)+(128);
 var $__p_i_i_i155=(sp)+(144);
 var $__p_i_i_i148=(sp)+(160);
 var $__p_i_i_i141=(sp)+(176);
 var $__p_i_i_i134=(sp)+(192);
 var $__p_i_i_i127=(sp)+(208);
 var $__p_i_i_i120=(sp)+(224);
 var $__p_i_i_i113=(sp)+(240);
 var $__p_i_i_i106=(sp)+(256);
 var $__p_i_i_i99=(sp)+(272);
 var $__p_i_i_i92=(sp)+(288);
 var $__p_i_i_i85=(sp)+(304);
 var $__p_i_i_i78=(sp)+(320);
 var $__p_i_i_i71=(sp)+(336);
 var $__p_i_i_i64=(sp)+(352);
 var $__p_i_i_i57=(sp)+(368);
 var $__p_i_i_i50=(sp)+(384);
 var $__p_i_i_i43=(sp)+(400);
 var $__p_i_i_i36=(sp)+(416);
 var $__p_i_i_i=(sp)+(432);
 var $1=((($refs)-(1))|0);
 var $2=(($this)|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$1;
 HEAP32[(($2)>>2)]=6792;
 var $4=(($this+8)|0);
 var $5=(($this+12)|0);
 var $6=(($this+16)|0);
 var $7=(($this+136)|0);
 HEAP8[($7)]=1;
 var $8=(($this+24)|0);
 var $9=$8;
 HEAP32[(($5)>>2)]=$9;
 HEAP32[(($4)>>2)]=$9;
 var $10=(($8+112)|0);
 var $11=$10;
 HEAP32[(($6)>>2)]=$11;
 var $_0_i18_i=28;var $13=$9;label=2;break;
 case 2: 
 var $13;
 var $_0_i18_i;
 var $14=($13|0)==0;
 if($14){var $16=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($13)>>2)]=0;
 var $_pre11_i_i=HEAP32[(($5)>>2)];
 var $16=$_pre11_i_i;label=4;break;
 case 4: 
 var $16;
 var $17=(($16+4)|0);
 HEAP32[(($5)>>2)]=$17;
 var $18=((($_0_i18_i)-(1))|0);
 var $19=($18|0)==0;
 if($19){label=5;break;}else{var $_0_i18_i=$18;var $13=$17;label=2;break;}
 case 5: 
 var $20=(($this+144)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($20,3616,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=110;break; }
 case 6: 
 var $21=HEAP32[(($4)>>2)];
 var $22=HEAP32[(($5)>>2)];
 var $23=($21|0)==($22|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $24=$21;
 var $scevgep=((($22)-(4))|0);
 var $scevgep230=$scevgep;
 var $25=(((-$24))|0);
 var $uglygep=(($scevgep230+$25)|0);
 var $uglygep231=$uglygep;
 var $26=$uglygep231>>>2;
 var $27=$26^-1;
 var $scevgep232=(($22+($27<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep232;
 label=8;break;
 case 8: 
 HEAP32[((15540)>>2)]=0;
 HEAP32[((15536)>>2)]=6496;
 var $29=$__p_i_i_i;
 var $30=HEAP32[((16520)>>2)];
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=16520;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16520,$29,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=111;break; }
 case 10: 
 var $33=HEAP32[((16524)>>2)];
 var $34=((($33)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15536,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=111;break; }
 case 11: 
 HEAP32[((15532)>>2)]=0;
 HEAP32[((15528)>>2)]=6456;
 var $36=$__p_i_i_i36;
 var $37=HEAP32[((16512)>>2)];
 var $38=($37|0)==-1;
 if($38){label=13;break;}else{label=12;break;}
 case 12: 
 var $_sroa_016_0__idx_i_i37=(($__p_i_i_i36)|0);
 HEAP32[(($_sroa_016_0__idx_i_i37)>>2)]=16512;
 var $_sroa_117_4__idx18_i_i38=(($__p_i_i_i36+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i38)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i39=(($__p_i_i_i36+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16512,$36,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=111;break; }
 case 13: 
 var $40=HEAP32[((16516)>>2)];
 var $41=((($40)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15528,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=111;break; }
 case 14: 
 HEAP32[((15740)>>2)]=0;
 HEAP32[((15736)>>2)]=6904;
 HEAP32[((15744)>>2)]=0;
 HEAP8[(15748)]=0;
 var $42=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=15;break; }
 case 15: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1,0); var $44$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 16: 
 var $46=HEAP32[(($42)>>2)];
 HEAP32[((15744)>>2)]=$46;
 var $47=$__p_i_i_i43;
 var $48=HEAP32[((16840)>>2)];
 var $49=($48|0)==-1;
 if($49){label=18;break;}else{label=17;break;}
 case 17: 
 var $_sroa_016_0__idx_i_i44=(($__p_i_i_i43)|0);
 HEAP32[(($_sroa_016_0__idx_i_i44)>>2)]=16840;
 var $_sroa_117_4__idx18_i_i45=(($__p_i_i_i43+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i45)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i46=(($__p_i_i_i43+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i46)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16840,$47,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=111;break; }
 case 18: 
 var $51=HEAP32[((16844)>>2)];
 var $52=((($51)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15736,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=111;break; }
 case 19: 
 HEAP32[((15732)>>2)]=0;
 HEAP32[((15728)>>2)]=6824;
 var $54=$__p_i_i_i50;
 var $55=HEAP32[((16832)>>2)];
 var $56=($55|0)==-1;
 if($56){label=21;break;}else{label=20;break;}
 case 20: 
 var $_sroa_016_0__idx_i_i51=(($__p_i_i_i50)|0);
 HEAP32[(($_sroa_016_0__idx_i_i51)>>2)]=16832;
 var $_sroa_117_4__idx18_i_i52=(($__p_i_i_i50+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i52)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i53=(($__p_i_i_i50+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i53)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16832,$54,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=111;break; }
 case 21: 
 var $58=HEAP32[((16836)>>2)];
 var $59=((($58)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15728,$59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=111;break; }
 case 22: 
 HEAP32[((15548)>>2)]=0;
 HEAP32[((15544)>>2)]=6592;
 var $61=$__p_i_i_i57;
 var $62=HEAP32[((16536)>>2)];
 var $63=($62|0)==-1;
 if($63){label=24;break;}else{label=23;break;}
 case 23: 
 var $_sroa_016_0__idx_i_i58=(($__p_i_i_i57)|0);
 HEAP32[(($_sroa_016_0__idx_i_i58)>>2)]=16536;
 var $_sroa_117_4__idx18_i_i59=(($__p_i_i_i57+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i59)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i60=(($__p_i_i_i57+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i60)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16536,$61,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=111;break; }
 case 24: 
 var $65=HEAP32[((16540)>>2)];
 var $66=((($65)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15544,$66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=111;break; }
 case 25: 
 HEAP32[((4980)>>2)]=0;
 HEAP32[((4976)>>2)]=6536;
 var $67=HEAP8[(17544)];
 var $68=(($67<<24)>>24)==0;
 if($68){label=26;break;}else{label=30;break;}
 case 26: 
 var $70=___cxa_guard_acquire(17544);
 var $71=($70|0)==0;
 if($71){label=30;break;}else{label=27;break;}
 case 27: 
 var $73=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 HEAP32[((15408)>>2)]=$73;
 label=30;break;
 case 29: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 __ZNSt3__114__shared_countD2Ev(4976);
 var $eh_lpad_body$1=$75$1;var $eh_lpad_body$0=$75$0;label=112;break;
 case 30: 
 var $77=HEAP32[((15408)>>2)];
 HEAP32[((4984)>>2)]=$77;
 var $78=$__p_i_i_i64;
 var $79=HEAP32[((16528)>>2)];
 var $80=($79|0)==-1;
 if($80){label=32;break;}else{label=31;break;}
 case 31: 
 var $_sroa_016_0__idx_i_i65=(($__p_i_i_i64)|0);
 HEAP32[(($_sroa_016_0__idx_i_i65)>>2)]=16528;
 var $_sroa_117_4__idx18_i_i66=(($__p_i_i_i64+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i66)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i67=(($__p_i_i_i64+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i67)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16528,$78,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=111;break; }
 case 32: 
 var $82=HEAP32[((16532)>>2)];
 var $83=((($82)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,4976,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=111;break; }
 case 33: 
 HEAP32[((15556)>>2)]=0;
 HEAP32[((15552)>>2)]=6648;
 var $85=$__p_i_i_i71;
 var $86=HEAP32[((16544)>>2)];
 var $87=($86|0)==-1;
 if($87){label=35;break;}else{label=34;break;}
 case 34: 
 var $_sroa_016_0__idx_i_i72=(($__p_i_i_i71)|0);
 HEAP32[(($_sroa_016_0__idx_i_i72)>>2)]=16544;
 var $_sroa_117_4__idx18_i_i73=(($__p_i_i_i71+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i73)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i74=(($__p_i_i_i71+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i74)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16544,$85,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=111;break; }
 case 35: 
 var $89=HEAP32[((16548)>>2)];
 var $90=((($89)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15552,$90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=111;break; }
 case 36: 
 HEAP32[((15564)>>2)]=0;
 HEAP32[((15560)>>2)]=6704;
 var $92=$__p_i_i_i78;
 var $93=HEAP32[((16552)>>2)];
 var $94=($93|0)==-1;
 if($94){label=38;break;}else{label=37;break;}
 case 37: 
 var $_sroa_016_0__idx_i_i79=(($__p_i_i_i78)|0);
 HEAP32[(($_sroa_016_0__idx_i_i79)>>2)]=16552;
 var $_sroa_117_4__idx18_i_i80=(($__p_i_i_i78+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i80)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i81=(($__p_i_i_i78+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i81)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16552,$92,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=111;break; }
 case 38: 
 var $96=HEAP32[((16556)>>2)];
 var $97=((($96)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15560,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=111;break; }
 case 39: 
 HEAP32[((15460)>>2)]=0;
 HEAP32[((15456)>>2)]=6000;
 HEAP8[(15464)]=46;
 HEAP8[(15465)]=44;
 HEAP32[((15468)>>2)]=0; HEAP32[((15472)>>2)]=0; HEAP32[((15476)>>2)]=0;
 var $99=$__p_i_i_i85;
 var $100=HEAP32[((16456)>>2)];
 var $101=($100|0)==-1;
 if($101){label=41;break;}else{label=40;break;}
 case 40: 
 var $_sroa_016_0__idx_i_i86=(($__p_i_i_i85)|0);
 HEAP32[(($_sroa_016_0__idx_i_i86)>>2)]=16456;
 var $_sroa_117_4__idx18_i_i87=(($__p_i_i_i85+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i87)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i88=(($__p_i_i_i85+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i88)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16456,$99,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=111;break; }
 case 41: 
 var $103=HEAP32[((16460)>>2)];
 var $104=((($103)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15456,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=111;break; }
 case 42: 
 HEAP32[((4948)>>2)]=0;
 HEAP32[((4944)>>2)]=5952;
 HEAP32[((4952)>>2)]=46;
 HEAP32[((4956)>>2)]=44;
 HEAP32[((4960)>>2)]=0; HEAP32[((4964)>>2)]=0; HEAP32[((4968)>>2)]=0;
 var $106=$__p_i_i_i92;
 var $107=HEAP32[((16448)>>2)];
 var $108=($107|0)==-1;
 if($108){label=44;break;}else{label=43;break;}
 case 43: 
 var $_sroa_016_0__idx_i_i93=(($__p_i_i_i92)|0);
 HEAP32[(($_sroa_016_0__idx_i_i93)>>2)]=16448;
 var $_sroa_117_4__idx18_i_i94=(($__p_i_i_i92+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i94)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i95=(($__p_i_i_i92+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i95)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16448,$106,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=111;break; }
 case 44: 
 var $110=HEAP32[((16452)>>2)];
 var $111=((($110)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,4944,$111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=111;break; }
 case 45: 
 HEAP32[((15524)>>2)]=0;
 HEAP32[((15520)>>2)]=6384;
 var $113=$__p_i_i_i99;
 var $114=HEAP32[((16504)>>2)];
 var $115=($114|0)==-1;
 if($115){label=47;break;}else{label=46;break;}
 case 46: 
 var $_sroa_016_0__idx_i_i100=(($__p_i_i_i99)|0);
 HEAP32[(($_sroa_016_0__idx_i_i100)>>2)]=16504;
 var $_sroa_117_4__idx18_i_i101=(($__p_i_i_i99+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i101)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i102=(($__p_i_i_i99+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i102)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16504,$113,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=111;break; }
 case 47: 
 var $117=HEAP32[((16508)>>2)];
 var $118=((($117)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15520,$118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=111;break; }
 case 48: 
 HEAP32[((15516)>>2)]=0;
 HEAP32[((15512)>>2)]=6312;
 var $120=$__p_i_i_i106;
 var $121=HEAP32[((16496)>>2)];
 var $122=($121|0)==-1;
 if($122){label=50;break;}else{label=49;break;}
 case 49: 
 var $_sroa_016_0__idx_i_i107=(($__p_i_i_i106)|0);
 HEAP32[(($_sroa_016_0__idx_i_i107)>>2)]=16496;
 var $_sroa_117_4__idx18_i_i108=(($__p_i_i_i106+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i108)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i109=(($__p_i_i_i106+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i109)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16496,$120,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=111;break; }
 case 50: 
 var $124=HEAP32[((16500)>>2)];
 var $125=((($124)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15512,$125) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=111;break; }
 case 51: 
 HEAP32[((15508)>>2)]=0;
 HEAP32[((15504)>>2)]=6248;
 var $127=$__p_i_i_i113;
 var $128=HEAP32[((16488)>>2)];
 var $129=($128|0)==-1;
 if($129){label=53;break;}else{label=52;break;}
 case 52: 
 var $_sroa_016_0__idx_i_i114=(($__p_i_i_i113)|0);
 HEAP32[(($_sroa_016_0__idx_i_i114)>>2)]=16488;
 var $_sroa_117_4__idx18_i_i115=(($__p_i_i_i113+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i115)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i116=(($__p_i_i_i113+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i116)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16488,$127,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=111;break; }
 case 53: 
 var $131=HEAP32[((16492)>>2)];
 var $132=((($131)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15504,$132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=111;break; }
 case 54: 
 HEAP32[((15500)>>2)]=0;
 HEAP32[((15496)>>2)]=6184;
 var $134=$__p_i_i_i120;
 var $135=HEAP32[((16480)>>2)];
 var $136=($135|0)==-1;
 if($136){label=56;break;}else{label=55;break;}
 case 55: 
 var $_sroa_016_0__idx_i_i121=(($__p_i_i_i120)|0);
 HEAP32[(($_sroa_016_0__idx_i_i121)>>2)]=16480;
 var $_sroa_117_4__idx18_i_i122=(($__p_i_i_i120+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i122)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i123=(($__p_i_i_i120+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i123)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16480,$134,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=111;break; }
 case 56: 
 var $138=HEAP32[((16484)>>2)];
 var $139=((($138)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15496,$139) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=111;break; }
 case 57: 
 HEAP32[((15780)>>2)]=0;
 HEAP32[((15776)>>2)]=7976;
 var $141=$__p_i_i_i127;
 var $142=HEAP32[((17320)>>2)];
 var $143=($142|0)==-1;
 if($143){label=59;break;}else{label=58;break;}
 case 58: 
 var $_sroa_016_0__idx_i_i128=(($__p_i_i_i127)|0);
 HEAP32[(($_sroa_016_0__idx_i_i128)>>2)]=17320;
 var $_sroa_117_4__idx18_i_i129=(($__p_i_i_i127+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i129)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i130=(($__p_i_i_i127+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i130)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17320,$141,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=111;break; }
 case 59: 
 var $145=HEAP32[((17324)>>2)];
 var $146=((($145)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15776,$146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=111;break; }
 case 60: 
 HEAP32[((15772)>>2)]=0;
 HEAP32[((15768)>>2)]=7912;
 var $148=$__p_i_i_i134;
 var $149=HEAP32[((17312)>>2)];
 var $150=($149|0)==-1;
 if($150){label=62;break;}else{label=61;break;}
 case 61: 
 var $_sroa_016_0__idx_i_i135=(($__p_i_i_i134)|0);
 HEAP32[(($_sroa_016_0__idx_i_i135)>>2)]=17312;
 var $_sroa_117_4__idx18_i_i136=(($__p_i_i_i134+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i136)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i137=(($__p_i_i_i134+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i137)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17312,$148,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=111;break; }
 case 62: 
 var $152=HEAP32[((17316)>>2)];
 var $153=((($152)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15768,$153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=111;break; }
 case 63: 
 HEAP32[((15764)>>2)]=0;
 HEAP32[((15760)>>2)]=7848;
 var $155=$__p_i_i_i141;
 var $156=HEAP32[((17304)>>2)];
 var $157=($156|0)==-1;
 if($157){label=65;break;}else{label=64;break;}
 case 64: 
 var $_sroa_016_0__idx_i_i142=(($__p_i_i_i141)|0);
 HEAP32[(($_sroa_016_0__idx_i_i142)>>2)]=17304;
 var $_sroa_117_4__idx18_i_i143=(($__p_i_i_i141+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i143)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i144=(($__p_i_i_i141+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i144)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17304,$155,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=111;break; }
 case 65: 
 var $159=HEAP32[((17308)>>2)];
 var $160=((($159)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15760,$160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=111;break; }
 case 66: 
 HEAP32[((15756)>>2)]=0;
 HEAP32[((15752)>>2)]=7784;
 var $162=$__p_i_i_i148;
 var $163=HEAP32[((17296)>>2)];
 var $164=($163|0)==-1;
 if($164){label=68;break;}else{label=67;break;}
 case 67: 
 var $_sroa_016_0__idx_i_i149=(($__p_i_i_i148)|0);
 HEAP32[(($_sroa_016_0__idx_i_i149)>>2)]=17296;
 var $_sroa_117_4__idx18_i_i150=(($__p_i_i_i148+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i150)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i151=(($__p_i_i_i148+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i151)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17296,$162,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=111;break; }
 case 68: 
 var $166=HEAP32[((17300)>>2)];
 var $167=((($166)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15752,$167) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=111;break; }
 case 69: 
 HEAP32[((15452)>>2)]=0;
 HEAP32[((15448)>>2)]=5632;
 var $169=$__p_i_i_i155;
 var $170=HEAP32[((16408)>>2)];
 var $171=($170|0)==-1;
 if($171){label=71;break;}else{label=70;break;}
 case 70: 
 var $_sroa_016_0__idx_i_i156=(($__p_i_i_i155)|0);
 HEAP32[(($_sroa_016_0__idx_i_i156)>>2)]=16408;
 var $_sroa_117_4__idx18_i_i157=(($__p_i_i_i155+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i157)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i158=(($__p_i_i_i155+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i158)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16408,$169,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=111;break; }
 case 71: 
 var $173=HEAP32[((16412)>>2)];
 var $174=((($173)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15448,$174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=111;break; }
 case 72: 
 HEAP32[((15444)>>2)]=0;
 HEAP32[((15440)>>2)]=5592;
 var $176=$__p_i_i_i162;
 var $177=HEAP32[((16400)>>2)];
 var $178=($177|0)==-1;
 if($178){label=74;break;}else{label=73;break;}
 case 73: 
 var $_sroa_016_0__idx_i_i163=(($__p_i_i_i162)|0);
 HEAP32[(($_sroa_016_0__idx_i_i163)>>2)]=16400;
 var $_sroa_117_4__idx18_i_i164=(($__p_i_i_i162+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i164)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i165=(($__p_i_i_i162+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i165)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16400,$176,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=111;break; }
 case 74: 
 var $180=HEAP32[((16404)>>2)];
 var $181=((($180)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15440,$181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=111;break; }
 case 75: 
 HEAP32[((15436)>>2)]=0;
 HEAP32[((15432)>>2)]=5552;
 var $183=$__p_i_i_i169;
 var $184=HEAP32[((16392)>>2)];
 var $185=($184|0)==-1;
 if($185){label=77;break;}else{label=76;break;}
 case 76: 
 var $_sroa_016_0__idx_i_i170=(($__p_i_i_i169)|0);
 HEAP32[(($_sroa_016_0__idx_i_i170)>>2)]=16392;
 var $_sroa_117_4__idx18_i_i171=(($__p_i_i_i169+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i171)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i172=(($__p_i_i_i169+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i172)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16392,$183,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=111;break; }
 case 77: 
 var $187=HEAP32[((16396)>>2)];
 var $188=((($187)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15432,$188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=111;break; }
 case 78: 
 HEAP32[((15428)>>2)]=0;
 HEAP32[((15424)>>2)]=5512;
 var $190=$__p_i_i_i176;
 var $191=HEAP32[((16384)>>2)];
 var $192=($191|0)==-1;
 if($192){label=80;break;}else{label=79;break;}
 case 79: 
 var $_sroa_016_0__idx_i_i177=(($__p_i_i_i176)|0);
 HEAP32[(($_sroa_016_0__idx_i_i177)>>2)]=16384;
 var $_sroa_117_4__idx18_i_i178=(($__p_i_i_i176+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i178)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i179=(($__p_i_i_i176+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i179)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16384,$190,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=111;break; }
 case 80: 
 var $194=HEAP32[((16388)>>2)];
 var $195=((($194)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15424,$195) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=111;break; }
 case 81: 
 HEAP32[((4932)>>2)]=0;
 HEAP32[((4928)>>2)]=5856;
 HEAP32[((4936)>>2)]=5904;
 var $197=$__p_i_i_i183;
 var $198=HEAP32[((16440)>>2)];
 var $199=($198|0)==-1;
 if($199){label=83;break;}else{label=82;break;}
 case 82: 
 var $_sroa_016_0__idx_i_i184=(($__p_i_i_i183)|0);
 HEAP32[(($_sroa_016_0__idx_i_i184)>>2)]=16440;
 var $_sroa_117_4__idx18_i_i185=(($__p_i_i_i183+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i185)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i186=(($__p_i_i_i183+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i186)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16440,$197,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=111;break; }
 case 83: 
 var $201=HEAP32[((16444)>>2)];
 var $202=((($201)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,4928,$202) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=111;break; }
 case 84: 
 HEAP32[((4916)>>2)]=0;
 HEAP32[((4912)>>2)]=5760;
 HEAP32[((4920)>>2)]=5808;
 var $204=$__p_i_i_i190;
 var $205=HEAP32[((16432)>>2)];
 var $206=($205|0)==-1;
 if($206){label=86;break;}else{label=85;break;}
 case 85: 
 var $_sroa_016_0__idx_i_i191=(($__p_i_i_i190)|0);
 HEAP32[(($_sroa_016_0__idx_i_i191)>>2)]=16432;
 var $_sroa_117_4__idx18_i_i192=(($__p_i_i_i190+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i192)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i193=(($__p_i_i_i190+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i193)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16432,$204,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=111;break; }
 case 86: 
 var $208=HEAP32[((16436)>>2)];
 var $209=((($208)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,4912,$209) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=111;break; }
 case 87: 
 HEAP32[((4900)>>2)]=0;
 HEAP32[((4896)>>2)]=6760;
 var $210=HEAP8[(17544)];
 var $211=(($210<<24)>>24)==0;
 if($211){label=88;break;}else{label=92;break;}
 case 88: 
 var $213=___cxa_guard_acquire(17544);
 var $214=($213|0)==0;
 if($214){label=92;break;}else{label=89;break;}
 case 89: 
 var $216=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=91;break; }
 case 90: 
 HEAP32[((15408)>>2)]=$216;
 label=92;break;
 case 91: 
 var $218$0 = ___cxa_find_matching_catch(-1, -1); var $218$1 = tempRet0;
 __ZNSt3__114__shared_countD2Ev(4896);
 var $eh_lpad_body$1=$218$1;var $eh_lpad_body$0=$218$0;label=112;break;
 case 92: 
 var $220=HEAP32[((15408)>>2)];
 HEAP32[((4904)>>2)]=$220;
 HEAP32[((4896)>>2)]=5728;
 var $221=$__p_i_i_i199;
 var $222=HEAP32[((16424)>>2)];
 var $223=($222|0)==-1;
 if($223){label=94;break;}else{label=93;break;}
 case 93: 
 var $_sroa_016_0__idx_i_i200=(($__p_i_i_i199)|0);
 HEAP32[(($_sroa_016_0__idx_i_i200)>>2)]=16424;
 var $_sroa_117_4__idx18_i_i201=(($__p_i_i_i199+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i201)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i202=(($__p_i_i_i199+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i202)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16424,$221,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=111;break; }
 case 94: 
 var $225=HEAP32[((16428)>>2)];
 var $226=((($225)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,4896,$226) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=111;break; }
 case 95: 
 HEAP32[((4884)>>2)]=0;
 HEAP32[((4880)>>2)]=6760;
 var $227=HEAP8[(17544)];
 var $228=(($227<<24)>>24)==0;
 if($228){label=96;break;}else{label=100;break;}
 case 96: 
 var $230=___cxa_guard_acquire(17544);
 var $231=($230|0)==0;
 if($231){label=100;break;}else{label=97;break;}
 case 97: 
 var $233=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=99;break; }
 case 98: 
 HEAP32[((15408)>>2)]=$233;
 label=100;break;
 case 99: 
 var $235$0 = ___cxa_find_matching_catch(-1, -1); var $235$1 = tempRet0;
 __ZNSt3__114__shared_countD2Ev(4880);
 var $eh_lpad_body$1=$235$1;var $eh_lpad_body$0=$235$0;label=112;break;
 case 100: 
 var $237=HEAP32[((15408)>>2)];
 HEAP32[((4888)>>2)]=$237;
 HEAP32[((4880)>>2)]=5696;
 var $238=$__p_i_i_i209;
 var $239=HEAP32[((16416)>>2)];
 var $240=($239|0)==-1;
 if($240){label=102;break;}else{label=101;break;}
 case 101: 
 var $_sroa_016_0__idx_i_i210=(($__p_i_i_i209)|0);
 HEAP32[(($_sroa_016_0__idx_i_i210)>>2)]=16416;
 var $_sroa_117_4__idx18_i_i211=(($__p_i_i_i209+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i211)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i212=(($__p_i_i_i209+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i212)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16416,$238,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=111;break; }
 case 102: 
 var $242=HEAP32[((16420)>>2)];
 var $243=((($242)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,4880,$243) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=111;break; }
 case 103: 
 HEAP32[((15492)>>2)]=0;
 HEAP32[((15488)>>2)]=6088;
 var $245=$__p_i_i_i216;
 var $246=HEAP32[((16472)>>2)];
 var $247=($246|0)==-1;
 if($247){label=105;break;}else{label=104;break;}
 case 104: 
 var $_sroa_016_0__idx_i_i217=(($__p_i_i_i216)|0);
 HEAP32[(($_sroa_016_0__idx_i_i217)>>2)]=16472;
 var $_sroa_117_4__idx18_i_i218=(($__p_i_i_i216+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i218)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i219=(($__p_i_i_i216+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i219)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16472,$245,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=111;break; }
 case 105: 
 var $249=HEAP32[((16476)>>2)];
 var $250=((($249)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15488,$250) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=111;break; }
 case 106: 
 HEAP32[((15484)>>2)]=0;
 HEAP32[((15480)>>2)]=6048;
 var $252=$__p_i_i_i223;
 var $253=HEAP32[((16464)>>2)];
 var $254=($253|0)==-1;
 if($254){label=108;break;}else{label=107;break;}
 case 107: 
 var $_sroa_016_0__idx_i_i224=(($__p_i_i_i223)|0);
 HEAP32[(($_sroa_016_0__idx_i_i224)>>2)]=16464;
 var $_sroa_117_4__idx18_i_i225=(($__p_i_i_i223+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i225)>>2)]=(26);
 var $_sroa_219_8__idx20_i_i226=(($__p_i_i_i223+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i226)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16464,$252,274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=111;break; }
 case 108: 
 var $256=HEAP32[((16468)>>2)];
 var $257=((($256)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15480,$257) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=111;break; }
 case 109: 
 STACKTOP=sp;return;
 case 110: 
 var $259$0 = ___cxa_find_matching_catch(-1, -1); var $259$1 = tempRet0;
 var $260=$259$0;
 var $261=$259$1;
 var $_0=$261;var $_031=$260;label=113;break;
 case 111: 
 var $263$0 = ___cxa_find_matching_catch(-1, -1); var $263$1 = tempRet0;
 var $eh_lpad_body$1=$263$1;var $eh_lpad_body$0=$263$0;label=112;break;
 case 112: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $264=$eh_lpad_body$0;
 var $265=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($20);
 var $_0=$265;var $_031=$264;label=113;break;
 case 113: 
 var $_031;
 var $_0;
 var $267=HEAP32[(($4)>>2)];
 var $268=$267;
 var $269=($267|0)==0;
 if($269){label=119;break;}else{label=114;break;}
 case 114: 
 var $270=HEAP32[(($5)>>2)];
 var $271=($267|0)==($270|0);
 if($271){label=116;break;}else{label=115;break;}
 case 115: 
 var $scevgep_i_i_i=((($270)-(4))|0);
 var $scevgep25_i_i_i=$scevgep_i_i_i;
 var $272=(((-$268))|0);
 var $uglygep_i_i_i=(($scevgep25_i_i_i+$272)|0);
 var $uglygep26_i_i_i=$uglygep_i_i_i;
 var $273=$uglygep26_i_i_i>>>2;
 var $274=$273^-1;
 var $scevgep27_i_i_i=(($270+($274<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep27_i_i_i;
 label=116;break;
 case 116: 
 var $275=(($this+24)|0);
 var $276=$275;
 var $277=($267|0)==($276|0);
 if($277){label=117;break;}else{label=118;break;}
 case 117: 
 HEAP8[($7)]=0;
 label=119;break;
 case 118: 
 var $280=$267;
 __ZdlPv($280);
 label=119;break;
 case 119: 
 var $281=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($281);
 var $282$0=$_031;
 var $282$1=0;
 var $283$0=$282$0;
 var $283$1=$_0;
 ___resumeException($283$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 var $2=(($this+8)|0);
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=($10>>>0)>($id>>>0);
 if($11){var $30=$6;label=11;break;}else{label=2;break;}
 case 2: 
 var $13=((($id)+(1))|0);
 var $14=($10>>>0)<($13>>>0);
 if($14){label=3;break;}else{label=5;break;}
 case 3: 
 var $16=((($13)-($10))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($2,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=8;break; }
 case 4: 
 var $_pre25=HEAP32[(($5)>>2)];
 var $30=$_pre25;label=11;break;
 case 5: 
 var $18=($10>>>0)>($13>>>0);
 if($18){label=6;break;}else{var $30=$6;label=11;break;}
 case 6: 
 var $20=(($6+($13<<2))|0);
 var $21=($20|0)==($4|0);
 if($21){var $30=$6;label=11;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i=((($4)-(4))|0);
 var $scevgep20_i=$scevgep_i;
 var $scevgep2122_i=$20;
 var $22=(((-$scevgep2122_i))|0);
 var $uglygep_i=(($scevgep20_i+$22)|0);
 var $uglygep23_i=$uglygep_i;
 var $23=$uglygep23_i>>>2;
 var $24=$23^-1;
 var $scevgep24_i=(($4+($24<<2))|0);
 HEAP32[(($3)>>2)]=$scevgep24_i;
 var $30=$6;label=11;break;
 case 8: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=($f|0)==0;
 if($27){label=10;break;}else{label=9;break;}
 case 9: 
 var $29=__ZNSt3__114__shared_count16__release_sharedEv($1);
 label=10;break;
 case 10: 
 ___resumeException($26$0)
 case 11: 
 var $30;
 var $31=(($30+($id<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 if($33){var $37=$30;label=13;break;}else{label=12;break;}
 case 12: 
 var $35=(($32)|0);
 var $36=__ZNSt3__114__shared_count16__release_sharedEv($35);
 var $_pre=HEAP32[(($5)>>2)];
 var $37=$_pre;label=13;break;
 case 13: 
 var $37;
 var $38=(($37+($id<<2))|0);
 HEAP32[(($38)>>2)]=$f;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impD0Ev($this){
 var label=0;
 __ZNSt3__16locale5__impD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__16locale5__impD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6792;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($3|0)==($5|0);
 if($6){label=5;break;}else{var $i_09=0;var $8=$5;var $7=$3;label=2;break;}
 case 2: 
 var $7;
 var $8;
 var $i_09;
 var $9=(($8+($i_09<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $17=$7;var $16=$8;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($10)|0);
 var $14=__ZNSt3__114__shared_count16__release_sharedEv($13);
 var $_pre=HEAP32[(($2)>>2)];
 var $_pre10=HEAP32[(($4)>>2)];
 var $17=$_pre;var $16=$_pre10;label=4;break;
 case 4: 
 var $16;
 var $17;
 var $18=((($i_09)+(1))|0);
 var $19=$17;
 var $20=$16;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($18>>>0)<($22>>>0);
 if($23){var $i_09=$18;var $8=$16;var $7=$17;label=2;break;}else{label=5;break;}
 case 5: 
 var $24=(($this+144)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($24);
 var $25=HEAP32[(($4)>>2)];
 var $26=$25;
 var $27=($25|0)==0;
 if($27){label=11;break;}else{label=6;break;}
 case 6: 
 var $28=HEAP32[(($2)>>2)];
 var $29=($25|0)==($28|0);
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i_i_i=((($28)-(4))|0);
 var $scevgep25_i_i_i=$scevgep_i_i_i;
 var $30=(((-$26))|0);
 var $uglygep_i_i_i=(($scevgep25_i_i_i+$30)|0);
 var $uglygep26_i_i_i=$uglygep_i_i_i;
 var $31=$uglygep26_i_i_i>>>2;
 var $32=$31^-1;
 var $scevgep27_i_i_i=(($28+($32<<2))|0);
 HEAP32[(($2)>>2)]=$scevgep27_i_i_i;
 label=8;break;
 case 8: 
 var $33=(($this+24)|0);
 var $34=$33;
 var $35=($25|0)==($34|0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=(($this+136)|0);
 HEAP8[($37)]=0;
 label=11;break;
 case 10: 
 var $39=$25;
 __ZdlPv($39);
 label=11;break;
 case 11: 
 var $40=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($40);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale8__globalEv(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17528)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=8;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17528);
 var $5=($4|0)==0;
 if($5){label=8;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(17536)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=7;break;}
 case 4: 
 var $10=___cxa_guard_acquire(17536);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__impC2Ej(15568,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 HEAP32[((15392)>>2)]=15568;
 HEAP32[((15384)>>2)]=15392;
 label=7;break;
 case 7: 
 var $15=HEAP32[((15384)>>2)];
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 HEAP32[((15400)>>2)]=$17;
 var $18=(($17)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($18);
 HEAP32[((15376)>>2)]=15400;
 label=8;break;
 case 8: 
 var $20=HEAP32[((15376)>>2)];
 return $20;
 case 9: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;
 ___resumeException($21$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __ZNSt3__16locale8__globalEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=(($this)|0);
 var $4=(($1)|0);
 var $5=HEAP32[(($4)>>2)];
 HEAP32[(($3)>>2)]=$5;
 var $6=(($5)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($6);
 return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l){
 var label=0;
 var $1=(($this)|0);
 var $2=(($l)|0);
 var $3=HEAP32[(($2)>>2)];
 HEAP32[(($1)>>2)]=$3;
 var $4=(($3)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($4);
 return;
}
function __ZNSt3__16localeD2Ev($this){
 var label=0;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=__ZNSt3__114__shared_count16__release_sharedEv($3);
 return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i;
 var $4=(($x)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i=(($__p_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i)>>2)]=$x;
 var $_sroa_117_4__idx18_i=(($__p_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i=(($__p_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,274);
 label=3;break;
 case 3: 
 var $8=(($x+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($2+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($2+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{var $24=0;label=5;break;}
 case 4: 
 var $21=(($14+($10<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)!=0;
 var $24=$23;label=5;break;
 case 5: 
 var $24;
 STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i;
 var $4=(($x)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i=(($__p_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i)>>2)]=$x;
 var $_sroa_117_4__idx18_i=(($__p_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i)>>2)]=(26);
 var $_sroa_219_8__idx20_i=(($__p_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,274);
 label=3;break;
 case 3: 
 var $8=(($x+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($2+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($2+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 ___cxa_throw($23,11472,(394));
 throw "Reached an unreachable!";
 case 6: 
 STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5facetD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 FUNCTION_TABLE[$6]($this);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale2id6__initEv($this){
 var label=0;
 var $1=(tempValue=HEAP32[((16560)>>2)],HEAP32[((16560)>>2)]=tempValue+1,tempValue);
 var $2=((($1)+(1))|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $11=0;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $5=HEAP32[(($2)>>2)];
 var $6=(($5+($c<<1))|0);
 var $7=HEAP16[(($6)>>1)];
 var $8=$7&$m;
 var $9=(($8<<16)>>16)!=0;
 var $11=$9;label=5;break;
 case 5: 
 var $11;
 return $11;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_08_lcssa=$low;label=7;break;}else{var $_0810=$low;var $_011=$vec;label=2;break;}
 case 2: 
 var $_011;
 var $_0810;
 var $2=HEAP32[(($_0810)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $_off0=0;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<1))|0);
 var $9=HEAP16[(($8)>>1)];
 var $_off0=$9;label=6;break;
 case 6: 
 var $_off0;
 HEAP16[(($_011)>>1)]=$_off0;
 var $11=(($_0810+4)|0);
 var $12=(($_011+2)|0);
 var $13=($11|0)==($high|0);
 if($13){var $_08_lcssa=$high;label=7;break;}else{var $_0810=$11;var $_011=$12;label=2;break;}
 case 7: 
 var $_08_lcssa;
 return $_08_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_09=$low;label=2;break;}
 case 2: 
 var $_09;
 var $2=HEAP32[(($_09)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<1))|0);
 var $9=HEAP16[(($8)>>1)];
 var $10=$9&$m;
 var $11=(($10<<16)>>16)==0;
 if($11){label=6;break;}else{var $_0_lcssa=$_09;label=7;break;}
 case 6: 
 var $13=(($_09+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_09=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$low;label=2;break;
 case 2: 
 var $_0;
 var $2=($_0|0)==($high|0);
 if($2){var $_0_lcssa=$high;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_0)>>2)];
 var $isascii=($4>>>0)<128;
 if($isascii){label=4;break;}else{var $_0_lcssa=$_0;label=7;break;}
 case 4: 
 var $6=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $9=HEAP32[(($6)>>2)];
 var $10=(($9+($4<<1))|0);
 var $11=HEAP16[(($10)>>1)];
 var $12=$11&$m;
 var $13=(($12<<16)>>16)==0;
 var $14=(($_0+4)|0);
 if($13){var $_0_lcssa=$_0;label=7;break;}else{var $_0=$14;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $9=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $5=HEAP32[(($2)>>2)];
 var $6=(($5+($c<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 var $9=$7;label=5;break;
 case 5: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_08=$low;label=2;break;}
 case 2: 
 var $_08;
 var $2=HEAP32[(($_08)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $11=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $11=$9;label=6;break;
 case 6: 
 var $11;
 HEAP32[(($_08)>>2)]=$11;
 var $12=(($_08+4)|0);
 var $13=($12|0)==($high|0);
 if($13){var $_0_lcssa=$high;label=7;break;}else{var $_08=$12;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $9=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $5=HEAP32[(($2)>>2)];
 var $6=(($5+($c<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 var $9=$7;label=5;break;
 case 5: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_08=$low;label=2;break;}
 case 2: 
 var $_08;
 var $2=HEAP32[(($_08)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $11=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $11=$9;label=6;break;
 case 6: 
 var $11;
 HEAP32[(($_08)>>2)]=$11;
 var $12=(($_08+4)|0);
 var $13=($12|0)==($high|0);
 if($13){var $_0_lcssa=$high;label=7;break;}else{var $_08=$12;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c){
 var label=0;
 var $1=(($c<<24)>>24);
 return $1;
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_07_lcssa=$low;label=3;break;}else{var $_078=$low;var $_09=$dest;label=2;break;}
 case 2: 
 var $_09;
 var $_078;
 var $2=HEAP8[($_078)];
 var $3=(($2<<24)>>24);
 HEAP32[(($_09)>>2)]=$3;
 var $4=(($_078+1)|0);
 var $5=(($_09+4)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_07_lcssa=$high;label=3;break;}else{var $_078=$4;var $_09=$5;label=2;break;}
 case 3: 
 var $_07_lcssa;
 return $_07_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault){
 var label=0;
 var $isascii=($c>>>0)<128;
 var $1=(($c)&255);
 var $_0=($isascii?$1:$dfault);
 return $_0;
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_010_lcssa=$low;label=5;break;}else{label=2;break;}
 case 2: 
 var $low14=$low;
 var $scevgep=((($high)-(4))|0);
 var $scevgep13=$scevgep;
 var $2=(((-$low14))|0);
 var $uglygep=(($scevgep13+$2)|0);
 var $uglygep15=$uglygep;
 var $3=$uglygep15>>>2;
 var $4=((($3)+(1))|0);
 var $_01011=$low;var $_012=$dest;label=3;break;
 case 3: 
 var $_012;
 var $_01011;
 var $6=HEAP32[(($_01011)>>2)];
 var $isascii=($6>>>0)<128;
 var $7=(($6)&255);
 var $_dfault=($isascii?$7:$dfault);
 HEAP8[($_012)]=$_dfault;
 var $8=(($_01011+4)|0);
 var $9=(($_012+1)|0);
 var $10=($8|0)==($high|0);
 if($10){label=4;break;}else{var $_01011=$8;var $_012=$9;label=3;break;}
 case 4: 
 var $scevgep16=(($low+($4<<2))|0);
 var $_010_lcssa=$scevgep16;label=5;break;
 case 5: 
 var $_010_lcssa;
 return $_010_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6904;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=$3;
 __ZdaPv($11);
 label=4;break;
 case 4: 
 var $12=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($12);
 var $13=$this;
 __ZdlPv($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6904;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=$3;
 __ZdaPv($11);
 label=4;break;
 case 4: 
 var $13=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($c<<24)>>24)<0;
 if($1){var $12=$c;label=5;break;}else{label=2;break;}
 case 2: 
 var $3=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1,0); var $5$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $6=($c&255);
 var $7=HEAP32[(($3)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_09=$low;label=2;break;}
 case 2: 
 var $_09;
 var $2=HEAP8[($_09)];
 var $3=(($2<<24)>>24)<0;
 if($3){var $14=$2;label=6;break;}else{label=3;break;}
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($5)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_09)]=$14;
 var $15=(($_09+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_09=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($c<<24)>>24);
 var $2=(($c<<24)>>24)<0;
 if($2){var $12=$c;label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($1<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_09=$low;label=2;break;}
 case 2: 
 var $_09;
 var $2=HEAP8[($_09)];
 var $3=(($2<<24)>>24)<0;
 if($3){var $14=$2;label=6;break;}else{label=3;break;}
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($5)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_09)]=$14;
 var $15=(($_09+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_09=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c){
 var label=0;
 return $c;
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_07_lcssa=$low;label=3;break;}else{var $_078=$low;var $_09=$dest;label=2;break;}
 case 2: 
 var $_09;
 var $_078;
 var $2=HEAP8[($_078)];
 HEAP8[($_09)]=$2;
 var $3=(($_078+1)|0);
 var $4=(($_09+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_07_lcssa=$high;label=3;break;}else{var $_078=$3;var $_09=$4;label=2;break;}
 case 3: 
 var $_07_lcssa;
 return $_07_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault){
 var label=0;
 var $1=(($c<<24)>>24)<0;
 var $dfault_c=($1?$dfault:$c);
 return $dfault_c;
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_010_lcssa=$low;label=3;break;}else{var $_01012=$low;var $_013=$dest;label=2;break;}
 case 2: 
 var $_013;
 var $_01012;
 var $2=HEAP8[($_01012)];
 var $3=(($2<<24)>>24)<0;
 var $dfault_=($3?$dfault:$2);
 HEAP8[($_013)]=$dfault_;
 var $4=(($_01012+1)|0);
 var $5=(($_013+1)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_010_lcssa=$high;label=3;break;}else{var $_01012=$4;var $_013=$5;label=2;break;}
 case 3: 
 var $_010_lcssa;
 return $_010_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx){
 var label=0;
 var $1=$end;
 var $2=$frm;
 var $3=((($1)-($2))|0);
 var $4=($3>>>0)<($mx>>>0);
 var $_sroa_speculated=($4?$3:$mx);
 return $_sroa_speculated;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this){
 var label=0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $fend_0=$frm;label=2;break;
 case 2: 
 var $fend_0;
 var $2=($fend_0|0)==($frm_end|0);
 if($2){var $fend_0_lcssa=$frm_end;label=4;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($fend_0)>>2)];
 var $5=($4|0)==0;
 var $6=(($fend_0+4)|0);
 if($5){var $fend_0_lcssa=$fend_0;label=4;break;}else{var $fend_0=$6;label=2;break;}
 case 4: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $8=($frm|0)==($frm_end|0);
 var $9=($to|0)==($to_end|0);
 var $or_cond251=$8|$9;
 if($or_cond251){var $115=$frm;label=49;break;}else{label=5;break;}
 case 5: 
 var $10=$st;
 var $11=$to_end;
 var $12=(($this+8)|0);
 var $13=(($tmp)|0);
 var $_0194252=$to;var $_0193253=$frm;var $fend_1254=$fend_0_lcssa;label=6;break;
 case 6: 
 var $fend_1254;
 var $_0193253;
 var $_0194252;
 var $ld$0$0=(($10)|0);
 var $15$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($10+4)|0);
 var $15$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$15$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$15$1;
 var $16=$fend_1254;
 var $17=$_0193253;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=$_0194252;
 var $21=((($11)-($20))|0);
 var $22=HEAP32[(($12)>>2)];
 var $23=_uselocale($22);
 var $24=(function() { try { __THREW__ = 0; return _wcsnrtombs($_0194252,$frm_nxt,$19,$21,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $26=($23|0)==0;
 if($26){label=14;break;}else{label=8;break;}
 case 8: 
 var $28=(function() { try { __THREW__ = 0; return _uselocale($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=9;break; }
 case 9: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1); var $32$1 = tempRet0;
 var $33=($23|0)==0;
 if($33){label=13;break;}else{label=11;break;}
 case 11: 
 var $35=(function() { try { __THREW__ = 0; return _uselocale($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $37$0 = ___cxa_find_matching_catch(-1, -1,0); var $37$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 ___resumeException($32$0)
 case 14: 
 if(($24|0)==-1){ label=15;break;}else if(($24|0)==0){ var $_0=1;label=50;break;}else{label=27;break;}
 case 15: 
 HEAP32[(($to_nxt)>>2)]=$_0194252;
 var $39=HEAP32[(($frm_nxt)>>2)];
 var $40=($_0193253|0)==($39|0);
 if($40){var $_1_lcssa=$_0193253;label=26;break;}else{var $_1218=$_0193253;var $41=$_0194252;label=16;break;}
 case 16: 
 var $41;
 var $_1218;
 var $42=HEAP32[(($_1218)>>2)];
 var $43=HEAP32[(($12)>>2)];
 var $44=_uselocale($43);
 var $45=(function() { try { __THREW__ = 0; return _wcrtomb($41,$42,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $47=($44|0)==0;
 if($47){label=24;break;}else{label=18;break;}
 case 18: 
 var $49=(function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=19;break; }
 case 19: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $54=($44|0)==0;
 if($54){label=23;break;}else{label=21;break;}
 case 21: 
 var $56=(function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $58$0 = ___cxa_find_matching_catch(-1, -1,0); var $58$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 23: 
 ___resumeException($53$0)
 case 24: 
 var $59=($45|0)==-1;
 if($59){var $_1_lcssa=$_1218;label=26;break;}else{label=25;break;}
 case 25: 
 var $61=HEAP32[(($to_nxt)>>2)];
 var $62=(($61+$45)|0);
 HEAP32[(($to_nxt)>>2)]=$62;
 var $63=(($_1218+4)|0);
 var $64=HEAP32[(($frm_nxt)>>2)];
 var $65=($63|0)==($64|0);
 if($65){var $_1_lcssa=$63;label=26;break;}else{var $_1218=$63;var $41=$62;label=16;break;}
 case 26: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $_0=2;label=50;break;
 case 27: 
 var $67=HEAP32[(($to_nxt)>>2)];
 var $68=(($67+$24)|0);
 HEAP32[(($to_nxt)>>2)]=$68;
 var $69=($68|0)==($to_end|0);
 if($69){label=48;break;}else{label=28;break;}
 case 28: 
 var $71=($fend_1254|0)==($frm_end|0);
 if($71){label=29;break;}else{label=30;break;}
 case 29: 
 var $_pre291=HEAP32[(($frm_nxt)>>2)];
 var $fend_3=$frm_end;var $112=$68;var $111=$_pre291;label=47;break;
 case 30: 
 var $73=HEAP32[(($12)>>2)];
 var $74=_uselocale($73);
 var $75=(function() { try { __THREW__ = 0; return _wcrtomb($13,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $77=($74|0)==0;
 if($77){label=38;break;}else{label=32;break;}
 case 32: 
 var $79=(function() { try { __THREW__ = 0; return _uselocale($74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 33: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1,0); var $81$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 34: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1); var $83$1 = tempRet0;
 var $84=($74|0)==0;
 if($84){label=37;break;}else{label=35;break;}
 case 35: 
 var $86=(function() { try { __THREW__ = 0; return _uselocale($74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=36;break; }
 case 36: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1,0); var $88$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 37: 
 ___resumeException($83$0)
 case 38: 
 var $89=($75|0)==-1;
 if($89){var $_0=2;label=50;break;}else{label=39;break;}
 case 39: 
 var $91=HEAP32[(($to_nxt)>>2)];
 var $92=$91;
 var $93=((($11)-($92))|0);
 var $94=($75>>>0)>($93>>>0);
 if($94){var $_0=1;label=50;break;}else{label=40;break;}
 case 40: 
 var $95=($75|0)==0;
 if($95){label=43;break;}else{var $n_0220=$75;var $p_0221=$13;var $96=$91;label=41;break;}
 case 41: 
 var $96;
 var $p_0221;
 var $n_0220;
 var $97=HEAP8[($p_0221)];
 var $98=(($96+1)|0);
 HEAP32[(($to_nxt)>>2)]=$98;
 HEAP8[($96)]=$97;
 var $99=((($n_0220)-(1))|0);
 var $100=($99|0)==0;
 if($100){label=43;break;}else{label=42;break;}
 case 42: 
 var $101=(($p_0221+1)|0);
 var $_pre292=HEAP32[(($to_nxt)>>2)];
 var $n_0220=$99;var $p_0221=$101;var $96=$_pre292;label=41;break;
 case 43: 
 var $102=HEAP32[(($frm_nxt)>>2)];
 var $103=(($102+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$103;
 var $fend_2=$103;label=44;break;
 case 44: 
 var $fend_2;
 var $105=($fend_2|0)==($frm_end|0);
 if($105){var $fend_2_lcssa=$frm_end;label=46;break;}else{label=45;break;}
 case 45: 
 var $107=HEAP32[(($fend_2)>>2)];
 var $108=($107|0)==0;
 var $109=(($fend_2+4)|0);
 if($108){var $fend_2_lcssa=$fend_2;label=46;break;}else{var $fend_2=$109;label=44;break;}
 case 46: 
 var $fend_2_lcssa;
 var $_pre288=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $112=$_pre288;var $111=$103;label=47;break;
 case 47: 
 var $111;
 var $112;
 var $fend_3;
 var $113=($111|0)==($frm_end|0);
 var $114=($112|0)==($to_end|0);
 var $or_cond=$113|$114;
 if($or_cond){var $115=$111;label=49;break;}else{var $_0194252=$112;var $_0193253=$111;var $fend_1254=$fend_3;label=6;break;}
 case 48: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $115=$_pre;label=49;break;
 case 49: 
 var $115;
 var $not_=($115|0)!=($frm_end|0);
 var $116=($not_&1);
 var $_0=$116;label=50;break;
 case 50: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $fend_0=$frm;label=2;break;
 case 2: 
 var $fend_0;
 var $2=($fend_0|0)==($frm_end|0);
 if($2){var $fend_0_lcssa=$frm_end;label=4;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[($fend_0)];
 var $5=(($4<<24)>>24)==0;
 var $6=(($fend_0+1)|0);
 if($5){var $fend_0_lcssa=$fend_0;label=4;break;}else{var $fend_0=$6;label=2;break;}
 case 4: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $8=($frm|0)==($frm_end|0);
 var $9=($to|0)==($to_end|0);
 var $or_cond266=$8|$9;
 if($or_cond266){var $108=$frm;label=48;break;}else{label=5;break;}
 case 5: 
 var $10=$st;
 var $11=$to_end;
 var $12=(($this+8)|0);
 var $_0202267=$to;var $_0201268=$frm;var $fend_1269=$fend_0_lcssa;label=6;break;
 case 6: 
 var $fend_1269;
 var $_0201268;
 var $_0202267;
 var $ld$0$0=(($10)|0);
 var $14$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($10+4)|0);
 var $14$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$14$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$14$1;
 var $15=$fend_1269;
 var $16=$_0201268;
 var $17=((($15)-($16))|0);
 var $18=$_0202267;
 var $19=((($11)-($18))|0);
 var $20=$19>>2;
 var $21=HEAP32[(($12)>>2)];
 var $22=_uselocale($21);
 var $23=(function() { try { __THREW__ = 0; return _mbsnrtowcs($_0202267,$frm_nxt,$17,$20,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $25=($22|0)==0;
 if($25){label=14;break;}else{label=8;break;}
 case 8: 
 var $27=(function() { try { __THREW__ = 0; return _uselocale($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=9;break; }
 case 9: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1,0); var $29$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=($22|0)==0;
 if($32){label=13;break;}else{label=11;break;}
 case 11: 
 var $34=(function() { try { __THREW__ = 0; return _uselocale($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 ___resumeException($31$0)
 case 14: 
 if(($23|0)==-1){ label=15;break;}else if(($23|0)==0){ var $_0=2;label=49;break;}else{label=31;break;}
 case 15: 
 HEAP32[(($to_nxt)>>2)]=$_0202267;
 var $37=HEAP32[(($frm_nxt)>>2)];
 var $38=($_0201268|0)==($37|0);
 if($38){var $_1_lcssa=$_0201268;label=30;break;}else{var $storemerge231=$_0202267;var $_1232=$_0201268;label=16;break;}
 case 16: 
 var $_1232;
 var $storemerge231;
 var $39=$_1232;
 var $40=((($15)-($39))|0);
 var $41=HEAP32[(($12)>>2)];
 var $42=_uselocale($41);
 var $43=(function() { try { __THREW__ = 0; return _mbrtowc($storemerge231,$_1232,$40,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $45=($42|0)==0;
 if($45){label=24;break;}else{label=18;break;}
 case 18: 
 var $47=(function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=19;break; }
 case 19: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1,0); var $49$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=($42|0)==0;
 if($52){label=23;break;}else{label=21;break;}
 case 21: 
 var $54=(function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1,0); var $56$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 23: 
 ___resumeException($51$0)
 case 24: 
 if(($43|0)==0){ label=25;break;}else if(($43|0)==-1){ label=26;break;}else if(($43|0)==-2){ label=27;break;}else{label=28;break;}
 case 25: 
 var $58=(($_1232+1)|0);
 var $_2=$58;label=29;break;
 case 26: 
 HEAP32[(($frm_nxt)>>2)]=$_1232;
 var $_0=2;label=49;break;
 case 27: 
 HEAP32[(($frm_nxt)>>2)]=$_1232;
 var $_0=1;label=49;break;
 case 28: 
 var $62=(($_1232+$43)|0);
 var $_2=$62;label=29;break;
 case 29: 
 var $_2;
 var $64=HEAP32[(($to_nxt)>>2)];
 var $65=(($64+4)|0);
 HEAP32[(($to_nxt)>>2)]=$65;
 var $66=HEAP32[(($frm_nxt)>>2)];
 var $67=($_2|0)==($66|0);
 if($67){var $_1_lcssa=$_2;label=30;break;}else{var $storemerge231=$65;var $_1232=$_2;label=16;break;}
 case 30: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $not_223=($_1_lcssa|0)!=($frm_end|0);
 var $68=($not_223&1);
 var $_0=$68;label=49;break;
 case 31: 
 var $70=HEAP32[(($to_nxt)>>2)];
 var $71=(($70+($23<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$71;
 var $72=($71|0)==($to_end|0);
 if($72){label=47;break;}else{label=32;break;}
 case 32: 
 var $74=($fend_1269|0)==($frm_end|0);
 var $_pre314=HEAP32[(($frm_nxt)>>2)];
 if($74){var $fend_3=$frm_end;var $105=$71;var $104=$_pre314;label=46;break;}else{label=33;break;}
 case 33: 
 var $76=HEAP32[(($12)>>2)];
 var $77=_uselocale($76);
 var $78=(function() { try { __THREW__ = 0; return _mbrtowc($71,$_pre314,1,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $80=($77|0)==0;
 if($80){label=41;break;}else{label=35;break;}
 case 35: 
 var $82=(function() { try { __THREW__ = 0; return _uselocale($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=36;break; }
 case 36: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1,0); var $84$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 37: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1); var $86$1 = tempRet0;
 var $87=($77|0)==0;
 if($87){label=40;break;}else{label=38;break;}
 case 38: 
 var $89=(function() { try { __THREW__ = 0; return _uselocale($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=39;break; }
 case 39: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1,0); var $91$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 40: 
 ___resumeException($86$0)
 case 41: 
 var $92=($78|0)==0;
 if($92){label=42;break;}else{var $_0=2;label=49;break;}
 case 42: 
 var $94=HEAP32[(($to_nxt)>>2)];
 var $95=(($94+4)|0);
 HEAP32[(($to_nxt)>>2)]=$95;
 var $96=HEAP32[(($frm_nxt)>>2)];
 var $97=(($96+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$97;
 var $fend_2=$97;label=43;break;
 case 43: 
 var $fend_2;
 var $99=($fend_2|0)==($frm_end|0);
 if($99){var $fend_2_lcssa=$frm_end;label=45;break;}else{label=44;break;}
 case 44: 
 var $101=HEAP8[($fend_2)];
 var $102=(($101<<24)>>24)==0;
 var $103=(($fend_2+1)|0);
 if($102){var $fend_2_lcssa=$fend_2;label=45;break;}else{var $fend_2=$103;label=43;break;}
 case 45: 
 var $fend_2_lcssa;
 var $_pre312=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $105=$_pre312;var $104=$97;label=46;break;
 case 46: 
 var $104;
 var $105;
 var $fend_3;
 var $106=($104|0)==($frm_end|0);
 var $107=($105|0)==($to_end|0);
 var $or_cond=$106|$107;
 if($or_cond){var $108=$104;label=48;break;}else{var $_0202267=$105;var $_0201268=$104;var $fend_1269=$fend_3;label=6;break;}
 case 47: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $108=$_pre;label=48;break;
 case 48: 
 var $108;
 var $not_=($108|0)!=($frm_end|0);
 var $109=($not_&1);
 var $_0=$109;label=49;break;
 case 49: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp=sp;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=(($tmp)|0);
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=_uselocale($3);
 var $5=(function() { try { __THREW__ = 0; return _wcrtomb($1,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $7=($4|0)==0;
 if($7){label=9;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $14=($4|0)==0;
 if($14){label=8;break;}else{label=6;break;}
 case 6: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=7;break; }
 case 7: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 8: 
 ___resumeException($13$0)
 case 9: 
 if(($5|0)==-1|($5|0)==0){ var $_0=2;label=14;break;}else{label=10;break;}
 case 10: 
 var $20=((($5)-(1))|0);
 var $21=HEAP32[(($to_nxt)>>2)];
 var $22=$to_end;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=($20>>>0)>($24>>>0);
 if($25){var $_0=1;label=14;break;}else{label=11;break;}
 case 11: 
 var $26=($20|0)==0;
 if($26){var $_0=0;label=14;break;}else{var $n_064=$20;var $p_065=$1;var $27=$21;label=12;break;}
 case 12: 
 var $27;
 var $p_065;
 var $n_064;
 var $28=HEAP8[($p_065)];
 var $29=(($27+1)|0);
 HEAP32[(($to_nxt)>>2)]=$29;
 HEAP8[($27)]=$28;
 var $30=((($n_064)-(1))|0);
 var $31=($30|0)==0;
 if($31){var $_0=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $32=(($p_065+1)|0);
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $n_064=$30;var $p_065=$32;var $27=$_pre;label=12;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $4=(function() { try { __THREW__ = 0; return _mbtowc(0,0,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $6=($3|0)==0;
 if($6){label=9;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;
 var $13=($3|0)==0;
 if($13){label=17;break;}else{label=7;break;}
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=8;break; }
 case 8: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,0); var $17$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 var $18=($4|0)==0;
 if($18){label=10;break;}else{var $_0=-1;label=15;break;}
 case 10: 
 var $20=HEAP32[(($1)>>2)];
 var $21=($20|0)==0;
 if($21){var $_0=1;label=15;break;}else{label=11;break;}
 case 11: 
 var $23=(function() { try { __THREW__ = 0; return _uselocale($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 var $24=($23|0)==0;
 if($24){var $_0=0;label=15;break;}else{label=13;break;}
 case 13: 
 var $26=(function() { try { __THREW__ = 0; return _uselocale($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=0;label=15;break; } else { label=14;break; }
 case 14: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1,0); var $28$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 15: 
 var $_0;
 return $_0;
 case 16: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 label=17;break;
 case 17: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mx|0)==0;
 var $2=($frm|0)==($frm_end|0);
 var $or_cond71=$1|$2;
 if($or_cond71){var $nbytes_0_lcssa=0;label=15;break;}else{label=2;break;}
 case 2: 
 var $3=$frm_end;
 var $4=(($this+8)|0);
 var $_06172=$frm;var $nbytes_073=0;var $nwchar_t_074=0;label=3;break;
 case 3: 
 var $nwchar_t_074;
 var $nbytes_073;
 var $_06172;
 var $6=$_06172;
 var $7=((($3)-($6))|0);
 var $8=HEAP32[(($4)>>2)];
 var $9=_uselocale($8);
 var $10=(function() { try { __THREW__ = 0; return _mbrlen($_06172,$7,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $12=($9|0)==0;
 if($12){label=11;break;}else{label=5;break;}
 case 5: 
 var $14=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1,0); var $16$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 7: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $19=($9|0)==0;
 if($19){label=10;break;}else{label=8;break;}
 case 8: 
 var $21=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $23$0 = ___cxa_find_matching_catch(-1, -1,0); var $23$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($18$0)
 case 11: 
 if(($10|0)==0){ label=12;break;}else if(($10|0)==-1|($10|0)==-2){ var $nbytes_0_lcssa=$nbytes_073;label=15;break;}else{label=13;break;}
 case 12: 
 var $25=(($_06172+1)|0);
 var $_pn=1;var $_1=$25;label=14;break;
 case 13: 
 var $27=(($_06172+$10)|0);
 var $_pn=$10;var $_1=$27;label=14;break;
 case 14: 
 var $_1;
 var $_pn;
 var $nbytes_1=((($_pn)+($nbytes_073))|0);
 var $29=((($nwchar_t_074)+(1))|0);
 var $30=($29>>>0)>=($mx>>>0);
 var $31=($_1|0)==($frm_end|0);
 var $or_cond=$30|$31;
 if($or_cond){var $nbytes_0_lcssa=$nbytes_1;label=15;break;}else{var $_06172=$_1;var $nbytes_073=$nbytes_1;var $nwchar_t_074=$29;label=3;break;}
 case 15: 
 var $nbytes_0_lcssa;
 return $nbytes_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $11=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $6=($5|0)==0;
 if($6){var $11=4;label=6;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $11=4;label=6;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $11;
 return $11;
 case 7: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6>>1;
 var $8=(($frm+($7<<1))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&2;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=$to_end;
 var $5=$to;
 var $6=((($4)-($5))|0);
 var $7=($6|0)<3;
 if($7){var $_0=1;label=26;break;}else{label=3;break;}
 case 3: 
 var $9=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$9;
 HEAP8[($to)]=-17;
 var $10=HEAP32[(($to_nxt)>>2)];
 var $11=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$11;
 HEAP8[($10)]=-69;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $13=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 HEAP8[($12)]=-65;
 label=4;break;
 case 4: 
 var $14=$frm_end;
 var $15=HEAP32[(($frm_nxt)>>2)];
 var $16=($15>>>0)<($frm_end>>>0);
 if($16){label=5;break;}else{var $_0=0;label=26;break;}
 case 5: 
 var $17=$to_end;
 var $19=$15;label=6;break;
 case 6: 
 var $19;
 var $20=HEAP16[(($19)>>1)];
 var $21=($20&65535);
 var $22=($21>>>0)>($Maxcode>>>0);
 if($22){var $_0=2;label=26;break;}else{label=7;break;}
 case 7: 
 var $24=($20&65535)<128;
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=HEAP32[(($to_nxt)>>2)];
 var $27=$26;
 var $28=((($17)-($27))|0);
 var $29=($28|0)<1;
 if($29){var $_0=1;label=26;break;}else{label=9;break;}
 case 9: 
 var $31=(($20)&255);
 var $32=(($26+1)|0);
 HEAP32[(($to_nxt)>>2)]=$32;
 HEAP8[($26)]=$31;
 label=25;break;
 case 10: 
 var $34=($20&65535)<2048;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=HEAP32[(($to_nxt)>>2)];
 var $37=$36;
 var $38=((($17)-($37))|0);
 var $39=($38|0)<2;
 if($39){var $_0=1;label=26;break;}else{label=12;break;}
 case 12: 
 var $41=$21>>>6;
 var $42=$41|192;
 var $43=(($42)&255);
 var $44=(($36+1)|0);
 HEAP32[(($to_nxt)>>2)]=$44;
 HEAP8[($36)]=$43;
 var $45=$21&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=HEAP32[(($to_nxt)>>2)];
 var $49=(($48+1)|0);
 HEAP32[(($to_nxt)>>2)]=$49;
 HEAP8[($48)]=$47;
 label=25;break;
 case 13: 
 var $51=($20&65535)<55296;
 if($51){label=14;break;}else{label=16;break;}
 case 14: 
 var $53=HEAP32[(($to_nxt)>>2)];
 var $54=$53;
 var $55=((($17)-($54))|0);
 var $56=($55|0)<3;
 if($56){var $_0=1;label=26;break;}else{label=15;break;}
 case 15: 
 var $58=$21>>>12;
 var $59=$58|224;
 var $60=(($59)&255);
 var $61=(($53+1)|0);
 HEAP32[(($to_nxt)>>2)]=$61;
 HEAP8[($53)]=$60;
 var $62=$21>>>6;
 var $63=$62&63;
 var $64=$63|128;
 var $65=(($64)&255);
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $68=$21&63;
 var $69=$68|128;
 var $70=(($69)&255);
 var $71=HEAP32[(($to_nxt)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($to_nxt)>>2)]=$72;
 HEAP8[($71)]=$70;
 label=25;break;
 case 16: 
 var $74=($20&65535)<56320;
 if($74){label=17;break;}else{label=22;break;}
 case 17: 
 var $76=$19;
 var $77=((($14)-($76))|0);
 var $78=($77|0)<4;
 if($78){var $_0=1;label=26;break;}else{label=18;break;}
 case 18: 
 var $80=(($19+2)|0);
 var $81=HEAP16[(($80)>>1)];
 var $82=($81&65535);
 var $83=$82&64512;
 var $84=($83|0)==56320;
 if($84){label=19;break;}else{var $_0=2;label=26;break;}
 case 19: 
 var $86=HEAP32[(($to_nxt)>>2)];
 var $87=$86;
 var $88=((($17)-($87))|0);
 var $89=($88|0)<4;
 if($89){var $_0=1;label=26;break;}else{label=20;break;}
 case 20: 
 var $91=$21&960;
 var $92=$91<<10;
 var $93=((($92)+(65536))|0);
 var $94=$21<<10;
 var $95=$94&64512;
 var $96=$93|$95;
 var $97=$82&1023;
 var $98=$96|$97;
 var $99=($98>>>0)>($Maxcode>>>0);
 if($99){var $_0=2;label=26;break;}else{label=21;break;}
 case 21: 
 HEAP32[(($frm_nxt)>>2)]=$80;
 var $101=$91>>>6;
 var $102=((($101)+(1))|0);
 var $103=$102>>>2;
 var $104=$103|240;
 var $105=(($104)&255);
 var $106=HEAP32[(($to_nxt)>>2)];
 var $107=(($106+1)|0);
 HEAP32[(($to_nxt)>>2)]=$107;
 HEAP8[($106)]=$105;
 var $108=$102<<4;
 var $109=$108&48;
 var $110=$21>>>2;
 var $111=$110&15;
 var $112=$111|$109;
 var $113=$112|128;
 var $114=(($113)&255);
 var $115=HEAP32[(($to_nxt)>>2)];
 var $116=(($115+1)|0);
 HEAP32[(($to_nxt)>>2)]=$116;
 HEAP8[($115)]=$114;
 var $117=$21<<4;
 var $118=$117&48;
 var $119=$82>>>6;
 var $120=$119&15;
 var $121=$118|$120;
 var $122=$121|128;
 var $123=(($122)&255);
 var $124=HEAP32[(($to_nxt)>>2)];
 var $125=(($124+1)|0);
 HEAP32[(($to_nxt)>>2)]=$125;
 HEAP8[($124)]=$123;
 var $126=$82&63;
 var $127=$126|128;
 var $128=(($127)&255);
 var $129=HEAP32[(($to_nxt)>>2)];
 var $130=(($129+1)|0);
 HEAP32[(($to_nxt)>>2)]=$130;
 HEAP8[($129)]=$128;
 label=25;break;
 case 22: 
 var $132=($20&65535)<57344;
 if($132){var $_0=2;label=26;break;}else{label=23;break;}
 case 23: 
 var $134=HEAP32[(($to_nxt)>>2)];
 var $135=$134;
 var $136=((($17)-($135))|0);
 var $137=($136|0)<3;
 if($137){var $_0=1;label=26;break;}else{label=24;break;}
 case 24: 
 var $139=$21>>>12;
 var $140=$139|224;
 var $141=(($140)&255);
 var $142=(($134+1)|0);
 HEAP32[(($to_nxt)>>2)]=$142;
 HEAP8[($134)]=$141;
 var $143=$21>>>6;
 var $144=$143&63;
 var $145=$144|128;
 var $146=(($145)&255);
 var $147=HEAP32[(($to_nxt)>>2)];
 var $148=(($147+1)|0);
 HEAP32[(($to_nxt)>>2)]=$148;
 HEAP8[($147)]=$146;
 var $149=$21&63;
 var $150=$149|128;
 var $151=(($150)&255);
 var $152=HEAP32[(($to_nxt)>>2)];
 var $153=(($152+1)|0);
 HEAP32[(($to_nxt)>>2)]=$153;
 HEAP8[($152)]=$151;
 label=25;break;
 case 25: 
 var $155=HEAP32[(($frm_nxt)>>2)];
 var $156=(($155+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$156;
 var $157=($156>>>0)<($frm_end>>>0);
 if($157){var $19=$156;label=6;break;}else{var $_0=0;label=26;break;}
 case 26: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11>>1;
 var $13=(($to+($12<<1))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&4;
 var $2=($1|0)==0;
 var $_pre79=HEAP32[(($frm_nxt)>>2)];
 if($2){var $21=$_pre79;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$_pre79;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $21=$_pre79;label=7;break;}
 case 3: 
 var $9=HEAP8[($_pre79)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $21=$_pre79;label=7;break;}
 case 4: 
 var $12=(($_pre79+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $21=$_pre79;label=7;break;}
 case 5: 
 var $16=(($_pre79+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 if($18){label=6;break;}else{var $21=$_pre79;label=7;break;}
 case 6: 
 var $20=(($_pre79+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$20;
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=($21>>>0)<($frm_end>>>0);
 if($22){label=8;break;}else{var $175=$21;label=40;break;}
 case 8: 
 var $23=$frm_end;
 var $24=$to_end;
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $27=$_pre;var $26=$21;label=9;break;
 case 9: 
 var $26;
 var $27;
 var $28=($27>>>0)<($to_end>>>0);
 if($28){label=10;break;}else{var $175=$26;label=40;break;}
 case 10: 
 var $30=HEAP8[($26)];
 var $31=($30&255);
 var $32=($31>>>0)>($Maxcode>>>0);
 if($32){var $_0=2;label=41;break;}else{label=11;break;}
 case 11: 
 var $34=(($30<<24)>>24)>-1;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $36=($30&255);
 HEAP16[(($27)>>1)]=$36;
 var $37=HEAP32[(($frm_nxt)>>2)];
 var $38=(($37+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$38;
 label=39;break;
 case 13: 
 var $40=($30&255)<194;
 if($40){var $_0=2;label=41;break;}else{label=14;break;}
 case 14: 
 var $42=($30&255)<224;
 if($42){label=15;break;}else{label=19;break;}
 case 15: 
 var $44=$26;
 var $45=((($23)-($44))|0);
 var $46=($45|0)<2;
 if($46){var $_0=1;label=41;break;}else{label=16;break;}
 case 16: 
 var $48=(($26+1)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=$50&192;
 var $52=($51|0)==128;
 if($52){label=17;break;}else{var $_0=2;label=41;break;}
 case 17: 
 var $54=$31<<6;
 var $55=$54&1984;
 var $56=$50&63;
 var $57=$56|$55;
 var $58=($57>>>0)>($Maxcode>>>0);
 if($58){var $_0=2;label=41;break;}else{label=18;break;}
 case 18: 
 var $60=(($57)&65535);
 HEAP16[(($27)>>1)]=$60;
 var $61=HEAP32[(($frm_nxt)>>2)];
 var $62=(($61+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$62;
 label=39;break;
 case 19: 
 var $64=($30&255)<240;
 if($64){label=20;break;}else{label=28;break;}
 case 20: 
 var $66=$26;
 var $67=((($23)-($66))|0);
 var $68=($67|0)<3;
 if($68){var $_0=1;label=41;break;}else{label=21;break;}
 case 21: 
 var $70=(($26+1)|0);
 var $71=HEAP8[($70)];
 var $72=(($26+2)|0);
 var $73=HEAP8[($72)];
 if(($31|0)==224){ label=22;break;}else if(($31|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $75=$71&-32;
 var $76=(($75<<24)>>24)==-96;
 if($76){label=25;break;}else{var $_0=2;label=41;break;}
 case 23: 
 var $78=$71&-32;
 var $79=(($78<<24)>>24)==-128;
 if($79){label=25;break;}else{var $_0=2;label=41;break;}
 case 24: 
 var $81=$71&-64;
 var $82=(($81<<24)>>24)==-128;
 if($82){label=25;break;}else{var $_0=2;label=41;break;}
 case 25: 
 var $84=($73&255);
 var $85=$84&192;
 var $86=($85|0)==128;
 if($86){label=26;break;}else{var $_0=2;label=41;break;}
 case 26: 
 var $88=$31<<12;
 var $89=($71&255);
 var $90=$89<<6;
 var $91=$90&4032;
 var $92=$91|$88;
 var $93=$84&63;
 var $94=$92|$93;
 var $95=$94&65535;
 var $96=($95>>>0)>($Maxcode>>>0);
 if($96){var $_0=2;label=41;break;}else{label=27;break;}
 case 27: 
 var $98=(($94)&65535);
 HEAP16[(($27)>>1)]=$98;
 var $99=HEAP32[(($frm_nxt)>>2)];
 var $100=(($99+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$100;
 label=39;break;
 case 28: 
 var $102=($30&255)<245;
 if($102){label=29;break;}else{var $_0=2;label=41;break;}
 case 29: 
 var $104=$26;
 var $105=((($23)-($104))|0);
 var $106=($105|0)<4;
 if($106){var $_0=1;label=41;break;}else{label=30;break;}
 case 30: 
 var $108=(($26+1)|0);
 var $109=HEAP8[($108)];
 var $110=(($26+2)|0);
 var $111=HEAP8[($110)];
 var $112=(($26+3)|0);
 var $113=HEAP8[($112)];
 if(($31|0)==240){ label=31;break;}else if(($31|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($109)+(112))&255);
 var $115=($_off&255)<48;
 if($115){label=34;break;}else{var $_0=2;label=41;break;}
 case 32: 
 var $117=$109&-16;
 var $118=(($117<<24)>>24)==-128;
 if($118){label=34;break;}else{var $_0=2;label=41;break;}
 case 33: 
 var $120=$109&-64;
 var $121=(($120<<24)>>24)==-128;
 if($121){label=34;break;}else{var $_0=2;label=41;break;}
 case 34: 
 var $123=($111&255);
 var $124=$123&192;
 var $125=($124|0)==128;
 if($125){label=35;break;}else{var $_0=2;label=41;break;}
 case 35: 
 var $127=($113&255);
 var $128=$127&192;
 var $129=($128|0)==128;
 if($129){label=36;break;}else{var $_0=2;label=41;break;}
 case 36: 
 var $131=$27;
 var $132=((($24)-($131))|0);
 var $133=($132|0)<4;
 if($133){var $_0=1;label=41;break;}else{label=37;break;}
 case 37: 
 var $135=$31&7;
 var $136=$135<<18;
 var $137=($109&255);
 var $138=$137<<12;
 var $139=$138&258048;
 var $140=$139|$136;
 var $141=$123<<6;
 var $142=$141&4032;
 var $143=$140|$142;
 var $144=$127&63;
 var $145=$143|$144;
 var $146=($145>>>0)>($Maxcode>>>0);
 if($146){var $_0=2;label=41;break;}else{label=38;break;}
 case 38: 
 var $148=$135<<2;
 var $149=$137>>>4;
 var $150=$149&3;
 var $151=$150|$148;
 var $152=$151<<6;
 var $153=((($152)+(16320))|0);
 var $154=$137<<2;
 var $155=$154&60;
 var $156=$123>>>4;
 var $157=$156&3;
 var $158=$155|$157;
 var $159=$158|$153;
 var $160=$159|55296;
 var $161=(($160)&65535);
 HEAP16[(($27)>>1)]=$161;
 var $162=$141&960;
 var $163=$144|$162;
 var $164=$163|56320;
 var $165=(($164)&65535);
 var $166=HEAP32[(($to_nxt)>>2)];
 var $167=(($166+2)|0);
 HEAP32[(($to_nxt)>>2)]=$167;
 HEAP16[(($167)>>1)]=$165;
 var $168=HEAP32[(($frm_nxt)>>2)];
 var $169=(($168+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$169;
 label=39;break;
 case 39: 
 var $171=HEAP32[(($to_nxt)>>2)];
 var $172=(($171+2)|0);
 HEAP32[(($to_nxt)>>2)]=$172;
 var $173=HEAP32[(($frm_nxt)>>2)];
 var $174=($173>>>0)<($frm_end>>>0);
 if($174){var $27=$172;var $26=$173;label=9;break;}else{var $175=$173;label=40;break;}
 case 40: 
 var $175;
 var $176=($175>>>0)<($frm_end>>>0);
 var $177=($176&1);
 var $_0=$177;label=41;break;
 case 41: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;
 var $2=__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $2;
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$mode&4;
 var $2=($1|0)==0;
 if($2){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $9=HEAP8[($frm)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $12=(($frm+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $16=(($frm+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 var $19=(($frm+3)|0);
 var $_frm=($18?$19:$frm);
 var $frm_nxt_1_ph=$_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $20=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $21=($mx|0)!=0;
 var $or_cond83=$20&$21;
 if($or_cond83){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=44;break;}
 case 7: 
 var $22=$frm_end;
 var $nchar16_t_084=0;var $frm_nxt_185=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_185;
 var $nchar16_t_084;
 var $23=HEAP8[($frm_nxt_185)];
 var $24=($23&255);
 var $25=($24>>>0)>($Maxcode>>>0);
 if($25){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=9;break;}
 case 9: 
 var $27=(($23<<24)>>24)>-1;
 if($27){label=10;break;}else{label=11;break;}
 case 10: 
 var $29=(($frm_nxt_185+1)|0);
 var $frm_nxt_2=$29;var $nchar16_t_1=$nchar16_t_084;label=43;break;
 case 11: 
 var $31=($23&255)<194;
 if($31){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=12;break;}
 case 12: 
 var $33=($23&255)<224;
 if($33){label=13;break;}else{label=17;break;}
 case 13: 
 var $35=$frm_nxt_185;
 var $36=((($22)-($35))|0);
 var $37=($36|0)<2;
 if($37){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=14;break;}
 case 14: 
 var $39=(($frm_nxt_185+1)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=$41&192;
 var $43=($42|0)==128;
 if($43){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}
 case 15: 
 var $45=$24<<6;
 var $46=$45&1984;
 var $47=$41&63;
 var $48=$47|$46;
 var $49=($48>>>0)>($Maxcode>>>0);
 if($49){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=16;break;}
 case 16: 
 var $51=(($frm_nxt_185+2)|0);
 var $frm_nxt_2=$51;var $nchar16_t_1=$nchar16_t_084;label=43;break;
 case 17: 
 var $53=($23&255)<240;
 if($53){label=18;break;}else{label=29;break;}
 case 18: 
 var $55=$frm_nxt_185;
 var $56=((($22)-($55))|0);
 var $57=($56|0)<3;
 if($57){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=19;break;}
 case 19: 
 var $59=(($frm_nxt_185+1)|0);
 var $60=HEAP8[($59)];
 var $61=(($frm_nxt_185+2)|0);
 var $62=HEAP8[($61)];
 if(($24|0)==224){ label=20;break;}else if(($24|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $64=$60&-32;
 var $65=(($64<<24)>>24)==-96;
 if($65){label=26;break;}else{label=21;break;}
 case 21: 
 var $67=$frm;
 var $68=((($55)-($67))|0);
 var $_0=$68;label=45;break;
 case 22: 
 var $70=$60&-32;
 var $71=(($70<<24)>>24)==-128;
 if($71){label=26;break;}else{label=23;break;}
 case 23: 
 var $73=$frm;
 var $74=((($55)-($73))|0);
 var $_0=$74;label=45;break;
 case 24: 
 var $76=$60&-64;
 var $77=(($76<<24)>>24)==-128;
 if($77){label=26;break;}else{label=25;break;}
 case 25: 
 var $79=$frm;
 var $80=((($55)-($79))|0);
 var $_0=$80;label=45;break;
 case 26: 
 var $82=($62&255);
 var $83=$82&192;
 var $84=($83|0)==128;
 if($84){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}
 case 27: 
 var $86=$24<<12;
 var $87=$86&61440;
 var $88=($60&255);
 var $89=$88<<6;
 var $90=$89&4032;
 var $91=$90|$87;
 var $92=$82&63;
 var $93=$91|$92;
 var $94=($93>>>0)>($Maxcode>>>0);
 if($94){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=28;break;}
 case 28: 
 var $96=(($frm_nxt_185+3)|0);
 var $frm_nxt_2=$96;var $nchar16_t_1=$nchar16_t_084;label=43;break;
 case 29: 
 var $98=($23&255)<245;
 if($98){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}
 case 30: 
 var $100=$frm_nxt_185;
 var $101=((($22)-($100))|0);
 var $102=($101|0)<4;
 if($102){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=31;break;}
 case 31: 
 var $104=((($mx)-($nchar16_t_084))|0);
 var $105=($104>>>0)<2;
 if($105){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=32;break;}
 case 32: 
 var $107=(($frm_nxt_185+1)|0);
 var $108=HEAP8[($107)];
 var $109=(($frm_nxt_185+2)|0);
 var $110=HEAP8[($109)];
 var $111=(($frm_nxt_185+3)|0);
 var $112=HEAP8[($111)];
 if(($24|0)==240){ label=33;break;}else if(($24|0)==244){ label=35;break;}else{label=37;break;}
 case 33: 
 var $_off=((($108)+(112))&255);
 var $114=($_off&255)<48;
 if($114){label=39;break;}else{label=34;break;}
 case 34: 
 var $116=$frm;
 var $117=((($100)-($116))|0);
 var $_0=$117;label=45;break;
 case 35: 
 var $119=$108&-16;
 var $120=(($119<<24)>>24)==-128;
 if($120){label=39;break;}else{label=36;break;}
 case 36: 
 var $122=$frm;
 var $123=((($100)-($122))|0);
 var $_0=$123;label=45;break;
 case 37: 
 var $125=$108&-64;
 var $126=(($125<<24)>>24)==-128;
 if($126){label=39;break;}else{label=38;break;}
 case 38: 
 var $128=$frm;
 var $129=((($100)-($128))|0);
 var $_0=$129;label=45;break;
 case 39: 
 var $131=($110&255);
 var $132=$131&192;
 var $133=($132|0)==128;
 if($133){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}
 case 40: 
 var $135=($112&255);
 var $136=$135&192;
 var $137=($136|0)==128;
 if($137){label=41;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}
 case 41: 
 var $139=$24<<18;
 var $140=$139&1835008;
 var $141=($108&255);
 var $142=$141<<12;
 var $143=$142&258048;
 var $144=$143|$140;
 var $145=$131<<6;
 var $146=$145&4032;
 var $147=$144|$146;
 var $148=$135&63;
 var $149=$147|$148;
 var $150=($149>>>0)>($Maxcode>>>0);
 if($150){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=42;break;}
 case 42: 
 var $152=((($nchar16_t_084)+(1))|0);
 var $153=(($frm_nxt_185+4)|0);
 var $frm_nxt_2=$153;var $nchar16_t_1=$152;label=43;break;
 case 43: 
 var $nchar16_t_1;
 var $frm_nxt_2;
 var $155=((($nchar16_t_1)+(1))|0);
 var $156=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $157=($155>>>0)<($mx>>>0);
 var $or_cond=$156&$157;
 if($or_cond){var $nchar16_t_084=$155;var $frm_nxt_185=$frm_nxt_2;label=8;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=44;break;}
 case 44: 
 var $frm_nxt_1_lcssa;
 var $158=$frm_nxt_1_lcssa;
 var $159=$frm;
 var $160=((($158)-($159))|0);
 var $_0=$160;label=45;break;
 case 45: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6>>2;
 var $8=(($frm+($7<<2))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&2;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=$to_end;
 var $5=$to;
 var $6=((($4)-($5))|0);
 var $7=($6|0)<3;
 if($7){var $_0=1;label=19;break;}else{label=3;break;}
 case 3: 
 var $9=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$9;
 HEAP8[($to)]=-17;
 var $10=HEAP32[(($to_nxt)>>2)];
 var $11=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$11;
 HEAP8[($10)]=-69;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $13=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 HEAP8[($12)]=-65;
 label=4;break;
 case 4: 
 var $14=HEAP32[(($frm_nxt)>>2)];
 var $15=($14>>>0)<($frm_end>>>0);
 if($15){label=5;break;}else{var $_0=0;label=19;break;}
 case 5: 
 var $16=$to_end;
 var $18=$14;label=6;break;
 case 6: 
 var $18;
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&-2048;
 var $21=($20|0)==55296;
 var $22=($19>>>0)>($Maxcode>>>0);
 var $or_cond=$21|$22;
 if($or_cond){var $_0=2;label=19;break;}else{label=7;break;}
 case 7: 
 var $24=($19>>>0)<128;
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=HEAP32[(($to_nxt)>>2)];
 var $27=$26;
 var $28=((($16)-($27))|0);
 var $29=($28|0)<1;
 if($29){var $_0=1;label=19;break;}else{label=9;break;}
 case 9: 
 var $31=(($19)&255);
 var $32=(($26+1)|0);
 HEAP32[(($to_nxt)>>2)]=$32;
 HEAP8[($26)]=$31;
 label=18;break;
 case 10: 
 var $34=($19>>>0)<2048;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=HEAP32[(($to_nxt)>>2)];
 var $37=$36;
 var $38=((($16)-($37))|0);
 var $39=($38|0)<2;
 if($39){var $_0=1;label=19;break;}else{label=12;break;}
 case 12: 
 var $41=$19>>>6;
 var $42=$41|192;
 var $43=(($42)&255);
 var $44=(($36+1)|0);
 HEAP32[(($to_nxt)>>2)]=$44;
 HEAP8[($36)]=$43;
 var $45=$19&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=HEAP32[(($to_nxt)>>2)];
 var $49=(($48+1)|0);
 HEAP32[(($to_nxt)>>2)]=$49;
 HEAP8[($48)]=$47;
 label=18;break;
 case 13: 
 var $51=($19>>>0)<65536;
 var $52=HEAP32[(($to_nxt)>>2)];
 var $53=$52;
 var $54=((($16)-($53))|0);
 if($51){label=14;break;}else{label=16;break;}
 case 14: 
 var $56=($54|0)<3;
 if($56){var $_0=1;label=19;break;}else{label=15;break;}
 case 15: 
 var $58=$19>>>12;
 var $59=$58|224;
 var $60=(($59)&255);
 var $61=(($52+1)|0);
 HEAP32[(($to_nxt)>>2)]=$61;
 HEAP8[($52)]=$60;
 var $62=$19>>>6;
 var $63=$62&63;
 var $64=$63|128;
 var $65=(($64)&255);
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $68=$19&63;
 var $69=$68|128;
 var $70=(($69)&255);
 var $71=HEAP32[(($to_nxt)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($to_nxt)>>2)]=$72;
 HEAP8[($71)]=$70;
 label=18;break;
 case 16: 
 var $74=($54|0)<4;
 if($74){var $_0=1;label=19;break;}else{label=17;break;}
 case 17: 
 var $76=$19>>>18;
 var $77=$76|240;
 var $78=(($77)&255);
 var $79=(($52+1)|0);
 HEAP32[(($to_nxt)>>2)]=$79;
 HEAP8[($52)]=$78;
 var $80=$19>>>12;
 var $81=$80&63;
 var $82=$81|128;
 var $83=(($82)&255);
 var $84=HEAP32[(($to_nxt)>>2)];
 var $85=(($84+1)|0);
 HEAP32[(($to_nxt)>>2)]=$85;
 HEAP8[($84)]=$83;
 var $86=$19>>>6;
 var $87=$86&63;
 var $88=$87|128;
 var $89=(($88)&255);
 var $90=HEAP32[(($to_nxt)>>2)];
 var $91=(($90+1)|0);
 HEAP32[(($to_nxt)>>2)]=$91;
 HEAP8[($90)]=$89;
 var $92=$19&63;
 var $93=$92|128;
 var $94=(($93)&255);
 var $95=HEAP32[(($to_nxt)>>2)];
 var $96=(($95+1)|0);
 HEAP32[(($to_nxt)>>2)]=$96;
 HEAP8[($95)]=$94;
 label=18;break;
 case 18: 
 var $98=HEAP32[(($frm_nxt)>>2)];
 var $99=(($98+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$99;
 var $100=($99>>>0)<($frm_end>>>0);
 if($100){var $18=$99;label=6;break;}else{var $_0=0;label=19;break;}
 case 19: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11>>2;
 var $13=(($to+($12<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&4;
 var $2=($1|0)==0;
 var $_pre71=HEAP32[(($frm_nxt)>>2)];
 if($2){var $21=$_pre71;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$_pre71;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $21=$_pre71;label=7;break;}
 case 3: 
 var $9=HEAP8[($_pre71)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $21=$_pre71;label=7;break;}
 case 4: 
 var $12=(($_pre71+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $21=$_pre71;label=7;break;}
 case 5: 
 var $16=(($_pre71+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 if($18){label=6;break;}else{var $21=$_pre71;label=7;break;}
 case 6: 
 var $20=(($_pre71+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$20;
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=($21>>>0)<($frm_end>>>0);
 if($22){label=8;break;}else{var $147=$21;label=39;break;}
 case 8: 
 var $23=$frm_end;
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $26=$_pre;var $25=$21;label=9;break;
 case 9: 
 var $25;
 var $26;
 var $27=($26>>>0)<($to_end>>>0);
 if($27){label=10;break;}else{var $147=$25;label=39;break;}
 case 10: 
 var $29=HEAP8[($25)];
 var $30=($29&255);
 var $31=(($29<<24)>>24)>-1;
 if($31){label=11;break;}else{label=13;break;}
 case 11: 
 var $33=($30>>>0)>($Maxcode>>>0);
 if($33){var $_0=2;label=40;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($26)>>2)]=$30;
 var $35=HEAP32[(($frm_nxt)>>2)];
 var $36=(($35+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$36;
 label=38;break;
 case 13: 
 var $38=($29&255)<194;
 if($38){var $_0=2;label=40;break;}else{label=14;break;}
 case 14: 
 var $40=($29&255)<224;
 if($40){label=15;break;}else{label=19;break;}
 case 15: 
 var $42=$25;
 var $43=((($23)-($42))|0);
 var $44=($43|0)<2;
 if($44){var $_0=1;label=40;break;}else{label=16;break;}
 case 16: 
 var $46=(($25+1)|0);
 var $47=HEAP8[($46)];
 var $48=($47&255);
 var $49=$48&192;
 var $50=($49|0)==128;
 if($50){label=17;break;}else{var $_0=2;label=40;break;}
 case 17: 
 var $52=$30<<6;
 var $53=$52&1984;
 var $54=$48&63;
 var $55=$54|$53;
 var $56=($55>>>0)>($Maxcode>>>0);
 if($56){var $_0=2;label=40;break;}else{label=18;break;}
 case 18: 
 HEAP32[(($26)>>2)]=$55;
 var $58=HEAP32[(($frm_nxt)>>2)];
 var $59=(($58+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$59;
 label=38;break;
 case 19: 
 var $61=($29&255)<240;
 if($61){label=20;break;}else{label=28;break;}
 case 20: 
 var $63=$25;
 var $64=((($23)-($63))|0);
 var $65=($64|0)<3;
 if($65){var $_0=1;label=40;break;}else{label=21;break;}
 case 21: 
 var $67=(($25+1)|0);
 var $68=HEAP8[($67)];
 var $69=(($25+2)|0);
 var $70=HEAP8[($69)];
 if(($30|0)==224){ label=22;break;}else if(($30|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $72=$68&-32;
 var $73=(($72<<24)>>24)==-96;
 if($73){label=25;break;}else{var $_0=2;label=40;break;}
 case 23: 
 var $75=$68&-32;
 var $76=(($75<<24)>>24)==-128;
 if($76){label=25;break;}else{var $_0=2;label=40;break;}
 case 24: 
 var $78=$68&-64;
 var $79=(($78<<24)>>24)==-128;
 if($79){label=25;break;}else{var $_0=2;label=40;break;}
 case 25: 
 var $81=($70&255);
 var $82=$81&192;
 var $83=($82|0)==128;
 if($83){label=26;break;}else{var $_0=2;label=40;break;}
 case 26: 
 var $85=$30<<12;
 var $86=$85&61440;
 var $87=($68&255);
 var $88=$87<<6;
 var $89=$88&4032;
 var $90=$89|$86;
 var $91=$81&63;
 var $92=$90|$91;
 var $93=($92>>>0)>($Maxcode>>>0);
 if($93){var $_0=2;label=40;break;}else{label=27;break;}
 case 27: 
 HEAP32[(($26)>>2)]=$92;
 var $95=HEAP32[(($frm_nxt)>>2)];
 var $96=(($95+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$96;
 label=38;break;
 case 28: 
 var $98=($29&255)<245;
 if($98){label=29;break;}else{var $_0=2;label=40;break;}
 case 29: 
 var $100=$25;
 var $101=((($23)-($100))|0);
 var $102=($101|0)<4;
 if($102){var $_0=1;label=40;break;}else{label=30;break;}
 case 30: 
 var $104=(($25+1)|0);
 var $105=HEAP8[($104)];
 var $106=(($25+2)|0);
 var $107=HEAP8[($106)];
 var $108=(($25+3)|0);
 var $109=HEAP8[($108)];
 if(($30|0)==240){ label=31;break;}else if(($30|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($105)+(112))&255);
 var $111=($_off&255)<48;
 if($111){label=34;break;}else{var $_0=2;label=40;break;}
 case 32: 
 var $113=$105&-16;
 var $114=(($113<<24)>>24)==-128;
 if($114){label=34;break;}else{var $_0=2;label=40;break;}
 case 33: 
 var $116=$105&-64;
 var $117=(($116<<24)>>24)==-128;
 if($117){label=34;break;}else{var $_0=2;label=40;break;}
 case 34: 
 var $119=($107&255);
 var $120=$119&192;
 var $121=($120|0)==128;
 if($121){label=35;break;}else{var $_0=2;label=40;break;}
 case 35: 
 var $123=($109&255);
 var $124=$123&192;
 var $125=($124|0)==128;
 if($125){label=36;break;}else{var $_0=2;label=40;break;}
 case 36: 
 var $127=$30<<18;
 var $128=$127&1835008;
 var $129=($105&255);
 var $130=$129<<12;
 var $131=$130&258048;
 var $132=$131|$128;
 var $133=$119<<6;
 var $134=$133&4032;
 var $135=$132|$134;
 var $136=$123&63;
 var $137=$135|$136;
 var $138=($137>>>0)>($Maxcode>>>0);
 if($138){var $_0=2;label=40;break;}else{label=37;break;}
 case 37: 
 HEAP32[(($26)>>2)]=$137;
 var $140=HEAP32[(($frm_nxt)>>2)];
 var $141=(($140+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$141;
 label=38;break;
 case 38: 
 var $143=HEAP32[(($to_nxt)>>2)];
 var $144=(($143+4)|0);
 HEAP32[(($to_nxt)>>2)]=$144;
 var $145=HEAP32[(($frm_nxt)>>2)];
 var $146=($145>>>0)<($frm_end>>>0);
 if($146){var $26=$144;var $25=$145;label=9;break;}else{var $147=$145;label=39;break;}
 case 39: 
 var $147;
 var $148=($147>>>0)<($frm_end>>>0);
 var $149=($148&1);
 var $_0=$149;label=40;break;
 case 40: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;
 var $2=__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $2;
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$mode&4;
 var $2=($1|0)==0;
 if($2){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $9=HEAP8[($frm)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $12=(($frm+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $16=(($frm+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 var $19=(($frm+3)|0);
 var $_frm=($18?$19:$frm);
 var $frm_nxt_1_ph=$_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $20=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $21=($mx|0)!=0;
 var $or_cond79=$20&$21;
 if($or_cond79){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=44;break;}
 case 7: 
 var $22=$frm_end;
 var $nchar32_t_080=1;var $frm_nxt_181=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_181;
 var $nchar32_t_080;
 var $24=HEAP8[($frm_nxt_181)];
 var $25=($24&255);
 var $26=(($24<<24)>>24)>-1;
 if($26){label=9;break;}else{label=11;break;}
 case 9: 
 var $28=($25>>>0)>($Maxcode>>>0);
 if($28){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=10;break;}
 case 10: 
 var $30=(($frm_nxt_181+1)|0);
 var $frm_nxt_2=$30;label=42;break;
 case 11: 
 var $32=($24&255)<194;
 if($32){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=12;break;}
 case 12: 
 var $34=($24&255)<224;
 if($34){label=13;break;}else{label=17;break;}
 case 13: 
 var $36=$frm_nxt_181;
 var $37=((($22)-($36))|0);
 var $38=($37|0)<2;
 if($38){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=14;break;}
 case 14: 
 var $40=(($frm_nxt_181+1)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=$42&192;
 var $44=($43|0)==128;
 if($44){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 15: 
 var $46=$25<<6;
 var $47=$46&1984;
 var $48=$42&63;
 var $49=$48|$47;
 var $50=($49>>>0)>($Maxcode>>>0);
 if($50){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=16;break;}
 case 16: 
 var $52=(($frm_nxt_181+2)|0);
 var $frm_nxt_2=$52;label=42;break;
 case 17: 
 var $54=($24&255)<240;
 if($54){label=18;break;}else{label=29;break;}
 case 18: 
 var $56=$frm_nxt_181;
 var $57=((($22)-($56))|0);
 var $58=($57|0)<3;
 if($58){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=19;break;}
 case 19: 
 var $60=(($frm_nxt_181+1)|0);
 var $61=HEAP8[($60)];
 var $62=(($frm_nxt_181+2)|0);
 var $63=HEAP8[($62)];
 if(($25|0)==224){ label=20;break;}else if(($25|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $65=$61&-32;
 var $66=(($65<<24)>>24)==-96;
 if($66){label=26;break;}else{label=21;break;}
 case 21: 
 var $68=$frm;
 var $69=((($56)-($68))|0);
 var $_0=$69;label=45;break;
 case 22: 
 var $71=$61&-32;
 var $72=(($71<<24)>>24)==-128;
 if($72){label=26;break;}else{label=23;break;}
 case 23: 
 var $74=$frm;
 var $75=((($56)-($74))|0);
 var $_0=$75;label=45;break;
 case 24: 
 var $77=$61&-64;
 var $78=(($77<<24)>>24)==-128;
 if($78){label=26;break;}else{label=25;break;}
 case 25: 
 var $80=$frm;
 var $81=((($56)-($80))|0);
 var $_0=$81;label=45;break;
 case 26: 
 var $83=($63&255);
 var $84=$83&192;
 var $85=($84|0)==128;
 if($85){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 27: 
 var $87=$25<<12;
 var $88=$87&61440;
 var $89=($61&255);
 var $90=$89<<6;
 var $91=$90&4032;
 var $92=$91|$88;
 var $93=$83&63;
 var $94=$92|$93;
 var $95=($94>>>0)>($Maxcode>>>0);
 if($95){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=28;break;}
 case 28: 
 var $97=(($frm_nxt_181+3)|0);
 var $frm_nxt_2=$97;label=42;break;
 case 29: 
 var $99=($24&255)<245;
 if($99){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 30: 
 var $101=$frm_nxt_181;
 var $102=((($22)-($101))|0);
 var $103=($102|0)<4;
 if($103){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=31;break;}
 case 31: 
 var $105=(($frm_nxt_181+1)|0);
 var $106=HEAP8[($105)];
 var $107=(($frm_nxt_181+2)|0);
 var $108=HEAP8[($107)];
 var $109=(($frm_nxt_181+3)|0);
 var $110=HEAP8[($109)];
 if(($25|0)==240){ label=32;break;}else if(($25|0)==244){ label=34;break;}else{label=36;break;}
 case 32: 
 var $_off=((($106)+(112))&255);
 var $112=($_off&255)<48;
 if($112){label=38;break;}else{label=33;break;}
 case 33: 
 var $114=$frm;
 var $115=((($101)-($114))|0);
 var $_0=$115;label=45;break;
 case 34: 
 var $117=$106&-16;
 var $118=(($117<<24)>>24)==-128;
 if($118){label=38;break;}else{label=35;break;}
 case 35: 
 var $120=$frm;
 var $121=((($101)-($120))|0);
 var $_0=$121;label=45;break;
 case 36: 
 var $123=$106&-64;
 var $124=(($123<<24)>>24)==-128;
 if($124){label=38;break;}else{label=37;break;}
 case 37: 
 var $126=$frm;
 var $127=((($101)-($126))|0);
 var $_0=$127;label=45;break;
 case 38: 
 var $129=($108&255);
 var $130=$129&192;
 var $131=($130|0)==128;
 if($131){label=39;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 39: 
 var $133=($110&255);
 var $134=$133&192;
 var $135=($134|0)==128;
 if($135){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 40: 
 var $137=$25<<18;
 var $138=$137&1835008;
 var $139=($106&255);
 var $140=$139<<12;
 var $141=$140&258048;
 var $142=$141|$138;
 var $143=$129<<6;
 var $144=$143&4032;
 var $145=$142|$144;
 var $146=$133&63;
 var $147=$145|$146;
 var $148=($147>>>0)>($Maxcode>>>0);
 if($148){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=41;break;}
 case 41: 
 var $150=(($frm_nxt_181+4)|0);
 var $frm_nxt_2=$150;label=42;break;
 case 42: 
 var $frm_nxt_2;
 var $152=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $153=($nchar32_t_080>>>0)<($mx>>>0);
 var $or_cond=$152&$153;
 if($or_cond){label=43;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=44;break;}
 case 43: 
 var $phitmp=((($nchar32_t_080)+(1))|0);
 var $nchar32_t_080=$phitmp;var $frm_nxt_181=$frm_nxt_2;label=8;break;
 case 44: 
 var $frm_nxt_1_lcssa;
 var $154=$frm_nxt_1_lcssa;
 var $155=$frm;
 var $156=((($154)-($155))|0);
 var $_0=$156;label=45;break;
 case 45: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6000;
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6000;
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5952;
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5952;
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this){
 var label=0;
 var $1=(($this+8)|0);
 var $2=HEAP8[($1)];
 return $2;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this){
 var label=0;
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this){
 var label=0;
 var $1=(($this+9)|0);
 var $2=HEAP8[($1)];
 return $2;
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this){
 var label=0;
 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result,$this){
 var label=0;
 var $1=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result,$this){
 var label=0;
 var $1=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,3000,4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result,$this){
 var label=0;
 var $1=_wcslen(2904);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,2904,$1);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,2832,5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result,$this){
 var label=0;
 var $1=_wcslen(2744);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,2744,$1);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17624)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17624);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(17512)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(17512);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(14920, 0, 168)|0;
 var $12=_atexit(836,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14920,4112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14932,4104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14944,4096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14956,4080) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14968,4064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14980,3968) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14992,3952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15004,3944) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15016,3936) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15028,3896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15040,3888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15052,3880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15064,3848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15076,3840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((15880)>>2)]=14920;
 label=21;break;
 case 21: 
 var $29=HEAP32[((15880)>>2)];
 return $29;
 case 22: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17568)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17568);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(17488)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(17488);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(14176, 0, 168)|0;
 var $12=_atexit(428,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14176,4592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14188,4560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14200,4528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14212,4488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14224,4408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14236,4376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14248,4336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14260,4320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14272,4264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14284,4216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14296,4200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14308,4184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14320,4168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14332,4152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((15792)>>2)]=14176;
 label=21;break;
 case 21: 
 var $29=HEAP32[((15792)>>2)];
 return $29;
 case 22: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17616)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17616);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(17504)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(17504);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(14632, 0, 288)|0;
 var $12=_atexit(546,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14632,536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14644,520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14656,512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14668,456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14680,432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14692,424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14704,416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14716,408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14728,336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14740,328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14752,216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14764,200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14776,192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14788,136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14800,128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14812,120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14824,432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14836,112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14848,104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14860,4656) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14872,4648) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14884,4640) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14896,4632) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14908,4624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((15872)>>2)]=14632;
 label=31;break;
 case 31: 
 var $39=HEAP32[((15872)>>2)];
 return $39;
 case 32: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;
 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17560)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17560);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(17480)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(17480);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(13888, 0, 288)|0;
 var $12=_atexit(358,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13888,1312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13900,1272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13912,1248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13924,1200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13936,800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13948,1136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13960,1112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13972,1080) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13984,1032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13996,1000) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14008,960) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14020,920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14032,904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14044,864) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14056,848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14068,816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14080,800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14092,784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14104,736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14116,720) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14128,704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14140,688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14152,672) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14164,608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((15784)>>2)]=13888;
 label=31;break;
 case 31: 
 var $39=HEAP32[((15784)>>2)];
 return $39;
 case 32: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;
 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17632)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17632);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(17520)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(17520);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15088, 0, 288)|0;
 var $12=_atexit(352,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15088,1376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15100,1344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((15888)>>2)]=15088;
 label=9;break;
 case 9: 
 var $17=HEAP32[((15888)>>2)];
 return $17;
 case 10: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17576)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17576);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(17496)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(17496);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(14344, 0, 288)|0;
 var $12=_atexit(788,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14344,1416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14356,1384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((15800)>>2)]=14344;
 label=9;break;
 case 9: 
 var $17=HEAP32[((15800)>>2)];
 return $17;
 case 10: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17640)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17640);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(15896,2592,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((828),15896,___dso_handle);
 label=5;break;
 case 5: 
 return 15896;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17584)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17584);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(2464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(15808,2464,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((552),15808,___dso_handle);
 label=6;break;
 case 6: 
 return 15808;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17664)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17664);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(15944,2368,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((828),15944,___dso_handle);
 label=5;break;
 case 5: 
 return 15944;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17608)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17608);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(2224) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(15856,2224,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((552),15856,___dso_handle);
 label=6;break;
 case 6: 
 return 15856;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17656)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17656);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(15928,2152,20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((828),15928,___dso_handle);
 label=5;break;
 case 5: 
 return 15928;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17600)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17600);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(1960) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(15840,1960,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((552),15840,___dso_handle);
 label=6;break;
 case 6: 
 return 15840;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17648)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17648);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(15912,1896,11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((828),15912,___dso_handle);
 label=5;break;
 case 5: 
 return 15912;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(17592)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(17592);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(1824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(15824,1824,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((552),15824,___dso_handle);
 label=6;break;
 case 6: 
 return 15824;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(17544)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(17544);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15408)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((15408)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0=$16;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$16;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(17544)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(17544);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15408)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((15408)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0=$16;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$16;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(17544)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(17544);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15408)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((15408)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 label=13;break;
 case 13: 
 var $28=$16;
 var $_0=$28;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=15;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(17544)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(17544);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((15408)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((15408)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 13: 
 var $29=($21|0)==34;
 if($29){label=14;break;}else{var $_0$1=$20$1;var $_0$0=$20$0;label=16;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=-1;var $_0$0=-1;label=16;break;
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 16: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(17544)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(17544);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((15408)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((15408)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(17544)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(17544);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((15408)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((15408)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(17544)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(17544);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((15408)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((15408)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=65535;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0&65535;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(17544)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(17544);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15408)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((15408)>>2)];
 var $16$0=_strtoll($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0$1=$16$1;var $_0$0=$16$0;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $27=(($16$1|0) > ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) >  ($$etemp$0$0>>>0))));
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=2147483647;
 var $_$0=($27?$$etemp$1$0:$$etemp$2$0);
 var $_$1=($27?$$etemp$1$1:$$etemp$2$1);
 var $_0$1=$_$1;var $_0$0=$_$0;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 14: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(17544)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(17544);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15408)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((15408)>>2)];
 var $16$0=_strtoll($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $25=($17|0)==34;
 var $$etemp$0$0=-2147483648;
 var $$etemp$0$1=-1;
 var $26=(($16$1|0) < ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) <  ($$etemp$0$0>>>0))));
 var $or_cond=$25|$26;
 var $$etemp$1$0=2147483647;
 var $$etemp$1$1=0;
 var $27=(($16$1|0) > ($$etemp$1$1|0)) | (((($16$1|0) == ($$etemp$1$1|0) & ($16$0>>>0) >  ($$etemp$1$0>>>0))));
 var $or_cond13=$or_cond|$27;
 if($or_cond13){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $29=(($16$1|0) > ($$etemp$2$1|0)) | (((($16$1|0) == ($$etemp$2$1|0) & ($16$0>>>0) >  ($$etemp$2$0>>>0))));
 var $_=($29?2147483647:-2147483648);
 var $_0=$_;label=15;break;
 case 13: 
 var $31$0=$16$0;
 var $31=$31$0;
 var $_0=$31;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_idx=$__vp;
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx9=(($__vp+4)|0);
 var $1=$_idx9;
 var $ld$0$0=(($1)|0);
 var $_idx9_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $_idx9_val$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$_idx9_val$1;
 var $3=$_idx_val;
 var $4=(($3+$2)|0);
 var $5=$4;
 var $6=$_idx9_val$0;
 var $7=$6&1;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$4;
 var $11=HEAP32[(($10)>>2)];
 var $12=((($6)-(1))|0);
 var $13=(($11+$12)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$6;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 FUNCTION_TABLE[$18]($5);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=5;break;}else{var $_0_i=$__n;var $10=$4;label=2;break;}
 case 2: 
 var $10;
 var $_0_i;
 var $11=($10|0)==0;
 if($11){var $13=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($10)>>2)]=0;
 var $_pre11_i=HEAP32[(($3)>>2)];
 var $13=$_pre11_i;label=4;break;
 case 4: 
 var $13;
 var $14=(($13+4)|0);
 HEAP32[(($3)>>2)]=$14;
 var $15=((($_0_i)-(1))|0);
 var $16=($15|0)==0;
 if($16){label=20;break;}else{var $_0_i=$15;var $10=$14;label=2;break;}
 case 5: 
 var $18=(($this+16)|0);
 var $19=(($this)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=((($6)-($21))|0);
 var $23=$22>>2;
 var $24=((($23)+($__n))|0);
 var $25=($24>>>0)>1073741823;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 7: 
 var $28=((($5)-($21))|0);
 var $29=$28>>2;
 var $30=($29>>>0)>536870910;
 if($30){var $_04851=1073741823;label=11;break;}else{label=8;break;}
 case 8: 
 var $31=$28>>1;
 var $32=($31>>>0)<($24>>>0);
 var $_sroa_speculated=($32?$24:$31);
 var $33=($_sroa_speculated|0)==0;
 if($33){var $45=0;var $_049=0;label=12;break;}else{label=9;break;}
 case 9: 
 var $35=(($this+128)|0);
 var $36=HEAP8[($35)];
 var $37=$36&1;
 var $38=(($37<<24)>>24)==0;
 var $39=($_sroa_speculated>>>0)<29;
 var $or_cond_i_i=$38&$39;
 if($or_cond_i_i){label=10;break;}else{var $_04851=$_sroa_speculated;label=11;break;}
 case 10: 
 HEAP8[($35)]=1;
 var $41=$18;
 var $45=$41;var $_049=$_sroa_speculated;label=12;break;
 case 11: 
 var $_04851;
 var $42=$_04851<<2;
 var $43=__Znwj($42);
 var $44=$43;
 var $45=$44;var $_049=$_04851;label=12;break;
 case 12: 
 var $_049;
 var $45;
 var $46=(($45+($23<<2))|0);
 var $_0_i39=$__n;var $48=$46;label=13;break;
 case 13: 
 var $48;
 var $_0_i39;
 var $49=($48|0)==0;
 if($49){var $51=0;label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($48)>>2)]=0;
 var $51=$48;label=15;break;
 case 15: 
 var $51;
 var $52=(($51+4)|0);
 var $53=((($_0_i39)-(1))|0);
 var $54=($53|0)==0;
 if($54){label=16;break;}else{var $_0_i39=$53;var $48=$52;label=13;break;}
 case 16: 
 var $55=(($45+($_049<<2))|0);
 var $56=HEAP32[(($19)>>2)];
 var $57=HEAP32[(($3)>>2)];
 var $58=$57;
 var $59=$56;
 var $60=((($58)-($59))|0);
 var $61=$60>>2;
 var $_sum=((($23)-($61))|0);
 var $62=(($45+($_sum<<2))|0);
 var $63=$62;
 var $64=$56;
 assert($60 % 1 === 0);(_memcpy($63, $64, $60)|0);
 HEAP32[(($19)>>2)]=$62;
 HEAP32[(($3)>>2)]=$52;
 HEAP32[(($1)>>2)]=$55;
 var $65=($56|0)==0;
 if($65){label=20;break;}else{label=17;break;}
 case 17: 
 var $67=$18;
 var $68=($56|0)==($67|0);
 if($68){label=18;break;}else{label=19;break;}
 case 18: 
 var $70=(($this+128)|0);
 HEAP8[($70)]=0;
 label=20;break;
 case 19: 
 __ZdlPv($64);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor($0){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14620);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14608);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14596);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14584);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14572);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14560);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14548);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14536);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14524);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14512);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14500);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14488);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14476);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14464);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14452);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14440);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14428);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14416);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14404);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14392);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14380);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14368);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14356);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14344);
 return;
}
function ___cxx_global_array_dtor53($0){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15364);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15352);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15340);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15328);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15316);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15304);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15292);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15280);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15268);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15256);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15244);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15232);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15220);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15208);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15196);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15184);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15172);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15160);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15148);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15136);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15124);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15112);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15100);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15088);
 return;
}
function ___cxx_global_array_dtor56($0){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14164);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14152);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14140);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14128);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14116);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14104);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14092);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14080);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14068);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14056);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14044);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14032);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14020);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14008);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13996);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13984);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13972);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13960);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13948);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13936);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13924);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13912);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13900);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13888);
 return;
}
function ___cxx_global_array_dtor81($0){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14908);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14896);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14884);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14872);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14860);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14848);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14836);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14824);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14812);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14800);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14788);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14776);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14764);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14752);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14740);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14728);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14716);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14704);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14692);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14680);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14668);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14656);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14644);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14632);
 return;
}
function ___cxx_global_array_dtor105($0){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14332);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14320);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14308);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14296);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14284);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14272);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14260);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14248);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14236);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14224);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14212);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14200);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14188);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14176);
 return;
}
function ___cxx_global_array_dtor120($0){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15076);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15064);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15052);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15040);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15028);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15016);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15004);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14992);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14980);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14968);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14956);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14944);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14932);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14920);
 return;
}
function _mbrlen($s,$n,$st){
 var label=0;
 var $1=($st|0)!=0;
 var $2=($1?$st:13392);
 var $3=_mbrtowc(0,$s,$n,$2);
 return $3;
}
function _mbrtowc($wc,$src,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($st|0)==0;
 var $_027=($2?13384:$st);
 var $3=(($_027)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($src|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($4|0)==0;
 if($7){var $_0=0;label=19;break;}else{label=18;break;}
 case 3: 
 var $9=($wc|0)==0;
 if($9){label=4;break;}else{var $13=$wc;label=5;break;}
 case 4: 
 var $11=$1;
 HEAP32[(($1)>>2)]=$11;
 var $13=$11;label=5;break;
 case 5: 
 var $13;
 var $14=($n|0)==0;
 if($14){var $_0=-2;label=19;break;}else{label=6;break;}
 case 6: 
 var $16=($4|0)==0;
 if($16){label=7;break;}else{var $s_0=$src;var $c_0=$4;var $_028=$n;label=11;break;}
 case 7: 
 var $18=HEAP8[($src)];
 var $19=($18&255);
 var $20=(($18<<24)>>24)>-1;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($13)>>2)]=$19;
 var $22=(($18<<24)>>24)!=0;
 var $23=($22&1);
 var $_0=$23;label=19;break;
 case 9: 
 var $25=((($19)-(194))|0);
 var $26=($25>>>0)>50;
 if($26){label=18;break;}else{label=10;break;}
 case 10: 
 var $28=(($src+1)|0);
 var $29=((___fsmu8+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($n)-(1))|0);
 var $s_0=$28;var $c_0=$30;var $_028=$31;label=11;break;
 case 11: 
 var $_028;
 var $c_0;
 var $s_0;
 var $33=($_028|0)==0;
 if($33){var $c_2=$c_0;label=17;break;}else{label=12;break;}
 case 12: 
 var $35=HEAP8[($s_0)];
 var $36=($35&255);
 var $37=$36>>>3;
 var $38=((($37)-(16))|0);
 var $39=$c_0>>26;
 var $40=((($37)+($39))|0);
 var $41=$38|$40;
 var $42=($41>>>0)>7;
 if($42){label=18;break;}else{var $s_1=$s_0;var $c_1=$c_0;var $_1=$_028;var $43=$35;label=13;break;}
 case 13: 
 var $43;
 var $_1;
 var $c_1;
 var $s_1;
 var $44=$c_1<<6;
 var $45=(($s_1+1)|0);
 var $46=($43&255);
 var $47=((($46)-(128))|0);
 var $48=$47|$44;
 var $49=((($_1)-(1))|0);
 var $50=($48|0)<0;
 if($50){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($3)>>2)]=0;
 HEAP32[(($13)>>2)]=$48;
 var $52=((($n)-($49))|0);
 var $_0=$52;label=19;break;
 case 15: 
 var $54=($49|0)==0;
 if($54){var $c_2=$48;label=17;break;}else{label=16;break;}
 case 16: 
 var $56=HEAP8[($45)];
 var $57=($56&255);
 var $58=((($57)-(128))|0);
 var $59=($58>>>0)>63;
 if($59){label=18;break;}else{var $s_1=$45;var $c_1=$48;var $_1=$49;var $43=$56;label=13;break;}
 case 17: 
 var $c_2;
 HEAP32[(($3)>>2)]=$c_2;
 var $_0=-2;label=19;break;
 case 18: 
 HEAP32[(($3)>>2)]=0;
 var $60=___errno_location();
 HEAP32[(($60)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wbuf=sp;
 var $s=(sp)+(1024);
 var $0=HEAP32[(($src)>>2)];
 HEAP32[(($s)>>2)]=$0;
 var $1=($wcs|0)!=0;
 var $2=(($wbuf)|0);
 var $_040_ph=($1?$wn:256);
 var $ws_0_ph=($1?$wcs:$2);
 var $3=($0|0)==0;
 var $4=($_040_ph|0)==0;
 var $or_cond59=$3|$4;
 if($or_cond59){var $cnt_1=0;var $_1=$n;var $_242=$_040_ph;var $ws_056=$ws_0_ph;var $23=$0;label=9;break;}else{label=2;break;}
 case 2: 
 var $5=(($wbuf)|0);
 var $_04060=$_040_ph;var $_061=$n;var $cnt_062=0;var $ws_063=$ws_0_ph;var $_pr78=$0;label=3;break;
 case 3: 
 var $_pr78;
 var $ws_063;
 var $cnt_062;
 var $_061;
 var $_04060;
 var $7=$_061>>>2;
 var $8=($7>>>0)>=($_04060>>>0);
 var $9=($_061>>>0)>131;
 var $or_cond43=$8|$9;
 if($or_cond43){label=4;break;}else{var $cnt_1=$cnt_062;var $_1=$_061;var $_242=$_04060;var $ws_056=$ws_063;var $23=$_pr78;label=9;break;}
 case 4: 
 var $_040_=($8?$_04060:$7);
 var $10=((($_061)-($_040_))|0);
 var $11=_mbsrtowcs($ws_063,$s,$_040_,$st);
 var $12=($11|0)==-1;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 var $_pr_pre=HEAP32[(($s)>>2)];
 var $cnt_1=-1;var $_1=$10;var $_242=0;var $ws_056=$ws_063;var $23=$_pr_pre;label=9;break;
 case 6: 
 var $14=($ws_063|0)==($5|0);
 if($14){var $ws_1=$5;var $_141=$_04060;label=8;break;}else{label=7;break;}
 case 7: 
 var $16=(($ws_063+($11<<2))|0);
 var $17=((($_04060)-($11))|0);
 var $ws_1=$16;var $_141=$17;label=8;break;
 case 8: 
 var $_141;
 var $ws_1;
 var $19=((($11)+($cnt_062))|0);
 var $20=HEAP32[(($s)>>2)];
 var $21=($20|0)==0;
 var $22=($_141|0)==0;
 var $or_cond=$21|$22;
 if($or_cond){var $cnt_1=$19;var $_1=$10;var $_242=$_141;var $ws_056=$ws_1;var $23=$20;label=9;break;}else{var $_04060=$_141;var $_061=$10;var $cnt_062=$19;var $ws_063=$ws_1;var $_pr78=$20;label=3;break;}
 case 9: 
 var $23;
 var $ws_056;
 var $_242;
 var $_1;
 var $cnt_1;
 var $24=($23|0)==0;
 if($24){var $cnt_3=$cnt_1;label=16;break;}else{label=10;break;}
 case 10: 
 var $25=($_242|0)==0;
 var $26=($_1|0)==0;
 var $or_cond4446=$25|$26;
 if($or_cond4446){var $cnt_3=$cnt_1;label=16;break;}else{var $_347=$_242;var $_248=$_1;var $cnt_249=$cnt_1;var $ws_250=$ws_056;var $27=$23;label=11;break;}
 case 11: 
 var $27;
 var $ws_250;
 var $cnt_249;
 var $_248;
 var $_347;
 var $28=_mbrtowc($ws_250,$27,$_248,$st);
 var $29=((($28)+(2))|0);
 var $30=($29>>>0)<3;
 if($30){label=12;break;}else{label=15;break;}
 case 12: 
 if(($28|0)==0){ label=13;break;}else if(($28|0)==-1){ var $cnt_3=-1;label=16;break;}else{label=14;break;}
 case 13: 
 HEAP32[(($s)>>2)]=0;
 var $cnt_3=$cnt_249;label=16;break;
 case 14: 
 var $34=(($st)|0);
 HEAP32[(($34)>>2)]=0;
 var $cnt_3=$cnt_249;label=16;break;
 case 15: 
 var $36=HEAP32[(($s)>>2)];
 var $37=(($36+$28)|0);
 HEAP32[(($s)>>2)]=$37;
 var $38=((($_248)-($28))|0);
 var $39=(($ws_250+4)|0);
 var $40=((($_347)-(1))|0);
 var $41=((($cnt_249)+(1))|0);
 var $42=($40|0)==0;
 var $43=($_248|0)==($28|0);
 var $or_cond44=$42|$43;
 if($or_cond44){var $cnt_3=$41;label=16;break;}else{var $_347=$40;var $_248=$38;var $cnt_249=$41;var $ws_250=$39;var $27=$37;label=11;break;}
 case 16: 
 var $cnt_3;
 if($1){label=17;break;}else{label=18;break;}
 case 17: 
 var $45=HEAP32[(($s)>>2)];
 HEAP32[(($src)>>2)]=$45;
 label=18;break;
 case 18: 
 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }
}
function _mbsrtowcs($ws,$src,$wn,$st){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($src)>>2)];
 var $2=($st|0)==0;
 if($2){label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(($st)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=($ws|0)==0;
 if($8){var $c_2=$5;var $s_3=$1;var $_380=$wn;label=16;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($4)>>2)]=0;
 var $c_4=$5;var $s_8=$1;var $_3=$ws;var $_7=$wn;label=36;break;
 case 5: 
 var $11=($ws|0)==0;
 if($11){var $s_0=$1;var $_077=$wn;label=7;break;}else{var $s_5_ph=$1;var $_076_ph=$ws;var $_481_ph=$wn;label=6;break;}
 case 6: 
 var $_481_ph;
 var $_076_ph;
 var $s_5_ph;
 var $12=($_481_ph|0)==0;
 if($12){var $_0=$wn;label=53;break;}else{var $_48197=$_481_ph;var $_07698=$_076_ph;var $s_599=$s_5_ph;label=26;break;}
 case 7: 
 var $_077;
 var $s_0;
 var $13=HEAP8[($s_0)];
 var $14=($13&255);
 var $15=((($14)-(1))|0);
 var $16=($15>>>0)<127;
 if($16){label=8;break;}else{var $s_2=$s_0;var $_279=$_077;var $37=$13;label=12;break;}
 case 8: 
 var $18=$s_0;
 var $19=$18&3;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{var $s_2=$s_0;var $_279=$_077;var $37=$13;label=12;break;}
 case 9: 
 var $21=$s_0;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$23|$22;
 var $25=$24&-2139062144;
 var $26=($25|0)==0;
 var $27=(($22)&255);
 if($26){var $_17882=$_077;var $s_183=$s_0;label=10;break;}else{var $s_2=$s_0;var $_279=$_077;var $37=$27;label=12;break;}
 case 10: 
 var $s_183;
 var $_17882;
 var $28=(($s_183+4)|0);
 var $29=((($_17882)-(4))|0);
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)-(16843009))|0);
 var $33=$32|$31;
 var $34=$33&-2139062144;
 var $35=($34|0)==0;
 if($35){var $_17882=$29;var $s_183=$28;label=10;break;}else{label=11;break;}
 case 11: 
 var $36=(($31)&255);
 var $s_2=$28;var $_279=$29;var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $_279;
 var $s_2;
 var $38=($37&255);
 var $39=((($38)-(1))|0);
 var $40=($39>>>0)<127;
 if($40){label=13;break;}else{label=14;break;}
 case 13: 
 var $42=(($s_2+1)|0);
 var $43=((($_279)-(1))|0);
 var $s_0=$42;var $_077=$43;label=7;break;
 case 14: 
 var $45=((($38)-(194))|0);
 var $46=($45>>>0)>50;
 if($46){var $_8115=$_279;var $_4117=$ws;var $s_10119=$s_2;label=47;break;}else{label=15;break;}
 case 15: 
 var $48=(($s_2+1)|0);
 var $49=((___fsmu8+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $c_2=$50;var $s_3=$48;var $_380=$_279;label=16;break;
 case 16: 
 var $_380;
 var $s_3;
 var $c_2;
 var $52=HEAP8[($s_3)];
 var $53=($52&255);
 var $54=$53>>>3;
 var $55=((($54)-(16))|0);
 var $56=$c_2>>26;
 var $57=((($54)+($56))|0);
 var $58=$55|$57;
 var $59=($58>>>0)>7;
 if($59){label=17;break;}else{label=18;break;}
 case 17: 
 var $61=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$61;var $_4=$ws;var $_8=$_380;label=46;break;
 case 18: 
 var $63=(($s_3+1)|0);
 var $64=$c_2&33554432;
 var $65=($64|0)==0;
 if($65){var $s_4=$63;label=25;break;}else{label=19;break;}
 case 19: 
 var $67=HEAP8[($63)];
 var $68=($67&255);
 var $69=((($68)-(128))|0);
 var $70=($69>>>0)>63;
 if($70){label=20;break;}else{label=21;break;}
 case 20: 
 var $72=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$72;var $_4=$ws;var $_8=$_380;label=46;break;
 case 21: 
 var $74=(($s_3+2)|0);
 var $75=$c_2&524288;
 var $76=($75|0)==0;
 if($76){var $s_4=$74;label=25;break;}else{label=22;break;}
 case 22: 
 var $78=HEAP8[($74)];
 var $79=($78&255);
 var $80=((($79)-(128))|0);
 var $81=($80>>>0)>63;
 if($81){label=23;break;}else{label=24;break;}
 case 23: 
 var $83=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$83;var $_4=$ws;var $_8=$_380;label=46;break;
 case 24: 
 var $85=(($s_3+3)|0);
 var $s_4=$85;label=25;break;
 case 25: 
 var $s_4;
 var $87=((($_380)-(1))|0);
 var $s_0=$s_4;var $_077=$87;label=7;break;
 case 26: 
 var $s_599;
 var $_07698;
 var $_48197;
 var $88=HEAP8[($s_599)];
 var $89=($88&255);
 var $90=((($89)-(1))|0);
 var $91=($90>>>0)<127;
 if($91){label=27;break;}else{var $s_7=$s_599;var $_2=$_07698;var $_6=$_48197;var $122=$88;label=32;break;}
 case 27: 
 var $93=$s_599;
 var $94=$93&3;
 var $95=($94|0)==0;
 var $96=($_48197>>>0)>3;
 var $or_cond=$95&$96;
 if($or_cond){var $_587=$_48197;var $_188=$_07698;var $s_689=$s_599;label=28;break;}else{var $s_7=$s_599;var $_2=$_07698;var $_6=$_48197;var $122=$88;label=32;break;}
 case 28: 
 var $s_689;
 var $_188;
 var $_587;
 var $97=$s_689;
 var $98=HEAP32[(($97)>>2)];
 var $99=((($98)-(16843009))|0);
 var $100=$99|$98;
 var $101=$100&-2139062144;
 var $102=($101|0)==0;
 if($102){label=29;break;}else{label=30;break;}
 case 29: 
 var $104=(($s_689+1)|0);
 var $105=$98&255;
 var $106=(($_188+4)|0);
 HEAP32[(($_188)>>2)]=$105;
 var $107=(($s_689+2)|0);
 var $108=HEAP8[($104)];
 var $109=($108&255);
 var $110=(($_188+8)|0);
 HEAP32[(($106)>>2)]=$109;
 var $111=(($s_689+3)|0);
 var $112=HEAP8[($107)];
 var $113=($112&255);
 var $114=(($_188+12)|0);
 HEAP32[(($110)>>2)]=$113;
 var $115=(($s_689+4)|0);
 var $116=HEAP8[($111)];
 var $117=($116&255);
 var $118=(($_188+16)|0);
 HEAP32[(($114)>>2)]=$117;
 var $119=((($_587)-(4))|0);
 var $120=($119>>>0)>3;
 if($120){var $_587=$119;var $_188=$118;var $s_689=$115;label=28;break;}else{label=31;break;}
 case 30: 
 var $121=(($98)&255);
 var $s_7=$s_689;var $_2=$_188;var $_6=$_587;var $122=$121;label=32;break;
 case 31: 
 var $_pre_pre=HEAP8[($115)];
 var $s_7=$115;var $_2=$118;var $_6=$119;var $122=$_pre_pre;label=32;break;
 case 32: 
 var $122;
 var $_6;
 var $_2;
 var $s_7;
 var $123=($122&255);
 var $124=((($123)-(1))|0);
 var $125=($124>>>0)<127;
 if($125){label=33;break;}else{label=34;break;}
 case 33: 
 var $127=(($s_7+1)|0);
 var $128=(($_2+4)|0);
 HEAP32[(($_2)>>2)]=$123;
 var $129=((($_6)-(1))|0);
 var $130=($129|0)==0;
 if($130){var $_0=$wn;label=53;break;}else{var $_48197=$129;var $_07698=$128;var $s_599=$127;label=26;break;}
 case 34: 
 var $132=((($123)-(194))|0);
 var $133=($132>>>0)>50;
 if($133){var $_8115=$_6;var $_4117=$_2;var $s_10119=$s_7;label=47;break;}else{label=35;break;}
 case 35: 
 var $135=(($s_7+1)|0);
 var $136=((___fsmu8+($132<<2))|0);
 var $137=HEAP32[(($136)>>2)];
 var $c_4=$137;var $s_8=$135;var $_3=$_2;var $_7=$_6;label=36;break;
 case 36: 
 var $_7;
 var $_3;
 var $s_8;
 var $c_4;
 var $139=HEAP8[($s_8)];
 var $140=($139&255);
 var $141=$140>>>3;
 var $142=((($141)-(16))|0);
 var $143=$c_4>>26;
 var $144=((($141)+($143))|0);
 var $145=$142|$144;
 var $146=($145>>>0)>7;
 if($146){label=37;break;}else{label=38;break;}
 case 37: 
 var $148=((($s_8)-(1))|0);
 var $c_6=$c_4;var $s_10=$148;var $_4=$_3;var $_8=$_7;label=46;break;
 case 38: 
 var $150=$c_4<<6;
 var $151=(($s_8+1)|0);
 var $152=((($140)-(128))|0);
 var $153=$152|$150;
 var $154=($153|0)<0;
 if($154){label=39;break;}else{var $c_5=$153;var $s_9=$151;label=45;break;}
 case 39: 
 var $156=HEAP8[($151)];
 var $157=($156&255);
 var $158=((($157)-(128))|0);
 var $159=($158>>>0)>63;
 if($159){label=40;break;}else{label=41;break;}
 case 40: 
 var $161=((($s_8)-(1))|0);
 var $c_6=$153;var $s_10=$161;var $_4=$_3;var $_8=$_7;label=46;break;
 case 41: 
 var $163=$153<<6;
 var $164=(($s_8+2)|0);
 var $165=$158|$163;
 var $166=($165|0)<0;
 if($166){label=42;break;}else{var $c_5=$165;var $s_9=$164;label=45;break;}
 case 42: 
 var $168=HEAP8[($164)];
 var $169=($168&255);
 var $170=((($169)-(128))|0);
 var $171=($170>>>0)>63;
 if($171){label=43;break;}else{label=44;break;}
 case 43: 
 var $173=((($s_8)-(1))|0);
 var $c_6=$165;var $s_10=$173;var $_4=$_3;var $_8=$_7;label=46;break;
 case 44: 
 var $175=$165<<6;
 var $176=(($s_8+3)|0);
 var $177=$170|$175;
 var $c_5=$177;var $s_9=$176;label=45;break;
 case 45: 
 var $s_9;
 var $c_5;
 var $179=(($_3+4)|0);
 HEAP32[(($_3)>>2)]=$c_5;
 var $180=((($_7)-(1))|0);
 var $s_5_ph=$s_9;var $_076_ph=$179;var $_481_ph=$180;label=6;break;
 case 46: 
 var $_8;
 var $_4;
 var $s_10;
 var $c_6;
 var $182=($c_6|0)==0;
 if($182){var $_8115=$_8;var $_4117=$_4;var $s_10119=$s_10;label=47;break;}else{var $_4116=$_4;var $s_10118=$s_10;label=51;break;}
 case 47: 
 var $s_10119;
 var $_4117;
 var $_8115;
 var $183=HEAP8[($s_10119)];
 var $184=(($183<<24)>>24)==0;
 if($184){label=48;break;}else{var $_4116=$_4117;var $s_10118=$s_10119;label=51;break;}
 case 48: 
 var $186=($_4117|0)==0;
 if($186){label=50;break;}else{label=49;break;}
 case 49: 
 HEAP32[(($_4117)>>2)]=0;
 HEAP32[(($src)>>2)]=0;
 label=50;break;
 case 50: 
 var $189=((($wn)-($_8115))|0);
 var $_0=$189;label=53;break;
 case 51: 
 var $s_10118;
 var $_4116;
 var $191=___errno_location();
 HEAP32[(($191)>>2)]=84;
 var $192=($_4116|0)==0;
 if($192){var $_0=-1;label=53;break;}else{label=52;break;}
 case 52: 
 HEAP32[(($src)>>2)]=$s_10118;
 var $_0=-1;label=53;break;
 case 53: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _mbtowc($wc,$src,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($src|0)==0;
 if($2){var $_0=0;label=19;break;}else{label=2;break;}
 case 2: 
 var $4=($n|0)==0;
 if($4){label=18;break;}else{label=3;break;}
 case 3: 
 var $6=($wc|0)==0;
 if($6){label=4;break;}else{var $10=$wc;label=5;break;}
 case 4: 
 var $8=$1;
 HEAP32[(($1)>>2)]=$8;
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 var $11=HEAP8[($src)];
 var $12=($11&255);
 var $13=(($11<<24)>>24)>-1;
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($10)>>2)]=$12;
 var $15=(($11<<24)>>24)!=0;
 var $16=($15&1);
 var $_0=$16;label=19;break;
 case 7: 
 var $18=((($12)-(194))|0);
 var $19=($18>>>0)>50;
 if($19){label=18;break;}else{label=8;break;}
 case 8: 
 var $21=(($src+1)|0);
 var $22=((___fsmu8+($18<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($n>>>0)<4;
 if($24){label=9;break;}else{label=10;break;}
 case 9: 
 var $26=((($n)*(6))&-1);
 var $27=((($26)-(6))|0);
 var $28=-2147483648>>>($27>>>0);
 var $29=$23&$28;
 var $30=($29|0)==0;
 if($30){label=10;break;}else{label=18;break;}
 case 10: 
 var $32=HEAP8[($21)];
 var $33=($32&255);
 var $34=$33>>>3;
 var $35=((($34)-(16))|0);
 var $36=$23>>26;
 var $37=((($34)+($36))|0);
 var $38=$35|$37;
 var $39=($38>>>0)>7;
 if($39){label=18;break;}else{label=11;break;}
 case 11: 
 var $41=$23<<6;
 var $42=((($33)-(128))|0);
 var $43=$42|$41;
 var $44=($43|0)<0;
 if($44){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($10)>>2)]=$43;
 var $_0=2;label=19;break;
 case 13: 
 var $47=(($src+2)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=((($49)-(128))|0);
 var $51=($50>>>0)>63;
 if($51){label=18;break;}else{label=14;break;}
 case 14: 
 var $53=$43<<6;
 var $54=$50|$53;
 var $55=($54|0)<0;
 if($55){label=16;break;}else{label=15;break;}
 case 15: 
 HEAP32[(($10)>>2)]=$54;
 var $_0=3;label=19;break;
 case 16: 
 var $58=(($src+3)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=((($60)-(128))|0);
 var $62=($61>>>0)>63;
 if($62){label=18;break;}else{label=17;break;}
 case 17: 
 var $64=$54<<6;
 var $65=$61|$64;
 HEAP32[(($10)>>2)]=$65;
 var $_0=4;label=19;break;
 case 18: 
 var $67=___errno_location();
 HEAP32[(($67)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcrtomb($s,$wc,$st){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=($wc>>>0)<128;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=(($wc)&255);
 HEAP8[($s)]=$5;
 var $_0=1;label=11;break;
 case 4: 
 var $7=($wc>>>0)<2048;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=$wc>>>6;
 var $10=$9|192;
 var $11=(($10)&255);
 var $12=(($s+1)|0);
 HEAP8[($s)]=$11;
 var $13=$wc&63;
 var $14=$13|128;
 var $15=(($14)&255);
 HEAP8[($12)]=$15;
 var $_0=2;label=11;break;
 case 6: 
 var $17=($wc>>>0)<55296;
 var $18=((($wc)-(57344))|0);
 var $19=($18>>>0)<8192;
 var $or_cond=$17|$19;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$wc>>>12;
 var $22=$21|224;
 var $23=(($22)&255);
 var $24=(($s+1)|0);
 HEAP8[($s)]=$23;
 var $25=$wc>>>6;
 var $26=$25&63;
 var $27=$26|128;
 var $28=(($27)&255);
 var $29=(($s+2)|0);
 HEAP8[($24)]=$28;
 var $30=$wc&63;
 var $31=$30|128;
 var $32=(($31)&255);
 HEAP8[($29)]=$32;
 var $_0=3;label=11;break;
 case 8: 
 var $34=((($wc)-(65536))|0);
 var $35=($34>>>0)<1048576;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$wc>>>18;
 var $38=$37|240;
 var $39=(($38)&255);
 var $40=(($s+1)|0);
 HEAP8[($s)]=$39;
 var $41=$wc>>>12;
 var $42=$41&63;
 var $43=$42|128;
 var $44=(($43)&255);
 var $45=(($s+2)|0);
 HEAP8[($40)]=$44;
 var $46=$wc>>>6;
 var $47=$46&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($s+3)|0);
 HEAP8[($45)]=$49;
 var $51=$wc&63;
 var $52=$51|128;
 var $53=(($52)&255);
 HEAP8[($50)]=$53;
 var $_0=4;label=11;break;
 case 10: 
 var $55=___errno_location();
 HEAP32[(($55)>>2)]=84;
 var $_0=-1;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $ws=(sp)+(256);
 var $0=HEAP32[(($wcs)>>2)];
 HEAP32[(($ws)>>2)]=$0;
 var $1=($dst|0)!=0;
 var $2=(($buf)|0);
 var $_037_ph=($1?$n:256);
 var $s_0_ph=($1?$dst:$2);
 var $3=($0|0)==0;
 var $4=($_037_ph|0)==0;
 var $or_cond56=$3|$4;
 if($or_cond56){var $cnt_1=0;var $_1=$wn;var $_239=$_037_ph;var $s_053=$s_0_ph;var $22=$0;label=9;break;}else{label=2;break;}
 case 2: 
 var $5=(($buf)|0);
 var $_03757=$_037_ph;var $_058=$wn;var $cnt_059=0;var $s_060=$s_0_ph;var $_pr75=$0;label=3;break;
 case 3: 
 var $_pr75;
 var $s_060;
 var $cnt_059;
 var $_058;
 var $_03757;
 var $7=($_058>>>0)>=($_03757>>>0);
 var $8=($_058>>>0)>32;
 var $or_cond40=$7|$8;
 if($or_cond40){label=4;break;}else{var $cnt_1=$cnt_059;var $_1=$_058;var $_239=$_03757;var $s_053=$s_060;var $22=$_pr75;label=9;break;}
 case 4: 
 var $_037__0=($7?$_03757:$_058);
 var $9=((($_058)-($_037__0))|0);
 var $10=_wcsrtombs($s_060,$ws,$_037__0,0);
 var $11=($10|0)==-1;
 if($11){label=5;break;}else{label=6;break;}
 case 5: 
 var $_pr_pre=HEAP32[(($ws)>>2)];
 var $cnt_1=-1;var $_1=$9;var $_239=0;var $s_053=$s_060;var $22=$_pr_pre;label=9;break;
 case 6: 
 var $13=($s_060|0)==($5|0);
 if($13){var $s_1=$5;var $_138=$_03757;label=8;break;}else{label=7;break;}
 case 7: 
 var $15=(($s_060+$10)|0);
 var $16=((($_03757)-($10))|0);
 var $s_1=$15;var $_138=$16;label=8;break;
 case 8: 
 var $_138;
 var $s_1;
 var $18=((($10)+($cnt_059))|0);
 var $19=HEAP32[(($ws)>>2)];
 var $20=($19|0)==0;
 var $21=($_138|0)==0;
 var $or_cond=$20|$21;
 if($or_cond){var $cnt_1=$18;var $_1=$9;var $_239=$_138;var $s_053=$s_1;var $22=$19;label=9;break;}else{var $_03757=$_138;var $_058=$9;var $cnt_059=$18;var $s_060=$s_1;var $_pr75=$19;label=3;break;}
 case 9: 
 var $22;
 var $s_053;
 var $_239;
 var $_1;
 var $cnt_1;
 var $23=($22|0)==0;
 if($23){var $cnt_3=$cnt_1;label=15;break;}else{label=10;break;}
 case 10: 
 var $24=($_239|0)==0;
 var $25=($_1|0)==0;
 var $or_cond4143=$24|$25;
 if($or_cond4143){var $cnt_3=$cnt_1;label=15;break;}else{var $_344=$_239;var $_245=$_1;var $cnt_246=$cnt_1;var $s_247=$s_053;var $26=$22;label=11;break;}
 case 11: 
 var $26;
 var $s_247;
 var $cnt_246;
 var $_245;
 var $_344;
 var $27=HEAP32[(($26)>>2)];
 var $28=_wcrtomb($s_247,$27,0);
 var $29=((($28)+(1))|0);
 var $30=($29>>>0)<2;
 if($30){label=12;break;}else{label=14;break;}
 case 12: 
 var $32=($28|0)==0;
 if($32){label=13;break;}else{var $cnt_3=-1;label=15;break;}
 case 13: 
 HEAP32[(($ws)>>2)]=0;
 var $cnt_3=$cnt_246;label=15;break;
 case 14: 
 var $35=HEAP32[(($ws)>>2)];
 var $36=(($35+4)|0);
 HEAP32[(($ws)>>2)]=$36;
 var $37=((($_245)-(1))|0);
 var $38=(($s_247+$28)|0);
 var $39=((($_344)-($28))|0);
 var $40=((($cnt_246)+(1))|0);
 var $41=($_344|0)==($28|0);
 var $42=($37|0)==0;
 var $or_cond41=$41|$42;
 if($or_cond41){var $cnt_3=$40;label=15;break;}else{var $_344=$39;var $_245=$37;var $cnt_246=$40;var $s_247=$38;var $26=$36;label=11;break;}
 case 15: 
 var $cnt_3;
 if($1){label=16;break;}else{label=17;break;}
 case 16: 
 var $44=HEAP32[(($ws)>>2)];
 HEAP32[(($wcs)>>2)]=$44;
 label=17;break;
 case 17: 
 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }
}
function _wcsrtombs($s,$ws,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $1=($s|0)==0;
 if($1){label=4;break;}else{label=2;break;}
 case 2: 
 var $2=($n>>>0)>3;
 if($2){label=3;break;}else{var $_252_lcssa=$n;var $_049_lcssa=$s;label=9;break;}
 case 3: 
 var $_pre88=HEAP32[(($ws)>>2)];
 var $_25272=$n;var $_04973=$s;var $18=$_pre88;label=8;break;
 case 4: 
 var $4=HEAP32[(($ws)>>2)];
 var $5=(($buf)|0);
 var $6=HEAP32[(($4)>>2)];
 var $7=($6|0)==0;
 if($7){var $_0=0;label=26;break;}else{var $_05055=0;var $ws2_056=$4;var $8=$6;label=5;break;}
 case 5: 
 var $8;
 var $ws2_056;
 var $_05055;
 var $9=($8>>>0)>127;
 if($9){label=6;break;}else{var $_pn=1;label=7;break;}
 case 6: 
 var $11=_wcrtomb($5,$8,0);
 var $12=($11|0)==-1;
 if($12){var $_0=-1;label=26;break;}else{var $_pn=$11;label=7;break;}
 case 7: 
 var $_pn;
 var $_151=((($_pn)+($_05055))|0);
 var $14=(($ws2_056+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $_0=$_151;label=26;break;}else{var $_05055=$_151;var $ws2_056=$14;var $8=$15;label=5;break;}
 case 8: 
 var $18;
 var $_04973;
 var $_25272;
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){var $_252_lcssa=$_25272;var $_049_lcssa=$_04973;label=9;break;}else{label=11;break;}
 case 9: 
 var $_049_lcssa;
 var $_252_lcssa;
 var $21=($_252_lcssa|0)==0;
 if($21){var $_461=0;label=25;break;}else{label=10;break;}
 case 10: 
 var $22=(($buf)|0);
 var $_pre=HEAP32[(($ws)>>2)];
 var $_465=$_252_lcssa;var $_266=$_049_lcssa;var $40=$_pre;label=16;break;
 case 11: 
 var $24=($19>>>0)>127;
 if($24){label=12;break;}else{label=14;break;}
 case 12: 
 var $26=_wcrtomb($_04973,$19,0);
 var $27=($26|0)==-1;
 if($27){var $_0=-1;label=26;break;}else{label=13;break;}
 case 13: 
 var $29=(($_04973+$26)|0);
 var $30=((($_25272)-($26))|0);
 var $_1=$29;var $_353=$30;var $36=$18;label=15;break;
 case 14: 
 var $32=(($19)&255);
 var $33=(($_04973+1)|0);
 HEAP8[($_04973)]=$32;
 var $34=((($_25272)-(1))|0);
 var $_pre89=HEAP32[(($ws)>>2)];
 var $_1=$33;var $_353=$34;var $36=$_pre89;label=15;break;
 case 15: 
 var $36;
 var $_353;
 var $_1;
 var $37=(($36+4)|0);
 HEAP32[(($ws)>>2)]=$37;
 var $38=($_353>>>0)>3;
 if($38){var $_25272=$_353;var $_04973=$_1;var $18=$37;label=8;break;}else{var $_252_lcssa=$_353;var $_049_lcssa=$_1;label=9;break;}
 case 16: 
 var $40;
 var $_266;
 var $_465;
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=24;break;}else{label=17;break;}
 case 17: 
 var $44=($41>>>0)>127;
 if($44){label=18;break;}else{label=22;break;}
 case 18: 
 var $46=_wcrtomb($22,$41,0);
 var $47=($46|0)==-1;
 if($47){var $_0=-1;label=26;break;}else{label=19;break;}
 case 19: 
 var $49=($46>>>0)>($_465>>>0);
 if($49){label=20;break;}else{label=21;break;}
 case 20: 
 var $51=((($n)-($_465))|0);
 var $_0=$51;label=26;break;
 case 21: 
 var $53=HEAP32[(($40)>>2)];
 var $54=_wcrtomb($_266,$53,0);
 var $55=(($_266+$46)|0);
 var $56=((($_465)-($46))|0);
 var $_3=$55;var $_5=$56;var $61=$40;label=23;break;
 case 22: 
 var $58=(($41)&255);
 var $59=(($_266+1)|0);
 HEAP8[($_266)]=$58;
 var $60=((($_465)-(1))|0);
 var $_pre87=HEAP32[(($ws)>>2)];
 var $_3=$59;var $_5=$60;var $61=$_pre87;label=23;break;
 case 23: 
 var $61;
 var $_5;
 var $_3;
 var $62=(($61+4)|0);
 HEAP32[(($ws)>>2)]=$62;
 var $63=($_5|0)==0;
 if($63){var $_461=0;label=25;break;}else{var $_465=$_5;var $_266=$_3;var $40=$62;label=16;break;}
 case 24: 
 HEAP8[($_266)]=0;
 var $_461=$_465;label=25;break;
 case 25: 
 var $_461;
 HEAP32[(($ws)>>2)]=0;
 var $65=((($n)-($_461))|0);
 var $_0=$65;label=26;break;
 case 26: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcslen($s){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$s;label=2;break;
 case 2: 
 var $_0;
 var $2=HEAP32[(($_0)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0+4)|0);
 if($3){label=3;break;}else{var $_0=$4;label=2;break;}
 case 3: 
 var $6=$_0;
 var $7=$s;
 var $8=((($6)-($7))|0);
 var $9=$8>>2;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemcpy($d,$s,$n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_056=$s;var $_047=$n;var $_08=$d;label=2;break;}
 case 2: 
 var $_08;
 var $_047;
 var $_056;
 var $2=((($_047)-(1))|0);
 var $3=(($_056+4)|0);
 var $4=HEAP32[(($_056)>>2)];
 var $5=(($_08+4)|0);
 HEAP32[(($_08)>>2)]=$4;
 var $6=($2|0)==0;
 if($6){label=3;break;}else{var $_056=$3;var $_047=$2;var $_08=$5;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemmove($d,$s,$n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$d;
 var $2=$s;
 var $3=((($1)-($2))|0);
 var $4=$3>>2;
 var $5=($4>>>0)<($n>>>0);
 var $6=($n|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 if($6){label=6;break;}else{var $_01316=$s;var $_117=$n;var $_018=$d;label=5;break;}
 case 3: 
 if($6){label=6;break;}else{var $_in=$n;label=4;break;}
 case 4: 
 var $_in;
 var $7=((($_in)-(1))|0);
 var $8=(($s+($7<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($d+($7<<2))|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=($7|0)==0;
 if($11){label=6;break;}else{var $_in=$7;label=4;break;}
 case 5: 
 var $_018;
 var $_117;
 var $_01316;
 var $12=((($_117)-(1))|0);
 var $13=(($_01316+4)|0);
 var $14=HEAP32[(($_01316)>>2)];
 var $15=(($_018+4)|0);
 HEAP32[(($_018)>>2)]=$14;
 var $16=($12|0)==0;
 if($16){label=6;break;}else{var $_01316=$13;var $_117=$12;var $_018=$15;label=5;break;}
 case 6: 
 return $d;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemset($d,$c,$n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_045=$n;var $_06=$d;label=2;break;}
 case 2: 
 var $_06;
 var $_045;
 var $2=((($_045)-(1))|0);
 var $3=(($_06+4)|0);
 HEAP32[(($_06)>>2)]=$c;
 var $4=($2|0)==0;
 if($4){label=3;break;}else{var $_045=$2;var $_06=$3;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt9type_infoD2Ev($this){
 var label=0;
 return;
}
function __ZNSt8bad_castC2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5384;
 return;
}
function __ZNSt8bad_castD0Ev($this){
 var label=0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt8bad_castD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt8bad_cast4whatEv($this){
 var label=0;
 return 1512;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 var label=0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 var label=0;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=(($this)|0);
 var $2=(($thrown_type)|0);
 var $3=($1|0)==($2|0);
 if($3){var $_0=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=($thrown_type|0)==0;
 if($5){var $_0=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $7=$thrown_type;
 var $8=___dynamic_cast($7,13080,13064,-1);
 var $9=$8;
 var $10=($8|0)==0;
 if($10){var $_0=0;label=6;break;}else{label=4;break;}
 case 4: 
 var $12=$info;
 _memset($12, 0, 56)|0;
 var $13=(($info)|0);
 HEAP32[(($13)>>2)]=$9;
 var $14=(($info+8)|0);
 HEAP32[(($14)>>2)]=$this;
 var $15=(($info+12)|0);
 HEAP32[(($15)>>2)]=-1;
 var $16=(($info+48)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=$8;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+28)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$20]($9,$info,$21,1);
 var $22=(($info+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==1;
 if($24){label=5;break;}else{var $_0=0;label=6;break;}
 case 5: 
 var $26=(($info+16)|0);
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$27;
 var $_0=1;label=6;break;
 case 6: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($info+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($5)>>2)]=$adjustedPtr;
 var $9=(($info+24)|0);
 HEAP32[(($9)>>2)]=$path_below;
 var $10=(($info+36)|0);
 HEAP32[(($10)>>2)]=1;
 label=8;break;
 case 4: 
 var $12=($6|0)==($adjustedPtr|0);
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 var $14=(($info+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==2;
 if($16){label=6;break;}else{label=8;break;}
 case 6: 
 HEAP32[(($14)>>2)]=$path_below;
 label=8;break;
 case 7: 
 var $19=(($info+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+(1))|0);
 HEAP32[(($19)>>2)]=$21;
 var $22=(($info+24)|0);
 HEAP32[(($22)>>2)]=2;
 var $23=(($info+54)|0);
 HEAP8[($23)]=1;
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=9;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=9;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=9;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 FUNCTION_TABLE[$32]($28,$info,$adjustedPtr,$path_below);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=16;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=16;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=16;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=16;break;
 case 8: 
 var $27=(($this+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($this+16+($28<<3))|0);
 var $30=(($this+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31>>8;
 var $33=$31&1;
 var $34=($33|0)==0;
 if($34){var $offset_to_base_0_i16=$32;label=10;break;}else{label=9;break;}
 case 9: 
 var $36=$adjustedPtr;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+$32)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $offset_to_base_0_i16=$40;label=10;break;
 case 10: 
 var $offset_to_base_0_i16;
 var $41=(($this+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+28)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($adjustedPtr+$offset_to_base_0_i16)|0);
 var $48=$31&2;
 var $49=($48|0)!=0;
 var $50=($49?$path_below:2);
 FUNCTION_TABLE[$46]($42,$info,$47,$50);
 var $51=($28|0)>1;
 if($51){label=11;break;}else{label=16;break;}
 case 11: 
 var $52=(($this+24)|0);
 var $53=(($info+54)|0);
 var $54=$adjustedPtr;
 var $p_0=$52;label=12;break;
 case 12: 
 var $p_0;
 var $56=(($p_0+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57>>8;
 var $59=$57&1;
 var $60=($59|0)==0;
 if($60){var $offset_to_base_0_i=$58;label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($54)>>2)];
 var $63=(($62+$58)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i;
 var $66=(($p_0)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($adjustedPtr+$offset_to_base_0_i)|0);
 var $73=$57&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$72,$75);
 var $76=HEAP8[($53)];
 var $77=$76&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=15;break;}else{label=16;break;}
 case 15: 
 var $80=(($p_0+8)|0);
 var $81=($80>>>0)<($29>>>0);
 if($81){var $p_0=$80;label=12;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=$static_ptr;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(8))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($static_ptr+$5)|0);
 var $7=((($2)-(4))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 var $10=(($info)|0);
 HEAP32[(($10)>>2)]=$dst_type;
 var $11=(($info+4)|0);
 HEAP32[(($11)>>2)]=$static_ptr;
 var $12=(($info+8)|0);
 HEAP32[(($12)>>2)]=$static_type;
 var $13=(($info+12)|0);
 HEAP32[(($13)>>2)]=$src2dst_offset;
 var $14=(($info+16)|0);
 var $15=(($info+20)|0);
 var $16=(($info+24)|0);
 var $17=(($info+28)|0);
 var $18=(($info+32)|0);
 var $19=(($info+40)|0);
 var $20=$8;
 var $21=(($dst_type)|0);
 var $22=($20|0)==($21|0);
 var $23=$14;
 _memset($23, 0, 39)|0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $25=(($info+48)|0);
 HEAP32[(($25)>>2)]=1;
 var $26=$8;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+20)|0);
 var $29=HEAP32[(($28)>>2)];
 FUNCTION_TABLE[$29]($9,$info,$6,$6,1,0);
 var $30=HEAP32[(($16)>>2)];
 var $31=($30|0)==1;
 var $_=($31?$6:0);
 STACKTOP=sp;return $_;
 case 3: 
 var $33=(($info+36)|0);
 var $34=$8;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 FUNCTION_TABLE[$37]($9,$info,$6,1,0);
 var $38=HEAP32[(($33)>>2)];
 if(($38|0)==0){ label=4;break;}else if(($38|0)==1){ label=7;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 4: 
 var $40=HEAP32[(($19)>>2)];
 var $41=($40|0)==1;
 if($41){label=5;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 5: 
 var $43=HEAP32[(($17)>>2)];
 var $44=($43|0)==1;
 if($44){label=6;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 6: 
 var $46=HEAP32[(($18)>>2)];
 var $47=($46|0)==1;
 var $48=HEAP32[(($15)>>2)];
 var $_13=($47?$48:0);
 var $dst_ptr_0=$_13;label=12;break;
 case 7: 
 var $50=HEAP32[(($16)>>2)];
 var $51=($50|0)==1;
 if($51){label=11;break;}else{label=8;break;}
 case 8: 
 var $53=HEAP32[(($19)>>2)];
 var $54=($53|0)==0;
 if($54){label=9;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 9: 
 var $56=HEAP32[(($17)>>2)];
 var $57=($56|0)==1;
 if($57){label=10;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 10: 
 var $59=HEAP32[(($18)>>2)];
 var $60=($59|0)==1;
 if($60){label=11;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 11: 
 var $62=HEAP32[(($14)>>2)];
 var $dst_ptr_0=$62;label=12;break;
 case 12: 
 var $dst_ptr_0;
 STACKTOP=sp;return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=53;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=53;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=53;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=29;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=53;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=53;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=53;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($this+16+($39<<3))|0);
 var $41=($39|0)>0;
 if($41){label=12;break;}else{var $is_dst_type_derived_from_static_type_2_off098=0;label=23;break;}
 case 12: 
 var $42=(($this+16)|0);
 var $43=(($info+52)|0);
 var $44=(($info+53)|0);
 var $45=(($info+54)|0);
 var $46=(($this+8)|0);
 var $47=(($info+24)|0);
 var $48=$current_ptr;
 var $does_dst_type_point_to_our_static_type_0_off087=0;var $p_088=$42;var $is_dst_type_derived_from_static_type_0_off089=0;label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off089;
 var $p_088;
 var $does_dst_type_point_to_our_static_type_0_off087;
 HEAP8[($43)]=0;
 HEAP8[($44)]=0;
 var $50=(($p_088+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51>>8;
 var $53=$51&1;
 var $54=($53|0)==0;
 if($54){var $offset_to_base_0_i81=$52;label=15;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($48)>>2)];
 var $57=(($56+$52)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $offset_to_base_0_i81=$59;label=15;break;
 case 15: 
 var $offset_to_base_0_i81;
 var $60=(($p_088)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($current_ptr+$offset_to_base_0_i81)|0);
 var $67=$51>>>1;
 var $68=$67&1;
 var $69=(((2)-($68))|0);
 FUNCTION_TABLE[$65]($61,$info,$current_ptr,$66,$69,$use_strcmp);
 var $70=HEAP8[($45)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=16;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_0_off089;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off087;label=22;break;}
 case 16: 
 var $74=HEAP8[($44)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){var $is_dst_type_derived_from_static_type_1_off0=$is_dst_type_derived_from_static_type_0_off089;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off087;label=21;break;}else{label=17;break;}
 case 17: 
 var $78=HEAP8[($43)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=20;break;}else{label=18;break;}
 case 18: 
 var $82=HEAP32[(($47)>>2)];
 var $83=($82|0)==1;
 if($83){label=27;break;}else{label=19;break;}
 case 19: 
 var $85=HEAP32[(($46)>>2)];
 var $86=$85&2;
 var $87=($86|0)==0;
 if($87){label=27;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=1;label=21;break;}
 case 20: 
 var $89=HEAP32[(($46)>>2)];
 var $90=$89&1;
 var $91=($90|0)==0;
 if($91){var $is_dst_type_derived_from_static_type_2_off0=1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off087;label=22;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off087;label=21;break;}
 case 21: 
 var $does_dst_type_point_to_our_static_type_1_off0;
 var $is_dst_type_derived_from_static_type_1_off0;
 var $93=(($p_088+8)|0);
 var $94=($93>>>0)<($40>>>0);
 if($94){var $does_dst_type_point_to_our_static_type_0_off087=$does_dst_type_point_to_our_static_type_1_off0;var $p_088=$93;var $is_dst_type_derived_from_static_type_0_off089=$is_dst_type_derived_from_static_type_1_off0;label=13;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;label=22;break;}
 case 22: 
 var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
 var $is_dst_type_derived_from_static_type_2_off0;
 if($does_dst_type_point_to_our_static_type_0_off0_lcssa){var $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off0;label=26;break;}else{var $is_dst_type_derived_from_static_type_2_off098=$is_dst_type_derived_from_static_type_2_off0;label=23;break;}
 case 23: 
 var $is_dst_type_derived_from_static_type_2_off098;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $95=(($info+40)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=((($96)+(1))|0);
 HEAP32[(($95)>>2)]=$97;
 var $98=(($info+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==1;
 if($100){label=24;break;}else{var $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off098;label=26;break;}
 case 24: 
 var $102=(($info+24)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==2;
 if($104){label=25;break;}else{var $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off098;label=26;break;}
 case 25: 
 var $106=(($info+54)|0);
 HEAP8[($106)]=1;
 if($is_dst_type_derived_from_static_type_2_off098){label=27;break;}else{label=28;break;}
 case 26: 
 var $is_dst_type_derived_from_static_type_2_off099;
 if($is_dst_type_derived_from_static_type_2_off099){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($34)>>2)]=3;
 label=53;break;
 case 28: 
 HEAP32[(($34)>>2)]=4;
 label=53;break;
 case 29: 
 var $110=(($this+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($this+16+($111<<3))|0);
 var $113=(($this+20)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$114>>8;
 var $116=$114&1;
 var $117=($116|0)==0;
 if($117){var $offset_to_base_0_i82=$115;label=31;break;}else{label=30;break;}
 case 30: 
 var $119=$current_ptr;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+$115)|0);
 var $122=$121;
 var $123=HEAP32[(($122)>>2)];
 var $offset_to_base_0_i82=$123;label=31;break;
 case 31: 
 var $offset_to_base_0_i82;
 var $124=(($this+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$125;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+24)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($current_ptr+$offset_to_base_0_i82)|0);
 var $131=$114&2;
 var $132=($131|0)!=0;
 var $133=($132?$path_below:2);
 FUNCTION_TABLE[$129]($125,$info,$130,$133,$use_strcmp);
 var $134=(($this+24)|0);
 var $135=($111|0)>1;
 if($135){label=32;break;}else{label=53;break;}
 case 32: 
 var $137=(($this+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$138&2;
 var $140=($139|0)==0;
 if($140){label=33;break;}else{label=34;break;}
 case 33: 
 var $142=(($info+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==1;
 if($144){label=34;break;}else{label=39;break;}
 case 34: 
 var $145=(($info+54)|0);
 var $146=$current_ptr;
 var $p2_0=$134;label=35;break;
 case 35: 
 var $p2_0;
 var $148=HEAP8[($145)];
 var $149=$148&1;
 var $150=(($149<<24)>>24)==0;
 if($150){label=36;break;}else{label=53;break;}
 case 36: 
 var $152=(($p2_0+4)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153>>8;
 var $155=$153&1;
 var $156=($155|0)==0;
 if($156){var $offset_to_base_0_i79=$154;label=38;break;}else{label=37;break;}
 case 37: 
 var $158=HEAP32[(($146)>>2)];
 var $159=(($158+$154)|0);
 var $160=$159;
 var $161=HEAP32[(($160)>>2)];
 var $offset_to_base_0_i79=$161;label=38;break;
 case 38: 
 var $offset_to_base_0_i79;
 var $162=(($p2_0)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=$163;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+24)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($current_ptr+$offset_to_base_0_i79)|0);
 var $169=$153&2;
 var $170=($169|0)!=0;
 var $171=($170?$path_below:2);
 FUNCTION_TABLE[$167]($163,$info,$168,$171,$use_strcmp);
 var $172=(($p2_0+8)|0);
 var $173=($172>>>0)<($112>>>0);
 if($173){var $p2_0=$172;label=35;break;}else{label=53;break;}
 case 39: 
 var $175=$138&1;
 var $176=($175|0)==0;
 if($176){label=41;break;}else{label=40;break;}
 case 40: 
 var $177=(($info+24)|0);
 var $178=(($info+54)|0);
 var $179=$current_ptr;
 var $p2_1=$134;label=42;break;
 case 41: 
 var $180=(($info+54)|0);
 var $181=$current_ptr;
 var $p2_2=$134;label=48;break;
 case 42: 
 var $p2_1;
 var $183=HEAP8[($178)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=43;break;}else{label=53;break;}
 case 43: 
 var $187=HEAP32[(($142)>>2)];
 var $188=($187|0)==1;
 if($188){label=44;break;}else{label=45;break;}
 case 44: 
 var $190=HEAP32[(($177)>>2)];
 var $191=($190|0)==1;
 if($191){label=53;break;}else{label=45;break;}
 case 45: 
 var $193=(($p2_1+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$194>>8;
 var $196=$194&1;
 var $197=($196|0)==0;
 if($197){var $offset_to_base_0_i77=$195;label=47;break;}else{label=46;break;}
 case 46: 
 var $199=HEAP32[(($179)>>2)];
 var $200=(($199+$195)|0);
 var $201=$200;
 var $202=HEAP32[(($201)>>2)];
 var $offset_to_base_0_i77=$202;label=47;break;
 case 47: 
 var $offset_to_base_0_i77;
 var $203=(($p2_1)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=$204;
 var $206=HEAP32[(($205)>>2)];
 var $207=(($206+24)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($current_ptr+$offset_to_base_0_i77)|0);
 var $210=$194&2;
 var $211=($210|0)!=0;
 var $212=($211?$path_below:2);
 FUNCTION_TABLE[$208]($204,$info,$209,$212,$use_strcmp);
 var $213=(($p2_1+8)|0);
 var $214=($213>>>0)<($112>>>0);
 if($214){var $p2_1=$213;label=42;break;}else{label=53;break;}
 case 48: 
 var $p2_2;
 var $216=HEAP8[($180)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){label=49;break;}else{label=53;break;}
 case 49: 
 var $220=HEAP32[(($142)>>2)];
 var $221=($220|0)==1;
 if($221){label=53;break;}else{label=50;break;}
 case 50: 
 var $223=(($p2_2+4)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$224>>8;
 var $226=$224&1;
 var $227=($226|0)==0;
 if($227){var $offset_to_base_0_i=$225;label=52;break;}else{label=51;break;}
 case 51: 
 var $229=HEAP32[(($181)>>2)];
 var $230=(($229+$225)|0);
 var $231=$230;
 var $232=HEAP32[(($231)>>2)];
 var $offset_to_base_0_i=$232;label=52;break;
 case 52: 
 var $offset_to_base_0_i;
 var $233=(($p2_2)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$234;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+24)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($current_ptr+$offset_to_base_0_i)|0);
 var $240=$224&2;
 var $241=($240|0)!=0;
 var $242=($241?$path_below:2);
 FUNCTION_TABLE[$238]($234,$info,$239,$242,$use_strcmp);
 var $243=(($p2_2+8)|0);
 var $244=($243>>>0)<($112>>>0);
 if($244){var $p2_2=$243;label=48;break;}else{label=53;break;}
 case 53: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=20;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=20;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=19;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=20;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=20;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=20;break;}else{label=11;break;}
 case 11: 
 var $38=(($info+52)|0);
 HEAP8[($38)]=0;
 var $39=(($info+53)|0);
 HEAP8[($39)]=0;
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+20)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $46=HEAP8[($39)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $is_dst_type_derived_from_static_type_0_off036=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $50=HEAP8[($38)];
 var $51=$50&1;
 var $not_=(($51<<24)>>24)==0;
 if($not_){var $is_dst_type_derived_from_static_type_0_off036=1;label=13;break;}else{label=17;break;}
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off036;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $52=(($info+40)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)+(1))|0);
 HEAP32[(($52)>>2)]=$54;
 var $55=(($info+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==1;
 if($57){label=14;break;}else{label=16;break;}
 case 14: 
 var $59=(($info+24)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==2;
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=(($info+54)|0);
 HEAP8[($63)]=1;
 if($is_dst_type_derived_from_static_type_0_off036){label=17;break;}else{label=18;break;}
 case 16: 
 if($is_dst_type_derived_from_static_type_0_off036){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($34)>>2)]=3;
 label=20;break;
 case 18: 
 HEAP32[(($34)>>2)]=4;
 label=20;break;
 case 19: 
 var $67=(($this+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+24)|0);
 var $72=HEAP32[(($71)>>2)];
 FUNCTION_TABLE[$72]($68,$info,$current_ptr,$path_below,$use_strcmp);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=5;break;}
 case 2: 
 var $5=(($info+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($current_ptr|0);
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 var $9=(($info+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==1;
 if($11){label=14;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($9)>>2)]=$path_below;
 label=14;break;
 case 5: 
 var $14=(($info)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==($this|0);
 if($16){label=6;break;}else{label=14;break;}
 case 6: 
 var $18=(($info+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==($current_ptr|0);
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $22=(($info+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==($current_ptr|0);
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=($path_below|0)==1;
 if($26){label=9;break;}else{label=14;break;}
 case 9: 
 var $28=(($info+32)|0);
 HEAP32[(($28)>>2)]=1;
 label=14;break;
 case 10: 
 var $30=(($info+32)|0);
 HEAP32[(($30)>>2)]=$path_below;
 HEAP32[(($22)>>2)]=$current_ptr;
 var $31=(($info+40)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=(($info+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 if($36){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=(($info+24)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==2;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=13;break;
 case 13: 
 var $44=(($info+44)|0);
 HEAP32[(($44)>>2)]=4;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=26;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=26;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=26;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond23_i=$36&$37;
 if($or_cond23_i){label=10;break;}else{label=26;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=26;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=26;break;
 case 12: 
 var $46=(($info+52)|0);
 var $47=HEAP8[($46)];
 var $48=$47&1;
 var $49=(($info+53)|0);
 var $50=HEAP8[($49)];
 var $51=$50&1;
 var $52=(($this+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($this+16+($53<<3))|0);
 HEAP8[($46)]=0;
 HEAP8[($49)]=0;
 var $55=(($this+20)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$56>>8;
 var $58=$56&1;
 var $59=($58|0)==0;
 if($59){var $offset_to_base_0_i32=$57;label=14;break;}else{label=13;break;}
 case 13: 
 var $61=$current_ptr;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+$57)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i32=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i32;
 var $66=(($this+16)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+20)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($current_ptr+$offset_to_base_0_i32)|0);
 var $73=$56&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$dst_ptr,$72,$75,$use_strcmp);
 var $76=($53|0)>1;
 if($76){label=15;break;}else{label=25;break;}
 case 15: 
 var $77=(($this+24)|0);
 var $78=(($info+24)|0);
 var $79=(($this+8)|0);
 var $80=(($info+54)|0);
 var $81=$current_ptr;
 var $p_0=$77;label=16;break;
 case 16: 
 var $p_0;
 var $83=HEAP8[($80)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){label=17;break;}else{label=25;break;}
 case 17: 
 var $87=HEAP8[($46)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=20;break;}else{label=18;break;}
 case 18: 
 var $91=HEAP32[(($78)>>2)];
 var $92=($91|0)==1;
 if($92){label=25;break;}else{label=19;break;}
 case 19: 
 var $94=HEAP32[(($79)>>2)];
 var $95=$94&2;
 var $96=($95|0)==0;
 if($96){label=25;break;}else{label=22;break;}
 case 20: 
 var $98=HEAP8[($49)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=22;break;}else{label=21;break;}
 case 21: 
 var $102=HEAP32[(($79)>>2)];
 var $103=$102&1;
 var $104=($103|0)==0;
 if($104){label=25;break;}else{label=22;break;}
 case 22: 
 HEAP8[($46)]=0;
 HEAP8[($49)]=0;
 var $106=(($p_0+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$107>>8;
 var $109=$107&1;
 var $110=($109|0)==0;
 if($110){var $offset_to_base_0_i=$108;label=24;break;}else{label=23;break;}
 case 23: 
 var $112=HEAP32[(($81)>>2)];
 var $113=(($112+$108)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $offset_to_base_0_i=$115;label=24;break;
 case 24: 
 var $offset_to_base_0_i;
 var $116=(($p_0)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+20)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(($current_ptr+$offset_to_base_0_i)|0);
 var $123=$107&2;
 var $124=($123|0)!=0;
 var $125=($124?$path_below:2);
 FUNCTION_TABLE[$121]($117,$info,$dst_ptr,$122,$125,$use_strcmp);
 var $126=(($p_0+8)|0);
 var $127=($126>>>0)<($54>>>0);
 if($127){var $p_0=$126;label=16;break;}else{label=25;break;}
 case 25: 
 HEAP8[($46)]=$48;
 HEAP8[($49)]=$51;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=13;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=13;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=13;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond23_i=$36&$37;
 if($or_cond23_i){label=10;break;}else{label=13;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=13;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=13;break;
 case 12: 
 var $46=(($this+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+20)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($47,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=12;break;}
 case 2: 
 var $5=(($info+53)|0);
 HEAP8[($5)]=1;
 var $6=(($info+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==($current_ptr|0);
 if($8){label=3;break;}else{label=12;break;}
 case 3: 
 var $10=(($info+52)|0);
 HEAP8[($10)]=1;
 var $11=(($info+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$dst_ptr;
 var $15=(($info+24)|0);
 HEAP32[(($15)>>2)]=$path_below;
 var $16=(($info+36)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=(($info+48)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==1;
 var $20=($path_below|0)==1;
 var $or_cond_i=$19&$20;
 if($or_cond_i){label=5;break;}else{label=12;break;}
 case 5: 
 var $22=(($info+54)|0);
 HEAP8[($22)]=1;
 label=12;break;
 case 6: 
 var $24=($12|0)==($dst_ptr|0);
 if($24){label=7;break;}else{label=11;break;}
 case 7: 
 var $26=(($info+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==2;
 if($28){label=8;break;}else{var $31=$27;label=9;break;}
 case 8: 
 HEAP32[(($26)>>2)]=$path_below;
 var $31=$path_below;label=9;break;
 case 9: 
 var $31;
 var $32=(($info+48)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==1;
 var $35=($31|0)==1;
 var $or_cond23_i=$34&$35;
 if($or_cond23_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $37=(($info+54)|0);
 HEAP8[($37)]=1;
 label=12;break;
 case 11: 
 var $39=(($info+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((13416)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((13456+($18<<2))|0);
 var $20=$19;
 var $_sum111=((($18)+(2))|0);
 var $21=((13456+($_sum111<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((13416)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((13432)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum113114=$40|4;
 var $44=(($43+$_sum113114)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 var $50=HEAP32[((13424)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((13456+($83<<2))|0);
 var $85=$84;
 var $_sum104=((($83)+(2))|0);
 var $86=((13456+($_sum104<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((13416)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((13432)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum106107=$8|4;
 var $113=(($109+$_sum106107)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((13424)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((13436)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((13456+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((13416)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((13416)>>2)]=$130;
 var $_sum109_pre=((($122)+(2))|0);
 var $_pre=((13456+($_sum109_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum110=((($122)+(2))|0);
 var $132=((13456+($_sum110<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((13432)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((13424)>>2)]=$106;
 HEAP32[((13436)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 var $145=HEAP32[((13420)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((13720+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((13432)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((13720+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=HEAP32[(($242)>>2)];
 var $249=1<<$248;
 var $250=$249^-1;
 var $251=HEAP32[((13420)>>2)];
 var $252=$251&$250;
 HEAP32[((13420)>>2)]=$252;
 label=67;break;
 case 51: 
 var $254=$201;
 var $255=HEAP32[((13432)>>2)];
 var $256=($254>>>0)<($255>>>0);
 if($256){label=55;break;}else{label=52;break;}
 case 52: 
 var $258=(($201+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==($v_0_i|0);
 if($260){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($258)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $263=(($201+20)|0);
 HEAP32[(($263)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $266=($R_1_i|0)==0;
 if($266){label=67;break;}else{label=57;break;}
 case 57: 
 var $268=$R_1_i;
 var $269=HEAP32[((13432)>>2)];
 var $270=($268>>>0)<($269>>>0);
 if($270){label=66;break;}else{label=58;break;}
 case 58: 
 var $272=(($R_1_i+24)|0);
 HEAP32[(($272)>>2)]=$201;
 var $273=(($v_0_i+16)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=62;break;}else{label=59;break;}
 case 59: 
 var $277=$274;
 var $278=HEAP32[((13432)>>2)];
 var $279=($277>>>0)<($278>>>0);
 if($279){label=61;break;}else{label=60;break;}
 case 60: 
 var $281=(($R_1_i+16)|0);
 HEAP32[(($281)>>2)]=$274;
 var $282=(($274+24)|0);
 HEAP32[(($282)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $285=(($v_0_i+20)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=67;break;}else{label=63;break;}
 case 63: 
 var $289=$286;
 var $290=HEAP32[((13432)>>2)];
 var $291=($289>>>0)<($290>>>0);
 if($291){label=65;break;}else{label=64;break;}
 case 64: 
 var $293=(($R_1_i+20)|0);
 HEAP32[(($293)>>2)]=$286;
 var $294=(($286+24)|0);
 HEAP32[(($294)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $298=($rsize_0_i>>>0)<16;
 if($298){label=68;break;}else{label=69;break;}
 case 68: 
 var $300=((($rsize_0_i)+($8))|0);
 var $301=$300|3;
 var $302=(($v_0_i+4)|0);
 HEAP32[(($302)>>2)]=$301;
 var $_sum4_i=((($300)+(4))|0);
 var $303=(($192+$_sum4_i)|0);
 var $304=$303;
 var $305=HEAP32[(($304)>>2)];
 var $306=$305|1;
 HEAP32[(($304)>>2)]=$306;
 label=77;break;
 case 69: 
 var $308=$8|3;
 var $309=(($v_0_i+4)|0);
 HEAP32[(($309)>>2)]=$308;
 var $310=$rsize_0_i|1;
 var $_sum_i137=$8|4;
 var $311=(($192+$_sum_i137)|0);
 var $312=$311;
 HEAP32[(($312)>>2)]=$310;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $313=(($192+$_sum1_i)|0);
 var $314=$313;
 HEAP32[(($314)>>2)]=$rsize_0_i;
 var $315=HEAP32[((13424)>>2)];
 var $316=($315|0)==0;
 if($316){label=75;break;}else{label=70;break;}
 case 70: 
 var $318=HEAP32[((13436)>>2)];
 var $319=$315>>>3;
 var $320=$319<<1;
 var $321=((13456+($320<<2))|0);
 var $322=$321;
 var $323=HEAP32[((13416)>>2)];
 var $324=1<<$319;
 var $325=$323&$324;
 var $326=($325|0)==0;
 if($326){label=71;break;}else{label=72;break;}
 case 71: 
 var $328=$323|$324;
 HEAP32[((13416)>>2)]=$328;
 var $_sum2_pre_i=((($320)+(2))|0);
 var $_pre_i=((13456+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$322;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($320)+(2))|0);
 var $330=((13456+($_sum3_i<<2))|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$331;
 var $333=HEAP32[((13432)>>2)];
 var $334=($332>>>0)<($333>>>0);
 if($334){label=73;break;}else{var $F1_0_i=$331;var $_pre_phi_i=$330;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$318;
 var $337=(($F1_0_i+12)|0);
 HEAP32[(($337)>>2)]=$318;
 var $338=(($318+8)|0);
 HEAP32[(($338)>>2)]=$F1_0_i;
 var $339=(($318+12)|0);
 HEAP32[(($339)>>2)]=$322;
 label=75;break;
 case 75: 
 HEAP32[((13424)>>2)]=$rsize_0_i;
 HEAP32[((13436)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $342=(($v_0_i+8)|0);
 var $343=$342;
 var $344=($342|0)==0;
 if($344){var $nb_0=$8;label=160;break;}else{var $mem_0=$343;label=341;break;}
 case 78: 
 var $346=($bytes>>>0)>4294967231;
 if($346){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $348=((($bytes)+(11))|0);
 var $349=$348&-8;
 var $350=HEAP32[((13420)>>2)];
 var $351=($350|0)==0;
 if($351){var $nb_0=$349;label=160;break;}else{label=80;break;}
 case 80: 
 var $353=(((-$349))|0);
 var $354=$348>>>8;
 var $355=($354|0)==0;
 if($355){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $357=($349>>>0)>16777215;
 if($357){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $359=((($354)+(1048320))|0);
 var $360=$359>>>16;
 var $361=$360&8;
 var $362=$354<<$361;
 var $363=((($362)+(520192))|0);
 var $364=$363>>>16;
 var $365=$364&4;
 var $366=$365|$361;
 var $367=$362<<$365;
 var $368=((($367)+(245760))|0);
 var $369=$368>>>16;
 var $370=$369&2;
 var $371=$366|$370;
 var $372=(((14)-($371))|0);
 var $373=$367<<$370;
 var $374=$373>>>15;
 var $375=((($372)+($374))|0);
 var $376=$375<<1;
 var $377=((($375)+(7))|0);
 var $378=$349>>>($377>>>0);
 var $379=$378&1;
 var $380=$379|$376;
 var $idx_0_i=$380;label=83;break;
 case 83: 
 var $idx_0_i;
 var $382=((13720+($idx_0_i<<2))|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=($383|0)==0;
 if($384){var $v_2_i=0;var $rsize_2_i=$353;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $386=($idx_0_i|0)==31;
 if($386){var $391=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $388=$idx_0_i>>>1;
 var $389=(((25)-($388))|0);
 var $391=$389;label=86;break;
 case 86: 
 var $391;
 var $392=$349<<$391;
 var $v_0_i118=0;var $rsize_0_i117=$353;var $t_0_i116=$383;var $sizebits_0_i=$392;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i116;
 var $rsize_0_i117;
 var $v_0_i118;
 var $394=(($t_0_i116+4)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=$395&-8;
 var $397=((($396)-($349))|0);
 var $398=($397>>>0)<($rsize_0_i117>>>0);
 if($398){label=88;break;}else{var $v_1_i=$v_0_i118;var $rsize_1_i=$rsize_0_i117;label=89;break;}
 case 88: 
 var $400=($396|0)==($349|0);
 if($400){var $v_2_i=$t_0_i116;var $rsize_2_i=$397;var $t_1_i=$t_0_i116;label=90;break;}else{var $v_1_i=$t_0_i116;var $rsize_1_i=$397;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $402=(($t_0_i116+20)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=$sizebits_0_i>>>31;
 var $405=(($t_0_i116+16+($404<<2))|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=($403|0)==0;
 var $408=($403|0)==($406|0);
 var $or_cond_i=$407|$408;
 var $rst_1_i=($or_cond_i?$rst_0_i:$403);
 var $409=($406|0)==0;
 var $410=$sizebits_0_i<<1;
 if($409){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i118=$v_1_i;var $rsize_0_i117=$rsize_1_i;var $t_0_i116=$406;var $sizebits_0_i=$410;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $411=($t_1_i|0)==0;
 var $412=($v_2_i|0)==0;
 var $or_cond21_i=$411&$412;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $414=2<<$idx_0_i;
 var $415=(((-$414))|0);
 var $416=$414|$415;
 var $417=$350&$416;
 var $418=($417|0)==0;
 if($418){var $nb_0=$349;label=160;break;}else{label=92;break;}
 case 92: 
 var $420=(((-$417))|0);
 var $421=$417&$420;
 var $422=((($421)-(1))|0);
 var $423=$422>>>12;
 var $424=$423&16;
 var $425=$422>>>($424>>>0);
 var $426=$425>>>5;
 var $427=$426&8;
 var $428=$427|$424;
 var $429=$425>>>($427>>>0);
 var $430=$429>>>2;
 var $431=$430&4;
 var $432=$428|$431;
 var $433=$429>>>($431>>>0);
 var $434=$433>>>1;
 var $435=$434&2;
 var $436=$432|$435;
 var $437=$433>>>($435>>>0);
 var $438=$437>>>1;
 var $439=$438&1;
 var $440=$436|$439;
 var $441=$437>>>($439>>>0);
 var $442=((($440)+($441))|0);
 var $443=((13720+($442<<2))|0);
 var $444=HEAP32[(($443)>>2)];
 var $t_2_ph_i=$444;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $445=($t_2_ph_i|0)==0;
 if($445){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_228_i=$t_2_ph_i;var $rsize_329_i=$rsize_2_i;var $v_330_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_330_i;
 var $rsize_329_i;
 var $t_228_i;
 var $446=(($t_228_i+4)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=$447&-8;
 var $449=((($448)-($349))|0);
 var $450=($449>>>0)<($rsize_329_i>>>0);
 var $_rsize_3_i=($450?$449:$rsize_329_i);
 var $t_2_v_3_i=($450?$t_228_i:$v_330_i);
 var $451=(($t_228_i+16)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=($452|0)==0;
 if($453){label=95;break;}else{var $t_228_i=$452;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $454=(($t_228_i+20)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=($455|0)==0;
 if($456){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_228_i=$455;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $457=($v_3_lcssa_i|0)==0;
 if($457){var $nb_0=$349;label=160;break;}else{label=97;break;}
 case 97: 
 var $459=HEAP32[((13424)>>2)];
 var $460=((($459)-($349))|0);
 var $461=($rsize_3_lcssa_i>>>0)<($460>>>0);
 if($461){label=98;break;}else{var $nb_0=$349;label=160;break;}
 case 98: 
 var $463=$v_3_lcssa_i;
 var $464=HEAP32[((13432)>>2)];
 var $465=($463>>>0)<($464>>>0);
 if($465){label=158;break;}else{label=99;break;}
 case 99: 
 var $467=(($463+$349)|0);
 var $468=$467;
 var $469=($463>>>0)<($467>>>0);
 if($469){label=100;break;}else{label=158;break;}
 case 100: 
 var $471=(($v_3_lcssa_i+24)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($v_3_lcssa_i+12)|0);
 var $474=HEAP32[(($473)>>2)];
 var $475=($474|0)==($v_3_lcssa_i|0);
 if($475){label=106;break;}else{label=101;break;}
 case 101: 
 var $477=(($v_3_lcssa_i+8)|0);
 var $478=HEAP32[(($477)>>2)];
 var $479=$478;
 var $480=($479>>>0)<($464>>>0);
 if($480){label=105;break;}else{label=102;break;}
 case 102: 
 var $482=(($478+12)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=($483|0)==($v_3_lcssa_i|0);
 if($484){label=103;break;}else{label=105;break;}
 case 103: 
 var $486=(($474+8)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=($487|0)==($v_3_lcssa_i|0);
 if($488){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($482)>>2)]=$474;
 HEAP32[(($486)>>2)]=$478;
 var $R_1_i122=$474;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $491=(($v_3_lcssa_i+20)|0);
 var $492=HEAP32[(($491)>>2)];
 var $493=($492|0)==0;
 if($493){label=107;break;}else{var $R_0_i120=$492;var $RP_0_i119=$491;label=108;break;}
 case 107: 
 var $495=(($v_3_lcssa_i+16)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=($496|0)==0;
 if($497){var $R_1_i122=0;label=113;break;}else{var $R_0_i120=$496;var $RP_0_i119=$495;label=108;break;}
 case 108: 
 var $RP_0_i119;
 var $R_0_i120;
 var $498=(($R_0_i120+20)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=($499|0)==0;
 if($500){label=109;break;}else{var $R_0_i120=$499;var $RP_0_i119=$498;label=108;break;}
 case 109: 
 var $502=(($R_0_i120+16)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=($503|0)==0;
 if($504){label=110;break;}else{var $R_0_i120=$503;var $RP_0_i119=$502;label=108;break;}
 case 110: 
 var $506=$RP_0_i119;
 var $507=($506>>>0)<($464>>>0);
 if($507){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i119)>>2)]=0;
 var $R_1_i122=$R_0_i120;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i122;
 var $511=($472|0)==0;
 if($511){label=133;break;}else{label=114;break;}
 case 114: 
 var $513=(($v_3_lcssa_i+28)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=((13720+($514<<2))|0);
 var $516=HEAP32[(($515)>>2)];
 var $517=($v_3_lcssa_i|0)==($516|0);
 if($517){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($515)>>2)]=$R_1_i122;
 var $cond_i123=($R_1_i122|0)==0;
 if($cond_i123){label=116;break;}else{label=123;break;}
 case 116: 
 var $519=HEAP32[(($513)>>2)];
 var $520=1<<$519;
 var $521=$520^-1;
 var $522=HEAP32[((13420)>>2)];
 var $523=$522&$521;
 HEAP32[((13420)>>2)]=$523;
 label=133;break;
 case 117: 
 var $525=$472;
 var $526=HEAP32[((13432)>>2)];
 var $527=($525>>>0)<($526>>>0);
 if($527){label=121;break;}else{label=118;break;}
 case 118: 
 var $529=(($472+16)|0);
 var $530=HEAP32[(($529)>>2)];
 var $531=($530|0)==($v_3_lcssa_i|0);
 if($531){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($529)>>2)]=$R_1_i122;
 label=122;break;
 case 120: 
 var $534=(($472+20)|0);
 HEAP32[(($534)>>2)]=$R_1_i122;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $537=($R_1_i122|0)==0;
 if($537){label=133;break;}else{label=123;break;}
 case 123: 
 var $539=$R_1_i122;
 var $540=HEAP32[((13432)>>2)];
 var $541=($539>>>0)<($540>>>0);
 if($541){label=132;break;}else{label=124;break;}
 case 124: 
 var $543=(($R_1_i122+24)|0);
 HEAP32[(($543)>>2)]=$472;
 var $544=(($v_3_lcssa_i+16)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=($545|0)==0;
 if($546){label=128;break;}else{label=125;break;}
 case 125: 
 var $548=$545;
 var $549=HEAP32[((13432)>>2)];
 var $550=($548>>>0)<($549>>>0);
 if($550){label=127;break;}else{label=126;break;}
 case 126: 
 var $552=(($R_1_i122+16)|0);
 HEAP32[(($552)>>2)]=$545;
 var $553=(($545+24)|0);
 HEAP32[(($553)>>2)]=$R_1_i122;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $556=(($v_3_lcssa_i+20)|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=($557|0)==0;
 if($558){label=133;break;}else{label=129;break;}
 case 129: 
 var $560=$557;
 var $561=HEAP32[((13432)>>2)];
 var $562=($560>>>0)<($561>>>0);
 if($562){label=131;break;}else{label=130;break;}
 case 130: 
 var $564=(($R_1_i122+20)|0);
 HEAP32[(($564)>>2)]=$557;
 var $565=(($557+24)|0);
 HEAP32[(($565)>>2)]=$R_1_i122;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $569=($rsize_3_lcssa_i>>>0)<16;
 if($569){label=134;break;}else{label=135;break;}
 case 134: 
 var $571=((($rsize_3_lcssa_i)+($349))|0);
 var $572=$571|3;
 var $573=(($v_3_lcssa_i+4)|0);
 HEAP32[(($573)>>2)]=$572;
 var $_sum19_i=((($571)+(4))|0);
 var $574=(($463+$_sum19_i)|0);
 var $575=$574;
 var $576=HEAP32[(($575)>>2)];
 var $577=$576|1;
 HEAP32[(($575)>>2)]=$577;
 label=159;break;
 case 135: 
 var $579=$349|3;
 var $580=(($v_3_lcssa_i+4)|0);
 HEAP32[(($580)>>2)]=$579;
 var $581=$rsize_3_lcssa_i|1;
 var $_sum_i125136=$349|4;
 var $582=(($463+$_sum_i125136)|0);
 var $583=$582;
 HEAP32[(($583)>>2)]=$581;
 var $_sum1_i126=((($rsize_3_lcssa_i)+($349))|0);
 var $584=(($463+$_sum1_i126)|0);
 var $585=$584;
 HEAP32[(($585)>>2)]=$rsize_3_lcssa_i;
 var $586=$rsize_3_lcssa_i>>>3;
 var $587=($rsize_3_lcssa_i>>>0)<256;
 if($587){label=136;break;}else{label=141;break;}
 case 136: 
 var $589=$586<<1;
 var $590=((13456+($589<<2))|0);
 var $591=$590;
 var $592=HEAP32[((13416)>>2)];
 var $593=1<<$586;
 var $594=$592&$593;
 var $595=($594|0)==0;
 if($595){label=137;break;}else{label=138;break;}
 case 137: 
 var $597=$592|$593;
 HEAP32[((13416)>>2)]=$597;
 var $_sum15_pre_i=((($589)+(2))|0);
 var $_pre_i127=((13456+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$591;var $_pre_phi_i128=$_pre_i127;label=140;break;
 case 138: 
 var $_sum18_i=((($589)+(2))|0);
 var $599=((13456+($_sum18_i<<2))|0);
 var $600=HEAP32[(($599)>>2)];
 var $601=$600;
 var $602=HEAP32[((13432)>>2)];
 var $603=($601>>>0)<($602>>>0);
 if($603){label=139;break;}else{var $F5_0_i=$600;var $_pre_phi_i128=$599;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i128;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i128)>>2)]=$468;
 var $606=(($F5_0_i+12)|0);
 HEAP32[(($606)>>2)]=$468;
 var $_sum16_i=((($349)+(8))|0);
 var $607=(($463+$_sum16_i)|0);
 var $608=$607;
 HEAP32[(($608)>>2)]=$F5_0_i;
 var $_sum17_i=((($349)+(12))|0);
 var $609=(($463+$_sum17_i)|0);
 var $610=$609;
 HEAP32[(($610)>>2)]=$591;
 label=159;break;
 case 141: 
 var $612=$467;
 var $613=$rsize_3_lcssa_i>>>8;
 var $614=($613|0)==0;
 if($614){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $616=($rsize_3_lcssa_i>>>0)>16777215;
 if($616){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $618=((($613)+(1048320))|0);
 var $619=$618>>>16;
 var $620=$619&8;
 var $621=$613<<$620;
 var $622=((($621)+(520192))|0);
 var $623=$622>>>16;
 var $624=$623&4;
 var $625=$624|$620;
 var $626=$621<<$624;
 var $627=((($626)+(245760))|0);
 var $628=$627>>>16;
 var $629=$628&2;
 var $630=$625|$629;
 var $631=(((14)-($630))|0);
 var $632=$626<<$629;
 var $633=$632>>>15;
 var $634=((($631)+($633))|0);
 var $635=$634<<1;
 var $636=((($634)+(7))|0);
 var $637=$rsize_3_lcssa_i>>>($636>>>0);
 var $638=$637&1;
 var $639=$638|$635;
 var $I7_0_i=$639;label=144;break;
 case 144: 
 var $I7_0_i;
 var $641=((13720+($I7_0_i<<2))|0);
 var $_sum2_i=((($349)+(28))|0);
 var $642=(($463+$_sum2_i)|0);
 var $643=$642;
 HEAP32[(($643)>>2)]=$I7_0_i;
 var $_sum3_i129=((($349)+(16))|0);
 var $644=(($463+$_sum3_i129)|0);
 var $_sum4_i130=((($349)+(20))|0);
 var $645=(($463+$_sum4_i130)|0);
 var $646=$645;
 HEAP32[(($646)>>2)]=0;
 var $647=$644;
 HEAP32[(($647)>>2)]=0;
 var $648=HEAP32[((13420)>>2)];
 var $649=1<<$I7_0_i;
 var $650=$648&$649;
 var $651=($650|0)==0;
 if($651){label=145;break;}else{label=146;break;}
 case 145: 
 var $653=$648|$649;
 HEAP32[((13420)>>2)]=$653;
 HEAP32[(($641)>>2)]=$612;
 var $654=$641;
 var $_sum5_i=((($349)+(24))|0);
 var $655=(($463+$_sum5_i)|0);
 var $656=$655;
 HEAP32[(($656)>>2)]=$654;
 var $_sum6_i=((($349)+(12))|0);
 var $657=(($463+$_sum6_i)|0);
 var $658=$657;
 HEAP32[(($658)>>2)]=$612;
 var $_sum7_i=((($349)+(8))|0);
 var $659=(($463+$_sum7_i)|0);
 var $660=$659;
 HEAP32[(($660)>>2)]=$612;
 label=159;break;
 case 146: 
 var $662=HEAP32[(($641)>>2)];
 var $663=($I7_0_i|0)==31;
 if($663){var $668=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $665=$I7_0_i>>>1;
 var $666=(((25)-($665))|0);
 var $668=$666;label=148;break;
 case 148: 
 var $668;
 var $669=$rsize_3_lcssa_i<<$668;
 var $K12_0_i=$669;var $T_0_i=$662;label=149;break;
 case 149: 
 var $T_0_i;
 var $K12_0_i;
 var $671=(($T_0_i+4)|0);
 var $672=HEAP32[(($671)>>2)];
 var $673=$672&-8;
 var $674=($673|0)==($rsize_3_lcssa_i|0);
 if($674){label=154;break;}else{label=150;break;}
 case 150: 
 var $676=$K12_0_i>>>31;
 var $677=(($T_0_i+16+($676<<2))|0);
 var $678=HEAP32[(($677)>>2)];
 var $679=($678|0)==0;
 var $680=$K12_0_i<<1;
 if($679){label=151;break;}else{var $K12_0_i=$680;var $T_0_i=$678;label=149;break;}
 case 151: 
 var $682=$677;
 var $683=HEAP32[((13432)>>2)];
 var $684=($682>>>0)<($683>>>0);
 if($684){label=153;break;}else{label=152;break;}
 case 152: 
 HEAP32[(($677)>>2)]=$612;
 var $_sum12_i=((($349)+(24))|0);
 var $686=(($463+$_sum12_i)|0);
 var $687=$686;
 HEAP32[(($687)>>2)]=$T_0_i;
 var $_sum13_i=((($349)+(12))|0);
 var $688=(($463+$_sum13_i)|0);
 var $689=$688;
 HEAP32[(($689)>>2)]=$612;
 var $_sum14_i=((($349)+(8))|0);
 var $690=(($463+$_sum14_i)|0);
 var $691=$690;
 HEAP32[(($691)>>2)]=$612;
 label=159;break;
 case 153: 
 _abort();
 throw "Reached an unreachable!";
 case 154: 
 var $694=(($T_0_i+8)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=$T_0_i;
 var $697=HEAP32[((13432)>>2)];
 var $698=($696>>>0)<($697>>>0);
 if($698){label=157;break;}else{label=155;break;}
 case 155: 
 var $700=$695;
 var $701=($700>>>0)<($697>>>0);
 if($701){label=157;break;}else{label=156;break;}
 case 156: 
 var $703=(($695+12)|0);
 HEAP32[(($703)>>2)]=$612;
 HEAP32[(($694)>>2)]=$612;
 var $_sum9_i=((($349)+(8))|0);
 var $704=(($463+$_sum9_i)|0);
 var $705=$704;
 HEAP32[(($705)>>2)]=$695;
 var $_sum10_i=((($349)+(12))|0);
 var $706=(($463+$_sum10_i)|0);
 var $707=$706;
 HEAP32[(($707)>>2)]=$T_0_i;
 var $_sum11_i=((($349)+(24))|0);
 var $708=(($463+$_sum11_i)|0);
 var $709=$708;
 HEAP32[(($709)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $711=(($v_3_lcssa_i+8)|0);
 var $712=$711;
 var $713=($711|0)==0;
 if($713){var $nb_0=$349;label=160;break;}else{var $mem_0=$712;label=341;break;}
 case 160: 
 var $nb_0;
 var $714=HEAP32[((13424)>>2)];
 var $715=($nb_0>>>0)>($714>>>0);
 if($715){label=165;break;}else{label=161;break;}
 case 161: 
 var $717=((($714)-($nb_0))|0);
 var $718=HEAP32[((13436)>>2)];
 var $719=($717>>>0)>15;
 if($719){label=162;break;}else{label=163;break;}
 case 162: 
 var $721=$718;
 var $722=(($721+$nb_0)|0);
 var $723=$722;
 HEAP32[((13436)>>2)]=$723;
 HEAP32[((13424)>>2)]=$717;
 var $724=$717|1;
 var $_sum102=((($nb_0)+(4))|0);
 var $725=(($721+$_sum102)|0);
 var $726=$725;
 HEAP32[(($726)>>2)]=$724;
 var $727=(($721+$714)|0);
 var $728=$727;
 HEAP32[(($728)>>2)]=$717;
 var $729=$nb_0|3;
 var $730=(($718+4)|0);
 HEAP32[(($730)>>2)]=$729;
 label=164;break;
 case 163: 
 HEAP32[((13424)>>2)]=0;
 HEAP32[((13436)>>2)]=0;
 var $732=$714|3;
 var $733=(($718+4)|0);
 HEAP32[(($733)>>2)]=$732;
 var $734=$718;
 var $_sum101=((($714)+(4))|0);
 var $735=(($734+$_sum101)|0);
 var $736=$735;
 var $737=HEAP32[(($736)>>2)];
 var $738=$737|1;
 HEAP32[(($736)>>2)]=$738;
 label=164;break;
 case 164: 
 var $740=(($718+8)|0);
 var $741=$740;
 var $mem_0=$741;label=341;break;
 case 165: 
 var $743=HEAP32[((13428)>>2)];
 var $744=($nb_0>>>0)<($743>>>0);
 if($744){label=166;break;}else{label=167;break;}
 case 166: 
 var $746=((($743)-($nb_0))|0);
 HEAP32[((13428)>>2)]=$746;
 var $747=HEAP32[((13440)>>2)];
 var $748=$747;
 var $749=(($748+$nb_0)|0);
 var $750=$749;
 HEAP32[((13440)>>2)]=$750;
 var $751=$746|1;
 var $_sum=((($nb_0)+(4))|0);
 var $752=(($748+$_sum)|0);
 var $753=$752;
 HEAP32[(($753)>>2)]=$751;
 var $754=$nb_0|3;
 var $755=(($747+4)|0);
 HEAP32[(($755)>>2)]=$754;
 var $756=(($747+8)|0);
 var $757=$756;
 var $mem_0=$757;label=341;break;
 case 167: 
 var $759=HEAP32[((13360)>>2)];
 var $760=($759|0)==0;
 if($760){label=168;break;}else{label=171;break;}
 case 168: 
 var $762=_sysconf(30);
 var $763=((($762)-(1))|0);
 var $764=$763&$762;
 var $765=($764|0)==0;
 if($765){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((13368)>>2)]=$762;
 HEAP32[((13364)>>2)]=$762;
 HEAP32[((13372)>>2)]=-1;
 HEAP32[((13376)>>2)]=-1;
 HEAP32[((13380)>>2)]=0;
 HEAP32[((13860)>>2)]=0;
 var $767=_time(0);
 var $768=$767&-16;
 var $769=$768^1431655768;
 HEAP32[((13360)>>2)]=$769;
 label=171;break;
 case 171: 
 var $771=((($nb_0)+(48))|0);
 var $772=HEAP32[((13368)>>2)];
 var $773=((($nb_0)+(47))|0);
 var $774=((($772)+($773))|0);
 var $775=(((-$772))|0);
 var $776=$774&$775;
 var $777=($776>>>0)>($nb_0>>>0);
 if($777){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $779=HEAP32[((13856)>>2)];
 var $780=($779|0)==0;
 if($780){label=174;break;}else{label=173;break;}
 case 173: 
 var $782=HEAP32[((13848)>>2)];
 var $783=((($782)+($776))|0);
 var $784=($783>>>0)<=($782>>>0);
 var $785=($783>>>0)>($779>>>0);
 var $or_cond1_i=$784|$785;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $787=HEAP32[((13860)>>2)];
 var $788=$787&4;
 var $789=($788|0)==0;
 if($789){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $791=HEAP32[((13440)>>2)];
 var $792=($791|0)==0;
 if($792){label=181;break;}else{label=176;break;}
 case 176: 
 var $794=$791;
 var $sp_0_i_i=13864;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $796=(($sp_0_i_i)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=($797>>>0)>($794>>>0);
 if($798){label=179;break;}else{label=178;break;}
 case 178: 
 var $800=(($sp_0_i_i+4)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($797+$801)|0);
 var $803=($802>>>0)>($794>>>0);
 if($803){label=180;break;}else{label=179;break;}
 case 179: 
 var $805=(($sp_0_i_i+8)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=($806|0)==0;
 if($807){label=181;break;}else{var $sp_0_i_i=$806;label=177;break;}
 case 180: 
 var $808=($sp_0_i_i|0)==0;
 if($808){label=181;break;}else{label=188;break;}
 case 181: 
 var $809=_sbrk(0);
 var $810=($809|0)==-1;
 if($810){var $tsize_0303639_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $812=$809;
 var $813=HEAP32[((13364)>>2)];
 var $814=((($813)-(1))|0);
 var $815=$814&$812;
 var $816=($815|0)==0;
 if($816){var $ssize_0_i=$776;label=184;break;}else{label=183;break;}
 case 183: 
 var $818=((($814)+($812))|0);
 var $819=(((-$813))|0);
 var $820=$818&$819;
 var $821=((($776)-($812))|0);
 var $822=((($821)+($820))|0);
 var $ssize_0_i=$822;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $824=HEAP32[((13848)>>2)];
 var $825=((($824)+($ssize_0_i))|0);
 var $826=($ssize_0_i>>>0)>($nb_0>>>0);
 var $827=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i131=$826&$827;
 if($or_cond_i131){label=185;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 185: 
 var $829=HEAP32[((13856)>>2)];
 var $830=($829|0)==0;
 if($830){label=187;break;}else{label=186;break;}
 case 186: 
 var $832=($825>>>0)<=($824>>>0);
 var $833=($825>>>0)>($829>>>0);
 var $or_cond2_i=$832|$833;
 if($or_cond2_i){var $tsize_0303639_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $835=_sbrk($ssize_0_i);
 var $836=($835|0)==($809|0);
 var $ssize_0__i=($836?$ssize_0_i:0);
 var $__i=($836?$809:-1);
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$835;var $ssize_1_i=$ssize_0_i;label=190;break;
 case 188: 
 var $838=HEAP32[((13428)>>2)];
 var $839=((($774)-($838))|0);
 var $840=$839&$775;
 var $841=($840>>>0)<2147483647;
 if($841){label=189;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 189: 
 var $843=_sbrk($840);
 var $844=HEAP32[(($796)>>2)];
 var $845=HEAP32[(($800)>>2)];
 var $846=(($844+$845)|0);
 var $847=($843|0)==($846|0);
 var $_3_i=($847?$840:0);
 var $_4_i=($847?$843:-1);
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$843;var $ssize_1_i=$840;label=190;break;
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $849=(((-$ssize_1_i))|0);
 var $850=($tbase_0_i|0)==-1;
 if($850){label=191;break;}else{var $tsize_244_i=$tsize_0_i;var $tbase_245_i=$tbase_0_i;label=201;break;}
 case 191: 
 var $852=($br_0_i|0)!=-1;
 var $853=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$852&$853;
 var $854=($ssize_1_i>>>0)<($771>>>0);
 var $or_cond6_i=$or_cond5_i&$854;
 if($or_cond6_i){label=192;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 192: 
 var $856=HEAP32[((13368)>>2)];
 var $857=((($773)-($ssize_1_i))|0);
 var $858=((($857)+($856))|0);
 var $859=(((-$856))|0);
 var $860=$858&$859;
 var $861=($860>>>0)<2147483647;
 if($861){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 193: 
 var $863=_sbrk($860);
 var $864=($863|0)==-1;
 if($864){label=195;break;}else{label=194;break;}
 case 194: 
 var $866=((($860)+($ssize_1_i))|0);
 var $ssize_2_i=$866;label=196;break;
 case 195: 
 var $868=_sbrk($849);
 var $tsize_0303639_i=$tsize_0_i;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $870=($br_0_i|0)==-1;
 if($870){var $tsize_0303639_i=$tsize_0_i;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 197: 
 var $tsize_0303639_i;
 var $871=HEAP32[((13860)>>2)];
 var $872=$871|4;
 HEAP32[((13860)>>2)]=$872;
 var $tsize_1_i=$tsize_0303639_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $874=($776>>>0)<2147483647;
 if($874){label=199;break;}else{label=340;break;}
 case 199: 
 var $876=_sbrk($776);
 var $877=_sbrk(0);
 var $notlhs_i=($876|0)!=-1;
 var $notrhs_i=($877|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $878=($876>>>0)<($877>>>0);
 var $or_cond9_i=$or_cond8_not_i&$878;
 if($or_cond9_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $879=$877;
 var $880=$876;
 var $881=((($879)-($880))|0);
 var $882=((($nb_0)+(40))|0);
 var $883=($881>>>0)>($882>>>0);
 var $_tsize_1_i=($883?$881:$tsize_1_i);
 var $_tbase_1_i=($883?$876:-1);
 var $884=($_tbase_1_i|0)==-1;
 if($884){label=340;break;}else{var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$_tbase_1_i;label=201;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 var $885=HEAP32[((13848)>>2)];
 var $886=((($885)+($tsize_244_i))|0);
 HEAP32[((13848)>>2)]=$886;
 var $887=HEAP32[((13852)>>2)];
 var $888=($886>>>0)>($887>>>0);
 if($888){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((13852)>>2)]=$886;
 label=203;break;
 case 203: 
 var $890=HEAP32[((13440)>>2)];
 var $891=($890|0)==0;
 if($891){label=204;break;}else{var $sp_067_i=13864;label=211;break;}
 case 204: 
 var $893=HEAP32[((13432)>>2)];
 var $894=($893|0)==0;
 var $895=($tbase_245_i>>>0)<($893>>>0);
 var $or_cond10_i=$894|$895;
 if($or_cond10_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((13432)>>2)]=$tbase_245_i;
 label=206;break;
 case 206: 
 HEAP32[((13864)>>2)]=$tbase_245_i;
 HEAP32[((13868)>>2)]=$tsize_244_i;
 HEAP32[((13876)>>2)]=0;
 var $897=HEAP32[((13360)>>2)];
 HEAP32[((13452)>>2)]=$897;
 HEAP32[((13448)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $899=$i_02_i_i<<1;
 var $900=((13456+($899<<2))|0);
 var $901=$900;
 var $_sum_i_i=((($899)+(3))|0);
 var $902=((13456+($_sum_i_i<<2))|0);
 HEAP32[(($902)>>2)]=$901;
 var $_sum1_i_i=((($899)+(2))|0);
 var $903=((13456+($_sum1_i_i<<2))|0);
 HEAP32[(($903)>>2)]=$901;
 var $904=((($i_02_i_i)+(1))|0);
 var $905=($904>>>0)<32;
 if($905){var $i_02_i_i=$904;label=207;break;}else{label=208;break;}
 case 208: 
 var $906=((($tsize_244_i)-(40))|0);
 var $907=(($tbase_245_i+8)|0);
 var $908=$907;
 var $909=$908&7;
 var $910=($909|0)==0;
 if($910){var $914=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $912=(((-$908))|0);
 var $913=$912&7;
 var $914=$913;label=210;break;
 case 210: 
 var $914;
 var $915=(($tbase_245_i+$914)|0);
 var $916=$915;
 var $917=((($906)-($914))|0);
 HEAP32[((13440)>>2)]=$916;
 HEAP32[((13428)>>2)]=$917;
 var $918=$917|1;
 var $_sum_i14_i=((($914)+(4))|0);
 var $919=(($tbase_245_i+$_sum_i14_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=$918;
 var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 var $921=(($tbase_245_i+$_sum2_i_i)|0);
 var $922=$921;
 HEAP32[(($922)>>2)]=40;
 var $923=HEAP32[((13376)>>2)];
 HEAP32[((13444)>>2)]=$923;
 label=338;break;
 case 211: 
 var $sp_067_i;
 var $924=(($sp_067_i)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($sp_067_i+4)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=(($925+$927)|0);
 var $929=($tbase_245_i|0)==($928|0);
 if($929){label=213;break;}else{label=212;break;}
 case 212: 
 var $931=(($sp_067_i+8)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=($932|0)==0;
 if($933){label=218;break;}else{var $sp_067_i=$932;label=211;break;}
 case 213: 
 var $934=(($sp_067_i+12)|0);
 var $935=HEAP32[(($934)>>2)];
 var $936=$935&8;
 var $937=($936|0)==0;
 if($937){label=214;break;}else{label=218;break;}
 case 214: 
 var $939=$890;
 var $940=($939>>>0)>=($925>>>0);
 var $941=($939>>>0)<($tbase_245_i>>>0);
 var $or_cond47_i=$940&$941;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $943=((($927)+($tsize_244_i))|0);
 HEAP32[(($926)>>2)]=$943;
 var $944=HEAP32[((13440)>>2)];
 var $945=HEAP32[((13428)>>2)];
 var $946=((($945)+($tsize_244_i))|0);
 var $947=$944;
 var $948=(($944+8)|0);
 var $949=$948;
 var $950=$949&7;
 var $951=($950|0)==0;
 if($951){var $955=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $953=(((-$949))|0);
 var $954=$953&7;
 var $955=$954;label=217;break;
 case 217: 
 var $955;
 var $956=(($947+$955)|0);
 var $957=$956;
 var $958=((($946)-($955))|0);
 HEAP32[((13440)>>2)]=$957;
 HEAP32[((13428)>>2)]=$958;
 var $959=$958|1;
 var $_sum_i18_i=((($955)+(4))|0);
 var $960=(($947+$_sum_i18_i)|0);
 var $961=$960;
 HEAP32[(($961)>>2)]=$959;
 var $_sum2_i19_i=((($946)+(4))|0);
 var $962=(($947+$_sum2_i19_i)|0);
 var $963=$962;
 HEAP32[(($963)>>2)]=40;
 var $964=HEAP32[((13376)>>2)];
 HEAP32[((13444)>>2)]=$964;
 label=338;break;
 case 218: 
 var $965=HEAP32[((13432)>>2)];
 var $966=($tbase_245_i>>>0)<($965>>>0);
 if($966){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[((13432)>>2)]=$tbase_245_i;
 label=220;break;
 case 220: 
 var $968=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_160_i=13864;label=221;break;
 case 221: 
 var $sp_160_i;
 var $970=(($sp_160_i)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=($971|0)==($968|0);
 if($972){label=223;break;}else{label=222;break;}
 case 222: 
 var $974=(($sp_160_i+8)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=($975|0)==0;
 if($976){label=304;break;}else{var $sp_160_i=$975;label=221;break;}
 case 223: 
 var $977=(($sp_160_i+12)|0);
 var $978=HEAP32[(($977)>>2)];
 var $979=$978&8;
 var $980=($979|0)==0;
 if($980){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($970)>>2)]=$tbase_245_i;
 var $982=(($sp_160_i+4)|0);
 var $983=HEAP32[(($982)>>2)];
 var $984=((($983)+($tsize_244_i))|0);
 HEAP32[(($982)>>2)]=$984;
 var $985=(($tbase_245_i+8)|0);
 var $986=$985;
 var $987=$986&7;
 var $988=($987|0)==0;
 if($988){var $993=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $990=(((-$986))|0);
 var $991=$990&7;
 var $993=$991;label=226;break;
 case 226: 
 var $993;
 var $994=(($tbase_245_i+$993)|0);
 var $_sum93_i=((($tsize_244_i)+(8))|0);
 var $995=(($tbase_245_i+$_sum93_i)|0);
 var $996=$995;
 var $997=$996&7;
 var $998=($997|0)==0;
 if($998){var $1003=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $1000=(((-$996))|0);
 var $1001=$1000&7;
 var $1003=$1001;label=228;break;
 case 228: 
 var $1003;
 var $_sum94_i=((($1003)+($tsize_244_i))|0);
 var $1004=(($tbase_245_i+$_sum94_i)|0);
 var $1005=$1004;
 var $1006=$1004;
 var $1007=$994;
 var $1008=((($1006)-($1007))|0);
 var $_sum_i21_i=((($993)+($nb_0))|0);
 var $1009=(($tbase_245_i+$_sum_i21_i)|0);
 var $1010=$1009;
 var $1011=((($1008)-($nb_0))|0);
 var $1012=$nb_0|3;
 var $_sum1_i22_i=((($993)+(4))|0);
 var $1013=(($tbase_245_i+$_sum1_i22_i)|0);
 var $1014=$1013;
 HEAP32[(($1014)>>2)]=$1012;
 var $1015=HEAP32[((13440)>>2)];
 var $1016=($1005|0)==($1015|0);
 if($1016){label=229;break;}else{label=230;break;}
 case 229: 
 var $1018=HEAP32[((13428)>>2)];
 var $1019=((($1018)+($1011))|0);
 HEAP32[((13428)>>2)]=$1019;
 HEAP32[((13440)>>2)]=$1010;
 var $1020=$1019|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1021=(($tbase_245_i+$_sum46_i_i)|0);
 var $1022=$1021;
 HEAP32[(($1022)>>2)]=$1020;
 label=303;break;
 case 230: 
 var $1024=HEAP32[((13436)>>2)];
 var $1025=($1005|0)==($1024|0);
 if($1025){label=231;break;}else{label=232;break;}
 case 231: 
 var $1027=HEAP32[((13424)>>2)];
 var $1028=((($1027)+($1011))|0);
 HEAP32[((13424)>>2)]=$1028;
 HEAP32[((13436)>>2)]=$1010;
 var $1029=$1028|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1030=(($tbase_245_i+$_sum44_i_i)|0);
 var $1031=$1030;
 HEAP32[(($1031)>>2)]=$1029;
 var $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
 var $1032=(($tbase_245_i+$_sum45_i_i)|0);
 var $1033=$1032;
 HEAP32[(($1033)>>2)]=$1028;
 label=303;break;
 case 232: 
 var $_sum2_i23_i=((($tsize_244_i)+(4))|0);
 var $_sum95_i=((($_sum2_i23_i)+($1003))|0);
 var $1035=(($tbase_245_i+$_sum95_i)|0);
 var $1036=$1035;
 var $1037=HEAP32[(($1036)>>2)];
 var $1038=$1037&3;
 var $1039=($1038|0)==1;
 if($1039){label=233;break;}else{var $oldfirst_0_i_i=$1005;var $qsize_0_i_i=$1011;label=280;break;}
 case 233: 
 var $1041=$1037&-8;
 var $1042=$1037>>>3;
 var $1043=($1037>>>0)<256;
 if($1043){label=234;break;}else{label=246;break;}
 case 234: 
 var $_sum3940_i_i=$1003|8;
 var $_sum105_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 var $1045=(($tbase_245_i+$_sum105_i)|0);
 var $1046=$1045;
 var $1047=HEAP32[(($1046)>>2)];
 var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 var $_sum106_i=((($_sum41_i_i)+($1003))|0);
 var $1048=(($tbase_245_i+$_sum106_i)|0);
 var $1049=$1048;
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=$1042<<1;
 var $1052=((13456+($1051<<2))|0);
 var $1053=$1052;
 var $1054=($1047|0)==($1053|0);
 if($1054){label=237;break;}else{label=235;break;}
 case 235: 
 var $1056=$1047;
 var $1057=HEAP32[((13432)>>2)];
 var $1058=($1056>>>0)<($1057>>>0);
 if($1058){label=245;break;}else{label=236;break;}
 case 236: 
 var $1060=(($1047+12)|0);
 var $1061=HEAP32[(($1060)>>2)];
 var $1062=($1061|0)==($1005|0);
 if($1062){label=237;break;}else{label=245;break;}
 case 237: 
 var $1063=($1050|0)==($1047|0);
 if($1063){label=238;break;}else{label=239;break;}
 case 238: 
 var $1065=1<<$1042;
 var $1066=$1065^-1;
 var $1067=HEAP32[((13416)>>2)];
 var $1068=$1067&$1066;
 HEAP32[((13416)>>2)]=$1068;
 label=279;break;
 case 239: 
 var $1070=($1050|0)==($1053|0);
 if($1070){label=240;break;}else{label=241;break;}
 case 240: 
 var $_pre56_i_i=(($1050+8)|0);
 var $_pre_phi57_i_i=$_pre56_i_i;label=243;break;
 case 241: 
 var $1072=$1050;
 var $1073=HEAP32[((13432)>>2)];
 var $1074=($1072>>>0)<($1073>>>0);
 if($1074){label=244;break;}else{label=242;break;}
 case 242: 
 var $1076=(($1050+8)|0);
 var $1077=HEAP32[(($1076)>>2)];
 var $1078=($1077|0)==($1005|0);
 if($1078){var $_pre_phi57_i_i=$1076;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi57_i_i;
 var $1079=(($1047+12)|0);
 HEAP32[(($1079)>>2)]=$1050;
 HEAP32[(($_pre_phi57_i_i)>>2)]=$1047;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $1081=$1004;
 var $_sum34_i_i=$1003|24;
 var $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);
 var $1082=(($tbase_245_i+$_sum96_i)|0);
 var $1083=$1082;
 var $1084=HEAP32[(($1083)>>2)];
 var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 var $_sum97_i=((($_sum5_i_i)+($1003))|0);
 var $1085=(($tbase_245_i+$_sum97_i)|0);
 var $1086=$1085;
 var $1087=HEAP32[(($1086)>>2)];
 var $1088=($1087|0)==($1081|0);
 if($1088){label=252;break;}else{label=247;break;}
 case 247: 
 var $_sum3637_i_i=$1003|8;
 var $_sum98_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 var $1090=(($tbase_245_i+$_sum98_i)|0);
 var $1091=$1090;
 var $1092=HEAP32[(($1091)>>2)];
 var $1093=$1092;
 var $1094=HEAP32[((13432)>>2)];
 var $1095=($1093>>>0)<($1094>>>0);
 if($1095){label=251;break;}else{label=248;break;}
 case 248: 
 var $1097=(($1092+12)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=($1098|0)==($1081|0);
 if($1099){label=249;break;}else{label=251;break;}
 case 249: 
 var $1101=(($1087+8)|0);
 var $1102=HEAP32[(($1101)>>2)];
 var $1103=($1102|0)==($1081|0);
 if($1103){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($1097)>>2)]=$1087;
 HEAP32[(($1101)>>2)]=$1092;
 var $R_1_i_i=$1087;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $_sum67_i_i=$1003|16;
 var $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1106=(($tbase_245_i+$_sum103_i)|0);
 var $1107=$1106;
 var $1108=HEAP32[(($1107)>>2)];
 var $1109=($1108|0)==0;
 if($1109){label=253;break;}else{var $R_0_i_i=$1108;var $RP_0_i_i=$1107;label=254;break;}
 case 253: 
 var $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);
 var $1111=(($tbase_245_i+$_sum104_i)|0);
 var $1112=$1111;
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=($1113|0)==0;
 if($1114){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1113;var $RP_0_i_i=$1112;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1115=(($R_0_i_i+20)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1116|0)==0;
 if($1117){label=255;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=254;break;}
 case 255: 
 var $1119=(($R_0_i_i+16)|0);
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=($1120|0)==0;
 if($1121){label=256;break;}else{var $R_0_i_i=$1120;var $RP_0_i_i=$1119;label=254;break;}
 case 256: 
 var $1123=$RP_0_i_i;
 var $1124=HEAP32[((13432)>>2)];
 var $1125=($1123>>>0)<($1124>>>0);
 if($1125){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $1129=($1084|0)==0;
 if($1129){label=279;break;}else{label=260;break;}
 case 260: 
 var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 var $_sum99_i=((($_sum31_i_i)+($1003))|0);
 var $1131=(($tbase_245_i+$_sum99_i)|0);
 var $1132=$1131;
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=((13720+($1133<<2))|0);
 var $1135=HEAP32[(($1134)>>2)];
 var $1136=($1081|0)==($1135|0);
 if($1136){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($1134)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $1138=HEAP32[(($1132)>>2)];
 var $1139=1<<$1138;
 var $1140=$1139^-1;
 var $1141=HEAP32[((13420)>>2)];
 var $1142=$1141&$1140;
 HEAP32[((13420)>>2)]=$1142;
 label=279;break;
 case 263: 
 var $1144=$1084;
 var $1145=HEAP32[((13432)>>2)];
 var $1146=($1144>>>0)<($1145>>>0);
 if($1146){label=267;break;}else{label=264;break;}
 case 264: 
 var $1148=(($1084+16)|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=($1149|0)==($1081|0);
 if($1150){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($1148)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $1153=(($1084+20)|0);
 HEAP32[(($1153)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $1156=($R_1_i_i|0)==0;
 if($1156){label=279;break;}else{label=269;break;}
 case 269: 
 var $1158=$R_1_i_i;
 var $1159=HEAP32[((13432)>>2)];
 var $1160=($1158>>>0)<($1159>>>0);
 if($1160){label=278;break;}else{label=270;break;}
 case 270: 
 var $1162=(($R_1_i_i+24)|0);
 HEAP32[(($1162)>>2)]=$1084;
 var $_sum3233_i_i=$1003|16;
 var $_sum100_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 var $1163=(($tbase_245_i+$_sum100_i)|0);
 var $1164=$1163;
 var $1165=HEAP32[(($1164)>>2)];
 var $1166=($1165|0)==0;
 if($1166){label=274;break;}else{label=271;break;}
 case 271: 
 var $1168=$1165;
 var $1169=HEAP32[((13432)>>2)];
 var $1170=($1168>>>0)<($1169>>>0);
 if($1170){label=273;break;}else{label=272;break;}
 case 272: 
 var $1172=(($R_1_i_i+16)|0);
 HEAP32[(($1172)>>2)]=$1165;
 var $1173=(($1165+24)|0);
 HEAP32[(($1173)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $_sum101_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1176=(($tbase_245_i+$_sum101_i)|0);
 var $1177=$1176;
 var $1178=HEAP32[(($1177)>>2)];
 var $1179=($1178|0)==0;
 if($1179){label=279;break;}else{label=275;break;}
 case 275: 
 var $1181=$1178;
 var $1182=HEAP32[((13432)>>2)];
 var $1183=($1181>>>0)<($1182>>>0);
 if($1183){label=277;break;}else{label=276;break;}
 case 276: 
 var $1185=(($R_1_i_i+20)|0);
 HEAP32[(($1185)>>2)]=$1178;
 var $1186=(($1178+24)|0);
 HEAP32[(($1186)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $_sum9_i_i=$1041|$1003;
 var $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);
 var $1190=(($tbase_245_i+$_sum102_i)|0);
 var $1191=$1190;
 var $1192=((($1041)+($1011))|0);
 var $oldfirst_0_i_i=$1191;var $qsize_0_i_i=$1192;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1194=(($oldfirst_0_i_i+4)|0);
 var $1195=HEAP32[(($1194)>>2)];
 var $1196=$1195&-2;
 HEAP32[(($1194)>>2)]=$1196;
 var $1197=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1198=(($tbase_245_i+$_sum10_i_i)|0);
 var $1199=$1198;
 HEAP32[(($1199)>>2)]=$1197;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1200=(($tbase_245_i+$_sum11_i_i)|0);
 var $1201=$1200;
 HEAP32[(($1201)>>2)]=$qsize_0_i_i;
 var $1202=$qsize_0_i_i>>>3;
 var $1203=($qsize_0_i_i>>>0)<256;
 if($1203){label=281;break;}else{label=286;break;}
 case 281: 
 var $1205=$1202<<1;
 var $1206=((13456+($1205<<2))|0);
 var $1207=$1206;
 var $1208=HEAP32[((13416)>>2)];
 var $1209=1<<$1202;
 var $1210=$1208&$1209;
 var $1211=($1210|0)==0;
 if($1211){label=282;break;}else{label=283;break;}
 case 282: 
 var $1213=$1208|$1209;
 HEAP32[((13416)>>2)]=$1213;
 var $_sum27_pre_i_i=((($1205)+(2))|0);
 var $_pre_i24_i=((13456+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1207;var $_pre_phi_i25_i=$_pre_i24_i;label=285;break;
 case 283: 
 var $_sum30_i_i=((($1205)+(2))|0);
 var $1215=((13456+($_sum30_i_i<<2))|0);
 var $1216=HEAP32[(($1215)>>2)];
 var $1217=$1216;
 var $1218=HEAP32[((13432)>>2)];
 var $1219=($1217>>>0)<($1218>>>0);
 if($1219){label=284;break;}else{var $F4_0_i_i=$1216;var $_pre_phi_i25_i=$1215;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
 var $1222=(($F4_0_i_i+12)|0);
 HEAP32[(($1222)>>2)]=$1010;
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1223=(($tbase_245_i+$_sum28_i_i)|0);
 var $1224=$1223;
 HEAP32[(($1224)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1225=(($tbase_245_i+$_sum29_i_i)|0);
 var $1226=$1225;
 HEAP32[(($1226)>>2)]=$1207;
 label=303;break;
 case 286: 
 var $1228=$1009;
 var $1229=$qsize_0_i_i>>>8;
 var $1230=($1229|0)==0;
 if($1230){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $1232=($qsize_0_i_i>>>0)>16777215;
 if($1232){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $1234=((($1229)+(1048320))|0);
 var $1235=$1234>>>16;
 var $1236=$1235&8;
 var $1237=$1229<<$1236;
 var $1238=((($1237)+(520192))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&4;
 var $1241=$1240|$1236;
 var $1242=$1237<<$1240;
 var $1243=((($1242)+(245760))|0);
 var $1244=$1243>>>16;
 var $1245=$1244&2;
 var $1246=$1241|$1245;
 var $1247=(((14)-($1246))|0);
 var $1248=$1242<<$1245;
 var $1249=$1248>>>15;
 var $1250=((($1247)+($1249))|0);
 var $1251=$1250<<1;
 var $1252=((($1250)+(7))|0);
 var $1253=$qsize_0_i_i>>>($1252>>>0);
 var $1254=$1253&1;
 var $1255=$1254|$1251;
 var $I7_0_i_i=$1255;label=289;break;
 case 289: 
 var $I7_0_i_i;
 var $1257=((13720+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1258=(($tbase_245_i+$_sum12_i26_i)|0);
 var $1259=$1258;
 HEAP32[(($1259)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1260=(($tbase_245_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1261=(($tbase_245_i+$_sum14_i_i)|0);
 var $1262=$1261;
 HEAP32[(($1262)>>2)]=0;
 var $1263=$1260;
 HEAP32[(($1263)>>2)]=0;
 var $1264=HEAP32[((13420)>>2)];
 var $1265=1<<$I7_0_i_i;
 var $1266=$1264&$1265;
 var $1267=($1266|0)==0;
 if($1267){label=290;break;}else{label=291;break;}
 case 290: 
 var $1269=$1264|$1265;
 HEAP32[((13420)>>2)]=$1269;
 HEAP32[(($1257)>>2)]=$1228;
 var $1270=$1257;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1271=(($tbase_245_i+$_sum15_i_i)|0);
 var $1272=$1271;
 HEAP32[(($1272)>>2)]=$1270;
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1273=(($tbase_245_i+$_sum16_i_i)|0);
 var $1274=$1273;
 HEAP32[(($1274)>>2)]=$1228;
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1275=(($tbase_245_i+$_sum17_i_i)|0);
 var $1276=$1275;
 HEAP32[(($1276)>>2)]=$1228;
 label=303;break;
 case 291: 
 var $1278=HEAP32[(($1257)>>2)];
 var $1279=($I7_0_i_i|0)==31;
 if($1279){var $1284=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $1281=$I7_0_i_i>>>1;
 var $1282=(((25)-($1281))|0);
 var $1284=$1282;label=293;break;
 case 293: 
 var $1284;
 var $1285=$qsize_0_i_i<<$1284;
 var $K8_0_i_i=$1285;var $T_0_i27_i=$1278;label=294;break;
 case 294: 
 var $T_0_i27_i;
 var $K8_0_i_i;
 var $1287=(($T_0_i27_i+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){label=299;break;}else{label=295;break;}
 case 295: 
 var $1292=$K8_0_i_i>>>31;
 var $1293=(($T_0_i27_i+16+($1292<<2))|0);
 var $1294=HEAP32[(($1293)>>2)];
 var $1295=($1294|0)==0;
 var $1296=$K8_0_i_i<<1;
 if($1295){label=296;break;}else{var $K8_0_i_i=$1296;var $T_0_i27_i=$1294;label=294;break;}
 case 296: 
 var $1298=$1293;
 var $1299=HEAP32[((13432)>>2)];
 var $1300=($1298>>>0)<($1299>>>0);
 if($1300){label=298;break;}else{label=297;break;}
 case 297: 
 HEAP32[(($1293)>>2)]=$1228;
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1302=(($tbase_245_i+$_sum24_i_i)|0);
 var $1303=$1302;
 HEAP32[(($1303)>>2)]=$T_0_i27_i;
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1304=(($tbase_245_i+$_sum25_i_i)|0);
 var $1305=$1304;
 HEAP32[(($1305)>>2)]=$1228;
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1306=(($tbase_245_i+$_sum26_i_i)|0);
 var $1307=$1306;
 HEAP32[(($1307)>>2)]=$1228;
 label=303;break;
 case 298: 
 _abort();
 throw "Reached an unreachable!";
 case 299: 
 var $1310=(($T_0_i27_i+8)|0);
 var $1311=HEAP32[(($1310)>>2)];
 var $1312=$T_0_i27_i;
 var $1313=HEAP32[((13432)>>2)];
 var $1314=($1312>>>0)<($1313>>>0);
 if($1314){label=302;break;}else{label=300;break;}
 case 300: 
 var $1316=$1311;
 var $1317=($1316>>>0)<($1313>>>0);
 if($1317){label=302;break;}else{label=301;break;}
 case 301: 
 var $1319=(($1311+12)|0);
 HEAP32[(($1319)>>2)]=$1228;
 HEAP32[(($1310)>>2)]=$1228;
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1320=(($tbase_245_i+$_sum21_i_i)|0);
 var $1321=$1320;
 HEAP32[(($1321)>>2)]=$1311;
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1322=(($tbase_245_i+$_sum22_i_i)|0);
 var $1323=$1322;
 HEAP32[(($1323)>>2)]=$T_0_i27_i;
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1324=(($tbase_245_i+$_sum23_i_i)|0);
 var $1325=$1324;
 HEAP32[(($1325)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $_sum1819_i_i=$993|8;
 var $1326=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1326;label=341;break;
 case 304: 
 var $1327=$890;
 var $sp_0_i_i_i=13864;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $1329=(($sp_0_i_i_i)|0);
 var $1330=HEAP32[(($1329)>>2)];
 var $1331=($1330>>>0)>($1327>>>0);
 if($1331){label=307;break;}else{label=306;break;}
 case 306: 
 var $1333=(($sp_0_i_i_i+4)|0);
 var $1334=HEAP32[(($1333)>>2)];
 var $1335=(($1330+$1334)|0);
 var $1336=($1335>>>0)>($1327>>>0);
 if($1336){label=308;break;}else{label=307;break;}
 case 307: 
 var $1338=(($sp_0_i_i_i+8)|0);
 var $1339=HEAP32[(($1338)>>2)];
 var $sp_0_i_i_i=$1339;label=305;break;
 case 308: 
 var $_sum_i15_i=((($1334)-(47))|0);
 var $_sum1_i16_i=((($1334)-(39))|0);
 var $1340=(($1330+$_sum1_i16_i)|0);
 var $1341=$1340;
 var $1342=$1341&7;
 var $1343=($1342|0)==0;
 if($1343){var $1348=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $1345=(((-$1341))|0);
 var $1346=$1345&7;
 var $1348=$1346;label=310;break;
 case 310: 
 var $1348;
 var $_sum2_i17_i=((($_sum_i15_i)+($1348))|0);
 var $1349=(($1330+$_sum2_i17_i)|0);
 var $1350=(($890+16)|0);
 var $1351=$1350;
 var $1352=($1349>>>0)<($1351>>>0);
 var $1353=($1352?$1327:$1349);
 var $1354=(($1353+8)|0);
 var $1355=$1354;
 var $1356=((($tsize_244_i)-(40))|0);
 var $1357=(($tbase_245_i+8)|0);
 var $1358=$1357;
 var $1359=$1358&7;
 var $1360=($1359|0)==0;
 if($1360){var $1364=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1362=(((-$1358))|0);
 var $1363=$1362&7;
 var $1364=$1363;label=312;break;
 case 312: 
 var $1364;
 var $1365=(($tbase_245_i+$1364)|0);
 var $1366=$1365;
 var $1367=((($1356)-($1364))|0);
 HEAP32[((13440)>>2)]=$1366;
 HEAP32[((13428)>>2)]=$1367;
 var $1368=$1367|1;
 var $_sum_i_i_i=((($1364)+(4))|0);
 var $1369=(($tbase_245_i+$_sum_i_i_i)|0);
 var $1370=$1369;
 HEAP32[(($1370)>>2)]=$1368;
 var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 var $1371=(($tbase_245_i+$_sum2_i_i_i)|0);
 var $1372=$1371;
 HEAP32[(($1372)>>2)]=40;
 var $1373=HEAP32[((13376)>>2)];
 HEAP32[((13444)>>2)]=$1373;
 var $1374=(($1353+4)|0);
 var $1375=$1374;
 HEAP32[(($1375)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1354)>>2)]=HEAP32[((13864)>>2)];HEAP32[((($1354)+(4))>>2)]=HEAP32[((13868)>>2)];HEAP32[((($1354)+(8))>>2)]=HEAP32[((13872)>>2)];HEAP32[((($1354)+(12))>>2)]=HEAP32[((13876)>>2)];
 HEAP32[((13864)>>2)]=$tbase_245_i;
 HEAP32[((13868)>>2)]=$tsize_244_i;
 HEAP32[((13876)>>2)]=0;
 HEAP32[((13872)>>2)]=$1355;
 var $1376=(($1353+28)|0);
 var $1377=$1376;
 HEAP32[(($1377)>>2)]=7;
 var $1378=(($1353+32)|0);
 var $1379=($1378>>>0)<($1335>>>0);
 if($1379){var $1380=$1377;label=313;break;}else{label=314;break;}
 case 313: 
 var $1380;
 var $1381=(($1380+4)|0);
 HEAP32[(($1381)>>2)]=7;
 var $1382=(($1380+8)|0);
 var $1383=$1382;
 var $1384=($1383>>>0)<($1335>>>0);
 if($1384){var $1380=$1381;label=313;break;}else{label=314;break;}
 case 314: 
 var $1385=($1353|0)==($1327|0);
 if($1385){label=338;break;}else{label=315;break;}
 case 315: 
 var $1387=$1353;
 var $1388=$890;
 var $1389=((($1387)-($1388))|0);
 var $1390=(($1327+$1389)|0);
 var $_sum3_i_i=((($1389)+(4))|0);
 var $1391=(($1327+$_sum3_i_i)|0);
 var $1392=$1391;
 var $1393=HEAP32[(($1392)>>2)];
 var $1394=$1393&-2;
 HEAP32[(($1392)>>2)]=$1394;
 var $1395=$1389|1;
 var $1396=(($890+4)|0);
 HEAP32[(($1396)>>2)]=$1395;
 var $1397=$1390;
 HEAP32[(($1397)>>2)]=$1389;
 var $1398=$1389>>>3;
 var $1399=($1389>>>0)<256;
 if($1399){label=316;break;}else{label=321;break;}
 case 316: 
 var $1401=$1398<<1;
 var $1402=((13456+($1401<<2))|0);
 var $1403=$1402;
 var $1404=HEAP32[((13416)>>2)];
 var $1405=1<<$1398;
 var $1406=$1404&$1405;
 var $1407=($1406|0)==0;
 if($1407){label=317;break;}else{label=318;break;}
 case 317: 
 var $1409=$1404|$1405;
 HEAP32[((13416)>>2)]=$1409;
 var $_sum11_pre_i_i=((($1401)+(2))|0);
 var $_pre_i_i=((13456+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1403;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $_sum12_i_i=((($1401)+(2))|0);
 var $1411=((13456+($_sum12_i_i<<2))|0);
 var $1412=HEAP32[(($1411)>>2)];
 var $1413=$1412;
 var $1414=HEAP32[((13432)>>2)];
 var $1415=($1413>>>0)<($1414>>>0);
 if($1415){label=319;break;}else{var $F_0_i_i=$1412;var $_pre_phi_i_i=$1411;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$890;
 var $1418=(($F_0_i_i+12)|0);
 HEAP32[(($1418)>>2)]=$890;
 var $1419=(($890+8)|0);
 HEAP32[(($1419)>>2)]=$F_0_i_i;
 var $1420=(($890+12)|0);
 HEAP32[(($1420)>>2)]=$1403;
 label=338;break;
 case 321: 
 var $1422=$890;
 var $1423=$1389>>>8;
 var $1424=($1423|0)==0;
 if($1424){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $1426=($1389>>>0)>16777215;
 if($1426){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $1428=((($1423)+(1048320))|0);
 var $1429=$1428>>>16;
 var $1430=$1429&8;
 var $1431=$1423<<$1430;
 var $1432=((($1431)+(520192))|0);
 var $1433=$1432>>>16;
 var $1434=$1433&4;
 var $1435=$1434|$1430;
 var $1436=$1431<<$1434;
 var $1437=((($1436)+(245760))|0);
 var $1438=$1437>>>16;
 var $1439=$1438&2;
 var $1440=$1435|$1439;
 var $1441=(((14)-($1440))|0);
 var $1442=$1436<<$1439;
 var $1443=$1442>>>15;
 var $1444=((($1441)+($1443))|0);
 var $1445=$1444<<1;
 var $1446=((($1444)+(7))|0);
 var $1447=$1389>>>($1446>>>0);
 var $1448=$1447&1;
 var $1449=$1448|$1445;
 var $I1_0_i_i=$1449;label=324;break;
 case 324: 
 var $I1_0_i_i;
 var $1451=((13720+($I1_0_i_i<<2))|0);
 var $1452=(($890+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1452)>>2)]=$I1_0_c_i_i;
 var $1453=(($890+20)|0);
 HEAP32[(($1453)>>2)]=0;
 var $1454=(($890+16)|0);
 HEAP32[(($1454)>>2)]=0;
 var $1455=HEAP32[((13420)>>2)];
 var $1456=1<<$I1_0_i_i;
 var $1457=$1455&$1456;
 var $1458=($1457|0)==0;
 if($1458){label=325;break;}else{label=326;break;}
 case 325: 
 var $1460=$1455|$1456;
 HEAP32[((13420)>>2)]=$1460;
 HEAP32[(($1451)>>2)]=$1422;
 var $1461=(($890+24)|0);
 var $_c_i_i=$1451;
 HEAP32[(($1461)>>2)]=$_c_i_i;
 var $1462=(($890+12)|0);
 HEAP32[(($1462)>>2)]=$890;
 var $1463=(($890+8)|0);
 HEAP32[(($1463)>>2)]=$890;
 label=338;break;
 case 326: 
 var $1465=HEAP32[(($1451)>>2)];
 var $1466=($I1_0_i_i|0)==31;
 if($1466){var $1471=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $1468=$I1_0_i_i>>>1;
 var $1469=(((25)-($1468))|0);
 var $1471=$1469;label=328;break;
 case 328: 
 var $1471;
 var $1472=$1389<<$1471;
 var $K2_0_i_i=$1472;var $T_0_i_i=$1465;label=329;break;
 case 329: 
 var $T_0_i_i;
 var $K2_0_i_i;
 var $1474=(($T_0_i_i+4)|0);
 var $1475=HEAP32[(($1474)>>2)];
 var $1476=$1475&-8;
 var $1477=($1476|0)==($1389|0);
 if($1477){label=334;break;}else{label=330;break;}
 case 330: 
 var $1479=$K2_0_i_i>>>31;
 var $1480=(($T_0_i_i+16+($1479<<2))|0);
 var $1481=HEAP32[(($1480)>>2)];
 var $1482=($1481|0)==0;
 var $1483=$K2_0_i_i<<1;
 if($1482){label=331;break;}else{var $K2_0_i_i=$1483;var $T_0_i_i=$1481;label=329;break;}
 case 331: 
 var $1485=$1480;
 var $1486=HEAP32[((13432)>>2)];
 var $1487=($1485>>>0)<($1486>>>0);
 if($1487){label=333;break;}else{label=332;break;}
 case 332: 
 HEAP32[(($1480)>>2)]=$1422;
 var $1489=(($890+24)|0);
 var $T_0_c8_i_i=$T_0_i_i;
 HEAP32[(($1489)>>2)]=$T_0_c8_i_i;
 var $1490=(($890+12)|0);
 HEAP32[(($1490)>>2)]=$890;
 var $1491=(($890+8)|0);
 HEAP32[(($1491)>>2)]=$890;
 label=338;break;
 case 333: 
 _abort();
 throw "Reached an unreachable!";
 case 334: 
 var $1494=(($T_0_i_i+8)|0);
 var $1495=HEAP32[(($1494)>>2)];
 var $1496=$T_0_i_i;
 var $1497=HEAP32[((13432)>>2)];
 var $1498=($1496>>>0)<($1497>>>0);
 if($1498){label=337;break;}else{label=335;break;}
 case 335: 
 var $1500=$1495;
 var $1501=($1500>>>0)<($1497>>>0);
 if($1501){label=337;break;}else{label=336;break;}
 case 336: 
 var $1503=(($1495+12)|0);
 HEAP32[(($1503)>>2)]=$1422;
 HEAP32[(($1494)>>2)]=$1422;
 var $1504=(($890+8)|0);
 var $_c7_i_i=$1495;
 HEAP32[(($1504)>>2)]=$_c7_i_i;
 var $1505=(($890+12)|0);
 var $T_0_c_i_i=$T_0_i_i;
 HEAP32[(($1505)>>2)]=$T_0_c_i_i;
 var $1506=(($890+24)|0);
 HEAP32[(($1506)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $1507=HEAP32[((13428)>>2)];
 var $1508=($1507>>>0)>($nb_0>>>0);
 if($1508){label=339;break;}else{label=340;break;}
 case 339: 
 var $1510=((($1507)-($nb_0))|0);
 HEAP32[((13428)>>2)]=$1510;
 var $1511=HEAP32[((13440)>>2)];
 var $1512=$1511;
 var $1513=(($1512+$nb_0)|0);
 var $1514=$1513;
 HEAP32[((13440)>>2)]=$1514;
 var $1515=$1510|1;
 var $_sum_i134=((($nb_0)+(4))|0);
 var $1516=(($1512+$_sum_i134)|0);
 var $1517=$1516;
 HEAP32[(($1517)>>2)]=$1515;
 var $1518=$nb_0|3;
 var $1519=(($1511+4)|0);
 HEAP32[(($1519)>>2)]=$1518;
 var $1520=(($1511+8)|0);
 var $1521=$1520;
 var $mem_0=$1521;label=341;break;
 case 340: 
 var $1522=___errno_location();
 HEAP32[(($1522)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((13432)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 var $_sum232=(((-8)-($21))|0);
 var $24=(($mem+$_sum232)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((13436)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum276=((($_sum232)+(8))|0);
 var $35=(($mem+$_sum276)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum277=((($_sum232)+(12))|0);
 var $38=(($mem+$_sum277)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((13456+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((13416)>>2)];
 var $57=$56&$55;
 HEAP32[((13416)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre305=(($40+8)|0);
 var $_pre_phi306=$_pre305;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi306=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi306;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi306)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum266=((($_sum232)+(24))|0);
 var $70=(($mem+$_sum266)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum267=((($_sum232)+(12))|0);
 var $73=(($mem+$_sum267)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum273=((($_sum232)+(8))|0);
 var $78=(($mem+$_sum273)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum269=((($_sum232)+(20))|0);
 var $93=(($mem+$_sum269)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum268=((($_sum232)+(16))|0);
 var $98=(($mem+$_sum268)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum270=((($_sum232)+(28))|0);
 var $117=(($mem+$_sum270)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((13720+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=HEAP32[(($118)>>2)];
 var $125=1<<$124;
 var $126=$125^-1;
 var $127=HEAP32[((13420)>>2)];
 var $128=$127&$126;
 HEAP32[((13420)>>2)]=$128;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $130=$72;
 var $131=HEAP32[((13432)>>2)];
 var $132=($130>>>0)<($131>>>0);
 if($132){label=42;break;}else{label=39;break;}
 case 39: 
 var $134=(($72+16)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==($69|0);
 if($136){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($134)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $139=(($72+20)|0);
 HEAP32[(($139)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $142=($R_1|0)==0;
 if($142){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $144=$R_1;
 var $145=HEAP32[((13432)>>2)];
 var $146=($144>>>0)<($145>>>0);
 if($146){label=53;break;}else{label=45;break;}
 case 45: 
 var $148=(($R_1+24)|0);
 HEAP32[(($148)>>2)]=$72;
 var $_sum271=((($_sum232)+(16))|0);
 var $149=(($mem+$_sum271)|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $152=($151|0)==0;
 if($152){label=49;break;}else{label=46;break;}
 case 46: 
 var $154=$151;
 var $155=HEAP32[((13432)>>2)];
 var $156=($154>>>0)<($155>>>0);
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 var $158=(($R_1+16)|0);
 HEAP32[(($158)>>2)]=$151;
 var $159=(($151+24)|0);
 HEAP32[(($159)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum272=((($_sum232)+(20))|0);
 var $162=(($mem+$_sum272)|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==0;
 if($165){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $167=$164;
 var $168=HEAP32[((13432)>>2)];
 var $169=($167>>>0)<($168>>>0);
 if($169){label=52;break;}else{label=51;break;}
 case 51: 
 var $171=(($R_1+20)|0);
 HEAP32[(($171)>>2)]=$164;
 var $172=(($164+24)|0);
 HEAP32[(($172)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum233=((($14)-(4))|0);
 var $176=(($mem+$_sum233)|0);
 var $177=$176;
 var $178=HEAP32[(($177)>>2)];
 var $179=$178&3;
 var $180=($179|0)==3;
 if($180){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((13424)>>2)]=$26;
 var $182=HEAP32[(($177)>>2)];
 var $183=$182&-2;
 HEAP32[(($177)>>2)]=$183;
 var $184=$26|1;
 var $_sum264=((($_sum232)+(4))|0);
 var $185=(($mem+$_sum264)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=$184;
 var $187=$15;
 HEAP32[(($187)>>2)]=$26;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $189=$p_0;
 var $190=($189>>>0)<($15>>>0);
 if($190){label=57;break;}else{label=139;break;}
 case 57: 
 var $_sum263=((($14)-(4))|0);
 var $192=(($mem+$_sum263)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$194&1;
 var $phitmp=($195|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $197=$194&2;
 var $198=($197|0)==0;
 if($198){label=59;break;}else{label=112;break;}
 case 59: 
 var $200=HEAP32[((13440)>>2)];
 var $201=($16|0)==($200|0);
 if($201){label=60;break;}else{label=62;break;}
 case 60: 
 var $203=HEAP32[((13428)>>2)];
 var $204=((($203)+($psize_0))|0);
 HEAP32[((13428)>>2)]=$204;
 HEAP32[((13440)>>2)]=$p_0;
 var $205=$204|1;
 var $206=(($p_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=HEAP32[((13436)>>2)];
 var $208=($p_0|0)==($207|0);
 if($208){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((13436)>>2)]=0;
 HEAP32[((13424)>>2)]=0;
 label=140;break;
 case 62: 
 var $211=HEAP32[((13436)>>2)];
 var $212=($16|0)==($211|0);
 if($212){label=63;break;}else{label=64;break;}
 case 63: 
 var $214=HEAP32[((13424)>>2)];
 var $215=((($214)+($psize_0))|0);
 HEAP32[((13424)>>2)]=$215;
 HEAP32[((13436)>>2)]=$p_0;
 var $216=$215|1;
 var $217=(($p_0+4)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=(($189+$215)|0);
 var $219=$218;
 HEAP32[(($219)>>2)]=$215;
 label=140;break;
 case 64: 
 var $221=$194&-8;
 var $222=((($221)+($psize_0))|0);
 var $223=$194>>>3;
 var $224=($194>>>0)<256;
 if($224){label=65;break;}else{label=77;break;}
 case 65: 
 var $226=(($mem+$14)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $_sum257258=$14|4;
 var $229=(($mem+$_sum257258)|0);
 var $230=$229;
 var $231=HEAP32[(($230)>>2)];
 var $232=$223<<1;
 var $233=((13456+($232<<2))|0);
 var $234=$233;
 var $235=($228|0)==($234|0);
 if($235){label=68;break;}else{label=66;break;}
 case 66: 
 var $237=$228;
 var $238=HEAP32[((13432)>>2)];
 var $239=($237>>>0)<($238>>>0);
 if($239){label=76;break;}else{label=67;break;}
 case 67: 
 var $241=(($228+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)==($16|0);
 if($243){label=68;break;}else{label=76;break;}
 case 68: 
 var $244=($231|0)==($228|0);
 if($244){label=69;break;}else{label=70;break;}
 case 69: 
 var $246=1<<$223;
 var $247=$246^-1;
 var $248=HEAP32[((13416)>>2)];
 var $249=$248&$247;
 HEAP32[((13416)>>2)]=$249;
 label=110;break;
 case 70: 
 var $251=($231|0)==($234|0);
 if($251){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre303=(($231+8)|0);
 var $_pre_phi304=$_pre303;label=74;break;
 case 72: 
 var $253=$231;
 var $254=HEAP32[((13432)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=75;break;}else{label=73;break;}
 case 73: 
 var $257=(($231+8)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($16|0);
 if($259){var $_pre_phi304=$257;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi304;
 var $260=(($228+12)|0);
 HEAP32[(($260)>>2)]=$231;
 HEAP32[(($_pre_phi304)>>2)]=$228;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $262=$15;
 var $_sum235=((($14)+(16))|0);
 var $263=(($mem+$_sum235)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $_sum236237=$14|4;
 var $266=(($mem+$_sum236237)|0);
 var $267=$266;
 var $268=HEAP32[(($267)>>2)];
 var $269=($268|0)==($262|0);
 if($269){label=83;break;}else{label=78;break;}
 case 78: 
 var $271=(($mem+$14)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273;
 var $275=HEAP32[((13432)>>2)];
 var $276=($274>>>0)<($275>>>0);
 if($276){label=82;break;}else{label=79;break;}
 case 79: 
 var $278=(($273+12)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($279|0)==($262|0);
 if($280){label=80;break;}else{label=82;break;}
 case 80: 
 var $282=(($268+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==($262|0);
 if($284){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($278)>>2)]=$268;
 HEAP32[(($282)>>2)]=$273;
 var $R7_1=$268;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum239=((($14)+(12))|0);
 var $287=(($mem+$_sum239)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=85;break;}
 case 84: 
 var $_sum238=((($14)+(8))|0);
 var $292=(($mem+$_sum238)|0);
 var $293=$292;
 var $294=HEAP32[(($293)>>2)];
 var $295=($294|0)==0;
 if($295){var $R7_1=0;label=90;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $296=(($R7_0+20)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=($297|0)==0;
 if($298){label=86;break;}else{var $R7_0=$297;var $RP9_0=$296;label=85;break;}
 case 86: 
 var $300=(($R7_0+16)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($301|0)==0;
 if($302){label=87;break;}else{var $R7_0=$301;var $RP9_0=$300;label=85;break;}
 case 87: 
 var $304=$RP9_0;
 var $305=HEAP32[((13432)>>2)];
 var $306=($304>>>0)<($305>>>0);
 if($306){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $310=($265|0)==0;
 if($310){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum250=((($14)+(20))|0);
 var $312=(($mem+$_sum250)|0);
 var $313=$312;
 var $314=HEAP32[(($313)>>2)];
 var $315=((13720+($314<<2))|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=($262|0)==($316|0);
 if($317){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($315)>>2)]=$R7_1;
 var $cond298=($R7_1|0)==0;
 if($cond298){label=93;break;}else{label=100;break;}
 case 93: 
 var $319=HEAP32[(($313)>>2)];
 var $320=1<<$319;
 var $321=$320^-1;
 var $322=HEAP32[((13420)>>2)];
 var $323=$322&$321;
 HEAP32[((13420)>>2)]=$323;
 label=110;break;
 case 94: 
 var $325=$265;
 var $326=HEAP32[((13432)>>2)];
 var $327=($325>>>0)<($326>>>0);
 if($327){label=98;break;}else{label=95;break;}
 case 95: 
 var $329=(($265+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)==($262|0);
 if($331){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($329)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $334=(($265+20)|0);
 HEAP32[(($334)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $337=($R7_1|0)==0;
 if($337){label=110;break;}else{label=100;break;}
 case 100: 
 var $339=$R7_1;
 var $340=HEAP32[((13432)>>2)];
 var $341=($339>>>0)<($340>>>0);
 if($341){label=109;break;}else{label=101;break;}
 case 101: 
 var $343=(($R7_1+24)|0);
 HEAP32[(($343)>>2)]=$265;
 var $_sum251=((($14)+(8))|0);
 var $344=(($mem+$_sum251)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=105;break;}else{label=102;break;}
 case 102: 
 var $349=$346;
 var $350=HEAP32[((13432)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=104;break;}else{label=103;break;}
 case 103: 
 var $353=(($R7_1+16)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum252=((($14)+(12))|0);
 var $357=(($mem+$_sum252)|0);
 var $358=$357;
 var $359=HEAP32[(($358)>>2)];
 var $360=($359|0)==0;
 if($360){label=110;break;}else{label=106;break;}
 case 106: 
 var $362=$359;
 var $363=HEAP32[((13432)>>2)];
 var $364=($362>>>0)<($363>>>0);
 if($364){label=108;break;}else{label=107;break;}
 case 107: 
 var $366=(($R7_1+20)|0);
 HEAP32[(($366)>>2)]=$359;
 var $367=(($359+24)|0);
 HEAP32[(($367)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $371=$222|1;
 var $372=(($p_0+4)|0);
 HEAP32[(($372)>>2)]=$371;
 var $373=(($189+$222)|0);
 var $374=$373;
 HEAP32[(($374)>>2)]=$222;
 var $375=HEAP32[((13436)>>2)];
 var $376=($p_0|0)==($375|0);
 if($376){label=111;break;}else{var $psize_1=$222;label=113;break;}
 case 111: 
 HEAP32[((13424)>>2)]=$222;
 label=140;break;
 case 112: 
 var $379=$194&-2;
 HEAP32[(($193)>>2)]=$379;
 var $380=$psize_0|1;
 var $381=(($p_0+4)|0);
 HEAP32[(($381)>>2)]=$380;
 var $382=(($189+$psize_0)|0);
 var $383=$382;
 HEAP32[(($383)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $385=$psize_1>>>3;
 var $386=($psize_1>>>0)<256;
 if($386){label=114;break;}else{label=119;break;}
 case 114: 
 var $388=$385<<1;
 var $389=((13456+($388<<2))|0);
 var $390=$389;
 var $391=HEAP32[((13416)>>2)];
 var $392=1<<$385;
 var $393=$391&$392;
 var $394=($393|0)==0;
 if($394){label=115;break;}else{label=116;break;}
 case 115: 
 var $396=$391|$392;
 HEAP32[((13416)>>2)]=$396;
 var $_sum248_pre=((($388)+(2))|0);
 var $_pre=((13456+($_sum248_pre<<2))|0);
 var $F16_0=$390;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum249=((($388)+(2))|0);
 var $398=((13456+($_sum249<<2))|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=$399;
 var $401=HEAP32[((13432)>>2)];
 var $402=($400>>>0)<($401>>>0);
 if($402){label=117;break;}else{var $F16_0=$399;var $_pre_phi=$398;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $405=(($F16_0+12)|0);
 HEAP32[(($405)>>2)]=$p_0;
 var $406=(($p_0+8)|0);
 HEAP32[(($406)>>2)]=$F16_0;
 var $407=(($p_0+12)|0);
 HEAP32[(($407)>>2)]=$390;
 label=140;break;
 case 119: 
 var $409=$p_0;
 var $410=$psize_1>>>8;
 var $411=($410|0)==0;
 if($411){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $413=($psize_1>>>0)>16777215;
 if($413){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $415=((($410)+(1048320))|0);
 var $416=$415>>>16;
 var $417=$416&8;
 var $418=$410<<$417;
 var $419=((($418)+(520192))|0);
 var $420=$419>>>16;
 var $421=$420&4;
 var $422=$421|$417;
 var $423=$418<<$421;
 var $424=((($423)+(245760))|0);
 var $425=$424>>>16;
 var $426=$425&2;
 var $427=$422|$426;
 var $428=(((14)-($427))|0);
 var $429=$423<<$426;
 var $430=$429>>>15;
 var $431=((($428)+($430))|0);
 var $432=$431<<1;
 var $433=((($431)+(7))|0);
 var $434=$psize_1>>>($433>>>0);
 var $435=$434&1;
 var $436=$435|$432;
 var $I18_0=$436;label=122;break;
 case 122: 
 var $I18_0;
 var $438=((13720+($I18_0<<2))|0);
 var $439=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 var $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=HEAP32[((13420)>>2)];
 var $443=1<<$I18_0;
 var $444=$442&$443;
 var $445=($444|0)==0;
 if($445){label=123;break;}else{label=124;break;}
 case 123: 
 var $447=$442|$443;
 HEAP32[((13420)>>2)]=$447;
 HEAP32[(($438)>>2)]=$409;
 var $448=(($p_0+24)|0);
 var $_c=$438;
 HEAP32[(($448)>>2)]=$_c;
 var $449=(($p_0+12)|0);
 HEAP32[(($449)>>2)]=$p_0;
 var $450=(($p_0+8)|0);
 HEAP32[(($450)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $452=HEAP32[(($438)>>2)];
 var $453=($I18_0|0)==31;
 if($453){var $458=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $455=$I18_0>>>1;
 var $456=(((25)-($455))|0);
 var $458=$456;label=126;break;
 case 126: 
 var $458;
 var $459=$psize_1<<$458;
 var $K19_0=$459;var $T_0=$452;label=127;break;
 case 127: 
 var $T_0;
 var $K19_0;
 var $461=(($T_0+4)|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=$462&-8;
 var $464=($463|0)==($psize_1|0);
 if($464){label=132;break;}else{label=128;break;}
 case 128: 
 var $466=$K19_0>>>31;
 var $467=(($T_0+16+($466<<2))|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=($468|0)==0;
 var $470=$K19_0<<1;
 if($469){label=129;break;}else{var $K19_0=$470;var $T_0=$468;label=127;break;}
 case 129: 
 var $472=$467;
 var $473=HEAP32[((13432)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=131;break;}else{label=130;break;}
 case 130: 
 HEAP32[(($467)>>2)]=$409;
 var $476=(($p_0+24)|0);
 var $T_0_c245=$T_0;
 HEAP32[(($476)>>2)]=$T_0_c245;
 var $477=(($p_0+12)|0);
 HEAP32[(($477)>>2)]=$p_0;
 var $478=(($p_0+8)|0);
 HEAP32[(($478)>>2)]=$p_0;
 label=136;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 var $481=(($T_0+8)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$T_0;
 var $484=HEAP32[((13432)>>2)];
 var $485=($483>>>0)<($484>>>0);
 if($485){label=135;break;}else{label=133;break;}
 case 133: 
 var $487=$482;
 var $488=($487>>>0)<($484>>>0);
 if($488){label=135;break;}else{label=134;break;}
 case 134: 
 var $490=(($482+12)|0);
 HEAP32[(($490)>>2)]=$409;
 HEAP32[(($481)>>2)]=$409;
 var $491=(($p_0+8)|0);
 var $_c244=$482;
 HEAP32[(($491)>>2)]=$_c244;
 var $492=(($p_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($492)>>2)]=$T_0_c;
 var $493=(($p_0+24)|0);
 HEAP32[(($493)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $495=HEAP32[((13448)>>2)];
 var $496=((($495)-(1))|0);
 HEAP32[((13448)>>2)]=$496;
 var $497=($496|0)==0;
 if($497){var $sp_0_in_i=13872;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $498=($sp_0_i|0)==0;
 var $499=(($sp_0_i+8)|0);
 if($498){label=138;break;}else{var $sp_0_in_i=$499;label=137;break;}
 case 138: 
 HEAP32[((13448)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_free"] = _free;
function _realloc($oldmem,$bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=11;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=$15;
 var $17=_try_realloc_chunk($16,$14);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=8;break;}
 case 8: 
 var $20=(($17+8)|0);
 var $21=$20;
 var $mem_0=$21;label=11;break;
 case 9: 
 var $23=_malloc($bytes);
 var $24=($23|0)==0;
 if($24){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $26=((($oldmem)-(4))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&-8;
 var $30=$28&3;
 var $31=($30|0)==0;
 var $32=($31?8:4);
 var $33=((($29)-($32))|0);
 var $34=($33>>>0)<($bytes>>>0);
 var $35=($34?$33:$bytes);
 assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
 _free($oldmem);
 var $mem_0=$23;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_realloc"] = _realloc;
function _try_realloc_chunk($p,$nb){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&-8;
 var $4=$p;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=HEAP32[((13432)>>2)];
 var $8=($4>>>0)<($7>>>0);
 if($8){label=72;break;}else{label=2;break;}
 case 2: 
 var $10=$2&3;
 var $11=($10|0)!=1;
 var $12=($4>>>0)<($5>>>0);
 var $or_cond=$11&$12;
 if($or_cond){label=3;break;}else{label=72;break;}
 case 3: 
 var $_sum3334=$3|4;
 var $14=(($4+$_sum3334)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&1;
 var $phitmp=($17|0)==0;
 if($phitmp){label=72;break;}else{label=4;break;}
 case 4: 
 var $19=($10|0)==0;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=($nb>>>0)<256;
 if($21){var $newp_0=0;label=73;break;}else{label=6;break;}
 case 6: 
 var $23=((($nb)+(4))|0);
 var $24=($3>>>0)<($23>>>0);
 if($24){label=8;break;}else{label=7;break;}
 case 7: 
 var $26=((($3)-($nb))|0);
 var $27=HEAP32[((13368)>>2)];
 var $28=$27<<1;
 var $29=($26>>>0)>($28>>>0);
 if($29){label=8;break;}else{var $newp_0=$p;label=73;break;}
 case 8: 
 var $newp_0=0;label=73;break;
 case 9: 
 var $32=($3>>>0)<($nb>>>0);
 if($32){label=12;break;}else{label=10;break;}
 case 10: 
 var $34=((($3)-($nb))|0);
 var $35=($34>>>0)>15;
 if($35){label=11;break;}else{var $newp_0=$p;label=73;break;}
 case 11: 
 var $37=(($4+$nb)|0);
 var $38=$37;
 var $39=$2&1;
 var $40=$39|$nb;
 var $41=$40|2;
 HEAP32[(($1)>>2)]=$41;
 var $_sum29=((($nb)+(4))|0);
 var $42=(($4+$_sum29)|0);
 var $43=$42;
 var $44=$34|3;
 HEAP32[(($43)>>2)]=$44;
 var $45=HEAP32[(($15)>>2)];
 var $46=$45|1;
 HEAP32[(($15)>>2)]=$46;
 _dispose_chunk($38,$34);
 var $newp_0=$p;label=73;break;
 case 12: 
 var $48=HEAP32[((13440)>>2)];
 var $49=($6|0)==($48|0);
 if($49){label=13;break;}else{label=15;break;}
 case 13: 
 var $51=HEAP32[((13428)>>2)];
 var $52=((($51)+($3))|0);
 var $53=($52>>>0)>($nb>>>0);
 if($53){label=14;break;}else{var $newp_0=0;label=73;break;}
 case 14: 
 var $55=((($52)-($nb))|0);
 var $56=(($4+$nb)|0);
 var $57=$56;
 var $58=$2&1;
 var $59=$58|$nb;
 var $60=$59|2;
 HEAP32[(($1)>>2)]=$60;
 var $_sum28=((($nb)+(4))|0);
 var $61=(($4+$_sum28)|0);
 var $62=$61;
 var $63=$55|1;
 HEAP32[(($62)>>2)]=$63;
 HEAP32[((13440)>>2)]=$57;
 HEAP32[((13428)>>2)]=$55;
 var $newp_0=$p;label=73;break;
 case 15: 
 var $65=HEAP32[((13436)>>2)];
 var $66=($6|0)==($65|0);
 if($66){label=16;break;}else{label=21;break;}
 case 16: 
 var $68=HEAP32[((13424)>>2)];
 var $69=((($68)+($3))|0);
 var $70=($69>>>0)<($nb>>>0);
 if($70){var $newp_0=0;label=73;break;}else{label=17;break;}
 case 17: 
 var $72=((($69)-($nb))|0);
 var $73=($72>>>0)>15;
 if($73){label=18;break;}else{label=19;break;}
 case 18: 
 var $75=(($4+$nb)|0);
 var $76=$75;
 var $77=(($4+$69)|0);
 var $78=$2&1;
 var $79=$78|$nb;
 var $80=$79|2;
 HEAP32[(($1)>>2)]=$80;
 var $_sum25=((($nb)+(4))|0);
 var $81=(($4+$_sum25)|0);
 var $82=$81;
 var $83=$72|1;
 HEAP32[(($82)>>2)]=$83;
 var $84=$77;
 HEAP32[(($84)>>2)]=$72;
 var $_sum26=((($69)+(4))|0);
 var $85=(($4+$_sum26)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=$87&-2;
 HEAP32[(($86)>>2)]=$88;
 var $storemerge=$76;var $storemerge27=$72;label=20;break;
 case 19: 
 var $90=$2&1;
 var $91=$90|$69;
 var $92=$91|2;
 HEAP32[(($1)>>2)]=$92;
 var $_sum23=((($69)+(4))|0);
 var $93=(($4+$_sum23)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=$95|1;
 HEAP32[(($94)>>2)]=$96;
 var $storemerge=0;var $storemerge27=0;label=20;break;
 case 20: 
 var $storemerge27;
 var $storemerge;
 HEAP32[((13424)>>2)]=$storemerge27;
 HEAP32[((13436)>>2)]=$storemerge;
 var $newp_0=$p;label=73;break;
 case 21: 
 var $99=$16&2;
 var $100=($99|0)==0;
 if($100){label=22;break;}else{var $newp_0=0;label=73;break;}
 case 22: 
 var $102=$16&-8;
 var $103=((($102)+($3))|0);
 var $104=($103>>>0)<($nb>>>0);
 if($104){var $newp_0=0;label=73;break;}else{label=23;break;}
 case 23: 
 var $106=((($103)-($nb))|0);
 var $107=$16>>>3;
 var $108=($16>>>0)<256;
 if($108){label=24;break;}else{label=36;break;}
 case 24: 
 var $_sum17=((($3)+(8))|0);
 var $110=(($4+$_sum17)|0);
 var $111=$110;
 var $112=HEAP32[(($111)>>2)];
 var $_sum18=((($3)+(12))|0);
 var $113=(($4+$_sum18)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $116=$107<<1;
 var $117=((13456+($116<<2))|0);
 var $118=$117;
 var $119=($112|0)==($118|0);
 if($119){label=27;break;}else{label=25;break;}
 case 25: 
 var $121=$112;
 var $122=($121>>>0)<($7>>>0);
 if($122){label=35;break;}else{label=26;break;}
 case 26: 
 var $124=(($112+12)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($125|0)==($6|0);
 if($126){label=27;break;}else{label=35;break;}
 case 27: 
 var $127=($115|0)==($112|0);
 if($127){label=28;break;}else{label=29;break;}
 case 28: 
 var $129=1<<$107;
 var $130=$129^-1;
 var $131=HEAP32[((13416)>>2)];
 var $132=$131&$130;
 HEAP32[((13416)>>2)]=$132;
 label=69;break;
 case 29: 
 var $134=($115|0)==($118|0);
 if($134){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=(($115+8)|0);
 var $_pre_phi=$_pre;label=33;break;
 case 31: 
 var $136=$115;
 var $137=($136>>>0)<($7>>>0);
 if($137){label=34;break;}else{label=32;break;}
 case 32: 
 var $139=(($115+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==($6|0);
 if($141){var $_pre_phi=$139;label=33;break;}else{label=34;break;}
 case 33: 
 var $_pre_phi;
 var $142=(($112+12)|0);
 HEAP32[(($142)>>2)]=$115;
 HEAP32[(($_pre_phi)>>2)]=$112;
 label=69;break;
 case 34: 
 _abort();
 throw "Reached an unreachable!";
 case 35: 
 _abort();
 throw "Reached an unreachable!";
 case 36: 
 var $144=$5;
 var $_sum=((($3)+(24))|0);
 var $145=(($4+$_sum)|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $_sum2=((($3)+(12))|0);
 var $148=(($4+$_sum2)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==($144|0);
 if($151){label=42;break;}else{label=37;break;}
 case 37: 
 var $_sum14=((($3)+(8))|0);
 var $153=(($4+$_sum14)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=$155;
 var $157=($156>>>0)<($7>>>0);
 if($157){label=41;break;}else{label=38;break;}
 case 38: 
 var $159=(($155+12)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($160|0)==($144|0);
 if($161){label=39;break;}else{label=41;break;}
 case 39: 
 var $163=(($150+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==($144|0);
 if($165){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($159)>>2)]=$150;
 HEAP32[(($163)>>2)]=$155;
 var $R_1=$150;label=49;break;
 case 41: 
 _abort();
 throw "Reached an unreachable!";
 case 42: 
 var $_sum4=((($3)+(20))|0);
 var $168=(($4+$_sum4)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=($170|0)==0;
 if($171){label=43;break;}else{var $R_0=$170;var $RP_0=$169;label=44;break;}
 case 43: 
 var $_sum3=((($3)+(16))|0);
 var $173=(($4+$_sum3)|0);
 var $174=$173;
 var $175=HEAP32[(($174)>>2)];
 var $176=($175|0)==0;
 if($176){var $R_1=0;label=49;break;}else{var $R_0=$175;var $RP_0=$174;label=44;break;}
 case 44: 
 var $RP_0;
 var $R_0;
 var $177=(($R_0+20)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=($178|0)==0;
 if($179){label=45;break;}else{var $R_0=$178;var $RP_0=$177;label=44;break;}
 case 45: 
 var $181=(($R_0+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($182|0)==0;
 if($183){label=46;break;}else{var $R_0=$182;var $RP_0=$181;label=44;break;}
 case 46: 
 var $185=$RP_0;
 var $186=($185>>>0)<($7>>>0);
 if($186){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $R_1;
 var $190=($147|0)==0;
 if($190){label=69;break;}else{label=50;break;}
 case 50: 
 var $_sum11=((($3)+(28))|0);
 var $192=(($4+$_sum11)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=((13720+($194<<2))|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($144|0)==($196|0);
 if($197){label=51;break;}else{label=53;break;}
 case 51: 
 HEAP32[(($195)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=52;break;}else{label=59;break;}
 case 52: 
 var $199=HEAP32[(($193)>>2)];
 var $200=1<<$199;
 var $201=$200^-1;
 var $202=HEAP32[((13420)>>2)];
 var $203=$202&$201;
 HEAP32[((13420)>>2)]=$203;
 label=69;break;
 case 53: 
 var $205=$147;
 var $206=HEAP32[((13432)>>2)];
 var $207=($205>>>0)<($206>>>0);
 if($207){label=57;break;}else{label=54;break;}
 case 54: 
 var $209=(($147+16)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($210|0)==($144|0);
 if($211){label=55;break;}else{label=56;break;}
 case 55: 
 HEAP32[(($209)>>2)]=$R_1;
 label=58;break;
 case 56: 
 var $214=(($147+20)|0);
 HEAP32[(($214)>>2)]=$R_1;
 label=58;break;
 case 57: 
 _abort();
 throw "Reached an unreachable!";
 case 58: 
 var $217=($R_1|0)==0;
 if($217){label=69;break;}else{label=59;break;}
 case 59: 
 var $219=$R_1;
 var $220=HEAP32[((13432)>>2)];
 var $221=($219>>>0)<($220>>>0);
 if($221){label=68;break;}else{label=60;break;}
 case 60: 
 var $223=(($R_1+24)|0);
 HEAP32[(($223)>>2)]=$147;
 var $_sum12=((($3)+(16))|0);
 var $224=(($4+$_sum12)|0);
 var $225=$224;
 var $226=HEAP32[(($225)>>2)];
 var $227=($226|0)==0;
 if($227){label=64;break;}else{label=61;break;}
 case 61: 
 var $229=$226;
 var $230=HEAP32[((13432)>>2)];
 var $231=($229>>>0)<($230>>>0);
 if($231){label=63;break;}else{label=62;break;}
 case 62: 
 var $233=(($R_1+16)|0);
 HEAP32[(($233)>>2)]=$226;
 var $234=(($226+24)|0);
 HEAP32[(($234)>>2)]=$R_1;
 label=64;break;
 case 63: 
 _abort();
 throw "Reached an unreachable!";
 case 64: 
 var $_sum13=((($3)+(20))|0);
 var $237=(($4+$_sum13)|0);
 var $238=$237;
 var $239=HEAP32[(($238)>>2)];
 var $240=($239|0)==0;
 if($240){label=69;break;}else{label=65;break;}
 case 65: 
 var $242=$239;
 var $243=HEAP32[((13432)>>2)];
 var $244=($242>>>0)<($243>>>0);
 if($244){label=67;break;}else{label=66;break;}
 case 66: 
 var $246=(($R_1+20)|0);
 HEAP32[(($246)>>2)]=$239;
 var $247=(($239+24)|0);
 HEAP32[(($247)>>2)]=$R_1;
 label=69;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 _abort();
 throw "Reached an unreachable!";
 case 69: 
 var $251=($106>>>0)<16;
 if($251){label=70;break;}else{label=71;break;}
 case 70: 
 var $253=HEAP32[(($1)>>2)];
 var $254=$253&1;
 var $255=$103|$254;
 var $256=$255|2;
 HEAP32[(($1)>>2)]=$256;
 var $_sum910=$103|4;
 var $257=(($4+$_sum910)|0);
 var $258=$257;
 var $259=HEAP32[(($258)>>2)];
 var $260=$259|1;
 HEAP32[(($258)>>2)]=$260;
 var $newp_0=$p;label=73;break;
 case 71: 
 var $262=(($4+$nb)|0);
 var $263=$262;
 var $264=HEAP32[(($1)>>2)];
 var $265=$264&1;
 var $266=$265|$nb;
 var $267=$266|2;
 HEAP32[(($1)>>2)]=$267;
 var $_sum5=((($nb)+(4))|0);
 var $268=(($4+$_sum5)|0);
 var $269=$268;
 var $270=$106|3;
 HEAP32[(($269)>>2)]=$270;
 var $_sum78=$103|4;
 var $271=(($4+$_sum78)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273|1;
 HEAP32[(($272)>>2)]=$274;
 _dispose_chunk($263,$106);
 var $newp_0=$p;label=73;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $newp_0;
 return $newp_0;
  default: assert(0, "bad label: " + label);
 }
}
function _dispose_chunk($p,$psize){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_0277=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=134;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((13432)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((13436)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((13456+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((13416)>>2)];
 var $49=$48&$47;
 HEAP32[((13416)>>2)]=$49;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre62=(($32+8)|0);
 var $_pre_phi63=$_pre62;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi63=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi63;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi63)>>2)]=$29;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_0277=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((13720+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=HEAP32[(($110)>>2)];
 var $117=1<<$116;
 var $118=$117^-1;
 var $119=HEAP32[((13420)>>2)];
 var $120=$119&$118;
 HEAP32[((13420)>>2)]=$120;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 35: 
 var $122=$64;
 var $123=HEAP32[((13432)>>2)];
 var $124=($122>>>0)<($123>>>0);
 if($124){label=39;break;}else{label=36;break;}
 case 36: 
 var $126=(($64+16)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)==($61|0);
 if($128){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($126)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $131=(($64+20)|0);
 HEAP32[(($131)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $134=($R_1|0)==0;
 if($134){var $_0=$16;var $_0277=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $136=$R_1;
 var $137=HEAP32[((13432)>>2)];
 var $138=($136>>>0)<($137>>>0);
 if($138){label=50;break;}else{label=42;break;}
 case 42: 
 var $140=(($R_1+24)|0);
 HEAP32[(($140)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $141=(($1+$_sum31)|0);
 var $142=$141;
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==0;
 if($144){label=46;break;}else{label=43;break;}
 case 43: 
 var $146=$143;
 var $147=HEAP32[((13432)>>2)];
 var $148=($146>>>0)<($147>>>0);
 if($148){label=45;break;}else{label=44;break;}
 case 44: 
 var $150=(($R_1+16)|0);
 HEAP32[(($150)>>2)]=$143;
 var $151=(($143+24)|0);
 HEAP32[(($151)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $154=(($1+$_sum32)|0);
 var $155=$154;
 var $156=HEAP32[(($155)>>2)];
 var $157=($156|0)==0;
 if($157){var $_0=$16;var $_0277=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $159=$156;
 var $160=HEAP32[((13432)>>2)];
 var $161=($159>>>0)<($160>>>0);
 if($161){label=49;break;}else{label=48;break;}
 case 48: 
 var $163=(($R_1+20)|0);
 HEAP32[(($163)>>2)]=$156;
 var $164=(($156+24)|0);
 HEAP32[(($164)>>2)]=$R_1;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $168=(($1+$_sum)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=$170&3;
 var $172=($171|0)==3;
 if($172){label=52;break;}else{var $_0=$16;var $_0277=$17;label=54;break;}
 case 52: 
 HEAP32[((13424)>>2)]=$17;
 var $174=HEAP32[(($169)>>2)];
 var $175=$174&-2;
 HEAP32[(($169)>>2)]=$175;
 var $176=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $177=(($1+$_sum24)|0);
 var $178=$177;
 HEAP32[(($178)>>2)]=$176;
 var $179=$2;
 HEAP32[(($179)>>2)]=$17;
 label=134;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_0277;
 var $_0;
 var $181=HEAP32[((13432)>>2)];
 var $182=($2>>>0)<($181>>>0);
 if($182){label=133;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $184=(($1+$_sum1)|0);
 var $185=$184;
 var $186=HEAP32[(($185)>>2)];
 var $187=$186&2;
 var $188=($187|0)==0;
 if($188){label=56;break;}else{label=109;break;}
 case 56: 
 var $190=HEAP32[((13440)>>2)];
 var $191=($3|0)==($190|0);
 if($191){label=57;break;}else{label=59;break;}
 case 57: 
 var $193=HEAP32[((13428)>>2)];
 var $194=((($193)+($_0277))|0);
 HEAP32[((13428)>>2)]=$194;
 HEAP32[((13440)>>2)]=$_0;
 var $195=$194|1;
 var $196=(($_0+4)|0);
 HEAP32[(($196)>>2)]=$195;
 var $197=HEAP32[((13436)>>2)];
 var $198=($_0|0)==($197|0);
 if($198){label=58;break;}else{label=134;break;}
 case 58: 
 HEAP32[((13436)>>2)]=0;
 HEAP32[((13424)>>2)]=0;
 label=134;break;
 case 59: 
 var $201=HEAP32[((13436)>>2)];
 var $202=($3|0)==($201|0);
 if($202){label=60;break;}else{label=61;break;}
 case 60: 
 var $204=HEAP32[((13424)>>2)];
 var $205=((($204)+($_0277))|0);
 HEAP32[((13424)>>2)]=$205;
 HEAP32[((13436)>>2)]=$_0;
 var $206=$205|1;
 var $207=(($_0+4)|0);
 HEAP32[(($207)>>2)]=$206;
 var $208=$_0;
 var $209=(($208+$205)|0);
 var $210=$209;
 HEAP32[(($210)>>2)]=$205;
 label=134;break;
 case 61: 
 var $212=$186&-8;
 var $213=((($212)+($_0277))|0);
 var $214=$186>>>3;
 var $215=($186>>>0)<256;
 if($215){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $217=(($1+$_sum20)|0);
 var $218=$217;
 var $219=HEAP32[(($218)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $220=(($1+$_sum21)|0);
 var $221=$220;
 var $222=HEAP32[(($221)>>2)];
 var $223=$214<<1;
 var $224=((13456+($223<<2))|0);
 var $225=$224;
 var $226=($219|0)==($225|0);
 if($226){label=65;break;}else{label=63;break;}
 case 63: 
 var $228=$219;
 var $229=($228>>>0)<($181>>>0);
 if($229){label=73;break;}else{label=64;break;}
 case 64: 
 var $231=(($219+12)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==($3|0);
 if($233){label=65;break;}else{label=73;break;}
 case 65: 
 var $234=($222|0)==($219|0);
 if($234){label=66;break;}else{label=67;break;}
 case 66: 
 var $236=1<<$214;
 var $237=$236^-1;
 var $238=HEAP32[((13416)>>2)];
 var $239=$238&$237;
 HEAP32[((13416)>>2)]=$239;
 label=107;break;
 case 67: 
 var $241=($222|0)==($225|0);
 if($241){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre60=(($222+8)|0);
 var $_pre_phi61=$_pre60;label=71;break;
 case 69: 
 var $243=$222;
 var $244=($243>>>0)<($181>>>0);
 if($244){label=72;break;}else{label=70;break;}
 case 70: 
 var $246=(($222+8)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)==($3|0);
 if($248){var $_pre_phi61=$246;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi61;
 var $249=(($219+12)|0);
 HEAP32[(($249)>>2)]=$222;
 HEAP32[(($_pre_phi61)>>2)]=$219;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $251=$2;
 var $_sum2=((($psize)+(24))|0);
 var $252=(($1+$_sum2)|0);
 var $253=$252;
 var $254=HEAP32[(($253)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $255=(($1+$_sum3)|0);
 var $256=$255;
 var $257=HEAP32[(($256)>>2)];
 var $258=($257|0)==($251|0);
 if($258){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $260=(($1+$_sum18)|0);
 var $261=$260;
 var $262=HEAP32[(($261)>>2)];
 var $263=$262;
 var $264=($263>>>0)<($181>>>0);
 if($264){label=79;break;}else{label=76;break;}
 case 76: 
 var $266=(($262+12)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==($251|0);
 if($268){label=77;break;}else{label=79;break;}
 case 77: 
 var $270=(($257+8)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=($271|0)==($251|0);
 if($272){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($266)>>2)]=$257;
 HEAP32[(($270)>>2)]=$262;
 var $R7_1=$257;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $275=(($1+$_sum5)|0);
 var $276=$275;
 var $277=HEAP32[(($276)>>2)];
 var $278=($277|0)==0;
 if($278){label=81;break;}else{var $R7_0=$277;var $RP9_0=$276;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $280=(($1+$_sum4)|0);
 var $281=$280;
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)==0;
 if($283){var $R7_1=0;label=87;break;}else{var $R7_0=$282;var $RP9_0=$281;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $284=(($R7_0+20)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($285|0)==0;
 if($286){label=83;break;}else{var $R7_0=$285;var $RP9_0=$284;label=82;break;}
 case 83: 
 var $288=(($R7_0+16)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=82;break;}
 case 84: 
 var $292=$RP9_0;
 var $293=($292>>>0)<($181>>>0);
 if($293){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $297=($254|0)==0;
 if($297){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $299=(($1+$_sum15)|0);
 var $300=$299;
 var $301=HEAP32[(($300)>>2)];
 var $302=((13720+($301<<2))|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($251|0)==($303|0);
 if($304){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($302)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $306=HEAP32[(($300)>>2)];
 var $307=1<<$306;
 var $308=$307^-1;
 var $309=HEAP32[((13420)>>2)];
 var $310=$309&$308;
 HEAP32[((13420)>>2)]=$310;
 label=107;break;
 case 91: 
 var $312=$254;
 var $313=HEAP32[((13432)>>2)];
 var $314=($312>>>0)<($313>>>0);
 if($314){label=95;break;}else{label=92;break;}
 case 92: 
 var $316=(($254+16)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=($317|0)==($251|0);
 if($318){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($316)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $321=(($254+20)|0);
 HEAP32[(($321)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $324=($R7_1|0)==0;
 if($324){label=107;break;}else{label=97;break;}
 case 97: 
 var $326=$R7_1;
 var $327=HEAP32[((13432)>>2)];
 var $328=($326>>>0)<($327>>>0);
 if($328){label=106;break;}else{label=98;break;}
 case 98: 
 var $330=(($R7_1+24)|0);
 HEAP32[(($330)>>2)]=$254;
 var $_sum16=((($psize)+(16))|0);
 var $331=(($1+$_sum16)|0);
 var $332=$331;
 var $333=HEAP32[(($332)>>2)];
 var $334=($333|0)==0;
 if($334){label=102;break;}else{label=99;break;}
 case 99: 
 var $336=$333;
 var $337=HEAP32[((13432)>>2)];
 var $338=($336>>>0)<($337>>>0);
 if($338){label=101;break;}else{label=100;break;}
 case 100: 
 var $340=(($R7_1+16)|0);
 HEAP32[(($340)>>2)]=$333;
 var $341=(($333+24)|0);
 HEAP32[(($341)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $344=(($1+$_sum17)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=107;break;}else{label=103;break;}
 case 103: 
 var $349=$346;
 var $350=HEAP32[((13432)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=105;break;}else{label=104;break;}
 case 104: 
 var $353=(($R7_1+20)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $358=$213|1;
 var $359=(($_0+4)|0);
 HEAP32[(($359)>>2)]=$358;
 var $360=$_0;
 var $361=(($360+$213)|0);
 var $362=$361;
 HEAP32[(($362)>>2)]=$213;
 var $363=HEAP32[((13436)>>2)];
 var $364=($_0|0)==($363|0);
 if($364){label=108;break;}else{var $_1=$213;label=110;break;}
 case 108: 
 HEAP32[((13424)>>2)]=$213;
 label=134;break;
 case 109: 
 var $367=$186&-2;
 HEAP32[(($185)>>2)]=$367;
 var $368=$_0277|1;
 var $369=(($_0+4)|0);
 HEAP32[(($369)>>2)]=$368;
 var $370=$_0;
 var $371=(($370+$_0277)|0);
 var $372=$371;
 HEAP32[(($372)>>2)]=$_0277;
 var $_1=$_0277;label=110;break;
 case 110: 
 var $_1;
 var $374=$_1>>>3;
 var $375=($_1>>>0)<256;
 if($375){label=111;break;}else{label=116;break;}
 case 111: 
 var $377=$374<<1;
 var $378=((13456+($377<<2))|0);
 var $379=$378;
 var $380=HEAP32[((13416)>>2)];
 var $381=1<<$374;
 var $382=$380&$381;
 var $383=($382|0)==0;
 if($383){label=112;break;}else{label=113;break;}
 case 112: 
 var $385=$380|$381;
 HEAP32[((13416)>>2)]=$385;
 var $_sum13_pre=((($377)+(2))|0);
 var $_pre=((13456+($_sum13_pre<<2))|0);
 var $F16_0=$379;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($377)+(2))|0);
 var $387=((13456+($_sum14<<2))|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=$388;
 var $390=HEAP32[((13432)>>2)];
 var $391=($389>>>0)<($390>>>0);
 if($391){label=114;break;}else{var $F16_0=$388;var $_pre_phi=$387;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $394=(($F16_0+12)|0);
 HEAP32[(($394)>>2)]=$_0;
 var $395=(($_0+8)|0);
 HEAP32[(($395)>>2)]=$F16_0;
 var $396=(($_0+12)|0);
 HEAP32[(($396)>>2)]=$379;
 label=134;break;
 case 116: 
 var $398=$_0;
 var $399=$_1>>>8;
 var $400=($399|0)==0;
 if($400){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $402=($_1>>>0)>16777215;
 if($402){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $404=((($399)+(1048320))|0);
 var $405=$404>>>16;
 var $406=$405&8;
 var $407=$399<<$406;
 var $408=((($407)+(520192))|0);
 var $409=$408>>>16;
 var $410=$409&4;
 var $411=$410|$406;
 var $412=$407<<$410;
 var $413=((($412)+(245760))|0);
 var $414=$413>>>16;
 var $415=$414&2;
 var $416=$411|$415;
 var $417=(((14)-($416))|0);
 var $418=$412<<$415;
 var $419=$418>>>15;
 var $420=((($417)+($419))|0);
 var $421=$420<<1;
 var $422=((($420)+(7))|0);
 var $423=$_1>>>($422>>>0);
 var $424=$423&1;
 var $425=$424|$421;
 var $I19_0=$425;label=119;break;
 case 119: 
 var $I19_0;
 var $427=((13720+($I19_0<<2))|0);
 var $428=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($428)>>2)]=$I19_0_c;
 var $429=(($_0+20)|0);
 HEAP32[(($429)>>2)]=0;
 var $430=(($_0+16)|0);
 HEAP32[(($430)>>2)]=0;
 var $431=HEAP32[((13420)>>2)];
 var $432=1<<$I19_0;
 var $433=$431&$432;
 var $434=($433|0)==0;
 if($434){label=120;break;}else{label=121;break;}
 case 120: 
 var $436=$431|$432;
 HEAP32[((13420)>>2)]=$436;
 HEAP32[(($427)>>2)]=$398;
 var $437=(($_0+24)|0);
 var $_c=$427;
 HEAP32[(($437)>>2)]=$_c;
 var $438=(($_0+12)|0);
 HEAP32[(($438)>>2)]=$_0;
 var $439=(($_0+8)|0);
 HEAP32[(($439)>>2)]=$_0;
 label=134;break;
 case 121: 
 var $441=HEAP32[(($427)>>2)];
 var $442=($I19_0|0)==31;
 if($442){var $447=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $444=$I19_0>>>1;
 var $445=(((25)-($444))|0);
 var $447=$445;label=123;break;
 case 123: 
 var $447;
 var $448=$_1<<$447;
 var $K20_0=$448;var $T_0=$441;label=124;break;
 case 124: 
 var $T_0;
 var $K20_0;
 var $450=(($T_0+4)|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=$451&-8;
 var $453=($452|0)==($_1|0);
 if($453){label=129;break;}else{label=125;break;}
 case 125: 
 var $455=$K20_0>>>31;
 var $456=(($T_0+16+($455<<2))|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=($457|0)==0;
 var $459=$K20_0<<1;
 if($458){label=126;break;}else{var $K20_0=$459;var $T_0=$457;label=124;break;}
 case 126: 
 var $461=$456;
 var $462=HEAP32[((13432)>>2)];
 var $463=($461>>>0)<($462>>>0);
 if($463){label=128;break;}else{label=127;break;}
 case 127: 
 HEAP32[(($456)>>2)]=$398;
 var $465=(($_0+24)|0);
 var $T_0_c10=$T_0;
 HEAP32[(($465)>>2)]=$T_0_c10;
 var $466=(($_0+12)|0);
 HEAP32[(($466)>>2)]=$_0;
 var $467=(($_0+8)|0);
 HEAP32[(($467)>>2)]=$_0;
 label=134;break;
 case 128: 
 _abort();
 throw "Reached an unreachable!";
 case 129: 
 var $470=(($T_0+8)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$T_0;
 var $473=HEAP32[((13432)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=132;break;}else{label=130;break;}
 case 130: 
 var $476=$471;
 var $477=($476>>>0)<($473>>>0);
 if($477){label=132;break;}else{label=131;break;}
 case 131: 
 var $479=(($471+12)|0);
 HEAP32[(($479)>>2)]=$398;
 HEAP32[(($470)>>2)]=$398;
 var $480=(($_0+8)|0);
 var $_c9=$471;
 HEAP32[(($480)>>2)]=$_c9;
 var $481=(($_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($481)>>2)]=$T_0_c;
 var $482=(($_0+24)|0);
 HEAP32[(($482)>>2)]=0;
 label=134;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __Znwj($size){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($size|0)==0;
 var $_size=($1?1:$size);
 label=2;break;
 case 2: 
 var $3=_malloc($_size);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=10;break;}
 case 3: 
 var $6=(tempValue=HEAP32[((17464)>>2)],HEAP32[((17464)>>2)]=tempValue+0,tempValue);
 var $7=($6|0)==0;
 if($7){label=9;break;}else{label=4;break;}
 case 4: 
 var $9=$6;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=7;break;
 case 7: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $11=$lpad_phi$1;
 var $12=($11|0)<0;
 if($12){label=8;break;}else{label=11;break;}
 case 8: 
 var $14=$lpad_phi$0;
 ___cxa_call_unexpected($14);
 throw "Reached an unreachable!";
 case 9: 
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=5352;
 (function() { try { __THREW__ = 0; return ___cxa_throw($16,11456,(74)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=6;break; }
 case 10: 
 return $3;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Znaj($size){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 return $1;
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=$4$1;
 var $6=($5|0)<0;
 if($6){label=4;break;}else{label=5;break;}
 case 4: 
 var $8=$4$0;
 ___cxa_call_unexpected($8);
 throw "Reached an unreachable!";
 case 5: 
 ___resumeException($4$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZdlPv($ptr){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ptr|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 _free($ptr);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZdaPv($ptr){
 var label=0;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD0Ev($this){
 var label=0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt9bad_allocD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;
 return 2120;
}
function __ZSt17__throw_bad_allocv(){
 var label=0;
 var $1=___cxa_allocate_exception(4);
 var $2=$1;
 HEAP32[(($2)>>2)]=5352;
 ___cxa_throw($1,11456,(74));
 throw "Reached an unreachable!";
}
function _strtod($string,$endPtr){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $p_0=$string;label=2;break;
 case 2: 
 var $p_0;
 var $2=HEAP8[($p_0)];
 var $3=(($2<<24)>>24);
 var $4=_isspace($3);
 var $5=($4|0)==0;
 var $6=(($p_0+1)|0);
 if($5){label=3;break;}else{var $p_0=$6;label=2;break;}
 case 3: 
 var $8=HEAP8[($p_0)];
 if((($8<<24)>>24)==45){ label=4;break;}else if((($8<<24)>>24)==43){ label=5;break;}else{var $p_2=$p_0;var $sign_0=0;label=6;break;}
 case 4: 
 var $p_2=$6;var $sign_0=1;label=6;break;
 case 5: 
 var $p_2=$6;var $sign_0=0;label=6;break;
 case 6: 
 var $sign_0;
 var $p_2;
 var $decPt_0=-1;var $mantSize_0=0;var $p_3=$p_2;label=7;break;
 case 7: 
 var $p_3;
 var $mantSize_0;
 var $decPt_0;
 var $13=HEAP8[($p_3)];
 var $14=(($13<<24)>>24);
 var $isdigittmp=((($14)-(48))|0);
 var $isdigit=($isdigittmp>>>0)<10;
 if($isdigit){var $decPt_1=$decPt_0;label=9;break;}else{label=8;break;}
 case 8: 
 var $16=(($13<<24)>>24)!=46;
 var $17=($decPt_0|0)>-1;
 var $or_cond=$16|$17;
 if($or_cond){label=10;break;}else{var $decPt_1=$mantSize_0;label=9;break;}
 case 9: 
 var $decPt_1;
 var $19=(($p_3+1)|0);
 var $20=((($mantSize_0)+(1))|0);
 var $decPt_0=$decPt_1;var $mantSize_0=$20;var $p_3=$19;label=7;break;
 case 10: 
 var $22=(((-$mantSize_0))|0);
 var $23=(($p_3+$22)|0);
 var $24=($decPt_0|0)<0;
 var $not_=$24^1;
 var $25=(($not_<<31)>>31);
 var $mantSize_1=((($25)+($mantSize_0))|0);
 var $decPt_2=($24?$mantSize_0:$decPt_0);
 var $26=($mantSize_1|0)>18;
 var $27=(((-$mantSize_1))|0);
 var $fracExp_0_p=($26?-18:$27);
 var $fracExp_0=((($fracExp_0_p)+($decPt_2))|0);
 var $mantSize_2=($26?18:$mantSize_1);
 var $28=($mantSize_2|0)==0;
 if($28){var $p_11=$string;var $fraction_0=0;label=37;break;}else{label=11;break;}
 case 11: 
 var $29=($mantSize_2|0)>9;
 if($29){var $p_483=$23;var $mantSize_384=$mantSize_2;var $frac1_085=0;label=15;break;}else{label=13;break;}
 case 12: 
 var $phitmp=($40|0);
 var $phitmp90=($phitmp)*(1000000000);
 var $frac1_0_lcssa97=$phitmp90;var $mantSize_3_lcssa98=9;var $p_4_lcssa99=$p_5;label=14;break;
 case 13: 
 var $30=($mantSize_2|0)>0;
 if($30){var $frac1_0_lcssa97=0;var $mantSize_3_lcssa98=$mantSize_2;var $p_4_lcssa99=$23;label=14;break;}else{var $frac2_0_lcssa=0;var $frac1_0_lcssa96=0;label=22;break;}
 case 14: 
 var $p_4_lcssa99;
 var $mantSize_3_lcssa98;
 var $frac1_0_lcssa97;
 var $p_676=$p_4_lcssa99;var $mantSize_477=$mantSize_3_lcssa98;var $frac2_078=0;label=18;break;
 case 15: 
 var $frac1_085;
 var $mantSize_384;
 var $p_483;
 var $31=HEAP8[($p_483)];
 var $32=(($p_483+1)|0);
 var $33=(($31<<24)>>24)==46;
 if($33){label=16;break;}else{var $c_0_in=$31;var $p_5=$32;label=17;break;}
 case 16: 
 var $35=HEAP8[($32)];
 var $36=(($p_483+2)|0);
 var $c_0_in=$35;var $p_5=$36;label=17;break;
 case 17: 
 var $p_5;
 var $c_0_in;
 var $c_0=(($c_0_in<<24)>>24);
 var $38=((($frac1_085)*(10))&-1);
 var $39=((($38)-(48))|0);
 var $40=((($39)+($c_0))|0);
 var $41=((($mantSize_384)-(1))|0);
 var $42=($41|0)>9;
 if($42){var $p_483=$p_5;var $mantSize_384=$41;var $frac1_085=$40;label=15;break;}else{label=12;break;}
 case 18: 
 var $frac2_078;
 var $mantSize_477;
 var $p_676;
 var $44=HEAP8[($p_676)];
 var $45=(($p_676+1)|0);
 var $46=(($44<<24)>>24)==46;
 if($46){label=19;break;}else{var $c_1_in=$44;var $p_7=$45;label=20;break;}
 case 19: 
 var $48=HEAP8[($45)];
 var $49=(($p_676+2)|0);
 var $c_1_in=$48;var $p_7=$49;label=20;break;
 case 20: 
 var $p_7;
 var $c_1_in;
 var $c_1=(($c_1_in<<24)>>24);
 var $51=((($frac2_078)*(10))&-1);
 var $52=((($51)-(48))|0);
 var $53=((($52)+($c_1))|0);
 var $54=((($mantSize_477)-(1))|0);
 var $55=($54|0)>0;
 if($55){var $p_676=$p_7;var $mantSize_477=$54;var $frac2_078=$53;label=18;break;}else{label=21;break;}
 case 21: 
 var $phitmp91=($53|0);
 var $frac2_0_lcssa=$phitmp91;var $frac1_0_lcssa96=$frac1_0_lcssa97;label=22;break;
 case 22: 
 var $frac1_0_lcssa96;
 var $frac2_0_lcssa;
 var $57=($frac1_0_lcssa96)+($frac2_0_lcssa);
 if((($13<<24)>>24)==69|(($13<<24)>>24)==101){ label=23;break;}else{var $exp_1=0;var $p_10=$p_3;var $expSign_1=0;label=28;break;}
 case 23: 
 var $59=(($p_3+1)|0);
 var $60=HEAP8[($59)];
 if((($60<<24)>>24)==45){ label=24;break;}else if((($60<<24)>>24)==43){ label=25;break;}else{var $p_9_ph=$59;var $expSign_0_ph=0;label=26;break;}
 case 24: 
 var $62=(($p_3+2)|0);
 var $p_9_ph=$62;var $expSign_0_ph=1;label=26;break;
 case 25: 
 var $64=(($p_3+2)|0);
 var $p_9_ph=$64;var $expSign_0_ph=0;label=26;break;
 case 26: 
 var $expSign_0_ph;
 var $p_9_ph;
 var $65=HEAP8[($p_9_ph)];
 var $66=(($65<<24)>>24);
 var $isdigittmp6268=((($66)-(48))|0);
 var $isdigit6369=($isdigittmp6268>>>0)<10;
 if($isdigit6369){var $p_970=$p_9_ph;var $exp_071=0;var $67=$65;label=27;break;}else{var $exp_1=0;var $p_10=$p_9_ph;var $expSign_1=$expSign_0_ph;label=28;break;}
 case 27: 
 var $67;
 var $exp_071;
 var $p_970;
 var $68=((($exp_071)*(10))&-1);
 var $69=(($67<<24)>>24);
 var $70=((($68)-(48))|0);
 var $71=((($70)+($69))|0);
 var $72=(($p_970+1)|0);
 var $73=HEAP8[($72)];
 var $74=(($73<<24)>>24);
 var $isdigittmp62=((($74)-(48))|0);
 var $isdigit63=($isdigittmp62>>>0)<10;
 if($isdigit63){var $p_970=$72;var $exp_071=$71;var $67=$73;label=27;break;}else{var $exp_1=$71;var $p_10=$72;var $expSign_1=$expSign_0_ph;label=28;break;}
 case 28: 
 var $expSign_1;
 var $p_10;
 var $exp_1;
 var $75=($expSign_1|0)==0;
 var $76=(((-$exp_1))|0);
 var $exp_2_p=($75?$exp_1:$76);
 var $exp_2=((($fracExp_0)+($exp_2_p))|0);
 var $77=($exp_2|0)<0;
 var $78=(((-$exp_2))|0);
 var $exp_3=($77?$78:$exp_2);
 var $79=($exp_3|0)>511;
 if($79){label=29;break;}else{label=30;break;}
 case 29: 
 var $80=___errno_location();
 HEAP32[(($80)>>2)]=34;
 var $dblExp_064=1;var $d_065=8;var $exp_566=511;label=31;break;
 case 30: 
 var $81=($exp_3|0)==0;
 if($81){var $dblExp_0_lcssa=1;label=34;break;}else{var $dblExp_064=1;var $d_065=8;var $exp_566=$exp_3;label=31;break;}
 case 31: 
 var $exp_566;
 var $d_065;
 var $dblExp_064;
 var $82=$exp_566&1;
 var $83=($82|0)==0;
 if($83){var $dblExp_1=$dblExp_064;label=33;break;}else{label=32;break;}
 case 32: 
 var $85=HEAPF64[(($d_065)>>3)];
 var $86=($dblExp_064)*($85);
 var $dblExp_1=$86;label=33;break;
 case 33: 
 var $dblExp_1;
 var $88=$exp_566>>1;
 var $89=(($d_065+8)|0);
 var $90=($88|0)==0;
 if($90){var $dblExp_0_lcssa=$dblExp_1;label=34;break;}else{var $dblExp_064=$dblExp_1;var $d_065=$89;var $exp_566=$88;label=31;break;}
 case 34: 
 var $dblExp_0_lcssa;
 var $91=($exp_2|0)>-1;
 if($91){label=36;break;}else{label=35;break;}
 case 35: 
 var $93=($57)/($dblExp_0_lcssa);
 var $p_11=$p_10;var $fraction_0=$93;label=37;break;
 case 36: 
 var $95=($57)*($dblExp_0_lcssa);
 var $p_11=$p_10;var $fraction_0=$95;label=37;break;
 case 37: 
 var $fraction_0;
 var $p_11;
 var $97=($endPtr|0)==0;
 if($97){label=39;break;}else{label=38;break;}
 case 38: 
 HEAP32[(($endPtr)>>2)]=$p_11;
 label=39;break;
 case 39: 
 var $100=($sign_0|0)==0;
 if($100){var $_0=$fraction_0;label=41;break;}else{label=40;break;}
 case 40: 
 var $102=((-.0))-($fraction_0);
 var $_0=$102;label=41;break;
 case 41: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _strtold_l($nptr,$endptr,$loc){
 var label=0;
 var $1=_strtod($nptr,$endptr);
 return $1;
}
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
//@ sourceMappingURL=dav_smallptgpuv2.js.map