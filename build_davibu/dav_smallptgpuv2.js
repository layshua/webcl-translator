
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = '../build/dav_smallptgpuv2.data';
    var REMOTE_PACKAGE_NAME = (Module['filePackagePrefixURL'] || '') + 'dav_smallptgpuv2.data';
    var REMOTE_PACKAGE_SIZE = 55950;
    var PACKAGE_UUID = 'f4be18a4-5d73-451e-8992-238b25d2c029';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'scenes', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 12946, 0, 0).open('GET', '/rendering_kernel.cl');
    new DataRequest(12946, 14499, 0, 0).open('GET', '/scene_build_complex.pl');
    new DataRequest(14499, 14689, 0, 0).open('GET', '/scenes/caustic.scn');
    new DataRequest(14689, 14982, 0, 0).open('GET', '/scenes/caustic3.scn');
    new DataRequest(14982, 54502, 0, 0).open('GET', '/scenes/complex.scn');
    new DataRequest(54502, 55081, 0, 0).open('GET', '/scenes/cornell_large.scn');
    new DataRequest(55081, 55658, 0, 0).open('GET', '/scenes/cornell.scn');
    new DataRequest(55658, 55950, 0, 0).open('GET', '/scenes/simple.scn');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/rendering_kernel.cl"].onload();
          DataRequest.prototype.requests["/scene_build_complex.pl"].onload();
          DataRequest.prototype.requests["/scenes/caustic.scn"].onload();
          DataRequest.prototype.requests["/scenes/caustic3.scn"].onload();
          DataRequest.prototype.requests["/scenes/complex.scn"].onload();
          DataRequest.prototype.requests["/scenes/cornell_large.scn"].onload();
          DataRequest.prototype.requests["/scenes/cornell.scn"].onload();
          DataRequest.prototype.requests["/scenes/simple.scn"].onload();
          Module['removeRunDependency']('datafile_../build/dav_smallptgpuv2.data');

    };
    Module['addRunDependency']('datafile_../build/dav_smallptgpuv2.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    return rawList ? list : ret + flushList();
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 52428800;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 16568;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 16608;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(17435);
/* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a20() } }, { func: function() { __GLOBAL__I_a82() } }, { func: function() { __GLOBAL__I_a129() } }, { func: function() { __GLOBAL__I_a244() } });


/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,50,99,108,53,69,114,114,111,114,69,0,0,0,0,0,232,64,0,0,32,0,0,0,0,0,0,0,0,0,0,0,85,115,97,103,101,58,32,0,32,60,117,115,101,32,67,80,85,32,100,101,118,105,99,101,115,32,40,48,32,111,114,32,49,41,62,32,60,117,115,101,32,71,80,85,32,100,101,118,105,99,101,115,32,40,48,32,111,114,32,49,41,62,32,60,71,80,85,32,119,111,114,107,103,114,111,117,112,32,115,105,122,101,32,40,48,61,100,101,102,97,117,108,116,32,118,97,108,117,101,32,111,114,32,97,110,121,116,104,105,110,103,32,62,32,48,32,97,110,100,32,112,111,119,101,114,32,111,102,32,50,41,62,32,60,119,105,110,100,111,119,32,119,105,100,116,104,62,32,60,119,105,110,100,111,119,32,104,101,105,103,104,116,62,32,60,115,99,101,110,101,32,102,105,108,101,62,0,0,0,0,0,0,0,0,115,99,101,110,101,115,47,99,111,114,110,101,108,108,46,115,99,110,0,0,0,0,0,0,69,82,82,79,82,58,32,0,40,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,101,109,112,116,121,0,0,0,0,0,0,0,48,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,101,97,100,105,110,103,32,115,99,101,110,101,58,32,37,115,10,0,0,0,0,0,0,114,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,0,0,99,97,109,101,114,97,32,37,102,32,37,102,32,37,102,32,32,37,102,32,37,102,32,37,102,10,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,54,32,99,97,109,101,114,97,32,112,97,114,97,109,101,116,101,114,115,58,32,37,100,10,0,115,105,122,101,32,37,117,10,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,115,112,104,101,114,101,32,99,111,117,110,116,58,32,37,100,10,0,0,0,0,0,0,0,0,83,99,101,110,101,32,115,105,122,101,58,32,37,100,10,0,115,112,104,101,114,101,32,37,102,32,32,37,102,32,37,102,32,37,102,32,32,37,102,32,37,102,32,37,102,32,32,37,102,32,37,102,32,37,102,32,32,37,100,10,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,97,116,101,114,105,97,108,32,116,121,112,101,32,102,111,114,32,115,112,104,101,114,101,32,35,37,100,58,32,37,100,10,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,115,112,104,101,114,101,32,35,37,100,58,32,37,100,10,0,0,79,112,101,110,67,76,32,80,108,97,116,102,111,114,109,32,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,97,110,111,110,121,109,111,117,115,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,97,110,32,97,112,112,114,111,112,105,97,116,101,32,79,112,101,110,67,76,32,112,108,97,116,102,111,114,109,0,0,0,0,79,112,101,110,67,76,32,68,101,118,105,99,101,32,110,97,109,101,32,0,0,0,0,0,84,89,80,69,95,65,76,76,0,0,0,0,0,0,0,0,84,89,80,69,95,68,69,70,65,85,76,84,0,0,0,0,84,89,80,69,95,67,80,85,0,0,0,0,0,0,0,0,84,89,80,69,95,71,80,85,0,0,0,0,0,0,0,0,84,89,80,69,95,85,78,75,78,79,87,78,0,0,0,0,79,112,101,110,67,76,32,68,101,118,105,99,101,32,116,121,112,101,32,0,0,0,0,0,79,112,101,110,67,76,32,68,101,118,105,99,101,32,117,110,105,116,115,32,0,0,0,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,97,110,32,97,112,112,114,111,112,105,97,116,101,32,79,112,101,110,67,76,32,100,101,118,105,99,101,0,0,0,0,0,0,114,101,110,100,101,114,105,110,103,95,107,101,114,110,101,108,46,99,108,0,0,0,0,0,79,112,101,110,67,76,32,68,101,118,105,99,101,32,117,115,101,100,58,32,0,0,0,0,91,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,99,108,103,101,116,68,101,118,105,99,101,73,110,102,111,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,99,108,69,110,113,117,101,117,101,87,114,105,116,101,66,117,102,102,101,114,0,0,0,0,99,108,70,105,110,105,115,104,0,0,0,0,0,0,0,0,85,112,100,97,116,105,110,103,32,79,112,101,110,67,76,32,68,101,118,105,99,101,32,119,111,114,107,108,111,97,100,115,0,0,0,0,0,0,0,0,99,108,71,101,116,68,101,118,105,99,101,73,68,115,0,0,99,108,71,101,116,80,108,97,116,102,111,114,109,73,68,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,13,0,0,0,0,0,0,8,25,0,0,0,0,0,0,1,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,109,97,103,101,46,112,112,109,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,105,109,97,103,101,32,102,105,108,101,58,32,105,109,97,103,101,46,112,112,109,10,0,0,0,80,51,10,37,100,32,37,100,10,37,100,10,0,0,0,0,37,100,32,37,100,32,37,100,32,0,0,0,0,0,0,0,82,101,108,101,97,115,105,110,103,32,114,101,115,111,117,114,99,101,115,0,0,0,0,0,68,111,110,101,46,0,0,0,83,101,108,101,99,116,101,100,32,115,112,104,101,114,101,32,37,100,32,40,37,102,32,37,102,32,37,102,41,10,0,0,80,108,101,97,115,101,44,32,119,97,105,116,32,102,111,114,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,112,114,111,102,105,108,105,110,103,32,112,104,97,115,101,0,83,109,97,108,108,112,116,71,80,85,32,86,50,46,48,32,40,87,114,105,116,116,101,110,32,98,121,32,68,97,118,105,100,32,66,117,99,99,105,97,114,101,108,108,105,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,67,114,101,97,116,105,110,103,32,84,101,120,116,117,114,101,32,49,32,37,100,32,120,32,37,100,46,46,46,10,0,0,193,132,0,0,0,0,0,0,8,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,82,101,110,100,101,114,105,110,103,32,116,105,109,101,32,37,46,51,102,32,115,101,99,32,40,112,97,115,115,32,37,100,41,93,91,65,118,103,46,32,115,97,109,112,108,101,47,115,101,99,32,37,46,49,102,75,93,91,73,110,115,116,97,110,116,32,115,97,109,112,108,101,47,115,101,99,32,37,46,49,102,75,93,0,0,0,0,72,101,108,112,32,38,32,68,101,118,105,99,101,115,0,0,104,32,45,32,116,111,103,103,108,101,32,72,101,108,112,0,97,114,114,111,119,32,75,101,121,115,32,45,32,114,111,116,97,116,101,32,99,97,109,101,114,97,32,108,101,102,116,47,114,105,103,104,116,47,117,112,47,100,111,119,110,0,0,0,97,32,97,110,100,32,100,32,45,32,109,111,118,101,32,99,97,109,101,114,97,32,108,101,102,116,32,97,110,100,32,114,105,103,104,116,0,0,0,0,119,32,97,110,100,32,115,32,45,32,109,111,118,101,32,99,97,109,101,114,97,32,102,111,114,119,97,114,100,32,97,110,100,32,98,97,99,107,119,97,114,100,0,0,0,0,0,0,114,32,97,110,100,32,102,32,45,32,109,111,118,101,32,99,97,109,101,114,97,32,117,112,32,97,110,100,32,100,111,119,110,0,0,0,0,0,0,0,80,97,103,101,85,112,32,97,110,100,32,80,97,103,101,68,111,119,110,32,45,32,109,111,118,101,32,99,97,109,101,114,97,32,116,97,114,103,101,116,32,117,112,32,97,110,100,32,100,111,119,110,0,0,0,0,43,32,97,110,100,32,45,32,45,32,116,111,32,115,101,108,101,99,116,32,110,101,120,116,47,112,114,101,118,105,111,117,115,32,111,98,106,101,99,116,0,0,0,0,0,0,0,0,50,44,32,51,44,32,52,44,32,53,44,32,54,44,32,56,44,32,57,32,45,32,116,111,32,109,111,118,101,32,115,101,108,101,99,116,101,100,32,111,98,106,101,99,116,0,0,0,108,32,45,32,114,101,115,101,116,32,108,111,97,100,32,98,97,108,97,110,99,105,110,103,32,112,114,111,99,101,100,117,114,101,0,0,0,0,0,0,107,32,45,32,116,111,103,103,108,101,32,119,111,114,107,108,111,97,100,32,118,105,115,117,97,108,105,122,97,116,105,111,110,0,0,0,0,0,0,0,110,44,32,109,32,45,32,115,101,108,101,99,116,32,112,114,101,118,105,111,117,115,47,110,101,120,116,32,79,112,101,110,67,76,32,100,101,118,105,99,101,0,0,0,0,0,0,0,118,44,32,98,32,45,32,105,110,99,114,101,97,115,101,47,100,101,99,114,101,97,115,101,32,116,104,101,32,119,111,114,108,111,97,100,32,111,102,32,116,104,101,32,115,101,108,101,99,116,101,100,32,79,112,101,110,67,76,32,100,101,118,105,99,101,0,0,0,0,0,0,91,37,115,93,91,80,114,102,32,73,100,120,32,37,46,50,102,93,91,65,115,103,110,100,32,80,114,102,32,73,100,120,32,37,46,50,102,93,91,87,114,107,108,100,32,100,111,110,101,32,37,46,49,102,37,37,93,0,0,0,0,0,0,0,79,112,101,110,67,76,32,68,101,118,105,99,101,115,58,0,91,80,114,111,102,105,108,105,110,103,93,0,0,0,0,0,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,110,111,110,121,109,111,117,115,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,68,101,118,105,99,101,58,58,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,32,67,111,109,112,105,108,97,116,105,111,110,32,114,101,115,117,108,116,58,32,0,0,0,32,67,111,109,112,105,108,97,116,105,111,110,32,101,114,114,111,114,58,0,0,0,0,0,82,97,100,105,97,110,99,101,71,80,85,0,0,0,0,0,32,83,117,103,103,101,115,116,101,100,32,119,111,114,107,32,103,114,111,117,112,32,115,105,122,101,58,32,0,0,0,0,32,70,111,114,99,101,100,32,119,111,114,107,32,103,114,111,117,112,32,115,105,122,101,58,32,0,0,0,0,0,0,0,93,32,67,97,109,101,114,97,32,98,117,102,102,101,114,32,115,105,122,101,58,32,0,0,75,98,0,0,0,0,0,0,93,32,83,99,101,110,101,32,98,117,102,102,101,114,32,115,105,122,101,58,32,0,0,0,93,32,69,82,82,79,82,58,32,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,93,32,75,101,114,110,101,108,32,102,105,108,101,32,115,105,122,101,32,0,0,0,0,0,98,121,116,101,115,0,0,0,93,32,67,111,108,111,114,32,98,117,102,102,101,114,32,115,105,122,101,58,32,0,0,0,93,32,80,105,120,101,108,32,98,117,102,102,101,114,32,115,105,122,101,58,32,0,0,0,93,32,83,101,101,100,115,32,98,117,102,102,101,114,32,115,105,122,101,58,32,0,0,0,119,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,114,43,0,0,0,0,0,0,119,43,0,0,0,0,0,0,97,43,0,0,0,0,0,0,119,98,0,0,0,0,0,0,97,98,0,0,0,0,0,0,114,98,0,0,0,0,0,0,114,43,98,0,0,0,0,0,119,43,98,0,0,0,0,0,97,43,98,0,0,0,0,0,112,0,0,0,0,0,0,0,240,11,0,0,3,0,0,0,4,0,0,0,104,0,0,0,248,255,255,255,240,11,0,0,5,0,0,0,6,0,0,0,144,255,255,255,144,255,255,255,240,11,0,0,7,0,0,0,8,0,0,0,0,0,0,0,100,11,0,0,12,12,0,0,76,12,0,0,96,12,0,0,116,12,0,0,136,12,0,0,52,12,0,0,32,12,0,0,140,11,0,0,120,11,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,232,64,0,0,192,11,0,0,96,26,0,0,0,0,0,0,112,0,0,0,0,0,0,0,96,26,0,0,9,0,0,0,10,0,0,0,104,0,0,0,248,255,255,255,96,26,0,0,11,0,0,0,12,0,0,0,144,255,255,255,144,255,255,255,96,26,0,0,13,0,0,0,14,0,0,0,0,0,0,0,112,0,0,0,0,0,0,0,64,25,0,0,15,0,0,0,16,0,0,0,144,255,255,255,144,255,255,255,64,25,0,0,17,0,0,0,18,0,0,0,104,0,0,0,0,0,0,0,208,25,0,0,19,0,0,0,20,0,0,0,152,255,255,255,152,255,255,255,208,25,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,13,0,0,23,0,0,0,24,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,232,64,0,0,208,12,0,0,200,24,0,0,0,0,0,0,99,108,103,101,116,68,101,118,105,99,101,73,110,102,111,0,99,108,71,101,116,75,101,114,110,101,108,87,111,114,107,71,114,111,117,112,73,110,102,111,0,0,0,0,0,0,0,0,99,108,71,101,116,80,114,111,103,114,97,109,66,117,105,108,100,73,110,102,111,0,0,0,99,108,71,101,116,69,118,101,110,116,80,114,111,102,105,108,101,73,110,102,111,0,0,0,99,108,87,97,105,116,70,111,114,69,118,101,110,116,115,0,99,108,69,110,113,117,101,117,101,82,101,97,100,66,117,102,102,101,114,0,0,0,0,0,99,108,69,110,113,117,101,117,101,78,68,82,97,110,103,101,75,101,114,110,101,108,0,0,99,108,83,101,116,75,101,114,110,101,108,65,114,103,0,0,99,108,67,114,101,97,116,101,66,117,102,102,101,114,0,0,99,108,67,114,101,97,116,101,75,101,114,110,101,108,0,0,99,108,66,117,105,108,100,80,114,111,103,114,97,109,0,0,99,108,67,114,101,97,116,101,80,114,111,103,114,97,109,87,105,116,104,83,111,117,114,99,101,0,0,0,0,0,0,0,99,108,67,114,101,97,116,101,67,111,109,109,97,110,100,81,117,101,117,101,0,0,0,0,99,108,67,114,101,97,116,101,67,111,110,116,101,120,116,70,114,111,109,84,121,112,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([200,18,0,0,25,0,0,0,26,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,5,0,0,0,8,0,0,0,9,0,0,0,3,0,0,0,6,0,0,0,4,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,232,64,0,0,168,18,0,0,8,25,0,0,0,0,0,0,0,0,0,0,48,19,0,0,27,0,0,0,28,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,10,0,0,0,7,0,0,0,5,0,0,0,11,0,0,0,12,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,232,64,0,0,24,19,0,0,8,25,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,200,19,0,0,29,0,0,0,30,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,3,0,0,0,13,0,0,0,3,0,0,0,2,0,0,0,14,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,8,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,232,64,0,0,168,19,0,0,200,24,0,0,0,0,0,0,0,0,0,0,48,20,0,0,31,0,0,0,32,0,0,0,5,0,0,0,8,0,0,0,3,0,0,0,3,0,0,0,15,0,0,0,3,0,0,0,2,0,0,0,16,0,0,0,17,0,0,0,9,0,0,0,3,0,0,0,10,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,232,64,0,0,24,20,0,0,200,24,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,192,64,0,0,64,20,0,0,0,0,0,0,168,20,0,0,33,0,0,0,34,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,16,21,0,0,35,0,0,0,36,0,0,0,19,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,232,64,0,0,152,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,20,0,0,33,0,0,0,37,0,0,0,18,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,232,64,0,0,208,20,0,0,168,20,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,232,64,0,0,248,20,0,0,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,88,21,0,0,38,0,0,0,39,0,0,0,19,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,232,64,0,0,64,21,0,0,16,21,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,192,64,0,0,104,21,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,232,64,0,0,144,21,0,0,136,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,64,24,0,0,40,0,0,0,41,0,0,0,0,0,0,0,200,24,0,0,42,0,0,0,43,0,0,0,6,0,0,0,8,0,0,0,3,0,0,0,3,0,0,0,15,0,0,0,3,0,0,0,2,0,0,0,14,0,0,0,5,0,0,0,7,0,0,0,3,0,0,0,10,0,0,0,0,0,0,0,8,25,0,0,44,0,0,0,45,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,10,0,0,0,7,0,0,0,5,0,0,0,8,0,0,0,9,0,0,0,3,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,0,0,0,0,64,25,0,0,15,0,0,0,16,0,0,0,248,255,255,255,248,255,255,255,64,25,0,0,17,0,0,0,18,0,0,0,8,0,0,0,0,0,0,0,136,25,0,0,46,0,0,0,47,0,0,0,248,255,255,255,248,255,255,255,136,25,0,0,48,0,0,0,49,0,0,0,4,0,0,0,0,0,0,0,208,25,0,0,19,0,0,0,20,0,0,0,252,255,255,255,252,255,255,255,208,25,0,0,21,0,0,0,22,0,0,0,4,0,0,0,0,0,0,0,24,26,0,0,50,0,0,0,51,0,0,0,252,255,255,255,252,255,255,255,24,26,0,0,52,0,0,0,53,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,23,0,0,54,0,0,0,55,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,8,24,0,0,56,0,0,0,57,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,232,64,0,0,192,23,0,0,88,21,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,192,64,0,0,240,23,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,232,64,0,0,16,24,0,0,8,24,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,232,64,0,0,80,24,0,0,8,24,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,192,64,0,0,144,24,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,192,64,0,0,208,24,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,72,65,0,0,16,25,0,0,0,0,0,0,1,0,0,0,64,24,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,72,65,0,0,88,25,0,0,0,0,0,0,1,0,0,0,128,24,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,72,65,0,0,160,25,0,0,0,0,0,0,1,0,0,0,64,24,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,72,65,0,0,232,25,0,0,0,0,0,0,1,0,0,0,128,24,0,0,3,244,255,255,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,72,65,0,0,48,26,0,0,3,0,0,0,2,0,0,0,64,25,0,0,2,0,0,0,208,25,0,0,2,8,0,0,0,0,0,0,200,26,0,0,58,0,0,0,59,0,0,0,20,0,0,0,1,0,0,0,10,0,0,0,11,0,0,0,2,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,232,64,0,0,168,26,0,0,168,21,0,0,0,0,0,0,0,0,0,0,240,40,0,0,60,0,0,0,61,0,0,0,62,0,0,0,1,0,0,0,4,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,41,0,0,63,0,0,0,64,0,0,0,62,0,0,0,2,0,0,0,5,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,45,0,0,65,0,0,0,66,0,0,0,62,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,96,46,0,0,67,0,0,0,68,0,0,0,62,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,47,0,0,69,0,0,0,70,0,0,0,62,0,0,0,4,0,0,0,5,0,0,0,23,0,0,0,6,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,47,0,0,71,0,0,0,72,0,0,0,62,0,0,0,8,0,0,0,9,0,0,0,25,0,0,0,10,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,224,42,0,0,73,0,0,0,74,0,0,0,62,0,0,0,21,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,224,42,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,128,43,0,0,75,0,0,0,76,0,0,0,62,0,0,0,29,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,128,43,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,16,44,0,0,77,0,0,0,78,0,0,0,62,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,44,0,0,79,0,0,0,80,0,0,0,62,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,41,0,0,81,0,0,0,82,0,0,0,62,0,0,0,37,0,0,0,38,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,39,0,0,0,12,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,41,0,0,83,0,0,0,84,0,0,0,62,0,0,0,40,0,0,0,41,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,42,0,0,0,18,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,41,0,0,85,0,0,0,86,0,0,0,62,0,0,0,43,0,0,0,44,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,45,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,42,0,0,87,0,0,0,88,0,0,0,62,0,0,0,46,0,0,0,47,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,48,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,48,0,0,89,0,0,0,90,0,0,0,62,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,216,48,0,0,91,0,0,0,92,0,0,0,62,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,104,49,0,0,93,0,0,0,94,0,0,0,62,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,248,49,0,0,95,0,0,0,96,0,0,0,62,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,44,0,0,97,0,0,0,98,0,0,0,62,0,0,0,14,0,0,0,12,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,45,0,0,99,0,0,0,100,0,0,0,62,0,0,0,15,0,0,0,13,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,200,40,0,0,101,0,0,0,102,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,37,0,0,103,0,0,0,104,0,0,0,62,0,0,0,11,0,0,0,16,0,0,0,12,0,0,0,17,0,0,0,13,0,0,0,1,0,0,0,18,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,38,0,0,105,0,0,0,106,0,0,0,62,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,49,0,0,0,50,0,0,0,5,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,40,0,0,107,0,0,0,108,0,0,0,62,0,0,0,52,0,0,0,53,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,0,0,0,0,160,40,0,0,109,0,0,0,110,0,0,0,62,0,0,0,54,0,0,0,55,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,216,36,0,0,111,0,0,0,112,0,0,0,62,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,232,64,0,0,192,36,0,0,96,20,0,0,0,0,0,0,0,0,0,0,104,37,0,0,111,0,0,0,113,0,0,0,62,0,0,0,19,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,14,0,0,0,20,0,0,0,15,0,0,0,21,0,0,0,16,0,0,0,5,0,0,0,22,0,0,0,6,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,192,64,0,0,72,37,0,0,72,65,0,0,48,37,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,96,37,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,72,65,0,0,136,37,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,96,37,0,0,2,0,0,0,0,0,0,0,56,38,0,0,111,0,0,0,114,0,0,0,62,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,56,0,0,0,57,0,0,0,8,0,0,0,58,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,192,64,0,0,24,38,0,0,72,65,0,0,240,37,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,48,38,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,72,65,0,0,88,38,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,48,38,0,0,2,0,0,0,0,0,0,0,248,38,0,0,111,0,0,0,115,0,0,0,62,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,59,0,0,0,60,0,0,0,10,0,0,0,61,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,72,65,0,0,208,38,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,48,38,0,0,2,0,0,0,0,0,0,0,112,39,0,0,111,0,0,0,116,0,0,0,62,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,62,0,0,0,63,0,0,0,12,0,0,0,64,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,72,65,0,0,72,39,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,48,38,0,0,2,0,0,0,0,0,0,0,232,39,0,0,111,0,0,0,117,0,0,0,62,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,62,0,0,0,63,0,0,0,12,0,0,0,64,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,232,64,0,0,192,39,0,0,112,39,0,0,0,0,0,0,0,0,0,0,80,40,0,0,111,0,0,0,118,0,0,0,62,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,62,0,0,0,63,0,0,0,12,0,0,0,64,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,232,64,0,0,40,40,0,0,112,39,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,232,64,0,0,96,40,0,0,216,36,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,232,64,0,0,136,40,0,0,216,36,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,232,64,0,0,176,40,0,0,216,36,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,232,64,0,0,216,40,0,0,216,36,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,232,64,0,0,0,41,0,0,216,36,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,192,64,0,0,72,41,0,0,72,65,0,0,40,41,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,96,41,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,72,65,0,0,136,41,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,96,41,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,72,65,0,0,200,41,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,96,41,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,72,65,0,0,8,42,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,96,41,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,192,64,0,0,144,42,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,192,64,0,0,176,42,0,0,72,65,0,0,72,42,0,0,0,0,0,0,3,0,0,0,216,36,0,0,2,0,0,0,168,42,0,0,2,0,0,0,216,42,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,192,64,0,0,80,43,0,0,72,65,0,0,8,43,0,0,0,0,0,0,3,0,0,0,216,36,0,0,2,0,0,0,168,42,0,0,2,0,0,0,120,43,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,192,64,0,0,240,43,0,0,72,65,0,0,168,43,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,8,44,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,72,65,0,0,48,44,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,8,44,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,192,64,0,0,176,44,0,0,72,65,0,0,152,44,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,200,44,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,72,65,0,0,240,44,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,200,44,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,192,64,0,0,136,45,0,0,72,65,0,0,112,45,0,0,0,0,0,0,1,0,0,0,168,45,0,0,0,0,0,0,72,65,0,0,40,45,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,176,45,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,72,65,0,0,48,46,0,0,0,0,0,0,1,0,0,0,168,45,0,0,0,0,0,0,72,65,0,0,232,45,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,72,46,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,192,64,0,0,224,46,0,0,72,65,0,0,200,46,0,0,0,0,0,0,1,0,0,0,0,47,0,0,0,0,0,0,72,65,0,0,128,46,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,8,47,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,72,65,0,0,136,47,0,0,0,0,0,0,1,0,0,0,0,47,0,0,0,0,0,0,72,65,0,0,64,47,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,160,47,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,192,64,0,0,32,48,0,0,72,65,0,0,216,47,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,64,48,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,192,64,0,0,176,48,0,0,72,65,0,0,104,48,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,208,48,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,192,64,0,0,64,49,0,0,72,65,0,0,248,48,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,96,49,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,192,64,0,0,208,49,0,0,72,65,0,0,136,49,0,0,0,0,0,0,2,0,0,0,216,36,0,0,2,0,0,0,240,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+4708);
/* memory initializer */ allocate([74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,64,0,0,119,0,0,0,120,0,0,0,65,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,192,64,0,0,16,64,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,232,64,0,0,40,64,0,0,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,232,64,0,0,72,64,0,0,32,64,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,232,64,0,0,128,64,0,0,112,64,0,0,0,0,0,0,0,0,0,0,168,64,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,23,0,0,0,14,0,0,0,1,0,0,0,6,0,0,0,0,0,0,0,48,65,0,0,121,0,0,0,125,0,0,0,123,0,0,0,124,0,0,0,23,0,0,0,15,0,0,0,2,0,0,0,7,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,232,64,0,0,8,65,0,0,168,64,0,0,0,0,0,0,0,0,0,0,144,65,0,0,121,0,0,0,126,0,0,0,123,0,0,0,124,0,0,0,23,0,0,0,16,0,0,0,3,0,0,0,8,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,232,64,0,0,104,65,0,0,168,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,67,0,0,127,0,0,0,128,0,0,0,66,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,232,64,0,0,192,67,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+15064);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  function _llvm_lifetime_end() {}

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      return FS.getStreamFromPtr(stream).fd;
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,tempVertexBuffers1:[],tempVertexBufferCounters1:[],tempVertexBuffers2:[],tempVertexBufferCounters2:[],numTempVertexBuffersPerSize:64,tempIndexBuffers:[],tempQuadIndexBuffer:null,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        GL.tempVertexBufferCounters1.length = GL.tempVertexBufferCounters2.length = largestIndex+1;
        GL.tempVertexBuffers1.length = GL.tempVertexBuffers2.length = largestIndex+1;
        GL.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempIndexBuffers[i] = null; // Created on-demand
          GL.tempVertexBufferCounters1[i] = GL.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          GL.tempVertexBuffers1[i] = [];
          GL.tempVertexBuffers2[i] = [];
          var ringbuffer1 = GL.tempVertexBuffers1[i];
          var ringbuffer2 = GL.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          GL.tempQuadIndexBuffer = GLctx.createBuffer();
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, GLctx.STATIC_DRAW);
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.tempVertexBufferCounters1[idx];
        GL.tempVertexBufferCounters1[idx] = (GL.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        var vb = GL.tempVertexBuffers1;
        GL.tempVertexBuffers1 = GL.tempVertexBuffers2;
        GL.tempVertexBuffers2 = vb;
        vb = GL.tempVertexBufferCounters1;
        GL.tempVertexBufferCounters1 = GL.tempVertexBufferCounters2;
        GL.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempVertexBufferCounters1[i] = 0;
        }
      },findToken:function (source, token) {
        function isIdentChar(ch) {
          if (ch >= 48 && ch <= 57) // 0-9
            return true;
          if (ch >= 65 && ch <= 90) // A-Z
            return true;
          if (ch >= 97 && ch <= 122) // a-z
            return true;
          return false;
        }
        var i = -1;
        do {
          i = source.indexOf(token, i + 1);
          if (i < 0) {
            break;
          }
          if (i > 0 && isIdentChar(source[i - 1])) {
            continue;
          }
          i += token.length;
          if (i < source.length - 1 && isIdentChar(source[i + 1])) {
            continue;
          }
          return true;
        } while (true);
        return false;
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        // Let's see if we need to enable the standard derivatives extension
        type = GLctx.getShaderParameter(GL.shaders[shader], 0x8B4F /* GL_SHADER_TYPE */);
        if (type == 0x8B30 /* GL_FRAGMENT_SHADER */) {
          if (GL.findToken(source, "dFdx") ||
              GL.findToken(source, "dFdy") ||
              GL.findToken(source, "fwidth")) {
            source = "#extension GL_OES_standard_derivatives : enable\n" + source;
            var extension = GLctx.getExtension("OES_standard_derivatives");
          }
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))|0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[(p)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            assert(GL.floatExt, 'Must have OES_texture_float to use float textures');
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            internalFormat = GLctx.RGBA;
            break;
          default:
            throw 'Invalid type (' + type + ')';
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        }
      },enabledClientAttribIndices:[],enableVertexAttribArray:function enableVertexAttribArray(index) {
        if (!GL.enabledClientAttribIndices[index]) {
          GL.enabledClientAttribIndices[index] = true;
          GLctx.enableVertexAttribArray(index);
        }
      },disableVertexAttribArray:function disableVertexAttribArray(index) {
        if (GL.enabledClientAttribIndices[index]) {
          GL.enabledClientAttribIndices[index] = false;
          GLctx.disableVertexAttribArray(index);
        }
      },initExtensions:function () {
        if (GL.initExtensions.done) return;
        GL.initExtensions.done = true;
  
        if (!Module.useWebGL) return; // an app might link both gl and 2d backends
  
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        GL.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        GL.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        GL.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        GL.floatExt = GLctx.getExtension('OES_texture_float');
        
        // Extension available from Firefox 26 and Google Chrome 30
        GL.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        GL.vaoExt = Module.ctx.getExtension('OES_vertex_array_object');
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources" ];
  
        function shouldEnableAutomatically(extension) {
          for(var i in automaticallyEnabledExtensions) {
            var include = automaticallyEnabledExtensions[i];
            if (ext.indexOf(include) != -1) {
              return true;
            }
          }
          return false;
        }
  
        var extensions = GLctx.getSupportedExtensions();
        for(var e in extensions) {
          var ext = extensions[e].replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  var _UItoD=true;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  var _emscripten_resume=true;

  function _pthread_mutex_lock() {}

  
  
  var ___cxa_exception_header_size=8;
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var ___cxa_last_thrown_exception=0;
  
  var ___cxa_caught_exceptions=[];function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }


  
  var CL={cl_init:0,cl_extensions:["KHR_GL_SHARING","KHR_fp16","KHR_fp64"],cl_digits:[1,2,3,4,5,6,7,8,9,0],cl_kernels_sig:{},cl_structs_sig:{},cl_pn_type:[],cl_objects:{},cl_objects_map:{},cl_objects_retains:{},cl_objects_mem_callback:{},init:function () {
        if (CL.cl_init == 0) {
          console.log('%c WebCL-Translator V2.0 ! ', 'background: #222; color: #bada55');
          var nodejs = (typeof window === 'undefined');
          if(nodejs) {
            webcl = require('../webcl');
          }
  
          if (webcl == undefined) {
            alert("Unfortunately your system does not support WebCL. " +
            "Make sure that you have WebKit Samsung or Firefox Nokia plugin");
  
            console.error("Unfortunately your system does not support WebCL.\n");
            console.error("Make sure that you have WebKit Samsung or Firefox Nokia plugin\n");  
          } else {
  
            // Add webcl constant for parser
            // Object.defineProperty(webcl, "SAMPLER"      , { value : 0x1300,writable : false });
            // Object.defineProperty(webcl, "IMAGE2D"      , { value : 0x1301,writable : false });
            // Object.defineProperty(webcl, "IMAGE3D"      , { value : 0x1302,writable : false });          
            // Object.defineProperty(webcl, "UNSIGNED_LONG", { value : 0x1304,writable : false });
            // Object.defineProperty(webcl, "LONG"         , { value : 0x1303,writable : false });
            // Object.defineProperty(webcl, "MAP_READ"     , { value : 0x1   ,writable : false });
            // Object.defineProperty(webcl, "MAP_WRITE"    , { value : 0x2   ,writable : false });
  
            for (var i = 0; i < CL.cl_extensions.length; i ++) {
  
              if (webcl.enableExtension(CL.cl_extensions[i])) {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" supported.");
              } else {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" not supported !!!");
              }
            }
            CL.cl_init = 1;
          }
        }
  
        return CL.cl_init;
      },udid:function (obj) {    
        var _id;
  
        if (obj !== undefined) {
  
          if ( obj.hasOwnProperty('udid') ) {
           _id = obj.udid;
  
           if (_id !== undefined) {
             return _id;
           }
          }
        }
  
        var _uuid = [];
  
        _uuid[0] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length-1]; // First digit of udid can't be 0
        for (var i = 1; i < 6; i++) _uuid[i] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length];
  
        _id = _uuid.join('');
  
      
        // /!\ Call udid when you add inside cl_objects if you pass object in parameter
        if (obj !== undefined) {
          Object.defineProperty(obj, "udid", { value : _id,writable : false });
          CL.cl_objects[_id]=obj;
        }
  
        return _id;      
      },cast_long:function (arg_size) {
        var _sizelong = [];
        _sizelong.push(((arg_size & 0xFFFFFFFF00000000) >> 32));
        _sizelong.push((arg_size & 0xFFFFFFFF));
        // var _origin = x << 32 | y;
        return new Int32Array(_sizelong);
      },stringType:function (pn_type) {
        switch(pn_type) {
          case webcl.SIGNED_INT8:
            return 'INT8';
          case webcl.SIGNED_INT16:
            return 'INT16';
          case webcl.SIGNED_INT32:
            return 'INT32';
          case webcl.UNSIGNED_INT8:
            return 'UINT8';
          case webcl.UNSIGNED_INT16:
            return 'UINT16';
          case webcl.UNSIGNED_INT32:
            return 'UINT32';
          case 0x1304 /*webcl.UNSIGNED_LONG*/:
            return 'ULONG';
          case 0x1303 /*webcl.SIGNED_LONG*/:
            return 'LONG';       
          case webcl.FLOAT:
            return 'FLOAT';
          case webcl.LOCAL:
            return '__local';   
          case 0x1300 /*webcl.SAMPLER*/:
            return 'sampler_t';   
          case 0x1301 /*webcl.IMAGE2D*/:
            return 'image2d_t';        
          case 0x1302 /*webcl.IMAGE3D*/:
            return 'image3d_t';            
          default:
            if (typeof(pn_type) == "string") return 'struct';
            return 'UNKNOWN';
        }
      },parseType:function (string) {
        var _value = -1;
      
        // First ulong for the webcl validator
        if ( (string.indexOf("ulong") >= 0 ) || (string.indexOf("unsigned long") >= 0 ) ) {
          // \todo : long ???? 
          _value = 0x1304 /*webcl.UNSIGNED_LONG*/;  
        } else if ( string.indexOf("long") >= 0 ) {
          _value = 0x1303 /*webcl.SIGNED_LONG*/;
        } else if (string.indexOf("float") >= 0 ) {
          _value = webcl.FLOAT;
        } else if ( (string.indexOf("uchar") >= 0 ) || (string.indexOf("unsigned char") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT8;
        } else if ( string.indexOf("char") >= 0 ) {
          _value = webcl.SIGNED_INT8;
        } else if ( (string.indexOf("ushort") >= 0 ) || (string.indexOf("unsigned short") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT16;
        } else if ( string.indexOf("short") >= 0 ) {
          _value = webcl.SIGNED_INT16;                     
        } else if ( (string.indexOf("uint") >= 0 ) || (string.indexOf("unsigned int") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT32;          
        } else if ( ( string.indexOf("int") >= 0 ) || ( string.indexOf("enum") >= 0 ) ) {
          _value = webcl.SIGNED_INT32;
        } else if ( string.indexOf("image3d_t") >= 0 ) {
          _value = 0x1302 /*webcl.IMAGE3D*/;        
        } else if ( string.indexOf("image2d_t") >= 0 ) {
          _value = 0x1301 /*webcl.IMAGE2D*/;
        } else if ( string.indexOf("sampler_t") >= 0 ) {
          _value = 0x1300 /*webcl.SAMPLER*/;
        }
  
        return _value;
      },parseStruct:function (kernel_string,struct_name) {
  
        // Experimental parse of Struct
        // Search kernel function like 'struct_name { }' or '{ } struct_name'
        // --------------------------------------------------------------------------------
        // Step 1 : Search pattern struct_name { }
        // Step 2 : if no result : Search pattern { } struct_name
        // Step 3 : if no result : return
        // Step 4 : split by ; // Num of variable of the structure  : int toto; float tata;
        // Step 5 : split by , // Num of variable for each type     : float toto,tata,titi;
        // Step 6 : Search pattern [num] // Array Variable          : float toto[4];
        // Step 7 : Search type of the line
        // Step 8 : if exist add type else search other struct
        // --------------------------------------------------------------------------------
  
        CL.cl_structs_sig[struct_name] = [];
  
        // First search if is #define
        var _re_define = new RegExp("#[\ ]*define[\ ]*"+struct_name+"[\ ]*[A-Za-z0-9_\s]*");
        var _define = kernel_string.match(_re_define);
  
        if (_define != null && _define.length == 1) {
  
          // Get type of the line
          var _str = _define[0];
          var _type = CL.parseType(_str);
          
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_lastSpace + 1,_str.length - _lastSpace);
  
            CL.parseStruct(kernel_string,_res);
          }
      
          return;
        }
  
        // Second search if is typedef type name;
        var _re_typedef = new RegExp("typedef[\ ]*[A-Za-z0-9_\s]*[\ ]*"+struct_name+"[\ ]*;");
        var _typedef = kernel_string.match(_re_typedef);
  
        if (_typedef != null && _typedef.length == 1) {
  
          // Get type of the line
          var _str = _typedef[0];
          var _type = CL.parseType(_str);
  
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            _str = _str.replace(/^\s+|\s+$/g, ""); // trim
            var _firstSpace = _str.indexOf(" ");
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_firstSpace + 1,_lastSpace - _firstSpace - 1);
            
            CL.parseStruct(kernel_string,_res);
          }
          
          return;
        }
  
        // search pattern : struct_name { } ;
        var _re_before = new RegExp(struct_name+"[\ ]"+"\{([^}]+)\}");
  
        // search pattern : { } struct_name;
        var _re_after = new RegExp("\{([^}]+)\}"+"[\ ]"+struct_name);
  
        var _res = kernel_string.match(_re_before);
        var _contains_struct = "";
        
        if (_res != null && _res.length == 2) {
          _contains_struct = _res[1];
        } else {
          _res = kernel_string.match(_re_after);
          if (_res != null && _res.length == 2) {
              _contains_struct = _res[1];
          } else {
            return;
          }
        }
  
        var _var = _contains_struct.split(";");
        for (var i = 0; i < _var.length-1; i++ ) {
          // Need for unsigned int width, height;
          var _subvar = _var[i].split(","); 
          
          // Get type of the line
          var _type = CL.parseType(_var[i]);
        
          // Need for float mu[4];
          var _arrayNum = 0;
          _res = _var[i].match(/[0-9]+/); 
          if (_res != null) _arrayNum = _res;
        
          if ( _type != -1) {
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name].push(_type);
            }
          } else {
            // Search name of the parameter
            var _struct = _subvar[0].replace(/^\s+|\s+$/g, ""); // trim
            var _name = "";
            var _start = _struct.lastIndexOf(" "); 
            for (var j = _start - 1; j >= 0 ; j--) {
              var _chara = _struct.charAt(j);
              if (_chara == ' ' && _name.length > 0) {
                break;
              } else if (_chara != ' ') {
                _name = _chara + _name;
              }
            }
            
            // If struct is unknow search it
            if (!(_name in CL.cl_structs_sig && CL.cl_structs_sig[_name].length > 0)) {
              CL.parseStruct(kernel_string,_name);
            }
  
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name] = CL.cl_structs_sig[struct_name].concat(CL.cl_structs_sig[_name]);  
            }
          }
        }
      },parseKernel:function (kernel_string) {
  
  
        // Experimental parse of Kernel
        // ----------------------------
        //
        // /!\ The minify kernel could be use by the program but some trouble with line
        // /!\ containing macro #define, for the moment only use the minify kernel for 
        // /!\ parsing __kernel and struct
        //
        // Search kernel function like __kernel ... NAME ( p1 , p2 , p3)  
        // --------------------------------------------------------------------------------
        // Step 1 : Minimize kernel removing all the comment and \r \n \t and multispace
        // Step 2 : Search pattern __kernel ... ( ... )
        // Step 3 : For each kernel
        // Step 3 . 1 : Search Open Brace
        // Step 3 . 2 : Search Kernel Name
        // Step 3 . 3 : Search Kernel Parameter
        // Step 3 . 4 : Grab { name : [ param, ... ] }
        // --------------------------------------------------------------------------------
  
        // Remove all comments ...
        var _mini_kernel_string  = kernel_string.replace(/(?:((["'])(?:(?:\\\\)|\\\2|(?!\\\2)\\|(?!\2).|[\n\r])*\2)|(\/\*(?:(?!\*\/).|[\n\r])*\*\/)|(\/\/[^\n\r]*(?:[\n\r]+|$))|((?:=|:)\s*(?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/)[gimy]?\.(?:exec|test|match|search|replace|split)\()|(\.(?:exec|test|match|search|replace|split)\((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|(<!--(?:(?!-->).)*-->))/g
  , "");
        
        // Remove all char \n \r \t ...
        _mini_kernel_string = _mini_kernel_string.replace(/\n/g, " ");
        _mini_kernel_string = _mini_kernel_string.replace(/\r/g, " ");
  
        // Remove all the multispace
        _mini_kernel_string = _mini_kernel_string.replace(/\s{2,}/g, " ");
  
        // Search pattern : __kernel ... ( ... )
        // var _matches = _mini_kernel_string.match(/__kernel[A-Za-z0-9_\s]+\(([^)]+)\)/g);
        // if (_matches == null) {
        //   console.error("/!\\ Not found kernel !!!");
        //   return;
        // }
  
        // Search kernel (Pattern doesn't work with extra __attribute__)
        var _matches = [];
        var _found = 1;
        var _stringKern = _mini_kernel_string;
        var _security = 10;
  
        // Search all the kernel
        while (_found && _security) {
          // Just in case no more than 10 loop
          _security --;
  
          var _pattern = "__kernel ";
          var _kern = _stringKern.indexOf(_pattern);
  
          if (_kern == -1) {
            _pattern = " kernel ";
            _kern = _stringKern.indexOf(" kernel ");
            if (_kern == -1) { 
              _pattern = "kernel ";
              _kern = _stringKern.indexOf("kernel ");
              if (_kern == -1) {
                _found = 0;
                continue;
              } else if (_kern != 0) {
                console.error("/!\\ Find word 'kernel' but is not a real kernel  .. ("+_kern+")");
                _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
                continue;
              }
            }
          }
  
          _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
   
          var _brace = _stringKern.indexOf("{");
          var _stringKern2 = _stringKern.substr(0,_brace);
          var _braceOpen = _stringKern2.lastIndexOf("(");
          var _braceClose = _stringKern2.lastIndexOf(")");
          var _stringKern3 = _stringKern2.substr(0,_braceOpen).replace(/^\s+|\s+$/g, ""); // trim
          var _space = _stringKern3.lastIndexOf(" ");
  
          _stringKern2 = _stringKern2.substr(_space + 1,_braceClose);
  
          // Add the kernel result like name_kernel(..., ... ,...)
          _matches.push(_stringKern2);
        }
  
        // For each kernel ....
        for (var i = 0; i < _matches.length; i ++) {
          // Search the open Brace
          var _brace = _matches[i].lastIndexOf("(");
  
          // Part before '('
          var _first_part = _matches[i].substr(0,_brace);
          _first_part = _first_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Part after ')'
          var _second_part = _matches[i].substr(_brace+1,_matches[i].length-_brace-2);
          _second_part = _second_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Search name part
          var _name = _first_part.substr(_first_part.lastIndexOf(" ") + 1);
  
          // If name already present reparse it may be is another test with not the same num of parameter ....
          if (_name in CL.cl_kernels_sig) {
            delete CL.cl_kernels_sig[_name]
          }
  
          // Search parameter part
          var _param = [];
  
          var _array = _second_part.split(","); 
          for (var j = 0; j < _array.length; j++) {
            var _type = CL.parseType(_array[j]);
  
            if (_array[j].indexOf("__local") >= 0 ) {
              _param.push(webcl.LOCAL);
  
  
            } else if (_type == -1) {
                         
              _array[j] = _array[j].replace(/^\s+|\s+$/g, "");
              _array[j] = _array[j].replace("*", "");
  
              var _start = _array[j].lastIndexOf(" "); 
              if (_start != -1) {
                var _kernels_struct_name = "";
                // Search Parameter type Name
                for (var k = _start - 1; k >= 0 ; k--) {
  
                  var _chara = _array[j].charAt(k);
                  if (_chara == ' ' && _kernels_struct_name.length > 0) {
                    break;
                  } else if (_chara != ' ') {
                    _kernels_struct_name = _chara + _kernels_struct_name;
                  }
                }             
  
                // Parse struct only if is not already inside the map
                if (!(_kernels_struct_name in CL.cl_structs_sig))
                  CL.parseStruct(_mini_kernel_string, _kernels_struct_name);
              
                // Add the name of the struct inside the map of param kernel
                _param.push(_kernels_struct_name);         
  
              } else {
                _param.push(webcl.FLOAT);
              }
  
  
            } else {
              _param.push(_type);
  
            }
          }        
  
          CL.cl_kernels_sig[_name] = _param;
  
        }
  
        return _mini_kernel_string;
  
      },getImageSizeType:function (image) {
        var _sizeType = 0;
  
        
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _sizeType = 1;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
          case webcl.HALF_FLOAT:
            _sizeType = 2;      
            break;
          case webcl.SIGNED_INT32:
          case webcl.UNSIGNED_INT32:      
          case webcl.FLOAT:
            _sizeType = 4;
            break;
          default:
            console.error("getImageSizeType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _sizeType;
      },getImageFormatType:function (image) {
        var _type = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
            _type = webcl.SIGNED_INT8;
            break;
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _type = webcl.UNSIGNED_INT8;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
            _type = webcl.SIGNED_INT16;
            break;
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
            _type = webcl.UNSIGNED_INT16;
            break;
          case webcl.SIGNED_INT32:
            _type = webcl.SIGNED_INT32;
          case webcl.UNSIGNED_INT32:
            _type = webcl.UNSIGNED_INT32;
            break;        
          case webcl.FLOAT:
            _type = webcl.FLOAT;
            break;
          default:
            console.error("getImageFormatType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _type;
      },getImageSizeOrder:function (image) {
        var _sizeOrder = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelOrder) {
          case webcl.R:
          case webcl.A:
          case webcl.INTENSITY:
          case webcl.LUMINANCE:
            _sizeOrder = 1;
            break;
          case webcl.RG:
          case webcl.RA:
            _sizeOrder = 2;
            break;
          case webcl.RGB:
            _sizeOrder = 3;
            break; 
          case webcl.RGBA:
          case webcl.BGRA:
          case webcl.ARGB:      
            _sizeOrder = 4;
            break;        
          default:
            console.error("getImageFormatType : This channel order is not yet implemented => "+_info.channelOrder);
        }
  
        return _sizeOrder;
      },getHostPtrArray:function (size,type) { 
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( size );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( size >> 1 );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( size >> 2 );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( size );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( size >> 1 );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( size >> 2 );
              break;         
            default:
              _host_ptr = new Float32Array( size >> 2 );
              break;
          }
        } else {
          _host_ptr = new Float32Array( size >> 2 );
        }
  
        return _host_ptr;
      },getCopyPointerToArray:function (ptr,size,type) { 
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;         
            default:
              _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
          
          // console.info("------");
          // _host_ptr = new DataView(new ArrayBuffer(size));
  
          // var _offset = 0;
          // for (var i = 0; i < type.length; i++) {
          //   var _type = type[i][0];
          //   var _num = type[i][1];
          //   switch(_type) {
          //     case webcl.SIGNED_INT8:
          //       _host_ptr.setInt8(_offset,new Int8Array( HEAP8.subarray((ptr+_offset),(ptr+_offset+_num)) ));
          //       console.info("setInt8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.SIGNED_INT16:
          //       _host_ptr.setInt16(_offset,new Int16Array( HEAP16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) ));
          //       console.info("setInt16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.SIGNED_INT32:
          //       _host_ptr.setInt32(_offset,new Int32Array( HEAP32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setInt32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //     case webcl.UNSIGNED_INT8:
          //       _host_ptr.setUint8(_offset,new Uint8Array( HEAPU8.subarray((ptr+_offset),(ptr+_offset+_num)) ));
          //       console.info("setUint8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.UNSIGNED_INT16:
          //       host_ptr.setUint16(_offset,new Uint16Array( HEAPU16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) ));
          //       console.info("setUint16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.UNSIGNED_INT32:
          //       _host_ptr.setUint32(_offset,new Uint32Array( HEAPU32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setUint32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;         
          //     default:
          //       _host_ptr.setFloat32(_offset,new Float32Array( HEAPF32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setFloat32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //   }
          // }
        }
  
        return _host_ptr;
      },getReferencePointerToArray:function (ptr,size,type) {  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = HEAP8.subarray((ptr),(ptr+size));
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = HEAP16.subarray((ptr)>>1,(ptr+size)>>1);
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = HEAP32.subarray((ptr)>>2,(ptr+size)>>2);
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = HEAPU8.subarray((ptr),(ptr+size));
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = HEAPU16.subarray((ptr)>>1,(ptr+size)>>1);
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = HEAPU32.subarray((ptr)>>2,(ptr+size)>>2);
              break;         
            default:
              _host_ptr = HEAPF32.subarray((ptr)>>2,(ptr+size)>>2);
              break;
          }
        } else {
          _host_ptr = HEAPF32.subarray((ptr)>>2,(ptr+size)>>2);
          
          // console.info("------");
          // _host_ptr = new DataView(new ArrayBuffer(size));
  
          // var _offset = 0;
          // for (var i = 0; i < type.length; i++) {
          //   var _type = type[i][0];
          //   var _num = type[i][1];
          //   switch(_type) {
          //     case webcl.SIGNED_INT8:
          //       _host_ptr.setInt8(_offset,HEAP8.subarray((ptr+_offset),(ptr+_offset+_num)) );
          //       console.info("setInt8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.SIGNED_INT16:
          //       _host_ptr.setInt16(_offset,HEAP16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) );
          //       console.info("setInt16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.SIGNED_INT32:
          //       _host_ptr.setInt32(_offset,HEAP32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setInt32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //     case webcl.UNSIGNED_INT8:
          //       _host_ptr.setUint8(_offset,HEAPU8.subarray((ptr+_offset),(ptr+_offset+_num)) );
          //       console.info("setUint8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.UNSIGNED_INT16:
          //       host_ptr.setUint16(_offset,HEAPU16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) );
          //       console.info("setUint16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.UNSIGNED_INT32:
          //       _host_ptr.setUint32(_offset,HEAPU32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setUint32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;         
          //     default:
          //       _host_ptr.setFloat32(_offset,HEAPF32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setFloat32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //   }
          // }
        }
  
        return _host_ptr;
      },catchError:function (e) {
        console.error(e);
        var _error = -1;
  
        if (e instanceof WebCLException) {
          var _str=e.message;
          var _n=_str.lastIndexOf(" ");
          _error = _str.substr(_n+1,_str.length-_n-1);
        }
        
        return _error;
      }};function _clGetPlatformIDs(num_entries,platforms,num_platforms) {
  
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && platforms != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_platforms == 0 && platforms == 0) {
        return webcl.INVALID_VALUE;
      }
  
      var _platforms = null;
  
      try { 
  
        _platforms = webcl.getPlatforms();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_platforms != 0) {
        HEAP32[((num_platforms)>>2)]=_platforms.length /* Num of platforms */;
      } 
  
      if (platforms != 0) {
        for (var i = 0; i < Math.min(num_entries,_platforms.length); i++) {
          var _id = CL.udid(_platforms[i]);
          HEAP32[(((platforms)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};

  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }

  function _clReleaseCommandQueue(command_queue) {
  
      // If is an object retain don't release it until retains > 0...
      if (command_queue in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[command_queue] - 1;
  
        CL.cl_objects_retains[command_queue] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[command_queue].release();
          delete CL.cl_objects[command_queue];  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _glutInit(argcp, argv) {
      // Ignore arguments
      GLUT.initTime = Date.now();
  
      var isTouchDevice = 'ontouchstart' in document.documentElement;
  
      window.addEventListener("keydown", GLUT.onKeydown, true);
      window.addEventListener("keyup", GLUT.onKeyup, true);
      if (isTouchDevice) {
        window.addEventListener("touchmove", GLUT.onMousemove, true);
        window.addEventListener("touchstart", GLUT.onMouseButtonDown, true);
        window.addEventListener("touchend", GLUT.onMouseButtonUp, true);
      } else {
        window.addEventListener("mousemove", GLUT.onMousemove, true);
        window.addEventListener("mousedown", GLUT.onMouseButtonDown, true);
        window.addEventListener("mouseup", GLUT.onMouseButtonUp, true);
        // IE9, Chrome, Safari, Opera
        window.addEventListener("mousewheel", GLUT.onMouseWheel, true);
        // Firefox
        window.addEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
      }
  
      Browser.resizeListeners.push(function(width, height) {
        if (GLUT.reshapeFunc) {
        	Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
        }
      });
  
      __ATEXIT__.push({ func: function() {
        window.removeEventListener("keydown", GLUT.onKeydown, true);
        window.removeEventListener("keyup", GLUT.onKeyup, true);
        if (isTouchDevice) {
          window.removeEventListener("touchmove", GLUT.onMousemove, true);
          window.removeEventListener("touchstart", GLUT.onMouseButtonDown, true);
          window.removeEventListener("touchend", GLUT.onMouseButtonUp, true);
        } else {
          window.removeEventListener("mousemove", GLUT.onMousemove, true);
          window.removeEventListener("mousedown", GLUT.onMouseButtonDown, true);
          window.removeEventListener("mouseup", GLUT.onMouseButtonUp, true);
          // IE9, Chrome, Safari, Opera
          window.removeEventListener("mousewheel", GLUT.onMouseWheel, true);
          // Firefox
          window.removeEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
        }
        Module["canvas"].width = Module["canvas"].height = 1;
      } });
    }

  function _glTexCoord2i(u, v) {
      assert(GLImmediate.mode >= 0); // must be in begin/end
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = u;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = v;
      GLImmediate.addRendererComponent(GLImmediate.TEXTURE0, 2, GLctx.FLOAT);
    }

  
  var GLUT={initTime:null,idleFunc:null,displayFunc:null,keyboardFunc:null,keyboardUpFunc:null,specialFunc:null,specialUpFunc:null,reshapeFunc:null,motionFunc:null,passiveMotionFunc:null,mouseFunc:null,buttons:0,modifiers:0,initWindowWidth:256,initWindowHeight:256,initDisplayMode:18,windowX:0,windowY:0,windowWidth:0,windowHeight:0,saveModifiers:function (event) {
        GLUT.modifiers = 0;
        if (event['shiftKey'])
          GLUT.modifiers += 1; /* GLUT_ACTIVE_SHIFT */
        if (event['ctrlKey'])
          GLUT.modifiers += 2; /* GLUT_ACTIVE_CTRL */
        if (event['altKey'])
          GLUT.modifiers += 4; /* GLUT_ACTIVE_ALT */
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
  
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.passiveMotionFunc, [lastX, lastY]);
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.motionFunc, [lastX, lastY]);
        }
      },getSpecialKey:function (keycode) {
          var key = null;
          switch (keycode) {
            case 8:  key = 120 /* backspace */; break;
            case 46: key = 111 /* delete */; break;
  
            case 0x70 /*DOM_VK_F1*/: key = 1 /* GLUT_KEY_F1 */; break;
            case 0x71 /*DOM_VK_F2*/: key = 2 /* GLUT_KEY_F2 */; break;
            case 0x72 /*DOM_VK_F3*/: key = 3 /* GLUT_KEY_F3 */; break;
            case 0x73 /*DOM_VK_F4*/: key = 4 /* GLUT_KEY_F4 */; break;
            case 0x74 /*DOM_VK_F5*/: key = 5 /* GLUT_KEY_F5 */; break;
            case 0x75 /*DOM_VK_F6*/: key = 6 /* GLUT_KEY_F6 */; break;
            case 0x76 /*DOM_VK_F7*/: key = 7 /* GLUT_KEY_F7 */; break;
            case 0x77 /*DOM_VK_F8*/: key = 8 /* GLUT_KEY_F8 */; break;
            case 0x78 /*DOM_VK_F9*/: key = 9 /* GLUT_KEY_F9 */; break;
            case 0x79 /*DOM_VK_F10*/: key = 10 /* GLUT_KEY_F10 */; break;
            case 0x7a /*DOM_VK_F11*/: key = 11 /* GLUT_KEY_F11 */; break;
            case 0x7b /*DOM_VK_F12*/: key = 12 /* GLUT_KEY_F12 */; break;
            case 0x25 /*DOM_VK_LEFT*/: key = 100 /* GLUT_KEY_LEFT */; break;
            case 0x26 /*DOM_VK_UP*/: key = 101 /* GLUT_KEY_UP */; break;
            case 0x27 /*DOM_VK_RIGHT*/: key = 102 /* GLUT_KEY_RIGHT */; break;
            case 0x28 /*DOM_VK_DOWN*/: key = 103 /* GLUT_KEY_DOWN */; break;
            case 0x21 /*DOM_VK_PAGE_UP*/: key = 104 /* GLUT_KEY_PAGE_UP */; break;
            case 0x22 /*DOM_VK_PAGE_DOWN*/: key = 105 /* GLUT_KEY_PAGE_DOWN */; break;
            case 0x24 /*DOM_VK_HOME*/: key = 106 /* GLUT_KEY_HOME */; break;
            case 0x23 /*DOM_VK_END*/: key = 107 /* GLUT_KEY_END */; break;
            case 0x2d /*DOM_VK_INSERT*/: key = 108 /* GLUT_KEY_INSERT */; break;
  
            case 16   /*DOM_VK_SHIFT*/:
            case 0x05 /*DOM_VK_LEFT_SHIFT*/:
              key = 112 /* GLUT_KEY_SHIFT_L */;
              break;
            case 0x06 /*DOM_VK_RIGHT_SHIFT*/:
              key = 113 /* GLUT_KEY_SHIFT_R */;
              break;
  
            case 17   /*DOM_VK_CONTROL*/:
            case 0x03 /*DOM_VK_LEFT_CONTROL*/:
              key = 114 /* GLUT_KEY_CONTROL_L */;
              break;
            case 0x04 /*DOM_VK_RIGHT_CONTROL*/:
              key = 115 /* GLUT_KEY_CONTROL_R */;
              break;
  
            case 18   /*DOM_VK_ALT*/:
            case 0x02 /*DOM_VK_LEFT_ALT*/:
              key = 116 /* GLUT_KEY_ALT_L */;
              break;
            case 0x01 /*DOM_VK_RIGHT_ALT*/:
              key = 117 /* GLUT_KEY_ALT_R */;
              break;
          };
          return key;
      },getASCIIKey:function (event) {
        if (event['ctrlKey'] || event['altKey'] || event['metaKey']) return null;
  
        var keycode = event['keyCode'];
  
        /* The exact list is soooo hard to find in a canonical place! */
  
        if (48 <= keycode && keycode <= 57)
          return keycode; // numeric  TODO handle shift?
        if (65 <= keycode && keycode <= 90)
          return event['shiftKey'] ? keycode : keycode + 32;
        if (96 <= keycode && keycode <= 105)
          return keycode - 48; // numpad numbers    
        if (106 <= keycode && keycode <= 111)
          return keycode - 106 + 42; // *,+-./  TODO handle shift?
  
        switch (keycode) {
          case 9:  // tab key
          case 13: // return key
          case 27: // escape
          case 32: // space
          case 61: // equal
            return keycode;
        }
  
        var s = event['shiftKey'];
        switch (keycode) {
          case 186: return s ? 58 : 59; // colon / semi-colon
          case 187: return s ? 43 : 61; // add / equal (these two may be wrong)
          case 188: return s ? 60 : 44; // less-than / comma
          case 189: return s ? 95 : 45; // dash
          case 190: return s ? 62 : 46; // greater-than / period
          case 191: return s ? 63 : 47; // forward slash
          case 219: return s ? 123 : 91; // open bracket
          case 220: return s ? 124 : 47; // back slash
          case 221: return s ? 125 : 93; // close braket
          case 222: return s ? 34 : 39; // single quote
        }
  
        return null;
      },onKeydown:function (event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if( GLUT.specialFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onKeyup:function (event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if(GLUT.specialUpFunc) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardUpFunc ) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onMouseButtonDown:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons |= (1 << event['button']);
  
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
          try {
            event.target.setCapture();
          } catch (e) {}
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseButtonUp:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons &= ~(1 << event['button']);
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 1/*GLUT_UP*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseWheel:function (event) {
        Browser.calculateMouseEvent(event);
  
        // cross-browser wheel delta
        var e = window.event || event; // old IE support
        var delta = -Browser.getMouseWheelDelta(event);
  
        var button = 3; // wheel up
        if (delta < 0) {
          button = 4; // wheel down
        }
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [button, 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLUT.windowWidth;
          height = GLUT.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLUT.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
        /* Can't call _glutReshapeWindow as that requests cancelling fullscreen. */
        if (GLUT.reshapeFunc) {
          // console.log("GLUT.reshapeFunc (from FS): " + width + ", " + height);
          Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
        }
        _glutPostRedisplay();
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
                  (function() {});
        CFS.apply(document, []);
      }};function _glutInitWindowPosition(x, y) {
      // Ignore for now
    }

  
  
  function _glutPostRedisplay() {
      if (GLUT.displayFunc) {
        Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          Runtime.dynCall('v', GLUT.displayFunc);
        });
      }
    }function _glutReshapeWindow(width, height) {
      GLUT.cancelFullScreen();
      Browser.setCanvasSize(width, height);
      if (GLUT.reshapeFunc) {
        Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
      }
      _glutPostRedisplay();
    }function _glutMainLoop() {
      _glutReshapeWindow(Module['canvas'].width, Module['canvas'].height);
      _glutPostRedisplay();
      throw 'SimulateInfiniteLoop';
    }

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }
  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }
  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      function get() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      function unget() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }

  var _emscripten_preinvoke=true;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr;
    }

  function _fmod(x, y) {
      return x % y;
    }

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  
  function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
        pixels = data.pixels;
      } else {
        pixels = null;
      }
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

  function _glDisable(x0) { GLctx.disable(x0) }

  function _clGetDeviceIDs(platform,device_type_i64_1,device_type_i64_2,num_entries,devices,num_devices) {
      // Assume the device_type is i32 
      assert(device_type_i64_2 == 0, 'Invalid device_type i64');
  
      
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && devices != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_devices == 0 && devices == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( platform != 0 && !(platform in CL.cl_objects)) {
        return webcl.INVALID_PLATFORM;  
      }
  
      var _device = null;
  
      try {
  
        // If platform is NULL use the first platform found ...
        if (platform == 0) {
          var _platforms = webcl.getPlatforms();
          if (_platforms.length == 0) {
            return webcl.INVALID_PLATFORM;  
          }
  
          // Create a new UDID 
          platform = CL.udid(_platforms[0]);
        } 
  
        var _platform = CL.cl_objects[platform];
  
          
        _devices = _platform.getDevices(device_type_i64_1);
  
      } catch (e) {
  
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_devices != 0) {
        HEAP32[((num_devices)>>2)]=_devices.length /* Num of device */;
      } 
  
      if (devices != 0) {
        for (var i = 0; i < Math.min(num_entries,_devices.length); i++) {
          var _id = CL.udid(_devices[i]);
          HEAP32[(((devices)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
  
    }


  function _clReleaseMemObject(memobj) {
  
      // If is an object retain don't release it until retains > 0...
      if (memobj in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[memobj] - 1;
  
        CL.cl_objects_retains[memobj] = _retain;
  
        if (_retain >= 0) {
          
          // Call the callback 
          if (memobj in CL.cl_objects_mem_callback) {
            if (CL.cl_objects_mem_callback[memobj].length > 0)
              CL.cl_objects_mem_callback[memobj].pop()();
          }
  
          return webcl.SUCCESS;
        }
      }
  
      try {
  
        // Call the callback 
        if (memobj in CL.cl_objects_mem_callback) {
          if (CL.cl_objects_mem_callback[memobj].length > 0)
            CL.cl_objects_mem_callback[memobj].pop()();
        }
  
        CL.cl_objects[memobj].release();
        delete CL.cl_objects[memobj];  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

   
  Module["_memset"] = _memset;

  function _clReleaseContext(context) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (context in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[context] - 1;
  
        CL.cl_objects_retains[context] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[context].release();
          delete CL.cl_objects[context];     
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _glVertex2i(x, y, z) {
      assert(GLImmediate.mode >= 0); // must be in begin/end
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = x;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = y;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = z || 0;
      assert(GLImmediate.vertexCounter << 2 < GL.MAX_TEMP_BUFFER_SIZE);
      GLImmediate.addRendererComponent(GLImmediate.VERTEX, 3, GLctx.FLOAT);
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _clCreateContext(properties,num_devices,devices,pfn_notify,user_data,cl_errcode_ret) {
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        }
  
        return 0; // NULL Pointer      
      }
      
      var _id = null;
      var _context = null;
  
      try { 
  
        var _platform = null;
        var _devices = [];
        var _glclSharedContext = false;
  
        // Verify the device, theorically on OpenCL there are CL_INVALID_VALUE when devices or num_devices is null,
        // WebCL can work using default device / platform, we check only if parameter are set.
        for (var i = 0; i < num_devices; i++) {
          var _idxDevice = HEAP32[(((devices)+(i*4))>>2)];
            _devices.push(CL.cl_objects[_idxDevice]);
        }
  
        // Verify the property
        var _propertiesCounter = 0;
        var _properties = [];
  
        if (properties != 0) {
          while(1) {
            var _readprop = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
            _properties.push(_readprop);
  
            if (_readprop == 0) break;
  
            switch (_readprop) {
              case webcl.CONTEXT_PLATFORM:
                _propertiesCounter ++;
                var _idxPlatform = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
                _properties.push(_idxPlatform);
  
                  _platform = CL.cl_objects[_idxPlatform];
                break;
  
              // /!\ This part, it's for the CL_GL_Interop
              case (0x200A) /*CL_GLX_DISPLAY_KHR*/:
              case (0x2008) /*CL_GL_CONTEXT_KHR*/:
              case (0x200C) /*CL_CGL_SHAREGROUP_KHR*/:            
                _propertiesCounter ++;
                _glclSharedContext = true;
                
                break;
  
              default:
                if (cl_errcode_ret != 0) {
                  HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_PROPERTY;
                }
  
                return 0; 
            };
  
            _propertiesCounter ++;
          }
        }
  
        if (num_devices > 0) {
          if (_glclSharedContext) {       
            if (_devices.length == 1) {
              _context = webcl.createContext(Module.ctx,_devices[0]); 
            } else {
              _context = webcl.createContext(Module.ctx,_devices); 
            }
          } else {
          
            if (_devices.length == 1) {
              _context = webcl.createContext(_devices[0]); 
            } else {
              _context = webcl.createContext(_devices);  
            }
          }
        } else if (_platform != null) {
          
          if (_glclSharedContext) {
            _context = webcl.createContext(Module.ctx,_platform);  
          } else {
            _context = webcl.createContext(_platform);  
          }
  
        } else {
  
          if (cl_errcode_ret != 0) {
            HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_CONTEXT;
          }
  
          return 0; // NULL Pointer      
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_context);
  
      // Add properties array for getInfo
      Object.defineProperty(_context, "properties", { value : _properties,writable : false });
  
  
      return _id;
    }


  
  function _emscripten_glColor4f(r, g, b, a) {
      r = Math.max(Math.min(r, 1), 0);
      g = Math.max(Math.min(g, 1), 0);
      b = Math.max(Math.min(b, 1), 0);
      a = Math.max(Math.min(a, 1), 0);
  
      // TODO: make ub the default, not f, save a few mathops
      if (GLImmediate.mode >= 0) {
        var start = GLImmediate.vertexCounter << 2;
        GLImmediate.vertexDataU8[start + 0] = r * 255;
        GLImmediate.vertexDataU8[start + 1] = g * 255;
        GLImmediate.vertexDataU8[start + 2] = b * 255;
        GLImmediate.vertexDataU8[start + 3] = a * 255;
        GLImmediate.vertexCounter++;
        GLImmediate.addRendererComponent(GLImmediate.COLOR, 4, GLctx.UNSIGNED_BYTE);
      } else {
        GLImmediate.clientColor[0] = r;
        GLImmediate.clientColor[1] = g;
        GLImmediate.clientColor[2] = b;
        GLImmediate.clientColor[3] = a;
        GLctx.vertexAttrib4fv(GLImmediate.COLOR, GLImmediate.clientColor);
      }
    }function _glColor3f(r, g, b) {
      _emscripten_glColor4f(r, g, b, 1);
    }

  function _clGetKernelWorkGroupInfo(kernel,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      try {
  
        var _info = CL.cl_objects[kernel].getWorkGroupInfo(CL.cl_objects[device], param_name);
  
        if(typeof(_info) == "number") {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info instanceof Int32Array) {
         
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_info[i];
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
        
        } else {
  
          console.error("clGetKernelWorkGroupInfo: unknow type of info '"+_info+"'")
          
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
        
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _glutIdleFunc(func) {
      function callback() {
        if (GLUT.idleFunc) {
          Runtime.dynCall('v', GLUT.idleFunc);
          Browser.safeSetTimeout(callback, 0);
        }
      }
      if (!GLUT.idleFunc) {
        Browser.safeSetTimeout(callback, 0);
      }
      GLUT.idleFunc = func;
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  
  function _clEnqueueWriteBuffer(command_queue,buffer,blocking_write,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _event_wait_list = [];
      var _host_ptr = CL.getReferencePointerToArray(ptr,cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
  
      try {
            
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],blocking_write,offset,cb,_host_ptr,_event_wait_list,_event);    
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],blocking_write,offset,cb,_host_ptr,_event_wait_list);    
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
   
  
        return _error;
      }
  
  
      return webcl.SUCCESS;  
    }function _clCreateBuffer(context,flags_i64_1,flags_i64_2,size,host_ptr,cl_errcode_ret) {
      // Assume the flags is i32 
      assert(flags_i64_2 == 0, 'Invalid flags i64');
      
  
      var _id = null;
      var _buffer = null;
  
      // Context must be created
      
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        _flags |= webcl.MEM_READ_WRITE;
      }
  
      var _host_ptr = null;
  
      if ( host_ptr != 0 ) _host_ptr = CL.getCopyPointerToArray(host_ptr,size,CL.cl_pn_type); 
      else if (
        (flags_i64_1 & (1 << 4) /* CL_MEM_ALLOC_HOST_PTR  */) ||
        (flags_i64_1 & (1 << 5) /* CL_MEM_COPY_HOST_PTR   */) ||
        (flags_i64_1 & (1 << 3) /* CL_MEM_USE_HOST_PTR    */)
        ) {
        _host_ptr = CL.getHostPtrArray(size,CL.cl_pn_type);
      } 
  
      try {
  
      
        if (_host_ptr != null) {
          _buffer = CL.cl_objects[context].createBuffer(_flags,size,_host_ptr);
        } else
          _buffer = CL.cl_objects[context].createBuffer(_flags,size);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
        
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      // Add flags property
      Object.defineProperty(_buffer, "flags", { value : flags_i64_1,writable : false });
      _id = CL.udid(_buffer);
    
      // \todo need to be remove when firefox will be support hot_ptr
      /**** **** **** **** **** **** **** ****/
      if (_host_ptr != null) {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
          // Search command
          var commandqueue = null;
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLCommandQueue) {
              commandqueue = CL.cl_objects[obj];
              break;
            }
          }
          
          if (commandqueue != null) {
            _clEnqueueWriteBuffer(obj,_id,true,0,size,host_ptr,0,0,0);
          } else {
            if (cl_errcode_ret != 0) {
              HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
            }
  
            return 0; 
          }
        }
      }
      /**** **** **** **** **** **** **** ****/
  
  
      return _id;
    }

  function ___cxa_guard_abort() {}

  function _glutDisplayFunc(func) {
      GLUT.displayFunc = func;
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  
  
  
  function _glEnable(x0) { GLctx.enable(x0) }
  
  function _glIsEnabled(x0) { return GLctx.isEnabled(x0) }
  
  function _glGetBooleanv(name_, p) {
      return GL.get(name_, p, 'Boolean');
    }
  
  function _glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  
  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }
  
  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }
  
  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }
  
  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }
  
  function _glDeleteProgram(program) {
      var program = GL.programs[program];
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }
  
  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }
  
  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }
  
  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GLImmediate.lastArrayBuffer = GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }
  
  function _glGetFloatv(name_, p) {
      return GL.get(name_, p, 'Float');
    }
  
  function _glHint(x0, x1) { GLctx.hint(x0, x1) }
  
  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }
  
  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }
  
  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }
  
  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }var GLEmulation={fogStart:0,fogEnd:1,fogDensity:1,fogColor:null,fogMode:2048,fogEnabled:false,vaos:[],currentVao:null,enabledVertexAttribArrays:{},hasRunInit:false,init:function () {
        // Do not activate immediate/emulation code (e.g. replace glDrawElements) when in FULL_ES2 mode.
        // We do not need full emulation, we instead emulate client-side arrays etc. in FULL_ES2 code in
        // a straightforward manner, and avoid not having a bound buffer be ambiguous between es2 emulation
        // code and legacy gl emulation code.
  
        if (GLEmulation.hasRunInit) {
          return;
        }
        GLEmulation.hasRunInit = true;
  
        GLEmulation.fogColor = new Float32Array(4);
  
        // Add some emulation workarounds
        Module.printErr('WARNING: using emscripten GL emulation. This is a collection of limited workarounds, do not expect it to work.');
        Module.printErr('WARNING: using emscripten GL emulation unsafe opts. If weirdness happens, try -s GL_UNSAFE_OPTS=0');
  
        // XXX some of the capabilities we don't support may lead to incorrect rendering, if we do not emulate them in shaders
        var validCapabilities = {
          0x0B44: 1, // GL_CULL_FACE
          0x0BE2: 1, // GL_BLEND
          0x0BD0: 1, // GL_DITHER,
          0x0B90: 1, // GL_STENCIL_TEST
          0x0B71: 1, // GL_DEPTH_TEST
          0x0C11: 1, // GL_SCISSOR_TEST
          0x8037: 1, // GL_POLYGON_OFFSET_FILL
          0x809E: 1, // GL_SAMPLE_ALPHA_TO_COVERAGE
          0x80A0: 1  // GL_SAMPLE_COVERAGE
        };
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          // Clean up the renderer on any change to the rendering state. The optimization of
          // skipping renderer setup is aimed at the case of multiple glDraw* right after each other
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != true) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = true;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glEnableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glEnableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glEnable(cap);
        };
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != false) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = false;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glDisableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glDisableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glDisable(cap);
        };
        _glIsEnabled = _emscripten_glIsEnabled = function _glIsEnabled(cap) {
          if (cap == 0x0B60 /* GL_FOG */) {
            return GLEmulation.fogEnabled ? 1 : 0;
          } else if (!(cap in validCapabilities)) {
            return 0;
          }
          return GLctx.isEnabled(cap);
        };
  
        var glGetBooleanv = _glGetBooleanv;
        _glGetBooleanv = _emscripten_glGetBooleanv = function _glGetBooleanv(pname, p) {
          var attrib = GLEmulation.getAttributeFromCapability(pname);
          if (attrib !== null) {
            var result = GLImmediate.enabledClientAttributes[attrib];
            HEAP8[(p)]=result === true ? 1 : 0;
            return;
          }
          glGetBooleanv(pname, p);
        };
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x84E2: pname = GLctx.MAX_TEXTURE_IMAGE_UNITS /* fake it */; break; // GL_MAX_TEXTURE_UNITS
            case 0x8B4A: { // GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VERTEX_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B49: { // GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_FRAGMENT_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B4B: { // GL_MAX_VARYING_FLOATS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VARYING_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8871: pname = GLctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS /* close enough */; break; // GL_MAX_TEXTURE_COORDS
            case 0x807A: { // GL_VERTEX_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x807B: { // GL_VERTEX_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x807C: { // GL_VERTEX_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8081: { // GL_COLOR_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8082: { // GL_COLOR_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x8083: { // GL_COLOR_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8088: { // GL_TEXTURE_COORD_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8089: { // GL_TEXTURE_COORD_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x808A: { // GL_TEXTURE_COORD_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
          }
          glGetIntegerv(pname, params);
        };
  
        var glGetString = _glGetString;
        _glGetString = _emscripten_glGetString = function _glGetString(name_) {
          if (GL.stringCache[name_]) return GL.stringCache[name_];
          switch(name_) {
            case 0x1F03 /* GL_EXTENSIONS */: // Add various extensions that we can support
              var ret = allocate(intArrayFromString(GLctx.getSupportedExtensions().join(' ') +
                     ' GL_EXT_texture_env_combine GL_ARB_texture_env_crossbar GL_ATI_texture_env_combine3 GL_NV_texture_env_combine4 GL_EXT_texture_env_dot3 GL_ARB_multitexture GL_ARB_vertex_buffer_object GL_EXT_framebuffer_object GL_ARB_vertex_program GL_ARB_fragment_program GL_ARB_shading_language_100 GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_fragment_shader GL_ARB_texture_cube_map GL_EXT_draw_range_elements' +
                     (GL.compressionExt ? ' GL_ARB_texture_compression GL_EXT_texture_compression_s3tc' : '') +
                     (GL.anisotropicExt ? ' GL_EXT_texture_filter_anisotropic' : '')
              ), 'i8', ALLOC_NORMAL);
              GL.stringCache[name_] = ret;
              return ret;
          }
          return glGetString(name_);
        };
  
        // Do some automatic rewriting to work around GLSL differences. Note that this must be done in
        // tandem with the rest of the program, by itself it cannot suffice.
        // Note that we need to remember shader types for this rewriting, saving sources makes it easier to debug.
        GL.shaderInfos = {};
        var glCreateShader = _glCreateShader;
        _glCreateShader = _emscripten_glCreateShader = function _glCreateShader(shaderType) {
          var id = glCreateShader(shaderType);
          GL.shaderInfos[id] = {
            type: shaderType,
            ftransform: false
          };
          return id;
        };
  
        function ensurePrecision(source) {
          if (!/precision +(low|medium|high)p +float *;/.test(source)) {
            source = 'precision mediump float;\n' + source;
          }
          return source;
        }
  
        var glShaderSource = _glShaderSource;
        _glShaderSource = _emscripten_glShaderSource = function _glShaderSource(shader, count, string, length) {
          var source = GL.getSource(shader, count, string, length);
          // XXX We add attributes and uniforms to shaders. The program can ask for the # of them, and see the
          // ones we generated, potentially confusing it? Perhaps we should hide them.
          if (GL.shaderInfos[shader].type == GLctx.VERTEX_SHADER) {
            // Replace ftransform() with explicit project/modelview transforms, and add position and matrix info.
            var has_pm = source.search(/u_projection/) >= 0;
            var has_mm = source.search(/u_modelView/) >= 0;
            var has_pv = source.search(/a_position/) >= 0;
            var need_pm = 0, need_mm = 0, need_pv = 0;
            var old = source;
            source = source.replace(/ftransform\(\)/g, '(u_projection * u_modelView * a_position)');
            if (old != source) need_pm = need_mm = need_pv = 1;
            old = source;
            source = source.replace(/gl_ProjectionMatrix/g, 'u_projection');
            if (old != source) need_pm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrixTranspose\[2\]/g, 'vec4(u_modelView[0][2], u_modelView[1][2], u_modelView[2][2], u_modelView[3][2])'); // XXX extremely inefficient
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrix/g, 'u_modelView');
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_Vertex/g, 'a_position');
            if (old != source) need_pv = 1;
            old = source;
            source = source.replace(/gl_ModelViewProjectionMatrix/g, '(u_projection * u_modelView)');
            if (old != source) need_pm = need_mm = 1;
            if (need_pv && !has_pv) source = 'attribute vec4 a_position; \n' + source;
            if (need_mm && !has_mm) source = 'uniform mat4 u_modelView; \n' + source;
            if (need_pm && !has_pm) source = 'uniform mat4 u_projection; \n' + source;
            GL.shaderInfos[shader].ftransform = need_pm || need_mm || need_pv; // we will need to provide the fixed function stuff as attributes and uniforms
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              // XXX To handle both regular texture mapping and cube mapping, we use vec4 for tex coordinates.
              var old = source;
              var need_vtc = source.search('v_texCoord' + i) == -1;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i)
                             .replace(new RegExp('gl_MultiTexCoord' + i, 'g'), 'a_texCoord' + i);
              if (source != old) {
                source = 'attribute vec4 a_texCoord' + i + '; \n' + source;
                if (need_vtc) {
                  source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
                }
              }
  
              old = source;
              source = source.replace(new RegExp('gl_TextureMatrix\\[' + i + '\\]', 'g'), 'u_textureMatrix' + i);
              if (source != old) {
                source = 'uniform mat4 u_textureMatrix' + i + '; \n' + source;
              }
            }
            if (source.indexOf('gl_FrontColor') >= 0) {
              source = 'varying vec4 v_color; \n' +
                       source.replace(/gl_FrontColor/g, 'v_color');
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'attribute vec4 a_color; \n' +
                       source.replace(/gl_Color/g, 'a_color');
            }
            if (source.indexOf('gl_Normal') >= 0) {
              source = 'attribute vec3 a_normal; \n' +
                       source.replace(/gl_Normal/g, 'a_normal');
            }
            // fog
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          } else { // Fragment shader
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              var old = source;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i);
              if (source != old) {
                source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
              }
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'varying vec4 v_color; \n' + source.replace(/gl_Color/g, 'v_color');
            }
            if (source.indexOf('gl_Fog.color') >= 0) {
              source = 'uniform vec4 u_fogColor;   \n' +
                       source.replace(/gl_Fog.color/g, 'u_fogColor');
            }
            if (source.indexOf('gl_Fog.end') >= 0) {
              source = 'uniform float u_fogEnd;   \n' +
                       source.replace(/gl_Fog.end/g, 'u_fogEnd');
            }
            if (source.indexOf('gl_Fog.scale') >= 0) {
              source = 'uniform float u_fogScale;   \n' +
                       source.replace(/gl_Fog.scale/g, 'u_fogScale');
            }
            if (source.indexOf('gl_Fog.density') >= 0) {
              source = 'uniform float u_fogDensity;   \n' +
                       source.replace(/gl_Fog.density/g, 'u_fogDensity');
            }
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          }
          GLctx.shaderSource(GL.shaders[shader], source);
        };
  
        var glCompileShader = _glCompileShader;
        _glCompileShader = _emscripten_glCompileShader = function _glCompileShader(shader) {
          GLctx.compileShader(GL.shaders[shader]);
        };
  
        GL.programShaders = {};
        var glAttachShader = _glAttachShader;
        _glAttachShader = _emscripten_glAttachShader = function _glAttachShader(program, shader) {
          if (!GL.programShaders[program]) GL.programShaders[program] = [];
          GL.programShaders[program].push(shader);
          glAttachShader(program, shader);
        };
  
        var glDetachShader = _glDetachShader;
        _glDetachShader = _emscripten_glDetachShader = function _glDetachShader(program, shader) {
          var programShader = GL.programShaders[program];
          if (!programShader) {
            Module.printErr('WARNING: _glDetachShader received invalid program: ' + program);
            return;
          }
          var index = programShader.indexOf(shader);
          programShader.splice(index, 1);
          glDetachShader(program, shader);
        };
  
        var glUseProgram = _glUseProgram;
        _glUseProgram = _emscripten_glUseProgram = function _glUseProgram(program) {
          if (GL.currProgram != program) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = program;
            GLImmediate.fixedFunctionProgram = 0;
            glUseProgram(program);
          }
        }
  
        var glDeleteProgram = _glDeleteProgram;
        _glDeleteProgram = _emscripten_glDeleteProgram = function _glDeleteProgram(program) {
          glDeleteProgram(program);
          if (program == GL.currProgram) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = 0;
          }
        };
  
        // If attribute 0 was not bound, bind it to 0 for WebGL performance reasons. Track if 0 is free for that.
        var zeroUsedPrograms = {};
        var glBindAttribLocation = _glBindAttribLocation;
        _glBindAttribLocation = _emscripten_glBindAttribLocation = function _glBindAttribLocation(program, index, name) {
          if (index == 0) zeroUsedPrograms[program] = true;
          glBindAttribLocation(program, index, name);
        };
        var glLinkProgram = _glLinkProgram;
        _glLinkProgram = _emscripten_glLinkProgram = function _glLinkProgram(program) {
          if (!(program in zeroUsedPrograms)) {
            GLctx.bindAttribLocation(GL.programs[program], 0, 'a_position');
          }
          glLinkProgram(program);
        };
  
        var glBindBuffer = _glBindBuffer;
        _glBindBuffer = _emscripten_glBindBuffer = function _glBindBuffer(target, buffer) {
          glBindBuffer(target, buffer);
          if (target == GLctx.ARRAY_BUFFER) {
            if (GLEmulation.currentVao) {
              assert(GLEmulation.currentVao.arrayBuffer == buffer || GLEmulation.currentVao.arrayBuffer == 0 || buffer == 0, 'TODO: support for multiple array buffers in vao');
              GLEmulation.currentVao.arrayBuffer = buffer;
            }
          } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
            if (GLEmulation.currentVao) GLEmulation.currentVao.elementArrayBuffer = buffer;
          }
        };
  
        var glGetFloatv = _glGetFloatv;
        _glGetFloatv = _emscripten_glGetFloatv = function _glGetFloatv(pname, params) {
          if (pname == 0x0BA6) { // GL_MODELVIEW_MATRIX
            HEAPF32.set(GLImmediate.matrix[0/*m*/], params >> 2);
          } else if (pname == 0x0BA7) { // GL_PROJECTION_MATRIX
            HEAPF32.set(GLImmediate.matrix[1/*p*/], params >> 2);
          } else if (pname == 0x0BA8) { // GL_TEXTURE_MATRIX
            HEAPF32.set(GLImmediate.matrix[2/*t*/ + GLImmediate.clientActiveTexture], params >> 2);
          } else if (pname == 0x0B66) { // GL_FOG_COLOR
            HEAPF32.set(GLEmulation.fogColor, params >> 2);
          } else if (pname == 0x0B63) { // GL_FOG_START
            HEAPF32[((params)>>2)]=GLEmulation.fogStart;
          } else if (pname == 0x0B64) { // GL_FOG_END
            HEAPF32[((params)>>2)]=GLEmulation.fogEnd;
          } else if (pname == 0x0B62) { // GL_FOG_DENSITY
            HEAPF32[((params)>>2)]=GLEmulation.fogDensity;
          } else if (pname == 0x0B65) { // GL_FOG_MODE
            HEAPF32[((params)>>2)]=GLEmulation.fogMode;
          } else {
            glGetFloatv(pname, params);
          }
        };
  
        var glHint = _glHint;
        _glHint = _emscripten_glHint = function _glHint(target, mode) {
          if (target == 0x84EF) { // GL_TEXTURE_COMPRESSION_HINT
            return;
          }
          glHint(target, mode);
        };
  
        var glEnableVertexAttribArray = _glEnableVertexAttribArray;
        _glEnableVertexAttribArray = _emscripten_glEnableVertexAttribArray = function _glEnableVertexAttribArray(index) {
          glEnableVertexAttribArray(index);
          GLEmulation.enabledVertexAttribArrays[index] = 1;
          if (GLEmulation.currentVao) GLEmulation.currentVao.enabledVertexAttribArrays[index] = 1;
        };
  
        var glDisableVertexAttribArray = _glDisableVertexAttribArray;
        _glDisableVertexAttribArray = _emscripten_glDisableVertexAttribArray = function _glDisableVertexAttribArray(index) {
          glDisableVertexAttribArray(index);
          delete GLEmulation.enabledVertexAttribArrays[index];
          if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledVertexAttribArrays[index];
        };
  
        var glVertexAttribPointer = _glVertexAttribPointer;
        _glVertexAttribPointer = _emscripten_glVertexAttribPointer = function _glVertexAttribPointer(index, size, type, normalized, stride, pointer) {
          glVertexAttribPointer(index, size, type, normalized, stride, pointer);
          if (GLEmulation.currentVao) { // TODO: avoid object creation here? likely not hot though
            GLEmulation.currentVao.vertexAttribPointers[index] = [index, size, type, normalized, stride, pointer];
          }
        };
      },getAttributeFromCapability:function (cap) {
        var attrib = null;
        switch (cap) {
          case 0x0de1: // GL_TEXTURE_2D - XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support it
            abort("GL_TEXTURE_2D is not a spec-defined capability for gl{Enable,Disable}ClientState.");
            // Fall through:
          case 0x8078: // GL_TEXTURE_COORD_ARRAY
            attrib = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture; break;
          case 0x8074: // GL_VERTEX_ARRAY
            attrib = GLImmediate.VERTEX; break;
          case 0x8075: // GL_NORMAL_ARRAY
            attrib = GLImmediate.NORMAL; break;
          case 0x8076: // GL_COLOR_ARRAY
            attrib = GLImmediate.COLOR; break;
        }
        return attrib;
      }};var GLImmediate={MapTreeLib:null,spawnMapTreeLib:function () {
        /* A naive implementation of a map backed by an array, and accessed by
         * naive iteration along the array. (hashmap with only one bucket)
         */
        function CNaiveListMap() {
          var list = [];
  
          this.insert = function CNaiveListMap_insert(key, val) {
            if (this.contains(key|0)) return false;
            list.push([key, val]);
            return true;
          };
  
          var __contains_i;
          this.contains = function CNaiveListMap_contains(key) {
            for (__contains_i = 0; __contains_i < list.length; ++__contains_i) {
              if (list[__contains_i][0] === key) return true;
            }
            return false;
          };
  
          var __get_i;
          this.get = function CNaiveListMap_get(key) {
            for (__get_i = 0; __get_i < list.length; ++__get_i) {
              if (list[__get_i][0] === key) return list[__get_i][1];
            }
            return undefined;
          };
        };
  
        /* A tree of map nodes.
          Uses `KeyView`s to allow descending the tree without garbage.
          Example: {
            // Create our map object.
            var map = new ObjTreeMap();
  
            // Grab the static keyView for the map.
            var keyView = map.GetStaticKeyView();
  
            // Let's make a map for:
            // root: <undefined>
            //   1: <undefined>
            //     2: <undefined>
            //       5: "Three, sir!"
            //       3: "Three!"
  
            // Note how we can chain together `Reset` and `Next` to
            // easily descend based on multiple key fragments.
            keyView.Reset().Next(1).Next(2).Next(5).Set("Three, sir!");
            keyView.Reset().Next(1).Next(2).Next(3).Set("Three!");
          }
        */
        function CMapTree() {
          function CNLNode() {
            var map = new CNaiveListMap();
  
            this.child = function CNLNode_child(keyFrag) {
              if (!map.contains(keyFrag|0)) {
                map.insert(keyFrag|0, new CNLNode());
              }
              return map.get(keyFrag|0);
            };
  
            this.value = undefined;
            this.get = function CNLNode_get() {
              return this.value;
            };
  
            this.set = function CNLNode_set(val) {
              this.value = val;
            };
          }
  
          function CKeyView(root) {
            var cur;
  
            this.reset = function CKeyView_reset() {
              cur = root;
              return this;
            };
            this.reset();
  
            this.next = function CKeyView_next(keyFrag) {
              cur = cur.child(keyFrag);
              return this;
            };
  
            this.get = function CKeyView_get() {
              return cur.get();
            };
  
            this.set = function CKeyView_set(val) {
              cur.set(val);
            };
          };
  
          var root;
          var staticKeyView;
  
          this.createKeyView = function CNLNode_createKeyView() {
            return new CKeyView(root);
          }
  
          this.clear = function CNLNode_clear() {
            root = new CNLNode();
            staticKeyView = this.createKeyView();
          };
          this.clear();
  
          this.getStaticKeyView = function CNLNode_getStaticKeyView() {
            staticKeyView.reset();
            return staticKeyView;
          };
        };
  
        // Exports:
        return {
          create: function() {
            return new CMapTree();
          },
        };
      },TexEnvJIT:null,spawnTexEnvJIT:function () {
        // GL defs:
        var GL_TEXTURE0 = 0x84C0;
        var GL_TEXTURE_1D = 0x0DE0;
        var GL_TEXTURE_2D = 0x0DE1;
        var GL_TEXTURE_3D = 0x806f;
        var GL_TEXTURE_CUBE_MAP = 0x8513;
        var GL_TEXTURE_ENV = 0x2300;
        var GL_TEXTURE_ENV_MODE = 0x2200;
        var GL_TEXTURE_ENV_COLOR = 0x2201;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  
        var GL_SRC0_RGB = 0x8580;
        var GL_SRC1_RGB = 0x8581;
        var GL_SRC2_RGB = 0x8582;
  
        var GL_SRC0_ALPHA = 0x8588;
        var GL_SRC1_ALPHA = 0x8589;
        var GL_SRC2_ALPHA = 0x858A;
  
        var GL_OPERAND0_RGB = 0x8590;
        var GL_OPERAND1_RGB = 0x8591;
        var GL_OPERAND2_RGB = 0x8592;
  
        var GL_OPERAND0_ALPHA = 0x8598;
        var GL_OPERAND1_ALPHA = 0x8599;
        var GL_OPERAND2_ALPHA = 0x859A;
  
        var GL_COMBINE_RGB = 0x8571;
        var GL_COMBINE_ALPHA = 0x8572;
  
        var GL_RGB_SCALE = 0x8573;
        var GL_ALPHA_SCALE = 0x0D1C;
  
        // env.mode
        var GL_ADD      = 0x0104;
        var GL_BLEND    = 0x0BE2;
        var GL_REPLACE  = 0x1E01;
        var GL_MODULATE = 0x2100;
        var GL_DECAL    = 0x2101;
        var GL_COMBINE  = 0x8570;
  
        // env.color/alphaCombiner
        //var GL_ADD         = 0x0104;
        //var GL_REPLACE     = 0x1E01;
        //var GL_MODULATE    = 0x2100;
        var GL_SUBTRACT    = 0x84E7;
        var GL_INTERPOLATE = 0x8575;
  
        // env.color/alphaSrc
        var GL_TEXTURE       = 0x1702;
        var GL_CONSTANT      = 0x8576;
        var GL_PRIMARY_COLOR = 0x8577;
        var GL_PREVIOUS      = 0x8578;
  
        // env.color/alphaOp
        var GL_SRC_COLOR           = 0x0300;
        var GL_ONE_MINUS_SRC_COLOR = 0x0301;
        var GL_SRC_ALPHA           = 0x0302;
        var GL_ONE_MINUS_SRC_ALPHA = 0x0303;
  
        var GL_RGB  = 0x1907;
        var GL_RGBA = 0x1908;
  
        // Our defs:
        var TEXENVJIT_NAMESPACE_PREFIX = "tej_";
        // Not actually constant, as they can be changed between JIT passes:
        var TEX_UNIT_UNIFORM_PREFIX = "uTexUnit";
        var TEX_COORD_VARYING_PREFIX = "vTexCoord";
        var PRIM_COLOR_VARYING = "vPrimColor";
        var TEX_MATRIX_UNIFORM_PREFIX = "uTexMatrix";
  
        // Static vars:
        var s_texUnits = null; //[];
        var s_activeTexture = 0;
  
        var s_requiredTexUnitsForPass = [];
  
        // Static funcs:
        function abort(info) {
          assert(false, "[TexEnvJIT] ABORT: " + info);
        }
  
        function abort_noSupport(info) {
          abort("No support: " + info);
        }
  
        function abort_sanity(info) {
          abort("Sanity failure: " + info);
        }
  
        function genTexUnitSampleExpr(texUnitID) {
          var texUnit = s_texUnits[texUnitID];
          var texType = texUnit.getTexType();
  
          var func = null;
          switch (texType) {
            case GL_TEXTURE_1D:
              func = "texture2D";
              break;
            case GL_TEXTURE_2D:
              func = "texture2D";
              break;
            case GL_TEXTURE_3D:
              return abort_noSupport("No support for 3D textures.");
            case GL_TEXTURE_CUBE_MAP:
              func = "textureCube";
              break;
            default:
              return abort_sanity("Unknown texType: 0x" + texType.toString(16));
          }
  
          var texCoordExpr = TEX_COORD_VARYING_PREFIX + texUnitID;
          if (TEX_MATRIX_UNIFORM_PREFIX != null) {
            texCoordExpr = "(" + TEX_MATRIX_UNIFORM_PREFIX + texUnitID + " * " + texCoordExpr + ")";
          }
          return func + "(" + TEX_UNIT_UNIFORM_PREFIX + texUnitID + ", " + texCoordExpr + ".xy)";
        }
  
        function getTypeFromCombineOp(op) {
          switch (op) {
            case GL_SRC_COLOR:
            case GL_ONE_MINUS_SRC_COLOR:
              return "vec3";
            case GL_SRC_ALPHA:
            case GL_ONE_MINUS_SRC_ALPHA:
              return "float";
          }
  
          return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
        }
  
        function getCurTexUnit() {
          return s_texUnits[s_activeTexture];
        }
  
        function genCombinerSourceExpr(texUnitID, constantExpr, previousVar,
                                       src, op)
        {
          var srcExpr = null;
          switch (src) {
            case GL_TEXTURE:
              srcExpr = genTexUnitSampleExpr(texUnitID);
              break;
            case GL_CONSTANT:
              srcExpr = constantExpr;
              break;
            case GL_PRIMARY_COLOR:
              srcExpr = PRIM_COLOR_VARYING;
              break;
            case GL_PREVIOUS:
              srcExpr = previousVar;
              break;
            default:
                return abort_noSupport("Unsupported combiner src: 0x" + src.toString(16));
          }
  
          var expr = null;
          switch (op) {
            case GL_SRC_COLOR:
              expr = srcExpr + ".rgb";
              break;
            case GL_ONE_MINUS_SRC_COLOR:
              expr = "(vec3(1.0) - " + srcExpr + ".rgb)";
              break;
            case GL_SRC_ALPHA:
              expr = srcExpr + ".a";
              break;
            case GL_ONE_MINUS_SRC_ALPHA:
              expr = "(1.0 - " + srcExpr + ".a)";
              break;
            default:
              return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
          }
  
          return expr;
        }
  
        function valToFloatLiteral(val) {
          if (val == Math.round(val)) return val + '.0';
          return val;
        }
  
  
        // Classes:
        function CTexEnv() {
          this.mode = GL_MODULATE;
          this.colorCombiner = GL_MODULATE;
          this.alphaCombiner = GL_MODULATE;
          this.colorScale = 1;
          this.alphaScale = 1;
          this.envColor = [0, 0, 0, 0];
  
          this.colorSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.alphaSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.colorOp = [
            GL_SRC_COLOR,
            GL_SRC_COLOR,
            GL_SRC_ALPHA
          ];
          this.alphaOp = [
            GL_SRC_ALPHA,
            GL_SRC_ALPHA,
            GL_SRC_ALPHA
          ];
  
          // Map GLenums to small values to efficiently pack the enums to bits for tighter access.
          this.traverseKey = {
            // mode
            0x1E01 /* GL_REPLACE */: 0,
            0x2100 /* GL_MODULATE */: 1,
            0x0104 /* GL_ADD */: 2,
            0x0BE2 /* GL_BLEND */: 3,
            0x2101 /* GL_DECAL */: 4,
            0x8570 /* GL_COMBINE */: 5,
  
            // additional color and alpha combiners
            0x84E7 /* GL_SUBTRACT */: 3,
            0x8575 /* GL_INTERPOLATE */: 4,
  
            // color and alpha src
            0x1702 /* GL_TEXTURE */: 0,
            0x8576 /* GL_CONSTANT */: 1,
            0x8577 /* GL_PRIMARY_COLOR */: 2,
            0x8578 /* GL_PREVIOUS */: 3,
  
            // color and alpha op
            0x0300 /* GL_SRC_COLOR */: 0,
            0x0301 /* GL_ONE_MINUS_SRC_COLOR */: 1,
            0x0302 /* GL_SRC_ALPHA */: 2,
            0x0300 /* GL_ONE_MINUS_SRC_ALPHA */: 3
          };
  
          // The tuple (key0,key1,key2) uniquely identifies the state of the variables in CTexEnv.
          // -1 on key0 denotes 'the whole cached key is dirty'
          this.key0 = -1;
          this.key1 = 0;
          this.key2 = 0;
  
          this.computeKey0 = function() {
            var k = this.traverseKey;
            var key = k[this.mode] * 1638400; // 6 distinct values.
            key += k[this.colorCombiner] * 327680; // 5 distinct values.
            key += k[this.alphaCombiner] * 65536; // 5 distinct values.
            // The above three fields have 6*5*5=150 distinct values -> 8 bits.
            key += (this.colorScale-1) * 16384; // 10 bits used.
            key += (this.alphaScale-1) * 4096; // 12 bits used.
            key += k[this.colorSrc[0]] * 1024; // 14
            key += k[this.colorSrc[1]] * 256; // 16
            key += k[this.colorSrc[2]] * 64; // 18
            key += k[this.alphaSrc[0]] * 16; // 20
            key += k[this.alphaSrc[1]] * 4; // 22
            key += k[this.alphaSrc[2]]; // 24 bits used total.
            return key;
          }
          this.computeKey1 = function() {
            var k = this.traverseKey;
            key = k[this.colorOp[0]] * 4096;
            key += k[this.colorOp[1]] * 1024;             
            key += k[this.colorOp[2]] * 256;
            key += k[this.alphaOp[0]] * 16;
            key += k[this.alphaOp[1]] * 4;
            key += k[this.alphaOp[2]];
            return key;            
          }
          // TODO: remove this. The color should not be part of the key!
          this.computeKey2 = function() {
            return this.envColor[0] * 16777216 + this.envColor[1] * 65536 + this.envColor[2] * 256 + 1 + this.envColor[3];
          }
          this.recomputeKey = function() {
            this.key0 = this.computeKey0();
            this.key1 = this.computeKey1();
            this.key2 = this.computeKey2();
          }
          this.invalidateKey = function() {
            this.key0 = -1; // The key of this texture unit must be recomputed when rendering the next time.
            GLImmediate.currentRenderer = null; // The currently used renderer must be re-evaluated at next render.
          }
        }
  
        function CTexUnit() {
          this.env = new CTexEnv();
          this.enabled_tex1D   = false;
          this.enabled_tex2D   = false;
          this.enabled_tex3D   = false;
          this.enabled_texCube = false;
          this.texTypesEnabled = 0; // A bitfield combination of the four flags above, used for fast access to operations.
  
          this.traverseState = function CTexUnit_traverseState(keyView) {
            if (this.texTypesEnabled) {
              if (this.env.key0 == -1) {
                this.env.recomputeKey();
              }
              keyView.next(this.texTypesEnabled | (this.env.key0 << 4));
              keyView.next(this.env.key1);
              keyView.next(this.env.key2);
            } else {
              // For correctness, must traverse a zero value, theoretically a subsequent integer key could collide with this value otherwise.
              keyView.next(0);
            }
          };
        };
  
        // Class impls:
        CTexUnit.prototype.enabled = function CTexUnit_enabled() {
          return this.texTypesEnabled;
        }
  
        CTexUnit.prototype.genPassLines = function CTexUnit_genPassLines(passOutputVar, passInputVar, texUnitID) {
          if (!this.enabled()) {
            return ["vec4 " + passOutputVar + " = " + passInputVar + ";"];
          }
          var lines = this.env.genPassLines(passOutputVar, passInputVar, texUnitID).join('\n');
  
          var texLoadLines = '';
          var texLoadRegex = /(texture.*?\(.*?\))/g;
          var loadCounter = 0;
          var load;
  
          // As an optimization, merge duplicate identical texture loads to one var.
          while(load = texLoadRegex.exec(lines)) {
            var texLoadExpr = load[1];
            var secondOccurrence = lines.slice(load.index+1).indexOf(texLoadExpr);
            if (secondOccurrence != -1) { // And also has a second occurrence of same load expression..
              // Create new var to store the common load.
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texLoadVar = prefix + 'texload' + loadCounter++;
              var texLoadLine = 'vec4 ' + texLoadVar + ' = ' + texLoadExpr + ';\n';
              texLoadLines += texLoadLine + '\n'; // Store the generated texture load statements in a temp string to not confuse regex search in progress.
              lines = lines.split(texLoadExpr).join(texLoadVar);
              // Reset regex search, since we modified the string.
              texLoadRegex = /(texture.*\(.*\))/g;
            }
          }
          return [texLoadLines + lines];
        }
  
        CTexUnit.prototype.getTexType = function CTexUnit_getTexType() {
          if (this.enabled_texCube) {
            return GL_TEXTURE_CUBE_MAP;
          } else if (this.enabled_tex3D) {
            return GL_TEXTURE_3D;
          } else if (this.enabled_tex2D) {
            return GL_TEXTURE_2D;
          } else if (this.enabled_tex1D) {
            return GL_TEXTURE_1D;
          }
          return 0;
        }
  
        CTexEnv.prototype.genPassLines = function CTexEnv_genPassLines(passOutputVar, passInputVar, texUnitID) {
          switch (this.mode) {
            case GL_REPLACE: {
              /* RGB:
               * Cv = Cs
               * Av = Ap // Note how this is different, and that we'll
               *            need to track the bound texture internalFormat
               *            to get this right.
               *
               * RGBA:
               * Cv = Cs
               * Av = As
               */
              return [
                "vec4 " + passOutputVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
              ];
            }
            case GL_ADD: {
              /* RGBA:
               * Cv = Cp + Cs
               * Av = ApAs
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                "vec3 " + colorVar + " = " + passInputVar + ".rgb + " + texVar + ".rgb;",
                "float " + alphaVar + " = " + passInputVar + ".a * " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_MODULATE: {
              /* RGBA:
               * Cv = CpCs
               * Av = ApAs
               */
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  passInputVar,
                  " * ",
                  genTexUnitSampleExpr(texUnitID),
                ";",
              ];
              return [line.join("")];
            }
            case GL_DECAL: {
              /* RGBA:
               * Cv = Cp(1 - As) + CsAs
               * Av = Ap
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".a)",
                      " + ",
                    texVar + ".rgb * " + texVar + ".a",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + passInputVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_BLEND: {
              /* RGBA:
               * Cv = Cp(1 - Cs) + CcCs
               * Av = As
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".rgb)",
                      " + ",
                    PRIM_COLOR_VARYING + ".rgb * " + texVar + ".rgb",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_COMBINE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              var colorLines = this.genCombinerLines(true, colorVar,
                                                     passInputVar, texUnitID,
                                                     this.colorCombiner, this.colorSrc, this.colorOp);
              var alphaLines = this.genCombinerLines(false, alphaVar,
                                                     passInputVar, texUnitID,
                                                     this.alphaCombiner, this.alphaSrc, this.alphaOp);
  
              // Generate scale, but avoid generating an identity op that multiplies by one.
              var scaledColor = (this.colorScale == 1) ? colorVar : (colorVar + " * " + valToFloatLiteral(this.colorScale));
              var scaledAlpha = (this.alphaScale == 1) ? alphaVar : (alphaVar + " * " + valToFloatLiteral(this.alphaScale));
  
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  "vec4(",
                      scaledColor,
                      ", ",
                      scaledAlpha,
                  ")",
                ";",
              ].join("");
              return [].concat(colorLines, alphaLines, [line]);
            }
          }
  
          return abort_noSupport("Unsupported TexEnv mode: 0x" + this.mode.toString(16));
        }
  
        CTexEnv.prototype.genCombinerLines = function CTexEnv_getCombinerLines(isColor, outputVar,
                                                                               passInputVar, texUnitID,
                                                                               combiner, srcArr, opArr)
        {
          var argsNeeded = null;
          switch (combiner) {
            case GL_REPLACE:
              argsNeeded = 1;
              break;
  
            case GL_MODULATE:
            case GL_ADD:
            case GL_SUBTRACT:
              argsNeeded = 2;
              break;
  
            case GL_INTERPOLATE:
              argsNeeded = 3;
              break;
  
            default:
              return abort_noSupport("Unsupported combiner: 0x" + combiner.toString(16));
          }
  
          var constantExpr = [
            "vec4(",
              valToFloatLiteral(this.envColor[0]),
              ", ",
              valToFloatLiteral(this.envColor[1]),
              ", ",
              valToFloatLiteral(this.envColor[2]),
              ", ",
              valToFloatLiteral(this.envColor[3]),
            ")",
          ].join("");
          var src0Expr = (argsNeeded >= 1) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[0], opArr[0])
                                           : null;
          var src1Expr = (argsNeeded >= 2) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[1], opArr[1])
                                           : null;
          var src2Expr = (argsNeeded >= 3) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[2], opArr[2])
                                           : null;
  
          var outputType = isColor ? "vec3" : "float";
          var lines = null;
          switch (combiner) {
            case GL_REPLACE: {
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_MODULATE: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " * " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_ADD: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " + " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_SUBTRACT: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " - " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_INTERPOLATE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var arg2Var = prefix + "colorSrc2";
              var arg2Line = getTypeFromCombineOp(this.colorOp[2]) + " " + arg2Var + " = " + src2Expr + ";";
  
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr + " * " + arg2Var,
                  " + ",
                  src1Expr + " * (1.0 - " + arg2Var + ")",
                ";",
              ];
              lines = [
                arg2Line,
                line.join(""),
              ];
              break;
            }
  
            default:
              return abort_sanity("Unmatched TexEnv.colorCombiner?");
          }
  
          return lines;
        }
  
        return {
          // Exports:
          init: function(gl, specifiedMaxTextureImageUnits) {
            var maxTexUnits = 0;
            if (specifiedMaxTextureImageUnits) {
              maxTexUnits = specifiedMaxTextureImageUnits;
            } else if (gl) {
              maxTexUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            }
            assert(maxTexUnits > 0);
            s_texUnits = [];
            for (var i = 0; i < maxTexUnits; i++) {
              s_texUnits.push(new CTexUnit());
            }
          },
  
          setGLSLVars: function(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix) {
            TEX_UNIT_UNIFORM_PREFIX   = uTexUnitPrefix;
            TEX_COORD_VARYING_PREFIX  = vTexCoordPrefix;
            PRIM_COLOR_VARYING        = vPrimColor;
            TEX_MATRIX_UNIFORM_PREFIX = uTexMatrixPrefix;
          },
  
          genAllPassLines: function(resultDest, indentSize) {
            indentSize = indentSize || 0;
  
            s_requiredTexUnitsForPass.length = 0; // Clear the list.
            var lines = [];
            var lastPassVar = PRIM_COLOR_VARYING;
            for (var i = 0; i < s_texUnits.length; i++) {
              if (!s_texUnits[i].enabled()) continue;
  
              s_requiredTexUnitsForPass.push(i);
  
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + i + "_";
              var passOutputVar = prefix + "result";
  
              var newLines = s_texUnits[i].genPassLines(passOutputVar, lastPassVar, i);
              lines = lines.concat(newLines, [""]);
  
              lastPassVar = passOutputVar;
            }
            lines.push(resultDest + " = " + lastPassVar + ";");
  
            var indent = "";
            for (var i = 0; i < indentSize; i++) indent += " ";
  
            var output = indent + lines.join("\n" + indent);
  
            return output;
          },
  
          getUsedTexUnitList: function() {
            return s_requiredTexUnitsForPass;
          },
  
          traverseState: function(keyView) {
            for (var i = 0; i < s_texUnits.length; i++) {
              s_texUnits[i].traverseState(keyView);
            }
          },
  
          getTexUnitType: function(texUnitID) {
            assert(texUnitID >= 0 &&
                   texUnitID < s_texUnits.length);
            return s_texUnits[texUnitID].getTexType();
          },
  
          // Hooks:
          hook_activeTexture: function(texture) {
            s_activeTexture = texture - GL_TEXTURE0;
          },
  
          hook_enable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (!cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = true;
                  cur.texTypesEnabled |= 1;
                }
                break;
              case GL_TEXTURE_2D:
                if (!cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = true;
                  cur.texTypesEnabled |= 2;
                }
                break;
              case GL_TEXTURE_3D:
                if (!cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = true;
                  cur.texTypesEnabled |= 4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (!cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = true;
                  cur.texTypesEnabled |= 8;
                }
                break;
            }
          },
  
          hook_disable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = false;
                  cur.texTypesEnabled &= ~1;
                }
                break;
              case GL_TEXTURE_2D:
                if (cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = false;
                  cur.texTypesEnabled &= ~2;
                }
                break;
              case GL_TEXTURE_3D:
                if (cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = false;
                  cur.texTypesEnabled &= ~4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = false;
                  cur.texTypesEnabled &= ~8;
                }
                break;
            }
          },
  
          hook_texEnvf: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvf`.');
            }
          },
  
          hook_texEnvi: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                if (env.mode != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.mode = param;
                }
                break;
  
              case GL_COMBINE_RGB:
                if (env.colorCombiner != param) {
                  env.invalidateKey();
                  env.colorCombiner = param;
                }
                break;
              case GL_COMBINE_ALPHA:
                if (env.alphaCombiner != param) {
                  env.invalidateKey();
                  env.alphaCombiner = param;
                }
                break;
  
              case GL_SRC0_RGB:
                if (env.colorSrc[0] != param) {
                  env.invalidateKey();
                  env.colorSrc[0] = param;
                }
                break;
              case GL_SRC1_RGB:
                if (env.colorSrc[1] != param) {
                  env.invalidateKey();
                  env.colorSrc[1] = param;
                }
                break;
              case GL_SRC2_RGB:
                if (env.colorSrc[2] != param) {
                  env.invalidateKey();
                  env.colorSrc[2] = param;
                }
                break;
  
              case GL_SRC0_ALPHA:
                if (env.alphaSrc[0] != param) {
                  env.invalidateKey();
                  env.alphaSrc[0] = param;
                }
                break;
              case GL_SRC1_ALPHA:
                if (env.alphaSrc[1] != param) {
                  env.invalidateKey();
                  env.alphaSrc[1] = param;
                }
                break;
              case GL_SRC2_ALPHA:
                if (env.alphaSrc[2] != param) {
                  env.invalidateKey();
                  env.alphaSrc[2] = param;
                }
                break;
  
              case GL_OPERAND0_RGB:
                if (env.colorOp[0] != param) {
                  env.invalidateKey();
                  env.colorOp[0] = param;
                }
                break;
              case GL_OPERAND1_RGB:
                if (env.colorOp[1] != param) {
                  env.invalidateKey();
                  env.colorOp[1] = param;
                }
                break;
              case GL_OPERAND2_RGB:
                if (env.colorOp[2] != param) {
                  env.invalidateKey();
                  env.colorOp[2] = param;
                }
                break;
  
              case GL_OPERAND0_ALPHA:
                if (env.alphaOp[0] != param) {
                  env.invalidateKey();
                  env.alphaOp[0] = param;
                }
                break;
              case GL_OPERAND1_ALPHA:
                if (env.alphaOp[1] != param) {
                  env.invalidateKey();
                  env.alphaOp[1] = param;
                }
                break;
              case GL_OPERAND2_ALPHA:
                if (env.alphaOp[2] != param) {
                  env.invalidateKey();
                  env.alphaOp[2] = param;
                }
                break;
  
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey();
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvi`.');
            }
          },
  
          hook_texEnvfv: function(target, pname, params) {
            if (target != GL_TEXTURE_ENV) return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR: {
                for (var i = 0; i < 4; i++) {
                  var param = HEAPF32[(((params)+(i*4))>>2)];
                  if (env.envColor[i] != param) {
                    env.invalidateKey(); // We changed FFP emulation renderer state.
                    env.envColor[i] = param;
                  }
                }
                break
              }
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvfv`.');
            }
          },
  
          hook_getTexEnviv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                HEAP32[((param)>>2)]=env.mode;
                return;
  
              case GL_TEXTURE_ENV_COLOR:
                HEAP32[((param)>>2)]=Math.max(Math.min(env.envColor[0]*255, 255, -255));
                HEAP32[(((param)+(1))>>2)]=Math.max(Math.min(env.envColor[1]*255, 255, -255));
                HEAP32[(((param)+(2))>>2)]=Math.max(Math.min(env.envColor[2]*255, 255, -255));
                HEAP32[(((param)+(3))>>2)]=Math.max(Math.min(env.envColor[3]*255, 255, -255));
                return;
  
              case GL_COMBINE_RGB:
                HEAP32[((param)>>2)]=env.colorCombiner;
                return;
  
              case GL_COMBINE_ALPHA:
                HEAP32[((param)>>2)]=env.alphaCombiner;
                return;
  
              case GL_SRC0_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[0];
                return;
  
              case GL_SRC1_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[1];
                return;
  
              case GL_SRC2_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[2];
                return;
  
              case GL_SRC0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[0];
                return;
  
              case GL_SRC1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[1];
                return;
  
              case GL_SRC2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[2];
                return;
  
              case GL_OPERAND0_RGB:
                HEAP32[((param)>>2)]=env.colorOp[0];
                return;
  
              case GL_OPERAND1_RGB:
                HEAP32[((param)>>2)]=env.colorOp[1];
                return;
  
              case GL_OPERAND2_RGB:
                HEAP32[((param)>>2)]=env.colorOp[2];
                return;
  
              case GL_OPERAND0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[0];
                return;
  
              case GL_OPERAND1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[1];
                return;
  
              case GL_OPERAND2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[2];
                return;
  
              case GL_RGB_SCALE:
                HEAP32[((param)>>2)]=env.colorScale;
                return;
  
              case GL_ALPHA_SCALE:
                HEAP32[((param)>>2)]=env.alphaScale;
                return;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glGetTexEnvi`.');
            }
          },
  
          hook_getTexEnvfv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR:
                HEAPF32[((param)>>2)]=env.envColor[0];
                HEAPF32[(((param)+(4))>>2)]=env.envColor[1];
                HEAPF32[(((param)+(8))>>2)]=env.envColor[2];
                HEAPF32[(((param)+(12))>>2)]=env.envColor[3];
                return;
            }
          }
        };
      },vertexData:null,vertexDataU8:null,tempData:null,indexData:null,vertexCounter:0,mode:-1,rendererCache:null,rendererComponents:[],rendererComponentPointer:0,lastRenderer:null,lastArrayBuffer:null,lastProgram:null,lastStride:-1,matrix:[],matrixStack:[],currentMatrix:0,tempMatrix:null,matricesModified:false,useTextureMatrix:false,VERTEX:0,NORMAL:1,COLOR:2,TEXTURE0:3,NUM_ATTRIBUTES:-1,MAX_TEXTURES:-1,totalEnabledClientAttributes:0,enabledClientAttributes:[0,0],clientAttributes:[],liveClientAttributes:[],currentRenderer:null,modifiedClientAttributes:false,clientActiveTexture:0,clientColor:null,usedTexUnitList:[],fixedFunctionProgram:null,setClientAttribute:function setClientAttribute(name, size, type, stride, pointer) {
        var attrib = GLImmediate.clientAttributes[name];
        if (!attrib) {
          for (var i = 0; i <= name; i++) { // keep flat
            if (!GLImmediate.clientAttributes[i]) {
              GLImmediate.clientAttributes[i] = {
                name: name,
                size: size,
                type: type,
                stride: stride,
                pointer: pointer,
                offset: 0
              };
            }
          }
        } else {
          attrib.name = name;
          attrib.size = size;
          attrib.type = type;
          attrib.stride = stride;
          attrib.pointer = pointer;
          attrib.offset = 0;
        }
        GLImmediate.modifiedClientAttributes = true;
      },addRendererComponent:function addRendererComponent(name, size, type) {
        if (!GLImmediate.rendererComponents[name]) {
          GLImmediate.rendererComponents[name] = 1;
          if (GLImmediate.enabledClientAttributes[name]) {
            console.log("Warning: glTexCoord used after EnableClientState for TEXTURE_COORD_ARRAY for TEXTURE0. Disabling TEXTURE_COORD_ARRAY...");
          }
          GLImmediate.enabledClientAttributes[name] = true;
          GLImmediate.setClientAttribute(name, size, type, 0, GLImmediate.rendererComponentPointer);
          GLImmediate.rendererComponentPointer += size * GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
          // We can enable the correct attribute stream index immediately here, since the same attribute in each shader
          // will be bound to this same index.
          GL.enableVertexAttribArray(name);
        } else {
          GLImmediate.rendererComponents[name]++;
        }
      },disableBeginEndClientAttributes:function disableBeginEndClientAttributes() {
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          if (GLImmediate.rendererComponents[i]) GLImmediate.enabledClientAttributes[i] = false;
        }
      },getRenderer:function getRenderer() {
        // If no FFP state has changed that would have forced to re-evaluate which FFP emulation shader to use,
        // we have the currently used renderer in cache, and can immediately return that.
        if (GLImmediate.currentRenderer) {
          return GLImmediate.currentRenderer;
        }
        // return a renderer object given the liveClientAttributes
        // we maintain a cache of renderers, optimized to not generate garbage
        var attributes = GLImmediate.liveClientAttributes;
        var cacheMap = GLImmediate.rendererCache;
        var keyView = cacheMap.getStaticKeyView().reset();
  
        // By attrib state:
        var enabledAttributesKey = 0;
        for (var i = 0; i < attributes.length; i++) {
          enabledAttributesKey |= 1 << attributes[i].name;
        }
  
        // By fog state:
        var fogParam = 0;
        if (GLEmulation.fogEnabled) {
          switch (GLEmulation.fogMode) {
            case 0x0801: // GL_EXP2
              fogParam = 1;
              break;
            case 0x2601: // GL_LINEAR
              fogParam = 2;
              break;
            default: // default to GL_EXP
              fogParam = 3;
              break;
          }
        }
        keyView.next((enabledAttributesKey << 2) | fogParam);
  
          GLImmediate.TexEnvJIT.traverseState(keyView);
  
        // If we don't already have it, create it.
        var renderer = keyView.get();
        if (!renderer) {
          renderer = GLImmediate.createRenderer();
          GLImmediate.currentRenderer = renderer;
          keyView.set(renderer);
          return renderer;
        }
        GLImmediate.currentRenderer = renderer; // Cache the currently used renderer, so later lookups without state changes can get this fast.
        return renderer;
      },createRenderer:function createRenderer(renderer) {
        var useCurrProgram = !!GL.currProgram;
        var hasTextures = false;
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          var texAttribName = GLImmediate.TEXTURE0 + i;
          if (!GLImmediate.enabledClientAttributes[texAttribName])
            continue;
  
          if (!useCurrProgram) {
            if (GLImmediate.TexEnvJIT.getTexUnitType(i) == 0) {
               Runtime.warnOnce("GL_TEXTURE" + i + " coords are supplied, but that texture unit is disabled in the fixed-function pipeline.");
            }
          }
  
          hasTextures = true;
        }
  
        var ret = {
          init: function init() {
            // For fixed-function shader generation.
            var uTexUnitPrefix = 'u_texUnit';
            var aTexCoordPrefix = 'a_texCoord';
            var vTexCoordPrefix = 'v_texCoord';
            var vPrimColor = 'v_color';
            var uTexMatrixPrefix = GLImmediate.useTextureMatrix ? 'u_textureMatrix' : null;
  
            if (useCurrProgram) {
              if (GL.shaderInfos[GL.programShaders[GL.currProgram][0]].type == GLctx.VERTEX_SHADER) {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
              } else {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
              }
              this.program = GL.programs[GL.currProgram];
              this.usedTexUnitList = [];
            } else {
              // IMPORTANT NOTE: If you parameterize the shader source based on any runtime values
              // in order to create the least expensive shader possible based on the features being
              // used, you should also update the code in the beginning of getRenderer to make sure
              // that you cache the renderer based on the said parameters.
              if (GLEmulation.fogEnabled) {
                switch (GLEmulation.fogMode) {
                  case 0x0801: // GL_EXP2
                    // fog = exp(-(gl_Fog.density * gl_FogFragCoord)^2)
                    var fogFormula = '  float fog = exp(-u_fogDensity * u_fogDensity * ecDistance * ecDistance); \n';
                    break;
                  case 0x2601: // GL_LINEAR
                    // fog = (gl_Fog.end - gl_FogFragCoord) * gl_fog.scale
                    var fogFormula = '  float fog = (u_fogEnd - ecDistance) * u_fogScale; \n';
                    break;
                  default: // default to GL_EXP
                    // fog = exp(-gl_Fog.density * gl_FogFragCoord)
                    var fogFormula = '  float fog = exp(-u_fogDensity * ecDistance); \n';
                    break;
                }
              }
  
              GLImmediate.TexEnvJIT.setGLSLVars(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix);
              var fsTexEnvPass = GLImmediate.TexEnvJIT.genAllPassLines('gl_FragColor', 2);
  
              var texUnitAttribList = '';
              var texUnitVaryingList = '';
              var texUnitUniformList = '';
              var vsTexCoordInits = '';
              this.usedTexUnitList = GLImmediate.TexEnvJIT.getUsedTexUnitList();
              for (var i = 0; i < this.usedTexUnitList.length; i++) {
                var texUnit = this.usedTexUnitList[i];
                texUnitAttribList += 'attribute vec4 ' + aTexCoordPrefix + texUnit + ';\n';
                texUnitVaryingList += 'varying vec4 ' + vTexCoordPrefix + texUnit + ';\n';
                texUnitUniformList += 'uniform sampler2D ' + uTexUnitPrefix + texUnit + ';\n';
                vsTexCoordInits += '  ' + vTexCoordPrefix + texUnit + ' = ' + aTexCoordPrefix + texUnit + ';\n';
  
                if (GLImmediate.useTextureMatrix) {
                  texUnitUniformList += 'uniform mat4 ' + uTexMatrixPrefix + texUnit + ';\n';
                }
              }
  
              var vsFogVaryingInit = null;
              if (GLEmulation.fogEnabled) {
                vsFogVaryingInit = '  v_fogFragCoord = abs(ecPosition.z);\n';
              }
  
              var vsSource = [
                'attribute vec4 a_position;',
                'attribute vec4 a_color;',
                'varying vec4 v_color;',
                texUnitAttribList,
                texUnitVaryingList,
                (GLEmulation.fogEnabled ? 'varying float v_fogFragCoord;' : null),
                'uniform mat4 u_modelView;',
                'uniform mat4 u_projection;',
                'void main()',
                '{',
                '  vec4 ecPosition = u_modelView * a_position;', // eye-coordinate position
                '  gl_Position = u_projection * ecPosition;',
                '  v_color = a_color;',
                vsTexCoordInits,
                vsFogVaryingInit,
                '}',
                ''
              ].join('\n').replace(/\n\n+/g, '\n');
  
              this.vertexShader = GLctx.createShader(GLctx.VERTEX_SHADER);
              GLctx.shaderSource(this.vertexShader, vsSource);
              GLctx.compileShader(this.vertexShader);
  
              var fogHeaderIfNeeded = null;
              if (GLEmulation.fogEnabled) {
                fogHeaderIfNeeded = [
                  '',
                  'varying float v_fogFragCoord; ',
                  'uniform vec4 u_fogColor;      ',
                  'uniform float u_fogEnd;       ',
                  'uniform float u_fogScale;     ',
                  'uniform float u_fogDensity;   ',
                  'float ffog(in float ecDistance) { ',
                  fogFormula,
                  '  fog = clamp(fog, 0.0, 1.0); ',
                  '  return fog;                 ',
                  '}',
                  '',
                ].join("\n");
              }
  
              var fogPass = null;
              if (GLEmulation.fogEnabled) {
                fogPass = 'gl_FragColor = vec4(mix(u_fogColor.rgb, gl_FragColor.rgb, ffog(v_fogFragCoord)), gl_FragColor.a);\n';
              }
  
              var fsSource = [
                'precision mediump float;',
                texUnitVaryingList,
                texUnitUniformList,
                'varying vec4 v_color;',
                fogHeaderIfNeeded,
                'void main()',
                '{',
                fsTexEnvPass,
                fogPass,
                '}',
                ''
              ].join("\n").replace(/\n\n+/g, '\n');
  
              this.fragmentShader = GLctx.createShader(GLctx.FRAGMENT_SHADER);
              GLctx.shaderSource(this.fragmentShader, fsSource);
              GLctx.compileShader(this.fragmentShader);
  
              this.program = GLctx.createProgram();
              GLctx.attachShader(this.program, this.vertexShader);
              GLctx.attachShader(this.program, this.fragmentShader);
  
              // As optimization, bind all attributes to prespecified locations, so that the FFP emulation
              // code can submit attributes to any generated FFP shader without having to examine each shader in turn.
              // These prespecified locations are only assumed if GL_FFP_ONLY is specified, since user could also create their
              // own shaders that didn't have attributes in the same locations.
              GLctx.bindAttribLocation(this.program, GLImmediate.VERTEX, 'a_position');
              GLctx.bindAttribLocation(this.program, GLImmediate.COLOR, 'a_color');
              GLctx.bindAttribLocation(this.program, GLImmediate.NORMAL, 'a_normal');
              var maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
              for (var i = 0; i < GLImmediate.MAX_TEXTURES && GLImmediate.TEXTURE0 + i < maxVertexAttribs; i++) {
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, 'a_texCoord'+i);
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, aTexCoordPrefix+i);
              }
              GLctx.linkProgram(this.program);
            }
  
            // Stores an array that remembers which matrix uniforms are up-to-date in this FFP renderer, so they don't need to be resubmitted
            // each time we render with this program.
            this.textureMatrixVersion = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
  
            this.positionLocation = GLctx.getAttribLocation(this.program, 'a_position');
  
            this.texCoordLocations = [];
  
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              if (!GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0 + i]) {
                this.texCoordLocations[i] = -1;
                continue;
              }
  
              if (useCurrProgram) {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, 'a_texCoord' + i);
              } else {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, aTexCoordPrefix + i);
              }
            }
            this.colorLocation = GLctx.getAttribLocation(this.program, 'a_color');
            if (!useCurrProgram) {
              // Temporarily switch to the program so we can set our sampler uniforms early.
              var prevBoundProg = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              GLctx.useProgram(this.program);
              {
                for (var i = 0; i < this.usedTexUnitList.length; i++) {
                  var texUnitID = this.usedTexUnitList[i];
                  var texSamplerLoc = GLctx.getUniformLocation(this.program, uTexUnitPrefix + texUnitID);
                  GLctx.uniform1i(texSamplerLoc, texUnitID);
                }
              }
              // The default color attribute value is not the same as the default for all other attribute streams (0,0,0,1) but (1,1,1,1),
              // so explicitly set it right at start.
              GLctx.vertexAttrib4fv(this.colorLocation, [1,1,1,1]);
              GLctx.useProgram(prevBoundProg);
            }
  
            this.textureMatrixLocations = [];
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              this.textureMatrixLocations[i] = GLctx.getUniformLocation(this.program, 'u_textureMatrix' + i);
            }
            this.normalLocation = GLctx.getAttribLocation(this.program, 'a_normal');
  
            this.modelViewLocation = GLctx.getUniformLocation(this.program, 'u_modelView');
            this.projectionLocation = GLctx.getUniformLocation(this.program, 'u_projection');
  
            this.hasTextures = hasTextures;
            this.hasNormal = GLImmediate.enabledClientAttributes[GLImmediate.NORMAL] &&
                             GLImmediate.clientAttributes[GLImmediate.NORMAL].size > 0 &&
                             this.normalLocation >= 0;
            this.hasColor = (this.colorLocation === 0) || this.colorLocation > 0;
  
            this.floatType = GLctx.FLOAT; // minor optimization
  
            this.fogColorLocation = GLctx.getUniformLocation(this.program, 'u_fogColor');
            this.fogEndLocation = GLctx.getUniformLocation(this.program, 'u_fogEnd');
            this.fogScaleLocation = GLctx.getUniformLocation(this.program, 'u_fogScale');
            this.fogDensityLocation = GLctx.getUniformLocation(this.program, 'u_fogDensity');
            this.hasFog = !!(this.fogColorLocation || this.fogEndLocation ||
                             this.fogScaleLocation || this.fogDensityLocation);
          },
  
          prepare: function prepare() {
            // Calculate the array buffer
            var arrayBuffer;
            if (!GL.currArrayBuffer) {
              var start = GLImmediate.firstVertex*GLImmediate.stride;
              var end = GLImmediate.lastVertex*GLImmediate.stride;
              assert(end <= GL.MAX_TEMP_BUFFER_SIZE, 'too much vertex data');
              arrayBuffer = GL.getTempVertexBuffer(end);
              // TODO: consider using the last buffer we bound, if it was larger. downside is larger buffer, but we might avoid rebinding and preparing
            } else {
              arrayBuffer = GL.currArrayBuffer;
            }
  
            // If the array buffer is unchanged and the renderer as well, then we can avoid all the work here
            // XXX We use some heuristics here, and this may not work in all cases. Try disabling GL_UNSAFE_OPTS if you
            // have odd glitches
            var lastRenderer = GLImmediate.lastRenderer;
            var canSkip = this == lastRenderer &&
                          arrayBuffer == GLImmediate.lastArrayBuffer &&
                          (GL.currProgram || this.program) == GLImmediate.lastProgram &&
                          GLImmediate.stride == GLImmediate.lastStride &&
                          !GLImmediate.matricesModified;
            if (!canSkip && lastRenderer) lastRenderer.cleanup();
            if (!GL.currArrayBuffer) {
              // Bind the array buffer and upload data after cleaning up the previous renderer
  
              if (arrayBuffer != GLImmediate.lastArrayBuffer) {
                GLctx.bindBuffer(GLctx.ARRAY_BUFFER, arrayBuffer);
                GLImmediate.lastArrayBuffer = arrayBuffer;
              }
  
              GLctx.bufferSubData(GLctx.ARRAY_BUFFER, start, GLImmediate.vertexData.subarray(start >> 2, end >> 2));
            }
            if (canSkip) return;
            GLImmediate.lastRenderer = this;
            GLImmediate.lastProgram = GL.currProgram || this.program;
            GLImmediate.lastStride == GLImmediate.stride;
            GLImmediate.matricesModified = false;
  
            if (!GL.currProgram) {
              if (GLImmediate.fixedFunctionProgram != this.program) {
                GLctx.useProgram(this.program);
                GLImmediate.fixedFunctionProgram = this.program;
              }
            }
  
            if (this.modelViewLocation && this.modelViewMatrixVersion != GLImmediate.matrixVersion[0/*m*/]) {
              this.modelViewMatrixVersion = GLImmediate.matrixVersion[0/*m*/];
              GLctx.uniformMatrix4fv(this.modelViewLocation, false, GLImmediate.matrix[0/*m*/]);
            }
            if (this.projectionLocation && this.projectionMatrixVersion != GLImmediate.matrixVersion[1/*p*/]) {
              this.projectionMatrixVersion = GLImmediate.matrixVersion[1/*p*/];
              GLctx.uniformMatrix4fv(this.projectionLocation, false, GLImmediate.matrix[1/*p*/]);
            }
  
            var clientAttributes = GLImmediate.clientAttributes;
            var posAttr = clientAttributes[GLImmediate.VERTEX];
  
  
            if (!GL.currArrayBuffer) {
              GLctx.vertexAttribPointer(GLImmediate.VERTEX, posAttr.size, posAttr.type, false, GLImmediate.stride, posAttr.offset);
              if (this.hasNormal) {
                var normalAttr = clientAttributes[GLImmediate.NORMAL];
                GLctx.vertexAttribPointer(GLImmediate.NORMAL, normalAttr.size, normalAttr.type, true, GLImmediate.stride, normalAttr.offset);
              }
            }
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                if (!GL.currArrayBuffer) {
                  var attribLoc = GLImmediate.TEXTURE0+i;
                  var texAttr = clientAttributes[attribLoc];
                  if (texAttr.size) {
                    GLctx.vertexAttribPointer(attribLoc, texAttr.size, texAttr.type, false, GLImmediate.stride, texAttr.offset);
                  } else {
                    // These two might be dangerous, but let's try them.
                    GLctx.vertexAttrib4f(attribLoc, 0, 0, 0, 1);
                  }
                }
                var t = 2/*t*/+i;
                if (this.textureMatrixLocations[i] && this.textureMatrixVersion[t] != GLImmediate.matrixVersion[t]) { // XXX might we need this even without the condition we are currently in?
                  this.textureMatrixVersion[t] = GLImmediate.matrixVersion[t];
                  GLctx.uniformMatrix4fv(this.textureMatrixLocations[i], false, GLImmediate.matrix[t]);
                }
              }
            }
            if (GLImmediate.enabledClientAttributes[GLImmediate.COLOR]) {
              var colorAttr = clientAttributes[GLImmediate.COLOR];
              if (!GL.currArrayBuffer) {
                GLctx.vertexAttribPointer(GLImmediate.COLOR, colorAttr.size, colorAttr.type, true, GLImmediate.stride, colorAttr.offset);
              }
            }
            if (this.hasFog) {
              if (this.fogColorLocation) GLctx.uniform4fv(this.fogColorLocation, GLEmulation.fogColor);
              if (this.fogEndLocation) GLctx.uniform1f(this.fogEndLocation, GLEmulation.fogEnd);
              if (this.fogScaleLocation) GLctx.uniform1f(this.fogScaleLocation, 1/(GLEmulation.fogEnd - GLEmulation.fogStart));
              if (this.fogDensityLocation) GLctx.uniform1f(this.fogDensityLocation, GLEmulation.fogDensity);
            }
          },
  
          cleanup: function cleanup() {
          }
        };
        ret.init();
        return ret;
      },setupFuncs:function () {
        // Replace some functions with immediate-mode aware versions. If there are no client
        // attributes enabled, and we use webgl-friendly modes (no GL_QUADS), then no need
        // for emulation
        _glDrawArrays = _emscripten_glDrawArrays = function _glDrawArrays(mode, first, count) {
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6) {
            GLctx.drawArrays(mode, first, count);
            return;
          }
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,(GLImmediate.vertexPointer + (first+count)*GLImmediate.stride)>>2); // XXX assuming float
            GLImmediate.firstVertex = first;
            GLImmediate.lastVertex = first + count;
          }
          GLImmediate.flush(null, first);
          GLImmediate.mode = -1;
        };
  
        _glDrawElements = _emscripten_glDrawElements = function _glDrawElements(mode, count, type, indices, start, end) { // start, end are given if we come from glDrawRangeElements
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6 && GL.currElementArrayBuffer) {
            GLctx.drawElements(mode, count, type, indices);
            return;
          }
          if (!GL.currElementArrayBuffer) {
            assert(type == GLctx.UNSIGNED_SHORT); // We can only emulate buffers of this kind, for now
          }
          console.log("DrawElements doesn't actually prepareClientAttributes properly.");
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.firstVertex = end ? start : TOTAL_MEMORY; // if we don't know the start, set an invalid value and we will calculate it later from the indices
            GLImmediate.lastVertex = end ? end+1 : 0;
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,((end ? GLImmediate.vertexPointer + (end+1)*GLImmediate.stride : TOTAL_MEMORY))>>2); // XXX assuming float
          }
          GLImmediate.flush(count, 0, indices);
          GLImmediate.mode = -1;
        };
  
        // TexEnv stuff needs to be prepared early, so do it here.
        // init() is too late for -O2, since it freezes the GL functions
        // by that point.
        GLImmediate.MapTreeLib = GLImmediate.spawnMapTreeLib();
        GLImmediate.spawnMapTreeLib = null;
  
        GLImmediate.TexEnvJIT = GLImmediate.spawnTexEnvJIT();
        GLImmediate.spawnTexEnvJIT = null;
  
        GLImmediate.setupHooks();
      },setupHooks:function () {
        if (!GLEmulation.hasRunInit) {
          GLEmulation.init();
        }
  
        var glActiveTexture = _glActiveTexture;
        _glActiveTexture = _emscripten_glActiveTexture = function _glActiveTexture(texture) {
          GLImmediate.TexEnvJIT.hook_activeTexture(texture);
          glActiveTexture(texture);
        };
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          GLImmediate.TexEnvJIT.hook_enable(cap);
          glEnable(cap);
        };
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          GLImmediate.TexEnvJIT.hook_disable(cap);
          glDisable(cap);
        };
  
        var glTexEnvf = (typeof(_glTexEnvf) != 'undefined') ? _glTexEnvf : function(){};
        _glTexEnvf = _emscripten_glTexEnvf = function _glTexEnvf(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvf(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvf(target, pname, param);
        };
        var glTexEnvi = (typeof(_glTexEnvi) != 'undefined') ? _glTexEnvi : function(){};
        _glTexEnvi = _emscripten_glTexEnvi = function _glTexEnvi(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvi(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvi(target, pname, param);
        };
        var glTexEnvfv = (typeof(_glTexEnvfv) != 'undefined') ? _glTexEnvfv : function(){};
        _glTexEnvfv = _emscripten_glTexEnvfv = function _glTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvfv(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvfv(target, pname, param);
        };
  
        _glGetTexEnviv = function _glGetTexEnviv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnviv(target, pname, param);
        };
  
        _glGetTexEnvfv = function _glGetTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnvfv(target, pname, param);
        };
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x8B8D: { // GL_CURRENT_PROGRAM
              // Just query directly so we're working with WebGL objects.
              var cur = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              if (cur == GLImmediate.fixedFunctionProgram) {
                // Pretend we're not using a program.
                HEAP32[((params)>>2)]=0;
                return;
              }
              break;
            }
          }
          glGetIntegerv(pname, params);
        };
      },initted:false,init:function () {
        Module.printErr('WARNING: using emscripten GL immediate mode emulation. This is very limited in what it supports');
        GLImmediate.initted = true;
  
        if (!Module.useWebGL) return; // a 2D canvas may be currently used TODO: make sure we are actually called in that case
  
        // User can override the maximum number of texture units that we emulate. Using fewer texture units increases runtime performance
        // slightly, so it is advantageous to choose as small value as needed.
        GLImmediate.MAX_TEXTURES = Module['GL_MAX_TEXTURE_IMAGE_UNITS'] || GLctx.getParameter(GLctx.MAX_TEXTURE_IMAGE_UNITS);
  
        GLImmediate.TexEnvJIT.init(GLctx, GLImmediate.MAX_TEXTURES);
  
        GLImmediate.NUM_ATTRIBUTES = 3 /*pos+normal+color attributes*/ + GLImmediate.MAX_TEXTURES;
        GLImmediate.clientAttributes = [];
        GLEmulation.enabledClientAttribIndices = [];
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          GLImmediate.clientAttributes.push({});
          GLEmulation.enabledClientAttribIndices.push(false);
        }
  
        // Initialize matrix library
        // When user sets a matrix, increment a 'version number' on the new data, and when rendering, submit
        // the matrices to the shader program only if they have an old version of the data.
        GLImmediate.matrix = [];
        GLImmediate.matrixStack = [];
        GLImmediate.matrixVersion = [];
        for (var i = 0; i < 2 + GLImmediate.MAX_TEXTURES; i++) { // Modelview, Projection, plus one matrix for each texture coordinate.
          GLImmediate.matrixStack.push([]);
          GLImmediate.matrixVersion.push(0);
          GLImmediate.matrix.push(GLImmediate.matrixLib.mat4.create());
          GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[i]);
        }
  
        // Renderer cache
        GLImmediate.rendererCache = GLImmediate.MapTreeLib.create();
  
        // Buffers for data
        GLImmediate.tempData = new Float32Array(GL.MAX_TEMP_BUFFER_SIZE >> 2);
        GLImmediate.indexData = new Uint16Array(GL.MAX_TEMP_BUFFER_SIZE >> 1);
  
        GLImmediate.vertexDataU8 = new Uint8Array(GLImmediate.tempData.buffer);
  
        GL.generateTempBuffers(true);
  
        GLImmediate.clientColor = new Float32Array([1, 1, 1, 1]);
      },prepareClientAttributes:function prepareClientAttributes(count, beginEnd) {
        // If no client attributes were modified since we were last called, do nothing. Note that this
        // does not work for glBegin/End, where we generate renderer components dynamically and then
        // disable them ourselves, but it does help with glDrawElements/Arrays.
        if (!GLImmediate.modifiedClientAttributes) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
          return;
        }
        GLImmediate.modifiedClientAttributes = false;
  
        // The role of prepareClientAttributes is to examine the set of client-side vertex attribute buffers
        // that user code has submitted, and to prepare them to be uploaded to a VBO in GPU memory
        // (since WebGL does not support client-side rendering, i.e. rendering from vertex data in CPU memory)
        // User can submit vertex data generally in three different configurations:
        // 1. Fully planar: all attributes are in their own separate tightly-packed arrays in CPU memory.
        // 2. Fully interleaved: all attributes share a single array where data is interleaved something like (pos,uv,normal), (pos,uv,normal), ...
        // 3. Complex hybrid: Multiple separate arrays that either are sparsely strided, and/or partially interleave vertex attributes.
  
        // For simplicity, we support the case (2) as the fast case. For (1) and (3), we do a memory copy of the
        // vertex data here to prepare a relayouted buffer that is of the structure in case (2). The reason
        // for this is that it allows the emulation code to get away with using just one VBO buffer for rendering,
        // and not have to maintain multiple ones. Therefore cases (1) and (3) will be very slow, and case (2) is fast.
  
        // Detect which case we are in by using a quick heuristic by examining the strides of the buffers. If all the buffers have identical 
        // stride, we assume we have case (2), otherwise we have something more complex.
        var clientStartPointer = 0x7FFFFFFF;
        var bytes = 0; // Total number of bytes taken up by a single vertex.
        var minStride = 0x7FFFFFFF;
        var maxStride = 0;
        var attributes = GLImmediate.liveClientAttributes;
        attributes.length = 0;
        for (var i = 0; i < 3+GLImmediate.MAX_TEXTURES; i++) {
          if (GLImmediate.enabledClientAttributes[i]) {
            var attr = GLImmediate.clientAttributes[i];
            attributes.push(attr);
            clientStartPointer = Math.min(clientStartPointer, attr.pointer);
            attr.sizeBytes = attr.size * GL.byteSizeByType[attr.type - GL.byteSizeByTypeRoot];
            bytes += attr.sizeBytes;
            minStride = Math.min(minStride, attr.stride);
            maxStride = Math.max(maxStride, attr.stride);
          }
        }
  
        if ((minStride != maxStride || maxStride < bytes) && !beginEnd) {
          // We are in cases (1) or (3): slow path, shuffle the data around into a single interleaved vertex buffer.
          // The immediate-mode glBegin()/glEnd() vertex submission gets automatically generated in appropriate layout,
          // so never need to come down this path if that was used.
          if (!GLImmediate.restrideBuffer) GLImmediate.restrideBuffer = _malloc(GL.MAX_TEMP_BUFFER_SIZE);
          var start = GLImmediate.restrideBuffer;
          bytes = 0;
          // calculate restrided offsets and total size
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var size = attr.sizeBytes;
            if (size % 4 != 0) size += 4 - (size % 4); // align everything
            attr.offset = bytes;
            bytes += size;
          }
          // copy out the data (we need to know the stride for that, and define attr.pointer)
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var srcStride = Math.max(attr.sizeBytes, attr.stride);
            if ((srcStride & 3) == 0 && (attr.sizeBytes & 3) == 0) {
              var size4 = attr.sizeBytes>>2;
              var srcStride4 = Math.max(attr.sizeBytes, attr.stride)>>2;
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < size4; k++) { // copy in chunks of 4 bytes, our alignment makes this possible
                  HEAP32[((start + attr.offset + bytes*j)>>2) + k] = HEAP32[(attr.pointer>>2) + j*srcStride4 + k];
                }
              }
            } else {
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < attr.sizeBytes; k++) { // source data was not aligned to multiples of 4, must copy byte by byte.
                  HEAP8[start + attr.offset + bytes*j + k] = HEAP8[attr.pointer + j*srcStride + k];
                }
              }
            }
            attr.pointer = start + attr.offset;
          }
          GLImmediate.stride = bytes;
          GLImmediate.vertexPointer = start;
        } else {
          // case (2): fast path, all data is interleaved to a single vertex array so we can get away with a single VBO upload.
          if (GL.currArrayBuffer) {
            GLImmediate.vertexPointer = 0;
          } else {
            GLImmediate.vertexPointer = clientStartPointer;
          }
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            attr.offset = attr.pointer - GLImmediate.vertexPointer; // Compute what will be the offset of this attribute in the VBO after we upload.
          }
          GLImmediate.stride = Math.max(maxStride, bytes);
        }
        if (!beginEnd) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
        }
      },flush:function flush(numProvidedIndexes, startIndex, ptr) {
        assert(numProvidedIndexes >= 0 || !numProvidedIndexes);
        startIndex = startIndex || 0;
        ptr = ptr || 0;
  
        var renderer = GLImmediate.getRenderer();
  
        // Generate index data in a format suitable for GLES 2.0/WebGL
        var numVertexes = 4 * GLImmediate.vertexCounter / GLImmediate.stride;
        assert(numVertexes % 1 == 0, "`numVertexes` must be an integer.");
        var emulatedElementArrayBuffer = false;
        var numIndexes = 0;
        if (numProvidedIndexes) {
          numIndexes = numProvidedIndexes;
          if (!GL.currArrayBuffer && GLImmediate.firstVertex > GLImmediate.lastVertex) {
            // Figure out the first and last vertex from the index data
            assert(!GL.currElementArrayBuffer); // If we are going to upload array buffer data, we need to find which range to
                                                // upload based on the indices. If they are in a buffer on the GPU, that is very
                                                // inconvenient! So if you do not have an array buffer, you should also not have
                                                // an element array buffer. But best is to use both buffers!
            for (var i = 0; i < numProvidedIndexes; i++) {
              var currIndex = HEAPU16[(((ptr)+(i*2))>>1)];
              GLImmediate.firstVertex = Math.min(GLImmediate.firstVertex, currIndex);
              GLImmediate.lastVertex = Math.max(GLImmediate.lastVertex, currIndex+1);
            }
          }
          if (!GL.currElementArrayBuffer) {
            // If no element array buffer is bound, then indices is a literal pointer to clientside data
            assert(numProvidedIndexes << 1 <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (a)');
            var indexBuffer = GL.getTempIndexBuffer(numProvidedIndexes << 1);
            GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, indexBuffer);
            GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER, 0, HEAPU16.subarray((ptr)>>1,(ptr + (numProvidedIndexes << 1))>>1));
            ptr = 0;
            emulatedElementArrayBuffer = true;
          }
        } else if (GLImmediate.mode > 6) { // above GL_TRIANGLE_FAN are the non-GL ES modes
          if (GLImmediate.mode != 7) throw 'unsupported immediate mode ' + GLImmediate.mode; // GL_QUADS
          // GLImmediate.firstVertex is the first vertex we want. Quad indexes are in the pattern
          // 0 1 2, 0 2 3, 4 5 6, 4 6 7, so we need to look at index firstVertex * 1.5 to see it.
          // Then since indexes are 2 bytes each, that means 3
          assert(GLImmediate.firstVertex % 4 == 0);
          ptr = GLImmediate.firstVertex*3;
          var numQuads = numVertexes / 4;
          numIndexes = numQuads * 6; // 0 1 2, 0 2 3 pattern
          assert(ptr + (numIndexes << 1) <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (b)');
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          emulatedElementArrayBuffer = true;
        }
  
        renderer.prepare();
  
        if (numIndexes) {
          GLctx.drawElements(GLctx.TRIANGLES, numIndexes, GLctx.UNSIGNED_SHORT, ptr);
        } else {
          GLctx.drawArrays(GLImmediate.mode, startIndex, numVertexes);
        }
  
        if (emulatedElementArrayBuffer) {
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.buffers[GL.currElementArrayBuffer] || null);
        }
  
      }};
  GLImmediate.matrixLib = (function() {
  
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
   * @author Brandon Jones
   * @version 1.2.4
   */
  
  // Modifed for emscripten: Global scoping etc.
  
  /*
   * Copyright (c) 2011 Brandon Jones
   *
   * This software is provided 'as-is', without any express or implied
   * warranty. In no event will the authors be held liable for any damages
   * arising from the use of this software.
   *
   * Permission is granted to anyone to use this software for any purpose,
   * including commercial applications, and to alter it and redistribute it
   * freely, subject to the following restrictions:
   *
   *    1. The origin of this software must not be misrepresented; you must not
   *    claim that you wrote the original software. If you use this software
   *    in a product, an acknowledgment in the product documentation would be
   *    appreciated but is not required.
   *
   *    2. Altered source versions must be plainly marked as such, and must not
   *    be misrepresented as being the original software.
   *
   *    3. This notice may not be removed or altered from any source
   *    distribution.
   */
  
  
  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */
  var vec3 = {};
  
  /**
   * @class 3x3 Matrix
   * @name mat3
   */
  var mat3 = {};
  
  /**
   * @class 4x4 Matrix
   * @name mat4
   */
  var mat4 = {};
  
  /**
   * @class Quaternion
   * @name quat4
   */
  var quat4 = {};
  
  var MatrixArray = Float32Array;
  
  /*
   * vec3
   */
   
  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */
  vec3.create = function (vec) {
      var dest = new MatrixArray(3);
  
      if (vec) {
          dest[0] = vec[0];
          dest[1] = vec[1];
          dest[2] = vec[2];
      } else {
          dest[0] = dest[1] = dest[2] = 0;
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */
  vec3.set = function (vec, dest) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
  
      return dest;
  };
  
  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.add = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] += vec2[0];
          vec[1] += vec2[1];
          vec[2] += vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] + vec2[0];
      dest[1] = vec[1] + vec2[1];
      dest[2] = vec[2] + vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.subtract = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] -= vec2[0];
          vec[1] -= vec2[1];
          vec[2] -= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] - vec2[0];
      dest[1] = vec[1] - vec2[1];
      dest[2] = vec[2] - vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.multiply = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] *= vec2[0];
          vec[1] *= vec2[1];
          vec[2] *= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] * vec2[0];
      dest[1] = vec[1] * vec2[1];
      dest[2] = vec[2] * vec2[2];
      return dest;
  };
  
  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.negate = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = -vec[0];
      dest[1] = -vec[1];
      dest[2] = -vec[2];
      return dest;
  };
  
  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.scale = function (vec, val, dest) {
      if (!dest || vec === dest) {
          vec[0] *= val;
          vec[1] *= val;
          vec[2] *= val;
          return vec;
      }
  
      dest[0] = vec[0] * val;
      dest[1] = vec[1] * val;
      dest[2] = vec[2] * val;
      return dest;
  };
  
  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.normalize = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      } else if (len === 1) {
          dest[0] = x;
          dest[1] = y;
          dest[2] = z;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.cross = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];
  
      dest[0] = y * z2 - z * y2;
      dest[1] = z * x2 - x * z2;
      dest[2] = x * y2 - y * x2;
      return dest;
  };
  
  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */
  vec3.length = function (vec) {
      var x = vec[0], y = vec[1], z = vec[2];
      return Math.sqrt(x * x + y * y + z * z);
  };
  
  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */
  vec3.dot = function (vec, vec2) {
      return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };
  
  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.direction = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0] - vec2[0],
          y = vec[1] - vec2[1],
          z = vec[2] - vec2[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.lerp = function (vec, vec2, lerp, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
      dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
      dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);
  
      return dest;
  };
  
  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */
  vec3.dist = function (vec, vec2) {
      var x = vec2[0] - vec[0],
          y = vec2[1] - vec[1],
          z = vec2[2] - vec[2];
          
      return Math.sqrt(x*x + y*y + z*z);
  };
  
  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.unproject = function (vec, view, proj, viewport, dest) {
      if (!dest) { dest = vec; }
  
      var m = mat4.create();
      var v = new MatrixArray(4);
      
      v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;
      v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;
      v[2] = 2.0 * vec[2] - 1.0;
      v[3] = 1.0;
      
      mat4.multiply(proj, view, m);
      if(!mat4.inverse(m)) { return null; }
      
      mat4.multiplyVec4(m, v);
      if(v[3] === 0.0) { return null; }
  
      dest[0] = v[0] / v[3];
      dest[1] = v[1] / v[3];
      dest[2] = v[2] / v[3];
      
      return dest;
  };
  
  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */
  vec3.str = function (vec) {
      return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';
  };
  
  /*
   * mat3
   */
  
  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */
  mat3.create = function (mat) {
      var dest = new MatrixArray(9);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */
  mat3.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */
  mat3.identity = function (dest) {
      if (!dest) { dest = mat3.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 1;
      dest[5] = 0;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */
  mat3.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2],
              a12 = mat[5];
  
          mat[1] = mat[3];
          mat[2] = mat[6];
          mat[3] = a01;
          mat[5] = mat[7];
          mat[6] = a02;
          mat[7] = a12;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[3];
      dest[2] = mat[6];
      dest[3] = mat[1];
      dest[4] = mat[4];
      dest[5] = mat[7];
      dest[6] = mat[2];
      dest[7] = mat[5];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat3.toMat4 = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[15] = 1;
      dest[14] = 0;
      dest[13] = 0;
      dest[12] = 0;
  
      dest[11] = 0;
      dest[10] = mat[8];
      dest[9] = mat[7];
      dest[8] = mat[6];
  
      dest[7] = 0;
      dest[6] = mat[5];
      dest[5] = mat[4];
      dest[4] = mat[3];
  
      dest[3] = 0;
      dest[2] = mat[2];
      dest[1] = mat[1];
      dest[0] = mat[0];
  
      return dest;
  };
  
  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */
  mat3.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] +
          ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] +
          ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';
  };
  
  /*
   * mat4
   */
  
  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */
  mat4.create = function (mat) {
      var dest = new MatrixArray(16);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */
  mat4.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */
  mat4.identity = function (dest) {
      if (!dest) { dest = mat4.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 1;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = 1;
      dest[11] = 0;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */
  mat4.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2], a03 = mat[3],
              a12 = mat[6], a13 = mat[7],
              a23 = mat[11];
  
          mat[1] = mat[4];
          mat[2] = mat[8];
          mat[3] = mat[12];
          mat[4] = a01;
          mat[6] = mat[9];
          mat[7] = mat[13];
          mat[8] = a02;
          mat[9] = a12;
          mat[11] = mat[14];
          mat[12] = a03;
          mat[13] = a13;
          mat[14] = a23;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[4];
      dest[2] = mat[8];
      dest[3] = mat[12];
      dest[4] = mat[1];
      dest[5] = mat[5];
      dest[6] = mat[9];
      dest[7] = mat[13];
      dest[8] = mat[2];
      dest[9] = mat[6];
      dest[10] = mat[10];
      dest[11] = mat[14];
      dest[12] = mat[3];
      dest[13] = mat[7];
      dest[14] = mat[11];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */
  mat4.determinant = function (mat) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
  
      return (a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +
              a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +
              a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +
              a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +
              a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +
              a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33);
  };
  
  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */
  mat4.inverse = function (mat, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,
  
          d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06),
          invDet;
  
          // Calculate the determinant
          if (!d) { return null; }
          invDet = 1 / d;
  
      dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */
  mat4.toRotationMat = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */
  mat4.toMat3 = function (mat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[4];
      dest[4] = mat[5];
      dest[5] = mat[6];
      dest[6] = mat[8];
      dest[7] = mat[9];
      dest[8] = mat[10];
  
      return dest;
  };
  
  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */
  mat4.toInverseMat3 = function (mat, dest) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2],
          a10 = mat[4], a11 = mat[5], a12 = mat[6],
          a20 = mat[8], a21 = mat[9], a22 = mat[10],
  
          b01 = a22 * a11 - a12 * a21,
          b11 = -a22 * a10 + a12 * a20,
          b21 = a21 * a10 - a11 * a20,
  
          d = a00 * b01 + a01 * b11 + a02 * b21,
          id;
  
      if (!d) { return null; }
      id = 1 / d;
  
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = b01 * id;
      dest[1] = (-a22 * a01 + a02 * a21) * id;
      dest[2] = (a12 * a01 - a02 * a11) * id;
      dest[3] = b11 * id;
      dest[4] = (a22 * a00 - a02 * a20) * id;
      dest[5] = (-a12 * a00 + a02 * a10) * id;
      dest[6] = b21 * id;
      dest[7] = (-a21 * a00 + a01 * a20) * id;
      dest[8] = (a11 * a00 - a01 * a10) * id;
  
      return dest;
  };
  
  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.multiply = function (mat, mat2, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3],
          b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7],
          b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11],
          b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];
  
      dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
      dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
      dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
      dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
      dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
      dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
      dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
      dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
      dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
      dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
      dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
      dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
      dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
      dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
      dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
      dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  mat4.multiplyVec3 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
  
      return dest;
  };
  
  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */
  mat4.multiplyVec4 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
      dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
  
      return dest;
  };
  
  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.translate = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2],
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23;
  
      if (!dest || mat === dest) {
          mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
          mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
          mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
          mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
          return mat;
      }
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      dest[0] = a00; dest[1] = a01; dest[2] = a02; dest[3] = a03;
      dest[4] = a10; dest[5] = a11; dest[6] = a12; dest[7] = a13;
      dest[8] = a20; dest[9] = a21; dest[10] = a22; dest[11] = a23;
  
      dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
      dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
      dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
      dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
      return dest;
  };
  
  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */
  mat4.scale = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2];
  
      if (!dest || mat === dest) {
          mat[0] *= x;
          mat[1] *= x;
          mat[2] *= x;
          mat[3] *= x;
          mat[4] *= y;
          mat[5] *= y;
          mat[6] *= y;
          mat[7] *= y;
          mat[8] *= z;
          mat[9] *= z;
          mat[10] *= z;
          mat[11] *= z;
          return mat;
      }
  
      dest[0] = mat[0] * x;
      dest[1] = mat[1] * x;
      dest[2] = mat[2] * x;
      dest[3] = mat[3] * x;
      dest[4] = mat[4] * y;
      dest[5] = mat[5] * y;
      dest[6] = mat[6] * y;
      dest[7] = mat[7] * y;
      dest[8] = mat[8] * z;
      dest[9] = mat[9] * z;
      dest[10] = mat[10] * z;
      dest[11] = mat[11] * z;
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around 
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotate = function (mat, angle, axis, dest) {
      var x = axis[0], y = axis[1], z = axis[2],
          len = Math.sqrt(x * x + y * y + z * z),
          s, c, t,
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23,
          b00, b01, b02,
          b10, b11, b12,
          b20, b21, b22;
  
      if (!len) { return null; }
      if (len !== 1) {
          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
      }
  
      s = Math.sin(angle);
      c = Math.cos(angle);
      t = 1 - c;
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      // Construct the elements of the rotation matrix
      b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
      b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
      b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform rotation-specific matrix multiplication
      dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
      dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
      dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
      dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
  
      dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
      dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
      dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
      dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
  
      dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
      dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
      dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
      dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateX = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[4] = a10 * c + a20 * s;
      dest[5] = a11 * c + a21 * s;
      dest[6] = a12 * c + a22 * s;
      dest[7] = a13 * c + a23 * s;
  
      dest[8] = a10 * -s + a20 * c;
      dest[9] = a11 * -s + a21 * c;
      dest[10] = a12 * -s + a22 * c;
      dest[11] = a13 * -s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateY = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a20 * -s;
      dest[1] = a01 * c + a21 * -s;
      dest[2] = a02 * c + a22 * -s;
      dest[3] = a03 * c + a23 * -s;
  
      dest[8] = a00 * s + a20 * c;
      dest[9] = a01 * s + a21 * c;
      dest[10] = a02 * s + a22 * c;
      dest[11] = a03 * s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateZ = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a10 * s;
      dest[1] = a01 * c + a11 * s;
      dest[2] = a02 * c + a12 * s;
      dest[3] = a03 * c + a13 * s;
  
      dest[4] = a00 * -s + a10 * c;
      dest[5] = a01 * -s + a11 * c;
      dest[6] = a02 * -s + a12 * c;
      dest[7] = a03 * -s + a13 * c;
  
      return dest;
  };
  
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = (near * 2) / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = (near * 2) / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = (right + left) / rl;
      dest[9] = (top + bottom) / tb;
      dest[10] = -(far + near) / fn;
      dest[11] = -1;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = -(far * near * 2) / fn;
      dest[15] = 0;
      return dest;
  };
  
  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.perspective = function (fovy, aspect, near, far, dest) {
      var top = near * Math.tan(fovy * Math.PI / 360.0),
          right = top * aspect;
      return mat4.frustum(-right, right, -top, top, near, far, dest);
  };
  
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = 2 / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 2 / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = -2 / fn;
      dest[11] = 0;
      dest[12] = -(left + right) / rl;
      dest[13] = -(top + bottom) / tb;
      dest[14] = -(far + near) / fn;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.lookAt = function (eye, center, up, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
          eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2],
          centerx = center[0],
          centery = center[1],
          centerz = center[2];
  
      if (eyex === centerx && eyey === centery && eyez === centerz) {
          return mat4.identity(dest);
      }
  
      //vec3.direction(eye, center, z);
      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
  
      // normalize (no check needed for 0 because of early return)
      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
  
      //vec3.normalize(vec3.cross(up, z, x));
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
      if (!len) {
          x0 = 0;
          x1 = 0;
          x2 = 0;
      } else {
          len = 1 / len;
          x0 *= len;
          x1 *= len;
          x2 *= len;
      }
  
      //vec3.normalize(vec3.cross(z, x, y));
      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
  
      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
      if (!len) {
          y0 = 0;
          y1 = 0;
          y2 = 0;
      } else {
          len = 1 / len;
          y0 *= len;
          y1 *= len;
          y2 *= len;
      }
  
      dest[0] = x0;
      dest[1] = y0;
      dest[2] = z0;
      dest[3] = 0;
      dest[4] = x1;
      dest[5] = y1;
      dest[6] = z1;
      dest[7] = 0;
      dest[8] = x2;
      dest[9] = y2;
      dest[10] = z2;
      dest[11] = 0;
      dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.fromRotationTranslation = function (quat, vec, dest) {
      if (!dest) { dest = mat4.create(); }
  
      // Quaternion math
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
      dest[12] = vec[0];
      dest[13] = vec[1];
      dest[14] = vec[2];
      dest[15] = 1;
      
      return dest;
  };
  
  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */
  mat4.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] +
          ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] +
          ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] +
          ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
  };
  
  /*
   * quat4
   */
  
  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */
  quat4.create = function (quat) {
      var dest = new MatrixArray(4);
  
      if (quat) {
          dest[0] = quat[0];
          dest[1] = quat[1];
          dest[2] = quat[2];
          dest[3] = quat[3];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */
  quat4.set = function (quat, dest) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
  
      return dest;
  };
  
  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length. 
   * Any existing W component will be ignored. 
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.calculateW = function (quat, dest) {
      var x = quat[0], y = quat[1], z = quat[2];
  
      if (!dest || quat === dest) {
          quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
          return quat;
      }
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return dest;
  };
  
  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */
  quat4.dot = function(quat, quat2){
      return quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];
  };
  
  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.inverse = function(quat, dest) {
      var q0 = quat[0], q1 = quat[1], q2 = quat[2], q3 = quat[3],
          dot = q0*q0 + q1*q1 + q2*q2 + q3*q3,
          invDot = dot ? 1.0/dot : 0;
      
      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
      
      if(!dest || quat === dest) {
          quat[0] *= -invDot;
          quat[1] *= -invDot;
          quat[2] *= -invDot;
          quat[3] *= invDot;
          return quat;
      }
      dest[0] = -quat[0]*invDot;
      dest[1] = -quat[1]*invDot;
      dest[2] = -quat[2]*invDot;
      dest[3] = quat[3]*invDot;
      return dest;
  };
  
  
  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.conjugate = function (quat, dest) {
      if (!dest || quat === dest) {
          quat[0] *= -1;
          quat[1] *= -1;
          quat[2] *= -1;
          return quat;
      }
      dest[0] = -quat[0];
      dest[1] = -quat[1];
      dest[2] = -quat[2];
      dest[3] = quat[3];
      return dest;
  };
  
  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */
  quat4.length = function (quat) {
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  
  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.normalize = function (quat, dest) {
      if (!dest) { dest = quat; }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          len = Math.sqrt(x * x + y * y + z * z + w * w);
      if (len === 0) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          dest[3] = 0;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      dest[3] = w * len;
  
      return dest;
  };
  
  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.add = function (quat, quat2, dest) {
      if(!dest || quat === dest) {
          quat[0] += quat2[0];
          quat[1] += quat2[1];
          quat[2] += quat2[2];
          quat[3] += quat2[3];
          return quat;
      }
      dest[0] = quat[0]+quat2[0];
      dest[1] = quat[1]+quat2[1];
      dest[2] = quat[2]+quat2[2];
      dest[3] = quat[3]+quat2[3];
      return dest;
  };
  
  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.multiply = function (quat, quat2, dest) {
      if (!dest) { dest = quat; }
  
      var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3],
          qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];
  
      dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */
  quat4.multiplyVec3 = function (quat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3],
  
          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;
  
      // calculate result * inverse quat
      dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  
      return dest;
  };
  
  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.scale = function (quat, val, dest) {
      if(!dest || quat === dest) {
          quat[0] *= val;
          quat[1] *= val;
          quat[2] *= val;
          quat[3] *= val;
          return quat;
      }
      dest[0] = quat[0]*val;
      dest[1] = quat[1]*val;
      dest[2] = quat[2]*val;
      dest[3] = quat[3]*val;
      return dest;
  };
  
  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */
  quat4.toMat3 = function (quat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
  
      dest[3] = xy - wz;
      dest[4] = 1 - (xx + zz);
      dest[5] = yz + wx;
  
      dest[6] = xz + wy;
      dest[7] = yz - wx;
      dest[8] = 1 - (xx + yy);
  
      return dest;
  };
  
  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  quat4.toMat4 = function (quat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
  
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
  
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
  
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.slerp = function (quat, quat2, slerp, dest) {
      if (!dest) { dest = quat; }
  
      var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],
          halfTheta,
          sinHalfTheta,
          ratioA,
          ratioB;
  
      if (Math.abs(cosHalfTheta) >= 1.0) {
          if (dest !== quat) {
              dest[0] = quat[0];
              dest[1] = quat[1];
              dest[2] = quat[2];
              dest[3] = quat[3];
          }
          return dest;
      }
  
      halfTheta = Math.acos(cosHalfTheta);
      sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
  
      if (Math.abs(sinHalfTheta) < 0.001) {
          dest[0] = (quat[0] * 0.5 + quat2[0] * 0.5);
          dest[1] = (quat[1] * 0.5 + quat2[1] * 0.5);
          dest[2] = (quat[2] * 0.5 + quat2[2] * 0.5);
          dest[3] = (quat[3] * 0.5 + quat2[3] * 0.5);
          return dest;
      }
  
      ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
      ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;
  
      dest[0] = (quat[0] * ratioA + quat2[0] * ratioB);
      dest[1] = (quat[1] * ratioA + quat2[1] * ratioB);
      dest[2] = (quat[2] * ratioA + quat2[2] * ratioB);
      dest[3] = (quat[3] * ratioA + quat2[3] * ratioB);
  
      return dest;
  };
  
  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */
  quat4.str = function (quat) {
      return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';
  };
  
  
  return {
    vec3: vec3,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4
  };
  
  })();
  
  ;
  var GLImmediateSetup={};function _glLoadIdentity() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _glVertex3f(x, y, z) {
      assert(GLImmediate.mode >= 0); // must be in begin/end
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = x;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = y;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = z || 0;
      assert(GLImmediate.vertexCounter << 2 < GL.MAX_TEMP_BUFFER_SIZE);
      GLImmediate.addRendererComponent(GLImmediate.VERTEX, 3, GLctx.FLOAT);
    }

  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }

  function _glEnableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        Module.printErr('WARNING: unhandled clientstate: ' + cap);
        return;
      }
      if (!GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = true;
        GLImmediate.totalEnabledClientAttributes++;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        // In GL_FFP_ONLY mode, attributes are bound to the same index in each FFP emulation shader, so we can immediately apply the change here.
        GL.enableVertexAttribArray(attrib);
        if (GLEmulation.currentVao) GLEmulation.currentVao.enabledClientStates[cap] = 1;
        GLImmediate.modifiedClientAttributes = true;
      }
    }


  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  function _glClientActiveTexture(texture) {
      GLImmediate.clientActiveTexture = texture - 0x84C0; // GL_TEXTURE0
    }


  var _cos=Math_cos;

  var _fseeko=_fseek;

  function __ZNSt9exceptionD2Ev() {}

  function _glMatrixMode(mode) {
      if (mode == 0x1700 /* GL_MODELVIEW */) {
        GLImmediate.currentMatrix = 0/*m*/;
      } else if (mode == 0x1701 /* GL_PROJECTION */) {
        GLImmediate.currentMatrix = 1/*p*/;
      } else if (mode == 0x1702) { // GL_TEXTURE
        GLImmediate.useTextureMatrix = true;
        GLImmediate.currentMatrix = 2/*t*/ + GLImmediate.clientActiveTexture;
      } else {
        throw "Wrong mode " + mode + " passed to glMatrixMode";
      }
    }

  function _clFinish(command_queue) {
  
  
      try {
  
        CL.cl_objects[command_queue].finish();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function ___cxa_get_exception_ptr(ptr) {
      return ptr;
    }

  function _clGetEventProfilingInfo(event,param_name,param_value_size,param_value,param_value_size_ret) {
  
  
      try { 
  
        var _info = CL.cl_objects[event].getProfilingInfo(param_name);
  
        if (param_value != 0) (tempI64 = [_info>>>0,((+(Math_abs(_info))) >= 1.0 ? (_info > 0.0 ? ((Math_min((+(Math_floor((_info)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((_info - +(((~~(_info)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((param_value)>>2)]=tempI64[0],HEAP32[(((param_value)+(4))>>2)]=tempI64[1]);
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=8;
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) (tempI64 = [0>>>0,(tempDouble=0,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((param_value)>>2)]=tempI64[0],HEAP32[(((param_value)+(4))>>2)]=tempI64[1]);
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=8;
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  
   
  Module["_rand_r"] = _rand_r;
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC); 
  Module["_rand"] = _rand;

  function _glPopMatrix() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrix[GLImmediate.currentMatrix] = GLImmediate.matrixStack[GLImmediate.currentMatrix].pop();
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function _clReleaseKernel(kernel) {
  
      // If is an object retain don't release it until retains > 0...
      if (kernel in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[kernel] - 1;
  
        CL.cl_objects_retains[kernel] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
  
      try {
  
        CL.cl_objects[kernel].release();
          
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      delete CL.cl_objects[kernel];
  
  
      return webcl.SUCCESS;
    }

  function _glutSwapBuffers() {}

  var _emscripten_landingpad=true;

  function _glBegin(mode) {
      // Push the old state:
      GLImmediate.enabledClientAttributes_preBegin = GLImmediate.enabledClientAttributes;
      GLImmediate.enabledClientAttributes = [];
  
      GLImmediate.clientAttributes_preBegin = GLImmediate.clientAttributes;
      GLImmediate.clientAttributes = []
      for (var i = 0; i < GLImmediate.clientAttributes_preBegin.length; i++) {
        GLImmediate.clientAttributes.push({});
      }
  
      GLImmediate.mode = mode;
      GLImmediate.vertexCounter = 0;
      var components = GLImmediate.rendererComponents = [];
      for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
        components[i] = 0;
      }
      GLImmediate.rendererComponentPointer = 0;
      GLImmediate.vertexData = GLImmediate.tempData;
    }

  
  function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _glVertexPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.VERTEX, size, type, stride, pointer);
      if (GL.currArrayBuffer) {
        GLctx.vertexAttribPointer(GLImmediate.VERTEX, size, type, false, stride, pointer);
      }
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _sqrtf=Math_sqrt;

  
  
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return ((asm["setTempRet0"](0),0)|0);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return ((asm["setTempRet0"](((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)),((HEAP32[((tempDoublePtr)>>2)])|0))|0);
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }


  var _emscripten_postinvoke=true;

  var _copysignl=_copysign;

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function _clGetDeviceInfo(device,param_name,param_value_size,param_value,param_value_size_ret) {
  
    
      var  _info = null;
  
      try { 
  
          var _object = CL.cl_objects[device];
  
        switch (param_name) {
          case 0x1001 /*CL_DEVICE_VENDOR_ID*/ :
            _info = parseInt(CL.udid(_object));
          break;
          case 0x102B /*CL_DEVICE_NAME*/ :
            var _type = _object.getInfo(webcl.DEVICE_TYPE);
            switch (_type) {
              case webcl.DEVICE_TYPE_CPU:
                _info = "WEBCL_DEVICE_CPU";
              break;
              case webcl.DEVICE_TYPE_GPU:
                _info = "WEBCL_DEVICE_GPU";
              break;
              case webcl.DEVICE_TYPE_ACCELERATOR:
                _info = "WEBCL_DEVICE_ACCELERATOR";
              break;
              case webcl.DEVICE_TYPE_DEFAULT:
                _info = "WEBCL_DEVICE_DEFAULT";
              break;
            }
          break;
          case 0x102C /*CL_DEVICE_VENDOR*/ :
            _info = "WEBCL_DEVICE_VENDOR";
          break;
          case 0x100B /*CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE*/ :
            _info = 0;
          break;
          case 0x1030 /*CL_DEVICE_EXTENSIONS*/ :
            _info = webcl.getSupportedExtensions().join(' ') ; 
          break;
          case 0x101A /*CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE*/ :
            _info = _object.getInfo(webcl.DEVICE_MEM_BASE_ADDR_ALIGN) >> 3;
          break;
          default:
            _info = _object.getInfo(param_name);
        }  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
      
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
          
      if(typeof(_info) == "number") {
  
        if (param_value_size == 8) {
          if (param_value != 0) (tempI64 = [_info>>>0,((+(Math_abs(_info))) >= 1.0 ? (_info > 0.0 ? ((Math_min((+(Math_floor((_info)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((_info - +(((~~(_info)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((param_value)>>2)]=tempI64[0],HEAP32[(((param_value)+(4))>>2)]=tempI64[1]);
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=8;
        } else {
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
        } 
        
      } else if(typeof(_info) == "boolean") {
  
        if (param_value != 0) (_info == true) ? HEAP32[((param_value)>>2)]=1 : HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
  
        if (param_name != webcl.DEVICE_PROFILE) _info += " ";
        if (param_value != 0) writeStringToMemory(_info, param_value);
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
  
      } else if(typeof(_info) == "object") {
        
        if (_info instanceof Int32Array) {
         
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_info[i];
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
        
        } else if (_info instanceof WebCLPlatform) {
       
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
        
        } else if (_info == null) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        } else {
          return webcl.INVALID_VALUE;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _clEnqueueNDRangeKernel(command_queue,kernel,work_dim,global_work_offset,global_work_size,local_work_size,num_events_in_wait_list,event_wait_list,event) {
  
      var _event_wait_list;
      var _local_work_size;
  
      // \todo need to be remove when webkit will be support null
      /**** **** **** **** **** **** **** ****/
      if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
        _event_wait_list = num_events_in_wait_list > 0 ? [] : null;
        _local_work_size = (local_work_size != 0) ? [] : null;
      } else {
        _event_wait_list = [];
        _local_work_size = [];
      }
  
  
      var _global_work_offset = [];
      var _global_work_size = [];
      
  
      for (var i = 0; i < work_dim; i++) {
        _global_work_size.push(HEAP32[(((global_work_size)+(i*4))>>2)]);
  
        if (global_work_offset != 0)
          _global_work_offset.push(HEAP32[(((global_work_offset)+(i*4))>>2)]);
      
        if (local_work_size != 0)
          _local_work_size.push(HEAP32[(((local_work_size)+(i*4))>>2)]);
      }
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
         
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
             
      try { 
        
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list,_event);  
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list);  
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;    
  
    }

  function _clReleaseProgram(program) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (program in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[program] - 1;
  
        CL.cl_objects_retains[program] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[program].release();
          delete CL.cl_objects[program]; 
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }


  function _glutInitWindowSize(width, height) {
      Browser.setCanvasSize( GLUT.initWindowWidth = width,
                             GLUT.initWindowHeight = height );
    }

  function _glutSpecialFunc(func) {
      GLUT.specialFunc = func;
    }

  function _clSetKernelArg(kernel,arg_index,arg_size,arg_value) {
      if (CL.cl_objects[kernel].sig.length < arg_index) {
        return webcl.INVALID_KERNEL;          
      }
  
      var _kernel = CL.cl_objects[kernel];
  
      var _posarg = arg_index;
  
      var _sig = _kernel.sig[_posarg];
      
      try {
  
        // LOCAL ARG
        if (_sig == webcl.LOCAL) {
  
          var _array = new Uint32Array([arg_size]);
  
          _kernel.setArg(_posarg,_array);
  
  
        } else {
  
          var _value = HEAP32[((arg_value)>>2)];
  
          // WEBCL OBJECT ARG
          if (_value in CL.cl_objects) {
  
            _kernel.setArg(_posarg,CL.cl_objects[_value]);
            
            if (! (CL.cl_objects[_value] instanceof WebCLSampler)) {
  
            }
            
          } else {
  
            var _array = CL.getReferencePointerToArray(arg_value,arg_size,[[_sig,1]]);
           
            _kernel.setArg(_posarg,_array);
  
          }
        }
      } catch (e) {
  
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }


  function _glutCreateWindow(name) {
      var contextAttributes = {
        antialias: ((GLUT.initDisplayMode & 0x0080 /*GLUT_MULTISAMPLE*/) != 0),
        depth: ((GLUT.initDisplayMode & 0x0010 /*GLUT_DEPTH*/) != 0),
        stencil: ((GLUT.initDisplayMode & 0x0020 /*GLUT_STENCIL*/) != 0)
      };
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return Module.ctx ? 1 /* a new GLUT window ID for the created context */ : 0 /* failure */;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _clEnqueueReadBuffer(command_queue,buffer,blocking_read,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
   
      var _event_wait_list = [];
      var _host_ptr = CL.getReferencePointerToArray(ptr,cb,CL.cl_pn_type);
    
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
  
      try {
  
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],blocking_read,offset,cb,_host_ptr,_event_wait_list,_event);
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],blocking_read,offset,cb,_host_ptr,_event_wait_list);
        } 
      } catch (e) {
        var _error = CL.catchError(e);
          
  
        return _error;
      }
  
      return webcl.SUCCESS;    
    }

  function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }

  
  
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return ((asm["setTempRet0"]((tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)),ret>>>0)|0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }

  function _pthread_mutex_unlock() {}

  function _clWaitForEvents(num_events,event_list) {
  
      var _events = [];
  
      for (var i = 0; i < num_events; i++) {
        var _event = HEAP32[(((event_list)+(i*4))>>2)];
        
        _events.push(CL.cl_objects[_event]) 
      }
  
      try {
  
        webcl.waitForEvents(_events);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }


  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _llvm_lifetime_start() {}

  function _clGetProgramBuildInfo(program,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      var _info = null;
  
      try { 
  
  
        _info = CL.cl_objects[program].getBuildInfo(CL.cl_objects[device], param_name);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
      
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function ___cxa_guard_release() {}


  function _glTexCoordPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture, size, type, stride, pointer);
      if (GL.currArrayBuffer) {
        var loc = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture;
        GLctx.vertexAttribPointer(loc, size, type, false, stride, pointer);
      }
    }

  function _uselocale(locale) {
      return 0;
    }

  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }


  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  var _ftello=_ftell;

  function _glEnd() {
      GLImmediate.prepareClientAttributes(GLImmediate.rendererComponents[GLImmediate.VERTEX], true);
      GLImmediate.firstVertex = 0;
      GLImmediate.lastVertex = GLImmediate.vertexCounter / (GLImmediate.stride >> 2);
      GLImmediate.flush();
      GLImmediate.disableBeginEndClientAttributes();
      GLImmediate.mode = -1;
  
      // Pop the old state:
      GLImmediate.enabledClientAttributes = GLImmediate.enabledClientAttributes_preBegin;
      GLImmediate.clientAttributes = GLImmediate.clientAttributes_preBegin;
      GLImmediate.currentRenderer = null; // The set of active client attributes changed, we must re-lookup the renderer to use.
      GLImmediate.modifiedClientAttributes = true;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }


  function _glColor4f(r, g, b, a) {
      r = Math.max(Math.min(r, 1), 0);
      g = Math.max(Math.min(g, 1), 0);
      b = Math.max(Math.min(b, 1), 0);
      a = Math.max(Math.min(a, 1), 0);
  
      // TODO: make ub the default, not f, save a few mathops
      if (GLImmediate.mode >= 0) {
        var start = GLImmediate.vertexCounter << 2;
        GLImmediate.vertexDataU8[start + 0] = r * 255;
        GLImmediate.vertexDataU8[start + 1] = g * 255;
        GLImmediate.vertexDataU8[start + 2] = b * 255;
        GLImmediate.vertexDataU8[start + 3] = a * 255;
        GLImmediate.vertexCounter++;
        GLImmediate.addRendererComponent(GLImmediate.COLOR, 4, GLctx.UNSIGNED_BYTE);
      } else {
        GLImmediate.clientColor[0] = r;
        GLImmediate.clientColor[1] = g;
        GLImmediate.clientColor[2] = b;
        GLImmediate.clientColor[3] = a;
        GLctx.vertexAttrib4fv(GLImmediate.COLOR, GLImmediate.clientColor);
      }
    }


  function _clCreateCommandQueue(context,device,properties_1,properties_2,cl_errcode_ret) {
      // Assume the properties is i32 
      assert(properties_2 == 0, 'Invalid properties i64');
  
  
      var _id = null;
      var _command = null;
  
      // Context must be created
  
      // Context must be created
  
      try { 
  
  
        _command = CL.cl_objects[context].createCommandQueue(CL.cl_objects[device],properties_1);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_command);
  
  
      return _id;
    }


  var _fabs=Math_abs;

  function _clBuildProgram(program,num_devices,device_list,options,pfn_notify,user_data) {
  
      try {
  
        var _devices = [];
        var _option = (options == 0) ? "" : Pointer_stringify(options); 
  
        if (device_list != 0 && num_devices > 0 ) {
          for (var i = 0; i < num_devices ; i++) {
            var _device = HEAP32[(((device_list)+(i*4))>>2)]
              _devices.push(CL.cl_objects[_device]);
          }
        }
  
        // If device_list is NULL value, the program executable is built for all devices associated with program.
        if (_devices.length == 0) {
          _devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_DEVICES); 
        }
  
        var _callback = null
        if (pfn_notify != 0) {
          /**
           * Description
           * @return 
           */
          _callback = function() { 
            console.info("\nCall ( clBuildProgram ) callback function : FUNCTION_TABLE["+pfn_notify+"]("+program+", "+user_data+")");
            FUNCTION_TABLE[pfn_notify](program, user_data) 
          };
        }
  
        
        CL.cl_objects[program].build(_devices,_option,_callback);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;      
  
    }

  function _clReleaseEvent(event) {
  
      // If is an object retain don't release it until retains > 0...
      if (event in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[event] - 1;
  
        CL.cl_objects_retains[event] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
  
      try {
  
        CL.cl_objects[event].release();
          
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      delete CL.cl_objects[event];
  
  
      return webcl.SUCCESS;
    }

  var _getc=_fgetc;


  function _clRetainMemObject(memobj) {
  
  
      if (!(memobj in CL.cl_objects_retains)) {
        CL.cl_objects_retains[memobj] = 1;
      } else {
        CL.cl_objects_retains[memobj] = CL.cl_objects_retains[memobj] + 1;
      }
  
  
      return webcl.SUCCESS;
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  var _sin=Math_sin;

  var _fmodl=_fmod;

  function _clCreateKernel(program,kernel_name,cl_errcode_ret) {
      
  
      var _id = null;
      var _kernel = null;
      var _name = (kernel_name == 0) ? "" : Pointer_stringify(kernel_name);
  
      // program must be created
      try {
      
  
        _kernel = CL.cl_objects[program].createKernel(_name);
        
        Object.defineProperty(_kernel, "name", { value : _name,writable : false });
        Object.defineProperty(_kernel, "sig", { value : CL.cl_kernels_sig[_name],writable : false });
  
  
        
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_kernel);
  
  
      return _id;
    }

  
  function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _clCreateProgramWithSource(context,count,strings,lengths,cl_errcode_ret) {
      
  
      var _id = null;
      var _program = null;
  
      // Context must be created
  
      try {
        
        var _string = "";
  
        for (var i = 0; i < count; i++) {
          if (lengths) {
            var _len = HEAP32[(((lengths)+(i*4))>>2)];
            if (_len < 0) {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);   
            } else {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)], _len);   
            }
          } else {
            _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]); 
          }
        }
  
        CL.parseKernel(_string);
  
  
        _program = CL.cl_objects[context].createProgram(_string);
    
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_program);
  
  
      return _id;
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _clRetainEvent(event) {
  
      if (!(event in CL.cl_objects_retains)) {
        CL.cl_objects_retains[event] = 1;
      } else {
        CL.cl_objects_retains[event] = CL.cl_objects_retains[event] + 1;
      }
         
      return webcl.SUCCESS;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  var _llvm_memset_p0i8_i32=_memset;

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glPushMatrix() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixStack[GLImmediate.currentMatrix].push(
          Array.prototype.slice.call(GLImmediate.matrix[GLImmediate.currentMatrix]));
    }

  function _glutReshapeFunc(func) {
      GLUT.reshapeFunc = func;
    }

  function _glOrtho(left, right, bottom, top_, nearVal, farVal) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.multiply(GLImmediate.matrix[GLImmediate.currentMatrix],
          GLImmediate.matrixLib.mat4.ortho(left, right, bottom, top_, nearVal, farVal));
    }

  function _glutInitDisplayMode(mode) {
      GLUT.initDisplayMode = mode;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _glutKeyboardFunc(func) {
      GLUT.keyboardFunc = func;
    }

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  function __ZTVSt9exception() {
  Module['printErr']('missing function: _ZTVSt9exception'); abort(-1);
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);

  function _glutBitmap8By13() {
  Module['printErr']('missing function: glutBitmap8By13'); abort(-1);
  }

  function _glutBitmap9By15() {
  Module['printErr']('missing function: glutBitmap9By15'); abort(-1);
  }




FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
var GLctx; GL.init()
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
GLImmediate.setupFuncs(); Browser.moduleContextCreatedCallbacks.push(function() { GLImmediate.init() });
GLEmulation.init();
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_d(x) { Module["printErr"]("Invalid function pointer called with signature 'd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vdddddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vddd(index,a1,a2,a3) {
  try {
    Module["dynCall_vddd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_d(index) {
  try {
    return Module["dynCall_d"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___rand_seed=env.___rand_seed|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var __ZTVSt9exception=env.__ZTVSt9exception|0;
  var ___dso_handle=env.___dso_handle|0;
  var _glutBitmap8By13=env._glutBitmap8By13|0;
  var _glutBitmap9By15=env._glutBitmap9By15|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vddd=env.nullFunc_vddd;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_d=env.nullFunc_d;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_vdddddd=env.nullFunc_vdddddd;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vddd=env.invoke_vddd;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_di=env.invoke_di;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_dii=env.invoke_dii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_d=env.invoke_d;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_vdddddd=env.invoke_vdddddd;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _fabs=env._fabs;
  var _clReleaseProgram=env._clReleaseProgram;
  var _clGetEventProfilingInfo=env._clGetEventProfilingInfo;
  var _vsscanf=env._vsscanf;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __reallyNegative=env.__reallyNegative;
  var _clEnqueueNDRangeKernel=env._clEnqueueNDRangeKernel;
  var _clCreateContext=env._clCreateContext;
  var _glDeleteProgram=env._glDeleteProgram;
  var _clCreateProgramWithSource=env._clCreateProgramWithSource;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _glBindBuffer=env._glBindBuffer;
  var __addDays=env.__addDays;
  var _fsync=env._fsync;
  var _sbrk=env._sbrk;
  var _glBlendFunc=env._glBlendFunc;
  var _glutReshapeWindow=env._glutReshapeWindow;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _glCreateShader=env._glCreateShader;
  var _glutSwapBuffers=env._glutSwapBuffers;
  var __parseInt64=env.__parseInt64;
  var _close=env._close;
  var ___cxa_throw=env.___cxa_throw;
  var _cos=env._cos;
  var _glTexCoord2i=env._glTexCoord2i;
  var _fileno=env._fileno;
  var _fread=env._fread;
  var _glLoadIdentity=env._glLoadIdentity;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _ftell=env._ftell;
  var _glutSpecialFunc=env._glutSpecialFunc;
  var _glShaderSource=env._glShaderSource;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var _strtoll_l=env._strtoll_l;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var _glVertexPointer=env._glVertexPointer;
  var _glOrtho=env._glOrtho;
  var _glGetBooleanv=env._glGetBooleanv;
  var _glutPostRedisplay=env._glutPostRedisplay;
  var _llvm_lifetime_end=env._llvm_lifetime_end;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glHint=env._glHint;
  var _uselocale=env._uselocale;
  var _clReleaseKernel=env._clReleaseKernel;
  var _glutDisplayFunc=env._glutDisplayFunc;
  var _glBegin=env._glBegin;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _isxdigit_l=env._isxdigit_l;
  var _clGetProgramBuildInfo=env._clGetProgramBuildInfo;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _glutInitDisplayMode=env._glutInitDisplayMode;
  var _strtol=env._strtol;
  var _glViewport=env._glViewport;
  var _sin=env._sin;
  var _fscanf=env._fscanf;
  var ___setErrNo=env.___setErrNo;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _newlocale=env._newlocale;
  var _isdigit_l=env._isdigit_l;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _freelocale=env._freelocale;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _glutReshapeFunc=env._glutReshapeFunc;
  var ___cxa_get_exception_ptr=env.___cxa_get_exception_ptr;
  var _glEnable=env._glEnable;
  var _printf=env._printf;
  var _glGenTextures=env._glGenTextures;
  var _clReleaseCommandQueue=env._clReleaseCommandQueue;
  var _glGetIntegerv=env._glGetIntegerv;
  var _glGetString=env._glGetString;
  var _glutMainLoop=env._glutMainLoop;
  var _vasprintf=env._vasprintf;
  var _glPushMatrix=env._glPushMatrix;
  var _glAttachShader=env._glAttachShader;
  var _sprintf=env._sprintf;
  var _vsnprintf=env._vsnprintf;
  var _strtoull_l=env._strtoull_l;
  var _read=env._read;
  var _clSetKernelArg=env._clSetKernelArg;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _glDetachShader=env._glDetachShader;
  var _gettimeofday=env._gettimeofday;
  var _glutInitWindowPosition=env._glutInitWindowPosition;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var _glVertex2i=env._glVertex2i;
  var _clRetainEvent=env._clRetainEvent;
  var _clReleaseEvent=env._clReleaseEvent;
  var _glColor4f=env._glColor4f;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _atoi=env._atoi;
  var _strtoll=env._strtoll;
  var _glEnableClientState=env._glEnableClientState;
  var _pwrite=env._pwrite;
  var _open=env._open;
  var _glClearColor=env._glClearColor;
  var _glIsEnabled=env._glIsEnabled;
  var _glBindTexture=env._glBindTexture;
  var _snprintf=env._snprintf;
  var _clReleaseMemObject=env._clReleaseMemObject;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _clGetPlatformIDs=env._clGetPlatformIDs;
  var _strtoull=env._strtoull;
  var _glutIdleFunc=env._glutIdleFunc;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _clFinish=env._clFinish;
  var _fseek=env._fseek;
  var _send=env._send;
  var _clGetDeviceIDs=env._clGetDeviceIDs;
  var _fclose=env._fclose;
  var __parseInt=env.__parseInt;
  var _sqrtf=env._sqrtf;
  var _glActiveTexture=env._glActiveTexture;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _glGetFloatv=env._glGetFloatv;
  var _clGetKernelWorkGroupInfo=env._clGetKernelWorkGroupInfo;
  var _clCreateBuffer=env._clCreateBuffer;
  var _glTexCoordPointer=env._glTexCoordPointer;
  var _recv=env._recv;
  var _copysign=env._copysign;
  var _glCompileShader=env._glCompileShader;
  var _sysconf=env._sysconf;
  var __getFloat=env.__getFloat;
  var _abort=env._abort;
  var _clBuildProgram=env._clBuildProgram;
  var _glTexImage2D=env._glTexImage2D;
  var _isspace=env._isspace;
  var _fopen=env._fopen;
  var _clCreateKernel=env._clCreateKernel;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _llvm_lifetime_start=env._llvm_lifetime_start;
  var _clReleaseContext=env._clReleaseContext;
  var _glutKeyboardFunc=env._glutKeyboardFunc;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _ungetc=env._ungetc;
  var _glTexParameteri=env._glTexParameteri;
  var _clEnqueueWriteBuffer=env._clEnqueueWriteBuffer;
  var _clGetDeviceInfo=env._clGetDeviceInfo;
  var _strftime_l=env._strftime_l;
  var _fprintf=env._fprintf;
  var _sscanf=env._sscanf;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var _catgets=env._catgets;
  var _glutInitWindowSize=env._glutInitWindowSize;
  var _glColor3f=env._glColor3f;
  var _asprintf=env._asprintf;
  var _glPopMatrix=env._glPopMatrix;
  var _glMatrixMode=env._glMatrixMode;
  var __exit=env.__exit;
  var _clWaitForEvents=env._clWaitForEvents;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var __arraySum=env.__arraySum;
  var _emscripten_glColor4f=env._emscripten_glColor4f;
  var _glVertex3f=env._glVertex3f;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _glEnd=env._glEnd;
  var _glLinkProgram=env._glLinkProgram;
  var _clCreateCommandQueue=env._clCreateCommandQueue;
  var _fflush=env._fflush;
  var _clEnqueueReadBuffer=env._clEnqueueReadBuffer;
  var ___errno_location=env.___errno_location;
  var _fgetc=env._fgetc;
  var _isxdigit=env._isxdigit;
  var __scanString=env.__scanString;
  var _glutCreateWindow=env._glutCreateWindow;
  var _glClientActiveTexture=env._glClientActiveTexture;
  var _glutInit=env._glutInit;
  var _glDisable=env._glDisable;
  var _isdigit=env._isdigit;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _clRetainMemObject=env._clRetainMemObject;
  var _strerror_r=env._strerror_r;
  var _glTexSubImage2D=env._glTexSubImage2D;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 7)&-8;
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
  HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];
  HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];
  HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];
  HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}

function setTempRet1(value) {
  value = value|0;
  tempRet1 = value;
}

function setTempRet2(value) {
  value = value|0;
  tempRet2 = value;
}

function setTempRet3(value) {
  value = value|0;
  tempRet3 = value;
}

function setTempRet4(value) {
  value = value|0;
  tempRet4 = value;
}

function setTempRet5(value) {
  value = value|0;
  tempRet5 = value;
}

function setTempRet6(value) {
  value = value|0;
  tempRet6 = value;
}

function setTempRet7(value) {
  value = value|0;
  tempRet7 = value;
}

function setTempRet8(value) {
  value = value|0;
  tempRet8 = value;
}

function setTempRet9(value) {
  value = value|0;
  tempRet9 = value;
}

function ___cxx_global_var_init() {
 var $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep_int = 0, $gep_int4 = 0, label = 0, sp = 0, u$1 = 0;
 sp = STACKTOP;
 $expanded = 8;
 __ZN2cl7NDRangeC1Ev($expanded);
 $expanded1 = 129;
 $gep_int = 8;
 $expanded2 = $gep_int;
 $gep_int4 = ___dso_handle;
 $expanded3 = $gep_int4;
 u$1 = _atexit($expanded1|0,$expanded2|0,$expanded3|0)|0;
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl7NDRangeC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl7NDRangeD2Ev($2);
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $$pre_trunc9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0;
 var $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $gep = 0, $gep40 = 0, $gep42 = 0, $gep46 = 0, $gep48 = 0;
 var $gep50 = 0, $gep_int = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int55 = 0, $gep_int56 = 0, $height = 0, $width = 0;
 var label = 0, sp = 0, u$10 = 0, u$138 = 0, u$154 = 0, u$179 = 0, u$22 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 312|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $30 = sp + 248|0;
 
 $32 = sp + 272|0;
 
 $err = sp + 296|0;
 $25 = 0;
 $26 = $argc;
 $27 = $argv;
 __THREW__ = 0;
 $expanded = 3824;
 $gep_int = 64;
 $expanded10 = $gep_int;
 $34 = invoke_iii(17,$expanded|0,$expanded10|0)|0;
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 
 L1: do {
  if ($36) {
   label = 14;
  } else {
   $37 = $27;
   $gep_int34 = $37;
   $38 = $gep_int34;
   $39 = HEAP32[$38>>2]|0;
   __THREW__ = 0;
   $40 = invoke_iii(17,$34|0,$39|0)|0;
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   
   if ($42) {
    label = 14;
    break;
   }
   $23 = $40;
   $24 = 67;
   $43 = $23;
   $44 = $24;
   __THREW__ = 0;
   u$10 = invoke_ii($44|0,$43|0)|0;
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   
   if ($46) {
    label = 14;
    break;
   }
   
   __THREW__ = 0;
   $expanded11 = 3824;
   $gep_int35 = 64;
   $expanded12 = $gep_int35;
   $47 = invoke_iii(17,$expanded11|0,$expanded12|0)|0;
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   
   if ($49) {
    label = 14;
    break;
   }
   $50 = $27;
   $gep_int36 = $50;
   $51 = $gep_int36;
   $52 = HEAP32[$51>>2]|0;
   __THREW__ = 0;
   $53 = invoke_iii(17,$47|0,$52|0)|0;
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   
   if ($55) {
    label = 14;
    break;
   }
   __THREW__ = 0;
   $gep_int37 = 72;
   $expanded13 = $gep_int37;
   $56 = invoke_iii(17,$53|0,$expanded13|0)|0;
   $57 = __THREW__; __THREW__ = 0;
   $58 = $57&1;
   
   if ($58) {
    label = 14;
    break;
   }
   $21 = $56;
   $22 = 67;
   $59 = $21;
   $60 = $22;
   __THREW__ = 0;
   u$22 = invoke_ii($60|0,$59|0)|0;
   $61 = __THREW__; __THREW__ = 0;
   $62 = $61&1;
   
   if ($62) {
    label = 14;
    break;
   }
   
   $63 = $26;
   $64 = ($63|0)==(7);
   
   do {
    if ($64) {
     $65 = $27;
     $gep_int38 = $65;
     $gep = (($gep_int38) + 16)|0;
     $66 = $gep;
     $67 = HEAP32[$66>>2]|0;
     __THREW__ = 0;
     $68 = invoke_ii(68,$67|0)|0;
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     
     if ($70) {
      label = 14;
      break L1;
     }
     $width = $68;
     $71 = $27;
     $gep_int39 = $71;
     $gep40 = (($gep_int39) + 20)|0;
     $72 = $gep40;
     $73 = HEAP32[$72>>2]|0;
     __THREW__ = 0;
     $74 = invoke_ii(68,$73|0)|0;
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     
     if ($76) {
      label = 14;
      break L1;
     }
     $height = $74;
     
    } else {
     $79 = $26;
     $80 = ($79|0)==(1);
     
     if ($80) {
      $width = 512;
      $height = 512;
      
      
      break;
     } else {
      __THREW__ = 0;
      invoke_vi(130,-1);
      $81 = __THREW__; __THREW__ = 0;
      $82 = $81&1;
      
      if ($82) {
       label = 14;
       break L1;
      }
      // unreachable
     }
    }
   } while(0);
   $83 = $26;
   $84 = $27;
   $85 = $width;
   $86 = $height;
   __THREW__ = 0;
   invoke_viiii(9,$83|0,$84|0,$85|0,$86|0);
   $87 = __THREW__; __THREW__ = 0;
   $88 = $87&1;
   
   if ($88) {
    label = 14;
    break;
   }
   $89 = $26;
   $90 = ($89|0)==(7);
   
   L23: do {
    if ($90) {
     __THREW__ = 0;
     $91 = invoke_ii(70,624)|0;
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     
     if ($93) {
      label = 14;
      break L1;
     }
     $$expand_i1_val = 1;
     $31 = $$expand_i1_val;
     $94 = $91;
     $95 = $27;
     $gep_int41 = $95;
     $gep42 = (($gep_int41) + 24)|0;
     $96 = $gep42;
     $97 = HEAP32[$96>>2]|0;
     $19 = $30;
     $20 = $97;
     $98 = $19;
     $99 = $20;
     $17 = $98;
     $18 = $99;
     $100 = $17;
     $gep_int43 = $100;
     $101 = $gep_int43;
     $16 = $101;
     $102 = $16;
     $15 = $102;
     $103 = $15;
     $104 = $103;
     $14 = $104;
     $105 = $14;
     $106 = $105;
     $13 = $106;
     $107 = $18;
     $108 = $18;
     $12 = $108;
     $109 = $12;
     __THREW__ = 0;
     $110 = invoke_ii(71,$109|0)|0;
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     
     L26: do {
      if ($112) {
       label = 32;
      } else {
       __THREW__ = 0;
       invoke_viii(3,$100|0,$107|0,$110|0);
       $113 = __THREW__; __THREW__ = 0;
       $114 = $113&1;
       
       if ($114) {
        label = 32;
        break;
       }
       
       $115 = $width;
       $116 = $height;
       $117 = $27;
       $gep_int45 = $117;
       $gep46 = (($gep_int45) + 4)|0;
       $118 = $gep46;
       $119 = HEAP32[$118>>2]|0;
       __THREW__ = 0;
       $120 = invoke_ii(68,$119|0)|0;
       $121 = __THREW__; __THREW__ = 0;
       $122 = $121&1;
       
       do {
        if (!($122)) {
         $123 = ($120|0)==(1);
         $124 = $27;
         $gep_int47 = $124;
         $gep48 = (($gep_int47) + 8)|0;
         $125 = $gep48;
         $126 = HEAP32[$125>>2]|0;
         __THREW__ = 0;
         $127 = invoke_ii(68,$126|0)|0;
         $128 = __THREW__; __THREW__ = 0;
         $129 = $128&1;
         
         if ($129) {
          break;
         }
         $130 = ($127|0)==(1);
         $131 = $27;
         $gep_int49 = $131;
         $gep50 = (($gep_int49) + 12)|0;
         $132 = $gep50;
         $133 = HEAP32[$132>>2]|0;
         __THREW__ = 0;
         $134 = invoke_ii(68,$133|0)|0;
         $135 = __THREW__; __THREW__ = 0;
         $136 = $135&1;
         
         if ($136) {
          break;
         }
         __THREW__ = 0;
         invoke_viiiiiii(39,$94|0,$30|0,$115|0,$116|0,$123|0,$130|0,$134|0);
         $137 = __THREW__; __THREW__ = 0;
         $138 = $137&1;
         
         if ($138) {
          break;
         }
         $$expand_i1_val2 = 0;
         $31 = $$expand_i1_val2;
         $expanded16 = 1232;
         HEAP32[1232>>2] = $94;
         __THREW__ = 0;
         invoke_vi(131,$30|0);
         $139 = __THREW__; __THREW__ = 0;
         $140 = $139&1;
         
         if ($140) {
          label = 32;
          break L26;
         }
         
         break L23;
        }
       } while(0);
       $expanded19 = 69;
       $expanded20 = 48;
       $143 = ___cxa_find_matching_catch(-1,-1,$expanded20|0)|0;
       $144 = tempRet0;
       $28 = $143;
       $29 = $144;
       __THREW__ = 0;
       invoke_vi(131,$30|0);
       $145 = __THREW__; __THREW__ = 0;
       $146 = $145&1;
       
       if ($146) {
        $expanded33 = 69;
        $223 = ___cxa_find_matching_catch(-1,-1,0)|0;
        u$179 = tempRet0;
        ___clang_call_terminate($223);
        // unreachable
       } else {
        
        break;
       }
      }
     } while(0);
     if ((label|0) == 32) {
      $expanded17 = 69;
      $expanded18 = 48;
      $141 = ___cxa_find_matching_catch(-1,-1,$expanded18|0)|0;
      $142 = tempRet0;
      $28 = $141;
      $29 = $142;
      
     }
     $$pre_trunc = $31;
     $147 = $$pre_trunc&1;
     
     if ($147) {
      __ZdlPv($91);
      
     }
     
     break L1;
    } else {
     $148 = $26;
     $149 = ($148|0)==(1);
     
     if (!($149)) {
      __THREW__ = 0;
      invoke_vi(130,-1);
      $213 = __THREW__; __THREW__ = 0;
      $214 = $213&1;
      
      if ($214) {
       label = 14;
       break L1;
      }
      // unreachable
     }
     __THREW__ = 0;
     $150 = invoke_ii(70,624)|0;
     $151 = __THREW__; __THREW__ = 0;
     $152 = $151&1;
     
     if ($152) {
      label = 14;
      break L1;
     }
     $$expand_i1_val5 = 1;
     $33 = $$expand_i1_val5;
     $153 = $150;
     $10 = $32;
     $gep_int51 = 248;
     $expanded21 = $gep_int51;
     $11 = $expanded21;
     $154 = $10;
     $155 = $11;
     $8 = $154;
     $9 = $155;
     $156 = $8;
     $gep_int52 = $156;
     $157 = $gep_int52;
     $7 = $157;
     $158 = $7;
     $6 = $158;
     $159 = $6;
     $160 = $159;
     $5 = $160;
     $161 = $5;
     $162 = $161;
     $4 = $162;
     $163 = $9;
     $164 = $9;
     $3 = $164;
     $165 = $3;
     __THREW__ = 0;
     $166 = invoke_ii(71,$165|0)|0;
     $167 = __THREW__; __THREW__ = 0;
     $168 = $167&1;
     
     do {
      if ($168) {
       label = 46;
      } else {
       __THREW__ = 0;
       invoke_viii(3,$156|0,$163|0,$166|0);
       $169 = __THREW__; __THREW__ = 0;
       $170 = $169&1;
       
       if ($170) {
        label = 46;
        break;
       }
       
       $171 = $width;
       $172 = $height;
       __THREW__ = 0;
       invoke_viiiiiii(39,$153|0,$32|0,$171|0,$172|0,1,1,0);
       $173 = __THREW__; __THREW__ = 0;
       $174 = $173&1;
       
       if ($174) {
        $expanded25 = 69;
        $expanded26 = 48;
        $179 = ___cxa_find_matching_catch(-1,-1,$expanded26|0)|0;
        $180 = tempRet0;
        $28 = $179;
        $29 = $180;
        __THREW__ = 0;
        invoke_vi(131,$32|0);
        $181 = __THREW__; __THREW__ = 0;
        $182 = $181&1;
        
        if ($182) {
         $expanded33 = 69;
         $223 = ___cxa_find_matching_catch(-1,-1,0)|0;
         u$179 = tempRet0;
         ___clang_call_terminate($223);
         // unreachable
        } else {
         
         break;
        }
       } else {
        $$expand_i1_val7 = 0;
        $33 = $$expand_i1_val7;
        $expanded22 = 1232;
        HEAP32[1232>>2] = $153;
        __THREW__ = 0;
        invoke_vi(131,$32|0);
        $175 = __THREW__; __THREW__ = 0;
        $176 = $175&1;
        
        if ($176) {
         label = 46;
         break;
        }
        
        
        break L23;
       }
      }
     } while(0);
     if ((label|0) == 46) {
      $expanded23 = 69;
      $expanded24 = 48;
      $177 = ___cxa_find_matching_catch(-1,-1,$expanded24|0)|0;
      $178 = tempRet0;
      $28 = $177;
      $29 = $178;
      
     }
     $$pre_trunc9 = $33;
     $183 = $$pre_trunc9&1;
     
     if ($183) {
      __ZdlPv($150);
      
     }
     
     break L1;
    }
   } while(0);
   __THREW__ = 0;
   invoke_v(1);
   $215 = __THREW__; __THREW__ = 0;
   $216 = $215&1;
   
   if ($216) {
    label = 14;
    break;
   }
   
   STACKTOP = sp;return 0;
  }
 } while(0);
 if ((label|0) == 14) {
  $expanded14 = 69;
  $expanded15 = 48;
  $77 = ___cxa_find_matching_catch(-1,-1,$expanded15|0)|0;
  $78 = tempRet0;
  $28 = $77;
  $29 = $78;
  
 }
 $184 = $29;
 $expanded27 = 48;
 $185 = _llvm_eh_typeid_for($expanded27|0)|0;
 $186 = ($184|0)==($185|0);
 
 if (!($186)) {
  $221 = $28;
  $222 = $29;
  ___resumeException($221|0);
  // unreachable
 }
 $187 = $28;
 $188 = ___cxa_get_exception_ptr($187|0)|0;
 $189 = $188;
 __ZN2cl5ErrorC1ERKS0_($err,$189);
 u$138 = ___cxa_begin_catch($187|0)|0;
 __THREW__ = 0;
 $expanded28 = 3824;
 $gep_int54 = 272;
 $expanded29 = $gep_int54;
 $190 = invoke_iii(17,$expanded28|0,$expanded29|0)|0;
 $191 = __THREW__; __THREW__ = 0;
 $192 = $191&1;
 
 do {
  if (!($192)) {
   $193 = __ZNK2cl5Error4whatEv($err)|0;
   __THREW__ = 0;
   $194 = invoke_iii(17,$190|0,$193|0)|0;
   $195 = __THREW__; __THREW__ = 0;
   $196 = $195&1;
   
   if ($196) {
    break;
   }
   __THREW__ = 0;
   $gep_int55 = 280;
   $expanded30 = $gep_int55;
   $197 = invoke_iii(17,$194|0,$expanded30|0)|0;
   $198 = __THREW__; __THREW__ = 0;
   $199 = $198&1;
   
   if ($199) {
    break;
   }
   __THREW__ = 0;
   $200 = invoke_ii(72,$err|0)|0;
   $201 = __THREW__; __THREW__ = 0;
   $202 = $201&1;
   
   if ($202) {
    break;
   }
   __THREW__ = 0;
   $203 = invoke_iii(18,$197|0,$200|0)|0;
   $204 = __THREW__; __THREW__ = 0;
   $205 = $204&1;
   
   if ($205) {
    break;
   }
   __THREW__ = 0;
   $gep_int56 = 288;
   $expanded31 = $gep_int56;
   $206 = invoke_iii(17,$203|0,$expanded31|0)|0;
   $207 = __THREW__; __THREW__ = 0;
   $208 = $207&1;
   
   if ($208) {
    break;
   }
   $1 = $206;
   $2 = 67;
   $209 = $1;
   $210 = $2;
   __THREW__ = 0;
   u$154 = invoke_ii($210|0,$209|0)|0;
   $211 = __THREW__; __THREW__ = 0;
   $212 = $211&1;
   
   if ($212) {
    break;
   }
   
   __ZN2cl5ErrorD1Ev($err);
   ___cxa_end_catch();
   
   STACKTOP = sp;return 0;
  }
 } while(0);
 $expanded32 = 69;
 $217 = ___cxa_find_matching_catch(-1,-1)|0;
 $218 = tempRet0;
 $28 = $217;
 $29 = $218;
 __ZN2cl5ErrorD1Ev($err);
 __THREW__ = 0;
 invoke_v(2);
 $219 = __THREW__; __THREW__ = 0;
 $220 = $219&1;
 
 if ($220) {
  $expanded33 = 69;
  $223 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$179 = tempRet0;
  ___clang_call_terminate($223);
  // unreachable
 }
 
 $221 = $28;
 $222 = $29;
 ___resumeException($221|0);
 // unreachable
 return 0|0;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__len = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0;
 var $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep_int = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0;
 var $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, label = 0, sp = 0, u$103 = 0;
 var u$47 = 0, u$88 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $$byval_copy = sp;
 
 
 
 
 
 
 
 
 
 
 
 
 $13 = sp + 104|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $__s = sp + 224|0;
 
 
 
 $30 = sp + 256|0;
 $31 = sp + 264|0;
 $26 = $__os;
 $27 = $__str;
 $32 = $26;
 __THREW__ = 0;
 invoke_vii(40,$__s|0,$32|0);
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 
 L1: do {
  if ($34) {
   label = 25;
  } else {
   $25 = $__s;
   $35 = $25;
   $gep_int = $35;
   $36 = $gep_int;
   $37 = HEAP8[$36]|0;
   $38 = $37&1;
   
   
   L4: do {
    if ($38) {
     $39 = $27;
     $24 = $39;
     $40 = $24;
     __THREW__ = 0;
     $41 = invoke_ii(71,$40|0)|0;
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     
     L6: do {
      if ($43) {
       label = 26;
      } else {
       
       $__len = $41;
       $44 = $26;
       $22 = $30;
       $23 = $44;
       $45 = $22;
       $46 = $23;
       $20 = $45;
       $21 = $46;
       $47 = $20;
       $gep_int12 = $47;
       $48 = $gep_int12;
       $49 = $21;
       $50 = $49;
       $51 = HEAP32[$49>>2]|0;
       $gep_int13 = $51;
       $gep = (($gep_int13) + -12)|0;
       $52 = $gep;
       $53 = $52;
       $54 = HEAP32[$52>>2]|0;
       $55 = $49;
       $gep_int14 = $49;
       $gep15 = (($gep_int14) + ($54))|0;
       $56 = $gep15;
       $57 = $56;
       $19 = $57;
       $58 = $19;
       $59 = $58;
       $18 = $59;
       $60 = $18;
       $gep_int16 = $60;
       $gep17 = (($gep_int16) + 24)|0;
       $61 = $gep17;
       $62 = HEAP32[$61>>2]|0;
       $63 = $62;
       HEAP32[$48>>2] = $63;
       $64 = $27;
       $65 = $26;
       $66 = $65;
       $67 = HEAP32[$65>>2]|0;
       $gep_int18 = $67;
       $gep19 = (($gep_int18) + -12)|0;
       $68 = $gep19;
       $69 = $68;
       $70 = HEAP32[$68>>2]|0;
       $71 = $65;
       $gep_int20 = $65;
       $gep21 = (($gep_int20) + ($70))|0;
       $72 = $gep21;
       $73 = $72;
       $17 = $73;
       $74 = $17;
       $gep_int22 = $74;
       $gep23 = (($gep_int22) + 4)|0;
       $75 = $gep23;
       $76 = HEAP32[$75>>2]|0;
       
       $77 = $76 & 176;
       $78 = ($77|0)==(32);
       
       if ($78) {
        $79 = $27;
        $80 = $__len;
        $gep_int24 = $79;
        $gep25 = (($gep_int24) + ($80))|0;
        $81 = $gep25;
        
        $83 = $81;
       } else {
        $82 = $27;
        
        $83 = $82;
       }
       
       $84 = $27;
       $85 = $__len;
       $gep_int26 = $84;
       $gep27 = (($gep_int26) + ($85))|0;
       $86 = $gep27;
       $87 = $26;
       $88 = $87;
       $89 = HEAP32[$87>>2]|0;
       $gep_int28 = $89;
       $gep29 = (($gep_int28) + -12)|0;
       $90 = $gep29;
       $91 = $90;
       $92 = HEAP32[$90>>2]|0;
       $93 = $87;
       $gep_int30 = $87;
       $gep31 = (($gep_int30) + ($92))|0;
       $94 = $gep31;
       $95 = $94;
       $96 = $26;
       $97 = $96;
       $98 = HEAP32[$96>>2]|0;
       $gep_int32 = $98;
       $gep33 = (($gep_int32) + -12)|0;
       $99 = $gep33;
       $100 = $99;
       $101 = HEAP32[$99>>2]|0;
       $102 = $96;
       $gep_int34 = $96;
       $gep35 = (($gep_int34) + ($101))|0;
       $103 = $gep35;
       $104 = $103;
       $16 = $104;
       $105 = $16;
       $gep_int36 = $105;
       $gep37 = (($gep_int36) + 76)|0;
       $106 = $gep37;
       $107 = HEAP32[$106>>2]|0;
       $6 = -1;
       $7 = $107;
       $108 = $6;
       $109 = $7;
       $110 = ($108|0)==($109|0);
       
       L14: do {
        if ($110) {
         $11 = $105;
         $12 = 32;
         $111 = $11;
         $112 = $111;
         __THREW__ = 0;
         invoke_vii(41,$13|0,$112|0);
         $113 = __THREW__; __THREW__ = 0;
         $114 = $113&1;
         
         if ($114) {
          label = 26;
          break L6;
         }
         $10 = $13;
         $115 = $10;
         __THREW__ = 0;
         $expanded = 8480;
         $116 = invoke_iii(19,$115|0,$expanded|0)|0;
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         
         do {
          if (!($118)) {
           $119 = $116;
           $120 = $12;
           $8 = $119;
           $9 = $120;
           $121 = $8;
           $122 = $121;
           $123 = HEAP32[$121>>2]|0;
           $gep_int38 = $123;
           $gep39 = (($gep_int38) + 28)|0;
           $124 = $gep39;
           $125 = HEAP32[$124>>2]|0;
           $126 = $9;
           __THREW__ = 0;
           $127 = invoke_iii($125|0,$121|0,$126|0)|0;
           $128 = __THREW__; __THREW__ = 0;
           $129 = $128&1;
           
           if ($129) {
            break;
           }
           __THREW__ = 0;
           invoke_vi(132,$13|0);
           $137 = __THREW__; __THREW__ = 0;
           $138 = $137&1;
           
           if ($138) {
            label = 26;
            break L6;
           }
           $139 = $127 << 24 >> 24;
           $gep_int40 = $105;
           $gep41 = (($gep_int40) + 76)|0;
           $140 = $gep41;
           HEAP32[$140>>2] = $139;
           
           break L14;
          }
         } while(0);
         $expanded6 = 69;
         $130 = ___cxa_find_matching_catch(-1,-1,0,0)|0;
         $131 = tempRet0;
         $14 = $130;
         $15 = $131;
         __THREW__ = 0;
         invoke_vi(132,$13|0);
         $132 = __THREW__; __THREW__ = 0;
         $133 = $132&1;
         
         if ($133) {
          $expanded7 = 69;
          $136 = ___cxa_find_matching_catch(-1,-1,0,0,0)|0;
          u$47 = tempRet0;
          ___clang_call_terminate($136);
          // unreachable
         } else {
          $134 = $14;
          $135 = $15;
          
          $eh$lpad$body$index2Z2D = $135;$eh$lpad$body$indexZ2D = $134;
          break L6;
         }
        }
       } while(0);
       $gep_int42 = $105;
       $gep43 = (($gep_int42) + 76)|0;
       $141 = $gep43;
       $142 = HEAP32[$141>>2]|0;
       $143 = $142&255;
       
       __THREW__ = 0;
       $144 = $$byval_copy;
       
       $145 = $$byval_copy;
       $146 = $30;
       ;HEAP32[$145+0>>2]=HEAP32[$146+0>>2]|0;
       invoke_viiiiiii(40,$31|0,$$byval_copy|0,$64|0,$83|0,$86|0,$95|0,$143|0);
       $147 = $$byval_copy;
       
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       
       if ($149) {
        label = 26;
        break;
       }
       $5 = $31;
       $150 = $5;
       $gep_int44 = $150;
       $151 = $gep_int44;
       $152 = HEAP32[$151>>2]|0;
       $153 = ($152|0)==(0);
       
       if ($153) {
        $154 = $26;
        $155 = $154;
        $156 = HEAP32[$154>>2]|0;
        $gep_int45 = $156;
        $gep46 = (($gep_int45) + -12)|0;
        $157 = $gep46;
        $158 = $157;
        $159 = HEAP32[$157>>2]|0;
        $160 = $154;
        $gep_int47 = $154;
        $gep48 = (($gep_int47) + ($159))|0;
        $161 = $gep48;
        $162 = $161;
        $3 = $162;
        $4 = 5;
        $163 = $3;
        $164 = $163;
        $165 = $4;
        $1 = $164;
        $2 = $165;
        $166 = $1;
        $gep_int49 = $166;
        $gep50 = (($gep_int49) + 16)|0;
        $167 = $gep50;
        $168 = HEAP32[$167>>2]|0;
        $169 = $2;
        $170 = $168 | $169;
        __THREW__ = 0;
        invoke_vii(42,$166|0,$170|0);
        $171 = __THREW__; __THREW__ = 0;
        $172 = $171&1;
        
        if ($172) {
         label = 26;
         break;
        }
        
        
       }
       
       break L4;
      }
     } while(0);
     if ((label|0) == 26) {
      $expanded9 = 69;
      $175 = ___cxa_find_matching_catch(-1,-1,0)|0;
      $176 = tempRet0;
      
      $eh$lpad$body$index2Z2D = $176;$eh$lpad$body$indexZ2D = $175;
     }
     
     
     $28 = $eh$lpad$body$indexZ2D;
     $29 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(133,$__s|0);
     $177 = __THREW__; __THREW__ = 0;
     $178 = $177&1;
     
     if ($178) {
      $expanded11 = 69;
      $200 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$103 = tempRet0;
      ___clang_call_terminate($200);
      // unreachable
     } else {
      
      break L1;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(133,$__s|0);
   $179 = __THREW__; __THREW__ = 0;
   $180 = $179&1;
   
   if ($180) {
    label = 25;
    break;
   }
   
   $193 = $26;
   STACKTOP = sp;return $193|0;
  }
 } while(0);
 if ((label|0) == 25) {
  $expanded8 = 69;
  $173 = ___cxa_find_matching_catch(-1,-1,0)|0;
  $174 = tempRet0;
  $28 = $173;
  $29 = $174;
  
 }
 $181 = $28;
 u$88 = ___cxa_begin_catch($181|0)|0;
 $182 = $26;
 $183 = $182;
 $184 = HEAP32[$182>>2]|0;
 $gep_int51 = $184;
 $gep52 = (($gep_int51) + -12)|0;
 $185 = $gep52;
 $186 = $185;
 $187 = HEAP32[$185>>2]|0;
 $188 = $182;
 $gep_int53 = $182;
 $gep54 = (($gep_int53) + ($187))|0;
 $189 = $gep54;
 $190 = $189;
 __THREW__ = 0;
 invoke_vi(134,$190|0);
 $191 = __THREW__; __THREW__ = 0;
 $192 = $191&1;
 
 if (!($192)) {
  ___cxa_end_catch();
  
  $193 = $26;
  STACKTOP = sp;return $193|0;
 }
 $expanded10 = 69;
 $194 = ___cxa_find_matching_catch(-1,-1)|0;
 $195 = tempRet0;
 $28 = $194;
 $29 = $195;
 __THREW__ = 0;
 invoke_v(2);
 $196 = __THREW__; __THREW__ = 0;
 $197 = $196&1;
 
 if ($197) {
  $expanded11 = 69;
  $200 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$103 = tempRet0;
  ___clang_call_terminate($200);
  // unreachable
 }
 
 $198 = $28;
 $199 = $29;
 ___resumeException($198|0);
 // unreachable
 return 0|0;
}
function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os) {
 $__os = $__os|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep4 = 0, $gep6 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int5 = 0, label = 0, sp = 0, u$18 = 0, u$22 = 0, u$23 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72|0;
 
 
 
 
 
 $6 = sp + 40|0;
 
 
 
 $9 = $__os;
 $10 = $9;
 $11 = $9;
 $12 = $11;
 $13 = HEAP32[$11>>2]|0;
 $gep_int = $13;
 $gep = (($gep_int) + -12)|0;
 $14 = $gep;
 $15 = $14;
 $16 = HEAP32[$14>>2]|0;
 $17 = $11;
 $gep_int3 = $11;
 $gep4 = (($gep_int3) + ($16))|0;
 $18 = $gep4;
 $19 = $18;
 $4 = $19;
 $5 = 10;
 $20 = $4;
 $21 = $20;
 __ZNKSt3__18ios_base6getlocEv($6,$21);
 $3 = $6;
 $22 = $3;
 __THREW__ = 0;
 $expanded = 8480;
 $23 = invoke_iii(19,$22|0,$expanded|0)|0;
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 
 do {
  if (!($25)) {
   $26 = $23;
   $27 = $5;
   $1 = $26;
   $2 = $27;
   $28 = $1;
   $29 = $28;
   $30 = HEAP32[$28>>2]|0;
   $gep_int5 = $30;
   $gep6 = (($gep_int5) + 28)|0;
   $31 = $gep6;
   $32 = HEAP32[$31>>2]|0;
   $33 = $2;
   __THREW__ = 0;
   $34 = invoke_iii($32|0,$28|0,$33|0)|0;
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   
   if ($36) {
    break;
   }
   __ZNSt3__16localeD2Ev($6);
   u$22 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($10,$34)|0;
   $44 = $9;
   u$23 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($44)|0;
   $45 = $9;
   STACKTOP = sp;return $45|0;
  }
 } while(0);
 $expanded1 = 69;
 $37 = ___cxa_find_matching_catch(-1,-1)|0;
 $38 = tempRet0;
 $7 = $37;
 $8 = $38;
 __THREW__ = 0;
 invoke_vi(132,$6|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 
 if ($40) {
  $expanded2 = 69;
  $43 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$18 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable
 } else {
  $41 = $7;
  $42 = $8;
  ___resumeException($41|0);
  // unreachable
 }
 return 0|0;
}
function ___clang_call_terminate($1) {
 $1 = $1|0;
 var label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 u$0 = ___cxa_begin_catch($1|0)|0;
 __ZSt9terminatev();
 // unreachable
}
function __ZN2cl5ErrorC1ERKS0_($this,$1) {
 $this = $this|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $2 = $this;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN2cl5ErrorC2ERKS0_($4,$5);
 STACKTOP = sp;return;
}
function __ZNK2cl5Error4whatEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep3 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $2 = $this;
 $3 = $2;
 $gep_int = $3;
 $gep = (($gep_int) + 8)|0;
 $4 = $gep;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 
 if ($6) {
  $gep_int1 = 296;
  $expanded = $gep_int1;
  $1 = $expanded;
  
  $9 = $1;
  STACKTOP = sp;return $9|0;
 } else {
  $gep_int2 = $3;
  $gep3 = (($gep_int2) + 8)|0;
  $7 = $gep3;
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
  
  $9 = $1;
  STACKTOP = sp;return $9|0;
 }
 return 0|0;
}
function __ZNK2cl5Error3errEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 4)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return $4|0;
}
function __ZN2cl5ErrorD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl5ErrorD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__np = 0, $__ns = 0, $__r$i = 0, $__sp = 0, $__sz = 0, $cleanup$dest = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep20 = 0, $gep25 = 0, $gep28 = 0, $gep33 = 0, $gep37 = 0, $gep39 = 0, $gep6 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0;
 var $gep_int13 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int32 = 0, $gep_int34 = 0;
 var $gep_int35 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int8 = 0, $gep_int9 = 0, label = 0, sp = 0, u$122 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $62 = sp + 496|0;
 
 
 
 $63 = sp + 528|0;
 $__sp = sp + 536|0;
 
 
 $66 = sp + 568|0;
 
 $68 = sp + 584|0;
 $57 = $__ob;
 $58 = $__op;
 $59 = $__oe;
 $60 = $__iob;
 $61 = $__fl;
 $gep_int = $__s;
 $69 = $gep_int;
 $70 = HEAP32[$69>>2]|0;
 $55 = $62;
 $56 = -1;
 $71 = $55;
 $72 = $56;
 $53 = $71;
 $54 = $72;
 $73 = $53;
 $gep_int2 = $73;
 $74 = $gep_int2;
 HEAP32[$74>>2] = 0;
 $52 = $62;
 $75 = ($70|0)==(0);
 
 if ($75) {
  $76 = $agg$result;
  $77 = $__s;
  ;HEAP32[$76+0>>2]=HEAP32[$77+0>>2]|0;
  
  STACKTOP = sp;return;
 }
 $78 = $59;
 $79 = $57;
 $80 = $78;
 $81 = $79;
 $82 = (($80) - ($81))|0;
 $__sz = $82;
 $83 = $60;
 $41 = $83;
 $84 = $41;
 $gep_int3 = $84;
 $gep = (($gep_int3) + 12)|0;
 $85 = $gep;
 $86 = HEAP32[$85>>2]|0;
 $__ns = $86;
 $87 = $__ns;
 $88 = $__sz;
 $89 = ($87|0)>($88|0);
 
 if ($89) {
  $90 = $__sz;
  $91 = $__ns;
  $92 = (($91) - ($90))|0;
  $__ns = $92;
  
 } else {
  $__ns = 0;
  
 }
 $93 = $58;
 $94 = $57;
 $95 = $93;
 $96 = $94;
 $97 = (($95) - ($96))|0;
 $__np = $97;
 $98 = $__np;
 $99 = ($98|0)>(0);
 
 do {
  if ($99) {
   $gep_int4 = $__s;
   $100 = $gep_int4;
   $101 = HEAP32[$100>>2]|0;
   $102 = $57;
   $103 = $__np;
   $38 = $101;
   $39 = $102;
   $40 = $103;
   $104 = $38;
   $105 = $104;
   $106 = HEAP32[$104>>2]|0;
   $gep_int5 = $106;
   $gep6 = (($gep_int5) + 48)|0;
   $107 = $gep6;
   $108 = HEAP32[$107>>2]|0;
   $109 = $39;
   $110 = $40;
   $111 = FUNCTION_TABLE_iiii[$108 & 63]($104,$109,$110)|0;
   $112 = $__np;
   $113 = ($111|0)!=($112|0);
   
   if (!($113)) {
    
    break;
   }
   $36 = $63;
   $37 = -1;
   $114 = $36;
   $115 = $37;
   $34 = $114;
   $35 = $115;
   $116 = $34;
   $gep_int7 = $116;
   $117 = $gep_int7;
   HEAP32[$117>>2] = 0;
   $33 = $63;
   $gep_int8 = $__s;
   $118 = $gep_int8;
   HEAP32[$118>>2] = 0;
   $119 = $agg$result;
   $120 = $__s;
   ;HEAP32[$119+0>>2]=HEAP32[$120+0>>2]|0;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $121 = $__ns;
 $122 = ($121|0)>(0);
 
 do {
  if ($122) {
   $123 = $__ns;
   $124 = $61;
   $22 = $__sp;
   $23 = $123;
   $24 = $124;
   $125 = $22;
   $126 = $23;
   $127 = $24;
   $19 = $125;
   $20 = $126;
   $21 = $127;
   $128 = $19;
   $gep_int9 = $128;
   $129 = $gep_int9;
   $18 = $129;
   $130 = $18;
   $17 = $130;
   $131 = $17;
   $132 = $131;
   $16 = $132;
   $133 = $16;
   $134 = $133;
   $15 = $134;
   $135 = $20;
   $136 = $21;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($128,$135,$136);
   $gep_int11 = $__s;
   $137 = $gep_int11;
   $138 = HEAP32[$137>>2]|0;
   $14 = $__sp;
   $139 = $14;
   $13 = $139;
   $140 = $13;
   $12 = $140;
   $141 = $12;
   $gep_int12 = $141;
   $142 = $gep_int12;
   $11 = $142;
   $143 = $11;
   $144 = $143;
   $10 = $144;
   $145 = $10;
   $gep_int13 = $145;
   $146 = $gep_int13;
   $gep_int14 = $146;
   $147 = $gep_int14;
   $148 = $147;
   $gep_int15 = $147;
   $149 = $gep_int15;
   $150 = $149;
   $151 = HEAP8[$149]|0;
   $152 = $151&255;
   $153 = $152 & 1;
   $154 = ($153|0)!=(0);
   
   if ($154) {
    $4 = $140;
    $155 = $4;
    $gep_int16 = $155;
    $156 = $gep_int16;
    $3 = $156;
    $157 = $3;
    $158 = $157;
    $2 = $158;
    $159 = $2;
    $gep_int17 = $159;
    $160 = $gep_int17;
    $gep_int18 = $160;
    $161 = $gep_int18;
    $162 = $161;
    $gep_int19 = $161;
    $gep20 = (($gep_int19) + 8)|0;
    $163 = $gep20;
    $164 = HEAP32[$163>>2]|0;
    
    $177 = $164;
   } else {
    $9 = $140;
    $165 = $9;
    $gep_int21 = $165;
    $166 = $gep_int21;
    $8 = $166;
    $167 = $8;
    $168 = $167;
    $7 = $168;
    $169 = $7;
    $gep_int22 = $169;
    $170 = $gep_int22;
    $gep_int23 = $170;
    $171 = $gep_int23;
    $172 = $171;
    $gep_int24 = $171;
    $gep25 = (($gep_int24) + 1)|0;
    $173 = $gep25;
    $gep_int26 = $173;
    $174 = $gep_int26;
    $6 = $174;
    $175 = $6;
    $5 = $175;
    $176 = $5;
    
    $177 = $176;
   }
   
   $1 = $177;
   $178 = $1;
   $179 = $__ns;
   $25 = $138;
   $26 = $178;
   $27 = $179;
   $180 = $25;
   $181 = $180;
   $182 = HEAP32[$180>>2]|0;
   $gep_int27 = $182;
   $gep28 = (($gep_int27) + 48)|0;
   $183 = $gep28;
   $184 = HEAP32[$183>>2]|0;
   $185 = $26;
   $186 = $27;
   __THREW__ = 0;
   $187 = invoke_iiii($184|0,$180|0,$185|0,$186|0)|0;
   $188 = __THREW__; __THREW__ = 0;
   $189 = $188&1;
   
   if ($189) {
    $expanded = 69;
    $199 = ___cxa_find_matching_catch(-1,-1)|0;
    $200 = tempRet0;
    $64 = $199;
    $65 = $200;
    __THREW__ = 0;
    invoke_vi(131,$__sp|0);
    $201 = __THREW__; __THREW__ = 0;
    $202 = $201&1;
    
    if ($202) {
     $expanded1 = 69;
     $241 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$122 = tempRet0;
     ___clang_call_terminate($241);
     // unreachable
    }
    
    $239 = $64;
    $240 = $65;
    ___resumeException($239|0);
    // unreachable
   }
   
   $190 = $__ns;
   $191 = ($187|0)!=($190|0);
   
   if ($191) {
    $30 = $66;
    $31 = -1;
    $192 = $30;
    $193 = $31;
    $28 = $192;
    $29 = $193;
    $194 = $28;
    $gep_int29 = $194;
    $195 = $gep_int29;
    HEAP32[$195>>2] = 0;
    
    $32 = $66;
    
    $gep_int30 = $__s;
    $196 = $gep_int30;
    HEAP32[$196>>2] = 0;
    $197 = $agg$result;
    $198 = $__s;
    ;HEAP32[$197+0>>2]=HEAP32[$198+0>>2]|0;
    $67 = 1;
    
   } else {
    $67 = 0;
    
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   $cleanup$dest = $67;
   
   if ((($cleanup$dest|0) == 0)) {
    
    break;
   } else if ((($cleanup$dest|0) == 1)) {
    STACKTOP = sp;return;
   } else {
    // unreachable
   }
  }
 } while(0);
 $203 = $59;
 $204 = $58;
 $205 = $203;
 $206 = $204;
 $207 = (($205) - ($206))|0;
 $__np = $207;
 $208 = $__np;
 $209 = ($208|0)>(0);
 
 do {
  if ($209) {
   $gep_int31 = $__s;
   $210 = $gep_int31;
   $211 = HEAP32[$210>>2]|0;
   $212 = $58;
   $213 = $__np;
   $42 = $211;
   $43 = $212;
   $44 = $213;
   $214 = $42;
   $215 = $214;
   $216 = HEAP32[$214>>2]|0;
   $gep_int32 = $216;
   $gep33 = (($gep_int32) + 48)|0;
   $217 = $gep33;
   $218 = HEAP32[$217>>2]|0;
   $219 = $43;
   $220 = $44;
   $221 = FUNCTION_TABLE_iiii[$218 & 63]($214,$219,$220)|0;
   $222 = $__np;
   $223 = ($221|0)!=($222|0);
   
   if (!($223)) {
    
    break;
   }
   $47 = $68;
   $48 = -1;
   $224 = $47;
   $225 = $48;
   $45 = $224;
   $46 = $225;
   $226 = $45;
   $gep_int34 = $226;
   $227 = $gep_int34;
   HEAP32[$227>>2] = 0;
   $49 = $68;
   $gep_int35 = $__s;
   $228 = $gep_int35;
   HEAP32[$228>>2] = 0;
   $229 = $agg$result;
   $230 = $__s;
   ;HEAP32[$229+0>>2]=HEAP32[$230+0>>2]|0;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $231 = $60;
 $50 = $231;
 $51 = 0;
 $232 = $50;
 $gep_int36 = $232;
 $gep37 = (($gep_int36) + 12)|0;
 $233 = $gep37;
 $234 = HEAP32[$233>>2]|0;
 $__r$i = $234;
 $235 = $51;
 $gep_int38 = $232;
 $gep39 = (($gep_int38) + 12)|0;
 $236 = $gep39;
 HEAP32[$236>>2] = $235;
 $237 = $agg$result;
 $238 = $__s;
 ;HEAP32[$237+0>>2]=HEAP32[$238+0>>2]|0;
 
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZNSt9exceptionD2Ev($3|0);
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorC2ERKS0_($this,$1) {
 $this = $this|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep3 = 0, $gep5 = 0, $gep_int = 0, $gep_int2 = 0, $gep_int4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $2 = $this;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = $3;
 $7 = $6;
 __ZNSt9exceptionC2ERKS_($5,$7);
 $8 = $4;
 $expanded1 = 304;
 $gep_int = 304;
 $gep = (($gep_int) + 8)|0;
 $expanded = $gep;
 HEAP32[$4>>2] = $expanded;
 $gep_int2 = $4;
 $gep3 = (($gep_int2) + 4)|0;
 $9 = $gep3;
 $10 = $3;
 $gep_int4 = $10;
 $gep5 = (($gep_int4) + 4)|0;
 $11 = $gep5;
 $12 = $9;
 $13 = $11;
 ;HEAP32[$12+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$12+4>>2]=HEAP32[$13+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt9exceptionC2ERKS_($this,$1) {
 $this = $this|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $2 = $this;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $expanded1 = __ZTVSt9exception;
 $gep_int = __ZTVSt9exception;
 $gep = (($gep_int) + 8)|0;
 $expanded = $gep;
 HEAP32[$4>>2] = $expanded;
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl5ErrorD1Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 __ZN2cl6size_tILi3EED1Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6size_tILi3EED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6size_tILi3EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6size_tILi3EED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6vectorIjLj3EED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIjLj3EED2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 __ZN2cl6size_tILi3EEC1Ev($3);
 $gep_int1 = $2;
 $gep = (($gep_int1) + 20)|0;
 $4 = $gep;
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6size_tILi3EEC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6size_tILi3EEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6size_tILi3EEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6vectorIjLj3EEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIjLj3EEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 12)|0;
 $3 = $gep;
 HEAP32[$3>>2] = -1;
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + 16)|0;
 $4 = $gep2;
 HEAP8[$4] = 1;
 STACKTOP = sp;return;
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 STACKTOP = sp;return;
}
function ___cxx_global_var_init19() {
 var $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep_int = 0, $gep_int4 = 0, label = 0, sp = 0, u$1 = 0;
 sp = STACKTOP;
 $expanded = 328;
 __ZN2cl7NDRangeC1Ev($expanded);
 $expanded1 = 129;
 $gep_int = 328;
 $expanded2 = $gep_int;
 $gep_int4 = ___dso_handle;
 $expanded3 = $gep_int4;
 u$1 = _atexit($expanded1|0,$expanded2|0,$expanded3|0)|0;
 STACKTOP = sp;return;
}
function __ZN12RenderConfigC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEjjbbj($this,$sceneFileName,$w,$h,$useCPUs,$useGPUs,$forceGPUWorkSize) {
 $this = $this|0;
 $sceneFileName = $sceneFileName|0;
 $w = $w|0;
 $h = $h|0;
 $useCPUs = $useCPUs|0;
 $useGPUs = $useGPUs|0;
 $forceGPUWorkSize = $forceGPUWorkSize|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $expanded1 = 0, $expanded2 = 0;
 var $gep = 0, $gep11 = 0, $gep15 = 0, $gep18 = 0, $gep22 = 0, $gep25 = 0, $gep27 = 0, $gep36 = 0, $gep41 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0;
 var $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int38 = 0, $gep_int39 = 0;
 var $gep_int4 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0, u$97 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $34 = sp + 264|0;
 
 
 $37 = sp + 288|0;
 
 
 
 
 $42 = sp + 328|0;
 $43 = sp + 336|0;
 $44 = sp + 344|0;
 
 
 
 
 
 
 
 
 
 
 
 $56 = sp + 440|0;
 $47 = $this;
 $48 = $sceneFileName;
 $49 = $w;
 $50 = $h;
 $57 = $useCPUs&1;
 $51 = $57;
 $58 = $useGPUs&1;
 $52 = $58;
 $53 = $forceGPUWorkSize;
 $59 = $47;
 $gep_int = $59;
 $60 = $gep_int;
 HEAP32[$60>>2] = 0;
 $gep_int3 = $59;
 $gep = (($gep_int3) + 516)|0;
 $61 = $gep;
 $62 = $49;
 HEAP32[$61>>2] = $62;
 $gep_int4 = $59;
 $gep5 = (($gep_int4) + 520)|0;
 $63 = $gep5;
 $64 = $50;
 HEAP32[$63>>2] = $64;
 $gep_int6 = $59;
 $gep7 = (($gep_int6) + 524)|0;
 $65 = $gep7;
 HEAP32[$65>>2] = 0;
 $gep_int8 = $59;
 $gep9 = (($gep_int8) + 548)|0;
 $66 = $gep9;
 __ZN2cl6vectorIP12RenderDeviceLj10EEC1Ev($66);
 $gep_int10 = $59;
 $gep11 = (($gep_int10) + 596)|0;
 $67 = $gep11;
 $46 = $67;
 $68 = $46;
 $45 = $68;
 $69 = $45;
 $70 = $69;
 $41 = $70;
 $71 = $41;
 $72 = $71;
 $40 = $72;
 $gep_int12 = $71;
 $73 = $gep_int12;
 $18 = $42;
 $19 = -1;
 $74 = $18;
 $75 = $19;
 $16 = $74;
 $17 = $75;
 $76 = $16;
 $gep_int13 = $76;
 $77 = $gep_int13;
 HEAP32[$77>>2] = 0;
 $20 = $42;
 HEAP32[$73>>2] = 0;
 $gep_int14 = $71;
 $gep15 = (($gep_int14) + 4)|0;
 $78 = $gep15;
 $23 = $43;
 $24 = -1;
 $79 = $23;
 $80 = $24;
 $21 = $79;
 $22 = $80;
 $81 = $21;
 $gep_int16 = $81;
 $82 = $gep_int16;
 HEAP32[$82>>2] = 0;
 $25 = $43;
 HEAP32[$78>>2] = 0;
 $gep_int17 = $71;
 $gep18 = (($gep_int17) + 8)|0;
 $83 = $gep18;
 $28 = $44;
 $29 = -1;
 $84 = $28;
 $85 = $29;
 $26 = $84;
 $27 = $85;
 $86 = $26;
 $gep_int19 = $86;
 $87 = $gep_int19;
 HEAP32[$87>>2] = 0;
 $30 = $44;
 $38 = $83;
 $39 = 0;
 $88 = $38;
 $89 = $39;
 $36 = $88;
 HEAP32[$37>>2] = $89;
 $90 = $36;
 $91 = $90;
 $35 = $37;
 $92 = $35;
 $93 = HEAP32[$92>>2]|0;
 $33 = $91;
 HEAP32[$34>>2] = $93;
 $94 = $33;
 $95 = $94;
 $32 = $95;
 $gep_int20 = $94;
 $96 = $gep_int20;
 $31 = $34;
 $97 = $31;
 $98 = HEAP32[$97>>2]|0;
 HEAP32[$96>>2] = $98;
 
 $gep_int21 = $59;
 $gep22 = (($gep_int21) + 4)|0;
 $99 = $gep22;
 $gep_int23 = $99;
 $100 = $gep_int23;
 HEAP8[$100] = 0;
 $gep_int24 = $59;
 $gep25 = (($gep_int24) + 596)|0;
 $101 = $gep25;
 $gep_int26 = $59;
 $gep27 = (($gep_int26) + 548)|0;
 $102 = $gep27;
 __THREW__ = 0;
 $103 = invoke_ii(73,$102|0)|0;
 $104 = __THREW__; __THREW__ = 0;
 $105 = $104&1;
 
 do {
  if (!($105)) {
   HEAPF64[$56>>3] = 1.000000e+00;
   __THREW__ = 0;
   invoke_viii(4,$101|0,$103|0,$56|0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   
   if ($107) {
    break;
   }
   $108 = $48;
   $15 = $108;
   $109 = $15;
   $14 = $109;
   $110 = $14;
   $13 = $110;
   $111 = $13;
   $12 = $111;
   $112 = $12;
   $gep_int28 = $112;
   $113 = $gep_int28;
   $11 = $113;
   $114 = $11;
   $115 = $114;
   $10 = $115;
   $116 = $10;
   $gep_int29 = $116;
   $117 = $gep_int29;
   $gep_int30 = $117;
   $118 = $gep_int30;
   $119 = $118;
   $gep_int31 = $118;
   $120 = $gep_int31;
   $121 = $120;
   $122 = HEAP8[$120]|0;
   $123 = $122&255;
   $124 = $123 & 1;
   $125 = ($124|0)!=(0);
   
   if ($125) {
    $4 = $111;
    $126 = $4;
    $gep_int32 = $126;
    $127 = $gep_int32;
    $3 = $127;
    $128 = $3;
    $129 = $128;
    $2 = $129;
    $130 = $2;
    $gep_int33 = $130;
    $131 = $gep_int33;
    $gep_int34 = $131;
    $132 = $gep_int34;
    $133 = $132;
    $gep_int35 = $132;
    $gep36 = (($gep_int35) + 8)|0;
    $134 = $gep36;
    $135 = HEAP32[$134>>2]|0;
    
    $148 = $135;
   } else {
    $9 = $111;
    $136 = $9;
    $gep_int37 = $136;
    $137 = $gep_int37;
    $8 = $137;
    $138 = $8;
    $139 = $138;
    $7 = $139;
    $140 = $7;
    $gep_int38 = $140;
    $141 = $gep_int38;
    $gep_int39 = $141;
    $142 = $gep_int39;
    $143 = $142;
    $gep_int40 = $142;
    $gep41 = (($gep_int40) + 1)|0;
    $144 = $gep41;
    $gep_int42 = $144;
    $145 = $gep_int42;
    $6 = $145;
    $146 = $6;
    $5 = $146;
    $147 = $5;
    
    $148 = $147;
   }
   
   $1 = $148;
   $149 = $1;
   __THREW__ = 0;
   invoke_vii(43,$59|0,$149|0);
   $150 = __THREW__; __THREW__ = 0;
   $151 = $150&1;
   
   if ($151) {
    break;
   }
   $152 = $51;
   $153 = $152&1;
   $154 = $52;
   $155 = $154&1;
   $156 = $53;
   __THREW__ = 0;
   invoke_viiii(10,$59|0,$153|0,$155|0,$156|0);
   $157 = __THREW__; __THREW__ = 0;
   $158 = $157&1;
   
   if ($158) {
    break;
   }
   $gep_int43 = $59;
   $gep44 = (($gep_int43) + 548)|0;
   $159 = $gep44;
   __THREW__ = 0;
   $160 = invoke_ii(73,$159|0)|0;
   $161 = __THREW__; __THREW__ = 0;
   $162 = $161&1;
   
   if ($162) {
    break;
   }
   $163 = ($160>>>0)>(1);
   $gep_int45 = $59;
   $gep46 = (($gep_int45) + 616)|0;
   $164 = $gep46;
   $165 = $163&1;
   HEAP8[$164] = $165;
   __THREW__ = 0;
   $166 = +invoke_d(1);
   $167 = __THREW__; __THREW__ = 0;
   $168 = $167&1;
   
   if ($168) {
    break;
   }
   $gep_int47 = $59;
   $gep48 = (($gep_int47) + 608)|0;
   $169 = $gep48;
   HEAPF64[$169>>3] = $166;
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded1 = 69;
 $170 = ___cxa_find_matching_catch(-1,-1)|0;
 $171 = tempRet0;
 $54 = $170;
 $55 = $171;
 __THREW__ = 0;
 invoke_vi(135,$67|0);
 $172 = __THREW__; __THREW__ = 0;
 $173 = $172&1;
 
 if ($173) {
  $expanded2 = 69;
  $178 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$97 = tempRet0;
  ___clang_call_terminate($178);
  // unreachable
 }
 
 __THREW__ = 0;
 invoke_vi(136,$66|0);
 $174 = __THREW__; __THREW__ = 0;
 $175 = $174&1;
 
 if ($175) {
  $expanded2 = 69;
  $178 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$97 = tempRet0;
  ___clang_call_terminate($178);
  // unreachable
 }
 
 $176 = $54;
 $177 = $55;
 ___resumeException($176|0);
 // unreachable
}
function __ZN2cl6vectorIP12RenderDeviceLj10EEC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6vectorIP12RenderDeviceLj10EEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEjRKd($this,$__sz,$__x) {
 $this = $this|0;
 $__sz = $__sz|0;
 $__x = $__x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__cs = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0;
 var $gep_int9 = 0, $tmp$i$i$i = 0, $tmp1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 152|0;
 
 
 
 $4 = sp + 24|0;
 
 
 $7 = sp + 48|0;
 
 
 
 
 
 
 
 
 
 
 
 
 $16 = $this;
 $17 = $__sz;
 $18 = $__x;
 $19 = $16;
 $15 = $19;
 $20 = $15;
 $21 = $20;
 $gep_int = $20;
 $gep = (($gep_int) + 4)|0;
 $22 = $gep;
 $23 = HEAP32[$22>>2]|0;
 $24 = $20;
 $gep_int1 = $20;
 $25 = $gep_int1;
 $26 = HEAP32[$25>>2]|0;
 $27 = $23;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $30 = (($29|0) / 8)&-1;
 $__cs = $30;
 $31 = $__cs;
 $32 = $17;
 $33 = ($31>>>0)<($32>>>0);
 
 if ($33) {
  $34 = $17;
  $35 = $__cs;
  $36 = (($34) - ($35))|0;
  $37 = $18;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEjRKd($19,$36,$37);
  
  STACKTOP = sp;return;
 }
 $38 = $__cs;
 $39 = $17;
 $40 = ($38>>>0)>($39>>>0);
 
 if ($40) {
  $41 = $19;
  $gep_int2 = $19;
  $42 = $gep_int2;
  $43 = HEAP32[$42>>2]|0;
  $44 = $17;
  $gep_int3 = $43;
  $gep_array = $44<<3;
  $gep4 = (($gep_int3) + ($gep_array))|0;
  $45 = $gep4;
  $13 = $19;
  $14 = $45;
  $46 = $13;
  $47 = $46;
  $48 = $14;
  $11 = $47;
  $12 = $48;
  $49 = $11;
  
  while(1) {
   $50 = $12;
   $gep_int5 = $49;
   $gep6 = (($gep_int5) + 4)|0;
   $51 = $gep6;
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)!=($52|0);
   
   if (!($53)) {
    break;
   }
   $10 = $49;
   $54 = $10;
   $gep_int7 = $54;
   $gep8 = (($gep_int7) + 8)|0;
   $55 = $gep8;
   $9 = $55;
   $56 = $9;
   $57 = $56;
   $8 = $57;
   $58 = $8;
   $59 = $58;
   $gep_int9 = $49;
   $gep10 = (($gep_int9) + 4)|0;
   $60 = $gep10;
   $61 = HEAP32[$60>>2]|0;
   $gep_int11 = $61;
   $gep12 = (($gep_int11) + -8)|0;
   $62 = $gep12;
   HEAP32[$60>>2] = $62;
   $1 = $62;
   $63 = $1;
   $5 = $59;
   $6 = $63;
   $64 = $5;
   $65 = $6;
   $tmp$i$i$i = $4;
   $tmp1$i$i$i = $7;
   ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
   $2 = $64;
   $3 = $65;
   
  }
  
 }
 
 STACKTOP = sp;return;
}
function __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 40)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN12RenderConfig9ReadSceneEPKc($this,$fileName) {
 $this = $this|0;
 $fileName = $fileName|0;
 var $$arith = 0, $$overflow = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c = 0, $c1 = 0, $expanded = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded58 = 0, $expanded59 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded70 = 0, $expanded71 = 0;
 var $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $f = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0, $gep107 = 0, $gep109 = 0, $gep111 = 0, $gep113 = 0, $gep115 = 0;
 var $gep117 = 0, $gep120 = 0, $gep122 = 0, $gep124 = 0, $gep126 = 0, $gep128 = 0, $gep133 = 0, $gep139 = 0, $gep143 = 0, $gep145 = 0, $gep147 = 0, $gep149 = 0, $gep151 = 0, $gep154 = 0, $gep157 = 0, $gep159 = 0, $gep161 = 0, $gep163 = 0, $gep165 = 0, $gep168 = 0;
 var $gep170 = 0, $gep172 = 0, $gep174 = 0, $gep176 = 0, $gep179 = 0, $gep181 = 0, $gep183 = 0, $gep185 = 0, $gep188 = 0, $gep190 = 0, $gep192 = 0, $gep194 = 0, $gep196 = 0, $gep198 = 0, $gep200 = 0, $gep202 = 0, $gep204 = 0, $gep206 = 0, $gep209 = 0, $gep211 = 0;
 var $gep213 = 0, $gep216 = 0, $gep220 = 0, $gep88 = 0, $gep92 = 0, $gep95 = 0, $gep97 = 0, $gep_array = 0, $gep_int = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int112 = 0, $gep_int114 = 0, $gep_int116 = 0, $gep_int118 = 0, $gep_int119 = 0;
 var $gep_int121 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int127 = 0, $gep_int129 = 0, $gep_int130 = 0, $gep_int131 = 0, $gep_int132 = 0, $gep_int134 = 0, $gep_int135 = 0, $gep_int136 = 0, $gep_int137 = 0, $gep_int138 = 0, $gep_int140 = 0, $gep_int141 = 0, $gep_int142 = 0, $gep_int144 = 0, $gep_int146 = 0, $gep_int148 = 0, $gep_int150 = 0;
 var $gep_int152 = 0, $gep_int153 = 0, $gep_int155 = 0, $gep_int156 = 0, $gep_int158 = 0, $gep_int160 = 0, $gep_int162 = 0, $gep_int164 = 0, $gep_int166 = 0, $gep_int167 = 0, $gep_int169 = 0, $gep_int171 = 0, $gep_int173 = 0, $gep_int175 = 0, $gep_int177 = 0, $gep_int178 = 0, $gep_int180 = 0, $gep_int182 = 0, $gep_int184 = 0, $gep_int186 = 0;
 var $gep_int187 = 0, $gep_int189 = 0, $gep_int191 = 0, $gep_int193 = 0, $gep_int195 = 0, $gep_int197 = 0, $gep_int199 = 0, $gep_int201 = 0, $gep_int203 = 0, $gep_int205 = 0, $gep_int207 = 0, $gep_int208 = 0, $gep_int210 = 0, $gep_int212 = 0, $gep_int214 = 0, $gep_int215 = 0, $gep_int217 = 0, $gep_int218 = 0, $gep_int219 = 0, $gep_int221 = 0;
 var $gep_int82 = 0, $gep_int83 = 0, $gep_int84 = 0, $gep_int85 = 0, $gep_int86 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int90 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int98 = 0, $gep_int99 = 0, $i = 0, $mat = 0, $s = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer31 = 0, $vararg_buffer45 = 0, $vararg_buffer50 = 0, $vararg_buffer6 = 0, $vararg_func = 0, $vararg_func14 = 0, $vararg_func18 = 0, $vararg_func22 = 0, $vararg_func26 = 0, $vararg_func30 = 0, $vararg_func44 = 0, $vararg_func49 = 0, $vararg_func5 = 0, $vararg_func54 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast16 = 0, $vararg_lifetime_bitcast20 = 0;
 var $vararg_lifetime_bitcast24 = 0, $vararg_lifetime_bitcast28 = 0, $vararg_lifetime_bitcast3 = 0, $vararg_lifetime_bitcast32 = 0, $vararg_lifetime_bitcast46 = 0, $vararg_lifetime_bitcast51 = 0, $vararg_lifetime_bitcast7 = 0, $vararg_ptr = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0;
 var $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, stop = 0, u$10 = 0, u$28 = 0;
 var u$39 = 0, u$4 = 0, u$45 = 0, u$76 = 0, u$84 = 0, u$91 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $vararg_buffer50 = sp;
 $vararg_lifetime_bitcast51 = $vararg_buffer50;
 $vararg_buffer45 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast46 = $vararg_buffer45;
 $vararg_buffer31 = STACKTOP; STACKTOP = STACKTOP + 48|0;
 $vararg_lifetime_bitcast32 = $vararg_buffer31;
 $vararg_buffer27 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast28 = $vararg_buffer27;
 $vararg_buffer23 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast24 = $vararg_buffer23;
 $vararg_buffer19 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast20 = $vararg_buffer19;
 $vararg_buffer15 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast16 = $vararg_buffer15;
 $vararg_buffer6 = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $vararg_lifetime_bitcast7 = $vararg_buffer6;
 $vararg_buffer2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast3 = $vararg_buffer2;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 
 
 
 
 
 
 $mat = STACKTOP; STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $fileName;
 $3 = $1;
 $expanded = _stderr;
 $4 = HEAP32[_stderr>>2]|0;
 $5 = $2;
 
 $gep_int = $vararg_buffer;
 $vararg_ptr = $gep_int;
 HEAP32[$vararg_ptr>>2] = $5;
 $expanded55 = 24;
 $vararg_func = $expanded55;
 $gep_int82 = 352;
 $expanded56 = $gep_int82;
 u$4 = _fprintf($4|0,$expanded56|0,$vararg_buffer|0)|0;
 
 $6 = $2;
 $gep_int83 = 376;
 $expanded57 = $gep_int83;
 $7 = _fopen($6|0,$expanded57|0)|0;
 $f = $7;
 $8 = $f;
 $9 = ($8|0)!=(0);
 
 if (!($9)) {
  $expanded58 = _stderr;
  $10 = HEAP32[_stderr>>2]|0;
  $11 = $2;
  
  $gep_int84 = $vararg_buffer2;
  $vararg_ptr4 = $gep_int84;
  HEAP32[$vararg_ptr4>>2] = $11;
  $expanded59 = 24;
  $vararg_func5 = $expanded59;
  $gep_int85 = 384;
  $expanded60 = $gep_int85;
  u$10 = _fprintf($10|0,$expanded60|0,$vararg_buffer2|0)|0;
  
  _exit(-1);
  // unreachable
 }
 $12 = __Znwj(60)|0;
 $13 = $12;
 $14 = $13;
 dest=$14+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
 $gep_int86 = $3;
 $gep = (($gep_int86) + 532)|0;
 $15 = $gep;
 HEAP32[$15>>2] = $13;
 $16 = $f;
 $gep_int87 = $3;
 $gep88 = (($gep_int87) + 532)|0;
 $17 = $gep88;
 $18 = HEAP32[$17>>2]|0;
 $gep_int89 = $18;
 $19 = $gep_int89;
 $gep_int90 = $19;
 $20 = $gep_int90;
 $gep_int91 = $3;
 $gep92 = (($gep_int91) + 532)|0;
 $21 = $gep92;
 $22 = HEAP32[$21>>2]|0;
 $gep_int93 = $22;
 $23 = $gep_int93;
 $gep_int94 = $23;
 $gep95 = (($gep_int94) + 4)|0;
 $24 = $gep95;
 $gep_int96 = $3;
 $gep97 = (($gep_int96) + 532)|0;
 $25 = $gep97;
 $26 = HEAP32[$25>>2]|0;
 $gep_int98 = $26;
 $27 = $gep_int98;
 $gep_int99 = $27;
 $gep100 = (($gep_int99) + 8)|0;
 $28 = $gep100;
 $gep_int101 = $3;
 $gep102 = (($gep_int101) + 532)|0;
 $29 = $gep102;
 $30 = HEAP32[$29>>2]|0;
 $gep_int103 = $30;
 $gep104 = (($gep_int103) + 12)|0;
 $31 = $gep104;
 $gep_int105 = $31;
 $32 = $gep_int105;
 $gep_int106 = $3;
 $gep107 = (($gep_int106) + 532)|0;
 $33 = $gep107;
 $34 = HEAP32[$33>>2]|0;
 $gep_int108 = $34;
 $gep109 = (($gep_int108) + 12)|0;
 $35 = $gep109;
 $gep_int110 = $35;
 $gep111 = (($gep_int110) + 4)|0;
 $36 = $gep111;
 $gep_int112 = $3;
 $gep113 = (($gep_int112) + 532)|0;
 $37 = $gep113;
 $38 = HEAP32[$37>>2]|0;
 $gep_int114 = $38;
 $gep115 = (($gep_int114) + 12)|0;
 $39 = $gep115;
 $gep_int116 = $39;
 $gep117 = (($gep_int116) + 8)|0;
 $40 = $gep117;
 
 $gep_int118 = $vararg_buffer6;
 $vararg_ptr8 = $gep_int118;
 HEAP32[$vararg_ptr8>>2] = $20;
 $gep_int119 = $vararg_buffer6;
 $gep120 = (($gep_int119) + 4)|0;
 $vararg_ptr9 = $gep120;
 HEAP32[$vararg_ptr9>>2] = $24;
 $gep_int121 = $vararg_buffer6;
 $gep122 = (($gep_int121) + 8)|0;
 $vararg_ptr10 = $gep122;
 HEAP32[$vararg_ptr10>>2] = $28;
 $gep_int123 = $vararg_buffer6;
 $gep124 = (($gep_int123) + 12)|0;
 $vararg_ptr11 = $gep124;
 HEAP32[$vararg_ptr11>>2] = $32;
 $gep_int125 = $vararg_buffer6;
 $gep126 = (($gep_int125) + 16)|0;
 $vararg_ptr12 = $gep126;
 HEAP32[$vararg_ptr12>>2] = $36;
 $gep_int127 = $vararg_buffer6;
 $gep128 = (($gep_int127) + 20)|0;
 $vararg_ptr13 = $gep128;
 HEAP32[$vararg_ptr13>>2] = $40;
 $expanded61 = 25;
 $vararg_func14 = $expanded61;
 $gep_int129 = 416;
 $expanded62 = $gep_int129;
 $41 = _fscanf($16|0,$expanded62|0,$vararg_buffer6|0)|0;
 
 $c = $41;
 $42 = $c;
 $43 = ($42|0)!=(6);
 
 if ($43) {
  $expanded63 = _stderr;
  $44 = HEAP32[_stderr>>2]|0;
  $45 = $c;
  
  $gep_int130 = $vararg_buffer15;
  $vararg_ptr17 = $gep_int130;
  HEAP32[$vararg_ptr17>>2] = $45;
  $expanded64 = 24;
  $vararg_func18 = $expanded64;
  $gep_int131 = 448;
  $expanded65 = $gep_int131;
  u$28 = _fprintf($44|0,$expanded65|0,$vararg_buffer15|0)|0;
  
  _exit(-1);
  // unreachable
 }
 $46 = $f;
 $gep_int132 = $3;
 $gep133 = (($gep_int132) + 540)|0;
 $47 = $gep133;
 
 $gep_int134 = $vararg_buffer19;
 $vararg_ptr21 = $gep_int134;
 HEAP32[$vararg_ptr21>>2] = $47;
 $expanded66 = 25;
 $vararg_func22 = $expanded66;
 $gep_int135 = 488;
 $expanded67 = $gep_int135;
 $48 = _fscanf($46|0,$expanded67|0,$vararg_buffer19|0)|0;
 
 $c = $48;
 $49 = $c;
 $50 = ($49|0)!=(1);
 
 if ($50) {
  $expanded68 = _stderr;
  $51 = HEAP32[_stderr>>2]|0;
  $52 = $c;
  
  $gep_int136 = $vararg_buffer23;
  $vararg_ptr25 = $gep_int136;
  HEAP32[$vararg_ptr25>>2] = $52;
  $expanded69 = 24;
  $vararg_func26 = $expanded69;
  $gep_int137 = 504;
  $expanded70 = $gep_int137;
  u$39 = _fprintf($51|0,$expanded70|0,$vararg_buffer23|0)|0;
  
  _exit(-1);
  // unreachable
 }
 $expanded71 = _stderr;
 $53 = HEAP32[_stderr>>2]|0;
 $gep_int138 = $3;
 $gep139 = (($gep_int138) + 540)|0;
 $54 = $gep139;
 $55 = HEAP32[$54>>2]|0;
 
 $gep_int140 = $vararg_buffer27;
 $vararg_ptr29 = $gep_int140;
 HEAP32[$vararg_ptr29>>2] = $55;
 $expanded72 = 24;
 $vararg_func30 = $expanded72;
 $gep_int141 = 544;
 $expanded73 = $gep_int141;
 u$45 = _fprintf($53|0,$expanded73|0,$vararg_buffer27|0)|0;
 
 $gep_int142 = $3;
 $gep143 = (($gep_int142) + 540)|0;
 $56 = $gep143;
 $57 = HEAP32[$56>>2]|0;
 $$arith = ($57*44)|0;
 $$overflow = ($57>>>0)>(97612893);
 $58 = $$overflow ? -1 : $$arith;
 $59 = __Znaj($58)|0;
 $60 = $59;
 $gep_int144 = $3;
 $gep145 = (($gep_int144) + 536)|0;
 $61 = $gep145;
 HEAP32[$61>>2] = $60;
 $i = 0;
 
 while(1) {
  $62 = $i;
  $gep_int146 = $3;
  $gep147 = (($gep_int146) + 540)|0;
  $63 = $gep147;
  $64 = HEAP32[$63>>2]|0;
  $65 = ($62>>>0)<($64>>>0);
  
  if (!($65)) {
   label = 18;
   break;
  }
  $66 = $i;
  $gep_int148 = $3;
  $gep149 = (($gep_int148) + 536)|0;
  $67 = $gep149;
  $68 = HEAP32[$67>>2]|0;
  $gep_int150 = $68;
  $gep_array = ($66*44)|0;
  $gep151 = (($gep_int150) + ($gep_array))|0;
  $69 = $gep151;
  $s = $69;
  $70 = $f;
  $71 = $s;
  $gep_int152 = $71;
  $72 = $gep_int152;
  $73 = $s;
  $gep_int153 = $73;
  $gep154 = (($gep_int153) + 4)|0;
  $74 = $gep154;
  $gep_int155 = $74;
  $75 = $gep_int155;
  $76 = $s;
  $gep_int156 = $76;
  $gep157 = (($gep_int156) + 4)|0;
  $77 = $gep157;
  $gep_int158 = $77;
  $gep159 = (($gep_int158) + 4)|0;
  $78 = $gep159;
  $79 = $s;
  $gep_int160 = $79;
  $gep161 = (($gep_int160) + 4)|0;
  $80 = $gep161;
  $gep_int162 = $80;
  $gep163 = (($gep_int162) + 8)|0;
  $81 = $gep163;
  $82 = $s;
  $gep_int164 = $82;
  $gep165 = (($gep_int164) + 16)|0;
  $83 = $gep165;
  $gep_int166 = $83;
  $84 = $gep_int166;
  $85 = $s;
  $gep_int167 = $85;
  $gep168 = (($gep_int167) + 16)|0;
  $86 = $gep168;
  $gep_int169 = $86;
  $gep170 = (($gep_int169) + 4)|0;
  $87 = $gep170;
  $88 = $s;
  $gep_int171 = $88;
  $gep172 = (($gep_int171) + 16)|0;
  $89 = $gep172;
  $gep_int173 = $89;
  $gep174 = (($gep_int173) + 8)|0;
  $90 = $gep174;
  $91 = $s;
  $gep_int175 = $91;
  $gep176 = (($gep_int175) + 28)|0;
  $92 = $gep176;
  $gep_int177 = $92;
  $93 = $gep_int177;
  $94 = $s;
  $gep_int178 = $94;
  $gep179 = (($gep_int178) + 28)|0;
  $95 = $gep179;
  $gep_int180 = $95;
  $gep181 = (($gep_int180) + 4)|0;
  $96 = $gep181;
  $97 = $s;
  $gep_int182 = $97;
  $gep183 = (($gep_int182) + 28)|0;
  $98 = $gep183;
  $gep_int184 = $98;
  $gep185 = (($gep_int184) + 8)|0;
  $99 = $gep185;
  
  $gep_int186 = $vararg_buffer31;
  $vararg_ptr33 = $gep_int186;
  HEAP32[$vararg_ptr33>>2] = $72;
  $gep_int187 = $vararg_buffer31;
  $gep188 = (($gep_int187) + 4)|0;
  $vararg_ptr34 = $gep188;
  HEAP32[$vararg_ptr34>>2] = $75;
  $gep_int189 = $vararg_buffer31;
  $gep190 = (($gep_int189) + 8)|0;
  $vararg_ptr35 = $gep190;
  HEAP32[$vararg_ptr35>>2] = $78;
  $gep_int191 = $vararg_buffer31;
  $gep192 = (($gep_int191) + 12)|0;
  $vararg_ptr36 = $gep192;
  HEAP32[$vararg_ptr36>>2] = $81;
  $gep_int193 = $vararg_buffer31;
  $gep194 = (($gep_int193) + 16)|0;
  $vararg_ptr37 = $gep194;
  HEAP32[$vararg_ptr37>>2] = $84;
  $gep_int195 = $vararg_buffer31;
  $gep196 = (($gep_int195) + 20)|0;
  $vararg_ptr38 = $gep196;
  HEAP32[$vararg_ptr38>>2] = $87;
  $gep_int197 = $vararg_buffer31;
  $gep198 = (($gep_int197) + 24)|0;
  $vararg_ptr39 = $gep198;
  HEAP32[$vararg_ptr39>>2] = $90;
  $gep_int199 = $vararg_buffer31;
  $gep200 = (($gep_int199) + 28)|0;
  $vararg_ptr40 = $gep200;
  HEAP32[$vararg_ptr40>>2] = $93;
  $gep_int201 = $vararg_buffer31;
  $gep202 = (($gep_int201) + 32)|0;
  $vararg_ptr41 = $gep202;
  HEAP32[$vararg_ptr41>>2] = $96;
  $gep_int203 = $vararg_buffer31;
  $gep204 = (($gep_int203) + 36)|0;
  $vararg_ptr42 = $gep204;
  HEAP32[$vararg_ptr42>>2] = $99;
  $gep_int205 = $vararg_buffer31;
  $gep206 = (($gep_int205) + 40)|0;
  $vararg_ptr43 = $gep206;
  HEAP32[$vararg_ptr43>>2] = $mat;
  $expanded74 = 25;
  $vararg_func44 = $expanded74;
  $gep_int207 = 560;
  $expanded75 = $gep_int207;
  $100 = _fscanf($70|0,$expanded75|0,$vararg_buffer31|0)|0;
  
  $c1 = $100;
  $101 = HEAP32[$mat>>2]|0;
  
  if ((($101|0) == 0)) {
   $102 = $s;
   $gep_int208 = $102;
   $gep209 = (($gep_int208) + 40)|0;
   $103 = $gep209;
   HEAP32[$103>>2] = 0;
   
  } else if ((($101|0) == 1)) {
   $104 = $s;
   $gep_int210 = $104;
   $gep211 = (($gep_int210) + 40)|0;
   $105 = $gep211;
   HEAP32[$105>>2] = 1;
   
  } else if ((($101|0) == 2)) {
   $106 = $s;
   $gep_int212 = $106;
   $gep213 = (($gep_int212) + 40)|0;
   $107 = $gep213;
   HEAP32[$107>>2] = 2;
   
  } else {
   label = 13;
   break;
  }
  $111 = $c1;
  $112 = ($111|0)!=(11);
  
  if ($112) {
   label = 15;
   break;
  }
  
  $116 = $i;
  $117 = (($116) + 1)|0;
  $i = $117;
  
 }
 if ((label|0) == 13) {
  $expanded76 = _stderr;
  $108 = HEAP32[_stderr>>2]|0;
  $109 = $i;
  $110 = HEAP32[$mat>>2]|0;
  
  $gep_int214 = $vararg_buffer45;
  $vararg_ptr47 = $gep_int214;
  HEAP32[$vararg_ptr47>>2] = $109;
  $gep_int215 = $vararg_buffer45;
  $gep216 = (($gep_int215) + 4)|0;
  $vararg_ptr48 = $gep216;
  HEAP32[$vararg_ptr48>>2] = $110;
  $expanded77 = 24;
  $vararg_func49 = $expanded77;
  $gep_int217 = 608;
  $expanded78 = $gep_int217;
  u$76 = _fprintf($108|0,$expanded78|0,$vararg_buffer45|0)|0;
  
  _exit(-1);
  // unreachable
 }
 else if ((label|0) == 15) {
  $expanded79 = _stderr;
  $113 = HEAP32[_stderr>>2]|0;
  $114 = $i;
  $115 = $c1;
  
  $gep_int218 = $vararg_buffer50;
  $vararg_ptr52 = $gep_int218;
  HEAP32[$vararg_ptr52>>2] = $114;
  $gep_int219 = $vararg_buffer50;
  $gep220 = (($gep_int219) + 4)|0;
  $vararg_ptr53 = $gep220;
  HEAP32[$vararg_ptr53>>2] = $115;
  $expanded80 = 24;
  $vararg_func54 = $expanded80;
  $gep_int221 = 664;
  $expanded81 = $gep_int221;
  u$84 = _fprintf($113|0,$expanded81|0,$vararg_buffer50|0)|0;
  
  _exit(-1);
  // unreachable
 }
 else if ((label|0) == 18) {
  $118 = $f;
  u$91 = _fclose($118|0)|0;
  STACKTOP = sp;return;
 }
}
function __ZN12RenderConfig11SetUpOpenCLEbbj($this,$useCPUs,$useGPUs,$forceGPUWorkSize) {
 $this = $this|0;
 $useCPUs = $useCPUs|0;
 $useGPUs = $useGPUs|0;
 $forceGPUWorkSize = $forceGPUWorkSize|0;
 var $$arith = 0, $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$overflow = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $devices = 0, $expanded = 0, $expanded10 = 0;
 var $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0;
 var $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0;
 var $gep = 0, $gep101 = 0, $gep70 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep82 = 0, $gep85 = 0, $gep88 = 0, $gep90 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep98 = 0, $gep_array = 0, $gep_array100 = 0, $gep_int = 0, $gep_int46 = 0, $gep_int47 = 0, $gep_int48 = 0;
 var $gep_int49 = 0, $gep_int50 = 0, $gep_int51 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int55 = 0, $gep_int56 = 0, $gep_int57 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int60 = 0, $gep_int61 = 0, $gep_int62 = 0, $gep_int63 = 0, $gep_int64 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int67 = 0, $gep_int68 = 0, $gep_int69 = 0;
 var $gep_int71 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int99 = 0, $i = 0, $i1 = 0, $i2 = 0;
 var $i3 = 0, $i4 = 0, $platform = 0, $platforms = 0, $selectedDevices = 0, $stype = 0, $type = 0, label = 0, sp = 0, u$115 = 0, u$127 = 0, u$134 = 0, u$148 = 0, u$162 = 0, u$177 = 0, u$195 = 0, u$24 = 0, u$271 = 0, u$287 = 0, u$295 = 0;
 var u$347 = 0, u$55 = 0, u$6 = 0, u$68 = 0, u$82 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 616|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $platforms = sp + 352|0;
 
 
 
 $platform = sp + 424|0;
 $devices = sp + 432|0;
 $selectedDevices = sp + 480|0;
 
 
 $stype = sp + 544|0;
 
 $45 = sp + 568|0;
 
 $47 = sp + 592|0;
 
 
 $39 = $this;
 $48 = $useCPUs&1;
 $40 = $48;
 $49 = $useGPUs&1;
 $41 = $49;
 $42 = $forceGPUWorkSize;
 $50 = $39;
 __ZN2cl6vectorINS_8PlatformELj10EEC1Ev($platforms);
 __THREW__ = 0;
 u$6 = invoke_ii(74,$platforms|0)|0;
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 
 L1: do {
  if ($52) {
   label = 13;
  } else {
   $i = 0;
   
   while(1) {
    $53 = $i;
    __THREW__ = 0;
    $54 = invoke_ii(75,$platforms|0)|0;
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    
    if ($56) {
     label = 13;
     break L1;
    }
    $57 = ($53>>>0)<($54>>>0);
    
    if (!($57)) {
     break;
    }
    __THREW__ = 0;
    $expanded = 3824;
    $gep_int = 696;
    $expanded5 = $gep_int;
    $58 = invoke_iii(17,$expanded|0,$expanded5|0)|0;
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    
    if ($60) {
     label = 13;
     break L1;
    }
    $61 = $i;
    __THREW__ = 0;
    $62 = invoke_iii(20,$58|0,$61|0)|0;
    $63 = __THREW__; __THREW__ = 0;
    $64 = $63&1;
    
    if ($64) {
     label = 13;
     break L1;
    }
    __THREW__ = 0;
    $gep_int46 = 720;
    $expanded6 = $gep_int46;
    $65 = invoke_iii(17,$62|0,$expanded6|0)|0;
    $66 = __THREW__; __THREW__ = 0;
    $67 = $66&1;
    
    if ($67) {
     label = 13;
     break L1;
    }
    __THREW__ = 0;
    $gep_int47 = 728;
    $expanded7 = $gep_int47;
    $68 = invoke_iii(17,$65|0,$expanded7|0)|0;
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    
    if ($70) {
     label = 13;
     break L1;
    }
    $37 = $68;
    $38 = 67;
    $71 = $37;
    $72 = $38;
    __THREW__ = 0;
    u$24 = invoke_ii($72|0,$71|0)|0;
    $73 = __THREW__; __THREW__ = 0;
    $74 = $73&1;
    
    if ($74) {
     label = 13;
     break L1;
    }
    
    
    $75 = $i;
    $76 = (($75) + 1)|0;
    $i = $76;
    
   }
   __THREW__ = 0;
   $79 = invoke_ii(75,$platforms|0)|0;
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   
   if ($81) {
    label = 13;
    break;
   }
   $82 = ($79|0)==(0);
   
   if ($82) {
    $83 = ___cxa_allocate_exception(8)|0;
    $84 = $83;
    __THREW__ = 0;
    $gep_int48 = 744;
    $expanded9 = $gep_int48;
    invoke_vii(44,$84|0,$expanded9|0);
    $85 = __THREW__; __THREW__ = 0;
    $86 = $85&1;
    
    if ($86) {
     $expanded12 = 69;
     $89 = ___cxa_find_matching_catch(-1,-1)|0;
     $90 = tempRet0;
     $43 = $89;
     $44 = $90;
     ___cxa_free_exception($83|0);
     
     break;
    }
    __THREW__ = 0;
    $expanded10 = 5392;
    $expanded11 = 35;
    invoke_viii(5,$83|0,$expanded10|0,$expanded11|0);
    $87 = __THREW__; __THREW__ = 0;
    $88 = $87&1;
    
    if ($88) {
     label = 13;
     break;
    }
    // unreachable
   }
   __THREW__ = 0;
   $91 = invoke_iii(21,$platforms|0,0)|0;
   $92 = __THREW__; __THREW__ = 0;
   $93 = $92&1;
   
   if ($93) {
    label = 13;
    break;
   }
   __THREW__ = 0;
   invoke_vii(45,$platform|0,$91|0);
   $94 = __THREW__; __THREW__ = 0;
   $95 = $94&1;
   
   if ($95) {
    label = 13;
    break;
   }
   __THREW__ = 0;
   invoke_vi(137,$devices|0);
   $96 = __THREW__; __THREW__ = 0;
   $97 = $96&1;
   
   L25: do {
    if ($97) {
     label = 40;
    } else {
     __THREW__ = 0;
     u$55 = invoke_iiiii(6,$platform|0,-1,0,$devices|0)|0;
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     
     L27: do {
      if ($99) {
       label = 41;
      } else {
       __THREW__ = 0;
       invoke_vi(137,$selectedDevices|0);
       $100 = __THREW__; __THREW__ = 0;
       $101 = $100&1;
       
       if ($101) {
        label = 41;
        break;
       }
       $i1 = 0;
       
       while(1) {
        $102 = $i1;
        __THREW__ = 0;
        $103 = invoke_ii(76,$devices|0)|0;
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        
        if ($105) {
         label = 42;
         break;
        }
        $106 = ($102>>>0)<($103>>>0);
        
        if (!($106)) {
         label = 85;
         break;
        }
        $107 = $i1;
        __THREW__ = 0;
        $108 = invoke_iii(22,$devices|0,$107|0)|0;
        $109 = __THREW__; __THREW__ = 0;
        $110 = $109&1;
        
        if ($110) {
         label = 42;
         break;
        }
        __THREW__ = 0;
        $111 = invoke_iii(23,$108|0,0)|0;
        u$68 = tempRet0;
        $112 = __THREW__; __THREW__ = 0;
        $113 = $112&1;
        
        if ($113) {
         label = 42;
         break;
        }
        $type = $111;
        __THREW__ = 0;
        $expanded13 = 3824;
        $gep_int49 = 792;
        $expanded14 = $gep_int49;
        $114 = invoke_iii(17,$expanded13|0,$expanded14|0)|0;
        $115 = __THREW__; __THREW__ = 0;
        $116 = $115&1;
        
        if ($116) {
         label = 42;
         break;
        }
        $117 = $i1;
        __THREW__ = 0;
        $118 = invoke_iii(20,$114|0,$117|0)|0;
        $119 = __THREW__; __THREW__ = 0;
        $120 = $119&1;
        
        if ($120) {
         label = 42;
         break;
        }
        __THREW__ = 0;
        $gep_int50 = 720;
        $expanded15 = $gep_int50;
        $121 = invoke_iii(17,$118|0,$expanded15|0)|0;
        $122 = __THREW__; __THREW__ = 0;
        $123 = $122&1;
        
        if ($123) {
         label = 42;
         break;
        }
        __THREW__ = 0;
        $gep_int51 = 728;
        $expanded16 = $gep_int51;
        $124 = invoke_iii(17,$121|0,$expanded16|0)|0;
        $125 = __THREW__; __THREW__ = 0;
        $126 = $125&1;
        
        if ($126) {
         label = 42;
         break;
        }
        $35 = $124;
        $36 = 67;
        $127 = $35;
        $128 = $36;
        __THREW__ = 0;
        u$82 = invoke_ii($128|0,$127|0)|0;
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        
        if ($130) {
         label = 42;
         break;
        }
        
        $34 = $stype;
        $131 = $34;
        $33 = $131;
        $132 = $33;
        $gep_int52 = $132;
        $133 = $gep_int52;
        $32 = $133;
        $134 = $32;
        $31 = $134;
        $135 = $31;
        $136 = $135;
        $30 = $136;
        $137 = $30;
        $138 = $137;
        $29 = $138;
        $28 = $132;
        $139 = $28;
        $gep_int54 = $139;
        $140 = $gep_int54;
        $27 = $140;
        $141 = $27;
        $142 = $141;
        $26 = $142;
        $143 = $26;
        $gep_int55 = $143;
        $144 = $gep_int55;
        $gep_int56 = $144;
        $145 = $gep_int56;
        $146 = $145;
        $gep_int57 = $145;
        $147 = $gep_int57;
        $__a$i$i$i = $147;
        $__i$i$i$i = 0;
        
        while(1) {
         $148 = $__i$i$i$i;
         $149 = ($148>>>0)<(3);
         
         if (!($149)) {
          break;
         }
         $150 = $__i$i$i$i;
         $151 = $__a$i$i$i;
         $gep_int58 = $151;
         $gep_array = $150<<2;
         $gep = (($gep_int58) + ($gep_array))|0;
         $152 = $gep;
         HEAP32[$152>>2] = 0;
         $153 = $__i$i$i$i;
         $154 = (($153) + 1)|0;
         $__i$i$i$i = $154;
         
        }
        
        $155 = $type;
        
        if ((($155|0) == -1)) {
         $24 = $stype;
         $gep_int59 = 816;
         $expanded20 = $gep_int59;
         $25 = $expanded20;
         $162 = $24;
         $163 = $25;
         __THREW__ = 0;
         u$115 = invoke_iii(24,$162|0,$163|0)|0;
         $164 = __THREW__; __THREW__ = 0;
         $165 = $164&1;
         
         if ($165) {
          label = 46;
          break;
         }
         
         
        } else if ((($155|0) == 1)) {
         $22 = $stype;
         $gep_int60 = 832;
         $expanded22 = $gep_int60;
         $23 = $expanded22;
         $170 = $22;
         $171 = $23;
         __THREW__ = 0;
         u$127 = invoke_iii(24,$170|0,$171|0)|0;
         $172 = __THREW__; __THREW__ = 0;
         $173 = $172&1;
         
         if ($173) {
          label = 46;
          break;
         }
         
         
        } else if ((($155|0) == 2)) {
         $20 = $stype;
         $gep_int61 = 848;
         $expanded23 = $gep_int61;
         $21 = $expanded23;
         $174 = $20;
         $175 = $21;
         __THREW__ = 0;
         u$134 = invoke_iii(24,$174|0,$175|0)|0;
         $176 = __THREW__; __THREW__ = 0;
         $177 = $176&1;
         
         if ($177) {
          label = 46;
          break;
         }
         
         $178 = $40;
         $179 = $178&1;
         
         if ($179) {
          $180 = $i1;
          __THREW__ = 0;
          $181 = invoke_iii(22,$devices|0,$180|0)|0;
          $182 = __THREW__; __THREW__ = 0;
          $183 = $182&1;
          
          if ($183) {
           label = 46;
           break;
          }
          __THREW__ = 0;
          invoke_vii(46,$selectedDevices|0,$181|0);
          $184 = __THREW__; __THREW__ = 0;
          $185 = $184&1;
          
          if ($185) {
           label = 46;
           break;
          }
          
         }
         
        } else if ((($155|0) == 4)) {
         $18 = $stype;
         $gep_int62 = 864;
         $expanded24 = $gep_int62;
         $19 = $expanded24;
         $186 = $18;
         $187 = $19;
         __THREW__ = 0;
         u$148 = invoke_iii(24,$186|0,$187|0)|0;
         $188 = __THREW__; __THREW__ = 0;
         $189 = $188&1;
         
         if ($189) {
          label = 46;
          break;
         }
         
         $190 = $41;
         $191 = $190&1;
         
         if ($191) {
          $192 = $i1;
          __THREW__ = 0;
          $193 = invoke_iii(22,$devices|0,$192|0)|0;
          $194 = __THREW__; __THREW__ = 0;
          $195 = $194&1;
          
          if ($195) {
           label = 46;
           break;
          }
          __THREW__ = 0;
          invoke_vii(46,$selectedDevices|0,$193|0);
          $196 = __THREW__; __THREW__ = 0;
          $197 = $196&1;
          
          if ($197) {
           label = 46;
           break;
          }
          
         }
         
        } else {
         $16 = $stype;
         $gep_int63 = 880;
         $expanded25 = $gep_int63;
         $17 = $expanded25;
         $198 = $16;
         $199 = $17;
         __THREW__ = 0;
         u$162 = invoke_iii(24,$198|0,$199|0)|0;
         $200 = __THREW__; __THREW__ = 0;
         $201 = $200&1;
         
         if ($201) {
          label = 46;
          break;
         }
         
         
        }
        __THREW__ = 0;
        $expanded26 = 3824;
        $gep_int64 = 896;
        $expanded27 = $gep_int64;
        $202 = invoke_iii(17,$expanded26|0,$expanded27|0)|0;
        $203 = __THREW__; __THREW__ = 0;
        $204 = $203&1;
        
        if ($204) {
         label = 46;
         break;
        }
        $205 = $i1;
        __THREW__ = 0;
        $206 = invoke_iii(20,$202|0,$205|0)|0;
        $207 = __THREW__; __THREW__ = 0;
        $208 = $207&1;
        
        if ($208) {
         label = 46;
         break;
        }
        __THREW__ = 0;
        $gep_int65 = 720;
        $expanded28 = $gep_int65;
        $209 = invoke_iii(17,$206|0,$expanded28|0)|0;
        $210 = __THREW__; __THREW__ = 0;
        $211 = $210&1;
        
        if ($211) {
         label = 46;
         break;
        }
        __THREW__ = 0;
        $212 = invoke_iii(25,$209|0,$stype|0)|0;
        $213 = __THREW__; __THREW__ = 0;
        $214 = $213&1;
        
        if ($214) {
         label = 46;
         break;
        }
        $14 = $212;
        $15 = 67;
        $215 = $14;
        $216 = $15;
        __THREW__ = 0;
        u$177 = invoke_ii($216|0,$215|0)|0;
        $217 = __THREW__; __THREW__ = 0;
        $218 = $217&1;
        
        if ($218) {
         label = 46;
         break;
        }
        
        __THREW__ = 0;
        $expanded29 = 3824;
        $gep_int66 = 920;
        $expanded30 = $gep_int66;
        $219 = invoke_iii(17,$expanded29|0,$expanded30|0)|0;
        $220 = __THREW__; __THREW__ = 0;
        $221 = $220&1;
        
        if ($221) {
         label = 46;
         break;
        }
        $222 = $i1;
        __THREW__ = 0;
        $223 = invoke_iii(20,$219|0,$222|0)|0;
        $224 = __THREW__; __THREW__ = 0;
        $225 = $224&1;
        
        if ($225) {
         label = 46;
         break;
        }
        __THREW__ = 0;
        $gep_int67 = 720;
        $expanded31 = $gep_int67;
        $226 = invoke_iii(17,$223|0,$expanded31|0)|0;
        $227 = __THREW__; __THREW__ = 0;
        $228 = $227&1;
        
        if ($228) {
         label = 46;
         break;
        }
        $229 = $i1;
        __THREW__ = 0;
        $230 = invoke_iii(22,$devices|0,$229|0)|0;
        $231 = __THREW__; __THREW__ = 0;
        $232 = $231&1;
        
        if ($232) {
         label = 46;
         break;
        }
        __THREW__ = 0;
        $233 = invoke_iii(26,$230|0,0)|0;
        $234 = __THREW__; __THREW__ = 0;
        $235 = $234&1;
        
        if ($235) {
         label = 46;
         break;
        }
        __THREW__ = 0;
        $236 = invoke_iii(20,$226|0,$233|0)|0;
        $237 = __THREW__; __THREW__ = 0;
        $238 = $237&1;
        
        if ($238) {
         label = 46;
         break;
        }
        $12 = $236;
        $13 = 67;
        $239 = $12;
        $240 = $13;
        __THREW__ = 0;
        u$195 = invoke_ii($240|0,$239|0)|0;
        $241 = __THREW__; __THREW__ = 0;
        $242 = $241&1;
        
        if ($242) {
         label = 46;
         break;
        }
        
        __THREW__ = 0;
        invoke_vi(131,$stype|0);
        $243 = __THREW__; __THREW__ = 0;
        $244 = $243&1;
        
        if ($244) {
         label = 42;
         break;
        }
        
        $245 = $i1;
        $246 = (($245) + 1)|0;
        $i1 = $246;
        
       }
       L90: do {
        if ((label|0) == 46) {
         $expanded21 = 69;
         $166 = ___cxa_find_matching_catch(-1,-1)|0;
         $167 = tempRet0;
         $43 = $166;
         $44 = $167;
         __THREW__ = 0;
         invoke_vi(131,$stype|0);
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         
         if ($169) {
          $expanded45 = 69;
          $390 = ___cxa_find_matching_catch(-1,-1,0)|0;
          u$347 = tempRet0;
          ___clang_call_terminate($390);
          // unreachable
         } else {
          
          break;
         }
        }
        else if ((label|0) == 85) {
         __THREW__ = 0;
         $247 = invoke_ii(76,$selectedDevices|0)|0;
         $248 = __THREW__; __THREW__ = 0;
         $249 = $248&1;
         
         if ($249) {
          label = 42;
          break;
         }
         $250 = ($247|0)==(0);
         
         if ($250) {
          $251 = ___cxa_allocate_exception(8)|0;
          $252 = $251;
          __THREW__ = 0;
          $gep_int68 = 944;
          $expanded32 = $gep_int68;
          invoke_vii(44,$252|0,$expanded32|0);
          $253 = __THREW__; __THREW__ = 0;
          $254 = $253&1;
          
          if ($254) {
           $expanded35 = 69;
           $257 = ___cxa_find_matching_catch(-1,-1)|0;
           $258 = tempRet0;
           $43 = $257;
           $44 = $258;
           ___cxa_free_exception($251|0);
           
           break;
          }
          __THREW__ = 0;
          $expanded33 = 5392;
          $expanded34 = 35;
          invoke_viii(5,$251|0,$expanded33|0,$expanded34|0);
          $255 = __THREW__; __THREW__ = 0;
          $256 = $255&1;
          
          if ($256) {
           label = 42;
           break;
          }
          // unreachable
         }
         $i2 = 0;
         
         while(1) {
          $259 = $i2;
          __THREW__ = 0;
          $260 = invoke_ii(76,$selectedDevices|0)|0;
          $261 = __THREW__; __THREW__ = 0;
          $262 = $261&1;
          
          if ($262) {
           label = 42;
           break L90;
          }
          $263 = ($259>>>0)<($260>>>0);
          
          if (!($263)) {
           label = 109;
           break;
          }
          $gep_int69 = $50;
          $gep70 = (($gep_int69) + 548)|0;
          $264 = $gep70;
          __THREW__ = 0;
          $265 = invoke_ii(70,104)|0;
          $266 = __THREW__; __THREW__ = 0;
          $267 = $266&1;
          
          if ($267) {
           label = 42;
           break L90;
          }
          $$expand_i1_val = 1;
          $46 = $$expand_i1_val;
          $268 = $265;
          $269 = $i2;
          __THREW__ = 0;
          $270 = invoke_iii(22,$selectedDevices|0,$269|0)|0;
          $271 = __THREW__; __THREW__ = 0;
          $272 = $271&1;
          
          if ($272) {
           label = 103;
           break;
          }
          $10 = $45;
          $gep_int71 = 992;
          $expanded36 = $gep_int71;
          $11 = $expanded36;
          $273 = $10;
          $274 = $11;
          $8 = $273;
          $9 = $274;
          $275 = $8;
          $gep_int72 = $275;
          $276 = $gep_int72;
          $7 = $276;
          $277 = $7;
          $6 = $277;
          $278 = $6;
          $279 = $278;
          $5 = $279;
          $280 = $5;
          $281 = $280;
          $4 = $281;
          $282 = $9;
          $283 = $9;
          $3 = $283;
          $284 = $3;
          __THREW__ = 0;
          $285 = invoke_ii(71,$284|0)|0;
          $286 = __THREW__; __THREW__ = 0;
          $287 = $286&1;
          
          if ($287) {
           label = 103;
           break;
          }
          __THREW__ = 0;
          invoke_viii(3,$275|0,$282|0,$285|0);
          $288 = __THREW__; __THREW__ = 0;
          $289 = $288&1;
          
          if ($289) {
           label = 103;
           break;
          }
          
          $290 = $42;
          $gep_int74 = $50;
          $gep75 = (($gep_int74) + 532)|0;
          $291 = $gep75;
          $292 = HEAP32[$291>>2]|0;
          $gep_int76 = $50;
          $gep77 = (($gep_int76) + 536)|0;
          $293 = $gep77;
          $294 = HEAP32[$293>>2]|0;
          $gep_int78 = $50;
          $gep79 = (($gep_int78) + 540)|0;
          $295 = $gep79;
          $296 = HEAP32[$295>>2]|0;
          __THREW__ = 0;
          invoke_viiiiiii(41,$268|0,$270|0,$45|0,$290|0,$292|0,$294|0,$296|0);
          $297 = __THREW__; __THREW__ = 0;
          $298 = $297&1;
          
          if ($298) {
           label = 104;
           break;
          }
          $$expand_i1_val3 = 0;
          $46 = $$expand_i1_val3;
          HEAP32[$47>>2] = $268;
          __THREW__ = 0;
          invoke_vii(47,$264|0,$47|0);
          $299 = __THREW__; __THREW__ = 0;
          $300 = $299&1;
          
          if ($300) {
           label = 104;
           break;
          }
          __THREW__ = 0;
          invoke_vi(131,$45|0);
          $301 = __THREW__; __THREW__ = 0;
          $302 = $301&1;
          
          if ($302) {
           label = 103;
           break;
          }
          
          $303 = $i2;
          $304 = (($303) + 1)|0;
          $i2 = $304;
          
         }
         do {
          if ((label|0) == 103) {
           $expanded37 = 69;
           $305 = ___cxa_find_matching_catch(-1,-1)|0;
           $306 = tempRet0;
           $43 = $305;
           $44 = $306;
           
          }
          else if ((label|0) == 104) {
           $expanded38 = 69;
           $307 = ___cxa_find_matching_catch(-1,-1)|0;
           $308 = tempRet0;
           $43 = $307;
           $44 = $308;
           __THREW__ = 0;
           invoke_vi(131,$45|0);
           $309 = __THREW__; __THREW__ = 0;
           $310 = $309&1;
           
           if ($310) {
            $expanded45 = 69;
            $390 = ___cxa_find_matching_catch(-1,-1,0)|0;
            u$347 = tempRet0;
            ___clang_call_terminate($390);
            // unreachable
           } else {
            
            break;
           }
          }
          else if ((label|0) == 109) {
           __THREW__ = 0;
           $expanded39 = 3824;
           $gep_int80 = 1016;
           $expanded40 = $gep_int80;
           u$271 = invoke_iii(17,$expanded39|0,$expanded40|0)|0;
           $312 = __THREW__; __THREW__ = 0;
           $313 = $312&1;
           
           if ($313) {
            label = 42;
            break L90;
           }
           $i3 = 0;
           
           while(1) {
            $314 = $i3;
            $gep_int81 = $50;
            $gep82 = (($gep_int81) + 548)|0;
            $315 = $gep82;
            __THREW__ = 0;
            $316 = invoke_ii(73,$315|0)|0;
            $317 = __THREW__; __THREW__ = 0;
            $318 = $317&1;
            
            if ($318) {
             label = 42;
             break L90;
            }
            $319 = ($314>>>0)<($316>>>0);
            
            if (!($319)) {
             break;
            }
            __THREW__ = 0;
            $expanded41 = 3824;
            $gep_int83 = 1040;
            $expanded42 = $gep_int83;
            $320 = invoke_iii(17,$expanded41|0,$expanded42|0)|0;
            $321 = __THREW__; __THREW__ = 0;
            $322 = $321&1;
            
            if ($322) {
             label = 42;
             break L90;
            }
            $gep_int84 = $50;
            $gep85 = (($gep_int84) + 548)|0;
            $323 = $gep85;
            $324 = $i3;
            __THREW__ = 0;
            $325 = invoke_iii(27,$323|0,$324|0)|0;
            $326 = __THREW__; __THREW__ = 0;
            $327 = $326&1;
            
            if ($327) {
             label = 42;
             break L90;
            }
            $328 = HEAP32[$325>>2]|0;
            __THREW__ = 0;
            $329 = invoke_ii(77,$328|0)|0;
            $330 = __THREW__; __THREW__ = 0;
            $331 = $330&1;
            
            if ($331) {
             label = 42;
             break L90;
            }
            __THREW__ = 0;
            $332 = invoke_iii(25,$320|0,$329|0)|0;
            $333 = __THREW__; __THREW__ = 0;
            $334 = $333&1;
            
            if ($334) {
             label = 42;
             break L90;
            }
            __THREW__ = 0;
            $gep_int86 = 1048;
            $expanded43 = $gep_int86;
            u$287 = invoke_iii(17,$332|0,$expanded43|0)|0;
            $335 = __THREW__; __THREW__ = 0;
            $336 = $335&1;
            
            if ($336) {
             label = 42;
             break L90;
            }
            
            $337 = $i3;
            $338 = (($337) + 1)|0;
            $i3 = $338;
            
           }
           $expanded44 = 3824;
           $1 = $expanded44;
           $2 = 67;
           $339 = $1;
           $340 = $2;
           __THREW__ = 0;
           u$295 = invoke_ii($340|0,$339|0)|0;
           $341 = __THREW__; __THREW__ = 0;
           $342 = $341&1;
           
           if ($342) {
            label = 42;
            break L90;
           }
           
           
           $gep_int87 = $50;
           $gep88 = (($gep_int87) + 516)|0;
           $343 = $gep88;
           $344 = HEAP32[$343>>2]|0;
           $gep_int89 = $50;
           $gep90 = (($gep_int89) + 520)|0;
           $345 = $gep90;
           $346 = HEAP32[$345>>2]|0;
           $347 = Math_imul($344, $346)|0;
           $$arith = $347<<2;
           $$overflow = ($347>>>0)>(1073741823);
           $348 = $$overflow ? -1 : $$arith;
           __THREW__ = 0;
           $349 = invoke_ii(78,$348|0)|0;
           $350 = __THREW__; __THREW__ = 0;
           $351 = $350&1;
           
           if ($351) {
            label = 42;
            break L90;
           }
           $352 = $349;
           $gep_int91 = $50;
           $gep92 = (($gep_int91) + 528)|0;
           $353 = $gep92;
           HEAP32[$353>>2] = $352;
           $i4 = 0;
           
           while(1) {
            $354 = $i4;
            $gep_int93 = $50;
            $gep94 = (($gep_int93) + 516)|0;
            $355 = $gep94;
            $356 = HEAP32[$355>>2]|0;
            $gep_int95 = $50;
            $gep96 = (($gep_int95) + 520)|0;
            $357 = $gep96;
            $358 = HEAP32[$357>>2]|0;
            $359 = Math_imul($356, $358)|0;
            $360 = ($354>>>0)<($359>>>0);
            
            if (!($360)) {
             break;
            }
            $361 = $i4;
            $362 = $i4;
            $gep_int97 = $50;
            $gep98 = (($gep_int97) + 528)|0;
            $363 = $gep98;
            $364 = HEAP32[$363>>2]|0;
            $gep_int99 = $364;
            $gep_array100 = $362<<2;
            $gep101 = (($gep_int99) + ($gep_array100))|0;
            $365 = $gep101;
            HEAP32[$365>>2] = $361;
            
            $366 = $i4;
            $367 = (($366) + 1)|0;
            $i4 = $367;
            
           }
           __THREW__ = 0;
           invoke_vii(48,$50|0,1);
           $368 = __THREW__; __THREW__ = 0;
           $369 = $368&1;
           
           if ($369) {
            label = 42;
            break L90;
           }
           __THREW__ = 0;
           invoke_vi(138,$50|0);
           $370 = __THREW__; __THREW__ = 0;
           $371 = $370&1;
           
           if ($371) {
            label = 42;
            break L90;
           }
           __THREW__ = 0;
           invoke_vii(49,$50|0,0);
           $372 = __THREW__; __THREW__ = 0;
           $373 = $372&1;
           
           if ($373) {
            label = 42;
            break L90;
           }
           __THREW__ = 0;
           invoke_vi(139,$selectedDevices|0);
           $374 = __THREW__; __THREW__ = 0;
           $375 = $374&1;
           
           if ($375) {
            label = 41;
            break L27;
           }
           __THREW__ = 0;
           invoke_vi(139,$devices|0);
           $376 = __THREW__; __THREW__ = 0;
           $377 = $376&1;
           
           if ($377) {
            label = 40;
            break L25;
           }
           __THREW__ = 0;
           invoke_vi(140,$platform|0);
           $378 = __THREW__; __THREW__ = 0;
           $379 = $378&1;
           
           if ($379) {
            label = 13;
            break L1;
           }
           __ZN2cl6vectorINS_8PlatformELj10EED1Ev($platforms);
           STACKTOP = sp;return;
          }
         } while(0);
         $$pre_trunc = $46;
         $311 = $$pre_trunc&1;
         
         if ($311) {
          __ZdlPv($265);
          
         }
         
        }
       } while(0);
       if ((label|0) == 42) {
        $expanded19 = 69;
        $160 = ___cxa_find_matching_catch(-1,-1)|0;
        $161 = tempRet0;
        $43 = $160;
        $44 = $161;
        
       }
       __THREW__ = 0;
       invoke_vi(139,$selectedDevices|0);
       $380 = __THREW__; __THREW__ = 0;
       $381 = $380&1;
       
       if ($381) {
        $expanded45 = 69;
        $390 = ___cxa_find_matching_catch(-1,-1,0)|0;
        u$347 = tempRet0;
        ___clang_call_terminate($390);
        // unreachable
       } else {
        
        break;
       }
      }
     } while(0);
     if ((label|0) == 41) {
      $expanded18 = 69;
      $158 = ___cxa_find_matching_catch(-1,-1)|0;
      $159 = tempRet0;
      $43 = $158;
      $44 = $159;
      
     }
     __THREW__ = 0;
     invoke_vi(139,$devices|0);
     $382 = __THREW__; __THREW__ = 0;
     $383 = $382&1;
     
     if ($383) {
      $expanded45 = 69;
      $390 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$347 = tempRet0;
      ___clang_call_terminate($390);
      // unreachable
     } else {
      
      break;
     }
    }
   } while(0);
   if ((label|0) == 40) {
    $expanded17 = 69;
    $156 = ___cxa_find_matching_catch(-1,-1)|0;
    $157 = tempRet0;
    $43 = $156;
    $44 = $157;
    
   }
   __THREW__ = 0;
   invoke_vi(140,$platform|0);
   $384 = __THREW__; __THREW__ = 0;
   $385 = $384&1;
   
   if ($385) {
    $expanded45 = 69;
    $390 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$347 = tempRet0;
    ___clang_call_terminate($390);
    // unreachable
   } else {
    
    break;
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $expanded8 = 69;
  $77 = ___cxa_find_matching_catch(-1,-1)|0;
  $78 = tempRet0;
  $43 = $77;
  $44 = $78;
  
 }
 __THREW__ = 0;
 invoke_vi(141,$platforms|0);
 $386 = __THREW__; __THREW__ = 0;
 $387 = $386&1;
 
 if ($387) {
  $expanded45 = 69;
  $390 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$347 = tempRet0;
  ___clang_call_terminate($390);
  // unreachable
 }
 
 $388 = $43;
 $389 = $44;
 ___resumeException($388|0);
 // unreachable
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6vectorIP12RenderDeviceLj10EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN12RenderConfigD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep = 0, $gep11 = 0;
 var $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $i = 0, label = 0, sp = 0, u$51 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $1 = $this;
 $4 = $1;
 $i = 0;
 
 while(1) {
  $5 = $i;
  $gep_int = $4;
  $gep = (($gep_int) + 548)|0;
  $6 = $gep;
  __THREW__ = 0;
  $7 = invoke_ii(73,$6|0)|0;
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  
  if ($9) {
   label = 10;
   break;
  }
  $10 = ($5>>>0)<($7>>>0);
  
  if (!($10)) {
   label = 12;
   break;
  }
  $gep_int4 = $4;
  $gep5 = (($gep_int4) + 548)|0;
  $11 = $gep5;
  $12 = $i;
  __THREW__ = 0;
  $13 = invoke_iii(27,$11|0,$12|0)|0;
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  
  if ($15) {
   label = 10;
   break;
  }
  $16 = HEAP32[$13>>2]|0;
  $17 = ($16|0)==(0);
  
  if (!($17)) {
   __THREW__ = 0;
   invoke_vi(142,$16|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   
   if ($19) {
    label = 11;
    break;
   }
   $20 = $16;
   __ZdlPv($20);
   
  }
  
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
  
 }
 do {
  if ((label|0) == 10) {
   $expanded = 69;
   $23 = ___cxa_find_matching_catch(-1,-1)|0;
   $24 = tempRet0;
   $2 = $23;
   $3 = $24;
   
   label = 21;
  }
  else if ((label|0) == 11) {
   $expanded1 = 69;
   $25 = ___cxa_find_matching_catch(-1,-1)|0;
   $26 = tempRet0;
   $2 = $25;
   $3 = $26;
   $27 = $16;
   __ZdlPv($27);
   
   label = 21;
  }
  else if ((label|0) == 12) {
   $gep_int6 = $4;
   $gep7 = (($gep_int6) + 528)|0;
   $28 = $gep7;
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0);
   
   if (!($30)) {
    $31 = $29;
    __ZdlPv($31);
    
   }
   $gep_int8 = $4;
   $gep9 = (($gep_int8) + 532)|0;
   $32 = $gep9;
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0);
   
   if (!($34)) {
    $35 = $33;
    __ZdlPv($35);
    
   }
   $gep_int10 = $4;
   $gep11 = (($gep_int10) + 536)|0;
   $36 = $gep11;
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   
   if (!($38)) {
    $39 = $37;
    __ZdlPv($39);
    
   }
   $gep_int12 = $4;
   $gep13 = (($gep_int12) + 596)|0;
   $40 = $gep13;
   __THREW__ = 0;
   invoke_vi(135,$40|0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   
   if ($42) {
    $expanded2 = 69;
    $44 = ___cxa_find_matching_catch(-1,-1)|0;
    $45 = tempRet0;
    $2 = $44;
    $3 = $45;
    
    break;
   } else {
    $gep_int14 = $4;
    $gep15 = (($gep_int14) + 548)|0;
    $43 = $gep15;
    __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($43);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 do {
  if ((label|0) == 21) {
   $gep_int16 = $4;
   $gep17 = (($gep_int16) + 596)|0;
   $46 = $gep17;
   __THREW__ = 0;
   invoke_vi(135,$46|0);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   
   if ($48) {
    $expanded3 = 69;
    $54 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$51 = tempRet0;
    ___clang_call_terminate($54);
    // unreachable
   } else {
    
    break;
   }
  }
 } while(0);
 $gep_int18 = $4;
 $gep19 = (($gep_int18) + 548)|0;
 $49 = $gep19;
 __THREW__ = 0;
 invoke_vi(136,$49|0);
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 
 if ($51) {
  $expanded3 = 69;
  $54 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$51 = tempRet0;
  ___clang_call_terminate($54);
  // unreachable
 }
 
 $52 = $2;
 $53 = $3;
 ___resumeException($52|0);
 // unreachable
}
function __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $index;
 $3 = $1;
 $4 = $2;
 $gep_int = $3;
 $5 = $gep_int;
 $gep_int1 = $5;
 $gep_array = $4<<2;
 $gep = (($gep_int1) + ($gep_array))|0;
 $6 = $gep;
 STACKTOP = sp;return $6|0;
}
function __ZN2cl6vectorINS_8PlatformELj10EEC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6vectorINS_8PlatformELj10EEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl8Platform3getEPNS_6vectorIS0_Lj10EEE($platforms) {
 $platforms = $platforms|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int4 = 0, $ids = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 
 
 $n = sp + 16|0;
 
 
 $2 = $platforms;
 HEAP32[$n>>2] = 0;
 $3 = _clGetPlatformIDs(0,0,$n|0)|0;
 $err = $3;
 $4 = $err;
 $5 = ($4|0)!=(0);
 
 if ($5) {
  $6 = $err;
  $gep_int = 1184;
  $expanded = $gep_int;
  $7 = __ZN2cl6detailL10errHandlerEiPKc($6,$expanded)|0;
  $1 = $7;
  
  $25 = $1;
  STACKTOP = sp;return $25|0;
 }
 $8 = HEAP32[$n>>2]|0;
 $9 = $8<<2;
 $10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$9)|0)+7)&-8)|0;
 $11 = $10;
 $ids = $11;
 $12 = HEAP32[$n>>2]|0;
 $13 = $ids;
 $14 = _clGetPlatformIDs($12|0,$13|0,0)|0;
 $err = $14;
 $15 = $err;
 $16 = ($15|0)!=(0);
 
 if ($16) {
  $17 = $err;
  $gep_int2 = 1184;
  $expanded1 = $gep_int2;
  $18 = __ZN2cl6detailL10errHandlerEiPKc($17,$expanded1)|0;
  $1 = $18;
  
  $25 = $1;
  STACKTOP = sp;return $25|0;
 } else {
  $19 = $2;
  $20 = $ids;
  $gep_int3 = $20;
  $21 = $gep_int3;
  $22 = HEAP32[$n>>2]|0;
  $23 = $ids;
  $gep_int4 = $23;
  $gep_array = $22<<2;
  $gep = (($gep_int4) + ($gep_array))|0;
  $24 = $gep;
  __ZN2cl6vectorINS_8PlatformELj10EE6assignIPP15_cl_platform_idEEvT_S7_($19,$21,$24);
  $1 = 0;
  
  $25 = $1;
  STACKTOP = sp;return $25|0;
 }
 return 0|0;
}
function __ZNK2cl6vectorINS_8PlatformELj10EE4sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 40)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl8PlatformC1ERKS0_($this,$platform) {
 $this = $this|0;
 $platform = $platform|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $platform;
 $3 = $1;
 $4 = $2;
 __ZN2cl8PlatformC2ERKS0_($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorINS_8PlatformELj10EEixEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $index;
 $3 = $1;
 $4 = $2;
 $gep_int = $3;
 $5 = $gep_int;
 $gep_int1 = $5;
 $gep_array = $4<<2;
 $gep = (($gep_int1) + ($gep_array))|0;
 $6 = $gep;
 STACKTOP = sp;return $6|0;
}
function __ZN2cl6vectorINS_6DeviceELj10EEC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6vectorINS_6DeviceELj10EEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK2cl8Platform10getDevicesEyPNS_6vectorINS_6DeviceELj10EEE($this,$1,$2,$devices) {
 $this = $this|0;
 $1 = $1|0;
 $2 = $2|0;
 $devices = $devices|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int5 = 0;
 var $gep_int6 = 0, $ids = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 
 
 $5 = sp + 16|0;
 
 $n = sp + 32|0;
 
 
 $4 = $this;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $6 = $devices;
 $11 = $4;
 HEAP32[$n>>2] = 0;
 $12 = $11;
 $gep_int = $11;
 $13 = $gep_int;
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = _clGetDeviceIDs($14|0,$17|0,$20|0,0,0,$n|0)|0;
 $err = $21;
 $22 = $err;
 $23 = ($22|0)!=(0);
 
 if ($23) {
  $24 = $err;
  $gep_int2 = 1168;
  $expanded = $gep_int2;
  $25 = __ZN2cl6detailL10errHandlerEiPKc($24,$expanded)|0;
  $3 = $25;
  
  $52 = $3;
  STACKTOP = sp;return $52|0;
 }
 $26 = HEAP32[$n>>2]|0;
 $27 = $26<<2;
 $28 = STACKTOP; STACKTOP = STACKTOP + ((((1*$27)|0)+7)&-8)|0;
 $29 = $28;
 $ids = $29;
 $30 = $11;
 $gep_int3 = $11;
 $31 = $gep_int3;
 $32 = HEAP32[$31>>2]|0;
 $33 = $5;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$n>>2]|0;
 $40 = $ids;
 $41 = _clGetDeviceIDs($32|0,$35|0,$38|0,$39|0,$40|0,0)|0;
 $err = $41;
 $42 = $err;
 $43 = ($42|0)!=(0);
 
 if ($43) {
  $44 = $err;
  $gep_int4 = 1168;
  $expanded1 = $gep_int4;
  $45 = __ZN2cl6detailL10errHandlerEiPKc($44,$expanded1)|0;
  $3 = $45;
  
  $52 = $3;
  STACKTOP = sp;return $52|0;
 } else {
  $46 = $6;
  $47 = $ids;
  $gep_int5 = $47;
  $48 = $gep_int5;
  $49 = HEAP32[$n>>2]|0;
  $50 = $ids;
  $gep_int6 = $50;
  $gep_array = $49<<2;
  $gep = (($gep_int6) + ($gep_array))|0;
  $51 = $gep;
  __ZN2cl6vectorINS_6DeviceELj10EE6assignIPP13_cl_device_idEEvT_S7_($46,$48,$51);
  $3 = 0;
  
  $52 = $3;
  STACKTOP = sp;return $52|0;
 }
 return 0|0;
}
function __ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 40)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6vectorINS_6DeviceELj10EEixEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $index;
 $3 = $1;
 $4 = $2;
 $gep_int = $3;
 $5 = $gep_int;
 $gep_int1 = $5;
 $gep_array = $4<<2;
 $gep = (($gep_int1) + ($gep_array))|0;
 $6 = $gep;
 STACKTOP = sp;return $6|0;
}
function __ZNK2cl6Device7getInfoILi4096EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi($this,$err) {
 $this = $this|0;
 $err = $err|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $param = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 $param = sp + 16|0;
 
 $1 = $this;
 $2 = $err;
 $3 = $1;
 $4 = __ZNK2cl6Device7getInfoIyEEijPT_($3,4096,$param)|0;
 $result = $4;
 $5 = $2;
 $6 = ($5|0)!=(0);
 
 if ($6) {
  $7 = $result;
  $8 = $2;
  HEAP32[$8>>2] = $7;
  
 }
 $9 = $param;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 tempRet0 = $14;
 STACKTOP = sp;return $11|0;
}
function __ZN2cl6vectorINS_6DeviceELj10EE9push_backERKS1_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0, $gep_array = 0, $gep_int = 0;
 var $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $x;
 $3 = $1;
 $4 = __ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv($3)|0;
 $5 = ($4>>>0)<(10);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $gep_int = $3;
 $gep = (($gep_int) + 40)|0;
 $6 = $gep;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $gep_int1 = $3;
 $gep2 = (($gep_int1) + 40)|0;
 $9 = $gep2;
 $10 = HEAP32[$9>>2]|0;
 $gep_int3 = $3;
 $11 = $gep_int3;
 $gep_int4 = $11;
 $gep_array = $10<<2;
 $gep5 = (($gep_int4) + ($gep_array))|0;
 $12 = $gep5;
 $13 = $2;
 u$4 = __ZN2cl6DeviceaSERKS0_($12,$13)|0;
 $gep_int6 = $3;
 $gep7 = (($gep_int6) + 44)|0;
 $14 = $gep7;
 HEAP8[$14] = 0;
 
 STACKTOP = sp;return;
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__len = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0, $gep106 = 0, $gep108 = 0, $gep110 = 0, $gep112 = 0;
 var $gep114 = 0, $gep116 = 0, $gep119 = 0, $gep121 = 0, $gep123 = 0, $gep125 = 0, $gep127 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep39 = 0, $gep44 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep60 = 0, $gep65 = 0, $gep68 = 0, $gep77 = 0, $gep82 = 0;
 var $gep92 = 0, $gep97 = 0, $gep_int = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int111 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0, $gep_int118 = 0, $gep_int12 = 0, $gep_int120 = 0, $gep_int122 = 0, $gep_int124 = 0, $gep_int126 = 0, $gep_int13 = 0, $gep_int14 = 0;
 var $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0;
 var $gep_int38 = 0, $gep_int40 = 0, $gep_int41 = 0, $gep_int42 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int54 = 0, $gep_int55 = 0, $gep_int56 = 0, $gep_int57 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int62 = 0, $gep_int63 = 0;
 var $gep_int64 = 0, $gep_int66 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int70 = 0, $gep_int71 = 0, $gep_int72 = 0, $gep_int73 = 0, $gep_int74 = 0, $gep_int75 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int79 = 0, $gep_int80 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int84 = 0, $gep_int85 = 0, $gep_int86 = 0, $gep_int87 = 0;
 var $gep_int88 = 0, $gep_int89 = 0, $gep_int90 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int94 = 0, $gep_int95 = 0, $gep_int96 = 0, $gep_int98 = 0, $gep_int99 = 0, label = 0, sp = 0, u$124 = 0, u$165 = 0, u$180 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 792|0;
 $$byval_copy = sp;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $36 = sp + 288|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $__s = sp + 744|0;
 
 
 
 $95 = sp + 776|0;
 $96 = sp + 784|0;
 $91 = $__os;
 $92 = $__str;
 $97 = $91;
 __THREW__ = 0;
 invoke_vii(40,$__s|0,$97|0);
 $98 = __THREW__; __THREW__ = 0;
 $99 = $98&1;
 
 L1: do {
  if ($99) {
   label = 38;
  } else {
   $90 = $__s;
   $100 = $90;
   $gep_int = $100;
   $101 = $gep_int;
   $102 = HEAP8[$101]|0;
   $103 = $102&1;
   
   
   L4: do {
    if ($103) {
     $104 = $92;
     $89 = $104;
     $105 = $89;
     $88 = $105;
     $106 = $88;
     $gep_int12 = $106;
     $107 = $gep_int12;
     $87 = $107;
     $108 = $87;
     $109 = $108;
     $86 = $109;
     $110 = $86;
     $gep_int13 = $110;
     $111 = $gep_int13;
     $gep_int14 = $111;
     $112 = $gep_int14;
     $113 = $112;
     $gep_int15 = $112;
     $114 = $gep_int15;
     $115 = $114;
     $116 = HEAP8[$114]|0;
     $117 = $116&255;
     $118 = $117 & 1;
     $119 = ($118|0)!=(0);
     
     if ($119) {
      $82 = $105;
      $120 = $82;
      $gep_int16 = $120;
      $121 = $gep_int16;
      $81 = $121;
      $122 = $81;
      $123 = $122;
      $80 = $123;
      $124 = $80;
      $gep_int17 = $124;
      $125 = $gep_int17;
      $gep_int18 = $125;
      $126 = $gep_int18;
      $127 = $126;
      $gep_int19 = $126;
      $gep = (($gep_int19) + 4)|0;
      $128 = $gep;
      $129 = HEAP32[$128>>2]|0;
      
      $143 = $129;
     } else {
      $85 = $105;
      $130 = $85;
      $gep_int20 = $130;
      $131 = $gep_int20;
      $84 = $131;
      $132 = $84;
      $133 = $132;
      $83 = $133;
      $134 = $83;
      $gep_int21 = $134;
      $135 = $gep_int21;
      $gep_int22 = $135;
      $136 = $gep_int22;
      $137 = $136;
      $gep_int23 = $136;
      $138 = $gep_int23;
      $139 = $138;
      $140 = HEAP8[$138]|0;
      $141 = $140&255;
      $142 = $141 >> 1;
      
      $143 = $142;
     }
     
     $__len = $143;
     $144 = $91;
     $78 = $95;
     $79 = $144;
     $145 = $78;
     $146 = $79;
     $76 = $145;
     $77 = $146;
     $147 = $76;
     $gep_int24 = $147;
     $148 = $gep_int24;
     $149 = $77;
     $150 = $149;
     $151 = HEAP32[$149>>2]|0;
     $gep_int25 = $151;
     $gep26 = (($gep_int25) + -12)|0;
     $152 = $gep26;
     $153 = $152;
     $154 = HEAP32[$152>>2]|0;
     $155 = $149;
     $gep_int27 = $149;
     $gep28 = (($gep_int27) + ($154))|0;
     $156 = $gep28;
     $157 = $156;
     $75 = $157;
     $158 = $75;
     $159 = $158;
     $74 = $159;
     $160 = $74;
     $gep_int29 = $160;
     $gep30 = (($gep_int29) + 24)|0;
     $161 = $gep30;
     $162 = HEAP32[$161>>2]|0;
     $163 = $162;
     HEAP32[$148>>2] = $163;
     $164 = $92;
     $73 = $164;
     $165 = $73;
     $72 = $165;
     $166 = $72;
     $71 = $166;
     $167 = $71;
     $gep_int31 = $167;
     $168 = $gep_int31;
     $70 = $168;
     $169 = $70;
     $170 = $169;
     $69 = $170;
     $171 = $69;
     $gep_int32 = $171;
     $172 = $gep_int32;
     $gep_int33 = $172;
     $173 = $gep_int33;
     $174 = $173;
     $gep_int34 = $173;
     $175 = $gep_int34;
     $176 = $175;
     $177 = HEAP8[$175]|0;
     $178 = $177&255;
     $179 = $178 & 1;
     $180 = ($179|0)!=(0);
     
     if ($180) {
      $63 = $166;
      $181 = $63;
      $gep_int35 = $181;
      $182 = $gep_int35;
      $62 = $182;
      $183 = $62;
      $184 = $183;
      $61 = $184;
      $185 = $61;
      $gep_int36 = $185;
      $186 = $gep_int36;
      $gep_int37 = $186;
      $187 = $gep_int37;
      $188 = $187;
      $gep_int38 = $187;
      $gep39 = (($gep_int38) + 8)|0;
      $189 = $gep39;
      $190 = HEAP32[$189>>2]|0;
      
      $203 = $190;
     } else {
      $68 = $166;
      $191 = $68;
      $gep_int40 = $191;
      $192 = $gep_int40;
      $67 = $192;
      $193 = $67;
      $194 = $193;
      $66 = $194;
      $195 = $66;
      $gep_int41 = $195;
      $196 = $gep_int41;
      $gep_int42 = $196;
      $197 = $gep_int42;
      $198 = $197;
      $gep_int43 = $197;
      $gep44 = (($gep_int43) + 1)|0;
      $199 = $gep44;
      $gep_int45 = $199;
      $200 = $gep_int45;
      $65 = $200;
      $201 = $65;
      $64 = $201;
      $202 = $64;
      
      $203 = $202;
     }
     
     $60 = $203;
     $204 = $60;
     $205 = $91;
     $206 = $205;
     $207 = HEAP32[$205>>2]|0;
     $gep_int46 = $207;
     $gep47 = (($gep_int46) + -12)|0;
     $208 = $gep47;
     $209 = $208;
     $210 = HEAP32[$208>>2]|0;
     $211 = $205;
     $gep_int48 = $205;
     $gep49 = (($gep_int48) + ($210))|0;
     $212 = $gep49;
     $213 = $212;
     $55 = $213;
     $214 = $55;
     $gep_int50 = $214;
     $gep51 = (($gep_int50) + 4)|0;
     $215 = $gep51;
     $216 = HEAP32[$215>>2]|0;
     
     $217 = $216 & 176;
     $218 = ($217|0)==(32);
     
     if ($218) {
      $219 = $92;
      $53 = $219;
      $220 = $53;
      $52 = $220;
      $221 = $52;
      $51 = $221;
      $222 = $51;
      $gep_int52 = $222;
      $223 = $gep_int52;
      $50 = $223;
      $224 = $50;
      $225 = $224;
      $49 = $225;
      $226 = $49;
      $gep_int53 = $226;
      $227 = $gep_int53;
      $gep_int54 = $227;
      $228 = $gep_int54;
      $229 = $228;
      $gep_int55 = $228;
      $230 = $gep_int55;
      $231 = $230;
      $232 = HEAP8[$230]|0;
      $233 = $232&255;
      $234 = $233 & 1;
      $235 = ($234|0)!=(0);
      
      if ($235) {
       $43 = $221;
       $236 = $43;
       $gep_int56 = $236;
       $237 = $gep_int56;
       $42 = $237;
       $238 = $42;
       $239 = $238;
       $41 = $239;
       $240 = $41;
       $gep_int57 = $240;
       $241 = $gep_int57;
       $gep_int58 = $241;
       $242 = $gep_int58;
       $243 = $242;
       $gep_int59 = $242;
       $gep60 = (($gep_int59) + 8)|0;
       $244 = $gep60;
       $245 = HEAP32[$244>>2]|0;
       
       $258 = $245;
      } else {
       $48 = $221;
       $246 = $48;
       $gep_int61 = $246;
       $247 = $gep_int61;
       $47 = $247;
       $248 = $47;
       $249 = $248;
       $46 = $249;
       $250 = $46;
       $gep_int62 = $250;
       $251 = $gep_int62;
       $gep_int63 = $251;
       $252 = $gep_int63;
       $253 = $252;
       $gep_int64 = $252;
       $gep65 = (($gep_int64) + 1)|0;
       $254 = $gep65;
       $gep_int66 = $254;
       $255 = $gep_int66;
       $45 = $255;
       $256 = $45;
       $44 = $256;
       $257 = $44;
       
       $258 = $257;
      }
      
      $40 = $258;
      $259 = $40;
      $260 = $__len;
      $gep_int67 = $259;
      $gep68 = (($gep_int67) + ($260))|0;
      $261 = $gep68;
      
      $303 = $261;
     } else {
      $262 = $92;
      $28 = $262;
      $263 = $28;
      $27 = $263;
      $264 = $27;
      $26 = $264;
      $265 = $26;
      $gep_int69 = $265;
      $266 = $gep_int69;
      $25 = $266;
      $267 = $25;
      $268 = $267;
      $24 = $268;
      $269 = $24;
      $gep_int70 = $269;
      $270 = $gep_int70;
      $gep_int71 = $270;
      $271 = $gep_int71;
      $272 = $271;
      $gep_int72 = $271;
      $273 = $gep_int72;
      $274 = $273;
      $275 = HEAP8[$273]|0;
      $276 = $275&255;
      $277 = $276 & 1;
      $278 = ($277|0)!=(0);
      
      if ($278) {
       $18 = $264;
       $279 = $18;
       $gep_int73 = $279;
       $280 = $gep_int73;
       $17 = $280;
       $281 = $17;
       $282 = $281;
       $16 = $282;
       $283 = $16;
       $gep_int74 = $283;
       $284 = $gep_int74;
       $gep_int75 = $284;
       $285 = $gep_int75;
       $286 = $285;
       $gep_int76 = $285;
       $gep77 = (($gep_int76) + 8)|0;
       $287 = $gep77;
       $288 = HEAP32[$287>>2]|0;
       
       $301 = $288;
      } else {
       $23 = $264;
       $289 = $23;
       $gep_int78 = $289;
       $290 = $gep_int78;
       $22 = $290;
       $291 = $22;
       $292 = $291;
       $21 = $292;
       $293 = $21;
       $gep_int79 = $293;
       $294 = $gep_int79;
       $gep_int80 = $294;
       $295 = $gep_int80;
       $296 = $295;
       $gep_int81 = $295;
       $gep82 = (($gep_int81) + 1)|0;
       $297 = $gep82;
       $gep_int83 = $297;
       $298 = $gep_int83;
       $20 = $298;
       $299 = $20;
       $19 = $299;
       $300 = $19;
       
       $301 = $300;
      }
      
      $15 = $301;
      $302 = $15;
      
      $303 = $302;
     }
     
     $304 = $92;
     $14 = $304;
     $305 = $14;
     $13 = $305;
     $306 = $13;
     $12 = $306;
     $307 = $12;
     $gep_int84 = $307;
     $308 = $gep_int84;
     $11 = $308;
     $309 = $11;
     $310 = $309;
     $10 = $310;
     $311 = $10;
     $gep_int85 = $311;
     $312 = $gep_int85;
     $gep_int86 = $312;
     $313 = $gep_int86;
     $314 = $313;
     $gep_int87 = $313;
     $315 = $gep_int87;
     $316 = $315;
     $317 = HEAP8[$315]|0;
     $318 = $317&255;
     $319 = $318 & 1;
     $320 = ($319|0)!=(0);
     
     if ($320) {
      $4 = $306;
      $321 = $4;
      $gep_int88 = $321;
      $322 = $gep_int88;
      $3 = $322;
      $323 = $3;
      $324 = $323;
      $2 = $324;
      $325 = $2;
      $gep_int89 = $325;
      $326 = $gep_int89;
      $gep_int90 = $326;
      $327 = $gep_int90;
      $328 = $327;
      $gep_int91 = $327;
      $gep92 = (($gep_int91) + 8)|0;
      $329 = $gep92;
      $330 = HEAP32[$329>>2]|0;
      
      $343 = $330;
     } else {
      $9 = $306;
      $331 = $9;
      $gep_int93 = $331;
      $332 = $gep_int93;
      $8 = $332;
      $333 = $8;
      $334 = $333;
      $7 = $334;
      $335 = $7;
      $gep_int94 = $335;
      $336 = $gep_int94;
      $gep_int95 = $336;
      $337 = $gep_int95;
      $338 = $337;
      $gep_int96 = $337;
      $gep97 = (($gep_int96) + 1)|0;
      $339 = $gep97;
      $gep_int98 = $339;
      $340 = $gep_int98;
      $6 = $340;
      $341 = $6;
      $5 = $341;
      $342 = $5;
      
      $343 = $342;
     }
     
     $1 = $343;
     $344 = $1;
     $345 = $__len;
     $gep_int99 = $344;
     $gep100 = (($gep_int99) + ($345))|0;
     $346 = $gep100;
     $347 = $91;
     $348 = $347;
     $349 = HEAP32[$347>>2]|0;
     $gep_int101 = $349;
     $gep102 = (($gep_int101) + -12)|0;
     $350 = $gep102;
     $351 = $350;
     $352 = HEAP32[$350>>2]|0;
     $353 = $347;
     $gep_int103 = $347;
     $gep104 = (($gep_int103) + ($352))|0;
     $354 = $gep104;
     $355 = $354;
     $356 = $91;
     $357 = $356;
     $358 = HEAP32[$356>>2]|0;
     $gep_int105 = $358;
     $gep106 = (($gep_int105) + -12)|0;
     $359 = $gep106;
     $360 = $359;
     $361 = HEAP32[$359>>2]|0;
     $362 = $356;
     $gep_int107 = $356;
     $gep108 = (($gep_int107) + ($361))|0;
     $363 = $gep108;
     $364 = $363;
     $39 = $364;
     $365 = $39;
     $gep_int109 = $365;
     $gep110 = (($gep_int109) + 76)|0;
     $366 = $gep110;
     $367 = HEAP32[$366>>2]|0;
     $29 = -1;
     $30 = $367;
     $368 = $29;
     $369 = $30;
     $370 = ($368|0)==($369|0);
     
     L31: do {
      if ($370) {
       $34 = $365;
       $35 = 32;
       $371 = $34;
       $372 = $371;
       __THREW__ = 0;
       invoke_vii(41,$36|0,$372|0);
       $373 = __THREW__; __THREW__ = 0;
       $374 = $373&1;
       
       if ($374) {
        label = 39;
        break;
       }
       $33 = $36;
       $375 = $33;
       __THREW__ = 0;
       $expanded = 8480;
       $376 = invoke_iii(19,$375|0,$expanded|0)|0;
       $377 = __THREW__; __THREW__ = 0;
       $378 = $377&1;
       
       do {
        if (!($378)) {
         $379 = $376;
         $380 = $35;
         $31 = $379;
         $32 = $380;
         $381 = $31;
         $382 = $381;
         $383 = HEAP32[$381>>2]|0;
         $gep_int111 = $383;
         $gep112 = (($gep_int111) + 28)|0;
         $384 = $gep112;
         $385 = HEAP32[$384>>2]|0;
         $386 = $32;
         __THREW__ = 0;
         $387 = invoke_iii($385|0,$381|0,$386|0)|0;
         $388 = __THREW__; __THREW__ = 0;
         $389 = $388&1;
         
         if ($389) {
          break;
         }
         __THREW__ = 0;
         invoke_vi(132,$36|0);
         $397 = __THREW__; __THREW__ = 0;
         $398 = $397&1;
         
         if ($398) {
          label = 39;
          break L31;
         }
         $399 = $387 << 24 >> 24;
         $gep_int113 = $365;
         $gep114 = (($gep_int113) + 76)|0;
         $400 = $gep114;
         HEAP32[$400>>2] = $399;
         
         label = 32;
         break L31;
        }
       } while(0);
       $expanded6 = 69;
       $390 = ___cxa_find_matching_catch(-1,-1,0,0)|0;
       $391 = tempRet0;
       $37 = $390;
       $38 = $391;
       __THREW__ = 0;
       invoke_vi(132,$36|0);
       $392 = __THREW__; __THREW__ = 0;
       $393 = $392&1;
       
       if ($393) {
        $expanded7 = 69;
        $396 = ___cxa_find_matching_catch(-1,-1,0,0,0)|0;
        u$124 = tempRet0;
        ___clang_call_terminate($396);
        // unreachable
       } else {
        $394 = $37;
        $395 = $38;
        
        $eh$lpad$body$index2Z2D = $395;$eh$lpad$body$indexZ2D = $394;
        break;
       }
      } else {
       label = 32;
      }
     } while(0);
     do {
      if ((label|0) == 32) {
       $gep_int115 = $365;
       $gep116 = (($gep_int115) + 76)|0;
       $401 = $gep116;
       $402 = HEAP32[$401>>2]|0;
       $403 = $402&255;
       
       __THREW__ = 0;
       $404 = $$byval_copy;
       
       $405 = $$byval_copy;
       $406 = $95;
       ;HEAP32[$405+0>>2]=HEAP32[$406+0>>2]|0;
       invoke_viiiiiii(40,$96|0,$$byval_copy|0,$204|0,$303|0,$346|0,$355|0,$403|0);
       $407 = $$byval_copy;
       
       $408 = __THREW__; __THREW__ = 0;
       $409 = $408&1;
       
       if ($409) {
        label = 39;
        break;
       }
       $54 = $96;
       $410 = $54;
       $gep_int117 = $410;
       $411 = $gep_int117;
       $412 = HEAP32[$411>>2]|0;
       $413 = ($412|0)==(0);
       
       if ($413) {
        $414 = $91;
        $415 = $414;
        $416 = HEAP32[$414>>2]|0;
        $gep_int118 = $416;
        $gep119 = (($gep_int118) + -12)|0;
        $417 = $gep119;
        $418 = $417;
        $419 = HEAP32[$417>>2]|0;
        $420 = $414;
        $gep_int120 = $414;
        $gep121 = (($gep_int120) + ($419))|0;
        $421 = $gep121;
        $422 = $421;
        $58 = $422;
        $59 = 5;
        $423 = $58;
        $424 = $423;
        $425 = $59;
        $56 = $424;
        $57 = $425;
        $426 = $56;
        $gep_int122 = $426;
        $gep123 = (($gep_int122) + 16)|0;
        $427 = $gep123;
        $428 = HEAP32[$427>>2]|0;
        $429 = $57;
        $430 = $428 | $429;
        __THREW__ = 0;
        invoke_vii(42,$426|0,$430|0);
        $431 = __THREW__; __THREW__ = 0;
        $432 = $431&1;
        
        if ($432) {
         label = 39;
         break;
        }
        
        
       }
       
       break L4;
      }
     } while(0);
     if ((label|0) == 39) {
      $expanded9 = 69;
      $435 = ___cxa_find_matching_catch(-1,-1,0)|0;
      $436 = tempRet0;
      
      $eh$lpad$body$index2Z2D = $436;$eh$lpad$body$indexZ2D = $435;
     }
     
     
     $93 = $eh$lpad$body$indexZ2D;
     $94 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(133,$__s|0);
     $437 = __THREW__; __THREW__ = 0;
     $438 = $437&1;
     
     if ($438) {
      $expanded11 = 69;
      $460 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$180 = tempRet0;
      ___clang_call_terminate($460);
      // unreachable
     } else {
      
      break L1;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(133,$__s|0);
   $439 = __THREW__; __THREW__ = 0;
   $440 = $439&1;
   
   if ($440) {
    label = 38;
    break;
   }
   
   $453 = $91;
   STACKTOP = sp;return $453|0;
  }
 } while(0);
 if ((label|0) == 38) {
  $expanded8 = 69;
  $433 = ___cxa_find_matching_catch(-1,-1,0)|0;
  $434 = tempRet0;
  $93 = $433;
  $94 = $434;
  
 }
 $441 = $93;
 u$165 = ___cxa_begin_catch($441|0)|0;
 $442 = $91;
 $443 = $442;
 $444 = HEAP32[$442>>2]|0;
 $gep_int124 = $444;
 $gep125 = (($gep_int124) + -12)|0;
 $445 = $gep125;
 $446 = $445;
 $447 = HEAP32[$445>>2]|0;
 $448 = $442;
 $gep_int126 = $442;
 $gep127 = (($gep_int126) + ($447))|0;
 $449 = $gep127;
 $450 = $449;
 __THREW__ = 0;
 invoke_vi(134,$450|0);
 $451 = __THREW__; __THREW__ = 0;
 $452 = $451&1;
 
 if (!($452)) {
  ___cxa_end_catch();
  
  $453 = $91;
  STACKTOP = sp;return $453|0;
 }
 $expanded10 = 69;
 $454 = ___cxa_find_matching_catch(-1,-1)|0;
 $455 = tempRet0;
 $93 = $454;
 $94 = $455;
 __THREW__ = 0;
 invoke_v(2);
 $456 = __THREW__; __THREW__ = 0;
 $457 = $456&1;
 
 if ($457) {
  $expanded11 = 69;
  $460 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$180 = tempRet0;
  ___clang_call_terminate($460);
  // unreachable
 }
 
 $458 = $93;
 $459 = $94;
 ___resumeException($458|0);
 // unreachable
 return 0|0;
}
function __ZNK2cl6Device7getInfoILi4098EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi($this,$err) {
 $this = $this|0;
 $err = $err|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $param = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 $param = sp + 16|0;
 
 $1 = $this;
 $2 = $err;
 $3 = $1;
 $4 = __ZNK2cl6Device7getInfoIjEEijPT_($3,4098,$param)|0;
 $result = $4;
 $5 = $2;
 $6 = ($5|0)!=(0);
 
 if ($6) {
  $7 = $result;
  $8 = $2;
  HEAP32[$8>>2] = $7;
  
 }
 $9 = HEAP32[$param>>2]|0;
 STACKTOP = sp;return $9|0;
}
function __ZN2cl6vectorIP12RenderDeviceLj10EE9push_backERKS2_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0, $gep_array = 0;
 var $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $x;
 $3 = $1;
 $4 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($3)|0;
 $5 = ($4>>>0)<(10);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $gep_int = $3;
 $gep = (($gep_int) + 40)|0;
 $6 = $gep;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $gep_int1 = $3;
 $gep2 = (($gep_int1) + 40)|0;
 $11 = $gep2;
 $12 = HEAP32[$11>>2]|0;
 $gep_int3 = $3;
 $13 = $gep_int3;
 $gep_int4 = $13;
 $gep_array = $12<<2;
 $gep5 = (($gep_int4) + ($gep_array))|0;
 $14 = $gep5;
 HEAP32[$14>>2] = $10;
 $gep_int6 = $3;
 $gep7 = (($gep_int6) + 44)|0;
 $15 = $gep7;
 HEAP8[$15] = 0;
 
 STACKTOP = sp;return;
}
function __ZNK12RenderDevice7GetNameEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 STACKTOP = sp;return $3|0;
}
function __ZN12RenderConfig20UpdateDeviceWorkloadEb($this,$calculateNewLoad) {
 $this = $this|0;
 $calculateNewLoad = $calculateNewLoad|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0;
 var $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep10 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep21 = 0, $gep23 = 0;
 var $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep4 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep6 = 0, $gep8 = 0, $gep_array = 0, $gep_array20 = 0, $gep_array34 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int14 = 0;
 var $gep_int16 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int3 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0;
 var $i = 0, $i1 = 0, $i2 = 0, $totalPerformance = 0.0, $totalWorkload = 0, $workAmount = 0, $workLeft = 0, $workOffset = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 152|0;
 
 
 
 
 
 
 
 
 
 
 $11 = sp + 80|0;
 
 
 
 
 
 
 
 
 $9 = $this;
 $12 = $calculateNewLoad&1;
 $10 = $12;
 $13 = $9;
 $expanded = 3824;
 $gep_int = 1128;
 $expanded1 = $gep_int;
 $14 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($expanded,$expanded1)|0;
 $7 = $14;
 $8 = 67;
 $15 = $7;
 $16 = $8;
 u$4 = FUNCTION_TABLE_ii[$16 & 127]($15)|0;
 $17 = $10;
 $18 = $17&1;
 
 if ($18) {
  $gep_int2 = $13;
  $gep = (($gep_int2) + 596)|0;
  $19 = $gep;
  $gep_int3 = $13;
  $gep4 = (($gep_int3) + 548)|0;
  $20 = $gep4;
  $21 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($20)|0;
  HEAPF64[$11>>3] = 1.000000e+00;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEjRKd($19,$21,$11);
  $i = 0;
  
  while(1) {
   $22 = $i;
   $gep_int5 = $13;
   $gep6 = (($gep_int5) + 548)|0;
   $23 = $gep6;
   $24 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($23)|0;
   $25 = ($22>>>0)<($24>>>0);
   
   if (!($25)) {
    break;
   }
   $gep_int7 = $13;
   $gep8 = (($gep_int7) + 548)|0;
   $26 = $gep8;
   $27 = $i;
   $28 = __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($26,$27)|0;
   $29 = HEAP32[$28>>2]|0;
   $30 = +__ZNK12RenderDevice14GetPerformanceEv($29);
   $gep_int9 = $13;
   $gep10 = (($gep_int9) + 596)|0;
   $31 = $gep10;
   $32 = $i;
   $5 = $31;
   $6 = $32;
   $33 = $5;
   $34 = $6;
   $35 = $33;
   $gep_int11 = $33;
   $36 = $gep_int11;
   $37 = HEAP32[$36>>2]|0;
   $gep_int12 = $37;
   $gep_array = $34<<3;
   $gep13 = (($gep_int12) + ($gep_array))|0;
   $38 = $gep13;
   HEAPF64[$38>>3] = $30;
   
   $39 = $i;
   $40 = (($39) + 1)|0;
   $i = $40;
   
  }
  
 }
 $totalPerformance = 0.000000e+00;
 $i1 = 0;
 
 while(1) {
  $41 = $i1;
  $gep_int14 = $13;
  $gep15 = (($gep_int14) + 548)|0;
  $42 = $gep15;
  $43 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($42)|0;
  $44 = ($41>>>0)<($43>>>0);
  
  if (!($44)) {
   break;
  }
  $gep_int16 = $13;
  $gep17 = (($gep_int16) + 596)|0;
  $45 = $gep17;
  $46 = $i1;
  $3 = $45;
  $4 = $46;
  $47 = $3;
  $48 = $4;
  $49 = $47;
  $gep_int18 = $47;
  $50 = $gep_int18;
  $51 = HEAP32[$50>>2]|0;
  $gep_int19 = $51;
  $gep_array20 = $48<<3;
  $gep21 = (($gep_int19) + ($gep_array20))|0;
  $52 = $gep21;
  $53 = +HEAPF64[$52>>3];
  $54 = $totalPerformance;
  $55 = $54 + $53;
  $totalPerformance = $55;
  
  $56 = $i1;
  $57 = (($56) + 1)|0;
  $i1 = $57;
  
 }
 $gep_int22 = $13;
 $gep23 = (($gep_int22) + 516)|0;
 $58 = $gep23;
 $59 = HEAP32[$58>>2]|0;
 $gep_int24 = $13;
 $gep25 = (($gep_int24) + 520)|0;
 $60 = $gep25;
 $61 = HEAP32[$60>>2]|0;
 $62 = Math_imul($59, $61)|0;
 $totalWorkload = $62;
 $workOffset = 0;
 $i2 = 0;
 
 while(1) {
  $63 = $i2;
  $gep_int26 = $13;
  $gep27 = (($gep_int26) + 548)|0;
  $64 = $gep27;
  $65 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($64)|0;
  $66 = ($63>>>0)<($65>>>0);
  
  if (!($66)) {
   break;
  }
  $67 = $totalWorkload;
  $68 = $workOffset;
  $69 = (($67) - ($68))|0;
  $workLeft = $69;
  $70 = $workLeft;
  $71 = ($70>>>0)<=(0);
  
  if ($71) {
   $72 = $totalWorkload;
   $workOffset = $72;
   $workAmount = 1;
   
  } else {
   $73 = $i2;
   $gep_int28 = $13;
   $gep29 = (($gep_int28) + 548)|0;
   $74 = $gep29;
   $75 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($74)|0;
   $76 = (($75) - 1)|0;
   $77 = ($73|0)==($76|0);
   
   if ($77) {
    $78 = $workLeft;
    $workAmount = $78;
    
   } else {
    $79 = $workLeft;
    $80 = +($79>>>0);
    $gep_int30 = $13;
    $gep31 = (($gep_int30) + 596)|0;
    $81 = $gep31;
    $82 = $i2;
    $1 = $81;
    $2 = $82;
    $83 = $1;
    $84 = $2;
    $85 = $83;
    $gep_int32 = $83;
    $86 = $gep_int32;
    $87 = HEAP32[$86>>2]|0;
    $gep_int33 = $87;
    $gep_array34 = $84<<3;
    $gep35 = (($gep_int33) + ($gep_array34))|0;
    $88 = $gep35;
    $89 = +HEAPF64[$88>>3];
    $90 = $80 * $89;
    $91 = $totalPerformance;
    $92 = $90 / $91;
    $93 = ~~(($92))>>>0;
    $workAmount = $93;
    
   }
   
  }
  $gep_int36 = $13;
  $gep37 = (($gep_int36) + 548)|0;
  $94 = $gep37;
  $95 = $i2;
  $96 = __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($94,$95)|0;
  $97 = HEAP32[$96>>2]|0;
  $98 = $workOffset;
  $99 = $workAmount;
  $gep_int38 = $13;
  $gep39 = (($gep_int38) + 516)|0;
  $100 = $gep39;
  $101 = HEAP32[$100>>2]|0;
  $gep_int40 = $13;
  $gep41 = (($gep_int40) + 520)|0;
  $102 = $gep41;
  $103 = HEAP32[$102>>2]|0;
  $gep_int42 = $13;
  $gep43 = (($gep_int42) + 528)|0;
  $104 = $gep43;
  $105 = HEAP32[$104>>2]|0;
  __ZN12RenderDevice11SetWorkLoadEjjjjPj($97,$98,$99,$101,$103,$105);
  $106 = $workAmount;
  $107 = $workOffset;
  $108 = (($107) + ($106))|0;
  $workOffset = $108;
  
  $109 = $i2;
  $110 = (($109) + 1)|0;
  $i2 = $110;
  
 }
 $gep_int44 = $13;
 $gep45 = (($gep_int44) + 524)|0;
 $111 = $gep45;
 HEAP32[$111>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN12RenderConfig11ReInitSceneEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $i = 0, $i1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $2 = $1;
 $i = 0;
 
 while(1) {
  $3 = $i;
  $gep_int = $2;
  $gep = (($gep_int) + 548)|0;
  $4 = $gep;
  $5 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($4)|0;
  $6 = ($3>>>0)<($5>>>0);
  
  if (!($6)) {
   break;
  }
  $gep_int1 = $2;
  $gep2 = (($gep_int1) + 548)|0;
  $7 = $gep2;
  $8 = $i;
  $9 = __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($7,$8)|0;
  $10 = HEAP32[$9>>2]|0;
  __ZN12RenderDevice6FinishEv($10);
  
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
  
 }
 $gep_int3 = $2;
 $gep4 = (($gep_int3) + 524)|0;
 $13 = $gep4;
 HEAP32[$13>>2] = 0;
 $i1 = 0;
 
 while(1) {
  $14 = $i1;
  $gep_int5 = $2;
  $gep6 = (($gep_int5) + 548)|0;
  $15 = $gep6;
  $16 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($15)|0;
  $17 = ($14>>>0)<($16>>>0);
  
  if (!($17)) {
   break;
  }
  $gep_int7 = $2;
  $gep8 = (($gep_int7) + 548)|0;
  $18 = $gep8;
  $19 = $i1;
  $20 = __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($18,$19)|0;
  $21 = HEAP32[$20>>2]|0;
  $gep_int9 = $2;
  $gep10 = (($gep_int9) + 536)|0;
  $22 = $gep10;
  $23 = HEAP32[$22>>2]|0;
  __ZN12RenderDevice17UpdateSceneBufferEP6Sphere($21,$23);
  
  $24 = $i1;
  $25 = (($24) + 1)|0;
  $i1 = $25;
  
 }
 STACKTOP = sp;return;
}
function __ZN12RenderConfig6ReInitEi($this,$reallocBuffers) {
 $this = $this|0;
 $reallocBuffers = $reallocBuffers|0;
 var $$arith = 0, $$overflow = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_array = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0;
 var $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int2 = 0, $gep_int20 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $1 = $this;
 $2 = $reallocBuffers;
 $3 = $1;
 $i = 0;
 
 while(1) {
  $4 = $i;
  $gep_int = $3;
  $gep = (($gep_int) + 548)|0;
  $5 = $gep;
  $6 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($5)|0;
  $7 = ($4>>>0)<($6>>>0);
  
  if (!($7)) {
   break;
  }
  $gep_int2 = $3;
  $gep3 = (($gep_int2) + 548)|0;
  $8 = $gep3;
  $9 = $i;
  $10 = __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($8,$9)|0;
  $11 = HEAP32[$10>>2]|0;
  __ZN12RenderDevice6FinishEv($11);
  
  $12 = $i;
  $13 = (($12) + 1)|0;
  $i = $13;
  
 }
 $14 = $2;
 $15 = ($14|0)!=(0);
 
 if (!($15)) {
  __ZN12RenderConfig12UpdateCameraEv($3);
  $gep_int20 = $3;
  $gep21 = (($gep_int20) + 524)|0;
  $43 = $gep21;
  HEAP32[$43>>2] = 0;
  STACKTOP = sp;return;
 }
 $gep_int4 = $3;
 $gep5 = (($gep_int4) + 528)|0;
 $16 = $gep5;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 
 if (!($18)) {
  $19 = $17;
  __ZdlPv($19);
  
 }
 $gep_int6 = $3;
 $gep7 = (($gep_int6) + 516)|0;
 $20 = $gep7;
 $21 = HEAP32[$20>>2]|0;
 $gep_int8 = $3;
 $gep9 = (($gep_int8) + 520)|0;
 $22 = $gep9;
 $23 = HEAP32[$22>>2]|0;
 $24 = Math_imul($21, $23)|0;
 $$arith = $24<<2;
 $$overflow = ($24>>>0)>(1073741823);
 $25 = $$overflow ? -1 : $$arith;
 $26 = __Znaj($25)|0;
 $27 = $26;
 $gep_int10 = $3;
 $gep11 = (($gep_int10) + 528)|0;
 $28 = $gep11;
 HEAP32[$28>>2] = $27;
 $i1 = 0;
 
 while(1) {
  $29 = $i1;
  $gep_int12 = $3;
  $gep13 = (($gep_int12) + 516)|0;
  $30 = $gep13;
  $31 = HEAP32[$30>>2]|0;
  $gep_int14 = $3;
  $gep15 = (($gep_int14) + 520)|0;
  $32 = $gep15;
  $33 = HEAP32[$32>>2]|0;
  $34 = Math_imul($31, $33)|0;
  $35 = ($29>>>0)<($34>>>0);
  
  if (!($35)) {
   break;
  }
  $36 = $i1;
  $37 = $i1;
  $gep_int16 = $3;
  $gep17 = (($gep_int16) + 528)|0;
  $38 = $gep17;
  $39 = HEAP32[$38>>2]|0;
  $gep_int18 = $39;
  $gep_array = $37<<2;
  $gep19 = (($gep_int18) + ($gep_array))|0;
  $40 = $gep19;
  HEAP32[$40>>2] = $36;
  
  $41 = $i1;
  $42 = (($41) + 1)|0;
  $i1 = $42;
  
 }
 __ZN12RenderConfig20UpdateDeviceWorkloadEb($3,0);
 
 __ZN12RenderConfig12UpdateCameraEv($3);
 $gep_int20 = $3;
 $gep21 = (($gep_int20) + 524)|0;
 $43 = $gep21;
 HEAP32[$43>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6vectorINS_6DeviceELj10EED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6vectorINS_6DeviceELj10EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl8PlatformD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorINS_8PlatformELj10EED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6vectorINS_8PlatformELj10EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK2cl6Device7getInfoIjEEijPT_($this,$name,$param) {
 $this = $this|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $2 = $name;
 $3 = $param;
 $4 = $1;
 $5 = $4;
 $gep_int = $4;
 $6 = $gep_int;
 $7 = $2;
 $8 = $3;
 $9 = __ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_jEEiT_RKT0_jPT1_(13,$6,$7,$8)|0;
 $gep_int1 = 1056;
 $expanded = $gep_int1;
 $10 = __ZN2cl6detailL10errHandlerEiPKc($9,$expanded)|0;
 STACKTOP = sp;return $10|0;
}
function __ZN2cl6detailL10errHandlerEiPKc($err,$errStr) {
 $err = $err|0;
 $errStr = $errStr|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $1 = $err;
 $2 = $errStr;
 $5 = $1;
 $6 = ($5|0)!=(0);
 
 if (!($6)) {
  $22 = $1;
  STACKTOP = sp;return $22|0;
 }
 $7 = ___cxa_allocate_exception(12)|0;
 $8 = $7;
 $9 = $1;
 $10 = $2;
 __THREW__ = 0;
 invoke_viii(6,$8|0,$9|0,$10|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 
 do {
  if ($12) {
   $expanded2 = 69;
   $15 = ___cxa_find_matching_catch(-1,-1,48)|0;
   $16 = tempRet0;
   $3 = $15;
   $4 = $16;
   ___cxa_free_exception($7|0);
   
  } else {
   __THREW__ = 0;
   $expanded = 48;
   $expanded1 = 1;
   invoke_viii(5,$7|0,$expanded|0,$expanded1|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if ($14) {
    $expanded3 = 69;
    $17 = ___cxa_find_matching_catch(-1,-1,48)|0;
    $18 = tempRet0;
    $3 = $17;
    $4 = $18;
    
    break;
   } else {
    // unreachable
   }
  }
 } while(0);
 $19 = $4;
 $20 = ($19|0)<(0);
 
 if ($20) {
  $21 = $3;
  ___cxa_call_unexpected($21|0);
  // unreachable
 } else {
  $23 = $3;
  $24 = $4;
  ___resumeException($23|0);
  // unreachable
 }
 return 0|0;
}
function __ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_jEEiT_RKT0_jPT1_($f,$arg0,$name,$param) {
 $f = $f|0;
 $arg0 = $arg0|0;
 $name = $name|0;
 $param = $param|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f0 = 0;
 var $gep = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $$byval_copy = sp;
 
 
 
 
 $f0 = sp + 40|0;
 $5 = sp + 48|0;
 $1 = $f;
 $2 = $arg0;
 $3 = $name;
 $4 = $param;
 $gep_int = $f0;
 $6 = $gep_int;
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $gep_int1 = $f0;
 $gep = (($gep_int1) + 4)|0;
 $8 = $gep;
 $9 = $2;
 HEAP32[$8>>2] = $9;
 $10 = $5;
 $11 = $f0;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;
 $12 = $3;
 $13 = $4;
 $14 = $$byval_copy;
 
 $15 = $$byval_copy;
 $16 = $5;
 ;HEAP32[$15+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;
 $17 = __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEjE3getES9_jS6_($$byval_copy,$12,$13)|0;
 $18 = $$byval_copy;
 
 STACKTOP = sp;return $17|0;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEjE3getES9_jS6_($f,$name,$param) {
 $f = $f|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $name;
 $2 = $param;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = __ZN2cl6detail15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES3_EclEjjS4_S5_($f,$3,4,$5,0)|0;
 STACKTOP = sp;return $6|0;
}
function __ZN2cl6detail15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES3_EclEjjS4_S5_($this,$param,$size,$value,$size_ret) {
 $this = $this|0;
 $param = $param|0;
 $size = $size|0;
 $value = $value|0;
 $size_ret = $size_ret|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep_int = 0, $gep_int1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 
 
 
 
 
 $1 = $this;
 $2 = $param;
 $3 = $size;
 $4 = $value;
 $5 = $size_ret;
 $6 = $1;
 $gep_int = $6;
 $7 = $gep_int;
 $8 = HEAP32[$7>>2]|0;
 $gep_int1 = $6;
 $gep = (($gep_int1) + 4)|0;
 $9 = $gep;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = FUNCTION_TABLE_iiiiii[$8 & 31]($11,$12,$13,$14,$15)|0;
 STACKTOP = sp;return $16|0;
}
function __ZN2cl5ErrorC1EiPKc($this,$err,$errStr) {
 $this = $this|0;
 $err = $err|0;
 $errStr = $errStr|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $2 = $err;
 $3 = $errStr;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 __ZN2cl5ErrorC2EiPKc($4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorC2EiPKc($this,$err,$errStr) {
 $this = $this|0;
 $err = $err|0;
 $errStr = $errStr|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep = 0, $gep5 = 0, $gep7 = 0;
 var $gep9 = 0, $gep_int = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $2 = $this;
 $3 = $err;
 $4 = $errStr;
 $5 = $2;
 $6 = $5;
 $1 = $6;
 $7 = $1;
 $8 = $7;
 $expanded1 = __ZTVSt9exception;
 $gep_int = __ZTVSt9exception;
 $gep = (($gep_int) + 8)|0;
 $expanded = $gep;
 HEAP32[$7>>2] = $expanded;
 $9 = $5;
 $expanded3 = 304;
 $gep_int4 = 304;
 $gep5 = (($gep_int4) + 8)|0;
 $expanded2 = $gep5;
 HEAP32[$5>>2] = $expanded2;
 $gep_int6 = $5;
 $gep7 = (($gep_int6) + 4)|0;
 $10 = $gep7;
 $11 = $3;
 HEAP32[$10>>2] = $11;
 $gep_int8 = $5;
 $gep9 = (($gep_int8) + 8)|0;
 $12 = $gep9;
 $13 = $4;
 HEAP32[$12>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN2cl6DeviceaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 
 if (!($5)) {
  STACKTOP = sp;return $3|0;
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 u$3 = __ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_($6,$8)|0;
 
 STACKTOP = sp;return $3|0;
}
function __ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, $gep_int3 = 0, label = 0, sp = 0, u$3 = 0;
 var u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $gep_int = $3;
 $4 = $gep_int;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 
 if ($6) {
  u$3 = __ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($3)|0;
  
 }
 $7 = $2;
 $gep_int1 = $7;
 $8 = $gep_int1;
 $9 = HEAP32[$8>>2]|0;
 $gep_int2 = $3;
 $10 = $gep_int2;
 HEAP32[$10>>2] = $9;
 $gep_int3 = $3;
 $11 = $gep_int3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 
 if (!($13)) {
  STACKTOP = sp;return $3|0;
 }
 u$7 = __ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($3)|0;
 
 STACKTOP = sp;return $3|0;
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE7releaseES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE6retainES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE6retainES3_($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $2 = $1;
 STACKTOP = sp;return -33;
}
function __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE7releaseES3_($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $2 = $1;
 STACKTOP = sp;return -33;
}
function __ZNK2cl6Device7getInfoIyEEijPT_($this,$name,$param) {
 $this = $this|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $2 = $name;
 $3 = $param;
 $4 = $1;
 $5 = $4;
 $gep_int = $4;
 $6 = $gep_int;
 $7 = $2;
 $8 = $3;
 $9 = __ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_yEEiT_RKT0_jPT1_(13,$6,$7,$8)|0;
 $gep_int1 = 1056;
 $expanded = $gep_int1;
 $10 = __ZN2cl6detailL10errHandlerEiPKc($9,$expanded)|0;
 STACKTOP = sp;return $10|0;
}
function __ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_yEEiT_RKT0_jPT1_($f,$arg0,$name,$param) {
 $f = $f|0;
 $arg0 = $arg0|0;
 $name = $name|0;
 $param = $param|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f0 = 0;
 var $gep = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $$byval_copy = sp;
 
 
 
 
 $f0 = sp + 40|0;
 $5 = sp + 48|0;
 $1 = $f;
 $2 = $arg0;
 $3 = $name;
 $4 = $param;
 $gep_int = $f0;
 $6 = $gep_int;
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $gep_int1 = $f0;
 $gep = (($gep_int1) + 4)|0;
 $8 = $gep;
 $9 = $2;
 HEAP32[$8>>2] = $9;
 $10 = $5;
 $11 = $f0;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;
 $12 = $3;
 $13 = $4;
 $14 = $$byval_copy;
 
 $15 = $$byval_copy;
 $16 = $5;
 ;HEAP32[$15+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;
 $17 = __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEyE3getES9_jPy($$byval_copy,$12,$13)|0;
 $18 = $$byval_copy;
 
 STACKTOP = sp;return $17|0;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEyE3getES9_jPy($f,$name,$param) {
 $f = $f|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $name;
 $2 = $param;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = __ZN2cl6detail15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES3_EclEjjS4_S5_($f,$3,8,$5,0)|0;
 STACKTOP = sp;return $6|0;
}
function __ZN2cl6vectorINS_6DeviceELj10EED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $16$phi = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $8$phi = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep_int = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0, u$17 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $4 = $1;
 $gep_int = $4;
 $5 = $gep_int;
 $gep_int2 = $5;
 $6 = $gep_int2;
 $gep_int3 = $6;
 $gep = (($gep_int3) + 40)|0;
 $7 = $gep;
 
 $8 = $7;
 while(1) {
  
  $gep_int4 = $8;
  $gep5 = (($gep_int4) + -4)|0;
  $9 = $gep5;
  __THREW__ = 0;
  invoke_vi(143,$9|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  
  if ($11) {
   break;
  }
  $12 = ($9|0)==($6|0);
  
  if ($12) {
   label = 4;
   break;
  } else {
   $8$phi = $9;$8 = $8$phi;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $13 = ___cxa_find_matching_catch(-1,-1)|0;
 $14 = tempRet0;
 $2 = $13;
 $3 = $14;
 $15 = ($6|0)==($9|0);
 
 L7: do {
  if (!($15)) {
   $16 = $9;
   while(1) {
    
    $gep_int6 = $16;
    $gep7 = (($gep_int6) + -4)|0;
    $17 = $gep7;
    __THREW__ = 0;
    invoke_vi(143,$17|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    
    if ($19) {
     break;
    }
    $20 = ($17|0)==($6|0);
    
    if ($20) {
     break L7;
    } else {
     $16$phi = $17;$16 = $16$phi;
    }
   }
   $expanded1 = 69;
   $23 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$17 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable
  }
 } while(0);
 
 $21 = $2;
 $22 = $3;
 ___resumeException($21|0);
 // unreachable
}
function __ZN2cl6DeviceD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6DeviceD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6DeviceD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP13_cl_device_idED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP13_cl_device_idED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 u$2 = __ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($2)|0;
 
 STACKTOP = sp;return;
}
function __ZN2cl6vectorINS_6DeviceELj10EEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $18$phi = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep11 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0;
 var label = 0, sp = 0, u$19 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $4 = $1;
 $gep_int = $4;
 $5 = $gep_int;
 $gep_int2 = $5;
 $6 = $gep_int2;
 $gep_int3 = $6;
 $gep = (($gep_int3) + 40)|0;
 $7 = $gep;
 
 $8 = $6;
 while(1) {
  
  __THREW__ = 0;
  invoke_vi(144,$8|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  
  if ($10) {
   break;
  }
  $gep_int4 = $8;
  $gep5 = (($gep_int4) + 4)|0;
  $11 = $gep5;
  $12 = ($11|0)==($7|0);
  
  if ($12) {
   label = 4;
   break;
  } else {
   $8 = $11;
  }
 }
 if ((label|0) == 4) {
  $gep_int6 = $4;
  $gep7 = (($gep_int6) + 40)|0;
  $13 = $gep7;
  HEAP32[$13>>2] = -1;
  $gep_int8 = $4;
  $gep9 = (($gep_int8) + 44)|0;
  $14 = $gep9;
  HEAP8[$14] = 1;
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $15 = ___cxa_find_matching_catch(-1,-1)|0;
 $16 = tempRet0;
 $2 = $15;
 $3 = $16;
 $17 = ($6|0)==($8|0);
 
 L7: do {
  if (!($17)) {
   $18 = $8;
   while(1) {
    
    $gep_int10 = $18;
    $gep11 = (($gep_int10) + -4)|0;
    $19 = $gep11;
    __THREW__ = 0;
    invoke_vi(143,$19|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    
    if ($21) {
     break;
    }
    $22 = ($19|0)==($6|0);
    
    if ($22) {
     break L7;
    } else {
     $18$phi = $19;$18 = $18$phi;
    }
   }
   $expanded1 = 69;
   $25 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$19 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable
  }
 } while(0);
 
 $23 = $2;
 $24 = $3;
 ___resumeException($23|0);
 // unreachable
}
function __ZN2cl6DeviceC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6DeviceC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6DeviceC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP13_cl_device_idEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP13_cl_device_idEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6vectorINS_8PlatformELj10EED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $16$phi = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $8$phi = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep_int = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0, u$17 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $4 = $1;
 $gep_int = $4;
 $5 = $gep_int;
 $gep_int2 = $5;
 $6 = $gep_int2;
 $gep_int3 = $6;
 $gep = (($gep_int3) + 40)|0;
 $7 = $gep;
 
 $8 = $7;
 while(1) {
  
  $gep_int4 = $8;
  $gep5 = (($gep_int4) + -4)|0;
  $9 = $gep5;
  __THREW__ = 0;
  invoke_vi(140,$9|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  
  if ($11) {
   break;
  }
  $12 = ($9|0)==($6|0);
  
  if ($12) {
   label = 4;
   break;
  } else {
   $8$phi = $9;$8 = $8$phi;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $13 = ___cxa_find_matching_catch(-1,-1)|0;
 $14 = tempRet0;
 $2 = $13;
 $3 = $14;
 $15 = ($6|0)==($9|0);
 
 L7: do {
  if (!($15)) {
   $16 = $9;
   while(1) {
    
    $gep_int6 = $16;
    $gep7 = (($gep_int6) + -4)|0;
    $17 = $gep7;
    __THREW__ = 0;
    invoke_vi(140,$17|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    
    if ($19) {
     break;
    }
    $20 = ($17|0)==($6|0);
    
    if ($20) {
     break L7;
    } else {
     $16$phi = $17;$16 = $16$phi;
    }
   }
   $expanded1 = 69;
   $23 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$17 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable
  }
 } while(0);
 
 $21 = $2;
 $22 = $3;
 ___resumeException($21|0);
 // unreachable
}
function __ZN2cl6vectorINS_8PlatformELj10EEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $18$phi = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep11 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0;
 var label = 0, sp = 0, u$19 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $4 = $1;
 $gep_int = $4;
 $5 = $gep_int;
 $gep_int2 = $5;
 $6 = $gep_int2;
 $gep_int3 = $6;
 $gep = (($gep_int3) + 40)|0;
 $7 = $gep;
 
 $8 = $6;
 while(1) {
  
  __THREW__ = 0;
  invoke_vi(145,$8|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  
  if ($10) {
   break;
  }
  $gep_int4 = $8;
  $gep5 = (($gep_int4) + 4)|0;
  $11 = $gep5;
  $12 = ($11|0)==($7|0);
  
  if ($12) {
   label = 4;
   break;
  } else {
   $8 = $11;
  }
 }
 if ((label|0) == 4) {
  $gep_int6 = $4;
  $gep7 = (($gep_int6) + 40)|0;
  $13 = $gep7;
  HEAP32[$13>>2] = -1;
  $gep_int8 = $4;
  $gep9 = (($gep_int8) + 44)|0;
  $14 = $gep9;
  HEAP8[$14] = 1;
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $15 = ___cxa_find_matching_catch(-1,-1)|0;
 $16 = tempRet0;
 $2 = $15;
 $3 = $16;
 $17 = ($6|0)==($8|0);
 
 L7: do {
  if (!($17)) {
   $18 = $8;
   while(1) {
    
    $gep_int10 = $18;
    $gep11 = (($gep_int10) + -4)|0;
    $19 = $gep11;
    __THREW__ = 0;
    invoke_vi(140,$19|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    
    if ($21) {
     break;
    }
    $22 = ($19|0)==($6|0);
    
    if ($22) {
     break L7;
    } else {
     $18$phi = $19;$18 = $18$phi;
    }
   }
   $expanded1 = 69;
   $25 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$19 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable
  }
 } while(0);
 
 $23 = $2;
 $24 = $3;
 ___resumeException($23|0);
 // unreachable
}
function __ZN2cl8PlatformC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl8PlatformC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIP12RenderDeviceLj10EED2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIP12RenderDeviceLj10EEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 40)|0;
 $3 = $gep;
 HEAP32[$3>>2] = -1;
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + 44)|0;
 $4 = $gep2;
 HEAP8[$4] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEjRKd($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__a$i = 0, $__cap$i = 0;
 var $__ms$i = 0, $__v = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep19 = 0, $gep23 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int18 = 0;
 var $gep_int2 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $tmp$i$i = 0, $tmp1$i$i = 0, label = 0, sp = 0, u$79 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 
 
 
 
 
 
 $7 = sp + 48|0;
 
 
 $10 = sp + 72|0;
 
 
 
 
 
 
 
 $18 = sp + 136|0;
 
 
 $19 = sp + 160|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $__v = sp + 344|0;
 
 
 $37 = $this;
 $38 = $__n;
 $39 = $__x;
 $42 = $37;
 $43 = $42;
 $36 = $43;
 $44 = $36;
 $gep_int = $44;
 $gep = (($gep_int) + 8)|0;
 $45 = $gep;
 $35 = $45;
 $46 = $35;
 $47 = $46;
 $34 = $47;
 $48 = $34;
 $gep_int2 = $48;
 $49 = $gep_int2;
 $50 = HEAP32[$49>>2]|0;
 $51 = $42;
 $gep_int3 = $42;
 $gep4 = (($gep_int3) + 4)|0;
 $52 = $gep4;
 $53 = HEAP32[$52>>2]|0;
 $54 = $50;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $57 = (($56|0) / 8)&-1;
 $58 = $38;
 $59 = ($57>>>0)>=($58>>>0);
 
 if ($59) {
  $60 = $38;
  $61 = $39;
  $31 = $42;
  $32 = $60;
  $33 = $61;
  $62 = $31;
  $63 = $62;
  $30 = $63;
  $64 = $30;
  $gep_int5 = $64;
  $gep6 = (($gep_int5) + 8)|0;
  $65 = $gep6;
  $29 = $65;
  $66 = $29;
  $67 = $66;
  $28 = $67;
  $68 = $28;
  $69 = $68;
  $__a$i = $69;
  
  while(1) {
   $70 = $__a$i;
   $71 = $62;
   $gep_int7 = $62;
   $gep8 = (($gep_int7) + 4)|0;
   $72 = $gep8;
   $73 = HEAP32[$72>>2]|0;
   $24 = $73;
   $74 = $24;
   $75 = $33;
   $25 = $70;
   $26 = $74;
   $27 = $75;
   $76 = $26;
   $77 = $76;
   $78 = ($77|0)==(0);
   
   if (!($78)) {
    $79 = $77;
    $80 = $27;
    $81 = +HEAPF64[$80>>3];
    HEAPF64[$76>>3] = $81;
    
   }
   $82 = $62;
   $gep_int9 = $62;
   $gep10 = (($gep_int9) + 4)|0;
   $83 = $gep10;
   $84 = HEAP32[$83>>2]|0;
   $gep_int11 = $84;
   $gep12 = (($gep_int11) + 8)|0;
   $85 = $gep12;
   HEAP32[$83>>2] = $85;
   $86 = $32;
   $87 = (($86) + -1)|0;
   $32 = $87;
   $88 = $32;
   $89 = ($88>>>0)>(0);
   
   if (!($89)) {
    break;
   }
  }
  
  STACKTOP = sp;return;
 }
 $90 = $42;
 $23 = $90;
 $91 = $23;
 $gep_int13 = $91;
 $gep14 = (($gep_int13) + 8)|0;
 $92 = $gep14;
 $22 = $92;
 $93 = $22;
 $94 = $93;
 $21 = $94;
 $95 = $21;
 $96 = $95;
 $__a = $96;
 $20 = $42;
 $97 = $20;
 $98 = $97;
 $gep_int15 = $97;
 $gep16 = (($gep_int15) + 4)|0;
 $99 = $gep16;
 $100 = HEAP32[$99>>2]|0;
 $101 = $97;
 $gep_int17 = $97;
 $102 = $gep_int17;
 $103 = HEAP32[$102>>2]|0;
 $104 = $100;
 $105 = $103;
 $106 = (($104) - ($105))|0;
 $107 = (($106|0) / 8)&-1;
 $108 = $38;
 $109 = (($107) + ($108))|0;
 $17 = $42;
 HEAP32[$18>>2] = $109;
 $110 = $17;
 $111 = __ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($110)|0;
 $__ms$i = $111;
 $112 = HEAP32[$18>>2]|0;
 $113 = $__ms$i;
 $114 = ($112>>>0)>($113>>>0);
 
 if ($114) {
  $115 = $110;
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($115);
  
 }
 $15 = $110;
 $116 = $15;
 $117 = $116;
 $14 = $117;
 $118 = $14;
 $13 = $118;
 $119 = $13;
 $gep_int18 = $119;
 $gep19 = (($gep_int18) + 8)|0;
 $120 = $gep19;
 $12 = $120;
 $121 = $12;
 $122 = $121;
 $11 = $122;
 $123 = $11;
 $gep_int20 = $123;
 $124 = $gep_int20;
 $125 = HEAP32[$124>>2]|0;
 $gep_int21 = $118;
 $126 = $gep_int21;
 $127 = HEAP32[$126>>2]|0;
 $128 = $125;
 $129 = $127;
 $130 = (($128) - ($129))|0;
 $131 = (($130|0) / 8)&-1;
 $__cap$i = $131;
 $132 = $__cap$i;
 $133 = $__ms$i;
 $134 = (($133>>>0) / 2)&-1;
 $135 = ($132>>>0)>=($134>>>0);
 
 if ($135) {
  $136 = $__ms$i;
  $16 = $136;
  
 } else {
  $137 = $__cap$i;
  $138 = $137<<1;
  HEAP32[$19>>2] = $138;
  $8 = $19;
  $9 = $18;
  $139 = $8;
  $140 = $9;
  $tmp$i$i = $7;
  $tmp1$i$i = $10;
  ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
  $5 = $139;
  $6 = $140;
  $141 = $5;
  $142 = $6;
  $2 = $7;
  $3 = $141;
  $4 = $142;
  $143 = $3;
  $144 = HEAP32[$143>>2]|0;
  $145 = $4;
  $146 = HEAP32[$145>>2]|0;
  $147 = ($144>>>0)<($146>>>0);
  
  if ($147) {
   $148 = $6;
   
   $150 = $148;
  } else {
   $149 = $5;
   
   $150 = $149;
  }
  
  $151 = HEAP32[$150>>2]|0;
  $16 = $151;
  
 }
 $152 = $16;
 $1 = $42;
 $153 = $1;
 $154 = $153;
 $gep_int22 = $153;
 $gep23 = (($gep_int22) + 4)|0;
 $155 = $gep23;
 $156 = HEAP32[$155>>2]|0;
 $157 = $153;
 $gep_int24 = $153;
 $158 = $gep_int24;
 $159 = HEAP32[$158>>2]|0;
 $160 = $156;
 $161 = $159;
 $162 = (($160) - ($161))|0;
 $163 = (($162|0) / 8)&-1;
 $164 = $__a;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EjjS3_($__v,$152,$163,$164);
 $165 = $38;
 $166 = $39;
 __THREW__ = 0;
 invoke_viii(7,$__v|0,$165|0,$166|0);
 $167 = __THREW__; __THREW__ = 0;
 $168 = $167&1;
 
 do {
  if (!($168)) {
   __THREW__ = 0;
   invoke_vii(50,$42|0,$__v|0);
   $169 = __THREW__; __THREW__ = 0;
   $170 = $169&1;
   
   if ($170) {
    break;
   }
   __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev($__v);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded = 69;
 $171 = ___cxa_find_matching_catch(-1,-1)|0;
 $172 = tempRet0;
 $40 = $171;
 $41 = $172;
 __THREW__ = 0;
 invoke_vi(146,$__v|0);
 $173 = __THREW__; __THREW__ = 0;
 $174 = $173&1;
 
 if ($174) {
  $expanded1 = 69;
  $177 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$79 = tempRet0;
  ___clang_call_terminate($177);
  // unreachable
 }
 
 $175 = $40;
 $176 = $41;
 ___resumeException($175|0);
 // unreachable
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $1 = $this;
 $2 = $__cap;
 $3 = $__start;
 $4 = $__a;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($5,$6,$7,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEjRKd($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $gep = 0, $gep2 = 0, $gep4 = 0;
 var $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 88|0;
 
 
 
 
 
 
 
 
 
 
 
 $8 = $this;
 $9 = $__n;
 $10 = $__x;
 $11 = $8;
 $7 = $11;
 $12 = $7;
 $gep_int = $12;
 $gep = (($gep_int) + 12)|0;
 $13 = $gep;
 $6 = $13;
 $14 = $6;
 $15 = $14;
 $5 = $15;
 $16 = $5;
 $gep_int1 = $16;
 $gep2 = (($gep_int1) + 4)|0;
 $17 = $gep2;
 $18 = HEAP32[$17>>2]|0;
 $__a = $18;
 
 while(1) {
  $19 = $__a;
  $gep_int3 = $11;
  $gep4 = (($gep_int3) + 8)|0;
  $20 = $gep4;
  $21 = HEAP32[$20>>2]|0;
  $1 = $21;
  $22 = $1;
  $23 = $10;
  $2 = $19;
  $3 = $22;
  $4 = $23;
  $24 = $3;
  $25 = $24;
  $26 = ($25|0)==(0);
  
  if (!($26)) {
   $27 = $25;
   $28 = $4;
   $29 = +HEAPF64[$28>>3];
   HEAPF64[$24>>3] = $29;
   
  }
  $gep_int5 = $11;
  $gep6 = (($gep_int5) + 8)|0;
  $30 = $gep6;
  $31 = HEAP32[$30>>2]|0;
  $gep_int7 = $31;
  $gep8 = (($gep_int7) + 8)|0;
  $32 = $gep8;
  HEAP32[$30>>2] = $32;
  $33 = $9;
  $34 = (($33) + -1)|0;
  $9 = $34;
  
  $35 = $9;
  $36 = ($35>>>0)>(0);
  
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep19 = 0, $gep22 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0;
 var $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int2 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 
 
 
 
 
 
 
 
 
 
 $__t$i2 = sp + 80|0;
 
 
 
 
 
 $__t$i1 = sp + 128|0;
 
 
 
 
 
 
 
 
 
 
 
 $__t$i = sp + 224|0;
 
 
 
 
 
 
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 $33 = $32;
 $29 = $33;
 $34 = $29;
 $gep_int = $34;
 $gep = (($gep_int) + 8)|0;
 $35 = $gep;
 $28 = $35;
 $36 = $28;
 $37 = $36;
 $27 = $37;
 $38 = $27;
 $39 = $38;
 $40 = $32;
 $gep_int1 = $32;
 $41 = $gep_int1;
 $42 = HEAP32[$41>>2]|0;
 $43 = $32;
 $gep_int2 = $32;
 $gep3 = (($gep_int2) + 4)|0;
 $44 = $gep3;
 $45 = HEAP32[$44>>2]|0;
 $46 = $31;
 $gep_int4 = $46;
 $gep5 = (($gep_int4) + 4)|0;
 $47 = $gep5;
 $1 = $39;
 $2 = $42;
 $3 = $45;
 $4 = $47;
 $48 = $3;
 $49 = $2;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($52|0) / 8)&-1;
 $_Np$i = $53;
 $54 = $_Np$i;
 $55 = $4;
 $56 = HEAP32[$55>>2]|0;
 $57 = (0 - ($54))|0;
 $gep_int6 = $56;
 $gep_array = $57<<3;
 $gep7 = (($gep_int6) + ($gep_array))|0;
 $58 = $gep7;
 HEAP32[$55>>2] = $58;
 $59 = $4;
 $60 = HEAP32[$59>>2]|0;
 $61 = $60;
 $62 = $2;
 $63 = $62;
 $64 = $_Np$i;
 $65 = $64<<3;
 _memcpy($61|0,$63|0,$65|0)|0;
 $66 = $32;
 $gep_int8 = $32;
 $67 = $gep_int8;
 $68 = $31;
 $gep_int9 = $68;
 $gep10 = (($gep_int9) + 4)|0;
 $69 = $gep10;
 $8 = $67;
 $9 = $69;
 $70 = $8;
 $7 = $70;
 $71 = $7;
 $72 = HEAP32[$71>>2]|0;
 HEAP32[$__t$i2>>2] = $72;
 $73 = $9;
 $5 = $73;
 $74 = $5;
 $75 = HEAP32[$74>>2]|0;
 $76 = $8;
 HEAP32[$76>>2] = $75;
 $6 = $__t$i2;
 $77 = $6;
 $78 = HEAP32[$77>>2]|0;
 $79 = $9;
 HEAP32[$79>>2] = $78;
 $80 = $32;
 $gep_int11 = $32;
 $gep12 = (($gep_int11) + 4)|0;
 $81 = $gep12;
 $82 = $31;
 $gep_int13 = $82;
 $gep14 = (($gep_int13) + 8)|0;
 $83 = $gep14;
 $13 = $81;
 $14 = $83;
 $84 = $13;
 $12 = $84;
 $85 = $12;
 $86 = HEAP32[$85>>2]|0;
 HEAP32[$__t$i1>>2] = $86;
 $87 = $14;
 $10 = $87;
 $88 = $10;
 $89 = HEAP32[$88>>2]|0;
 $90 = $13;
 HEAP32[$90>>2] = $89;
 $11 = $__t$i1;
 $91 = $11;
 $92 = HEAP32[$91>>2]|0;
 $93 = $14;
 HEAP32[$93>>2] = $92;
 $94 = $32;
 $17 = $94;
 $95 = $17;
 $gep_int15 = $95;
 $gep16 = (($gep_int15) + 8)|0;
 $96 = $gep16;
 $16 = $96;
 $97 = $16;
 $98 = $97;
 $15 = $98;
 $99 = $15;
 $gep_int17 = $99;
 $100 = $gep_int17;
 $101 = $31;
 $20 = $101;
 $102 = $20;
 $gep_int18 = $102;
 $gep19 = (($gep_int18) + 12)|0;
 $103 = $gep19;
 $19 = $103;
 $104 = $19;
 $105 = $104;
 $18 = $105;
 $106 = $18;
 $gep_int20 = $106;
 $107 = $gep_int20;
 $24 = $100;
 $25 = $107;
 $108 = $24;
 $23 = $108;
 $109 = $23;
 $110 = HEAP32[$109>>2]|0;
 HEAP32[$__t$i>>2] = $110;
 $111 = $25;
 $21 = $111;
 $112 = $21;
 $113 = HEAP32[$112>>2]|0;
 $114 = $24;
 HEAP32[$114>>2] = $113;
 $22 = $__t$i;
 $115 = $22;
 $116 = HEAP32[$115>>2]|0;
 $117 = $25;
 HEAP32[$117>>2] = $116;
 $118 = $31;
 $gep_int21 = $118;
 $gep22 = (($gep_int21) + 4)|0;
 $119 = $gep22;
 $120 = HEAP32[$119>>2]|0;
 $121 = $31;
 $gep_int23 = $121;
 $122 = $gep_int23;
 HEAP32[$122>>2] = $120;
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep13 = 0, $gep15 = 0, $gep18 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int14 = 0;
 var $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $tmp$i$i = 0, $tmp$i$i$i$i = 0, $tmp1$i$i = 0, $tmp1$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 248|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $17 = sp + 128|0;
 
 
 $20 = sp + 152|0;
 
 
 
 
 
 $26 = sp + 200|0;
 
 
 $29 = sp + 224|0;
 
 
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $gep_int = $33;
 $gep = (($gep_int) + 4)|0;
 $34 = $gep;
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 $tmp$i$i = $26;
 $tmp1$i$i = $29;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 
 while(1) {
  $39 = $25;
  $gep_int1 = $38;
  $gep2 = (($gep_int1) + 8)|0;
  $40 = $gep2;
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $gep_int3 = $43;
  $gep4 = (($gep_int3) + 12)|0;
  $44 = $gep4;
  $22 = $44;
  $45 = $22;
  $46 = $45;
  $21 = $46;
  $47 = $21;
  $gep_int5 = $47;
  $gep6 = (($gep_int5) + 4)|0;
  $48 = $gep6;
  $49 = HEAP32[$48>>2]|0;
  $gep_int7 = $38;
  $gep8 = (($gep_int7) + 8)|0;
  $50 = $gep8;
  $51 = HEAP32[$50>>2]|0;
  $gep_int9 = $51;
  $gep10 = (($gep_int9) + -8)|0;
  $52 = $gep10;
  HEAP32[$50>>2] = $52;
  $14 = $52;
  $53 = $14;
  $18 = $49;
  $19 = $53;
  $54 = $18;
  $55 = $19;
  $tmp$i$i$i$i = $17;
  $tmp1$i$i$i$i = $20;
  ;HEAP8[$tmp$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i+0|0]|0;
  $15 = $54;
  $16 = $55;
  
 }
 $gep_int11 = $32;
 $56 = $gep_int11;
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0);
 
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $7 = $32;
 $59 = $7;
 $gep_int12 = $59;
 $gep13 = (($gep_int12) + 12)|0;
 $60 = $gep13;
 $6 = $60;
 $61 = $6;
 $62 = $61;
 $5 = $62;
 $63 = $5;
 $gep_int14 = $63;
 $gep15 = (($gep_int14) + 4)|0;
 $64 = $gep15;
 $65 = HEAP32[$64>>2]|0;
 $gep_int16 = $32;
 $66 = $gep_int16;
 $67 = HEAP32[$66>>2]|0;
 $4 = $32;
 $68 = $4;
 $3 = $68;
 $69 = $3;
 $gep_int17 = $69;
 $gep18 = (($gep_int17) + 12)|0;
 $70 = $gep18;
 $2 = $70;
 $71 = $2;
 $72 = $71;
 $1 = $72;
 $73 = $1;
 $gep_int19 = $73;
 $74 = $gep_int19;
 $75 = HEAP32[$74>>2]|0;
 $gep_int20 = $68;
 $76 = $gep_int20;
 $77 = HEAP32[$76>>2]|0;
 $78 = $75;
 $79 = $77;
 $80 = (($78) - ($79))|0;
 $81 = (($80|0) / 8)&-1;
 $11 = $65;
 $12 = $67;
 $13 = $81;
 $82 = $11;
 $83 = $12;
 $84 = $13;
 $8 = $82;
 $9 = $83;
 $10 = $84;
 $85 = $9;
 $86 = $85;
 __ZdlPv($86);
 
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep_int = 0, $tmp$i = 0, $tmp$i1 = 0, $tmp1$i = 0, $tmp1$i2 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 
 
 $3 = sp + 16|0;
 
 $5 = sp + 32|0;
 
 
 
 
 
 $11 = sp + 80|0;
 
 
 $14 = sp + 104|0;
 
 
 
 
 $19 = sp + 144|0;
 $20 = sp + 152|0;
 
 
 $18 = $this;
 $21 = $18;
 $22 = $21;
 $17 = $22;
 $23 = $17;
 $gep_int = $23;
 $gep = (($gep_int) + 8)|0;
 $24 = $gep;
 $16 = $24;
 $25 = $16;
 $26 = $25;
 $15 = $26;
 $27 = $15;
 $28 = $27;
 $4 = $28;
 $29 = $4;
 $tmp$i1 = $3;
 $tmp1$i2 = $5;
 ;HEAP8[$tmp$i1+0|0]=HEAP8[$tmp1$i2+0|0]|0;
 $2 = $29;
 $30 = $2;
 $1 = $30;
 HEAP32[$19>>2] = 536870911;
 $31 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $31;
 $12 = $19;
 $13 = $20;
 $32 = $12;
 $33 = $13;
 $tmp$i = $11;
 $tmp1$i = $14;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $9 = $32;
 $10 = $33;
 $34 = $10;
 $35 = $9;
 $6 = $11;
 $7 = $34;
 $8 = $35;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = $8;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37>>>0)<($39>>>0);
 
 if ($40) {
  $41 = $10;
  
  $43 = $41;
 } else {
  $42 = $9;
  
  $43 = $42;
 }
 
 
 $44 = HEAP32[$43>>2]|0;
 STACKTOP = sp;return $44|0;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $gep = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep21 = 0, $gep23 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_array = 0, $gep_array20 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0;
 var $gep_int19 = 0, $gep_int2 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 
 
 
 
 $5 = sp + 32|0;
 
 
 
 $9 = sp + 64|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $39 = sp + 304|0;
 $40 = sp + 312|0;
 $35 = $this;
 $36 = $__cap;
 $37 = $__start;
 $38 = $__a;
 $41 = $35;
 $gep_int = $41;
 $gep = (($gep_int) + 12)|0;
 $42 = $gep;
 $33 = $39;
 $34 = -1;
 $43 = $33;
 $44 = $34;
 $31 = $43;
 $32 = $44;
 $45 = $31;
 $gep_int1 = $45;
 $46 = $gep_int1;
 HEAP32[$46>>2] = 0;
 $17 = $39;
 $47 = $38;
 $11 = $42;
 $12 = 0;
 $13 = $47;
 $48 = $11;
 $49 = $12;
 $50 = $13;
 $8 = $48;
 HEAP32[$9>>2] = $49;
 $10 = $50;
 $51 = $8;
 $52 = $51;
 $7 = $9;
 $53 = $7;
 $54 = HEAP32[$53>>2]|0;
 $55 = $10;
 $1 = $55;
 $56 = $1;
 $4 = $52;
 HEAP32[$5>>2] = $54;
 $6 = $56;
 $57 = $4;
 $gep_int2 = $57;
 $58 = $gep_int2;
 $3 = $5;
 $59 = $3;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $60;
 $gep_int3 = $57;
 $gep4 = (($gep_int3) + 4)|0;
 $61 = $gep4;
 $62 = $6;
 $2 = $62;
 $63 = $2;
 HEAP32[$61>>2] = $63;
 $64 = $36;
 $65 = ($64|0)!=(0);
 
 if ($65) {
  $16 = $41;
  $66 = $16;
  $gep_int5 = $66;
  $gep6 = (($gep_int5) + 12)|0;
  $67 = $gep6;
  $15 = $67;
  $68 = $15;
  $69 = $68;
  $14 = $69;
  $70 = $14;
  $gep_int7 = $70;
  $gep8 = (($gep_int7) + 4)|0;
  $71 = $gep8;
  $72 = HEAP32[$71>>2]|0;
  $73 = $36;
  $21 = $72;
  $22 = $73;
  $74 = $21;
  $75 = $22;
  $18 = $74;
  $19 = $75;
  $20 = 0;
  $76 = $19;
  $77 = $76<<3;
  $78 = __Znwj($77)|0;
  $79 = $78;
  
  $84 = $79;
 } else {
  $25 = $40;
  $26 = -1;
  $80 = $25;
  $81 = $26;
  $23 = $80;
  $24 = $81;
  $82 = $23;
  $gep_int9 = $82;
  $83 = $gep_int9;
  HEAP32[$83>>2] = 0;
  $27 = $40;
  
  $84 = 0;
 }
 
 $gep_int10 = $41;
 $85 = $gep_int10;
 HEAP32[$85>>2] = $84;
 $gep_int11 = $41;
 $86 = $gep_int11;
 $87 = HEAP32[$86>>2]|0;
 $88 = $37;
 $gep_int12 = $87;
 $gep_array = $88<<3;
 $gep13 = (($gep_int12) + ($gep_array))|0;
 $89 = $gep13;
 $gep_int14 = $41;
 $gep15 = (($gep_int14) + 8)|0;
 $90 = $gep15;
 HEAP32[$90>>2] = $89;
 $gep_int16 = $41;
 $gep17 = (($gep_int16) + 4)|0;
 $91 = $gep17;
 HEAP32[$91>>2] = $89;
 $gep_int18 = $41;
 $92 = $gep_int18;
 $93 = HEAP32[$92>>2]|0;
 $94 = $36;
 $gep_int19 = $93;
 $gep_array20 = $94<<3;
 $gep21 = (($gep_int19) + ($gep_array20))|0;
 $95 = $gep21;
 $30 = $41;
 $96 = $30;
 $gep_int22 = $96;
 $gep23 = (($gep_int22) + 12)|0;
 $97 = $gep23;
 $29 = $97;
 $98 = $29;
 $99 = $98;
 $28 = $99;
 $100 = $28;
 $gep_int24 = $100;
 $101 = $gep_int24;
 HEAP32[$101>>2] = $95;
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP15_cl_platform_idED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 u$2 = __ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($2)|0;
 
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE7releaseES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE7releaseES3_($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $2 = $1;
 STACKTOP = sp;return -32;
}
function __ZN12RenderDevice6FinishEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 16)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 u$1 = __ZNK2cl12CommandQueue6finishEv($4)|0;
 STACKTOP = sp;return;
}
function __ZN12RenderConfig12UpdateCameraEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0;
 var $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0;
 var $28 = 0.0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0;
 var $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0;
 var $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0.0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0.0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $fov = 0.0, $gep = 0, $gep100 = 0, $gep103 = 0;
 var $gep105 = 0, $gep107 = 0, $gep109 = 0, $gep111 = 0, $gep113 = 0, $gep115 = 0, $gep117 = 0, $gep119 = 0, $gep121 = 0, $gep123 = 0, $gep125 = 0, $gep127 = 0, $gep129 = 0, $gep13 = 0, $gep131 = 0, $gep133 = 0, $gep135 = 0, $gep137 = 0, $gep139 = 0, $gep141 = 0;
 var $gep143 = 0, $gep145 = 0, $gep148 = 0, $gep150 = 0, $gep152 = 0, $gep155 = 0, $gep157 = 0, $gep16 = 0, $gep160 = 0, $gep162 = 0, $gep164 = 0, $gep166 = 0, $gep168 = 0, $gep170 = 0, $gep173 = 0, $gep175 = 0, $gep177 = 0, $gep179 = 0, $gep182 = 0, $gep184 = 0;
 var $gep186 = 0, $gep188 = 0, $gep190 = 0, $gep193 = 0, $gep195 = 0, $gep198 = 0, $gep20 = 0, $gep200 = 0, $gep202 = 0, $gep204 = 0, $gep206 = 0, $gep208 = 0, $gep210 = 0, $gep212 = 0, $gep214 = 0, $gep216 = 0, $gep218 = 0, $gep22 = 0, $gep220 = 0, $gep222 = 0;
 var $gep224 = 0, $gep227 = 0, $gep229 = 0, $gep232 = 0, $gep234 = 0, $gep236 = 0, $gep238 = 0, $gep240 = 0, $gep242 = 0, $gep244 = 0, $gep246 = 0, $gep248 = 0, $gep25 = 0, $gep250 = 0, $gep252 = 0, $gep254 = 0, $gep256 = 0, $gep258 = 0, $gep260 = 0, $gep262 = 0;
 var $gep265 = 0, $gep267 = 0, $gep27 = 0, $gep270 = 0, $gep272 = 0, $gep274 = 0, $gep276 = 0, $gep278 = 0, $gep280 = 0, $gep282 = 0, $gep284 = 0, $gep286 = 0, $gep288 = 0, $gep29 = 0, $gep290 = 0, $gep292 = 0, $gep294 = 0, $gep296 = 0, $gep298 = 0, $gep300 = 0;
 var $gep302 = 0, $gep304 = 0, $gep306 = 0, $gep308 = 0, $gep31 = 0, $gep310 = 0, $gep312 = 0, $gep314 = 0, $gep316 = 0, $gep318 = 0, $gep320 = 0, $gep323 = 0, $gep325 = 0, $gep327 = 0, $gep329 = 0, $gep331 = 0, $gep334 = 0, $gep336 = 0, $gep339 = 0, $gep34 = 0;
 var $gep341 = 0, $gep343 = 0, $gep345 = 0, $gep347 = 0, $gep349 = 0, $gep351 = 0, $gep353 = 0, $gep356 = 0, $gep358 = 0, $gep36 = 0, $gep360 = 0, $gep362 = 0, $gep364 = 0, $gep366 = 0, $gep368 = 0, $gep370 = 0, $gep373 = 0, $gep375 = 0, $gep377 = 0, $gep379 = 0;
 var $gep38 = 0, $gep381 = 0, $gep384 = 0, $gep386 = 0, $gep389 = 0, $gep391 = 0, $gep393 = 0, $gep395 = 0, $gep397 = 0, $gep399 = 0, $gep40 = 0, $gep401 = 0, $gep403 = 0, $gep405 = 0, $gep407 = 0, $gep409 = 0, $gep411 = 0, $gep413 = 0, $gep415 = 0, $gep418 = 0;
 var $gep42 = 0, $gep420 = 0, $gep423 = 0, $gep425 = 0, $gep427 = 0, $gep429 = 0, $gep431 = 0, $gep433 = 0, $gep435 = 0, $gep437 = 0, $gep439 = 0, $gep44 = 0, $gep441 = 0, $gep443 = 0, $gep445 = 0, $gep447 = 0, $gep449 = 0, $gep452 = 0, $gep454 = 0, $gep457 = 0;
 var $gep459 = 0, $gep46 = 0, $gep461 = 0, $gep463 = 0, $gep465 = 0, $gep467 = 0, $gep469 = 0, $gep471 = 0, $gep473 = 0, $gep475 = 0, $gep477 = 0, $gep479 = 0, $gep48 = 0, $gep481 = 0, $gep483 = 0, $gep485 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0;
 var $gep59 = 0, $gep61 = 0, $gep64 = 0, $gep66 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep98 = 0, $gep_int = 0;
 var $gep_int101 = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int112 = 0, $gep_int114 = 0, $gep_int116 = 0, $gep_int118 = 0, $gep_int12 = 0, $gep_int120 = 0, $gep_int122 = 0, $gep_int124 = 0, $gep_int126 = 0, $gep_int128 = 0, $gep_int130 = 0, $gep_int132 = 0, $gep_int134 = 0, $gep_int136 = 0;
 var $gep_int138 = 0, $gep_int14 = 0, $gep_int140 = 0, $gep_int142 = 0, $gep_int144 = 0, $gep_int146 = 0, $gep_int147 = 0, $gep_int149 = 0, $gep_int15 = 0, $gep_int151 = 0, $gep_int153 = 0, $gep_int154 = 0, $gep_int156 = 0, $gep_int158 = 0, $gep_int159 = 0, $gep_int161 = 0, $gep_int163 = 0, $gep_int165 = 0, $gep_int167 = 0, $gep_int169 = 0;
 var $gep_int17 = 0, $gep_int171 = 0, $gep_int172 = 0, $gep_int174 = 0, $gep_int176 = 0, $gep_int178 = 0, $gep_int18 = 0, $gep_int180 = 0, $gep_int181 = 0, $gep_int183 = 0, $gep_int185 = 0, $gep_int187 = 0, $gep_int189 = 0, $gep_int19 = 0, $gep_int191 = 0, $gep_int192 = 0, $gep_int194 = 0, $gep_int196 = 0, $gep_int197 = 0, $gep_int199 = 0;
 var $gep_int201 = 0, $gep_int203 = 0, $gep_int205 = 0, $gep_int207 = 0, $gep_int209 = 0, $gep_int21 = 0, $gep_int211 = 0, $gep_int213 = 0, $gep_int215 = 0, $gep_int217 = 0, $gep_int219 = 0, $gep_int221 = 0, $gep_int223 = 0, $gep_int225 = 0, $gep_int226 = 0, $gep_int228 = 0, $gep_int23 = 0, $gep_int230 = 0, $gep_int231 = 0, $gep_int233 = 0;
 var $gep_int235 = 0, $gep_int237 = 0, $gep_int239 = 0, $gep_int24 = 0, $gep_int241 = 0, $gep_int243 = 0, $gep_int245 = 0, $gep_int247 = 0, $gep_int249 = 0, $gep_int251 = 0, $gep_int253 = 0, $gep_int255 = 0, $gep_int257 = 0, $gep_int259 = 0, $gep_int26 = 0, $gep_int261 = 0, $gep_int263 = 0, $gep_int264 = 0, $gep_int266 = 0, $gep_int268 = 0;
 var $gep_int269 = 0, $gep_int271 = 0, $gep_int273 = 0, $gep_int275 = 0, $gep_int277 = 0, $gep_int279 = 0, $gep_int28 = 0, $gep_int281 = 0, $gep_int283 = 0, $gep_int285 = 0, $gep_int287 = 0, $gep_int289 = 0, $gep_int291 = 0, $gep_int293 = 0, $gep_int295 = 0, $gep_int297 = 0, $gep_int299 = 0, $gep_int30 = 0, $gep_int301 = 0, $gep_int303 = 0;
 var $gep_int305 = 0, $gep_int307 = 0, $gep_int309 = 0, $gep_int311 = 0, $gep_int313 = 0, $gep_int315 = 0, $gep_int317 = 0, $gep_int319 = 0, $gep_int32 = 0, $gep_int321 = 0, $gep_int322 = 0, $gep_int324 = 0, $gep_int326 = 0, $gep_int328 = 0, $gep_int33 = 0, $gep_int330 = 0, $gep_int332 = 0, $gep_int333 = 0, $gep_int335 = 0, $gep_int337 = 0;
 var $gep_int338 = 0, $gep_int340 = 0, $gep_int342 = 0, $gep_int344 = 0, $gep_int346 = 0, $gep_int348 = 0, $gep_int35 = 0, $gep_int350 = 0, $gep_int352 = 0, $gep_int354 = 0, $gep_int355 = 0, $gep_int357 = 0, $gep_int359 = 0, $gep_int361 = 0, $gep_int363 = 0, $gep_int365 = 0, $gep_int367 = 0, $gep_int369 = 0, $gep_int37 = 0, $gep_int371 = 0;
 var $gep_int372 = 0, $gep_int374 = 0, $gep_int376 = 0, $gep_int378 = 0, $gep_int380 = 0, $gep_int382 = 0, $gep_int383 = 0, $gep_int385 = 0, $gep_int387 = 0, $gep_int388 = 0, $gep_int39 = 0, $gep_int390 = 0, $gep_int392 = 0, $gep_int394 = 0, $gep_int396 = 0, $gep_int398 = 0, $gep_int400 = 0, $gep_int402 = 0, $gep_int404 = 0, $gep_int406 = 0;
 var $gep_int408 = 0, $gep_int41 = 0, $gep_int410 = 0, $gep_int412 = 0, $gep_int414 = 0, $gep_int416 = 0, $gep_int417 = 0, $gep_int419 = 0, $gep_int421 = 0, $gep_int422 = 0, $gep_int424 = 0, $gep_int426 = 0, $gep_int428 = 0, $gep_int43 = 0, $gep_int430 = 0, $gep_int432 = 0, $gep_int434 = 0, $gep_int436 = 0, $gep_int438 = 0, $gep_int440 = 0;
 var $gep_int442 = 0, $gep_int444 = 0, $gep_int446 = 0, $gep_int448 = 0, $gep_int45 = 0, $gep_int450 = 0, $gep_int451 = 0, $gep_int453 = 0, $gep_int455 = 0, $gep_int456 = 0, $gep_int458 = 0, $gep_int460 = 0, $gep_int462 = 0, $gep_int464 = 0, $gep_int466 = 0, $gep_int468 = 0, $gep_int47 = 0, $gep_int470 = 0, $gep_int472 = 0, $gep_int474 = 0;
 var $gep_int476 = 0, $gep_int478 = 0, $gep_int480 = 0, $gep_int482 = 0, $gep_int484 = 0, $gep_int49 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0;
 var $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int97 = 0, $gep_int99 = 0, $i = 0, $k = 0.0, $k2 = 0.0, $k3 = 0.0, $k5 = 0.0, $k6 = 0.0, $l = 0.0;
 var $l1 = 0.0, $l4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 88|0;
 
 
 
 
 
 
 
 
 
 
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 532)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $gep_int12 = $4;
 $gep13 = (($gep_int12) + 12)|0;
 $5 = $gep13;
 $gep_int14 = $5;
 $6 = $gep_int14;
 $7 = +HEAPF32[$6>>2];
 $gep_int15 = $2;
 $gep16 = (($gep_int15) + 532)|0;
 $8 = $gep16;
 $9 = HEAP32[$8>>2]|0;
 $gep_int17 = $9;
 $10 = $gep_int17;
 $gep_int18 = $10;
 $11 = $gep_int18;
 $12 = +HEAPF32[$11>>2];
 $13 = $7 - $12;
 $gep_int19 = $2;
 $gep20 = (($gep_int19) + 532)|0;
 $14 = $gep20;
 $15 = HEAP32[$14>>2]|0;
 $gep_int21 = $15;
 $gep22 = (($gep_int21) + 24)|0;
 $16 = $gep22;
 $gep_int23 = $16;
 $17 = $gep_int23;
 HEAPF32[$17>>2] = $13;
 $gep_int24 = $2;
 $gep25 = (($gep_int24) + 532)|0;
 $18 = $gep25;
 $19 = HEAP32[$18>>2]|0;
 $gep_int26 = $19;
 $gep27 = (($gep_int26) + 12)|0;
 $20 = $gep27;
 $gep_int28 = $20;
 $gep29 = (($gep_int28) + 4)|0;
 $21 = $gep29;
 $22 = +HEAPF32[$21>>2];
 $gep_int30 = $2;
 $gep31 = (($gep_int30) + 532)|0;
 $23 = $gep31;
 $24 = HEAP32[$23>>2]|0;
 $gep_int32 = $24;
 $25 = $gep_int32;
 $gep_int33 = $25;
 $gep34 = (($gep_int33) + 4)|0;
 $26 = $gep34;
 $27 = +HEAPF32[$26>>2];
 $28 = $22 - $27;
 $gep_int35 = $2;
 $gep36 = (($gep_int35) + 532)|0;
 $29 = $gep36;
 $30 = HEAP32[$29>>2]|0;
 $gep_int37 = $30;
 $gep38 = (($gep_int37) + 24)|0;
 $31 = $gep38;
 $gep_int39 = $31;
 $gep40 = (($gep_int39) + 4)|0;
 $32 = $gep40;
 HEAPF32[$32>>2] = $28;
 $gep_int41 = $2;
 $gep42 = (($gep_int41) + 532)|0;
 $33 = $gep42;
 $34 = HEAP32[$33>>2]|0;
 $gep_int43 = $34;
 $gep44 = (($gep_int43) + 12)|0;
 $35 = $gep44;
 $gep_int45 = $35;
 $gep46 = (($gep_int45) + 8)|0;
 $36 = $gep46;
 $37 = +HEAPF32[$36>>2];
 $gep_int47 = $2;
 $gep48 = (($gep_int47) + 532)|0;
 $38 = $gep48;
 $39 = HEAP32[$38>>2]|0;
 $gep_int49 = $39;
 $40 = $gep_int49;
 $gep_int50 = $40;
 $gep51 = (($gep_int50) + 8)|0;
 $41 = $gep51;
 $42 = +HEAPF32[$41>>2];
 $43 = $37 - $42;
 $gep_int52 = $2;
 $gep53 = (($gep_int52) + 532)|0;
 $44 = $gep53;
 $45 = HEAP32[$44>>2]|0;
 $gep_int54 = $45;
 $gep55 = (($gep_int54) + 24)|0;
 $46 = $gep55;
 $gep_int56 = $46;
 $gep57 = (($gep_int56) + 8)|0;
 $47 = $gep57;
 HEAPF32[$47>>2] = $43;
 $gep_int58 = $2;
 $gep59 = (($gep_int58) + 532)|0;
 $48 = $gep59;
 $49 = HEAP32[$48>>2]|0;
 $gep_int60 = $49;
 $gep61 = (($gep_int60) + 24)|0;
 $50 = $gep61;
 $gep_int62 = $50;
 $51 = $gep_int62;
 $52 = +HEAPF32[$51>>2];
 $gep_int63 = $2;
 $gep64 = (($gep_int63) + 532)|0;
 $53 = $gep64;
 $54 = HEAP32[$53>>2]|0;
 $gep_int65 = $54;
 $gep66 = (($gep_int65) + 24)|0;
 $55 = $gep66;
 $gep_int67 = $55;
 $56 = $gep_int67;
 $57 = +HEAPF32[$56>>2];
 $58 = $52 * $57;
 $gep_int68 = $2;
 $gep69 = (($gep_int68) + 532)|0;
 $59 = $gep69;
 $60 = HEAP32[$59>>2]|0;
 $gep_int70 = $60;
 $gep71 = (($gep_int70) + 24)|0;
 $61 = $gep71;
 $gep_int72 = $61;
 $gep73 = (($gep_int72) + 4)|0;
 $62 = $gep73;
 $63 = +HEAPF32[$62>>2];
 $gep_int74 = $2;
 $gep75 = (($gep_int74) + 532)|0;
 $64 = $gep75;
 $65 = HEAP32[$64>>2]|0;
 $gep_int76 = $65;
 $gep77 = (($gep_int76) + 24)|0;
 $66 = $gep77;
 $gep_int78 = $66;
 $gep79 = (($gep_int78) + 4)|0;
 $67 = $gep79;
 $68 = +HEAPF32[$67>>2];
 $69 = $63 * $68;
 $70 = $58 + $69;
 $gep_int80 = $2;
 $gep81 = (($gep_int80) + 532)|0;
 $71 = $gep81;
 $72 = HEAP32[$71>>2]|0;
 $gep_int82 = $72;
 $gep83 = (($gep_int82) + 24)|0;
 $73 = $gep83;
 $gep_int84 = $73;
 $gep85 = (($gep_int84) + 8)|0;
 $74 = $gep85;
 $75 = +HEAPF32[$74>>2];
 $gep_int86 = $2;
 $gep87 = (($gep_int86) + 532)|0;
 $76 = $gep87;
 $77 = HEAP32[$76>>2]|0;
 $gep_int88 = $77;
 $gep89 = (($gep_int88) + 24)|0;
 $78 = $gep89;
 $gep_int90 = $78;
 $gep91 = (($gep_int90) + 8)|0;
 $79 = $gep91;
 $80 = +HEAPF32[$79>>2];
 $81 = $75 * $80;
 $82 = $70 + $81;
 $83 = +Math_sqrt(+$82);
 $84 = 1.000000e+00 / $83;
 $l = $84;
 $85 = $l;
 $k = $85;
 $86 = $k;
 $gep_int92 = $2;
 $gep93 = (($gep_int92) + 532)|0;
 $87 = $gep93;
 $88 = HEAP32[$87>>2]|0;
 $gep_int94 = $88;
 $gep95 = (($gep_int94) + 24)|0;
 $89 = $gep95;
 $gep_int96 = $89;
 $90 = $gep_int96;
 $91 = +HEAPF32[$90>>2];
 $92 = $86 * $91;
 $gep_int97 = $2;
 $gep98 = (($gep_int97) + 532)|0;
 $93 = $gep98;
 $94 = HEAP32[$93>>2]|0;
 $gep_int99 = $94;
 $gep100 = (($gep_int99) + 24)|0;
 $95 = $gep100;
 $gep_int101 = $95;
 $96 = $gep_int101;
 HEAPF32[$96>>2] = $92;
 $97 = $k;
 $gep_int102 = $2;
 $gep103 = (($gep_int102) + 532)|0;
 $98 = $gep103;
 $99 = HEAP32[$98>>2]|0;
 $gep_int104 = $99;
 $gep105 = (($gep_int104) + 24)|0;
 $100 = $gep105;
 $gep_int106 = $100;
 $gep107 = (($gep_int106) + 4)|0;
 $101 = $gep107;
 $102 = +HEAPF32[$101>>2];
 $103 = $97 * $102;
 $gep_int108 = $2;
 $gep109 = (($gep_int108) + 532)|0;
 $104 = $gep109;
 $105 = HEAP32[$104>>2]|0;
 $gep_int110 = $105;
 $gep111 = (($gep_int110) + 24)|0;
 $106 = $gep111;
 $gep_int112 = $106;
 $gep113 = (($gep_int112) + 4)|0;
 $107 = $gep113;
 HEAPF32[$107>>2] = $103;
 $108 = $k;
 $gep_int114 = $2;
 $gep115 = (($gep_int114) + 532)|0;
 $109 = $gep115;
 $110 = HEAP32[$109>>2]|0;
 $gep_int116 = $110;
 $gep117 = (($gep_int116) + 24)|0;
 $111 = $gep117;
 $gep_int118 = $111;
 $gep119 = (($gep_int118) + 8)|0;
 $112 = $gep119;
 $113 = +HEAPF32[$112>>2];
 $114 = $108 * $113;
 $gep_int120 = $2;
 $gep121 = (($gep_int120) + 532)|0;
 $115 = $gep121;
 $116 = HEAP32[$115>>2]|0;
 $gep_int122 = $116;
 $gep123 = (($gep_int122) + 24)|0;
 $117 = $gep123;
 $gep_int124 = $117;
 $gep125 = (($gep_int124) + 8)|0;
 $118 = $gep125;
 HEAPF32[$118>>2] = $114;
 $fov = 0.785398185253143310546875;
 $gep_int126 = $2;
 $gep127 = (($gep_int126) + 532)|0;
 $119 = $gep127;
 $120 = HEAP32[$119>>2]|0;
 $gep_int128 = $120;
 $gep129 = (($gep_int128) + 24)|0;
 $121 = $gep129;
 $gep_int130 = $121;
 $gep131 = (($gep_int130) + 4)|0;
 $122 = $gep131;
 $123 = +HEAPF32[$122>>2];
 $expanded1 = 1072;
 $gep_int132 = 1072;
 $gep133 = (($gep_int132) + 8)|0;
 $expanded = $gep133;
 $124 = +HEAPF32[$expanded>>2];
 $125 = $123 * $124;
 $gep_int134 = $2;
 $gep135 = (($gep_int134) + 532)|0;
 $126 = $gep135;
 $127 = HEAP32[$126>>2]|0;
 $gep_int136 = $127;
 $gep137 = (($gep_int136) + 24)|0;
 $128 = $gep137;
 $gep_int138 = $128;
 $gep139 = (($gep_int138) + 8)|0;
 $129 = $gep139;
 $130 = +HEAPF32[$129>>2];
 $expanded3 = 1072;
 $gep_int140 = 1072;
 $gep141 = (($gep_int140) + 4)|0;
 $expanded2 = $gep141;
 $131 = +HEAPF32[$expanded2>>2];
 $132 = $130 * $131;
 $133 = $125 - $132;
 $gep_int142 = $2;
 $gep143 = (($gep_int142) + 532)|0;
 $134 = $gep143;
 $135 = HEAP32[$134>>2]|0;
 $gep_int144 = $135;
 $gep145 = (($gep_int144) + 36)|0;
 $136 = $gep145;
 $gep_int146 = $136;
 $137 = $gep_int146;
 HEAPF32[$137>>2] = $133;
 $gep_int147 = $2;
 $gep148 = (($gep_int147) + 532)|0;
 $138 = $gep148;
 $139 = HEAP32[$138>>2]|0;
 $gep_int149 = $139;
 $gep150 = (($gep_int149) + 24)|0;
 $140 = $gep150;
 $gep_int151 = $140;
 $gep152 = (($gep_int151) + 8)|0;
 $141 = $gep152;
 $142 = +HEAPF32[$141>>2];
 $expanded5 = 1072;
 $gep_int153 = 1072;
 $expanded4 = $gep_int153;
 $143 = +HEAPF32[$expanded4>>2];
 $144 = $142 * $143;
 $gep_int154 = $2;
 $gep155 = (($gep_int154) + 532)|0;
 $145 = $gep155;
 $146 = HEAP32[$145>>2]|0;
 $gep_int156 = $146;
 $gep157 = (($gep_int156) + 24)|0;
 $147 = $gep157;
 $gep_int158 = $147;
 $148 = $gep_int158;
 $149 = +HEAPF32[$148>>2];
 $expanded7 = 1072;
 $gep_int159 = 1072;
 $gep160 = (($gep_int159) + 8)|0;
 $expanded6 = $gep160;
 $150 = +HEAPF32[$expanded6>>2];
 $151 = $149 * $150;
 $152 = $144 - $151;
 $gep_int161 = $2;
 $gep162 = (($gep_int161) + 532)|0;
 $153 = $gep162;
 $154 = HEAP32[$153>>2]|0;
 $gep_int163 = $154;
 $gep164 = (($gep_int163) + 36)|0;
 $155 = $gep164;
 $gep_int165 = $155;
 $gep166 = (($gep_int165) + 4)|0;
 $156 = $gep166;
 HEAPF32[$156>>2] = $152;
 $gep_int167 = $2;
 $gep168 = (($gep_int167) + 532)|0;
 $157 = $gep168;
 $158 = HEAP32[$157>>2]|0;
 $gep_int169 = $158;
 $gep170 = (($gep_int169) + 24)|0;
 $159 = $gep170;
 $gep_int171 = $159;
 $160 = $gep_int171;
 $161 = +HEAPF32[$160>>2];
 $expanded9 = 1072;
 $gep_int172 = 1072;
 $gep173 = (($gep_int172) + 4)|0;
 $expanded8 = $gep173;
 $162 = +HEAPF32[$expanded8>>2];
 $163 = $161 * $162;
 $gep_int174 = $2;
 $gep175 = (($gep_int174) + 532)|0;
 $164 = $gep175;
 $165 = HEAP32[$164>>2]|0;
 $gep_int176 = $165;
 $gep177 = (($gep_int176) + 24)|0;
 $166 = $gep177;
 $gep_int178 = $166;
 $gep179 = (($gep_int178) + 4)|0;
 $167 = $gep179;
 $168 = +HEAPF32[$167>>2];
 $expanded11 = 1072;
 $gep_int180 = 1072;
 $expanded10 = $gep_int180;
 $169 = +HEAPF32[$expanded10>>2];
 $170 = $168 * $169;
 $171 = $163 - $170;
 $gep_int181 = $2;
 $gep182 = (($gep_int181) + 532)|0;
 $172 = $gep182;
 $173 = HEAP32[$172>>2]|0;
 $gep_int183 = $173;
 $gep184 = (($gep_int183) + 36)|0;
 $174 = $gep184;
 $gep_int185 = $174;
 $gep186 = (($gep_int185) + 8)|0;
 $175 = $gep186;
 HEAPF32[$175>>2] = $171;
 $gep_int187 = $2;
 $gep188 = (($gep_int187) + 532)|0;
 $176 = $gep188;
 $177 = HEAP32[$176>>2]|0;
 $gep_int189 = $177;
 $gep190 = (($gep_int189) + 36)|0;
 $178 = $gep190;
 $gep_int191 = $178;
 $179 = $gep_int191;
 $180 = +HEAPF32[$179>>2];
 $gep_int192 = $2;
 $gep193 = (($gep_int192) + 532)|0;
 $181 = $gep193;
 $182 = HEAP32[$181>>2]|0;
 $gep_int194 = $182;
 $gep195 = (($gep_int194) + 36)|0;
 $183 = $gep195;
 $gep_int196 = $183;
 $184 = $gep_int196;
 $185 = +HEAPF32[$184>>2];
 $186 = $180 * $185;
 $gep_int197 = $2;
 $gep198 = (($gep_int197) + 532)|0;
 $187 = $gep198;
 $188 = HEAP32[$187>>2]|0;
 $gep_int199 = $188;
 $gep200 = (($gep_int199) + 36)|0;
 $189 = $gep200;
 $gep_int201 = $189;
 $gep202 = (($gep_int201) + 4)|0;
 $190 = $gep202;
 $191 = +HEAPF32[$190>>2];
 $gep_int203 = $2;
 $gep204 = (($gep_int203) + 532)|0;
 $192 = $gep204;
 $193 = HEAP32[$192>>2]|0;
 $gep_int205 = $193;
 $gep206 = (($gep_int205) + 36)|0;
 $194 = $gep206;
 $gep_int207 = $194;
 $gep208 = (($gep_int207) + 4)|0;
 $195 = $gep208;
 $196 = +HEAPF32[$195>>2];
 $197 = $191 * $196;
 $198 = $186 + $197;
 $gep_int209 = $2;
 $gep210 = (($gep_int209) + 532)|0;
 $199 = $gep210;
 $200 = HEAP32[$199>>2]|0;
 $gep_int211 = $200;
 $gep212 = (($gep_int211) + 36)|0;
 $201 = $gep212;
 $gep_int213 = $201;
 $gep214 = (($gep_int213) + 8)|0;
 $202 = $gep214;
 $203 = +HEAPF32[$202>>2];
 $gep_int215 = $2;
 $gep216 = (($gep_int215) + 532)|0;
 $204 = $gep216;
 $205 = HEAP32[$204>>2]|0;
 $gep_int217 = $205;
 $gep218 = (($gep_int217) + 36)|0;
 $206 = $gep218;
 $gep_int219 = $206;
 $gep220 = (($gep_int219) + 8)|0;
 $207 = $gep220;
 $208 = +HEAPF32[$207>>2];
 $209 = $203 * $208;
 $210 = $198 + $209;
 $211 = +Math_sqrt(+$210);
 $212 = 1.000000e+00 / $211;
 $l1 = $212;
 $213 = $l1;
 $k2 = $213;
 $214 = $k2;
 $gep_int221 = $2;
 $gep222 = (($gep_int221) + 532)|0;
 $215 = $gep222;
 $216 = HEAP32[$215>>2]|0;
 $gep_int223 = $216;
 $gep224 = (($gep_int223) + 36)|0;
 $217 = $gep224;
 $gep_int225 = $217;
 $218 = $gep_int225;
 $219 = +HEAPF32[$218>>2];
 $220 = $214 * $219;
 $gep_int226 = $2;
 $gep227 = (($gep_int226) + 532)|0;
 $221 = $gep227;
 $222 = HEAP32[$221>>2]|0;
 $gep_int228 = $222;
 $gep229 = (($gep_int228) + 36)|0;
 $223 = $gep229;
 $gep_int230 = $223;
 $224 = $gep_int230;
 HEAPF32[$224>>2] = $220;
 $225 = $k2;
 $gep_int231 = $2;
 $gep232 = (($gep_int231) + 532)|0;
 $226 = $gep232;
 $227 = HEAP32[$226>>2]|0;
 $gep_int233 = $227;
 $gep234 = (($gep_int233) + 36)|0;
 $228 = $gep234;
 $gep_int235 = $228;
 $gep236 = (($gep_int235) + 4)|0;
 $229 = $gep236;
 $230 = +HEAPF32[$229>>2];
 $231 = $225 * $230;
 $gep_int237 = $2;
 $gep238 = (($gep_int237) + 532)|0;
 $232 = $gep238;
 $233 = HEAP32[$232>>2]|0;
 $gep_int239 = $233;
 $gep240 = (($gep_int239) + 36)|0;
 $234 = $gep240;
 $gep_int241 = $234;
 $gep242 = (($gep_int241) + 4)|0;
 $235 = $gep242;
 HEAPF32[$235>>2] = $231;
 $236 = $k2;
 $gep_int243 = $2;
 $gep244 = (($gep_int243) + 532)|0;
 $237 = $gep244;
 $238 = HEAP32[$237>>2]|0;
 $gep_int245 = $238;
 $gep246 = (($gep_int245) + 36)|0;
 $239 = $gep246;
 $gep_int247 = $239;
 $gep248 = (($gep_int247) + 8)|0;
 $240 = $gep248;
 $241 = +HEAPF32[$240>>2];
 $242 = $236 * $241;
 $gep_int249 = $2;
 $gep250 = (($gep_int249) + 532)|0;
 $243 = $gep250;
 $244 = HEAP32[$243>>2]|0;
 $gep_int251 = $244;
 $gep252 = (($gep_int251) + 36)|0;
 $245 = $gep252;
 $gep_int253 = $245;
 $gep254 = (($gep_int253) + 8)|0;
 $246 = $gep254;
 HEAPF32[$246>>2] = $242;
 $gep_int255 = $2;
 $gep256 = (($gep_int255) + 516)|0;
 $247 = $gep256;
 $248 = HEAP32[$247>>2]|0;
 $249 = +($248>>>0);
 $250 = $249 * 0.785398185253143310546875;
 $gep_int257 = $2;
 $gep258 = (($gep_int257) + 520)|0;
 $251 = $gep258;
 $252 = HEAP32[$251>>2]|0;
 $253 = +($252>>>0);
 $254 = $250 / $253;
 $k3 = $254;
 $255 = $k3;
 $gep_int259 = $2;
 $gep260 = (($gep_int259) + 532)|0;
 $256 = $gep260;
 $257 = HEAP32[$256>>2]|0;
 $gep_int261 = $257;
 $gep262 = (($gep_int261) + 36)|0;
 $258 = $gep262;
 $gep_int263 = $258;
 $259 = $gep_int263;
 $260 = +HEAPF32[$259>>2];
 $261 = $255 * $260;
 $gep_int264 = $2;
 $gep265 = (($gep_int264) + 532)|0;
 $262 = $gep265;
 $263 = HEAP32[$262>>2]|0;
 $gep_int266 = $263;
 $gep267 = (($gep_int266) + 36)|0;
 $264 = $gep267;
 $gep_int268 = $264;
 $265 = $gep_int268;
 HEAPF32[$265>>2] = $261;
 $266 = $k3;
 $gep_int269 = $2;
 $gep270 = (($gep_int269) + 532)|0;
 $267 = $gep270;
 $268 = HEAP32[$267>>2]|0;
 $gep_int271 = $268;
 $gep272 = (($gep_int271) + 36)|0;
 $269 = $gep272;
 $gep_int273 = $269;
 $gep274 = (($gep_int273) + 4)|0;
 $270 = $gep274;
 $271 = +HEAPF32[$270>>2];
 $272 = $266 * $271;
 $gep_int275 = $2;
 $gep276 = (($gep_int275) + 532)|0;
 $273 = $gep276;
 $274 = HEAP32[$273>>2]|0;
 $gep_int277 = $274;
 $gep278 = (($gep_int277) + 36)|0;
 $275 = $gep278;
 $gep_int279 = $275;
 $gep280 = (($gep_int279) + 4)|0;
 $276 = $gep280;
 HEAPF32[$276>>2] = $272;
 $277 = $k3;
 $gep_int281 = $2;
 $gep282 = (($gep_int281) + 532)|0;
 $278 = $gep282;
 $279 = HEAP32[$278>>2]|0;
 $gep_int283 = $279;
 $gep284 = (($gep_int283) + 36)|0;
 $280 = $gep284;
 $gep_int285 = $280;
 $gep286 = (($gep_int285) + 8)|0;
 $281 = $gep286;
 $282 = +HEAPF32[$281>>2];
 $283 = $277 * $282;
 $gep_int287 = $2;
 $gep288 = (($gep_int287) + 532)|0;
 $284 = $gep288;
 $285 = HEAP32[$284>>2]|0;
 $gep_int289 = $285;
 $gep290 = (($gep_int289) + 36)|0;
 $286 = $gep290;
 $gep_int291 = $286;
 $gep292 = (($gep_int291) + 8)|0;
 $287 = $gep292;
 HEAPF32[$287>>2] = $283;
 $gep_int293 = $2;
 $gep294 = (($gep_int293) + 532)|0;
 $288 = $gep294;
 $289 = HEAP32[$288>>2]|0;
 $gep_int295 = $289;
 $gep296 = (($gep_int295) + 36)|0;
 $290 = $gep296;
 $gep_int297 = $290;
 $gep298 = (($gep_int297) + 4)|0;
 $291 = $gep298;
 $292 = +HEAPF32[$291>>2];
 $gep_int299 = $2;
 $gep300 = (($gep_int299) + 532)|0;
 $293 = $gep300;
 $294 = HEAP32[$293>>2]|0;
 $gep_int301 = $294;
 $gep302 = (($gep_int301) + 24)|0;
 $295 = $gep302;
 $gep_int303 = $295;
 $gep304 = (($gep_int303) + 8)|0;
 $296 = $gep304;
 $297 = +HEAPF32[$296>>2];
 $298 = $292 * $297;
 $gep_int305 = $2;
 $gep306 = (($gep_int305) + 532)|0;
 $299 = $gep306;
 $300 = HEAP32[$299>>2]|0;
 $gep_int307 = $300;
 $gep308 = (($gep_int307) + 36)|0;
 $301 = $gep308;
 $gep_int309 = $301;
 $gep310 = (($gep_int309) + 8)|0;
 $302 = $gep310;
 $303 = +HEAPF32[$302>>2];
 $gep_int311 = $2;
 $gep312 = (($gep_int311) + 532)|0;
 $304 = $gep312;
 $305 = HEAP32[$304>>2]|0;
 $gep_int313 = $305;
 $gep314 = (($gep_int313) + 24)|0;
 $306 = $gep314;
 $gep_int315 = $306;
 $gep316 = (($gep_int315) + 4)|0;
 $307 = $gep316;
 $308 = +HEAPF32[$307>>2];
 $309 = $303 * $308;
 $310 = $298 - $309;
 $gep_int317 = $2;
 $gep318 = (($gep_int317) + 532)|0;
 $311 = $gep318;
 $312 = HEAP32[$311>>2]|0;
 $gep_int319 = $312;
 $gep320 = (($gep_int319) + 48)|0;
 $313 = $gep320;
 $gep_int321 = $313;
 $314 = $gep_int321;
 HEAPF32[$314>>2] = $310;
 $gep_int322 = $2;
 $gep323 = (($gep_int322) + 532)|0;
 $315 = $gep323;
 $316 = HEAP32[$315>>2]|0;
 $gep_int324 = $316;
 $gep325 = (($gep_int324) + 36)|0;
 $317 = $gep325;
 $gep_int326 = $317;
 $gep327 = (($gep_int326) + 8)|0;
 $318 = $gep327;
 $319 = +HEAPF32[$318>>2];
 $gep_int328 = $2;
 $gep329 = (($gep_int328) + 532)|0;
 $320 = $gep329;
 $321 = HEAP32[$320>>2]|0;
 $gep_int330 = $321;
 $gep331 = (($gep_int330) + 24)|0;
 $322 = $gep331;
 $gep_int332 = $322;
 $323 = $gep_int332;
 $324 = +HEAPF32[$323>>2];
 $325 = $319 * $324;
 $gep_int333 = $2;
 $gep334 = (($gep_int333) + 532)|0;
 $326 = $gep334;
 $327 = HEAP32[$326>>2]|0;
 $gep_int335 = $327;
 $gep336 = (($gep_int335) + 36)|0;
 $328 = $gep336;
 $gep_int337 = $328;
 $329 = $gep_int337;
 $330 = +HEAPF32[$329>>2];
 $gep_int338 = $2;
 $gep339 = (($gep_int338) + 532)|0;
 $331 = $gep339;
 $332 = HEAP32[$331>>2]|0;
 $gep_int340 = $332;
 $gep341 = (($gep_int340) + 24)|0;
 $333 = $gep341;
 $gep_int342 = $333;
 $gep343 = (($gep_int342) + 8)|0;
 $334 = $gep343;
 $335 = +HEAPF32[$334>>2];
 $336 = $330 * $335;
 $337 = $325 - $336;
 $gep_int344 = $2;
 $gep345 = (($gep_int344) + 532)|0;
 $338 = $gep345;
 $339 = HEAP32[$338>>2]|0;
 $gep_int346 = $339;
 $gep347 = (($gep_int346) + 48)|0;
 $340 = $gep347;
 $gep_int348 = $340;
 $gep349 = (($gep_int348) + 4)|0;
 $341 = $gep349;
 HEAPF32[$341>>2] = $337;
 $gep_int350 = $2;
 $gep351 = (($gep_int350) + 532)|0;
 $342 = $gep351;
 $343 = HEAP32[$342>>2]|0;
 $gep_int352 = $343;
 $gep353 = (($gep_int352) + 36)|0;
 $344 = $gep353;
 $gep_int354 = $344;
 $345 = $gep_int354;
 $346 = +HEAPF32[$345>>2];
 $gep_int355 = $2;
 $gep356 = (($gep_int355) + 532)|0;
 $347 = $gep356;
 $348 = HEAP32[$347>>2]|0;
 $gep_int357 = $348;
 $gep358 = (($gep_int357) + 24)|0;
 $349 = $gep358;
 $gep_int359 = $349;
 $gep360 = (($gep_int359) + 4)|0;
 $350 = $gep360;
 $351 = +HEAPF32[$350>>2];
 $352 = $346 * $351;
 $gep_int361 = $2;
 $gep362 = (($gep_int361) + 532)|0;
 $353 = $gep362;
 $354 = HEAP32[$353>>2]|0;
 $gep_int363 = $354;
 $gep364 = (($gep_int363) + 36)|0;
 $355 = $gep364;
 $gep_int365 = $355;
 $gep366 = (($gep_int365) + 4)|0;
 $356 = $gep366;
 $357 = +HEAPF32[$356>>2];
 $gep_int367 = $2;
 $gep368 = (($gep_int367) + 532)|0;
 $358 = $gep368;
 $359 = HEAP32[$358>>2]|0;
 $gep_int369 = $359;
 $gep370 = (($gep_int369) + 24)|0;
 $360 = $gep370;
 $gep_int371 = $360;
 $361 = $gep_int371;
 $362 = +HEAPF32[$361>>2];
 $363 = $357 * $362;
 $364 = $352 - $363;
 $gep_int372 = $2;
 $gep373 = (($gep_int372) + 532)|0;
 $365 = $gep373;
 $366 = HEAP32[$365>>2]|0;
 $gep_int374 = $366;
 $gep375 = (($gep_int374) + 48)|0;
 $367 = $gep375;
 $gep_int376 = $367;
 $gep377 = (($gep_int376) + 8)|0;
 $368 = $gep377;
 HEAPF32[$368>>2] = $364;
 $gep_int378 = $2;
 $gep379 = (($gep_int378) + 532)|0;
 $369 = $gep379;
 $370 = HEAP32[$369>>2]|0;
 $gep_int380 = $370;
 $gep381 = (($gep_int380) + 48)|0;
 $371 = $gep381;
 $gep_int382 = $371;
 $372 = $gep_int382;
 $373 = +HEAPF32[$372>>2];
 $gep_int383 = $2;
 $gep384 = (($gep_int383) + 532)|0;
 $374 = $gep384;
 $375 = HEAP32[$374>>2]|0;
 $gep_int385 = $375;
 $gep386 = (($gep_int385) + 48)|0;
 $376 = $gep386;
 $gep_int387 = $376;
 $377 = $gep_int387;
 $378 = +HEAPF32[$377>>2];
 $379 = $373 * $378;
 $gep_int388 = $2;
 $gep389 = (($gep_int388) + 532)|0;
 $380 = $gep389;
 $381 = HEAP32[$380>>2]|0;
 $gep_int390 = $381;
 $gep391 = (($gep_int390) + 48)|0;
 $382 = $gep391;
 $gep_int392 = $382;
 $gep393 = (($gep_int392) + 4)|0;
 $383 = $gep393;
 $384 = +HEAPF32[$383>>2];
 $gep_int394 = $2;
 $gep395 = (($gep_int394) + 532)|0;
 $385 = $gep395;
 $386 = HEAP32[$385>>2]|0;
 $gep_int396 = $386;
 $gep397 = (($gep_int396) + 48)|0;
 $387 = $gep397;
 $gep_int398 = $387;
 $gep399 = (($gep_int398) + 4)|0;
 $388 = $gep399;
 $389 = +HEAPF32[$388>>2];
 $390 = $384 * $389;
 $391 = $379 + $390;
 $gep_int400 = $2;
 $gep401 = (($gep_int400) + 532)|0;
 $392 = $gep401;
 $393 = HEAP32[$392>>2]|0;
 $gep_int402 = $393;
 $gep403 = (($gep_int402) + 48)|0;
 $394 = $gep403;
 $gep_int404 = $394;
 $gep405 = (($gep_int404) + 8)|0;
 $395 = $gep405;
 $396 = +HEAPF32[$395>>2];
 $gep_int406 = $2;
 $gep407 = (($gep_int406) + 532)|0;
 $397 = $gep407;
 $398 = HEAP32[$397>>2]|0;
 $gep_int408 = $398;
 $gep409 = (($gep_int408) + 48)|0;
 $399 = $gep409;
 $gep_int410 = $399;
 $gep411 = (($gep_int410) + 8)|0;
 $400 = $gep411;
 $401 = +HEAPF32[$400>>2];
 $402 = $396 * $401;
 $403 = $391 + $402;
 $404 = +Math_sqrt(+$403);
 $405 = 1.000000e+00 / $404;
 $l4 = $405;
 $406 = $l4;
 $k5 = $406;
 $407 = $k5;
 $gep_int412 = $2;
 $gep413 = (($gep_int412) + 532)|0;
 $408 = $gep413;
 $409 = HEAP32[$408>>2]|0;
 $gep_int414 = $409;
 $gep415 = (($gep_int414) + 48)|0;
 $410 = $gep415;
 $gep_int416 = $410;
 $411 = $gep_int416;
 $412 = +HEAPF32[$411>>2];
 $413 = $407 * $412;
 $gep_int417 = $2;
 $gep418 = (($gep_int417) + 532)|0;
 $414 = $gep418;
 $415 = HEAP32[$414>>2]|0;
 $gep_int419 = $415;
 $gep420 = (($gep_int419) + 48)|0;
 $416 = $gep420;
 $gep_int421 = $416;
 $417 = $gep_int421;
 HEAPF32[$417>>2] = $413;
 $418 = $k5;
 $gep_int422 = $2;
 $gep423 = (($gep_int422) + 532)|0;
 $419 = $gep423;
 $420 = HEAP32[$419>>2]|0;
 $gep_int424 = $420;
 $gep425 = (($gep_int424) + 48)|0;
 $421 = $gep425;
 $gep_int426 = $421;
 $gep427 = (($gep_int426) + 4)|0;
 $422 = $gep427;
 $423 = +HEAPF32[$422>>2];
 $424 = $418 * $423;
 $gep_int428 = $2;
 $gep429 = (($gep_int428) + 532)|0;
 $425 = $gep429;
 $426 = HEAP32[$425>>2]|0;
 $gep_int430 = $426;
 $gep431 = (($gep_int430) + 48)|0;
 $427 = $gep431;
 $gep_int432 = $427;
 $gep433 = (($gep_int432) + 4)|0;
 $428 = $gep433;
 HEAPF32[$428>>2] = $424;
 $429 = $k5;
 $gep_int434 = $2;
 $gep435 = (($gep_int434) + 532)|0;
 $430 = $gep435;
 $431 = HEAP32[$430>>2]|0;
 $gep_int436 = $431;
 $gep437 = (($gep_int436) + 48)|0;
 $432 = $gep437;
 $gep_int438 = $432;
 $gep439 = (($gep_int438) + 8)|0;
 $433 = $gep439;
 $434 = +HEAPF32[$433>>2];
 $435 = $429 * $434;
 $gep_int440 = $2;
 $gep441 = (($gep_int440) + 532)|0;
 $436 = $gep441;
 $437 = HEAP32[$436>>2]|0;
 $gep_int442 = $437;
 $gep443 = (($gep_int442) + 48)|0;
 $438 = $gep443;
 $gep_int444 = $438;
 $gep445 = (($gep_int444) + 8)|0;
 $439 = $gep445;
 HEAPF32[$439>>2] = $435;
 $k6 = 0.785398185253143310546875;
 $440 = $k6;
 $gep_int446 = $2;
 $gep447 = (($gep_int446) + 532)|0;
 $441 = $gep447;
 $442 = HEAP32[$441>>2]|0;
 $gep_int448 = $442;
 $gep449 = (($gep_int448) + 48)|0;
 $443 = $gep449;
 $gep_int450 = $443;
 $444 = $gep_int450;
 $445 = +HEAPF32[$444>>2];
 $446 = $440 * $445;
 $gep_int451 = $2;
 $gep452 = (($gep_int451) + 532)|0;
 $447 = $gep452;
 $448 = HEAP32[$447>>2]|0;
 $gep_int453 = $448;
 $gep454 = (($gep_int453) + 48)|0;
 $449 = $gep454;
 $gep_int455 = $449;
 $450 = $gep_int455;
 HEAPF32[$450>>2] = $446;
 $451 = $k6;
 $gep_int456 = $2;
 $gep457 = (($gep_int456) + 532)|0;
 $452 = $gep457;
 $453 = HEAP32[$452>>2]|0;
 $gep_int458 = $453;
 $gep459 = (($gep_int458) + 48)|0;
 $454 = $gep459;
 $gep_int460 = $454;
 $gep461 = (($gep_int460) + 4)|0;
 $455 = $gep461;
 $456 = +HEAPF32[$455>>2];
 $457 = $451 * $456;
 $gep_int462 = $2;
 $gep463 = (($gep_int462) + 532)|0;
 $458 = $gep463;
 $459 = HEAP32[$458>>2]|0;
 $gep_int464 = $459;
 $gep465 = (($gep_int464) + 48)|0;
 $460 = $gep465;
 $gep_int466 = $460;
 $gep467 = (($gep_int466) + 4)|0;
 $461 = $gep467;
 HEAPF32[$461>>2] = $457;
 $462 = $k6;
 $gep_int468 = $2;
 $gep469 = (($gep_int468) + 532)|0;
 $463 = $gep469;
 $464 = HEAP32[$463>>2]|0;
 $gep_int470 = $464;
 $gep471 = (($gep_int470) + 48)|0;
 $465 = $gep471;
 $gep_int472 = $465;
 $gep473 = (($gep_int472) + 8)|0;
 $466 = $gep473;
 $467 = +HEAPF32[$466>>2];
 $468 = $462 * $467;
 $gep_int474 = $2;
 $gep475 = (($gep_int474) + 532)|0;
 $469 = $gep475;
 $470 = HEAP32[$469>>2]|0;
 $gep_int476 = $470;
 $gep477 = (($gep_int476) + 48)|0;
 $471 = $gep477;
 $gep_int478 = $471;
 $gep479 = (($gep_int478) + 8)|0;
 $472 = $gep479;
 HEAPF32[$472>>2] = $468;
 $i = 0;
 
 while(1) {
  $473 = $i;
  $gep_int480 = $2;
  $gep481 = (($gep_int480) + 548)|0;
  $474 = $gep481;
  $475 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($474)|0;
  $476 = ($473>>>0)<($475>>>0);
  
  if (!($476)) {
   break;
  }
  $gep_int482 = $2;
  $gep483 = (($gep_int482) + 548)|0;
  $477 = $gep483;
  $478 = $i;
  $479 = __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($477,$478)|0;
  $480 = HEAP32[$479>>2]|0;
  $gep_int484 = $2;
  $gep485 = (($gep_int484) + 532)|0;
  $481 = $gep485;
  $482 = HEAP32[$481>>2]|0;
  __ZN12RenderDevice18UpdateCameraBufferEP6Camera($480,$482);
  
  $483 = $i;
  $484 = (($483) + 1)|0;
  $i = $484;
  
 }
 STACKTOP = sp;return;
}
function __ZN12RenderDevice18UpdateCameraBufferEP6Camera($this,$camera) {
 $this = $this|0;
 $camera = $camera|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $camera;
 $3 = $1;
 $gep_int = $3;
 $gep = (($gep_int) + 16)|0;
 $4 = $gep;
 $5 = HEAP32[$4>>2]|0;
 $gep_int1 = $3;
 $gep2 = (($gep_int1) + 68)|0;
 $6 = $gep2;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = $8;
 u$2 = __ZNK2cl12CommandQueue18enqueueWriteBufferERKNS_6BufferEjjjPKvPKNS_6vectorINS_5EventELj10EEEPS7_($5,$7,0,0,60,$9,0,0)|0;
 STACKTOP = sp;return;
}
function __ZNK2cl12CommandQueue18enqueueWriteBufferERKNS_6BufferEjjjPKvPKNS_6vectorINS_5EventELj10EEEPS7_($this,$buffer,$blocking,$offset,$size,$ptr,$events,$event) {
 $this = $this|0;
 $buffer = $buffer|0;
 $blocking = $blocking|0;
 $offset = $offset|0;
 $size = $size|0;
 $ptr = $ptr|0;
 $events = $events|0;
 $event = $event|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 
 
 
 
 
 
 
 
 $1 = $this;
 $2 = $buffer;
 $3 = $blocking;
 $4 = $offset;
 $5 = $size;
 $6 = $ptr;
 $7 = $events;
 $8 = $event;
 $9 = $1;
 $10 = $9;
 $gep_int = $9;
 $11 = $gep_int;
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = $13;
 $15 = __ZNK2cl6detail7WrapperIP7_cl_memEclEv($14)|0;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = ($20|0)!=(0);
 
 if ($21) {
  $22 = $7;
  $23 = __ZNK2cl6vectorINS_5EventELj10EE4sizeEv($22)|0;
  
  $24 = $23;
 } else {
  
  $24 = 0;
 }
 
 $25 = $7;
 $26 = ($25|0)!=(0);
 
 do {
  if ($26) {
   $27 = $7;
   $28 = __ZNK2cl6vectorINS_5EventELj10EE4sizeEv($27)|0;
   $29 = ($28>>>0)>(0);
   
   if (!($29)) {
    label = 7;
    break;
   }
   $30 = $7;
   $31 = __ZNK2cl6vectorINS_5EventELj10EE5frontEv($30)|0;
   $32 = $31;
   
   $33 = $32;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  
  $33 = 0;
 }
 
 $34 = $8;
 $35 = $34;
 $36 = _clEnqueueWriteBuffer($12|0,$15|0,$16|0,$17|0,$18|0,$19|0,$24|0,$33|0,$35|0)|0;
 $gep_int1 = 1088;
 $expanded = $gep_int1;
 $37 = __ZN2cl6detailL10errHandlerEiPKc($36,$expanded)|0;
 STACKTOP = sp;return $37|0;
}
function __ZNK2cl6detail7WrapperIP7_cl_memEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return $4|0;
}
function __ZNK2cl6vectorINS_5EventELj10EE4sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 40)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return $5|0;
}
function __ZNK2cl6vectorINS_5EventELj10EE5frontEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $gep_int1 = $3;
 $4 = $gep_int1;
 STACKTOP = sp;return $4|0;
}
function __ZNK2cl12CommandQueue6finishEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $gep_int = $2;
 $4 = $gep_int;
 $5 = HEAP32[$4>>2]|0;
 $6 = _clFinish($5|0)|0;
 $gep_int1 = 1112;
 $expanded = $gep_int1;
 $7 = __ZN2cl6detailL10errHandlerEiPKc($6,$expanded)|0;
 STACKTOP = sp;return $7|0;
}
function __ZN12RenderDevice17UpdateSceneBufferEP6Sphere($this,$spheres) {
 $this = $this|0;
 $spheres = $spheres|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, label = 0, sp = 0;
 var u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $spheres;
 $3 = $1;
 $gep_int = $3;
 $gep = (($gep_int) + 16)|0;
 $4 = $gep;
 $5 = HEAP32[$4>>2]|0;
 $gep_int1 = $3;
 $gep2 = (($gep_int1) + 64)|0;
 $6 = $gep2;
 $7 = HEAP32[$6>>2]|0;
 $gep_int3 = $3;
 $gep4 = (($gep_int3) + 36)|0;
 $8 = $gep4;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9*44)|0;
 $11 = $2;
 $12 = $11;
 u$2 = __ZNK2cl12CommandQueue18enqueueWriteBufferERKNS_6BufferEjjjPKvPKNS_6vectorINS_5EventELj10EEEPS7_($5,$7,0,0,$10,$12,0,0)|0;
 STACKTOP = sp;return;
}
function __ZNK12RenderDevice14GetPerformanceEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep_int = 0, $gep_int1 = 0;
 var $gep_int3 = 0, $gep_int5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 96)|0;
 $3 = $gep;
 $4 = +HEAPF64[$3>>3];
 $5 = $4 == 0.000000e+00;
 
 do {
  if (!($5)) {
   $gep_int1 = $2;
   $gep2 = (($gep_int1) + 88)|0;
   $6 = $gep2;
   $7 = +HEAPF64[$6>>3];
   $8 = $7 == 0.000000e+00;
   
   if ($8) {
    break;
   }
   $gep_int3 = $2;
   $gep4 = (($gep_int3) + 88)|0;
   $9 = $gep4;
   $10 = +HEAPF64[$9>>3];
   $gep_int5 = $2;
   $gep6 = (($gep_int5) + 96)|0;
   $11 = $gep6;
   $12 = +HEAPF64[$11>>3];
   $13 = $10 / $12;
   
   $14 = $13;
   
   STACKTOP = sp;return +$14;
  }
 } while(0);
 
 $14 = 1.000000e+00;
 
 STACKTOP = sp;return +$14;
}
function __ZN2cl6vectorINS_6DeviceELj10EE6assignIPP13_cl_device_idEEvT_S7_($this,$start,$end) {
 $this = $this|0;
 $start = $start|0;
 $end = $end|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0, u$22 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 
 
 
 $4 = sp + 24|0;
 
 
 $1 = $this;
 $2 = $start;
 $3 = $end;
 $7 = $1;
 __ZN2cl6vectorINS_6DeviceELj10EE5clearEv($7);
 
 while(1) {
  $8 = $2;
  $9 = $3;
  $10 = ($8>>>0)<($9>>>0);
  
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  __ZN2cl6DeviceC1EP13_cl_device_id($4,$12);
  __THREW__ = 0;
  invoke_vii(46,$7|0,$4|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  
  if ($14) {
   break;
  }
  __ZN2cl6DeviceD1Ev($4);
  $15 = $2;
  $gep_int = $15;
  $gep = (($gep_int) + 4)|0;
  $16 = $gep;
  $2 = $16;
  
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $17 = ___cxa_find_matching_catch(-1,-1)|0;
 $18 = tempRet0;
 $5 = $17;
 $6 = $18;
 __THREW__ = 0;
 invoke_vi(143,$4|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 
 if ($20) {
  $expanded1 = 69;
  $23 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$22 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable
 }
 
 $21 = $5;
 $22 = $6;
 ___resumeException($21|0);
 // unreachable
}
function __ZN2cl6vectorINS_6DeviceELj10EE5clearEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 40)|0;
 $3 = $gep;
 HEAP32[$3>>2] = -1;
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + 44)|0;
 $4 = $gep2;
 HEAP8[$4] = 1;
 STACKTOP = sp;return;
}
function __ZN2cl6DeviceC1EP13_cl_device_id($this,$device) {
 $this = $this|0;
 $device = $device|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $device;
 $3 = $1;
 $4 = $2;
 __ZN2cl6DeviceC2EP13_cl_device_id($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl6DeviceC2EP13_cl_device_id($this,$device) {
 $this = $this|0;
 $device = $device|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $device;
 $3 = $1;
 $4 = $3;
 __ZN2cl6detail7WrapperIP13_cl_device_idEC2Ev($4);
 $5 = $2;
 $6 = $3;
 $gep_int = $3;
 $7 = $gep_int;
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformC2ERKS0_($this,$platform) {
 $this = $this|0;
 $platform = $platform|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $platform;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $5;
 __ZN2cl6detail7WrapperIP15_cl_platform_idEC2ERKS4_($4,$6);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEC2ERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $gep_int = $4;
 $5 = $gep_int;
 $6 = HEAP32[$5>>2]|0;
 $gep_int1 = $3;
 $7 = $gep_int1;
 HEAP32[$7>>2] = $6;
 $gep_int2 = $3;
 $8 = $gep_int2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 
 if (!($10)) {
  STACKTOP = sp;return;
 }
 u$4 = __ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($3)|0;
 
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE6retainES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE6retainES3_($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $2 = $1;
 STACKTOP = sp;return -32;
}
function __ZN2cl6vectorINS_8PlatformELj10EE6assignIPP15_cl_platform_idEEvT_S7_($this,$start,$end) {
 $this = $this|0;
 $start = $start|0;
 $end = $end|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0, u$22 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 
 
 
 $4 = sp + 24|0;
 
 
 $1 = $this;
 $2 = $start;
 $3 = $end;
 $7 = $1;
 __ZN2cl6vectorINS_8PlatformELj10EE5clearEv($7);
 
 while(1) {
  $8 = $2;
  $9 = $3;
  $10 = ($8>>>0)<($9>>>0);
  
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  __ZN2cl8PlatformC1EP15_cl_platform_id($4,$12);
  __THREW__ = 0;
  invoke_vii(51,$7|0,$4|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  
  if ($14) {
   break;
  }
  __ZN2cl8PlatformD1Ev($4);
  $15 = $2;
  $gep_int = $15;
  $gep = (($gep_int) + 4)|0;
  $16 = $gep;
  $2 = $16;
  
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $17 = ___cxa_find_matching_catch(-1,-1)|0;
 $18 = tempRet0;
 $5 = $17;
 $6 = $18;
 __THREW__ = 0;
 invoke_vi(140,$4|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 
 if ($20) {
  $expanded1 = 69;
  $23 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$22 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable
 }
 
 $21 = $5;
 $22 = $6;
 ___resumeException($21|0);
 // unreachable
}
function __ZN2cl6vectorINS_8PlatformELj10EE5clearEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 40)|0;
 $3 = $gep;
 HEAP32[$3>>2] = -1;
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + 44)|0;
 $4 = $gep2;
 HEAP8[$4] = 1;
 STACKTOP = sp;return;
}
function __ZN2cl6vectorINS_8PlatformELj10EE9push_backERKS1_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0, $gep_array = 0, $gep_int = 0;
 var $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $x;
 $3 = $1;
 $4 = __ZNK2cl6vectorINS_8PlatformELj10EE4sizeEv($3)|0;
 $5 = ($4>>>0)<(10);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $gep_int = $3;
 $gep = (($gep_int) + 40)|0;
 $6 = $gep;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $gep_int1 = $3;
 $gep2 = (($gep_int1) + 40)|0;
 $9 = $gep2;
 $10 = HEAP32[$9>>2]|0;
 $gep_int3 = $3;
 $11 = $gep_int3;
 $gep_int4 = $11;
 $gep_array = $10<<2;
 $gep5 = (($gep_int4) + ($gep_array))|0;
 $12 = $gep5;
 $13 = $2;
 u$4 = __ZN2cl8PlatformaSERKS0_($12,$13)|0;
 $gep_int6 = $3;
 $gep7 = (($gep_int6) + 44)|0;
 $14 = $gep7;
 HEAP8[$14] = 0;
 
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformC1EP15_cl_platform_id($this,$platform) {
 $this = $this|0;
 $platform = $platform|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $platform;
 $3 = $1;
 $4 = $2;
 __ZN2cl8PlatformC2EP15_cl_platform_id($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformC2EP15_cl_platform_id($this,$platform) {
 $this = $this|0;
 $platform = $platform|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $platform;
 $3 = $1;
 $4 = $3;
 __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($4);
 $5 = $2;
 $6 = $3;
 $gep_int = $3;
 $7 = $gep_int;
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 
 if (!($5)) {
  STACKTOP = sp;return $3|0;
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 u$3 = __ZN2cl6detail7WrapperIP15_cl_platform_idEaSERKS4_($6,$8)|0;
 
 STACKTOP = sp;return $3|0;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, $gep_int3 = 0, label = 0, sp = 0, u$3 = 0;
 var u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $gep_int = $3;
 $4 = $gep_int;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 
 if ($6) {
  u$3 = __ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($3)|0;
  
 }
 $7 = $2;
 $gep_int1 = $7;
 $8 = $gep_int1;
 $9 = HEAP32[$8>>2]|0;
 $gep_int2 = $3;
 $10 = $gep_int2;
 HEAP32[$10>>2] = $9;
 $gep_int3 = $3;
 $11 = $gep_int3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 
 if (!($13)) {
  STACKTOP = sp;return $3|0;
 }
 u$7 = __ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($3)|0;
 
 STACKTOP = sp;return $3|0;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $gep = 0, $gep11 = 0, $gep14 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0;
 var $gep_int16 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $tmp$i$i$i = 0, $tmp1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 264|0;
 
 
 
 $4 = sp + 24|0;
 
 
 $7 = sp + 48|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $33 = sp + 256|0;
 $32 = $this;
 $34 = $32;
 $gep_int = $34;
 $35 = $gep_int;
 $36 = HEAP32[$35>>2]|0;
 $30 = $33;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 $gep_int1 = $39;
 $40 = $gep_int1;
 HEAP32[$40>>2] = 0;
 $21 = $33;
 $41 = ($36|0)!=(0);
 
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $42 = $13;
 $gep_int2 = $42;
 $43 = $gep_int2;
 $44 = HEAP32[$43>>2]|0;
 $11 = $42;
 $12 = $44;
 $45 = $11;
 
 while(1) {
  $46 = $12;
  $gep_int3 = $45;
  $gep = (($gep_int3) + 4)|0;
  $47 = $gep;
  $48 = HEAP32[$47>>2]|0;
  $49 = ($46|0)!=($48|0);
  
  if (!($49)) {
   break;
  }
  $10 = $45;
  $50 = $10;
  $gep_int4 = $50;
  $gep5 = (($gep_int4) + 8)|0;
  $51 = $gep5;
  $9 = $51;
  $52 = $9;
  $53 = $52;
  $8 = $53;
  $54 = $8;
  $55 = $54;
  $gep_int6 = $45;
  $gep7 = (($gep_int6) + 4)|0;
  $56 = $gep7;
  $57 = HEAP32[$56>>2]|0;
  $gep_int8 = $57;
  $gep9 = (($gep_int8) + -8)|0;
  $58 = $gep9;
  HEAP32[$56>>2] = $58;
  $1 = $58;
  $59 = $1;
  $5 = $55;
  $6 = $59;
  $60 = $5;
  $61 = $6;
  $tmp$i$i$i = $4;
  $tmp1$i$i$i = $7;
  ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
  $2 = $60;
  $3 = $61;
  
 }
 $16 = $34;
 $62 = $16;
 $gep_int10 = $62;
 $gep11 = (($gep_int10) + 8)|0;
 $63 = $gep11;
 $15 = $63;
 $64 = $15;
 $65 = $64;
 $14 = $65;
 $66 = $14;
 $67 = $66;
 $gep_int12 = $34;
 $68 = $gep_int12;
 $69 = HEAP32[$68>>2]|0;
 $20 = $34;
 $70 = $20;
 $19 = $70;
 $71 = $19;
 $gep_int13 = $71;
 $gep14 = (($gep_int13) + 8)|0;
 $72 = $gep14;
 $18 = $72;
 $73 = $18;
 $74 = $73;
 $17 = $74;
 $75 = $17;
 $gep_int15 = $75;
 $76 = $gep_int15;
 $77 = HEAP32[$76>>2]|0;
 $gep_int16 = $70;
 $78 = $gep_int16;
 $79 = HEAP32[$78>>2]|0;
 $80 = $77;
 $81 = $79;
 $82 = (($80) - ($81))|0;
 $83 = (($82|0) / 8)&-1;
 $25 = $67;
 $26 = $69;
 $27 = $83;
 $84 = $25;
 $85 = $26;
 $86 = $27;
 $22 = $84;
 $23 = $85;
 $24 = $86;
 $87 = $23;
 $88 = $87;
 __ZdlPv($88);
 
 STACKTOP = sp;return;
}
function __GLOBAL__I_a20() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init19();
 STACKTOP = sp;return;
}
function ___cxx_global_var_init74() {
 var $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep_int = 0, $gep_int4 = 0, label = 0, sp = 0, u$1 = 0;
 sp = STACKTOP;
 $expanded = 1208;
 __ZN2cl7NDRangeC1Ev($expanded);
 $expanded1 = 129;
 $gep_int = 1208;
 $expanded2 = $gep_int;
 $gep_int4 = ___dso_handle;
 $expanded3 = $gep_int4;
 u$1 = _atexit($expanded1|0,$expanded2|0,$expanded3|0)|0;
 STACKTOP = sp;return;
}
function __Z13WallClockTimev() {
 var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $gep = 0, $gep_int = 0, $gep_int1 = 0, $t = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $t = sp;
 u$0 = _gettimeofday($t|0,0)|0;
 $gep_int = $t;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = +($2|0);
 $gep_int1 = $t;
 $gep = (($gep_int1) + 4)|0;
 $4 = $gep;
 $5 = HEAP32[$4>>2]|0;
 $6 = +($5|0);
 $7 = $6 / 1.000000e+06;
 $8 = $3 + $7;
 STACKTOP = sp;return +$8;
}
function __Z11displayFuncv() {
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $devices = 0, $end = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0;
 var $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0;
 var $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep54 = 0, $gep59 = 0, $gep_int = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int47 = 0, $gep_int48 = 0;
 var $gep_int49 = 0, $gep_int50 = 0, $gep_int51 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int56 = 0, $gep_int57 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int61 = 0, $gep_int62 = 0, $i = 0, $i1 = 0, $start = 0, label = 0, sp = 0, u$190 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 216|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $devices = sp + 120|0;
 
 
 
 
 
 
 $expanded = 1232;
 $18 = HEAP32[1232>>2]|0;
 $19 = __ZNK12RenderConfig15GetRenderDeviceEv($18)|0;
 __ZN2cl6vectorIP12RenderDeviceLj10EEC1ERKS3_($devices,$19);
 $i = 0;
 
 while(1) {
  $20 = $i;
  __THREW__ = 0;
  $21 = invoke_ii(73,$devices|0)|0;
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  
  if ($23) {
   break;
  }
  $24 = ($20>>>0)<($21>>>0);
  
  if (!($24)) {
   label = 9;
   break;
  }
  $25 = $i;
  __THREW__ = 0;
  $26 = invoke_iii(28,$devices|0,$25|0)|0;
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  
  if ($28) {
   break;
  }
  __THREW__ = 0;
  invoke_vi(147,$26|0);
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  
  if ($30) {
   break;
  }
  
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
  
 }
 L8: do {
  if ((label|0) == 9) {
   $expanded2 = 1248;
   $37 = HEAP32[1248>>2]|0;
   __THREW__ = 0;
   invoke_vi(148,$37|0);
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   
   if ($39) {
    break;
   }
   $expanded3 = 1248;
   $40 = HEAP32[1248>>2]|0;
   $expanded4 = 1240;
   $41 = HEAP32[1240>>2]|0;
   __THREW__ = 0;
   invoke_vii(52,$40|0,$41|0);
   $42 = __THREW__; __THREW__ = 0;
   $43 = $42&1;
   
   if ($43) {
    break;
   }
   $expanded5 = 1232;
   $44 = HEAP32[1232>>2]|0;
   $gep_int = $44;
   $gep = (($gep_int) + 528)|0;
   $45 = $gep;
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)!=(0);
   
   if ($47) {
    $expanded6 = 1248;
    $48 = HEAP32[1248>>2]|0;
    $expanded7 = 1232;
    $49 = HEAP32[1232>>2]|0;
    $gep_int25 = $49;
    $gep26 = (($gep_int25) + 516)|0;
    $50 = $gep26;
    $51 = HEAP32[$50>>2]|0;
    $expanded8 = 1232;
    $52 = HEAP32[1232>>2]|0;
    $gep_int27 = $52;
    $gep28 = (($gep_int27) + 520)|0;
    $53 = $gep28;
    $54 = HEAP32[$53>>2]|0;
    $expanded9 = 1256;
    $55 = HEAP32[1256>>2]|0;
    $expanded10 = 1264;
    $56 = HEAP32[1264>>2]|0;
    $expanded11 = 1232;
    $57 = HEAP32[1232>>2]|0;
    $gep_int29 = $57;
    $gep30 = (($gep_int29) + 528)|0;
    $58 = $gep30;
    $59 = HEAP32[$58>>2]|0;
    $60 = $59;
    __THREW__ = 0;
    invoke_viiiiiiiii(3,$48|0,0,0,0,$51|0,$54|0,$55|0,$56|0,$60|0);
    $61 = __THREW__; __THREW__ = 0;
    $62 = $61&1;
    
    if ($62) {
     break;
    }
    
   }
   __THREW__ = 0;
   invoke_vi(149,5);
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   
   if ($64) {
    break;
   }
   __THREW__ = 0;
   invoke_vddd(1,1.000000e+00,1.000000e+00,1.000000e+00);
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   
   if ($66) {
    break;
   }
   __THREW__ = 0;
   invoke_vii(53,0,0);
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   
   if ($68) {
    break;
   }
   __THREW__ = 0;
   invoke_vddd(2,0.000000e+00,0.000000e+00,0.000000e+00);
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   
   if ($70) {
    break;
   }
   __THREW__ = 0;
   invoke_vddd(1,1.000000e+00,1.000000e+00,1.000000e+00);
   $71 = __THREW__; __THREW__ = 0;
   $72 = $71&1;
   
   if ($72) {
    break;
   }
   __THREW__ = 0;
   invoke_vii(53,0,1);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   
   if ($74) {
    break;
   }
   $expanded12 = 1232;
   $75 = HEAP32[1232>>2]|0;
   $gep_int31 = $75;
   $gep32 = (($gep_int31) + 520)|0;
   $76 = $gep32;
   $77 = HEAP32[$76>>2]|0;
   $78 = +($77>>>0);
   __THREW__ = 0;
   invoke_vddd(2,0.000000e+00,+$78,0.000000e+00);
   $79 = __THREW__; __THREW__ = 0;
   $80 = $79&1;
   
   if ($80) {
    break;
   }
   __THREW__ = 0;
   invoke_vddd(1,1.000000e+00,1.000000e+00,1.000000e+00);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   
   if ($82) {
    break;
   }
   __THREW__ = 0;
   invoke_vii(53,1,0);
   $83 = __THREW__; __THREW__ = 0;
   $84 = $83&1;
   
   if ($84) {
    break;
   }
   $expanded13 = 1232;
   $85 = HEAP32[1232>>2]|0;
   $gep_int33 = $85;
   $gep34 = (($gep_int33) + 516)|0;
   $86 = $gep34;
   $87 = HEAP32[$86>>2]|0;
   $88 = +($87>>>0);
   __THREW__ = 0;
   invoke_vddd(2,+$88,0.000000e+00,0.000000e+00);
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   
   if ($90) {
    break;
   }
   __THREW__ = 0;
   invoke_vddd(1,1.000000e+00,1.000000e+00,1.000000e+00);
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   
   if ($92) {
    break;
   }
   __THREW__ = 0;
   invoke_vii(53,1,1);
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   
   if ($94) {
    break;
   }
   $expanded14 = 1232;
   $95 = HEAP32[1232>>2]|0;
   $gep_int35 = $95;
   $gep36 = (($gep_int35) + 516)|0;
   $96 = $gep36;
   $97 = HEAP32[$96>>2]|0;
   $98 = +($97>>>0);
   $expanded15 = 1232;
   $99 = HEAP32[1232>>2]|0;
   $gep_int37 = $99;
   $gep38 = (($gep_int37) + 520)|0;
   $100 = $gep38;
   $101 = HEAP32[$100>>2]|0;
   $102 = +($101>>>0);
   __THREW__ = 0;
   invoke_vddd(2,+$98,+$102,0.000000e+00);
   $103 = __THREW__; __THREW__ = 0;
   $104 = $103&1;
   
   if ($104) {
    break;
   }
   __THREW__ = 0;
   invoke_v(3);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   
   if ($106) {
    break;
   }
   $expanded16 = 1248;
   $107 = HEAP32[1248>>2]|0;
   __THREW__ = 0;
   invoke_vi(150,$107|0);
   $108 = __THREW__; __THREW__ = 0;
   $109 = $108&1;
   
   if ($109) {
    break;
   }
   $expanded17 = 1248;
   $110 = HEAP32[1248>>2]|0;
   __THREW__ = 0;
   invoke_vii(52,$110|0,0);
   $111 = __THREW__; __THREW__ = 0;
   $112 = $111&1;
   
   if ($112) {
    break;
   }
   $gep_int39 = 1272;
   $expanded18 = $gep_int39;
   $113 = HEAP8[$expanded18]|0;
   $114 = $113&1;
   
   if ($114) {
    $start = 0;
    $i1 = 0;
    
    while(1) {
     $115 = $i1;
     __THREW__ = 0;
     $116 = invoke_ii(73,$devices|0)|0;
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     
     if ($118) {
      break L8;
     }
     $119 = ($115>>>0)<($116>>>0);
     
     if (!($119)) {
      break;
     }
     $120 = $i1;
     __THREW__ = 0;
     $121 = invoke_iii(28,$devices|0,$120|0)|0;
     $122 = __THREW__; __THREW__ = 0;
     $123 = $122&1;
     
     if ($123) {
      break L8;
     }
     __THREW__ = 0;
     $124 = invoke_ii(79,$121|0)|0;
     $125 = __THREW__; __THREW__ = 0;
     $126 = $125&1;
     
     if ($126) {
      break L8;
     }
     $127 = $i1;
     __THREW__ = 0;
     $128 = invoke_iii(28,$devices|0,$127|0)|0;
     $129 = __THREW__; __THREW__ = 0;
     $130 = $129&1;
     
     if ($130) {
      break L8;
     }
     __THREW__ = 0;
     $131 = invoke_ii(80,$128|0)|0;
     $132 = __THREW__; __THREW__ = 0;
     $133 = $132&1;
     
     if ($133) {
      break L8;
     }
     $134 = (($124) + ($131))|0;
     $expanded19 = 1232;
     $135 = HEAP32[1232>>2]|0;
     $gep_int40 = $135;
     $gep41 = (($gep_int40) + 516)|0;
     $136 = $gep41;
     $137 = HEAP32[$136>>2]|0;
     $138 = (($134>>>0) / ($137>>>0))&-1;
     $end = $138;
     $139 = $i1;
     $140 = (($139>>>0) % 4)&-1;
     
     if ((($140|0) == 0)) {
      __THREW__ = 0;
      invoke_vddd(1,1.000000e+00,0.000000e+00,0.000000e+00);
      $141 = __THREW__; __THREW__ = 0;
      $142 = $141&1;
      
      if ($142) {
       break L8;
      }
      
     } else if ((($140|0) == 1)) {
      __THREW__ = 0;
      invoke_vddd(1,0.000000e+00,1.000000e+00,0.000000e+00);
      $143 = __THREW__; __THREW__ = 0;
      $144 = $143&1;
      
      if ($144) {
       break L8;
      }
      
     } else if ((($140|0) == 2)) {
      __THREW__ = 0;
      invoke_vddd(1,0.000000e+00,0.000000e+00,1.000000e+00);
      $145 = __THREW__; __THREW__ = 0;
      $146 = $145&1;
      
      if ($146) {
       break L8;
      }
      
     } else if ((($140|0) == 3)) {
      __THREW__ = 0;
      invoke_vddd(1,1.000000e+00,1.000000e+00,0.000000e+00);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      
      if ($148) {
       break L8;
      }
      
     }
     __THREW__ = 0;
     invoke_vi(149,1);
     $149 = __THREW__; __THREW__ = 0;
     $150 = $149&1;
     
     if ($150) {
      break L8;
     }
     $151 = $start;
     __THREW__ = 0;
     invoke_vii(54,0,$151|0);
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     
     if ($153) {
      break L8;
     }
     $expanded20 = 1232;
     $154 = HEAP32[1232>>2]|0;
     $gep_int42 = $154;
     $gep43 = (($gep_int42) + 516)|0;
     $155 = $gep43;
     $156 = HEAP32[$155>>2]|0;
     $157 = $start;
     __THREW__ = 0;
     invoke_vii(54,$156|0,$157|0);
     $158 = __THREW__; __THREW__ = 0;
     $159 = $158&1;
     
     if ($159) {
      break L8;
     }
     $160 = $end;
     __THREW__ = 0;
     invoke_vii(54,0,$160|0);
     $161 = __THREW__; __THREW__ = 0;
     $162 = $161&1;
     
     if ($162) {
      break L8;
     }
     $expanded21 = 1232;
     $163 = HEAP32[1232>>2]|0;
     $gep_int44 = $163;
     $gep45 = (($gep_int44) + 516)|0;
     $164 = $gep45;
     $165 = HEAP32[$164>>2]|0;
     $166 = $end;
     __THREW__ = 0;
     invoke_vii(54,$165|0,$166|0);
     $167 = __THREW__; __THREW__ = 0;
     $168 = $167&1;
     
     if ($168) {
      break L8;
     }
     __THREW__ = 0;
     invoke_v(3);
     $169 = __THREW__; __THREW__ = 0;
     $170 = $169&1;
     
     if ($170) {
      break L8;
     }
     __THREW__ = 0;
     invoke_vddd(1,1.000000e+00,1.000000e+00,1.000000e+00);
     $171 = __THREW__; __THREW__ = 0;
     $172 = $171&1;
     
     if ($172) {
      break L8;
     }
     $173 = $i1;
     __THREW__ = 0;
     $174 = invoke_iii(28,$devices|0,$173|0)|0;
     $175 = __THREW__; __THREW__ = 0;
     $176 = $175&1;
     
     if ($176) {
      break L8;
     }
     __THREW__ = 0;
     $177 = invoke_ii(77,$174|0)|0;
     $178 = __THREW__; __THREW__ = 0;
     $179 = $178&1;
     
     if ($179) {
      break L8;
     }
     $15 = $177;
     $180 = $15;
     $14 = $180;
     $181 = $14;
     $13 = $181;
     $182 = $13;
     $12 = $182;
     $183 = $12;
     $gep_int46 = $183;
     $184 = $gep_int46;
     $11 = $184;
     $185 = $11;
     $186 = $185;
     $10 = $186;
     $187 = $10;
     $gep_int47 = $187;
     $188 = $gep_int47;
     $gep_int48 = $188;
     $189 = $gep_int48;
     $190 = $189;
     $gep_int49 = $189;
     $191 = $gep_int49;
     $192 = $191;
     $193 = HEAP8[$191]|0;
     $194 = $193&255;
     $195 = $194 & 1;
     $196 = ($195|0)!=(0);
     
     if ($196) {
      $4 = $182;
      $197 = $4;
      $gep_int50 = $197;
      $198 = $gep_int50;
      $3 = $198;
      $199 = $3;
      $200 = $199;
      $2 = $200;
      $201 = $2;
      $gep_int51 = $201;
      $202 = $gep_int51;
      $gep_int52 = $202;
      $203 = $gep_int52;
      $204 = $203;
      $gep_int53 = $203;
      $gep54 = (($gep_int53) + 8)|0;
      $205 = $gep54;
      $206 = HEAP32[$205>>2]|0;
      
      $219 = $206;
     } else {
      $9 = $182;
      $207 = $9;
      $gep_int55 = $207;
      $208 = $gep_int55;
      $8 = $208;
      $209 = $8;
      $210 = $209;
      $7 = $210;
      $211 = $7;
      $gep_int56 = $211;
      $212 = $gep_int56;
      $gep_int57 = $212;
      $213 = $gep_int57;
      $214 = $213;
      $gep_int58 = $213;
      $gep59 = (($gep_int58) + 1)|0;
      $215 = $gep59;
      $gep_int60 = $215;
      $216 = $gep_int60;
      $6 = $216;
      $217 = $6;
      $5 = $217;
      $218 = $5;
      
      $219 = $218;
     }
     
     $1 = $219;
     $220 = $1;
     __THREW__ = 0;
     $gep_int61 = _glutBitmap8By13;
     $expanded22 = $gep_int61;
     invoke_vii(55,$expanded22|0,$220|0);
     $221 = __THREW__; __THREW__ = 0;
     $222 = $221&1;
     
     if ($222) {
      break L8;
     }
     $223 = $end;
     $224 = (($223) + 1)|0;
     $start = $224;
     
     $225 = $i1;
     $226 = (($225) + 1)|0;
     $i1 = $226;
     
    }
    
   }
   __THREW__ = 0;
   invoke_v(4);
   $227 = __THREW__; __THREW__ = 0;
   $228 = $227&1;
   
   if ($228) {
    break;
   }
   $gep_int62 = 1280;
   $expanded23 = $gep_int62;
   $229 = HEAP8[$expanded23]|0;
   $230 = $229&1;
   
   if ($230) {
    __THREW__ = 0;
    invoke_v(5);
    $231 = __THREW__; __THREW__ = 0;
    $232 = $231&1;
    
    if ($232) {
     break;
    }
    __THREW__ = 0;
    invoke_v(6);
    $233 = __THREW__; __THREW__ = 0;
    $234 = $233&1;
    
    if ($234) {
     break;
    }
    __THREW__ = 0;
    invoke_vdddddd(1,-5.000000e-01,6.395000e+02,-5.000000e-01,4.795000e+02,-1.000000e+00,1.000000e+00);
    $235 = __THREW__; __THREW__ = 0;
    $236 = $235&1;
    
    if ($236) {
     break;
    }
    __THREW__ = 0;
    invoke_v(7);
    $237 = __THREW__; __THREW__ = 0;
    $238 = $237&1;
    
    if ($238) {
     break;
    }
    __THREW__ = 0;
    invoke_v(8);
    $239 = __THREW__; __THREW__ = 0;
    $240 = $239&1;
    
    if ($240) {
     break;
    }
    
   }
   __THREW__ = 0;
   invoke_v(9);
   $241 = __THREW__; __THREW__ = 0;
   $242 = $241&1;
   
   if ($242) {
    break;
   }
   __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($devices);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded1 = 69;
 $33 = ___cxa_find_matching_catch(-1,-1)|0;
 $34 = tempRet0;
 $16 = $33;
 $17 = $34;
 __THREW__ = 0;
 invoke_vi(136,$devices|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 
 if ($36) {
  $expanded24 = 69;
  $245 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$190 = tempRet0;
  ___clang_call_terminate($245);
  // unreachable
 }
 
 $243 = $16;
 $244 = $17;
 ___resumeException($243|0);
 // unreachable
}
function __ZN2cl6vectorIP12RenderDeviceLj10EEC1ERKS3_($this,$vec) {
 $this = $this|0;
 $vec = $vec|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $vec;
 $3 = $1;
 $4 = $2;
 __ZN2cl6vectorIP12RenderDeviceLj10EEC2ERKS3_($3,$4);
 STACKTOP = sp;return;
}
function __ZNK12RenderConfig15GetRenderDeviceEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 548)|0;
 $3 = $gep;
 STACKTOP = sp;return $3|0;
}
function __ZNK2cl6vectorIP12RenderDeviceLj10EEixEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $index;
 $3 = $1;
 $4 = $2;
 $gep_int = $3;
 $5 = $gep_int;
 $gep_int1 = $5;
 $gep_array = $4<<2;
 $gep = (($gep_int1) + ($gep_array))|0;
 $6 = $gep;
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return $7|0;
}
function __ZNK12RenderDevice13GetWorkOffsetEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 28)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return $4|0;
}
function __ZNK12RenderDevice13GetWorkAmountEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 32)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return $4|0;
}
function __ZL11PrintStringPvPKc($font,$string) {
 $font = $font|0;
 $string = $string|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, $expanded1 = 0, $gep_int = 0, $gep_int2 = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $vararg_buffer = sp;
 $vararg_lifetime_bitcast = $vararg_buffer;
 
 
 $1 = $font;
 $2 = $string;
 $3 = $2;
 
 $gep_int = $vararg_buffer;
 $vararg_ptr = $gep_int;
 HEAP32[$vararg_ptr>>2] = $3;
 $expanded = 29;
 $vararg_func = $expanded;
 $gep_int2 = 2408;
 $expanded1 = $gep_int2;
 u$4 = _printf($expanded1|0,$vararg_buffer|0)|0;
 
 STACKTOP = sp;return;
}
function __ZL13PrintCaptionsv() {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $gep = 0, $gep14 = 0, $gep_int = 0;
 var $gep_int10 = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glEnable(3042);
 _glBlendFunc(770,771);
 _glColor4f(0.000000e+00,0.000000e+00,0.000000e+00,0.800000011920928955078125);
 _glDisable(3042);
 $expanded = 1232;
 $1 = HEAP32[1232>>2]|0;
 $2 = __ZNK12RenderConfig11IsProfilingEv($1)|0;
 
 if ($2) {
  _glColor3f(1.000000e+00,0.000000e+00,0.000000e+00);
  $gep_int = _glutBitmap8By13;
  $expanded1 = $gep_int;
  $gep_int9 = 2392;
  $expanded2 = $gep_int9;
  __ZL11PrintStringPvPKc($expanded1,$expanded2);
  _glColor3f(1.000000e+00,1.000000e+00,1.000000e+00);
  $expanded3 = 1232;
  $3 = HEAP32[1232>>2]|0;
  $gep_int10 = $3;
  $gep = (($gep_int10) + 4)|0;
  $4 = $gep;
  $gep_int11 = $4;
  $5 = $gep_int11;
  $gep_int12 = _glutBitmap8By13;
  $expanded4 = $gep_int12;
  __ZL11PrintStringPvPKc($expanded4,$5);
  
  $gep_int17 = _glutBitmap8By13;
  $expanded7 = $gep_int17;
  $gep_int18 = 1496;
  $expanded8 = $gep_int18;
  __ZL11PrintStringPvPKc($expanded7,$expanded8);
  STACKTOP = sp;return;
 } else {
  _glColor3f(1.000000e+00,1.000000e+00,1.000000e+00);
  $expanded5 = 1232;
  $6 = HEAP32[1232>>2]|0;
  $gep_int13 = $6;
  $gep14 = (($gep_int13) + 4)|0;
  $7 = $gep14;
  $gep_int15 = $7;
  $8 = $gep_int15;
  $gep_int16 = _glutBitmap8By13;
  $expanded6 = $gep_int16;
  __ZL11PrintStringPvPKc($expanded6,$8);
  
  $gep_int17 = _glutBitmap8By13;
  $expanded7 = $gep_int17;
  $gep_int18 = 1496;
  $expanded8 = $gep_int18;
  __ZL11PrintStringPvPKc($expanded7,$expanded8);
  STACKTOP = sp;return;
 }
}
function __ZL19PrintHelpAndDevicesv() {
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $buff = 0, $devices = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0;
 var $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0;
 var $gep = 0, $gep79 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep_int = 0, $gep_int41 = 0, $gep_int42 = 0, $gep_int43 = 0, $gep_int44 = 0, $gep_int45 = 0, $gep_int46 = 0, $gep_int47 = 0, $gep_int48 = 0, $gep_int49 = 0, $gep_int50 = 0, $gep_int51 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int54 = 0;
 var $gep_int55 = 0, $gep_int56 = 0, $gep_int57 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int60 = 0, $gep_int61 = 0, $gep_int62 = 0, $gep_int63 = 0, $gep_int64 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int67 = 0, $gep_int68 = 0, $gep_int69 = 0, $gep_int70 = 0, $gep_int71 = 0, $gep_int72 = 0, $gep_int73 = 0, $gep_int74 = 0;
 var $gep_int75 = 0, $gep_int76 = 0, $gep_int77 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int81 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int89 = 0, $gep_int90 = 0, $gep_int91 = 0, $gep_int92 = 0, $gep_int93 = 0, $i = 0, $i1 = 0, $minPerf = 0, $offset = 0, $tmp$i = 0;
 var $tmp1$i = 0, $totalAmount = 0.0, $totalPerf = 0.0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0, u$118 = 0, u$144 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $vararg_lifetime_bitcast = $vararg_buffer;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $21 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 
 
 $24 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $devices = STACKTOP; STACKTOP = STACKTOP + 48|0;
 $minPerf = STACKTOP; STACKTOP = STACKTOP + 8|0;
 
 
 
 
 
 $27 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 
 $buff = STACKTOP; STACKTOP = STACKTOP + 512|0;
 
 _glEnable(3042);
 _glBlendFunc(770,771);
 _glColor4f(0.000000e+00,0.000000e+00,0.000000e+00,5.000000e-01);
 _glDisable(3042);
 _glColor3f(1.000000e+00,1.000000e+00,1.000000e+00);
 $gep_int = _glutBitmap9By15;
 $expanded = $gep_int;
 $gep_int41 = 1752;
 $expanded4 = $gep_int41;
 __ZL11PrintStringPvPKc($expanded,$expanded4);
 $gep_int42 = _glutBitmap9By15;
 $expanded5 = $gep_int42;
 $gep_int43 = 1768;
 $expanded6 = $gep_int43;
 __ZL11PrintStringPvPKc($expanded5,$expanded6);
 $gep_int44 = _glutBitmap9By15;
 $expanded7 = $gep_int44;
 $gep_int45 = 1784;
 $expanded8 = $gep_int45;
 __ZL11PrintStringPvPKc($expanded7,$expanded8);
 $gep_int46 = _glutBitmap9By15;
 $expanded9 = $gep_int46;
 $gep_int47 = 1832;
 $expanded10 = $gep_int47;
 __ZL11PrintStringPvPKc($expanded9,$expanded10);
 $gep_int48 = _glutBitmap9By15;
 $expanded11 = $gep_int48;
 $gep_int49 = 1872;
 $expanded12 = $gep_int49;
 __ZL11PrintStringPvPKc($expanded11,$expanded12);
 $gep_int50 = _glutBitmap9By15;
 $expanded13 = $gep_int50;
 $gep_int51 = 1920;
 $expanded14 = $gep_int51;
 __ZL11PrintStringPvPKc($expanded13,$expanded14);
 $gep_int52 = _glutBitmap9By15;
 $expanded15 = $gep_int52;
 $gep_int53 = 1960;
 $expanded16 = $gep_int53;
 __ZL11PrintStringPvPKc($expanded15,$expanded16);
 $gep_int54 = _glutBitmap9By15;
 $expanded17 = $gep_int54;
 $gep_int55 = 2016;
 $expanded18 = $gep_int55;
 __ZL11PrintStringPvPKc($expanded17,$expanded18);
 $gep_int56 = _glutBitmap9By15;
 $expanded19 = $gep_int56;
 $gep_int57 = 2064;
 $expanded20 = $gep_int57;
 __ZL11PrintStringPvPKc($expanded19,$expanded20);
 $gep_int58 = _glutBitmap9By15;
 $expanded21 = $gep_int58;
 $gep_int59 = 2112;
 $expanded22 = $gep_int59;
 __ZL11PrintStringPvPKc($expanded21,$expanded22);
 $gep_int60 = _glutBitmap9By15;
 $expanded23 = $gep_int60;
 $gep_int61 = 2152;
 $expanded24 = $gep_int61;
 __ZL11PrintStringPvPKc($expanded23,$expanded24);
 $gep_int62 = _glutBitmap9By15;
 $expanded25 = $gep_int62;
 $gep_int63 = 2192;
 $expanded26 = $gep_int63;
 __ZL11PrintStringPvPKc($expanded25,$expanded26);
 $gep_int64 = _glutBitmap9By15;
 $expanded27 = $gep_int64;
 $gep_int65 = 2240;
 $expanded28 = $gep_int65;
 __ZL11PrintStringPvPKc($expanded27,$expanded28);
 $expanded29 = 1232;
 $28 = HEAP32[1232>>2]|0;
 $29 = __ZNK12RenderConfig15GetRenderDeviceEv($28)|0;
 __ZN2cl6vectorIP12RenderDeviceLj10EEC1ERKS3_($devices,$29);
 __THREW__ = 0;
 $30 = invoke_iii(28,$devices|0,0)|0;
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 
 L1: do {
  if (!($32)) {
   __THREW__ = 0;
   $33 = +invoke_di(1,$30|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   
   if ($35) {
    break;
   }
   HEAPF64[$minPerf>>3] = $33;
   $expanded30 = 1232;
   $36 = HEAP32[1232>>2]|0;
   __THREW__ = 0;
   $37 = +invoke_dii(1,$36|0,0);
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   
   if ($39) {
    break;
   }
   $totalPerf = $37;
   __THREW__ = 0;
   $40 = invoke_iii(28,$devices|0,0)|0;
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   
   if ($42) {
    break;
   }
   __THREW__ = 0;
   $43 = invoke_ii(80,$40|0)|0;
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   
   if ($45) {
    break;
   }
   $46 = +($43>>>0);
   $totalAmount = $46;
   $i = 1;
   
   while(1) {
    $47 = $i;
    __THREW__ = 0;
    $48 = invoke_ii(73,$devices|0)|0;
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    
    if ($50) {
     break L1;
    }
    $51 = ($47>>>0)<($48>>>0);
    
    if (!($51)) {
     break;
    }
    $52 = $i;
    __THREW__ = 0;
    $53 = invoke_iii(28,$devices|0,$52|0)|0;
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    
    if ($55) {
     break L1;
    }
    __THREW__ = 0;
    $56 = +invoke_di(1,$53|0);
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    
    if ($58) {
     break L1;
    }
    HEAPF64[$27>>3] = $56;
    $22 = $minPerf;
    $23 = $27;
    $59 = $22;
    $60 = $23;
    $tmp$i = $21;
    $tmp1$i = $24;
    ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
    $19 = $59;
    $20 = $60;
    $61 = $20;
    $62 = $19;
    $16 = $21;
    $17 = $61;
    $18 = $62;
    $63 = $17;
    $64 = +HEAPF64[$63>>3];
    $65 = $18;
    $66 = +HEAPF64[$65>>3];
    $67 = $64 < $66;
    
    if ($67) {
     $68 = $20;
     
     $70 = $68;
    } else {
     $69 = $19;
     
     $70 = $69;
    }
    
    
    $71 = +HEAPF64[$70>>3];
    HEAPF64[$minPerf>>3] = $71;
    $expanded31 = 1232;
    $72 = HEAP32[1232>>2]|0;
    $73 = $i;
    __THREW__ = 0;
    $74 = +invoke_dii(1,$72|0,$73|0);
    $75 = __THREW__; __THREW__ = 0;
    $76 = $75&1;
    
    if ($76) {
     break L1;
    }
    $77 = $totalPerf;
    $78 = $77 + $74;
    $totalPerf = $78;
    $79 = $i;
    __THREW__ = 0;
    $80 = invoke_iii(28,$devices|0,$79|0)|0;
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    
    if ($82) {
     break L1;
    }
    __THREW__ = 0;
    $83 = invoke_ii(80,$80|0)|0;
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    
    if ($85) {
     break L1;
    }
    $86 = +($83>>>0);
    $87 = $totalAmount;
    $88 = $87 + $86;
    $totalAmount = $88;
    
    $89 = $i;
    $90 = (($89) + 1)|0;
    $i = $90;
    
   }
   __THREW__ = 0;
   invoke_vddd(1,1.000000e+00,5.000000e-01,0.000000e+00);
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   
   if ($96) {
    break;
   }
   $offset = 85;
   $i1 = 0;
   
   while(1) {
    $97 = $i1;
    __THREW__ = 0;
    $98 = invoke_ii(73,$devices|0)|0;
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    
    if ($100) {
     break L1;
    }
    $101 = ($97>>>0)<($98>>>0);
    
    if (!($101)) {
     break;
    }
    $gep_int66 = $buff;
    $102 = $gep_int66;
    $103 = $i1;
    __THREW__ = 0;
    $104 = invoke_iii(28,$devices|0,$103|0)|0;
    $105 = __THREW__; __THREW__ = 0;
    $106 = $105&1;
    
    if ($106) {
     break L1;
    }
    __THREW__ = 0;
    $107 = invoke_ii(77,$104|0)|0;
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    
    if ($109) {
     break L1;
    }
    $15 = $107;
    $110 = $15;
    $14 = $110;
    $111 = $14;
    $13 = $111;
    $112 = $13;
    $12 = $112;
    $113 = $12;
    $gep_int67 = $113;
    $114 = $gep_int67;
    $11 = $114;
    $115 = $11;
    $116 = $115;
    $10 = $116;
    $117 = $10;
    $gep_int68 = $117;
    $118 = $gep_int68;
    $gep_int69 = $118;
    $119 = $gep_int69;
    $120 = $119;
    $gep_int70 = $119;
    $121 = $gep_int70;
    $122 = $121;
    $123 = HEAP8[$121]|0;
    $124 = $123&255;
    $125 = $124 & 1;
    $126 = ($125|0)!=(0);
    
    if ($126) {
     $4 = $112;
     $127 = $4;
     $gep_int71 = $127;
     $128 = $gep_int71;
     $3 = $128;
     $129 = $3;
     $130 = $129;
     $2 = $130;
     $131 = $2;
     $gep_int72 = $131;
     $132 = $gep_int72;
     $gep_int73 = $132;
     $133 = $gep_int73;
     $134 = $133;
     $gep_int74 = $133;
     $gep = (($gep_int74) + 8)|0;
     $135 = $gep;
     $136 = HEAP32[$135>>2]|0;
     
     $149 = $136;
    } else {
     $9 = $112;
     $137 = $9;
     $gep_int75 = $137;
     $138 = $gep_int75;
     $8 = $138;
     $139 = $8;
     $140 = $139;
     $7 = $140;
     $141 = $7;
     $gep_int76 = $141;
     $142 = $gep_int76;
     $gep_int77 = $142;
     $143 = $gep_int77;
     $144 = $143;
     $gep_int78 = $143;
     $gep79 = (($gep_int78) + 1)|0;
     $145 = $gep79;
     $gep_int80 = $145;
     $146 = $gep_int80;
     $6 = $146;
     $147 = $6;
     $5 = $147;
     $148 = $5;
     
     $149 = $148;
    }
    
    $1 = $149;
    $150 = $1;
    $151 = $i1;
    __THREW__ = 0;
    $152 = invoke_iii(28,$devices|0,$151|0)|0;
    $153 = __THREW__; __THREW__ = 0;
    $154 = $153&1;
    
    if ($154) {
     break L1;
    }
    __THREW__ = 0;
    $155 = +invoke_di(1,$152|0);
    $156 = __THREW__; __THREW__ = 0;
    $157 = $156&1;
    
    if ($157) {
     break L1;
    }
    $158 = +HEAPF64[$minPerf>>3];
    $159 = $155 / $158;
    $expanded33 = 1232;
    $160 = HEAP32[1232>>2]|0;
    $161 = $i1;
    __THREW__ = 0;
    $162 = +invoke_dii(1,$160|0,$161|0);
    $163 = __THREW__; __THREW__ = 0;
    $164 = $163&1;
    
    if ($164) {
     break L1;
    }
    $165 = $totalPerf;
    $166 = $162 / $165;
    $167 = $i1;
    __THREW__ = 0;
    $168 = invoke_iii(28,$devices|0,$167|0)|0;
    $169 = __THREW__; __THREW__ = 0;
    $170 = $169&1;
    
    if ($170) {
     break L1;
    }
    __THREW__ = 0;
    $171 = invoke_ii(80,$168|0)|0;
    $172 = __THREW__; __THREW__ = 0;
    $173 = $172&1;
    
    if ($173) {
     break L1;
    }
    $174 = +($171>>>0);
    $175 = 1.000000e+02 * $174;
    $176 = $totalAmount;
    $177 = $175 / $176;
    __THREW__ = 0;
    
    $gep_int81 = $vararg_buffer;
    $vararg_ptr = $gep_int81;
    HEAP32[$vararg_ptr>>2] = $150;
    $gep_int82 = $vararg_buffer;
    $gep83 = (($gep_int82) + 4)|0;
    $vararg_ptr1 = $gep83;
    HEAPF64[tempDoublePtr>>3]=$159;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $gep_int84 = $vararg_buffer;
    $gep85 = (($gep_int84) + 12)|0;
    $vararg_ptr2 = $gep85;
    HEAPF64[tempDoublePtr>>3]=$166;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $gep_int86 = $vararg_buffer;
    $gep87 = (($gep_int86) + 20)|0;
    $vararg_ptr3 = $gep87;
    HEAPF64[tempDoublePtr>>3]=$177;HEAP32[$vararg_ptr3>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr3+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $expanded34 = 26;
    $vararg_func = $expanded34;
    $gep_int88 = 2312;
    $expanded35 = $gep_int88;
    u$118 = invoke_iiii(26,$102|0,$expanded35|0,$vararg_buffer|0)|0;
    
    $178 = __THREW__; __THREW__ = 0;
    $179 = $178&1;
    
    if ($179) {
     break L1;
    }
    $180 = $i1;
    $expanded36 = 1232;
    $181 = HEAP32[1232>>2]|0;
    $gep_int89 = $181;
    $182 = $gep_int89;
    $183 = HEAP32[$182>>2]|0;
    $184 = ($180|0)==($183|0);
    
    if ($184) {
     __THREW__ = 0;
     invoke_vddd(1,0.000000e+00,0.000000e+00,1.000000e+00);
     $185 = __THREW__; __THREW__ = 0;
     $186 = $185&1;
     
     if ($186) {
      break L1;
     }
     __THREW__ = 0;
     invoke_vddd(1,1.000000e+00,5.000000e-01,0.000000e+00);
     $187 = __THREW__; __THREW__ = 0;
     $188 = $187&1;
     
     if ($188) {
      break L1;
     }
     
    }
    $gep_int90 = $buff;
    $189 = $gep_int90;
    __THREW__ = 0;
    $gep_int91 = _glutBitmap9By15;
    $expanded37 = $gep_int91;
    invoke_vii(55,$expanded37|0,$189|0);
    $190 = __THREW__; __THREW__ = 0;
    $191 = $190&1;
    
    if ($191) {
     break L1;
    }
    $192 = $offset;
    $193 = (($192) + 16)|0;
    $offset = $193;
    
    $194 = $i1;
    $195 = (($194) + 1)|0;
    $i1 = $195;
    
   }
   __THREW__ = 0;
   $gep_int92 = _glutBitmap9By15;
   $expanded38 = $gep_int92;
   $gep_int93 = 2376;
   $expanded39 = $gep_int93;
   invoke_vii(55,$expanded38|0,$expanded39|0);
   $196 = __THREW__; __THREW__ = 0;
   $197 = $196&1;
   
   if ($197) {
    break;
   }
   __ZN2cl6vectorIP12RenderDeviceLj10EED1Ev($devices);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded32 = 69;
 $91 = ___cxa_find_matching_catch(-1,-1)|0;
 $92 = tempRet0;
 $25 = $91;
 $26 = $92;
 __THREW__ = 0;
 invoke_vi(136,$devices|0);
 $93 = __THREW__; __THREW__ = 0;
 $94 = $93&1;
 
 if ($94) {
  $expanded40 = 69;
  $200 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$144 = tempRet0;
  ___clang_call_terminate($200);
  // unreachable
 }
 
 $198 = $25;
 $199 = $26;
 ___resumeException($198|0);
 // unreachable
}
function __Z11reshapeFuncii($newWidth,$newHeight) {
 $newWidth = $newWidth|0;
 $newHeight = $newHeight|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0;
 var $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep4 = 0, $gep_int = 0, $gep_int3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $newWidth;
 $2 = $newHeight;
 $3 = $1;
 $expanded = 1232;
 $4 = HEAP32[1232>>2]|0;
 $gep_int = $4;
 $gep = (($gep_int) + 516)|0;
 $5 = $gep;
 HEAP32[$5>>2] = $3;
 $6 = $2;
 $expanded1 = 1232;
 $7 = HEAP32[1232>>2]|0;
 $gep_int3 = $7;
 $gep4 = (($gep_int3) + 520)|0;
 $8 = $gep4;
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = $2;
 _glViewport(0,0,$9|0,$10|0);
 _glLoadIdentity();
 $11 = $1;
 $12 = +($11|0);
 $13 = $12 - 1.000000e+00;
 $14 = $13;
 $15 = $2;
 $16 = +($15|0);
 $17 = $16 - 1.000000e+00;
 $18 = $17;
 _glOrtho(0.000000e+00,+$14,0.000000e+00,+$18,-1.000000e+00,1.000000e+00);
 $expanded2 = 1232;
 $19 = HEAP32[1232>>2]|0;
 __ZN12RenderConfig6ReInitEi($19,1);
 _glutPostRedisplay();
 STACKTOP = sp;return;
}
function __Z7keyFunchii($key,$x,$y) {
 $key = $key|0;
 $x = $x|0;
 $y = $y|0;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0;
 var $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0;
 var $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0, $244 = 0.0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0;
 var $261 = 0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0.0;
 var $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0.0, $332 = 0.0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0, $383 = 0.0, $384 = 0, $385 = 0.0, $386 = 0.0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0;
 var $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0.0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0.0, $528 = 0, $529 = 0.0, $53 = 0, $530 = 0.0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0.0, $542 = 0, $543 = 0.0, $544 = 0.0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0, $557 = 0.0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0.0, $57 = 0, $570 = 0, $571 = 0.0, $572 = 0.0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0.0, $585 = 0.0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0.0, $592 = 0.0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0.0, $607 = 0.0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0.0, $696 = 0.0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0.0, $731 = 0.0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0.0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0.0, $755 = 0.0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0.0, $767 = 0.0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $dir = 0, $dir10 = 0, $dir4 = 0, $dir8 = 0, $expanded = 0, $expanded100 = 0, $expanded101 = 0, $expanded102 = 0;
 var $expanded103 = 0, $expanded104 = 0, $expanded105 = 0, $expanded106 = 0, $expanded107 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded111 = 0, $expanded112 = 0, $expanded113 = 0, $expanded114 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded118 = 0, $expanded119 = 0, $expanded120 = 0, $expanded121 = 0, $expanded122 = 0;
 var $expanded123 = 0, $expanded124 = 0, $expanded125 = 0, $expanded126 = 0, $expanded127 = 0, $expanded128 = 0, $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded132 = 0, $expanded133 = 0, $expanded134 = 0, $expanded135 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded139 = 0, $expanded140 = 0, $expanded141 = 0, $expanded142 = 0;
 var $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded146 = 0, $expanded147 = 0, $expanded148 = 0, $expanded149 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded153 = 0, $expanded154 = 0, $expanded155 = 0, $expanded156 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded160 = 0, $expanded161 = 0, $expanded162 = 0;
 var $expanded163 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded167 = 0, $expanded168 = 0, $expanded169 = 0, $expanded170 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded174 = 0, $expanded175 = 0, $expanded176 = 0, $expanded177 = 0, $expanded178 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0;
 var $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0;
 var $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded58 = 0, $expanded59 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, $expanded86 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0;
 var $expanded90 = 0, $expanded91 = 0, $expanded92 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded98 = 0, $expanded99 = 0, $f = 0, $gep = 0, $gep183 = 0, $gep186 = 0, $gep188 = 0, $gep191 = 0, $gep193 = 0, $gep195 = 0, $gep197 = 0, $gep199 = 0;
 var $gep202 = 0, $gep204 = 0, $gep207 = 0, $gep209 = 0, $gep212 = 0, $gep216 = 0, $gep218 = 0, $gep222 = 0, $gep224 = 0, $gep226 = 0, $gep228 = 0, $gep232 = 0, $gep234 = 0, $gep236 = 0, $gep238 = 0, $gep242 = 0, $gep244 = 0, $gep246 = 0, $gep248 = 0, $gep250 = 0;
 var $gep255 = 0, $gep259 = 0, $gep262 = 0, $gep264 = 0, $gep266 = 0, $gep269 = 0, $gep271 = 0, $gep274 = 0, $gep276 = 0, $gep278 = 0, $gep281 = 0, $gep283 = 0, $gep285 = 0, $gep289 = 0, $gep291 = 0, $gep294 = 0, $gep296 = 0, $gep298 = 0, $gep300 = 0, $gep302 = 0;
 var $gep304 = 0, $gep306 = 0, $gep308 = 0, $gep310 = 0, $gep312 = 0, $gep314 = 0, $gep316 = 0, $gep318 = 0, $gep320 = 0, $gep322 = 0, $gep324 = 0, $gep328 = 0, $gep330 = 0, $gep332 = 0, $gep334 = 0, $gep338 = 0, $gep340 = 0, $gep342 = 0, $gep344 = 0, $gep348 = 0;
 var $gep350 = 0, $gep352 = 0, $gep354 = 0, $gep356 = 0, $gep361 = 0, $gep365 = 0, $gep368 = 0, $gep370 = 0, $gep372 = 0, $gep375 = 0, $gep377 = 0, $gep380 = 0, $gep382 = 0, $gep384 = 0, $gep387 = 0, $gep389 = 0, $gep391 = 0, $gep395 = 0, $gep397 = 0, $gep400 = 0;
 var $gep402 = 0, $gep404 = 0, $gep406 = 0, $gep408 = 0, $gep410 = 0, $gep412 = 0, $gep414 = 0, $gep416 = 0, $gep418 = 0, $gep420 = 0, $gep422 = 0, $gep424 = 0, $gep426 = 0, $gep428 = 0, $gep430 = 0, $gep434 = 0, $gep436 = 0, $gep438 = 0, $gep440 = 0, $gep442 = 0;
 var $gep447 = 0, $gep451 = 0, $gep454 = 0, $gep456 = 0, $gep458 = 0, $gep461 = 0, $gep463 = 0, $gep466 = 0, $gep468 = 0, $gep470 = 0, $gep473 = 0, $gep475 = 0, $gep477 = 0, $gep481 = 0, $gep483 = 0, $gep486 = 0, $gep488 = 0, $gep490 = 0, $gep492 = 0, $gep494 = 0;
 var $gep496 = 0, $gep498 = 0, $gep500 = 0, $gep502 = 0, $gep504 = 0, $gep506 = 0, $gep508 = 0, $gep510 = 0, $gep512 = 0, $gep514 = 0, $gep516 = 0, $gep520 = 0, $gep522 = 0, $gep524 = 0, $gep526 = 0, $gep528 = 0, $gep533 = 0, $gep537 = 0, $gep540 = 0, $gep542 = 0;
 var $gep544 = 0, $gep547 = 0, $gep549 = 0, $gep552 = 0, $gep554 = 0, $gep556 = 0, $gep559 = 0, $gep561 = 0, $gep563 = 0, $gep567 = 0, $gep569 = 0, $gep572 = 0, $gep574 = 0, $gep576 = 0, $gep578 = 0, $gep580 = 0, $gep582 = 0, $gep584 = 0, $gep586 = 0, $gep588 = 0;
 var $gep590 = 0, $gep592 = 0, $gep594 = 0, $gep596 = 0, $gep598 = 0, $gep600 = 0, $gep603 = 0, $gep605 = 0, $gep607 = 0, $gep609 = 0, $gep611 = 0, $gep614 = 0, $gep616 = 0, $gep618 = 0, $gep620 = 0, $gep622 = 0, $gep624 = 0, $gep626 = 0, $gep628 = 0, $gep630 = 0;
 var $gep632 = 0, $gep635 = 0, $gep637 = 0, $gep640 = 0, $gep642 = 0, $gep645 = 0, $gep647 = 0, $gep649 = 0, $gep651 = 0, $gep653 = 0, $gep656 = 0, $gep658 = 0, $gep660 = 0, $gep663 = 0, $gep665 = 0, $gep667 = 0, $gep670 = 0, $gep672 = 0, $gep674 = 0, $gep676 = 0;
 var $gep678 = 0, $gep680 = 0, $gep682 = 0, $gep685 = 0, $gep687 = 0, $gep690 = 0, $gep692 = 0, $gep695 = 0, $gep697 = 0, $gep699 = 0, $gep701 = 0, $gep703 = 0, $gep706 = 0, $gep708 = 0, $gep710 = 0, $gep713 = 0, $gep715 = 0, $gep717 = 0, $gep720 = 0, $gep722 = 0;
 var $gep725 = 0, $gep727 = 0, $gep730 = 0, $gep732 = 0, $gep735 = 0, $gep737 = 0, $gep740 = 0, $gep742 = 0, $gep745 = 0, $gep747 = 0, $gep749 = 0, $gep751 = 0, $gep753 = 0, $gep756 = 0, $gep758 = 0, $gep760 = 0, $gep762 = 0, $gep764 = 0, $gep767 = 0, $gep769 = 0;
 var $gep771 = 0, $gep773 = 0, $gep775 = 0, $gep778 = 0, $gep780 = 0, $gep782 = 0, $gep_array = 0, $gep_array634 = 0, $gep_array644 = 0, $gep_array655 = 0, $gep_array684 = 0, $gep_array694 = 0, $gep_array705 = 0, $gep_array724 = 0, $gep_array734 = 0, $gep_array744 = 0, $gep_array755 = 0, $gep_array766 = 0, $gep_array777 = 0, $gep_int = 0;
 var $gep_int179 = 0, $gep_int180 = 0, $gep_int181 = 0, $gep_int182 = 0, $gep_int184 = 0, $gep_int185 = 0, $gep_int187 = 0, $gep_int189 = 0, $gep_int190 = 0, $gep_int192 = 0, $gep_int194 = 0, $gep_int196 = 0, $gep_int198 = 0, $gep_int200 = 0, $gep_int201 = 0, $gep_int203 = 0, $gep_int205 = 0, $gep_int206 = 0, $gep_int208 = 0, $gep_int210 = 0;
 var $gep_int211 = 0, $gep_int213 = 0, $gep_int214 = 0, $gep_int215 = 0, $gep_int217 = 0, $gep_int219 = 0, $gep_int220 = 0, $gep_int221 = 0, $gep_int223 = 0, $gep_int225 = 0, $gep_int227 = 0, $gep_int229 = 0, $gep_int230 = 0, $gep_int231 = 0, $gep_int233 = 0, $gep_int235 = 0, $gep_int237 = 0, $gep_int239 = 0, $gep_int240 = 0, $gep_int241 = 0;
 var $gep_int243 = 0, $gep_int245 = 0, $gep_int247 = 0, $gep_int249 = 0, $gep_int251 = 0, $gep_int252 = 0, $gep_int253 = 0, $gep_int254 = 0, $gep_int256 = 0, $gep_int257 = 0, $gep_int258 = 0, $gep_int260 = 0, $gep_int261 = 0, $gep_int263 = 0, $gep_int265 = 0, $gep_int267 = 0, $gep_int268 = 0, $gep_int270 = 0, $gep_int272 = 0, $gep_int273 = 0;
 var $gep_int275 = 0, $gep_int277 = 0, $gep_int279 = 0, $gep_int280 = 0, $gep_int282 = 0, $gep_int284 = 0, $gep_int286 = 0, $gep_int287 = 0, $gep_int288 = 0, $gep_int290 = 0, $gep_int292 = 0, $gep_int293 = 0, $gep_int295 = 0, $gep_int297 = 0, $gep_int299 = 0, $gep_int301 = 0, $gep_int303 = 0, $gep_int305 = 0, $gep_int307 = 0, $gep_int309 = 0;
 var $gep_int311 = 0, $gep_int313 = 0, $gep_int315 = 0, $gep_int317 = 0, $gep_int319 = 0, $gep_int321 = 0, $gep_int323 = 0, $gep_int325 = 0, $gep_int326 = 0, $gep_int327 = 0, $gep_int329 = 0, $gep_int331 = 0, $gep_int333 = 0, $gep_int335 = 0, $gep_int336 = 0, $gep_int337 = 0, $gep_int339 = 0, $gep_int341 = 0, $gep_int343 = 0, $gep_int345 = 0;
 var $gep_int346 = 0, $gep_int347 = 0, $gep_int349 = 0, $gep_int351 = 0, $gep_int353 = 0, $gep_int355 = 0, $gep_int357 = 0, $gep_int358 = 0, $gep_int359 = 0, $gep_int360 = 0, $gep_int362 = 0, $gep_int363 = 0, $gep_int364 = 0, $gep_int366 = 0, $gep_int367 = 0, $gep_int369 = 0, $gep_int371 = 0, $gep_int373 = 0, $gep_int374 = 0, $gep_int376 = 0;
 var $gep_int378 = 0, $gep_int379 = 0, $gep_int381 = 0, $gep_int383 = 0, $gep_int385 = 0, $gep_int386 = 0, $gep_int388 = 0, $gep_int390 = 0, $gep_int392 = 0, $gep_int393 = 0, $gep_int394 = 0, $gep_int396 = 0, $gep_int398 = 0, $gep_int399 = 0, $gep_int401 = 0, $gep_int403 = 0, $gep_int405 = 0, $gep_int407 = 0, $gep_int409 = 0, $gep_int411 = 0;
 var $gep_int413 = 0, $gep_int415 = 0, $gep_int417 = 0, $gep_int419 = 0, $gep_int421 = 0, $gep_int423 = 0, $gep_int425 = 0, $gep_int427 = 0, $gep_int429 = 0, $gep_int431 = 0, $gep_int432 = 0, $gep_int433 = 0, $gep_int435 = 0, $gep_int437 = 0, $gep_int439 = 0, $gep_int441 = 0, $gep_int443 = 0, $gep_int444 = 0, $gep_int445 = 0, $gep_int446 = 0;
 var $gep_int448 = 0, $gep_int449 = 0, $gep_int450 = 0, $gep_int452 = 0, $gep_int453 = 0, $gep_int455 = 0, $gep_int457 = 0, $gep_int459 = 0, $gep_int460 = 0, $gep_int462 = 0, $gep_int464 = 0, $gep_int465 = 0, $gep_int467 = 0, $gep_int469 = 0, $gep_int471 = 0, $gep_int472 = 0, $gep_int474 = 0, $gep_int476 = 0, $gep_int478 = 0, $gep_int479 = 0;
 var $gep_int480 = 0, $gep_int482 = 0, $gep_int484 = 0, $gep_int485 = 0, $gep_int487 = 0, $gep_int489 = 0, $gep_int491 = 0, $gep_int493 = 0, $gep_int495 = 0, $gep_int497 = 0, $gep_int499 = 0, $gep_int501 = 0, $gep_int503 = 0, $gep_int505 = 0, $gep_int507 = 0, $gep_int509 = 0, $gep_int511 = 0, $gep_int513 = 0, $gep_int515 = 0, $gep_int517 = 0;
 var $gep_int518 = 0, $gep_int519 = 0, $gep_int521 = 0, $gep_int523 = 0, $gep_int525 = 0, $gep_int527 = 0, $gep_int529 = 0, $gep_int530 = 0, $gep_int531 = 0, $gep_int532 = 0, $gep_int534 = 0, $gep_int535 = 0, $gep_int536 = 0, $gep_int538 = 0, $gep_int539 = 0, $gep_int541 = 0, $gep_int543 = 0, $gep_int545 = 0, $gep_int546 = 0, $gep_int548 = 0;
 var $gep_int550 = 0, $gep_int551 = 0, $gep_int553 = 0, $gep_int555 = 0, $gep_int557 = 0, $gep_int558 = 0, $gep_int560 = 0, $gep_int562 = 0, $gep_int564 = 0, $gep_int565 = 0, $gep_int566 = 0, $gep_int568 = 0, $gep_int570 = 0, $gep_int571 = 0, $gep_int573 = 0, $gep_int575 = 0, $gep_int577 = 0, $gep_int579 = 0, $gep_int581 = 0, $gep_int583 = 0;
 var $gep_int585 = 0, $gep_int587 = 0, $gep_int589 = 0, $gep_int591 = 0, $gep_int593 = 0, $gep_int595 = 0, $gep_int597 = 0, $gep_int599 = 0, $gep_int601 = 0, $gep_int602 = 0, $gep_int604 = 0, $gep_int606 = 0, $gep_int608 = 0, $gep_int610 = 0, $gep_int612 = 0, $gep_int613 = 0, $gep_int615 = 0, $gep_int617 = 0, $gep_int619 = 0, $gep_int621 = 0;
 var $gep_int623 = 0, $gep_int625 = 0, $gep_int627 = 0, $gep_int629 = 0, $gep_int631 = 0, $gep_int633 = 0, $gep_int636 = 0, $gep_int638 = 0, $gep_int639 = 0, $gep_int641 = 0, $gep_int643 = 0, $gep_int646 = 0, $gep_int648 = 0, $gep_int650 = 0, $gep_int652 = 0, $gep_int654 = 0, $gep_int657 = 0, $gep_int659 = 0, $gep_int661 = 0, $gep_int662 = 0;
 var $gep_int664 = 0, $gep_int666 = 0, $gep_int668 = 0, $gep_int669 = 0, $gep_int671 = 0, $gep_int673 = 0, $gep_int675 = 0, $gep_int677 = 0, $gep_int679 = 0, $gep_int681 = 0, $gep_int683 = 0, $gep_int686 = 0, $gep_int688 = 0, $gep_int689 = 0, $gep_int691 = 0, $gep_int693 = 0, $gep_int696 = 0, $gep_int698 = 0, $gep_int700 = 0, $gep_int702 = 0;
 var $gep_int704 = 0, $gep_int707 = 0, $gep_int709 = 0, $gep_int711 = 0, $gep_int712 = 0, $gep_int714 = 0, $gep_int716 = 0, $gep_int718 = 0, $gep_int719 = 0, $gep_int721 = 0, $gep_int723 = 0, $gep_int726 = 0, $gep_int728 = 0, $gep_int729 = 0, $gep_int731 = 0, $gep_int733 = 0, $gep_int736 = 0, $gep_int738 = 0, $gep_int739 = 0, $gep_int741 = 0;
 var $gep_int743 = 0, $gep_int746 = 0, $gep_int748 = 0, $gep_int750 = 0, $gep_int752 = 0, $gep_int754 = 0, $gep_int757 = 0, $gep_int759 = 0, $gep_int761 = 0, $gep_int763 = 0, $gep_int765 = 0, $gep_int768 = 0, $gep_int770 = 0, $gep_int772 = 0, $gep_int774 = 0, $gep_int776 = 0, $gep_int779 = 0, $gep_int781 = 0, $gep_int783 = 0, $gep_int784 = 0;
 var $gep_int785 = 0, $gep_int786 = 0, $gep_int787 = 0, $gep_int788 = 0, $gep_int789 = 0, $gep_int790 = 0, $gep_int791 = 0, $gep_int792 = 0, $gep_int793 = 0, $gep_int794 = 0, $k = 0.0, $k11 = 0.0, $k3 = 0.0, $k6 = 0.0, $k7 = 0.0, $k9 = 0.0, $l = 0.0, $l5 = 0.0, $p = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer19 = 0, $vararg_buffer6 = 0, $vararg_func = 0, $vararg_func11 = 0, $vararg_func18 = 0, $vararg_func25 = 0, $vararg_func5 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast13 = 0, $vararg_lifetime_bitcast2 = 0, $vararg_lifetime_bitcast20 = 0, $vararg_lifetime_bitcast7 = 0, $vararg_ptr = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0;
 var $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $x2 = 0, $y1 = 0, label = 0, sp = 0, u$138 = 0, u$14 = 0, u$148 = 0, u$181 = 0, u$189 = 0, u$27 = 0, u$36 = 0, u$41 = 0;
 var u$50 = 0, u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer19 = sp;
 $vararg_lifetime_bitcast20 = $vararg_buffer19;
 $vararg_buffer12 = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $vararg_lifetime_bitcast13 = $vararg_buffer12;
 $vararg_buffer6 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast7 = $vararg_buffer6;
 $vararg_buffer1 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast2 = $vararg_buffer1;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $dir = STACKTOP; STACKTOP = STACKTOP + 16|0;
 
 
 
 $dir4 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 
 
 
 $dir8 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 
 $dir10 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 
 $9 = $key;
 $10 = $x;
 $11 = $y;
 $14 = $9;
 $15 = $14&255;
 
 switch ($15|0) {
 case 112:  {
  $gep_int = 1288;
  $expanded = $gep_int;
  $gep_int179 = 1304;
  $expanded26 = $gep_int179;
  $16 = _fopen($expanded|0,$expanded26|0)|0;
  $f = $16;
  $17 = $f;
  $18 = ($17|0)!=(0);
  
  if ($18) {
   $20 = $f;
   $expanded30 = 1232;
   $21 = HEAP32[1232>>2]|0;
   $gep_int181 = $21;
   $gep = (($gep_int181) + 516)|0;
   $22 = $gep;
   $23 = HEAP32[$22>>2]|0;
   $expanded31 = 1232;
   $24 = HEAP32[1232>>2]|0;
   $gep_int182 = $24;
   $gep183 = (($gep_int182) + 520)|0;
   $25 = $gep183;
   $26 = HEAP32[$25>>2]|0;
   
   $gep_int184 = $vararg_buffer1;
   $vararg_ptr = $gep_int184;
   HEAP32[$vararg_ptr>>2] = $23;
   $gep_int185 = $vararg_buffer1;
   $gep186 = (($gep_int185) + 4)|0;
   $vararg_ptr3 = $gep186;
   HEAP32[$vararg_ptr3>>2] = $26;
   $gep_int187 = $vararg_buffer1;
   $gep188 = (($gep_int187) + 8)|0;
   $vararg_ptr4 = $gep188;
   HEAP32[$vararg_ptr4>>2] = 255;
   $expanded32 = 24;
   $vararg_func5 = $expanded32;
   $gep_int189 = 1352;
   $expanded33 = $gep_int189;
   u$14 = _fprintf($20|0,$expanded33|0,$vararg_buffer1|0)|0;
   
   $expanded34 = 1232;
   $27 = HEAP32[1232>>2]|0;
   $gep_int190 = $27;
   $gep191 = (($gep_int190) + 520)|0;
   $28 = $gep191;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) - 1)|0;
   $y1 = $30;
   
   while(1) {
    $31 = $y1;
    $32 = ($31|0)>=(0);
    
    if (!($32)) {
     break;
    }
    $33 = $y1;
    $expanded35 = 1232;
    $34 = HEAP32[1232>>2]|0;
    $gep_int192 = $34;
    $gep193 = (($gep_int192) + 516)|0;
    $35 = $gep193;
    $36 = HEAP32[$35>>2]|0;
    $37 = Math_imul($33, $36)|0;
    $expanded36 = 1232;
    $38 = HEAP32[1232>>2]|0;
    $gep_int194 = $38;
    $gep195 = (($gep_int194) + 528)|0;
    $39 = $gep195;
    $40 = HEAP32[$39>>2]|0;
    $gep_int196 = $40;
    $gep_array = $37<<2;
    $gep197 = (($gep_int196) + ($gep_array))|0;
    $41 = $gep197;
    $42 = $41;
    $p = $42;
    $x2 = 0;
    
    while(1) {
     $43 = $x2;
     $expanded37 = 1232;
     $44 = HEAP32[1232>>2]|0;
     $gep_int198 = $44;
     $gep199 = (($gep_int198) + 516)|0;
     $45 = $gep199;
     $46 = HEAP32[$45>>2]|0;
     $47 = ($43>>>0)<($46>>>0);
     
     if (!($47)) {
      break;
     }
     $48 = $f;
     $49 = $p;
     $gep_int200 = $49;
     $50 = $gep_int200;
     $51 = HEAP8[$50]|0;
     $52 = $51&255;
     $53 = $p;
     $gep_int201 = $53;
     $gep202 = (($gep_int201) + 1)|0;
     $54 = $gep202;
     $55 = HEAP8[$54]|0;
     $56 = $55&255;
     $57 = $p;
     $gep_int203 = $57;
     $gep204 = (($gep_int203) + 2)|0;
     $58 = $gep204;
     $59 = HEAP8[$58]|0;
     $60 = $59&255;
     
     $gep_int205 = $vararg_buffer6;
     $vararg_ptr8 = $gep_int205;
     HEAP32[$vararg_ptr8>>2] = $52;
     $gep_int206 = $vararg_buffer6;
     $gep207 = (($gep_int206) + 4)|0;
     $vararg_ptr9 = $gep207;
     HEAP32[$vararg_ptr9>>2] = $56;
     $gep_int208 = $vararg_buffer6;
     $gep209 = (($gep_int208) + 8)|0;
     $vararg_ptr10 = $gep209;
     HEAP32[$vararg_ptr10>>2] = $60;
     $expanded38 = 24;
     $vararg_func11 = $expanded38;
     $gep_int210 = 1368;
     $expanded39 = $gep_int210;
     u$27 = _fprintf($48|0,$expanded39|0,$vararg_buffer6|0)|0;
     
     
     $61 = $x2;
     $62 = (($61) + 1)|0;
     $x2 = $62;
     $63 = $p;
     $gep_int211 = $63;
     $gep212 = (($gep_int211) + 4)|0;
     $64 = $gep212;
     $p = $64;
     
    }
    
    $65 = $y1;
    $66 = (($65) + -1)|0;
    $y1 = $66;
    
   }
   $67 = $f;
   u$36 = _fclose($67|0)|0;
   
  } else {
   $expanded27 = _stderr;
   $19 = HEAP32[_stderr>>2]|0;
   
   $expanded28 = 24;
   $vararg_func = $expanded28;
   $gep_int180 = 1312;
   $expanded29 = $gep_int180;
   u$7 = _fprintf($19|0,$expanded29|0,$vararg_buffer|0)|0;
   
   
  }
  
  STACKTOP = sp;return;
  break;
 }
 case 27:  {
  $expanded40 = 3824;
  $gep_int213 = 1384;
  $expanded41 = $gep_int213;
  $68 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($expanded40,$expanded41)|0;
  $7 = $68;
  $8 = 67;
  $69 = $7;
  $70 = $8;
  u$41 = FUNCTION_TABLE_ii[$70 & 127]($69)|0;
  $expanded42 = 1232;
  $71 = HEAP32[1232>>2]|0;
  $72 = ($71|0)==(0);
  
  if ($72) {
   $expanded43 = 3824;
   $gep_int214 = 1408;
   $expanded44 = $gep_int214;
   $76 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($expanded43,$expanded44)|0;
   $5 = $76;
   $6 = 67;
   $77 = $5;
   $78 = $6;
   u$50 = FUNCTION_TABLE_ii[$78 & 127]($77)|0;
   _exit(0);
   // unreachable
  }
  __THREW__ = 0;
  invoke_vi(151,$71|0);
  $73 = __THREW__; __THREW__ = 0;
  $74 = $73&1;
  
  if ($74) {
   $expanded45 = 69;
   $79 = ___cxa_find_matching_catch(-1,-1)|0;
   $80 = tempRet0;
   $12 = $79;
   $13 = $80;
   $81 = $71;
   __ZdlPv($81);
   
   $831 = $12;
   $832 = $13;
   ___resumeException($831|0);
   // unreachable
  } else {
   $75 = $71;
   __ZdlPv($75);
   
   $expanded43 = 3824;
   $gep_int214 = 1408;
   $expanded44 = $gep_int214;
   $76 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($expanded43,$expanded44)|0;
   $5 = $76;
   $6 = 67;
   $77 = $5;
   $78 = $6;
   u$50 = FUNCTION_TABLE_ii[$78 & 127]($77)|0;
   _exit(0);
   // unreachable
  }
  break;
 }
 case 32:  {
  $expanded46 = 1232;
  $82 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($82,1);
  
  STACKTOP = sp;return;
  break;
 }
 case 108:  {
  $expanded47 = 1232;
  $83 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($83,0);
  $expanded48 = 1232;
  $84 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig24RestartWorkloadProcedureEv($84);
  
  STACKTOP = sp;return;
  break;
 }
 case 97:  {
  $expanded49 = 1232;
  $85 = HEAP32[1232>>2]|0;
  $gep_int215 = $85;
  $gep216 = (($gep_int215) + 532)|0;
  $86 = $gep216;
  $87 = HEAP32[$86>>2]|0;
  $gep_int217 = $87;
  $gep218 = (($gep_int217) + 36)|0;
  $88 = $gep218;
  $89 = $dir;
  $90 = $88;
  ;HEAP32[$89+0>>2]=HEAP32[$90+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$90+4>>2]|0;HEAP32[$89+8>>2]=HEAP32[$90+8>>2]|0;
  $gep_int219 = $dir;
  $91 = $gep_int219;
  $92 = +HEAPF32[$91>>2];
  $gep_int220 = $dir;
  $93 = $gep_int220;
  $94 = +HEAPF32[$93>>2];
  $95 = $92 * $94;
  $gep_int221 = $dir;
  $gep222 = (($gep_int221) + 4)|0;
  $96 = $gep222;
  $97 = +HEAPF32[$96>>2];
  $gep_int223 = $dir;
  $gep224 = (($gep_int223) + 4)|0;
  $98 = $gep224;
  $99 = +HEAPF32[$98>>2];
  $100 = $97 * $99;
  $101 = $95 + $100;
  $gep_int225 = $dir;
  $gep226 = (($gep_int225) + 8)|0;
  $102 = $gep226;
  $103 = +HEAPF32[$102>>2];
  $gep_int227 = $dir;
  $gep228 = (($gep_int227) + 8)|0;
  $104 = $gep228;
  $105 = +HEAPF32[$104>>2];
  $106 = $103 * $105;
  $107 = $101 + $106;
  $108 = +Math_sqrt(+$107);
  $109 = 1.000000e+00 / $108;
  $l = $109;
  $110 = $l;
  $k = $110;
  $111 = $k;
  $gep_int229 = $dir;
  $112 = $gep_int229;
  $113 = +HEAPF32[$112>>2];
  $114 = $111 * $113;
  $gep_int230 = $dir;
  $115 = $gep_int230;
  HEAPF32[$115>>2] = $114;
  $116 = $k;
  $gep_int231 = $dir;
  $gep232 = (($gep_int231) + 4)|0;
  $117 = $gep232;
  $118 = +HEAPF32[$117>>2];
  $119 = $116 * $118;
  $gep_int233 = $dir;
  $gep234 = (($gep_int233) + 4)|0;
  $120 = $gep234;
  HEAPF32[$120>>2] = $119;
  $121 = $k;
  $gep_int235 = $dir;
  $gep236 = (($gep_int235) + 8)|0;
  $122 = $gep236;
  $123 = +HEAPF32[$122>>2];
  $124 = $121 * $123;
  $gep_int237 = $dir;
  $gep238 = (($gep_int237) + 8)|0;
  $125 = $gep238;
  HEAPF32[$125>>2] = $124;
  $k3 = -1.000000e+01;
  $126 = $k3;
  $gep_int239 = $dir;
  $127 = $gep_int239;
  $128 = +HEAPF32[$127>>2];
  $129 = $126 * $128;
  $gep_int240 = $dir;
  $130 = $gep_int240;
  HEAPF32[$130>>2] = $129;
  $131 = $k3;
  $gep_int241 = $dir;
  $gep242 = (($gep_int241) + 4)|0;
  $132 = $gep242;
  $133 = +HEAPF32[$132>>2];
  $134 = $131 * $133;
  $gep_int243 = $dir;
  $gep244 = (($gep_int243) + 4)|0;
  $135 = $gep244;
  HEAPF32[$135>>2] = $134;
  $136 = $k3;
  $gep_int245 = $dir;
  $gep246 = (($gep_int245) + 8)|0;
  $137 = $gep246;
  $138 = +HEAPF32[$137>>2];
  $139 = $136 * $138;
  $gep_int247 = $dir;
  $gep248 = (($gep_int247) + 8)|0;
  $140 = $gep248;
  HEAPF32[$140>>2] = $139;
  $expanded50 = 1232;
  $141 = HEAP32[1232>>2]|0;
  $gep_int249 = $141;
  $gep250 = (($gep_int249) + 532)|0;
  $142 = $gep250;
  $143 = HEAP32[$142>>2]|0;
  $gep_int251 = $143;
  $144 = $gep_int251;
  $gep_int252 = $144;
  $145 = $gep_int252;
  $146 = +HEAPF32[$145>>2];
  $gep_int253 = $dir;
  $147 = $gep_int253;
  $148 = +HEAPF32[$147>>2];
  $149 = $146 + $148;
  $expanded51 = 1232;
  $150 = HEAP32[1232>>2]|0;
  $gep_int254 = $150;
  $gep255 = (($gep_int254) + 532)|0;
  $151 = $gep255;
  $152 = HEAP32[$151>>2]|0;
  $gep_int256 = $152;
  $153 = $gep_int256;
  $gep_int257 = $153;
  $154 = $gep_int257;
  HEAPF32[$154>>2] = $149;
  $expanded52 = 1232;
  $155 = HEAP32[1232>>2]|0;
  $gep_int258 = $155;
  $gep259 = (($gep_int258) + 532)|0;
  $156 = $gep259;
  $157 = HEAP32[$156>>2]|0;
  $gep_int260 = $157;
  $158 = $gep_int260;
  $gep_int261 = $158;
  $gep262 = (($gep_int261) + 4)|0;
  $159 = $gep262;
  $160 = +HEAPF32[$159>>2];
  $gep_int263 = $dir;
  $gep264 = (($gep_int263) + 4)|0;
  $161 = $gep264;
  $162 = +HEAPF32[$161>>2];
  $163 = $160 + $162;
  $expanded53 = 1232;
  $164 = HEAP32[1232>>2]|0;
  $gep_int265 = $164;
  $gep266 = (($gep_int265) + 532)|0;
  $165 = $gep266;
  $166 = HEAP32[$165>>2]|0;
  $gep_int267 = $166;
  $167 = $gep_int267;
  $gep_int268 = $167;
  $gep269 = (($gep_int268) + 4)|0;
  $168 = $gep269;
  HEAPF32[$168>>2] = $163;
  $expanded54 = 1232;
  $169 = HEAP32[1232>>2]|0;
  $gep_int270 = $169;
  $gep271 = (($gep_int270) + 532)|0;
  $170 = $gep271;
  $171 = HEAP32[$170>>2]|0;
  $gep_int272 = $171;
  $172 = $gep_int272;
  $gep_int273 = $172;
  $gep274 = (($gep_int273) + 8)|0;
  $173 = $gep274;
  $174 = +HEAPF32[$173>>2];
  $gep_int275 = $dir;
  $gep276 = (($gep_int275) + 8)|0;
  $175 = $gep276;
  $176 = +HEAPF32[$175>>2];
  $177 = $174 + $176;
  $expanded55 = 1232;
  $178 = HEAP32[1232>>2]|0;
  $gep_int277 = $178;
  $gep278 = (($gep_int277) + 532)|0;
  $179 = $gep278;
  $180 = HEAP32[$179>>2]|0;
  $gep_int279 = $180;
  $181 = $gep_int279;
  $gep_int280 = $181;
  $gep281 = (($gep_int280) + 8)|0;
  $182 = $gep281;
  HEAPF32[$182>>2] = $177;
  $expanded56 = 1232;
  $183 = HEAP32[1232>>2]|0;
  $gep_int282 = $183;
  $gep283 = (($gep_int282) + 532)|0;
  $184 = $gep283;
  $185 = HEAP32[$184>>2]|0;
  $gep_int284 = $185;
  $gep285 = (($gep_int284) + 12)|0;
  $186 = $gep285;
  $gep_int286 = $186;
  $187 = $gep_int286;
  $188 = +HEAPF32[$187>>2];
  $gep_int287 = $dir;
  $189 = $gep_int287;
  $190 = +HEAPF32[$189>>2];
  $191 = $188 + $190;
  $expanded57 = 1232;
  $192 = HEAP32[1232>>2]|0;
  $gep_int288 = $192;
  $gep289 = (($gep_int288) + 532)|0;
  $193 = $gep289;
  $194 = HEAP32[$193>>2]|0;
  $gep_int290 = $194;
  $gep291 = (($gep_int290) + 12)|0;
  $195 = $gep291;
  $gep_int292 = $195;
  $196 = $gep_int292;
  HEAPF32[$196>>2] = $191;
  $expanded58 = 1232;
  $197 = HEAP32[1232>>2]|0;
  $gep_int293 = $197;
  $gep294 = (($gep_int293) + 532)|0;
  $198 = $gep294;
  $199 = HEAP32[$198>>2]|0;
  $gep_int295 = $199;
  $gep296 = (($gep_int295) + 12)|0;
  $200 = $gep296;
  $gep_int297 = $200;
  $gep298 = (($gep_int297) + 4)|0;
  $201 = $gep298;
  $202 = +HEAPF32[$201>>2];
  $gep_int299 = $dir;
  $gep300 = (($gep_int299) + 4)|0;
  $203 = $gep300;
  $204 = +HEAPF32[$203>>2];
  $205 = $202 + $204;
  $expanded59 = 1232;
  $206 = HEAP32[1232>>2]|0;
  $gep_int301 = $206;
  $gep302 = (($gep_int301) + 532)|0;
  $207 = $gep302;
  $208 = HEAP32[$207>>2]|0;
  $gep_int303 = $208;
  $gep304 = (($gep_int303) + 12)|0;
  $209 = $gep304;
  $gep_int305 = $209;
  $gep306 = (($gep_int305) + 4)|0;
  $210 = $gep306;
  HEAPF32[$210>>2] = $205;
  $expanded60 = 1232;
  $211 = HEAP32[1232>>2]|0;
  $gep_int307 = $211;
  $gep308 = (($gep_int307) + 532)|0;
  $212 = $gep308;
  $213 = HEAP32[$212>>2]|0;
  $gep_int309 = $213;
  $gep310 = (($gep_int309) + 12)|0;
  $214 = $gep310;
  $gep_int311 = $214;
  $gep312 = (($gep_int311) + 8)|0;
  $215 = $gep312;
  $216 = +HEAPF32[$215>>2];
  $gep_int313 = $dir;
  $gep314 = (($gep_int313) + 8)|0;
  $217 = $gep314;
  $218 = +HEAPF32[$217>>2];
  $219 = $216 + $218;
  $expanded61 = 1232;
  $220 = HEAP32[1232>>2]|0;
  $gep_int315 = $220;
  $gep316 = (($gep_int315) + 532)|0;
  $221 = $gep316;
  $222 = HEAP32[$221>>2]|0;
  $gep_int317 = $222;
  $gep318 = (($gep_int317) + 12)|0;
  $223 = $gep318;
  $gep_int319 = $223;
  $gep320 = (($gep_int319) + 8)|0;
  $224 = $gep320;
  HEAPF32[$224>>2] = $219;
  $expanded62 = 1232;
  $225 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($225,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 100:  {
  $expanded63 = 1232;
  $226 = HEAP32[1232>>2]|0;
  $gep_int321 = $226;
  $gep322 = (($gep_int321) + 532)|0;
  $227 = $gep322;
  $228 = HEAP32[$227>>2]|0;
  $gep_int323 = $228;
  $gep324 = (($gep_int323) + 36)|0;
  $229 = $gep324;
  $230 = $dir4;
  $231 = $229;
  ;HEAP32[$230+0>>2]=HEAP32[$231+0>>2]|0;HEAP32[$230+4>>2]=HEAP32[$231+4>>2]|0;HEAP32[$230+8>>2]=HEAP32[$231+8>>2]|0;
  $gep_int325 = $dir4;
  $232 = $gep_int325;
  $233 = +HEAPF32[$232>>2];
  $gep_int326 = $dir4;
  $234 = $gep_int326;
  $235 = +HEAPF32[$234>>2];
  $236 = $233 * $235;
  $gep_int327 = $dir4;
  $gep328 = (($gep_int327) + 4)|0;
  $237 = $gep328;
  $238 = +HEAPF32[$237>>2];
  $gep_int329 = $dir4;
  $gep330 = (($gep_int329) + 4)|0;
  $239 = $gep330;
  $240 = +HEAPF32[$239>>2];
  $241 = $238 * $240;
  $242 = $236 + $241;
  $gep_int331 = $dir4;
  $gep332 = (($gep_int331) + 8)|0;
  $243 = $gep332;
  $244 = +HEAPF32[$243>>2];
  $gep_int333 = $dir4;
  $gep334 = (($gep_int333) + 8)|0;
  $245 = $gep334;
  $246 = +HEAPF32[$245>>2];
  $247 = $244 * $246;
  $248 = $242 + $247;
  $249 = +Math_sqrt(+$248);
  $250 = 1.000000e+00 / $249;
  $l5 = $250;
  $251 = $l5;
  $k6 = $251;
  $252 = $k6;
  $gep_int335 = $dir4;
  $253 = $gep_int335;
  $254 = +HEAPF32[$253>>2];
  $255 = $252 * $254;
  $gep_int336 = $dir4;
  $256 = $gep_int336;
  HEAPF32[$256>>2] = $255;
  $257 = $k6;
  $gep_int337 = $dir4;
  $gep338 = (($gep_int337) + 4)|0;
  $258 = $gep338;
  $259 = +HEAPF32[$258>>2];
  $260 = $257 * $259;
  $gep_int339 = $dir4;
  $gep340 = (($gep_int339) + 4)|0;
  $261 = $gep340;
  HEAPF32[$261>>2] = $260;
  $262 = $k6;
  $gep_int341 = $dir4;
  $gep342 = (($gep_int341) + 8)|0;
  $263 = $gep342;
  $264 = +HEAPF32[$263>>2];
  $265 = $262 * $264;
  $gep_int343 = $dir4;
  $gep344 = (($gep_int343) + 8)|0;
  $266 = $gep344;
  HEAPF32[$266>>2] = $265;
  $k7 = 1.000000e+01;
  $267 = $k7;
  $gep_int345 = $dir4;
  $268 = $gep_int345;
  $269 = +HEAPF32[$268>>2];
  $270 = $267 * $269;
  $gep_int346 = $dir4;
  $271 = $gep_int346;
  HEAPF32[$271>>2] = $270;
  $272 = $k7;
  $gep_int347 = $dir4;
  $gep348 = (($gep_int347) + 4)|0;
  $273 = $gep348;
  $274 = +HEAPF32[$273>>2];
  $275 = $272 * $274;
  $gep_int349 = $dir4;
  $gep350 = (($gep_int349) + 4)|0;
  $276 = $gep350;
  HEAPF32[$276>>2] = $275;
  $277 = $k7;
  $gep_int351 = $dir4;
  $gep352 = (($gep_int351) + 8)|0;
  $278 = $gep352;
  $279 = +HEAPF32[$278>>2];
  $280 = $277 * $279;
  $gep_int353 = $dir4;
  $gep354 = (($gep_int353) + 8)|0;
  $281 = $gep354;
  HEAPF32[$281>>2] = $280;
  $expanded64 = 1232;
  $282 = HEAP32[1232>>2]|0;
  $gep_int355 = $282;
  $gep356 = (($gep_int355) + 532)|0;
  $283 = $gep356;
  $284 = HEAP32[$283>>2]|0;
  $gep_int357 = $284;
  $285 = $gep_int357;
  $gep_int358 = $285;
  $286 = $gep_int358;
  $287 = +HEAPF32[$286>>2];
  $gep_int359 = $dir4;
  $288 = $gep_int359;
  $289 = +HEAPF32[$288>>2];
  $290 = $287 + $289;
  $expanded65 = 1232;
  $291 = HEAP32[1232>>2]|0;
  $gep_int360 = $291;
  $gep361 = (($gep_int360) + 532)|0;
  $292 = $gep361;
  $293 = HEAP32[$292>>2]|0;
  $gep_int362 = $293;
  $294 = $gep_int362;
  $gep_int363 = $294;
  $295 = $gep_int363;
  HEAPF32[$295>>2] = $290;
  $expanded66 = 1232;
  $296 = HEAP32[1232>>2]|0;
  $gep_int364 = $296;
  $gep365 = (($gep_int364) + 532)|0;
  $297 = $gep365;
  $298 = HEAP32[$297>>2]|0;
  $gep_int366 = $298;
  $299 = $gep_int366;
  $gep_int367 = $299;
  $gep368 = (($gep_int367) + 4)|0;
  $300 = $gep368;
  $301 = +HEAPF32[$300>>2];
  $gep_int369 = $dir4;
  $gep370 = (($gep_int369) + 4)|0;
  $302 = $gep370;
  $303 = +HEAPF32[$302>>2];
  $304 = $301 + $303;
  $expanded67 = 1232;
  $305 = HEAP32[1232>>2]|0;
  $gep_int371 = $305;
  $gep372 = (($gep_int371) + 532)|0;
  $306 = $gep372;
  $307 = HEAP32[$306>>2]|0;
  $gep_int373 = $307;
  $308 = $gep_int373;
  $gep_int374 = $308;
  $gep375 = (($gep_int374) + 4)|0;
  $309 = $gep375;
  HEAPF32[$309>>2] = $304;
  $expanded68 = 1232;
  $310 = HEAP32[1232>>2]|0;
  $gep_int376 = $310;
  $gep377 = (($gep_int376) + 532)|0;
  $311 = $gep377;
  $312 = HEAP32[$311>>2]|0;
  $gep_int378 = $312;
  $313 = $gep_int378;
  $gep_int379 = $313;
  $gep380 = (($gep_int379) + 8)|0;
  $314 = $gep380;
  $315 = +HEAPF32[$314>>2];
  $gep_int381 = $dir4;
  $gep382 = (($gep_int381) + 8)|0;
  $316 = $gep382;
  $317 = +HEAPF32[$316>>2];
  $318 = $315 + $317;
  $expanded69 = 1232;
  $319 = HEAP32[1232>>2]|0;
  $gep_int383 = $319;
  $gep384 = (($gep_int383) + 532)|0;
  $320 = $gep384;
  $321 = HEAP32[$320>>2]|0;
  $gep_int385 = $321;
  $322 = $gep_int385;
  $gep_int386 = $322;
  $gep387 = (($gep_int386) + 8)|0;
  $323 = $gep387;
  HEAPF32[$323>>2] = $318;
  $expanded70 = 1232;
  $324 = HEAP32[1232>>2]|0;
  $gep_int388 = $324;
  $gep389 = (($gep_int388) + 532)|0;
  $325 = $gep389;
  $326 = HEAP32[$325>>2]|0;
  $gep_int390 = $326;
  $gep391 = (($gep_int390) + 12)|0;
  $327 = $gep391;
  $gep_int392 = $327;
  $328 = $gep_int392;
  $329 = +HEAPF32[$328>>2];
  $gep_int393 = $dir4;
  $330 = $gep_int393;
  $331 = +HEAPF32[$330>>2];
  $332 = $329 + $331;
  $expanded71 = 1232;
  $333 = HEAP32[1232>>2]|0;
  $gep_int394 = $333;
  $gep395 = (($gep_int394) + 532)|0;
  $334 = $gep395;
  $335 = HEAP32[$334>>2]|0;
  $gep_int396 = $335;
  $gep397 = (($gep_int396) + 12)|0;
  $336 = $gep397;
  $gep_int398 = $336;
  $337 = $gep_int398;
  HEAPF32[$337>>2] = $332;
  $expanded72 = 1232;
  $338 = HEAP32[1232>>2]|0;
  $gep_int399 = $338;
  $gep400 = (($gep_int399) + 532)|0;
  $339 = $gep400;
  $340 = HEAP32[$339>>2]|0;
  $gep_int401 = $340;
  $gep402 = (($gep_int401) + 12)|0;
  $341 = $gep402;
  $gep_int403 = $341;
  $gep404 = (($gep_int403) + 4)|0;
  $342 = $gep404;
  $343 = +HEAPF32[$342>>2];
  $gep_int405 = $dir4;
  $gep406 = (($gep_int405) + 4)|0;
  $344 = $gep406;
  $345 = +HEAPF32[$344>>2];
  $346 = $343 + $345;
  $expanded73 = 1232;
  $347 = HEAP32[1232>>2]|0;
  $gep_int407 = $347;
  $gep408 = (($gep_int407) + 532)|0;
  $348 = $gep408;
  $349 = HEAP32[$348>>2]|0;
  $gep_int409 = $349;
  $gep410 = (($gep_int409) + 12)|0;
  $350 = $gep410;
  $gep_int411 = $350;
  $gep412 = (($gep_int411) + 4)|0;
  $351 = $gep412;
  HEAPF32[$351>>2] = $346;
  $expanded74 = 1232;
  $352 = HEAP32[1232>>2]|0;
  $gep_int413 = $352;
  $gep414 = (($gep_int413) + 532)|0;
  $353 = $gep414;
  $354 = HEAP32[$353>>2]|0;
  $gep_int415 = $354;
  $gep416 = (($gep_int415) + 12)|0;
  $355 = $gep416;
  $gep_int417 = $355;
  $gep418 = (($gep_int417) + 8)|0;
  $356 = $gep418;
  $357 = +HEAPF32[$356>>2];
  $gep_int419 = $dir4;
  $gep420 = (($gep_int419) + 8)|0;
  $358 = $gep420;
  $359 = +HEAPF32[$358>>2];
  $360 = $357 + $359;
  $expanded75 = 1232;
  $361 = HEAP32[1232>>2]|0;
  $gep_int421 = $361;
  $gep422 = (($gep_int421) + 532)|0;
  $362 = $gep422;
  $363 = HEAP32[$362>>2]|0;
  $gep_int423 = $363;
  $gep424 = (($gep_int423) + 12)|0;
  $364 = $gep424;
  $gep_int425 = $364;
  $gep426 = (($gep_int425) + 8)|0;
  $365 = $gep426;
  HEAPF32[$365>>2] = $360;
  $expanded76 = 1232;
  $366 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($366,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 119:  {
  $expanded77 = 1232;
  $367 = HEAP32[1232>>2]|0;
  $gep_int427 = $367;
  $gep428 = (($gep_int427) + 532)|0;
  $368 = $gep428;
  $369 = HEAP32[$368>>2]|0;
  $gep_int429 = $369;
  $gep430 = (($gep_int429) + 24)|0;
  $370 = $gep430;
  $371 = $dir8;
  $372 = $370;
  ;HEAP32[$371+0>>2]=HEAP32[$372+0>>2]|0;HEAP32[$371+4>>2]=HEAP32[$372+4>>2]|0;HEAP32[$371+8>>2]=HEAP32[$372+8>>2]|0;
  $k9 = 1.000000e+01;
  $373 = $k9;
  $gep_int431 = $dir8;
  $374 = $gep_int431;
  $375 = +HEAPF32[$374>>2];
  $376 = $373 * $375;
  $gep_int432 = $dir8;
  $377 = $gep_int432;
  HEAPF32[$377>>2] = $376;
  $378 = $k9;
  $gep_int433 = $dir8;
  $gep434 = (($gep_int433) + 4)|0;
  $379 = $gep434;
  $380 = +HEAPF32[$379>>2];
  $381 = $378 * $380;
  $gep_int435 = $dir8;
  $gep436 = (($gep_int435) + 4)|0;
  $382 = $gep436;
  HEAPF32[$382>>2] = $381;
  $383 = $k9;
  $gep_int437 = $dir8;
  $gep438 = (($gep_int437) + 8)|0;
  $384 = $gep438;
  $385 = +HEAPF32[$384>>2];
  $386 = $383 * $385;
  $gep_int439 = $dir8;
  $gep440 = (($gep_int439) + 8)|0;
  $387 = $gep440;
  HEAPF32[$387>>2] = $386;
  $expanded78 = 1232;
  $388 = HEAP32[1232>>2]|0;
  $gep_int441 = $388;
  $gep442 = (($gep_int441) + 532)|0;
  $389 = $gep442;
  $390 = HEAP32[$389>>2]|0;
  $gep_int443 = $390;
  $391 = $gep_int443;
  $gep_int444 = $391;
  $392 = $gep_int444;
  $393 = +HEAPF32[$392>>2];
  $gep_int445 = $dir8;
  $394 = $gep_int445;
  $395 = +HEAPF32[$394>>2];
  $396 = $393 + $395;
  $expanded79 = 1232;
  $397 = HEAP32[1232>>2]|0;
  $gep_int446 = $397;
  $gep447 = (($gep_int446) + 532)|0;
  $398 = $gep447;
  $399 = HEAP32[$398>>2]|0;
  $gep_int448 = $399;
  $400 = $gep_int448;
  $gep_int449 = $400;
  $401 = $gep_int449;
  HEAPF32[$401>>2] = $396;
  $expanded80 = 1232;
  $402 = HEAP32[1232>>2]|0;
  $gep_int450 = $402;
  $gep451 = (($gep_int450) + 532)|0;
  $403 = $gep451;
  $404 = HEAP32[$403>>2]|0;
  $gep_int452 = $404;
  $405 = $gep_int452;
  $gep_int453 = $405;
  $gep454 = (($gep_int453) + 4)|0;
  $406 = $gep454;
  $407 = +HEAPF32[$406>>2];
  $gep_int455 = $dir8;
  $gep456 = (($gep_int455) + 4)|0;
  $408 = $gep456;
  $409 = +HEAPF32[$408>>2];
  $410 = $407 + $409;
  $expanded81 = 1232;
  $411 = HEAP32[1232>>2]|0;
  $gep_int457 = $411;
  $gep458 = (($gep_int457) + 532)|0;
  $412 = $gep458;
  $413 = HEAP32[$412>>2]|0;
  $gep_int459 = $413;
  $414 = $gep_int459;
  $gep_int460 = $414;
  $gep461 = (($gep_int460) + 4)|0;
  $415 = $gep461;
  HEAPF32[$415>>2] = $410;
  $expanded82 = 1232;
  $416 = HEAP32[1232>>2]|0;
  $gep_int462 = $416;
  $gep463 = (($gep_int462) + 532)|0;
  $417 = $gep463;
  $418 = HEAP32[$417>>2]|0;
  $gep_int464 = $418;
  $419 = $gep_int464;
  $gep_int465 = $419;
  $gep466 = (($gep_int465) + 8)|0;
  $420 = $gep466;
  $421 = +HEAPF32[$420>>2];
  $gep_int467 = $dir8;
  $gep468 = (($gep_int467) + 8)|0;
  $422 = $gep468;
  $423 = +HEAPF32[$422>>2];
  $424 = $421 + $423;
  $expanded83 = 1232;
  $425 = HEAP32[1232>>2]|0;
  $gep_int469 = $425;
  $gep470 = (($gep_int469) + 532)|0;
  $426 = $gep470;
  $427 = HEAP32[$426>>2]|0;
  $gep_int471 = $427;
  $428 = $gep_int471;
  $gep_int472 = $428;
  $gep473 = (($gep_int472) + 8)|0;
  $429 = $gep473;
  HEAPF32[$429>>2] = $424;
  $expanded84 = 1232;
  $430 = HEAP32[1232>>2]|0;
  $gep_int474 = $430;
  $gep475 = (($gep_int474) + 532)|0;
  $431 = $gep475;
  $432 = HEAP32[$431>>2]|0;
  $gep_int476 = $432;
  $gep477 = (($gep_int476) + 12)|0;
  $433 = $gep477;
  $gep_int478 = $433;
  $434 = $gep_int478;
  $435 = +HEAPF32[$434>>2];
  $gep_int479 = $dir8;
  $436 = $gep_int479;
  $437 = +HEAPF32[$436>>2];
  $438 = $435 + $437;
  $expanded85 = 1232;
  $439 = HEAP32[1232>>2]|0;
  $gep_int480 = $439;
  $gep481 = (($gep_int480) + 532)|0;
  $440 = $gep481;
  $441 = HEAP32[$440>>2]|0;
  $gep_int482 = $441;
  $gep483 = (($gep_int482) + 12)|0;
  $442 = $gep483;
  $gep_int484 = $442;
  $443 = $gep_int484;
  HEAPF32[$443>>2] = $438;
  $expanded86 = 1232;
  $444 = HEAP32[1232>>2]|0;
  $gep_int485 = $444;
  $gep486 = (($gep_int485) + 532)|0;
  $445 = $gep486;
  $446 = HEAP32[$445>>2]|0;
  $gep_int487 = $446;
  $gep488 = (($gep_int487) + 12)|0;
  $447 = $gep488;
  $gep_int489 = $447;
  $gep490 = (($gep_int489) + 4)|0;
  $448 = $gep490;
  $449 = +HEAPF32[$448>>2];
  $gep_int491 = $dir8;
  $gep492 = (($gep_int491) + 4)|0;
  $450 = $gep492;
  $451 = +HEAPF32[$450>>2];
  $452 = $449 + $451;
  $expanded87 = 1232;
  $453 = HEAP32[1232>>2]|0;
  $gep_int493 = $453;
  $gep494 = (($gep_int493) + 532)|0;
  $454 = $gep494;
  $455 = HEAP32[$454>>2]|0;
  $gep_int495 = $455;
  $gep496 = (($gep_int495) + 12)|0;
  $456 = $gep496;
  $gep_int497 = $456;
  $gep498 = (($gep_int497) + 4)|0;
  $457 = $gep498;
  HEAPF32[$457>>2] = $452;
  $expanded88 = 1232;
  $458 = HEAP32[1232>>2]|0;
  $gep_int499 = $458;
  $gep500 = (($gep_int499) + 532)|0;
  $459 = $gep500;
  $460 = HEAP32[$459>>2]|0;
  $gep_int501 = $460;
  $gep502 = (($gep_int501) + 12)|0;
  $461 = $gep502;
  $gep_int503 = $461;
  $gep504 = (($gep_int503) + 8)|0;
  $462 = $gep504;
  $463 = +HEAPF32[$462>>2];
  $gep_int505 = $dir8;
  $gep506 = (($gep_int505) + 8)|0;
  $464 = $gep506;
  $465 = +HEAPF32[$464>>2];
  $466 = $463 + $465;
  $expanded89 = 1232;
  $467 = HEAP32[1232>>2]|0;
  $gep_int507 = $467;
  $gep508 = (($gep_int507) + 532)|0;
  $468 = $gep508;
  $469 = HEAP32[$468>>2]|0;
  $gep_int509 = $469;
  $gep510 = (($gep_int509) + 12)|0;
  $470 = $gep510;
  $gep_int511 = $470;
  $gep512 = (($gep_int511) + 8)|0;
  $471 = $gep512;
  HEAPF32[$471>>2] = $466;
  $expanded90 = 1232;
  $472 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($472,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 115:  {
  $expanded91 = 1232;
  $473 = HEAP32[1232>>2]|0;
  $gep_int513 = $473;
  $gep514 = (($gep_int513) + 532)|0;
  $474 = $gep514;
  $475 = HEAP32[$474>>2]|0;
  $gep_int515 = $475;
  $gep516 = (($gep_int515) + 24)|0;
  $476 = $gep516;
  $477 = $dir10;
  $478 = $476;
  ;HEAP32[$477+0>>2]=HEAP32[$478+0>>2]|0;HEAP32[$477+4>>2]=HEAP32[$478+4>>2]|0;HEAP32[$477+8>>2]=HEAP32[$478+8>>2]|0;
  $k11 = -1.000000e+01;
  $479 = $k11;
  $gep_int517 = $dir10;
  $480 = $gep_int517;
  $481 = +HEAPF32[$480>>2];
  $482 = $479 * $481;
  $gep_int518 = $dir10;
  $483 = $gep_int518;
  HEAPF32[$483>>2] = $482;
  $484 = $k11;
  $gep_int519 = $dir10;
  $gep520 = (($gep_int519) + 4)|0;
  $485 = $gep520;
  $486 = +HEAPF32[$485>>2];
  $487 = $484 * $486;
  $gep_int521 = $dir10;
  $gep522 = (($gep_int521) + 4)|0;
  $488 = $gep522;
  HEAPF32[$488>>2] = $487;
  $489 = $k11;
  $gep_int523 = $dir10;
  $gep524 = (($gep_int523) + 8)|0;
  $490 = $gep524;
  $491 = +HEAPF32[$490>>2];
  $492 = $489 * $491;
  $gep_int525 = $dir10;
  $gep526 = (($gep_int525) + 8)|0;
  $493 = $gep526;
  HEAPF32[$493>>2] = $492;
  $expanded92 = 1232;
  $494 = HEAP32[1232>>2]|0;
  $gep_int527 = $494;
  $gep528 = (($gep_int527) + 532)|0;
  $495 = $gep528;
  $496 = HEAP32[$495>>2]|0;
  $gep_int529 = $496;
  $497 = $gep_int529;
  $gep_int530 = $497;
  $498 = $gep_int530;
  $499 = +HEAPF32[$498>>2];
  $gep_int531 = $dir10;
  $500 = $gep_int531;
  $501 = +HEAPF32[$500>>2];
  $502 = $499 + $501;
  $expanded93 = 1232;
  $503 = HEAP32[1232>>2]|0;
  $gep_int532 = $503;
  $gep533 = (($gep_int532) + 532)|0;
  $504 = $gep533;
  $505 = HEAP32[$504>>2]|0;
  $gep_int534 = $505;
  $506 = $gep_int534;
  $gep_int535 = $506;
  $507 = $gep_int535;
  HEAPF32[$507>>2] = $502;
  $expanded94 = 1232;
  $508 = HEAP32[1232>>2]|0;
  $gep_int536 = $508;
  $gep537 = (($gep_int536) + 532)|0;
  $509 = $gep537;
  $510 = HEAP32[$509>>2]|0;
  $gep_int538 = $510;
  $511 = $gep_int538;
  $gep_int539 = $511;
  $gep540 = (($gep_int539) + 4)|0;
  $512 = $gep540;
  $513 = +HEAPF32[$512>>2];
  $gep_int541 = $dir10;
  $gep542 = (($gep_int541) + 4)|0;
  $514 = $gep542;
  $515 = +HEAPF32[$514>>2];
  $516 = $513 + $515;
  $expanded95 = 1232;
  $517 = HEAP32[1232>>2]|0;
  $gep_int543 = $517;
  $gep544 = (($gep_int543) + 532)|0;
  $518 = $gep544;
  $519 = HEAP32[$518>>2]|0;
  $gep_int545 = $519;
  $520 = $gep_int545;
  $gep_int546 = $520;
  $gep547 = (($gep_int546) + 4)|0;
  $521 = $gep547;
  HEAPF32[$521>>2] = $516;
  $expanded96 = 1232;
  $522 = HEAP32[1232>>2]|0;
  $gep_int548 = $522;
  $gep549 = (($gep_int548) + 532)|0;
  $523 = $gep549;
  $524 = HEAP32[$523>>2]|0;
  $gep_int550 = $524;
  $525 = $gep_int550;
  $gep_int551 = $525;
  $gep552 = (($gep_int551) + 8)|0;
  $526 = $gep552;
  $527 = +HEAPF32[$526>>2];
  $gep_int553 = $dir10;
  $gep554 = (($gep_int553) + 8)|0;
  $528 = $gep554;
  $529 = +HEAPF32[$528>>2];
  $530 = $527 + $529;
  $expanded97 = 1232;
  $531 = HEAP32[1232>>2]|0;
  $gep_int555 = $531;
  $gep556 = (($gep_int555) + 532)|0;
  $532 = $gep556;
  $533 = HEAP32[$532>>2]|0;
  $gep_int557 = $533;
  $534 = $gep_int557;
  $gep_int558 = $534;
  $gep559 = (($gep_int558) + 8)|0;
  $535 = $gep559;
  HEAPF32[$535>>2] = $530;
  $expanded98 = 1232;
  $536 = HEAP32[1232>>2]|0;
  $gep_int560 = $536;
  $gep561 = (($gep_int560) + 532)|0;
  $537 = $gep561;
  $538 = HEAP32[$537>>2]|0;
  $gep_int562 = $538;
  $gep563 = (($gep_int562) + 12)|0;
  $539 = $gep563;
  $gep_int564 = $539;
  $540 = $gep_int564;
  $541 = +HEAPF32[$540>>2];
  $gep_int565 = $dir10;
  $542 = $gep_int565;
  $543 = +HEAPF32[$542>>2];
  $544 = $541 + $543;
  $expanded99 = 1232;
  $545 = HEAP32[1232>>2]|0;
  $gep_int566 = $545;
  $gep567 = (($gep_int566) + 532)|0;
  $546 = $gep567;
  $547 = HEAP32[$546>>2]|0;
  $gep_int568 = $547;
  $gep569 = (($gep_int568) + 12)|0;
  $548 = $gep569;
  $gep_int570 = $548;
  $549 = $gep_int570;
  HEAPF32[$549>>2] = $544;
  $expanded100 = 1232;
  $550 = HEAP32[1232>>2]|0;
  $gep_int571 = $550;
  $gep572 = (($gep_int571) + 532)|0;
  $551 = $gep572;
  $552 = HEAP32[$551>>2]|0;
  $gep_int573 = $552;
  $gep574 = (($gep_int573) + 12)|0;
  $553 = $gep574;
  $gep_int575 = $553;
  $gep576 = (($gep_int575) + 4)|0;
  $554 = $gep576;
  $555 = +HEAPF32[$554>>2];
  $gep_int577 = $dir10;
  $gep578 = (($gep_int577) + 4)|0;
  $556 = $gep578;
  $557 = +HEAPF32[$556>>2];
  $558 = $555 + $557;
  $expanded101 = 1232;
  $559 = HEAP32[1232>>2]|0;
  $gep_int579 = $559;
  $gep580 = (($gep_int579) + 532)|0;
  $560 = $gep580;
  $561 = HEAP32[$560>>2]|0;
  $gep_int581 = $561;
  $gep582 = (($gep_int581) + 12)|0;
  $562 = $gep582;
  $gep_int583 = $562;
  $gep584 = (($gep_int583) + 4)|0;
  $563 = $gep584;
  HEAPF32[$563>>2] = $558;
  $expanded102 = 1232;
  $564 = HEAP32[1232>>2]|0;
  $gep_int585 = $564;
  $gep586 = (($gep_int585) + 532)|0;
  $565 = $gep586;
  $566 = HEAP32[$565>>2]|0;
  $gep_int587 = $566;
  $gep588 = (($gep_int587) + 12)|0;
  $567 = $gep588;
  $gep_int589 = $567;
  $gep590 = (($gep_int589) + 8)|0;
  $568 = $gep590;
  $569 = +HEAPF32[$568>>2];
  $gep_int591 = $dir10;
  $gep592 = (($gep_int591) + 8)|0;
  $570 = $gep592;
  $571 = +HEAPF32[$570>>2];
  $572 = $569 + $571;
  $expanded103 = 1232;
  $573 = HEAP32[1232>>2]|0;
  $gep_int593 = $573;
  $gep594 = (($gep_int593) + 532)|0;
  $574 = $gep594;
  $575 = HEAP32[$574>>2]|0;
  $gep_int595 = $575;
  $gep596 = (($gep_int595) + 12)|0;
  $576 = $gep596;
  $gep_int597 = $576;
  $gep598 = (($gep_int597) + 8)|0;
  $577 = $gep598;
  HEAPF32[$577>>2] = $572;
  $expanded104 = 1232;
  $578 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($578,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 114:  {
  $expanded105 = 1232;
  $579 = HEAP32[1232>>2]|0;
  $gep_int599 = $579;
  $gep600 = (($gep_int599) + 532)|0;
  $580 = $gep600;
  $581 = HEAP32[$580>>2]|0;
  $gep_int601 = $581;
  $582 = $gep_int601;
  $gep_int602 = $582;
  $gep603 = (($gep_int602) + 4)|0;
  $583 = $gep603;
  $584 = +HEAPF32[$583>>2];
  $585 = $584 + 1.000000e+01;
  HEAPF32[$583>>2] = $585;
  $expanded106 = 1232;
  $586 = HEAP32[1232>>2]|0;
  $gep_int604 = $586;
  $gep605 = (($gep_int604) + 532)|0;
  $587 = $gep605;
  $588 = HEAP32[$587>>2]|0;
  $gep_int606 = $588;
  $gep607 = (($gep_int606) + 12)|0;
  $589 = $gep607;
  $gep_int608 = $589;
  $gep609 = (($gep_int608) + 4)|0;
  $590 = $gep609;
  $591 = +HEAPF32[$590>>2];
  $592 = $591 + 1.000000e+01;
  HEAPF32[$590>>2] = $592;
  $expanded107 = 1232;
  $593 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($593,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 102:  {
  $expanded108 = 1232;
  $594 = HEAP32[1232>>2]|0;
  $gep_int610 = $594;
  $gep611 = (($gep_int610) + 532)|0;
  $595 = $gep611;
  $596 = HEAP32[$595>>2]|0;
  $gep_int612 = $596;
  $597 = $gep_int612;
  $gep_int613 = $597;
  $gep614 = (($gep_int613) + 4)|0;
  $598 = $gep614;
  $599 = +HEAPF32[$598>>2];
  $600 = $599 - 1.000000e+01;
  HEAPF32[$598>>2] = $600;
  $expanded109 = 1232;
  $601 = HEAP32[1232>>2]|0;
  $gep_int615 = $601;
  $gep616 = (($gep_int615) + 532)|0;
  $602 = $gep616;
  $603 = HEAP32[$602>>2]|0;
  $gep_int617 = $603;
  $gep618 = (($gep_int617) + 12)|0;
  $604 = $gep618;
  $gep_int619 = $604;
  $gep620 = (($gep_int619) + 4)|0;
  $605 = $gep620;
  $606 = +HEAPF32[$605>>2];
  $607 = $606 - 1.000000e+01;
  HEAPF32[$605>>2] = $607;
  $expanded110 = 1232;
  $608 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($608,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 43:  {
  $expanded111 = 1232;
  $609 = HEAP32[1232>>2]|0;
  $gep_int621 = $609;
  $gep622 = (($gep_int621) + 544)|0;
  $610 = $gep622;
  $611 = HEAP32[$610>>2]|0;
  $612 = (($611) + 1)|0;
  $expanded112 = 1232;
  $613 = HEAP32[1232>>2]|0;
  $gep_int623 = $613;
  $gep624 = (($gep_int623) + 540)|0;
  $614 = $gep624;
  $615 = HEAP32[$614>>2]|0;
  $616 = (($612>>>0) % ($615>>>0))&-1;
  $expanded113 = 1232;
  $617 = HEAP32[1232>>2]|0;
  $gep_int625 = $617;
  $gep626 = (($gep_int625) + 544)|0;
  $618 = $gep626;
  HEAP32[$618>>2] = $616;
  $expanded114 = _stderr;
  $619 = HEAP32[_stderr>>2]|0;
  $expanded115 = 1232;
  $620 = HEAP32[1232>>2]|0;
  $gep_int627 = $620;
  $gep628 = (($gep_int627) + 544)|0;
  $621 = $gep628;
  $622 = HEAP32[$621>>2]|0;
  $expanded116 = 1232;
  $623 = HEAP32[1232>>2]|0;
  $gep_int629 = $623;
  $gep630 = (($gep_int629) + 544)|0;
  $624 = $gep630;
  $625 = HEAP32[$624>>2]|0;
  $expanded117 = 1232;
  $626 = HEAP32[1232>>2]|0;
  $gep_int631 = $626;
  $gep632 = (($gep_int631) + 536)|0;
  $627 = $gep632;
  $628 = HEAP32[$627>>2]|0;
  $gep_int633 = $628;
  $gep_array634 = ($625*44)|0;
  $gep635 = (($gep_int633) + ($gep_array634))|0;
  $629 = $gep635;
  $gep_int636 = $629;
  $gep637 = (($gep_int636) + 4)|0;
  $630 = $gep637;
  $gep_int638 = $630;
  $631 = $gep_int638;
  $632 = +HEAPF32[$631>>2];
  $633 = $632;
  $expanded118 = 1232;
  $634 = HEAP32[1232>>2]|0;
  $gep_int639 = $634;
  $gep640 = (($gep_int639) + 544)|0;
  $635 = $gep640;
  $636 = HEAP32[$635>>2]|0;
  $expanded119 = 1232;
  $637 = HEAP32[1232>>2]|0;
  $gep_int641 = $637;
  $gep642 = (($gep_int641) + 536)|0;
  $638 = $gep642;
  $639 = HEAP32[$638>>2]|0;
  $gep_int643 = $639;
  $gep_array644 = ($636*44)|0;
  $gep645 = (($gep_int643) + ($gep_array644))|0;
  $640 = $gep645;
  $gep_int646 = $640;
  $gep647 = (($gep_int646) + 4)|0;
  $641 = $gep647;
  $gep_int648 = $641;
  $gep649 = (($gep_int648) + 4)|0;
  $642 = $gep649;
  $643 = +HEAPF32[$642>>2];
  $644 = $643;
  $expanded120 = 1232;
  $645 = HEAP32[1232>>2]|0;
  $gep_int650 = $645;
  $gep651 = (($gep_int650) + 544)|0;
  $646 = $gep651;
  $647 = HEAP32[$646>>2]|0;
  $expanded121 = 1232;
  $648 = HEAP32[1232>>2]|0;
  $gep_int652 = $648;
  $gep653 = (($gep_int652) + 536)|0;
  $649 = $gep653;
  $650 = HEAP32[$649>>2]|0;
  $gep_int654 = $650;
  $gep_array655 = ($647*44)|0;
  $gep656 = (($gep_int654) + ($gep_array655))|0;
  $651 = $gep656;
  $gep_int657 = $651;
  $gep658 = (($gep_int657) + 4)|0;
  $652 = $gep658;
  $gep_int659 = $652;
  $gep660 = (($gep_int659) + 8)|0;
  $653 = $gep660;
  $654 = +HEAPF32[$653>>2];
  $655 = $654;
  
  $gep_int661 = $vararg_buffer12;
  $vararg_ptr14 = $gep_int661;
  HEAP32[$vararg_ptr14>>2] = $622;
  $gep_int662 = $vararg_buffer12;
  $gep663 = (($gep_int662) + 4)|0;
  $vararg_ptr15 = $gep663;
  HEAPF64[tempDoublePtr>>3]=$633;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $gep_int664 = $vararg_buffer12;
  $gep665 = (($gep_int664) + 12)|0;
  $vararg_ptr16 = $gep665;
  HEAPF64[tempDoublePtr>>3]=$644;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $gep_int666 = $vararg_buffer12;
  $gep667 = (($gep_int666) + 20)|0;
  $vararg_ptr17 = $gep667;
  HEAPF64[tempDoublePtr>>3]=$655;HEAP32[$vararg_ptr17>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr17+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $expanded122 = 24;
  $vararg_func18 = $expanded122;
  $gep_int668 = 1416;
  $expanded123 = $gep_int668;
  u$138 = _fprintf($619|0,$expanded123|0,$vararg_buffer12|0)|0;
  
  $expanded124 = 1232;
  $656 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig11ReInitSceneEv($656);
  
  STACKTOP = sp;return;
  break;
 }
 case 45:  {
  $expanded125 = 1232;
  $657 = HEAP32[1232>>2]|0;
  $gep_int669 = $657;
  $gep670 = (($gep_int669) + 544)|0;
  $658 = $gep670;
  $659 = HEAP32[$658>>2]|0;
  $expanded126 = 1232;
  $660 = HEAP32[1232>>2]|0;
  $gep_int671 = $660;
  $gep672 = (($gep_int671) + 540)|0;
  $661 = $gep672;
  $662 = HEAP32[$661>>2]|0;
  $663 = (($662) - 1)|0;
  $664 = (($659) + ($663))|0;
  $expanded127 = 1232;
  $665 = HEAP32[1232>>2]|0;
  $gep_int673 = $665;
  $gep674 = (($gep_int673) + 540)|0;
  $666 = $gep674;
  $667 = HEAP32[$666>>2]|0;
  $668 = (($664>>>0) % ($667>>>0))&-1;
  $expanded128 = 1232;
  $669 = HEAP32[1232>>2]|0;
  $gep_int675 = $669;
  $gep676 = (($gep_int675) + 544)|0;
  $670 = $gep676;
  HEAP32[$670>>2] = $668;
  $expanded129 = _stderr;
  $671 = HEAP32[_stderr>>2]|0;
  $expanded130 = 1232;
  $672 = HEAP32[1232>>2]|0;
  $gep_int677 = $672;
  $gep678 = (($gep_int677) + 544)|0;
  $673 = $gep678;
  $674 = HEAP32[$673>>2]|0;
  $expanded131 = 1232;
  $675 = HEAP32[1232>>2]|0;
  $gep_int679 = $675;
  $gep680 = (($gep_int679) + 544)|0;
  $676 = $gep680;
  $677 = HEAP32[$676>>2]|0;
  $expanded132 = 1232;
  $678 = HEAP32[1232>>2]|0;
  $gep_int681 = $678;
  $gep682 = (($gep_int681) + 536)|0;
  $679 = $gep682;
  $680 = HEAP32[$679>>2]|0;
  $gep_int683 = $680;
  $gep_array684 = ($677*44)|0;
  $gep685 = (($gep_int683) + ($gep_array684))|0;
  $681 = $gep685;
  $gep_int686 = $681;
  $gep687 = (($gep_int686) + 4)|0;
  $682 = $gep687;
  $gep_int688 = $682;
  $683 = $gep_int688;
  $684 = +HEAPF32[$683>>2];
  $685 = $684;
  $expanded133 = 1232;
  $686 = HEAP32[1232>>2]|0;
  $gep_int689 = $686;
  $gep690 = (($gep_int689) + 544)|0;
  $687 = $gep690;
  $688 = HEAP32[$687>>2]|0;
  $expanded134 = 1232;
  $689 = HEAP32[1232>>2]|0;
  $gep_int691 = $689;
  $gep692 = (($gep_int691) + 536)|0;
  $690 = $gep692;
  $691 = HEAP32[$690>>2]|0;
  $gep_int693 = $691;
  $gep_array694 = ($688*44)|0;
  $gep695 = (($gep_int693) + ($gep_array694))|0;
  $692 = $gep695;
  $gep_int696 = $692;
  $gep697 = (($gep_int696) + 4)|0;
  $693 = $gep697;
  $gep_int698 = $693;
  $gep699 = (($gep_int698) + 4)|0;
  $694 = $gep699;
  $695 = +HEAPF32[$694>>2];
  $696 = $695;
  $expanded135 = 1232;
  $697 = HEAP32[1232>>2]|0;
  $gep_int700 = $697;
  $gep701 = (($gep_int700) + 544)|0;
  $698 = $gep701;
  $699 = HEAP32[$698>>2]|0;
  $expanded136 = 1232;
  $700 = HEAP32[1232>>2]|0;
  $gep_int702 = $700;
  $gep703 = (($gep_int702) + 536)|0;
  $701 = $gep703;
  $702 = HEAP32[$701>>2]|0;
  $gep_int704 = $702;
  $gep_array705 = ($699*44)|0;
  $gep706 = (($gep_int704) + ($gep_array705))|0;
  $703 = $gep706;
  $gep_int707 = $703;
  $gep708 = (($gep_int707) + 4)|0;
  $704 = $gep708;
  $gep_int709 = $704;
  $gep710 = (($gep_int709) + 8)|0;
  $705 = $gep710;
  $706 = +HEAPF32[$705>>2];
  $707 = $706;
  
  $gep_int711 = $vararg_buffer19;
  $vararg_ptr21 = $gep_int711;
  HEAP32[$vararg_ptr21>>2] = $674;
  $gep_int712 = $vararg_buffer19;
  $gep713 = (($gep_int712) + 4)|0;
  $vararg_ptr22 = $gep713;
  HEAPF64[tempDoublePtr>>3]=$685;HEAP32[$vararg_ptr22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr22+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $gep_int714 = $vararg_buffer19;
  $gep715 = (($gep_int714) + 12)|0;
  $vararg_ptr23 = $gep715;
  HEAPF64[tempDoublePtr>>3]=$696;HEAP32[$vararg_ptr23>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr23+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $gep_int716 = $vararg_buffer19;
  $gep717 = (($gep_int716) + 20)|0;
  $vararg_ptr24 = $gep717;
  HEAPF64[tempDoublePtr>>3]=$707;HEAP32[$vararg_ptr24>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr24+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $expanded137 = 24;
  $vararg_func25 = $expanded137;
  $gep_int718 = 1416;
  $expanded138 = $gep_int718;
  u$148 = _fprintf($671|0,$expanded138|0,$vararg_buffer19|0)|0;
  
  $expanded139 = 1232;
  $708 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig11ReInitSceneEv($708);
  
  STACKTOP = sp;return;
  break;
 }
 case 52:  {
  $expanded140 = 1232;
  $709 = HEAP32[1232>>2]|0;
  $gep_int719 = $709;
  $gep720 = (($gep_int719) + 544)|0;
  $710 = $gep720;
  $711 = HEAP32[$710>>2]|0;
  $expanded141 = 1232;
  $712 = HEAP32[1232>>2]|0;
  $gep_int721 = $712;
  $gep722 = (($gep_int721) + 536)|0;
  $713 = $gep722;
  $714 = HEAP32[$713>>2]|0;
  $gep_int723 = $714;
  $gep_array724 = ($711*44)|0;
  $gep725 = (($gep_int723) + ($gep_array724))|0;
  $715 = $gep725;
  $gep_int726 = $715;
  $gep727 = (($gep_int726) + 4)|0;
  $716 = $gep727;
  $gep_int728 = $716;
  $717 = $gep_int728;
  $718 = +HEAPF32[$717>>2];
  $719 = $718 - 5.000000e+00;
  HEAPF32[$717>>2] = $719;
  $expanded142 = 1232;
  $720 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig11ReInitSceneEv($720);
  
  STACKTOP = sp;return;
  break;
 }
 case 54:  {
  $expanded143 = 1232;
  $721 = HEAP32[1232>>2]|0;
  $gep_int729 = $721;
  $gep730 = (($gep_int729) + 544)|0;
  $722 = $gep730;
  $723 = HEAP32[$722>>2]|0;
  $expanded144 = 1232;
  $724 = HEAP32[1232>>2]|0;
  $gep_int731 = $724;
  $gep732 = (($gep_int731) + 536)|0;
  $725 = $gep732;
  $726 = HEAP32[$725>>2]|0;
  $gep_int733 = $726;
  $gep_array734 = ($723*44)|0;
  $gep735 = (($gep_int733) + ($gep_array734))|0;
  $727 = $gep735;
  $gep_int736 = $727;
  $gep737 = (($gep_int736) + 4)|0;
  $728 = $gep737;
  $gep_int738 = $728;
  $729 = $gep_int738;
  $730 = +HEAPF32[$729>>2];
  $731 = $730 + 5.000000e+00;
  HEAPF32[$729>>2] = $731;
  $expanded145 = 1232;
  $732 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig11ReInitSceneEv($732);
  
  STACKTOP = sp;return;
  break;
 }
 case 56:  {
  $expanded146 = 1232;
  $733 = HEAP32[1232>>2]|0;
  $gep_int739 = $733;
  $gep740 = (($gep_int739) + 544)|0;
  $734 = $gep740;
  $735 = HEAP32[$734>>2]|0;
  $expanded147 = 1232;
  $736 = HEAP32[1232>>2]|0;
  $gep_int741 = $736;
  $gep742 = (($gep_int741) + 536)|0;
  $737 = $gep742;
  $738 = HEAP32[$737>>2]|0;
  $gep_int743 = $738;
  $gep_array744 = ($735*44)|0;
  $gep745 = (($gep_int743) + ($gep_array744))|0;
  $739 = $gep745;
  $gep_int746 = $739;
  $gep747 = (($gep_int746) + 4)|0;
  $740 = $gep747;
  $gep_int748 = $740;
  $gep749 = (($gep_int748) + 8)|0;
  $741 = $gep749;
  $742 = +HEAPF32[$741>>2];
  $743 = $742 - 5.000000e+00;
  HEAPF32[$741>>2] = $743;
  $expanded148 = 1232;
  $744 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig11ReInitSceneEv($744);
  
  STACKTOP = sp;return;
  break;
 }
 case 50:  {
  $expanded149 = 1232;
  $745 = HEAP32[1232>>2]|0;
  $gep_int750 = $745;
  $gep751 = (($gep_int750) + 544)|0;
  $746 = $gep751;
  $747 = HEAP32[$746>>2]|0;
  $expanded150 = 1232;
  $748 = HEAP32[1232>>2]|0;
  $gep_int752 = $748;
  $gep753 = (($gep_int752) + 536)|0;
  $749 = $gep753;
  $750 = HEAP32[$749>>2]|0;
  $gep_int754 = $750;
  $gep_array755 = ($747*44)|0;
  $gep756 = (($gep_int754) + ($gep_array755))|0;
  $751 = $gep756;
  $gep_int757 = $751;
  $gep758 = (($gep_int757) + 4)|0;
  $752 = $gep758;
  $gep_int759 = $752;
  $gep760 = (($gep_int759) + 8)|0;
  $753 = $gep760;
  $754 = +HEAPF32[$753>>2];
  $755 = $754 + 5.000000e+00;
  HEAPF32[$753>>2] = $755;
  $expanded151 = 1232;
  $756 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig11ReInitSceneEv($756);
  
  STACKTOP = sp;return;
  break;
 }
 case 57:  {
  $expanded152 = 1232;
  $757 = HEAP32[1232>>2]|0;
  $gep_int761 = $757;
  $gep762 = (($gep_int761) + 544)|0;
  $758 = $gep762;
  $759 = HEAP32[$758>>2]|0;
  $expanded153 = 1232;
  $760 = HEAP32[1232>>2]|0;
  $gep_int763 = $760;
  $gep764 = (($gep_int763) + 536)|0;
  $761 = $gep764;
  $762 = HEAP32[$761>>2]|0;
  $gep_int765 = $762;
  $gep_array766 = ($759*44)|0;
  $gep767 = (($gep_int765) + ($gep_array766))|0;
  $763 = $gep767;
  $gep_int768 = $763;
  $gep769 = (($gep_int768) + 4)|0;
  $764 = $gep769;
  $gep_int770 = $764;
  $gep771 = (($gep_int770) + 4)|0;
  $765 = $gep771;
  $766 = +HEAPF32[$765>>2];
  $767 = $766 + 5.000000e+00;
  HEAPF32[$765>>2] = $767;
  $expanded154 = 1232;
  $768 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig11ReInitSceneEv($768);
  
  STACKTOP = sp;return;
  break;
 }
 case 51:  {
  $expanded155 = 1232;
  $769 = HEAP32[1232>>2]|0;
  $gep_int772 = $769;
  $gep773 = (($gep_int772) + 544)|0;
  $770 = $gep773;
  $771 = HEAP32[$770>>2]|0;
  $expanded156 = 1232;
  $772 = HEAP32[1232>>2]|0;
  $gep_int774 = $772;
  $gep775 = (($gep_int774) + 536)|0;
  $773 = $gep775;
  $774 = HEAP32[$773>>2]|0;
  $gep_int776 = $774;
  $gep_array777 = ($771*44)|0;
  $gep778 = (($gep_int776) + ($gep_array777))|0;
  $775 = $gep778;
  $gep_int779 = $775;
  $gep780 = (($gep_int779) + 4)|0;
  $776 = $gep780;
  $gep_int781 = $776;
  $gep782 = (($gep_int781) + 4)|0;
  $777 = $gep782;
  $778 = +HEAPF32[$777>>2];
  $779 = $778 - 5.000000e+00;
  HEAPF32[$777>>2] = $779;
  $expanded157 = 1232;
  $780 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig11ReInitSceneEv($780);
  
  STACKTOP = sp;return;
  break;
 }
 case 104:  {
  $gep_int783 = 1280;
  $expanded158 = $gep_int783;
  $781 = HEAP8[$expanded158]|0;
  $782 = $781&1;
  $783 = $782 ^ 1;
  $784 = $783&1;
  $gep_int784 = 1280;
  $expanded159 = $gep_int784;
  HEAP8[$expanded159] = $784;
  
  STACKTOP = sp;return;
  break;
 }
 case 107:  {
  $gep_int785 = 1272;
  $expanded160 = $gep_int785;
  $785 = HEAP8[$expanded160]|0;
  $786 = $785&1;
  $787 = $786 ^ 1;
  $788 = $787&1;
  $gep_int786 = 1272;
  $expanded161 = $gep_int786;
  HEAP8[$expanded161] = $788;
  
  STACKTOP = sp;return;
  break;
 }
 case 110:  {
  $expanded162 = 1232;
  $789 = HEAP32[1232>>2]|0;
  $gep_int787 = $789;
  $790 = $gep_int787;
  $791 = HEAP32[$790>>2]|0;
  $expanded163 = 1232;
  $792 = HEAP32[1232>>2]|0;
  $793 = __ZNK12RenderConfig15GetRenderDeviceEv($792)|0;
  $794 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($793)|0;
  $795 = (($791) + ($794))|0;
  $796 = (($795) - 1)|0;
  $expanded164 = 1232;
  $797 = HEAP32[1232>>2]|0;
  $798 = __ZNK12RenderConfig15GetRenderDeviceEv($797)|0;
  $799 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($798)|0;
  $800 = (($796>>>0) % ($799>>>0))&-1;
  $expanded165 = 1232;
  $801 = HEAP32[1232>>2]|0;
  $gep_int788 = $801;
  $802 = $gep_int788;
  HEAP32[$802>>2] = $800;
  
  STACKTOP = sp;return;
  break;
 }
 case 109:  {
  $expanded166 = 1232;
  $803 = HEAP32[1232>>2]|0;
  $gep_int789 = $803;
  $804 = $gep_int789;
  $805 = HEAP32[$804>>2]|0;
  $806 = (($805) + 1)|0;
  $expanded167 = 1232;
  $807 = HEAP32[1232>>2]|0;
  $808 = __ZNK12RenderConfig15GetRenderDeviceEv($807)|0;
  $809 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($808)|0;
  $810 = (($806>>>0) % ($809>>>0))&-1;
  $expanded168 = 1232;
  $811 = HEAP32[1232>>2]|0;
  $gep_int790 = $811;
  $812 = $gep_int790;
  HEAP32[$812>>2] = $810;
  
  STACKTOP = sp;return;
  break;
 }
 case 118:  {
  $expanded169 = 1232;
  $813 = HEAP32[1232>>2]|0;
  $814 = __ZNK12RenderConfig11IsProfilingEv($813)|0;
  
  if ($814) {
   $expanded170 = 3824;
   $gep_int791 = 1448;
   $expanded171 = $gep_int791;
   $815 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($expanded170,$expanded171)|0;
   $3 = $815;
   $4 = 67;
   $816 = $3;
   $817 = $4;
   u$181 = FUNCTION_TABLE_ii[$817 & 127]($816)|0;
   
  } else {
   $expanded172 = 1232;
   $818 = HEAP32[1232>>2]|0;
   $expanded173 = 1232;
   $819 = HEAP32[1232>>2]|0;
   $gep_int792 = $819;
   $820 = $gep_int792;
   $821 = HEAP32[$820>>2]|0;
   __ZN12RenderConfig12DecPerfIndexEj($818,$821);
   
  }
  
  STACKTOP = sp;return;
  break;
 }
 case 98:  {
  $expanded174 = 1232;
  $822 = HEAP32[1232>>2]|0;
  $823 = __ZNK12RenderConfig11IsProfilingEv($822)|0;
  
  if ($823) {
   $expanded175 = 3824;
   $gep_int793 = 1448;
   $expanded176 = $gep_int793;
   $824 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($expanded175,$expanded176)|0;
   $1 = $824;
   $2 = 67;
   $825 = $1;
   $826 = $2;
   u$189 = FUNCTION_TABLE_ii[$826 & 127]($825)|0;
   
  } else {
   $expanded177 = 1232;
   $827 = HEAP32[1232>>2]|0;
   $expanded178 = 1232;
   $828 = HEAP32[1232>>2]|0;
   $gep_int794 = $828;
   $829 = $gep_int794;
   $830 = HEAP32[$829>>2]|0;
   __ZN12RenderConfig12IncPerfIndexEj($827,$830);
   
  }
  
  STACKTOP = sp;return;
  break;
 }
 default: {
  
  STACKTOP = sp;return;
 }
 }
}
function __ZN12RenderConfig24RestartWorkloadProcedureEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0;
 var $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 548)|0;
 $3 = $gep;
 $4 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($3)|0;
 $5 = ($4>>>0)>(1);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 
 while(1) {
  $6 = $i;
  $gep_int1 = $2;
  $gep2 = (($gep_int1) + 548)|0;
  $7 = $gep2;
  $8 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($7)|0;
  $9 = ($6>>>0)<($8>>>0);
  
  if (!($9)) {
   break;
  }
  $gep_int3 = $2;
  $gep4 = (($gep_int3) + 548)|0;
  $10 = $gep4;
  $11 = $i;
  $12 = __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($10,$11)|0;
  $13 = HEAP32[$12>>2]|0;
  __ZN12RenderDevice16ResetPerformanceEv($13);
  
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
  
 }
 __ZN12RenderConfig20UpdateDeviceWorkloadEb($2,1);
 $16 = +__Z13WallClockTimev();
 $gep_int5 = $2;
 $gep6 = (($gep_int5) + 608)|0;
 $17 = $gep6;
 HEAPF64[$17>>3] = $16;
 $gep_int7 = $2;
 $gep8 = (($gep_int7) + 616)|0;
 $18 = $gep8;
 HEAP8[$18] = 1;
 
 STACKTOP = sp;return;
}
function __ZNK12RenderConfig11IsProfilingEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 616)|0;
 $3 = $gep;
 $4 = HEAP8[$3]|0;
 $5 = $4&1;
 STACKTOP = sp;return $5|0;
}
function __ZN12RenderConfig12DecPerfIndexEj($this,$deviceIndex) {
 $this = $this|0;
 $deviceIndex = $deviceIndex|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep3 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0;
 var $gep_int2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $3 = $this;
 $4 = $deviceIndex;
 $5 = $3;
 $gep_int = $5;
 $gep = (($gep_int) + 596)|0;
 $6 = $gep;
 $7 = $4;
 $1 = $6;
 $2 = $7;
 $8 = $1;
 $9 = $2;
 $10 = $8;
 $gep_int1 = $8;
 $11 = $gep_int1;
 $12 = HEAP32[$11>>2]|0;
 $gep_int2 = $12;
 $gep_array = $9<<3;
 $gep3 = (($gep_int2) + ($gep_array))|0;
 $13 = $gep3;
 $14 = +HEAPF64[$13>>3];
 $15 = $14 * 9.500000e-01;
 HEAPF64[$13>>3] = $15;
 __ZN12RenderConfig20UpdateDeviceWorkloadEb($5,0);
 STACKTOP = sp;return;
}
function __ZN12RenderConfig12IncPerfIndexEj($this,$deviceIndex) {
 $this = $this|0;
 $deviceIndex = $deviceIndex|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep3 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0;
 var $gep_int2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $3 = $this;
 $4 = $deviceIndex;
 $5 = $3;
 $gep_int = $5;
 $gep = (($gep_int) + 596)|0;
 $6 = $gep;
 $7 = $4;
 $1 = $6;
 $2 = $7;
 $8 = $1;
 $9 = $2;
 $10 = $8;
 $gep_int1 = $8;
 $11 = $gep_int1;
 $12 = HEAP32[$11>>2]|0;
 $gep_int2 = $12;
 $gep_array = $9<<3;
 $gep3 = (($gep_int2) + ($gep_array))|0;
 $13 = $gep3;
 $14 = +HEAPF64[$13>>3];
 $15 = $14 * 1.050000e+00;
 HEAPF64[$13>>3] = $15;
 __ZN12RenderConfig20UpdateDeviceWorkloadEb($5,0);
 STACKTOP = sp;return;
}
function __Z11specialFunciii($key,$x,$y) {
 $key = $key|0;
 $x = $x|0;
 $y = $y|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0.0;
 var $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0;
 var $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0.0;
 var $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0;
 var $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0.0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0;
 var $351 = 0.0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0.0;
 var $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $expanded = 0, $expanded1 = 0;
 var $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0;
 var $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep101 = 0;
 var $gep103 = 0, $gep105 = 0, $gep107 = 0, $gep109 = 0, $gep112 = 0, $gep117 = 0, $gep119 = 0, $gep122 = 0, $gep124 = 0, $gep126 = 0, $gep128 = 0, $gep131 = 0, $gep133 = 0, $gep135 = 0, $gep137 = 0, $gep139 = 0, $gep141 = 0, $gep143 = 0, $gep145 = 0, $gep148 = 0;
 var $gep153 = 0, $gep155 = 0, $gep158 = 0, $gep160 = 0, $gep162 = 0, $gep164 = 0, $gep167 = 0, $gep169 = 0, $gep171 = 0, $gep173 = 0, $gep175 = 0, $gep177 = 0, $gep180 = 0, $gep185 = 0, $gep187 = 0, $gep190 = 0, $gep192 = 0, $gep194 = 0, $gep196 = 0, $gep199 = 0;
 var $gep201 = 0, $gep204 = 0, $gep208 = 0, $gep210 = 0, $gep213 = 0, $gep218 = 0, $gep220 = 0, $gep223 = 0, $gep225 = 0, $gep227 = 0, $gep229 = 0, $gep232 = 0, $gep234 = 0, $gep236 = 0, $gep238 = 0, $gep240 = 0, $gep242 = 0, $gep245 = 0, $gep250 = 0, $gep252 = 0;
 var $gep255 = 0, $gep257 = 0, $gep259 = 0, $gep261 = 0, $gep264 = 0, $gep266 = 0, $gep269 = 0, $gep273 = 0, $gep275 = 0, $gep278 = 0, $gep283 = 0, $gep285 = 0, $gep288 = 0, $gep290 = 0, $gep292 = 0, $gep294 = 0, $gep297 = 0, $gep299 = 0, $gep301 = 0, $gep303 = 0;
 var $gep305 = 0, $gep307 = 0, $gep309 = 0, $gep311 = 0, $gep313 = 0, $gep315 = 0, $gep41 = 0, $gep44 = 0, $gep49 = 0, $gep51 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0;
 var $gep75 = 0, $gep77 = 0, $gep80 = 0, $gep85 = 0, $gep87 = 0, $gep90 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep99 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int111 = 0, $gep_int113 = 0, $gep_int114 = 0;
 var $gep_int115 = 0, $gep_int116 = 0, $gep_int118 = 0, $gep_int120 = 0, $gep_int121 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int127 = 0, $gep_int129 = 0, $gep_int130 = 0, $gep_int132 = 0, $gep_int134 = 0, $gep_int136 = 0, $gep_int138 = 0, $gep_int140 = 0, $gep_int142 = 0, $gep_int144 = 0, $gep_int146 = 0, $gep_int147 = 0, $gep_int149 = 0;
 var $gep_int150 = 0, $gep_int151 = 0, $gep_int152 = 0, $gep_int154 = 0, $gep_int156 = 0, $gep_int157 = 0, $gep_int159 = 0, $gep_int161 = 0, $gep_int163 = 0, $gep_int165 = 0, $gep_int166 = 0, $gep_int168 = 0, $gep_int170 = 0, $gep_int172 = 0, $gep_int174 = 0, $gep_int176 = 0, $gep_int178 = 0, $gep_int179 = 0, $gep_int181 = 0, $gep_int182 = 0;
 var $gep_int183 = 0, $gep_int184 = 0, $gep_int186 = 0, $gep_int188 = 0, $gep_int189 = 0, $gep_int191 = 0, $gep_int193 = 0, $gep_int195 = 0, $gep_int197 = 0, $gep_int198 = 0, $gep_int200 = 0, $gep_int202 = 0, $gep_int203 = 0, $gep_int205 = 0, $gep_int206 = 0, $gep_int207 = 0, $gep_int209 = 0, $gep_int211 = 0, $gep_int212 = 0, $gep_int214 = 0;
 var $gep_int215 = 0, $gep_int216 = 0, $gep_int217 = 0, $gep_int219 = 0, $gep_int221 = 0, $gep_int222 = 0, $gep_int224 = 0, $gep_int226 = 0, $gep_int228 = 0, $gep_int230 = 0, $gep_int231 = 0, $gep_int233 = 0, $gep_int235 = 0, $gep_int237 = 0, $gep_int239 = 0, $gep_int241 = 0, $gep_int243 = 0, $gep_int244 = 0, $gep_int246 = 0, $gep_int247 = 0;
 var $gep_int248 = 0, $gep_int249 = 0, $gep_int251 = 0, $gep_int253 = 0, $gep_int254 = 0, $gep_int256 = 0, $gep_int258 = 0, $gep_int260 = 0, $gep_int262 = 0, $gep_int263 = 0, $gep_int265 = 0, $gep_int267 = 0, $gep_int268 = 0, $gep_int270 = 0, $gep_int271 = 0, $gep_int272 = 0, $gep_int274 = 0, $gep_int276 = 0, $gep_int277 = 0, $gep_int279 = 0;
 var $gep_int280 = 0, $gep_int281 = 0, $gep_int282 = 0, $gep_int284 = 0, $gep_int286 = 0, $gep_int287 = 0, $gep_int289 = 0, $gep_int291 = 0, $gep_int293 = 0, $gep_int295 = 0, $gep_int296 = 0, $gep_int298 = 0, $gep_int300 = 0, $gep_int302 = 0, $gep_int304 = 0, $gep_int306 = 0, $gep_int308 = 0, $gep_int310 = 0, $gep_int312 = 0, $gep_int314 = 0;
 var $gep_int40 = 0, $gep_int42 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int46 = 0, $gep_int47 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0;
 var $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int82 = 0, $gep_int83 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int98 = 0, $t = 0, $t1 = 0, $t2 = 0, $t3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 88|0;
 
 
 
 $t = sp + 24|0;
 $t1 = sp + 40|0;
 $t2 = sp + 56|0;
 $t3 = sp + 72|0;
 $1 = $key;
 $2 = $x;
 $3 = $y;
 $4 = $1;
 
 switch ($4|0) {
 case 101:  {
  $expanded = 1232;
  $5 = HEAP32[1232>>2]|0;
  $gep_int = $5;
  $gep = (($gep_int) + 532)|0;
  $6 = $gep;
  $7 = HEAP32[$6>>2]|0;
  $gep_int40 = $7;
  $gep41 = (($gep_int40) + 12)|0;
  $8 = $gep41;
  $9 = $t;
  $10 = $8;
  ;HEAP32[$9+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
  $gep_int42 = $t;
  $11 = $gep_int42;
  $12 = +HEAPF32[$11>>2];
  $expanded1 = 1232;
  $13 = HEAP32[1232>>2]|0;
  $gep_int43 = $13;
  $gep44 = (($gep_int43) + 532)|0;
  $14 = $gep44;
  $15 = HEAP32[$14>>2]|0;
  $gep_int45 = $15;
  $16 = $gep_int45;
  $gep_int46 = $16;
  $17 = $gep_int46;
  $18 = +HEAPF32[$17>>2];
  $19 = $12 - $18;
  $gep_int47 = $t;
  $20 = $gep_int47;
  HEAPF32[$20>>2] = $19;
  $gep_int48 = $t;
  $gep49 = (($gep_int48) + 4)|0;
  $21 = $gep49;
  $22 = +HEAPF32[$21>>2];
  $expanded2 = 1232;
  $23 = HEAP32[1232>>2]|0;
  $gep_int50 = $23;
  $gep51 = (($gep_int50) + 532)|0;
  $24 = $gep51;
  $25 = HEAP32[$24>>2]|0;
  $gep_int52 = $25;
  $26 = $gep_int52;
  $gep_int53 = $26;
  $gep54 = (($gep_int53) + 4)|0;
  $27 = $gep54;
  $28 = +HEAPF32[$27>>2];
  $29 = $22 - $28;
  $gep_int55 = $t;
  $gep56 = (($gep_int55) + 4)|0;
  $30 = $gep56;
  HEAPF32[$30>>2] = $29;
  $gep_int57 = $t;
  $gep58 = (($gep_int57) + 8)|0;
  $31 = $gep58;
  $32 = +HEAPF32[$31>>2];
  $expanded3 = 1232;
  $33 = HEAP32[1232>>2]|0;
  $gep_int59 = $33;
  $gep60 = (($gep_int59) + 532)|0;
  $34 = $gep60;
  $35 = HEAP32[$34>>2]|0;
  $gep_int61 = $35;
  $36 = $gep_int61;
  $gep_int62 = $36;
  $gep63 = (($gep_int62) + 8)|0;
  $37 = $gep63;
  $38 = +HEAPF32[$37>>2];
  $39 = $32 - $38;
  $gep_int64 = $t;
  $gep65 = (($gep_int64) + 8)|0;
  $40 = $gep65;
  HEAPF32[$40>>2] = $39;
  $gep_int66 = $t;
  $gep67 = (($gep_int66) + 4)|0;
  $41 = $gep67;
  $42 = +HEAPF32[$41>>2];
  $43 = $42;
  $44 = +Math_cos(-0.0349065850398865909487433611957);
  $45 = $43 * $44;
  $gep_int68 = $t;
  $gep69 = (($gep_int68) + 8)|0;
  $46 = $gep69;
  $47 = +HEAPF32[$46>>2];
  $48 = $47;
  $49 = +Math_sin(-0.0349065850398865909487433611957);
  $50 = $48 * $49;
  $51 = $45 + $50;
  $52 = $51;
  $gep_int70 = $t;
  $gep71 = (($gep_int70) + 4)|0;
  $53 = $gep71;
  HEAPF32[$53>>2] = $52;
  $gep_int72 = $t;
  $gep73 = (($gep_int72) + 4)|0;
  $54 = $gep73;
  $55 = +HEAPF32[$54>>2];
  $56 = -$55;
  $57 = $56;
  $58 = +Math_sin(-0.0349065850398865909487433611957);
  $59 = $57 * $58;
  $gep_int74 = $t;
  $gep75 = (($gep_int74) + 8)|0;
  $60 = $gep75;
  $61 = +HEAPF32[$60>>2];
  $62 = $61;
  $63 = +Math_cos(-0.0349065850398865909487433611957);
  $64 = $62 * $63;
  $65 = $59 + $64;
  $66 = $65;
  $gep_int76 = $t;
  $gep77 = (($gep_int76) + 8)|0;
  $67 = $gep77;
  HEAPF32[$67>>2] = $66;
  $gep_int78 = $t;
  $68 = $gep_int78;
  $69 = +HEAPF32[$68>>2];
  $expanded4 = 1232;
  $70 = HEAP32[1232>>2]|0;
  $gep_int79 = $70;
  $gep80 = (($gep_int79) + 532)|0;
  $71 = $gep80;
  $72 = HEAP32[$71>>2]|0;
  $gep_int81 = $72;
  $73 = $gep_int81;
  $gep_int82 = $73;
  $74 = $gep_int82;
  $75 = +HEAPF32[$74>>2];
  $76 = $69 + $75;
  $gep_int83 = $t;
  $77 = $gep_int83;
  HEAPF32[$77>>2] = $76;
  $gep_int84 = $t;
  $gep85 = (($gep_int84) + 4)|0;
  $78 = $gep85;
  $79 = +HEAPF32[$78>>2];
  $expanded5 = 1232;
  $80 = HEAP32[1232>>2]|0;
  $gep_int86 = $80;
  $gep87 = (($gep_int86) + 532)|0;
  $81 = $gep87;
  $82 = HEAP32[$81>>2]|0;
  $gep_int88 = $82;
  $83 = $gep_int88;
  $gep_int89 = $83;
  $gep90 = (($gep_int89) + 4)|0;
  $84 = $gep90;
  $85 = +HEAPF32[$84>>2];
  $86 = $79 + $85;
  $gep_int91 = $t;
  $gep92 = (($gep_int91) + 4)|0;
  $87 = $gep92;
  HEAPF32[$87>>2] = $86;
  $gep_int93 = $t;
  $gep94 = (($gep_int93) + 8)|0;
  $88 = $gep94;
  $89 = +HEAPF32[$88>>2];
  $expanded6 = 1232;
  $90 = HEAP32[1232>>2]|0;
  $gep_int95 = $90;
  $gep96 = (($gep_int95) + 532)|0;
  $91 = $gep96;
  $92 = HEAP32[$91>>2]|0;
  $gep_int97 = $92;
  $93 = $gep_int97;
  $gep_int98 = $93;
  $gep99 = (($gep_int98) + 8)|0;
  $94 = $gep99;
  $95 = +HEAPF32[$94>>2];
  $96 = $89 + $95;
  $gep_int100 = $t;
  $gep101 = (($gep_int100) + 8)|0;
  $97 = $gep101;
  HEAPF32[$97>>2] = $96;
  $expanded7 = 1232;
  $98 = HEAP32[1232>>2]|0;
  $gep_int102 = $98;
  $gep103 = (($gep_int102) + 532)|0;
  $99 = $gep103;
  $100 = HEAP32[$99>>2]|0;
  $gep_int104 = $100;
  $gep105 = (($gep_int104) + 12)|0;
  $101 = $gep105;
  $102 = $101;
  $103 = $t;
  ;HEAP32[$102+0>>2]=HEAP32[$103+0>>2]|0;HEAP32[$102+4>>2]=HEAP32[$103+4>>2]|0;HEAP32[$102+8>>2]=HEAP32[$103+8>>2]|0;
  $expanded8 = 1232;
  $104 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($104,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 103:  {
  $expanded9 = 1232;
  $105 = HEAP32[1232>>2]|0;
  $gep_int106 = $105;
  $gep107 = (($gep_int106) + 532)|0;
  $106 = $gep107;
  $107 = HEAP32[$106>>2]|0;
  $gep_int108 = $107;
  $gep109 = (($gep_int108) + 12)|0;
  $108 = $gep109;
  $109 = $t1;
  $110 = $108;
  ;HEAP32[$109+0>>2]=HEAP32[$110+0>>2]|0;HEAP32[$109+4>>2]=HEAP32[$110+4>>2]|0;HEAP32[$109+8>>2]=HEAP32[$110+8>>2]|0;
  $gep_int110 = $t1;
  $111 = $gep_int110;
  $112 = +HEAPF32[$111>>2];
  $expanded10 = 1232;
  $113 = HEAP32[1232>>2]|0;
  $gep_int111 = $113;
  $gep112 = (($gep_int111) + 532)|0;
  $114 = $gep112;
  $115 = HEAP32[$114>>2]|0;
  $gep_int113 = $115;
  $116 = $gep_int113;
  $gep_int114 = $116;
  $117 = $gep_int114;
  $118 = +HEAPF32[$117>>2];
  $119 = $112 - $118;
  $gep_int115 = $t1;
  $120 = $gep_int115;
  HEAPF32[$120>>2] = $119;
  $gep_int116 = $t1;
  $gep117 = (($gep_int116) + 4)|0;
  $121 = $gep117;
  $122 = +HEAPF32[$121>>2];
  $expanded11 = 1232;
  $123 = HEAP32[1232>>2]|0;
  $gep_int118 = $123;
  $gep119 = (($gep_int118) + 532)|0;
  $124 = $gep119;
  $125 = HEAP32[$124>>2]|0;
  $gep_int120 = $125;
  $126 = $gep_int120;
  $gep_int121 = $126;
  $gep122 = (($gep_int121) + 4)|0;
  $127 = $gep122;
  $128 = +HEAPF32[$127>>2];
  $129 = $122 - $128;
  $gep_int123 = $t1;
  $gep124 = (($gep_int123) + 4)|0;
  $130 = $gep124;
  HEAPF32[$130>>2] = $129;
  $gep_int125 = $t1;
  $gep126 = (($gep_int125) + 8)|0;
  $131 = $gep126;
  $132 = +HEAPF32[$131>>2];
  $expanded12 = 1232;
  $133 = HEAP32[1232>>2]|0;
  $gep_int127 = $133;
  $gep128 = (($gep_int127) + 532)|0;
  $134 = $gep128;
  $135 = HEAP32[$134>>2]|0;
  $gep_int129 = $135;
  $136 = $gep_int129;
  $gep_int130 = $136;
  $gep131 = (($gep_int130) + 8)|0;
  $137 = $gep131;
  $138 = +HEAPF32[$137>>2];
  $139 = $132 - $138;
  $gep_int132 = $t1;
  $gep133 = (($gep_int132) + 8)|0;
  $140 = $gep133;
  HEAPF32[$140>>2] = $139;
  $gep_int134 = $t1;
  $gep135 = (($gep_int134) + 4)|0;
  $141 = $gep135;
  $142 = +HEAPF32[$141>>2];
  $143 = $142;
  $144 = +Math_cos(0.0349065850398865909487433611957);
  $145 = $143 * $144;
  $gep_int136 = $t1;
  $gep137 = (($gep_int136) + 8)|0;
  $146 = $gep137;
  $147 = +HEAPF32[$146>>2];
  $148 = $147;
  $149 = +Math_sin(0.0349065850398865909487433611957);
  $150 = $148 * $149;
  $151 = $145 + $150;
  $152 = $151;
  $gep_int138 = $t1;
  $gep139 = (($gep_int138) + 4)|0;
  $153 = $gep139;
  HEAPF32[$153>>2] = $152;
  $gep_int140 = $t1;
  $gep141 = (($gep_int140) + 4)|0;
  $154 = $gep141;
  $155 = +HEAPF32[$154>>2];
  $156 = -$155;
  $157 = $156;
  $158 = +Math_sin(0.0349065850398865909487433611957);
  $159 = $157 * $158;
  $gep_int142 = $t1;
  $gep143 = (($gep_int142) + 8)|0;
  $160 = $gep143;
  $161 = +HEAPF32[$160>>2];
  $162 = $161;
  $163 = +Math_cos(0.0349065850398865909487433611957);
  $164 = $162 * $163;
  $165 = $159 + $164;
  $166 = $165;
  $gep_int144 = $t1;
  $gep145 = (($gep_int144) + 8)|0;
  $167 = $gep145;
  HEAPF32[$167>>2] = $166;
  $gep_int146 = $t1;
  $168 = $gep_int146;
  $169 = +HEAPF32[$168>>2];
  $expanded13 = 1232;
  $170 = HEAP32[1232>>2]|0;
  $gep_int147 = $170;
  $gep148 = (($gep_int147) + 532)|0;
  $171 = $gep148;
  $172 = HEAP32[$171>>2]|0;
  $gep_int149 = $172;
  $173 = $gep_int149;
  $gep_int150 = $173;
  $174 = $gep_int150;
  $175 = +HEAPF32[$174>>2];
  $176 = $169 + $175;
  $gep_int151 = $t1;
  $177 = $gep_int151;
  HEAPF32[$177>>2] = $176;
  $gep_int152 = $t1;
  $gep153 = (($gep_int152) + 4)|0;
  $178 = $gep153;
  $179 = +HEAPF32[$178>>2];
  $expanded14 = 1232;
  $180 = HEAP32[1232>>2]|0;
  $gep_int154 = $180;
  $gep155 = (($gep_int154) + 532)|0;
  $181 = $gep155;
  $182 = HEAP32[$181>>2]|0;
  $gep_int156 = $182;
  $183 = $gep_int156;
  $gep_int157 = $183;
  $gep158 = (($gep_int157) + 4)|0;
  $184 = $gep158;
  $185 = +HEAPF32[$184>>2];
  $186 = $179 + $185;
  $gep_int159 = $t1;
  $gep160 = (($gep_int159) + 4)|0;
  $187 = $gep160;
  HEAPF32[$187>>2] = $186;
  $gep_int161 = $t1;
  $gep162 = (($gep_int161) + 8)|0;
  $188 = $gep162;
  $189 = +HEAPF32[$188>>2];
  $expanded15 = 1232;
  $190 = HEAP32[1232>>2]|0;
  $gep_int163 = $190;
  $gep164 = (($gep_int163) + 532)|0;
  $191 = $gep164;
  $192 = HEAP32[$191>>2]|0;
  $gep_int165 = $192;
  $193 = $gep_int165;
  $gep_int166 = $193;
  $gep167 = (($gep_int166) + 8)|0;
  $194 = $gep167;
  $195 = +HEAPF32[$194>>2];
  $196 = $189 + $195;
  $gep_int168 = $t1;
  $gep169 = (($gep_int168) + 8)|0;
  $197 = $gep169;
  HEAPF32[$197>>2] = $196;
  $expanded16 = 1232;
  $198 = HEAP32[1232>>2]|0;
  $gep_int170 = $198;
  $gep171 = (($gep_int170) + 532)|0;
  $199 = $gep171;
  $200 = HEAP32[$199>>2]|0;
  $gep_int172 = $200;
  $gep173 = (($gep_int172) + 12)|0;
  $201 = $gep173;
  $202 = $201;
  $203 = $t1;
  ;HEAP32[$202+0>>2]=HEAP32[$203+0>>2]|0;HEAP32[$202+4>>2]=HEAP32[$203+4>>2]|0;HEAP32[$202+8>>2]=HEAP32[$203+8>>2]|0;
  $expanded17 = 1232;
  $204 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($204,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 100:  {
  $expanded18 = 1232;
  $205 = HEAP32[1232>>2]|0;
  $gep_int174 = $205;
  $gep175 = (($gep_int174) + 532)|0;
  $206 = $gep175;
  $207 = HEAP32[$206>>2]|0;
  $gep_int176 = $207;
  $gep177 = (($gep_int176) + 12)|0;
  $208 = $gep177;
  $209 = $t2;
  $210 = $208;
  ;HEAP32[$209+0>>2]=HEAP32[$210+0>>2]|0;HEAP32[$209+4>>2]=HEAP32[$210+4>>2]|0;HEAP32[$209+8>>2]=HEAP32[$210+8>>2]|0;
  $gep_int178 = $t2;
  $211 = $gep_int178;
  $212 = +HEAPF32[$211>>2];
  $expanded19 = 1232;
  $213 = HEAP32[1232>>2]|0;
  $gep_int179 = $213;
  $gep180 = (($gep_int179) + 532)|0;
  $214 = $gep180;
  $215 = HEAP32[$214>>2]|0;
  $gep_int181 = $215;
  $216 = $gep_int181;
  $gep_int182 = $216;
  $217 = $gep_int182;
  $218 = +HEAPF32[$217>>2];
  $219 = $212 - $218;
  $gep_int183 = $t2;
  $220 = $gep_int183;
  HEAPF32[$220>>2] = $219;
  $gep_int184 = $t2;
  $gep185 = (($gep_int184) + 4)|0;
  $221 = $gep185;
  $222 = +HEAPF32[$221>>2];
  $expanded20 = 1232;
  $223 = HEAP32[1232>>2]|0;
  $gep_int186 = $223;
  $gep187 = (($gep_int186) + 532)|0;
  $224 = $gep187;
  $225 = HEAP32[$224>>2]|0;
  $gep_int188 = $225;
  $226 = $gep_int188;
  $gep_int189 = $226;
  $gep190 = (($gep_int189) + 4)|0;
  $227 = $gep190;
  $228 = +HEAPF32[$227>>2];
  $229 = $222 - $228;
  $gep_int191 = $t2;
  $gep192 = (($gep_int191) + 4)|0;
  $230 = $gep192;
  HEAPF32[$230>>2] = $229;
  $gep_int193 = $t2;
  $gep194 = (($gep_int193) + 8)|0;
  $231 = $gep194;
  $232 = +HEAPF32[$231>>2];
  $expanded21 = 1232;
  $233 = HEAP32[1232>>2]|0;
  $gep_int195 = $233;
  $gep196 = (($gep_int195) + 532)|0;
  $234 = $gep196;
  $235 = HEAP32[$234>>2]|0;
  $gep_int197 = $235;
  $236 = $gep_int197;
  $gep_int198 = $236;
  $gep199 = (($gep_int198) + 8)|0;
  $237 = $gep199;
  $238 = +HEAPF32[$237>>2];
  $239 = $232 - $238;
  $gep_int200 = $t2;
  $gep201 = (($gep_int200) + 8)|0;
  $240 = $gep201;
  HEAPF32[$240>>2] = $239;
  $gep_int202 = $t2;
  $241 = $gep_int202;
  $242 = +HEAPF32[$241>>2];
  $243 = $242;
  $244 = +Math_cos(-0.0349065850398865909487433611957);
  $245 = $243 * $244;
  $gep_int203 = $t2;
  $gep204 = (($gep_int203) + 8)|0;
  $246 = $gep204;
  $247 = +HEAPF32[$246>>2];
  $248 = $247;
  $249 = +Math_sin(-0.0349065850398865909487433611957);
  $250 = $248 * $249;
  $251 = $245 - $250;
  $252 = $251;
  $gep_int205 = $t2;
  $253 = $gep_int205;
  HEAPF32[$253>>2] = $252;
  $gep_int206 = $t2;
  $254 = $gep_int206;
  $255 = +HEAPF32[$254>>2];
  $256 = $255;
  $257 = +Math_sin(-0.0349065850398865909487433611957);
  $258 = $256 * $257;
  $gep_int207 = $t2;
  $gep208 = (($gep_int207) + 8)|0;
  $259 = $gep208;
  $260 = +HEAPF32[$259>>2];
  $261 = $260;
  $262 = +Math_cos(-0.0349065850398865909487433611957);
  $263 = $261 * $262;
  $264 = $258 + $263;
  $265 = $264;
  $gep_int209 = $t2;
  $gep210 = (($gep_int209) + 8)|0;
  $266 = $gep210;
  HEAPF32[$266>>2] = $265;
  $gep_int211 = $t2;
  $267 = $gep_int211;
  $268 = +HEAPF32[$267>>2];
  $expanded22 = 1232;
  $269 = HEAP32[1232>>2]|0;
  $gep_int212 = $269;
  $gep213 = (($gep_int212) + 532)|0;
  $270 = $gep213;
  $271 = HEAP32[$270>>2]|0;
  $gep_int214 = $271;
  $272 = $gep_int214;
  $gep_int215 = $272;
  $273 = $gep_int215;
  $274 = +HEAPF32[$273>>2];
  $275 = $268 + $274;
  $gep_int216 = $t2;
  $276 = $gep_int216;
  HEAPF32[$276>>2] = $275;
  $gep_int217 = $t2;
  $gep218 = (($gep_int217) + 4)|0;
  $277 = $gep218;
  $278 = +HEAPF32[$277>>2];
  $expanded23 = 1232;
  $279 = HEAP32[1232>>2]|0;
  $gep_int219 = $279;
  $gep220 = (($gep_int219) + 532)|0;
  $280 = $gep220;
  $281 = HEAP32[$280>>2]|0;
  $gep_int221 = $281;
  $282 = $gep_int221;
  $gep_int222 = $282;
  $gep223 = (($gep_int222) + 4)|0;
  $283 = $gep223;
  $284 = +HEAPF32[$283>>2];
  $285 = $278 + $284;
  $gep_int224 = $t2;
  $gep225 = (($gep_int224) + 4)|0;
  $286 = $gep225;
  HEAPF32[$286>>2] = $285;
  $gep_int226 = $t2;
  $gep227 = (($gep_int226) + 8)|0;
  $287 = $gep227;
  $288 = +HEAPF32[$287>>2];
  $expanded24 = 1232;
  $289 = HEAP32[1232>>2]|0;
  $gep_int228 = $289;
  $gep229 = (($gep_int228) + 532)|0;
  $290 = $gep229;
  $291 = HEAP32[$290>>2]|0;
  $gep_int230 = $291;
  $292 = $gep_int230;
  $gep_int231 = $292;
  $gep232 = (($gep_int231) + 8)|0;
  $293 = $gep232;
  $294 = +HEAPF32[$293>>2];
  $295 = $288 + $294;
  $gep_int233 = $t2;
  $gep234 = (($gep_int233) + 8)|0;
  $296 = $gep234;
  HEAPF32[$296>>2] = $295;
  $expanded25 = 1232;
  $297 = HEAP32[1232>>2]|0;
  $gep_int235 = $297;
  $gep236 = (($gep_int235) + 532)|0;
  $298 = $gep236;
  $299 = HEAP32[$298>>2]|0;
  $gep_int237 = $299;
  $gep238 = (($gep_int237) + 12)|0;
  $300 = $gep238;
  $301 = $300;
  $302 = $t2;
  ;HEAP32[$301+0>>2]=HEAP32[$302+0>>2]|0;HEAP32[$301+4>>2]=HEAP32[$302+4>>2]|0;HEAP32[$301+8>>2]=HEAP32[$302+8>>2]|0;
  $expanded26 = 1232;
  $303 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($303,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 102:  {
  $expanded27 = 1232;
  $304 = HEAP32[1232>>2]|0;
  $gep_int239 = $304;
  $gep240 = (($gep_int239) + 532)|0;
  $305 = $gep240;
  $306 = HEAP32[$305>>2]|0;
  $gep_int241 = $306;
  $gep242 = (($gep_int241) + 12)|0;
  $307 = $gep242;
  $308 = $t3;
  $309 = $307;
  ;HEAP32[$308+0>>2]=HEAP32[$309+0>>2]|0;HEAP32[$308+4>>2]=HEAP32[$309+4>>2]|0;HEAP32[$308+8>>2]=HEAP32[$309+8>>2]|0;
  $gep_int243 = $t3;
  $310 = $gep_int243;
  $311 = +HEAPF32[$310>>2];
  $expanded28 = 1232;
  $312 = HEAP32[1232>>2]|0;
  $gep_int244 = $312;
  $gep245 = (($gep_int244) + 532)|0;
  $313 = $gep245;
  $314 = HEAP32[$313>>2]|0;
  $gep_int246 = $314;
  $315 = $gep_int246;
  $gep_int247 = $315;
  $316 = $gep_int247;
  $317 = +HEAPF32[$316>>2];
  $318 = $311 - $317;
  $gep_int248 = $t3;
  $319 = $gep_int248;
  HEAPF32[$319>>2] = $318;
  $gep_int249 = $t3;
  $gep250 = (($gep_int249) + 4)|0;
  $320 = $gep250;
  $321 = +HEAPF32[$320>>2];
  $expanded29 = 1232;
  $322 = HEAP32[1232>>2]|0;
  $gep_int251 = $322;
  $gep252 = (($gep_int251) + 532)|0;
  $323 = $gep252;
  $324 = HEAP32[$323>>2]|0;
  $gep_int253 = $324;
  $325 = $gep_int253;
  $gep_int254 = $325;
  $gep255 = (($gep_int254) + 4)|0;
  $326 = $gep255;
  $327 = +HEAPF32[$326>>2];
  $328 = $321 - $327;
  $gep_int256 = $t3;
  $gep257 = (($gep_int256) + 4)|0;
  $329 = $gep257;
  HEAPF32[$329>>2] = $328;
  $gep_int258 = $t3;
  $gep259 = (($gep_int258) + 8)|0;
  $330 = $gep259;
  $331 = +HEAPF32[$330>>2];
  $expanded30 = 1232;
  $332 = HEAP32[1232>>2]|0;
  $gep_int260 = $332;
  $gep261 = (($gep_int260) + 532)|0;
  $333 = $gep261;
  $334 = HEAP32[$333>>2]|0;
  $gep_int262 = $334;
  $335 = $gep_int262;
  $gep_int263 = $335;
  $gep264 = (($gep_int263) + 8)|0;
  $336 = $gep264;
  $337 = +HEAPF32[$336>>2];
  $338 = $331 - $337;
  $gep_int265 = $t3;
  $gep266 = (($gep_int265) + 8)|0;
  $339 = $gep266;
  HEAPF32[$339>>2] = $338;
  $gep_int267 = $t3;
  $340 = $gep_int267;
  $341 = +HEAPF32[$340>>2];
  $342 = $341;
  $343 = +Math_cos(0.0349065850398865909487433611957);
  $344 = $342 * $343;
  $gep_int268 = $t3;
  $gep269 = (($gep_int268) + 8)|0;
  $345 = $gep269;
  $346 = +HEAPF32[$345>>2];
  $347 = $346;
  $348 = +Math_sin(0.0349065850398865909487433611957);
  $349 = $347 * $348;
  $350 = $344 - $349;
  $351 = $350;
  $gep_int270 = $t3;
  $352 = $gep_int270;
  HEAPF32[$352>>2] = $351;
  $gep_int271 = $t3;
  $353 = $gep_int271;
  $354 = +HEAPF32[$353>>2];
  $355 = $354;
  $356 = +Math_sin(0.0349065850398865909487433611957);
  $357 = $355 * $356;
  $gep_int272 = $t3;
  $gep273 = (($gep_int272) + 8)|0;
  $358 = $gep273;
  $359 = +HEAPF32[$358>>2];
  $360 = $359;
  $361 = +Math_cos(0.0349065850398865909487433611957);
  $362 = $360 * $361;
  $363 = $357 + $362;
  $364 = $363;
  $gep_int274 = $t3;
  $gep275 = (($gep_int274) + 8)|0;
  $365 = $gep275;
  HEAPF32[$365>>2] = $364;
  $gep_int276 = $t3;
  $366 = $gep_int276;
  $367 = +HEAPF32[$366>>2];
  $expanded31 = 1232;
  $368 = HEAP32[1232>>2]|0;
  $gep_int277 = $368;
  $gep278 = (($gep_int277) + 532)|0;
  $369 = $gep278;
  $370 = HEAP32[$369>>2]|0;
  $gep_int279 = $370;
  $371 = $gep_int279;
  $gep_int280 = $371;
  $372 = $gep_int280;
  $373 = +HEAPF32[$372>>2];
  $374 = $367 + $373;
  $gep_int281 = $t3;
  $375 = $gep_int281;
  HEAPF32[$375>>2] = $374;
  $gep_int282 = $t3;
  $gep283 = (($gep_int282) + 4)|0;
  $376 = $gep283;
  $377 = +HEAPF32[$376>>2];
  $expanded32 = 1232;
  $378 = HEAP32[1232>>2]|0;
  $gep_int284 = $378;
  $gep285 = (($gep_int284) + 532)|0;
  $379 = $gep285;
  $380 = HEAP32[$379>>2]|0;
  $gep_int286 = $380;
  $381 = $gep_int286;
  $gep_int287 = $381;
  $gep288 = (($gep_int287) + 4)|0;
  $382 = $gep288;
  $383 = +HEAPF32[$382>>2];
  $384 = $377 + $383;
  $gep_int289 = $t3;
  $gep290 = (($gep_int289) + 4)|0;
  $385 = $gep290;
  HEAPF32[$385>>2] = $384;
  $gep_int291 = $t3;
  $gep292 = (($gep_int291) + 8)|0;
  $386 = $gep292;
  $387 = +HEAPF32[$386>>2];
  $expanded33 = 1232;
  $388 = HEAP32[1232>>2]|0;
  $gep_int293 = $388;
  $gep294 = (($gep_int293) + 532)|0;
  $389 = $gep294;
  $390 = HEAP32[$389>>2]|0;
  $gep_int295 = $390;
  $391 = $gep_int295;
  $gep_int296 = $391;
  $gep297 = (($gep_int296) + 8)|0;
  $392 = $gep297;
  $393 = +HEAPF32[$392>>2];
  $394 = $387 + $393;
  $gep_int298 = $t3;
  $gep299 = (($gep_int298) + 8)|0;
  $395 = $gep299;
  HEAPF32[$395>>2] = $394;
  $expanded34 = 1232;
  $396 = HEAP32[1232>>2]|0;
  $gep_int300 = $396;
  $gep301 = (($gep_int300) + 532)|0;
  $397 = $gep301;
  $398 = HEAP32[$397>>2]|0;
  $gep_int302 = $398;
  $gep303 = (($gep_int302) + 12)|0;
  $399 = $gep303;
  $400 = $399;
  $401 = $t3;
  ;HEAP32[$400+0>>2]=HEAP32[$401+0>>2]|0;HEAP32[$400+4>>2]=HEAP32[$401+4>>2]|0;HEAP32[$400+8>>2]=HEAP32[$401+8>>2]|0;
  $expanded35 = 1232;
  $402 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($402,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 104:  {
  $expanded36 = 1232;
  $403 = HEAP32[1232>>2]|0;
  $gep_int304 = $403;
  $gep305 = (($gep_int304) + 532)|0;
  $404 = $gep305;
  $405 = HEAP32[$404>>2]|0;
  $gep_int306 = $405;
  $gep307 = (($gep_int306) + 12)|0;
  $406 = $gep307;
  $gep_int308 = $406;
  $gep309 = (($gep_int308) + 4)|0;
  $407 = $gep309;
  $408 = +HEAPF32[$407>>2];
  $409 = $408 + 1.000000e+01;
  HEAPF32[$407>>2] = $409;
  $expanded37 = 1232;
  $410 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($410,0);
  
  STACKTOP = sp;return;
  break;
 }
 case 105:  {
  $expanded38 = 1232;
  $411 = HEAP32[1232>>2]|0;
  $gep_int310 = $411;
  $gep311 = (($gep_int310) + 532)|0;
  $412 = $gep311;
  $413 = HEAP32[$412>>2]|0;
  $gep_int312 = $413;
  $gep313 = (($gep_int312) + 12)|0;
  $414 = $gep313;
  $gep_int314 = $414;
  $gep315 = (($gep_int314) + 4)|0;
  $415 = $gep315;
  $416 = +HEAPF32[$415>>2];
  $417 = $416 - 1.000000e+01;
  HEAPF32[$415>>2] = $417;
  $expanded39 = 1232;
  $418 = HEAP32[1232>>2]|0;
  __ZN12RenderConfig6ReInitEi($418,0);
  
  STACKTOP = sp;return;
  break;
 }
 default: {
  
  STACKTOP = sp;return;
 }
 }
}
function __Z8idleFuncv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL15UpdateRenderingv();
 _glutPostRedisplay();
 STACKTOP = sp;return;
}
function __ZL15UpdateRenderingv() {
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $elapsedTime = 0.0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0;
 var $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0;
 var $gep38 = 0, $gep40 = 0, $gep42 = 0, $gep_int = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $sampleSec = 0.0, $samples = 0;
 var $startSampleCount = 0, $startTime = 0.0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0, u$15 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $vararg_lifetime_bitcast = $vararg_buffer;
 
 
 
 
 
 $expanded = 1232;
 $1 = HEAP32[1232>>2]|0;
 $gep_int = $1;
 $gep = (($gep_int) + 524)|0;
 $2 = $gep;
 $3 = HEAP32[$2>>2]|0;
 $startSampleCount = $3;
 $4 = $startSampleCount;
 $5 = ($4|0)==(0);
 
 if ($5) {
  $expanded4 = 1656;
  HEAPF64[1656>>3] = 0.000000e+00;
  
 }
 $6 = +__Z13WallClockTimev();
 $startTime = $6;
 $expanded5 = 1232;
 $7 = HEAP32[1232>>2]|0;
 __ZN12RenderConfig7ExecuteEv($7);
 $8 = +__Z13WallClockTimev();
 $9 = $startTime;
 $10 = $8 - $9;
 $elapsedTime = $10;
 $11 = $elapsedTime;
 $expanded6 = 1656;
 $12 = +HEAPF64[1656>>3];
 $13 = $12 + $11;
 $expanded7 = 1656;
 HEAPF64[1656>>3] = $13;
 $expanded8 = 1232;
 $14 = HEAP32[1232>>2]|0;
 $gep_int19 = $14;
 $gep20 = (($gep_int19) + 524)|0;
 $15 = $gep20;
 $16 = HEAP32[$15>>2]|0;
 $17 = $startSampleCount;
 $18 = (($16) - ($17))|0;
 $samples = $18;
 $19 = $samples;
 $expanded9 = 1232;
 $20 = HEAP32[1232>>2]|0;
 $gep_int21 = $20;
 $gep22 = (($gep_int21) + 520)|0;
 $21 = $gep22;
 $22 = HEAP32[$21>>2]|0;
 $23 = Math_imul($19, $22)|0;
 $expanded10 = 1232;
 $24 = HEAP32[1232>>2]|0;
 $gep_int23 = $24;
 $gep24 = (($gep_int23) + 516)|0;
 $25 = $gep24;
 $26 = HEAP32[$25>>2]|0;
 $27 = Math_imul($23, $26)|0;
 $28 = +($27>>>0);
 $29 = $elapsedTime;
 $30 = $28 / $29;
 $sampleSec = $30;
 $expanded11 = 1232;
 $31 = HEAP32[1232>>2]|0;
 $gep_int25 = $31;
 $gep26 = (($gep_int25) + 4)|0;
 $32 = $gep26;
 $gep_int27 = $32;
 $33 = $gep_int27;
 $34 = $elapsedTime;
 $expanded12 = 1232;
 $35 = HEAP32[1232>>2]|0;
 $gep_int28 = $35;
 $gep29 = (($gep_int28) + 524)|0;
 $36 = $gep29;
 $37 = HEAP32[$36>>2]|0;
 $expanded13 = 1232;
 $38 = HEAP32[1232>>2]|0;
 $gep_int30 = $38;
 $gep31 = (($gep_int30) + 524)|0;
 $39 = $gep31;
 $40 = HEAP32[$39>>2]|0;
 $expanded14 = 1232;
 $41 = HEAP32[1232>>2]|0;
 $gep_int32 = $41;
 $gep33 = (($gep_int32) + 520)|0;
 $42 = $gep33;
 $43 = HEAP32[$42>>2]|0;
 $44 = Math_imul($40, $43)|0;
 $expanded15 = 1232;
 $45 = HEAP32[1232>>2]|0;
 $gep_int34 = $45;
 $gep35 = (($gep_int34) + 516)|0;
 $46 = $gep35;
 $47 = HEAP32[$46>>2]|0;
 $48 = Math_imul($44, $47)|0;
 $49 = +($48>>>0);
 $expanded16 = 1656;
 $50 = +HEAPF64[1656>>3];
 $51 = $49 / $50;
 $52 = $51 / 1.000000e+03;
 $53 = $sampleSec;
 $54 = $53 / 1.000000e+03;
 
 $gep_int36 = $vararg_buffer;
 $vararg_ptr = $gep_int36;
 HEAPF64[tempDoublePtr>>3]=$34;HEAP32[$vararg_ptr>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $gep_int37 = $vararg_buffer;
 $gep38 = (($gep_int37) + 8)|0;
 $vararg_ptr1 = $gep38;
 HEAP32[$vararg_ptr1>>2] = $37;
 $gep_int39 = $vararg_buffer;
 $gep40 = (($gep_int39) + 12)|0;
 $vararg_ptr2 = $gep40;
 HEAPF64[tempDoublePtr>>3]=$52;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $gep_int41 = $vararg_buffer;
 $gep42 = (($gep_int41) + 20)|0;
 $vararg_ptr3 = $gep42;
 HEAPF64[tempDoublePtr>>3]=$54;HEAP32[$vararg_ptr3>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr3+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $expanded17 = 26;
 $vararg_func = $expanded17;
 $gep_int43 = 1664;
 $expanded18 = $gep_int43;
 u$15 = _sprintf($33|0,$expanded18|0,$vararg_buffer|0)|0;
 
 STACKTOP = sp;return;
}
function __Z8InitGlutiPPcjj($argc,$argv,$width,$height) {
 $argc = $argc|0;
 $argv = $argv|0;
 $width = $width|0;
 $height = $height|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $expanded = 0, $gep_int = 0, label = 0, sp = 0, u$8 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 
 
 
 HEAP32[$1>>2] = $argc;
 $2 = $argv;
 $3 = $width;
 $4 = $height;
 $5 = $3;
 $6 = $4;
 _glutInitWindowSize($5|0,$6|0);
 _glutInitWindowPosition(0,0);
 _glutInitDisplayMode(2);
 $7 = $2;
 _glutInit($1|0,$7|0);
 $gep_int = 1496;
 $expanded = $gep_int;
 u$8 = _glutCreateWindow($expanded|0)|0;
 STACKTOP = sp;return;
}
function __Z7RunGlutv() {
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0;
 var $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0, u$5 = 0;
 sp = STACKTOP;
 _glutReshapeFunc(56);
 _glutKeyboardFunc(8);
 _glutSpecialFunc(9);
 _glutDisplayFunc(10);
 _glutIdleFunc(11);
 $expanded = 1232;
 $1 = HEAP32[1232>>2]|0;
 $gep_int = $1;
 $gep = (($gep_int) + 516)|0;
 $2 = $gep;
 $3 = HEAP32[$2>>2]|0;
 $expanded1 = 1232;
 $4 = HEAP32[1232>>2]|0;
 $gep_int6 = $4;
 $gep7 = (($gep_int6) + 520)|0;
 $5 = $gep7;
 $6 = HEAP32[$5>>2]|0;
 u$5 = __ZL13SetupGraphicsjj($3,$6)|0;
 _glMatrixMode(5889);
 $expanded2 = 1232;
 $7 = HEAP32[1232>>2]|0;
 $gep_int8 = $7;
 $gep9 = (($gep_int8) + 516)|0;
 $8 = $gep9;
 $9 = HEAP32[$8>>2]|0;
 $expanded3 = 1232;
 $10 = HEAP32[1232>>2]|0;
 $gep_int10 = $10;
 $gep11 = (($gep_int10) + 520)|0;
 $11 = $gep11;
 $12 = HEAP32[$11>>2]|0;
 _glViewport(0,0,$9|0,$12|0);
 _glLoadIdentity();
 $expanded4 = 1232;
 $13 = HEAP32[1232>>2]|0;
 $gep_int12 = $13;
 $gep13 = (($gep_int12) + 516)|0;
 $14 = $gep13;
 $15 = HEAP32[$14>>2]|0;
 $16 = +($15>>>0);
 $17 = $16 - 1.000000e+00;
 $18 = $17;
 $expanded5 = 1232;
 $19 = HEAP32[1232>>2]|0;
 $gep_int14 = $19;
 $gep15 = (($gep_int14) + 520)|0;
 $20 = $gep15;
 $21 = HEAP32[$20>>2]|0;
 $22 = +($21>>>0);
 $23 = $22 - 1.000000e+00;
 $24 = $23;
 _glOrtho(0.000000e+00,+$18,0.000000e+00,+$24,-1.000000e+00,1.000000e+00);
 _glutMainLoop();
 STACKTOP = sp;return;
}
function __ZL13SetupGraphicsjj($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0;
 var $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep30 = 0, $gep_int = 0;
 var $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $width;
 $2 = $height;
 $3 = $1;
 $4 = $2;
 __ZL13CreateTexturejj($3,$4);
 _glClearColor(0.000000e+00,0.000000e+00,0.000000e+00,0.000000e+00);
 _glDisable(2929);
 _glActiveTexture(33984);
 $5 = $1;
 $6 = $2;
 _glViewport(0,0,$5|0,$6|0);
 _glMatrixMode(5888);
 _glLoadIdentity();
 _glMatrixMode(5889);
 _glLoadIdentity();
 $expanded1 = 1544;
 $gep_int = 1544;
 $gep = (($gep_int) + 24)|0;
 $expanded = $gep;
 HEAPF32[$expanded>>2] = 0.000000e+00;
 $expanded3 = 1544;
 $gep_int18 = 1544;
 $gep19 = (($gep_int18) + 28)|0;
 $expanded2 = $gep19;
 HEAPF32[$expanded2>>2] = 0.000000e+00;
 $7 = $1;
 $8 = +($7>>>0);
 $expanded5 = 1544;
 $gep_int20 = 1544;
 $gep21 = (($gep_int20) + 16)|0;
 $expanded4 = $gep21;
 HEAPF32[$expanded4>>2] = $8;
 $expanded7 = 1544;
 $gep_int22 = 1544;
 $gep23 = (($gep_int22) + 20)|0;
 $expanded6 = $gep23;
 HEAPF32[$expanded6>>2] = 0.000000e+00;
 $9 = $1;
 $10 = +($9>>>0);
 $expanded9 = 1544;
 $gep_int24 = 1544;
 $gep25 = (($gep_int24) + 8)|0;
 $expanded8 = $gep25;
 HEAPF32[$expanded8>>2] = $10;
 $11 = $2;
 $12 = +($11>>>0);
 $expanded11 = 1544;
 $gep_int26 = 1544;
 $gep27 = (($gep_int26) + 12)|0;
 $expanded10 = $gep27;
 HEAPF32[$expanded10>>2] = $12;
 $expanded13 = 1544;
 $gep_int28 = 1544;
 $expanded12 = $gep_int28;
 HEAPF32[$expanded12>>2] = 0.000000e+00;
 $13 = $2;
 $14 = +($13>>>0);
 $expanded15 = 1544;
 $gep_int29 = 1544;
 $gep30 = (($gep_int29) + 4)|0;
 $expanded14 = $gep30;
 HEAPF32[$expanded14>>2] = $14;
 _glEnableClientState(32884);
 _glEnableClientState(32888);
 $gep_int31 = 1576;
 $expanded16 = $gep_int31;
 _glVertexPointer(2,5126,0,$expanded16|0);
 _glClientActiveTexture(33984);
 $gep_int32 = 1544;
 $expanded17 = $gep_int32;
 _glTexCoordPointer(2,5126,0,$expanded17|0);
 STACKTOP = sp;return 0;
}
function __ZN2cl6vectorIP12RenderDeviceLj10EEC2ERKS3_($this,$vec) {
 $this = $this|0;
 $vec = $vec|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $vec;
 $3 = $1;
 $gep_int = $3;
 $gep = (($gep_int) + 40)|0;
 $4 = $gep;
 $5 = $2;
 $gep_int1 = $5;
 $gep2 = (($gep_int1) + 40)|0;
 $6 = $gep2;
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$4>>2] = $7;
 $gep_int3 = $3;
 $gep4 = (($gep_int3) + 44)|0;
 $8 = $gep4;
 $9 = $2;
 $gep_int5 = $9;
 $gep6 = (($gep_int5) + 44)|0;
 $10 = $gep6;
 $11 = HEAP8[$10]|0;
 $12 = $11&1;
 $13 = $12&1;
 HEAP8[$8] = $13;
 $gep_int7 = $3;
 $gep8 = (($gep_int7) + 44)|0;
 $14 = $gep8;
 $15 = HEAP8[$14]|0;
 $16 = $15&1;
 
 if ($16) {
  STACKTOP = sp;return;
 }
 $gep_int9 = $3;
 $17 = $gep_int9;
 $gep_int10 = $17;
 $18 = $gep_int10;
 $19 = $18;
 $20 = $2;
 $gep_int11 = $20;
 $21 = $gep_int11;
 $gep_int12 = $21;
 $22 = $gep_int12;
 $23 = $22;
 $24 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($3)|0;
 $25 = $24<<2;
 _memcpy($19|0,$23|0,$25|0)|0;
 
 STACKTOP = sp;return;
}
function __ZL13CreateTexturejj($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0;
 var $expanded13 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 var u$5 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $vararg_buffer = sp;
 $vararg_lifetime_bitcast = $vararg_buffer;
 
 
 $1 = $width;
 $2 = $height;
 $3 = $1;
 $4 = $2;
 
 $gep_int = $vararg_buffer;
 $vararg_ptr = $gep_int;
 HEAP32[$vararg_ptr>>2] = $3;
 $gep_int14 = $vararg_buffer;
 $gep = (($gep_int14) + 4)|0;
 $vararg_ptr1 = $gep;
 HEAP32[$vararg_ptr1>>2] = $4;
 $expanded = 29;
 $vararg_func = $expanded;
 $gep_int15 = 1608;
 $expanded2 = $gep_int15;
 u$5 = _printf($expanded2|0,$vararg_buffer|0)|0;
 
 $expanded3 = 1640;
 $5 = HEAP32[1640>>2]|0;
 _glActiveTexture($5|0);
 $expanded4 = 1240;
 _glGenTextures(1,$expanded4|0);
 $expanded5 = 1248;
 $6 = HEAP32[1248>>2]|0;
 $expanded6 = 1240;
 $7 = HEAP32[1240>>2]|0;
 _glBindTexture($6|0,$7|0);
 $expanded7 = 1248;
 $8 = HEAP32[1248>>2]|0;
 _glTexParameteri($8|0,10240,9728);
 $expanded8 = 1248;
 $9 = HEAP32[1248>>2]|0;
 _glTexParameteri($9|0,10241,9728);
 $expanded9 = 1248;
 $10 = HEAP32[1248>>2]|0;
 $expanded10 = 1648;
 $11 = HEAP32[1648>>2]|0;
 $12 = $1;
 $13 = $2;
 $expanded11 = 1256;
 $14 = HEAP32[1256>>2]|0;
 $expanded12 = 1264;
 $15 = HEAP32[1264>>2]|0;
 _glTexImage2D($10|0,0,$11|0,$12|0,$13|0,0,$14|0,$15|0,0);
 $expanded13 = 1248;
 $16 = HEAP32[1248>>2]|0;
 _glBindTexture($16|0,0);
 STACKTOP = sp;return;
}
function __ZN12RenderConfig7ExecuteEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elapsedTime = 0.0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $k = 0.0;
 var $startTime = 0.0, $tmp$i = 0, $tmp1$i = 0, $tresholdTime = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 
 
 
 
 
 $6 = sp + 40|0;
 
 
 $9 = sp + 64|0;
 
 
 
 $11 = sp + 96|0;
 $12 = sp + 104|0;
 
 
 $10 = $this;
 $13 = $10;
 $gep_int = $13;
 $gep = (($gep_int) + 524)|0;
 $14 = $gep;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15>>>0)<(20);
 
 if ($16) {
  __ZN12RenderConfig14ExecuteKernelsEv($13);
  $gep_int1 = $13;
  $gep2 = (($gep_int1) + 524)|0;
  $17 = $gep2;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
  
  __ZN12RenderConfig19CheckDeviceWorkloadEv($13);
  STACKTOP = sp;return;
 }
 $20 = +__Z13WallClockTimev();
 $startTime = $20;
 $gep_int3 = $13;
 $gep4 = (($gep_int3) + 524)|0;
 $21 = $gep4;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) - 20)|0;
 HEAP32[$11>>2] = $23;
 HEAP32[$12>>2] = 100;
 $7 = $11;
 $8 = $12;
 $24 = $7;
 $25 = $8;
 $tmp$i = $6;
 $tmp1$i = $9;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $4 = $24;
 $5 = $25;
 $26 = $5;
 $27 = $4;
 $1 = $6;
 $2 = $26;
 $3 = $27;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $30 = $3;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29>>>0)<($31>>>0);
 
 if ($32) {
  $33 = $5;
  
  $35 = $33;
 } else {
  $34 = $4;
  
  $35 = $34;
 }
 
 $36 = HEAP32[$35>>2]|0;
 $37 = +($36>>>0);
 $38 = $37 / 1.000000e+02;
 $k = $38;
 $39 = $k;
 $40 = 5.000000e-01 * $39;
 $tresholdTime = $40;
 
 while(1) {
  __ZN12RenderConfig14ExecuteKernelsEv($13);
  $gep_int5 = $13;
  $gep6 = (($gep_int5) + 524)|0;
  $41 = $gep6;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[$41>>2] = $43;
  $44 = +__Z13WallClockTimev();
  $45 = $startTime;
  $46 = $44 - $45;
  $47 = $46;
  $elapsedTime = $47;
  $48 = $elapsedTime;
  $49 = $tresholdTime;
  $50 = $48 > $49;
  
  if ($50) {
   break;
  }
  
 }
 
 
 __ZN12RenderConfig19CheckDeviceWorkloadEv($13);
 STACKTOP = sp;return;
}
function __ZN12RenderConfig14ExecuteKernelsEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $1;
 $i = 0;
 
 while(1) {
  $3 = $i;
  $gep_int = $2;
  $gep = (($gep_int) + 548)|0;
  $4 = $gep;
  $5 = __ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv($4)|0;
  $6 = ($3>>>0)<($5>>>0);
  
  if (!($6)) {
   break;
  }
  $gep_int1 = $2;
  $gep2 = (($gep_int1) + 548)|0;
  $7 = $gep2;
  $8 = $i;
  $9 = __ZN2cl6vectorIP12RenderDeviceLj10EEixEi($7,$8)|0;
  $10 = HEAP32[$9>>2]|0;
  $gep_int3 = $2;
  $gep4 = (($gep_int3) + 524)|0;
  $11 = $gep4;
  $12 = HEAP32[$11>>2]|0;
  __ZN12RenderDevice7SetArgsEj($10,$12);
  
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
  
 }
 STACKTOP = sp;return;
}
function __ZN12RenderConfig19CheckDeviceWorkloadEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $t = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $1;
 $3 = +__Z13WallClockTimev();
 $t = $3;
 $gep_int = $2;
 $gep = (($gep_int) + 616)|0;
 $4 = $gep;
 $5 = HEAP8[$4]|0;
 $6 = $5&1;
 
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $t;
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + 608)|0;
 $8 = $gep2;
 $9 = +HEAPF64[$8>>3];
 $10 = $7 - $9;
 $11 = $10 > 1.000000e+01;
 
 if (!($11)) {
  STACKTOP = sp;return;
 }
 __ZN12RenderConfig20UpdateDeviceWorkloadEb($2,1);
 $gep_int3 = $2;
 $gep4 = (($gep_int3) + 616)|0;
 $12 = $gep4;
 HEAP8[$12] = 0;
 
 STACKTOP = sp;return;
}
function __ZN12RenderDevice7SetArgsEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $gep_int = $3;
 $gep = (($gep_int) + 48)|0;
 $5 = $gep;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN12RenderDevice16ResetPerformanceEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 96)|0;
 $3 = $gep;
 HEAPF64[$3>>3] = 0.000000e+00;
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + 88)|0;
 $4 = $gep2;
 HEAPF64[$4>>3] = 0.000000e+00;
 STACKTOP = sp;return;
}
function __ZNK12RenderConfig12GetPerfIndexEj($this,$deviceIndex) {
 $this = $this|0;
 $deviceIndex = $deviceIndex|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep3 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $3 = $this;
 $4 = $deviceIndex;
 $5 = $3;
 $gep_int = $5;
 $gep = (($gep_int) + 596)|0;
 $6 = $gep;
 $7 = $4;
 $1 = $6;
 $2 = $7;
 $8 = $1;
 $9 = $2;
 $10 = $8;
 $gep_int1 = $8;
 $11 = $gep_int1;
 $12 = HEAP32[$11>>2]|0;
 $gep_int2 = $12;
 $gep_array = $9<<3;
 $gep3 = (($gep_int2) + ($gep_array))|0;
 $13 = $gep3;
 $14 = +HEAPF64[$13>>3];
 STACKTOP = sp;return +$14;
}
function __GLOBAL__I_a82() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init74();
 STACKTOP = sp;return;
}
function ___cxx_global_var_init123() {
 var $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep_int = 0, $gep_int4 = 0, label = 0, sp = 0, u$1 = 0;
 sp = STACKTOP;
 $expanded = 2416;
 __ZN2cl7NDRangeC1Ev($expanded);
 $expanded1 = 129;
 $gep_int = 2416;
 $expanded2 = $gep_int;
 $gep_int4 = ___dso_handle;
 $expanded3 = $gep_int4;
 u$1 = _atexit($expanded1|0,$expanded2|0,$expanded3|0)|0;
 STACKTOP = sp;return;
}
function __ZN12RenderDeviceC2ERKN2cl6DeviceERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEjP6CameraP6Spherej($this,$device,$kernelFileName,$forceGPUWorkSize,$camera,$spheres,$sceneSphereCount) {
 $this = $this|0;
 $device = $device|0;
 $kernelFileName = $kernelFileName|0;
 $forceGPUWorkSize = $forceGPUWorkSize|0;
 $camera = $camera|0;
 $spheres = $spheres|0;
 $sceneSphereCount = $sceneSphereCount|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $buildDevice = 0, $cps = 0, $devices = 0, $err = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0;
 var $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0;
 var $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded5 = 0, $expanded50 = 0, $expanded6 = 0;
 var $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep100 = 0, $gep105 = 0, $gep115 = 0, $gep122 = 0, $gep124 = 0, $gep136 = 0, $gep138 = 0, $gep140 = 0, $gep146 = 0, $gep148 = 0, $gep154 = 0, $gep156 = 0, $gep158 = 0, $gep164 = 0, $gep166 = 0, $gep168 = 0;
 var $gep173 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep82 = 0, $gep84 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep_array = 0, $gep_int = 0, $gep_int101 = 0, $gep_int102 = 0;
 var $gep_int103 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int107 = 0, $gep_int108 = 0, $gep_int109 = 0, $gep_int110 = 0, $gep_int111 = 0, $gep_int112 = 0, $gep_int113 = 0, $gep_int114 = 0, $gep_int116 = 0, $gep_int117 = 0, $gep_int118 = 0, $gep_int119 = 0, $gep_int120 = 0, $gep_int121 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int126 = 0;
 var $gep_int127 = 0, $gep_int128 = 0, $gep_int129 = 0, $gep_int130 = 0, $gep_int131 = 0, $gep_int132 = 0, $gep_int133 = 0, $gep_int134 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int139 = 0, $gep_int141 = 0, $gep_int142 = 0, $gep_int143 = 0, $gep_int144 = 0, $gep_int145 = 0, $gep_int147 = 0, $gep_int149 = 0, $gep_int150 = 0, $gep_int151 = 0;
 var $gep_int152 = 0, $gep_int153 = 0, $gep_int155 = 0, $gep_int157 = 0, $gep_int159 = 0, $gep_int160 = 0, $gep_int161 = 0, $gep_int162 = 0, $gep_int163 = 0, $gep_int165 = 0, $gep_int167 = 0, $gep_int169 = 0, $gep_int170 = 0, $gep_int171 = 0, $gep_int172 = 0, $gep_int174 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int54 = 0, $gep_int55 = 0;
 var $gep_int56 = 0, $gep_int57 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int79 = 0, $gep_int80 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int86 = 0, $gep_int88 = 0;
 var $gep_int90 = 0, $gep_int92 = 0, $gep_int93 = 0, $gep_int94 = 0, $gep_int95 = 0, $gep_int96 = 0, $gep_int97 = 0, $gep_int98 = 0, $gep_int99 = 0, $platform = 0, $program = 0, $prop = 0, $result = 0, $source = 0, $src = 0, $strError = 0, label = 0, sp = 0, u$130 = 0, u$150 = 0;
 var u$204 = 0, u$228 = 0, u$256 = 0, u$271 = 0, u$292 = 0, u$322 = 0, u$344 = 0, u$38 = 0, u$401 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 840|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $21 = sp + 160|0;
 $22 = sp + 168|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $platform = sp + 560|0;
 $devices = sp + 568|0;
 $cps = sp + 616|0;
 $prop = sp + 632|0;
 $src = sp + 640|0;
 $source = sp + 656|0;
 $69 = sp + 744|0;
 $program = sp + 752|0;
 $buildDevice = sp + 760|0;
 $result = sp + 808|0;
 $err = sp + 816|0;
 $strError = sp + 832|0;
 $60 = $this;
 $61 = $device;
 $62 = $kernelFileName;
 $63 = $forceGPUWorkSize;
 $64 = $camera;
 $65 = $spheres;
 $66 = $sceneSphereCount;
 $70 = $60;
 $gep_int = $70;
 $71 = $gep_int;
 $59 = $71;
 $72 = $59;
 $58 = $72;
 $73 = $58;
 $gep_int51 = $73;
 $74 = $gep_int51;
 $57 = $74;
 $75 = $57;
 $56 = $75;
 $76 = $56;
 $77 = $76;
 $55 = $77;
 $78 = $55;
 $79 = $78;
 $54 = $79;
 $53 = $73;
 $80 = $53;
 $gep_int53 = $80;
 $81 = $gep_int53;
 $52 = $81;
 $82 = $52;
 $83 = $82;
 $51 = $83;
 $84 = $51;
 $gep_int54 = $84;
 $85 = $gep_int54;
 $gep_int55 = $85;
 $86 = $gep_int55;
 $87 = $86;
 $gep_int56 = $86;
 $88 = $gep_int56;
 $__a$i$i$i = $88;
 $__i$i$i$i = 0;
 
 while(1) {
  $89 = $__i$i$i$i;
  $90 = ($89>>>0)<(3);
  
  if (!($90)) {
   break;
  }
  $91 = $__i$i$i$i;
  $92 = $__a$i$i$i;
  $gep_int57 = $92;
  $gep_array = $91<<2;
  $gep = (($gep_int57) + ($gep_array))|0;
  $93 = $gep;
  HEAP32[$93>>2] = 0;
  $94 = $__i$i$i$i;
  $95 = (($94) + 1)|0;
  $__i$i$i$i = $95;
  
 }
 $gep_int58 = $70;
 $gep59 = (($gep_int58) + 36)|0;
 $96 = $gep59;
 $97 = $66;
 HEAP32[$96>>2] = $97;
 $gep_int60 = $70;
 $gep61 = (($gep_int60) + 52)|0;
 $98 = $gep61;
 HEAP32[$98>>2] = 0;
 $gep_int62 = $70;
 $gep63 = (($gep_int62) + 56)|0;
 $99 = $gep63;
 HEAP32[$99>>2] = 0;
 $gep_int64 = $70;
 $gep65 = (($gep_int64) + 60)|0;
 $100 = $gep65;
 HEAP32[$100>>2] = 0;
 $gep_int66 = $70;
 $gep67 = (($gep_int66) + 72)|0;
 $101 = $gep67;
 HEAP32[$101>>2] = 0;
 $gep_int68 = $70;
 $gep69 = (($gep_int68) + 76)|0;
 $102 = $gep69;
 HEAP32[$102>>2] = 0;
 $gep_int70 = $70;
 $gep71 = (($gep_int70) + 80)|0;
 $103 = $gep71;
 HEAP32[$103>>2] = 0;
 $gep_int72 = $70;
 $gep73 = (($gep_int72) + 84)|0;
 $104 = $gep73;
 __THREW__ = 0;
 invoke_vi(152,$104|0);
 $105 = __THREW__; __THREW__ = 0;
 $106 = $105&1;
 
 do {
  if ($106) {
   $expanded6 = 69;
   $299 = ___cxa_find_matching_catch(-1,-1)|0;
   $300 = tempRet0;
   $67 = $299;
   $68 = $300;
   
  } else {
   $gep_int74 = $70;
   $gep75 = (($gep_int74) + 88)|0;
   $107 = $gep75;
   HEAPF64[$107>>3] = 0.000000e+00;
   $gep_int76 = $70;
   $gep77 = (($gep_int76) + 96)|0;
   $108 = $gep77;
   HEAPF64[$108>>3] = 0.000000e+00;
   $gep_int78 = $70;
   $109 = $gep_int78;
   $49 = $109;
   $gep_int79 = 2440;
   $expanded = $gep_int79;
   $50 = $expanded;
   $110 = $49;
   $111 = $50;
   __THREW__ = 0;
   u$38 = invoke_iii(24,$110|0,$111|0)|0;
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   
   L7: do {
    if ($113) {
     label = 42;
    } else {
     
     $114 = $61;
     __THREW__ = 0;
     $115 = invoke_iii(30,$114|0,0)|0;
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     
     if ($117) {
      label = 42;
      break;
     }
     __THREW__ = 0;
     invoke_vii(57,$platform|0,$115|0);
     $118 = __THREW__; __THREW__ = 0;
     $119 = $118&1;
     
     if ($119) {
      label = 42;
      break;
     }
     __THREW__ = 0;
     invoke_vi(137,$devices|0);
     $120 = __THREW__; __THREW__ = 0;
     $121 = $120&1;
     
     L12: do {
      if ($121) {
       label = 43;
      } else {
       $122 = $61;
       __THREW__ = 0;
       invoke_vii(46,$devices|0,$122|0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       
       L14: do {
        if ($124) {
         label = 44;
        } else {
         $gep_int80 = $cps;
         $125 = $gep_int80;
         HEAP32[$125>>2] = 4228;
         $gep_int81 = $125;
         $gep82 = (($gep_int81) + 4)|0;
         $126 = $gep82;
         $127 = $platform;
         __THREW__ = 0;
         $128 = invoke_ii(81,$127|0)|0;
         $129 = __THREW__; __THREW__ = 0;
         $130 = $129&1;
         
         if ($130) {
          label = 44;
          break;
         }
         $131 = HEAP32[$128>>2]|0;
         $132 = $131;
         HEAP32[$126>>2] = $132;
         $gep_int83 = $126;
         $gep84 = (($gep_int83) + 4)|0;
         $133 = $gep84;
         HEAP32[$133>>2] = 0;
         __THREW__ = 0;
         $134 = invoke_ii(70,4)|0;
         $135 = __THREW__; __THREW__ = 0;
         $136 = $135&1;
         
         if ($136) {
          label = 44;
          break;
         }
         $137 = $134;
         $gep_int85 = $cps;
         $138 = $gep_int85;
         __THREW__ = 0;
         invoke_viiiiii(17,$137|0,$devices|0,$138|0,0,0,0);
         $139 = __THREW__; __THREW__ = 0;
         $140 = $139&1;
         
         if ($140) {
          $expanded10 = 69;
          $307 = ___cxa_find_matching_catch(-1,-1)|0;
          $308 = tempRet0;
          $67 = $307;
          $68 = $308;
          __ZdlPv($134);
          
          break;
         }
         $gep_int86 = $70;
         $gep87 = (($gep_int86) + 12)|0;
         $141 = $gep87;
         HEAP32[$141>>2] = $137;
         $142 = $prop;
         $143 = $142;
         HEAP32[$143>>2] = 2;
         $144 = (($142) + 4)|0;
         $145 = $144;
         HEAP32[$145>>2] = 0;
         __THREW__ = 0;
         $146 = invoke_ii(70,4)|0;
         $147 = __THREW__; __THREW__ = 0;
         $148 = $147&1;
         
         if ($148) {
          label = 44;
          break;
         }
         $149 = $146;
         $gep_int88 = $70;
         $gep89 = (($gep_int88) + 12)|0;
         $150 = $gep89;
         $151 = HEAP32[$150>>2]|0;
         $152 = $61;
         $153 = $prop;
         $154 = $153;
         $155 = HEAP32[$154>>2]|0;
         $156 = (($153) + 4)|0;
         $157 = $156;
         $158 = HEAP32[$157>>2]|0;
         __THREW__ = 0;
         invoke_viiiiii(18,$149|0,$151|0,$152|0,$155|0,$158|0,0);
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         
         if ($160) {
          $expanded11 = 69;
          $309 = ___cxa_find_matching_catch(-1,-1)|0;
          $310 = tempRet0;
          $67 = $309;
          $68 = $310;
          __ZdlPv($146);
          
          break;
         }
         $gep_int90 = $70;
         $gep91 = (($gep_int90) + 16)|0;
         $161 = $gep91;
         HEAP32[$161>>2] = $149;
         $162 = $62;
         __THREW__ = 0;
         invoke_viii(10,$src|0,$70|0,$162|0);
         $163 = __THREW__; __THREW__ = 0;
         $164 = $163&1;
         
         if ($164) {
          label = 44;
          break;
         }
         $48 = $src;
         $165 = $48;
         $47 = $165;
         $166 = $47;
         $46 = $166;
         $167 = $46;
         $45 = $167;
         $168 = $45;
         $gep_int92 = $168;
         $169 = $gep_int92;
         $44 = $169;
         $170 = $44;
         $171 = $170;
         $43 = $171;
         $172 = $43;
         $gep_int93 = $172;
         $173 = $gep_int93;
         $gep_int94 = $173;
         $174 = $gep_int94;
         $175 = $174;
         $gep_int95 = $174;
         $176 = $gep_int95;
         $177 = $176;
         $178 = HEAP8[$176]|0;
         $179 = $178&255;
         $180 = $179 & 1;
         $181 = ($180|0)!=(0);
         
         if ($181) {
          $37 = $167;
          $182 = $37;
          $gep_int96 = $182;
          $183 = $gep_int96;
          $36 = $183;
          $184 = $36;
          $185 = $184;
          $35 = $185;
          $186 = $35;
          $gep_int97 = $186;
          $187 = $gep_int97;
          $gep_int98 = $187;
          $188 = $gep_int98;
          $189 = $188;
          $gep_int99 = $188;
          $gep100 = (($gep_int99) + 8)|0;
          $190 = $gep100;
          $191 = HEAP32[$190>>2]|0;
          
          $204 = $191;
         } else {
          $42 = $167;
          $192 = $42;
          $gep_int101 = $192;
          $193 = $gep_int101;
          $41 = $193;
          $194 = $41;
          $195 = $194;
          $40 = $195;
          $196 = $40;
          $gep_int102 = $196;
          $197 = $gep_int102;
          $gep_int103 = $197;
          $198 = $gep_int103;
          $199 = $198;
          $gep_int104 = $198;
          $gep105 = (($gep_int104) + 1)|0;
          $200 = $gep105;
          $gep_int106 = $200;
          $201 = $gep_int106;
          $39 = $201;
          $202 = $39;
          $38 = $202;
          $203 = $38;
          
          $204 = $203;
         }
         
         $34 = $204;
         $205 = $34;
         $33 = $src;
         $206 = $33;
         $32 = $206;
         $207 = $32;
         $31 = $207;
         $208 = $31;
         $gep_int107 = $208;
         $209 = $gep_int107;
         $30 = $209;
         $210 = $30;
         $211 = $210;
         $29 = $211;
         $212 = $29;
         $gep_int108 = $212;
         $213 = $gep_int108;
         $gep_int109 = $213;
         $214 = $gep_int109;
         $215 = $214;
         $gep_int110 = $214;
         $216 = $gep_int110;
         $217 = $216;
         $218 = HEAP8[$216]|0;
         $219 = $218&255;
         $220 = $219 & 1;
         $221 = ($220|0)!=(0);
         
         if ($221) {
          $25 = $207;
          $222 = $25;
          $gep_int111 = $222;
          $223 = $gep_int111;
          $24 = $223;
          $224 = $24;
          $225 = $224;
          $23 = $225;
          $226 = $23;
          $gep_int112 = $226;
          $227 = $gep_int112;
          $gep_int113 = $227;
          $228 = $gep_int113;
          $229 = $228;
          $gep_int114 = $228;
          $gep115 = (($gep_int114) + 4)|0;
          $230 = $gep115;
          $231 = HEAP32[$230>>2]|0;
          
          $245 = $231;
         } else {
          $28 = $207;
          $232 = $28;
          $gep_int116 = $232;
          $233 = $gep_int116;
          $27 = $233;
          $234 = $27;
          $235 = $234;
          $26 = $235;
          $236 = $26;
          $gep_int117 = $236;
          $237 = $gep_int117;
          $gep_int118 = $237;
          $238 = $gep_int118;
          $239 = $238;
          $gep_int119 = $238;
          $240 = $gep_int119;
          $241 = $240;
          $242 = HEAP8[$240]|0;
          $243 = $242&255;
          $244 = $243 >> 1;
          
          $245 = $244;
         }
         
         HEAP32[$21>>2] = $205;
         HEAP32[$22>>2] = $245;
         $18 = $69;
         $19 = $21;
         $20 = $22;
         $246 = $18;
         $247 = $19;
         $248 = $20;
         $15 = $246;
         $16 = $247;
         $17 = $248;
         $249 = $15;
         $gep_int120 = $249;
         $250 = $gep_int120;
         $251 = $16;
         $252 = HEAP32[$251>>2]|0;
         HEAP32[$250>>2] = $252;
         $gep_int121 = $249;
         $gep122 = (($gep_int121) + 4)|0;
         $253 = $gep122;
         $254 = $17;
         $255 = HEAP32[$254>>2]|0;
         HEAP32[$253>>2] = $255;
         
         __THREW__ = 0;
         invoke_viii(11,$source|0,1,$69|0);
         $256 = __THREW__; __THREW__ = 0;
         $257 = $256&1;
         
         L35: do {
          if ($257) {
           label = 47;
          } else {
           $gep_int123 = $70;
           $gep124 = (($gep_int123) + 12)|0;
           $258 = $gep124;
           $259 = HEAP32[$258>>2]|0;
           __THREW__ = 0;
           invoke_viiii(11,$program|0,$259|0,$source|0,0);
           $260 = __THREW__; __THREW__ = 0;
           $261 = $260&1;
           
           L37: do {
            if ($261) {
             label = 48;
            } else {
             __THREW__ = 0;
             invoke_vi(137,$buildDevice|0);
             $262 = __THREW__; __THREW__ = 0;
             $263 = $262&1;
             
             L39: do {
              if ($263) {
               label = 49;
              } else {
               $264 = $61;
               __THREW__ = 0;
               invoke_vii(46,$buildDevice|0,$264|0);
               $265 = __THREW__; __THREW__ = 0;
               $266 = $265&1;
               
               L41: do {
                if ($266) {
                 label = 50;
                } else {
                 __THREW__ = 0;
                 $gep_int125 = 2456;
                 $expanded1 = $gep_int125;
                 u$130 = invoke_iiiiii(14,$program|0,$buildDevice|0,$expanded1|0,0,0)|0;
                 $267 = __THREW__; __THREW__ = 0;
                 $268 = $267&1;
                 
                 if ($268) {
                  label = 50;
                  break;
                 }
                 $269 = $61;
                 __THREW__ = 0;
                 invoke_viiii(12,$result|0,$program|0,$269|0,0);
                 $270 = __THREW__; __THREW__ = 0;
                 $271 = $270&1;
                 
                 if ($271) {
                  label = 50;
                  break;
                 }
                 __THREW__ = 0;
                 $expanded2 = 3824;
                 $gep_int126 = 2464;
                 $expanded3 = $gep_int126;
                 $272 = invoke_iii(17,$expanded2|0,$expanded3|0)|0;
                 $273 = __THREW__; __THREW__ = 0;
                 $274 = $273&1;
                 
                 do {
                  if (!($274)) {
                   $gep_int127 = $70;
                   $275 = $gep_int127;
                   __THREW__ = 0;
                   $276 = invoke_iii(25,$272|0,$275|0)|0;
                   $277 = __THREW__; __THREW__ = 0;
                   $278 = $277&1;
                   
                   if ($278) {
                    break;
                   }
                   __THREW__ = 0;
                   $gep_int128 = 2480;
                   $expanded4 = $gep_int128;
                   $279 = invoke_iii(17,$276|0,$expanded4|0)|0;
                   $280 = __THREW__; __THREW__ = 0;
                   $281 = $280&1;
                   
                   if ($281) {
                    break;
                   }
                   __THREW__ = 0;
                   $gep_int129 = 2488;
                   $expanded5 = $gep_int129;
                   $282 = invoke_iii(17,$279|0,$expanded5|0)|0;
                   $283 = __THREW__; __THREW__ = 0;
                   $284 = $283&1;
                   
                   if ($284) {
                    break;
                   }
                   __THREW__ = 0;
                   $285 = invoke_ii(82,$result|0)|0;
                   $286 = __THREW__; __THREW__ = 0;
                   $287 = $286&1;
                   
                   if ($287) {
                    break;
                   }
                   __THREW__ = 0;
                   $288 = invoke_iii(17,$282|0,$285|0)|0;
                   $289 = __THREW__; __THREW__ = 0;
                   $290 = $289&1;
                   
                   if ($290) {
                    break;
                   }
                   $13 = $288;
                   $14 = 67;
                   $291 = $13;
                   $292 = $14;
                   __THREW__ = 0;
                   u$150 = invoke_ii($292|0,$291|0)|0;
                   $293 = __THREW__; __THREW__ = 0;
                   $294 = $293&1;
                   
                   if ($294) {
                    break;
                   }
                   
                   __THREW__ = 0;
                   invoke_vi(153,$result|0);
                   $295 = __THREW__; __THREW__ = 0;
                   $296 = $295&1;
                   
                   if ($296) {
                    label = 50;
                    break L41;
                   }
                   __THREW__ = 0;
                   invoke_vi(139,$buildDevice|0);
                   $297 = __THREW__; __THREW__ = 0;
                   $298 = $297&1;
                   
                   if ($298) {
                    label = 49;
                    break L39;
                   }
                   
                   __THREW__ = 0;
                   $374 = invoke_ii(70,4)|0;
                   $375 = __THREW__; __THREW__ = 0;
                   $376 = $375&1;
                   
                   L57: do {
                    if (!($376)) {
                     $377 = $374;
                     __THREW__ = 0;
                     $gep_int134 = 2536;
                     $expanded29 = $gep_int134;
                     invoke_viiii(13,$377|0,$program|0,$expanded29|0,0);
                     $378 = __THREW__; __THREW__ = 0;
                     $379 = $378&1;
                     
                     if ($379) {
                      $expanded39 = 69;
                      $445 = ___cxa_find_matching_catch(-1,-1)|0;
                      $446 = tempRet0;
                      $67 = $445;
                      $68 = $446;
                      __ZdlPv($374);
                      
                      break L39;
                     }
                     $gep_int135 = $70;
                     $gep136 = (($gep_int135) + 20)|0;
                     $380 = $gep136;
                     HEAP32[$380>>2] = $377;
                     $gep_int137 = $70;
                     $gep138 = (($gep_int137) + 20)|0;
                     $381 = $gep138;
                     $382 = HEAP32[$381>>2]|0;
                     $383 = $61;
                     $gep_int139 = $70;
                     $gep140 = (($gep_int139) + 24)|0;
                     $384 = $gep140;
                     __THREW__ = 0;
                     u$256 = invoke_iiiii(7,$382|0,$383|0,4528,$384|0)|0;
                     $385 = __THREW__; __THREW__ = 0;
                     $386 = $385&1;
                     
                     if ($386) {
                      break;
                     }
                     __THREW__ = 0;
                     $expanded30 = 3824;
                     $gep_int141 = 2464;
                     $expanded31 = $gep_int141;
                     $387 = invoke_iii(17,$expanded30|0,$expanded31|0)|0;
                     $388 = __THREW__; __THREW__ = 0;
                     $389 = $388&1;
                     
                     if ($389) {
                      break;
                     }
                     $gep_int142 = $70;
                     $390 = $gep_int142;
                     __THREW__ = 0;
                     $391 = invoke_iii(25,$387|0,$390|0)|0;
                     $392 = __THREW__; __THREW__ = 0;
                     $393 = $392&1;
                     
                     if ($393) {
                      break;
                     }
                     __THREW__ = 0;
                     $gep_int143 = 2480;
                     $expanded32 = $gep_int143;
                     $394 = invoke_iii(17,$391|0,$expanded32|0)|0;
                     $395 = __THREW__; __THREW__ = 0;
                     $396 = $395&1;
                     
                     if ($396) {
                      break;
                     }
                     __THREW__ = 0;
                     $gep_int144 = 2552;
                     $expanded33 = $gep_int144;
                     $397 = invoke_iii(17,$394|0,$expanded33|0)|0;
                     $398 = __THREW__; __THREW__ = 0;
                     $399 = $398&1;
                     
                     if ($399) {
                      break;
                     }
                     $gep_int145 = $70;
                     $gep146 = (($gep_int145) + 24)|0;
                     $400 = $gep146;
                     $401 = HEAP32[$400>>2]|0;
                     __THREW__ = 0;
                     $402 = invoke_iii(20,$397|0,$401|0)|0;
                     $403 = __THREW__; __THREW__ = 0;
                     $404 = $403&1;
                     
                     if ($404) {
                      break;
                     }
                     $7 = $402;
                     $8 = 67;
                     $405 = $7;
                     $406 = $8;
                     __THREW__ = 0;
                     u$271 = invoke_ii($406|0,$405|0)|0;
                     $407 = __THREW__; __THREW__ = 0;
                     $408 = $407&1;
                     
                     if ($408) {
                      break;
                     }
                     
                     $409 = $63;
                     $410 = ($409>>>0)>(0);
                     
                     do {
                      if ($410) {
                       $411 = $61;
                       __THREW__ = 0;
                       $412 = invoke_iii(23,$411|0,0)|0;
                       $413 = tempRet0;
                       $414 = __THREW__; __THREW__ = 0;
                       $415 = $414&1;
                       
                       if ($415) {
                        break L57;
                       }
                       $416 = ($412|0)==(4);
                       $417 = ($413|0)==(0);
                       $418 = $416 & $417;
                       
                       if (!($418)) {
                        break;
                       }
                       $419 = $63;
                       $gep_int147 = $70;
                       $gep148 = (($gep_int147) + 24)|0;
                       $420 = $gep148;
                       HEAP32[$420>>2] = $419;
                       __THREW__ = 0;
                       $expanded34 = 3824;
                       $gep_int149 = 2464;
                       $expanded35 = $gep_int149;
                       $421 = invoke_iii(17,$expanded34|0,$expanded35|0)|0;
                       $422 = __THREW__; __THREW__ = 0;
                       $423 = $422&1;
                       
                       if ($423) {
                        break L57;
                       }
                       $gep_int150 = $70;
                       $424 = $gep_int150;
                       __THREW__ = 0;
                       $425 = invoke_iii(25,$421|0,$424|0)|0;
                       $426 = __THREW__; __THREW__ = 0;
                       $427 = $426&1;
                       
                       if ($427) {
                        break L57;
                       }
                       __THREW__ = 0;
                       $gep_int151 = 2480;
                       $expanded36 = $gep_int151;
                       $428 = invoke_iii(17,$425|0,$expanded36|0)|0;
                       $429 = __THREW__; __THREW__ = 0;
                       $430 = $429&1;
                       
                       if ($430) {
                        break L57;
                       }
                       __THREW__ = 0;
                       $gep_int152 = 2584;
                       $expanded37 = $gep_int152;
                       $431 = invoke_iii(17,$428|0,$expanded37|0)|0;
                       $432 = __THREW__; __THREW__ = 0;
                       $433 = $432&1;
                       
                       if ($433) {
                        break L57;
                       }
                       $gep_int153 = $70;
                       $gep154 = (($gep_int153) + 24)|0;
                       $434 = $gep154;
                       $435 = HEAP32[$434>>2]|0;
                       __THREW__ = 0;
                       $436 = invoke_iii(20,$431|0,$435|0)|0;
                       $437 = __THREW__; __THREW__ = 0;
                       $438 = $437&1;
                       
                       if ($438) {
                        break L57;
                       }
                       $5 = $436;
                       $6 = 67;
                       $439 = $5;
                       $440 = $6;
                       __THREW__ = 0;
                       u$292 = invoke_ii($440|0,$439|0)|0;
                       $441 = __THREW__; __THREW__ = 0;
                       $442 = $441&1;
                       
                       if ($442) {
                        break L57;
                       }
                       
                       
                      }
                     } while(0);
                     __THREW__ = 0;
                     $447 = invoke_ii(70,4)|0;
                     $448 = __THREW__; __THREW__ = 0;
                     $449 = $448&1;
                     
                     if ($449) {
                      break;
                     }
                     $450 = $447;
                     $gep_int155 = $70;
                     $gep156 = (($gep_int155) + 12)|0;
                     $451 = $gep156;
                     $452 = HEAP32[$451>>2]|0;
                     $453 = $64;
                     $454 = $453;
                     __THREW__ = 0;
                     invoke_viiiiiii(42,$450|0,$452|0,12,0,60,$454|0,0);
                     $455 = __THREW__; __THREW__ = 0;
                     $456 = $455&1;
                     
                     if ($456) {
                      $expanded48 = 69;
                      $526 = ___cxa_find_matching_catch(-1,-1)|0;
                      $527 = tempRet0;
                      $67 = $526;
                      $68 = $527;
                      __ZdlPv($447);
                      
                      break L39;
                     }
                     $gep_int157 = $70;
                     $gep158 = (($gep_int157) + 68)|0;
                     $457 = $gep158;
                     HEAP32[$457>>2] = $450;
                     __THREW__ = 0;
                     $expanded40 = 3824;
                     $gep_int159 = 2464;
                     $expanded41 = $gep_int159;
                     $458 = invoke_iii(17,$expanded40|0,$expanded41|0)|0;
                     $459 = __THREW__; __THREW__ = 0;
                     $460 = $459&1;
                     
                     if ($460) {
                      break;
                     }
                     $gep_int160 = $70;
                     $461 = $gep_int160;
                     __THREW__ = 0;
                     $462 = invoke_iii(25,$458|0,$461|0)|0;
                     $463 = __THREW__; __THREW__ = 0;
                     $464 = $463&1;
                     
                     if ($464) {
                      break;
                     }
                     __THREW__ = 0;
                     $gep_int161 = 2616;
                     $expanded42 = $gep_int161;
                     $465 = invoke_iii(17,$462|0,$expanded42|0)|0;
                     $466 = __THREW__; __THREW__ = 0;
                     $467 = $466&1;
                     
                     if ($467) {
                      break;
                     }
                     __THREW__ = 0;
                     $468 = invoke_iii(20,$465|0,0)|0;
                     $469 = __THREW__; __THREW__ = 0;
                     $470 = $469&1;
                     
                     if ($470) {
                      break;
                     }
                     __THREW__ = 0;
                     $gep_int162 = 2640;
                     $expanded43 = $gep_int162;
                     $471 = invoke_iii(17,$468|0,$expanded43|0)|0;
                     $472 = __THREW__; __THREW__ = 0;
                     $473 = $472&1;
                     
                     if ($473) {
                      break;
                     }
                     $3 = $471;
                     $4 = 67;
                     $474 = $3;
                     $475 = $4;
                     __THREW__ = 0;
                     u$322 = invoke_ii($475|0,$474|0)|0;
                     $476 = __THREW__; __THREW__ = 0;
                     $477 = $476&1;
                     
                     if ($477) {
                      break;
                     }
                     
                     __THREW__ = 0;
                     $478 = invoke_ii(70,4)|0;
                     $479 = __THREW__; __THREW__ = 0;
                     $480 = $479&1;
                     
                     if ($480) {
                      break;
                     }
                     $481 = $478;
                     $gep_int163 = $70;
                     $gep164 = (($gep_int163) + 12)|0;
                     $482 = $gep164;
                     $483 = HEAP32[$482>>2]|0;
                     $gep_int165 = $70;
                     $gep166 = (($gep_int165) + 36)|0;
                     $484 = $gep166;
                     $485 = HEAP32[$484>>2]|0;
                     $486 = ($485*44)|0;
                     $487 = $65;
                     $488 = $487;
                     __THREW__ = 0;
                     invoke_viiiiiii(42,$481|0,$483|0,12,0,$486|0,$488|0,0);
                     $489 = __THREW__; __THREW__ = 0;
                     $490 = $489&1;
                     
                     if ($490) {
                      $expanded49 = 69;
                      $528 = ___cxa_find_matching_catch(-1,-1)|0;
                      $529 = tempRet0;
                      $67 = $528;
                      $68 = $529;
                      __ZdlPv($478);
                      
                      break L39;
                     }
                     $gep_int167 = $70;
                     $gep168 = (($gep_int167) + 64)|0;
                     $491 = $gep168;
                     HEAP32[$491>>2] = $481;
                     __THREW__ = 0;
                     $expanded44 = 3824;
                     $gep_int169 = 2464;
                     $expanded45 = $gep_int169;
                     $492 = invoke_iii(17,$expanded44|0,$expanded45|0)|0;
                     $493 = __THREW__; __THREW__ = 0;
                     $494 = $493&1;
                     
                     if ($494) {
                      break;
                     }
                     $gep_int170 = $70;
                     $495 = $gep_int170;
                     __THREW__ = 0;
                     $496 = invoke_iii(25,$492|0,$495|0)|0;
                     $497 = __THREW__; __THREW__ = 0;
                     $498 = $497&1;
                     
                     if ($498) {
                      break;
                     }
                     __THREW__ = 0;
                     $gep_int171 = 2648;
                     $expanded46 = $gep_int171;
                     $499 = invoke_iii(17,$496|0,$expanded46|0)|0;
                     $500 = __THREW__; __THREW__ = 0;
                     $501 = $500&1;
                     
                     if ($501) {
                      break;
                     }
                     $gep_int172 = $70;
                     $gep173 = (($gep_int172) + 36)|0;
                     $502 = $gep173;
                     $503 = HEAP32[$502>>2]|0;
                     $504 = ($503*44)|0;
                     $505 = (($504>>>0) / 1024)&-1;
                     __THREW__ = 0;
                     $506 = invoke_iii(20,$499|0,$505|0)|0;
                     $507 = __THREW__; __THREW__ = 0;
                     $508 = $507&1;
                     
                     if ($508) {
                      break;
                     }
                     __THREW__ = 0;
                     $gep_int174 = 2640;
                     $expanded47 = $gep_int174;
                     $509 = invoke_iii(17,$506|0,$expanded47|0)|0;
                     $510 = __THREW__; __THREW__ = 0;
                     $511 = $510&1;
                     
                     if ($511) {
                      break;
                     }
                     $1 = $509;
                     $2 = 67;
                     $512 = $1;
                     $513 = $2;
                     __THREW__ = 0;
                     u$344 = invoke_ii($513|0,$512|0)|0;
                     $514 = __THREW__; __THREW__ = 0;
                     $515 = $514&1;
                     
                     if ($515) {
                      break;
                     }
                     
                     __THREW__ = 0;
                     invoke_vi(154,$program|0);
                     $516 = __THREW__; __THREW__ = 0;
                     $517 = $516&1;
                     
                     if ($517) {
                      label = 48;
                      break L37;
                     }
                     __THREW__ = 0;
                     invoke_vi(155,$source|0);
                     $518 = __THREW__; __THREW__ = 0;
                     $519 = $518&1;
                     
                     if ($519) {
                      label = 47;
                      break L35;
                     }
                     __THREW__ = 0;
                     invoke_vi(131,$src|0);
                     $520 = __THREW__; __THREW__ = 0;
                     $521 = $520&1;
                     
                     if ($521) {
                      label = 44;
                      break L14;
                     }
                     __THREW__ = 0;
                     invoke_vi(139,$devices|0);
                     $522 = __THREW__; __THREW__ = 0;
                     $523 = $522&1;
                     
                     if ($523) {
                      label = 43;
                      break L12;
                     }
                     __THREW__ = 0;
                     invoke_vi(140,$platform|0);
                     $524 = __THREW__; __THREW__ = 0;
                     $525 = $524&1;
                     
                     if ($525) {
                      label = 42;
                      break L7;
                     }
                     STACKTOP = sp;return;
                    }
                   } while(0);
                   $expanded38 = 69;
                   $443 = ___cxa_find_matching_catch(-1,-1)|0;
                   $444 = tempRet0;
                   $67 = $443;
                   $68 = $444;
                   
                   break L39;
                  }
                 } while(0);
                 $expanded18 = 69;
                 $expanded19 = 48;
                 $319 = ___cxa_find_matching_catch(-1,-1,$expanded19|0)|0;
                 $320 = tempRet0;
                 $67 = $319;
                 $68 = $320;
                 __THREW__ = 0;
                 invoke_vi(153,$result|0);
                 $321 = __THREW__; __THREW__ = 0;
                 $322 = $321&1;
                 
                 if ($322) {
                  $expanded50 = 69;
                  $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
                  u$401 = tempRet0;
                  ___clang_call_terminate($546);
                  // unreachable
                 } else {
                  
                  break;
                 }
                }
               } while(0);
               if ((label|0) == 50) {
                $expanded16 = 69;
                $expanded17 = 48;
                $317 = ___cxa_find_matching_catch(-1,-1,$expanded17|0)|0;
                $318 = tempRet0;
                $67 = $317;
                $68 = $318;
                
               }
               __THREW__ = 0;
               invoke_vi(139,$buildDevice|0);
               $323 = __THREW__; __THREW__ = 0;
               $324 = $323&1;
               
               if ($324) {
                $expanded50 = 69;
                $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
                u$401 = tempRet0;
                ___clang_call_terminate($546);
                // unreachable
               } else {
                
                label = 55;
                break;
               }
              }
             } while(0);
             if ((label|0) == 49) {
              $expanded14 = 69;
              $expanded15 = 48;
              $315 = ___cxa_find_matching_catch(-1,-1,$expanded15|0)|0;
              $316 = tempRet0;
              $67 = $315;
              $68 = $316;
              
              label = 55;
             }
             do {
              if ((label|0) == 55) {
               $325 = $68;
               $expanded20 = 48;
               $326 = _llvm_eh_typeid_for($expanded20|0)|0;
               $327 = ($325|0)==($326|0);
               
               if (!($327)) {
                break;
               }
               $328 = $67;
               $329 = ___cxa_get_exception_ptr($328|0)|0;
               $330 = $329;
               __ZN2cl5ErrorC1ERKS0_($err,$330);
               u$204 = ___cxa_begin_catch($328|0)|0;
               $331 = $61;
               __THREW__ = 0;
               invoke_viiii(12,$strError|0,$program|0,$331|0,0);
               $332 = __THREW__; __THREW__ = 0;
               $333 = $332&1;
               
               do {
                if ($333) {
                 $expanded27 = 69;
                 $366 = ___cxa_find_matching_catch(-1,-1)|0;
                 $367 = tempRet0;
                 $67 = $366;
                 $68 = $367;
                 
                } else {
                 __THREW__ = 0;
                 $expanded21 = 3824;
                 $gep_int130 = 2464;
                 $expanded22 = $gep_int130;
                 $334 = invoke_iii(17,$expanded21|0,$expanded22|0)|0;
                 $335 = __THREW__; __THREW__ = 0;
                 $336 = $335&1;
                 
                 do {
                  if (!($336)) {
                   $gep_int131 = $70;
                   $337 = $gep_int131;
                   __THREW__ = 0;
                   $338 = invoke_iii(25,$334|0,$337|0)|0;
                   $339 = __THREW__; __THREW__ = 0;
                   $340 = $339&1;
                   
                   if ($340) {
                    break;
                   }
                   __THREW__ = 0;
                   $gep_int132 = 2480;
                   $expanded23 = $gep_int132;
                   $341 = invoke_iii(17,$338|0,$expanded23|0)|0;
                   $342 = __THREW__; __THREW__ = 0;
                   $343 = $342&1;
                   
                   if ($343) {
                    break;
                   }
                   __THREW__ = 0;
                   $gep_int133 = 2512;
                   $expanded24 = $gep_int133;
                   $344 = invoke_iii(17,$341|0,$expanded24|0)|0;
                   $345 = __THREW__; __THREW__ = 0;
                   $346 = $345&1;
                   
                   if ($346) {
                    break;
                   }
                   $11 = $344;
                   $12 = 67;
                   $347 = $11;
                   $348 = $12;
                   __THREW__ = 0;
                   $349 = invoke_ii($348|0,$347|0)|0;
                   $350 = __THREW__; __THREW__ = 0;
                   $351 = $350&1;
                   
                   if ($351) {
                    break;
                   }
                   
                   __THREW__ = 0;
                   $352 = invoke_ii(82,$strError|0)|0;
                   $353 = __THREW__; __THREW__ = 0;
                   $354 = $353&1;
                   
                   if ($354) {
                    break;
                   }
                   __THREW__ = 0;
                   $355 = invoke_iii(17,$349|0,$352|0)|0;
                   $356 = __THREW__; __THREW__ = 0;
                   $357 = $356&1;
                   
                   if ($357) {
                    break;
                   }
                   $9 = $355;
                   $10 = 67;
                   $358 = $9;
                   $359 = $10;
                   __THREW__ = 0;
                   u$228 = invoke_ii($359|0,$358|0)|0;
                   $360 = __THREW__; __THREW__ = 0;
                   $361 = $360&1;
                   
                   if ($361) {
                    break;
                   }
                   
                   $362 = ___cxa_allocate_exception(12)|0;
                   $363 = $362;
                   __ZN2cl5ErrorC1ERKS0_($363,$err);
                   __THREW__ = 0;
                   $expanded25 = 48;
                   $expanded26 = 1;
                   invoke_viii(5,$362|0,$expanded25|0,$expanded26|0);
                   $364 = __THREW__; __THREW__ = 0;
                   $365 = $364&1;
                   
                   if ($365) {
                    break;
                   }
                   // unreachable
                  }
                 } while(0);
                 $expanded28 = 69;
                 $368 = ___cxa_find_matching_catch(-1,-1)|0;
                 $369 = tempRet0;
                 $67 = $368;
                 $68 = $369;
                 __THREW__ = 0;
                 invoke_vi(153,$strError|0);
                 $370 = __THREW__; __THREW__ = 0;
                 $371 = $370&1;
                 
                 if ($371) {
                  $expanded50 = 69;
                  $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
                  u$401 = tempRet0;
                  ___clang_call_terminate($546);
                  // unreachable
                 } else {
                  
                  break;
                 }
                }
               } while(0);
               __ZN2cl5ErrorD1Ev($err);
               __THREW__ = 0;
               invoke_v(2);
               $372 = __THREW__; __THREW__ = 0;
               $373 = $372&1;
               
               if ($373) {
                $expanded50 = 69;
                $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
                u$401 = tempRet0;
                ___clang_call_terminate($546);
                // unreachable
               } else {
                
                break;
               }
              }
             } while(0);
             __THREW__ = 0;
             invoke_vi(154,$program|0);
             $530 = __THREW__; __THREW__ = 0;
             $531 = $530&1;
             
             if ($531) {
              $expanded50 = 69;
              $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
              u$401 = tempRet0;
              ___clang_call_terminate($546);
              // unreachable
             } else {
              
              break;
             }
            }
           } while(0);
           if ((label|0) == 48) {
            $expanded13 = 69;
            $313 = ___cxa_find_matching_catch(-1,-1)|0;
            $314 = tempRet0;
            $67 = $313;
            $68 = $314;
            
           }
           __THREW__ = 0;
           invoke_vi(155,$source|0);
           $532 = __THREW__; __THREW__ = 0;
           $533 = $532&1;
           
           if ($533) {
            $expanded50 = 69;
            $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
            u$401 = tempRet0;
            ___clang_call_terminate($546);
            // unreachable
           } else {
            
            break;
           }
          }
         } while(0);
         if ((label|0) == 47) {
          $expanded12 = 69;
          $311 = ___cxa_find_matching_catch(-1,-1)|0;
          $312 = tempRet0;
          $67 = $311;
          $68 = $312;
          
         }
         __THREW__ = 0;
         invoke_vi(131,$src|0);
         $534 = __THREW__; __THREW__ = 0;
         $535 = $534&1;
         
         if ($535) {
          $expanded50 = 69;
          $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
          u$401 = tempRet0;
          ___clang_call_terminate($546);
          // unreachable
         } else {
          
          break;
         }
        }
       } while(0);
       if ((label|0) == 44) {
        $expanded9 = 69;
        $305 = ___cxa_find_matching_catch(-1,-1)|0;
        $306 = tempRet0;
        $67 = $305;
        $68 = $306;
        
       }
       __THREW__ = 0;
       invoke_vi(139,$devices|0);
       $536 = __THREW__; __THREW__ = 0;
       $537 = $536&1;
       
       if ($537) {
        $expanded50 = 69;
        $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
        u$401 = tempRet0;
        ___clang_call_terminate($546);
        // unreachable
       } else {
        
        break;
       }
      }
     } while(0);
     if ((label|0) == 43) {
      $expanded8 = 69;
      $303 = ___cxa_find_matching_catch(-1,-1)|0;
      $304 = tempRet0;
      $67 = $303;
      $68 = $304;
      
     }
     __THREW__ = 0;
     invoke_vi(140,$platform|0);
     $538 = __THREW__; __THREW__ = 0;
     $539 = $538&1;
     
     if ($539) {
      $expanded50 = 69;
      $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$401 = tempRet0;
      ___clang_call_terminate($546);
      // unreachable
     } else {
      
      break;
     }
    }
   } while(0);
   if ((label|0) == 42) {
    $expanded7 = 69;
    $301 = ___cxa_find_matching_catch(-1,-1)|0;
    $302 = tempRet0;
    $67 = $301;
    $68 = $302;
    
   }
   __THREW__ = 0;
   invoke_vi(156,$104|0);
   $540 = __THREW__; __THREW__ = 0;
   $541 = $540&1;
   
   if ($541) {
    $expanded50 = 69;
    $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$401 = tempRet0;
    ___clang_call_terminate($546);
    // unreachable
   } else {
    
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(131,$71|0);
 $542 = __THREW__; __THREW__ = 0;
 $543 = $542&1;
 
 if ($543) {
  $expanded50 = 69;
  $546 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$401 = tempRet0;
  ___clang_call_terminate($546);
  // unreachable
 }
 
 $544 = $67;
 $545 = $68;
 ___resumeException($544|0);
 // unreachable
}
function __ZN2cl5EventC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl5EventC2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK2cl6Device7getInfoILi4145EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi($this,$err) {
 $this = $this|0;
 $err = $err|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $param = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 $param = sp + 16|0;
 
 $1 = $this;
 $2 = $err;
 $3 = $1;
 $4 = __ZNK2cl6Device7getInfoIP15_cl_platform_idEEijPT_($3,4145,$param)|0;
 $result = $4;
 $5 = $2;
 $6 = ($5|0)!=(0);
 
 if (!($6)) {
  $9 = HEAP32[$param>>2]|0;
  STACKTOP = sp;return $9|0;
 }
 $7 = $result;
 $8 = $2;
 HEAP32[$8>>2] = $7;
 
 $9 = HEAP32[$param>>2]|0;
 STACKTOP = sp;return $9|0;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 STACKTOP = sp;return $3|0;
}
function __ZN2cl7ContextC1ERKNS_6vectorINS_6DeviceELj10EEEPiPFvPKcPKvjPvESB_S6_($this,$devices,$properties,$notifyFptr,$data,$err) {
 $this = $this|0;
 $devices = $devices|0;
 $properties = $properties|0;
 $notifyFptr = $notifyFptr|0;
 $data = $data|0;
 $err = $err|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 
 
 
 
 
 
 $1 = $this;
 $2 = $devices;
 $3 = $properties;
 $4 = $notifyFptr;
 $5 = $data;
 $6 = $err;
 $7 = $1;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $2;
 __ZN2cl7ContextC2ERKNS_6vectorINS_6DeviceELj10EEEPiPFvPKcPKvjPvESB_S6_($7,$12,$8,$9,$10,$11);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueC1ERKNS_7ContextERKNS_6DeviceEyPi($this,$context,$device,$1,$2,$err) {
 $this = $this|0;
 $context = $context|0;
 $device = $device|0;
 $1 = $1|0;
 $2 = $2|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 
 
 
 $6 = sp + 24|0;
 
 $3 = $this;
 $4 = $context;
 $5 = $device;
 $8 = $6;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 $7 = $err;
 $12 = $3;
 $13 = $6;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $7;
 $20 = $4;
 $21 = $5;
 __ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEyPi($12,$20,$21,$15,$18,$19);
 STACKTOP = sp;return;
}
function __ZN12RenderDevice11ReadSourcesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg$result,$this,$fileName) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $fileName = $fileName|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__first1$i = 0, $__last3$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0;
 var $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0;
 var $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $file = 0, $gep = 0, $gep101 = 0, $gep105 = 0, $gep107 = 0, $gep109 = 0, $gep111 = 0, $gep113 = 0, $gep122 = 0, $gep127 = 0, $gep131 = 0, $gep133 = 0, $gep135 = 0, $gep150 = 0, $gep35 = 0;
 var $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0;
 var $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep97 = 0, $gep99 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int112 = 0, $gep_int114 = 0;
 var $gep_int115 = 0, $gep_int116 = 0, $gep_int117 = 0, $gep_int118 = 0, $gep_int119 = 0, $gep_int120 = 0, $gep_int121 = 0, $gep_int123 = 0, $gep_int124 = 0, $gep_int125 = 0, $gep_int126 = 0, $gep_int128 = 0, $gep_int129 = 0, $gep_int130 = 0, $gep_int132 = 0, $gep_int134 = 0, $gep_int136 = 0, $gep_int137 = 0, $gep_int139 = 0, $gep_int140 = 0;
 var $gep_int141 = 0, $gep_int142 = 0, $gep_int143 = 0, $gep_int144 = 0, $gep_int145 = 0, $gep_int146 = 0, $gep_int147 = 0, $gep_int148 = 0, $gep_int149 = 0, $gep_int151 = 0, $gep_int152 = 0, $gep_int153 = 0, $gep_int154 = 0, $gep_int155 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0;
 var $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0;
 var $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int98 = 0, $tmp = 0, $tmp$i = 0, $tmp1 = 0, $tmp2 = 0, $tmp2$i = 0, $tmp3 = 0, $tmp4$i = 0, $tmp5$i = 0, label = 0, sp = 0, u$145 = 0, u$172 = 0, u$52 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 808|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $19 = sp + 160|0;
 $20 = sp + 168|0;
 $__last3$i = sp + 176|0;
 $__first1$i = sp + 184|0;
 
 $22 = sp + 200|0;
 $23 = sp + 208|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $file = sp + 568|0;
 
 
 
 $71 = sp + 784|0;
 $72 = sp + 792|0;
 
 $66 = $this;
 $67 = $fileName;
 $74 = $66;
 $63 = $file;
 $75 = $63;
 $76 = $75;
 $gep_int = $75;
 $gep = (($gep_int) + 112)|0;
 $77 = $gep;
 $78 = $77;
 $62 = $78;
 $79 = $62;
 $80 = $79;
 $61 = $80;
 $81 = $61;
 $82 = $81;
 $expanded5 = 6048;
 $gep_int34 = 6048;
 $gep35 = (($gep_int34) + 8)|0;
 $expanded = $gep35;
 HEAP32[$81>>2] = $expanded;
 $83 = $79;
 $expanded7 = 5648;
 $gep_int36 = 5648;
 $gep37 = (($gep_int36) + 8)|0;
 $expanded6 = $gep37;
 HEAP32[$79>>2] = $expanded6;
 $84 = $75;
 $expanded9 = 2904;
 $gep_int38 = 2904;
 $gep39 = (($gep_int38) + 12)|0;
 $expanded8 = $gep39;
 HEAP32[$75>>2] = $expanded8;
 $85 = $75;
 $gep_int40 = $75;
 $gep41 = (($gep_int40) + 112)|0;
 $86 = $gep41;
 $87 = $86;
 $expanded11 = 2904;
 $gep_int42 = 2904;
 $gep43 = (($gep_int42) + 52)|0;
 $expanded10 = $gep43;
 HEAP32[$86>>2] = $expanded10;
 $88 = $75;
 $gep_int44 = $75;
 $gep45 = (($gep_int44) + 8)|0;
 $89 = $gep45;
 $90 = $89;
 $expanded13 = 2904;
 $gep_int46 = 2904;
 $gep47 = (($gep_int46) + 32)|0;
 $expanded12 = $gep47;
 HEAP32[$89>>2] = $expanded12;
 $91 = $75;
 $gep_int48 = $75;
 $gep49 = (($gep_int48) + 12)|0;
 $92 = $gep49;
 $93 = $92;
 $58 = $91;
 $expanded15 = 2968;
 $gep_int50 = 2968;
 $gep51 = (($gep_int50) + 4)|0;
 $expanded14 = $gep51;
 $59 = $expanded14;
 $60 = $93;
 $94 = $58;
 $95 = $59;
 $96 = $94;
 $gep_int52 = $95;
 $gep53 = (($gep_int52) + 4)|0;
 $97 = $gep53;
 $98 = $60;
 $55 = $96;
 $56 = $97;
 $57 = $98;
 $99 = $55;
 $100 = $56;
 $101 = HEAP32[$100>>2]|0;
 $102 = $99;
 HEAP32[$99>>2] = $101;
 $gep_int54 = $100;
 $gep55 = (($gep_int54) + 4)|0;
 $103 = $gep55;
 $104 = HEAP32[$103>>2]|0;
 $105 = $99;
 $106 = HEAP32[$99>>2]|0;
 $gep_int56 = $106;
 $gep57 = (($gep_int56) + -12)|0;
 $107 = $gep57;
 $108 = $107;
 $109 = HEAP32[$107>>2]|0;
 $110 = $99;
 $gep_int58 = $99;
 $gep59 = (($gep_int58) + ($109))|0;
 $111 = $gep59;
 $112 = $111;
 HEAP32[$111>>2] = $104;
 $gep_int60 = $99;
 $gep61 = (($gep_int60) + 4)|0;
 $113 = $gep61;
 HEAP32[$113>>2] = 0;
 $114 = $99;
 $115 = HEAP32[$99>>2]|0;
 $gep_int62 = $115;
 $gep63 = (($gep_int62) + -12)|0;
 $116 = $gep63;
 $117 = $116;
 $118 = HEAP32[$116>>2]|0;
 $119 = $99;
 $gep_int64 = $99;
 $gep65 = (($gep_int64) + ($118))|0;
 $120 = $gep65;
 $121 = $120;
 $122 = $57;
 $53 = $121;
 $54 = $122;
 $123 = $53;
 $124 = $123;
 $125 = $54;
 $126 = $125;
 __THREW__ = 0;
 invoke_vii(58,$124|0,$126|0);
 $127 = __THREW__; __THREW__ = 0;
 $128 = $127&1;
 
 do {
  if ($128) {
   $expanded22 = 69;
   $176 = ___cxa_find_matching_catch(-1,-1)|0;
   $177 = tempRet0;
   $64 = $176;
   $65 = $177;
   
  } else {
   $gep_int66 = $123;
   $gep67 = (($gep_int66) + 72)|0;
   $129 = $gep67;
   HEAP32[$129>>2] = 0;
   $gep_int68 = $123;
   $gep69 = (($gep_int68) + 76)|0;
   $130 = $gep69;
   HEAP32[$130>>2] = -1;
   $131 = $94;
   $gep_int70 = $94;
   $gep71 = (($gep_int70) + 8)|0;
   $132 = $gep71;
   $133 = $132;
   $gep_int72 = $95;
   $gep73 = (($gep_int72) + 12)|0;
   $134 = $gep73;
   $51 = $133;
   $52 = $134;
   $135 = $51;
   $136 = $52;
   $137 = HEAP32[$136>>2]|0;
   $138 = $135;
   HEAP32[$135>>2] = $137;
   $gep_int74 = $136;
   $gep75 = (($gep_int74) + 4)|0;
   $139 = $gep75;
   $140 = HEAP32[$139>>2]|0;
   $141 = $135;
   $142 = HEAP32[$135>>2]|0;
   $gep_int76 = $142;
   $gep77 = (($gep_int76) + -12)|0;
   $143 = $gep77;
   $144 = $143;
   $145 = HEAP32[$143>>2]|0;
   $146 = $135;
   $gep_int78 = $135;
   $gep79 = (($gep_int78) + ($145))|0;
   $147 = $gep79;
   $148 = $147;
   HEAP32[$147>>2] = $140;
   $149 = HEAP32[$95>>2]|0;
   $150 = $94;
   HEAP32[$94>>2] = $149;
   $gep_int80 = $95;
   $gep81 = (($gep_int80) + 20)|0;
   $151 = $gep81;
   $152 = HEAP32[$151>>2]|0;
   $153 = $94;
   $154 = HEAP32[$94>>2]|0;
   $gep_int82 = $154;
   $gep83 = (($gep_int82) + -12)|0;
   $155 = $gep83;
   $156 = $155;
   $157 = HEAP32[$155>>2]|0;
   $158 = $94;
   $gep_int84 = $94;
   $gep85 = (($gep_int84) + ($157))|0;
   $159 = $gep85;
   $160 = $159;
   HEAP32[$159>>2] = $152;
   $gep_int86 = $95;
   $gep87 = (($gep_int86) + 24)|0;
   $161 = $gep87;
   $162 = HEAP32[$161>>2]|0;
   $163 = $94;
   $gep_int88 = $94;
   $gep89 = (($gep_int88) + 8)|0;
   $164 = $gep89;
   $165 = $164;
   HEAP32[$164>>2] = $162;
   $166 = $75;
   $expanded17 = 2904;
   $gep_int90 = 2904;
   $gep91 = (($gep_int90) + 12)|0;
   $expanded16 = $gep91;
   HEAP32[$75>>2] = $expanded16;
   $167 = $75;
   $gep_int92 = $75;
   $gep93 = (($gep_int92) + 112)|0;
   $168 = $gep93;
   $169 = $168;
   $expanded19 = 2904;
   $gep_int94 = 2904;
   $gep95 = (($gep_int94) + 52)|0;
   $expanded18 = $gep95;
   HEAP32[$168>>2] = $expanded18;
   $170 = $75;
   $gep_int96 = $75;
   $gep97 = (($gep_int96) + 8)|0;
   $171 = $gep97;
   $172 = $171;
   $expanded21 = 2904;
   $gep_int98 = 2904;
   $gep99 = (($gep_int98) + 32)|0;
   $expanded20 = $gep99;
   HEAP32[$171>>2] = $expanded20;
   $gep_int100 = $75;
   $gep101 = (($gep_int100) + 12)|0;
   $173 = $gep101;
   __THREW__ = 0;
   invoke_vi(157,$173|0);
   $174 = __THREW__; __THREW__ = 0;
   $175 = $174&1;
   
   if ($175) {
    $expanded23 = 69;
    $178 = ___cxa_find_matching_catch(-1,-1)|0;
    $179 = tempRet0;
    $64 = $178;
    $65 = $179;
    __THREW__ = 0;
    $180 = __THREW__; __THREW__ = 0;
    $181 = $180&1;
    
    if ($181) {
     $expanded26 = 69;
     $189 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$52 = tempRet0;
     ___clang_call_terminate($189);
     // unreachable
    } else {
     
     break;
    }
   }
   $190 = $file;
   $191 = HEAP32[$file>>2]|0;
   $gep_int106 = $191;
   $gep107 = (($gep_int106) + -12)|0;
   $192 = $gep107;
   $193 = $192;
   $194 = HEAP32[$192>>2]|0;
   $195 = $file;
   $gep_int108 = $file;
   $gep109 = (($gep_int108) + ($194))|0;
   $196 = $gep109;
   $197 = $196;
   $49 = $197;
   $50 = 7;
   $198 = $49;
   $199 = $198;
   $200 = $50;
   $47 = $199;
   $48 = $200;
   $201 = $47;
   $202 = $48;
   $gep_int110 = $201;
   $gep111 = (($gep_int110) + 20)|0;
   $203 = $gep111;
   HEAP32[$203>>2] = $202;
   $gep_int112 = $201;
   $gep113 = (($gep_int112) + 16)|0;
   $204 = $gep113;
   $205 = HEAP32[$204>>2]|0;
   __THREW__ = 0;
   invoke_vii(42,$201|0,$205|0);
   $206 = __THREW__; __THREW__ = 0;
   $207 = $206&1;
   
   L9: do {
    if ($207) {
     label = 28;
    } else {
     
     $208 = $67;
     $46 = $208;
     $209 = $46;
     $45 = $209;
     $210 = $45;
     $44 = $210;
     $211 = $44;
     $43 = $211;
     $212 = $43;
     $gep_int114 = $212;
     $213 = $gep_int114;
     $42 = $213;
     $214 = $42;
     $215 = $214;
     $41 = $215;
     $216 = $41;
     $gep_int115 = $216;
     $217 = $gep_int115;
     $gep_int116 = $217;
     $218 = $gep_int116;
     $219 = $218;
     $gep_int117 = $218;
     $220 = $gep_int117;
     $221 = $220;
     $222 = HEAP8[$220]|0;
     $223 = $222&255;
     $224 = $223 & 1;
     $225 = ($224|0)!=(0);
     
     if ($225) {
      $35 = $211;
      $226 = $35;
      $gep_int118 = $226;
      $227 = $gep_int118;
      $34 = $227;
      $228 = $34;
      $229 = $228;
      $33 = $229;
      $230 = $33;
      $gep_int119 = $230;
      $231 = $gep_int119;
      $gep_int120 = $231;
      $232 = $gep_int120;
      $233 = $232;
      $gep_int121 = $232;
      $gep122 = (($gep_int121) + 8)|0;
      $234 = $gep122;
      $235 = HEAP32[$234>>2]|0;
      
      $248 = $235;
     } else {
      $40 = $211;
      $236 = $40;
      $gep_int123 = $236;
      $237 = $gep_int123;
      $39 = $237;
      $238 = $39;
      $239 = $238;
      $38 = $239;
      $240 = $38;
      $gep_int124 = $240;
      $241 = $gep_int124;
      $gep_int125 = $241;
      $242 = $gep_int125;
      $243 = $242;
      $gep_int126 = $242;
      $gep127 = (($gep_int126) + 1)|0;
      $244 = $gep127;
      $gep_int128 = $244;
      $245 = $gep_int128;
      $37 = $245;
      $246 = $37;
      $36 = $246;
      $247 = $36;
      
      $248 = $247;
     }
     
     $32 = $248;
     $249 = $32;
     __THREW__ = 0;
     invoke_viii(12,$file|0,$249|0,12);
     $250 = __THREW__; __THREW__ = 0;
     $251 = $250&1;
     
     if ($251) {
      label = 28;
      break;
     }
     $$expand_i1_val = 0;
     $70 = $$expand_i1_val;
     $252 = $file;
     $30 = $71;
     $31 = $252;
     $253 = $30;
     $254 = $31;
     $28 = $253;
     $29 = $254;
     $255 = $28;
     $gep_int129 = $255;
     $256 = $gep_int129;
     $257 = $29;
     $258 = $257;
     $259 = HEAP32[$257>>2]|0;
     $gep_int130 = $259;
     $gep131 = (($gep_int130) + -12)|0;
     $260 = $gep131;
     $261 = $260;
     $262 = HEAP32[$260>>2]|0;
     $263 = $257;
     $gep_int132 = $257;
     $gep133 = (($gep_int132) + ($262))|0;
     $264 = $gep133;
     $265 = $264;
     $27 = $265;
     $266 = $27;
     $267 = $266;
     $26 = $267;
     $268 = $26;
     $gep_int134 = $268;
     $gep135 = (($gep_int134) + 24)|0;
     $269 = $gep135;
     $270 = HEAP32[$269>>2]|0;
     $271 = $270;
     HEAP32[$256>>2] = $271;
     $25 = $72;
     $272 = $25;
     $24 = $272;
     $273 = $24;
     $gep_int136 = $273;
     $274 = $gep_int136;
     HEAP32[$274>>2] = 0;
     $tmp = $23;
     $tmp1 = $71;
     ;HEAP8[$tmp+0|0]=HEAP8[$tmp1+0|0]|0;HEAP8[$tmp+1|0]=HEAP8[$tmp1+1|0]|0;HEAP8[$tmp+2|0]=HEAP8[$tmp1+2|0]|0;HEAP8[$tmp+3|0]=HEAP8[$tmp1+3|0]|0;
     $tmp2 = $22;
     $tmp3 = $72;
     ;HEAP8[$tmp2+0|0]=HEAP8[$tmp3+0|0]|0;HEAP8[$tmp2+1|0]=HEAP8[$tmp3+1|0]|0;HEAP8[$tmp2+2|0]=HEAP8[$tmp3+2|0]|0;HEAP8[$tmp2+3|0]=HEAP8[$tmp3+3|0]|0;
     $21 = $agg$result;
     $275 = $21;
     $tmp$i = $__first1$i;
     $tmp2$i = $23;
     ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp2$i+0|0]|0;HEAP8[$tmp$i+1|0]=HEAP8[$tmp2$i+1|0]|0;HEAP8[$tmp$i+2|0]=HEAP8[$tmp2$i+2|0]|0;HEAP8[$tmp$i+3|0]=HEAP8[$tmp2$i+3|0]|0;
     $tmp4$i = $__last3$i;
     $tmp5$i = $22;
     ;HEAP8[$tmp4$i+0|0]=HEAP8[$tmp5$i+0|0]|0;HEAP8[$tmp4$i+1|0]=HEAP8[$tmp5$i+1|0]|0;HEAP8[$tmp4$i+2|0]=HEAP8[$tmp5$i+2|0]|0;HEAP8[$tmp4$i+3|0]=HEAP8[$tmp5$i+3|0]|0;
     $18 = $275;
     $276 = $18;
     $gep_int137 = $276;
     $277 = $gep_int137;
     $17 = $277;
     $278 = $17;
     $16 = $278;
     $279 = $16;
     $280 = $279;
     $15 = $280;
     $281 = $15;
     $282 = $281;
     $14 = $282;
     $283 = $19;
     $284 = $__first1$i;
     ;HEAP32[$283+0>>2]=HEAP32[$284+0>>2]|0;
     $285 = $20;
     $286 = $__last3$i;
     ;HEAP32[$285+0>>2]=HEAP32[$286+0>>2]|0;
     __THREW__ = 0;
     $287 = $$byval_copy;
     
     $288 = $$byval_copy;
     $289 = $19;
     ;HEAP32[$288+0>>2]=HEAP32[$289+0>>2]|0;
     $290 = $$byval_copy1;
     
     $291 = $$byval_copy1;
     $292 = $20;
     ;HEAP32[$291+0>>2]=HEAP32[$292+0>>2]|0;
     invoke_viii(13,$276|0,$$byval_copy|0,$$byval_copy1|0);
     $293 = $$byval_copy1;
     
     $294 = $$byval_copy;
     
     $295 = __THREW__; __THREW__ = 0;
     $296 = $295&1;
     
     if ($296) {
      label = 28;
      break;
     }
     
     __THREW__ = 0;
     $expanded27 = 3824;
     $gep_int139 = 2464;
     $expanded28 = $gep_int139;
     $297 = invoke_iii(17,$expanded27|0,$expanded28|0)|0;
     $298 = __THREW__; __THREW__ = 0;
     $299 = $298&1;
     
     do {
      if (!($299)) {
       $gep_int140 = $74;
       $300 = $gep_int140;
       __THREW__ = 0;
       $301 = invoke_iii(25,$297|0,$300|0)|0;
       $302 = __THREW__; __THREW__ = 0;
       $303 = $302&1;
       
       if ($303) {
        break;
       }
       __THREW__ = 0;
       $gep_int141 = 2704;
       $expanded29 = $gep_int141;
       $304 = invoke_iii(17,$301|0,$expanded29|0)|0;
       $305 = __THREW__; __THREW__ = 0;
       $306 = $305&1;
       
       if ($306) {
        break;
       }
       $13 = $agg$result;
       $307 = $13;
       $12 = $307;
       $308 = $12;
       $11 = $308;
       $309 = $11;
       $gep_int142 = $309;
       $310 = $gep_int142;
       $10 = $310;
       $311 = $10;
       $312 = $311;
       $9 = $312;
       $313 = $9;
       $gep_int143 = $313;
       $314 = $gep_int143;
       $gep_int144 = $314;
       $315 = $gep_int144;
       $316 = $315;
       $gep_int145 = $315;
       $317 = $gep_int145;
       $318 = $317;
       $319 = HEAP8[$317]|0;
       $320 = $319&255;
       $321 = $320 & 1;
       $322 = ($321|0)!=(0);
       
       if ($322) {
        $5 = $308;
        $323 = $5;
        $gep_int146 = $323;
        $324 = $gep_int146;
        $4 = $324;
        $325 = $4;
        $326 = $325;
        $3 = $326;
        $327 = $3;
        $gep_int147 = $327;
        $328 = $gep_int147;
        $gep_int148 = $328;
        $329 = $gep_int148;
        $330 = $329;
        $gep_int149 = $329;
        $gep150 = (($gep_int149) + 4)|0;
        $331 = $gep150;
        $332 = HEAP32[$331>>2]|0;
        
        $346 = $332;
       } else {
        $8 = $308;
        $333 = $8;
        $gep_int151 = $333;
        $334 = $gep_int151;
        $7 = $334;
        $335 = $7;
        $336 = $335;
        $6 = $336;
        $337 = $6;
        $gep_int152 = $337;
        $338 = $gep_int152;
        $gep_int153 = $338;
        $339 = $gep_int153;
        $340 = $339;
        $gep_int154 = $339;
        $341 = $gep_int154;
        $342 = $341;
        $343 = HEAP8[$341]|0;
        $344 = $343&255;
        $345 = $344 >> 1;
        
        $346 = $345;
       }
       
       __THREW__ = 0;
       $347 = invoke_iii(20,$304|0,$346|0)|0;
       $348 = __THREW__; __THREW__ = 0;
       $349 = $348&1;
       
       if ($349) {
        break;
       }
       __THREW__ = 0;
       $gep_int155 = 2728;
       $expanded30 = $gep_int155;
       $350 = invoke_iii(17,$347|0,$expanded30|0)|0;
       $351 = __THREW__; __THREW__ = 0;
       $352 = $351&1;
       
       if ($352) {
        break;
       }
       $1 = $350;
       $2 = 67;
       $353 = $1;
       $354 = $2;
       __THREW__ = 0;
       u$145 = invoke_ii($354|0,$353|0)|0;
       $355 = __THREW__; __THREW__ = 0;
       $356 = $355&1;
       
       if ($356) {
        break;
       }
       
       $$expand_i1_val3 = 1;
       $70 = $$expand_i1_val3;
       $73 = 1;
       $$pre_trunc = $70;
       $357 = $$pre_trunc&1;
       
       if ($357) {
        __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($file);
        STACKTOP = sp;return;
       }
       __THREW__ = 0;
       invoke_vi(131,$agg$result|0);
       $364 = __THREW__; __THREW__ = 0;
       $365 = $364&1;
       
       if ($365) {
        label = 28;
        break L9;
       }
       
       __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($file);
       STACKTOP = sp;return;
      }
     } while(0);
     $expanded32 = 69;
     $360 = ___cxa_find_matching_catch(-1,-1)|0;
     $361 = tempRet0;
     $68 = $360;
     $69 = $361;
     __THREW__ = 0;
     invoke_vi(131,$agg$result|0);
     $362 = __THREW__; __THREW__ = 0;
     $363 = $362&1;
     
     if ($363) {
      $expanded33 = 69;
      $370 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$172 = tempRet0;
      ___clang_call_terminate($370);
      // unreachable
     } else {
      
      break;
     }
    }
   } while(0);
   if ((label|0) == 28) {
    $expanded31 = 69;
    $358 = ___cxa_find_matching_catch(-1,-1)|0;
    $359 = tempRet0;
    $68 = $358;
    $69 = $359;
    
   }
   __THREW__ = 0;
   invoke_vi(3,$file|0);
   $366 = __THREW__; __THREW__ = 0;
   $367 = $366&1;
   
   if ($367) {
    $expanded33 = 69;
    $370 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$172 = tempRet0;
    ___clang_call_terminate($370);
    // unreachable
   }
   
   $368 = $68;
   $369 = $69;
   ___resumeException($368|0);
   // unreachable
  }
 } while(0);
 $182 = $75;
 $gep_int104 = $75;
 $gep105 = (($gep_int104) + 112)|0;
 $183 = $gep105;
 $184 = $183;
 __THREW__ = 0;
 invoke_vi(158,$184|0);
 $185 = __THREW__; __THREW__ = 0;
 $186 = $185&1;
 
 if ($186) {
  $expanded26 = 69;
  $189 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$52 = tempRet0;
  ___clang_call_terminate($189);
  // unreachable
 } else {
  $187 = $64;
  $188 = $65;
  ___resumeException($187|0);
  // unreachable
 }
}
function __ZN2cl6vectorINSt3__14pairIPKcjEELj10EEC1EjRKS5_($this,$size,$val) {
 $this = $this|0;
 $size = $size|0;
 $val = $val|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $2 = $size;
 $3 = $val;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 __ZN2cl6vectorINSt3__14pairIPKcjEELj10EEC2EjRKS5_($4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramC1ERKNS_7ContextERKNS_6vectorINSt3__14pairIPKcjEELj10EEEPi($this,$context,$sources,$err) {
 $this = $this|0;
 $context = $context|0;
 $sources = $sources|0;
 $err = $err|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $1 = $this;
 $2 = $context;
 $3 = $sources;
 $4 = $err;
 $5 = $1;
 $6 = $4;
 $7 = $2;
 $8 = $3;
 __ZN2cl7ProgramC2ERKNS_7ContextERKNS_6vectorINSt3__14pairIPKcjEELj10EEEPi($5,$7,$8,$6);
 STACKTOP = sp;return;
}
function __ZNK2cl7Program5buildERKNS_6vectorINS_6DeviceELj10EEEPKcPFvP11_cl_programPvESA_($this,$devices,$options,$notifyFptr,$data) {
 $this = $this|0;
 $devices = $devices|0;
 $options = $options|0;
 $notifyFptr = $notifyFptr|0;
 $data = $data|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0;
 var $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 
 
 
 
 
 $1 = $this;
 $2 = $devices;
 $3 = $options;
 $4 = $notifyFptr;
 $5 = $data;
 $6 = $1;
 $7 = $6;
 $gep_int = $6;
 $8 = $gep_int;
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = __ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv($10)|0;
 $12 = $2;
 $13 = __ZNK2cl6vectorINS_6DeviceELj10EE5frontEv($12)|0;
 $14 = $13;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = _clBuildProgram($9|0,$11|0,$14|0,$15|0,$16|0,$17|0)|0;
 $gep_int1 = 3552;
 $expanded = $gep_int1;
 $19 = __ZN2cl6detailL10errHandlerEiPKc128($18,$expanded)|0;
 STACKTOP = sp;return $19|0;
}
function __ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi($agg$result,$this,$device,$err) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $device = $device|0;
 $err = $err|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded4 = 0, $result = 0, label = 0, sp = 0, u$25 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 
 
 
 
 
 
 
 
 $1 = $this;
 $2 = $device;
 $3 = $err;
 $8 = $1;
 $$expand_i1_val = 0;
 $4 = $$expand_i1_val;
 __ZN2cl6stringC1Ev($agg$result);
 $9 = $2;
 __THREW__ = 0;
 $10 = invoke_iiiii(8,$8|0,$9|0,4483,$agg$result|0)|0;
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 
 if ($12) {
  $expanded = 69;
  $17 = ___cxa_find_matching_catch(-1,-1)|0;
  $18 = tempRet0;
  $5 = $17;
  $6 = $18;
  __THREW__ = 0;
  invoke_vi(153,$agg$result|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  
  if ($20) {
   $expanded4 = 69;
   $24 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$25 = tempRet0;
   ___clang_call_terminate($24);
   // unreachable
  }
  
  $22 = $5;
  $23 = $6;
  ___resumeException($22|0);
  // unreachable
 }
 $result = $10;
 $13 = $3;
 $14 = ($13|0)!=(0);
 
 if ($14) {
  $15 = $result;
  $16 = $3;
  HEAP32[$16>>2] = $15;
  
 }
 $$expand_i1_val2 = 1;
 $4 = $$expand_i1_val2;
 $7 = 1;
 $$pre_trunc = $4;
 $21 = $$pre_trunc&1;
 
 if ($21) {
  STACKTOP = sp;return;
 }
 __ZN2cl6stringD1Ev($agg$result);
 
 STACKTOP = sp;return;
}
function __ZNK2cl6string5c_strEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 4)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 
 if ($5) {
  $gep_int1 = $2;
  $gep2 = (($gep_int1) + 4)|0;
  $6 = $gep2;
  $7 = HEAP32[$6>>2]|0;
  
  $8 = $7;
  
  STACKTOP = sp;return $8|0;
 } else {
  $gep_int3 = 2456;
  $expanded = $gep_int3;
  
  $8 = $expanded;
  
  STACKTOP = sp;return $8|0;
 }
 return 0|0;
}
function __ZN2cl6stringD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6stringD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelC1ERKNS_7ProgramEPKcPi($this,$program,$name,$err) {
 $this = $this|0;
 $program = $program|0;
 $name = $name|0;
 $err = $err|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $1 = $this;
 $2 = $program;
 $3 = $name;
 $4 = $err;
 $5 = $1;
 $6 = $3;
 $7 = $4;
 $8 = $2;
 __ZN2cl6KernelC2ERKNS_7ProgramEPKcPi($5,$8,$6,$7);
 STACKTOP = sp;return;
}
function __ZNK2cl6Kernel16getWorkGroupInfoIjEEiRKNS_6DeviceEjPT_($this,$device,$name,$param) {
 $this = $this|0;
 $device = $device|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 
 
 
 
 $5 = sp + 32|0;
 $1 = $this;
 $2 = $device;
 $3 = $name;
 $4 = $param;
 $6 = $1;
 $7 = $6;
 $gep_int = $6;
 $8 = $gep_int;
 $9 = $2;
 $10 = $9;
 $11 = __ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($10)|0;
 HEAP32[$5>>2] = $11;
 $12 = $3;
 $13 = $4;
 $14 = __ZN2cl6detail7getInfoIPFiP10_cl_kernelP13_cl_device_idjjPvPjES3_S5_jEEiT_RKT0_RKT1_jPT2_(1,$8,$5,$12,$13)|0;
 $gep_int1 = 3360;
 $expanded = $gep_int1;
 $15 = __ZN2cl6detailL10errHandlerEiPKc128($14,$expanded)|0;
 STACKTOP = sp;return $15|0;
}
function __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($this,$context,$1,$2,$size,$host_ptr,$err) {
 $this = $this|0;
 $context = $context|0;
 $1 = $1|0;
 $2 = $2|0;
 $size = $size|0;
 $host_ptr = $host_ptr|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 
 
 $5 = sp + 16|0;
 
 
 
 $3 = $this;
 $4 = $context;
 $9 = $5;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $6 = $size;
 $7 = $host_ptr;
 $8 = $err;
 $13 = $3;
 $14 = $5;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $4;
 __ZN2cl6BufferC2ERKNS_7ContextEyjPvPi($13,$23,$16,$19,$20,$21,$22);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl7ProgramD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorINSt3__14pairIPKcjEELj10EED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6vectorINSt3__14pairIPKcjEELj10EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl5EventD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl5EventD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN12RenderDeviceD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0;
 var $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0;
 var $gep42 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int41 = 0, $gep_int43 = 0;
 var label = 0, sp = 0, u$115 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $4 = $1;
 $gep_int = $4;
 $gep = (($gep_int) + 16)|0;
 $5 = $gep;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 
 do {
  if ($7) {
   label = 4;
  } else {
   __THREW__ = 0;
   invoke_vi(159,$6|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   
   if ($9) {
    $expanded = 69;
    $38 = ___cxa_find_matching_catch(-1,-1)|0;
    $39 = tempRet0;
    $2 = $38;
    $3 = $39;
    $40 = $6;
    __ZdlPv($40);
    
    label = 50;
    break;
   } else {
    $10 = $6;
    __ZdlPv($10);
    
    label = 4;
    break;
   }
  }
 } while(0);
 L6: do {
  if ((label|0) == 4) {
   $gep_int10 = $4;
   $gep11 = (($gep_int10) + 20)|0;
   $11 = $gep11;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   
   do {
    if (!($13)) {
     __THREW__ = 0;
     invoke_vi(160,$12|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     
     if ($15) {
      $expanded1 = 69;
      $41 = ___cxa_find_matching_catch(-1,-1)|0;
      $42 = tempRet0;
      $2 = $41;
      $3 = $42;
      $43 = $12;
      __ZdlPv($43);
      
      label = 50;
      break L6;
     } else {
      $16 = $12;
      __ZdlPv($16);
      
      break;
     }
    }
   } while(0);
   $gep_int12 = $4;
   $gep13 = (($gep_int12) + 64)|0;
   $17 = $gep13;
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   
   do {
    if (!($19)) {
     __THREW__ = 0;
     invoke_vi(161,$18|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     
     if ($21) {
      $expanded2 = 69;
      $44 = ___cxa_find_matching_catch(-1,-1)|0;
      $45 = tempRet0;
      $2 = $44;
      $3 = $45;
      $46 = $18;
      __ZdlPv($46);
      
      label = 50;
      break L6;
     } else {
      $22 = $18;
      __ZdlPv($22);
      
      break;
     }
    }
   } while(0);
   $gep_int14 = $4;
   $gep15 = (($gep_int14) + 68)|0;
   $23 = $gep15;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   
   do {
    if (!($25)) {
     __THREW__ = 0;
     invoke_vi(161,$24|0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     
     if ($27) {
      $expanded3 = 69;
      $47 = ___cxa_find_matching_catch(-1,-1)|0;
      $48 = tempRet0;
      $2 = $47;
      $3 = $48;
      $49 = $24;
      __ZdlPv($49);
      
      label = 50;
      break L6;
     } else {
      $28 = $24;
      __ZdlPv($28);
      
      break;
     }
    }
   } while(0);
   $gep_int16 = $4;
   $gep17 = (($gep_int16) + 52)|0;
   $29 = $gep17;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0);
   
   if ($31) {
    $gep_int18 = $4;
    $gep19 = (($gep_int18) + 52)|0;
    $32 = $gep19;
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0);
    
    do {
     if (!($34)) {
      __THREW__ = 0;
      invoke_vi(161,$33|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      
      if ($36) {
       $expanded4 = 69;
       $50 = ___cxa_find_matching_catch(-1,-1)|0;
       $51 = tempRet0;
       $2 = $50;
       $3 = $51;
       $52 = $33;
       __ZdlPv($52);
       
       label = 50;
       break L6;
      } else {
       $37 = $33;
       __ZdlPv($37);
       
       break;
      }
     }
    } while(0);
    
   }
   $gep_int20 = $4;
   $gep21 = (($gep_int20) + 56)|0;
   $53 = $gep21;
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)!=(0);
   
   if ($55) {
    $gep_int22 = $4;
    $gep23 = (($gep_int22) + 56)|0;
    $56 = $gep23;
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==(0);
    
    do {
     if (!($58)) {
      __THREW__ = 0;
      invoke_vi(161,$57|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      
      if ($60) {
       $expanded5 = 69;
       $62 = ___cxa_find_matching_catch(-1,-1)|0;
       $63 = tempRet0;
       $2 = $62;
       $3 = $63;
       $64 = $57;
       __ZdlPv($64);
       
       label = 50;
       break L6;
      } else {
       $61 = $57;
       __ZdlPv($61);
       
       break;
      }
     }
    } while(0);
    
   }
   $gep_int24 = $4;
   $gep25 = (($gep_int24) + 60)|0;
   $65 = $gep25;
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)!=(0);
   
   if ($67) {
    $gep_int26 = $4;
    $gep27 = (($gep_int26) + 60)|0;
    $68 = $gep27;
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0);
    
    do {
     if (!($70)) {
      __THREW__ = 0;
      invoke_vi(161,$69|0);
      $71 = __THREW__; __THREW__ = 0;
      $72 = $71&1;
      
      if ($72) {
       $expanded6 = 69;
       $74 = ___cxa_find_matching_catch(-1,-1)|0;
       $75 = tempRet0;
       $2 = $74;
       $3 = $75;
       $76 = $69;
       __ZdlPv($76);
       
       label = 50;
       break L6;
      } else {
       $73 = $69;
       __ZdlPv($73);
       
       break;
      }
     }
    } while(0);
    
   }
   $gep_int28 = $4;
   $gep29 = (($gep_int28) + 76)|0;
   $77 = $gep29;
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)!=(0);
   
   if ($79) {
    $gep_int30 = $4;
    $gep31 = (($gep_int30) + 76)|0;
    $80 = $gep31;
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)==(0);
    
    if (!($82)) {
     $83 = $81;
     __ZdlPv($83);
     
    }
    
   }
   $gep_int32 = $4;
   $gep33 = (($gep_int32) + 80)|0;
   $84 = $gep33;
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)!=(0);
   
   if ($86) {
    $gep_int34 = $4;
    $gep35 = (($gep_int34) + 80)|0;
    $87 = $gep35;
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0);
    
    if (!($89)) {
     $90 = $88;
     __ZdlPv($90);
     
    }
    
   }
   $gep_int36 = $4;
   $gep37 = (($gep_int36) + 12)|0;
   $91 = $gep37;
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)==(0);
   
   do {
    if (!($93)) {
     __THREW__ = 0;
     invoke_vi(162,$92|0);
     $94 = __THREW__; __THREW__ = 0;
     $95 = $94&1;
     
     if ($95) {
      $expanded7 = 69;
      $101 = ___cxa_find_matching_catch(-1,-1)|0;
      $102 = tempRet0;
      $2 = $101;
      $3 = $102;
      $103 = $92;
      __ZdlPv($103);
      
      label = 50;
      break L6;
     } else {
      $96 = $92;
      __ZdlPv($96);
      
      break;
     }
    }
   } while(0);
   $gep_int38 = $4;
   $gep39 = (($gep_int38) + 84)|0;
   $97 = $gep39;
   __THREW__ = 0;
   invoke_vi(156,$97|0);
   $98 = __THREW__; __THREW__ = 0;
   $99 = $98&1;
   
   if ($99) {
    $expanded8 = 69;
    $104 = ___cxa_find_matching_catch(-1,-1)|0;
    $105 = tempRet0;
    $2 = $104;
    $3 = $105;
    
    break;
   } else {
    $gep_int40 = $4;
    $100 = $gep_int40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($100);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 do {
  if ((label|0) == 50) {
   $gep_int41 = $4;
   $gep42 = (($gep_int41) + 84)|0;
   $106 = $gep42;
   __THREW__ = 0;
   invoke_vi(156,$106|0);
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   
   if ($108) {
    $expanded9 = 69;
    $114 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$115 = tempRet0;
    ___clang_call_terminate($114);
    // unreachable
   } else {
    
    break;
   }
  }
 } while(0);
 $gep_int43 = $4;
 $109 = $gep_int43;
 __THREW__ = 0;
 invoke_vi(131,$109|0);
 $110 = __THREW__; __THREW__ = 0;
 $111 = $110&1;
 
 if ($111) {
  $expanded9 = 69;
  $114 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$115 = tempRet0;
  ___clang_call_terminate($114);
  // unreachable
 }
 
 $112 = $2;
 $113 = $3;
 ___resumeException($112|0);
 // unreachable
}
function __ZN2cl12CommandQueueD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl12CommandQueueD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6KernelD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6BufferD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl7ContextD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl7ContextD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN12RenderDevice12RenderThreadEPS_($renderDevice) {
 $renderDevice = $renderDevice|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep_int = 0;
 var $gep_int10 = 0, $gep_int11 = 0, $gep_int12 = 0, label = 0, sp = 0, u$22 = 0, u$44 = 0, u$60 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 
 
 
 
 
 $err = sp + 40|0;
 $3 = $renderDevice;
 $6 = $3;
 __THREW__ = 0;
 invoke_vi(163,$6|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 
 do {
  if (!($8)) {
   $9 = $3;
   __THREW__ = 0;
   invoke_vi(164,$9|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   
   if ($11) {
    break;
   }
   $12 = $3;
   __THREW__ = 0;
   invoke_vi(165,$12|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if ($14) {
    break;
   }
   $15 = $3;
   __THREW__ = 0;
   invoke_vi(166,$15|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   
   if ($17) {
    break;
   }
   $18 = $3;
   __THREW__ = 0;
   invoke_vi(167,$18|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   
   if ($20) {
    break;
   }
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded = 69;
 $expanded1 = 48;
 $21 = ___cxa_find_matching_catch(-1,-1,$expanded1|0)|0;
 $22 = tempRet0;
 $4 = $21;
 $5 = $22;
 
 $23 = $5;
 $expanded2 = 48;
 $24 = _llvm_eh_typeid_for($expanded2|0)|0;
 $25 = ($23|0)==($24|0);
 
 if (!($25)) {
  $66 = $4;
  $67 = $5;
  ___resumeException($66|0);
  // unreachable
 }
 $26 = $4;
 $27 = ___cxa_get_exception_ptr($26|0)|0;
 $28 = $27;
 __ZN2cl5ErrorC1ERKS0_($err,$28);
 u$22 = ___cxa_begin_catch($26|0)|0;
 __THREW__ = 0;
 $expanded3 = 3824;
 $gep_int = 2464;
 $expanded4 = $gep_int;
 $29 = invoke_iii(17,$expanded3|0,$expanded4|0)|0;
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 
 do {
  if (!($31)) {
   $32 = $3;
   __THREW__ = 0;
   $33 = invoke_ii(77,$32|0)|0;
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   
   if ($35) {
    break;
   }
   __THREW__ = 0;
   $36 = invoke_iii(25,$29|0,$33|0)|0;
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   
   if ($38) {
    break;
   }
   __THREW__ = 0;
   $gep_int10 = 2672;
   $expanded5 = $gep_int10;
   $39 = invoke_iii(17,$36|0,$expanded5|0)|0;
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   
   if ($41) {
    break;
   }
   $42 = __ZNK2cl5Error4whatEv($err)|0;
   __THREW__ = 0;
   $43 = invoke_iii(17,$39|0,$42|0)|0;
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   
   if ($45) {
    break;
   }
   __THREW__ = 0;
   $gep_int11 = 2688;
   $expanded6 = $gep_int11;
   $46 = invoke_iii(17,$43|0,$expanded6|0)|0;
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   
   if ($48) {
    break;
   }
   __THREW__ = 0;
   $49 = invoke_ii(72,$err|0)|0;
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   
   if ($51) {
    break;
   }
   __THREW__ = 0;
   $52 = invoke_iii(18,$46|0,$49|0)|0;
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   
   if ($54) {
    break;
   }
   __THREW__ = 0;
   $gep_int12 = 2696;
   $expanded7 = $gep_int12;
   $55 = invoke_iii(17,$52|0,$expanded7|0)|0;
   $56 = __THREW__; __THREW__ = 0;
   $57 = $56&1;
   
   if ($57) {
    break;
   }
   $1 = $55;
   $2 = 67;
   $58 = $1;
   $59 = $2;
   __THREW__ = 0;
   u$44 = invoke_ii($59|0,$58|0)|0;
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   
   if ($61) {
    break;
   }
   
   __ZN2cl5ErrorD1Ev($err);
   ___cxa_end_catch();
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded8 = 69;
 $62 = ___cxa_find_matching_catch(-1,-1)|0;
 $63 = tempRet0;
 $4 = $62;
 $5 = $63;
 __ZN2cl5ErrorD1Ev($err);
 __THREW__ = 0;
 invoke_v(2);
 $64 = __THREW__; __THREW__ = 0;
 $65 = $64&1;
 
 if ($65) {
  $expanded9 = 69;
  $68 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$60 = tempRet0;
  ___clang_call_terminate($68);
  // unreachable
 }
 
 $66 = $4;
 $67 = $5;
 ___resumeException($66|0);
 // unreachable
}
function __ZN12RenderDevice13SetKernelArgsEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0;
 var $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0;
 var $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0, u$13 = 0, u$18 = 0;
 var u$21 = 0, u$22 = 0, u$23 = 0, u$24 = 0, u$27 = 0, u$3 = 0, u$30 = 0, u$31 = 0, u$65 = 0, u$8 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 
 $2 = sp + 8|0;
 
 
 $5 = sp + 32|0;
 $6 = sp + 40|0;
 $7 = sp + 48|0;
 $8 = sp + 56|0;
 $1 = $this;
 $9 = $1;
 $gep_int = $9;
 $gep = (($gep_int) + 20)|0;
 $10 = $gep;
 $11 = HEAP32[$10>>2]|0;
 $gep_int6 = $9;
 $gep7 = (($gep_int6) + 52)|0;
 $12 = $gep7;
 $13 = HEAP32[$12>>2]|0;
 __ZN2cl6BufferC1ERKS0_($2,$13);
 __THREW__ = 0;
 u$3 = invoke_iiii(27,$11|0,0,$2|0)|0;
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 
 if ($15) {
  $expanded = 69;
  $64 = ___cxa_find_matching_catch(-1,-1)|0;
  $65 = tempRet0;
  $3 = $64;
  $4 = $65;
  __THREW__ = 0;
  invoke_vi(161,$2|0);
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  
  if ($67) {
   $expanded5 = 69;
   $86 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$65 = tempRet0;
   ___clang_call_terminate($86);
   // unreachable
  }
  
  $84 = $3;
  $85 = $4;
  ___resumeException($84|0);
  // unreachable
 }
 __ZN2cl6BufferD1Ev($2);
 $gep_int8 = $9;
 $gep9 = (($gep_int8) + 20)|0;
 $16 = $gep9;
 $17 = HEAP32[$16>>2]|0;
 $gep_int10 = $9;
 $gep11 = (($gep_int10) + 60)|0;
 $18 = $gep11;
 $19 = HEAP32[$18>>2]|0;
 __ZN2cl6BufferC1ERKS0_($5,$19);
 __THREW__ = 0;
 u$8 = invoke_iiii(27,$17|0,1,$5|0)|0;
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 
 if ($21) {
  $expanded1 = 69;
  $68 = ___cxa_find_matching_catch(-1,-1)|0;
  $69 = tempRet0;
  $3 = $68;
  $4 = $69;
  __THREW__ = 0;
  invoke_vi(161,$5|0);
  $70 = __THREW__; __THREW__ = 0;
  $71 = $70&1;
  
  if ($71) {
   $expanded5 = 69;
   $86 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$65 = tempRet0;
   ___clang_call_terminate($86);
   // unreachable
  }
  
  $84 = $3;
  $85 = $4;
  ___resumeException($84|0);
  // unreachable
 }
 __ZN2cl6BufferD1Ev($5);
 $gep_int12 = $9;
 $gep13 = (($gep_int12) + 20)|0;
 $22 = $gep13;
 $23 = HEAP32[$22>>2]|0;
 $gep_int14 = $9;
 $gep15 = (($gep_int14) + 64)|0;
 $24 = $gep15;
 $25 = HEAP32[$24>>2]|0;
 __ZN2cl6BufferC1ERKS0_($6,$25);
 __THREW__ = 0;
 u$13 = invoke_iiii(27,$23|0,2,$6|0)|0;
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 
 if ($27) {
  $expanded2 = 69;
  $72 = ___cxa_find_matching_catch(-1,-1)|0;
  $73 = tempRet0;
  $3 = $72;
  $4 = $73;
  __THREW__ = 0;
  invoke_vi(161,$6|0);
  $74 = __THREW__; __THREW__ = 0;
  $75 = $74&1;
  
  if ($75) {
   $expanded5 = 69;
   $86 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$65 = tempRet0;
   ___clang_call_terminate($86);
   // unreachable
  }
  
  $84 = $3;
  $85 = $4;
  ___resumeException($84|0);
  // unreachable
 }
 __ZN2cl6BufferD1Ev($6);
 $gep_int16 = $9;
 $gep17 = (($gep_int16) + 20)|0;
 $28 = $gep17;
 $29 = HEAP32[$28>>2]|0;
 $gep_int18 = $9;
 $gep19 = (($gep_int18) + 68)|0;
 $30 = $gep19;
 $31 = HEAP32[$30>>2]|0;
 __ZN2cl6BufferC1ERKS0_($7,$31);
 __THREW__ = 0;
 u$18 = invoke_iiii(27,$29|0,3,$7|0)|0;
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 
 if ($33) {
  $expanded3 = 69;
  $76 = ___cxa_find_matching_catch(-1,-1)|0;
  $77 = tempRet0;
  $3 = $76;
  $4 = $77;
  __THREW__ = 0;
  invoke_vi(161,$7|0);
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  
  if ($79) {
   $expanded5 = 69;
   $86 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$65 = tempRet0;
   ___clang_call_terminate($86);
   // unreachable
  }
  
  $84 = $3;
  $85 = $4;
  ___resumeException($84|0);
  // unreachable
 }
 __ZN2cl6BufferD1Ev($7);
 $gep_int20 = $9;
 $gep21 = (($gep_int20) + 20)|0;
 $34 = $gep21;
 $35 = HEAP32[$34>>2]|0;
 $gep_int22 = $9;
 $gep23 = (($gep_int22) + 36)|0;
 $36 = $gep23;
 $37 = HEAP32[$36>>2]|0;
 u$21 = __ZN2cl6Kernel6setArgIjEEijT_($35,4,$37)|0;
 $gep_int24 = $9;
 $gep25 = (($gep_int24) + 20)|0;
 $38 = $gep25;
 $39 = HEAP32[$38>>2]|0;
 $gep_int26 = $9;
 $gep27 = (($gep_int26) + 40)|0;
 $40 = $gep27;
 $41 = HEAP32[$40>>2]|0;
 u$22 = __ZN2cl6Kernel6setArgIjEEijT_($39,5,$41)|0;
 $gep_int28 = $9;
 $gep29 = (($gep_int28) + 20)|0;
 $42 = $gep29;
 $43 = HEAP32[$42>>2]|0;
 $gep_int30 = $9;
 $gep31 = (($gep_int30) + 44)|0;
 $44 = $gep31;
 $45 = HEAP32[$44>>2]|0;
 u$23 = __ZN2cl6Kernel6setArgIjEEijT_($43,6,$45)|0;
 $gep_int32 = $9;
 $gep33 = (($gep_int32) + 20)|0;
 $46 = $gep33;
 $47 = HEAP32[$46>>2]|0;
 $gep_int34 = $9;
 $gep35 = (($gep_int34) + 48)|0;
 $48 = $gep35;
 $49 = HEAP32[$48>>2]|0;
 u$24 = __ZN2cl6Kernel6setArgIjEEijT_($47,7,$49)|0;
 $gep_int36 = $9;
 $gep37 = (($gep_int36) + 20)|0;
 $50 = $gep37;
 $51 = HEAP32[$50>>2]|0;
 $gep_int38 = $9;
 $gep39 = (($gep_int38) + 56)|0;
 $52 = $gep39;
 $53 = HEAP32[$52>>2]|0;
 __ZN2cl6BufferC1ERKS0_($8,$53);
 __THREW__ = 0;
 u$27 = invoke_iiii(27,$51|0,8,$8|0)|0;
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 
 if (!($55)) {
  __ZN2cl6BufferD1Ev($8);
  $gep_int40 = $9;
  $gep41 = (($gep_int40) + 20)|0;
  $56 = $gep41;
  $57 = HEAP32[$56>>2]|0;
  $gep_int42 = $9;
  $gep43 = (($gep_int42) + 28)|0;
  $58 = $gep43;
  $59 = HEAP32[$58>>2]|0;
  u$30 = __ZN2cl6Kernel6setArgIjEEijT_($57,9,$59)|0;
  $gep_int44 = $9;
  $gep45 = (($gep_int44) + 20)|0;
  $60 = $gep45;
  $61 = HEAP32[$60>>2]|0;
  $gep_int46 = $9;
  $gep47 = (($gep_int46) + 32)|0;
  $62 = $gep47;
  $63 = HEAP32[$62>>2]|0;
  u$31 = __ZN2cl6Kernel6setArgIjEEijT_($61,10,$63)|0;
  STACKTOP = sp;return;
 }
 $expanded4 = 69;
 $80 = ___cxa_find_matching_catch(-1,-1)|0;
 $81 = tempRet0;
 $3 = $80;
 $4 = $81;
 __THREW__ = 0;
 invoke_vi(161,$8|0);
 $82 = __THREW__; __THREW__ = 0;
 $83 = $82&1;
 
 if ($83) {
  $expanded5 = 69;
  $86 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$65 = tempRet0;
  ___clang_call_terminate($86);
  // unreachable
 }
 
 $84 = $3;
 $85 = $4;
 ___resumeException($84|0);
 // unreachable
}
function __ZN12RenderDevice13ExecuteKernelEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0;
 var $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $w = 0, label = 0, sp = 0, u$15 = 0, u$44 = 0, u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 88|0;
 
 
 $2 = sp + 16|0;
 
 
 $5 = sp + 40|0;
 $6 = sp + 64|0;
 $1 = $this;
 $7 = $1;
 $gep_int = $7;
 $gep = (($gep_int) + 32)|0;
 $8 = $gep;
 $9 = HEAP32[$8>>2]|0;
 $w = $9;
 $10 = $w;
 $gep_int5 = $7;
 $gep6 = (($gep_int5) + 24)|0;
 $11 = $gep6;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10>>>0) % ($12>>>0))&-1;
 $14 = ($13|0)!=(0);
 
 if ($14) {
  $15 = $w;
  $gep_int7 = $7;
  $gep8 = (($gep_int7) + 24)|0;
  $16 = $gep8;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15>>>0) / ($17>>>0))&-1;
  $19 = (($18) + 1)|0;
  $gep_int9 = $7;
  $gep10 = (($gep_int9) + 24)|0;
  $20 = $gep10;
  $21 = HEAP32[$20>>2]|0;
  $22 = Math_imul($19, $21)|0;
  $w = $22;
  
 }
 $gep_int11 = $7;
 $gep12 = (($gep_int11) + 84)|0;
 $23 = $gep12;
 __ZN2cl5EventC1Ev($2);
 __THREW__ = 0;
 u$7 = invoke_iii(31,$23|0,$2|0)|0;
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 
 if ($25) {
  $expanded1 = 69;
  $46 = ___cxa_find_matching_catch(-1,-1)|0;
  $47 = tempRet0;
  $3 = $46;
  $4 = $47;
  __THREW__ = 0;
  invoke_vi(156,$2|0);
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  
  if ($49) {
   $expanded4 = 69;
   $60 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$44 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable
  }
  
  $58 = $3;
  $59 = $4;
  ___resumeException($58|0);
  // unreachable
 }
 __ZN2cl5EventD1Ev($2);
 $gep_int13 = $7;
 $gep14 = (($gep_int13) + 16)|0;
 $26 = $gep14;
 $27 = HEAP32[$26>>2]|0;
 $gep_int15 = $7;
 $gep16 = (($gep_int15) + 20)|0;
 $28 = $gep16;
 $29 = HEAP32[$28>>2]|0;
 $30 = $w;
 __ZN2cl7NDRangeC1Ej($5,$30);
 $gep_int17 = $7;
 $gep18 = (($gep_int17) + 24)|0;
 $31 = $gep18;
 $32 = HEAP32[$31>>2]|0;
 __THREW__ = 0;
 invoke_vii(59,$6|0,$32|0);
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 
 do {
  if ($34) {
   label = 10;
  } else {
   $gep_int19 = $7;
   $gep20 = (($gep_int19) + 84)|0;
   $35 = $gep20;
   __THREW__ = 0;
   $expanded = 2416;
   u$15 = invoke_iiiiiiii(1,$27|0,$29|0,$expanded|0,$5|0,$6|0,0,$35|0)|0;
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   
   if (!($37)) {
    __THREW__ = 0;
    invoke_vi(129,$6|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    
    if ($39) {
     label = 10;
     break;
    }
    __ZN2cl7NDRangeD1Ev($5);
    $gep_int21 = $7;
    $gep22 = (($gep_int21) + 32)|0;
    $40 = $gep22;
    $41 = HEAP32[$40>>2]|0;
    $42 = +($41>>>0);
    $gep_int23 = $7;
    $gep24 = (($gep_int23) + 88)|0;
    $43 = $gep24;
    $44 = +HEAPF64[$43>>3];
    $45 = $44 + $42;
    HEAPF64[$43>>3] = $45;
    STACKTOP = sp;return;
   }
   $expanded3 = 69;
   $52 = ___cxa_find_matching_catch(-1,-1)|0;
   $53 = tempRet0;
   $3 = $52;
   $4 = $53;
   __THREW__ = 0;
   invoke_vi(129,$6|0);
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   
   if ($55) {
    $expanded4 = 69;
    $60 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$44 = tempRet0;
    ___clang_call_terminate($60);
    // unreachable
   } else {
    
    break;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $expanded2 = 69;
  $50 = ___cxa_find_matching_catch(-1,-1)|0;
  $51 = tempRet0;
  $3 = $50;
  $4 = $51;
  
 }
 __THREW__ = 0;
 invoke_vi(129,$5|0);
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 
 if ($57) {
  $expanded4 = 69;
  $60 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$44 = tempRet0;
  ___clang_call_terminate($60);
  // unreachable
 }
 
 $58 = $3;
 $59 = $4;
 ___resumeException($58|0);
 // unreachable
}
function __ZN12RenderDevice15ReadPixelBufferEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0;
 var $gep8 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 16)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + 56)|0;
 $5 = $gep2;
 $6 = HEAP32[$5>>2]|0;
 $gep_int3 = $2;
 $gep4 = (($gep_int3) + 32)|0;
 $7 = $gep4;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8<<2;
 $gep_int5 = $2;
 $gep6 = (($gep_int5) + 28)|0;
 $10 = $gep6;
 $11 = HEAP32[$10>>2]|0;
 $gep_int7 = $2;
 $gep8 = (($gep_int7) + 72)|0;
 $12 = $gep8;
 $13 = HEAP32[$12>>2]|0;
 $gep_int9 = $13;
 $gep_array = $11<<2;
 $gep10 = (($gep_int9) + ($gep_array))|0;
 $14 = $gep10;
 $15 = $14;
 u$1 = __ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNS_6vectorINS_5EventELj10EEEPS6_($4,$6,0,0,$9,$15,0,0)|0;
 STACKTOP = sp;return;
}
function __ZN12RenderDevice19FinishExecuteKernelEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $t1 = 0, $t2 = 0, label = 0, sp = 0, u$1 = 0, u$2 = 0, u$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 $t1 = sp + 8|0;
 $t2 = sp + 16|0;
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 84)|0;
 $3 = $gep;
 u$1 = __ZNK2cl5Event4waitEv($3)|0;
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + 84)|0;
 $4 = $gep2;
 u$2 = __ZNK2cl5Event16getProfilingInfoIyEEijPT_($4,4738,$t1)|0;
 $gep_int3 = $2;
 $gep4 = (($gep_int3) + 84)|0;
 $5 = $gep4;
 u$3 = __ZNK2cl5Event16getProfilingInfoIyEEijPT_($5,4739,$t2)|0;
 $6 = $t2;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $t1;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = _i64Subtract($8|0,$11|0,$14|0,$17|0)|0;
 $19 = tempRet0;
 $20 = (+($18>>>0)) + (4294967296.0*(+($19>>>0)));
 $21 = $20 / 1.000000e+09;
 $gep_int5 = $2;
 $gep6 = (($gep_int5) + 96)|0;
 $22 = $gep6;
 $23 = +HEAPF64[$22>>3];
 $24 = $23 + $21;
 HEAPF64[$22>>3] = $24;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72|0;
 
 
 
 
 
 
 
 
 
 $7 = $this;
 $8 = $__s;
 $9 = $__mode;
 $10 = $7;
 $gep_int = $10;
 $gep = (($gep_int) + 12)|0;
 $11 = $gep;
 $12 = $8;
 $13 = $9;
 $14 = __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($11,$12,$13)|0;
 $15 = ($14|0)!=(0);
 
 if ($15) {
  $16 = $10;
  $17 = HEAP32[$10>>2]|0;
  $gep_int1 = $17;
  $gep2 = (($gep_int1) + -12)|0;
  $18 = $gep2;
  $19 = $18;
  $20 = HEAP32[$18>>2]|0;
  $21 = $10;
  $gep_int3 = $10;
  $gep4 = (($gep_int3) + ($20))|0;
  $22 = $gep4;
  $23 = $22;
  $5 = $23;
  $6 = 0;
  $24 = $5;
  $25 = $24;
  $26 = $6;
  __ZNSt3__18ios_base5clearEj($25,$26);
  
  STACKTOP = sp;return;
 } else {
  $27 = $10;
  $28 = HEAP32[$10>>2]|0;
  $gep_int5 = $28;
  $gep6 = (($gep_int5) + -12)|0;
  $29 = $gep6;
  $30 = $29;
  $31 = HEAP32[$29>>2]|0;
  $32 = $10;
  $gep_int7 = $10;
  $gep8 = (($gep_int7) + ($31))|0;
  $33 = $gep8;
  $34 = $33;
  $3 = $34;
  $4 = 4;
  $35 = $3;
  $36 = $35;
  $37 = $4;
  $1 = $36;
  $2 = $37;
  $38 = $1;
  $gep_int9 = $38;
  $gep10 = (($gep_int9) + 16)|0;
  $39 = $gep10;
  $40 = HEAP32[$39>>2]|0;
  $41 = $2;
  $42 = $40 | $41;
  __ZNSt3__18ios_base5clearEj($38,$42);
  
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0;
 var $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep = 0, $gep6 = 0, $gep_int = 0, $gep_int4 = 0, $gep_int5 = 0, label = 0, sp = 0, u$14 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $4 = $1;
 __THREW__ = 0;
 $expanded1 = 2968;
 $gep_int = 2968;
 $expanded = $gep_int;
 invoke_vii(60,$4|0,$expanded|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if (!($6)) {
  $7 = $4;
  $gep_int4 = $4;
  $gep = (($gep_int4) + 112)|0;
  $8 = $gep;
  $9 = $8;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($9);
  STACKTOP = sp;return;
 }
 $expanded2 = 69;
 $10 = ___cxa_find_matching_catch(-1,-1)|0;
 $11 = tempRet0;
 $2 = $10;
 $3 = $11;
 $12 = $4;
 $gep_int5 = $4;
 $gep6 = (($gep_int5) + 112)|0;
 $13 = $gep6;
 $14 = $13;
 __THREW__ = 0;
 invoke_vi(158,$14|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 
 if ($16) {
  $expanded3 = 69;
  $19 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$14 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable
 }
 
 $17 = $2;
 $18 = $3;
 ___resumeException($17|0);
 // unreachable
}
function __ZN12RenderDevice11SetWorkLoadEjjjjPj($this,$offset,$amount,$screenWidth,$screenHeght,$screenPixels) {
 $this = $this|0;
 $offset = $offset|0;
 $amount = $amount|0;
 $screenWidth = $screenWidth|0;
 $screenHeght = $screenHeght|0;
 $screenPixels = $screenPixels|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0;
 var $gep = 0, $gep102 = 0, $gep104 = 0, $gep107 = 0, $gep109 = 0, $gep111 = 0, $gep113 = 0, $gep115 = 0, $gep120 = 0, $gep123 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0, $gep42 = 0;
 var $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep67 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep76 = 0, $gep78 = 0, $gep80 = 0, $gep85 = 0, $gep88 = 0, $gep90 = 0;
 var $gep92 = 0, $gep94 = 0, $gep97 = 0, $gep99 = 0, $gep_array = 0, $gep_array101 = 0, $gep_array106 = 0, $gep_array96 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int112 = 0, $gep_int114 = 0, $gep_int116 = 0, $gep_int117 = 0, $gep_int118 = 0, $gep_int119 = 0;
 var $gep_int121 = 0, $gep_int122 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0;
 var $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int64 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int82 = 0, $gep_int83 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int87 = 0, $gep_int89 = 0;
 var $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int98 = 0, $i = 0, label = 0, sp = 0, u$64 = 0, u$71 = 0, u$97 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 120|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $7 = $this;
 $8 = $offset;
 $9 = $amount;
 $10 = $screenWidth;
 $11 = $screenHeght;
 $12 = $screenPixels;
 $15 = $7;
 $gep_int = $15;
 $gep = (($gep_int) + 52)|0;
 $16 = $gep;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 
 if ($18) {
  $gep_int23 = $15;
  $gep24 = (($gep_int23) + 52)|0;
  $19 = $gep24;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  
  do {
   if (!($21)) {
    __THREW__ = 0;
    invoke_vi(161,$20|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    
    if (!($23)) {
     $24 = $20;
     __ZdlPv($24);
     
     break;
    }
    $expanded = 69;
    $25 = ___cxa_find_matching_catch(-1,-1)|0;
    $26 = tempRet0;
    $13 = $25;
    $14 = $26;
    $27 = $20;
    __ZdlPv($27);
    
    $197 = $13;
    $198 = $14;
    ___resumeException($197|0);
    // unreachable
   }
  } while(0);
  
 }
 $gep_int25 = $15;
 $gep26 = (($gep_int25) + 56)|0;
 $28 = $gep26;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0);
 
 if ($30) {
  $gep_int27 = $15;
  $gep28 = (($gep_int27) + 56)|0;
  $31 = $gep28;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  
  do {
   if (!($33)) {
    __THREW__ = 0;
    invoke_vi(161,$32|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    
    if (!($35)) {
     $36 = $32;
     __ZdlPv($36);
     
     break;
    }
    $expanded6 = 69;
    $37 = ___cxa_find_matching_catch(-1,-1)|0;
    $38 = tempRet0;
    $13 = $37;
    $14 = $38;
    $39 = $32;
    __ZdlPv($39);
    
    $197 = $13;
    $198 = $14;
    ___resumeException($197|0);
    // unreachable
   }
  } while(0);
  
 }
 $gep_int29 = $15;
 $gep30 = (($gep_int29) + 60)|0;
 $40 = $gep30;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0);
 
 if ($42) {
  $gep_int31 = $15;
  $gep32 = (($gep_int31) + 60)|0;
  $43 = $gep32;
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0);
  
  do {
   if (!($45)) {
    __THREW__ = 0;
    invoke_vi(161,$44|0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    
    if (!($47)) {
     $48 = $44;
     __ZdlPv($48);
     
     break;
    }
    $expanded7 = 69;
    $49 = ___cxa_find_matching_catch(-1,-1)|0;
    $50 = tempRet0;
    $13 = $49;
    $14 = $50;
    $51 = $44;
    __ZdlPv($51);
    
    $197 = $13;
    $198 = $14;
    ___resumeException($197|0);
    // unreachable
   }
  } while(0);
  
 }
 $gep_int33 = $15;
 $gep34 = (($gep_int33) + 76)|0;
 $52 = $gep34;
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)!=(0);
 
 if ($54) {
  $gep_int35 = $15;
  $gep36 = (($gep_int35) + 76)|0;
  $55 = $gep36;
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(0);
  
  if (!($57)) {
   $58 = $56;
   __ZdlPv($58);
   
  }
  
 }
 $gep_int37 = $15;
 $gep38 = (($gep_int37) + 80)|0;
 $59 = $gep38;
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)!=(0);
 
 if ($61) {
  $gep_int39 = $15;
  $gep40 = (($gep_int39) + 80)|0;
  $62 = $gep40;
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(0);
  
  if (!($64)) {
   $65 = $63;
   __ZdlPv($65);
   
  }
  
 }
 $66 = $8;
 $gep_int41 = $15;
 $gep42 = (($gep_int41) + 28)|0;
 $67 = $gep42;
 HEAP32[$67>>2] = $66;
 $68 = $9;
 $gep_int43 = $15;
 $gep44 = (($gep_int43) + 32)|0;
 $69 = $gep44;
 HEAP32[$69>>2] = $68;
 $70 = $10;
 $gep_int45 = $15;
 $gep46 = (($gep_int45) + 40)|0;
 $71 = $gep46;
 HEAP32[$71>>2] = $70;
 $72 = $11;
 $gep_int47 = $15;
 $gep48 = (($gep_int47) + 44)|0;
 $73 = $gep48;
 HEAP32[$73>>2] = $72;
 $74 = $12;
 $gep_int49 = $15;
 $gep50 = (($gep_int49) + 72)|0;
 $75 = $gep50;
 HEAP32[$75>>2] = $74;
 $gep_int51 = $15;
 $gep52 = (($gep_int51) + 32)|0;
 $76 = $gep52;
 $77 = HEAP32[$76>>2]|0;
 $$arith2 = ($77*12)|0;
 $$overflow3 = ($77>>>0)>(357913941);
 $78 = $$overflow3 ? -1 : $$arith2;
 $79 = __Znaj($78)|0;
 $80 = $79;
 $gep_int53 = $15;
 $gep54 = (($gep_int53) + 76)|0;
 $81 = $gep54;
 HEAP32[$81>>2] = $80;
 $82 = __Znwj(4)|0;
 $83 = $82;
 $gep_int55 = $15;
 $gep56 = (($gep_int55) + 12)|0;
 $84 = $gep56;
 $85 = HEAP32[$84>>2]|0;
 $gep_int57 = $15;
 $gep58 = (($gep_int57) + 32)|0;
 $86 = $gep58;
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87*12)|0;
 $gep_int59 = $15;
 $gep60 = (($gep_int59) + 76)|0;
 $89 = $gep60;
 $90 = HEAP32[$89>>2]|0;
 $91 = $90;
 __THREW__ = 0;
 invoke_viiiiiii(42,$83|0,$85|0,9,0,$88|0,$91|0,0);
 $92 = __THREW__; __THREW__ = 0;
 $93 = $92&1;
 
 if ($93) {
  $expanded16 = 69;
  $162 = ___cxa_find_matching_catch(-1,-1)|0;
  $163 = tempRet0;
  $13 = $162;
  $14 = $163;
  __ZdlPv($82);
  
  $197 = $13;
  $198 = $14;
  ___resumeException($197|0);
  // unreachable
 }
 $gep_int61 = $15;
 $gep62 = (($gep_int61) + 52)|0;
 $94 = $gep62;
 HEAP32[$94>>2] = $83;
 $expanded8 = 3824;
 $gep_int63 = 2464;
 $expanded9 = $gep_int63;
 $95 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($expanded8,$expanded9)|0;
 $gep_int64 = $15;
 $96 = $gep_int64;
 $97 = __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($95,$96)|0;
 $gep_int65 = 2736;
 $expanded10 = $gep_int65;
 $98 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($97,$expanded10)|0;
 $gep_int66 = $15;
 $gep67 = (($gep_int66) + 32)|0;
 $99 = $gep67;
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100*12)|0;
 $102 = (($101>>>0) / 1024)&-1;
 $103 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($98,$102)|0;
 $gep_int68 = 2640;
 $expanded11 = $gep_int68;
 $104 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($103,$expanded11)|0;
 $5 = $104;
 $6 = 67;
 $105 = $5;
 $106 = $6;
 u$64 = FUNCTION_TABLE_ii[$106 & 127]($105)|0;
 $107 = __Znwj(4)|0;
 $108 = $107;
 $gep_int69 = $15;
 $gep70 = (($gep_int69) + 12)|0;
 $109 = $gep70;
 $110 = HEAP32[$109>>2]|0;
 $gep_int71 = $15;
 $gep72 = (($gep_int71) + 32)|0;
 $111 = $gep72;
 $112 = HEAP32[$111>>2]|0;
 $113 = $112<<2;
 $gep_int73 = $15;
 $gep74 = (($gep_int73) + 28)|0;
 $114 = $gep74;
 $115 = HEAP32[$114>>2]|0;
 $gep_int75 = $15;
 $gep76 = (($gep_int75) + 72)|0;
 $116 = $gep76;
 $117 = HEAP32[$116>>2]|0;
 $gep_int77 = $117;
 $gep_array = $115<<2;
 $gep78 = (($gep_int77) + ($gep_array))|0;
 $118 = $gep78;
 $119 = $118;
 __THREW__ = 0;
 invoke_viiiiiii(42,$108|0,$110|0,2,0,$113|0,$119|0,0);
 $120 = __THREW__; __THREW__ = 0;
 $121 = $120&1;
 
 if ($121) {
  $expanded17 = 69;
  $164 = ___cxa_find_matching_catch(-1,-1)|0;
  $165 = tempRet0;
  $13 = $164;
  $14 = $165;
  __ZdlPv($107);
  
  $197 = $13;
  $198 = $14;
  ___resumeException($197|0);
  // unreachable
 }
 $gep_int79 = $15;
 $gep80 = (($gep_int79) + 56)|0;
 $122 = $gep80;
 HEAP32[$122>>2] = $108;
 $expanded12 = 3824;
 $gep_int81 = 2464;
 $expanded13 = $gep_int81;
 $123 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($expanded12,$expanded13)|0;
 $gep_int82 = $15;
 $124 = $gep_int82;
 $125 = __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($123,$124)|0;
 $gep_int83 = 2760;
 $expanded14 = $gep_int83;
 $126 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($125,$expanded14)|0;
 $gep_int84 = $15;
 $gep85 = (($gep_int84) + 32)|0;
 $127 = $gep85;
 $128 = HEAP32[$127>>2]|0;
 $129 = $128<<2;
 $130 = (($129>>>0) / 1024)&-1;
 $131 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($126,$130)|0;
 $gep_int86 = 2640;
 $expanded15 = $gep_int86;
 $132 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($131,$expanded15)|0;
 $3 = $132;
 $4 = 67;
 $133 = $3;
 $134 = $4;
 u$71 = FUNCTION_TABLE_ii[$134 & 127]($133)|0;
 $gep_int87 = $15;
 $gep88 = (($gep_int87) + 32)|0;
 $135 = $gep88;
 $136 = HEAP32[$135>>2]|0;
 $137 = $136<<1;
 $$arith = $137<<2;
 $$overflow = ($137>>>0)>(1073741823);
 $138 = $$overflow ? -1 : $$arith;
 $139 = __Znaj($138)|0;
 $140 = $139;
 $gep_int89 = $15;
 $gep90 = (($gep_int89) + 80)|0;
 $141 = $gep90;
 HEAP32[$141>>2] = $140;
 $i = 0;
 
 while(1) {
  $142 = $i;
  $gep_int91 = $15;
  $gep92 = (($gep_int91) + 32)|0;
  $143 = $gep92;
  $144 = HEAP32[$143>>2]|0;
  $145 = $144<<1;
  $146 = ($142>>>0)<($145>>>0);
  
  if (!($146)) {
   break;
  }
  $147 = _rand()|0;
  $148 = $i;
  $gep_int93 = $15;
  $gep94 = (($gep_int93) + 80)|0;
  $149 = $gep94;
  $150 = HEAP32[$149>>2]|0;
  $gep_int95 = $150;
  $gep_array96 = $148<<2;
  $gep97 = (($gep_int95) + ($gep_array96))|0;
  $151 = $gep97;
  HEAP32[$151>>2] = $147;
  $152 = $i;
  $gep_int98 = $15;
  $gep99 = (($gep_int98) + 80)|0;
  $153 = $gep99;
  $154 = HEAP32[$153>>2]|0;
  $gep_int100 = $154;
  $gep_array101 = $152<<2;
  $gep102 = (($gep_int100) + ($gep_array101))|0;
  $155 = $gep102;
  $156 = HEAP32[$155>>2]|0;
  $157 = ($156>>>0)<(2);
  
  if ($157) {
   $158 = $i;
   $gep_int103 = $15;
   $gep104 = (($gep_int103) + 80)|0;
   $159 = $gep104;
   $160 = HEAP32[$159>>2]|0;
   $gep_int105 = $160;
   $gep_array106 = $158<<2;
   $gep107 = (($gep_int105) + ($gep_array106))|0;
   $161 = $gep107;
   HEAP32[$161>>2] = 2;
   
  }
  
  $166 = $i;
  $167 = (($166) + 1)|0;
  $i = $167;
  
 }
 $168 = __Znwj(4)|0;
 $169 = $168;
 $gep_int108 = $15;
 $gep109 = (($gep_int108) + 12)|0;
 $170 = $gep109;
 $171 = HEAP32[$170>>2]|0;
 $gep_int110 = $15;
 $gep111 = (($gep_int110) + 32)|0;
 $172 = $gep111;
 $173 = HEAP32[$172>>2]|0;
 $174 = $173<<2;
 $175 = $174<<1;
 $gep_int112 = $15;
 $gep113 = (($gep_int112) + 80)|0;
 $176 = $gep113;
 $177 = HEAP32[$176>>2]|0;
 $178 = $177;
 __THREW__ = 0;
 invoke_viiiiiii(42,$169|0,$171|0,9,0,$175|0,$178|0,0);
 $179 = __THREW__; __THREW__ = 0;
 $180 = $179&1;
 
 if (!($180)) {
  $gep_int114 = $15;
  $gep115 = (($gep_int114) + 60)|0;
  $181 = $gep115;
  HEAP32[$181>>2] = $169;
  $expanded18 = 3824;
  $gep_int116 = 2464;
  $expanded19 = $gep_int116;
  $182 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($expanded18,$expanded19)|0;
  $gep_int117 = $15;
  $183 = $gep_int117;
  $184 = __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($182,$183)|0;
  $gep_int118 = 2784;
  $expanded20 = $gep_int118;
  $185 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($184,$expanded20)|0;
  $gep_int119 = $15;
  $gep120 = (($gep_int119) + 32)|0;
  $186 = $gep120;
  $187 = HEAP32[$186>>2]|0;
  $188 = $187<<3;
  $189 = (($188>>>0) / 1024)&-1;
  $190 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($185,$189)|0;
  $gep_int121 = 2640;
  $expanded21 = $gep_int121;
  $191 = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($190,$expanded21)|0;
  $1 = $191;
  $2 = 67;
  $192 = $1;
  $193 = $2;
  u$97 = FUNCTION_TABLE_ii[$193 & 127]($192)|0;
  $gep_int122 = $15;
  $gep123 = (($gep_int122) + 48)|0;
  $194 = $gep123;
  HEAP32[$194>>2] = 0;
  STACKTOP = sp;return;
 }
 $expanded22 = 69;
 $195 = ___cxa_find_matching_catch(-1,-1)|0;
 $196 = tempRet0;
 $13 = $195;
 $14 = $196;
 __ZdlPv($168);
 
 $197 = $13;
 $198 = $14;
 ___resumeException($197|0);
 // unreachable
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_19istreambuf_iteratorIcS2_EEEENS_9enable_ifIXaasr19__is_input_iteratorIT_EE5valuentsr21__is_forward_iteratorISA_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$i = 0, $__i$i = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep42 = 0;
 var $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep60 = 0, $gep_array = 0, $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0;
 var $gep_int30 = 0, $gep_int31 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int4 = 0, $gep_int40 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int5 = 0, $gep_int51 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int54 = 0, $gep_int55 = 0, $gep_int56 = 0;
 var $gep_int57 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int6 = 0, $gep_int61 = 0, $gep_int62 = 0, $gep_int63 = 0, $gep_int64 = 0, $gep_int7 = 0, $gep_int8 = 0, $gep_int9 = 0, label = 0, sp = 0, u$116 = 0, u$81 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $46 = $this;
 $49 = $46;
 $45 = $49;
 $50 = $45;
 $gep_int = $50;
 $51 = $gep_int;
 $44 = $51;
 $52 = $44;
 $53 = $52;
 $43 = $53;
 $54 = $43;
 $gep_int3 = $54;
 $55 = $gep_int3;
 $gep_int4 = $55;
 $56 = $gep_int4;
 $57 = $56;
 $gep_int5 = $56;
 $58 = $gep_int5;
 $__a$i = $58;
 $__i$i = 0;
 
 while(1) {
  $59 = $__i$i;
  $60 = ($59>>>0)<(3);
  
  if (!($60)) {
   break;
  }
  $61 = $__i$i;
  $62 = $__a$i;
  $gep_int6 = $62;
  $gep_array = $61<<2;
  $gep = (($gep_int6) + ($gep_array))|0;
  $63 = $gep;
  HEAP32[$63>>2] = 0;
  $64 = $__i$i;
  $65 = (($64) + 1)|0;
  $__i$i = $65;
  
 }
 
 L5: while(1) {
  $41 = $__first;
  $42 = $__last;
  $66 = $41;
  $67 = $42;
  $39 = $66;
  $40 = $67;
  $68 = $39;
  $38 = $68;
  $69 = $38;
  $gep_int7 = $69;
  $70 = $gep_int7;
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71|0)!=(0);
  
  do {
   if ($72) {
    $gep_int8 = $69;
    $73 = $gep_int8;
    $74 = HEAP32[$73>>2]|0;
    $37 = $74;
    $75 = $37;
    $gep_int9 = $75;
    $gep10 = (($gep_int9) + 12)|0;
    $76 = $gep10;
    $77 = HEAP32[$76>>2]|0;
    $gep_int11 = $75;
    $gep12 = (($gep_int11) + 16)|0;
    $78 = $gep12;
    $79 = HEAP32[$78>>2]|0;
    $80 = ($77|0)==($79|0);
    
    if ($80) {
     $81 = $75;
     $82 = HEAP32[$75>>2]|0;
     $gep_int13 = $82;
     $gep14 = (($gep_int13) + 36)|0;
     $83 = $gep14;
     $84 = HEAP32[$83>>2]|0;
     __THREW__ = 0;
     $85 = invoke_ii($84|0,$75|0)|0;
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     
     if ($87) {
      break L5;
     }
     $36 = $85;
     
    } else {
     $gep_int15 = $75;
     $gep16 = (($gep_int15) + 12)|0;
     $88 = $gep16;
     $89 = HEAP32[$88>>2]|0;
     $90 = HEAP8[$89]|0;
     $35 = $90;
     $91 = $35;
     $92 = $91&255;
     $36 = $92;
     
    }
    $93 = $36;
    $33 = $93;
    $34 = -1;
    $94 = $33;
    $95 = $34;
    $96 = ($94|0)==($95|0);
    
    if (!($96)) {
     break;
    }
    $gep_int17 = $69;
    $97 = $gep_int17;
    HEAP32[$97>>2] = 0;
    
   }
  } while(0);
  $gep_int18 = $69;
  $98 = $gep_int18;
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)==(0);
  $101 = $100&1;
  $102 = $40;
  $32 = $102;
  $103 = $32;
  $gep_int19 = $103;
  $104 = $gep_int19;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)!=(0);
  
  do {
   if ($106) {
    $gep_int20 = $103;
    $107 = $gep_int20;
    $108 = HEAP32[$107>>2]|0;
    $31 = $108;
    $109 = $31;
    $gep_int21 = $109;
    $gep22 = (($gep_int21) + 12)|0;
    $110 = $gep22;
    $111 = HEAP32[$110>>2]|0;
    $gep_int23 = $109;
    $gep24 = (($gep_int23) + 16)|0;
    $112 = $gep24;
    $113 = HEAP32[$112>>2]|0;
    $114 = ($111|0)==($113|0);
    
    if ($114) {
     $115 = $109;
     $116 = HEAP32[$109>>2]|0;
     $gep_int25 = $116;
     $gep26 = (($gep_int25) + 36)|0;
     $117 = $gep26;
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     $119 = invoke_ii($118|0,$109|0)|0;
     $120 = __THREW__; __THREW__ = 0;
     $121 = $120&1;
     
     if ($121) {
      break L5;
     }
     $30 = $119;
     
    } else {
     $gep_int27 = $109;
     $gep28 = (($gep_int27) + 12)|0;
     $122 = $gep28;
     $123 = HEAP32[$122>>2]|0;
     $124 = HEAP8[$123]|0;
     $29 = $124;
     $125 = $29;
     $126 = $125&255;
     $30 = $126;
     
    }
    $127 = $30;
    $27 = $127;
    $28 = -1;
    $128 = $27;
    $129 = $28;
    $130 = ($128|0)==($129|0);
    
    if (!($130)) {
     break;
    }
    $gep_int29 = $103;
    $131 = $gep_int29;
    HEAP32[$131>>2] = 0;
    
   }
  } while(0);
  $gep_int30 = $103;
  $132 = $gep_int30;
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133|0)==(0);
  $135 = $134&1;
  $136 = ($101|0)==($135|0);
  $137 = $136 ^ 1;
  
  
  if (!($137)) {
   label = 37;
   break;
  }
  $26 = $__first;
  $138 = $26;
  $gep_int31 = $138;
  $139 = $gep_int31;
  $140 = HEAP32[$139>>2]|0;
  $25 = $140;
  $141 = $25;
  $gep_int32 = $141;
  $gep33 = (($gep_int32) + 12)|0;
  $142 = $gep33;
  $143 = HEAP32[$142>>2]|0;
  $gep_int34 = $141;
  $gep35 = (($gep_int34) + 16)|0;
  $144 = $gep35;
  $145 = HEAP32[$144>>2]|0;
  $146 = ($143|0)==($145|0);
  
  if ($146) {
   $147 = $141;
   $148 = HEAP32[$141>>2]|0;
   $gep_int36 = $148;
   $gep37 = (($gep_int36) + 36)|0;
   $149 = $gep37;
   $150 = HEAP32[$149>>2]|0;
   __THREW__ = 0;
   $151 = invoke_ii($150|0,$141|0)|0;
   $152 = __THREW__; __THREW__ = 0;
   $153 = $152&1;
   
   if ($153) {
    break;
   }
   $24 = $151;
   
  } else {
   $gep_int38 = $141;
   $gep39 = (($gep_int38) + 12)|0;
   $154 = $gep39;
   $155 = HEAP32[$154>>2]|0;
   $156 = HEAP8[$155]|0;
   $23 = $156;
   $157 = $23;
   $158 = $157&255;
   $24 = $158;
   
  }
  $159 = $24;
  $160 = $159&255;
  
  __THREW__ = 0;
  invoke_vii(61,$49|0,$160|0);
  $161 = __THREW__; __THREW__ = 0;
  $162 = $161&1;
  
  if ($162) {
   break;
  }
  
  $22 = $__first;
  $163 = $22;
  $gep_int40 = $163;
  $164 = $gep_int40;
  $165 = HEAP32[$164>>2]|0;
  $21 = $165;
  $166 = $21;
  $gep_int41 = $166;
  $gep42 = (($gep_int41) + 12)|0;
  $167 = $gep42;
  $168 = HEAP32[$167>>2]|0;
  $gep_int43 = $166;
  $gep44 = (($gep_int43) + 16)|0;
  $169 = $gep44;
  $170 = HEAP32[$169>>2]|0;
  $171 = ($168|0)==($170|0);
  
  if ($171) {
   $172 = $166;
   $173 = HEAP32[$166>>2]|0;
   $gep_int45 = $173;
   $gep46 = (($gep_int45) + 40)|0;
   $174 = $gep46;
   $175 = HEAP32[$174>>2]|0;
   __THREW__ = 0;
   $176 = invoke_ii($175|0,$166|0)|0;
   $177 = __THREW__; __THREW__ = 0;
   $178 = $177&1;
   
   if ($178) {
    break;
   }
   $20 = $176;
   
  } else {
   $gep_int47 = $166;
   $gep48 = (($gep_int47) + 12)|0;
   $179 = $gep48;
   $180 = HEAP32[$179>>2]|0;
   $gep_int49 = $180;
   $gep50 = (($gep_int49) + 1)|0;
   $181 = $gep50;
   HEAP32[$179>>2] = $181;
   $182 = HEAP8[$180]|0;
   $19 = $182;
   $183 = $19;
   $184 = $183&255;
   $20 = $184;
   
  }
  
  
 }
 if ((label|0) == 37) {
  
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $185 = ___cxa_find_matching_catch(-1,-1,0)|0;
 $186 = tempRet0;
 $47 = $185;
 $48 = $186;
 
 $187 = $47;
 u$81 = ___cxa_begin_catch($187|0)|0;
 $18 = $49;
 $188 = $18;
 $gep_int51 = $188;
 $189 = $gep_int51;
 $17 = $189;
 $190 = $17;
 $191 = $190;
 $16 = $191;
 $192 = $16;
 $gep_int52 = $192;
 $193 = $gep_int52;
 $gep_int53 = $193;
 $194 = $gep_int53;
 $195 = $194;
 $gep_int54 = $194;
 $196 = $gep_int54;
 $197 = $196;
 $198 = HEAP8[$196]|0;
 $199 = $198&255;
 $200 = $199 & 1;
 $201 = ($200|0)!=(0);
 
 if ($201) {
  $15 = $49;
  $202 = $15;
  $gep_int55 = $202;
  $203 = $gep_int55;
  $14 = $203;
  $204 = $14;
  $205 = $204;
  $13 = $205;
  $206 = $13;
  $207 = $206;
  $6 = $49;
  $208 = $6;
  $gep_int56 = $208;
  $209 = $gep_int56;
  $5 = $209;
  $210 = $5;
  $211 = $210;
  $4 = $211;
  $212 = $4;
  $gep_int57 = $212;
  $213 = $gep_int57;
  $gep_int58 = $213;
  $214 = $gep_int58;
  $215 = $214;
  $gep_int59 = $214;
  $gep60 = (($gep_int59) + 8)|0;
  $216 = $gep60;
  $217 = HEAP32[$216>>2]|0;
  $3 = $49;
  $218 = $3;
  $gep_int61 = $218;
  $219 = $gep_int61;
  $2 = $219;
  $220 = $2;
  $221 = $220;
  $1 = $221;
  $222 = $1;
  $gep_int62 = $222;
  $223 = $gep_int62;
  $gep_int63 = $223;
  $224 = $gep_int63;
  $225 = $224;
  $gep_int64 = $224;
  $226 = $gep_int64;
  $227 = HEAP32[$226>>2]|0;
  $228 = $227 & -2;
  $10 = $207;
  $11 = $217;
  $12 = $228;
  $229 = $10;
  $230 = $11;
  $231 = $12;
  $7 = $229;
  $8 = $230;
  $9 = $231;
  $232 = $8;
  __ZdlPv($232);
  
 }
 __THREW__ = 0;
 invoke_v(12);
 $233 = __THREW__; __THREW__ = 0;
 $234 = $233&1;
 
 if (!($234)) {
  // unreachable
 }
 $expanded1 = 69;
 $235 = ___cxa_find_matching_catch(-1,-1)|0;
 $236 = tempRet0;
 $47 = $235;
 $48 = $236;
 __THREW__ = 0;
 invoke_v(2);
 $237 = __THREW__; __THREW__ = 0;
 $238 = $237&1;
 
 if ($238) {
  $expanded2 = 69;
  $241 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$116 = tempRet0;
  ___clang_call_terminate($241);
  // unreachable
 }
 
 $239 = $47;
 $240 = $48;
 ___resumeException($239|0);
 // unreachable
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr = 0, $__rt = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep_int = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0;
 var $gep_int19 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, label = 0, sp = 0, u$39 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 
 
 
 
 
 $1 = $this;
 $2 = $__s;
 $3 = $__mode;
 $4 = $1;
 $__rt = 0;
 $gep_int = $4;
 $gep = (($gep_int) + 64)|0;
 $5 = $gep;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 
 if (!($7)) {
  $31 = $__rt;
  STACKTOP = sp;return $31|0;
 }
 $__rt = $4;
 $8 = $3;
 $9 = $8 & -3;
 
 switch ($9|0) {
 case 9: case 25:  {
  $gep_int17 = 2848;
  $expanded5 = $gep_int17;
  $__mdstr = $expanded5;
  
  break;
 }
 case 5: case 21:  {
  $gep_int19 = 2864;
  $expanded7 = $gep_int19;
  $__mdstr = $expanded7;
  
  break;
 }
 case 24:  {
  $gep_int15 = 2832;
  $expanded3 = $gep_int15;
  $__mdstr = $expanded3;
  
  break;
 }
 case 13: case 29:  {
  $gep_int23 = 2896;
  $expanded11 = $gep_int23;
  $__mdstr = $expanded11;
  
  break;
 }
 case 12:  {
  $gep_int20 = 2872;
  $expanded8 = $gep_int20;
  $__mdstr = $expanded8;
  
  break;
 }
 case 48: case 16:  {
  $gep_int12 = 2808;
  $expanded = $gep_int12;
  $__mdstr = $expanded;
  
  break;
 }
 case 56:  {
  $gep_int16 = 2840;
  $expanded4 = $gep_int16;
  $__mdstr = $expanded4;
  
  break;
 }
 case 8:  {
  $gep_int14 = 2824;
  $expanded2 = $gep_int14;
  $__mdstr = $expanded2;
  
  break;
 }
 case 28:  {
  $gep_int21 = 2880;
  $expanded9 = $gep_int21;
  $__mdstr = $expanded9;
  
  break;
 }
 case 1: case 17:  {
  $gep_int13 = 2816;
  $expanded1 = $gep_int13;
  $__mdstr = $expanded1;
  
  break;
 }
 case 52: case 20:  {
  $gep_int18 = 2856;
  $expanded6 = $gep_int18;
  $__mdstr = $expanded6;
  
  break;
 }
 case 60:  {
  $gep_int22 = 2888;
  $expanded10 = $gep_int22;
  $__mdstr = $expanded10;
  
  break;
 }
 default: {
  $__rt = 0;
  
 }
 }
 $10 = $__rt;
 $11 = ($10|0)!=(0);
 
 if ($11) {
  $12 = $2;
  $13 = $__mdstr;
  $14 = _fopen($12|0,$13|0)|0;
  $gep_int24 = $4;
  $gep25 = (($gep_int24) + 64)|0;
  $15 = $gep25;
  HEAP32[$15>>2] = $14;
  $gep_int26 = $4;
  $gep27 = (($gep_int26) + 64)|0;
  $16 = $gep27;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0);
  
  if ($18) {
   $19 = $3;
   $gep_int28 = $4;
   $gep29 = (($gep_int28) + 88)|0;
   $20 = $gep29;
   HEAP32[$20>>2] = $19;
   $21 = $3;
   $22 = $21 & 2;
   $23 = ($22|0)!=(0);
   
   if ($23) {
    $gep_int30 = $4;
    $gep31 = (($gep_int30) + 64)|0;
    $24 = $gep31;
    $25 = HEAP32[$24>>2]|0;
    $26 = _fseek($25|0,0,2)|0;
    $27 = ($26|0)!=(0);
    
    if ($27) {
     $gep_int32 = $4;
     $gep33 = (($gep_int32) + 64)|0;
     $28 = $gep33;
     $29 = HEAP32[$28>>2]|0;
     u$39 = _fclose($29|0)|0;
     $gep_int34 = $4;
     $gep35 = (($gep_int34) + 64)|0;
     $30 = $gep35;
     HEAP32[$30>>2] = 0;
     $__rt = 0;
     
    }
    
   }
   
  } else {
   $__rt = 0;
   
  }
  
 }
 
 $31 = $__rt;
 STACKTOP = sp;return $31|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $4 = $1;
 __THREW__ = 0;
 invoke_vi(3,$4|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if (!($6)) {
  $7 = $4;
  __ZdlPv($7);
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $8 = ___cxa_find_matching_catch(-1,-1)|0;
 $9 = tempRet0;
 $2 = $8;
 $3 = $9;
 $10 = $4;
 __ZdlPv($10);
 
 $11 = $2;
 $12 = $3;
 ___resumeException($11|0);
 // unreachable
}
function __ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $gep_int = $2;
 $gep = (($gep_int) + -8)|0;
 $4 = $gep;
 $5 = $4;
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $gep_int = $2;
 $gep = (($gep_int) + -8)|0;
 $4 = $gep;
 $5 = $4;
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$2>>2]|0;
 $gep_int = $5;
 $gep = (($gep_int) + -12)|0;
 $6 = $gep;
 $7 = $6;
 $8 = HEAP32[$6>>2]|0;
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + ($8))|0;
 $9 = $gep2;
 $10 = $9;
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($10);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$2>>2]|0;
 $gep_int = $5;
 $gep = (($gep_int) + -12)|0;
 $6 = $gep;
 $7 = $6;
 $8 = HEAP32[$6>>2]|0;
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + ($8))|0;
 $9 = $gep2;
 $10 = $9;
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($10);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep11 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0;
 var $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0, u$16 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $1 = $this;
 $2 = $vtt;
 $5 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = $5;
 HEAP32[$5>>2] = $7;
 $gep_int = $6;
 $gep = (($gep_int) + 32)|0;
 $9 = $gep;
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = HEAP32[$5>>2]|0;
 $gep_int2 = $12;
 $gep3 = (($gep_int2) + -12)|0;
 $13 = $gep3;
 $14 = $13;
 $15 = HEAP32[$13>>2]|0;
 $16 = $5;
 $gep_int4 = $5;
 $gep5 = (($gep_int4) + ($15))|0;
 $17 = $gep5;
 $18 = $17;
 HEAP32[$17>>2] = $10;
 $gep_int6 = $6;
 $gep7 = (($gep_int6) + 36)|0;
 $19 = $gep7;
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $gep_int8 = $5;
 $gep9 = (($gep_int8) + 8)|0;
 $22 = $gep9;
 $23 = $22;
 HEAP32[$22>>2] = $20;
 $gep_int10 = $5;
 $gep11 = (($gep_int10) + 12)|0;
 $24 = $gep11;
 __THREW__ = 0;
 invoke_vi(23,$24|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $27 = ___cxa_find_matching_catch(-1,-1)|0;
 $28 = tempRet0;
 $3 = $27;
 $4 = $28;
 __THREW__ = 0;
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 
 if ($30) {
  $expanded1 = 69;
  $33 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$16 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable
 }
 
 $31 = $3;
 $32 = $4;
 ___resumeException($31|0);
 // unreachable
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $gep = 0, $gep10 = 0;
 var $gep12 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0, u$3 = 0, u$34 = 0, u$9 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $4 = $1;
 $5 = $4;
 $expanded1 = 3216;
 $gep_int = 3216;
 $gep = (($gep_int) + 8)|0;
 $expanded = $gep;
 HEAP32[$4>>2] = $expanded;
 __THREW__ = 0;
 u$3 = invoke_ii(83,$4|0)|0;
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 do {
  if ($7) {
   $expanded2 = 69;
   $8 = ___cxa_find_matching_catch(-1,-1,0)|0;
   $9 = tempRet0;
   $2 = $8;
   $3 = $9;
   
   $10 = $2;
   u$9 = ___cxa_begin_catch($10|0)|0;
   __THREW__ = 0;
   invoke_v(2);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if (!($12)) {
    
    break;
   }
   $expanded3 = 69;
   $19 = ___cxa_find_matching_catch(-1,-1)|0;
   $20 = tempRet0;
   $2 = $19;
   $3 = $20;
   $21 = $4;
   __THREW__ = 0;
   invoke_vi(168,$21|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   
   if ($23) {
    $expanded4 = 69;
    $33 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$34 = tempRet0;
    ___clang_call_terminate($33);
    // unreachable
   }
   
   $31 = $2;
   $32 = $3;
   ___resumeException($31|0);
   // unreachable
  } else {
   
  }
 } while(0);
 $gep_int5 = $4;
 $gep6 = (($gep_int5) + 96)|0;
 $13 = $gep6;
 $14 = HEAP8[$13]|0;
 $15 = $14&1;
 
 if ($15) {
  $gep_int7 = $4;
  $gep8 = (($gep_int7) + 32)|0;
  $16 = $gep8;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  
  if (!($18)) {
   __ZdaPv($17);
   
  }
  
 }
 $gep_int9 = $4;
 $gep10 = (($gep_int9) + 97)|0;
 $24 = $gep10;
 $25 = HEAP8[$24]|0;
 $26 = $25&1;
 
 if (!($26)) {
  $30 = $4;
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($30);
  STACKTOP = sp;return;
 }
 $gep_int11 = $4;
 $gep12 = (($gep_int11) + 56)|0;
 $27 = $gep12;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 
 if (!($29)) {
  __ZdaPv($28);
  
 }
 
 $30 = $4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($30);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__rt = 0, $__t$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i1 = 0, $expanded = 0, $expanded1 = 0;
 var $expanded2 = 0, $gep = 0, $gep11 = 0, $gep18 = 0, $gep24 = 0, $gep31 = 0, $gep5 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0;
 var $gep_int23 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int27 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int7 = 0, $gep_int8 = 0, label = 0, sp = 0, u$48 = 0, u$84 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $35 = sp + 296|0;
 $36 = sp + 304|0;
 
 
 $39 = sp + 328|0;
 $40 = sp + 336|0;
 
 
 
 
 
 $46 = sp + 384|0;
 $47 = sp + 392|0;
 
 
 
 
 
 $__h = sp + 440|0;
 
 
 $51 = $this;
 $54 = $51;
 $__rt = 0;
 $gep_int = $54;
 $gep = (($gep_int) + 64)|0;
 $55 = $gep;
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)!=(0);
 
 if (!($57)) {
  $171 = $__rt;
  STACKTOP = sp;return $171|0;
 }
 $__rt = $54;
 $gep_int4 = $54;
 $gep5 = (($gep_int4) + 64)|0;
 $58 = $gep5;
 $59 = HEAP32[$58>>2]|0;
 $48 = $__h;
 $49 = $59;
 $50 = 84;
 $60 = $48;
 $61 = $49;
 $62 = $50;
 $45 = $60;
 HEAP32[$46>>2] = $61;
 HEAP32[$47>>2] = $62;
 $63 = $45;
 $gep_int6 = $63;
 $64 = $gep_int6;
 $44 = $46;
 $65 = $44;
 $66 = HEAP32[$65>>2]|0;
 $30 = $47;
 $67 = $30;
 $68 = HEAP32[$67>>2]|0;
 $41 = $64;
 $42 = $66;
 $43 = $68;
 $69 = $41;
 $70 = $42;
 $71 = $43;
 $38 = $69;
 HEAP32[$39>>2] = $70;
 HEAP32[$40>>2] = $71;
 $72 = $38;
 $73 = $72;
 $37 = $39;
 $74 = $37;
 $75 = HEAP32[$74>>2]|0;
 $31 = $40;
 $76 = $31;
 $77 = HEAP32[$76>>2]|0;
 $34 = $73;
 HEAP32[$35>>2] = $75;
 HEAP32[$36>>2] = $77;
 $78 = $34;
 $gep_int7 = $78;
 $79 = $gep_int7;
 $33 = $35;
 $80 = $33;
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$79>>2] = $81;
 $gep_int8 = $78;
 $gep9 = (($gep_int8) + 4)|0;
 $82 = $gep9;
 $32 = $36;
 $83 = $32;
 $84 = HEAP32[$83>>2]|0;
 HEAP32[$82>>2] = $84;
 $85 = $54;
 $86 = HEAP32[$54>>2]|0;
 $gep_int10 = $86;
 $gep11 = (($gep_int10) + 24)|0;
 $87 = $gep11;
 $88 = HEAP32[$87>>2]|0;
 __THREW__ = 0;
 $89 = invoke_ii($88|0,$54|0)|0;
 $90 = __THREW__; __THREW__ = 0;
 $91 = $90&1;
 
 do {
  if (!($91)) {
   $92 = ($89|0)!=(0);
   
   if ($92) {
    $__rt = 0;
    
   }
   $17 = $__h;
   $124 = $17;
   $gep_int19 = $124;
   $125 = $gep_int19;
   $16 = $125;
   $126 = $16;
   $127 = $126;
   $15 = $127;
   $128 = $15;
   $gep_int20 = $128;
   $129 = $gep_int20;
   $130 = HEAP32[$129>>2]|0;
   $__t$i = $130;
   $gep_int21 = $124;
   $131 = $gep_int21;
   $14 = $131;
   $132 = $14;
   $133 = $132;
   $13 = $133;
   $134 = $13;
   $gep_int22 = $134;
   $135 = $gep_int22;
   HEAP32[$135>>2] = 0;
   $136 = $__t$i;
   __THREW__ = 0;
   $137 = invoke_ii(84,$136|0)|0;
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   
   if ($139) {
    break;
   }
   $140 = ($137|0)==(0);
   
   if ($140) {
    $gep_int23 = $54;
    $gep24 = (($gep_int23) + 64)|0;
    $141 = $gep24;
    HEAP32[$141>>2] = 0;
    
   } else {
    $__rt = 0;
    
   }
   $12 = $__h;
   $142 = $12;
   $11 = $142;
   $143 = $11;
   $7 = $143;
   $8 = 0;
   $144 = $7;
   $gep_int25 = $144;
   $145 = $gep_int25;
   $6 = $145;
   $146 = $6;
   $147 = $146;
   $5 = $147;
   $148 = $5;
   $gep_int26 = $148;
   $149 = $gep_int26;
   $150 = HEAP32[$149>>2]|0;
   $__tmp$i$i$i1 = $150;
   $151 = $8;
   $gep_int27 = $144;
   $152 = $gep_int27;
   $4 = $152;
   $153 = $4;
   $154 = $153;
   $3 = $154;
   $155 = $3;
   $gep_int28 = $155;
   $156 = $gep_int28;
   HEAP32[$156>>2] = $151;
   $157 = $__tmp$i$i$i1;
   $158 = ($157|0)!=(0);
   
   do {
    if ($158) {
     $gep_int29 = $144;
     $159 = $gep_int29;
     $2 = $159;
     $160 = $2;
     $161 = $160;
     $1 = $161;
     $162 = $1;
     $gep_int30 = $162;
     $gep31 = (($gep_int30) + 4)|0;
     $163 = $gep31;
     $164 = HEAP32[$163>>2]|0;
     $165 = $__tmp$i$i$i1;
     __THREW__ = 0;
     u$84 = invoke_ii($164|0,$165|0)|0;
     $166 = __THREW__; __THREW__ = 0;
     $167 = $166&1;
     
     if ($167) {
      $expanded2 = 69;
      $168 = ___cxa_find_matching_catch(-1,-1,0)|0;
      $169 = tempRet0;
      $9 = $168;
      $10 = $169;
      $170 = $9;
      ___cxa_call_unexpected($170|0);
      // unreachable
     } else {
      
      break;
     }
    }
   } while(0);
   
   $171 = $__rt;
   STACKTOP = sp;return $171|0;
  }
 } while(0);
 $expanded = 69;
 $93 = ___cxa_find_matching_catch(-1,-1)|0;
 $94 = tempRet0;
 $52 = $93;
 $53 = $94;
 $29 = $__h;
 $95 = $29;
 $28 = $95;
 $96 = $28;
 $24 = $96;
 $25 = 0;
 $97 = $24;
 $gep_int12 = $97;
 $98 = $gep_int12;
 $23 = $98;
 $99 = $23;
 $100 = $99;
 $22 = $100;
 $101 = $22;
 $gep_int13 = $101;
 $102 = $gep_int13;
 $103 = HEAP32[$102>>2]|0;
 $__tmp$i$i$i = $103;
 $104 = $25;
 $gep_int14 = $97;
 $105 = $gep_int14;
 $21 = $105;
 $106 = $21;
 $107 = $106;
 $20 = $107;
 $108 = $20;
 $gep_int15 = $108;
 $109 = $gep_int15;
 HEAP32[$109>>2] = $104;
 $110 = $__tmp$i$i$i;
 $111 = ($110|0)!=(0);
 
 do {
  if ($111) {
   $gep_int16 = $97;
   $112 = $gep_int16;
   $19 = $112;
   $113 = $19;
   $114 = $113;
   $18 = $114;
   $115 = $18;
   $gep_int17 = $115;
   $gep18 = (($gep_int17) + 4)|0;
   $116 = $gep18;
   $117 = HEAP32[$116>>2]|0;
   $118 = $__tmp$i$i$i;
   __THREW__ = 0;
   u$48 = invoke_ii($117|0,$118|0)|0;
   $119 = __THREW__; __THREW__ = 0;
   $120 = $119&1;
   
   if ($120) {
    $expanded1 = 69;
    $121 = ___cxa_find_matching_catch(-1,-1,0,0)|0;
    $122 = tempRet0;
    $26 = $121;
    $27 = $122;
    $123 = $26;
    ___cxa_call_unexpected($123|0);
    // unreachable
   } else {
    
    break;
   }
  }
 } while(0);
 
 
 $172 = $52;
 $173 = $53;
 ___resumeException($172|0);
 // unreachable
 return 0|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $4 = $1;
 __THREW__ = 0;
 invoke_vi(23,$4|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if (!($6)) {
  $7 = $4;
  __ZdlPv($7);
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $8 = ___cxa_find_matching_catch(-1,-1)|0;
 $9 = tempRet0;
 $2 = $8;
 $3 = $9;
 $10 = $4;
 __ZdlPv($10);
 
 $11 = $2;
 $12 = $3;
 ___resumeException($11|0);
 // unreachable
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_anc = 0, $expanded = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0;
 var $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep4 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep57 = 0, $gep59 = 0, $gep6 = 0;
 var $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep8 = 0, $gep81 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0;
 var $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int5 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int56 = 0;
 var $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int7 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int9 = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 
 
 
 
 
 
 
 
 
 
 
 
 $10 = $this;
 $11 = $__loc;
 $12 = $10;
 $13 = $12;
 $14 = HEAP32[$12>>2]|0;
 $gep_int = $14;
 $gep = (($gep_int) + 24)|0;
 $15 = $gep;
 $16 = HEAP32[$15>>2]|0;
 u$2 = FUNCTION_TABLE_ii[$16 & 127]($12)|0;
 $17 = $11;
 $9 = $17;
 $18 = $9;
 $expanded = 8544;
 $19 = __ZNKSt3__16locale9use_facetERNS0_2idE($18,$expanded)|0;
 $20 = $19;
 $gep_int1 = $12;
 $gep2 = (($gep_int1) + 68)|0;
 $21 = $gep2;
 HEAP32[$21>>2] = $20;
 $gep_int3 = $12;
 $gep4 = (($gep_int3) + 98)|0;
 $22 = $gep4;
 $23 = HEAP8[$22]|0;
 $24 = $23&1;
 $25 = $24&1;
 $__old_anc = $25;
 $gep_int5 = $12;
 $gep6 = (($gep_int5) + 68)|0;
 $26 = $gep6;
 $27 = HEAP32[$26>>2]|0;
 $8 = $27;
 $28 = $8;
 $29 = $28;
 $30 = HEAP32[$28>>2]|0;
 $gep_int7 = $30;
 $gep8 = (($gep_int7) + 28)|0;
 $31 = $gep8;
 $32 = HEAP32[$31>>2]|0;
 $33 = FUNCTION_TABLE_ii[$32 & 127]($28)|0;
 $gep_int9 = $12;
 $gep10 = (($gep_int9) + 98)|0;
 $34 = $gep10;
 $35 = $33&1;
 HEAP8[$34] = $35;
 $36 = $__old_anc;
 $37 = $36&1;
 $38 = $37&1;
 $gep_int11 = $12;
 $gep12 = (($gep_int11) + 98)|0;
 $39 = $gep12;
 $40 = HEAP8[$39]|0;
 $41 = $40&1;
 $42 = $41&1;
 $43 = ($38|0)!=($42|0);
 
 if (!($43)) {
  STACKTOP = sp;return;
 }
 $44 = $12;
 $4 = $44;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $45 = $4;
 $46 = $5;
 $gep_int13 = $45;
 $gep14 = (($gep_int13) + 8)|0;
 $47 = $gep14;
 HEAP32[$47>>2] = $46;
 $48 = $6;
 $gep_int15 = $45;
 $gep16 = (($gep_int15) + 12)|0;
 $49 = $gep16;
 HEAP32[$49>>2] = $48;
 $50 = $7;
 $gep_int17 = $45;
 $gep18 = (($gep_int17) + 16)|0;
 $51 = $gep18;
 HEAP32[$51>>2] = $50;
 $52 = $12;
 $1 = $52;
 $2 = 0;
 $3 = 0;
 $53 = $1;
 $54 = $2;
 $gep_int19 = $53;
 $gep20 = (($gep_int19) + 24)|0;
 $55 = $gep20;
 HEAP32[$55>>2] = $54;
 $gep_int21 = $53;
 $gep22 = (($gep_int21) + 20)|0;
 $56 = $gep22;
 HEAP32[$56>>2] = $54;
 $57 = $3;
 $gep_int23 = $53;
 $gep24 = (($gep_int23) + 28)|0;
 $58 = $gep24;
 HEAP32[$58>>2] = $57;
 $gep_int25 = $12;
 $gep26 = (($gep_int25) + 98)|0;
 $59 = $gep26;
 $60 = HEAP8[$59]|0;
 $61 = $60&1;
 
 if ($61) {
  $gep_int27 = $12;
  $gep28 = (($gep_int27) + 96)|0;
  $62 = $gep28;
  $63 = HEAP8[$62]|0;
  $64 = $63&1;
  
  if ($64) {
   $gep_int29 = $12;
   $gep30 = (($gep_int29) + 32)|0;
   $65 = $gep30;
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(0);
   
   if (!($67)) {
    __ZdaPv($66);
    
   }
   
  }
  $gep_int31 = $12;
  $gep32 = (($gep_int31) + 97)|0;
  $68 = $gep32;
  $69 = HEAP8[$68]|0;
  $70 = $69&1;
  $gep_int33 = $12;
  $gep34 = (($gep_int33) + 96)|0;
  $71 = $gep34;
  $72 = $70&1;
  HEAP8[$71] = $72;
  $gep_int35 = $12;
  $gep36 = (($gep_int35) + 60)|0;
  $73 = $gep36;
  $74 = HEAP32[$73>>2]|0;
  $gep_int37 = $12;
  $gep38 = (($gep_int37) + 52)|0;
  $75 = $gep38;
  HEAP32[$75>>2] = $74;
  $gep_int39 = $12;
  $gep40 = (($gep_int39) + 56)|0;
  $76 = $gep40;
  $77 = HEAP32[$76>>2]|0;
  $gep_int41 = $12;
  $gep42 = (($gep_int41) + 32)|0;
  $78 = $gep42;
  HEAP32[$78>>2] = $77;
  $gep_int43 = $12;
  $gep44 = (($gep_int43) + 60)|0;
  $79 = $gep44;
  HEAP32[$79>>2] = 0;
  $gep_int45 = $12;
  $gep46 = (($gep_int45) + 56)|0;
  $80 = $gep46;
  HEAP32[$80>>2] = 0;
  $gep_int47 = $12;
  $gep48 = (($gep_int47) + 97)|0;
  $81 = $gep48;
  HEAP8[$81] = 0;
  
 } else {
  $gep_int49 = $12;
  $gep50 = (($gep_int49) + 96)|0;
  $82 = $gep50;
  $83 = HEAP8[$82]|0;
  $84 = $83&1;
  
  do {
   if ($84) {
    label = 11;
   } else {
    $gep_int51 = $12;
    $gep52 = (($gep_int51) + 32)|0;
    $85 = $gep52;
    $86 = HEAP32[$85>>2]|0;
    $gep_int53 = $12;
    $gep54 = (($gep_int53) + 44)|0;
    $87 = $gep54;
    $gep_int55 = $87;
    $88 = $gep_int55;
    $89 = ($86|0)!=($88|0);
    
    if (!($89)) {
     label = 11;
     break;
    }
    $gep_int56 = $12;
    $gep57 = (($gep_int56) + 52)|0;
    $90 = $gep57;
    $91 = HEAP32[$90>>2]|0;
    $gep_int58 = $12;
    $gep59 = (($gep_int58) + 60)|0;
    $92 = $gep59;
    HEAP32[$92>>2] = $91;
    $gep_int60 = $12;
    $gep61 = (($gep_int60) + 32)|0;
    $93 = $gep61;
    $94 = HEAP32[$93>>2]|0;
    $gep_int62 = $12;
    $gep63 = (($gep_int62) + 56)|0;
    $95 = $gep63;
    HEAP32[$95>>2] = $94;
    $gep_int64 = $12;
    $gep65 = (($gep_int64) + 97)|0;
    $96 = $gep65;
    HEAP8[$96] = 0;
    $gep_int66 = $12;
    $gep67 = (($gep_int66) + 52)|0;
    $97 = $gep67;
    $98 = HEAP32[$97>>2]|0;
    $99 = __Znaj($98)|0;
    $gep_int68 = $12;
    $gep69 = (($gep_int68) + 32)|0;
    $100 = $gep69;
    HEAP32[$100>>2] = $99;
    $gep_int70 = $12;
    $gep71 = (($gep_int70) + 96)|0;
    $101 = $gep71;
    HEAP8[$101] = 1;
    
   }
  } while(0);
  if ((label|0) == 11) {
   $gep_int72 = $12;
   $gep73 = (($gep_int72) + 52)|0;
   $102 = $gep73;
   $103 = HEAP32[$102>>2]|0;
   $gep_int74 = $12;
   $gep75 = (($gep_int74) + 60)|0;
   $104 = $gep75;
   HEAP32[$104>>2] = $103;
   $gep_int76 = $12;
   $gep77 = (($gep_int76) + 60)|0;
   $105 = $gep77;
   $106 = HEAP32[$105>>2]|0;
   $107 = __Znaj($106)|0;
   $gep_int78 = $12;
   $gep79 = (($gep_int78) + 56)|0;
   $108 = $gep79;
   HEAP32[$108>>2] = $107;
   $gep_int80 = $12;
   $gep81 = (($gep_int80) + 97)|0;
   $109 = $gep81;
   HEAP8[$109] = 1;
   
  }
  
 }
 
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0;
 var $gep36 = 0, $gep39 = 0, $gep4 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep6 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0;
 var $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0;
 var $gep_int48 = 0, $gep_int5 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int7 = 0, $gep_int9 = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 
 
 
 
 
 
 
 
 $9 = sp + 64|0;
 
 
 $12 = sp + 88|0;
 
 
 
 
 
 
 $19 = sp + 144|0;
 $20 = sp + 152|0;
 $17 = $this;
 $18 = $__s;
 HEAP32[$19>>2] = $__n;
 $21 = $17;
 $22 = $21;
 $13 = $22;
 $14 = 0;
 $15 = 0;
 $16 = 0;
 $23 = $13;
 $24 = $14;
 $gep_int = $23;
 $gep = (($gep_int) + 8)|0;
 $25 = $gep;
 HEAP32[$25>>2] = $24;
 $26 = $15;
 $gep_int1 = $23;
 $gep2 = (($gep_int1) + 12)|0;
 $27 = $gep2;
 HEAP32[$27>>2] = $26;
 $28 = $16;
 $gep_int3 = $23;
 $gep4 = (($gep_int3) + 16)|0;
 $29 = $gep4;
 HEAP32[$29>>2] = $28;
 $30 = $21;
 $1 = $30;
 $2 = 0;
 $3 = 0;
 $31 = $1;
 $32 = $2;
 $gep_int5 = $31;
 $gep6 = (($gep_int5) + 24)|0;
 $33 = $gep6;
 HEAP32[$33>>2] = $32;
 $gep_int7 = $31;
 $gep8 = (($gep_int7) + 20)|0;
 $34 = $gep8;
 HEAP32[$34>>2] = $32;
 $35 = $3;
 $gep_int9 = $31;
 $gep10 = (($gep_int9) + 28)|0;
 $36 = $gep10;
 HEAP32[$36>>2] = $35;
 $gep_int11 = $21;
 $gep12 = (($gep_int11) + 96)|0;
 $37 = $gep12;
 $38 = HEAP8[$37]|0;
 $39 = $38&1;
 
 if ($39) {
  $gep_int13 = $21;
  $gep14 = (($gep_int13) + 32)|0;
  $40 = $gep14;
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0);
  
  if (!($42)) {
   __ZdaPv($41);
   
  }
  
 }
 $gep_int15 = $21;
 $gep16 = (($gep_int15) + 97)|0;
 $43 = $gep16;
 $44 = HEAP8[$43]|0;
 $45 = $44&1;
 
 if ($45) {
  $gep_int17 = $21;
  $gep18 = (($gep_int17) + 56)|0;
  $46 = $gep18;
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  
  if (!($48)) {
   __ZdaPv($47);
   
  }
  
 }
 $49 = HEAP32[$19>>2]|0;
 $gep_int19 = $21;
 $gep20 = (($gep_int19) + 52)|0;
 $50 = $gep20;
 HEAP32[$50>>2] = $49;
 $gep_int21 = $21;
 $gep22 = (($gep_int21) + 52)|0;
 $51 = $gep22;
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52>>>0)>(8);
 
 if ($53) {
  $gep_int23 = $21;
  $gep24 = (($gep_int23) + 98)|0;
  $54 = $gep24;
  $55 = HEAP8[$54]|0;
  $56 = $55&1;
  
  do {
   if ($56) {
    $57 = $18;
    $58 = ($57|0)!=(0);
    
    if (!($58)) {
     label = 13;
     break;
    }
    $59 = $18;
    $gep_int25 = $21;
    $gep26 = (($gep_int25) + 32)|0;
    $60 = $gep26;
    HEAP32[$60>>2] = $59;
    $gep_int27 = $21;
    $gep28 = (($gep_int27) + 96)|0;
    $61 = $gep28;
    HEAP8[$61] = 0;
    
   } else {
    label = 13;
   }
  } while(0);
  if ((label|0) == 13) {
   $gep_int29 = $21;
   $gep30 = (($gep_int29) + 52)|0;
   $62 = $gep30;
   $63 = HEAP32[$62>>2]|0;
   $64 = __Znaj($63)|0;
   $gep_int31 = $21;
   $gep32 = (($gep_int31) + 32)|0;
   $65 = $gep32;
   HEAP32[$65>>2] = $64;
   $gep_int33 = $21;
   $gep34 = (($gep_int33) + 96)|0;
   $66 = $gep34;
   HEAP8[$66] = 1;
   
  }
  
 } else {
  $gep_int35 = $21;
  $gep36 = (($gep_int35) + 44)|0;
  $67 = $gep36;
  $gep_int37 = $67;
  $68 = $gep_int37;
  $gep_int38 = $21;
  $gep39 = (($gep_int38) + 32)|0;
  $69 = $gep39;
  HEAP32[$69>>2] = $68;
  $gep_int40 = $21;
  $gep41 = (($gep_int40) + 52)|0;
  $70 = $gep41;
  HEAP32[$70>>2] = 8;
  $gep_int42 = $21;
  $gep43 = (($gep_int42) + 96)|0;
  $71 = $gep43;
  HEAP8[$71] = 0;
  
 }
 $gep_int44 = $21;
 $gep45 = (($gep_int44) + 98)|0;
 $72 = $gep45;
 $73 = HEAP8[$72]|0;
 $74 = $73&1;
 
 if ($74) {
  $gep_int60 = $21;
  $gep61 = (($gep_int60) + 60)|0;
  $102 = $gep61;
  HEAP32[$102>>2] = 0;
  $gep_int62 = $21;
  $gep63 = (($gep_int62) + 56)|0;
  $103 = $gep63;
  HEAP32[$103>>2] = 0;
  $gep_int64 = $21;
  $gep65 = (($gep_int64) + 97)|0;
  $104 = $gep65;
  HEAP8[$104] = 0;
  
  $105 = $21;
  STACKTOP = sp;return $105|0;
 }
 HEAP32[$20>>2] = 8;
 $10 = $19;
 $11 = $20;
 $75 = $10;
 $76 = $11;
 $tmp$i = $9;
 $tmp1$i = $12;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $7 = $75;
 $8 = $76;
 $77 = $7;
 $78 = $8;
 $4 = $9;
 $5 = $77;
 $6 = $78;
 $79 = $5;
 $80 = HEAP32[$79>>2]|0;
 $81 = $6;
 $82 = HEAP32[$81>>2]|0;
 $83 = ($80|0)<($82|0);
 
 if ($83) {
  $84 = $8;
  
  $86 = $84;
 } else {
  $85 = $7;
  
  $86 = $85;
 }
 
 $87 = HEAP32[$86>>2]|0;
 $gep_int46 = $21;
 $gep47 = (($gep_int46) + 60)|0;
 $88 = $gep47;
 HEAP32[$88>>2] = $87;
 $89 = $18;
 $90 = ($89|0)!=(0);
 
 do {
  if ($90) {
   $gep_int48 = $21;
   $gep49 = (($gep_int48) + 60)|0;
   $91 = $gep49;
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92>>>0)>=(8);
   
   if (!($93)) {
    label = 23;
    break;
   }
   $94 = $18;
   $gep_int50 = $21;
   $gep51 = (($gep_int50) + 56)|0;
   $95 = $gep51;
   HEAP32[$95>>2] = $94;
   $gep_int52 = $21;
   $gep53 = (($gep_int52) + 97)|0;
   $96 = $gep53;
   HEAP8[$96] = 0;
   
  } else {
   label = 23;
  }
 } while(0);
 if ((label|0) == 23) {
  $gep_int54 = $21;
  $gep55 = (($gep_int54) + 60)|0;
  $97 = $gep55;
  $98 = HEAP32[$97>>2]|0;
  $99 = __Znaj($98)|0;
  $gep_int56 = $21;
  $gep57 = (($gep_int56) + 56)|0;
  $100 = $gep57;
  HEAP32[$100>>2] = $99;
  $gep_int58 = $21;
  $gep59 = (($gep_int58) + 97)|0;
  $101 = $gep59;
  HEAP8[$101] = 1;
  
 }
 
 $105 = $21;
 STACKTOP = sp;return $105|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$1,$2,$__way,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $1 = $1|0;
 $2 = $2|0;
 $__way = $__way|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__whence = 0, $__width = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep12 = 0, $gep15 = 0;
 var $gep17 = 0, $gep20 = 0, $gep22 = 0, $gep25 = 0, $gep27 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int23 = 0;
 var $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $tmp = 0, $tmp1 = 0, label = 0, sp = 0, u$45 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 
 $5 = sp + 8|0;
 
 $7 = sp + 24|0;
 
 $9 = sp + 40|0;
 
 $11 = sp + 56|0;
 
 $13 = sp + 72|0;
 
 $15 = sp + 88|0;
 
 $17 = sp + 104|0;
 
 $19 = sp + 120|0;
 
 $21 = sp + 136|0;
 
 
 $24 = sp + 160|0;
 
 
 
 
 $__r = sp + 200|0;
 $27 = sp + 216|0;
 $23 = $this;
 $28 = $24;
 $29 = $28;
 HEAP32[$29>>2] = $1;
 $30 = (($28) + 4)|0;
 $31 = $30;
 HEAP32[$31>>2] = $2;
 $25 = $__way;
 $26 = $3;
 $32 = $23;
 $gep_int = $32;
 $gep = (($gep_int) + 68)|0;
 $33 = $gep;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0);
 
 if (!($35)) {
  $36 = ___cxa_allocate_exception(4)|0;
  $37 = $36;
  __ZNSt8bad_castC2Ev($37);
  $expanded = 16440;
  $expanded1 = 119;
  ___cxa_throw($36|0,$expanded|0,$expanded1|0);
  // unreachable
 }
 $gep_int2 = $32;
 $gep3 = (($gep_int2) + 68)|0;
 $38 = $gep3;
 $39 = HEAP32[$38>>2]|0;
 $22 = $39;
 $40 = $22;
 $41 = $40;
 $42 = HEAP32[$40>>2]|0;
 $gep_int4 = $42;
 $gep5 = (($gep_int4) + 24)|0;
 $43 = $gep5;
 $44 = HEAP32[$43>>2]|0;
 $45 = FUNCTION_TABLE_ii[$44 & 127]($40)|0;
 $__width = $45;
 $gep_int6 = $32;
 $gep7 = (($gep_int6) + 64)|0;
 $46 = $gep7;
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0);
 
 do {
  if (!($48)) {
   $49 = $__width;
   $50 = ($49|0)<=(0);
   
   if ($50) {
    $51 = $24;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) + 4)|0;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = ($53|0)!=(0);
    $58 = ($56|0)!=(0);
    $59 = $57 | $58;
    
    if ($59) {
     break;
    }
   }
   $60 = $32;
   $61 = HEAP32[$32>>2]|0;
   $gep_int8 = $61;
   $gep9 = (($gep_int8) + 24)|0;
   $62 = $gep9;
   $63 = HEAP32[$62>>2]|0;
   $64 = FUNCTION_TABLE_ii[$63 & 127]($32)|0;
   $65 = ($64|0)!=(0);
   
   if ($65) {
    break;
   }
   $95 = $25;
   
   if ((($95|0) == 0)) {
    $__whence = 0;
    
   } else if ((($95|0) == 1)) {
    $__whence = 1;
    
   } else if ((($95|0) == 2)) {
    $__whence = 2;
    
   } else {
    $6 = $agg$result;
    $96 = $7;
    $97 = $96;
    HEAP32[$97>>2] = -1;
    $98 = (($96) + 4)|0;
    $99 = $98;
    HEAP32[$99>>2] = -1;
    $100 = $6;
    $101 = $7;
    $102 = $101;
    $103 = HEAP32[$102>>2]|0;
    $104 = (($101) + 4)|0;
    $105 = $104;
    $106 = HEAP32[$105>>2]|0;
    $4 = $100;
    $107 = $5;
    $108 = $107;
    HEAP32[$108>>2] = $103;
    $109 = (($107) + 4)|0;
    $110 = $109;
    HEAP32[$110>>2] = $106;
    $111 = $4;
    $gep_int13 = $111;
    $112 = $gep_int13;
    $113 = $112;
    ;HEAP32[$113+0>>2]=0|0;HEAP32[$113+4>>2]=0|0;
    $gep_int14 = $111;
    $gep15 = (($gep_int14) + 8)|0;
    $114 = $gep15;
    $115 = $5;
    $116 = $115;
    $117 = HEAP32[$116>>2]|0;
    $118 = (($115) + 4)|0;
    $119 = $118;
    $120 = HEAP32[$119>>2]|0;
    $121 = $114;
    $122 = $121;
    HEAP32[$122>>2] = $117;
    $123 = (($121) + 4)|0;
    $124 = $123;
    HEAP32[$124>>2] = $120;
    
    STACKTOP = sp;return;
   }
   $gep_int16 = $32;
   $gep17 = (($gep_int16) + 64)|0;
   $125 = $gep17;
   $126 = HEAP32[$125>>2]|0;
   $127 = $__width;
   $128 = ($127|0)>(0);
   
   if ($128) {
    $129 = $__width;
    $130 = ($129|0)<(0);
    $131 = $130 << 31 >> 31;
    $132 = $24;
    $133 = $132;
    $134 = HEAP32[$133>>2]|0;
    $135 = (($132) + 4)|0;
    $136 = $135;
    $137 = HEAP32[$136>>2]|0;
    $138 = ___muldi3($129|0,$131|0,$134|0,$137|0)|0;
    $139 = tempRet0;
    
    $140 = $138;u$45 = $139;
   } else {
    
    $140 = 0;u$45 = 0;
   }
   
   
   $141 = $__whence;
   $142 = _fseek($126|0,$140|0,$141|0)|0;
   $143 = ($142|0)!=(0);
   
   if ($143) {
    $10 = $agg$result;
    $144 = $11;
    $145 = $144;
    HEAP32[$145>>2] = -1;
    $146 = (($144) + 4)|0;
    $147 = $146;
    HEAP32[$147>>2] = -1;
    $148 = $10;
    $149 = $11;
    $150 = $149;
    $151 = HEAP32[$150>>2]|0;
    $152 = (($149) + 4)|0;
    $153 = $152;
    $154 = HEAP32[$153>>2]|0;
    $8 = $148;
    $155 = $9;
    $156 = $155;
    HEAP32[$156>>2] = $151;
    $157 = (($155) + 4)|0;
    $158 = $157;
    HEAP32[$158>>2] = $154;
    $159 = $8;
    $gep_int18 = $159;
    $160 = $gep_int18;
    $161 = $160;
    ;HEAP32[$161+0>>2]=0|0;HEAP32[$161+4>>2]=0|0;
    $gep_int19 = $159;
    $gep20 = (($gep_int19) + 8)|0;
    $162 = $gep20;
    $163 = $9;
    $164 = $163;
    $165 = HEAP32[$164>>2]|0;
    $166 = (($163) + 4)|0;
    $167 = $166;
    $168 = HEAP32[$167>>2]|0;
    $169 = $162;
    $170 = $169;
    HEAP32[$170>>2] = $165;
    $171 = (($169) + 4)|0;
    $172 = $171;
    HEAP32[$172>>2] = $168;
    
    STACKTOP = sp;return;
   } else {
    $gep_int21 = $32;
    $gep22 = (($gep_int21) + 64)|0;
    $173 = $gep22;
    $174 = HEAP32[$173>>2]|0;
    $175 = _ftell($174|0)|0;
    $176 = ($175|0)<(0);
    $177 = $176 << 31 >> 31;
    $14 = $__r;
    $178 = $15;
    $179 = $178;
    HEAP32[$179>>2] = $175;
    $180 = (($178) + 4)|0;
    $181 = $180;
    HEAP32[$181>>2] = $177;
    $182 = $14;
    $183 = $15;
    $184 = $183;
    $185 = HEAP32[$184>>2]|0;
    $186 = (($183) + 4)|0;
    $187 = $186;
    $188 = HEAP32[$187>>2]|0;
    $12 = $182;
    $189 = $13;
    $190 = $189;
    HEAP32[$190>>2] = $185;
    $191 = (($189) + 4)|0;
    $192 = $191;
    HEAP32[$192>>2] = $188;
    $193 = $12;
    $gep_int23 = $193;
    $194 = $gep_int23;
    $195 = $194;
    ;HEAP32[$195+0>>2]=0|0;HEAP32[$195+4>>2]=0|0;
    $gep_int24 = $193;
    $gep25 = (($gep_int24) + 8)|0;
    $196 = $gep25;
    $197 = $13;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $203 = $196;
    $204 = $203;
    HEAP32[$204>>2] = $199;
    $205 = (($203) + 4)|0;
    $206 = $205;
    HEAP32[$206>>2] = $202;
    $gep_int26 = $32;
    $gep27 = (($gep_int26) + 72)|0;
    $207 = $gep27;
    $208 = $27;
    $209 = $207;
    ;HEAP32[$208+0>>2]=HEAP32[$209+0>>2]|0;HEAP32[$208+4>>2]=HEAP32[$209+4>>2]|0;
    $tmp = $17;
    $tmp1 = $27;
    ;HEAP8[$tmp+0|0]=HEAP8[$tmp1+0|0]|0;HEAP8[$tmp+1|0]=HEAP8[$tmp1+1|0]|0;HEAP8[$tmp+2|0]=HEAP8[$tmp1+2|0]|0;HEAP8[$tmp+3|0]=HEAP8[$tmp1+3|0]|0;HEAP8[$tmp+4|0]=HEAP8[$tmp1+4|0]|0;HEAP8[$tmp+5|0]=HEAP8[$tmp1+5|0]|0;HEAP8[$tmp+6|0]=HEAP8[$tmp1+6|0]|0;HEAP8[$tmp+7|0]=HEAP8[$tmp1+7|0]|0;
    $16 = $__r;
    $210 = $16;
    $gep_int28 = $210;
    $211 = $gep_int28;
    $212 = $211;
    $213 = $17;
    ;HEAP32[$212+0>>2]=HEAP32[$213+0>>2]|0;HEAP32[$212+4>>2]=HEAP32[$213+4>>2]|0;
    $214 = $agg$result;
    $215 = $__r;
    ;HEAP32[$214+0>>2]=HEAP32[$215+0>>2]|0;HEAP32[$214+4>>2]=HEAP32[$215+4>>2]|0;HEAP32[$214+8>>2]=HEAP32[$215+8>>2]|0;HEAP32[$214+12>>2]=HEAP32[$215+12>>2]|0;
    
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $20 = $agg$result;
 $66 = $21;
 $67 = $66;
 HEAP32[$67>>2] = -1;
 $68 = (($66) + 4)|0;
 $69 = $68;
 HEAP32[$69>>2] = -1;
 $70 = $20;
 $71 = $21;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $18 = $70;
 $77 = $19;
 $78 = $77;
 HEAP32[$78>>2] = $73;
 $79 = (($77) + 4)|0;
 $80 = $79;
 HEAP32[$80>>2] = $76;
 $81 = $18;
 $gep_int10 = $81;
 $82 = $gep_int10;
 $83 = $82;
 ;HEAP32[$83+0>>2]=0|0;HEAP32[$83+4>>2]=0|0;
 $gep_int11 = $81;
 $gep12 = (($gep_int11) + 8)|0;
 $84 = $gep12;
 $85 = $19;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + 4)|0;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = $84;
 $92 = $91;
 HEAP32[$92>>2] = $87;
 $93 = (($91) + 4)|0;
 $94 = $93;
 HEAP32[$94>>2] = $90;
 
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $gep = 0, $gep12 = 0, $gep14 = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 var u$15 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 
 
 $4 = sp + 16|0;
 
 $6 = sp + 32|0;
 
 
 $9 = sp + 56|0;
 
 $11 = sp + 72|0;
 
 
 $14 = sp + 96|0;
 $12 = $this;
 $13 = $1;
 $15 = $12;
 $gep_int = $15;
 $gep = (($gep_int) + 64)|0;
 $16 = $gep;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 
 do {
  if (!($18)) {
   $19 = $15;
   $20 = HEAP32[$15>>2]|0;
   $gep_int1 = $20;
   $gep2 = (($gep_int1) + 24)|0;
   $21 = $gep2;
   $22 = HEAP32[$21>>2]|0;
   $23 = FUNCTION_TABLE_ii[$22 & 127]($15)|0;
   $24 = ($23|0)!=(0);
   
   if ($24) {
    break;
   }
   $gep_int6 = $15;
   $gep7 = (($gep_int6) + 64)|0;
   $54 = $gep7;
   $55 = HEAP32[$54>>2]|0;
   $2 = $__sp;
   $56 = $2;
   $gep_int8 = $56;
   $gep9 = (($gep_int8) + 8)|0;
   $57 = $gep9;
   $58 = $57;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   u$15 = HEAP32[$62>>2]|0;
   $63 = _fseek($55|0,$60|0,0)|0;
   $64 = ($63|0)!=(0);
   
   if ($64) {
    $5 = $agg$result;
    $65 = $6;
    $66 = $65;
    HEAP32[$66>>2] = -1;
    $67 = (($65) + 4)|0;
    $68 = $67;
    HEAP32[$68>>2] = -1;
    $69 = $5;
    $70 = $6;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) + 4)|0;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $3 = $69;
    $76 = $4;
    $77 = $76;
    HEAP32[$77>>2] = $72;
    $78 = (($76) + 4)|0;
    $79 = $78;
    HEAP32[$79>>2] = $75;
    $80 = $3;
    $gep_int10 = $80;
    $81 = $gep_int10;
    $82 = $81;
    ;HEAP32[$82+0>>2]=0|0;HEAP32[$82+4>>2]=0|0;
    $gep_int11 = $80;
    $gep12 = (($gep_int11) + 8)|0;
    $83 = $gep12;
    $84 = $4;
    $85 = $84;
    $86 = HEAP32[$85>>2]|0;
    $87 = (($84) + 4)|0;
    $88 = $87;
    $89 = HEAP32[$88>>2]|0;
    $90 = $83;
    $91 = $90;
    HEAP32[$91>>2] = $86;
    $92 = (($90) + 4)|0;
    $93 = $92;
    HEAP32[$93>>2] = $89;
    
    STACKTOP = sp;return;
   } else {
    $gep_int13 = $15;
    $gep14 = (($gep_int13) + 72)|0;
    $94 = $gep14;
    $7 = $__sp;
    $95 = $7;
    $gep_int15 = $95;
    $96 = $gep_int15;
    $97 = $14;
    $98 = $96;
    ;HEAP32[$97+0>>2]=HEAP32[$98+0>>2]|0;HEAP32[$97+4>>2]=HEAP32[$98+4>>2]|0;
    $99 = $94;
    $100 = $14;
    ;HEAP32[$99+0>>2]=HEAP32[$100+0>>2]|0;HEAP32[$99+4>>2]=HEAP32[$100+4>>2]|0;
    $101 = $agg$result;
    $102 = $__sp;
    ;HEAP32[$101+0>>2]=HEAP32[$102+0>>2]|0;HEAP32[$101+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$101+8>>2]=HEAP32[$102+8>>2]|0;HEAP32[$101+12>>2]=HEAP32[$102+12>>2]|0;
    
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $10 = $agg$result;
 $25 = $11;
 $26 = $25;
 HEAP32[$26>>2] = -1;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = -1;
 $29 = $10;
 $30 = $11;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $8 = $29;
 $36 = $9;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = $35;
 $40 = $8;
 $gep_int3 = $40;
 $41 = $gep_int3;
 $42 = $41;
 ;HEAP32[$42+0>>2]=0|0;HEAP32[$42+4>>2]=0|0;
 $gep_int4 = $40;
 $gep5 = (($gep_int4) + 8)|0;
 $43 = $gep5;
 $44 = $9;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = $43;
 $51 = $50;
 HEAP32[$51>>2] = $46;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = $49;
 
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__extbe = 0, $__nmemb = 0, $__off = 0, $__r = 0, $__state = 0, $__update_st = 0, $__width = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0;
 var $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep3 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep5 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0;
 var $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep7 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep9 = 0, $gep91 = 0, $gep93 = 0;
 var $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int2 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int4 = 0, $gep_int40 = 0, $gep_int42 = 0;
 var $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int6 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int8 = 0;
 var $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, label = 0, sp = 0, u$72 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $__extbe = sp + 224|0;
 
 $__c = sp + 240|0;
 $__state = sp + 248|0;
 
 
 
 $27 = $this;
 $28 = $27;
 $gep_int = $28;
 $gep = (($gep_int) + 64)|0;
 $29 = $gep;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 
 if ($31) {
  $26 = 0;
  
  $263 = $26;
  STACKTOP = sp;return $263|0;
 }
 $gep_int2 = $28;
 $gep3 = (($gep_int2) + 68)|0;
 $32 = $gep3;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 
 if (!($34)) {
  $35 = ___cxa_allocate_exception(4)|0;
  $36 = $35;
  __ZNSt8bad_castC2Ev($36);
  $expanded = 16440;
  $expanded1 = 119;
  ___cxa_throw($35|0,$expanded|0,$expanded1|0);
  // unreachable
 }
 $gep_int4 = $28;
 $gep5 = (($gep_int4) + 92)|0;
 $37 = $gep5;
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & 16;
 $40 = ($39|0)!=(0);
 
 do {
  if ($40) {
   $41 = $28;
   $25 = $41;
   $42 = $25;
   $gep_int6 = $42;
   $gep7 = (($gep_int6) + 24)|0;
   $43 = $gep7;
   $44 = HEAP32[$43>>2]|0;
   $45 = $28;
   $15 = $45;
   $46 = $15;
   $gep_int8 = $46;
   $gep9 = (($gep_int8) + 20)|0;
   $47 = $gep9;
   $48 = HEAP32[$47>>2]|0;
   $49 = ($44|0)!=($48|0);
   
   do {
    if ($49) {
     $50 = $28;
     $51 = HEAP32[$28>>2]|0;
     $gep_int10 = $51;
     $gep11 = (($gep_int10) + 52)|0;
     $52 = $gep11;
     $53 = HEAP32[$52>>2]|0;
     $54 = FUNCTION_TABLE_iii[$53 & 63]($28,-1)|0;
     $55 = ($54|0)==(-1);
     
     if (!($55)) {
      
      break;
     }
     $26 = -1;
     
     $263 = $26;
     STACKTOP = sp;return $263|0;
    }
   } while(0);
   
   while(1) {
    $gep_int12 = $28;
    $gep13 = (($gep_int12) + 68)|0;
    $56 = $gep13;
    $57 = HEAP32[$56>>2]|0;
    $gep_int14 = $28;
    $gep15 = (($gep_int14) + 72)|0;
    $58 = $gep15;
    $gep_int16 = $28;
    $gep17 = (($gep_int16) + 32)|0;
    $59 = $gep17;
    $60 = HEAP32[$59>>2]|0;
    $gep_int18 = $28;
    $gep19 = (($gep_int18) + 32)|0;
    $61 = $gep19;
    $62 = HEAP32[$61>>2]|0;
    $gep_int20 = $28;
    $gep21 = (($gep_int20) + 52)|0;
    $63 = $gep21;
    $64 = HEAP32[$63>>2]|0;
    $gep_int22 = $62;
    $gep23 = (($gep_int22) + ($64))|0;
    $65 = $gep23;
    $1 = $57;
    $2 = $58;
    $3 = $60;
    $4 = $65;
    $5 = $__extbe;
    $66 = $1;
    $67 = $66;
    $68 = HEAP32[$66>>2]|0;
    $gep_int24 = $68;
    $gep25 = (($gep_int24) + 20)|0;
    $69 = $gep25;
    $70 = HEAP32[$69>>2]|0;
    $71 = $2;
    $72 = $3;
    $73 = $4;
    $74 = $5;
    $75 = FUNCTION_TABLE_iiiiii[$70 & 31]($66,$71,$72,$73,$74)|0;
    $__r = $75;
    $76 = HEAP32[$__extbe>>2]|0;
    $gep_int26 = $28;
    $gep27 = (($gep_int26) + 32)|0;
    $77 = $gep27;
    $78 = HEAP32[$77>>2]|0;
    $79 = $76;
    $80 = $78;
    $81 = (($79) - ($80))|0;
    $__nmemb = $81;
    $gep_int28 = $28;
    $gep29 = (($gep_int28) + 32)|0;
    $82 = $gep29;
    $83 = HEAP32[$82>>2]|0;
    $84 = $__nmemb;
    $gep_int30 = $28;
    $gep31 = (($gep_int30) + 64)|0;
    $85 = $gep31;
    $86 = HEAP32[$85>>2]|0;
    $87 = _fwrite($83|0,1,$84|0,$86|0)|0;
    $88 = $__nmemb;
    $89 = ($87|0)!=($88|0);
    
    if ($89) {
     label = 12;
     break;
    }
    
    $90 = $__r;
    $91 = ($90|0)==(1);
    
    if (!($91)) {
     break;
    }
   }
   if ((label|0) == 12) {
    $26 = -1;
    
    $263 = $26;
    STACKTOP = sp;return $263|0;
   }
   $92 = $__r;
   $93 = ($92|0)==(2);
   
   if ($93) {
    $26 = -1;
    
    $263 = $26;
    STACKTOP = sp;return $263|0;
   }
   $gep_int32 = $28;
   $gep33 = (($gep_int32) + 64)|0;
   $94 = $gep33;
   $95 = HEAP32[$94>>2]|0;
   $96 = _fflush($95|0)|0;
   $97 = ($96|0)!=(0);
   
   if (!($97)) {
    
    break;
   }
   $26 = -1;
   
   $263 = $26;
   STACKTOP = sp;return $263|0;
  } else {
   $gep_int34 = $28;
   $gep35 = (($gep_int34) + 92)|0;
   $98 = $gep35;
   $99 = HEAP32[$98>>2]|0;
   $100 = $99 & 8;
   $101 = ($100|0)!=(0);
   
   if ($101) {
    $gep_int36 = $28;
    $gep37 = (($gep_int36) + 80)|0;
    $102 = $gep37;
    $103 = $__state;
    $104 = $102;
    ;HEAP32[$103+0>>2]=HEAP32[$104+0>>2]|0;HEAP32[$103+4>>2]=HEAP32[$104+4>>2]|0;
    $__update_st = 0;
    $gep_int38 = $28;
    $gep39 = (($gep_int38) + 98)|0;
    $105 = $gep39;
    $106 = HEAP8[$105]|0;
    $107 = $106&1;
    
    if ($107) {
     $108 = $28;
     $6 = $108;
     $109 = $6;
     $gep_int40 = $109;
     $gep41 = (($gep_int40) + 16)|0;
     $110 = $gep41;
     $111 = HEAP32[$110>>2]|0;
     $112 = $28;
     $7 = $112;
     $113 = $7;
     $gep_int42 = $113;
     $gep43 = (($gep_int42) + 12)|0;
     $114 = $gep43;
     $115 = HEAP32[$114>>2]|0;
     $116 = $111;
     $117 = $115;
     $118 = (($116) - ($117))|0;
     $119 = ($118|0)<(0);
     $120 = $119 << 31 >> 31;
     $121 = $__c;
     $122 = $121;
     HEAP32[$122>>2] = $118;
     $123 = (($121) + 4)|0;
     $124 = $123;
     HEAP32[$124>>2] = $120;
     
    } else {
     $gep_int44 = $28;
     $gep45 = (($gep_int44) + 68)|0;
     $125 = $gep45;
     $126 = HEAP32[$125>>2]|0;
     $8 = $126;
     $127 = $8;
     $128 = $127;
     $129 = HEAP32[$127>>2]|0;
     $gep_int46 = $129;
     $gep47 = (($gep_int46) + 24)|0;
     $130 = $gep47;
     $131 = HEAP32[$130>>2]|0;
     $132 = FUNCTION_TABLE_ii[$131 & 127]($127)|0;
     $__width = $132;
     $gep_int48 = $28;
     $gep49 = (($gep_int48) + 40)|0;
     $133 = $gep49;
     $134 = HEAP32[$133>>2]|0;
     $gep_int50 = $28;
     $gep51 = (($gep_int50) + 36)|0;
     $135 = $gep51;
     $136 = HEAP32[$135>>2]|0;
     $137 = $134;
     $138 = $136;
     $139 = (($137) - ($138))|0;
     $140 = ($139|0)<(0);
     $141 = $140 << 31 >> 31;
     $142 = $__c;
     $143 = $142;
     HEAP32[$143>>2] = $139;
     $144 = (($142) + 4)|0;
     $145 = $144;
     HEAP32[$145>>2] = $141;
     $146 = $__width;
     $147 = ($146|0)>(0);
     
     if ($147) {
      $148 = $__width;
      $149 = $28;
      $9 = $149;
      $150 = $9;
      $gep_int52 = $150;
      $gep53 = (($gep_int52) + 16)|0;
      $151 = $gep53;
      $152 = HEAP32[$151>>2]|0;
      $153 = $28;
      $10 = $153;
      $154 = $10;
      $gep_int54 = $154;
      $gep55 = (($gep_int54) + 12)|0;
      $155 = $gep55;
      $156 = HEAP32[$155>>2]|0;
      $157 = $152;
      $158 = $156;
      $159 = (($157) - ($158))|0;
      $160 = Math_imul($148, $159)|0;
      $161 = ($160|0)<(0);
      $162 = $161 << 31 >> 31;
      $163 = $__c;
      $164 = $163;
      $165 = HEAP32[$164>>2]|0;
      $166 = (($163) + 4)|0;
      $167 = $166;
      $168 = HEAP32[$167>>2]|0;
      $169 = _i64Add($165|0,$168|0,$160|0,$162|0)|0;
      $170 = tempRet0;
      $171 = $__c;
      $172 = $171;
      HEAP32[$172>>2] = $169;
      $173 = (($171) + 4)|0;
      $174 = $173;
      HEAP32[$174>>2] = $170;
      
     } else {
      $175 = $28;
      $11 = $175;
      $176 = $11;
      $gep_int56 = $176;
      $gep57 = (($gep_int56) + 12)|0;
      $177 = $gep57;
      $178 = HEAP32[$177>>2]|0;
      $179 = $28;
      $12 = $179;
      $180 = $12;
      $gep_int58 = $180;
      $gep59 = (($gep_int58) + 16)|0;
      $181 = $gep59;
      $182 = HEAP32[$181>>2]|0;
      $183 = ($178|0)!=($182|0);
      
      if ($183) {
       $gep_int60 = $28;
       $gep61 = (($gep_int60) + 68)|0;
       $184 = $gep61;
       $185 = HEAP32[$184>>2]|0;
       $gep_int62 = $28;
       $gep63 = (($gep_int62) + 32)|0;
       $186 = $gep63;
       $187 = HEAP32[$186>>2]|0;
       $gep_int64 = $28;
       $gep65 = (($gep_int64) + 36)|0;
       $188 = $gep65;
       $189 = HEAP32[$188>>2]|0;
       $190 = $28;
       $13 = $190;
       $191 = $13;
       $gep_int66 = $191;
       $gep67 = (($gep_int66) + 12)|0;
       $192 = $gep67;
       $193 = HEAP32[$192>>2]|0;
       $194 = $28;
       $14 = $194;
       $195 = $14;
       $gep_int68 = $195;
       $gep69 = (($gep_int68) + 8)|0;
       $196 = $gep69;
       $197 = HEAP32[$196>>2]|0;
       $198 = $193;
       $199 = $197;
       $200 = (($198) - ($199))|0;
       $16 = $185;
       $17 = $__state;
       $18 = $187;
       $19 = $189;
       $20 = $200;
       $201 = $16;
       $202 = $201;
       $203 = HEAP32[$201>>2]|0;
       $gep_int70 = $203;
       $gep71 = (($gep_int70) + 32)|0;
       $204 = $gep71;
       $205 = HEAP32[$204>>2]|0;
       $206 = $17;
       $207 = $18;
       $208 = $19;
       $209 = $20;
       $210 = FUNCTION_TABLE_iiiiii[$205 & 31]($201,$206,$207,$208,$209)|0;
       $__off = $210;
       $gep_int72 = $28;
       $gep73 = (($gep_int72) + 36)|0;
       $211 = $gep73;
       $212 = HEAP32[$211>>2]|0;
       $gep_int74 = $28;
       $gep75 = (($gep_int74) + 32)|0;
       $213 = $gep75;
       $214 = HEAP32[$213>>2]|0;
       $215 = $212;
       $216 = $214;
       $217 = (($215) - ($216))|0;
       $218 = $__off;
       $219 = (($217) - ($218))|0;
       $220 = ($219|0)<(0);
       $221 = $220 << 31 >> 31;
       $222 = $__c;
       $223 = $222;
       $224 = HEAP32[$223>>2]|0;
       $225 = (($222) + 4)|0;
       $226 = $225;
       $227 = HEAP32[$226>>2]|0;
       $228 = _i64Add($224|0,$227|0,$219|0,$221|0)|0;
       $229 = tempRet0;
       $230 = $__c;
       $231 = $230;
       HEAP32[$231>>2] = $228;
       $232 = (($230) + 4)|0;
       $233 = $232;
       HEAP32[$233>>2] = $229;
       $__update_st = 1;
       
      }
      
     }
     
    }
    $gep_int76 = $28;
    $gep77 = (($gep_int76) + 64)|0;
    $234 = $gep77;
    $235 = HEAP32[$234>>2]|0;
    $236 = $__c;
    $237 = $236;
    $238 = HEAP32[$237>>2]|0;
    $239 = (($236) + 4)|0;
    $240 = $239;
    $241 = HEAP32[$240>>2]|0;
    $242 = _i64Subtract(0,0,$238|0,$241|0)|0;
    u$72 = tempRet0;
    $243 = _fseek($235|0,$242|0,1)|0;
    $244 = ($243|0)!=(0);
    
    if ($244) {
     $26 = -1;
     
     $263 = $26;
     STACKTOP = sp;return $263|0;
    }
    $245 = $__update_st;
    $246 = $245&1;
    
    if ($246) {
     $gep_int78 = $28;
     $gep79 = (($gep_int78) + 72)|0;
     $247 = $gep79;
     $248 = $247;
     $249 = $__state;
     ;HEAP32[$248+0>>2]=HEAP32[$249+0>>2]|0;HEAP32[$248+4>>2]=HEAP32[$249+4>>2]|0;
     
    }
    $gep_int80 = $28;
    $gep81 = (($gep_int80) + 32)|0;
    $250 = $gep81;
    $251 = HEAP32[$250>>2]|0;
    $gep_int82 = $28;
    $gep83 = (($gep_int82) + 40)|0;
    $252 = $gep83;
    HEAP32[$252>>2] = $251;
    $gep_int84 = $28;
    $gep85 = (($gep_int84) + 36)|0;
    $253 = $gep85;
    HEAP32[$253>>2] = $251;
    $254 = $28;
    $21 = $254;
    $22 = 0;
    $23 = 0;
    $24 = 0;
    $255 = $21;
    $256 = $22;
    $gep_int86 = $255;
    $gep87 = (($gep_int86) + 8)|0;
    $257 = $gep87;
    HEAP32[$257>>2] = $256;
    $258 = $23;
    $gep_int88 = $255;
    $gep89 = (($gep_int88) + 12)|0;
    $259 = $gep89;
    HEAP32[$259>>2] = $258;
    $260 = $24;
    $gep_int90 = $255;
    $gep91 = (($gep_int90) + 16)|0;
    $261 = $gep91;
    HEAP32[$261>>2] = $260;
    $gep_int92 = $28;
    $gep93 = (($gep_int92) + 92)|0;
    $262 = $gep93;
    HEAP32[$262>>2] = 0;
    
   }
   
  }
 } while(0);
 $26 = 0;
 
 $263 = $26;
 STACKTOP = sp;return $263|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c = 0, $__inext = 0, $__initial = 0, $__nmemb = 0, $__nmemb1 = 0, $__nr = 0, $__r = 0, $__unget_sz = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0, $gep106 = 0;
 var $gep108 = 0, $gep11 = 0, $gep110 = 0, $gep112 = 0, $gep114 = 0, $gep116 = 0, $gep118 = 0, $gep120 = 0, $gep122 = 0, $gep124 = 0, $gep126 = 0, $gep128 = 0, $gep13 = 0, $gep130 = 0, $gep132 = 0, $gep134 = 0, $gep136 = 0, $gep138 = 0, $gep140 = 0, $gep142 = 0;
 var $gep144 = 0, $gep146 = 0, $gep148 = 0, $gep15 = 0, $gep150 = 0, $gep152 = 0, $gep154 = 0, $gep156 = 0, $gep158 = 0, $gep160 = 0, $gep162 = 0, $gep164 = 0, $gep166 = 0, $gep168 = 0, $gep17 = 0, $gep170 = 0, $gep172 = 0, $gep174 = 0, $gep176 = 0, $gep19 = 0;
 var $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep3 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep5 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0;
 var $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep7 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep86 = 0, $gep88 = 0, $gep9 = 0, $gep90 = 0, $gep92 = 0;
 var $gep94 = 0, $gep96 = 0, $gep98 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int111 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0, $gep_int119 = 0, $gep_int12 = 0, $gep_int121 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int127 = 0;
 var $gep_int129 = 0, $gep_int131 = 0, $gep_int133 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int139 = 0, $gep_int14 = 0, $gep_int141 = 0, $gep_int143 = 0, $gep_int145 = 0, $gep_int147 = 0, $gep_int149 = 0, $gep_int151 = 0, $gep_int153 = 0, $gep_int155 = 0, $gep_int157 = 0, $gep_int159 = 0, $gep_int16 = 0, $gep_int161 = 0, $gep_int163 = 0;
 var $gep_int165 = 0, $gep_int167 = 0, $gep_int169 = 0, $gep_int171 = 0, $gep_int173 = 0, $gep_int175 = 0, $gep_int18 = 0, $gep_int2 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int4 = 0, $gep_int40 = 0;
 var $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int6 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0;
 var $gep_int8 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int99 = 0, $tmp$i = 0, $tmp$i2 = 0, $tmp1$i = 0, $tmp1$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0;
 
 
 
 
 
 
 
 
 
 
 
 $12 = sp + 88|0;
 
 
 $15 = sp + 112|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $37 = sp + 288|0;
 
 
 $40 = sp + 312|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $__1buf = sp + 608|0;
 
 $76 = sp + 624|0;
 $77 = sp + 632|0;
 
 
 
 $78 = sp + 664|0;
 $79 = sp + 672|0;
 
 
 $__inext = sp + 696|0;
 $75 = $this;
 $80 = $75;
 $gep_int = $80;
 $gep = (($gep_int) + 64)|0;
 $81 = $gep;
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0);
 
 if ($83) {
  $74 = -1;
  
  $404 = $74;
  STACKTOP = sp;return $404|0;
 }
 $84 = __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($80)|0;
 $85 = $84&1;
 $__initial = $85;
 $86 = $80;
 $43 = $86;
 $87 = $43;
 $gep_int2 = $87;
 $gep3 = (($gep_int2) + 12)|0;
 $88 = $gep3;
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(0);
 
 if ($90) {
  $91 = $80;
  $gep_int4 = $__1buf;
  $gep5 = (($gep_int4) + 1)|0;
  $92 = $gep5;
  $gep_int6 = $__1buf;
  $gep7 = (($gep_int6) + 1)|0;
  $93 = $gep7;
  $1 = $91;
  $2 = $__1buf;
  $3 = $92;
  $4 = $93;
  $94 = $1;
  $95 = $2;
  $gep_int8 = $94;
  $gep9 = (($gep_int8) + 8)|0;
  $96 = $gep9;
  HEAP32[$96>>2] = $95;
  $97 = $3;
  $gep_int10 = $94;
  $gep11 = (($gep_int10) + 12)|0;
  $98 = $gep11;
  HEAP32[$98>>2] = $97;
  $99 = $4;
  $gep_int12 = $94;
  $gep13 = (($gep_int12) + 16)|0;
  $100 = $gep13;
  HEAP32[$100>>2] = $99;
  
 }
 $101 = $__initial;
 $102 = $101&1;
 
 if ($102) {
  
  $128 = 0;
 } else {
  $103 = $80;
  $5 = $103;
  $104 = $5;
  $gep_int14 = $104;
  $gep15 = (($gep_int14) + 16)|0;
  $105 = $gep15;
  $106 = HEAP32[$105>>2]|0;
  $107 = $80;
  $6 = $107;
  $108 = $6;
  $gep_int16 = $108;
  $gep17 = (($gep_int16) + 8)|0;
  $109 = $gep17;
  $110 = HEAP32[$109>>2]|0;
  $111 = $106;
  $112 = $110;
  $113 = (($111) - ($112))|0;
  $114 = (($113|0) / 2)&-1;
  HEAP32[$76>>2] = $114;
  HEAP32[$77>>2] = 4;
  $13 = $76;
  $14 = $77;
  $115 = $13;
  $116 = $14;
  $tmp$i2 = $12;
  $tmp1$i3 = $15;
  ;HEAP8[$tmp$i2+0|0]=HEAP8[$tmp1$i3+0|0]|0;
  $10 = $115;
  $11 = $116;
  $117 = $11;
  $118 = $10;
  $7 = $12;
  $8 = $117;
  $9 = $118;
  $119 = $8;
  $120 = HEAP32[$119>>2]|0;
  $121 = $9;
  $122 = HEAP32[$121>>2]|0;
  $123 = ($120>>>0)<($122>>>0);
  
  if ($123) {
   $124 = $11;
   
   $126 = $124;
  } else {
   $125 = $10;
   
   $126 = $125;
  }
  
  $127 = HEAP32[$126>>2]|0;
  
  $128 = $127;
 }
 
 $__unget_sz = $128;
 $__c = -1;
 $129 = $80;
 $16 = $129;
 $130 = $16;
 $gep_int18 = $130;
 $gep19 = (($gep_int18) + 12)|0;
 $131 = $gep19;
 $132 = HEAP32[$131>>2]|0;
 $133 = $80;
 $17 = $133;
 $134 = $17;
 $gep_int20 = $134;
 $gep21 = (($gep_int20) + 16)|0;
 $135 = $gep21;
 $136 = HEAP32[$135>>2]|0;
 $137 = ($132|0)==($136|0);
 
 if ($137) {
  $138 = $80;
  $18 = $138;
  $139 = $18;
  $gep_int22 = $139;
  $gep23 = (($gep_int22) + 8)|0;
  $140 = $gep23;
  $141 = HEAP32[$140>>2]|0;
  $142 = $80;
  $19 = $142;
  $143 = $19;
  $gep_int24 = $143;
  $gep25 = (($gep_int24) + 16)|0;
  $144 = $gep25;
  $145 = HEAP32[$144>>2]|0;
  $146 = $__unget_sz;
  $147 = (0 - ($146))|0;
  $gep_int26 = $145;
  $gep27 = (($gep_int26) + ($147))|0;
  $148 = $gep27;
  $149 = $__unget_sz;
  $150 = $149;
  _memmove($141|0,$148|0,$150|0)|0;
  $gep_int28 = $80;
  $gep29 = (($gep_int28) + 98)|0;
  $151 = $gep29;
  $152 = HEAP8[$151]|0;
  $153 = $152&1;
  
  if ($153) {
   $154 = $80;
   $20 = $154;
   $155 = $20;
   $gep_int30 = $155;
   $gep31 = (($gep_int30) + 16)|0;
   $156 = $gep31;
   $157 = HEAP32[$156>>2]|0;
   $158 = $80;
   $21 = $158;
   $159 = $21;
   $gep_int32 = $159;
   $gep33 = (($gep_int32) + 8)|0;
   $160 = $gep33;
   $161 = HEAP32[$160>>2]|0;
   $162 = $157;
   $163 = $161;
   $164 = (($162) - ($163))|0;
   $165 = $__unget_sz;
   $166 = (($164) - ($165))|0;
   $__nmemb = $166;
   $167 = $80;
   $22 = $167;
   $168 = $22;
   $gep_int34 = $168;
   $gep35 = (($gep_int34) + 8)|0;
   $169 = $gep35;
   $170 = HEAP32[$169>>2]|0;
   $171 = $__unget_sz;
   $gep_int36 = $170;
   $gep37 = (($gep_int36) + ($171))|0;
   $172 = $gep37;
   $173 = $__nmemb;
   $gep_int38 = $80;
   $gep39 = (($gep_int38) + 64)|0;
   $174 = $gep39;
   $175 = HEAP32[$174>>2]|0;
   $176 = _fread($172|0,1,$173|0,$175|0)|0;
   $__nmemb = $176;
   $177 = $__nmemb;
   $178 = ($177|0)!=(0);
   
   if ($178) {
    $179 = $80;
    $180 = $80;
    $23 = $180;
    $181 = $23;
    $gep_int40 = $181;
    $gep41 = (($gep_int40) + 8)|0;
    $182 = $gep41;
    $183 = HEAP32[$182>>2]|0;
    $184 = $80;
    $24 = $184;
    $185 = $24;
    $gep_int42 = $185;
    $gep43 = (($gep_int42) + 8)|0;
    $186 = $gep43;
    $187 = HEAP32[$186>>2]|0;
    $188 = $__unget_sz;
    $gep_int44 = $187;
    $gep45 = (($gep_int44) + ($188))|0;
    $189 = $gep45;
    $190 = $80;
    $25 = $190;
    $191 = $25;
    $gep_int46 = $191;
    $gep47 = (($gep_int46) + 8)|0;
    $192 = $gep47;
    $193 = HEAP32[$192>>2]|0;
    $194 = $__unget_sz;
    $gep_int48 = $193;
    $gep49 = (($gep_int48) + ($194))|0;
    $195 = $gep49;
    $196 = $__nmemb;
    $gep_int50 = $195;
    $gep51 = (($gep_int50) + ($196))|0;
    $197 = $gep51;
    $26 = $179;
    $27 = $183;
    $28 = $189;
    $29 = $197;
    $198 = $26;
    $199 = $27;
    $gep_int52 = $198;
    $gep53 = (($gep_int52) + 8)|0;
    $200 = $gep53;
    HEAP32[$200>>2] = $199;
    $201 = $28;
    $gep_int54 = $198;
    $gep55 = (($gep_int54) + 12)|0;
    $202 = $gep55;
    HEAP32[$202>>2] = $201;
    $203 = $29;
    $gep_int56 = $198;
    $gep57 = (($gep_int56) + 16)|0;
    $204 = $gep57;
    HEAP32[$204>>2] = $203;
    $205 = $80;
    $30 = $205;
    $206 = $30;
    $gep_int58 = $206;
    $gep59 = (($gep_int58) + 12)|0;
    $207 = $gep59;
    $208 = HEAP32[$207>>2]|0;
    $209 = HEAP8[$208]|0;
    $31 = $209;
    $210 = $31;
    $211 = $210&255;
    $__c = $211;
    
   }
   
  } else {
   $gep_int60 = $80;
   $gep61 = (($gep_int60) + 32)|0;
   $212 = $gep61;
   $213 = HEAP32[$212>>2]|0;
   $gep_int62 = $80;
   $gep63 = (($gep_int62) + 36)|0;
   $214 = $gep63;
   $215 = HEAP32[$214>>2]|0;
   $gep_int64 = $80;
   $gep65 = (($gep_int64) + 40)|0;
   $216 = $gep65;
   $217 = HEAP32[$216>>2]|0;
   $gep_int66 = $80;
   $gep67 = (($gep_int66) + 36)|0;
   $218 = $gep67;
   $219 = HEAP32[$218>>2]|0;
   $220 = $217;
   $221 = $219;
   $222 = (($220) - ($221))|0;
   _memmove($213|0,$215|0,$222|0)|0;
   $gep_int68 = $80;
   $gep69 = (($gep_int68) + 32)|0;
   $223 = $gep69;
   $224 = HEAP32[$223>>2]|0;
   $gep_int70 = $80;
   $gep71 = (($gep_int70) + 40)|0;
   $225 = $gep71;
   $226 = HEAP32[$225>>2]|0;
   $gep_int72 = $80;
   $gep73 = (($gep_int72) + 36)|0;
   $227 = $gep73;
   $228 = HEAP32[$227>>2]|0;
   $229 = $226;
   $230 = $228;
   $231 = (($229) - ($230))|0;
   $gep_int74 = $224;
   $gep75 = (($gep_int74) + ($231))|0;
   $232 = $gep75;
   $gep_int76 = $80;
   $gep77 = (($gep_int76) + 36)|0;
   $233 = $gep77;
   HEAP32[$233>>2] = $232;
   $gep_int78 = $80;
   $gep79 = (($gep_int78) + 32)|0;
   $234 = $gep79;
   $235 = HEAP32[$234>>2]|0;
   $gep_int80 = $80;
   $gep81 = (($gep_int80) + 32)|0;
   $236 = $gep81;
   $237 = HEAP32[$236>>2]|0;
   $gep_int82 = $80;
   $gep83 = (($gep_int82) + 44)|0;
   $238 = $gep83;
   $gep_int84 = $238;
   $239 = $gep_int84;
   $240 = ($237|0)==($239|0);
   
   if ($240) {
    
    $243 = 8;
   } else {
    $gep_int85 = $80;
    $gep86 = (($gep_int85) + 52)|0;
    $241 = $gep86;
    $242 = HEAP32[$241>>2]|0;
    
    $243 = $242;
   }
   
   $gep_int87 = $235;
   $gep88 = (($gep_int87) + ($243))|0;
   $244 = $gep88;
   $gep_int89 = $80;
   $gep90 = (($gep_int89) + 40)|0;
   $245 = $gep90;
   HEAP32[$245>>2] = $244;
   $gep_int91 = $80;
   $gep92 = (($gep_int91) + 60)|0;
   $246 = $gep92;
   $247 = HEAP32[$246>>2]|0;
   $248 = $__unget_sz;
   $249 = (($247) - ($248))|0;
   HEAP32[$78>>2] = $249;
   $gep_int93 = $80;
   $gep94 = (($gep_int93) + 40)|0;
   $250 = $gep94;
   $251 = HEAP32[$250>>2]|0;
   $gep_int95 = $80;
   $gep96 = (($gep_int95) + 36)|0;
   $252 = $gep96;
   $253 = HEAP32[$252>>2]|0;
   $254 = $251;
   $255 = $253;
   $256 = (($254) - ($255))|0;
   HEAP32[$79>>2] = $256;
   $38 = $78;
   $39 = $79;
   $257 = $38;
   $258 = $39;
   $tmp$i = $37;
   $tmp1$i = $40;
   ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
   $35 = $257;
   $36 = $258;
   $259 = $36;
   $260 = $35;
   $32 = $37;
   $33 = $259;
   $34 = $260;
   $261 = $33;
   $262 = HEAP32[$261>>2]|0;
   $263 = $34;
   $264 = HEAP32[$263>>2]|0;
   $265 = ($262>>>0)<($264>>>0);
   
   if ($265) {
    $266 = $36;
    
    $268 = $266;
   } else {
    $267 = $35;
    
    $268 = $267;
   }
   
   $269 = HEAP32[$268>>2]|0;
   $__nmemb1 = $269;
   $gep_int97 = $80;
   $gep98 = (($gep_int97) + 80)|0;
   $270 = $gep98;
   $gep_int99 = $80;
   $gep100 = (($gep_int99) + 72)|0;
   $271 = $gep100;
   $272 = $270;
   $273 = $271;
   ;HEAP32[$272+0>>2]=HEAP32[$273+0>>2]|0;HEAP32[$272+4>>2]=HEAP32[$273+4>>2]|0;
   $gep_int101 = $80;
   $gep102 = (($gep_int101) + 36)|0;
   $274 = $gep102;
   $275 = HEAP32[$274>>2]|0;
   $276 = $__nmemb1;
   $gep_int103 = $80;
   $gep104 = (($gep_int103) + 64)|0;
   $277 = $gep104;
   $278 = HEAP32[$277>>2]|0;
   $279 = _fread($275|0,1,$276|0,$278|0)|0;
   $__nr = $279;
   $280 = $__nr;
   $281 = ($280|0)!=(0);
   
   if ($281) {
    $gep_int105 = $80;
    $gep106 = (($gep_int105) + 68)|0;
    $282 = $gep106;
    $283 = HEAP32[$282>>2]|0;
    $284 = ($283|0)!=(0);
    
    if (!($284)) {
     $285 = ___cxa_allocate_exception(4)|0;
     $286 = $285;
     __ZNSt8bad_castC2Ev($286);
     $expanded = 16440;
     $expanded1 = 119;
     ___cxa_throw($285|0,$expanded|0,$expanded1|0);
     // unreachable
    }
    $gep_int107 = $80;
    $gep108 = (($gep_int107) + 36)|0;
    $287 = $gep108;
    $288 = HEAP32[$287>>2]|0;
    $289 = $__nr;
    $gep_int109 = $288;
    $gep110 = (($gep_int109) + ($289))|0;
    $290 = $gep110;
    $gep_int111 = $80;
    $gep112 = (($gep_int111) + 40)|0;
    $291 = $gep112;
    HEAP32[$291>>2] = $290;
    $gep_int113 = $80;
    $gep114 = (($gep_int113) + 68)|0;
    $292 = $gep114;
    $293 = HEAP32[$292>>2]|0;
    $gep_int115 = $80;
    $gep116 = (($gep_int115) + 72)|0;
    $294 = $gep116;
    $gep_int117 = $80;
    $gep118 = (($gep_int117) + 32)|0;
    $295 = $gep118;
    $296 = HEAP32[$295>>2]|0;
    $gep_int119 = $80;
    $gep120 = (($gep_int119) + 40)|0;
    $297 = $gep120;
    $298 = HEAP32[$297>>2]|0;
    $gep_int121 = $80;
    $gep122 = (($gep_int121) + 36)|0;
    $299 = $gep122;
    $300 = $80;
    $41 = $300;
    $301 = $41;
    $gep_int123 = $301;
    $gep124 = (($gep_int123) + 8)|0;
    $302 = $gep124;
    $303 = HEAP32[$302>>2]|0;
    $304 = $__unget_sz;
    $gep_int125 = $303;
    $gep126 = (($gep_int125) + ($304))|0;
    $305 = $gep126;
    $306 = $80;
    $42 = $306;
    $307 = $42;
    $gep_int127 = $307;
    $gep128 = (($gep_int127) + 8)|0;
    $308 = $gep128;
    $309 = HEAP32[$308>>2]|0;
    $gep_int129 = $80;
    $gep130 = (($gep_int129) + 60)|0;
    $310 = $gep130;
    $311 = HEAP32[$310>>2]|0;
    $gep_int131 = $309;
    $gep132 = (($gep_int131) + ($311))|0;
    $312 = $gep132;
    $44 = $293;
    $45 = $294;
    $46 = $296;
    $47 = $298;
    $48 = $299;
    $49 = $305;
    $50 = $312;
    $51 = $__inext;
    $313 = $44;
    $314 = $313;
    $315 = HEAP32[$313>>2]|0;
    $gep_int133 = $315;
    $gep134 = (($gep_int133) + 16)|0;
    $316 = $gep134;
    $317 = HEAP32[$316>>2]|0;
    $318 = $45;
    $319 = $46;
    $320 = $47;
    $321 = $48;
    $322 = $49;
    $323 = $50;
    $324 = $51;
    $325 = FUNCTION_TABLE_iiiiiiiii[$317 & 15]($313,$318,$319,$320,$321,$322,$323,$324)|0;
    $__r = $325;
    $326 = $__r;
    $327 = ($326|0)==(3);
    
    if ($327) {
     $328 = $80;
     $gep_int135 = $80;
     $gep136 = (($gep_int135) + 32)|0;
     $329 = $gep136;
     $330 = HEAP32[$329>>2]|0;
     $gep_int137 = $80;
     $gep138 = (($gep_int137) + 32)|0;
     $331 = $gep138;
     $332 = HEAP32[$331>>2]|0;
     $gep_int139 = $80;
     $gep140 = (($gep_int139) + 40)|0;
     $333 = $gep140;
     $334 = HEAP32[$333>>2]|0;
     $52 = $328;
     $53 = $330;
     $54 = $332;
     $55 = $334;
     $335 = $52;
     $336 = $53;
     $gep_int141 = $335;
     $gep142 = (($gep_int141) + 8)|0;
     $337 = $gep142;
     HEAP32[$337>>2] = $336;
     $338 = $54;
     $gep_int143 = $335;
     $gep144 = (($gep_int143) + 12)|0;
     $339 = $gep144;
     HEAP32[$339>>2] = $338;
     $340 = $55;
     $gep_int145 = $335;
     $gep146 = (($gep_int145) + 16)|0;
     $341 = $gep146;
     HEAP32[$341>>2] = $340;
     $342 = $80;
     $56 = $342;
     $343 = $56;
     $gep_int147 = $343;
     $gep148 = (($gep_int147) + 12)|0;
     $344 = $gep148;
     $345 = HEAP32[$344>>2]|0;
     $346 = HEAP8[$345]|0;
     $57 = $346;
     $347 = $57;
     $348 = $347&255;
     $__c = $348;
     
    } else {
     $349 = HEAP32[$__inext>>2]|0;
     $350 = $80;
     $58 = $350;
     $351 = $58;
     $gep_int149 = $351;
     $gep150 = (($gep_int149) + 8)|0;
     $352 = $gep150;
     $353 = HEAP32[$352>>2]|0;
     $354 = $__unget_sz;
     $gep_int151 = $353;
     $gep152 = (($gep_int151) + ($354))|0;
     $355 = $gep152;
     $356 = ($349|0)!=($355|0);
     
     if ($356) {
      $357 = $80;
      $358 = $80;
      $59 = $358;
      $359 = $59;
      $gep_int153 = $359;
      $gep154 = (($gep_int153) + 8)|0;
      $360 = $gep154;
      $361 = HEAP32[$360>>2]|0;
      $362 = $80;
      $60 = $362;
      $363 = $60;
      $gep_int155 = $363;
      $gep156 = (($gep_int155) + 8)|0;
      $364 = $gep156;
      $365 = HEAP32[$364>>2]|0;
      $366 = $__unget_sz;
      $gep_int157 = $365;
      $gep158 = (($gep_int157) + ($366))|0;
      $367 = $gep158;
      $368 = HEAP32[$__inext>>2]|0;
      $61 = $357;
      $62 = $361;
      $63 = $367;
      $64 = $368;
      $369 = $61;
      $370 = $62;
      $gep_int159 = $369;
      $gep160 = (($gep_int159) + 8)|0;
      $371 = $gep160;
      HEAP32[$371>>2] = $370;
      $372 = $63;
      $gep_int161 = $369;
      $gep162 = (($gep_int161) + 12)|0;
      $373 = $gep162;
      HEAP32[$373>>2] = $372;
      $374 = $64;
      $gep_int163 = $369;
      $gep164 = (($gep_int163) + 16)|0;
      $375 = $gep164;
      HEAP32[$375>>2] = $374;
      $376 = $80;
      $65 = $376;
      $377 = $65;
      $gep_int165 = $377;
      $gep166 = (($gep_int165) + 12)|0;
      $378 = $gep166;
      $379 = HEAP32[$378>>2]|0;
      $380 = HEAP8[$379]|0;
      $66 = $380;
      $381 = $66;
      $382 = $381&255;
      $__c = $382;
      
     }
     
    }
    
   }
   
  }
  
 } else {
  $383 = $80;
  $67 = $383;
  $384 = $67;
  $gep_int167 = $384;
  $gep168 = (($gep_int167) + 12)|0;
  $385 = $gep168;
  $386 = HEAP32[$385>>2]|0;
  $387 = HEAP8[$386]|0;
  $68 = $387;
  $388 = $68;
  $389 = $388&255;
  $__c = $389;
  
 }
 $390 = $80;
 $69 = $390;
 $391 = $69;
 $gep_int169 = $391;
 $gep170 = (($gep_int169) + 8)|0;
 $392 = $gep170;
 $393 = HEAP32[$392>>2]|0;
 $394 = ($393|0)==($__1buf|0);
 
 if ($394) {
  $395 = $80;
  $70 = $395;
  $71 = 0;
  $72 = 0;
  $73 = 0;
  $396 = $70;
  $397 = $71;
  $gep_int171 = $396;
  $gep172 = (($gep_int171) + 8)|0;
  $398 = $gep172;
  HEAP32[$398>>2] = $397;
  $399 = $72;
  $gep_int173 = $396;
  $gep174 = (($gep_int173) + 12)|0;
  $400 = $gep174;
  HEAP32[$400>>2] = $399;
  $401 = $73;
  $gep_int175 = $396;
  $gep176 = (($gep_int175) + 16)|0;
  $402 = $gep176;
  HEAP32[$402>>2] = $401;
  
 }
 $403 = $__c;
 $74 = $403;
 
 $404 = $74;
 STACKTOP = sp;return $404|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0;
 var $gep_int19 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $19 = $this;
 $20 = $__c;
 $21 = $19;
 $gep_int = $21;
 $gep = (($gep_int) + 64)|0;
 $22 = $gep;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 
 L1: do {
  if ($24) {
   $25 = $21;
   $17 = $25;
   $26 = $17;
   $gep_int1 = $26;
   $gep2 = (($gep_int1) + 8)|0;
   $27 = $gep2;
   $28 = HEAP32[$27>>2]|0;
   $29 = $21;
   $1 = $29;
   $30 = $1;
   $gep_int3 = $30;
   $gep4 = (($gep_int3) + 12)|0;
   $31 = $gep4;
   $32 = HEAP32[$31>>2]|0;
   $33 = ($28>>>0)<($32>>>0);
   
   if (!($33)) {
    break;
   }
   $34 = $20;
   $2 = $34;
   $3 = -1;
   $35 = $2;
   $36 = $3;
   $37 = ($35|0)==($36|0);
   
   if ($37) {
    $38 = $21;
    $4 = $38;
    $5 = -1;
    $39 = $4;
    $40 = $5;
    $gep_int5 = $39;
    $gep6 = (($gep_int5) + 12)|0;
    $41 = $gep6;
    $42 = HEAP32[$41>>2]|0;
    $gep_int7 = $42;
    $gep8 = (($gep_int7) + ($40))|0;
    $43 = $gep8;
    HEAP32[$41>>2] = $43;
    $44 = $20;
    $8 = $44;
    $45 = $8;
    $6 = $45;
    $7 = -1;
    $46 = $6;
    $47 = $7;
    $48 = ($46|0)==($47|0);
    
    if ($48) {
     
     $50 = 0;
    } else {
     $49 = $8;
     
     $50 = $49;
    }
    
    $18 = $50;
    
    $83 = $18;
    STACKTOP = sp;return $83|0;
   } else {
    $gep_int9 = $21;
    $gep10 = (($gep_int9) + 88)|0;
    $51 = $gep10;
    $52 = HEAP32[$51>>2]|0;
    $53 = $52 & 16;
    $54 = ($53|0)!=(0);
    
    do {
     if (!($54)) {
      $55 = $20;
      $9 = $55;
      $56 = $9;
      $57 = $56&255;
      $58 = $21;
      $10 = $58;
      $59 = $10;
      $gep_int11 = $59;
      $gep12 = (($gep_int11) + 12)|0;
      $60 = $gep12;
      $61 = HEAP32[$60>>2]|0;
      $gep_int13 = $61;
      $gep14 = (($gep_int13) + -1)|0;
      $62 = $gep14;
      $63 = HEAP8[$62]|0;
      $11 = $57;
      $12 = $63;
      $64 = $11;
      $65 = $64 << 24 >> 24;
      $66 = $12;
      $67 = $66 << 24 >> 24;
      $68 = ($65|0)==($67|0);
      
      if ($68) {
       break;
      }
      
      break L1;
     }
    } while(0);
    $69 = $21;
    $13 = $69;
    $14 = -1;
    $70 = $13;
    $71 = $14;
    $gep_int15 = $70;
    $gep16 = (($gep_int15) + 12)|0;
    $72 = $gep16;
    $73 = HEAP32[$72>>2]|0;
    $gep_int17 = $73;
    $gep18 = (($gep_int17) + ($71))|0;
    $74 = $gep18;
    HEAP32[$72>>2] = $74;
    $75 = $20;
    $15 = $75;
    $76 = $15;
    $77 = $76&255;
    $78 = $21;
    $16 = $78;
    $79 = $16;
    $gep_int19 = $79;
    $gep20 = (($gep_int19) + 12)|0;
    $80 = $gep20;
    $81 = HEAP32[$80>>2]|0;
    HEAP8[$81] = $77;
    $82 = $20;
    $18 = $82;
    
    $83 = $18;
    STACKTOP = sp;return $83|0;
   }
  }
 } while(0);
 $18 = -1;
 
 $83 = $18;
 STACKTOP = sp;return $83|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__e = 0;
 var $__epb_save = 0, $__extbe = 0, $__nmemb = 0, $__nmemb1 = 0, $__nmemb2 = 0, $__pb_save = 0, $__r = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0;
 var $gep3 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep5 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0;
 var $gep67 = 0, $gep69 = 0, $gep7 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep9 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0;
 var $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int2 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int4 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0;
 var $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int6 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int8 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0;
 var $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 456|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $__1buf = sp + 384|0;
 
 
 
 $__extbe = sp + 416|0;
 
 $__e = sp + 432|0;
 
 
 $47 = $this;
 $48 = $__c;
 $49 = $47;
 $gep_int = $49;
 $gep = (($gep_int) + 64)|0;
 $50 = $gep;
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0);
 
 if ($52) {
  $46 = -1;
  
  $258 = $46;
  STACKTOP = sp;return $258|0;
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($49);
 $53 = $49;
 $19 = $53;
 $54 = $19;
 $gep_int2 = $54;
 $gep3 = (($gep_int2) + 20)|0;
 $55 = $gep3;
 $56 = HEAP32[$55>>2]|0;
 $__pb_save = $56;
 $57 = $49;
 $1 = $57;
 $58 = $1;
 $gep_int4 = $58;
 $gep5 = (($gep_int4) + 28)|0;
 $59 = $gep5;
 $60 = HEAP32[$59>>2]|0;
 $__epb_save = $60;
 $61 = $48;
 $2 = $61;
 $3 = -1;
 $62 = $2;
 $63 = $3;
 $64 = ($62|0)==($63|0);
 
 if (!($64)) {
  $65 = $49;
  $4 = $65;
  $66 = $4;
  $gep_int6 = $66;
  $gep7 = (($gep_int6) + 24)|0;
  $67 = $gep7;
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)==(0);
  
  if ($69) {
   $70 = $49;
   $gep_int8 = $__1buf;
   $gep9 = (($gep_int8) + 1)|0;
   $71 = $gep9;
   $5 = $70;
   $6 = $__1buf;
   $7 = $71;
   $72 = $5;
   $73 = $6;
   $gep_int10 = $72;
   $gep11 = (($gep_int10) + 24)|0;
   $74 = $gep11;
   HEAP32[$74>>2] = $73;
   $gep_int12 = $72;
   $gep13 = (($gep_int12) + 20)|0;
   $75 = $gep13;
   HEAP32[$75>>2] = $73;
   $76 = $7;
   $gep_int14 = $72;
   $gep15 = (($gep_int14) + 28)|0;
   $77 = $gep15;
   HEAP32[$77>>2] = $76;
   
  }
  $78 = $48;
  $8 = $78;
  $79 = $8;
  $80 = $79&255;
  $81 = $49;
  $9 = $81;
  $82 = $9;
  $gep_int16 = $82;
  $gep17 = (($gep_int16) + 24)|0;
  $83 = $gep17;
  $84 = HEAP32[$83>>2]|0;
  HEAP8[$84] = $80;
  $85 = $49;
  $10 = $85;
  $11 = 1;
  $86 = $10;
  $87 = $11;
  $gep_int18 = $86;
  $gep19 = (($gep_int18) + 24)|0;
  $88 = $gep19;
  $89 = HEAP32[$88>>2]|0;
  $gep_int20 = $89;
  $gep21 = (($gep_int20) + ($87))|0;
  $90 = $gep21;
  HEAP32[$88>>2] = $90;
  
 }
 $91 = $49;
 $12 = $91;
 $92 = $12;
 $gep_int22 = $92;
 $gep23 = (($gep_int22) + 24)|0;
 $93 = $gep23;
 $94 = HEAP32[$93>>2]|0;
 $95 = $49;
 $13 = $95;
 $96 = $13;
 $gep_int24 = $96;
 $gep25 = (($gep_int24) + 20)|0;
 $97 = $gep25;
 $98 = HEAP32[$97>>2]|0;
 $99 = ($94|0)!=($98|0);
 
 if ($99) {
  $gep_int26 = $49;
  $gep27 = (($gep_int26) + 98)|0;
  $100 = $gep27;
  $101 = HEAP8[$100]|0;
  $102 = $101&1;
  
  do {
   if ($102) {
    $103 = $49;
    $14 = $103;
    $104 = $14;
    $gep_int28 = $104;
    $gep29 = (($gep_int28) + 24)|0;
    $105 = $gep29;
    $106 = HEAP32[$105>>2]|0;
    $107 = $49;
    $15 = $107;
    $108 = $15;
    $gep_int30 = $108;
    $gep31 = (($gep_int30) + 20)|0;
    $109 = $gep31;
    $110 = HEAP32[$109>>2]|0;
    $111 = $106;
    $112 = $110;
    $113 = (($111) - ($112))|0;
    $__nmemb = $113;
    $114 = $49;
    $16 = $114;
    $115 = $16;
    $gep_int32 = $115;
    $gep33 = (($gep_int32) + 20)|0;
    $116 = $gep33;
    $117 = HEAP32[$116>>2]|0;
    $118 = $__nmemb;
    $gep_int34 = $49;
    $gep35 = (($gep_int34) + 64)|0;
    $119 = $gep35;
    $120 = HEAP32[$119>>2]|0;
    $121 = _fwrite($117|0,1,$118|0,$120|0)|0;
    $122 = $__nmemb;
    $123 = ($121|0)!=($122|0);
    
    if (!($123)) {
     
     break;
    }
    $46 = -1;
    
    $258 = $46;
    STACKTOP = sp;return $258|0;
   } else {
    $gep_int36 = $49;
    $gep37 = (($gep_int36) + 32)|0;
    $124 = $gep37;
    $125 = HEAP32[$124>>2]|0;
    HEAP32[$__extbe>>2] = $125;
    
    while(1) {
     $gep_int38 = $49;
     $gep39 = (($gep_int38) + 68)|0;
     $126 = $gep39;
     $127 = HEAP32[$126>>2]|0;
     $128 = ($127|0)!=(0);
     
     if (!($128)) {
      label = 14;
      break;
     }
     $gep_int40 = $49;
     $gep41 = (($gep_int40) + 68)|0;
     $131 = $gep41;
     $132 = HEAP32[$131>>2]|0;
     $gep_int42 = $49;
     $gep43 = (($gep_int42) + 72)|0;
     $133 = $gep43;
     $134 = $49;
     $17 = $134;
     $135 = $17;
     $gep_int44 = $135;
     $gep45 = (($gep_int44) + 20)|0;
     $136 = $gep45;
     $137 = HEAP32[$136>>2]|0;
     $138 = $49;
     $18 = $138;
     $139 = $18;
     $gep_int46 = $139;
     $gep47 = (($gep_int46) + 24)|0;
     $140 = $gep47;
     $141 = HEAP32[$140>>2]|0;
     $gep_int48 = $49;
     $gep49 = (($gep_int48) + 32)|0;
     $142 = $gep49;
     $143 = HEAP32[$142>>2]|0;
     $gep_int50 = $49;
     $gep51 = (($gep_int50) + 32)|0;
     $144 = $gep51;
     $145 = HEAP32[$144>>2]|0;
     $gep_int52 = $49;
     $gep53 = (($gep_int52) + 52)|0;
     $146 = $gep53;
     $147 = HEAP32[$146>>2]|0;
     $gep_int54 = $145;
     $gep55 = (($gep_int54) + ($147))|0;
     $148 = $gep55;
     $20 = $132;
     $21 = $133;
     $22 = $137;
     $23 = $141;
     $24 = $__e;
     $25 = $143;
     $26 = $148;
     $27 = $__extbe;
     $149 = $20;
     $150 = $149;
     $151 = HEAP32[$149>>2]|0;
     $gep_int56 = $151;
     $gep57 = (($gep_int56) + 12)|0;
     $152 = $gep57;
     $153 = HEAP32[$152>>2]|0;
     $154 = $21;
     $155 = $22;
     $156 = $23;
     $157 = $24;
     $158 = $25;
     $159 = $26;
     $160 = $27;
     $161 = FUNCTION_TABLE_iiiiiiiii[$153 & 15]($149,$154,$155,$156,$157,$158,$159,$160)|0;
     $__r = $161;
     $162 = HEAP32[$__e>>2]|0;
     $163 = $49;
     $28 = $163;
     $164 = $28;
     $gep_int58 = $164;
     $gep59 = (($gep_int58) + 20)|0;
     $165 = $gep59;
     $166 = HEAP32[$165>>2]|0;
     $167 = ($162|0)==($166|0);
     
     if ($167) {
      label = 16;
      break;
     }
     $168 = $__r;
     $169 = ($168|0)==(3);
     
     if ($169) {
      $170 = $49;
      $29 = $170;
      $171 = $29;
      $gep_int60 = $171;
      $gep61 = (($gep_int60) + 24)|0;
      $172 = $gep61;
      $173 = HEAP32[$172>>2]|0;
      $174 = $49;
      $30 = $174;
      $175 = $30;
      $gep_int62 = $175;
      $gep63 = (($gep_int62) + 20)|0;
      $176 = $gep63;
      $177 = HEAP32[$176>>2]|0;
      $178 = $173;
      $179 = $177;
      $180 = (($178) - ($179))|0;
      $__nmemb1 = $180;
      $181 = $49;
      $31 = $181;
      $182 = $31;
      $gep_int64 = $182;
      $gep65 = (($gep_int64) + 20)|0;
      $183 = $gep65;
      $184 = HEAP32[$183>>2]|0;
      $185 = $__nmemb1;
      $gep_int66 = $49;
      $gep67 = (($gep_int66) + 64)|0;
      $186 = $gep67;
      $187 = HEAP32[$186>>2]|0;
      $188 = _fwrite($184|0,1,$185|0,$187|0)|0;
      $189 = $__nmemb1;
      $190 = ($188|0)!=($189|0);
      
      if ($190) {
       label = 19;
       break;
      }
      
     } else {
      $191 = $__r;
      $192 = ($191|0)==(0);
      
      if (!($192)) {
       $193 = $__r;
       $194 = ($193|0)==(1);
       
       if (!($194)) {
        label = 28;
        break;
       }
      }
      $195 = HEAP32[$__extbe>>2]|0;
      $gep_int68 = $49;
      $gep69 = (($gep_int68) + 32)|0;
      $196 = $gep69;
      $197 = HEAP32[$196>>2]|0;
      $198 = $195;
      $199 = $197;
      $200 = (($198) - ($199))|0;
      $__nmemb2 = $200;
      $gep_int70 = $49;
      $gep71 = (($gep_int70) + 32)|0;
      $201 = $gep71;
      $202 = HEAP32[$201>>2]|0;
      $203 = $__nmemb2;
      $gep_int72 = $49;
      $gep73 = (($gep_int72) + 64)|0;
      $204 = $gep73;
      $205 = HEAP32[$204>>2]|0;
      $206 = _fwrite($202|0,1,$203|0,$205|0)|0;
      $207 = $__nmemb2;
      $208 = ($206|0)!=($207|0);
      
      if ($208) {
       label = 24;
       break;
      }
      $209 = $__r;
      $210 = ($209|0)==(1);
      
      if ($210) {
       $211 = $49;
       $212 = HEAP32[$__e>>2]|0;
       $213 = $49;
       $32 = $213;
       $214 = $32;
       $gep_int74 = $214;
       $gep75 = (($gep_int74) + 24)|0;
       $215 = $gep75;
       $216 = HEAP32[$215>>2]|0;
       $33 = $211;
       $34 = $212;
       $35 = $216;
       $217 = $33;
       $218 = $34;
       $gep_int76 = $217;
       $gep77 = (($gep_int76) + 24)|0;
       $219 = $gep77;
       HEAP32[$219>>2] = $218;
       $gep_int78 = $217;
       $gep79 = (($gep_int78) + 20)|0;
       $220 = $gep79;
       HEAP32[$220>>2] = $218;
       $221 = $35;
       $gep_int80 = $217;
       $gep81 = (($gep_int80) + 28)|0;
       $222 = $gep81;
       HEAP32[$222>>2] = $221;
       $223 = $49;
       $224 = $49;
       $36 = $224;
       $225 = $36;
       $gep_int82 = $225;
       $gep83 = (($gep_int82) + 28)|0;
       $226 = $gep83;
       $227 = HEAP32[$226>>2]|0;
       $228 = $49;
       $37 = $228;
       $229 = $37;
       $gep_int84 = $229;
       $gep85 = (($gep_int84) + 20)|0;
       $230 = $gep85;
       $231 = HEAP32[$230>>2]|0;
       $232 = $227;
       $233 = $231;
       $234 = (($232) - ($233))|0;
       $38 = $223;
       $39 = $234;
       $235 = $38;
       $236 = $39;
       $gep_int86 = $235;
       $gep87 = (($gep_int86) + 24)|0;
       $237 = $gep87;
       $238 = HEAP32[$237>>2]|0;
       $gep_int88 = $238;
       $gep89 = (($gep_int88) + ($236))|0;
       $239 = $gep89;
       HEAP32[$237>>2] = $239;
       
      }
      
      
     }
     
     $240 = $__r;
     $241 = ($240|0)==(1);
     
     if (!($241)) {
      label = 32;
      break;
     }
    }
    if ((label|0) == 14) {
     $129 = ___cxa_allocate_exception(4)|0;
     $130 = $129;
     __ZNSt8bad_castC2Ev($130);
     $expanded = 16440;
     $expanded1 = 119;
     ___cxa_throw($129|0,$expanded|0,$expanded1|0);
     // unreachable
    }
    else if ((label|0) == 16) {
     $46 = -1;
     
     $258 = $46;
     STACKTOP = sp;return $258|0;
    }
    else if ((label|0) == 19) {
     $46 = -1;
     
     $258 = $46;
     STACKTOP = sp;return $258|0;
    }
    else if ((label|0) == 24) {
     $46 = -1;
     
     $258 = $46;
     STACKTOP = sp;return $258|0;
    }
    else if ((label|0) == 28) {
     $46 = -1;
     
     $258 = $46;
     STACKTOP = sp;return $258|0;
    }
    else if ((label|0) == 32) {
     
     break;
    }
   }
  } while(0);
  $242 = $49;
  $243 = $__pb_save;
  $244 = $__epb_save;
  $40 = $242;
  $41 = $243;
  $42 = $244;
  $245 = $40;
  $246 = $41;
  $gep_int90 = $245;
  $gep91 = (($gep_int90) + 24)|0;
  $247 = $gep91;
  HEAP32[$247>>2] = $246;
  $gep_int92 = $245;
  $gep93 = (($gep_int92) + 20)|0;
  $248 = $gep93;
  HEAP32[$248>>2] = $246;
  $249 = $42;
  $gep_int94 = $245;
  $gep95 = (($gep_int94) + 28)|0;
  $250 = $gep95;
  HEAP32[$250>>2] = $249;
  
 }
 $251 = $48;
 $45 = $251;
 $252 = $45;
 $43 = $252;
 $44 = -1;
 $253 = $43;
 $254 = $44;
 $255 = ($253|0)==($254|0);
 
 if ($255) {
  
  $257 = 0;
 } else {
  $256 = $45;
  
  $257 = $256;
 }
 
 $46 = $257;
 
 $258 = $46;
 STACKTOP = sp;return $258|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0;
 var $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep4 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0;
 var $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 $14 = $this;
 $15 = $14;
 $gep_int = $15;
 $gep = (($gep_int) + 92)|0;
 $16 = $gep;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 16;
 $19 = ($18|0)!=(0);
 
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $15;
 $10 = $20;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 $21 = $10;
 $22 = $11;
 $gep_int1 = $21;
 $gep2 = (($gep_int1) + 8)|0;
 $23 = $gep2;
 HEAP32[$23>>2] = $22;
 $24 = $12;
 $gep_int3 = $21;
 $gep4 = (($gep_int3) + 12)|0;
 $25 = $gep4;
 HEAP32[$25>>2] = $24;
 $26 = $13;
 $gep_int5 = $21;
 $gep6 = (($gep_int5) + 16)|0;
 $27 = $gep6;
 HEAP32[$27>>2] = $26;
 $gep_int7 = $15;
 $gep8 = (($gep_int7) + 52)|0;
 $28 = $gep8;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29>>>0)>(8);
 
 if ($30) {
  $gep_int9 = $15;
  $gep10 = (($gep_int9) + 98)|0;
  $31 = $gep10;
  $32 = HEAP8[$31]|0;
  $33 = $32&1;
  
  if ($33) {
   $34 = $15;
   $gep_int11 = $15;
   $gep12 = (($gep_int11) + 32)|0;
   $35 = $gep12;
   $36 = HEAP32[$35>>2]|0;
   $gep_int13 = $15;
   $gep14 = (($gep_int13) + 32)|0;
   $37 = $gep14;
   $38 = HEAP32[$37>>2]|0;
   $gep_int15 = $15;
   $gep16 = (($gep_int15) + 52)|0;
   $39 = $gep16;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) - 1)|0;
   $gep_int17 = $38;
   $gep18 = (($gep_int17) + ($41))|0;
   $42 = $gep18;
   $1 = $34;
   $2 = $36;
   $3 = $42;
   $43 = $1;
   $44 = $2;
   $gep_int19 = $43;
   $gep20 = (($gep_int19) + 24)|0;
   $45 = $gep20;
   HEAP32[$45>>2] = $44;
   $gep_int21 = $43;
   $gep22 = (($gep_int21) + 20)|0;
   $46 = $gep22;
   HEAP32[$46>>2] = $44;
   $47 = $3;
   $gep_int23 = $43;
   $gep24 = (($gep_int23) + 28)|0;
   $48 = $gep24;
   HEAP32[$48>>2] = $47;
   
  } else {
   $49 = $15;
   $gep_int25 = $15;
   $gep26 = (($gep_int25) + 56)|0;
   $50 = $gep26;
   $51 = HEAP32[$50>>2]|0;
   $gep_int27 = $15;
   $gep28 = (($gep_int27) + 56)|0;
   $52 = $gep28;
   $53 = HEAP32[$52>>2]|0;
   $gep_int29 = $15;
   $gep30 = (($gep_int29) + 60)|0;
   $54 = $gep30;
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) - 1)|0;
   $gep_int31 = $53;
   $gep32 = (($gep_int31) + ($56))|0;
   $57 = $gep32;
   $4 = $49;
   $5 = $51;
   $6 = $57;
   $58 = $4;
   $59 = $5;
   $gep_int33 = $58;
   $gep34 = (($gep_int33) + 24)|0;
   $60 = $gep34;
   HEAP32[$60>>2] = $59;
   $gep_int35 = $58;
   $gep36 = (($gep_int35) + 20)|0;
   $61 = $gep36;
   HEAP32[$61>>2] = $59;
   $62 = $6;
   $gep_int37 = $58;
   $gep38 = (($gep_int37) + 28)|0;
   $63 = $gep38;
   HEAP32[$63>>2] = $62;
   
  }
  
 } else {
  $64 = $15;
  $7 = $64;
  $8 = 0;
  $9 = 0;
  $65 = $7;
  $66 = $8;
  $gep_int39 = $65;
  $gep40 = (($gep_int39) + 24)|0;
  $67 = $gep40;
  HEAP32[$67>>2] = $66;
  $gep_int41 = $65;
  $gep42 = (($gep_int41) + 20)|0;
  $68 = $gep42;
  HEAP32[$68>>2] = $66;
  $69 = $9;
  $gep_int43 = $65;
  $gep44 = (($gep_int43) + 28)|0;
  $70 = $gep44;
  HEAP32[$70>>2] = $69;
  
 }
 $gep_int45 = $15;
 $gep46 = (($gep_int45) + 92)|0;
 $71 = $gep46;
 HEAP32[$71>>2] = 16;
 
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0;
 var $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep5 = 0, $gep51 = 0, $gep53 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0;
 var $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int4 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0;
 var $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 $13 = $this;
 $14 = $13;
 $gep_int = $14;
 $gep = (($gep_int) + 92)|0;
 $15 = $gep;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 8;
 $18 = ($17|0)!=(0);
 
 if ($18) {
  $$expand_i1_val2 = 0;
  $12 = $$expand_i1_val2;
  
  $$pre_trunc = $12;
  $70 = $$pre_trunc&1;
  STACKTOP = sp;return $70|0;
 }
 $19 = $14;
 $9 = $19;
 $10 = 0;
 $11 = 0;
 $20 = $9;
 $21 = $10;
 $gep_int4 = $20;
 $gep5 = (($gep_int4) + 24)|0;
 $22 = $gep5;
 HEAP32[$22>>2] = $21;
 $gep_int6 = $20;
 $gep7 = (($gep_int6) + 20)|0;
 $23 = $gep7;
 HEAP32[$23>>2] = $21;
 $24 = $11;
 $gep_int8 = $20;
 $gep9 = (($gep_int8) + 28)|0;
 $25 = $gep9;
 HEAP32[$25>>2] = $24;
 $gep_int10 = $14;
 $gep11 = (($gep_int10) + 98)|0;
 $26 = $gep11;
 $27 = HEAP8[$26]|0;
 $28 = $27&1;
 
 if ($28) {
  $29 = $14;
  $gep_int12 = $14;
  $gep13 = (($gep_int12) + 32)|0;
  $30 = $gep13;
  $31 = HEAP32[$30>>2]|0;
  $gep_int14 = $14;
  $gep15 = (($gep_int14) + 32)|0;
  $32 = $gep15;
  $33 = HEAP32[$32>>2]|0;
  $gep_int16 = $14;
  $gep17 = (($gep_int16) + 52)|0;
  $34 = $gep17;
  $35 = HEAP32[$34>>2]|0;
  $gep_int18 = $33;
  $gep19 = (($gep_int18) + ($35))|0;
  $36 = $gep19;
  $gep_int20 = $14;
  $gep21 = (($gep_int20) + 32)|0;
  $37 = $gep21;
  $38 = HEAP32[$37>>2]|0;
  $gep_int22 = $14;
  $gep23 = (($gep_int22) + 52)|0;
  $39 = $gep23;
  $40 = HEAP32[$39>>2]|0;
  $gep_int24 = $38;
  $gep25 = (($gep_int24) + ($40))|0;
  $41 = $gep25;
  $1 = $29;
  $2 = $31;
  $3 = $36;
  $4 = $41;
  $42 = $1;
  $43 = $2;
  $gep_int26 = $42;
  $gep27 = (($gep_int26) + 8)|0;
  $44 = $gep27;
  HEAP32[$44>>2] = $43;
  $45 = $3;
  $gep_int28 = $42;
  $gep29 = (($gep_int28) + 12)|0;
  $46 = $gep29;
  HEAP32[$46>>2] = $45;
  $47 = $4;
  $gep_int30 = $42;
  $gep31 = (($gep_int30) + 16)|0;
  $48 = $gep31;
  HEAP32[$48>>2] = $47;
  
 } else {
  $49 = $14;
  $gep_int32 = $14;
  $gep33 = (($gep_int32) + 56)|0;
  $50 = $gep33;
  $51 = HEAP32[$50>>2]|0;
  $gep_int34 = $14;
  $gep35 = (($gep_int34) + 56)|0;
  $52 = $gep35;
  $53 = HEAP32[$52>>2]|0;
  $gep_int36 = $14;
  $gep37 = (($gep_int36) + 60)|0;
  $54 = $gep37;
  $55 = HEAP32[$54>>2]|0;
  $gep_int38 = $53;
  $gep39 = (($gep_int38) + ($55))|0;
  $56 = $gep39;
  $gep_int40 = $14;
  $gep41 = (($gep_int40) + 56)|0;
  $57 = $gep41;
  $58 = HEAP32[$57>>2]|0;
  $gep_int42 = $14;
  $gep43 = (($gep_int42) + 60)|0;
  $59 = $gep43;
  $60 = HEAP32[$59>>2]|0;
  $gep_int44 = $58;
  $gep45 = (($gep_int44) + ($60))|0;
  $61 = $gep45;
  $5 = $49;
  $6 = $51;
  $7 = $56;
  $8 = $61;
  $62 = $5;
  $63 = $6;
  $gep_int46 = $62;
  $gep47 = (($gep_int46) + 8)|0;
  $64 = $gep47;
  HEAP32[$64>>2] = $63;
  $65 = $7;
  $gep_int48 = $62;
  $gep49 = (($gep_int48) + 12)|0;
  $66 = $gep49;
  HEAP32[$66>>2] = $65;
  $67 = $8;
  $gep_int50 = $62;
  $gep51 = (($gep_int50) + 16)|0;
  $68 = $gep51;
  HEAP32[$68>>2] = $67;
  
 }
 $gep_int52 = $14;
 $gep53 = (($gep_int52) + 92)|0;
 $69 = $gep53;
 HEAP32[$69>>2] = 8;
 $$expand_i1_val = 1;
 $12 = $$expand_i1_val;
 
 $$pre_trunc = $12;
 $70 = $$pre_trunc&1;
 STACKTOP = sp;return $70|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0;
 var $expanded7 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0;
 var $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0;
 var $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int8 = 0, label = 0, sp = 0, u$64 = 0, u$73 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 
 
 
 
 
 
 
 
 
 
 
 
 
 $14 = sp + 104|0;
 
 
 $17 = sp + 128|0;
 $18 = sp + 136|0;
 $13 = $this;
 $19 = $13;
 $20 = $19;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($20);
 $21 = $19;
 $expanded1 = 3216;
 $gep_int = 3216;
 $gep = (($gep_int) + 8)|0;
 $expanded = $gep;
 HEAP32[$19>>2] = $expanded;
 $gep_int8 = $19;
 $gep9 = (($gep_int8) + 32)|0;
 $22 = $gep9;
 HEAP32[$22>>2] = 0;
 $gep_int10 = $19;
 $gep11 = (($gep_int10) + 36)|0;
 $23 = $gep11;
 HEAP32[$23>>2] = 0;
 $gep_int12 = $19;
 $gep13 = (($gep_int12) + 40)|0;
 $24 = $gep13;
 HEAP32[$24>>2] = 0;
 $gep_int14 = $19;
 $gep15 = (($gep_int14) + 52)|0;
 $25 = $gep15;
 HEAP32[$25>>2] = 0;
 $gep_int16 = $19;
 $gep17 = (($gep_int16) + 56)|0;
 $26 = $gep17;
 HEAP32[$26>>2] = 0;
 $gep_int18 = $19;
 $gep19 = (($gep_int18) + 60)|0;
 $27 = $gep19;
 HEAP32[$27>>2] = 0;
 $gep_int20 = $19;
 $gep21 = (($gep_int20) + 64)|0;
 $28 = $gep21;
 HEAP32[$28>>2] = 0;
 $gep_int22 = $19;
 $gep23 = (($gep_int22) + 68)|0;
 $29 = $gep23;
 $11 = $14;
 $12 = -1;
 $30 = $11;
 $31 = $12;
 $9 = $30;
 $10 = $31;
 $32 = $9;
 $gep_int24 = $32;
 $33 = $gep_int24;
 HEAP32[$33>>2] = 0;
 
 $8 = $14;
 
 HEAP32[$29>>2] = 0;
 $gep_int25 = $19;
 $gep26 = (($gep_int25) + 72)|0;
 $34 = $gep26;
 $35 = $34;
 ;HEAP32[$35+0>>2]=0|0;HEAP32[$35+4>>2]=0|0;
 $gep_int27 = $19;
 $gep28 = (($gep_int27) + 80)|0;
 $36 = $gep28;
 $37 = $36;
 ;HEAP32[$37+0>>2]=0|0;HEAP32[$37+4>>2]=0|0;
 $gep_int29 = $19;
 $gep30 = (($gep_int29) + 88)|0;
 $38 = $gep30;
 HEAP32[$38>>2] = 0;
 $gep_int31 = $19;
 $gep32 = (($gep_int31) + 92)|0;
 $39 = $gep32;
 HEAP32[$39>>2] = 0;
 $gep_int33 = $19;
 $gep34 = (($gep_int33) + 96)|0;
 $40 = $gep34;
 HEAP8[$40] = 0;
 $gep_int35 = $19;
 $gep36 = (($gep_int35) + 97)|0;
 $41 = $gep36;
 HEAP8[$41] = 0;
 $gep_int37 = $19;
 $gep38 = (($gep_int37) + 98)|0;
 $42 = $gep38;
 HEAP8[$42] = 0;
 $43 = $19;
 $7 = $43;
 $44 = $7;
 $gep_int39 = $44;
 $gep40 = (($gep_int39) + 4)|0;
 $45 = $gep40;
 __ZNSt3__16localeC2ERKS0_($17,$45);
 
 $4 = $17;
 $46 = $4;
 __THREW__ = 0;
 $expanded2 = 8544;
 $47 = invoke_iii(32,$46|0,$expanded2|0)|0;
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 
 if ($49) {
  $expanded3 = 69;
  $50 = ___cxa_find_matching_catch(-1,-1,0)|0;
  $51 = tempRet0;
  $5 = $50;
  $6 = $51;
  $52 = $5;
  ___cxa_call_unexpected($52|0);
  // unreachable
 }
 __THREW__ = 0;
 invoke_vi(132,$17|0);
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 
 L7: do {
  if ($54) {
   label = 13;
  } else {
   
   do {
    if ($47) {
     $55 = $19;
     $3 = $55;
     $56 = $3;
     $gep_int41 = $56;
     $gep42 = (($gep_int41) + 4)|0;
     $57 = $gep42;
     __ZNSt3__16localeC2ERKS0_($18,$57);
     
     $2 = $18;
     $58 = $2;
     __THREW__ = 0;
     $expanded4 = 8544;
     $59 = invoke_iii(19,$58|0,$expanded4|0)|0;
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     
     if ($61) {
      $expanded6 = 69;
      $78 = ___cxa_find_matching_catch(-1,-1)|0;
      $79 = tempRet0;
      $15 = $78;
      $16 = $79;
      __THREW__ = 0;
      invoke_vi(132,$18|0);
      $80 = __THREW__; __THREW__ = 0;
      $81 = $80&1;
      
      if ($81) {
       $expanded7 = 69;
       $93 = ___cxa_find_matching_catch(-1,-1,0)|0;
       u$73 = tempRet0;
       ___clang_call_terminate($93);
       // unreachable
      } else {
       
       break L7;
      }
     } else {
      $62 = $59;
      
      $gep_int43 = $19;
      $gep44 = (($gep_int43) + 68)|0;
      $63 = $gep44;
      HEAP32[$63>>2] = $62;
      __THREW__ = 0;
      invoke_vi(132,$18|0);
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      
      if ($65) {
       label = 13;
       break L7;
      }
      $gep_int45 = $19;
      $gep46 = (($gep_int45) + 68)|0;
      $66 = $gep46;
      $67 = HEAP32[$66>>2]|0;
      $1 = $67;
      $68 = $1;
      $69 = $68;
      $70 = HEAP32[$68>>2]|0;
      $gep_int47 = $70;
      $gep48 = (($gep_int47) + 28)|0;
      $71 = $gep48;
      $72 = HEAP32[$71>>2]|0;
      $73 = FUNCTION_TABLE_ii[$72 & 127]($68)|0;
      $gep_int49 = $19;
      $gep50 = (($gep_int49) + 98)|0;
      $74 = $gep50;
      $75 = $73&1;
      HEAP8[$74] = $75;
      
      break;
     }
    }
   } while(0);
   $82 = $19;
   $83 = HEAP32[$19>>2]|0;
   $gep_int51 = $83;
   $gep52 = (($gep_int51) + 12)|0;
   $84 = $gep52;
   $85 = HEAP32[$84>>2]|0;
   __THREW__ = 0;
   u$64 = invoke_iiii($85|0,$19|0,0,4096)|0;
   $86 = __THREW__; __THREW__ = 0;
   $87 = $86&1;
   
   if ($87) {
    label = 13;
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 13) {
  $expanded5 = 69;
  $76 = ___cxa_find_matching_catch(-1,-1)|0;
  $77 = tempRet0;
  $15 = $76;
  $16 = $77;
  
 }
 $88 = $19;
 __THREW__ = 0;
 invoke_vi(168,$88|0);
 $89 = __THREW__; __THREW__ = 0;
 $90 = $89&1;
 
 if ($90) {
  $expanded7 = 69;
  $93 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$73 = tempRet0;
  ___clang_call_terminate($93);
  // unreachable
 }
 
 $91 = $15;
 $92 = $16;
 ___resumeException($91|0);
 // unreachable
}
function __ZN2cl6detailL10errHandlerEiPKc128($err,$errStr) {
 $err = $err|0;
 $errStr = $errStr|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $1 = $err;
 $2 = $errStr;
 $5 = $1;
 $6 = ($5|0)!=(0);
 
 if (!($6)) {
  $22 = $1;
  STACKTOP = sp;return $22|0;
 }
 $7 = ___cxa_allocate_exception(12)|0;
 $8 = $7;
 $9 = $1;
 $10 = $2;
 __THREW__ = 0;
 invoke_viii(6,$8|0,$9|0,$10|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 
 do {
  if ($12) {
   $expanded2 = 69;
   $15 = ___cxa_find_matching_catch(-1,-1,48)|0;
   $16 = tempRet0;
   $3 = $15;
   $4 = $16;
   ___cxa_free_exception($7|0);
   
  } else {
   __THREW__ = 0;
   $expanded = 48;
   $expanded1 = 1;
   invoke_viii(5,$7|0,$expanded|0,$expanded1|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if ($14) {
    $expanded3 = 69;
    $17 = ___cxa_find_matching_catch(-1,-1,48)|0;
    $18 = tempRet0;
    $3 = $17;
    $4 = $18;
    
    break;
   } else {
    // unreachable
   }
  }
 } while(0);
 $19 = $4;
 $20 = ($19|0)<(0);
 
 if ($20) {
  $21 = $3;
  ___cxa_call_unexpected($21|0);
  // unreachable
 } else {
  $23 = $3;
  $24 = $4;
  ___resumeException($23|0);
  // unreachable
 }
 return 0|0;
}
function __ZN2cl6detail7getInfoIPFiP10_cl_kernelP13_cl_device_idjjPvPjES3_S5_jEEiT_RKT0_RKT1_jPT2_($f,$arg0,$arg1,$name,$param) {
 $f = $f|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 $name = $name|0;
 $param = $param|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $f0 = 0, $gep = 0, $gep3 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 88|0;
 $$byval_copy = sp;
 
 
 
 
 
 $f0 = sp + 56|0;
 $6 = sp + 72|0;
 $1 = $f;
 $2 = $arg0;
 $3 = $arg1;
 $4 = $name;
 $5 = $param;
 $gep_int = $f0;
 $7 = $gep_int;
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $gep_int1 = $f0;
 $gep = (($gep_int1) + 4)|0;
 $9 = $gep;
 $10 = $2;
 HEAP32[$9>>2] = $10;
 $gep_int2 = $f0;
 $gep3 = (($gep_int2) + 8)|0;
 $11 = $gep3;
 $12 = $3;
 HEAP32[$11>>2] = $12;
 $13 = $6;
 $14 = $f0;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;
 $15 = $4;
 $16 = $5;
 $17 = $$byval_copy;
 
 $18 = $$byval_copy;
 $19 = $6;
 ;HEAP32[$18+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$19+8>>2]|0;
 $20 = __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP10_cl_kernelP13_cl_device_idjjPvPjES4_S6_EEjE3getESB_jS8_($$byval_copy,$15,$16)|0;
 $21 = $$byval_copy;
 
 STACKTOP = sp;return $20|0;
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return $4|0;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP10_cl_kernelP13_cl_device_idjjPvPjES4_S6_EEjE3getESB_jS8_($f,$name,$param) {
 $f = $f|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $name;
 $2 = $param;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = __ZN2cl6detail15GetInfoFunctor1IPFiP10_cl_kernelP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$3,4,$5,0)|0;
 STACKTOP = sp;return $6|0;
}
function __ZN2cl6detail15GetInfoFunctor1IPFiP10_cl_kernelP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($this,$param,$size,$value,$size_ret) {
 $this = $this|0;
 $param = $param|0;
 $size = $size|0;
 $value = $value|0;
 $size_ret = $size_ret|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0;
 var $gep3 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 
 
 
 
 
 $1 = $this;
 $2 = $param;
 $3 = $size;
 $4 = $value;
 $5 = $size_ret;
 $6 = $1;
 $gep_int = $6;
 $7 = $gep_int;
 $8 = HEAP32[$7>>2]|0;
 $gep_int1 = $6;
 $gep = (($gep_int1) + 4)|0;
 $9 = $gep;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $gep_int2 = $6;
 $gep3 = (($gep_int2) + 8)|0;
 $12 = $gep3;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = FUNCTION_TABLE_iiiiiii[$8 & 7]($11,$14,$15,$16,$17,$18)|0;
 STACKTOP = sp;return $19|0;
}
function __ZN2cl6stringC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 __ZN2cl6stringC2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK2cl7Program12getBuildInfoINS_6stringEEEiRKNS_6DeviceEjPT_($this,$device,$name,$param) {
 $this = $this|0;
 $device = $device|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 
 
 
 
 $5 = sp + 32|0;
 $1 = $this;
 $2 = $device;
 $3 = $name;
 $4 = $param;
 $6 = $1;
 $7 = $6;
 $gep_int = $6;
 $8 = $gep_int;
 $9 = $2;
 $10 = $9;
 $11 = __ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($10)|0;
 HEAP32[$5>>2] = $11;
 $12 = $3;
 $13 = $4;
 $14 = __ZN2cl6detail7getInfoIPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_NS_6stringEEEiT_RKT0_RKT1_jPT2_(2,$8,$5,$12,$13)|0;
 $gep_int1 = 3392;
 $expanded = $gep_int1;
 $15 = __ZN2cl6detailL10errHandlerEiPKc128($14,$expanded)|0;
 STACKTOP = sp;return $15|0;
}
function __ZN2cl6detail7getInfoIPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_NS_6stringEEEiT_RKT0_RKT1_jPT2_($f,$arg0,$arg1,$name,$param) {
 $f = $f|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 $name = $name|0;
 $param = $param|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $f0 = 0, $gep = 0, $gep3 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 88|0;
 $$byval_copy = sp;
 
 
 
 
 
 $f0 = sp + 56|0;
 $6 = sp + 72|0;
 $1 = $f;
 $2 = $arg0;
 $3 = $arg1;
 $4 = $name;
 $5 = $param;
 $gep_int = $f0;
 $7 = $gep_int;
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $gep_int1 = $f0;
 $gep = (($gep_int1) + 4)|0;
 $9 = $gep;
 $10 = $2;
 HEAP32[$9>>2] = $10;
 $gep_int2 = $f0;
 $gep3 = (($gep_int2) + 8)|0;
 $11 = $gep3;
 $12 = $3;
 HEAP32[$11>>2] = $12;
 $13 = $6;
 $14 = $f0;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;
 $15 = $4;
 $16 = $5;
 $17 = $$byval_copy;
 
 $18 = $$byval_copy;
 $19 = $6;
 ;HEAP32[$18+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$19+8>>2]|0;
 $20 = __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES4_S6_EENS_6stringEE3getESB_jPSC_($$byval_copy,$15,$16)|0;
 $21 = $$byval_copy;
 
 STACKTOP = sp;return $20|0;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES4_S6_EENS_6stringEE3getESB_jPSC_($f,$name,$param) {
 $f = $f|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $expanded = 0, $expanded1 = 0, $required = 0, $value = 0, label = 0, sp = 0, u$13 = 0;
 var u$27 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72|0;
 
 
 
 $required = sp + 24|0;
 
 
 $4 = sp + 48|0;
 
 
 $2 = $name;
 $3 = $param;
 $7 = $2;
 $8 = __ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$7,0,0,$required)|0;
 $err = $8;
 $9 = $err;
 $10 = ($9|0)!=(0);
 
 if ($10) {
  $11 = $err;
  $1 = $11;
  
  $29 = $1;
  STACKTOP = sp;return $29|0;
 }
 $12 = HEAP32[$required>>2]|0;
 $13 = STACKTOP; STACKTOP = STACKTOP + ((((1*$12)|0)+7)&-8)|0;
 $value = $13;
 $14 = $2;
 $15 = HEAP32[$required>>2]|0;
 $16 = $value;
 $17 = __ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$14,$15,$16,0)|0;
 $err = $17;
 $18 = $err;
 $19 = ($18|0)!=(0);
 
 if ($19) {
  $20 = $err;
  $1 = $20;
  
  $29 = $1;
  STACKTOP = sp;return $29|0;
 }
 $21 = $3;
 $22 = $value;
 __ZN2cl6stringC1EPc($4,$22);
 __THREW__ = 0;
 u$13 = invoke_iii(33,$21|0,$4|0)|0;
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 
 if (!($24)) {
  __ZN2cl6stringD1Ev($4);
  $1 = 0;
  
  $29 = $1;
  STACKTOP = sp;return $29|0;
 }
 $expanded = 69;
 $25 = ___cxa_find_matching_catch(-1,-1)|0;
 $26 = tempRet0;
 $5 = $25;
 $6 = $26;
 __THREW__ = 0;
 invoke_vi(153,$4|0);
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 
 if ($28) {
  $expanded1 = 69;
  $32 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$27 = tempRet0;
  ___clang_call_terminate($32);
  // unreachable
 }
 
 $30 = $5;
 $31 = $6;
 ___resumeException($30|0);
 // unreachable
 return 0|0;
}
function __ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($this,$param,$size,$value,$size_ret) {
 $this = $this|0;
 $param = $param|0;
 $size = $size|0;
 $value = $value|0;
 $size_ret = $size_ret|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0;
 var $gep3 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 
 
 
 
 
 $1 = $this;
 $2 = $param;
 $3 = $size;
 $4 = $value;
 $5 = $size_ret;
 $6 = $1;
 $gep_int = $6;
 $7 = $gep_int;
 $8 = HEAP32[$7>>2]|0;
 $gep_int1 = $6;
 $gep = (($gep_int1) + 4)|0;
 $9 = $gep;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $gep_int2 = $6;
 $gep3 = (($gep_int2) + 8)|0;
 $12 = $gep3;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = FUNCTION_TABLE_iiiiiii[$8 & 7]($11,$14,$15,$16,$17,$18)|0;
 STACKTOP = sp;return $19|0;
}
function __ZN2cl6stringaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0;
 var $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep4 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int7 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $2 = $this;
 $3 = $rhs;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)==($5|0);
 
 if ($6) {
  $1 = $4;
  
  $39 = $1;
  STACKTOP = sp;return $39|0;
 }
 $7 = $3;
 $gep_int = $7;
 $8 = $gep_int;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 
 do {
  if ($10) {
   label = 5;
  } else {
   $11 = $3;
   $gep_int1 = $11;
   $gep = (($gep_int1) + 4)|0;
   $12 = $gep;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   
   if ($14) {
    label = 5;
    break;
   }
   $17 = $3;
   $gep_int5 = $17;
   $18 = $gep_int5;
   $19 = HEAP32[$18>>2]|0;
   $gep_int6 = $4;
   $20 = $gep_int6;
   HEAP32[$20>>2] = $19;
   $gep_int7 = $4;
   $21 = $gep_int7;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 1)|0;
   $24 = __Znaj($23)|0;
   $gep_int8 = $4;
   $gep9 = (($gep_int8) + 4)|0;
   $25 = $gep9;
   HEAP32[$25>>2] = $24;
   $gep_int10 = $4;
   $gep11 = (($gep_int10) + 4)|0;
   $26 = $gep11;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)!=(0);
   
   if ($28) {
    $gep_int12 = $4;
    $gep13 = (($gep_int12) + 4)|0;
    $29 = $gep13;
    $30 = HEAP32[$29>>2]|0;
    $31 = $3;
    $gep_int14 = $31;
    $gep15 = (($gep_int14) + 4)|0;
    $32 = $gep15;
    $33 = HEAP32[$32>>2]|0;
    $gep_int16 = $4;
    $34 = $gep_int16;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + 1)|0;
    $37 = $36;
    _memcpy($30|0,$33|0,$37|0)|0;
    
   } else {
    $gep_int17 = $4;
    $38 = $gep_int17;
    HEAP32[$38>>2] = 0;
    
   }
   
  }
 } while(0);
 if ((label|0) == 5) {
  $gep_int2 = $4;
  $15 = $gep_int2;
  HEAP32[$15>>2] = 0;
  $gep_int3 = $4;
  $gep4 = (($gep_int3) + 4)|0;
  $16 = $gep4;
  HEAP32[$16>>2] = 0;
  
 }
 $1 = $4;
 
 $39 = $1;
 STACKTOP = sp;return $39|0;
}
function __ZN2cl6stringC1EPc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $str;
 $3 = $1;
 $4 = $2;
 __ZN2cl6stringC2EPc($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl6stringC2EPc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $str;
 $3 = $1;
 $gep_int = $3;
 $gep = (($gep_int) + 4)|0;
 $4 = $gep;
 HEAP32[$4>>2] = 0;
 $5 = $2;
 $6 = _strlen($5|0)|0;
 $gep_int1 = $3;
 $7 = $gep_int1;
 HEAP32[$7>>2] = $6;
 $gep_int2 = $3;
 $8 = $gep_int2;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = __Znaj($10)|0;
 $gep_int3 = $3;
 $gep4 = (($gep_int3) + 4)|0;
 $12 = $gep4;
 HEAP32[$12>>2] = $11;
 $gep_int5 = $3;
 $gep6 = (($gep_int5) + 4)|0;
 $13 = $gep6;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 
 if ($15) {
  $gep_int7 = $3;
  $gep8 = (($gep_int7) + 4)|0;
  $16 = $gep8;
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $gep_int9 = $3;
  $19 = $gep_int9;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 1)|0;
  $22 = $21;
  _memcpy($17|0,$18|0,$22|0)|0;
  
  STACKTOP = sp;return;
 } else {
  $gep_int10 = $3;
  $23 = $gep_int10;
  HEAP32[$23>>2] = 0;
  
  STACKTOP = sp;return;
 }
}
function __ZN2cl6stringC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 HEAP32[$3>>2] = 0;
 $gep_int1 = $2;
 $gep = (($gep_int1) + 4)|0;
 $4 = $gep;
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6vectorINSt3__14pairIPKcjEELj10EED2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 STACKTOP = sp;return;
}
function __ZN2cl6vectorINSt3__14pairIPKcjEELj10EEC2EjRKS5_($this,$size,$val) {
 $this = $this|0;
 $size = $size|0;
 $val = $val|0;
 var $1 = 0, $10 = 0, $10$phi = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep11 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 
 
 
 
 
 
 $3 = $this;
 $4 = $size;
 $5 = $val;
 $6 = $3;
 $gep_int = $6;
 $7 = $gep_int;
 $gep_int1 = $7;
 $8 = $gep_int1;
 $gep_int2 = $8;
 $gep = (($gep_int2) + 80)|0;
 $9 = $gep;
 
 $10 = $8;
 while(1) {
  
  $2 = $10;
  $11 = $2;
  $1 = $11;
  $12 = $1;
  $gep_int3 = $12;
  $13 = $gep_int3;
  HEAP32[$13>>2] = 0;
  $gep_int4 = $12;
  $gep5 = (($gep_int4) + 4)|0;
  $14 = $gep5;
  HEAP32[$14>>2] = 0;
  $gep_int6 = $10;
  $gep7 = (($gep_int6) + 8)|0;
  $15 = $gep7;
  $16 = ($15|0)==($9|0);
  
  if ($16) {
   break;
  } else {
   $10$phi = $15;$10 = $10$phi;
  }
 }
 $gep_int8 = $6;
 $gep9 = (($gep_int8) + 80)|0;
 $17 = $gep9;
 HEAP32[$17>>2] = -1;
 $gep_int10 = $6;
 $gep11 = (($gep_int10) + 84)|0;
 $18 = $gep11;
 HEAP8[$18] = 1;
 $i = 0;
 
 while(1) {
  $19 = $i;
  $20 = $4;
  $21 = ($19>>>0)<($20>>>0);
  
  if (!($21)) {
   break;
  }
  $22 = $5;
  __ZN2cl6vectorINSt3__14pairIPKcjEELj10EE9push_backERKS5_($6,$22);
  
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
  
 }
 STACKTOP = sp;return;
}
function __ZN2cl6vectorINSt3__14pairIPKcjEELj10EE9push_backERKS5_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep2 = 0, $gep5 = 0, $gep9 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int7 = 0;
 var $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 
 
 
 $3 = $this;
 $4 = $x;
 $5 = $3;
 $6 = __ZNK2cl6vectorINSt3__14pairIPKcjEELj10EE4sizeEv($5)|0;
 $7 = ($6>>>0)<(10);
 
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $gep_int = $5;
 $gep = (($gep_int) + 80)|0;
 $8 = $gep;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $gep_int1 = $5;
 $gep2 = (($gep_int1) + 80)|0;
 $11 = $gep2;
 $12 = HEAP32[$11>>2]|0;
 $gep_int3 = $5;
 $13 = $gep_int3;
 $gep_int4 = $13;
 $gep_array = $12<<3;
 $gep5 = (($gep_int4) + ($gep_array))|0;
 $14 = $gep5;
 $15 = $4;
 $1 = $14;
 $2 = $15;
 $16 = $1;
 $17 = $2;
 $gep_int6 = $17;
 $18 = $gep_int6;
 $19 = HEAP32[$18>>2]|0;
 $gep_int7 = $16;
 $20 = $gep_int7;
 HEAP32[$20>>2] = $19;
 $21 = $2;
 $gep_int8 = $21;
 $gep9 = (($gep_int8) + 4)|0;
 $22 = $gep9;
 $23 = HEAP32[$22>>2]|0;
 $gep_int10 = $16;
 $gep11 = (($gep_int10) + 4)|0;
 $24 = $gep11;
 HEAP32[$24>>2] = $23;
 $gep_int12 = $5;
 $gep13 = (($gep_int12) + 84)|0;
 $25 = $gep13;
 HEAP8[$25] = 0;
 
 STACKTOP = sp;return;
}
function __ZNK2cl6vectorINSt3__14pairIPKcjEELj10EE4sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 80)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return $5|0;
}
function __ZNK2cl6Device7getInfoIP15_cl_platform_idEEijPT_($this,$name,$param) {
 $this = $this|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $2 = $name;
 $3 = $param;
 $4 = $1;
 $5 = $4;
 $gep_int = $4;
 $6 = $gep_int;
 $7 = $2;
 $8 = $3;
 $9 = __ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_P15_cl_platform_idEEiT_RKT0_jPT1_(13,$6,$7,$8)|0;
 $gep_int1 = 3344;
 $expanded = $gep_int1;
 $10 = __ZN2cl6detailL10errHandlerEiPKc128($9,$expanded)|0;
 STACKTOP = sp;return $10|0;
}
function __ZN2cl6detail7getInfoIPFiP13_cl_device_idjjPvPjES3_P15_cl_platform_idEEiT_RKT0_jPT1_($f,$arg0,$name,$param) {
 $f = $f|0;
 $arg0 = $arg0|0;
 $name = $name|0;
 $param = $param|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f0 = 0;
 var $gep = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $$byval_copy = sp;
 
 
 
 
 $f0 = sp + 40|0;
 $5 = sp + 48|0;
 $1 = $f;
 $2 = $arg0;
 $3 = $name;
 $4 = $param;
 $gep_int = $f0;
 $6 = $gep_int;
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $gep_int1 = $f0;
 $gep = (($gep_int1) + 4)|0;
 $8 = $gep;
 $9 = $2;
 HEAP32[$8>>2] = $9;
 $10 = $5;
 $11 = $f0;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;
 $12 = $3;
 $13 = $4;
 $14 = $$byval_copy;
 
 $15 = $$byval_copy;
 $16 = $5;
 ;HEAP32[$15+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;
 $17 = __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEP15_cl_platform_idE3getES9_jPSB_($$byval_copy,$12,$13)|0;
 $18 = $$byval_copy;
 
 STACKTOP = sp;return $17|0;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES4_EEP15_cl_platform_idE3getES9_jPSB_($f,$name,$param) {
 $f = $f|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $name;
 $2 = $param;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = __ZN2cl6detail15GetInfoFunctor0IPFiP13_cl_device_idjjPvPjES3_EclEjjS4_S5_($f,$3,4,$5,0)|0;
 STACKTOP = sp;return $6|0;
}
function __ZNK2cl5Event4waitEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $gep_int = $2;
 $4 = $gep_int;
 $5 = _clWaitForEvents(1,$4|0)|0;
 $gep_int1 = 3440;
 $expanded = $gep_int1;
 $6 = __ZN2cl6detailL10errHandlerEiPKc128($5,$expanded)|0;
 STACKTOP = sp;return $6|0;
}
function __ZNK2cl5Event16getProfilingInfoIyEEijPT_($this,$name,$param) {
 $this = $this|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 
 $1 = $this;
 $2 = $name;
 $3 = $param;
 $4 = $1;
 $5 = $4;
 $gep_int = $4;
 $6 = $gep_int;
 $7 = $2;
 $8 = $3;
 $9 = __ZN2cl6detail7getInfoIPFiP9_cl_eventjjPvPjES3_yEEiT_RKT0_jPT1_(15,$6,$7,$8)|0;
 $gep_int1 = 3416;
 $expanded = $gep_int1;
 $10 = __ZN2cl6detailL10errHandlerEiPKc128($9,$expanded)|0;
 STACKTOP = sp;return $10|0;
}
function __ZN2cl6detail7getInfoIPFiP9_cl_eventjjPvPjES3_yEEiT_RKT0_jPT1_($f,$arg0,$name,$param) {
 $f = $f|0;
 $arg0 = $arg0|0;
 $name = $name|0;
 $param = $param|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f0 = 0;
 var $gep = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $$byval_copy = sp;
 
 
 
 
 $f0 = sp + 40|0;
 $5 = sp + 48|0;
 $1 = $f;
 $2 = $arg0;
 $3 = $name;
 $4 = $param;
 $gep_int = $f0;
 $6 = $gep_int;
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $gep_int1 = $f0;
 $gep = (($gep_int1) + 4)|0;
 $8 = $gep;
 $9 = $2;
 HEAP32[$8>>2] = $9;
 $10 = $5;
 $11 = $f0;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;
 $12 = $3;
 $13 = $4;
 $14 = $$byval_copy;
 
 $15 = $$byval_copy;
 $16 = $5;
 ;HEAP32[$15+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;
 $17 = __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP9_cl_eventjjPvPjES4_EEyE3getES9_jPy($$byval_copy,$12,$13)|0;
 $18 = $$byval_copy;
 
 STACKTOP = sp;return $17|0;
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP9_cl_eventjjPvPjES4_EEyE3getES9_jPy($f,$name,$param) {
 $f = $f|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $name;
 $2 = $param;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = __ZN2cl6detail15GetInfoFunctor0IPFiP9_cl_eventjjPvPjES3_EclEjjS4_S5_($f,$3,8,$5,0)|0;
 STACKTOP = sp;return $6|0;
}
function __ZN2cl6detail15GetInfoFunctor0IPFiP9_cl_eventjjPvPjES3_EclEjjS4_S5_($this,$param,$size,$value,$size_ret) {
 $this = $this|0;
 $param = $param|0;
 $size = $size|0;
 $value = $value|0;
 $size_ret = $size_ret|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep_int = 0, $gep_int1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 
 
 
 
 
 $1 = $this;
 $2 = $param;
 $3 = $size;
 $4 = $value;
 $5 = $size_ret;
 $6 = $1;
 $gep_int = $6;
 $7 = $gep_int;
 $8 = HEAP32[$7>>2]|0;
 $gep_int1 = $6;
 $gep = (($gep_int1) + 4)|0;
 $9 = $gep;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = FUNCTION_TABLE_iiiiii[$8 & 31]($11,$12,$13,$14,$15)|0;
 STACKTOP = sp;return $16|0;
}
function __ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNS_6vectorINS_5EventELj10EEEPS6_($this,$buffer,$blocking,$offset,$size,$ptr,$events,$event) {
 $this = $this|0;
 $buffer = $buffer|0;
 $blocking = $blocking|0;
 $offset = $offset|0;
 $size = $size|0;
 $ptr = $ptr|0;
 $events = $events|0;
 $event = $event|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 
 
 
 
 
 
 
 
 $1 = $this;
 $2 = $buffer;
 $3 = $blocking;
 $4 = $offset;
 $5 = $size;
 $6 = $ptr;
 $7 = $events;
 $8 = $event;
 $9 = $1;
 $10 = $9;
 $gep_int = $9;
 $11 = $gep_int;
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = $13;
 $15 = __ZNK2cl6detail7WrapperIP7_cl_memEclEv($14)|0;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = ($20|0)!=(0);
 
 if ($21) {
  $22 = $7;
  $23 = __ZNK2cl6vectorINS_5EventELj10EE4sizeEv($22)|0;
  
  $24 = $23;
 } else {
  
  $24 = 0;
 }
 
 $25 = $7;
 $26 = ($25|0)!=(0);
 
 do {
  if ($26) {
   $27 = $7;
   $28 = __ZNK2cl6vectorINS_5EventELj10EE4sizeEv($27)|0;
   $29 = ($28>>>0)>(0);
   
   if (!($29)) {
    label = 7;
    break;
   }
   $30 = $7;
   $31 = __ZNK2cl6vectorINS_5EventELj10EE5frontEv($30)|0;
   $32 = $31;
   
   $33 = $32;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  
  $33 = 0;
 }
 
 $34 = $8;
 $35 = $34;
 $36 = _clEnqueueReadBuffer($12|0,$15|0,$16|0,$17|0,$18|0,$19|0,$24|0,$33|0,$35|0)|0;
 $gep_int1 = 3456;
 $expanded = $gep_int1;
 $37 = __ZN2cl6detailL10errHandlerEiPKc128($36,$expanded)|0;
 STACKTOP = sp;return $37|0;
}
function __ZN2cl5EventaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 
 if (!($5)) {
  STACKTOP = sp;return $3|0;
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 u$3 = __ZN2cl6detail7WrapperIP9_cl_eventEaSERKS4_($6,$8)|0;
 
 STACKTOP = sp;return $3|0;
}
function __ZNK2cl12CommandQueue20enqueueNDRangeKernelERKNS_6KernelERKNS_7NDRangeES6_S6_PKNS_6vectorINS_5EventELj10EEEPS8_($this,$kernel,$offset,$global,$local,$events,$event) {
 $this = $this|0;
 $kernel = $kernel|0;
 $offset = $offset|0;
 $global = $global|0;
 $local = $local|0;
 $events = $events|0;
 $event = $event|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 
 
 
 
 
 
 
 $1 = $this;
 $2 = $kernel;
 $3 = $offset;
 $4 = $global;
 $5 = $local;
 $6 = $events;
 $7 = $event;
 $8 = $1;
 $9 = $8;
 $gep_int = $8;
 $10 = $gep_int;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = $12;
 $14 = __ZNK2cl6detail7WrapperIP10_cl_kernelEclEv($13)|0;
 $15 = $4;
 $16 = __ZNK2cl7NDRange10dimensionsEv($15)|0;
 $17 = $3;
 $18 = __ZNK2cl7NDRange10dimensionsEv($17)|0;
 $19 = ($18|0)!=(0);
 
 if ($19) {
  $20 = $3;
  $21 = __ZNK2cl7NDRangecvPKjEv($20)|0;
  
  $22 = $21;
 } else {
  
  $22 = 0;
 }
 
 $23 = $4;
 $24 = __ZNK2cl7NDRangecvPKjEv($23)|0;
 $25 = $5;
 $26 = __ZNK2cl7NDRange10dimensionsEv($25)|0;
 $27 = ($26|0)!=(0);
 
 if ($27) {
  $28 = $5;
  $29 = __ZNK2cl7NDRangecvPKjEv($28)|0;
  
  $30 = $29;
 } else {
  
  $30 = 0;
 }
 
 $31 = $6;
 $32 = ($31|0)!=(0);
 
 if ($32) {
  $33 = $6;
  $34 = __ZNK2cl6vectorINS_5EventELj10EE4sizeEv($33)|0;
  
  $35 = $34;
 } else {
  
  $35 = 0;
 }
 
 $36 = $6;
 $37 = ($36|0)!=(0);
 
 do {
  if ($37) {
   $38 = $6;
   $39 = __ZNK2cl6vectorINS_5EventELj10EE4sizeEv($38)|0;
   $40 = ($39>>>0)>(0);
   
   if (!($40)) {
    label = 13;
    break;
   }
   $41 = $6;
   $42 = __ZNK2cl6vectorINS_5EventELj10EE5frontEv($41)|0;
   $43 = $42;
   
   $44 = $43;
  } else {
   label = 13;
  }
 } while(0);
 if ((label|0) == 13) {
  
  $44 = 0;
 }
 
 $45 = $7;
 $46 = $45;
 $47 = _clEnqueueNDRangeKernel($11|0,$14|0,$16|0,$22|0,$24|0,$30|0,$35|0,$44|0,$46|0)|0;
 $gep_int1 = 3480;
 $expanded = $gep_int1;
 $48 = __ZN2cl6detailL10errHandlerEiPKc128($47,$expanded)|0;
 STACKTOP = sp;return $48|0;
}
function __ZN2cl7NDRangeC1Ej($this,$size0) {
 $this = $this|0;
 $size0 = $size0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $size0;
 $3 = $1;
 $4 = $2;
 __ZN2cl7NDRangeC2Ej($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeC2Ej($this,$size0) {
 $this = $this|0;
 $size0 = $size0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0;
 var $gep = 0, $gep_int = 0, $gep_int2 = 0, $gep_int3 = 0, label = 0, sp = 0, u$16 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 
 $2 = sp + 8|0;
 
 
 $1 = $this;
 HEAP32[$2>>2] = $size0;
 $5 = $1;
 $gep_int = $5;
 $6 = $gep_int;
 __ZN2cl6size_tILi3EEC1Ev($6);
 $gep_int2 = $5;
 $gep = (($gep_int2) + 20)|0;
 $7 = $gep;
 HEAP32[$7>>2] = 1;
 $gep_int3 = $5;
 $8 = $gep_int3;
 $9 = $8;
 __THREW__ = 0;
 invoke_vii(62,$9|0,$2|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $expanded = 69;
 $12 = ___cxa_find_matching_catch(-1,-1)|0;
 $13 = tempRet0;
 $3 = $12;
 $4 = $13;
 __THREW__ = 0;
 invoke_vi(169,$6|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 
 if ($15) {
  $expanded1 = 69;
  $18 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$16 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable
 }
 
 $16 = $3;
 $17 = $4;
 ___resumeException($16|0);
 // unreachable
}
function __ZN2cl6vectorIjLj3EE9push_backERKj($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0, $gep_array = 0;
 var $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $x;
 $3 = $1;
 $4 = __ZNK2cl6vectorIjLj3EE4sizeEv($3)|0;
 $5 = ($4>>>0)<(3);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $gep_int = $3;
 $gep = (($gep_int) + 12)|0;
 $6 = $gep;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $gep_int1 = $3;
 $gep2 = (($gep_int1) + 12)|0;
 $11 = $gep2;
 $12 = HEAP32[$11>>2]|0;
 $gep_int3 = $3;
 $13 = $gep_int3;
 $gep_int4 = $13;
 $gep_array = $12<<2;
 $gep5 = (($gep_int4) + ($gep_array))|0;
 $14 = $gep5;
 HEAP32[$14>>2] = $10;
 $gep_int6 = $3;
 $gep7 = (($gep_int6) + 16)|0;
 $15 = $gep7;
 HEAP8[$15] = 0;
 
 STACKTOP = sp;return;
}
function __ZNK2cl6vectorIjLj3EE4sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 12)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return $5|0;
}
function __ZNK2cl6detail7WrapperIP10_cl_kernelEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return $4|0;
}
function __ZNK2cl7NDRange10dimensionsEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 20)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return $4|0;
}
function __ZNK2cl7NDRangecvPKjEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = $3;
 $5 = __ZNK2cl6vectorIjLj3EEcvPKjEv($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZNK2cl6vectorIjLj3EEcvPKjEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $gep_int1 = $3;
 $4 = $gep_int1;
 STACKTOP = sp;return $4|0;
}
function __ZN2cl6detail7WrapperIP9_cl_eventEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, $gep_int3 = 0, label = 0, sp = 0, u$3 = 0;
 var u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $gep_int = $3;
 $4 = $gep_int;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 
 if ($6) {
  u$3 = __ZNK2cl6detail7WrapperIP9_cl_eventE7releaseEv($3)|0;
  
 }
 $7 = $2;
 $gep_int1 = $7;
 $8 = $gep_int1;
 $9 = HEAP32[$8>>2]|0;
 $gep_int2 = $3;
 $10 = $gep_int2;
 HEAP32[$10>>2] = $9;
 $gep_int3 = $3;
 $11 = $gep_int3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 
 if (!($13)) {
  STACKTOP = sp;return $3|0;
 }
 u$7 = __ZNK2cl6detail7WrapperIP9_cl_eventE6retainEv($3)|0;
 
 STACKTOP = sp;return $3|0;
}
function __ZNK2cl6detail7WrapperIP9_cl_eventE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP9_cl_eventE7releaseES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZNK2cl6detail7WrapperIP9_cl_eventE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP9_cl_eventE6retainES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6detail16ReferenceHandlerIP9_cl_eventE6retainES3_($event) {
 $event = $event|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $event;
 $2 = $1;
 $3 = _clRetainEvent($2|0)|0;
 STACKTOP = sp;return $3|0;
}
function __ZN2cl6detail16ReferenceHandlerIP9_cl_eventE7releaseES3_($event) {
 $event = $event|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $event;
 $2 = $1;
 $3 = _clReleaseEvent($2|0)|0;
 STACKTOP = sp;return $3|0;
}
function __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($this,$index,$value) {
 $this = $this|0;
 $index = $index|0;
 $value = $value|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $index;
 $3 = $1;
 $4 = $3;
 $gep_int = $3;
 $5 = $gep_int;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE4sizeERKS2_($value)|0;
 $9 = __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE3ptrERS2_($value)|0;
 $10 = $9;
 $11 = _clSetKernelArg($6|0,$7|0,$8|0,$10|0)|0;
 $gep_int1 = 3504;
 $expanded = $gep_int1;
 $12 = __ZN2cl6detailL10errHandlerEiPKc128($11,$expanded)|0;
 STACKTOP = sp;return $12|0;
}
function __ZN2cl6BufferC1ERKS0_($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $buffer;
 $3 = $1;
 $4 = $2;
 __ZN2cl6BufferC2ERKS0_($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl6Kernel6setArgIjEEijT_($this,$index,$value) {
 $this = $this|0;
 $index = $index|0;
 $value = $value|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 
 
 $3 = sp + 16|0;
 $1 = $this;
 $2 = $index;
 HEAP32[$3>>2] = $value;
 $4 = $1;
 $5 = $4;
 $gep_int = $4;
 $6 = $gep_int;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = __ZN2cl6detail21KernelArgumentHandlerIjE4sizeERKj($3)|0;
 $10 = __ZN2cl6detail21KernelArgumentHandlerIjE3ptrERj($3)|0;
 $11 = $10;
 $12 = _clSetKernelArg($7|0,$8|0,$9|0,$11|0)|0;
 $gep_int1 = 3504;
 $expanded = $gep_int1;
 $13 = __ZN2cl6detailL10errHandlerEiPKc128($12,$expanded)|0;
 STACKTOP = sp;return $13|0;
}
function __ZN2cl6detail21KernelArgumentHandlerIjE4sizeERKj($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $2 = $1;
 STACKTOP = sp;return 4;
}
function __ZN2cl6detail21KernelArgumentHandlerIjE3ptrERj($value) {
 $value = $value|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $value;
 $2 = $1;
 STACKTOP = sp;return $2|0;
}
function __ZN2cl6BufferC2ERKS0_($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $buffer;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $5;
 __ZN2cl6MemoryC2ERKS0_($4,$6);
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryC2ERKS0_($this,$memory) {
 $this = $this|0;
 $memory = $memory|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $memory;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $5;
 __ZN2cl6detail7WrapperIP7_cl_memEC2ERKS4_($4,$6);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP7_cl_memEC2ERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $gep_int = $4;
 $5 = $gep_int;
 $6 = HEAP32[$5>>2]|0;
 $gep_int1 = $3;
 $7 = $gep_int1;
 HEAP32[$7>>2] = $6;
 $gep_int2 = $3;
 $8 = $gep_int2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 
 if (!($10)) {
  STACKTOP = sp;return;
 }
 u$4 = __ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($3)|0;
 
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP7_cl_memE6retainES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6detail16ReferenceHandlerIP7_cl_memE6retainES3_($memory) {
 $memory = $memory|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $memory;
 $2 = $1;
 $3 = _clRetainMemObject($2|0)|0;
 STACKTOP = sp;return $3|0;
}
function __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE4sizeERKS2_($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $2 = $1;
 STACKTOP = sp;return 4;
}
function __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE3ptrERS2_($value) {
 $value = $value|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $value;
 $2 = $1;
 STACKTOP = sp;return $2|0;
}
function __ZN2cl7ContextD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 u$2 = __ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($2)|0;
 
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP11_cl_contextE7releaseES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_contextE7releaseES3_($context) {
 $context = $context|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $context;
 $2 = $1;
 $3 = _clReleaseContext($2|0)|0;
 STACKTOP = sp;return $3|0;
}
function __ZN2cl6BufferD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6MemoryD2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP7_cl_memED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP7_cl_memED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 u$2 = __ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($2)|0;
 
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP7_cl_memE7releaseES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6detail16ReferenceHandlerIP7_cl_memE7releaseES3_($memory) {
 $memory = $memory|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $memory;
 $2 = $1;
 $3 = _clReleaseMemObject($2|0)|0;
 STACKTOP = sp;return $3|0;
}
function __ZN2cl6KernelD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 u$2 = __ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($2)|0;
 
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE7releaseES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE7releaseES3_($kernel) {
 $kernel = $kernel|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $kernel;
 $2 = $1;
 $3 = _clReleaseKernel($2|0)|0;
 STACKTOP = sp;return $3|0;
}
function __ZN2cl12CommandQueueD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 u$2 = __ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($2)|0;
 
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE7releaseES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE7releaseES3_($queue) {
 $queue = $queue|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $queue;
 $2 = $1;
 $3 = _clReleaseCommandQueue($2|0)|0;
 STACKTOP = sp;return $3|0;
}
function __ZN2cl5EventD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP9_cl_eventED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP9_cl_eventED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 u$2 = __ZNK2cl6detail7WrapperIP9_cl_eventE7releaseEv($2)|0;
 
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP11_cl_programED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP11_cl_programED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 u$2 = __ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($2)|0;
 
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = __ZN2cl6detail16ReferenceHandlerIP11_cl_programE7releaseES3_($4)|0;
 STACKTOP = sp;return $5|0;
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_programE7releaseES3_($program) {
 $program = $program|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $program;
 $2 = $1;
 $3 = _clReleaseProgram($2|0)|0;
 STACKTOP = sp;return $3|0;
}
function __ZN2cl6BufferC2ERKNS_7ContextEyjPvPi($this,$context,$1,$2,$size,$host_ptr,$err) {
 $this = $this|0;
 $context = $context|0;
 $1 = $1|0;
 $2 = $2|0;
 $size = $size|0;
 $host_ptr = $host_ptr|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep_int = 0, $gep_int3 = 0, label = 0, sp = 0, u$14 = 0, u$28 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72|0;
 
 
 $5 = sp + 16|0;
 
 
 
 $error = sp + 48|0;
 
 
 $3 = $this;
 $4 = $context;
 $11 = $5;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $2;
 $6 = $size;
 $7 = $host_ptr;
 $8 = $err;
 $15 = $3;
 $16 = $15;
 __ZN2cl6MemoryC2Ev($16);
 $17 = $4;
 $18 = $17;
 __THREW__ = 0;
 $19 = invoke_ii(85,$18|0)|0;
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 
 do {
  if (!($21)) {
   $22 = $5;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = $6;
   $29 = $7;
   __THREW__ = 0;
   $30 = invoke_iiiiiii(3,$19|0,$24|0,$27|0,$28|0,$29|0,$error|0)|0;
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   
   if ($32) {
    break;
   }
   $33 = $15;
   $gep_int = $15;
   $34 = $gep_int;
   HEAP32[$34>>2] = $30;
   $35 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   $gep_int3 = 3520;
   $expanded = $gep_int3;
   u$14 = invoke_iii(34,$35|0,$expanded|0)|0;
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   
   if ($37) {
    break;
   }
   $38 = $8;
   $39 = ($38|0)!=(0);
   
   if (!($39)) {
    STACKTOP = sp;return;
   }
   $40 = HEAP32[$error>>2]|0;
   $41 = $8;
   HEAP32[$41>>2] = $40;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded1 = 69;
 $42 = ___cxa_find_matching_catch(-1,-1)|0;
 $43 = tempRet0;
 $9 = $42;
 $10 = $43;
 $44 = $15;
 __THREW__ = 0;
 invoke_vi(170,$44|0);
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 
 if ($46) {
  $expanded2 = 69;
  $49 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$28 = tempRet0;
  ___clang_call_terminate($49);
  // unreachable
 }
 
 $47 = $9;
 $48 = $10;
 ___resumeException($47|0);
 // unreachable
}
function __ZN2cl6MemoryC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP7_cl_memEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return $4|0;
}
function __ZN2cl6detail7WrapperIP7_cl_memEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6KernelC2ERKNS_7ProgramEPKcPi($this,$program,$name,$err) {
 $this = $this|0;
 $program = $program|0;
 $name = $name|0;
 $err = $err|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep_int = 0, $gep_int3 = 0;
 var label = 0, sp = 0, u$11 = 0, u$25 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 
 
 
 
 $error = sp + 32|0;
 
 
 $1 = $this;
 $2 = $program;
 $3 = $name;
 $4 = $err;
 $7 = $1;
 $8 = $7;
 __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($8);
 $9 = $2;
 $10 = $9;
 __THREW__ = 0;
 $11 = invoke_ii(86,$10|0)|0;
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 
 do {
  if (!($13)) {
   $14 = $3;
   __THREW__ = 0;
   $15 = invoke_iiii(28,$11|0,$14|0,$error|0)|0;
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   
   if ($17) {
    break;
   }
   $18 = $7;
   $gep_int = $7;
   $19 = $gep_int;
   HEAP32[$19>>2] = $15;
   $20 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   $gep_int3 = 3536;
   $expanded = $gep_int3;
   u$11 = invoke_iii(34,$20|0,$expanded|0)|0;
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   
   if ($22) {
    break;
   }
   $23 = $4;
   $24 = ($23|0)!=(0);
   
   if (!($24)) {
    STACKTOP = sp;return;
   }
   $25 = HEAP32[$error>>2]|0;
   $26 = $4;
   HEAP32[$26>>2] = $25;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded1 = 69;
 $27 = ___cxa_find_matching_catch(-1,-1)|0;
 $28 = tempRet0;
 $5 = $27;
 $6 = $28;
 $29 = $7;
 __THREW__ = 0;
 invoke_vi(171,$29|0);
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 
 if ($31) {
  $expanded2 = 69;
  $34 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$25 = tempRet0;
  ___clang_call_terminate($34);
  // unreachable
 }
 
 $32 = $5;
 $33 = $6;
 ___resumeException($32|0);
 // unreachable
}
function __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_programEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return $4|0;
}
function __ZN2cl6stringD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $gep = (($gep_int) + 4)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $gep_int1 = $2;
 $gep2 = (($gep_int1) + 4)|0;
 $6 = $gep2;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 
 if (!($8)) {
  __ZdaPv($7);
  
 }
 
 STACKTOP = sp;return;
}
function __ZNK2cl6vectorINS_6DeviceELj10EE5frontEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 $gep_int1 = $3;
 $4 = $gep_int1;
 STACKTOP = sp;return $4|0;
}
function __ZN2cl7ProgramC2ERKNS_7ContextERKNS_6vectorINSt3__14pairIPKcjEELj10EEEPi($this,$context,$sources,$err) {
 $this = $this|0;
 $context = $context|0;
 $sources = $sources|0;
 $err = $err|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $error = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep8 = 0;
 var $gep_array = 0, $gep_array7 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int9 = 0, $i = 0, $lengths = 0, $n = 0, $strings = 0, label = 0, sp = 0, u$35 = 0, u$44 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 
 
 
 
 $error = sp + 32|0;
 
 
 
 
 
 
 $7 = sp + 88|0;
 $8 = sp + 96|0;
 $1 = $this;
 $2 = $context;
 $3 = $sources;
 $4 = $err;
 $9 = $1;
 $10 = $9;
 __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($10);
 $11 = $3;
 __THREW__ = 0;
 $12 = invoke_ii(87,$11|0)|0;
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 
 L1: do {
  if (!($14)) {
   $n = $12;
   $15 = $n;
   $16 = $15<<2;
   $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$16)|0)+7)&-8)|0;
   $18 = $17;
   $lengths = $18;
   $19 = $n;
   $20 = $19<<2;
   $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$20)|0)+7)&-8)|0;
   $22 = $21;
   $strings = $22;
   $i = 0;
   
   while(1) {
    $23 = $i;
    $24 = $n;
    $25 = ($23>>>0)<($24>>>0);
    
    if (!($25)) {
     break;
    }
    $26 = $3;
    $27 = $i;
    __THREW__ = 0;
    invoke_viii(14,$7|0,$26|0,$27|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    
    if ($29) {
     break L1;
    }
    $gep_int = $7;
    $30 = $gep_int;
    $31 = HEAP32[$30>>2]|0;
    $32 = $i;
    $33 = $strings;
    $gep_int3 = $33;
    $gep_array = $32<<2;
    $gep = (($gep_int3) + ($gep_array))|0;
    $34 = $gep;
    HEAP32[$34>>2] = $31;
    $35 = $3;
    $36 = $i;
    __THREW__ = 0;
    invoke_viii(14,$8|0,$35|0,$36|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    
    if ($38) {
     break L1;
    }
    $gep_int4 = $8;
    $gep5 = (($gep_int4) + 4)|0;
    $39 = $gep5;
    $40 = HEAP32[$39>>2]|0;
    $41 = $i;
    $42 = $lengths;
    $gep_int6 = $42;
    $gep_array7 = $41<<2;
    $gep8 = (($gep_int6) + ($gep_array7))|0;
    $43 = $gep8;
    HEAP32[$43>>2] = $40;
    
    $44 = $i;
    $45 = (($44) + 1)|0;
    $i = $45;
    
   }
   $51 = $2;
   $52 = $51;
   __THREW__ = 0;
   $53 = invoke_ii(85,$52|0)|0;
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   
   if ($55) {
    break;
   }
   $56 = $n;
   $57 = $strings;
   $58 = $lengths;
   __THREW__ = 0;
   $59 = invoke_iiiiii(16,$53|0,$56|0,$57|0,$58|0,$error|0)|0;
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   
   if ($61) {
    break;
   }
   $62 = $9;
   $gep_int9 = $9;
   $63 = $gep_int9;
   HEAP32[$63>>2] = $59;
   $64 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   $gep_int10 = 3568;
   $expanded1 = $gep_int10;
   u$35 = invoke_iii(34,$64|0,$expanded1|0)|0;
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   
   if ($66) {
    break;
   }
   $67 = $4;
   $68 = ($67|0)!=(0);
   
   if (!($68)) {
    STACKTOP = sp;return;
   }
   $69 = HEAP32[$error>>2]|0;
   $70 = $4;
   HEAP32[$70>>2] = $69;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded = 69;
 $46 = ___cxa_find_matching_catch(-1,-1)|0;
 $47 = tempRet0;
 $5 = $46;
 $6 = $47;
 $48 = $9;
 __THREW__ = 0;
 invoke_vi(172,$48|0);
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 
 if ($50) {
  $expanded2 = 69;
  $73 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$44 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable
 }
 
 $71 = $5;
 $72 = $6;
 ___resumeException($71|0);
 // unreachable
}
function __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNK2cl6vectorINSt3__14pairIPKcjEELj10EEixEi($agg$result,$this,$index) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $index = $index|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 
 
 $1 = $this;
 $2 = $index;
 $3 = $1;
 $4 = $2;
 $gep_int = $3;
 $5 = $gep_int;
 $gep_int1 = $5;
 $gep_array = $4<<3;
 $gep = (($gep_int1) + ($gep_array))|0;
 $6 = $gep;
 $7 = $agg$result;
 $8 = $6;
 ;HEAP32[$7+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEyPi($this,$context,$device,$1,$2,$err) {
 $this = $this|0;
 $context = $context|0;
 $device = $device|0;
 $1 = $1|0;
 $2 = $2|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep_int = 0, $gep_int3 = 0, label = 0, sp = 0, u$15 = 0, u$29 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 
 
 
 $6 = sp + 24|0;
 
 $error = sp + 40|0;
 
 
 $3 = $this;
 $4 = $context;
 $5 = $device;
 $10 = $6;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $2;
 $7 = $err;
 $14 = $3;
 $15 = $14;
 __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($15);
 $16 = $4;
 $17 = $16;
 __THREW__ = 0;
 $18 = invoke_ii(85,$17|0)|0;
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 
 do {
  if (!($20)) {
   $21 = $5;
   $22 = $21;
   __THREW__ = 0;
   $23 = invoke_ii(88,$22|0)|0;
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   
   if ($25) {
    break;
   }
   $26 = $6;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   __THREW__ = 0;
   $32 = invoke_iiiiii(17,$18|0,$23|0,$28|0,$31|0,$error|0)|0;
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   
   if ($34) {
    break;
   }
   $35 = $14;
   $gep_int = $14;
   $36 = $gep_int;
   HEAP32[$36>>2] = $32;
   $37 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   $gep_int3 = 3600;
   $expanded = $gep_int3;
   u$15 = invoke_iii(34,$37|0,$expanded|0)|0;
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   
   if ($39) {
    break;
   }
   $40 = $7;
   $41 = ($40|0)!=(0);
   
   if (!($41)) {
    STACKTOP = sp;return;
   }
   $42 = HEAP32[$error>>2]|0;
   $43 = $7;
   HEAP32[$43>>2] = $42;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded1 = 69;
 $44 = ___cxa_find_matching_catch(-1,-1)|0;
 $45 = tempRet0;
 $8 = $44;
 $9 = $45;
 $46 = $14;
 __THREW__ = 0;
 invoke_vi(173,$46|0);
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 
 if ($48) {
  $expanded2 = 69;
  $51 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$29 = tempRet0;
  ___clang_call_terminate($51);
  // unreachable
 }
 
 $49 = $8;
 $50 = $9;
 ___resumeException($49|0);
 // unreachable
}
function __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl7ContextC2ERKNS_6vectorINS_6DeviceELj10EEEPiPFvPKcPKvjPvESB_S6_($this,$devices,$properties,$notifyFptr,$data,$err) {
 $this = $this|0;
 $devices = $devices|0;
 $properties = $properties|0;
 $notifyFptr = $notifyFptr|0;
 $data = $data|0;
 $err = $err|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $error = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep_int = 0, $gep_int3 = 0, label = 0, sp = 0, u$15 = 0, u$29 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72|0;
 
 
 
 
 
 
 $error = sp + 48|0;
 
 
 $1 = $this;
 $2 = $devices;
 $3 = $properties;
 $4 = $notifyFptr;
 $5 = $data;
 $6 = $err;
 $9 = $1;
 $10 = $9;
 __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($10);
 $11 = $3;
 $12 = $2;
 __THREW__ = 0;
 $13 = invoke_ii(76,$12|0)|0;
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 
 do {
  if (!($15)) {
   $16 = $2;
   __THREW__ = 0;
   $17 = invoke_ii(89,$16|0)|0;
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   
   if ($19) {
    break;
   }
   $20 = $17;
   $21 = $4;
   $22 = $5;
   __THREW__ = 0;
   $23 = invoke_iiiiiii(4,$11|0,$13|0,$20|0,$21|0,$22|0,$error|0)|0;
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   
   if ($25) {
    break;
   }
   $26 = $9;
   $gep_int = $9;
   $27 = $gep_int;
   HEAP32[$27>>2] = $23;
   $28 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   $gep_int3 = 3624;
   $expanded = $gep_int3;
   u$15 = invoke_iii(34,$28|0,$expanded|0)|0;
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   
   if ($30) {
    break;
   }
   $31 = $6;
   $32 = ($31|0)!=(0);
   
   if (!($32)) {
    STACKTOP = sp;return;
   }
   $33 = HEAP32[$error>>2]|0;
   $34 = $6;
   HEAP32[$34>>2] = $33;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded1 = 69;
 $35 = ___cxa_find_matching_catch(-1,-1)|0;
 $36 = tempRet0;
 $7 = $35;
 $8 = $36;
 $37 = $9;
 __THREW__ = 0;
 invoke_vi(174,$37|0);
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 
 if ($39) {
  $expanded2 = 69;
  $42 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$29 = tempRet0;
  ___clang_call_terminate($42);
  // unreachable
 }
 
 $40 = $7;
 $41 = $8;
 ___resumeException($40|0);
 // unreachable
}
function __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl5EventC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP9_cl_eventEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP9_cl_eventEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 
 $1 = $this;
 $2 = $1;
 $gep_int = $2;
 $3 = $gep_int;
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __GLOBAL__I_a129() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init123();
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded100 = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0;
 var $expanded104 = 0, $expanded105 = 0, $expanded106 = 0, $expanded107 = 0, $expanded108 = 0, $expanded109 = 0, $expanded11 = 0, $expanded110 = 0, $expanded111 = 0, $expanded112 = 0, $expanded113 = 0, $expanded114 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded118 = 0, $expanded119 = 0, $expanded12 = 0, $expanded120 = 0, $expanded121 = 0;
 var $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded125 = 0, $expanded126 = 0, $expanded127 = 0, $expanded128 = 0, $expanded129 = 0, $expanded13 = 0, $expanded130 = 0, $expanded131 = 0, $expanded132 = 0, $expanded133 = 0, $expanded134 = 0, $expanded135 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded139 = 0, $expanded14 = 0;
 var $expanded140 = 0, $expanded141 = 0, $expanded142 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded146 = 0, $expanded147 = 0, $expanded148 = 0, $expanded149 = 0, $expanded15 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded153 = 0, $expanded154 = 0, $expanded155 = 0, $expanded156 = 0, $expanded157 = 0, $expanded158 = 0;
 var $expanded159 = 0, $expanded16 = 0, $expanded160 = 0, $expanded161 = 0, $expanded162 = 0, $expanded163 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded167 = 0, $expanded168 = 0, $expanded169 = 0, $expanded17 = 0, $expanded170 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded174 = 0, $expanded175 = 0, $expanded176 = 0;
 var $expanded177 = 0, $expanded178 = 0, $expanded179 = 0, $expanded18 = 0, $expanded180 = 0, $expanded181 = 0, $expanded182 = 0, $expanded183 = 0, $expanded184 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded188 = 0, $expanded189 = 0, $expanded19 = 0, $expanded190 = 0, $expanded191 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0;
 var $expanded195 = 0, $expanded196 = 0, $expanded197 = 0, $expanded198 = 0, $expanded199 = 0, $expanded2 = 0, $expanded20 = 0, $expanded200 = 0, $expanded201 = 0, $expanded202 = 0, $expanded203 = 0, $expanded204 = 0, $expanded205 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded209 = 0, $expanded21 = 0, $expanded210 = 0, $expanded211 = 0;
 var $expanded212 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded216 = 0, $expanded217 = 0, $expanded218 = 0, $expanded219 = 0, $expanded22 = 0, $expanded220 = 0, $expanded221 = 0, $expanded222 = 0, $expanded223 = 0, $expanded224 = 0, $expanded225 = 0, $expanded226 = 0, $expanded227 = 0, $expanded228 = 0, $expanded229 = 0, $expanded23 = 0;
 var $expanded230 = 0, $expanded231 = 0, $expanded232 = 0, $expanded233 = 0, $expanded234 = 0, $expanded235 = 0, $expanded236 = 0, $expanded237 = 0, $expanded238 = 0, $expanded239 = 0, $expanded24 = 0, $expanded240 = 0, $expanded241 = 0, $expanded242 = 0, $expanded243 = 0, $expanded244 = 0, $expanded245 = 0, $expanded246 = 0, $expanded247 = 0, $expanded248 = 0;
 var $expanded249 = 0, $expanded25 = 0, $expanded250 = 0, $expanded251 = 0, $expanded252 = 0, $expanded253 = 0, $expanded254 = 0, $expanded255 = 0, $expanded256 = 0, $expanded257 = 0, $expanded258 = 0, $expanded259 = 0, $expanded26 = 0, $expanded260 = 0, $expanded261 = 0, $expanded262 = 0, $expanded263 = 0, $expanded264 = 0, $expanded265 = 0, $expanded266 = 0;
 var $expanded267 = 0, $expanded268 = 0, $expanded269 = 0, $expanded27 = 0, $expanded270 = 0, $expanded271 = 0, $expanded272 = 0, $expanded273 = 0, $expanded274 = 0, $expanded275 = 0, $expanded276 = 0, $expanded277 = 0, $expanded278 = 0, $expanded279 = 0, $expanded28 = 0, $expanded280 = 0, $expanded281 = 0, $expanded282 = 0, $expanded283 = 0, $expanded284 = 0;
 var $expanded285 = 0, $expanded286 = 0, $expanded287 = 0, $expanded288 = 0, $expanded289 = 0, $expanded29 = 0, $expanded290 = 0, $expanded291 = 0, $expanded292 = 0, $expanded293 = 0, $expanded294 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0;
 var $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded5 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0;
 var $expanded56 = 0, $expanded57 = 0, $expanded58 = 0, $expanded59 = 0, $expanded6 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded7 = 0, $expanded70 = 0, $expanded71 = 0, $expanded72 = 0, $expanded73 = 0;
 var $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded79 = 0, $expanded8 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, $expanded86 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded9 = 0, $expanded90 = 0, $expanded91 = 0;
 var $expanded92 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded98 = 0, $expanded99 = 0, $gep = 0, $gep297 = 0, $gep299 = 0, $gep301 = 0, $gep303 = 0, $gep306 = 0, $gep308 = 0, $gep310 = 0, $gep312 = 0, $gep314 = 0, $gep316 = 0, $gep318 = 0;
 var $gep320 = 0, $gep322 = 0, $gep324 = 0, $gep326 = 0, $gep328 = 0, $gep330 = 0, $gep332 = 0, $gep334 = 0, $gep336 = 0, $gep338 = 0, $gep340 = 0, $gep342 = 0, $gep344 = 0, $gep347 = 0, $gep349 = 0, $gep351 = 0, $gep353 = 0, $gep355 = 0, $gep357 = 0, $gep359 = 0;
 var $gep361 = 0, $gep363 = 0, $gep365 = 0, $gep367 = 0, $gep369 = 0, $gep371 = 0, $gep373 = 0, $gep375 = 0, $gep377 = 0, $gep379 = 0, $gep381 = 0, $gep383 = 0, $gep385 = 0, $gep388 = 0, $gep390 = 0, $gep392 = 0, $gep394 = 0, $gep396 = 0, $gep398 = 0, $gep400 = 0;
 var $gep402 = 0, $gep404 = 0, $gep406 = 0, $gep408 = 0, $gep410 = 0, $gep412 = 0, $gep414 = 0, $gep416 = 0, $gep418 = 0, $gep420 = 0, $gep422 = 0, $gep424 = 0, $gep426 = 0, $gep428 = 0, $gep430 = 0, $gep432 = 0, $gep434 = 0, $gep437 = 0, $gep439 = 0, $gep441 = 0;
 var $gep443 = 0, $gep445 = 0, $gep447 = 0, $gep449 = 0, $gep451 = 0, $gep453 = 0, $gep455 = 0, $gep457 = 0, $gep459 = 0, $gep461 = 0, $gep463 = 0, $gep465 = 0, $gep467 = 0, $gep469 = 0, $gep471 = 0, $gep473 = 0, $gep475 = 0, $gep478 = 0, $gep480 = 0, $gep482 = 0;
 var $gep484 = 0, $gep486 = 0, $gep488 = 0, $gep490 = 0, $gep492 = 0, $gep494 = 0, $gep496 = 0, $gep498 = 0, $gep500 = 0, $gep502 = 0, $gep504 = 0, $gep506 = 0, $gep508 = 0, $gep510 = 0, $gep512 = 0, $gep514 = 0, $gep516 = 0, $gep519 = 0, $gep521 = 0, $gep523 = 0;
 var $gep525 = 0, $gep527 = 0, $gep529 = 0, $gep531 = 0, $gep533 = 0, $gep535 = 0, $gep537 = 0, $gep539 = 0, $gep541 = 0, $gep543 = 0, $gep545 = 0, $gep547 = 0, $gep549 = 0, $gep551 = 0, $gep553 = 0, $gep_int = 0, $gep_int295 = 0, $gep_int296 = 0, $gep_int298 = 0, $gep_int300 = 0;
 var $gep_int302 = 0, $gep_int304 = 0, $gep_int305 = 0, $gep_int307 = 0, $gep_int309 = 0, $gep_int311 = 0, $gep_int313 = 0, $gep_int315 = 0, $gep_int317 = 0, $gep_int319 = 0, $gep_int321 = 0, $gep_int323 = 0, $gep_int325 = 0, $gep_int327 = 0, $gep_int329 = 0, $gep_int331 = 0, $gep_int333 = 0, $gep_int335 = 0, $gep_int337 = 0, $gep_int339 = 0;
 var $gep_int341 = 0, $gep_int343 = 0, $gep_int345 = 0, $gep_int346 = 0, $gep_int348 = 0, $gep_int350 = 0, $gep_int352 = 0, $gep_int354 = 0, $gep_int356 = 0, $gep_int358 = 0, $gep_int360 = 0, $gep_int362 = 0, $gep_int364 = 0, $gep_int366 = 0, $gep_int368 = 0, $gep_int370 = 0, $gep_int372 = 0, $gep_int374 = 0, $gep_int376 = 0, $gep_int378 = 0;
 var $gep_int380 = 0, $gep_int382 = 0, $gep_int384 = 0, $gep_int386 = 0, $gep_int387 = 0, $gep_int389 = 0, $gep_int391 = 0, $gep_int393 = 0, $gep_int395 = 0, $gep_int397 = 0, $gep_int399 = 0, $gep_int401 = 0, $gep_int403 = 0, $gep_int405 = 0, $gep_int407 = 0, $gep_int409 = 0, $gep_int411 = 0, $gep_int413 = 0, $gep_int415 = 0, $gep_int417 = 0;
 var $gep_int419 = 0, $gep_int421 = 0, $gep_int423 = 0, $gep_int425 = 0, $gep_int427 = 0, $gep_int429 = 0, $gep_int431 = 0, $gep_int433 = 0, $gep_int435 = 0, $gep_int436 = 0, $gep_int438 = 0, $gep_int440 = 0, $gep_int442 = 0, $gep_int444 = 0, $gep_int446 = 0, $gep_int448 = 0, $gep_int450 = 0, $gep_int452 = 0, $gep_int454 = 0, $gep_int456 = 0;
 var $gep_int458 = 0, $gep_int460 = 0, $gep_int462 = 0, $gep_int464 = 0, $gep_int466 = 0, $gep_int468 = 0, $gep_int470 = 0, $gep_int472 = 0, $gep_int474 = 0, $gep_int476 = 0, $gep_int477 = 0, $gep_int479 = 0, $gep_int481 = 0, $gep_int483 = 0, $gep_int485 = 0, $gep_int487 = 0, $gep_int489 = 0, $gep_int491 = 0, $gep_int493 = 0, $gep_int495 = 0;
 var $gep_int497 = 0, $gep_int499 = 0, $gep_int501 = 0, $gep_int503 = 0, $gep_int505 = 0, $gep_int507 = 0, $gep_int509 = 0, $gep_int511 = 0, $gep_int513 = 0, $gep_int515 = 0, $gep_int517 = 0, $gep_int518 = 0, $gep_int520 = 0, $gep_int522 = 0, $gep_int524 = 0, $gep_int526 = 0, $gep_int528 = 0, $gep_int530 = 0, $gep_int532 = 0, $gep_int534 = 0;
 var $gep_int536 = 0, $gep_int538 = 0, $gep_int540 = 0, $gep_int542 = 0, $gep_int544 = 0, $gep_int546 = 0, $gep_int548 = 0, $gep_int550 = 0, $gep_int552 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $2 = sp + 8|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $expanded = _stdin;
 $5 = HEAP32[_stdin>>2]|0;
 $expanded1 = 4360;
 $expanded3 = 4416;
 $gep_int = 4416;
 $expanded2 = $gep_int;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($expanded1,$5,$expanded2);
 $expanded6 = 5792;
 $gep_int295 = 5792;
 $gep = (($gep_int295) + 12)|0;
 $expanded5 = $gep;
 $expanded4 = $expanded5;
 $expanded7 = 3648;
 HEAP32[3648>>2] = $expanded4;
 $expanded10 = 5792;
 $gep_int296 = 5792;
 $gep297 = (($gep_int296) + 32)|0;
 $expanded9 = $gep297;
 $expanded8 = $expanded9;
 $gep_int298 = 3648;
 $gep299 = (($gep_int298) + 8)|0;
 $expanded12 = $gep299;
 $expanded11 = $expanded12;
 HEAP32[$expanded12>>2] = $expanded8;
 $gep_int300 = 3648;
 $gep301 = (($gep_int300) + 4)|0;
 $expanded14 = $gep301;
 $expanded13 = $expanded14;
 HEAP32[$expanded14>>2] = 0;
 __THREW__ = 0;
 $gep_int302 = 3648;
 $gep303 = (($gep_int302) + 8)|0;
 $expanded16 = $gep303;
 $expanded15 = $expanded16;
 $gep_int304 = 4360;
 $expanded17 = $gep_int304;
 invoke_vii(58,$expanded15|0,$expanded17|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 if ($7) {
  $expanded18 = 69;
  $8 = ___cxa_find_matching_catch(-1,-1)|0;
  $9 = tempRet0;
  $gep_int305 = 3648;
  $gep306 = (($gep_int305) + 8)|0;
  $expanded20 = $gep306;
  $expanded19 = $expanded20;
  __ZNSt3__18ios_baseD2Ev($expanded19);
  ___resumeException($8|0);
  // unreachable
 }
 $gep_int307 = 3648;
 $gep308 = (($gep_int307) + 80)|0;
 $expanded22 = $gep308;
 $expanded21 = $expanded22;
 HEAP32[$expanded22>>2] = 0;
 $gep_int309 = 3648;
 $gep310 = (($gep_int309) + 84)|0;
 $expanded24 = $gep310;
 $expanded23 = $expanded24;
 HEAP32[$expanded24>>2] = -1;
 $expanded25 = _stdout;
 $10 = HEAP32[_stdout>>2]|0;
 $11 = $4;
 
 $expanded28 = 5664;
 $gep_int311 = 5664;
 $gep312 = (($gep_int311) + 8)|0;
 $expanded27 = $gep312;
 $expanded26 = $expanded27;
 $expanded29 = 4464;
 HEAP32[4464>>2] = $expanded26;
 $gep_int313 = 4464;
 $gep314 = (($gep_int313) + 4)|0;
 $expanded31 = $gep314;
 $expanded30 = $expanded31;
 __ZNSt3__16localeC2Ev($expanded30);
 $gep_int315 = 4464;
 $gep316 = (($gep_int315) + 8)|0;
 $expanded32 = $gep316;
 ;HEAP32[$expanded32+0>>2]=0|0;HEAP32[$expanded32+4>>2]=0|0;HEAP32[$expanded32+8>>2]=0|0;HEAP32[$expanded32+12>>2]=0|0;HEAP32[$expanded32+16>>2]=0|0;HEAP32[$expanded32+20>>2]=0|0;
 $expanded35 = 4968;
 $gep_int317 = 4968;
 $gep318 = (($gep_int317) + 8)|0;
 $expanded34 = $gep318;
 $expanded33 = $expanded34;
 $expanded36 = 4464;
 HEAP32[4464>>2] = $expanded33;
 $gep_int319 = 4464;
 $gep320 = (($gep_int319) + 32)|0;
 $expanded38 = $gep320;
 $expanded37 = $expanded38;
 HEAP32[$expanded38>>2] = $10;
 $gep_int321 = 4464;
 $gep322 = (($gep_int321) + 4)|0;
 $expanded40 = $gep322;
 $expanded39 = $expanded40;
 __ZNSt3__16localeC2ERKS0_($4,$expanded39);
 __THREW__ = 0;
 $expanded41 = 8544;
 $12 = invoke_iii(19,$4|0,$expanded41|0)|0;
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 
 if ($14) {
  $expanded42 = 69;
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  __ZNSt3__16localeD2Ev($4);
  $expanded45 = 5664;
  $gep_int323 = 5664;
  $gep324 = (($gep_int323) + 8)|0;
  $expanded44 = $gep324;
  $expanded43 = $expanded44;
  $expanded46 = 4464;
  HEAP32[4464>>2] = $expanded43;
  $gep_int325 = 4464;
  $gep326 = (($gep_int325) + 4)|0;
  $expanded48 = $gep326;
  $expanded47 = $expanded48;
  __ZNSt3__16localeD2Ev($expanded47);
  ___resumeException($15|0);
  // unreachable
 }
 $17 = $12;
 __ZNSt3__16localeD2Ev($4);
 $gep_int327 = 4464;
 $gep328 = (($gep_int327) + 36)|0;
 $expanded50 = $gep328;
 $expanded49 = $expanded50;
 HEAP32[$expanded50>>2] = $17;
 $expanded52 = 4416;
 $gep_int329 = 4416;
 $gep330 = (($gep_int329) + 8)|0;
 $expanded51 = $gep330;
 $gep_int331 = 4464;
 $gep332 = (($gep_int331) + 40)|0;
 $expanded54 = $gep332;
 $expanded53 = $expanded54;
 HEAP32[$expanded54>>2] = $expanded51;
 $18 = $12;
 $19 = HEAP32[$12>>2]|0;
 $gep_int333 = $19;
 $gep334 = (($gep_int333) + 28)|0;
 $20 = $gep334;
 $21 = HEAP32[$20>>2]|0;
 $22 = FUNCTION_TABLE_ii[$21 & 127]($17)|0;
 $23 = $22&1;
 $gep_int335 = 4464;
 $gep336 = (($gep_int335) + 44)|0;
 $expanded55 = $gep336;
 HEAP8[$expanded55] = $23;
 
 $expanded58 = 5872;
 $gep_int337 = 5872;
 $gep338 = (($gep_int337) + 12)|0;
 $expanded57 = $gep338;
 $expanded56 = $expanded57;
 $expanded59 = 3736;
 HEAP32[3736>>2] = $expanded56;
 $expanded62 = 5872;
 $gep_int339 = 5872;
 $gep340 = (($gep_int339) + 32)|0;
 $expanded61 = $gep340;
 $expanded60 = $expanded61;
 $gep_int341 = 3736;
 $gep342 = (($gep_int341) + 4)|0;
 $expanded64 = $gep342;
 $expanded63 = $expanded64;
 HEAP32[$expanded64>>2] = $expanded60;
 __THREW__ = 0;
 $gep_int343 = 3736;
 $gep344 = (($gep_int343) + 4)|0;
 $expanded66 = $gep344;
 $expanded65 = $expanded66;
 $gep_int345 = 4464;
 $expanded67 = $gep_int345;
 invoke_vii(58,$expanded65|0,$expanded67|0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 
 if ($25) {
  $expanded68 = 69;
  $26 = ___cxa_find_matching_catch(-1,-1)|0;
  $27 = tempRet0;
  $gep_int346 = 3736;
  $gep347 = (($gep_int346) + 4)|0;
  $expanded70 = $gep347;
  $expanded69 = $expanded70;
  __ZNSt3__18ios_baseD2Ev($expanded69);
  ___resumeException($26|0);
  // unreachable
 }
 $gep_int348 = 3736;
 $gep349 = (($gep_int348) + 76)|0;
 $expanded72 = $gep349;
 $expanded71 = $expanded72;
 HEAP32[$expanded72>>2] = 0;
 $gep_int350 = 3736;
 $gep351 = (($gep_int350) + 80)|0;
 $expanded74 = $gep351;
 $expanded73 = $expanded74;
 HEAP32[$expanded74>>2] = -1;
 $expanded75 = _stderr;
 $28 = HEAP32[_stderr>>2]|0;
 $29 = $3;
 
 $expanded78 = 5664;
 $gep_int352 = 5664;
 $gep353 = (($gep_int352) + 8)|0;
 $expanded77 = $gep353;
 $expanded76 = $expanded77;
 $expanded79 = 4512;
 HEAP32[4512>>2] = $expanded76;
 $gep_int354 = 4512;
 $gep355 = (($gep_int354) + 4)|0;
 $expanded81 = $gep355;
 $expanded80 = $expanded81;
 __ZNSt3__16localeC2Ev($expanded80);
 $gep_int356 = 4512;
 $gep357 = (($gep_int356) + 8)|0;
 $expanded82 = $gep357;
 ;HEAP32[$expanded82+0>>2]=0|0;HEAP32[$expanded82+4>>2]=0|0;HEAP32[$expanded82+8>>2]=0|0;HEAP32[$expanded82+12>>2]=0|0;HEAP32[$expanded82+16>>2]=0|0;HEAP32[$expanded82+20>>2]=0|0;
 $expanded85 = 4968;
 $gep_int358 = 4968;
 $gep359 = (($gep_int358) + 8)|0;
 $expanded84 = $gep359;
 $expanded83 = $expanded84;
 $expanded86 = 4512;
 HEAP32[4512>>2] = $expanded83;
 $gep_int360 = 4512;
 $gep361 = (($gep_int360) + 32)|0;
 $expanded88 = $gep361;
 $expanded87 = $expanded88;
 HEAP32[$expanded88>>2] = $28;
 $gep_int362 = 4512;
 $gep363 = (($gep_int362) + 4)|0;
 $expanded90 = $gep363;
 $expanded89 = $expanded90;
 __ZNSt3__16localeC2ERKS0_($3,$expanded89);
 __THREW__ = 0;
 $expanded91 = 8544;
 $30 = invoke_iii(19,$3|0,$expanded91|0)|0;
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 
 if ($32) {
  $expanded92 = 69;
  $33 = ___cxa_find_matching_catch(-1,-1)|0;
  $34 = tempRet0;
  __ZNSt3__16localeD2Ev($3);
  $expanded95 = 5664;
  $gep_int364 = 5664;
  $gep365 = (($gep_int364) + 8)|0;
  $expanded94 = $gep365;
  $expanded93 = $expanded94;
  $expanded96 = 4512;
  HEAP32[4512>>2] = $expanded93;
  $gep_int366 = 4512;
  $gep367 = (($gep_int366) + 4)|0;
  $expanded98 = $gep367;
  $expanded97 = $expanded98;
  __ZNSt3__16localeD2Ev($expanded97);
  ___resumeException($33|0);
  // unreachable
 }
 $35 = $30;
 __ZNSt3__16localeD2Ev($3);
 $gep_int368 = 4512;
 $gep369 = (($gep_int368) + 36)|0;
 $expanded100 = $gep369;
 $expanded99 = $expanded100;
 HEAP32[$expanded100>>2] = $35;
 $expanded102 = 4416;
 $gep_int370 = 4416;
 $gep371 = (($gep_int370) + 16)|0;
 $expanded101 = $gep371;
 $gep_int372 = 4512;
 $gep373 = (($gep_int372) + 40)|0;
 $expanded104 = $gep373;
 $expanded103 = $expanded104;
 HEAP32[$expanded104>>2] = $expanded101;
 $36 = $30;
 $37 = HEAP32[$30>>2]|0;
 $gep_int374 = $37;
 $gep375 = (($gep_int374) + 28)|0;
 $38 = $gep375;
 $39 = HEAP32[$38>>2]|0;
 $40 = FUNCTION_TABLE_ii[$39 & 127]($35)|0;
 $41 = $40&1;
 $gep_int376 = 4512;
 $gep377 = (($gep_int376) + 44)|0;
 $expanded105 = $gep377;
 HEAP8[$expanded105] = $41;
 
 $expanded108 = 5872;
 $gep_int378 = 5872;
 $gep379 = (($gep_int378) + 12)|0;
 $expanded107 = $gep379;
 $expanded106 = $expanded107;
 $expanded109 = 3824;
 HEAP32[3824>>2] = $expanded106;
 $expanded112 = 5872;
 $gep_int380 = 5872;
 $gep381 = (($gep_int380) + 32)|0;
 $expanded111 = $gep381;
 $expanded110 = $expanded111;
 $gep_int382 = 3824;
 $gep383 = (($gep_int382) + 4)|0;
 $expanded114 = $gep383;
 $expanded113 = $expanded114;
 HEAP32[$expanded114>>2] = $expanded110;
 __THREW__ = 0;
 $gep_int384 = 3824;
 $gep385 = (($gep_int384) + 4)|0;
 $expanded116 = $gep385;
 $expanded115 = $expanded116;
 $gep_int386 = 4512;
 $expanded117 = $gep_int386;
 invoke_vii(58,$expanded115|0,$expanded117|0);
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 
 if ($43) {
  $expanded118 = 69;
  $44 = ___cxa_find_matching_catch(-1,-1)|0;
  $45 = tempRet0;
  $gep_int387 = 3824;
  $gep388 = (($gep_int387) + 4)|0;
  $expanded120 = $gep388;
  $expanded119 = $expanded120;
  __ZNSt3__18ios_baseD2Ev($expanded119);
  ___resumeException($44|0);
  // unreachable
 }
 $gep_int389 = 3824;
 $gep390 = (($gep_int389) + 76)|0;
 $expanded122 = $gep390;
 $expanded121 = $expanded122;
 HEAP32[$expanded122>>2] = 0;
 $gep_int391 = 3824;
 $gep392 = (($gep_int391) + 80)|0;
 $expanded124 = $gep392;
 $expanded123 = $expanded124;
 HEAP32[$expanded124>>2] = -1;
 $expanded125 = 3824;
 $46 = HEAP32[3824>>2]|0;
 $gep_int393 = $46;
 $gep394 = (($gep_int393) + -12)|0;
 $47 = $gep394;
 $48 = $47;
 $49 = HEAP32[$47>>2]|0;
 $$sum = (($49) + 24)|0;
 $gep_int395 = 3824;
 $gep396 = (($gep_int395) + ($$sum))|0;
 $50 = $gep396;
 $51 = $50;
 $52 = HEAP32[$50>>2]|0;
 $expanded128 = 5872;
 $gep_int397 = 5872;
 $gep398 = (($gep_int397) + 12)|0;
 $expanded127 = $gep398;
 $expanded126 = $expanded127;
 $expanded129 = 3912;
 HEAP32[3912>>2] = $expanded126;
 $expanded132 = 5872;
 $gep_int399 = 5872;
 $gep400 = (($gep_int399) + 32)|0;
 $expanded131 = $gep400;
 $expanded130 = $expanded131;
 $gep_int401 = 3912;
 $gep402 = (($gep_int401) + 4)|0;
 $expanded134 = $gep402;
 $expanded133 = $expanded134;
 HEAP32[$expanded134>>2] = $expanded130;
 __THREW__ = 0;
 $gep_int403 = 3912;
 $gep404 = (($gep_int403) + 4)|0;
 $expanded136 = $gep404;
 $expanded135 = $expanded136;
 invoke_vii(58,$expanded135|0,$52|0);
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 
 if ($54) {
  $expanded137 = 69;
  $55 = ___cxa_find_matching_catch(-1,-1)|0;
  $56 = tempRet0;
  $gep_int405 = 3912;
  $gep406 = (($gep_int405) + 4)|0;
  $expanded139 = $gep406;
  $expanded138 = $expanded139;
  __ZNSt3__18ios_baseD2Ev($expanded138);
  ___resumeException($55|0);
  // unreachable
 }
 $gep_int407 = 3912;
 $gep408 = (($gep_int407) + 76)|0;
 $expanded141 = $gep408;
 $expanded140 = $expanded141;
 HEAP32[$expanded141>>2] = 0;
 $gep_int409 = 3912;
 $gep410 = (($gep_int409) + 80)|0;
 $expanded143 = $gep410;
 $expanded142 = $expanded143;
 HEAP32[$expanded143>>2] = -1;
 $expanded144 = 3648;
 $57 = HEAP32[3648>>2]|0;
 $gep_int411 = $57;
 $gep412 = (($gep_int411) + -12)|0;
 $58 = $gep412;
 $59 = $58;
 $60 = HEAP32[$58>>2]|0;
 $$sum7 = (($60) + 72)|0;
 $gep_int413 = 3648;
 $gep414 = (($gep_int413) + ($$sum7))|0;
 $61 = $gep414;
 $62 = $61;
 $expanded145 = 3736;
 HEAP32[$61>>2] = $expanded145;
 $expanded146 = 3824;
 $63 = HEAP32[3824>>2]|0;
 $gep_int415 = $63;
 $gep416 = (($gep_int415) + -12)|0;
 $64 = $gep416;
 $65 = $64;
 $66 = HEAP32[$64>>2]|0;
 $$sum8 = (($66) + 4)|0;
 $gep_int417 = 3824;
 $gep418 = (($gep_int417) + ($$sum8))|0;
 $67 = $gep418;
 $68 = $67;
 $69 = HEAP32[$67>>2]|0;
 $70 = $69 | 8192;
 HEAP32[$67>>2] = $70;
 $expanded147 = 3824;
 $71 = HEAP32[3824>>2]|0;
 $gep_int419 = $71;
 $gep420 = (($gep_int419) + -12)|0;
 $72 = $gep420;
 $73 = $72;
 $74 = HEAP32[$72>>2]|0;
 $$sum9 = (($74) + 72)|0;
 $gep_int421 = 3824;
 $gep422 = (($gep_int421) + ($$sum9))|0;
 $75 = $gep422;
 $76 = $75;
 $expanded148 = 3736;
 HEAP32[$75>>2] = $expanded148;
 $expanded149 = 4560;
 $expanded151 = 4416;
 $gep_int423 = 4416;
 $gep424 = (($gep_int423) + 24)|0;
 $expanded150 = $gep424;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($expanded149,$5,$expanded150);
 $expanded154 = 5832;
 $gep_int425 = 5832;
 $gep426 = (($gep_int425) + 12)|0;
 $expanded153 = $gep426;
 $expanded152 = $expanded153;
 $expanded155 = 4000;
 HEAP32[4000>>2] = $expanded152;
 $expanded158 = 5832;
 $gep_int427 = 5832;
 $gep428 = (($gep_int427) + 32)|0;
 $expanded157 = $gep428;
 $expanded156 = $expanded157;
 $gep_int429 = 4000;
 $gep430 = (($gep_int429) + 8)|0;
 $expanded160 = $gep430;
 $expanded159 = $expanded160;
 HEAP32[$expanded160>>2] = $expanded156;
 $gep_int431 = 4000;
 $gep432 = (($gep_int431) + 4)|0;
 $expanded162 = $gep432;
 $expanded161 = $expanded162;
 HEAP32[$expanded162>>2] = 0;
 __THREW__ = 0;
 $gep_int433 = 4000;
 $gep434 = (($gep_int433) + 8)|0;
 $expanded164 = $gep434;
 $expanded163 = $expanded164;
 $gep_int435 = 4560;
 $expanded165 = $gep_int435;
 invoke_vii(58,$expanded163|0,$expanded165|0);
 $77 = __THREW__; __THREW__ = 0;
 $78 = $77&1;
 
 if ($78) {
  $expanded166 = 69;
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $gep_int436 = 4000;
  $gep437 = (($gep_int436) + 8)|0;
  $expanded168 = $gep437;
  $expanded167 = $expanded168;
  __ZNSt3__18ios_baseD2Ev($expanded167);
  ___resumeException($79|0);
  // unreachable
 }
 $gep_int438 = 4000;
 $gep439 = (($gep_int438) + 80)|0;
 $expanded170 = $gep439;
 $expanded169 = $expanded170;
 HEAP32[$expanded170>>2] = 0;
 $gep_int440 = 4000;
 $gep441 = (($gep_int440) + 84)|0;
 $expanded172 = $gep441;
 $expanded171 = $expanded172;
 HEAP32[$expanded172>>2] = -1;
 $81 = $2;
 
 $expanded175 = 5728;
 $gep_int442 = 5728;
 $gep443 = (($gep_int442) + 8)|0;
 $expanded174 = $gep443;
 $expanded173 = $expanded174;
 $expanded176 = 4616;
 HEAP32[4616>>2] = $expanded173;
 $gep_int444 = 4616;
 $gep445 = (($gep_int444) + 4)|0;
 $expanded178 = $gep445;
 $expanded177 = $expanded178;
 __ZNSt3__16localeC2Ev($expanded177);
 $gep_int446 = 4616;
 $gep447 = (($gep_int446) + 8)|0;
 $expanded179 = $gep447;
 ;HEAP32[$expanded179+0>>2]=0|0;HEAP32[$expanded179+4>>2]=0|0;HEAP32[$expanded179+8>>2]=0|0;HEAP32[$expanded179+12>>2]=0|0;HEAP32[$expanded179+16>>2]=0|0;HEAP32[$expanded179+20>>2]=0|0;
 $expanded182 = 4712;
 $gep_int448 = 4712;
 $gep449 = (($gep_int448) + 8)|0;
 $expanded181 = $gep449;
 $expanded180 = $expanded181;
 $expanded183 = 4616;
 HEAP32[4616>>2] = $expanded180;
 $gep_int450 = 4616;
 $gep451 = (($gep_int450) + 32)|0;
 $expanded185 = $gep451;
 $expanded184 = $expanded185;
 HEAP32[$expanded185>>2] = $10;
 $gep_int452 = 4616;
 $gep453 = (($gep_int452) + 4)|0;
 $expanded187 = $gep453;
 $expanded186 = $expanded187;
 __ZNSt3__16localeC2ERKS0_($2,$expanded186);
 __THREW__ = 0;
 $expanded188 = 8552;
 $82 = invoke_iii(19,$2|0,$expanded188|0)|0;
 $83 = __THREW__; __THREW__ = 0;
 $84 = $83&1;
 
 if ($84) {
  $expanded189 = 69;
  $85 = ___cxa_find_matching_catch(-1,-1)|0;
  $86 = tempRet0;
  __ZNSt3__16localeD2Ev($2);
  $expanded192 = 5728;
  $gep_int454 = 5728;
  $gep455 = (($gep_int454) + 8)|0;
  $expanded191 = $gep455;
  $expanded190 = $expanded191;
  $expanded193 = 4616;
  HEAP32[4616>>2] = $expanded190;
  $gep_int456 = 4616;
  $gep457 = (($gep_int456) + 4)|0;
  $expanded195 = $gep457;
  $expanded194 = $expanded195;
  __ZNSt3__16localeD2Ev($expanded194);
  ___resumeException($85|0);
  // unreachable
 }
 $87 = $82;
 __ZNSt3__16localeD2Ev($2);
 $gep_int458 = 4616;
 $gep459 = (($gep_int458) + 36)|0;
 $expanded197 = $gep459;
 $expanded196 = $expanded197;
 HEAP32[$expanded197>>2] = $87;
 $expanded199 = 4416;
 $gep_int460 = 4416;
 $gep461 = (($gep_int460) + 32)|0;
 $expanded198 = $gep461;
 $gep_int462 = 4616;
 $gep463 = (($gep_int462) + 40)|0;
 $expanded201 = $gep463;
 $expanded200 = $expanded201;
 HEAP32[$expanded201>>2] = $expanded198;
 $88 = $82;
 $89 = HEAP32[$82>>2]|0;
 $gep_int464 = $89;
 $gep465 = (($gep_int464) + 28)|0;
 $90 = $gep465;
 $91 = HEAP32[$90>>2]|0;
 $92 = FUNCTION_TABLE_ii[$91 & 127]($87)|0;
 $93 = $92&1;
 $gep_int466 = 4616;
 $gep467 = (($gep_int466) + 44)|0;
 $expanded202 = $gep467;
 HEAP8[$expanded202] = $93;
 
 $expanded205 = 5912;
 $gep_int468 = 5912;
 $gep469 = (($gep_int468) + 12)|0;
 $expanded204 = $gep469;
 $expanded203 = $expanded204;
 $expanded206 = 4088;
 HEAP32[4088>>2] = $expanded203;
 $expanded209 = 5912;
 $gep_int470 = 5912;
 $gep471 = (($gep_int470) + 32)|0;
 $expanded208 = $gep471;
 $expanded207 = $expanded208;
 $gep_int472 = 4088;
 $gep473 = (($gep_int472) + 4)|0;
 $expanded211 = $gep473;
 $expanded210 = $expanded211;
 HEAP32[$expanded211>>2] = $expanded207;
 __THREW__ = 0;
 $gep_int474 = 4088;
 $gep475 = (($gep_int474) + 4)|0;
 $expanded213 = $gep475;
 $expanded212 = $expanded213;
 $gep_int476 = 4616;
 $expanded214 = $gep_int476;
 invoke_vii(58,$expanded212|0,$expanded214|0);
 $94 = __THREW__; __THREW__ = 0;
 $95 = $94&1;
 
 if ($95) {
  $expanded215 = 69;
  $96 = ___cxa_find_matching_catch(-1,-1)|0;
  $97 = tempRet0;
  $gep_int477 = 4088;
  $gep478 = (($gep_int477) + 4)|0;
  $expanded217 = $gep478;
  $expanded216 = $expanded217;
  __ZNSt3__18ios_baseD2Ev($expanded216);
  ___resumeException($96|0);
  // unreachable
 }
 $gep_int479 = 4088;
 $gep480 = (($gep_int479) + 76)|0;
 $expanded219 = $gep480;
 $expanded218 = $expanded219;
 HEAP32[$expanded219>>2] = 0;
 $gep_int481 = 4088;
 $gep482 = (($gep_int481) + 80)|0;
 $expanded221 = $gep482;
 $expanded220 = $expanded221;
 HEAP32[$expanded221>>2] = -1;
 $98 = $1;
 
 $expanded224 = 5728;
 $gep_int483 = 5728;
 $gep484 = (($gep_int483) + 8)|0;
 $expanded223 = $gep484;
 $expanded222 = $expanded223;
 $expanded225 = 4664;
 HEAP32[4664>>2] = $expanded222;
 $gep_int485 = 4664;
 $gep486 = (($gep_int485) + 4)|0;
 $expanded227 = $gep486;
 $expanded226 = $expanded227;
 __ZNSt3__16localeC2Ev($expanded226);
 $gep_int487 = 4664;
 $gep488 = (($gep_int487) + 8)|0;
 $expanded228 = $gep488;
 ;HEAP32[$expanded228+0>>2]=0|0;HEAP32[$expanded228+4>>2]=0|0;HEAP32[$expanded228+8>>2]=0|0;HEAP32[$expanded228+12>>2]=0|0;HEAP32[$expanded228+16>>2]=0|0;HEAP32[$expanded228+20>>2]=0|0;
 $expanded231 = 4712;
 $gep_int489 = 4712;
 $gep490 = (($gep_int489) + 8)|0;
 $expanded230 = $gep490;
 $expanded229 = $expanded230;
 $expanded232 = 4664;
 HEAP32[4664>>2] = $expanded229;
 $gep_int491 = 4664;
 $gep492 = (($gep_int491) + 32)|0;
 $expanded234 = $gep492;
 $expanded233 = $expanded234;
 HEAP32[$expanded234>>2] = $28;
 $gep_int493 = 4664;
 $gep494 = (($gep_int493) + 4)|0;
 $expanded236 = $gep494;
 $expanded235 = $expanded236;
 __ZNSt3__16localeC2ERKS0_($1,$expanded235);
 __THREW__ = 0;
 $expanded237 = 8552;
 $99 = invoke_iii(19,$1|0,$expanded237|0)|0;
 $100 = __THREW__; __THREW__ = 0;
 $101 = $100&1;
 
 if ($101) {
  $expanded238 = 69;
  $102 = ___cxa_find_matching_catch(-1,-1)|0;
  $103 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  $expanded241 = 5728;
  $gep_int495 = 5728;
  $gep496 = (($gep_int495) + 8)|0;
  $expanded240 = $gep496;
  $expanded239 = $expanded240;
  $expanded242 = 4664;
  HEAP32[4664>>2] = $expanded239;
  $gep_int497 = 4664;
  $gep498 = (($gep_int497) + 4)|0;
  $expanded244 = $gep498;
  $expanded243 = $expanded244;
  __ZNSt3__16localeD2Ev($expanded243);
  ___resumeException($102|0);
  // unreachable
 }
 $104 = $99;
 __ZNSt3__16localeD2Ev($1);
 $gep_int499 = 4664;
 $gep500 = (($gep_int499) + 36)|0;
 $expanded246 = $gep500;
 $expanded245 = $expanded246;
 HEAP32[$expanded246>>2] = $104;
 $expanded248 = 4416;
 $gep_int501 = 4416;
 $gep502 = (($gep_int501) + 40)|0;
 $expanded247 = $gep502;
 $gep_int503 = 4664;
 $gep504 = (($gep_int503) + 40)|0;
 $expanded250 = $gep504;
 $expanded249 = $expanded250;
 HEAP32[$expanded250>>2] = $expanded247;
 $105 = $99;
 $106 = HEAP32[$99>>2]|0;
 $gep_int505 = $106;
 $gep506 = (($gep_int505) + 28)|0;
 $107 = $gep506;
 $108 = HEAP32[$107>>2]|0;
 $109 = FUNCTION_TABLE_ii[$108 & 127]($104)|0;
 $110 = $109&1;
 $gep_int507 = 4664;
 $gep508 = (($gep_int507) + 44)|0;
 $expanded251 = $gep508;
 HEAP8[$expanded251] = $110;
 
 $expanded254 = 5912;
 $gep_int509 = 5912;
 $gep510 = (($gep_int509) + 12)|0;
 $expanded253 = $gep510;
 $expanded252 = $expanded253;
 $expanded255 = 4176;
 HEAP32[4176>>2] = $expanded252;
 $expanded258 = 5912;
 $gep_int511 = 5912;
 $gep512 = (($gep_int511) + 32)|0;
 $expanded257 = $gep512;
 $expanded256 = $expanded257;
 $gep_int513 = 4176;
 $gep514 = (($gep_int513) + 4)|0;
 $expanded260 = $gep514;
 $expanded259 = $expanded260;
 HEAP32[$expanded260>>2] = $expanded256;
 __THREW__ = 0;
 $gep_int515 = 4176;
 $gep516 = (($gep_int515) + 4)|0;
 $expanded262 = $gep516;
 $expanded261 = $expanded262;
 $gep_int517 = 4664;
 $expanded263 = $gep_int517;
 invoke_vii(58,$expanded261|0,$expanded263|0);
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 
 if ($112) {
  $expanded264 = 69;
  $113 = ___cxa_find_matching_catch(-1,-1)|0;
  $114 = tempRet0;
  $gep_int518 = 4176;
  $gep519 = (($gep_int518) + 4)|0;
  $expanded266 = $gep519;
  $expanded265 = $expanded266;
  __ZNSt3__18ios_baseD2Ev($expanded265);
  ___resumeException($113|0);
  // unreachable
 }
 $gep_int520 = 4176;
 $gep521 = (($gep_int520) + 76)|0;
 $expanded268 = $gep521;
 $expanded267 = $expanded268;
 HEAP32[$expanded268>>2] = 0;
 $gep_int522 = 4176;
 $gep523 = (($gep_int522) + 80)|0;
 $expanded270 = $gep523;
 $expanded269 = $expanded270;
 HEAP32[$expanded270>>2] = -1;
 $expanded271 = 4176;
 $115 = HEAP32[4176>>2]|0;
 $gep_int524 = $115;
 $gep525 = (($gep_int524) + -12)|0;
 $116 = $gep525;
 $117 = $116;
 $118 = HEAP32[$116>>2]|0;
 $$sum10 = (($118) + 24)|0;
 $gep_int526 = 4176;
 $gep527 = (($gep_int526) + ($$sum10))|0;
 $119 = $gep527;
 $120 = $119;
 $121 = HEAP32[$119>>2]|0;
 $expanded274 = 5912;
 $gep_int528 = 5912;
 $gep529 = (($gep_int528) + 12)|0;
 $expanded273 = $gep529;
 $expanded272 = $expanded273;
 $expanded275 = 4264;
 HEAP32[4264>>2] = $expanded272;
 $expanded278 = 5912;
 $gep_int530 = 5912;
 $gep531 = (($gep_int530) + 32)|0;
 $expanded277 = $gep531;
 $expanded276 = $expanded277;
 $gep_int532 = 4264;
 $gep533 = (($gep_int532) + 4)|0;
 $expanded280 = $gep533;
 $expanded279 = $expanded280;
 HEAP32[$expanded280>>2] = $expanded276;
 __THREW__ = 0;
 $gep_int534 = 4264;
 $gep535 = (($gep_int534) + 4)|0;
 $expanded282 = $gep535;
 $expanded281 = $expanded282;
 invoke_vii(58,$expanded281|0,$121|0);
 $122 = __THREW__; __THREW__ = 0;
 $123 = $122&1;
 
 if ($123) {
  $expanded283 = 69;
  $124 = ___cxa_find_matching_catch(-1,-1)|0;
  $125 = tempRet0;
  $gep_int536 = 4264;
  $gep537 = (($gep_int536) + 4)|0;
  $expanded285 = $gep537;
  $expanded284 = $expanded285;
  __ZNSt3__18ios_baseD2Ev($expanded284);
  ___resumeException($124|0);
  // unreachable
 } else {
  $gep_int538 = 4264;
  $gep539 = (($gep_int538) + 76)|0;
  $expanded287 = $gep539;
  $expanded286 = $expanded287;
  HEAP32[$expanded287>>2] = 0;
  $gep_int540 = 4264;
  $gep541 = (($gep_int540) + 80)|0;
  $expanded289 = $gep541;
  $expanded288 = $expanded289;
  HEAP32[$expanded289>>2] = -1;
  $expanded290 = 4000;
  $126 = HEAP32[4000>>2]|0;
  $gep_int542 = $126;
  $gep543 = (($gep_int542) + -12)|0;
  $127 = $gep543;
  $128 = $127;
  $129 = HEAP32[$127>>2]|0;
  $$sum11 = (($129) + 72)|0;
  $gep_int544 = 4000;
  $gep545 = (($gep_int544) + ($$sum11))|0;
  $130 = $gep545;
  $131 = $130;
  $expanded291 = 4088;
  HEAP32[$130>>2] = $expanded291;
  $expanded292 = 4176;
  $132 = HEAP32[4176>>2]|0;
  $gep_int546 = $132;
  $gep547 = (($gep_int546) + -12)|0;
  $133 = $gep547;
  $134 = $133;
  $135 = HEAP32[$133>>2]|0;
  $$sum12 = (($135) + 4)|0;
  $gep_int548 = 4176;
  $gep549 = (($gep_int548) + ($$sum12))|0;
  $136 = $gep549;
  $137 = $136;
  $138 = HEAP32[$136>>2]|0;
  $139 = $138 | 8192;
  HEAP32[$136>>2] = $139;
  $expanded293 = 4176;
  $140 = HEAP32[4176>>2]|0;
  $gep_int550 = $140;
  $gep551 = (($gep_int550) + -12)|0;
  $141 = $gep551;
  $142 = $141;
  $143 = HEAP32[$141>>2]|0;
  $$sum13 = (($143) + 72)|0;
  $gep_int552 = 4176;
  $gep553 = (($gep_int552) + ($$sum13))|0;
  $144 = $gep553;
  $145 = $144;
  $expanded294 = 4088;
  HEAP32[$144>>2] = $expanded294;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, label = 0, sp = 0, u$1 = 0, u$10 = 0, u$13 = 0, u$4 = 0;
 var u$7 = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $expanded = 3736;
 u$1 = invoke_ii(90,$expanded|0)|0;
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 
 do {
  if (!($2)) {
   __THREW__ = 0;
   $expanded1 = 3912;
   u$4 = invoke_ii(90,$expanded1|0)|0;
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   
   if ($4) {
    break;
   }
   __THREW__ = 0;
   $expanded2 = 4088;
   u$7 = invoke_ii(91,$expanded2|0)|0;
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   
   if ($6) {
    break;
   }
   __THREW__ = 0;
   $expanded3 = 4264;
   u$10 = invoke_ii(91,$expanded3|0)|0;
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   
   if ($8) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded4 = 69;
 $9 = ___cxa_find_matching_catch(-1,-1,0)|0;
 u$13 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5728;
 $gep_int3 = 5728;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5728;
 $gep_int3 = 5728;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep_int = 0;
 var $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP32[$this>>2]|0;
 $gep_int = $2;
 $gep = (($gep_int) + 24)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 u$0 = FUNCTION_TABLE_ii[$4 & 127]($this)|0;
 $expanded = 8552;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc,$expanded)|0;
 $6 = $5;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 36)|0;
 $7 = $gep2;
 HEAP32[$7>>2] = $6;
 $8 = $5;
 $9 = HEAP32[$5>>2]|0;
 $gep_int3 = $9;
 $gep4 = (($gep_int3) + 28)|0;
 $10 = $gep4;
 $11 = HEAP32[$10>>2]|0;
 $12 = FUNCTION_TABLE_ii[$11 & 127]($6)|0;
 $gep_int5 = $this;
 $gep6 = (($gep_int5) + 44)|0;
 $13 = $gep6;
 $14 = $12&1;
 HEAP8[$13] = $14;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__extbe = 0, $__extbuf = 0, $gep = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp;
 $__extbe = sp + 8|0;
 $gep_int = $this;
 $gep = (($gep_int) + 36)|0;
 $1 = $gep;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 40)|0;
 $2 = $gep2;
 $gep_int3 = $__extbuf;
 $3 = $gep_int3;
 $gep_int4 = $__extbuf;
 $gep5 = (($gep_int4) + 8)|0;
 $4 = $gep5;
 $5 = $__extbuf;
 $gep_int6 = $this;
 $gep7 = (($gep_int6) + 32)|0;
 $6 = $gep7;
 
 while(1) {
  $7 = HEAP32[$1>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = $7;
  $10 = HEAP32[$7>>2]|0;
  $gep_int8 = $10;
  $gep9 = (($gep_int8) + 20)|0;
  $11 = $gep9;
  $12 = HEAP32[$11>>2]|0;
  $13 = FUNCTION_TABLE_iiiiii[$12 & 31]($7,$8,$3,$4,$__extbe)|0;
  $14 = HEAP32[$__extbe>>2]|0;
  $15 = $14;
  $16 = (($15) - ($5))|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = _fwrite($3|0,1,$16|0,$17|0)|0;
  $19 = ($18|0)==($16|0);
  
  if (!($19)) {
   $$0 = -1;
   label = 5;
   break;
  }
  
  if ((($13|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($13|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $20 = HEAP32[$6>>2]|0;
  $21 = _fflush($20|0)|0;
  $not$ = ($21|0)!=(0);
  $$ = $not$ << 31 >> 31;
  
  $$0 = $$;
  
  STACKTOP = sp;return $$0|0;
 }
 else if ((label|0) == 5) {
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$03 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 44)|0;
 $1 = $gep;
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)==(0);
 
 if (!($3)) {
  $6 = $__s;
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 32)|0;
  $7 = $gep2;
  $8 = HEAP32[$7>>2]|0;
  $9 = _fwrite($6|0,4,$__n|0,$8|0)|0;
  
  $$0 = $9;
  
  STACKTOP = sp;return $$0|0;
 }
 $4 = $this;
 $5 = ($__n|0)>(0);
 
 if ($5) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 while(1) {
  
  
  $10 = HEAP32[$this>>2]|0;
  $gep_int3 = $10;
  $gep4 = (($gep_int3) + 52)|0;
  $11 = $gep4;
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$$012>>2]|0;
  $14 = FUNCTION_TABLE_iii[$12 & 63]($this,$13)|0;
  $15 = ($14|0)==(-1);
  
  if ($15) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $16 = (($__i$03) + 1)|0;
  $gep_int5 = $$012;
  $gep6 = (($gep_int5) + 4)|0;
  $17 = $gep6;
  $18 = ($16|0)<($__n|0);
  
  if ($18) {
   $$012 = $17;$__i$03 = $16;
  } else {
   $$0 = $16;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int3 = 0;
 var $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__1buf = sp + 8|0;
 $__extbe = sp + 16|0;
 $__e = sp + 24|0;
 $1 = ($__c|0)==(-1);
 
 L1: do {
  if (!($1)) {
   HEAP32[$__1buf>>2] = $__c;
   $gep_int = $this;
   $gep = (($gep_int) + 44)|0;
   $2 = $gep;
   $3 = HEAP8[$2]|0;
   $4 = ($3<<24>>24)==(0);
   
   if (!($4)) {
    $5 = $__1buf;
    $gep_int1 = $this;
    $gep2 = (($gep_int1) + 32)|0;
    $6 = $gep2;
    $7 = HEAP32[$6>>2]|0;
    $8 = _fwrite($5|0,4,1,$7|0)|0;
    $9 = ($8|0)==(1);
    
    if ($9) {
     break;
    } else {
     $$0 = -1;
    }
    
    STACKTOP = sp;return $$0|0;
   }
   $gep_int3 = $__extbuf;
   $10 = $gep_int3;
   HEAP32[$__extbe>>2] = $10;
   $gep_int4 = $__1buf;
   $gep5 = (($gep_int4) + 4)|0;
   $11 = $gep5;
   $gep_int6 = $this;
   $gep7 = (($gep_int6) + 36)|0;
   $12 = $gep7;
   $gep_int8 = $this;
   $gep9 = (($gep_int8) + 40)|0;
   $13 = $gep9;
   $gep_int10 = $__extbuf;
   $gep11 = (($gep_int10) + 8)|0;
   $14 = $gep11;
   $15 = $__extbuf;
   $gep_int12 = $this;
   $gep13 = (($gep_int12) + 32)|0;
   $16 = $gep13;
   
   $pbase$0 = $__1buf;
   while(1) {
    
    $17 = HEAP32[$12>>2]|0;
    $18 = HEAP32[$13>>2]|0;
    $19 = $17;
    $20 = HEAP32[$17>>2]|0;
    $gep_int14 = $20;
    $gep15 = (($gep_int14) + 12)|0;
    $21 = $gep15;
    $22 = HEAP32[$21>>2]|0;
    $23 = FUNCTION_TABLE_iiiiiiiii[$22 & 15]($17,$18,$pbase$0,$11,$__e,$10,$14,$__extbe)|0;
    $24 = HEAP32[$__e>>2]|0;
    $25 = ($24|0)==($pbase$0|0);
    
    if ($25) {
     $$0 = -1;
     label = 12;
     break;
    }
    $26 = ($23|0)==(3);
    
    if ($26) {
     label = 7;
     break;
    }
    $31 = ($23|0)==(1);
    $32 = ($23>>>0)<(2);
    
    if (!($32)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $33 = HEAP32[$__extbe>>2]|0;
    $34 = $33;
    $35 = (($34) - ($15))|0;
    $36 = HEAP32[$16>>2]|0;
    $37 = _fwrite($10|0,1,$35|0,$36|0)|0;
    $38 = ($37|0)==($35|0);
    
    if (!($38)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $39 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $31 ? $39 : $pbase$0;
    
    if ($31) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $27 = $pbase$0;
    $28 = HEAP32[$16>>2]|0;
    $29 = _fwrite($27|0,1,1,$28|0)|0;
    $30 = ($29|0)==(1);
    
    if ($30) {
     break;
    } else {
     $$0 = -1;
    }
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 12) {
    
    STACKTOP = sp;return $$0|0;
   }
  }
 } while(0);
 $$__c$i = $1 ? 0 : $__c;
 
 $$0 = $$__c$i;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded2 = 0, $expanded3 = 0;
 var $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep39 = 0;
 var $gep_int = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = sp;
 $gep_int = $this;
 $2 = $gep_int;
 $expanded2 = 5728;
 $gep_int12 = 5728;
 $gep = (($gep_int12) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$2>>2] = $expanded;
 $gep_int13 = $this;
 $gep14 = (($gep_int13) + 4)|0;
 $3 = $gep14;
 __ZNSt3__16localeC2Ev($3);
 $gep_int15 = $this;
 $gep16 = (($gep_int15) + 8)|0;
 $4 = $gep16;
 $5 = $4;
 ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;
 $expanded5 = 4824;
 $gep_int17 = 4824;
 $gep18 = (($gep_int17) + 8)|0;
 $expanded4 = $gep18;
 $expanded3 = $expanded4;
 HEAP32[$2>>2] = $expanded3;
 $gep_int19 = $this;
 $gep20 = (($gep_int19) + 32)|0;
 $6 = $gep20;
 HEAP32[$6>>2] = $__fp;
 $gep_int21 = $this;
 $gep22 = (($gep_int21) + 40)|0;
 $7 = $gep22;
 HEAP32[$7>>2] = $__st;
 $gep_int23 = $this;
 $gep24 = (($gep_int23) + 48)|0;
 $8 = $gep24;
 HEAP32[$8>>2] = -1;
 $gep_int25 = $this;
 $gep26 = (($gep_int25) + 52)|0;
 $9 = $gep26;
 HEAP8[$9] = 0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 __THREW__ = 0;
 $expanded6 = 8552;
 $10 = invoke_iii(19,$1|0,$expanded6|0)|0;
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 
 if ($12) {
  $expanded8 = 69;
  $33 = ___cxa_find_matching_catch(-1,-1)|0;
  $34 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  $expanded11 = 5728;
  $gep_int38 = 5728;
  $gep39 = (($gep_int38) + 8)|0;
  $expanded10 = $gep39;
  $expanded9 = $expanded10;
  HEAP32[$2>>2] = $expanded9;
  __ZNSt3__16localeD2Ev($3);
  ___resumeException($33|0);
  // unreachable
 }
 $13 = $10;
 $gep_int27 = $this;
 $gep28 = (($gep_int27) + 36)|0;
 $14 = $gep28;
 HEAP32[$14>>2] = $13;
 $15 = $10;
 $16 = HEAP32[$10>>2]|0;
 $gep_int29 = $16;
 $gep30 = (($gep_int29) + 24)|0;
 $17 = $gep30;
 $18 = HEAP32[$17>>2]|0;
 $19 = FUNCTION_TABLE_ii[$18 & 127]($13)|0;
 $gep_int31 = $this;
 $gep32 = (($gep_int31) + 44)|0;
 $20 = $gep32;
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$14>>2]|0;
 $22 = $21;
 $23 = HEAP32[$21>>2]|0;
 $gep_int33 = $23;
 $gep34 = (($gep_int33) + 28)|0;
 $24 = $gep34;
 $25 = HEAP32[$24>>2]|0;
 $26 = FUNCTION_TABLE_ii[$25 & 127]($21)|0;
 $gep_int35 = $this;
 $gep36 = (($gep_int35) + 53)|0;
 $27 = $gep36;
 $28 = $26&1;
 HEAP8[$27] = $28;
 $29 = HEAP32[$20>>2]|0;
 $30 = ($29|0)>(8);
 
 if (!($30)) {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 $gep_int37 = 4928;
 $expanded7 = $gep_int37;
 invoke_vi(175,$expanded7|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 
 if ($32) {
  $expanded8 = 69;
  $33 = ___cxa_find_matching_catch(-1,-1)|0;
  $34 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  $expanded11 = 5728;
  $gep_int38 = 5728;
  $gep39 = (($gep_int38) + 8)|0;
  $expanded10 = $gep39;
  $expanded9 = $expanded10;
  HEAP32[$2>>2] = $expanded9;
  __ZNSt3__16localeD2Ev($3);
  ___resumeException($33|0);
  // unreachable
 } else {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5728;
 $gep_int3 = 5728;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5728;
 $gep_int3 = 5728;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0;
 var $expanded1 = 0, $gep = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded = 8552;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc,$expanded)|0;
 $2 = $1;
 $gep_int = $this;
 $gep = (($gep_int) + 36)|0;
 $3 = $gep;
 HEAP32[$3>>2] = $2;
 $4 = $1;
 $5 = HEAP32[$1>>2]|0;
 $gep_int2 = $5;
 $gep3 = (($gep_int2) + 24)|0;
 $6 = $gep3;
 $7 = HEAP32[$6>>2]|0;
 $8 = FUNCTION_TABLE_ii[$7 & 127]($2)|0;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 44)|0;
 $9 = $gep5;
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$3>>2]|0;
 $11 = $10;
 $12 = HEAP32[$10>>2]|0;
 $gep_int6 = $12;
 $gep7 = (($gep_int6) + 28)|0;
 $13 = $gep7;
 $14 = HEAP32[$13>>2]|0;
 $15 = FUNCTION_TABLE_ii[$14 & 127]($10)|0;
 $gep_int8 = $this;
 $gep9 = (($gep_int8) + 53)|0;
 $16 = $gep9;
 $17 = $15&1;
 HEAP8[$16] = $17;
 $18 = HEAP32[$9>>2]|0;
 $19 = ($18|0)>(8);
 
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $gep_int10 = 4928;
 $expanded1 = $gep_int10;
 __ZNSt3__121__throw_runtime_errorEPKc($expanded1);
 
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = __ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0;
 STACKTOP = sp;return $1|0;
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = __ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0;
 STACKTOP = sp;return $1|0;
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, $gep = 0;
 var $gep10 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep2 = 0, $gep21 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int3 = 0, $gep_int5 = 0;
 var $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__enxt = sp + 8|0;
 $__ci = sp + 16|0;
 $__inxt = sp + 24|0;
 $1 = ($__c|0)==(-1);
 $gep_int = $this;
 $gep = (($gep_int) + 52)|0;
 $2 = $gep;
 $3 = HEAP8[$2]|0;
 $4 = ($3<<24>>24)!=(0);
 
 if ($1) {
  
  if ($4) {
   $$01 = -1;
   
   STACKTOP = sp;return $$01|0;
  }
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 48)|0;
  $5 = $gep2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(-1);
  $8 = $7&1;
  HEAP8[$2] = $8;
  
  $$01 = $6;
  
  STACKTOP = sp;return $$01|0;
 }
 $gep_int3 = $this;
 $gep4 = (($gep_int3) + 48)|0;
 $9 = $gep4;
 
 L8: do {
  if ($4) {
   $10 = HEAP32[$9>>2]|0;
   HEAP32[$__ci>>2] = $10;
   $gep_int5 = $this;
   $gep6 = (($gep_int5) + 36)|0;
   $11 = $gep6;
   $12 = HEAP32[$11>>2]|0;
   $gep_int7 = $this;
   $gep8 = (($gep_int7) + 40)|0;
   $13 = $gep8;
   $14 = HEAP32[$13>>2]|0;
   $gep_int9 = $__ci;
   $gep10 = (($gep_int9) + 4)|0;
   $15 = $gep10;
   $gep_int11 = $__extbuf;
   $16 = $gep_int11;
   $gep_int12 = $__extbuf;
   $gep13 = (($gep_int12) + 8)|0;
   $17 = $gep13;
   $18 = $12;
   $19 = HEAP32[$12>>2]|0;
   $gep_int14 = $19;
   $gep15 = (($gep_int14) + 12)|0;
   $20 = $gep15;
   $21 = HEAP32[$20>>2]|0;
   $22 = FUNCTION_TABLE_iiiiiiiii[$21 & 15]($12,$14,$__ci,$15,$__inxt,$16,$17,$__enxt)|0;
   
   if ((($22|0) == 3)) {
    $23 = HEAP32[$9>>2]|0;
    $24 = $23&255;
    HEAP8[$16] = $24;
    $gep_int16 = $__extbuf;
    $gep17 = (($gep_int16) + 1)|0;
    $25 = $gep17;
    HEAP32[$__enxt>>2] = $25;
    
   } else if ((($22|0) == 1) | (($22|0) == 2)) {
    $$01 = -1;
    
    STACKTOP = sp;return $$01|0;
   }
   $gep_int18 = $this;
   $gep19 = (($gep_int18) + 32)|0;
   $26 = $gep19;
   
   while(1) {
    $27 = HEAP32[$__enxt>>2]|0;
    $28 = ($27>>>0)>($16>>>0);
    
    if (!($28)) {
     break L8;
    }
    $gep_int20 = $27;
    $gep21 = (($gep_int20) + -1)|0;
    $29 = $gep21;
    HEAP32[$__enxt>>2] = $29;
    $30 = HEAP8[$29]|0;
    $31 = $30 << 24 >> 24;
    $32 = HEAP32[$26>>2]|0;
    $33 = _ungetc($31|0,$32|0)|0;
    $34 = ($33|0)==(-1);
    
    if ($34) {
     $$01 = -1;
     break;
    }
   }
   
   STACKTOP = sp;return $$01|0;
  }
 } while(0);
 HEAP32[$9>>2] = $__c;
 HEAP8[$2] = 1;
 
 $$01 = $__c;
 
 STACKTOP = sp;return $$01|0;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, $gep = 0;
 var $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep17 = 0, $gep19 = 0, $gep2 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int16 = 0;
 var $gep_int18 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__1buf = sp + 8|0;
 $__enxt = sp + 16|0;
 $__inxt = sp + 24|0;
 $gep_int = $this;
 $gep = (($gep_int) + 52)|0;
 $1 = $gep;
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)==(0);
 
 if (!($3)) {
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 48)|0;
  $4 = $gep2;
  $5 = HEAP32[$4>>2]|0;
  
  if (!($__consume)) {
   $$0 = $5;
   
   STACKTOP = sp;return $$0|0;
  }
  HEAP32[$4>>2] = -1;
  HEAP8[$1] = 0;
  
  $$0 = $5;
  
  STACKTOP = sp;return $$0|0;
 }
 $gep_int3 = $this;
 $gep4 = (($gep_int3) + 44)|0;
 $6 = $gep4;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(1);
 $9 = $8 ? $7 : 1;
 $10 = ($9|0)>(0);
 
 L8: do {
  if ($10) {
   $gep_int5 = $this;
   $gep6 = (($gep_int5) + 32)|0;
   $11 = $gep6;
   
   $__i$09 = 0;
   while(1) {
    
    $12 = HEAP32[$11>>2]|0;
    $13 = _fgetc($12|0)|0;
    $14 = ($13|0)==(-1);
    
    if ($14) {
     $$0 = -1;
     break;
    }
    $15 = $13&255;
    $gep_int7 = $__extbuf;
    $gep8 = (($gep_int7) + ($__i$09))|0;
    $16 = $gep8;
    HEAP8[$16] = $15;
    $17 = (($__i$09) + 1)|0;
    $18 = ($17|0)<($9|0);
    
    if ($18) {
     $__i$09 = $17;
    } else {
     break L8;
    }
   }
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $gep_int9 = $this;
 $gep10 = (($gep_int9) + 53)|0;
 $19 = $gep10;
 $20 = HEAP8[$19]|0;
 $21 = ($20<<24>>24)==(0);
 
 L15: do {
  if ($21) {
   $gep_int11 = $this;
   $gep12 = (($gep_int11) + 40)|0;
   $22 = $gep12;
   $gep_int13 = $this;
   $gep14 = (($gep_int13) + 36)|0;
   $23 = $gep14;
   $gep_int15 = $__extbuf;
   $24 = $gep_int15;
   $gep_int16 = $__1buf;
   $gep17 = (($gep_int16) + 4)|0;
   $25 = $gep17;
   $gep_int18 = $this;
   $gep19 = (($gep_int18) + 32)|0;
   $26 = $gep19;
   
   $__nread$0 = $9;
   while(1) {
    
    $30 = HEAP32[$22>>2]|0;
    $31 = $30;
    $32 = $30;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($32) + 4)|0;
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = HEAP32[$23>>2]|0;
    $gep_int21 = $__extbuf;
    $gep22 = (($gep_int21) + ($__nread$0))|0;
    $39 = $gep22;
    $40 = $38;
    $41 = HEAP32[$38>>2]|0;
    $gep_int23 = $41;
    $gep24 = (($gep_int23) + 16)|0;
    $42 = $gep24;
    $43 = HEAP32[$42>>2]|0;
    $44 = FUNCTION_TABLE_iiiiiiiii[$43 & 15]($38,$30,$24,$39,$__enxt,$__1buf,$25,$__inxt)|0;
    
    if ((($44|0) == 3)) {
     label = 14;
     break;
    } else if ((($44|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if (!((($44|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $45 = HEAP32[$22>>2]|0;
    $46 = $45;
    $47 = $45;
    $48 = $47;
    HEAP32[$48>>2] = $34;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $37;
    $51 = ($__nread$0|0)==(8);
    
    if ($51) {
     $$0 = -1;
     label = 22;
     break;
    }
    $52 = HEAP32[$26>>2]|0;
    $53 = _fgetc($52|0)|0;
    $54 = ($53|0)==(-1);
    
    if ($54) {
     $$0 = -1;
     label = 22;
     break;
    }
    $57 = $53&255;
    HEAP8[$39] = $57;
    $58 = (($__nread$0) + 1)|0;
    
    $__nread$0 = $58;
   }
   if ((label|0) == 14) {
    $55 = HEAP8[$24]|0;
    $56 = $55 << 24 >> 24;
    HEAP32[$__1buf>>2] = $56;
    
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    
    STACKTOP = sp;return $$0|0;
   }
  } else {
   $gep_int20 = $__extbuf;
   $27 = $gep_int20;
   $28 = HEAP8[$27]|0;
   $29 = $28 << 24 >> 24;
   HEAP32[$__1buf>>2] = $29;
   
   $__nread$2 = $9;
  }
 } while(0);
 
 
 if ($__consume) {
  $68 = HEAP32[$__1buf>>2]|0;
  $gep_int29 = $this;
  $gep30 = (($gep_int29) + 48)|0;
  $69 = $gep30;
  HEAP32[$69>>2] = $68;
  
  $$0 = $68;
  
  STACKTOP = sp;return $$0|0;
 }
 $gep_int25 = $this;
 $gep26 = (($gep_int25) + 32)|0;
 $59 = $gep26;
 
 $__i2$0 = $__nread$2;
 while(1) {
  
  $60 = ($__i2$0|0)>(0);
  
  if (!($60)) {
   break;
  }
  $61 = (($__i2$0) + -1)|0;
  $gep_int27 = $__extbuf;
  $gep28 = (($gep_int27) + ($61))|0;
  $62 = $gep28;
  $63 = HEAP8[$62]|0;
  $64 = $63 << 24 >> 24;
  $65 = HEAP32[$59>>2]|0;
  $66 = _ungetc($64|0,$65|0)|0;
  $67 = ($66|0)==(-1);
  
  if ($67) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $61;
  }
 }
 if ((label|0) == 22) {
  
  STACKTOP = sp;return $$0|0;
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 
 $$0 = $$pre;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5664;
 $gep_int3 = 5664;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5664;
 $gep_int3 = 5664;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep_int = 0;
 var $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP32[$this>>2]|0;
 $gep_int = $2;
 $gep = (($gep_int) + 24)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 u$0 = FUNCTION_TABLE_ii[$4 & 127]($this)|0;
 $expanded = 8544;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc,$expanded)|0;
 $6 = $5;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 36)|0;
 $7 = $gep2;
 HEAP32[$7>>2] = $6;
 $8 = $5;
 $9 = HEAP32[$5>>2]|0;
 $gep_int3 = $9;
 $gep4 = (($gep_int3) + 28)|0;
 $10 = $gep4;
 $11 = HEAP32[$10>>2]|0;
 $12 = FUNCTION_TABLE_ii[$11 & 127]($6)|0;
 $gep_int5 = $this;
 $gep6 = (($gep_int5) + 44)|0;
 $13 = $gep6;
 $14 = $12&1;
 HEAP8[$13] = $14;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__extbe = 0, $__extbuf = 0, $gep = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp;
 $__extbe = sp + 8|0;
 $gep_int = $this;
 $gep = (($gep_int) + 36)|0;
 $1 = $gep;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 40)|0;
 $2 = $gep2;
 $gep_int3 = $__extbuf;
 $3 = $gep_int3;
 $gep_int4 = $__extbuf;
 $gep5 = (($gep_int4) + 8)|0;
 $4 = $gep5;
 $5 = $__extbuf;
 $gep_int6 = $this;
 $gep7 = (($gep_int6) + 32)|0;
 $6 = $gep7;
 
 while(1) {
  $7 = HEAP32[$1>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = $7;
  $10 = HEAP32[$7>>2]|0;
  $gep_int8 = $10;
  $gep9 = (($gep_int8) + 20)|0;
  $11 = $gep9;
  $12 = HEAP32[$11>>2]|0;
  $13 = FUNCTION_TABLE_iiiiii[$12 & 31]($7,$8,$3,$4,$__extbe)|0;
  $14 = HEAP32[$__extbe>>2]|0;
  $15 = $14;
  $16 = (($15) - ($5))|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = _fwrite($3|0,1,$16|0,$17|0)|0;
  $19 = ($18|0)==($16|0);
  
  if (!($19)) {
   $$0 = -1;
   label = 5;
   break;
  }
  
  if ((($13|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($13|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $20 = HEAP32[$6>>2]|0;
  $21 = _fflush($20|0)|0;
  $not$ = ($21|0)!=(0);
  $$ = $not$ << 31 >> 31;
  
  $$0 = $$;
  
  STACKTOP = sp;return $$0|0;
 }
 else if ((label|0) == 5) {
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$03 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 44)|0;
 $1 = $gep;
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)==(0);
 
 if (!($3)) {
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 32)|0;
  $6 = $gep2;
  $7 = HEAP32[$6>>2]|0;
  $8 = _fwrite($__s|0,1,$__n|0,$7|0)|0;
  
  $$0 = $8;
  
  STACKTOP = sp;return $$0|0;
 }
 $4 = $this;
 $5 = ($__n|0)>(0);
 
 if ($5) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 while(1) {
  
  
  $9 = HEAP32[$this>>2]|0;
  $gep_int3 = $9;
  $gep4 = (($gep_int3) + 52)|0;
  $10 = $gep4;
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP8[$$012]|0;
  $13 = $12&255;
  $14 = FUNCTION_TABLE_iii[$11 & 63]($this,$13)|0;
  $15 = ($14|0)==(-1);
  
  if ($15) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $16 = (($__i$03) + 1)|0;
  $gep_int5 = $$012;
  $gep6 = (($gep_int5) + 1)|0;
  $17 = $gep6;
  $18 = ($16|0)<($__n|0);
  
  if ($18) {
   $$012 = $17;$__i$03 = $16;
  } else {
   $$0 = $16;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int3 = 0, $gep_int4 = 0;
 var $gep_int6 = 0, $gep_int8 = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__1buf = sp + 8|0;
 $__extbe = sp + 16|0;
 $__e = sp + 24|0;
 $1 = ($__c|0)==(-1);
 
 L1: do {
  if (!($1)) {
   $2 = $__c&255;
   HEAP8[$__1buf] = $2;
   $gep_int = $this;
   $gep = (($gep_int) + 44)|0;
   $3 = $gep;
   $4 = HEAP8[$3]|0;
   $5 = ($4<<24>>24)==(0);
   
   if (!($5)) {
    $gep_int1 = $this;
    $gep2 = (($gep_int1) + 32)|0;
    $6 = $gep2;
    $7 = HEAP32[$6>>2]|0;
    $8 = _fwrite($__1buf|0,1,1,$7|0)|0;
    $9 = ($8|0)==(1);
    
    if ($9) {
     break;
    } else {
     $$0 = -1;
    }
    
    STACKTOP = sp;return $$0|0;
   }
   $gep_int3 = $__extbuf;
   $10 = $gep_int3;
   HEAP32[$__extbe>>2] = $10;
   $gep_int4 = $__1buf;
   $gep5 = (($gep_int4) + 1)|0;
   $11 = $gep5;
   $gep_int6 = $this;
   $gep7 = (($gep_int6) + 36)|0;
   $12 = $gep7;
   $gep_int8 = $this;
   $gep9 = (($gep_int8) + 40)|0;
   $13 = $gep9;
   $gep_int10 = $__extbuf;
   $gep11 = (($gep_int10) + 8)|0;
   $14 = $gep11;
   $15 = $__extbuf;
   $gep_int12 = $this;
   $gep13 = (($gep_int12) + 32)|0;
   $16 = $gep13;
   
   $pbase$0 = $__1buf;
   while(1) {
    
    $17 = HEAP32[$12>>2]|0;
    $18 = HEAP32[$13>>2]|0;
    $19 = $17;
    $20 = HEAP32[$17>>2]|0;
    $gep_int14 = $20;
    $gep15 = (($gep_int14) + 12)|0;
    $21 = $gep15;
    $22 = HEAP32[$21>>2]|0;
    $23 = FUNCTION_TABLE_iiiiiiiii[$22 & 15]($17,$18,$pbase$0,$11,$__e,$10,$14,$__extbe)|0;
    $24 = HEAP32[$__e>>2]|0;
    $25 = ($24|0)==($pbase$0|0);
    
    if ($25) {
     $$0 = -1;
     label = 12;
     break;
    }
    $26 = ($23|0)==(3);
    
    if ($26) {
     label = 7;
     break;
    }
    $30 = ($23|0)==(1);
    $31 = ($23>>>0)<(2);
    
    if (!($31)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $32 = HEAP32[$__extbe>>2]|0;
    $33 = $32;
    $34 = (($33) - ($15))|0;
    $35 = HEAP32[$16>>2]|0;
    $36 = _fwrite($10|0,1,$34|0,$35|0)|0;
    $37 = ($36|0)==($34|0);
    
    if (!($37)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $38 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $30 ? $38 : $pbase$0;
    
    if ($30) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $27 = HEAP32[$16>>2]|0;
    $28 = _fwrite($pbase$0|0,1,1,$27|0)|0;
    $29 = ($28|0)==(1);
    
    if ($29) {
     break;
    } else {
     $$0 = -1;
    }
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 12) {
    
    STACKTOP = sp;return $$0|0;
   }
  }
 } while(0);
 $$__c$i = $1 ? 0 : $__c;
 
 $$0 = $$__c$i;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded2 = 0, $expanded3 = 0;
 var $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep39 = 0;
 var $gep_int = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = sp;
 $gep_int = $this;
 $2 = $gep_int;
 $expanded2 = 5664;
 $gep_int12 = 5664;
 $gep = (($gep_int12) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$2>>2] = $expanded;
 $gep_int13 = $this;
 $gep14 = (($gep_int13) + 4)|0;
 $3 = $gep14;
 __ZNSt3__16localeC2Ev($3);
 $gep_int15 = $this;
 $gep16 = (($gep_int15) + 8)|0;
 $4 = $gep16;
 $5 = $4;
 ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;
 $expanded5 = 5080;
 $gep_int17 = 5080;
 $gep18 = (($gep_int17) + 8)|0;
 $expanded4 = $gep18;
 $expanded3 = $expanded4;
 HEAP32[$2>>2] = $expanded3;
 $gep_int19 = $this;
 $gep20 = (($gep_int19) + 32)|0;
 $6 = $gep20;
 HEAP32[$6>>2] = $__fp;
 $gep_int21 = $this;
 $gep22 = (($gep_int21) + 40)|0;
 $7 = $gep22;
 HEAP32[$7>>2] = $__st;
 $gep_int23 = $this;
 $gep24 = (($gep_int23) + 48)|0;
 $8 = $gep24;
 HEAP32[$8>>2] = -1;
 $gep_int25 = $this;
 $gep26 = (($gep_int25) + 52)|0;
 $9 = $gep26;
 HEAP8[$9] = 0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 __THREW__ = 0;
 $expanded6 = 8544;
 $10 = invoke_iii(19,$1|0,$expanded6|0)|0;
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 
 if ($12) {
  $expanded8 = 69;
  $33 = ___cxa_find_matching_catch(-1,-1)|0;
  $34 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  $expanded11 = 5664;
  $gep_int38 = 5664;
  $gep39 = (($gep_int38) + 8)|0;
  $expanded10 = $gep39;
  $expanded9 = $expanded10;
  HEAP32[$2>>2] = $expanded9;
  __ZNSt3__16localeD2Ev($3);
  ___resumeException($33|0);
  // unreachable
 }
 $13 = $10;
 $gep_int27 = $this;
 $gep28 = (($gep_int27) + 36)|0;
 $14 = $gep28;
 HEAP32[$14>>2] = $13;
 $15 = $10;
 $16 = HEAP32[$10>>2]|0;
 $gep_int29 = $16;
 $gep30 = (($gep_int29) + 24)|0;
 $17 = $gep30;
 $18 = HEAP32[$17>>2]|0;
 $19 = FUNCTION_TABLE_ii[$18 & 127]($13)|0;
 $gep_int31 = $this;
 $gep32 = (($gep_int31) + 44)|0;
 $20 = $gep32;
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$14>>2]|0;
 $22 = $21;
 $23 = HEAP32[$21>>2]|0;
 $gep_int33 = $23;
 $gep34 = (($gep_int33) + 28)|0;
 $24 = $gep34;
 $25 = HEAP32[$24>>2]|0;
 $26 = FUNCTION_TABLE_ii[$25 & 127]($21)|0;
 $gep_int35 = $this;
 $gep36 = (($gep_int35) + 53)|0;
 $27 = $gep36;
 $28 = $26&1;
 HEAP8[$27] = $28;
 $29 = HEAP32[$20>>2]|0;
 $30 = ($29|0)>(8);
 
 if (!($30)) {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 $gep_int37 = 4928;
 $expanded7 = $gep_int37;
 invoke_vi(175,$expanded7|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 
 if ($32) {
  $expanded8 = 69;
  $33 = ___cxa_find_matching_catch(-1,-1)|0;
  $34 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  $expanded11 = 5664;
  $gep_int38 = 5664;
  $gep39 = (($gep_int38) + 8)|0;
  $expanded10 = $gep39;
  $expanded9 = $expanded10;
  HEAP32[$2>>2] = $expanded9;
  __ZNSt3__16localeD2Ev($3);
  ___resumeException($33|0);
  // unreachable
 } else {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5664;
 $gep_int3 = 5664;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5664;
 $gep_int3 = 5664;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0;
 var $expanded1 = 0, $gep = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded = 8544;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc,$expanded)|0;
 $2 = $1;
 $gep_int = $this;
 $gep = (($gep_int) + 36)|0;
 $3 = $gep;
 HEAP32[$3>>2] = $2;
 $4 = $1;
 $5 = HEAP32[$1>>2]|0;
 $gep_int2 = $5;
 $gep3 = (($gep_int2) + 24)|0;
 $6 = $gep3;
 $7 = HEAP32[$6>>2]|0;
 $8 = FUNCTION_TABLE_ii[$7 & 127]($2)|0;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 44)|0;
 $9 = $gep5;
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$3>>2]|0;
 $11 = $10;
 $12 = HEAP32[$10>>2]|0;
 $gep_int6 = $12;
 $gep7 = (($gep_int6) + 28)|0;
 $13 = $gep7;
 $14 = HEAP32[$13>>2]|0;
 $15 = FUNCTION_TABLE_ii[$14 & 127]($10)|0;
 $gep_int8 = $this;
 $gep9 = (($gep_int8) + 53)|0;
 $16 = $gep9;
 $17 = $15&1;
 HEAP8[$16] = $17;
 $18 = HEAP32[$9>>2]|0;
 $19 = ($18|0)>(8);
 
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $gep_int10 = 4928;
 $expanded1 = $gep_int10;
 __ZNSt3__121__throw_runtime_errorEPKc($expanded1);
 
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = __ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0;
 STACKTOP = sp;return $1|0;
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = __ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0;
 STACKTOP = sp;return $1|0;
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0;
 var $gep = 0, $gep10 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep2 = 0, $gep21 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int3 = 0;
 var $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__enxt = sp + 8|0;
 $__ci = sp + 16|0;
 $__inxt = sp + 24|0;
 $1 = ($__c|0)==(-1);
 $gep_int = $this;
 $gep = (($gep_int) + 52)|0;
 $2 = $gep;
 $3 = HEAP8[$2]|0;
 $4 = ($3<<24>>24)!=(0);
 
 if ($1) {
  
  if ($4) {
   $$01 = -1;
   
   STACKTOP = sp;return $$01|0;
  }
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 48)|0;
  $5 = $gep2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(-1);
  $8 = $7&1;
  HEAP8[$2] = $8;
  
  $$01 = $6;
  
  STACKTOP = sp;return $$01|0;
 }
 $gep_int3 = $this;
 $gep4 = (($gep_int3) + 48)|0;
 $9 = $gep4;
 
 L8: do {
  if ($4) {
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   HEAP8[$__ci] = $11;
   $gep_int5 = $this;
   $gep6 = (($gep_int5) + 36)|0;
   $12 = $gep6;
   $13 = HEAP32[$12>>2]|0;
   $gep_int7 = $this;
   $gep8 = (($gep_int7) + 40)|0;
   $14 = $gep8;
   $15 = HEAP32[$14>>2]|0;
   $gep_int9 = $__ci;
   $gep10 = (($gep_int9) + 1)|0;
   $16 = $gep10;
   $gep_int11 = $__extbuf;
   $17 = $gep_int11;
   $gep_int12 = $__extbuf;
   $gep13 = (($gep_int12) + 8)|0;
   $18 = $gep13;
   $19 = $13;
   $20 = HEAP32[$13>>2]|0;
   $gep_int14 = $20;
   $gep15 = (($gep_int14) + 12)|0;
   $21 = $gep15;
   $22 = HEAP32[$21>>2]|0;
   $23 = FUNCTION_TABLE_iiiiiiiii[$22 & 15]($13,$15,$__ci,$16,$__inxt,$17,$18,$__enxt)|0;
   
   if ((($23|0) == 1) | (($23|0) == 2)) {
    $$01 = -1;
    
    STACKTOP = sp;return $$01|0;
   } else if ((($23|0) == 3)) {
    $24 = HEAP32[$9>>2]|0;
    $25 = $24&255;
    HEAP8[$17] = $25;
    $gep_int16 = $__extbuf;
    $gep17 = (($gep_int16) + 1)|0;
    $26 = $gep17;
    HEAP32[$__enxt>>2] = $26;
    
   }
   $gep_int18 = $this;
   $gep19 = (($gep_int18) + 32)|0;
   $27 = $gep19;
   
   while(1) {
    $28 = HEAP32[$__enxt>>2]|0;
    $29 = ($28>>>0)>($17>>>0);
    
    if (!($29)) {
     break L8;
    }
    $gep_int20 = $28;
    $gep21 = (($gep_int20) + -1)|0;
    $30 = $gep21;
    HEAP32[$__enxt>>2] = $30;
    $31 = HEAP8[$30]|0;
    $32 = $31 << 24 >> 24;
    $33 = HEAP32[$27>>2]|0;
    $34 = _ungetc($32|0,$33|0)|0;
    $35 = ($34|0)==(-1);
    
    if ($35) {
     $$01 = -1;
     break;
    }
   }
   
   STACKTOP = sp;return $$01|0;
  }
 } while(0);
 HEAP32[$9>>2] = $__c;
 HEAP8[$2] = 1;
 
 $$01 = $__c;
 
 STACKTOP = sp;return $$01|0;
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0;
 var $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep17 = 0, $gep19 = 0, $gep2 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0;
 var $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__1buf = sp + 8|0;
 $__enxt = sp + 16|0;
 $__inxt = sp + 24|0;
 $gep_int = $this;
 $gep = (($gep_int) + 52)|0;
 $1 = $gep;
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)==(0);
 
 if (!($3)) {
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 48)|0;
  $4 = $gep2;
  $5 = HEAP32[$4>>2]|0;
  
  if (!($__consume)) {
   $$0 = $5;
   
   STACKTOP = sp;return $$0|0;
  }
  HEAP32[$4>>2] = -1;
  HEAP8[$1] = 0;
  
  $$0 = $5;
  
  STACKTOP = sp;return $$0|0;
 }
 $gep_int3 = $this;
 $gep4 = (($gep_int3) + 44)|0;
 $6 = $gep4;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(1);
 $9 = $8 ? $7 : 1;
 $10 = ($9|0)>(0);
 
 L8: do {
  if ($10) {
   $gep_int5 = $this;
   $gep6 = (($gep_int5) + 32)|0;
   $11 = $gep6;
   
   $__i$09 = 0;
   while(1) {
    
    $12 = HEAP32[$11>>2]|0;
    $13 = _fgetc($12|0)|0;
    $14 = ($13|0)==(-1);
    
    if ($14) {
     $$0 = -1;
     break;
    }
    $15 = $13&255;
    $gep_int7 = $__extbuf;
    $gep8 = (($gep_int7) + ($__i$09))|0;
    $16 = $gep8;
    HEAP8[$16] = $15;
    $17 = (($__i$09) + 1)|0;
    $18 = ($17|0)<($9|0);
    
    if ($18) {
     $__i$09 = $17;
    } else {
     break L8;
    }
   }
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $gep_int9 = $this;
 $gep10 = (($gep_int9) + 53)|0;
 $19 = $gep10;
 $20 = HEAP8[$19]|0;
 $21 = ($20<<24>>24)==(0);
 
 L15: do {
  if ($21) {
   $gep_int11 = $this;
   $gep12 = (($gep_int11) + 40)|0;
   $22 = $gep12;
   $gep_int13 = $this;
   $gep14 = (($gep_int13) + 36)|0;
   $23 = $gep14;
   $gep_int15 = $__extbuf;
   $24 = $gep_int15;
   $gep_int16 = $__1buf;
   $gep17 = (($gep_int16) + 1)|0;
   $25 = $gep17;
   $gep_int18 = $this;
   $gep19 = (($gep_int18) + 32)|0;
   $26 = $gep19;
   
   $__nread$0 = $9;
   while(1) {
    
    $29 = HEAP32[$22>>2]|0;
    $30 = $29;
    $31 = $29;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = (($31) + 4)|0;
    $35 = $34;
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$23>>2]|0;
    $gep_int21 = $__extbuf;
    $gep22 = (($gep_int21) + ($__nread$0))|0;
    $38 = $gep22;
    $39 = $37;
    $40 = HEAP32[$37>>2]|0;
    $gep_int23 = $40;
    $gep24 = (($gep_int23) + 16)|0;
    $41 = $gep24;
    $42 = HEAP32[$41>>2]|0;
    $43 = FUNCTION_TABLE_iiiiiiiii[$42 & 15]($37,$29,$24,$38,$__enxt,$__1buf,$25,$__inxt)|0;
    
    if ((($43|0) == 3)) {
     label = 14;
     break;
    } else if ((($43|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($43|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $44 = HEAP32[$22>>2]|0;
    $45 = $44;
    $46 = $44;
    $47 = $46;
    HEAP32[$47>>2] = $33;
    $48 = (($46) + 4)|0;
    $49 = $48;
    HEAP32[$49>>2] = $36;
    $50 = ($__nread$0|0)==(8);
    
    if ($50) {
     $$0 = -1;
     label = 23;
     break;
    }
    $51 = HEAP32[$26>>2]|0;
    $52 = _fgetc($51|0)|0;
    $53 = ($52|0)==(-1);
    
    if ($53) {
     $$0 = -1;
     label = 23;
     break;
    }
    $55 = $52&255;
    HEAP8[$38] = $55;
    $56 = (($__nread$0) + 1)|0;
    
    $__nread$0 = $56;
   }
   if ((label|0) == 14) {
    $54 = HEAP8[$24]|0;
    HEAP8[$__1buf] = $54;
    
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    
    STACKTOP = sp;return $$0|0;
   }
  } else {
   $gep_int20 = $__extbuf;
   $27 = $gep_int20;
   $28 = HEAP8[$27]|0;
   HEAP8[$__1buf] = $28;
   
   $__nread$2 = $9;
  }
 } while(0);
 
 
 do {
  if ($__consume) {
   $66 = HEAP8[$__1buf]|0;
   $67 = $66&255;
   $gep_int29 = $this;
   $gep30 = (($gep_int29) + 48)|0;
   $68 = $gep30;
   HEAP32[$68>>2] = $67;
   
   $69 = $66;
  } else {
   $gep_int25 = $this;
   $gep26 = (($gep_int25) + 32)|0;
   $57 = $gep26;
   
   $__i2$0 = $__nread$2;
   while(1) {
    
    $58 = ($__i2$0|0)>(0);
    
    if (!($58)) {
     label = 21;
     break;
    }
    $59 = (($__i2$0) + -1)|0;
    $gep_int27 = $__extbuf;
    $gep28 = (($gep_int27) + ($59))|0;
    $60 = $gep28;
    $61 = HEAP8[$60]|0;
    $62 = $61&255;
    $63 = HEAP32[$57>>2]|0;
    $64 = _ungetc($62|0,$63|0)|0;
    $65 = ($64|0)==(-1);
    
    if ($65) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $59;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf]|0;
    
    $69 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    
    STACKTOP = sp;return $$0|0;
   }
  }
 } while(0);
 
 $70 = $69&255;
 
 $$0 = $70;
 
 STACKTOP = sp;return $$0|0;
}
function __GLOBAL__I_a244() {
 var $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep_int = 0, $gep_int4 = 0, label = 0, sp = 0, u$1 = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 $expanded = 176;
 $expanded2 = 4352;
 $gep_int = 4352;
 $expanded1 = $gep_int;
 $gep_int4 = ___dso_handle;
 $expanded3 = $gep_int4;
 u$1 = _atexit($expanded|0,$expanded1|0,$expanded3|0)|0;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 u$0 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = ((u$0+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = ($2|0)==(0);
 
 if (!($3)) {
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $4 = $this;
 $5 = HEAP32[$this>>2]|0;
 $gep_int1 = $5;
 $gep2 = (($gep_int1) + 8)|0;
 $6 = $gep2;
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 255]($this);
 
 $$0 = 1;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0;
 var $expanded3 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5224;
 $gep_int4 = 5224;
 $gep = (($gep_int4) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $2 = _strlen($msg|0)|0;
 $3 = (($2) + 13)|0;
 __THREW__ = 0;
 $4 = invoke_ii(78,$3|0)|0;
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if ($6) {
  $expanded3 = 69;
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $gep_int13 = $this;
  $17 = $gep_int13;
  __ZNSt9exceptionD2Ev($17|0);
  ___resumeException($15|0);
  // unreachable
 } else {
  $gep_int5 = $this;
  $gep6 = (($gep_int5) + 4)|0;
  $7 = $gep6;
  $8 = (($2) + 1)|0;
  $9 = $4;
  $gep_int7 = $4;
  $gep8 = (($gep_int7) + 4)|0;
  $10 = $gep8;
  $11 = $10;
  HEAP32[$10>>2] = $2;
  HEAP32[$4>>2] = $2;
  $gep_int9 = $4;
  $gep10 = (($gep_int9) + 12)|0;
  $12 = $gep10;
  HEAP32[$7>>2] = $12;
  $gep_int11 = $4;
  $gep12 = (($gep_int11) + 8)|0;
  $13 = $gep12;
  $14 = $13;
  HEAP32[$13>>2] = 0;
  _memcpy($12|0,$msg|0,$8|0)|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5224;
 $gep_int3 = 5224;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 $this$idx$val$i$i = HEAP32[$2>>2]|0;
 $gep_int6 = $this$idx$val$i$i;
 $gep7 = (($gep_int6) + -4)|0;
 $3 = $gep7;
 $4 = $3;
 $5 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 
 if (!($7)) {
  $gep_int10 = $this;
  $10 = $gep_int10;
  __ZNSt9exceptionD2Ev($10|0);
  $11 = $this;
  __ZdlPv($11);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $gep_int8 = $8;
 $gep9 = (($gep_int8) + -12)|0;
 $9 = $gep9;
 __ZdaPv($9);
 
 $gep_int10 = $this;
 $10 = $gep_int10;
 __ZNSt9exceptionD2Ev($10|0);
 $11 = $this;
 __ZdlPv($11);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int3 = 0;
 var $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5224;
 $gep_int3 = 5224;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 $this$idx$val$i = HEAP32[$2>>2]|0;
 $gep_int6 = $this$idx$val$i;
 $gep7 = (($gep_int6) + -4)|0;
 $3 = $gep7;
 $4 = $3;
 $5 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 
 if (!($7)) {
  $gep_int10 = $this;
  $10 = $gep_int10;
  __ZNSt9exceptionD2Ev($10|0);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $gep_int8 = $8;
 $gep9 = (($gep_int8) + -12)|0;
 $9 = $gep9;
 __ZdaPv($9);
 
 $gep_int10 = $this;
 $10 = $gep_int10;
 __ZNSt9exceptionD2Ev($10|0);
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $$idx$val = HEAP32[$1>>2]|0;
 STACKTOP = sp;return $$idx$val|0;
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0;
 var $gep_int14 = 0, $gep_int16 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $gep_int4 = $this;
 $2 = $gep_int4;
 $expanded2 = 5248;
 $gep_int5 = 5248;
 $gep = (($gep_int5) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$2>>2] = $expanded;
 $gep_int6 = $this;
 $gep7 = (($gep_int6) + 4)|0;
 $3 = $gep7;
 $4 = $msg;
 $5 = HEAP8[$msg]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 
 if ($7) {
  $10 = $msg;
  $gep_int10 = $msg;
  $gep11 = (($gep_int10) + 1)|0;
  $11 = $gep11;
  
  $12 = $11;
 } else {
  $gep_int8 = $msg;
  $gep9 = (($gep_int8) + 8)|0;
  $8 = $gep9;
  $9 = HEAP32[$8>>2]|0;
  
  $12 = $9;
 }
 
 $13 = _strlen($12|0)|0;
 $14 = (($13) + 13)|0;
 __THREW__ = 0;
 $15 = invoke_ii(78,$14|0)|0;
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 
 if ($17) {
  $expanded3 = 69;
  $25 = ___cxa_find_matching_catch(-1,-1)|0;
  $26 = tempRet0;
  __ZNSt9exceptionD2Ev($1|0);
  ___resumeException($25|0);
  // unreachable
 } else {
  $18 = (($13) + 1)|0;
  $19 = $15;
  $gep_int12 = $15;
  $gep13 = (($gep_int12) + 4)|0;
  $20 = $gep13;
  $21 = $20;
  HEAP32[$20>>2] = $13;
  HEAP32[$15>>2] = $13;
  $gep_int14 = $15;
  $gep15 = (($gep_int14) + 12)|0;
  $22 = $gep15;
  HEAP32[$3>>2] = $22;
  $gep_int16 = $15;
  $gep17 = (($gep_int16) + 8)|0;
  $23 = $gep17;
  $24 = $23;
  HEAP32[$23>>2] = 0;
  _memcpy($22|0,$12|0,$18|0)|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0;
 var $expanded3 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5248;
 $gep_int4 = 5248;
 $gep = (($gep_int4) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $2 = _strlen($msg|0)|0;
 $3 = (($2) + 13)|0;
 __THREW__ = 0;
 $4 = invoke_ii(78,$3|0)|0;
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if ($6) {
  $expanded3 = 69;
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $gep_int13 = $this;
  $17 = $gep_int13;
  __ZNSt9exceptionD2Ev($17|0);
  ___resumeException($15|0);
  // unreachable
 } else {
  $gep_int5 = $this;
  $gep6 = (($gep_int5) + 4)|0;
  $7 = $gep6;
  $8 = (($2) + 1)|0;
  $9 = $4;
  $gep_int7 = $4;
  $gep8 = (($gep_int7) + 4)|0;
  $10 = $gep8;
  $11 = $10;
  HEAP32[$10>>2] = $2;
  HEAP32[$4>>2] = $2;
  $gep_int9 = $4;
  $gep10 = (($gep_int9) + 12)|0;
  $12 = $gep10;
  HEAP32[$7>>2] = $12;
  $gep_int11 = $4;
  $gep12 = (($gep_int11) + 8)|0;
  $13 = $gep12;
  $14 = $13;
  HEAP32[$13>>2] = 0;
  _memcpy($12|0,$msg|0,$8|0)|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5248;
 $gep_int3 = 5248;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 $this$idx$val$i$i = HEAP32[$2>>2]|0;
 $gep_int6 = $this$idx$val$i$i;
 $gep7 = (($gep_int6) + -4)|0;
 $3 = $gep7;
 $4 = $3;
 $5 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 
 if (!($7)) {
  $gep_int10 = $this;
  $10 = $gep_int10;
  __ZNSt9exceptionD2Ev($10|0);
  $11 = $this;
  __ZdlPv($11);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $gep_int8 = $8;
 $gep9 = (($gep_int8) + -12)|0;
 $9 = $gep9;
 __ZdaPv($9);
 
 $gep_int10 = $this;
 $10 = $gep_int10;
 __ZNSt9exceptionD2Ev($10|0);
 $11 = $this;
 __ZdlPv($11);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int3 = 0;
 var $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5248;
 $gep_int3 = 5248;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 $this$idx$val$i = HEAP32[$2>>2]|0;
 $gep_int6 = $this$idx$val$i;
 $gep7 = (($gep_int6) + -4)|0;
 $3 = $gep7;
 $4 = $3;
 $5 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 
 if (!($7)) {
  $gep_int10 = $this;
  $10 = $gep_int10;
  __ZNSt9exceptionD2Ev($10|0);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $gep_int8 = $8;
 $gep9 = (($gep_int8) + -12)|0;
 $9 = $gep9;
 __ZdaPv($9);
 
 $gep_int10 = $this;
 $10 = $gep_int10;
 __ZNSt9exceptionD2Ev($10|0);
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $$idx$val = HEAP32[$1>>2]|0;
 STACKTOP = sp;return $$idx$val|0;
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5224;
 $gep_int3 = 5224;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 $this$idx$val$i$i = HEAP32[$2>>2]|0;
 $gep_int6 = $this$idx$val$i$i;
 $gep7 = (($gep_int6) + -4)|0;
 $3 = $gep7;
 $4 = $3;
 $5 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 
 if (!($7)) {
  $gep_int10 = $this;
  $10 = $gep_int10;
  __ZNSt9exceptionD2Ev($10|0);
  $11 = $this;
  __ZdlPv($11);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $gep_int8 = $8;
 $gep9 = (($gep_int8) + -12)|0;
 $9 = $gep9;
 __ZdaPv($9);
 
 $gep_int10 = $this;
 $10 = $gep_int10;
 __ZNSt9exceptionD2Ev($10|0);
 $11 = $this;
 __ZdlPv($11);
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $agg$result;
 $1 = $gep_int;
 HEAP32[$1>>2] = $ev;
 $gep_int1 = $agg$result;
 $gep = (($gep_int1) + 4)|0;
 $2 = $gep;
 HEAP32[$2>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0;
 var $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = sp;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + 12)|0;
 $4 = $gep;
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viii[$5 & 31]($1,$this,$code);
 $gep_int1 = $1;
 $gep2 = (($gep_int1) + 4)|0;
 $6 = $gep2;
 $7 = HEAP32[$6>>2]|0;
 $gep_int3 = $condition;
 $gep4 = (($gep_int3) + 4)|0;
 $8 = $gep4;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)==($9|0);
 
 if (!($10)) {
  $16 = 0;
  
  STACKTOP = sp;return $16|0;
 }
 $gep_int5 = $1;
 $11 = $gep_int5;
 $12 = HEAP32[$11>>2]|0;
 $gep_int6 = $condition;
 $13 = $gep_int6;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)==($14|0);
 
 $16 = $15;
 
 STACKTOP = sp;return $16|0;
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $gep = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $code;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($this|0);
 
 if (!($3)) {
  $7 = 0;
  
  STACKTOP = sp;return $7|0;
 }
 $gep_int1 = $code;
 $4 = $gep_int1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($condition|0);
 
 $7 = $6;
 
 STACKTOP = sp;return $7|0;
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, $gep = 0, $gep2 = 0;
 var $gep5 = 0, $gep7 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = _strerror($ev|0)|0;
 $2 = _strlen($1|0)|0;
 $3 = ($2>>>0)>(4294967279);
 
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $4 = ($2>>>0)<(11);
 
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  $7 = $agg$result;
  HEAP8[$agg$result] = $6;
  $8 = $agg$result;
  $gep_int = $agg$result;
  $gep = (($gep_int) + 1)|0;
  $9 = $gep;
  
  $__p$0$i$i$i = $9;
  
  _memcpy($__p$0$i$i$i|0,$1|0,$2|0)|0;
  $gep_int6 = $__p$0$i$i$i;
  $gep7 = (($gep_int6) + ($2))|0;
  $17 = $gep7;
  HEAP8[$17] = 0;
  STACKTOP = sp;return;
 } else {
  $10 = (($2) + 16)|0;
  $11 = $10 & -16;
  $12 = __Znwj($11)|0;
  $gep_int1 = $agg$result;
  $gep2 = (($gep_int1) + 8)|0;
  $13 = $gep2;
  HEAP32[$13>>2] = $12;
  $14 = $11 | 1;
  $gep_int3 = $agg$result;
  $15 = $gep_int3;
  HEAP32[$15>>2] = $14;
  $gep_int4 = $agg$result;
  $gep5 = (($gep_int4) + 4)|0;
  $16 = $gep5;
  HEAP32[$16>>2] = $2;
  
  $__p$0$i$i$i = $12;
  
  _memcpy($__p$0$i$i$i|0,$1|0,$2|0)|0;
  $gep_int6 = $__p$0$i$i$i;
  $gep7 = (($gep_int6) + ($2))|0;
  $17 = $gep7;
  HEAP8[$17] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $$pre2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep5 = 0, $gep7 = 0;
 var $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0, u$12 = 0, u$5 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $gep_int = $ec;
 $2 = $gep_int;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $$pre2 = $what_arg;
 
 do {
  if (!($4)) {
   $5 = HEAP8[$what_arg]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   
   if ($7) {
    $10 = $5&255;
    $11 = $10 >>> 1;
    
    $12 = $11;
   } else {
    $gep_int2 = $what_arg;
    $gep = (($gep_int2) + 4)|0;
    $8 = $gep;
    $9 = HEAP32[$8>>2]|0;
    
    $12 = $9;
   }
   
   $13 = ($12|0)==(0);
   
   if ($13) {
    $14 = $3;
   } else {
    $gep_int3 = 5408;
    $expanded = $gep_int3;
    u$5 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,$expanded,2)|0;
    $$pre = HEAP32[$2>>2]|0;
    
    $14 = $$pre;
   }
   
   $gep_int4 = $ec;
   $gep5 = (($gep_int4) + 4)|0;
   $15 = $gep5;
   $16 = HEAP32[$15>>2]|0;
   $17 = $16;
   $18 = HEAP32[$16>>2]|0;
   $gep_int6 = $18;
   $gep7 = (($gep_int6) + 24)|0;
   $19 = $gep7;
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viii[$20 & 31]($1,$16,$14);
   $21 = $1;
   $22 = HEAP8[$1]|0;
   $23 = $22 & 1;
   $24 = ($23<<24>>24)==(0);
   
   if ($24) {
    $29 = $1;
    $gep_int12 = $1;
    $gep13 = (($gep_int12) + 1)|0;
    $30 = $gep13;
    $31 = $22&255;
    $32 = $31 >>> 1;
    
    $33 = $30;$34 = $32;
   } else {
    $gep_int8 = $1;
    $gep9 = (($gep_int8) + 8)|0;
    $25 = $gep9;
    $26 = HEAP32[$25>>2]|0;
    $gep_int10 = $1;
    $gep11 = (($gep_int10) + 4)|0;
    $27 = $gep11;
    $28 = HEAP32[$27>>2]|0;
    
    $33 = $26;$34 = $28;
   }
   
   
   __THREW__ = 0;
   u$12 = invoke_iiii(29,$what_arg|0,$33|0,$34|0)|0;
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   
   if (!($36)) {
    $37 = HEAP8[$1]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    
    if ($39) {
     break;
    }
    $gep_int14 = $1;
    $gep15 = (($gep_int14) + 8)|0;
    $40 = $gep15;
    $41 = HEAP32[$40>>2]|0;
    __ZdlPv($41);
    
    break;
   }
   $expanded1 = 69;
   $42 = ___cxa_find_matching_catch(-1,-1)|0;
   $43 = tempRet0;
   $44 = HEAP8[$1]|0;
   $45 = $44 & 1;
   $46 = ($45<<24>>24)==(0);
   
   if ($46) {
    ___resumeException($42|0);
    // unreachable
   }
   $gep_int16 = $1;
   $gep17 = (($gep_int16) + 8)|0;
   $47 = $gep17;
   $48 = HEAP32[$47>>2]|0;
   __ZdlPv($48);
   
   ___resumeException($42|0);
   // unreachable
  }
 } while(0);
 $49 = $agg$result;
 ;HEAP32[$49+0>>2]=HEAP32[$$pre2+0>>2]|0;HEAP32[$49+4>>2]=HEAP32[$$pre2+4>>2]|0;HEAP32[$49+8>>2]=HEAP32[$$pre2+8>>2]|0;
 ;HEAP32[$$pre2+0>>2]=0|0;HEAP32[$$pre2+4>>2]=0|0;HEAP32[$$pre2+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $gep = 0, $gep11 = 0, $gep14 = 0, $gep16 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0;
 var $gep25 = 0, $gep6 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $2 = sp + 16|0;
 $3 = _strlen($what_arg|0)|0;
 $4 = ($3>>>0)>(4294967279);
 
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $5 = ($3>>>0)<(11);
 
 if ($5) {
  $6 = $3 << 1;
  $7 = $6&255;
  $8 = $2;
  HEAP8[$2] = $7;
  $9 = $2;
  $gep_int = $2;
  $gep = (($gep_int) + 1)|0;
  $10 = $gep;
  
  $__p$0$i$i$i = $10;
 } else {
  $11 = (($3) + 16)|0;
  $12 = $11 & -16;
  $13 = __Znwj($12)|0;
  $gep_int5 = $2;
  $gep6 = (($gep_int5) + 8)|0;
  $14 = $gep6;
  HEAP32[$14>>2] = $13;
  $15 = $12 | 1;
  $gep_int7 = $2;
  $16 = $gep_int7;
  HEAP32[$16>>2] = $15;
  $gep_int8 = $2;
  $gep9 = (($gep_int8) + 4)|0;
  $17 = $gep9;
  HEAP32[$17>>2] = $3;
  
  $__p$0$i$i$i = $13;
 }
 
 _memcpy($__p$0$i$i$i|0,$what_arg|0,$3|0)|0;
 $gep_int10 = $__p$0$i$i$i;
 $gep11 = (($gep_int10) + ($3))|0;
 $18 = $gep11;
 HEAP8[$18] = 0;
 __THREW__ = 0;
 invoke_viii(15,$1|0,$ec|0,$2|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 
 do {
  if ($20) {
   $expanded3 = 69;
   $50 = ___cxa_find_matching_catch(-1,-1)|0;
   $51 = tempRet0;
   
   $$0 = $51;$$01 = $50;
  } else {
   $gep_int12 = $this;
   $21 = $gep_int12;
   __THREW__ = 0;
   invoke_vii(63,$21|0,$1|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   
   if ($23) {
    $expanded4 = 69;
    $52 = ___cxa_find_matching_catch(-1,-1)|0;
    $53 = tempRet0;
    $54 = $1;
    $55 = HEAP8[$1]|0;
    $56 = $55 & 1;
    $57 = ($56<<24>>24)==(0);
    
    if ($57) {
     $$0 = $53;$$01 = $52;
     break;
    }
    $gep_int22 = $1;
    $gep23 = (($gep_int22) + 8)|0;
    $58 = $gep23;
    $59 = HEAP32[$58>>2]|0;
    __ZdlPv($59);
    
    $$0 = $53;$$01 = $52;
    break;
   }
   $24 = $1;
   $25 = HEAP8[$1]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   
   if (!($27)) {
    $gep_int13 = $1;
    $gep14 = (($gep_int13) + 8)|0;
    $28 = $gep14;
    $29 = HEAP32[$28>>2]|0;
    __ZdlPv($29);
    
   }
   $30 = $2;
   $31 = HEAP8[$2]|0;
   $32 = $31 & 1;
   $33 = ($32<<24>>24)==(0);
   
   if (!($33)) {
    $gep_int15 = $2;
    $gep16 = (($gep_int15) + 8)|0;
    $34 = $gep16;
    $35 = HEAP32[$34>>2]|0;
    __ZdlPv($35);
    
   }
   $gep_int17 = $this;
   $36 = $gep_int17;
   $expanded2 = 5416;
   $gep_int18 = 5416;
   $gep19 = (($gep_int18) + 8)|0;
   $expanded1 = $gep19;
   $expanded = $expanded1;
   HEAP32[$36>>2] = $expanded;
   $gep_int20 = $this;
   $gep21 = (($gep_int20) + 8)|0;
   $37 = $gep21;
   $38 = $ec;
   $39 = $37;
   $40 = $ec;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = $37;
   $47 = $46;
   HEAP32[$47>>2] = $42;
   $48 = (($46) + 4)|0;
   $49 = $48;
   HEAP32[$49>>2] = $45;
   STACKTOP = sp;return;
  }
 } while(0);
 
 
 $60 = $2;
 $61 = HEAP8[$2]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 
 if ($63) {
  ___resumeException($$01|0);
  // unreachable
 }
 $gep_int24 = $2;
 $gep25 = (($gep_int24) + 8)|0;
 $64 = $gep25;
 $65 = HEAP32[$64>>2]|0;
 __ZdlPv($65);
 
 ___resumeException($$01|0);
 // unreachable
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt13runtime_errorD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt13runtime_errorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0;
 var $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, label = 0, sp = 0, u$0 = 0, u$13 = 0, u$17 = 0, u$2 = 0, u$20 = 0, u$22 = 0, u$23 = 0, u$25 = 0, u$29 = 0, u$32 = 0, u$40 = 0, u$45 = 0, u$7 = 0;
 sp = STACKTOP;
 $expanded = 5560;
 u$0 = _pthread_mutex_lock($expanded|0)|0;
 $1 = HEAP32[$flag>>2]|0;
 $2 = ($1|0)==(1);
 
 if ($2) {
  while(1) {
   $expanded1 = 5584;
   $expanded2 = 5560;
   u$2 = _pthread_cond_wait($expanded1|0,$expanded2|0)|0;
   $3 = HEAP32[$flag>>2]|0;
   $4 = ($3|0)==(1);
   
   if (!($4)) {
    break;
   }
  }
 }
 $5 = HEAP32[$flag>>2]|0;
 $6 = ($5|0)==(0);
 
 if (!($6)) {
  $expanded12 = 5560;
  u$40 = _pthread_mutex_unlock($expanded12|0)|0;
  
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 $expanded3 = 5560;
 u$7 = invoke_ii(92,$expanded3|0)|0;
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 
 do {
  if (!($8)) {
   __THREW__ = 0;
   invoke_vi($func|0,$arg|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if ($10) {
    break;
   }
   __THREW__ = 0;
   $expanded4 = 5560;
   u$13 = invoke_ii(93,$expanded4|0)|0;
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if ($12) {
    break;
   }
   HEAP32[$flag>>2] = -1;
   __THREW__ = 0;
   $expanded5 = 5560;
   u$17 = invoke_ii(92,$expanded5|0)|0;
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if ($14) {
    break;
   }
   __THREW__ = 0;
   $expanded6 = 5584;
   u$20 = invoke_ii(94,$expanded6|0)|0;
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   
   if ($16) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded7 = 69;
 $17 = ___cxa_find_matching_catch(-1,-1,0)|0;
 u$22 = tempRet0;
 u$23 = ___cxa_begin_catch($17|0)|0;
 __THREW__ = 0;
 $expanded8 = 5560;
 u$25 = invoke_ii(93,$expanded8|0)|0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 
 do {
  if (!($19)) {
   HEAP32[$flag>>2] = 0;
   __THREW__ = 0;
   $expanded9 = 5560;
   u$29 = invoke_ii(92,$expanded9|0)|0;
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   
   if ($21) {
    break;
   }
   __THREW__ = 0;
   $expanded10 = 5584;
   u$32 = invoke_ii(94,$expanded10|0)|0;
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   
   if ($23) {
    break;
   }
   __THREW__ = 0;
   invoke_v(12);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   
   if ($25) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded11 = 69;
 $26 = ___cxa_find_matching_catch(-1,-1)|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(2);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 
 if ($29) {
  $expanded13 = 69;
  $30 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$45 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable
 } else {
  ___resumeException($26|0);
  // unreachable
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $gep = 0, $gep_int = 0, $gep_int7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___cxa_allocate_exception(8)|0;
 $2 = $1;
 __THREW__ = 0;
 $gep_int = 5632;
 $expanded = $gep_int;
 invoke_vii(64,$2|0,$expanded|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 
 if ($4) {
  $expanded6 = 69;
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_free_exception($1|0);
  ___resumeException($6|0);
  // unreachable
 } else {
  $5 = $1;
  $expanded3 = 5304;
  $gep_int7 = 5304;
  $gep = (($gep_int7) + 8)|0;
  $expanded2 = $gep;
  $expanded1 = $expanded2;
  HEAP32[$1>>2] = $expanded1;
  $expanded4 = 5352;
  $expanded5 = 33;
  ___cxa_throw($1|0,$expanded4|0,$expanded5|0);
  // unreachable
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i = 0, $gep = 0, $gep11 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__str;
 $2 = HEAP8[$__str]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 
 if ($4) {
  $5 = $this;
  ;HEAP32[$5+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$1+8>>2]|0;
  
  STACKTOP = sp;return;
 }
 $gep_int = $__str;
 $gep = (($gep_int) + 8)|0;
 $6 = $gep;
 $7 = HEAP32[$6>>2]|0;
 $gep_int1 = $__str;
 $gep2 = (($gep_int1) + 4)|0;
 $8 = $gep2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(4294967279);
 
 if ($10) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $11 = ($9>>>0)<(11);
 
 if ($11) {
  $12 = $9 << 1;
  $13 = $12&255;
  $14 = $this;
  HEAP8[$this] = $13;
  $15 = $this;
  $gep_int3 = $this;
  $gep4 = (($gep_int3) + 1)|0;
  $16 = $gep4;
  
  $__p$0$i$i = $16;
 } else {
  $17 = (($9) + 16)|0;
  $18 = $17 & -16;
  $19 = __Znwj($18)|0;
  $gep_int5 = $this;
  $gep6 = (($gep_int5) + 8)|0;
  $20 = $gep6;
  HEAP32[$20>>2] = $19;
  $21 = $18 | 1;
  $gep_int7 = $this;
  $22 = $gep_int7;
  HEAP32[$22>>2] = $21;
  $gep_int8 = $this;
  $gep9 = (($gep_int8) + 4)|0;
  $23 = $gep9;
  HEAP32[$23>>2] = $9;
  
  $__p$0$i$i = $19;
 }
 
 _memcpy($__p$0$i$i|0,$7|0,$9|0)|0;
 $gep_int10 = $__p$0$i$i;
 $gep11 = (($gep_int10) + ($9))|0;
 $24 = $gep11;
 HEAP8[$24] = 0;
 
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $gep = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0;
 var $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__sz>>>0)>(4294967279);
 
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $2 = ($__sz>>>0)<(11);
 
 if ($2) {
  $3 = $__sz << 1;
  $4 = $3&255;
  $5 = $this;
  HEAP8[$this] = $4;
  $6 = $this;
  $gep_int = $this;
  $gep = (($gep_int) + 1)|0;
  $7 = $gep;
  
  $__p$0 = $7;
 } else {
  $8 = (($__sz) + 16)|0;
  $9 = $8 & -16;
  $10 = __Znwj($9)|0;
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 8)|0;
  $11 = $gep2;
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  $gep_int3 = $this;
  $13 = $gep_int3;
  HEAP32[$13>>2] = $12;
  $gep_int4 = $this;
  $gep5 = (($gep_int4) + 4)|0;
  $14 = $gep5;
  HEAP32[$14>>2] = $__sz;
  
  $__p$0 = $10;
 }
 
 _memcpy($__p$0|0,$__s|0,$__sz|0)|0;
 $gep_int6 = $__p$0;
 $gep7 = (($gep_int6) + ($__sz))|0;
 $15 = $gep7;
 HEAP8[$15] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $gep = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0;
 var $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__n>>>0)>(4294967279);
 
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $2 = ($__n>>>0)<(11);
 
 if ($2) {
  $3 = $__n << 1;
  $4 = $3&255;
  $5 = $this;
  HEAP8[$this] = $4;
  $6 = $this;
  $gep_int = $this;
  $gep = (($gep_int) + 1)|0;
  $7 = $gep;
  
  $__p$0 = $7;
  
  _memset($__p$0|0,$__c|0,$__n|0)|0;
  $gep_int6 = $__p$0;
  $gep7 = (($gep_int6) + ($__n))|0;
  $15 = $gep7;
  HEAP8[$15] = 0;
  STACKTOP = sp;return;
 } else {
  $8 = (($__n) + 16)|0;
  $9 = $8 & -16;
  $10 = __Znwj($9)|0;
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 8)|0;
  $11 = $gep2;
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  $gep_int3 = $this;
  $13 = $gep_int3;
  HEAP32[$13>>2] = $12;
  $gep_int4 = $this;
  $gep5 = (($gep_int4) + 4)|0;
  $14 = $gep5;
  HEAP32[$14>>2] = $__n;
  
  $__p$0 = $10;
  
  _memset($__p$0|0,$__c|0,$__n|0)|0;
  $gep_int6 = $__p$0;
  $gep7 = (($gep_int6) + ($__n))|0;
  $15 = $gep7;
  HEAP8[$15] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 
 if ($4) {
  STACKTOP = sp;return;
 }
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $5 = $gep;
 $6 = HEAP32[$5>>2]|0;
 __ZdlPv($6);
 
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0;
 var $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = _strlen($__s|0)|0;
 $2 = $this;
 $3 = HEAP8[$this]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 
 if ($5) {
  $10 = $3;$11 = 10;
 } else {
  $gep_int = $this;
  $6 = $gep_int;
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -2;
  $phitmp$i$i = (($8) + -1)|0;
  $9 = $7&255;
  
  $10 = $9;$11 = $phitmp$i$i;
 }
 
 
 $12 = ($11>>>0)<($1>>>0);
 $13 = $10 & 1;
 $14 = ($13<<24>>24)==(0);
 
 if ($12) {
  
  if ($14) {
   $29 = $10&255;
   $30 = $29 >>> 1;
   
   $31 = $30;
  } else {
   $gep_int8 = $this;
   $gep9 = (($gep_int8) + 4)|0;
   $27 = $gep9;
   $28 = HEAP32[$27>>2]|0;
   
   $31 = $28;
  }
  
  $32 = (($1) - ($11))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$11,$32,$31,0,$31,$1,$__s);
  
  STACKTOP = sp;return $this|0;
 }
 
 if ($14) {
  $17 = $this;
  $gep_int2 = $this;
  $gep3 = (($gep_int2) + 1)|0;
  $18 = $gep3;
  
  $19 = $18;
 } else {
  $gep_int1 = $this;
  $gep = (($gep_int1) + 8)|0;
  $15 = $gep;
  $16 = HEAP32[$15>>2]|0;
  
  $19 = $16;
 }
 
 _memmove($19|0,$__s|0,$1|0)|0;
 $gep_int4 = $19;
 $gep5 = (($gep_int4) + ($1))|0;
 $20 = $gep5;
 HEAP8[$20] = 0;
 $21 = HEAP8[$this]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 
 if ($23) {
  $25 = $1 << 1;
  $26 = $25&255;
  HEAP8[$this] = $26;
  
  STACKTOP = sp;return $this|0;
 } else {
  $gep_int6 = $this;
  $gep7 = (($gep_int6) + 4)|0;
  $24 = $gep7;
  HEAP32[$24>>2] = $1;
  
  STACKTOP = sp;return $this|0;
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0;
 var $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 
 if ($4) {
  $7 = $2&255;
  $8 = $7 >>> 1;
  
  $9 = $8;
 } else {
  $gep_int = $this;
  $gep = (($gep_int) + 4)|0;
  $5 = $gep;
  $6 = HEAP32[$5>>2]|0;
  
  $9 = $6;
 }
 
 $10 = ($9>>>0)<($__n>>>0);
 
 if ($10) {
  $11 = (($__n) - ($9))|0;
  u$4 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$11,$__c)|0;
  
  STACKTOP = sp;return;
 }
 
 if ($4) {
  $16 = $this;
  $gep_int7 = $this;
  $gep8 = (($gep_int7) + 1)|0;
  $gep9 = (($gep8) + ($__n))|0;
  $17 = $gep9;
  HEAP8[$17] = 0;
  $18 = $__n << 1;
  $19 = $18&255;
  HEAP8[$this] = $19;
  
  STACKTOP = sp;return;
 } else {
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 8)|0;
  $12 = $gep2;
  $13 = HEAP32[$12>>2]|0;
  $gep_int3 = $13;
  $gep4 = (($gep_int3) + ($__n))|0;
  $14 = $gep4;
  HEAP8[$14] = 0;
  $gep_int5 = $this;
  $gep6 = (($gep_int5) + 4)|0;
  $15 = $gep6;
  HEAP32[$15>>2] = $__n;
  
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $gep = 0, $gep11 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__n|0)==(0);
 
 if ($1) {
  STACKTOP = sp;return $this|0;
 }
 $2 = $this;
 $3 = HEAP8[$this]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 
 if ($5) {
  $10 = $3;$11 = 10;
 } else {
  $gep_int = $this;
  $6 = $gep_int;
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -2;
  $phitmp$i = (($8) + -1)|0;
  $9 = $7&255;
  
  $10 = $9;$11 = $phitmp$i;
 }
 
 
 $12 = $10 & 1;
 $13 = ($12<<24>>24)==(0);
 
 if ($13) {
  $16 = $10&255;
  $17 = $16 >>> 1;
  
  $18 = $17;
 } else {
  $gep_int1 = $this;
  $gep = (($gep_int1) + 4)|0;
  $14 = $gep;
  $15 = HEAP32[$14>>2]|0;
  
  $18 = $15;
 }
 
 $19 = (($11) - ($18))|0;
 $20 = ($19>>>0)<($__n>>>0);
 
 if ($20) {
  $21 = (($__n) - ($11))|0;
  $22 = (($21) + ($18))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$11,$22,$18,$18,0,0);
  $$pre = HEAP8[$this]|0;
  
  $23 = $$pre;
 } else {
  $23 = $10;
 }
 
 $24 = $23 & 1;
 $25 = ($24<<24>>24)==(0);
 
 if ($25) {
  $28 = $this;
  $gep_int4 = $this;
  $gep5 = (($gep_int4) + 1)|0;
  $29 = $gep5;
  
  $30 = $29;
 } else {
  $gep_int2 = $this;
  $gep3 = (($gep_int2) + 8)|0;
  $26 = $gep3;
  $27 = HEAP32[$26>>2]|0;
  
  $30 = $27;
 }
 
 $gep_int6 = $30;
 $gep7 = (($gep_int6) + ($18))|0;
 $31 = $gep7;
 _memset($31|0,$__c|0,$__n|0)|0;
 $32 = (($18) + ($__n))|0;
 $33 = HEAP8[$this]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 
 if ($35) {
  $37 = $32 << 1;
  $38 = $37&255;
  HEAP8[$this] = $38;
  
 } else {
  $gep_int8 = $this;
  $gep9 = (($gep_int8) + 4)|0;
  $36 = $gep9;
  HEAP32[$36>>2] = $32;
  
 }
 $gep_int10 = $30;
 $gep11 = (($gep_int10) + ($32))|0;
 $39 = $gep11;
 HEAP8[$39] = 0;
 
 STACKTOP = sp;return $this|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0;
 var $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $expanded = 0, $gep = 0, $gep11 = 0, $gep14 = 0, $gep16 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int2 = 0, $gep_int4 = 0;
 var $gep_int6 = 0, $gep_int8 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0, u$17 = 0, u$18 = 0;
 sp = STACKTOP;
 $1 = ($__res_arg>>>0)>(4294967279);
 
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $2 = $this;
 $3 = HEAP8[$this]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 
 if ($5) {
  $10 = $3;$11 = 10;
 } else {
  $gep_int = $this;
  $6 = $gep_int;
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -2;
  $phitmp$i = (($8) + -1)|0;
  $9 = $7&255;
  
  $10 = $9;$11 = $phitmp$i;
 }
 
 
 $12 = $10 & 1;
 $13 = ($12<<24>>24)==(0);
 
 if ($13) {
  $16 = $10&255;
  $17 = $16 >>> 1;
  
  $18 = $17;
 } else {
  $gep_int1 = $this;
  $gep = (($gep_int1) + 4)|0;
  $14 = $gep;
  $15 = HEAP32[$14>>2]|0;
  
  $18 = $15;
 }
 
 $19 = ($18>>>0)>($__res_arg>>>0);
 $20 = $19 ? $18 : $__res_arg;
 $21 = ($20>>>0)<(11);
 
 if ($21) {
  $24 = 10;
 } else {
  $22 = (($20) + 16)|0;
  $23 = $22 & -16;
  $phitmp$i2 = (($23) + -1)|0;
  
  $24 = $phitmp$i2;
 }
 
 $25 = ($24|0)==($11|0);
 
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = ($24|0)==(10);
 
 do {
  if ($26) {
   $27 = $this;
   $gep_int2 = $this;
   $gep3 = (($gep_int2) + 1)|0;
   $28 = $gep3;
   $gep_int4 = $this;
   $gep5 = (($gep_int4) + 8)|0;
   $29 = $gep5;
   $30 = HEAP32[$29>>2]|0;
   
   $__new_data$1 = $28;$__now_long$0$off0 = 0;$__p$0 = $30;$__was_long$0$off0 = 1;
  } else {
   $31 = ($24>>>0)>($11>>>0);
   $32 = (($24) + 1)|0;
   
   do {
    if ($31) {
     $33 = __Znwj($32)|0;
     
     $__new_data$0 = $33;
    } else {
     __THREW__ = 0;
     $34 = invoke_ii(70,$32|0)|0;
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     
     if (!($36)) {
      $__new_data$0 = $34;
      break;
     }
     $expanded = 69;
     $37 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$17 = tempRet0;
     u$18 = ___cxa_begin_catch($37|0)|0;
     ___cxa_end_catch();
     
     STACKTOP = sp;return;
    }
   } while(0);
   
   $38 = $10 & 1;
   $39 = ($38<<24>>24)==(0);
   
   if ($39) {
    $42 = $this;
    $gep_int8 = $this;
    $gep9 = (($gep_int8) + 1)|0;
    $43 = $gep9;
    
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $43;$__was_long$0$off0 = 0;
    break;
   } else {
    $gep_int6 = $this;
    $gep7 = (($gep_int6) + 8)|0;
    $40 = $gep7;
    $41 = HEAP32[$40>>2]|0;
    
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $41;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 
 
 
 
 $44 = $10 & 1;
 $45 = ($44<<24>>24)==(0);
 
 if ($45) {
  $48 = $10&255;
  $49 = $48 >>> 1;
  
  $50 = $49;
 } else {
  $gep_int10 = $this;
  $gep11 = (($gep_int10) + 4)|0;
  $46 = $gep11;
  $47 = HEAP32[$46>>2]|0;
  
  $50 = $47;
 }
 
 $51 = (($50) + 1)|0;
 _memcpy($__new_data$1|0,$__p$0|0,$51|0)|0;
 
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
  
 }
 
 if ($__now_long$0$off0) {
  $52 = (($24) + 1)|0;
  $53 = $52 | 1;
  $gep_int12 = $this;
  $54 = $gep_int12;
  HEAP32[$54>>2] = $53;
  $gep_int13 = $this;
  $gep14 = (($gep_int13) + 4)|0;
  $55 = $gep14;
  HEAP32[$55>>2] = $18;
  $gep_int15 = $this;
  $gep16 = (($gep_int15) + 8)|0;
  $56 = $gep16;
  HEAP32[$56>>2] = $__new_data$1;
  
  STACKTOP = sp;return;
 } else {
  $57 = $18 << 1;
  $58 = $57&255;
  HEAP8[$this] = $58;
  
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, $gep = 0, $gep11 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0;
 var $gep_int10 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)!=(0);
 
 if ($4) {
  $gep_int = $this;
  $7 = $gep_int;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & -2;
  $10 = (($9) + -1)|0;
  $gep_int1 = $this;
  $gep = (($gep_int1) + 4)|0;
  $11 = $gep;
  $12 = HEAP32[$11>>2]|0;
  
  $__cap$0 = $10;$__sz$0 = $12;
 } else {
  $5 = $2&255;
  $6 = $5 >>> 1;
  
  $__cap$0 = 10;$__sz$0 = $6;
 }
 
 
 $13 = ($__sz$0|0)==($__cap$0|0);
 
 if ($13) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $14 = HEAP8[$this]|0;
  $15 = $14 & 1;
  $16 = ($15<<24>>24)==(0);
  
  if ($16) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  
  if ($4) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = $this;
  $gep_int2 = $this;
  $gep3 = (($gep_int2) + 1)|0;
  $18 = $gep3;
  $19 = $__sz$0 << 1;
  $20 = (($19) + 2)|0;
  $21 = $20&255;
  HEAP8[$this] = $21;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  
  $$pn = $18;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
 }
 else if ((label|0) == 8) {
  $gep_int4 = $this;
  $gep5 = (($gep_int4) + 8)|0;
  $22 = $gep5;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($__sz$0) + 1)|0;
  $gep_int6 = $this;
  $gep7 = (($gep_int6) + 4)|0;
  $25 = $gep7;
  HEAP32[$25>>2] = $24;
  
  $$pn = $23;$__p$0$sum$pre$phiZZZ2D = $24;
 }
 
 
 $gep_int8 = $$pn;
 $gep9 = (($gep_int8) + ($__sz$0))|0;
 $__p$0 = $gep9;
 HEAP8[$__p$0] = $__c;
 $gep_int10 = $$pn;
 $gep11 = (($gep_int10) + ($__p$0$sum$pre$phiZZZ2D))|0;
 $26 = $gep11;
 HEAP8[$26] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep11 = 0;
 var $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 
 if ($4) {
  $10 = 10;$9 = $2;
 } else {
  $gep_int = $this;
  $5 = $gep_int;
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $6&255;
  
  $10 = $phitmp$i;$9 = $8;
 }
 
 
 $11 = $9 & 1;
 $12 = ($11<<24>>24)==(0);
 
 if ($12) {
  $15 = $9&255;
  $16 = $15 >>> 1;
  
  $17 = $16;
 } else {
  $gep_int1 = $this;
  $gep = (($gep_int1) + 4)|0;
  $13 = $gep;
  $14 = HEAP32[$13>>2]|0;
  
  $17 = $14;
 }
 
 $18 = (($10) - ($17))|0;
 $19 = ($18>>>0)<($__n>>>0);
 
 if ($19) {
  $37 = (($__n) - ($10))|0;
  $38 = (($37) + ($17))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$10,$38,$17,$17,0,$__n,$__s);
  
  STACKTOP = sp;return $this|0;
 }
 $20 = ($__n|0)==(0);
 
 if ($20) {
  STACKTOP = sp;return $this|0;
 }
 $21 = $9 & 1;
 $22 = ($21<<24>>24)==(0);
 
 if ($22) {
  $25 = $this;
  $gep_int4 = $this;
  $gep5 = (($gep_int4) + 1)|0;
  $26 = $gep5;
  
  $27 = $26;
 } else {
  $gep_int2 = $this;
  $gep3 = (($gep_int2) + 8)|0;
  $23 = $gep3;
  $24 = HEAP32[$23>>2]|0;
  
  $27 = $24;
 }
 
 $gep_int6 = $27;
 $gep7 = (($gep_int6) + ($17))|0;
 $28 = $gep7;
 _memcpy($28|0,$__s|0,$__n|0)|0;
 $29 = (($17) + ($__n))|0;
 $30 = HEAP8[$this]|0;
 $31 = $30 & 1;
 $32 = ($31<<24>>24)==(0);
 
 if ($32) {
  $34 = $29 << 1;
  $35 = $34&255;
  HEAP8[$this] = $35;
  
 } else {
  $gep_int8 = $this;
  $gep9 = (($gep_int8) + 4)|0;
  $33 = $gep9;
  HEAP32[$33>>2] = $29;
  
 }
 $gep_int10 = $27;
 $gep11 = (($gep_int10) + ($29))|0;
 $36 = $gep11;
 HEAP8[$36] = 0;
 
 STACKTOP = sp;return $this|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0;
 var $gep13 = 0, $gep15 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (-18 - ($__old_cap))|0;
 $2 = ($1>>>0)<($__delta_cap>>>0);
 
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $3 = $this;
 $4 = HEAP8[$this]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 
 if ($6) {
  $9 = $this;
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 1)|0;
  $10 = $gep2;
  
  $11 = $10;
 } else {
  $gep_int = $this;
  $gep = (($gep_int) + 8)|0;
  $7 = $gep;
  $8 = HEAP32[$7>>2]|0;
  
  $11 = $8;
 }
 
 $12 = ($__old_cap>>>0)<(2147483623);
 
 do {
  if ($12) {
   $13 = (($__delta_cap) + ($__old_cap))|0;
   $14 = $__old_cap << 1;
   $15 = ($13>>>0)<($14>>>0);
   $16 = $15 ? $14 : $13;
   $17 = ($16>>>0)<(11);
   
   if ($17) {
    $20 = 11;
    break;
   }
   $18 = (($16) + 16)|0;
   $19 = $18 & -16;
   
   $20 = $19;
  } else {
   $20 = -17;
  }
 } while(0);
 
 $21 = __Znwj($20)|0;
 $22 = ($__n_copy|0)==(0);
 
 if (!($22)) {
  _memcpy($21|0,$11|0,$__n_copy|0)|0;
  
 }
 $23 = ($__n_add|0)==(0);
 
 if (!($23)) {
  $gep_int3 = $21;
  $gep4 = (($gep_int3) + ($__n_copy))|0;
  $24 = $gep4;
  _memcpy($24|0,$__p_new_stuff|0,$__n_add|0)|0;
  
 }
 $25 = (($__old_sz) - ($__n_del))|0;
 $26 = ($25|0)==($__n_copy|0);
 
 if (!($26)) {
  $27 = (($25) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $gep_int5 = $21;
  $gep6 = (($gep_int5) + ($$sum))|0;
  $28 = $gep6;
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $gep_int7 = $11;
  $gep8 = (($gep_int7) + ($$sum1))|0;
  $29 = $gep8;
  _memcpy($28|0,$29|0,$27|0)|0;
  
 }
 $30 = ($__old_cap|0)==(10);
 
 if (!($30)) {
  __ZdlPv($11);
  
 }
 $gep_int9 = $this;
 $gep10 = (($gep_int9) + 8)|0;
 $31 = $gep10;
 HEAP32[$31>>2] = $21;
 $32 = $20 | 1;
 $gep_int11 = $this;
 $33 = $gep_int11;
 HEAP32[$33>>2] = $32;
 $34 = (($25) + ($__n_add))|0;
 $gep_int12 = $this;
 $gep13 = (($gep_int12) + 4)|0;
 $35 = $gep13;
 HEAP32[$35>>2] = $34;
 $gep_int14 = $21;
 $gep15 = (($gep_int14) + ($34))|0;
 $36 = $gep15;
 HEAP8[$36] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0;
 var $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (-17 - ($__old_cap))|0;
 $2 = ($1>>>0)<($__delta_cap>>>0);
 
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $3 = $this;
 $4 = HEAP8[$this]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 
 if ($6) {
  $9 = $this;
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 1)|0;
  $10 = $gep2;
  
  $11 = $10;
 } else {
  $gep_int = $this;
  $gep = (($gep_int) + 8)|0;
  $7 = $gep;
  $8 = HEAP32[$7>>2]|0;
  
  $11 = $8;
 }
 
 $12 = ($__old_cap>>>0)<(2147483623);
 
 do {
  if ($12) {
   $13 = (($__delta_cap) + ($__old_cap))|0;
   $14 = $__old_cap << 1;
   $15 = ($13>>>0)<($14>>>0);
   $16 = $15 ? $14 : $13;
   $17 = ($16>>>0)<(11);
   
   if ($17) {
    $20 = 11;
    break;
   }
   $18 = (($16) + 16)|0;
   $19 = $18 & -16;
   
   $20 = $19;
  } else {
   $20 = -17;
  }
 } while(0);
 
 $21 = __Znwj($20)|0;
 $22 = ($__n_copy|0)==(0);
 
 if (!($22)) {
  _memcpy($21|0,$11|0,$__n_copy|0)|0;
  
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $gep_int3 = $21;
  $gep4 = (($gep_int3) + ($$sum))|0;
  $26 = $gep4;
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $gep_int5 = $11;
  $gep6 = (($gep_int5) + ($$sum1))|0;
  $27 = $gep6;
  _memcpy($26|0,$27|0,$25|0)|0;
  
 }
 $28 = ($__old_cap|0)==(10);
 
 if ($28) {
  $gep_int7 = $this;
  $gep8 = (($gep_int7) + 8)|0;
  $29 = $gep8;
  HEAP32[$29>>2] = $21;
  $30 = $20 | 1;
  $gep_int9 = $this;
  $31 = $gep_int9;
  HEAP32[$31>>2] = $30;
  STACKTOP = sp;return;
 }
 __ZdlPv($11);
 
 $gep_int7 = $this;
 $gep8 = (($gep_int7) + 8)|0;
 $29 = $gep8;
 HEAP32[$29>>2] = $21;
 $30 = $20 | 1;
 $gep_int9 = $this;
 $31 = $gep_int9;
 HEAP32[$31>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $gep = 0, $gep2 = 0, $gep5 = 0;
 var $gep7 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0, u$10 = 0;
 sp = STACKTOP;
 $1 = ($__sz>>>0)>(1073741807);
 
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $2 = ($__sz>>>0)<(2);
 
 if ($2) {
  $3 = $__sz << 1;
  $4 = $3&255;
  $5 = $this;
  HEAP8[$this] = $4;
  $gep_int = $this;
  $gep = (($gep_int) + 4)|0;
  $6 = $gep;
  
  $__p$0 = $6;
 } else {
  $7 = (($__sz) + 4)|0;
  $8 = $7 & -4;
  $9 = $8 << 2;
  $10 = __Znwj($9)|0;
  $11 = $10;
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 8)|0;
  $12 = $gep2;
  HEAP32[$12>>2] = $11;
  $13 = $8 | 1;
  $gep_int3 = $this;
  $14 = $gep_int3;
  HEAP32[$14>>2] = $13;
  $gep_int4 = $this;
  $gep5 = (($gep_int4) + 4)|0;
  $15 = $gep5;
  HEAP32[$15>>2] = $__sz;
  
  $__p$0 = $11;
 }
 
 u$10 = _wmemcpy($__p$0,$__s,$__sz)|0;
 $gep_int6 = $__p$0;
 $gep_array = $__sz<<2;
 $gep7 = (($gep_int6) + ($gep_array))|0;
 $16 = $gep7;
 HEAP32[$16>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $gep = 0, $gep2 = 0, $gep5 = 0;
 var $gep7 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0, u$10 = 0;
 sp = STACKTOP;
 $1 = ($__n>>>0)>(1073741807);
 
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $2 = ($__n>>>0)<(2);
 
 if ($2) {
  $3 = $__n << 1;
  $4 = $3&255;
  $5 = $this;
  HEAP8[$this] = $4;
  $gep_int = $this;
  $gep = (($gep_int) + 4)|0;
  $6 = $gep;
  
  $__p$0 = $6;
 } else {
  $7 = (($__n) + 4)|0;
  $8 = $7 & -4;
  $9 = $8 << 2;
  $10 = __Znwj($9)|0;
  $11 = $10;
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 8)|0;
  $12 = $gep2;
  HEAP32[$12>>2] = $11;
  $13 = $8 | 1;
  $gep_int3 = $this;
  $14 = $gep_int3;
  HEAP32[$14>>2] = $13;
  $gep_int4 = $this;
  $gep5 = (($gep_int4) + 4)|0;
  $15 = $gep5;
  HEAP32[$15>>2] = $__n;
  
  $__p$0 = $11;
 }
 
 u$10 = _wmemset($__p$0,$__c,$__n)|0;
 $gep_int6 = $__p$0;
 $gep_array = $__n<<2;
 $gep7 = (($gep_int6) + ($gep_array))|0;
 $16 = $gep7;
 HEAP32[$16>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 
 if ($4) {
  STACKTOP = sp;return;
 }
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $5 = $gep;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 __ZdlPv($7);
 
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = _wcslen($__s)|0;
 $2 = __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$1)|0;
 STACKTOP = sp;return $2|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, $gep_int4 = 0;
 var $gep_int6 = 0, $gep_int8 = 0, $phitmp$i = 0, label = 0, sp = 0, u$6 = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 
 if ($4) {
  $10 = 1;$9 = $2;
 } else {
  $gep_int = $this;
  $5 = $gep_int;
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $6&255;
  
  $10 = $phitmp$i;$9 = $8;
 }
 
 
 $11 = ($10>>>0)<($__n>>>0);
 $12 = $9 & 1;
 $13 = ($12<<24>>24)==(0);
 
 if ($11) {
  
  if ($13) {
   $27 = $9&255;
   $28 = $27 >>> 1;
   
   $29 = $28;
  } else {
   $gep_int8 = $this;
   $gep9 = (($gep_int8) + 4)|0;
   $25 = $gep9;
   $26 = HEAP32[$25>>2]|0;
   
   $29 = $26;
  }
  
  $30 = (($__n) - ($10))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$10,$30,$29,0,$29,$__n,$__s);
  
  STACKTOP = sp;return $this|0;
 }
 
 if ($13) {
  $gep_int2 = $this;
  $gep3 = (($gep_int2) + 4)|0;
  $16 = $gep3;
  
  $17 = $16;
 } else {
  $gep_int1 = $this;
  $gep = (($gep_int1) + 8)|0;
  $14 = $gep;
  $15 = HEAP32[$14>>2]|0;
  
  $17 = $15;
 }
 
 u$6 = _wmemmove($17,$__s,$__n)|0;
 $gep_int4 = $17;
 $gep_array = $__n<<2;
 $gep5 = (($gep_int4) + ($gep_array))|0;
 $18 = $gep5;
 HEAP32[$18>>2] = 0;
 $19 = HEAP8[$this]|0;
 $20 = $19 & 1;
 $21 = ($20<<24>>24)==(0);
 
 if ($21) {
  $23 = $__n << 1;
  $24 = $23&255;
  HEAP8[$this] = $24;
  
  STACKTOP = sp;return $this|0;
 } else {
  $gep_int6 = $this;
  $gep7 = (($gep_int6) + 4)|0;
  $22 = $gep7;
  HEAP32[$22>>2] = $__n;
  
  STACKTOP = sp;return $this|0;
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $expanded = 0, $gep = 0, $gep11 = 0, $gep14 = 0, $gep16 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int2 = 0;
 var $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0, u$17 = 0, u$18 = 0, u$27 = 0;
 sp = STACKTOP;
 $1 = ($__res_arg>>>0)>(1073741807);
 
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $2 = $this;
 $3 = HEAP8[$this]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 
 if ($5) {
  $10 = $3;$11 = 1;
 } else {
  $gep_int = $this;
  $6 = $gep_int;
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -2;
  $phitmp$i = (($8) + -1)|0;
  $9 = $7&255;
  
  $10 = $9;$11 = $phitmp$i;
 }
 
 
 $12 = $10 & 1;
 $13 = ($12<<24>>24)==(0);
 
 if ($13) {
  $16 = $10&255;
  $17 = $16 >>> 1;
  
  $18 = $17;
 } else {
  $gep_int1 = $this;
  $gep = (($gep_int1) + 4)|0;
  $14 = $gep;
  $15 = HEAP32[$14>>2]|0;
  
  $18 = $15;
 }
 
 $19 = ($18>>>0)>($__res_arg>>>0);
 $20 = $19 ? $18 : $__res_arg;
 $21 = ($20>>>0)<(2);
 
 if ($21) {
  $24 = 1;
 } else {
  $22 = (($20) + 4)|0;
  $23 = $22 & -4;
  $phitmp$i2 = (($23) + -1)|0;
  
  $24 = $phitmp$i2;
 }
 
 $25 = ($24|0)==($11|0);
 
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = ($24|0)==(1);
 
 do {
  if ($26) {
   $gep_int2 = $this;
   $gep3 = (($gep_int2) + 4)|0;
   $27 = $gep3;
   $gep_int4 = $this;
   $gep5 = (($gep_int4) + 8)|0;
   $28 = $gep5;
   $29 = HEAP32[$28>>2]|0;
   
   $__new_data$1 = $27;$__now_long$0$off0 = 0;$__p$0 = $29;$__was_long$0$off0 = 1;
  } else {
   $30 = ($24>>>0)>($11>>>0);
   $31 = $24 << 2;
   $32 = (($31) + 4)|0;
   
   do {
    if ($30) {
     $33 = __Znwj($32)|0;
     
     $$sink = $33;
    } else {
     __THREW__ = 0;
     $34 = invoke_ii(70,$32|0)|0;
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     
     if (!($36)) {
      $$sink = $34;
      break;
     }
     $expanded = 69;
     $37 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$17 = tempRet0;
     u$18 = ___cxa_begin_catch($37|0)|0;
     ___cxa_end_catch();
     
     STACKTOP = sp;return;
    }
   } while(0);
   
   $38 = $$sink;
   $39 = $10 & 1;
   $40 = ($39<<24>>24)==(0);
   
   if ($40) {
    $gep_int8 = $this;
    $gep9 = (($gep_int8) + 4)|0;
    $43 = $gep9;
    
    $__new_data$1 = $38;$__now_long$0$off0 = 1;$__p$0 = $43;$__was_long$0$off0 = 0;
    break;
   } else {
    $gep_int6 = $this;
    $gep7 = (($gep_int6) + 8)|0;
    $41 = $gep7;
    $42 = HEAP32[$41>>2]|0;
    
    $__new_data$1 = $38;$__now_long$0$off0 = 1;$__p$0 = $42;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 
 
 
 
 $44 = $10 & 1;
 $45 = ($44<<24>>24)==(0);
 
 if ($45) {
  $48 = $10&255;
  $49 = $48 >>> 1;
  
  $50 = $49;
 } else {
  $gep_int10 = $this;
  $gep11 = (($gep_int10) + 4)|0;
  $46 = $gep11;
  $47 = HEAP32[$46>>2]|0;
  
  $50 = $47;
 }
 
 $51 = (($50) + 1)|0;
 u$27 = _wmemcpy($__new_data$1,$__p$0,$51)|0;
 
 if ($__was_long$0$off0) {
  $52 = $__p$0;
  __ZdlPv($52);
  
 }
 
 if ($__now_long$0$off0) {
  $53 = (($24) + 1)|0;
  $54 = $53 | 1;
  $gep_int12 = $this;
  $55 = $gep_int12;
  HEAP32[$55>>2] = $54;
  $gep_int13 = $this;
  $gep14 = (($gep_int13) + 4)|0;
  $56 = $gep14;
  HEAP32[$56>>2] = $18;
  $gep_int15 = $this;
  $gep16 = (($gep_int15) + 8)|0;
  $57 = $gep16;
  HEAP32[$57>>2] = $__new_data$1;
  
  STACKTOP = sp;return;
 } else {
  $58 = $18 << 1;
  $59 = $58&255;
  HEAP8[$this] = $59;
  
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, $gep = 0, $gep12 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_array = 0, $gep_array11 = 0, $gep_int = 0;
 var $gep_int1 = 0, $gep_int10 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)!=(0);
 
 if ($4) {
  $gep_int = $this;
  $7 = $gep_int;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & -2;
  $10 = (($9) + -1)|0;
  $gep_int1 = $this;
  $gep = (($gep_int1) + 4)|0;
  $11 = $gep;
  $12 = HEAP32[$11>>2]|0;
  
  $__cap$0 = $10;$__sz$0 = $12;
 } else {
  $5 = $2&255;
  $6 = $5 >>> 1;
  
  $__cap$0 = 1;$__sz$0 = $6;
 }
 
 
 $13 = ($__sz$0|0)==($__cap$0|0);
 
 if ($13) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $14 = HEAP8[$this]|0;
  $15 = $14 & 1;
  $16 = ($15<<24>>24)==(0);
  
  if ($16) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  
  if ($4) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $gep_int2 = $this;
  $gep3 = (($gep_int2) + 4)|0;
  $17 = $gep3;
  $18 = $__sz$0 << 1;
  $19 = (($18) + 2)|0;
  $20 = $19&255;
  HEAP8[$this] = $20;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  
  $$pn = $17;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
 }
 else if ((label|0) == 8) {
  $gep_int4 = $this;
  $gep5 = (($gep_int4) + 8)|0;
  $21 = $gep5;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__sz$0) + 1)|0;
  $gep_int6 = $this;
  $gep7 = (($gep_int6) + 4)|0;
  $24 = $gep7;
  HEAP32[$24>>2] = $23;
  
  $$pn = $22;$__p$0$sum$pre$phiZZZ2D = $23;
 }
 
 
 $gep_int8 = $$pn;
 $gep_array = $__sz$0<<2;
 $gep9 = (($gep_int8) + ($gep_array))|0;
 $__p$0 = $gep9;
 HEAP32[$__p$0>>2] = $__c;
 $gep_int10 = $$pn;
 $gep_array11 = $__p$0$sum$pre$phiZZZ2D<<2;
 $gep12 = (($gep_int10) + ($gep_array11))|0;
 $25 = $gep12;
 HEAP32[$25>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $gep = 0, $gep10 = 0, $gep12 = 0, $gep15 = 0, $gep18 = 0, $gep2 = 0, $gep4 = 0, $gep7 = 0, $gep_array = 0, $gep_array17 = 0, $gep_array6 = 0, $gep_array9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int3 = 0, $gep_int5 = 0;
 var $gep_int8 = 0, label = 0, sp = 0, u$10 = 0, u$13 = 0, u$16 = 0;
 sp = STACKTOP;
 $1 = (1073741806 - ($__old_cap))|0;
 $2 = ($1>>>0)<($__delta_cap>>>0);
 
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $3 = $this;
 $4 = HEAP8[$this]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 
 if ($6) {
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 4)|0;
  $9 = $gep2;
  
  $10 = $9;
 } else {
  $gep_int = $this;
  $gep = (($gep_int) + 8)|0;
  $7 = $gep;
  $8 = HEAP32[$7>>2]|0;
  
  $10 = $8;
 }
 
 $11 = ($__old_cap>>>0)<(536870887);
 
 do {
  if ($11) {
   $12 = (($__delta_cap) + ($__old_cap))|0;
   $13 = $__old_cap << 1;
   $14 = ($12>>>0)<($13>>>0);
   $15 = $14 ? $13 : $12;
   $16 = ($15>>>0)<(2);
   
   if ($16) {
    $19 = 2;
    break;
   }
   $17 = (($15) + 4)|0;
   $18 = $17 & -4;
   
   $19 = $18;
  } else {
   $19 = 1073741807;
  }
 } while(0);
 
 $20 = $19 << 2;
 $21 = __Znwj($20)|0;
 $22 = $21;
 $23 = ($__n_copy|0)==(0);
 
 if (!($23)) {
  u$10 = _wmemcpy($22,$10,$__n_copy)|0;
  
 }
 $24 = ($__n_add|0)==(0);
 
 if (!($24)) {
  $gep_int3 = $21;
  $gep_array = $__n_copy<<2;
  $gep4 = (($gep_int3) + ($gep_array))|0;
  $25 = $gep4;
  u$13 = _wmemcpy($25,$__p_new_stuff,$__n_add)|0;
  
 }
 $26 = (($__old_sz) - ($__n_del))|0;
 $27 = ($26|0)==($__n_copy|0);
 
 if (!($27)) {
  $28 = (($26) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $gep_int5 = $21;
  $gep_array6 = $$sum<<2;
  $gep7 = (($gep_int5) + ($gep_array6))|0;
  $29 = $gep7;
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $gep_int8 = $10;
  $gep_array9 = $$sum1<<2;
  $gep10 = (($gep_int8) + ($gep_array9))|0;
  $30 = $gep10;
  u$16 = _wmemcpy($29,$30,$28)|0;
  
 }
 $31 = ($__old_cap|0)==(1);
 
 if (!($31)) {
  $32 = $10;
  __ZdlPv($32);
  
 }
 $gep_int11 = $this;
 $gep12 = (($gep_int11) + 8)|0;
 $33 = $gep12;
 HEAP32[$33>>2] = $22;
 $34 = $19 | 1;
 $gep_int13 = $this;
 $35 = $gep_int13;
 HEAP32[$35>>2] = $34;
 $36 = (($26) + ($__n_add))|0;
 $gep_int14 = $this;
 $gep15 = (($gep_int14) + 4)|0;
 $37 = $gep15;
 HEAP32[$37>>2] = $36;
 $gep_int16 = $21;
 $gep_array17 = $36<<2;
 $gep18 = (($gep_int16) + ($gep_array17))|0;
 $38 = $gep18;
 HEAP32[$38>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep7 = 0, $gep9 = 0;
 var $gep_array = 0, $gep_array6 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int8 = 0, label = 0, sp = 0, u$10 = 0, u$13 = 0;
 sp = STACKTOP;
 $1 = (1073741807 - ($__old_cap))|0;
 $2 = ($1>>>0)<($__delta_cap>>>0);
 
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $3 = $this;
 $4 = HEAP8[$this]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 
 if ($6) {
  $gep_int1 = $this;
  $gep2 = (($gep_int1) + 4)|0;
  $9 = $gep2;
  
  $10 = $9;
 } else {
  $gep_int = $this;
  $gep = (($gep_int) + 8)|0;
  $7 = $gep;
  $8 = HEAP32[$7>>2]|0;
  
  $10 = $8;
 }
 
 $11 = ($__old_cap>>>0)<(536870887);
 
 do {
  if ($11) {
   $12 = (($__delta_cap) + ($__old_cap))|0;
   $13 = $__old_cap << 1;
   $14 = ($12>>>0)<($13>>>0);
   $15 = $14 ? $13 : $12;
   $16 = ($15>>>0)<(2);
   
   if ($16) {
    $19 = 2;
    break;
   }
   $17 = (($15) + 4)|0;
   $18 = $17 & -4;
   
   $19 = $18;
  } else {
   $19 = 1073741807;
  }
 } while(0);
 
 $20 = $19 << 2;
 $21 = __Znwj($20)|0;
 $22 = $21;
 $23 = ($__n_copy|0)==(0);
 
 if (!($23)) {
  u$10 = _wmemcpy($22,$10,$__n_copy)|0;
  
 }
 $24 = (($__old_sz) - ($__n_del))|0;
 $25 = ($24|0)==($__n_copy|0);
 
 if (!($25)) {
  $26 = (($24) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $gep_int3 = $21;
  $gep_array = $$sum<<2;
  $gep4 = (($gep_int3) + ($gep_array))|0;
  $27 = $gep4;
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $gep_int5 = $10;
  $gep_array6 = $$sum1<<2;
  $gep7 = (($gep_int5) + ($gep_array6))|0;
  $28 = $gep7;
  u$13 = _wmemcpy($27,$28,$26)|0;
  
 }
 $29 = ($__old_cap|0)==(1);
 
 if ($29) {
  $gep_int8 = $this;
  $gep9 = (($gep_int8) + 8)|0;
  $31 = $gep9;
  HEAP32[$31>>2] = $22;
  $32 = $19 | 1;
  $gep_int10 = $this;
  $33 = $gep_int10;
  HEAP32[$33>>2] = $32;
  STACKTOP = sp;return;
 }
 $30 = $10;
 __ZdlPv($30);
 
 $gep_int8 = $this;
 $gep9 = (($gep_int8) + 8)|0;
 $31 = $gep9;
 HEAP32[$31>>2] = $22;
 $32 = $19 | 1;
 $gep_int10 = $this;
 $33 = $gep_int10;
 HEAP32[$33>>2] = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0;
 var $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep30 = 0, $gep36 = 0, $gep_int = 0, $gep_int22 = 0;
 var $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $tmpcast$i = 0, $tmpcast$i$byval_copy = 0, label = 0, sp = 0, u$9 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmpcast$i$byval_copy = sp;
 $1 = sp + 8|0;
 $gep_int = $this;
 $gep = (($gep_int) + 24)|0;
 $2 = $gep;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $6 = $state | 1;
  $gep_int24 = $this;
  $gep25 = (($gep_int24) + 16)|0;
  $7 = $gep25;
  HEAP32[$7>>2] = $6;
  
 } else {
  $gep_int22 = $this;
  $gep23 = (($gep_int22) + 16)|0;
  $5 = $gep23;
  HEAP32[$5>>2] = $state;
  
 }
 $8 = $4&1;
 $9 = $8 | $state;
 $gep_int26 = $this;
 $gep27 = (($gep_int26) + 20)|0;
 $10 = $gep27;
 $11 = HEAP32[$10>>2]|0;
 $12 = $9 & $11;
 $13 = ($12|0)==(0);
 
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = ___cxa_allocate_exception(16)|0;
 $gep_int28 = 6016;
 $expanded = $gep_int28;
 $15 = HEAP8[$expanded]|0;
 $16 = ($15<<24>>24)==(0);
 
 do {
  if ($16) {
   $expanded1 = 6016;
   $17 = ___cxa_guard_acquire($expanded1|0)|0;
   $18 = ($17|0)==(0);
   
   if ($18) {
    break;
   }
   $expanded4 = 6784;
   $gep_int29 = 6784;
   $gep30 = (($gep_int29) + 8)|0;
   $expanded3 = $gep30;
   $expanded2 = $expanded3;
   $expanded6 = 6008;
   $gep_int31 = 6008;
   $expanded5 = $gep_int31;
   HEAP32[$expanded5>>2] = $expanded2;
   $expanded7 = 58;
   $gep_int32 = 6008;
   $expanded8 = $gep_int32;
   $gep_int33 = ___dso_handle;
   $expanded9 = $gep_int33;
   u$9 = _atexit($expanded7|0,$expanded8|0,$expanded9|0)|0;
   $expanded10 = 6016;
   ___cxa_guard_release($expanded10|0);
   
  }
 } while(0);
 $19 = $1;
 
 $tmpcast$i = $1;
 $20 = $14;
 $expanded14 = 6008;
 $21 = $1;
 $22 = $21;
 HEAP32[$22>>2] = 1;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $expanded14;
 __THREW__ = 0;
 $25 = $tmpcast$i$byval_copy;
 
 $26 = $tmpcast$i$byval_copy;
 $27 = $tmpcast$i;
 ;HEAP32[$26+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$26+4>>2]=HEAP32[$27+4>>2]|0;
 $gep_int34 = 6064;
 $expanded15 = $gep_int34;
 invoke_viii(16,$20|0,$tmpcast$i$byval_copy|0,$expanded15|0);
 $28 = $tmpcast$i$byval_copy;
 
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 
 if ($30) {
  $expanded21 = 69;
  $32 = ___cxa_find_matching_catch(-1,-1)|0;
  $33 = tempRet0;
  ___cxa_free_exception($14|0);
  ___resumeException($32|0);
  // unreachable
 } else {
  $31 = $14;
  $expanded18 = 6024;
  $gep_int35 = 6024;
  $gep36 = (($gep_int35) + 8)|0;
  $expanded17 = $gep36;
  $expanded16 = $expanded17;
  HEAP32[$14>>2] = $expanded16;
  
  $expanded19 = 6112;
  $expanded20 = 54;
  ___cxa_throw($14|0,$expanded19|0,$expanded20|0);
  // unreachable
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0;
 var $gep6 = 0, $gep8 = 0, $gep_array = 0, $gep_array14 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $i$01$i = 0, $i$01$i$phi = 0, label = 0, sp = 0, u$12 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 6048;
 $gep_int4 = 6048;
 $gep = (($gep_int4) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int5 = $this;
 $gep6 = (($gep_int5) + 40)|0;
 $2 = $gep6;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $gep_int7 = $this;
 $gep8 = (($gep_int7) + 32)|0;
 $$pre = $gep8;
 $gep_int9 = $this;
 $gep10 = (($gep_int9) + 36)|0;
 $$pre1 = $gep10;
 
 L1: do {
  if (!($4)) {
   $i$01$i = $3;
   while(1) {
    
    $5 = (($i$01$i) + -1)|0;
    $6 = HEAP32[$$pre>>2]|0;
    $gep_int11 = $6;
    $gep_array = $5<<2;
    $gep12 = (($gep_int11) + ($gep_array))|0;
    $7 = $gep12;
    $8 = HEAP32[$7>>2]|0;
    $9 = HEAP32[$$pre1>>2]|0;
    $gep_int13 = $9;
    $gep_array14 = $5<<2;
    $gep15 = (($gep_int13) + ($gep_array14))|0;
    $10 = $gep15;
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    invoke_viii($8|0,0,$this|0,$11|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    
    if ($13) {
     break;
    }
    $14 = ($5|0)==(0);
    
    if ($14) {
     break L1;
    } else {
     $i$01$i$phi = $5;$i$01$i = $i$01$i$phi;
    }
   }
   $expanded3 = 69;
   $27 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$12 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable
  }
 } while(0);
 $gep_int16 = $this;
 $gep17 = (($gep_int16) + 28)|0;
 $15 = $gep17;
 $16 = $15;
 __ZNSt3__16localeD2Ev($16);
 $17 = HEAP32[$$pre>>2]|0;
 $18 = $17;
 _free($18);
 $19 = HEAP32[$$pre1>>2]|0;
 $20 = $19;
 _free($20);
 $gep_int18 = $this;
 $gep19 = (($gep_int18) + 48)|0;
 $21 = $gep19;
 $22 = HEAP32[$21>>2]|0;
 $23 = $22;
 _free($23);
 $gep_int20 = $this;
 $gep21 = (($gep_int20) + 60)|0;
 $24 = $gep21;
 $25 = HEAP32[$24>>2]|0;
 $26 = $25;
 _free($26);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 28)|0;
 $1 = $gep;
 $2 = $1;
 __ZNSt3__16localeC2ERKS0_($agg$result,$2);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0;
 var $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 24)|0;
 $1 = $gep;
 HEAP32[$1>>2] = $sb;
 $not$ = ($sb|0)==(0);
 $2 = $not$&1;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 16)|0;
 $3 = $gep2;
 HEAP32[$3>>2] = $2;
 $gep_int3 = $this;
 $gep4 = (($gep_int3) + 20)|0;
 $4 = $gep4;
 HEAP32[$4>>2] = 0;
 $gep_int5 = $this;
 $gep6 = (($gep_int5) + 4)|0;
 $5 = $gep6;
 HEAP32[$5>>2] = 4098;
 $gep_int7 = $this;
 $gep8 = (($gep_int7) + 12)|0;
 $6 = $gep8;
 HEAP32[$6>>2] = 0;
 $gep_int9 = $this;
 $gep10 = (($gep_int9) + 8)|0;
 $7 = $gep10;
 HEAP32[$7>>2] = 6;
 $gep_int11 = $this;
 $gep12 = (($gep_int11) + 32)|0;
 $8 = $gep12;
 $gep_int13 = $this;
 $gep14 = (($gep_int13) + 28)|0;
 $9 = $gep14;
 $10 = $9;
 $11 = $8;
 dest=$11+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
 __ZNSt3__16localeC2Ev($10);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5664;
 $gep_int3 = 5664;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5664;
 $gep_int3 = 5664;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5664;
 $gep_int3 = 5664;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5664;
 $gep_int3 = 5664;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeC2Ev($2);
 $gep_int6 = $this;
 $gep7 = (($gep_int6) + 8)|0;
 $3 = $gep7;
 $4 = $3;
 ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,u$0,u$1) {
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return $this|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,u$0,u$1,u$2,u$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 u$2 = u$2|0;
 u$3 = u$3|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $gep_int = $agg$result;
 $gep = (($gep_int) + 8)|0;
 $6 = $gep;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,u$0,u$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $gep_int = $agg$result;
 $gep = (($gep_int) + 8)|0;
 $6 = $gep;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$02 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = ($__n|0)>(0);
 
 if (!($2)) {
  $__i$0$lcssa = 0;
  
  STACKTOP = sp;return $__i$0$lcssa|0;
 }
 $gep_int = $this;
 $gep = (($gep_int) + 12)|0;
 $3 = $gep;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 16)|0;
 $4 = $gep2;
 
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  
  
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$4>>2]|0;
  $7 = ($5>>>0)<($6>>>0);
  
  if ($7) {
   $gep_int3 = $5;
   $gep4 = (($gep_int3) + 1)|0;
   $8 = $gep4;
   HEAP32[$3>>2] = $8;
   $9 = HEAP8[$5]|0;
   
   $storemerge = $9;
  } else {
   $10 = HEAP32[$this>>2]|0;
   $gep_int5 = $10;
   $gep6 = (($gep_int5) + 40)|0;
   $11 = $gep6;
   $12 = HEAP32[$11>>2]|0;
   $13 = FUNCTION_TABLE_ii[$12 & 127]($this)|0;
   $14 = ($13|0)==(-1);
   
   if ($14) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $15 = $13&255;
   
   $storemerge = $15;
  }
  
  HEAP8[$$01] = $storemerge;
  $16 = (($__i$02) + 1)|0;
  $gep_int7 = $$01;
  $gep8 = (($gep_int7) + 1)|0;
  $17 = $gep8;
  $18 = ($16|0)<($__n|0);
  
  if ($18) {
   $$01 = $17;$__i$02 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  
  STACKTOP = sp;return $__i$0$lcssa|0;
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP32[$this>>2]|0;
 $gep_int = $2;
 $gep = (($gep_int) + 36)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = FUNCTION_TABLE_ii[$4 & 127]($this)|0;
 $6 = ($5|0)==(-1);
 
 if ($6) {
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 }
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 12)|0;
 $7 = $gep2;
 $8 = HEAP32[$7>>2]|0;
 $gep_int3 = $8;
 $gep4 = (($gep_int3) + 1)|0;
 $9 = $gep4;
 HEAP32[$7>>2] = $9;
 $10 = HEAP8[$8]|0;
 $11 = $10&255;
 
 $$0 = $11;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$0$lcssa = 0, $__i$01 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = ($__n|0)>(0);
 
 if (!($2)) {
  $__i$0$lcssa = 0;
  
  STACKTOP = sp;return $__i$0$lcssa|0;
 }
 $gep_int = $this;
 $gep = (($gep_int) + 24)|0;
 $3 = $gep;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 28)|0;
 $4 = $gep2;
 
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  
  
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$4>>2]|0;
  $7 = ($5>>>0)<($6>>>0);
  
  if ($7) {
   $8 = HEAP8[$$02]|0;
   $gep_int3 = $5;
   $gep4 = (($gep_int3) + 1)|0;
   $9 = $gep4;
   HEAP32[$3>>2] = $9;
   HEAP8[$5] = $8;
   
  } else {
   $10 = HEAP32[$this>>2]|0;
   $gep_int5 = $10;
   $gep6 = (($gep_int5) + 52)|0;
   $11 = $gep6;
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP8[$$02]|0;
   $14 = $13&255;
   $15 = FUNCTION_TABLE_iii[$12 & 63]($this,$14)|0;
   $16 = ($15|0)==(-1);
   
   if ($16) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $gep_int7 = $$02;
  $gep8 = (($gep_int7) + 1)|0;
  $17 = $gep8;
  $18 = (($__i$01) + 1)|0;
  $19 = ($18|0)<($__n|0);
  
  if ($19) {
   $$02 = $17;$__i$01 = $18;
  } else {
   $__i$0$lcssa = $18;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  
  STACKTOP = sp;return $__i$0$lcssa|0;
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5728;
 $gep_int3 = 5728;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 5728;
 $gep_int3 = 5728;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 4)|0;
 $2 = $gep5;
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,u$0,u$1) {
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return $this|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,u$0,u$1,u$2,u$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 u$2 = u$2|0;
 u$3 = u$3|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $gep_int = $agg$result;
 $gep = (($gep_int) + 8)|0;
 $6 = $gep;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,u$0,u$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $gep_int = $agg$result;
 $gep = (($gep_int) + 8)|0;
 $6 = $gep;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = ($__n|0)>(0);
 
 if (!($2)) {
  $__i$0$lcssa = 0;
  
  STACKTOP = sp;return $__i$0$lcssa|0;
 }
 $gep_int = $this;
 $gep = (($gep_int) + 12)|0;
 $3 = $gep;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 16)|0;
 $4 = $gep2;
 
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  
  
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$4>>2]|0;
  $7 = ($5>>>0)<($6>>>0);
  
  if ($7) {
   $gep_int3 = $5;
   $gep4 = (($gep_int3) + 4)|0;
   $8 = $gep4;
   HEAP32[$3>>2] = $8;
   $9 = HEAP32[$5>>2]|0;
   
   $storemerge = $9;
  } else {
   $10 = HEAP32[$this>>2]|0;
   $gep_int5 = $10;
   $gep6 = (($gep_int5) + 40)|0;
   $11 = $gep6;
   $12 = HEAP32[$11>>2]|0;
   $13 = FUNCTION_TABLE_ii[$12 & 127]($this)|0;
   $14 = ($13|0)==(-1);
   
   if ($14) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $13;
   }
  }
  
  HEAP32[$$01>>2] = $storemerge;
  $15 = (($__i$02) + 1)|0;
  $16 = ($15|0)<($__n|0);
  
  if (!($16)) {
   $__i$0$lcssa = $15;
   label = 8;
   break;
  }
  $gep_int7 = $$01;
  $gep8 = (($gep_int7) + 4)|0;
  $17 = $gep8;
  
  $$01 = $17;$__i$02 = $15;
 }
 if ((label|0) == 8) {
  
  STACKTOP = sp;return $__i$0$lcssa|0;
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP32[$this>>2]|0;
 $gep_int = $2;
 $gep = (($gep_int) + 36)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = FUNCTION_TABLE_ii[$4 & 127]($this)|0;
 $6 = ($5|0)==(-1);
 
 if ($6) {
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 }
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 12)|0;
 $7 = $gep2;
 $8 = HEAP32[$7>>2]|0;
 $gep_int3 = $8;
 $gep4 = (($gep_int3) + 4)|0;
 $9 = $gep4;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$8>>2]|0;
 
 $$0 = $10;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = ($__n|0)>(0);
 
 if (!($2)) {
  $__i$0$lcssa = 0;
  
  STACKTOP = sp;return $__i$0$lcssa|0;
 }
 $gep_int = $this;
 $gep = (($gep_int) + 24)|0;
 $3 = $gep;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 28)|0;
 $4 = $gep2;
 
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  
  
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$4>>2]|0;
  $7 = ($5>>>0)<($6>>>0);
  
  if ($7) {
   $8 = HEAP32[$$02>>2]|0;
   $gep_int3 = $5;
   $gep4 = (($gep_int3) + 4)|0;
   $9 = $gep4;
   HEAP32[$3>>2] = $9;
   HEAP32[$5>>2] = $8;
   
  } else {
   $10 = HEAP32[$this>>2]|0;
   $gep_int5 = $10;
   $gep6 = (($gep_int5) + 52)|0;
   $11 = $gep6;
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$$02>>2]|0;
   $14 = FUNCTION_TABLE_iii[$12 & 63]($this,$13)|0;
   $15 = ($14|0)==(-1);
   
   if ($15) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  
  if (!($17)) {
   $__i$0$lcssa = $16;
   label = 8;
   break;
  }
  $gep_int7 = $$02;
  $gep8 = (($gep_int7) + 4)|0;
  $18 = $gep8;
  
  $$02 = $18;$__i$01 = $16;
 }
 if ((label|0) == 8) {
  
  STACKTOP = sp;return $__i$0$lcssa|0;
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + -12)|0;
 $4 = $gep;
 $5 = $4;
 $6 = HEAP32[$4>>2]|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + ($6))|0;
 $7 = $gep2;
 $$sum = (($6) + 8)|0;
 $gep_int3 = $this;
 $gep4 = (($gep_int3) + ($$sum))|0;
 $8 = $gep4;
 $9 = $8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + -12)|0;
 $4 = $gep;
 $5 = $4;
 $6 = HEAP32[$4>>2]|0;
 $$sum = (($6) + 8)|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + ($$sum))|0;
 $7 = $gep2;
 $8 = $7;
 __ZNSt3__18ios_baseD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$phi$trans$insert11$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__s = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep5 = 0, $gep8 = 0;
 var $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0, u$16 = 0, u$18 = 0, u$21 = 0;
 var u$38 = 0, u$6 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__s = sp;
 $1 = $this;
 $2 = HEAP32[$this>>2]|0;
 $gep_int = $2;
 $gep = (($gep_int) + -12)|0;
 $3 = $gep;
 $4 = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = $this;
 $$sum = (($5) + 24)|0;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + ($$sum))|0;
 $7 = $gep5;
 $8 = $7;
 $9 = HEAP32[$7>>2]|0;
 $10 = ($9|0)==(0);
 
 if ($10) {
  STACKTOP = sp;return $this|0;
 }
 $gep_int6 = $__s;
 $11 = $gep_int6;
 HEAP8[$11] = 0;
 $gep_int7 = $__s;
 $gep8 = (($gep_int7) + 4)|0;
 $12 = $gep8;
 HEAP32[$12>>2] = $this;
 $$sum5 = (($5) + 16)|0;
 $gep_int9 = $this;
 $gep10 = (($gep_int9) + ($$sum5))|0;
 $13 = $gep10;
 $14 = $13;
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(0);
 
 do {
  if ($16) {
   $$sum10 = (($5) + 72)|0;
   $gep_int11 = $this;
   $gep12 = (($gep_int11) + ($$sum10))|0;
   $17 = $gep12;
   $18 = $17;
   $19 = HEAP32[$17>>2]|0;
   $20 = ($19|0)==(0);
   
   do {
    if ($20) {
     $$pre12 = $5;
     label = 6;
    } else {
     __THREW__ = 0;
     u$6 = invoke_ii(90,$19|0)|0;
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     
     if ($22) {
      $expanded = 69;
      $47 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$16 = tempRet0;
      
      $$0 = $47;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $gep_int13 = $$pre$pre;
      $gep14 = (($gep_int13) + -12)|0;
      $$phi$trans$insert$phi$trans$insert = $gep14;
      $$phi$trans$insert11$phi$trans$insert = $$phi$trans$insert$phi$trans$insert;
      $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    
    HEAP8[$11] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $gep_int15 = $this;
    $gep16 = (($gep_int15) + ($$sum6))|0;
    $23 = $gep16;
    $24 = $23;
    $25 = HEAP32[$23>>2]|0;
    $26 = $25;
    $27 = $25;
    $28 = HEAP32[$25>>2]|0;
    $gep_int17 = $28;
    $gep18 = (($gep_int17) + 24)|0;
    $29 = $gep18;
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = invoke_ii($30|0,$26|0)|0;
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    
    if (!($33)) {
     $34 = ($31|0)==(-1);
     
     if (!($34)) {
      break;
     }
     $35 = HEAP32[$this>>2]|0;
     $gep_int19 = $35;
     $gep20 = (($gep_int19) + -12)|0;
     $36 = $gep20;
     $37 = $36;
     $38 = HEAP32[$36>>2]|0;
     $gep_int21 = $this;
     $gep22 = (($gep_int21) + ($38))|0;
     $39 = $gep22;
     $40 = $39;
     $$sum9 = (($38) + 16)|0;
     $gep_int23 = $this;
     $gep24 = (($gep_int23) + ($$sum9))|0;
     $41 = $gep24;
     $42 = $41;
     $43 = HEAP32[$41>>2]|0;
     $44 = $43 | 1;
     __THREW__ = 0;
     invoke_vii(42,$40|0,$44|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     
     if (!($46)) {
      break;
     }
    }
    $expanded1 = 69;
    $48 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$18 = tempRet0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    
    $$0 = $48;
   }
   
   u$21 = ___cxa_begin_catch($$0|0)|0;
   $49 = HEAP32[$this>>2]|0;
   $gep_int25 = $49;
   $gep26 = (($gep_int25) + -12)|0;
   $50 = $gep26;
   $51 = $50;
   $52 = HEAP32[$50>>2]|0;
   $$sum7 = (($52) + 16)|0;
   $gep_int27 = $this;
   $gep28 = (($gep_int27) + ($$sum7))|0;
   $53 = $gep28;
   $54 = $53;
   $55 = HEAP32[$53>>2]|0;
   $56 = $55 | 1;
   HEAP32[$53>>2] = $56;
   $$sum8 = (($52) + 20)|0;
   $gep_int29 = $this;
   $gep30 = (($gep_int29) + ($$sum8))|0;
   $57 = $gep30;
   $58 = $57;
   $59 = HEAP32[$57>>2]|0;
   $60 = $59 & 1;
   $61 = ($60|0)==(0);
   
   if ($61) {
    ___cxa_end_catch();
    
    STACKTOP = sp;return $this|0;
   }
   __THREW__ = 0;
   invoke_v(12);
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   
   if (!($63)) {
    // unreachable
   }
   $expanded2 = 69;
   $64 = ___cxa_find_matching_catch(-1,-1)|0;
   $65 = tempRet0;
   __THREW__ = 0;
   invoke_v(2);
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   
   if ($67) {
    $expanded3 = 69;
    $68 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$38 = tempRet0;
    ___clang_call_terminate($68);
    // unreachable
   } else {
    ___resumeException($64|0);
    // unreachable
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 
 STACKTOP = sp;return $this|0;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 16)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 1;
 HEAP32[$1>>2] = $3;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 20)|0;
 $4 = $gep2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 
 if ($7) {
  STACKTOP = sp;return;
 } else {
  ___cxa_rethrow();
  // unreachable
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + -12)|0;
 $4 = $gep;
 $5 = $4;
 $6 = HEAP32[$4>>2]|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + ($6))|0;
 $7 = $gep2;
 $$sum = (($6) + 8)|0;
 $gep_int3 = $this;
 $gep4 = (($gep_int3) + ($$sum))|0;
 $8 = $gep4;
 $9 = $8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + -12)|0;
 $4 = $gep;
 $5 = $4;
 $6 = HEAP32[$4>>2]|0;
 $$sum = (($6) + 8)|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + ($$sum))|0;
 $7 = $gep2;
 $8 = $7;
 __ZNSt3__18ios_baseD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$phi$trans$insert11$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__s = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep5 = 0, $gep8 = 0;
 var $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0, u$16 = 0, u$18 = 0, u$21 = 0;
 var u$38 = 0, u$6 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__s = sp;
 $1 = $this;
 $2 = HEAP32[$this>>2]|0;
 $gep_int = $2;
 $gep = (($gep_int) + -12)|0;
 $3 = $gep;
 $4 = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = $this;
 $$sum = (($5) + 24)|0;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + ($$sum))|0;
 $7 = $gep5;
 $8 = $7;
 $9 = HEAP32[$7>>2]|0;
 $10 = ($9|0)==(0);
 
 if ($10) {
  STACKTOP = sp;return $this|0;
 }
 $gep_int6 = $__s;
 $11 = $gep_int6;
 HEAP8[$11] = 0;
 $gep_int7 = $__s;
 $gep8 = (($gep_int7) + 4)|0;
 $12 = $gep8;
 HEAP32[$12>>2] = $this;
 $$sum5 = (($5) + 16)|0;
 $gep_int9 = $this;
 $gep10 = (($gep_int9) + ($$sum5))|0;
 $13 = $gep10;
 $14 = $13;
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(0);
 
 do {
  if ($16) {
   $$sum10 = (($5) + 72)|0;
   $gep_int11 = $this;
   $gep12 = (($gep_int11) + ($$sum10))|0;
   $17 = $gep12;
   $18 = $17;
   $19 = HEAP32[$17>>2]|0;
   $20 = ($19|0)==(0);
   
   do {
    if ($20) {
     $$pre12 = $5;
     label = 6;
    } else {
     __THREW__ = 0;
     u$6 = invoke_ii(91,$19|0)|0;
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     
     if ($22) {
      $expanded = 69;
      $47 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$16 = tempRet0;
      
      $$0 = $47;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $gep_int13 = $$pre$pre;
      $gep14 = (($gep_int13) + -12)|0;
      $$phi$trans$insert$phi$trans$insert = $gep14;
      $$phi$trans$insert11$phi$trans$insert = $$phi$trans$insert$phi$trans$insert;
      $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    
    HEAP8[$11] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $gep_int15 = $this;
    $gep16 = (($gep_int15) + ($$sum6))|0;
    $23 = $gep16;
    $24 = $23;
    $25 = HEAP32[$23>>2]|0;
    $26 = $25;
    $27 = $25;
    $28 = HEAP32[$25>>2]|0;
    $gep_int17 = $28;
    $gep18 = (($gep_int17) + 24)|0;
    $29 = $gep18;
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = invoke_ii($30|0,$26|0)|0;
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    
    if (!($33)) {
     $34 = ($31|0)==(-1);
     
     if (!($34)) {
      break;
     }
     $35 = HEAP32[$this>>2]|0;
     $gep_int19 = $35;
     $gep20 = (($gep_int19) + -12)|0;
     $36 = $gep20;
     $37 = $36;
     $38 = HEAP32[$36>>2]|0;
     $gep_int21 = $this;
     $gep22 = (($gep_int21) + ($38))|0;
     $39 = $gep22;
     $40 = $39;
     $$sum9 = (($38) + 16)|0;
     $gep_int23 = $this;
     $gep24 = (($gep_int23) + ($$sum9))|0;
     $41 = $gep24;
     $42 = $41;
     $43 = HEAP32[$41>>2]|0;
     $44 = $43 | 1;
     __THREW__ = 0;
     invoke_vii(42,$40|0,$44|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     
     if (!($46)) {
      break;
     }
    }
    $expanded1 = 69;
    $48 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$18 = tempRet0;
    __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
    
    $$0 = $48;
   }
   
   u$21 = ___cxa_begin_catch($$0|0)|0;
   $49 = HEAP32[$this>>2]|0;
   $gep_int25 = $49;
   $gep26 = (($gep_int25) + -12)|0;
   $50 = $gep26;
   $51 = $50;
   $52 = HEAP32[$50>>2]|0;
   $$sum7 = (($52) + 16)|0;
   $gep_int27 = $this;
   $gep28 = (($gep_int27) + ($$sum7))|0;
   $53 = $gep28;
   $54 = $53;
   $55 = HEAP32[$53>>2]|0;
   $56 = $55 | 1;
   HEAP32[$53>>2] = $56;
   $$sum8 = (($52) + 20)|0;
   $gep_int29 = $this;
   $gep30 = (($gep_int29) + ($$sum8))|0;
   $57 = $gep30;
   $58 = $57;
   $59 = HEAP32[$57>>2]|0;
   $60 = $59 & 1;
   $61 = ($60|0)==(0);
   
   if ($61) {
    ___cxa_end_catch();
    
    STACKTOP = sp;return $this|0;
   }
   __THREW__ = 0;
   invoke_v(12);
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   
   if (!($63)) {
    // unreachable
   }
   $expanded2 = 69;
   $64 = ___cxa_find_matching_catch(-1,-1)|0;
   $65 = tempRet0;
   __THREW__ = 0;
   invoke_v(2);
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   
   if ($67) {
    $expanded3 = 69;
    $68 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$38 = tempRet0;
    ___clang_call_terminate($68);
    // unreachable
   } else {
    ___resumeException($64|0);
    // unreachable
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 
 STACKTOP = sp;return $this|0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + -12)|0;
 $4 = $gep;
 $5 = $4;
 $6 = HEAP32[$4>>2]|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + ($6))|0;
 $7 = $gep2;
 $$sum = (($6) + 4)|0;
 $gep_int3 = $this;
 $gep4 = (($gep_int3) + ($$sum))|0;
 $8 = $gep4;
 $9 = $8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + -12)|0;
 $4 = $gep;
 $5 = $4;
 $6 = HEAP32[$4>>2]|0;
 $$sum = (($6) + 4)|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + ($$sum))|0;
 $7 = $gep2;
 $8 = $7;
 __ZNSt3__18ios_baseD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep3 = 0;
 var $gep5 = 0, $gep7 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 HEAP8[$1] = 0;
 $gep_int1 = $this;
 $gep = (($gep_int1) + 4)|0;
 $2 = $gep;
 HEAP32[$2>>2] = $__os;
 $3 = $__os;
 $4 = HEAP32[$__os>>2]|0;
 $gep_int2 = $4;
 $gep3 = (($gep_int2) + -12)|0;
 $5 = $gep3;
 $6 = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = $__os;
 $$sum = (($7) + 16)|0;
 $gep_int4 = $__os;
 $gep5 = (($gep_int4) + ($$sum))|0;
 $9 = $gep5;
 $10 = $9;
 $11 = HEAP32[$9>>2]|0;
 $12 = ($11|0)==(0);
 
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($7) + 72)|0;
 $gep_int6 = $__os;
 $gep7 = (($gep_int6) + ($$sum1))|0;
 $13 = $gep7;
 $14 = $13;
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(0);
 
 if (!($16)) {
  u$4 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($15)|0;
  
 }
 HEAP8[$1] = 1;
 
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0;
 var $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int2 = 0, $gep_int20 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0, u$10 = 0, u$11 = 0, u$16 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = HEAP32[$2>>2]|0;
 $gep_int2 = $4;
 $gep3 = (($gep_int2) + -12)|0;
 $5 = $gep3;
 $6 = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = $2;
 $$sum = (($7) + 24)|0;
 $gep_int4 = $2;
 $gep5 = (($gep_int4) + ($$sum))|0;
 $9 = $gep5;
 $10 = $9;
 $11 = HEAP32[$9>>2]|0;
 $12 = ($11|0)==(0);
 
 if ($12) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($7) + 16)|0;
 $gep_int6 = $2;
 $gep7 = (($gep_int6) + ($$sum1))|0;
 $13 = $gep7;
 $14 = $13;
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(0);
 
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($7) + 4)|0;
 $gep_int8 = $2;
 $gep9 = (($gep_int8) + ($$sum2))|0;
 $17 = $gep9;
 $18 = $17;
 $19 = HEAP32[$17>>2]|0;
 $20 = $19 & 8192;
 $21 = ($20|0)==(0);
 
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = __ZSt18uncaught_exceptionv()|0;
 
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[$1>>2]|0;
 $24 = $23;
 $25 = HEAP32[$23>>2]|0;
 $gep_int10 = $25;
 $gep11 = (($gep_int10) + -12)|0;
 $26 = $gep11;
 $27 = $26;
 $28 = HEAP32[$26>>2]|0;
 $29 = $23;
 $$sum3 = (($28) + 24)|0;
 $gep_int12 = $23;
 $gep13 = (($gep_int12) + ($$sum3))|0;
 $30 = $gep13;
 $31 = $30;
 $32 = HEAP32[$30>>2]|0;
 $33 = $32;
 $34 = $32;
 $35 = HEAP32[$32>>2]|0;
 $gep_int14 = $35;
 $gep15 = (($gep_int14) + 24)|0;
 $36 = $gep15;
 $37 = HEAP32[$36>>2]|0;
 __THREW__ = 0;
 $38 = invoke_ii($37|0,$33|0)|0;
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 
 do {
  if (!($40)) {
   $41 = ($38|0)==(-1);
   
   if (!($41)) {
    STACKTOP = sp;return;
   }
   $42 = HEAP32[$1>>2]|0;
   $43 = $42;
   $44 = HEAP32[$42>>2]|0;
   $gep_int16 = $44;
   $gep17 = (($gep_int16) + -12)|0;
   $45 = $gep17;
   $46 = $45;
   $47 = HEAP32[$45>>2]|0;
   $48 = $42;
   $gep_int18 = $42;
   $gep19 = (($gep_int18) + ($47))|0;
   $49 = $gep19;
   $50 = $49;
   $$sum4 = (($47) + 16)|0;
   $gep_int20 = $42;
   $gep21 = (($gep_int20) + ($$sum4))|0;
   $51 = $gep21;
   $52 = $51;
   $53 = HEAP32[$51>>2]|0;
   $54 = $53 | 1;
   __THREW__ = 0;
   invoke_vii(42,$50|0,$54|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   
   if ($56) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded = 69;
 $57 = ___cxa_find_matching_catch(-1,-1,0)|0;
 u$10 = tempRet0;
 u$11 = ___cxa_begin_catch($57|0)|0;
 __THREW__ = 0;
 invoke_v(2);
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 
 if ($59) {
  $expanded1 = 69;
  $60 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$16 = tempRet0;
  ___clang_call_terminate($60);
  // unreachable
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$off0$i = 0, $$phi$trans$insert$phi$trans$insert = 0, $$phi$trans$insert13$phi$trans$insert = 0, $$pre$pre = 0, $$pre14 = 0, $$pre14$pre = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $extract$t1$i = 0, $gep = 0, $gep15 = 0, $gep17 = 0;
 var $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep_int = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0;
 var $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, label = 0, sp = 0;
 var u$20 = 0, u$40 = 0, u$42 = 0, u$45 = 0, u$5 = 0, u$52 = 0, u$67 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $2 = sp + 16|0;
 $__s = sp + 24|0;
 $3 = sp + 32|0;
 $4 = sp + 40|0;
 $gep_int = $__s;
 $5 = $gep_int;
 HEAP8[$5] = 0;
 $gep_int13 = $__s;
 $gep = (($gep_int13) + 4)|0;
 $6 = $gep;
 HEAP32[$6>>2] = $this;
 $7 = $this;
 $8 = HEAP32[$this>>2]|0;
 $gep_int14 = $8;
 $gep15 = (($gep_int14) + -12)|0;
 $9 = $gep15;
 $10 = $9;
 $11 = HEAP32[$9>>2]|0;
 $12 = $this;
 $$sum$i = (($11) + 16)|0;
 $gep_int16 = $this;
 $gep17 = (($gep_int16) + ($$sum$i))|0;
 $13 = $gep17;
 $14 = $13;
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(0);
 
 do {
  if ($16) {
   $$sum1$i = (($11) + 72)|0;
   $gep_int18 = $this;
   $gep19 = (($gep_int18) + ($$sum1$i))|0;
   $17 = $gep19;
   $18 = $17;
   $19 = HEAP32[$17>>2]|0;
   $20 = ($19|0)==(0);
   
   do {
    if ($20) {
     $$pre14 = $11;
     label = 5;
    } else {
     __THREW__ = 0;
     u$5 = invoke_ii(90,$19|0)|0;
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     
     if ($22) {
      $expanded8 = 69;
      $86 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$40 = tempRet0;
      
      $$1 = $86;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $gep_int20 = $$pre$pre;
      $gep21 = (($gep_int20) + -12)|0;
      $$phi$trans$insert$phi$trans$insert = $gep21;
      $$phi$trans$insert13$phi$trans$insert = $$phi$trans$insert$phi$trans$insert;
      $$pre14$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      
      $$pre14 = $$pre14$pre;
      label = 5;
      break;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    
    HEAP8[$5] = 1;
    $$sum = (($$pre14) + 28)|0;
    $gep_int22 = $this;
    $gep23 = (($gep_int22) + ($$sum))|0;
    $23 = $gep23;
    $24 = $23;
    __ZNSt3__16localeC2ERKS0_($3,$24);
    __THREW__ = 0;
    $expanded = 7200;
    $25 = invoke_iii(19,$3|0,$expanded|0)|0;
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    
    if ($27) {
     $expanded10 = 69;
     $88 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$45 = tempRet0;
     __ZNSt3__16localeD2Ev($3);
     
     $$0 = $88;
    } else {
     $28 = $25;
     __ZNSt3__16localeD2Ev($3);
     $29 = HEAP32[$this>>2]|0;
     $gep_int24 = $29;
     $gep25 = (($gep_int24) + -12)|0;
     $30 = $gep25;
     $31 = $30;
     $32 = HEAP32[$30>>2]|0;
     $$sum$i$i = (($32) + 24)|0;
     $gep_int26 = $this;
     $gep27 = (($gep_int26) + ($$sum$i$i))|0;
     $33 = $gep27;
     $34 = $33;
     $35 = HEAP32[$33>>2]|0;
     $36 = $35;
     $gep_int28 = $this;
     $gep29 = (($gep_int28) + ($32))|0;
     $37 = $gep29;
     $$sum10 = (($32) + 76)|0;
     $gep_int30 = $this;
     $gep31 = (($gep_int30) + ($$sum10))|0;
     $38 = $gep31;
     $39 = $38;
     $40 = HEAP32[$38>>2]|0;
     $41 = ($40|0)==(-1);
     $extract$t1$i = $40&255;
     
     L12: do {
      if ($41) {
       $42 = $2;
       
       $$sum12 = (($32) + 28)|0;
       $gep_int32 = $this;
       $gep33 = (($gep_int32) + ($$sum12))|0;
       $43 = $gep33;
       $44 = $43;
       __ZNSt3__16localeC2ERKS0_($2,$44);
       __THREW__ = 0;
       $expanded6 = 8480;
       $45 = invoke_iii(19,$2|0,$expanded6|0)|0;
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       
       do {
        if (!($47)) {
         $48 = $45;
         $49 = $45;
         $50 = HEAP32[$45>>2]|0;
         $gep_int34 = $50;
         $gep35 = (($gep_int34) + 28)|0;
         $51 = $gep35;
         $52 = HEAP32[$51>>2]|0;
         __THREW__ = 0;
         $53 = invoke_iii($52|0,$48|0,32)|0;
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         
         if ($55) {
          break;
         }
         __ZNSt3__16localeD2Ev($2);
         
         $57 = $53 << 24 >> 24;
         HEAP32[$38>>2] = $57;
         
         $$off0$i = $53;
         label = 11;
         break L12;
        }
       } while(0);
       $expanded7 = 69;
       $56 = ___cxa_find_matching_catch(-1,-1,0)|0;
       u$20 = tempRet0;
       __ZNSt3__16localeD2Ev($2);
       
       $eh$lpad$body$indexZ2D = $56;
      } else {
       $$off0$i = $extract$t1$i;
       label = 11;
      }
     } while(0);
     if ((label|0) == 11) {
      
      $58 = $37;
      $59 = $1;
      
      $60 = $25;
      $61 = HEAP32[$25>>2]|0;
      $gep_int36 = $61;
      $gep37 = (($gep_int36) + 16)|0;
      $62 = $gep37;
      $63 = HEAP32[$62>>2]|0;
      $gep_int38 = $1;
      $64 = $gep_int38;
      HEAP32[$64>>2] = $36;
      __THREW__ = 0;
      $65 = $$byval_copy;
      
      $66 = $$byval_copy;
      $67 = $1;
      ;HEAP32[$66+0>>2]=HEAP32[$67+0>>2]|0;
      invoke_viiiiii($63|0,$4|0,$28|0,$$byval_copy|0,$58|0,$$off0$i|0,$__n|0);
      $68 = $$byval_copy;
      
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      
      if (!($70)) {
       
       $gep_int39 = $4;
       $71 = $gep_int39;
       $72 = HEAP32[$71>>2]|0;
       $73 = ($72|0)==(0);
       
       if (!($73)) {
        break;
       }
       $74 = HEAP32[$this>>2]|0;
       $gep_int40 = $74;
       $gep41 = (($gep_int40) + -12)|0;
       $75 = $gep41;
       $76 = $75;
       $77 = HEAP32[$75>>2]|0;
       $gep_int42 = $this;
       $gep43 = (($gep_int42) + ($77))|0;
       $78 = $gep43;
       $79 = $78;
       $$sum11 = (($77) + 16)|0;
       $gep_int44 = $this;
       $gep45 = (($gep_int44) + ($$sum11))|0;
       $80 = $gep45;
       $81 = $80;
       $82 = HEAP32[$80>>2]|0;
       $83 = $82 | 5;
       __THREW__ = 0;
       invoke_vii(42,$79|0,$83|0);
       $84 = __THREW__; __THREW__ = 0;
       $85 = $84&1;
       
       if (!($85)) {
        break;
       }
      }
      $expanded9 = 69;
      $87 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$42 = tempRet0;
      
      $eh$lpad$body$indexZ2D = $87;
     }
     
     
     $$0 = $eh$lpad$body$indexZ2D;
    }
    
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    
    $$1 = $$0;
   }
   
   u$52 = ___cxa_begin_catch($$1|0)|0;
   $89 = HEAP32[$this>>2]|0;
   $gep_int46 = $89;
   $gep47 = (($gep_int46) + -12)|0;
   $90 = $gep47;
   $91 = $90;
   $92 = HEAP32[$90>>2]|0;
   $$sum8 = (($92) + 16)|0;
   $gep_int48 = $this;
   $gep49 = (($gep_int48) + ($$sum8))|0;
   $93 = $gep49;
   $94 = $93;
   $95 = HEAP32[$93>>2]|0;
   $96 = $95 | 1;
   HEAP32[$93>>2] = $96;
   $$sum9 = (($92) + 20)|0;
   $gep_int50 = $this;
   $gep51 = (($gep_int50) + ($$sum9))|0;
   $97 = $gep51;
   $98 = $97;
   $99 = HEAP32[$97>>2]|0;
   $100 = $99 & 1;
   $101 = ($100|0)==(0);
   
   if ($101) {
    ___cxa_end_catch();
    
    STACKTOP = sp;return $this|0;
   }
   __THREW__ = 0;
   invoke_v(12);
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   
   if (!($103)) {
    // unreachable
   }
   $expanded11 = 69;
   $104 = ___cxa_find_matching_catch(-1,-1)|0;
   $105 = tempRet0;
   __THREW__ = 0;
   invoke_v(2);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   
   if ($107) {
    $expanded12 = 69;
    $108 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$67 = tempRet0;
    ___clang_call_terminate($108);
    // unreachable
   } else {
    ___resumeException($104|0);
    // unreachable
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 
 STACKTOP = sp;return $this|0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$off0$i = 0, $$phi$trans$insert$phi$trans$insert = 0, $$phi$trans$insert12$phi$trans$insert = 0, $$pre$pre = 0, $$pre13 = 0, $$pre13$pre = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i = 0, $$sum10 = 0, $$sum11 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $extract$t1$i = 0, $gep = 0, $gep15 = 0, $gep17 = 0;
 var $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep_int = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0;
 var $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, label = 0, sp = 0;
 var u$20 = 0, u$40 = 0, u$42 = 0, u$45 = 0, u$5 = 0, u$52 = 0, u$67 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $2 = sp + 16|0;
 $__s = sp + 24|0;
 $3 = sp + 32|0;
 $4 = sp + 40|0;
 $gep_int = $__s;
 $5 = $gep_int;
 HEAP8[$5] = 0;
 $gep_int13 = $__s;
 $gep = (($gep_int13) + 4)|0;
 $6 = $gep;
 HEAP32[$6>>2] = $this;
 $7 = $this;
 $8 = HEAP32[$this>>2]|0;
 $gep_int14 = $8;
 $gep15 = (($gep_int14) + -12)|0;
 $9 = $gep15;
 $10 = $9;
 $11 = HEAP32[$9>>2]|0;
 $12 = $this;
 $$sum$i = (($11) + 16)|0;
 $gep_int16 = $this;
 $gep17 = (($gep_int16) + ($$sum$i))|0;
 $13 = $gep17;
 $14 = $13;
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(0);
 
 do {
  if ($16) {
   $$sum1$i = (($11) + 72)|0;
   $gep_int18 = $this;
   $gep19 = (($gep_int18) + ($$sum1$i))|0;
   $17 = $gep19;
   $18 = $17;
   $19 = HEAP32[$17>>2]|0;
   $20 = ($19|0)==(0);
   
   do {
    if ($20) {
     $$pre13 = $11;
     label = 5;
    } else {
     __THREW__ = 0;
     u$5 = invoke_ii(90,$19|0)|0;
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     
     if ($22) {
      $expanded8 = 69;
      $86 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$40 = tempRet0;
      
      $$1 = $86;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $gep_int20 = $$pre$pre;
      $gep21 = (($gep_int20) + -12)|0;
      $$phi$trans$insert$phi$trans$insert = $gep21;
      $$phi$trans$insert12$phi$trans$insert = $$phi$trans$insert$phi$trans$insert;
      $$pre13$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      
      $$pre13 = $$pre13$pre;
      label = 5;
      break;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    
    HEAP8[$5] = 1;
    $$sum = (($$pre13) + 28)|0;
    $gep_int22 = $this;
    $gep23 = (($gep_int22) + ($$sum))|0;
    $23 = $gep23;
    $24 = $23;
    __ZNSt3__16localeC2ERKS0_($3,$24);
    __THREW__ = 0;
    $expanded = 7200;
    $25 = invoke_iii(19,$3|0,$expanded|0)|0;
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    
    if ($27) {
     $expanded10 = 69;
     $88 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$45 = tempRet0;
     __ZNSt3__16localeD2Ev($3);
     
     $$0 = $88;
    } else {
     $28 = $25;
     __ZNSt3__16localeD2Ev($3);
     $29 = HEAP32[$this>>2]|0;
     $gep_int24 = $29;
     $gep25 = (($gep_int24) + -12)|0;
     $30 = $gep25;
     $31 = $30;
     $32 = HEAP32[$30>>2]|0;
     $$sum$i$i = (($32) + 24)|0;
     $gep_int26 = $this;
     $gep27 = (($gep_int26) + ($$sum$i$i))|0;
     $33 = $gep27;
     $34 = $33;
     $35 = HEAP32[$33>>2]|0;
     $36 = $35;
     $gep_int28 = $this;
     $gep29 = (($gep_int28) + ($32))|0;
     $37 = $gep29;
     $$sum9 = (($32) + 76)|0;
     $gep_int30 = $this;
     $gep31 = (($gep_int30) + ($$sum9))|0;
     $38 = $gep31;
     $39 = $38;
     $40 = HEAP32[$38>>2]|0;
     $41 = ($40|0)==(-1);
     $extract$t1$i = $40&255;
     
     L12: do {
      if ($41) {
       $42 = $2;
       
       $$sum11 = (($32) + 28)|0;
       $gep_int32 = $this;
       $gep33 = (($gep_int32) + ($$sum11))|0;
       $43 = $gep33;
       $44 = $43;
       __ZNSt3__16localeC2ERKS0_($2,$44);
       __THREW__ = 0;
       $expanded6 = 8480;
       $45 = invoke_iii(19,$2|0,$expanded6|0)|0;
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       
       do {
        if (!($47)) {
         $48 = $45;
         $49 = $45;
         $50 = HEAP32[$45>>2]|0;
         $gep_int34 = $50;
         $gep35 = (($gep_int34) + 28)|0;
         $51 = $gep35;
         $52 = HEAP32[$51>>2]|0;
         __THREW__ = 0;
         $53 = invoke_iii($52|0,$48|0,32)|0;
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         
         if ($55) {
          break;
         }
         __ZNSt3__16localeD2Ev($2);
         
         $57 = $53 << 24 >> 24;
         HEAP32[$38>>2] = $57;
         
         $$off0$i = $53;
         label = 11;
         break L12;
        }
       } while(0);
       $expanded7 = 69;
       $56 = ___cxa_find_matching_catch(-1,-1,0)|0;
       u$20 = tempRet0;
       __ZNSt3__16localeD2Ev($2);
       
       $eh$lpad$body$indexZ2D = $56;
      } else {
       $$off0$i = $extract$t1$i;
       label = 11;
      }
     } while(0);
     if ((label|0) == 11) {
      
      $58 = $37;
      $59 = $1;
      
      $60 = $25;
      $61 = HEAP32[$25>>2]|0;
      $gep_int36 = $61;
      $gep37 = (($gep_int36) + 24)|0;
      $62 = $gep37;
      $63 = HEAP32[$62>>2]|0;
      $gep_int38 = $1;
      $64 = $gep_int38;
      HEAP32[$64>>2] = $36;
      __THREW__ = 0;
      $65 = $$byval_copy;
      
      $66 = $$byval_copy;
      $67 = $1;
      ;HEAP32[$66+0>>2]=HEAP32[$67+0>>2]|0;
      invoke_viiiiii($63|0,$4|0,$28|0,$$byval_copy|0,$58|0,$$off0$i|0,$__n|0);
      $68 = $$byval_copy;
      
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      
      if (!($70)) {
       
       $gep_int39 = $4;
       $71 = $gep_int39;
       $72 = HEAP32[$71>>2]|0;
       $73 = ($72|0)==(0);
       
       if (!($73)) {
        break;
       }
       $74 = HEAP32[$this>>2]|0;
       $gep_int40 = $74;
       $gep41 = (($gep_int40) + -12)|0;
       $75 = $gep41;
       $76 = $75;
       $77 = HEAP32[$75>>2]|0;
       $gep_int42 = $this;
       $gep43 = (($gep_int42) + ($77))|0;
       $78 = $gep43;
       $79 = $78;
       $$sum10 = (($77) + 16)|0;
       $gep_int44 = $this;
       $gep45 = (($gep_int44) + ($$sum10))|0;
       $80 = $gep45;
       $81 = $80;
       $82 = HEAP32[$80>>2]|0;
       $83 = $82 | 5;
       __THREW__ = 0;
       invoke_vii(42,$79|0,$83|0);
       $84 = __THREW__; __THREW__ = 0;
       $85 = $84&1;
       
       if (!($85)) {
        break;
       }
      }
      $expanded9 = 69;
      $87 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$42 = tempRet0;
      
      $eh$lpad$body$indexZ2D = $87;
     }
     
     
     $$0 = $eh$lpad$body$indexZ2D;
    }
    
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    
    $$1 = $$0;
   }
   
   u$52 = ___cxa_begin_catch($$1|0)|0;
   $89 = HEAP32[$this>>2]|0;
   $gep_int46 = $89;
   $gep47 = (($gep_int46) + -12)|0;
   $90 = $gep47;
   $91 = $90;
   $92 = HEAP32[$90>>2]|0;
   $$sum7 = (($92) + 16)|0;
   $gep_int48 = $this;
   $gep49 = (($gep_int48) + ($$sum7))|0;
   $93 = $gep49;
   $94 = $93;
   $95 = HEAP32[$93>>2]|0;
   $96 = $95 | 1;
   HEAP32[$93>>2] = $96;
   $$sum8 = (($92) + 20)|0;
   $gep_int50 = $this;
   $gep51 = (($gep_int50) + ($$sum8))|0;
   $97 = $gep51;
   $98 = $97;
   $99 = HEAP32[$97>>2]|0;
   $100 = $99 & 1;
   $101 = ($100|0)==(0);
   
   if ($101) {
    ___cxa_end_catch();
    
    STACKTOP = sp;return $this|0;
   }
   __THREW__ = 0;
   invoke_v(12);
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   
   if (!($103)) {
    // unreachable
   }
   $expanded11 = 69;
   $104 = ___cxa_find_matching_catch(-1,-1)|0;
   $105 = tempRet0;
   __THREW__ = 0;
   invoke_v(2);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   
   if ($107) {
    $expanded12 = 69;
    $108 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$67 = tempRet0;
    ___clang_call_terminate($108);
    // unreachable
   } else {
    ___resumeException($104|0);
    // unreachable
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 
 STACKTOP = sp;return $this|0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$phi$trans$insert6$phi$trans$insert = 0, $$pre = 0, $$pre$pre = 0, $$pre7 = 0, $$pre7$pre = 0, $$pre8 = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i = 0, $$sum4 = 0, $$sum5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__s = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0;
 var $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0;
 var $gep_int31 = 0, $gep_int33 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0, u$21 = 0, u$23 = 0, u$26 = 0, u$43 = 0, u$5 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__s = sp;
 $gep_int = $__s;
 $1 = $gep_int;
 HEAP8[$1] = 0;
 $gep_int4 = $__s;
 $gep = (($gep_int4) + 4)|0;
 $2 = $gep;
 HEAP32[$2>>2] = $this;
 $3 = $this;
 $4 = HEAP32[$this>>2]|0;
 $gep_int5 = $4;
 $gep6 = (($gep_int5) + -12)|0;
 $5 = $gep6;
 $6 = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = $this;
 $$sum$i = (($7) + 16)|0;
 $gep_int7 = $this;
 $gep8 = (($gep_int7) + ($$sum$i))|0;
 $9 = $gep8;
 $10 = $9;
 $11 = HEAP32[$9>>2]|0;
 $12 = ($11|0)==(0);
 
 L1: do {
  if ($12) {
   $$sum1$i = (($7) + 72)|0;
   $gep_int9 = $this;
   $gep10 = (($gep_int9) + ($$sum1$i))|0;
   $13 = $gep10;
   $14 = $13;
   $15 = HEAP32[$13>>2]|0;
   $16 = ($15|0)==(0);
   
   do {
    if ($16) {
     $$pre = $4;$$pre7 = $7;
     label = 5;
    } else {
     __THREW__ = 0;
     u$5 = invoke_ii(90,$15|0)|0;
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     
     if ($18) {
      $expanded = 69;
      $53 = ___cxa_find_matching_catch(-1,-1,0)|0;
      u$21 = tempRet0;
      
      $$0 = $53;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $gep_int11 = $$pre$pre;
      $gep12 = (($gep_int11) + -12)|0;
      $$phi$trans$insert$phi$trans$insert = $gep12;
      $$phi$trans$insert6$phi$trans$insert = $$phi$trans$insert$phi$trans$insert;
      $$pre7$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      
      $$pre = $$pre$pre;$$pre7 = $$pre7$pre;
      label = 5;
      break;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    
    
    HEAP8[$1] = 1;
    $$sum$i$i = (($$pre7) + 24)|0;
    $gep_int13 = $this;
    $gep14 = (($gep_int13) + ($$sum$i$i))|0;
    $19 = $gep14;
    $20 = $19;
    $21 = HEAP32[$19>>2]|0;
    $22 = $21;
    $23 = ($21|0)==(0);
    
    do {
     if ($23) {
      $41 = $$pre;
      label = 11;
     } else {
      $gep_int15 = $21;
      $gep16 = (($gep_int15) + 24)|0;
      $24 = $gep16;
      $25 = $24;
      $26 = HEAP32[$24>>2]|0;
      $gep_int17 = $21;
      $gep18 = (($gep_int17) + 28)|0;
      $27 = $gep18;
      $28 = $27;
      $29 = HEAP32[$27>>2]|0;
      $30 = ($26|0)==($29|0);
      
      if (!($30)) {
       $gep_int19 = $26;
       $gep20 = (($gep_int19) + 1)|0;
       $31 = $gep20;
       HEAP32[$24>>2] = $31;
       HEAP8[$26] = $__c;
       
       break L1;
      }
      $32 = $21;
      $33 = HEAP32[$21>>2]|0;
      $gep_int21 = $33;
      $gep22 = (($gep_int21) + 52)|0;
      $34 = $gep22;
      $35 = HEAP32[$34>>2]|0;
      $36 = $__c&255;
      __THREW__ = 0;
      $37 = invoke_iii($35|0,$22|0,$36|0)|0;
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      
      if ($39) {
       break;
      }
      $40 = ($37|0)==(-1);
      
      if (!($40)) {
       break L1;
      }
      $$pre8 = HEAP32[$this>>2]|0;
      
      $41 = $$pre8;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     
     $gep_int23 = $41;
     $gep24 = (($gep_int23) + -12)|0;
     $42 = $gep24;
     $43 = $42;
     $44 = HEAP32[$42>>2]|0;
     $gep_int25 = $this;
     $gep26 = (($gep_int25) + ($44))|0;
     $45 = $gep26;
     $46 = $45;
     $$sum = (($44) + 16)|0;
     $gep_int27 = $this;
     $gep28 = (($gep_int27) + ($$sum))|0;
     $47 = $gep28;
     $48 = $47;
     $49 = HEAP32[$47>>2]|0;
     $50 = $49 | 1;
     __THREW__ = 0;
     invoke_vii(42,$46|0,$50|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     
     if (!($52)) {
      break;
     }
    }
    $expanded1 = 69;
    $54 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$23 = tempRet0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    
    $$0 = $54;
   }
   
   u$26 = ___cxa_begin_catch($$0|0)|0;
   $55 = HEAP32[$this>>2]|0;
   $gep_int29 = $55;
   $gep30 = (($gep_int29) + -12)|0;
   $56 = $gep30;
   $57 = $56;
   $58 = HEAP32[$56>>2]|0;
   $$sum4 = (($58) + 16)|0;
   $gep_int31 = $this;
   $gep32 = (($gep_int31) + ($$sum4))|0;
   $59 = $gep32;
   $60 = $59;
   $61 = HEAP32[$59>>2]|0;
   $62 = $61 | 1;
   HEAP32[$59>>2] = $62;
   $$sum5 = (($58) + 20)|0;
   $gep_int33 = $this;
   $gep34 = (($gep_int33) + ($$sum5))|0;
   $63 = $gep34;
   $64 = $63;
   $65 = HEAP32[$63>>2]|0;
   $66 = $65 & 1;
   $67 = ($66|0)==(0);
   
   if ($67) {
    ___cxa_end_catch();
    
    STACKTOP = sp;return $this|0;
   }
   __THREW__ = 0;
   invoke_v(12);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   
   if (!($69)) {
    // unreachable
   }
   $expanded2 = 69;
   $70 = ___cxa_find_matching_catch(-1,-1)|0;
   $71 = tempRet0;
   __THREW__ = 0;
   invoke_v(2);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   
   if ($73) {
    $expanded3 = 69;
    $74 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$43 = tempRet0;
    ___clang_call_terminate($74);
    // unreachable
   } else {
    ___resumeException($70|0);
    // unreachable
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 
 STACKTOP = sp;return $this|0;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + -12)|0;
 $4 = $gep;
 $5 = $4;
 $6 = HEAP32[$4>>2]|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + ($6))|0;
 $7 = $gep2;
 $$sum = (($6) + 4)|0;
 $gep_int3 = $this;
 $gep4 = (($gep_int3) + ($$sum))|0;
 $8 = $gep4;
 $9 = $8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + -12)|0;
 $4 = $gep;
 $5 = $4;
 $6 = HEAP32[$4>>2]|0;
 $$sum = (($6) + 4)|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + ($$sum))|0;
 $7 = $gep2;
 $8 = $7;
 __ZNSt3__18ios_baseD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0;
 var $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int2 = 0, $gep_int20 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0, u$10 = 0, u$11 = 0, u$16 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = HEAP32[$2>>2]|0;
 $gep_int2 = $4;
 $gep3 = (($gep_int2) + -12)|0;
 $5 = $gep3;
 $6 = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = $2;
 $$sum = (($7) + 24)|0;
 $gep_int4 = $2;
 $gep5 = (($gep_int4) + ($$sum))|0;
 $9 = $gep5;
 $10 = $9;
 $11 = HEAP32[$9>>2]|0;
 $12 = ($11|0)==(0);
 
 if ($12) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($7) + 16)|0;
 $gep_int6 = $2;
 $gep7 = (($gep_int6) + ($$sum1))|0;
 $13 = $gep7;
 $14 = $13;
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(0);
 
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($7) + 4)|0;
 $gep_int8 = $2;
 $gep9 = (($gep_int8) + ($$sum2))|0;
 $17 = $gep9;
 $18 = $17;
 $19 = HEAP32[$17>>2]|0;
 $20 = $19 & 8192;
 $21 = ($20|0)==(0);
 
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = __ZSt18uncaught_exceptionv()|0;
 
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[$1>>2]|0;
 $24 = $23;
 $25 = HEAP32[$23>>2]|0;
 $gep_int10 = $25;
 $gep11 = (($gep_int10) + -12)|0;
 $26 = $gep11;
 $27 = $26;
 $28 = HEAP32[$26>>2]|0;
 $29 = $23;
 $$sum3 = (($28) + 24)|0;
 $gep_int12 = $23;
 $gep13 = (($gep_int12) + ($$sum3))|0;
 $30 = $gep13;
 $31 = $30;
 $32 = HEAP32[$30>>2]|0;
 $33 = $32;
 $34 = $32;
 $35 = HEAP32[$32>>2]|0;
 $gep_int14 = $35;
 $gep15 = (($gep_int14) + 24)|0;
 $36 = $gep15;
 $37 = HEAP32[$36>>2]|0;
 __THREW__ = 0;
 $38 = invoke_ii($37|0,$33|0)|0;
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 
 do {
  if (!($40)) {
   $41 = ($38|0)==(-1);
   
   if (!($41)) {
    STACKTOP = sp;return;
   }
   $42 = HEAP32[$1>>2]|0;
   $43 = $42;
   $44 = HEAP32[$42>>2]|0;
   $gep_int16 = $44;
   $gep17 = (($gep_int16) + -12)|0;
   $45 = $gep17;
   $46 = $45;
   $47 = HEAP32[$45>>2]|0;
   $48 = $42;
   $gep_int18 = $42;
   $gep19 = (($gep_int18) + ($47))|0;
   $49 = $gep19;
   $50 = $49;
   $$sum4 = (($47) + 16)|0;
   $gep_int20 = $42;
   $gep21 = (($gep_int20) + ($$sum4))|0;
   $51 = $gep21;
   $52 = $51;
   $53 = HEAP32[$51>>2]|0;
   $54 = $53 | 1;
   __THREW__ = 0;
   invoke_vii(42,$50|0,$54|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   
   if ($56) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded = 69;
 $57 = ___cxa_find_matching_catch(-1,-1,0)|0;
 u$10 = tempRet0;
 u$11 = ___cxa_begin_catch($57|0)|0;
 __THREW__ = 0;
 invoke_v(2);
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 
 if ($59) {
  $expanded1 = 69;
  $60 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$16 = tempRet0;
  ___clang_call_terminate($60);
  // unreachable
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 12)|0;
 $1 = $gep;
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 12)|0;
 $1 = $gep;
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + -8)|0;
 $1 = $gep;
 $gep_int1 = $1;
 $gep2 = (($gep_int1) + 12)|0;
 $2 = $gep2;
 $3 = $2;
 __ZNSt3__18ios_baseD2Ev($3);
 $4 = $1;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + -12)|0;
 $4 = $gep;
 $5 = $4;
 $6 = HEAP32[$4>>2]|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + ($6))|0;
 $7 = $gep2;
 $$sum = (($6) + 12)|0;
 $gep_int3 = $this;
 $gep4 = (($gep_int3) + ($$sum))|0;
 $8 = $gep4;
 $9 = $8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + -8)|0;
 $1 = $gep;
 $gep_int1 = $1;
 $gep2 = (($gep_int1) + 12)|0;
 $2 = $gep2;
 $3 = $2;
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + -12)|0;
 $4 = $gep;
 $5 = $4;
 $6 = HEAP32[$4>>2]|0;
 $$sum = (($6) + 12)|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + ($$sum))|0;
 $7 = $gep2;
 $8 = $7;
 __ZNSt3__18ios_baseD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var $expanded = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = 5952;
 $expanded = $gep_int;
 STACKTOP = sp;return $expanded|0;
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $1 = 0, $2 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($ev|0)==(1);
 
 if ($1) {
  $gep_int1 = 5968;
  $expanded = $gep_int1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$expanded,35);
  
  STACKTOP = sp;return;
 } else {
  $gep_int = $this;
  $2 = $gep_int;
  __ZNKSt3__112__do_message7messageEi($agg$result,$2,$ev);
  
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt3__112system_errorD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt3__112system_errorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ($__lo2|0)==($__hi2|0);
 
 L1: do {
  if ($1) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    
    
    $2 = ($$024|0)==($__hi1|0);
    
    if ($2) {
     $$0 = -1;
     break L1;
    }
    $3 = HEAP8[$$024]|0;
    $4 = HEAP8[$$015]|0;
    $5 = ($3<<24>>24)<($4<<24>>24);
    
    if ($5) {
     $$0 = -1;
     break L1;
    }
    $6 = ($4<<24>>24)<($3<<24>>24);
    
    if ($6) {
     $$0 = 1;
     break L1;
    }
    $gep_int = $$024;
    $gep = (($gep_int) + 1)|0;
    $7 = $gep;
    $gep_int1 = $$015;
    $gep2 = (($gep_int1) + 1)|0;
    $8 = $gep2;
    $9 = ($8|0)==($__hi2|0);
    
    if ($9) {
     $$02$lcssa = $7;
     label = 6;
     break;
    } else {
     $$015 = $8;$$024 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  
  $10 = ($$02$lcssa|0)!=($__hi1|0);
  $11 = $10&1;
  
  $$0 = $11;
 }
 
 STACKTOP = sp;return $$0|0;
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $$02$i$i$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $__p$01$i$i$i$phi = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep2 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0;
 var $gep_int12 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $scevgep$i$i$i = 0, $scevgep3$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__lo;
 $2 = $__hi;
 $3 = (($2) - ($1))|0;
 $4 = ($3>>>0)>(4294967279);
 
 if ($4) {
  $5 = $agg$result;
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($5);
  
 }
 $6 = ($3>>>0)<(11);
 
 if ($6) {
  $7 = $3 << 1;
  $8 = $7&255;
  $9 = $agg$result;
  HEAP8[$agg$result] = $8;
  $10 = $agg$result;
  $gep_int = $agg$result;
  $gep = (($gep_int) + 1)|0;
  $11 = $gep;
  
  $__p$0$ph$i$i$i = $11;
 } else {
  $12 = (($3) + 16)|0;
  $13 = $12 & -16;
  $14 = __Znwj($13)|0;
  $gep_int1 = $agg$result;
  $gep2 = (($gep_int1) + 8)|0;
  $15 = $gep2;
  HEAP32[$15>>2] = $14;
  $16 = $13 | 1;
  $gep_int3 = $agg$result;
  $17 = $gep_int3;
  HEAP32[$17>>2] = $16;
  $gep_int4 = $agg$result;
  $gep5 = (($gep_int4) + 4)|0;
  $18 = $gep5;
  HEAP32[$18>>2] = $3;
  
  $__p$0$ph$i$i$i = $14;
 }
 
 $19 = ($__lo|0)==($__hi|0);
 
 if ($19) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  
  HEAP8[$__p$0$lcssa$i$i$i] = 0;
  STACKTOP = sp;return;
 } else {
  $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 }
 while(1) {
  
  
  $20 = HEAP8[$$02$i$i$i]|0;
  HEAP8[$__p$01$i$i$i] = $20;
  $gep_int6 = $$02$i$i$i;
  $gep7 = (($gep_int6) + 1)|0;
  $21 = $gep7;
  $gep_int8 = $__p$01$i$i$i;
  $gep9 = (($gep_int8) + 1)|0;
  $22 = $gep9;
  $23 = ($21|0)==($__hi|0);
  
  if ($23) {
   break;
  } else {
   $__p$01$i$i$i$phi = $22;$$02$i$i$i$phi = $21;$__p$01$i$i$i = $__p$01$i$i$i$phi;$$02$i$i$i = $$02$i$i$i$phi;
  }
 }
 $24 = (0 - ($1))|0;
 $gep_int10 = $__hi;
 $gep11 = (($gep_int10) + ($24))|0;
 $scevgep$i$i$i = $gep11;
 $scevgep3$i$i$i = $scevgep$i$i$i;
 $gep_int12 = $__p$0$ph$i$i$i;
 $gep13 = (($gep_int12) + ($scevgep3$i$i$i))|0;
 $scevgep4$i$i$i = $gep13;
 
 $__p$0$lcssa$i$i$i = $scevgep4$i$i$i;
 
 HEAP8[$__p$0$lcssa$i$i$i] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__h$02$phi = 0, $__p$01 = 0, $__p$01$phi = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__lo|0)==($__hi|0);
 
 if ($1) {
  $__h$0$lcssa = 0;
  
  STACKTOP = sp;return $__h$0$lcssa|0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  
  
  $2 = $__h$02 << 4;
  $3 = HEAP8[$__p$01]|0;
  $4 = $3 << 24 >> 24;
  $5 = (($4) + ($2))|0;
  $6 = $5 & -268435456;
  $7 = $6 >>> 24;
  $8 = $7 | $6;
  $9 = $8 ^ $5;
  $gep_int = $__p$01;
  $gep = (($gep_int) + 1)|0;
  $10 = $gep;
  $11 = ($10|0)==($__hi|0);
  
  if ($11) {
   $__h$0$lcssa = $9;
   break;
  } else {
   $__p$01$phi = $10;$__h$02$phi = $9;$__p$01 = $__p$01$phi;$__h$02 = $__h$02$phi;
  }
 }
 
 STACKTOP = sp;return $__h$0$lcssa|0;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ($__lo2|0)==($__hi2|0);
 
 L1: do {
  if ($1) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    
    
    $2 = ($$024|0)==($__hi1|0);
    
    if ($2) {
     $$0 = -1;
     break L1;
    }
    $3 = HEAP32[$$024>>2]|0;
    $4 = HEAP32[$$015>>2]|0;
    $5 = ($3|0)<($4|0);
    
    if ($5) {
     $$0 = -1;
     break L1;
    }
    $6 = ($4|0)<($3|0);
    
    if ($6) {
     $$0 = 1;
     break L1;
    }
    $gep_int = $$024;
    $gep = (($gep_int) + 4)|0;
    $7 = $gep;
    $gep_int1 = $$015;
    $gep2 = (($gep_int1) + 4)|0;
    $8 = $gep2;
    $9 = ($8|0)==($__hi2|0);
    
    if ($9) {
     $$02$lcssa = $7;
     label = 6;
     break;
    } else {
     $$015 = $8;$$024 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  
  $10 = ($$02$lcssa|0)!=($__hi1|0);
  $11 = $10&1;
  
  $$0 = $11;
 }
 
 STACKTOP = sp;return $$0|0;
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $$02$i$i$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $__p$01$i$i$i$phi = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep2 = 0, $gep5 = 0;
 var $gep7 = 0, $gep9 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $scevgep$i$i$i = 0, $scevgep3$i$i$i = 0, $scevgep5$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__lo;
 $2 = $__hi;
 $3 = (($2) - ($1))|0;
 $4 = $3 >> 2;
 $5 = ($4>>>0)>(1073741807);
 
 if ($5) {
  $6 = $agg$result;
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($6);
  
 }
 $7 = ($4>>>0)<(2);
 
 if ($7) {
  $8 = $3 >>> 1;
  $9 = $8&255;
  $10 = $agg$result;
  HEAP8[$agg$result] = $9;
  $gep_int = $agg$result;
  $gep = (($gep_int) + 4)|0;
  $11 = $gep;
  
  $__p$0$ph$i$i$i = $11;
 } else {
  $12 = (($4) + 4)|0;
  $13 = $12 & -4;
  $14 = $13 << 2;
  $15 = __Znwj($14)|0;
  $16 = $15;
  $gep_int1 = $agg$result;
  $gep2 = (($gep_int1) + 8)|0;
  $17 = $gep2;
  HEAP32[$17>>2] = $16;
  $18 = $13 | 1;
  $gep_int3 = $agg$result;
  $19 = $gep_int3;
  HEAP32[$19>>2] = $18;
  $gep_int4 = $agg$result;
  $gep5 = (($gep_int4) + 4)|0;
  $20 = $gep5;
  HEAP32[$20>>2] = $4;
  
  $__p$0$ph$i$i$i = $16;
 }
 
 $21 = ($__lo|0)==($__hi|0);
 
 if ($21) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  
  HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
  STACKTOP = sp;return;
 }
 $gep_int6 = $__hi;
 $gep7 = (($gep_int6) + -4)|0;
 $scevgep$i$i$i = $gep7;
 $scevgep3$i$i$i = $scevgep$i$i$i;
 $22 = (0 - ($1))|0;
 $gep_int8 = $scevgep$i$i$i;
 $gep9 = (($gep_int8) + ($22))|0;
 $uglygep$i$i$i = $gep9;
 
 $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 while(1) {
  
  
  $23 = HEAP32[$$02$i$i$i>>2]|0;
  HEAP32[$__p$01$i$i$i>>2] = $23;
  $gep_int10 = $$02$i$i$i;
  $gep11 = (($gep_int10) + 4)|0;
  $24 = $gep11;
  $gep_int12 = $__p$01$i$i$i;
  $gep13 = (($gep_int12) + 4)|0;
  $25 = $gep13;
  $26 = ($24|0)==($__hi|0);
  
  if ($26) {
   break;
  } else {
   $__p$01$i$i$i$phi = $25;$$02$i$i$i$phi = $24;$__p$01$i$i$i = $__p$01$i$i$i$phi;$$02$i$i$i = $$02$i$i$i$phi;
  }
 }
 $uglygep4$i$i$i = $uglygep$i$i$i;
 $27 = $uglygep4$i$i$i >>> 2;
 $28 = (($27) + 1)|0;
 $gep_int14 = $__p$0$ph$i$i$i;
 $gep_array = $28<<2;
 $gep15 = (($gep_int14) + ($gep_array))|0;
 $scevgep5$i$i$i = $gep15;
 
 $__p$0$lcssa$i$i$i = $scevgep5$i$i$i;
 
 HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__h$02$phi = 0, $__p$01 = 0, $__p$01$phi = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__lo|0)==($__hi|0);
 
 if ($1) {
  $__h$0$lcssa = 0;
  
  STACKTOP = sp;return $__h$0$lcssa|0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  
  
  $2 = $__h$02 << 4;
  $3 = HEAP32[$__p$01>>2]|0;
  $4 = (($3) + ($2))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $gep_int = $__p$01;
  $gep = (($gep_int) + 4)|0;
  $9 = $gep;
  $10 = ($9|0)==($__hi|0);
  
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__p$01$phi = $9;$__h$02$phi = $8;$__p$01 = $__p$01$phi;$__h$02 = $__h$02$phi;
  }
 }
 
 STACKTOP = sp;return $__h$0$lcssa|0;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $137$phi = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0;
 var $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep27 = 0;
 var $gep38 = 0, $gep40 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep55 = 0, $gep57 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep67 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep79 = 0, $gep83 = 0, $gep88 = 0, $gep90 = 0, $gep_array = 0;
 var $gep_array66 = 0, $gep_int = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0;
 var $gep_int51 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int68 = 0, $gep_int69 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int77 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int81 = 0;
 var $gep_int82 = 0, $gep_int84 = 0, $gep_int85 = 0, $gep_int86 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, label = 0, sp = 0, u$39 = 0, u$57 = 0, u$75 = 0, u$77 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 136|0;
 $$byval_copy2 = sp;
 $$byval_copy1 = sp + 8|0;
 $$byval_copy = sp + 16|0;
 $__p$i$i$i$i4 = sp + 24|0;
 $__p$i$i$i$i = sp + 40|0;
 $__lv = sp + 56|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = sp + 80|0;
 $4 = sp + 88|0;
 $5 = sp + 96|0;
 $__names = sp + 104|0;
 $6 = sp + 128|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $7 = $gep;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 
 if ($10) {
  HEAP32[$__lv>>2] = -1;
  $11 = $this;
  $12 = HEAP32[$this>>2]|0;
  $gep_int26 = $12;
  $gep27 = (($gep_int26) + 16)|0;
  $13 = $gep27;
  $14 = HEAP32[$13>>2]|0;
  $gep_int28 = $__b;
  $15 = $gep_int28;
  $16 = HEAP32[$15>>2]|0;
  $gep_int29 = $2;
  $17 = $gep_int29;
  HEAP32[$17>>2] = $16;
  $gep_int30 = $__e;
  $18 = $gep_int30;
  $19 = HEAP32[$18>>2]|0;
  $gep_int31 = $3;
  $20 = $gep_int31;
  HEAP32[$20>>2] = $19;
  $21 = $$byval_copy;
  
  $22 = $$byval_copy;
  $23 = $2;
  ;HEAP32[$22+0>>2]=HEAP32[$23+0>>2]|0;
  $24 = $$byval_copy1;
  
  $25 = $$byval_copy1;
  $26 = $3;
  ;HEAP32[$25+0>>2]=HEAP32[$26+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$14 & 63]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $27 = $$byval_copy1;
  
  $28 = $$byval_copy;
  
  $gep_int32 = $1;
  $29 = $gep_int32;
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$15>>2] = $30;
  $31 = HEAP32[$__lv>>2]|0;
  
  if ((($31|0) == 0)) {
   HEAP8[$__v] = 0;
   
  } else if ((($31|0) == 1)) {
   HEAP8[$__v] = 1;
   
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err>>2] = 4;
   
  }
  $gep_int33 = $agg$result;
  $32 = $gep_int33;
  HEAP32[$32>>2] = $30;
  
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 $gep_int34 = $4;
 $33 = $gep_int34;
 $34 = HEAP32[$33>>2]|0;
 $35 = $__p$i$i$i$i;
 
 $expanded3 = 8480;
 $gep_int35 = 8480;
 $expanded = $gep_int35;
 $36 = HEAP32[$expanded>>2]|0;
 $37 = ($36|0)==(-1);
 
 if ($37) {
  label = 9;
 } else {
  $gep_int36 = $__p$i$i$i$i;
  $38 = $gep_int36;
  $expanded4 = 8480;
  HEAP32[$38>>2] = $expanded4;
  $gep_int37 = $__p$i$i$i$i;
  $gep38 = (($gep_int37) + 4)|0;
  $39 = $gep38;
  $expanded5 = 177;
  HEAP32[$39>>2] = $expanded5;
  $gep_int39 = $__p$i$i$i$i;
  $gep40 = (($gep_int39) + 8)|0;
  $40 = $gep40;
  HEAP32[$40>>2] = 0;
  __THREW__ = 0;
  $expanded7 = 8480;
  $gep_int41 = 8480;
  $expanded6 = $gep_int41;
  invoke_viii(17,$expanded6|0,$35|0,178);
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  
  if (!($42)) {
   label = 9;
  }
 }
 do {
  if ((label|0) == 9) {
   
   $expanded9 = 8480;
   $gep_int42 = 8480;
   $gep43 = (($gep_int42) + 4)|0;
   $expanded8 = $gep43;
   $43 = HEAP32[$expanded8>>2]|0;
   $44 = (($43) + -1)|0;
   $gep_int44 = $34;
   $gep45 = (($gep_int44) + 12)|0;
   $45 = $gep45;
   $46 = HEAP32[$45>>2]|0;
   $gep_int46 = $34;
   $gep47 = (($gep_int46) + 8)|0;
   $47 = $gep47;
   $48 = HEAP32[$47>>2]|0;
   $49 = $46;
   $50 = $48;
   $51 = (($49) - ($50))|0;
   $52 = $51 >> 2;
   $53 = ($52>>>0)>($44>>>0);
   
   do {
    if ($53) {
     $gep_int48 = $48;
     $gep_array = $44<<2;
     $gep49 = (($gep_int48) + ($gep_array))|0;
     $54 = $gep49;
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0);
     
     if ($56) {
      break;
     }
     $61 = $55;
     $62 = HEAP32[$33>>2]|0;
     $gep_int50 = $62;
     $63 = $gep_int50;
     u$39 = __ZNSt3__114__shared_count16__release_sharedEv($63)|0;
     __ZNKSt3__18ios_base6getlocEv($5,$__iob);
     $gep_int51 = $5;
     $64 = $gep_int51;
     $65 = HEAP32[$64>>2]|0;
     $66 = $__p$i$i$i$i4;
     
     $expanded13 = 8624;
     $gep_int52 = 8624;
     $expanded12 = $gep_int52;
     $67 = HEAP32[$expanded12>>2]|0;
     $68 = ($67|0)==(-1);
     
     if ($68) {
      label = 15;
     } else {
      $gep_int53 = $__p$i$i$i$i4;
      $69 = $gep_int53;
      $expanded14 = 8624;
      HEAP32[$69>>2] = $expanded14;
      $gep_int54 = $__p$i$i$i$i4;
      $gep55 = (($gep_int54) + 4)|0;
      $70 = $gep55;
      $expanded15 = 177;
      HEAP32[$70>>2] = $expanded15;
      $gep_int56 = $__p$i$i$i$i4;
      $gep57 = (($gep_int56) + 8)|0;
      $71 = $gep57;
      HEAP32[$71>>2] = 0;
      __THREW__ = 0;
      $expanded17 = 8624;
      $gep_int58 = 8624;
      $expanded16 = $gep_int58;
      invoke_viii(17,$expanded16|0,$66|0,178);
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      
      if (!($73)) {
       label = 15;
      }
     }
     do {
      if ((label|0) == 15) {
       
       $expanded19 = 8624;
       $gep_int59 = 8624;
       $gep60 = (($gep_int59) + 4)|0;
       $expanded18 = $gep60;
       $74 = HEAP32[$expanded18>>2]|0;
       $75 = (($74) + -1)|0;
       $gep_int61 = $65;
       $gep62 = (($gep_int61) + 12)|0;
       $76 = $gep62;
       $77 = HEAP32[$76>>2]|0;
       $gep_int63 = $65;
       $gep64 = (($gep_int63) + 8)|0;
       $78 = $gep64;
       $79 = HEAP32[$78>>2]|0;
       $80 = $77;
       $81 = $79;
       $82 = (($80) - ($81))|0;
       $83 = $82 >> 2;
       $84 = ($83>>>0)>($75>>>0);
       
       do {
        if ($84) {
         $gep_int65 = $79;
         $gep_array66 = $75<<2;
         $gep67 = (($gep_int65) + ($gep_array66))|0;
         $85 = $gep67;
         $86 = HEAP32[$85>>2]|0;
         $87 = ($86|0)==(0);
         
         if ($87) {
          break;
         }
         $92 = $86;
         $93 = HEAP32[$64>>2]|0;
         $gep_int68 = $93;
         $94 = $gep_int68;
         u$57 = __ZNSt3__114__shared_count16__release_sharedEv($94)|0;
         $gep_int69 = $__names;
         $95 = $gep_int69;
         $96 = $86;
         $97 = HEAP32[$86>>2]|0;
         $gep_int70 = $97;
         $gep71 = (($gep_int70) + 24)|0;
         $98 = $gep71;
         $99 = HEAP32[$98>>2]|0;
         __THREW__ = 0;
         invoke_vii($99|0,$95|0,$92|0);
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         
         do {
          if ($101) {
           $$02 = $95;
          } else {
           $gep_int72 = $__names;
           $gep73 = (($gep_int72) + 12)|0;
           $102 = $gep73;
           $103 = HEAP32[$86>>2]|0;
           $gep_int74 = $103;
           $gep75 = (($gep_int74) + 28)|0;
           $104 = $gep75;
           $105 = HEAP32[$104>>2]|0;
           __THREW__ = 0;
           invoke_vii($105|0,$102|0,$92|0);
           $106 = __THREW__; __THREW__ = 0;
           $107 = $106&1;
           
           if ($107) {
            $$02 = $102;
            break;
           }
           $gep_int76 = $__e;
           $108 = $gep_int76;
           $109 = HEAP32[$108>>2]|0;
           $gep_int77 = $6;
           $110 = $gep_int77;
           HEAP32[$110>>2] = $109;
           $gep_int78 = $__names;
           $gep79 = (($gep_int78) + 24)|0;
           $111 = $gep79;
           __THREW__ = 0;
           $112 = $$byval_copy2;
           
           $113 = $$byval_copy2;
           $114 = $6;
           ;HEAP32[$113+0>>2]=HEAP32[$114+0>>2]|0;
           $115 = invoke_iiiiiiii(2,$__b|0,$$byval_copy2|0,$95|0,$111|0,$61|0,$__err|0,1)|0;
           $116 = $$byval_copy2;
           
           $117 = __THREW__; __THREW__ = 0;
           $118 = $117&1;
           
           if ($118) {
            $expanded25 = 69;
            $140 = ___cxa_find_matching_catch(-1,-1)|0;
            $141 = tempRet0;
            $gep_int89 = $__names;
            $gep90 = (($gep_int89) + 12)|0;
            $142 = $gep90;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($142);
            $gep_int91 = $__names;
            $143 = $gep_int91;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($143);
            
            $$0 = $140;$$01 = $141;
            
            
            ___resumeException($$0|0);
            // unreachable
           } else {
            $119 = ($115|0)==($95|0);
            $120 = $119&1;
            HEAP8[$__v] = $120;
            $gep_int80 = $__b;
            $121 = $gep_int80;
            $122 = HEAP32[$121>>2]|0;
            $gep_int81 = $agg$result;
            $123 = $gep_int81;
            HEAP32[$123>>2] = $122;
            $gep_int82 = $__names;
            $gep83 = (($gep_int82) + 12)|0;
            $124 = $gep83;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($124);
            $gep_int84 = $__names;
            $125 = $gep_int84;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($125);
            
            STACKTOP = sp;return;
           }
          }
         } while(0);
         
         $expanded24 = 69;
         $134 = ___cxa_find_matching_catch(-1,-1)|0;
         $135 = tempRet0;
         $136 = ($95|0)==($$02|0);
         
         if ($136) {
          $$0 = $134;$$01 = $135;
          
          
          ___resumeException($$0|0);
          // unreachable
         } else {
          $137 = $$02;
         }
         while(1) {
          
          $gep_int87 = $137;
          $gep88 = (($gep_int87) + -12)|0;
          $138 = $gep88;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($138);
          $139 = ($138|0)==($95|0);
          
          if ($139) {
           $$0 = $134;$$01 = $135;
           break;
          } else {
           $137$phi = $138;$137 = $137$phi;
          }
         }
         
         
         ___resumeException($$0|0);
         // unreachable
        }
       } while(0);
       $88 = ___cxa_allocate_exception(4)|0;
       $89 = $88;
       __ZNSt8bad_castC2Ev($89);
       __THREW__ = 0;
       $expanded20 = 16440;
       $expanded21 = 119;
       invoke_viii(5,$88|0,$expanded20|0,$expanded21|0);
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       
       if ($91) {
        break;
       }
       // unreachable
      }
     } while(0);
     $expanded23 = 69;
     $130 = ___cxa_find_matching_catch(-1,-1)|0;
     $131 = tempRet0;
     $132 = HEAP32[$64>>2]|0;
     $gep_int86 = $132;
     $133 = $gep_int86;
     u$77 = __ZNSt3__114__shared_count16__release_sharedEv($133)|0;
     
     $$0 = $130;$$01 = $131;
     
     
     ___resumeException($$0|0);
     // unreachable
    }
   } while(0);
   $57 = ___cxa_allocate_exception(4)|0;
   $58 = $57;
   __ZNSt8bad_castC2Ev($58);
   __THREW__ = 0;
   $expanded10 = 16440;
   $expanded11 = 119;
   invoke_viii(5,$57|0,$expanded10|0,$expanded11|0);
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   
   if ($60) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded22 = 69;
 $126 = ___cxa_find_matching_catch(-1,-1)|0;
 $127 = tempRet0;
 $128 = HEAP32[$33>>2]|0;
 $gep_int85 = $128;
 $129 = $gep_int85;
 u$75 = __ZNSt3__114__shared_count16__release_sharedEv($129)|0;
 
 $$0 = $126;$$01 = $127;
 
 
 ___resumeException($$0|0);
 // unreachable
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$off0$i = 0, $$024 = 0, $$02680 = 0, $$02680$phi = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off035 = 0, $__consume$0$off035$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$064 = 0, $__ky1$036 = 0, $__ky1$036$us = 0, $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$062 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0;
 var $__n_does_match$332 = 0, $__n_does_match$332$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$061 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$331 = 0, $__n_might_match$331$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$063 = 0, $__st$133 = 0, $__st$133$us = 0, $__st$246 = 0;
 var $__st$32581 = 0, $__st$32581$phi = 0, $__statbuf = 0, $__status$0 = 0, $expanded = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $extract$t$i = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0;
 var $gep36 = 0, $gep38 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0;
 var $gep76 = 0, $gep78 = 0, $gep80 = 0, $gep82 = 0, $gep84 = 0, $gep86 = 0, $gep88 = 0, $gep90 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep98 = 0, $gep_int = 0, $gep_int101 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0;
 var $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0;
 var $gep_int69 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int99 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $tmp$i$i = 0, label = 0;
 var sp = 0, u$134 = 0, u$14 = 0, u$91 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 $__statbuf = sp;
 $1 = $__ke;
 $2 = $__kb;
 $3 = (($1) - ($2))|0;
 $4 = (($3|0) / 12)&-1;
 $gep_int = $__statbuf;
 $5 = $gep_int;
 
 $6 = ($4>>>0)>(100);
 
 do {
  if ($6) {
   $7 = _malloc($4)|0;
   $8 = ($7|0)==(0);
   
   if (!($8)) {
    $23 = $7;$__status$0 = $7;
    break;
   }
   __THREW__ = 0;
   invoke_v(13);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if (!($10)) {
    $23 = 0;$__status$0 = 0;
    break;
   }
   $expanded = 69;
   $11 = ___cxa_find_matching_catch(-1,-1)|0;
   $12 = tempRet0;
   
   $$index = $11;$$index10 = $12;
   
   
   ___resumeException($$index|0);
   // unreachable
  } else {
   $23 = 0;$__status$0 = $5;
  }
 } while(0);
 
 
 $24 = ($__kb|0)==($__ke|0);
 
 if ($24) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $4;
 } else {
  $__ky$064 = $__kb;$__n_does_match$062 = 0;$__n_might_match$061 = $4;$__st$063 = $__status$0;
  while(1) {
   
   
   
   
   $28 = $__ky$064;
   $29 = HEAP8[$__ky$064]|0;
   $30 = $29 & 1;
   $31 = ($30<<24>>24)==(0);
   
   if ($31) {
    $34 = $29&255;
    $35 = $34 >>> 1;
    
    $36 = $35;
   } else {
    $gep_int22 = $__ky$064;
    $gep = (($gep_int22) + 4)|0;
    $32 = $gep;
    $33 = HEAP32[$32>>2]|0;
    
    $36 = $33;
   }
   
   $37 = ($36|0)==(0);
   
   if ($37) {
    HEAP8[$__st$063] = 2;
    $38 = (($__n_might_match$061) + -1)|0;
    $39 = (($__n_does_match$062) + 1)|0;
    
    $__n_does_match$1 = $39;$__n_might_match$1 = $38;
   } else {
    HEAP8[$__st$063] = 1;
    
    $__n_does_match$1 = $__n_does_match$062;$__n_might_match$1 = $__n_might_match$061;
   }
   
   
   $gep_int23 = $__ky$064;
   $gep24 = (($gep_int23) + 12)|0;
   $40 = $gep24;
   $gep_int25 = $__st$063;
   $gep26 = (($gep_int25) + 1)|0;
   $41 = $gep26;
   $42 = ($40|0)==($__ke|0);
   
   if ($42) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$064 = $40;$__n_does_match$062 = $__n_does_match$1;$__n_might_match$061 = $__n_might_match$1;$__st$063 = $41;
   }
  }
 }
 
 
 $gep_int20 = $__b;
 $25 = $gep_int20;
 $gep_int21 = $__e;
 $26 = $gep_int21;
 $27 = $__ct;
 
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  
  
  
  $43 = HEAP32[$25>>2]|0;
  $44 = ($43|0)==(0);
  
  do {
   if ($44) {
    $58 = 0;
   } else {
    $gep_int27 = $43;
    $gep28 = (($gep_int27) + 12)|0;
    $45 = $gep28;
    $46 = HEAP32[$45>>2]|0;
    $gep_int29 = $43;
    $gep30 = (($gep_int29) + 16)|0;
    $47 = $gep30;
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    
    if (!($49)) {
     $58 = $43;
     break;
    }
    $50 = $43;
    $51 = HEAP32[$43>>2]|0;
    $gep_int31 = $51;
    $gep32 = (($gep_int31) + 36)|0;
    $52 = $gep32;
    $53 = HEAP32[$52>>2]|0;
    __THREW__ = 0;
    $54 = invoke_ii($53|0,$43|0)|0;
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    
    if ($56) {
     label = 6;
     break L19;
    }
    $57 = ($54|0)==(-1);
    
    if ($57) {
     HEAP32[$25>>2] = 0;
     
     $58 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$25>>2]|0;
     
     $58 = $$pre$i$i$i;
     break;
    }
   }
  } while(0);
  
  $59 = ($58|0)==(0);
  $60 = HEAP32[$26>>2]|0;
  $61 = ($60|0)==(0);
  
  do {
   if ($61) {
    $$pre$i2$i$i16 = 0;
   } else {
    $gep_int33 = $60;
    $gep34 = (($gep_int33) + 12)|0;
    $62 = $gep34;
    $63 = HEAP32[$62>>2]|0;
    $gep_int35 = $60;
    $gep36 = (($gep_int35) + 16)|0;
    $64 = $gep36;
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    
    if (!($66)) {
     $$pre$i2$i$i16 = $60;
     break;
    }
    $67 = $60;
    $68 = HEAP32[$60>>2]|0;
    $gep_int37 = $68;
    $gep38 = (($gep_int37) + 36)|0;
    $69 = $gep38;
    $70 = HEAP32[$69>>2]|0;
    __THREW__ = 0;
    $71 = invoke_ii($70|0,$60|0)|0;
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    
    if ($73) {
     label = 6;
     break L19;
    }
    $74 = ($71|0)==(-1);
    
    if (!($74)) {
     $$pre$i2$i$i16 = $60;
     break;
    }
    HEAP32[$26>>2] = 0;
    
    $$pre$i2$i$i16 = 0;
   }
  } while(0);
  
  $75 = ($$pre$i2$i$i16|0)==(0);
  $tmp$i$i = $59 ^ $75;
  $76 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $76;
  $77 = HEAP32[$25>>2]|0;
  
  if (!($$)) {
   label = 80;
   break;
  }
  $gep_int39 = $77;
  $gep40 = (($gep_int39) + 12)|0;
  $78 = $gep40;
  $79 = HEAP32[$78>>2]|0;
  $gep_int41 = $77;
  $gep42 = (($gep_int41) + 16)|0;
  $80 = $gep42;
  $81 = HEAP32[$80>>2]|0;
  $82 = ($79|0)==($81|0);
  
  if ($82) {
   $83 = $77;
   $84 = HEAP32[$77>>2]|0;
   $gep_int43 = $84;
   $gep44 = (($gep_int43) + 36)|0;
   $85 = $gep44;
   $86 = HEAP32[$85>>2]|0;
   __THREW__ = 0;
   $87 = invoke_ii($86|0,$77|0)|0;
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   
   if ($89) {
    label = 6;
    break;
   }
   $extract$t$i = $87&255;
   
   $$0$i$off0$i = $extract$t$i;
  } else {
   $90 = HEAP8[$79]|0;
   
   $$0$i$off0$i = $90;
  }
  
  
  if ($__case_sensitive) {
   $__c$0 = $$0$i$off0$i;
  } else {
   $91 = HEAP32[$__ct>>2]|0;
   $gep_int45 = $91;
   $gep46 = (($gep_int45) + 12)|0;
   $92 = $gep46;
   $93 = HEAP32[$92>>2]|0;
   __THREW__ = 0;
   $94 = invoke_iii($93|0,$__ct|0,$$0$i$off0$i|0)|0;
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   
   if ($96) {
    label = 6;
    break;
   } else {
    $__c$0 = $94;
   }
  }
  
  $$pre = (($__indx$0) + 1)|0;
  
  if ($24) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  
  L45: do {
   if ($__case_sensitive) {
    $__consume$0$off035$us = 0;$__ky1$036$us = $__kb;$__n_does_match$332$us = $__n_does_match$2;$__n_might_match$331$us = $__n_might_match$2;$__st$133$us = $__status$0;
    while(1) {
     
     
     
     
     
     $97 = HEAP8[$__st$133$us]|0;
     $98 = ($97<<24>>24)==(1);
     
     do {
      if ($98) {
       $99 = $__ky1$036$us;
       $100 = HEAP8[$__ky1$036$us]|0;
       $101 = $100 & 1;
       $102 = ($101<<24>>24)==(0);
       
       if ($102) {
        $105 = $__ky1$036$us;
        $gep_int49 = $__ky1$036$us;
        $gep50 = (($gep_int49) + 1)|0;
        $106 = $gep50;
        
        $107 = $106;
       } else {
        $gep_int47 = $__ky1$036$us;
        $gep48 = (($gep_int47) + 8)|0;
        $103 = $gep48;
        $104 = HEAP32[$103>>2]|0;
        
        $107 = $104;
       }
       
       $gep_int51 = $107;
       $gep52 = (($gep_int51) + ($__indx$0))|0;
       $108 = $gep52;
       $109 = HEAP8[$108]|0;
       $110 = ($__c$0<<24>>24)==($109<<24>>24);
       
       if (!($110)) {
        HEAP8[$__st$133$us] = 0;
        $111 = (($__n_might_match$331$us) + -1)|0;
        
        $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $111;
        break;
       }
       
       if ($102) {
        $114 = $100&255;
        $115 = $114 >>> 1;
        
        $116 = $115;
       } else {
        $gep_int53 = $__ky1$036$us;
        $gep54 = (($gep_int53) + 4)|0;
        $112 = $gep54;
        $113 = HEAP32[$112>>2]|0;
        
        $116 = $113;
       }
       
       $117 = ($116|0)==($$pre|0);
       
       if (!($117)) {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
        break;
       }
       HEAP8[$__st$133$us] = 2;
       $118 = (($__n_might_match$331$us) + -1)|0;
       $119 = (($__n_does_match$332$us) + 1)|0;
       
       $__consume$1$off0$us = 1;$__n_does_match$4$us = $119;$__n_might_match$4$us = $118;
      } else {
       $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
      }
     } while(0);
     
     
     
     $gep_int55 = $__ky1$036$us;
     $gep56 = (($gep_int55) + 12)|0;
     $120 = $gep56;
     $121 = ($120|0)==($__ke|0);
     
     if ($121) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L45;
     }
     $gep_int57 = $__st$133$us;
     $gep58 = (($gep_int57) + 1)|0;
     $122 = $gep58;
     
     $__consume$0$off035$us = $__consume$1$off0$us;$__ky1$036$us = $120;$__n_does_match$332$us = $__n_does_match$4$us;$__n_might_match$331$us = $__n_might_match$4$us;$__st$133$us = $122;
    }
   } else {
    $__consume$0$off035 = 0;$__ky1$036 = $__kb;$__n_does_match$332 = $__n_does_match$2;$__n_might_match$331 = $__n_might_match$2;$__st$133 = $__status$0;
    while(1) {
     
     
     
     
     
     $123 = HEAP8[$__st$133]|0;
     $124 = ($123<<24>>24)==(1);
     
     do {
      if ($124) {
       $125 = $__ky1$036;
       $126 = HEAP8[$__ky1$036]|0;
       $127 = $126 & 1;
       $128 = ($127<<24>>24)==(0);
       
       if ($128) {
        $131 = $__ky1$036;
        $gep_int61 = $__ky1$036;
        $gep62 = (($gep_int61) + 1)|0;
        $132 = $gep62;
        
        $133 = $132;
       } else {
        $gep_int59 = $__ky1$036;
        $gep60 = (($gep_int59) + 8)|0;
        $129 = $gep60;
        $130 = HEAP32[$129>>2]|0;
        
        $133 = $130;
       }
       
       $gep_int63 = $133;
       $gep64 = (($gep_int63) + ($__indx$0))|0;
       $134 = $gep64;
       $135 = HEAP8[$134]|0;
       $136 = HEAP32[$__ct>>2]|0;
       $gep_int65 = $136;
       $gep66 = (($gep_int65) + 12)|0;
       $137 = $gep66;
       $138 = HEAP32[$137>>2]|0;
       __THREW__ = 0;
       $139 = invoke_iii($138|0,$__ct|0,$135|0)|0;
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       
       if ($141) {
        label = 5;
        break L19;
       }
       $142 = ($__c$0<<24>>24)==($139<<24>>24);
       
       if (!($142)) {
        HEAP8[$__st$133] = 0;
        $154 = (($__n_might_match$331) + -1)|0;
        
        $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $154;
        break;
       }
       $143 = HEAP8[$__ky1$036]|0;
       $144 = $143 & 1;
       $145 = ($144<<24>>24)==(0);
       
       if ($145) {
        $148 = $143&255;
        $149 = $148 >>> 1;
        
        $150 = $149;
       } else {
        $gep_int67 = $__ky1$036;
        $gep68 = (($gep_int67) + 4)|0;
        $146 = $gep68;
        $147 = HEAP32[$146>>2]|0;
        
        $150 = $147;
       }
       
       $151 = ($150|0)==($$pre|0);
       
       if (!($151)) {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
        break;
       }
       HEAP8[$__st$133] = 2;
       $152 = (($__n_might_match$331) + -1)|0;
       $153 = (($__n_does_match$332) + 1)|0;
       
       $__consume$1$off0 = 1;$__n_does_match$4 = $153;$__n_might_match$4 = $152;
      } else {
       $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
      }
     } while(0);
     
     
     
     $gep_int69 = $__ky1$036;
     $gep70 = (($gep_int69) + 12)|0;
     $155 = $gep70;
     $156 = ($155|0)==($__ke|0);
     
     if ($156) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L45;
     }
     $gep_int71 = $__st$133;
     $gep72 = (($gep_int71) + 1)|0;
     $157 = $gep72;
     
     $__consume$0$off035 = $__consume$1$off0;$__ky1$036 = $155;$__n_does_match$332 = $__n_does_match$4;$__n_might_match$331 = $__n_might_match$4;$__st$133 = $157;
    }
   }
  } while(0);
  
  
  
  
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $158 = HEAP32[$25>>2]|0;
  $gep_int73 = $158;
  $gep74 = (($gep_int73) + 12)|0;
  $159 = $gep74;
  $160 = HEAP32[$159>>2]|0;
  $gep_int75 = $158;
  $gep76 = (($gep_int75) + 16)|0;
  $161 = $gep76;
  $162 = HEAP32[$161>>2]|0;
  $163 = ($160|0)==($162|0);
  
  if ($163) {
   $164 = $158;
   $165 = HEAP32[$158>>2]|0;
   $gep_int77 = $165;
   $gep78 = (($gep_int77) + 40)|0;
   $166 = $gep78;
   $167 = HEAP32[$166>>2]|0;
   __THREW__ = 0;
   u$91 = invoke_ii($167|0,$158|0)|0;
   $168 = __THREW__; __THREW__ = 0;
   $169 = $168&1;
   
   if ($169) {
    label = 6;
    break;
   }
  } else {
   $gep_int79 = $160;
   $gep80 = (($gep_int79) + 1)|0;
   $170 = $gep80;
   HEAP32[$159>>2] = $170;
   
  }
  $171 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($171>>>0)<(2);
  
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$047 = $__kb;$__n_does_match$545 = $__n_does_match$3$lcssa;$__st$246 = $__status$0;
  }
  while(1) {
   
   
   
   $172 = HEAP8[$__st$246]|0;
   $173 = ($172<<24>>24)==(2);
   
   do {
    if ($173) {
     $174 = $__ky2$047;
     $175 = HEAP8[$__ky2$047]|0;
     $176 = $175 & 1;
     $177 = ($176<<24>>24)==(0);
     
     if ($177) {
      $180 = $175&255;
      $181 = $180 >>> 1;
      
      $182 = $181;
     } else {
      $gep_int81 = $__ky2$047;
      $gep82 = (($gep_int81) + 4)|0;
      $178 = $gep82;
      $179 = HEAP32[$178>>2]|0;
      
      $182 = $179;
     }
     
     $183 = ($182|0)==($$pre|0);
     
     if ($183) {
      $__n_does_match$6 = $__n_does_match$545;
      break;
     }
     HEAP8[$__st$246] = 0;
     $184 = (($__n_does_match$545) + -1)|0;
     
     $__n_does_match$6 = $184;
    } else {
     $__n_does_match$6 = $__n_does_match$545;
    }
   } while(0);
   
   $gep_int83 = $__ky2$047;
   $gep84 = (($gep_int83) + 12)|0;
   $185 = $gep84;
   $gep_int85 = $__st$246;
   $gep86 = (($gep_int85) + 1)|0;
   $186 = $gep86;
   $187 = ($185|0)==($__ke|0);
   
   if ($187) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L19;
   } else {
    $__ky2$047 = $185;$__n_does_match$545 = $__n_does_match$6;$__st$246 = $186;
   }
  }
 }
 if ((label|0) == 5) {
  $expanded15 = 69;
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 6) {
  $expanded16 = 69;
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 else if ((label|0) == 80) {
  $188 = ($77|0)==(0);
  
  do {
   if ($188) {
    $202 = 0;
    label = 86;
   } else {
    $gep_int87 = $77;
    $gep88 = (($gep_int87) + 12)|0;
    $189 = $gep88;
    $190 = HEAP32[$189>>2]|0;
    $gep_int89 = $77;
    $gep90 = (($gep_int89) + 16)|0;
    $191 = $gep90;
    $192 = HEAP32[$191>>2]|0;
    $193 = ($190|0)==($192|0);
    
    if (!($193)) {
     $202 = $77;
     label = 86;
     break;
    }
    $194 = $77;
    $195 = HEAP32[$77>>2]|0;
    $gep_int91 = $195;
    $gep92 = (($gep_int91) + 36)|0;
    $196 = $gep92;
    $197 = HEAP32[$196>>2]|0;
    __THREW__ = 0;
    $198 = invoke_ii($197|0,$77|0)|0;
    $199 = __THREW__; __THREW__ = 0;
    $200 = $199&1;
    
    if ($200) {
     break;
    }
    $201 = ($198|0)==(-1);
    
    if ($201) {
     HEAP32[$25>>2] = 0;
     
     $202 = 0;
     label = 86;
     break;
    } else {
     $$pre$i$i$i12 = HEAP32[$25>>2]|0;
     
     $202 = $$pre$i$i$i12;
     label = 86;
     break;
    }
   }
  } while(0);
  L108: do {
   if ((label|0) == 86) {
    
    $203 = ($202|0)==(0);
    
    do {
     if ($75) {
      label = 92;
     } else {
      $gep_int93 = $$pre$i2$i$i16;
      $gep94 = (($gep_int93) + 12)|0;
      $204 = $gep94;
      $205 = HEAP32[$204>>2]|0;
      $gep_int95 = $$pre$i2$i$i16;
      $gep96 = (($gep_int95) + 16)|0;
      $206 = $gep96;
      $207 = HEAP32[$206>>2]|0;
      $208 = ($205|0)==($207|0);
      
      if (!($208)) {
       
       if ($203) {
        break;
       } else {
        label = 94;
        break;
       }
      }
      $209 = $$pre$i2$i$i16;
      $210 = HEAP32[$$pre$i2$i$i16>>2]|0;
      $gep_int97 = $210;
      $gep98 = (($gep_int97) + 36)|0;
      $211 = $gep98;
      $212 = HEAP32[$211>>2]|0;
      __THREW__ = 0;
      $213 = invoke_ii($212|0,$$pre$i2$i$i16|0)|0;
      $214 = __THREW__; __THREW__ = 0;
      $215 = $214&1;
      
      if ($215) {
       break L108;
      }
      $216 = ($213|0)==(-1);
      
      if ($216) {
       HEAP32[$26>>2] = 0;
       
       label = 92;
       break;
      } else {
       
       if ($203) {
        break;
       } else {
        label = 94;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 92) {
     
     if ($203) {
      label = 94;
     }
    }
    if ((label|0) == 94) {
     $217 = HEAP32[$__err>>2]|0;
     $218 = $217 | 2;
     HEAP32[$__err>>2] = $218;
     
    }
    
    L124: do {
     if ($24) {
      label = 99;
     } else {
      $219 = HEAP8[$__status$0]|0;
      $220 = ($219<<24>>24)==(2);
      
      if ($220) {
       $$024 = $__kb;
       break;
      } else {
       $$02680 = $__kb;$__st$32581 = $__status$0;
      }
      while(1) {
       
       
       $gep_int99 = $$02680;
       $gep100 = (($gep_int99) + 12)|0;
       $223 = $gep100;
       $224 = ($223|0)==($__ke|0);
       $gep_int101 = $__st$32581;
       $gep102 = (($gep_int101) + 1)|0;
       $225 = $gep102;
       
       if ($224) {
        label = 99;
        break L124;
       }
       $221 = HEAP8[$225]|0;
       $222 = ($221<<24>>24)==(2);
       
       if ($222) {
        $$024 = $223;
        break;
       } else {
        $__st$32581$phi = $225;$$02680$phi = $223;$__st$32581 = $__st$32581$phi;$$02680 = $$02680$phi;
       }
      }
     }
    } while(0);
    if ((label|0) == 99) {
     $226 = HEAP32[$__err>>2]|0;
     $227 = $226 | 4;
     HEAP32[$__err>>2] = $227;
     
     $$024 = $__ke;
    }
    
    $228 = ($23|0)==(0);
    
    if ($228) {
     
     STACKTOP = sp;return $$024|0;
    }
    __THREW__ = 0;
    invoke_vi(179,$23|0);
    $229 = __THREW__; __THREW__ = 0;
    $230 = $229&1;
    
    if ($230) {
     $expanded19 = 69;
     $231 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$134 = tempRet0;
     ___clang_call_terminate($231);
     // unreachable
    } else {
     
     STACKTOP = sp;return $$024|0;
    }
   }
  } while(0);
  $expanded17 = 69;
  $17 = ___cxa_find_matching_catch(-1,-1)|0;
  $18 = tempRet0;
  
  $lpad$phi$index = $17;$lpad$phi$index3 = $18;
 }
 
 
 $19 = ($23|0)==(0);
 
 if ($19) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  
  
  ___resumeException($$index|0);
  // unreachable
 }
 __THREW__ = 0;
 invoke_vi(179,$23|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 
 if ($21) {
  $expanded18 = 69;
  $22 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$14 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  
  
  ___resumeException($$index|0);
  // unreachable
 }
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$off0$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $extract$t$i = 0, $gep = 0, $gep11 = 0;
 var $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0;
 var $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0;
 var $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0;
 var $tmp$i$i = 0, label = 0, sp = 0, u$67 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else {
  
  $$0$i = 10;
 }
 
 $gep_int7 = $__atoms;
 $4 = $gep_int7;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$__buf]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   
   if ($9) {
    $12 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $13 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre33 = $gep15;
    
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $10 = $gep9;
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre31 = $gep11;
    
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   
   
   
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   
   $gep_int16 = $__g;
   $16 = $gep_int16;
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $17 = $gep_int17;
   $gep_int18 = $__e;
   $18 = $gep_int18;
   $gep_int19 = $__buf;
   $19 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $20 = $gep21;
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    
    
    $22 = ($$pre$i$i$i4|0)==(0);
    
    do {
     if ($22) {
      $36 = 0;
     } else {
      $gep_int22 = $$pre$i$i$i4;
      $gep23 = (($gep_int22) + 12)|0;
      $23 = $gep23;
      $24 = HEAP32[$23>>2]|0;
      $gep_int24 = $$pre$i$i$i4;
      $gep25 = (($gep_int24) + 16)|0;
      $25 = $gep25;
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$$pre$i$i$i4>>2]|0;
      $gep_int26 = $29;
      $gep27 = (($gep_int26) + 36)|0;
      $30 = $gep27;
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = invoke_ii($31|0,$$pre$i$i$i4|0)|0;
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      
      $36 = 0;
     }
    } while(0);
    
    $37 = ($36|0)==(0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0);
    
    do {
     if ($39) {
      label = 21;
     } else {
      $gep_int28 = $38;
      $gep29 = (($gep_int28) + 12)|0;
      $40 = $gep29;
      $41 = HEAP32[$40>>2]|0;
      $gep_int30 = $38;
      $gep31 = (($gep_int30) + 16)|0;
      $42 = $gep31;
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      
      if (!($44)) {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$38>>2]|0;
      $gep_int32 = $46;
      $gep33 = (($gep_int32) + 36)|0;
      $47 = $gep33;
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = invoke_ii($48|0,$38|0)|0;
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      
      if ($52) {
       HEAP32[$18>>2] = 0;
       
       label = 21;
       break;
      } else {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$__buf]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     
     $64 = $61;
    }
    
    $65 = ($57|0)==($64|0);
    
    if ($65) {
     
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      
      $71 = $66;$72 = $66;
     }
     
     
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$73|0,0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$__buf]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      
      $81 = $phitmp$i19;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$81|0,0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$__buf]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      
      $88 = $87;
     }
     
     $gep_int34 = $88;
     $gep35 = (($gep_int34) + ($71))|0;
     $89 = $gep35;
     HEAP32[$__a_end>>2] = $89;
     
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $36;
    $gep37 = (($gep_int36) + 12)|0;
    $94 = $gep37;
    $95 = HEAP32[$94>>2]|0;
    $gep_int38 = $36;
    $gep39 = (($gep_int38) + 16)|0;
    $96 = $gep39;
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$36>>2]|0;
     $gep_int40 = $100;
     $gep41 = (($gep_int40) + 36)|0;
     $101 = $gep41;
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = invoke_ii($102|0,$36|0)|0;
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     
     if ($105) {
      label = 37;
      break;
     }
     $extract$t$i = $103&255;
     
     $$0$i$off0$i = $extract$t$i;
    } else {
     $106 = HEAP8[$95]|0;
     
     $$0$i$off0$i = $106;
    }
    
    $107 = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$off0$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0;
    $108 = ($107|0)==(0);
    
    if (!($108)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $109 = HEAP32[$94>>2]|0;
    $110 = HEAP32[$96>>2]|0;
    $111 = ($109|0)==($110|0);
    
    if ($111) {
     $112 = $36;
     $113 = HEAP32[$36>>2]|0;
     $gep_int42 = $113;
     $gep43 = (($gep_int42) + 40)|0;
     $114 = $gep43;
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     u$67 = invoke_ii($115|0,$36|0)|0;
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     
     if ($117) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $109;
     $gep45 = (($gep_int44) + 1)|0;
     $118 = $gep45;
     HEAP32[$94>>2] = $118;
     
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $expanded = 69;
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $119 = $__grouping;
   $120 = HEAP8[$__grouping]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   
   if ($122) {
    $125 = $120&255;
    $126 = $125 >>> 1;
    
    $127 = $126;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $123 = $gep47;
    $124 = HEAP32[$123>>2]|0;
    
    $127 = $124;
   }
   
   $128 = ($127|0)==(0);
   
   do {
    if (!($128)) {
     $129 = HEAP32[$__g_end>>2]|0;
     $130 = $129;
     $131 = $__g;
     $132 = (($130) - ($131))|0;
     $133 = ($132|0)<(160);
     
     if (!($133)) {
      break;
     }
     $134 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $129;
     $gep49 = (($gep_int48) + 4)|0;
     $135 = $gep49;
     HEAP32[$__g_end>>2] = $135;
     HEAP32[$129>>2] = $134;
     
    }
   } while(0);
   $136 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $137 = invoke_iiiii(9,$__a$2|0,$136|0,$__err|0,$$0$i|0)|0;
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   
   if ($139) {
    break;
   }
   HEAP32[$__v>>2] = $137;
   $140 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$140,$__err);
   $141 = ($36|0)==(0);
   
   do {
    if ($141) {
     $155 = 0;
    } else {
     $gep_int50 = $36;
     $gep51 = (($gep_int50) + 12)|0;
     $142 = $gep51;
     $143 = HEAP32[$142>>2]|0;
     $gep_int52 = $36;
     $gep53 = (($gep_int52) + 16)|0;
     $144 = $gep53;
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     
     if (!($146)) {
      $155 = $36;
      break;
     }
     $147 = $36;
     $148 = HEAP32[$36>>2]|0;
     $gep_int54 = $148;
     $gep55 = (($gep_int54) + 36)|0;
     $149 = $gep55;
     $150 = HEAP32[$149>>2]|0;
     __THREW__ = 0;
     $151 = invoke_ii($150|0,$36|0)|0;
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     
     if ($153) {
      break L6;
     }
     $154 = ($151|0)==(-1);
     
     if (!($154)) {
      $155 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     
     $155 = 0;
    }
   } while(0);
   
   $156 = ($155|0)==(0);
   $157 = ($$pre$i2$i$i|0)==(0);
   
   do {
    if ($157) {
     label = 66;
    } else {
     $gep_int56 = $$pre$i2$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $158 = $gep57;
     $159 = HEAP32[$158>>2]|0;
     $gep_int58 = $$pre$i2$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $160 = $gep59;
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159|0)==($161|0);
     
     if (!($162)) {
      
      if (!($156)) {
       break;
      }
      $gep_int62 = $agg$result;
      $174 = $gep_int62;
      HEAP32[$174>>2] = $155;
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $163 = $$pre$i2$i$i;
     $164 = HEAP32[$$pre$i2$i$i>>2]|0;
     $gep_int60 = $164;
     $gep61 = (($gep_int60) + 36)|0;
     $165 = $gep61;
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = invoke_ii($166|0,$$pre$i2$i$i|0)|0;
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     
     if ($169) {
      break L6;
     }
     $170 = ($167|0)==(-1);
     
     if ($170) {
      HEAP32[$18>>2] = 0;
      
      label = 66;
      break;
     }
     $171 = ($$pre$i2$i$i|0)==(0);
     $tmp$i$i = $156 ^ $171;
     
     if (!($tmp$i$i)) {
      break;
     }
     $gep_int62 = $agg$result;
     $174 = $gep_int62;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 66) {
     
     if ($156) {
      break;
     }
     $gep_int62 = $agg$result;
     $174 = $gep_int62;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $172 = HEAP32[$__err>>2]|0;
   $173 = $172 | 2;
   HEAP32[$__err>>2] = $173;
   
   $gep_int62 = $agg$result;
   $174 = $gep_int62;
   HEAP32[$174>>2] = $155;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$off0$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0;
 var $expanded = 0, $expanded6 = 0, $extract$t$i = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0;
 var $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0;
 var $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int7 = 0;
 var $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0, u$67 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else {
  
  $$0$i = 10;
 }
 
 $gep_int7 = $__atoms;
 $4 = $gep_int7;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$__buf]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   
   if ($9) {
    $12 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $13 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre33 = $gep15;
    
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $10 = $gep9;
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre31 = $gep11;
    
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   
   
   
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   
   $gep_int16 = $__g;
   $16 = $gep_int16;
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $17 = $gep_int17;
   $gep_int18 = $__e;
   $18 = $gep_int18;
   $gep_int19 = $__buf;
   $19 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $20 = $gep21;
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    
    
    $22 = ($$pre$i$i$i4|0)==(0);
    
    do {
     if ($22) {
      $36 = 0;
     } else {
      $gep_int22 = $$pre$i$i$i4;
      $gep23 = (($gep_int22) + 12)|0;
      $23 = $gep23;
      $24 = HEAP32[$23>>2]|0;
      $gep_int24 = $$pre$i$i$i4;
      $gep25 = (($gep_int24) + 16)|0;
      $25 = $gep25;
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$$pre$i$i$i4>>2]|0;
      $gep_int26 = $29;
      $gep27 = (($gep_int26) + 36)|0;
      $30 = $gep27;
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = invoke_ii($31|0,$$pre$i$i$i4|0)|0;
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      
      $36 = 0;
     }
    } while(0);
    
    $37 = ($36|0)==(0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0);
    
    do {
     if ($39) {
      label = 21;
     } else {
      $gep_int28 = $38;
      $gep29 = (($gep_int28) + 12)|0;
      $40 = $gep29;
      $41 = HEAP32[$40>>2]|0;
      $gep_int30 = $38;
      $gep31 = (($gep_int30) + 16)|0;
      $42 = $gep31;
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      
      if (!($44)) {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$38>>2]|0;
      $gep_int32 = $46;
      $gep33 = (($gep_int32) + 36)|0;
      $47 = $gep33;
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = invoke_ii($48|0,$38|0)|0;
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      
      if ($52) {
       HEAP32[$18>>2] = 0;
       
       label = 21;
       break;
      } else {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$__buf]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     
     $64 = $61;
    }
    
    $65 = ($57|0)==($64|0);
    
    if ($65) {
     
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      
      $71 = $66;$72 = $66;
     }
     
     
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$73|0,0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$__buf]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      
      $81 = $phitmp$i19;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$81|0,0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$__buf]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      
      $88 = $87;
     }
     
     $gep_int34 = $88;
     $gep35 = (($gep_int34) + ($71))|0;
     $89 = $gep35;
     HEAP32[$__a_end>>2] = $89;
     
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $36;
    $gep37 = (($gep_int36) + 12)|0;
    $94 = $gep37;
    $95 = HEAP32[$94>>2]|0;
    $gep_int38 = $36;
    $gep39 = (($gep_int38) + 16)|0;
    $96 = $gep39;
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$36>>2]|0;
     $gep_int40 = $100;
     $gep41 = (($gep_int40) + 36)|0;
     $101 = $gep41;
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = invoke_ii($102|0,$36|0)|0;
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     
     if ($105) {
      label = 37;
      break;
     }
     $extract$t$i = $103&255;
     
     $$0$i$off0$i = $extract$t$i;
    } else {
     $106 = HEAP8[$95]|0;
     
     $$0$i$off0$i = $106;
    }
    
    $107 = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$off0$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0;
    $108 = ($107|0)==(0);
    
    if (!($108)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $109 = HEAP32[$94>>2]|0;
    $110 = HEAP32[$96>>2]|0;
    $111 = ($109|0)==($110|0);
    
    if ($111) {
     $112 = $36;
     $113 = HEAP32[$36>>2]|0;
     $gep_int42 = $113;
     $gep43 = (($gep_int42) + 40)|0;
     $114 = $gep43;
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     u$67 = invoke_ii($115|0,$36|0)|0;
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     
     if ($117) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $109;
     $gep45 = (($gep_int44) + 1)|0;
     $118 = $gep45;
     HEAP32[$94>>2] = $118;
     
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $expanded = 69;
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $119 = $__grouping;
   $120 = HEAP8[$__grouping]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   
   if ($122) {
    $125 = $120&255;
    $126 = $125 >>> 1;
    
    $127 = $126;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $123 = $gep47;
    $124 = HEAP32[$123>>2]|0;
    
    $127 = $124;
   }
   
   $128 = ($127|0)==(0);
   
   do {
    if (!($128)) {
     $129 = HEAP32[$__g_end>>2]|0;
     $130 = $129;
     $131 = $__g;
     $132 = (($130) - ($131))|0;
     $133 = ($132|0)<(160);
     
     if (!($133)) {
      break;
     }
     $134 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $129;
     $gep49 = (($gep_int48) + 4)|0;
     $135 = $gep49;
     HEAP32[$__g_end>>2] = $135;
     HEAP32[$129>>2] = $134;
     
    }
   } while(0);
   $136 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $137 = invoke_iiiii(10,$__a$2|0,$136|0,$__err|0,$$0$i|0)|0;
   $138 = tempRet0;
   $139 = __THREW__; __THREW__ = 0;
   $140 = $139&1;
   
   if ($140) {
    break;
   }
   $141 = $__v;
   $142 = $141;
   HEAP32[$142>>2] = $137;
   $143 = (($141) + 4)|0;
   $144 = $143;
   HEAP32[$144>>2] = $138;
   $145 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$145,$__err);
   $146 = ($36|0)==(0);
   
   do {
    if ($146) {
     $160 = 0;
    } else {
     $gep_int50 = $36;
     $gep51 = (($gep_int50) + 12)|0;
     $147 = $gep51;
     $148 = HEAP32[$147>>2]|0;
     $gep_int52 = $36;
     $gep53 = (($gep_int52) + 16)|0;
     $149 = $gep53;
     $150 = HEAP32[$149>>2]|0;
     $151 = ($148|0)==($150|0);
     
     if (!($151)) {
      $160 = $36;
      break;
     }
     $152 = $36;
     $153 = HEAP32[$36>>2]|0;
     $gep_int54 = $153;
     $gep55 = (($gep_int54) + 36)|0;
     $154 = $gep55;
     $155 = HEAP32[$154>>2]|0;
     __THREW__ = 0;
     $156 = invoke_ii($155|0,$36|0)|0;
     $157 = __THREW__; __THREW__ = 0;
     $158 = $157&1;
     
     if ($158) {
      break L6;
     }
     $159 = ($156|0)==(-1);
     
     if (!($159)) {
      $160 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     
     $160 = 0;
    }
   } while(0);
   
   $161 = ($160|0)==(0);
   $162 = ($$pre$i2$i$i|0)==(0);
   
   do {
    if ($162) {
     label = 66;
    } else {
     $gep_int56 = $$pre$i2$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $163 = $gep57;
     $164 = HEAP32[$163>>2]|0;
     $gep_int58 = $$pre$i2$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $165 = $gep59;
     $166 = HEAP32[$165>>2]|0;
     $167 = ($164|0)==($166|0);
     
     if (!($167)) {
      
      if (!($161)) {
       break;
      }
      $gep_int62 = $agg$result;
      $179 = $gep_int62;
      HEAP32[$179>>2] = $160;
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $168 = $$pre$i2$i$i;
     $169 = HEAP32[$$pre$i2$i$i>>2]|0;
     $gep_int60 = $169;
     $gep61 = (($gep_int60) + 36)|0;
     $170 = $gep61;
     $171 = HEAP32[$170>>2]|0;
     __THREW__ = 0;
     $172 = invoke_ii($171|0,$$pre$i2$i$i|0)|0;
     $173 = __THREW__; __THREW__ = 0;
     $174 = $173&1;
     
     if ($174) {
      break L6;
     }
     $175 = ($172|0)==(-1);
     
     if ($175) {
      HEAP32[$18>>2] = 0;
      
      label = 66;
      break;
     }
     $176 = ($$pre$i2$i$i|0)==(0);
     $tmp$i$i = $161 ^ $176;
     
     if (!($tmp$i$i)) {
      break;
     }
     $gep_int62 = $agg$result;
     $179 = $gep_int62;
     HEAP32[$179>>2] = $160;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 66) {
     
     if ($161) {
      break;
     }
     $gep_int62 = $agg$result;
     $179 = $gep_int62;
     HEAP32[$179>>2] = $160;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $177 = HEAP32[$__err>>2]|0;
   $178 = $177 | 2;
   HEAP32[$__err>>2] = $178;
   
   $gep_int62 = $agg$result;
   $179 = $gep_int62;
   HEAP32[$179>>2] = $160;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$off0$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $extract$t$i = 0, $gep = 0, $gep11 = 0;
 var $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0;
 var $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0;
 var $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0;
 var $tmp$i$i = 0, label = 0, sp = 0, u$67 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else {
  
  $$0$i = 10;
 }
 
 $gep_int7 = $__atoms;
 $4 = $gep_int7;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$__buf]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   
   if ($9) {
    $12 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $13 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre33 = $gep15;
    
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $10 = $gep9;
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre31 = $gep11;
    
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   
   
   
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   
   $gep_int16 = $__g;
   $16 = $gep_int16;
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $17 = $gep_int17;
   $gep_int18 = $__e;
   $18 = $gep_int18;
   $gep_int19 = $__buf;
   $19 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $20 = $gep21;
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    
    
    $22 = ($$pre$i$i$i4|0)==(0);
    
    do {
     if ($22) {
      $36 = 0;
     } else {
      $gep_int22 = $$pre$i$i$i4;
      $gep23 = (($gep_int22) + 12)|0;
      $23 = $gep23;
      $24 = HEAP32[$23>>2]|0;
      $gep_int24 = $$pre$i$i$i4;
      $gep25 = (($gep_int24) + 16)|0;
      $25 = $gep25;
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$$pre$i$i$i4>>2]|0;
      $gep_int26 = $29;
      $gep27 = (($gep_int26) + 36)|0;
      $30 = $gep27;
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = invoke_ii($31|0,$$pre$i$i$i4|0)|0;
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      
      $36 = 0;
     }
    } while(0);
    
    $37 = ($36|0)==(0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0);
    
    do {
     if ($39) {
      label = 21;
     } else {
      $gep_int28 = $38;
      $gep29 = (($gep_int28) + 12)|0;
      $40 = $gep29;
      $41 = HEAP32[$40>>2]|0;
      $gep_int30 = $38;
      $gep31 = (($gep_int30) + 16)|0;
      $42 = $gep31;
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      
      if (!($44)) {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$38>>2]|0;
      $gep_int32 = $46;
      $gep33 = (($gep_int32) + 36)|0;
      $47 = $gep33;
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = invoke_ii($48|0,$38|0)|0;
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      
      if ($52) {
       HEAP32[$18>>2] = 0;
       
       label = 21;
       break;
      } else {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$__buf]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     
     $64 = $61;
    }
    
    $65 = ($57|0)==($64|0);
    
    if ($65) {
     
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      
      $71 = $66;$72 = $66;
     }
     
     
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$73|0,0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$__buf]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      
      $81 = $phitmp$i19;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$81|0,0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$__buf]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      
      $88 = $87;
     }
     
     $gep_int34 = $88;
     $gep35 = (($gep_int34) + ($71))|0;
     $89 = $gep35;
     HEAP32[$__a_end>>2] = $89;
     
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $36;
    $gep37 = (($gep_int36) + 12)|0;
    $94 = $gep37;
    $95 = HEAP32[$94>>2]|0;
    $gep_int38 = $36;
    $gep39 = (($gep_int38) + 16)|0;
    $96 = $gep39;
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$36>>2]|0;
     $gep_int40 = $100;
     $gep41 = (($gep_int40) + 36)|0;
     $101 = $gep41;
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = invoke_ii($102|0,$36|0)|0;
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     
     if ($105) {
      label = 37;
      break;
     }
     $extract$t$i = $103&255;
     
     $$0$i$off0$i = $extract$t$i;
    } else {
     $106 = HEAP8[$95]|0;
     
     $$0$i$off0$i = $106;
    }
    
    $107 = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$off0$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0;
    $108 = ($107|0)==(0);
    
    if (!($108)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $109 = HEAP32[$94>>2]|0;
    $110 = HEAP32[$96>>2]|0;
    $111 = ($109|0)==($110|0);
    
    if ($111) {
     $112 = $36;
     $113 = HEAP32[$36>>2]|0;
     $gep_int42 = $113;
     $gep43 = (($gep_int42) + 40)|0;
     $114 = $gep43;
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     u$67 = invoke_ii($115|0,$36|0)|0;
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     
     if ($117) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $109;
     $gep45 = (($gep_int44) + 1)|0;
     $118 = $gep45;
     HEAP32[$94>>2] = $118;
     
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $expanded = 69;
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $119 = $__grouping;
   $120 = HEAP8[$__grouping]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   
   if ($122) {
    $125 = $120&255;
    $126 = $125 >>> 1;
    
    $127 = $126;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $123 = $gep47;
    $124 = HEAP32[$123>>2]|0;
    
    $127 = $124;
   }
   
   $128 = ($127|0)==(0);
   
   do {
    if (!($128)) {
     $129 = HEAP32[$__g_end>>2]|0;
     $130 = $129;
     $131 = $__g;
     $132 = (($130) - ($131))|0;
     $133 = ($132|0)<(160);
     
     if (!($133)) {
      break;
     }
     $134 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $129;
     $gep49 = (($gep_int48) + 4)|0;
     $135 = $gep49;
     HEAP32[$__g_end>>2] = $135;
     HEAP32[$129>>2] = $134;
     
    }
   } while(0);
   $136 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $137 = invoke_iiiii(11,$__a$2|0,$136|0,$__err|0,$$0$i|0)|0;
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   
   if ($139) {
    break;
   }
   HEAP16[$__v>>1] = $137;
   $140 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$140,$__err);
   $141 = ($36|0)==(0);
   
   do {
    if ($141) {
     $155 = 0;
    } else {
     $gep_int50 = $36;
     $gep51 = (($gep_int50) + 12)|0;
     $142 = $gep51;
     $143 = HEAP32[$142>>2]|0;
     $gep_int52 = $36;
     $gep53 = (($gep_int52) + 16)|0;
     $144 = $gep53;
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     
     if (!($146)) {
      $155 = $36;
      break;
     }
     $147 = $36;
     $148 = HEAP32[$36>>2]|0;
     $gep_int54 = $148;
     $gep55 = (($gep_int54) + 36)|0;
     $149 = $gep55;
     $150 = HEAP32[$149>>2]|0;
     __THREW__ = 0;
     $151 = invoke_ii($150|0,$36|0)|0;
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     
     if ($153) {
      break L6;
     }
     $154 = ($151|0)==(-1);
     
     if (!($154)) {
      $155 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     
     $155 = 0;
    }
   } while(0);
   
   $156 = ($155|0)==(0);
   $157 = ($$pre$i2$i$i|0)==(0);
   
   do {
    if ($157) {
     label = 66;
    } else {
     $gep_int56 = $$pre$i2$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $158 = $gep57;
     $159 = HEAP32[$158>>2]|0;
     $gep_int58 = $$pre$i2$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $160 = $gep59;
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159|0)==($161|0);
     
     if (!($162)) {
      
      if (!($156)) {
       break;
      }
      $gep_int62 = $agg$result;
      $174 = $gep_int62;
      HEAP32[$174>>2] = $155;
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $163 = $$pre$i2$i$i;
     $164 = HEAP32[$$pre$i2$i$i>>2]|0;
     $gep_int60 = $164;
     $gep61 = (($gep_int60) + 36)|0;
     $165 = $gep61;
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = invoke_ii($166|0,$$pre$i2$i$i|0)|0;
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     
     if ($169) {
      break L6;
     }
     $170 = ($167|0)==(-1);
     
     if ($170) {
      HEAP32[$18>>2] = 0;
      
      label = 66;
      break;
     }
     $171 = ($$pre$i2$i$i|0)==(0);
     $tmp$i$i = $156 ^ $171;
     
     if (!($tmp$i$i)) {
      break;
     }
     $gep_int62 = $agg$result;
     $174 = $gep_int62;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 66) {
     
     if ($156) {
      break;
     }
     $gep_int62 = $agg$result;
     $174 = $gep_int62;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $172 = HEAP32[$__err>>2]|0;
   $173 = $172 | 2;
   HEAP32[$__err>>2] = $173;
   
   $gep_int62 = $agg$result;
   $174 = $gep_int62;
   HEAP32[$174>>2] = $155;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$off0$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $extract$t$i = 0, $gep = 0, $gep11 = 0;
 var $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0;
 var $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0;
 var $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0;
 var $tmp$i$i = 0, label = 0, sp = 0, u$67 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else {
  
  $$0$i = 10;
 }
 
 $gep_int7 = $__atoms;
 $4 = $gep_int7;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$__buf]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   
   if ($9) {
    $12 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $13 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre33 = $gep15;
    
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $10 = $gep9;
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre31 = $gep11;
    
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   
   
   
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   
   $gep_int16 = $__g;
   $16 = $gep_int16;
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $17 = $gep_int17;
   $gep_int18 = $__e;
   $18 = $gep_int18;
   $gep_int19 = $__buf;
   $19 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $20 = $gep21;
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    
    
    $22 = ($$pre$i$i$i4|0)==(0);
    
    do {
     if ($22) {
      $36 = 0;
     } else {
      $gep_int22 = $$pre$i$i$i4;
      $gep23 = (($gep_int22) + 12)|0;
      $23 = $gep23;
      $24 = HEAP32[$23>>2]|0;
      $gep_int24 = $$pre$i$i$i4;
      $gep25 = (($gep_int24) + 16)|0;
      $25 = $gep25;
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$$pre$i$i$i4>>2]|0;
      $gep_int26 = $29;
      $gep27 = (($gep_int26) + 36)|0;
      $30 = $gep27;
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = invoke_ii($31|0,$$pre$i$i$i4|0)|0;
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      
      $36 = 0;
     }
    } while(0);
    
    $37 = ($36|0)==(0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0);
    
    do {
     if ($39) {
      label = 21;
     } else {
      $gep_int28 = $38;
      $gep29 = (($gep_int28) + 12)|0;
      $40 = $gep29;
      $41 = HEAP32[$40>>2]|0;
      $gep_int30 = $38;
      $gep31 = (($gep_int30) + 16)|0;
      $42 = $gep31;
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      
      if (!($44)) {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$38>>2]|0;
      $gep_int32 = $46;
      $gep33 = (($gep_int32) + 36)|0;
      $47 = $gep33;
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = invoke_ii($48|0,$38|0)|0;
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      
      if ($52) {
       HEAP32[$18>>2] = 0;
       
       label = 21;
       break;
      } else {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$__buf]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     
     $64 = $61;
    }
    
    $65 = ($57|0)==($64|0);
    
    if ($65) {
     
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      
      $71 = $66;$72 = $66;
     }
     
     
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$73|0,0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$__buf]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      
      $81 = $phitmp$i19;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$81|0,0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$__buf]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      
      $88 = $87;
     }
     
     $gep_int34 = $88;
     $gep35 = (($gep_int34) + ($71))|0;
     $89 = $gep35;
     HEAP32[$__a_end>>2] = $89;
     
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $36;
    $gep37 = (($gep_int36) + 12)|0;
    $94 = $gep37;
    $95 = HEAP32[$94>>2]|0;
    $gep_int38 = $36;
    $gep39 = (($gep_int38) + 16)|0;
    $96 = $gep39;
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$36>>2]|0;
     $gep_int40 = $100;
     $gep41 = (($gep_int40) + 36)|0;
     $101 = $gep41;
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = invoke_ii($102|0,$36|0)|0;
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     
     if ($105) {
      label = 37;
      break;
     }
     $extract$t$i = $103&255;
     
     $$0$i$off0$i = $extract$t$i;
    } else {
     $106 = HEAP8[$95]|0;
     
     $$0$i$off0$i = $106;
    }
    
    $107 = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$off0$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0;
    $108 = ($107|0)==(0);
    
    if (!($108)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $109 = HEAP32[$94>>2]|0;
    $110 = HEAP32[$96>>2]|0;
    $111 = ($109|0)==($110|0);
    
    if ($111) {
     $112 = $36;
     $113 = HEAP32[$36>>2]|0;
     $gep_int42 = $113;
     $gep43 = (($gep_int42) + 40)|0;
     $114 = $gep43;
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     u$67 = invoke_ii($115|0,$36|0)|0;
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     
     if ($117) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $109;
     $gep45 = (($gep_int44) + 1)|0;
     $118 = $gep45;
     HEAP32[$94>>2] = $118;
     
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $expanded = 69;
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $119 = $__grouping;
   $120 = HEAP8[$__grouping]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   
   if ($122) {
    $125 = $120&255;
    $126 = $125 >>> 1;
    
    $127 = $126;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $123 = $gep47;
    $124 = HEAP32[$123>>2]|0;
    
    $127 = $124;
   }
   
   $128 = ($127|0)==(0);
   
   do {
    if (!($128)) {
     $129 = HEAP32[$__g_end>>2]|0;
     $130 = $129;
     $131 = $__g;
     $132 = (($130) - ($131))|0;
     $133 = ($132|0)<(160);
     
     if (!($133)) {
      break;
     }
     $134 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $129;
     $gep49 = (($gep_int48) + 4)|0;
     $135 = $gep49;
     HEAP32[$__g_end>>2] = $135;
     HEAP32[$129>>2] = $134;
     
    }
   } while(0);
   $136 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $137 = invoke_iiiii(12,$__a$2|0,$136|0,$__err|0,$$0$i|0)|0;
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   
   if ($139) {
    break;
   }
   HEAP32[$__v>>2] = $137;
   $140 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$140,$__err);
   $141 = ($36|0)==(0);
   
   do {
    if ($141) {
     $155 = 0;
    } else {
     $gep_int50 = $36;
     $gep51 = (($gep_int50) + 12)|0;
     $142 = $gep51;
     $143 = HEAP32[$142>>2]|0;
     $gep_int52 = $36;
     $gep53 = (($gep_int52) + 16)|0;
     $144 = $gep53;
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     
     if (!($146)) {
      $155 = $36;
      break;
     }
     $147 = $36;
     $148 = HEAP32[$36>>2]|0;
     $gep_int54 = $148;
     $gep55 = (($gep_int54) + 36)|0;
     $149 = $gep55;
     $150 = HEAP32[$149>>2]|0;
     __THREW__ = 0;
     $151 = invoke_ii($150|0,$36|0)|0;
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     
     if ($153) {
      break L6;
     }
     $154 = ($151|0)==(-1);
     
     if (!($154)) {
      $155 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     
     $155 = 0;
    }
   } while(0);
   
   $156 = ($155|0)==(0);
   $157 = ($$pre$i2$i$i|0)==(0);
   
   do {
    if ($157) {
     label = 66;
    } else {
     $gep_int56 = $$pre$i2$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $158 = $gep57;
     $159 = HEAP32[$158>>2]|0;
     $gep_int58 = $$pre$i2$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $160 = $gep59;
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159|0)==($161|0);
     
     if (!($162)) {
      
      if (!($156)) {
       break;
      }
      $gep_int62 = $agg$result;
      $174 = $gep_int62;
      HEAP32[$174>>2] = $155;
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $163 = $$pre$i2$i$i;
     $164 = HEAP32[$$pre$i2$i$i>>2]|0;
     $gep_int60 = $164;
     $gep61 = (($gep_int60) + 36)|0;
     $165 = $gep61;
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = invoke_ii($166|0,$$pre$i2$i$i|0)|0;
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     
     if ($169) {
      break L6;
     }
     $170 = ($167|0)==(-1);
     
     if ($170) {
      HEAP32[$18>>2] = 0;
      
      label = 66;
      break;
     }
     $171 = ($$pre$i2$i$i|0)==(0);
     $tmp$i$i = $156 ^ $171;
     
     if (!($tmp$i$i)) {
      break;
     }
     $gep_int62 = $agg$result;
     $174 = $gep_int62;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 66) {
     
     if ($156) {
      break;
     }
     $gep_int62 = $agg$result;
     $174 = $gep_int62;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $172 = HEAP32[$__err>>2]|0;
   $173 = $172 | 2;
   HEAP32[$__err>>2] = $173;
   
   $gep_int62 = $agg$result;
   $174 = $gep_int62;
   HEAP32[$174>>2] = $155;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$off0$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $extract$t$i = 0, $gep = 0, $gep11 = 0;
 var $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0;
 var $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0;
 var $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0;
 var $tmp$i$i = 0, label = 0, sp = 0, u$67 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else {
  
  $$0$i = 10;
 }
 
 $gep_int7 = $__atoms;
 $4 = $gep_int7;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$__buf]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   
   if ($9) {
    $12 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $13 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre33 = $gep15;
    
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $10 = $gep9;
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre31 = $gep11;
    
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   
   
   
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   
   $gep_int16 = $__g;
   $16 = $gep_int16;
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $17 = $gep_int17;
   $gep_int18 = $__e;
   $18 = $gep_int18;
   $gep_int19 = $__buf;
   $19 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $20 = $gep21;
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    
    
    $22 = ($$pre$i$i$i4|0)==(0);
    
    do {
     if ($22) {
      $36 = 0;
     } else {
      $gep_int22 = $$pre$i$i$i4;
      $gep23 = (($gep_int22) + 12)|0;
      $23 = $gep23;
      $24 = HEAP32[$23>>2]|0;
      $gep_int24 = $$pre$i$i$i4;
      $gep25 = (($gep_int24) + 16)|0;
      $25 = $gep25;
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$$pre$i$i$i4>>2]|0;
      $gep_int26 = $29;
      $gep27 = (($gep_int26) + 36)|0;
      $30 = $gep27;
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = invoke_ii($31|0,$$pre$i$i$i4|0)|0;
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      
      $36 = 0;
     }
    } while(0);
    
    $37 = ($36|0)==(0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0);
    
    do {
     if ($39) {
      label = 21;
     } else {
      $gep_int28 = $38;
      $gep29 = (($gep_int28) + 12)|0;
      $40 = $gep29;
      $41 = HEAP32[$40>>2]|0;
      $gep_int30 = $38;
      $gep31 = (($gep_int30) + 16)|0;
      $42 = $gep31;
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      
      if (!($44)) {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$38>>2]|0;
      $gep_int32 = $46;
      $gep33 = (($gep_int32) + 36)|0;
      $47 = $gep33;
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = invoke_ii($48|0,$38|0)|0;
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      
      if ($52) {
       HEAP32[$18>>2] = 0;
       
       label = 21;
       break;
      } else {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$__buf]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     
     $64 = $61;
    }
    
    $65 = ($57|0)==($64|0);
    
    if ($65) {
     
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      
      $71 = $66;$72 = $66;
     }
     
     
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$73|0,0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$__buf]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      
      $81 = $phitmp$i19;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$81|0,0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$__buf]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      
      $88 = $87;
     }
     
     $gep_int34 = $88;
     $gep35 = (($gep_int34) + ($71))|0;
     $89 = $gep35;
     HEAP32[$__a_end>>2] = $89;
     
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $36;
    $gep37 = (($gep_int36) + 12)|0;
    $94 = $gep37;
    $95 = HEAP32[$94>>2]|0;
    $gep_int38 = $36;
    $gep39 = (($gep_int38) + 16)|0;
    $96 = $gep39;
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$36>>2]|0;
     $gep_int40 = $100;
     $gep41 = (($gep_int40) + 36)|0;
     $101 = $gep41;
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = invoke_ii($102|0,$36|0)|0;
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     
     if ($105) {
      label = 37;
      break;
     }
     $extract$t$i = $103&255;
     
     $$0$i$off0$i = $extract$t$i;
    } else {
     $106 = HEAP8[$95]|0;
     
     $$0$i$off0$i = $106;
    }
    
    $107 = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$off0$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0;
    $108 = ($107|0)==(0);
    
    if (!($108)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $109 = HEAP32[$94>>2]|0;
    $110 = HEAP32[$96>>2]|0;
    $111 = ($109|0)==($110|0);
    
    if ($111) {
     $112 = $36;
     $113 = HEAP32[$36>>2]|0;
     $gep_int42 = $113;
     $gep43 = (($gep_int42) + 40)|0;
     $114 = $gep43;
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     u$67 = invoke_ii($115|0,$36|0)|0;
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     
     if ($117) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $109;
     $gep45 = (($gep_int44) + 1)|0;
     $118 = $gep45;
     HEAP32[$94>>2] = $118;
     
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $expanded = 69;
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $119 = $__grouping;
   $120 = HEAP8[$__grouping]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   
   if ($122) {
    $125 = $120&255;
    $126 = $125 >>> 1;
    
    $127 = $126;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $123 = $gep47;
    $124 = HEAP32[$123>>2]|0;
    
    $127 = $124;
   }
   
   $128 = ($127|0)==(0);
   
   do {
    if (!($128)) {
     $129 = HEAP32[$__g_end>>2]|0;
     $130 = $129;
     $131 = $__g;
     $132 = (($130) - ($131))|0;
     $133 = ($132|0)<(160);
     
     if (!($133)) {
      break;
     }
     $134 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $129;
     $gep49 = (($gep_int48) + 4)|0;
     $135 = $gep49;
     HEAP32[$__g_end>>2] = $135;
     HEAP32[$129>>2] = $134;
     
    }
   } while(0);
   $136 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $137 = invoke_iiiii(13,$__a$2|0,$136|0,$__err|0,$$0$i|0)|0;
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   
   if ($139) {
    break;
   }
   HEAP32[$__v>>2] = $137;
   $140 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$140,$__err);
   $141 = ($36|0)==(0);
   
   do {
    if ($141) {
     $155 = 0;
    } else {
     $gep_int50 = $36;
     $gep51 = (($gep_int50) + 12)|0;
     $142 = $gep51;
     $143 = HEAP32[$142>>2]|0;
     $gep_int52 = $36;
     $gep53 = (($gep_int52) + 16)|0;
     $144 = $gep53;
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     
     if (!($146)) {
      $155 = $36;
      break;
     }
     $147 = $36;
     $148 = HEAP32[$36>>2]|0;
     $gep_int54 = $148;
     $gep55 = (($gep_int54) + 36)|0;
     $149 = $gep55;
     $150 = HEAP32[$149>>2]|0;
     __THREW__ = 0;
     $151 = invoke_ii($150|0,$36|0)|0;
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     
     if ($153) {
      break L6;
     }
     $154 = ($151|0)==(-1);
     
     if (!($154)) {
      $155 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     
     $155 = 0;
    }
   } while(0);
   
   $156 = ($155|0)==(0);
   $157 = ($$pre$i2$i$i|0)==(0);
   
   do {
    if ($157) {
     label = 66;
    } else {
     $gep_int56 = $$pre$i2$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $158 = $gep57;
     $159 = HEAP32[$158>>2]|0;
     $gep_int58 = $$pre$i2$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $160 = $gep59;
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159|0)==($161|0);
     
     if (!($162)) {
      
      if (!($156)) {
       break;
      }
      $gep_int62 = $agg$result;
      $174 = $gep_int62;
      HEAP32[$174>>2] = $155;
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $163 = $$pre$i2$i$i;
     $164 = HEAP32[$$pre$i2$i$i>>2]|0;
     $gep_int60 = $164;
     $gep61 = (($gep_int60) + 36)|0;
     $165 = $gep61;
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = invoke_ii($166|0,$$pre$i2$i$i|0)|0;
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     
     if ($169) {
      break L6;
     }
     $170 = ($167|0)==(-1);
     
     if ($170) {
      HEAP32[$18>>2] = 0;
      
      label = 66;
      break;
     }
     $171 = ($$pre$i2$i$i|0)==(0);
     $tmp$i$i = $156 ^ $171;
     
     if (!($tmp$i$i)) {
      break;
     }
     $gep_int62 = $agg$result;
     $174 = $gep_int62;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 66) {
     
     if ($156) {
      break;
     }
     $gep_int62 = $agg$result;
     $174 = $gep_int62;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $172 = HEAP32[$__err>>2]|0;
   $173 = $172 | 2;
   HEAP32[$__err>>2] = $173;
   
   $gep_int62 = $agg$result;
   $174 = $gep_int62;
   HEAP32[$174>>2] = $155;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$off0$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0;
 var $expanded = 0, $expanded6 = 0, $extract$t$i = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0;
 var $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0;
 var $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int7 = 0;
 var $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0, u$67 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else {
  
  $$0$i = 10;
 }
 
 $gep_int7 = $__atoms;
 $4 = $gep_int7;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$__buf]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   
   if ($9) {
    $12 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $13 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre33 = $gep15;
    
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $10 = $gep9;
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre31 = $gep11;
    
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   
   
   
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   
   $gep_int16 = $__g;
   $16 = $gep_int16;
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $17 = $gep_int17;
   $gep_int18 = $__e;
   $18 = $gep_int18;
   $gep_int19 = $__buf;
   $19 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $20 = $gep21;
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    
    
    $22 = ($$pre$i$i$i4|0)==(0);
    
    do {
     if ($22) {
      $36 = 0;
     } else {
      $gep_int22 = $$pre$i$i$i4;
      $gep23 = (($gep_int22) + 12)|0;
      $23 = $gep23;
      $24 = HEAP32[$23>>2]|0;
      $gep_int24 = $$pre$i$i$i4;
      $gep25 = (($gep_int24) + 16)|0;
      $25 = $gep25;
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$$pre$i$i$i4>>2]|0;
      $gep_int26 = $29;
      $gep27 = (($gep_int26) + 36)|0;
      $30 = $gep27;
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = invoke_ii($31|0,$$pre$i$i$i4|0)|0;
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      
      $36 = 0;
     }
    } while(0);
    
    $37 = ($36|0)==(0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0);
    
    do {
     if ($39) {
      label = 21;
     } else {
      $gep_int28 = $38;
      $gep29 = (($gep_int28) + 12)|0;
      $40 = $gep29;
      $41 = HEAP32[$40>>2]|0;
      $gep_int30 = $38;
      $gep31 = (($gep_int30) + 16)|0;
      $42 = $gep31;
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      
      if (!($44)) {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$38>>2]|0;
      $gep_int32 = $46;
      $gep33 = (($gep_int32) + 36)|0;
      $47 = $gep33;
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = invoke_ii($48|0,$38|0)|0;
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      
      if ($52) {
       HEAP32[$18>>2] = 0;
       
       label = 21;
       break;
      } else {
       
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$__buf]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     
     $64 = $61;
    }
    
    $65 = ($57|0)==($64|0);
    
    if ($65) {
     
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      
      $71 = $66;$72 = $66;
     }
     
     
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$73|0,0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$__buf]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      
      $81 = $phitmp$i19;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$81|0,0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$__buf]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      
      $88 = $87;
     }
     
     $gep_int34 = $88;
     $gep35 = (($gep_int34) + ($71))|0;
     $89 = $gep35;
     HEAP32[$__a_end>>2] = $89;
     
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $36;
    $gep37 = (($gep_int36) + 12)|0;
    $94 = $gep37;
    $95 = HEAP32[$94>>2]|0;
    $gep_int38 = $36;
    $gep39 = (($gep_int38) + 16)|0;
    $96 = $gep39;
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$36>>2]|0;
     $gep_int40 = $100;
     $gep41 = (($gep_int40) + 36)|0;
     $101 = $gep41;
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = invoke_ii($102|0,$36|0)|0;
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     
     if ($105) {
      label = 37;
      break;
     }
     $extract$t$i = $103&255;
     
     $$0$i$off0$i = $extract$t$i;
    } else {
     $106 = HEAP8[$95]|0;
     
     $$0$i$off0$i = $106;
    }
    
    $107 = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$off0$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0;
    $108 = ($107|0)==(0);
    
    if (!($108)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $109 = HEAP32[$94>>2]|0;
    $110 = HEAP32[$96>>2]|0;
    $111 = ($109|0)==($110|0);
    
    if ($111) {
     $112 = $36;
     $113 = HEAP32[$36>>2]|0;
     $gep_int42 = $113;
     $gep43 = (($gep_int42) + 40)|0;
     $114 = $gep43;
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     u$67 = invoke_ii($115|0,$36|0)|0;
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     
     if ($117) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $109;
     $gep45 = (($gep_int44) + 1)|0;
     $118 = $gep45;
     HEAP32[$94>>2] = $118;
     
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $expanded = 69;
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $119 = $__grouping;
   $120 = HEAP8[$__grouping]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   
   if ($122) {
    $125 = $120&255;
    $126 = $125 >>> 1;
    
    $127 = $126;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $123 = $gep47;
    $124 = HEAP32[$123>>2]|0;
    
    $127 = $124;
   }
   
   $128 = ($127|0)==(0);
   
   do {
    if (!($128)) {
     $129 = HEAP32[$__g_end>>2]|0;
     $130 = $129;
     $131 = $__g;
     $132 = (($130) - ($131))|0;
     $133 = ($132|0)<(160);
     
     if (!($133)) {
      break;
     }
     $134 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $129;
     $gep49 = (($gep_int48) + 4)|0;
     $135 = $gep49;
     HEAP32[$__g_end>>2] = $135;
     HEAP32[$129>>2] = $134;
     
    }
   } while(0);
   $136 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $137 = invoke_iiiii(14,$__a$2|0,$136|0,$__err|0,$$0$i|0)|0;
   $138 = tempRet0;
   $139 = __THREW__; __THREW__ = 0;
   $140 = $139&1;
   
   if ($140) {
    break;
   }
   $141 = $__v;
   $142 = $141;
   HEAP32[$142>>2] = $137;
   $143 = (($141) + 4)|0;
   $144 = $143;
   HEAP32[$144>>2] = $138;
   $145 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$145,$__err);
   $146 = ($36|0)==(0);
   
   do {
    if ($146) {
     $160 = 0;
    } else {
     $gep_int50 = $36;
     $gep51 = (($gep_int50) + 12)|0;
     $147 = $gep51;
     $148 = HEAP32[$147>>2]|0;
     $gep_int52 = $36;
     $gep53 = (($gep_int52) + 16)|0;
     $149 = $gep53;
     $150 = HEAP32[$149>>2]|0;
     $151 = ($148|0)==($150|0);
     
     if (!($151)) {
      $160 = $36;
      break;
     }
     $152 = $36;
     $153 = HEAP32[$36>>2]|0;
     $gep_int54 = $153;
     $gep55 = (($gep_int54) + 36)|0;
     $154 = $gep55;
     $155 = HEAP32[$154>>2]|0;
     __THREW__ = 0;
     $156 = invoke_ii($155|0,$36|0)|0;
     $157 = __THREW__; __THREW__ = 0;
     $158 = $157&1;
     
     if ($158) {
      break L6;
     }
     $159 = ($156|0)==(-1);
     
     if (!($159)) {
      $160 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     
     $160 = 0;
    }
   } while(0);
   
   $161 = ($160|0)==(0);
   $162 = ($$pre$i2$i$i|0)==(0);
   
   do {
    if ($162) {
     label = 66;
    } else {
     $gep_int56 = $$pre$i2$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $163 = $gep57;
     $164 = HEAP32[$163>>2]|0;
     $gep_int58 = $$pre$i2$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $165 = $gep59;
     $166 = HEAP32[$165>>2]|0;
     $167 = ($164|0)==($166|0);
     
     if (!($167)) {
      
      if (!($161)) {
       break;
      }
      $gep_int62 = $agg$result;
      $179 = $gep_int62;
      HEAP32[$179>>2] = $160;
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $168 = $$pre$i2$i$i;
     $169 = HEAP32[$$pre$i2$i$i>>2]|0;
     $gep_int60 = $169;
     $gep61 = (($gep_int60) + 36)|0;
     $170 = $gep61;
     $171 = HEAP32[$170>>2]|0;
     __THREW__ = 0;
     $172 = invoke_ii($171|0,$$pre$i2$i$i|0)|0;
     $173 = __THREW__; __THREW__ = 0;
     $174 = $173&1;
     
     if ($174) {
      break L6;
     }
     $175 = ($172|0)==(-1);
     
     if ($175) {
      HEAP32[$18>>2] = 0;
      
      label = 66;
      break;
     }
     $176 = ($$pre$i2$i$i|0)==(0);
     $tmp$i$i = $161 ^ $176;
     
     if (!($tmp$i$i)) {
      break;
     }
     $gep_int62 = $agg$result;
     $179 = $gep_int62;
     HEAP32[$179>>2] = $160;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 66) {
     
     if ($161) {
      break;
     }
     $gep_int62 = $agg$result;
     $179 = $gep_int62;
     HEAP32[$179>>2] = $160;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $177 = HEAP32[$__err>>2]|0;
   $178 = $177 | 2;
   HEAP32[$__err>>2] = $178;
   
   $gep_int62 = $agg$result;
   $179 = $gep_int62;
   HEAP32[$179>>2] = $160;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$off0$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre31 = 0, $$pre32 = 0, $$pre34 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $extract$t$i = 0;
 var $gep = 0, $gep11 = 0, $gep13 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0;
 var $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0;
 var $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0;
 var $tmp$i$i = 0, label = 0, sp = 0, u$65 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 $__atoms = sp;
 $__decimal_point = sp + 32|0;
 $__thousands_sep = sp + 40|0;
 $__grouping = sp + 48|0;
 $__buf = sp + 64|0;
 $__a_end = sp + 80|0;
 $__g = sp + 88|0;
 $__g_end = sp + 248|0;
 $__dc = sp + 256|0;
 $__in_units = sp + 264|0;
 $__exp = sp + 272|0;
 $gep_int = $__atoms;
 $1 = $gep_int;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 L1: do {
  if (!($3)) {
   $4 = HEAP8[$__buf]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   
   if ($6) {
    $9 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $10 = $gep11;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 8)|0;
    $$pre34 = $gep13;
    
    $$pre$phi33Z2D = $10;$$pre$phi35Z2D = $$pre34;$11 = $10;
   } else {
    $gep_int7 = $__buf;
    $gep = (($gep_int7) + 8)|0;
    $7 = $gep;
    $8 = HEAP32[$7>>2]|0;
    $$pre31 = $__buf;
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 1)|0;
    $$pre32 = $gep9;
    
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $7;$11 = $8;
   }
   
   
   
   HEAP32[$__a_end>>2] = $11;
   $12 = $__g;
   
   $gep_int14 = $__g;
   $13 = $gep_int14;
   HEAP32[$__g_end>>2] = $13;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $gep_int15 = $__b;
   $14 = $gep_int15;
   $gep_int16 = $__e;
   $15 = $gep_int16;
   $gep_int17 = $__buf;
   $16 = $gep_int17;
   $gep_int18 = $__buf;
   $gep19 = (($gep_int18) + 4)|0;
   $17 = $gep19;
   $18 = HEAP8[$__decimal_point]|0;
   $19 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$14>>2]|0;
   
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L7: while(1) {
    
    
    $20 = ($$pre$i$i$i4|0)==(0);
    
    do {
     if ($20) {
      $34 = 0;
     } else {
      $gep_int20 = $$pre$i$i$i4;
      $gep21 = (($gep_int20) + 12)|0;
      $21 = $gep21;
      $22 = HEAP32[$21>>2]|0;
      $gep_int22 = $$pre$i$i$i4;
      $gep23 = (($gep_int22) + 16)|0;
      $23 = $gep23;
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      
      if (!($25)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      $26 = $$pre$i$i$i4;
      $27 = HEAP32[$$pre$i$i$i4>>2]|0;
      $gep_int24 = $27;
      $gep25 = (($gep_int24) + 36)|0;
      $28 = $gep25;
      $29 = HEAP32[$28>>2]|0;
      __THREW__ = 0;
      $30 = invoke_ii($29|0,$$pre$i$i$i4|0)|0;
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      
      if ($32) {
       label = 33;
       break L7;
      }
      $33 = ($30|0)==(-1);
      
      if (!($33)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$14>>2] = 0;
      
      $34 = 0;
     }
    } while(0);
    
    $35 = ($34|0)==(0);
    $36 = HEAP32[$15>>2]|0;
    $37 = ($36|0)==(0);
    
    do {
     if ($37) {
      label = 17;
     } else {
      $gep_int26 = $36;
      $gep27 = (($gep_int26) + 12)|0;
      $38 = $gep27;
      $39 = HEAP32[$38>>2]|0;
      $gep_int28 = $36;
      $gep29 = (($gep_int28) + 16)|0;
      $40 = $gep29;
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      
      if (!($42)) {
       
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
      $43 = $36;
      $44 = HEAP32[$36>>2]|0;
      $gep_int30 = $44;
      $gep31 = (($gep_int30) + 36)|0;
      $45 = $gep31;
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = invoke_ii($46|0,$36|0)|0;
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      
      if ($49) {
       label = 33;
       break L7;
      }
      $50 = ($47|0)==(-1);
      
      if ($50) {
       HEAP32[$15>>2] = 0;
       
       label = 17;
       break;
      } else {
       
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     
     if ($35) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $51 = 0;
     }
    }
    
    $52 = HEAP32[$__a_end>>2]|0;
    $53 = $52;
    $54 = $__a$0;
    $55 = (($53) - ($54))|0;
    $56 = HEAP8[$__buf]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    
    if ($58) {
     $60 = $56&255;
     $61 = $60 >>> 1;
     
     $62 = $61;
    } else {
     $59 = HEAP32[$17>>2]|0;
     
     $62 = $59;
    }
    
    $63 = ($55|0)==($62|0);
    
    if ($63) {
     
     if ($58) {
      $65 = $56&255;
      $66 = $65 >>> 1;
      $67 = $56&255;
      $68 = $67 >>> 1;
      
      $69 = $66;$70 = $68;
     } else {
      $64 = HEAP32[$17>>2]|0;
      
      $69 = $64;$70 = $64;
     }
     
     
     $71 = $70 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$71|0,0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     
     if ($73) {
      label = 33;
      break;
     }
     $74 = HEAP8[$__buf]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     
     if ($76) {
      $79 = 10;
     } else {
      $77 = HEAP32[$16>>2]|0;
      $78 = $77 & -2;
      $phitmp$i19 = (($78) + -1)|0;
      
      $79 = $phitmp$i19;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$79|0,0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     
     if ($81) {
      label = 33;
      break;
     }
     $82 = HEAP8[$__buf]|0;
     $83 = $82 & 1;
     $84 = ($83<<24>>24)==(0);
     
     if ($84) {
      $86 = $$pre$phi33Z2D;
     } else {
      $85 = HEAP32[$$pre$phi35Z2D>>2]|0;
      
      $86 = $85;
     }
     
     $gep_int32 = $86;
     $gep33 = (($gep_int32) + ($69))|0;
     $87 = $gep33;
     HEAP32[$__a_end>>2] = $87;
     
     $__a$1 = $86;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int34 = $34;
    $gep35 = (($gep_int34) + 12)|0;
    $92 = $gep35;
    $93 = HEAP32[$92>>2]|0;
    $gep_int36 = $34;
    $gep37 = (($gep_int36) + 16)|0;
    $94 = $gep37;
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    
    if ($96) {
     $97 = $34;
     $98 = HEAP32[$34>>2]|0;
     $gep_int38 = $98;
     $gep39 = (($gep_int38) + 36)|0;
     $99 = $gep39;
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = invoke_ii($100|0,$34|0)|0;
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     
     if ($103) {
      label = 33;
      break;
     }
     $extract$t$i = $101&255;
     
     $$0$i$off0$i = $extract$t$i;
    } else {
     $104 = HEAP8[$93]|0;
     
     $$0$i$off0$i = $104;
    }
    
    $105 = __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$off0$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1)|0;
    $106 = ($105|0)==(0);
    
    if (!($106)) {
     $$pre$i2$i$i = $51;$__a$2 = $__a$1;
     break;
    }
    $107 = HEAP32[$92>>2]|0;
    $108 = HEAP32[$94>>2]|0;
    $109 = ($107|0)==($108|0);
    
    if ($109) {
     $110 = $34;
     $111 = HEAP32[$34>>2]|0;
     $gep_int40 = $111;
     $gep41 = (($gep_int40) + 40)|0;
     $112 = $gep41;
     $113 = HEAP32[$112>>2]|0;
     __THREW__ = 0;
     u$65 = invoke_ii($113|0,$34|0)|0;
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     
     if ($115) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int42 = $107;
     $gep43 = (($gep_int42) + 1)|0;
     $116 = $gep43;
     HEAP32[$92>>2] = $116;
     
     $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $expanded = 69;
    $88 = ___cxa_find_matching_catch(-1,-1)|0;
    $89 = tempRet0;
    
    $lpad$phi$index = $88;$lpad$phi$index2 = $89;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $117 = $__grouping;
   $118 = HEAP8[$__grouping]|0;
   $119 = $118 & 1;
   $120 = ($119<<24>>24)==(0);
   
   if ($120) {
    $123 = $118&255;
    $124 = $123 >>> 1;
    
    $125 = $124;
   } else {
    $gep_int44 = $__grouping;
    $gep45 = (($gep_int44) + 4)|0;
    $121 = $gep45;
    $122 = HEAP32[$121>>2]|0;
    
    $125 = $122;
   }
   
   $126 = ($125|0)==(0);
   
   do {
    if (!($126)) {
     $127 = HEAP8[$__in_units]|0;
     $128 = ($127<<24>>24)==(0);
     
     if ($128) {
      break;
     }
     $129 = HEAP32[$__g_end>>2]|0;
     $130 = $129;
     $131 = $__g;
     $132 = (($130) - ($131))|0;
     $133 = ($132|0)<(160);
     
     if (!($133)) {
      break;
     }
     $134 = HEAP32[$__dc>>2]|0;
     $gep_int46 = $129;
     $gep47 = (($gep_int46) + 4)|0;
     $135 = $gep47;
     HEAP32[$__g_end>>2] = $135;
     HEAP32[$129>>2] = $134;
     
    }
   } while(0);
   $136 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $137 = +invoke_diii(1,$__a$2|0,$136|0,$__err|0);
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   
   if ($139) {
    break;
   }
   HEAPF32[$__v>>2] = $137;
   $140 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$13,$140,$__err);
   $141 = ($34|0)==(0);
   
   do {
    if ($141) {
     $155 = 0;
    } else {
     $gep_int48 = $34;
     $gep49 = (($gep_int48) + 12)|0;
     $142 = $gep49;
     $143 = HEAP32[$142>>2]|0;
     $gep_int50 = $34;
     $gep51 = (($gep_int50) + 16)|0;
     $144 = $gep51;
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     
     if (!($146)) {
      $155 = $34;
      break;
     }
     $147 = $34;
     $148 = HEAP32[$34>>2]|0;
     $gep_int52 = $148;
     $gep53 = (($gep_int52) + 36)|0;
     $149 = $gep53;
     $150 = HEAP32[$149>>2]|0;
     __THREW__ = 0;
     $151 = invoke_ii($150|0,$34|0)|0;
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     
     if ($153) {
      break L1;
     }
     $154 = ($151|0)==(-1);
     
     if (!($154)) {
      $155 = $34;
      break;
     }
     HEAP32[$14>>2] = 0;
     
     $155 = 0;
    }
   } while(0);
   
   $156 = ($155|0)==(0);
   $157 = ($$pre$i2$i$i|0)==(0);
   
   do {
    if ($157) {
     label = 63;
    } else {
     $gep_int54 = $$pre$i2$i$i;
     $gep55 = (($gep_int54) + 12)|0;
     $158 = $gep55;
     $159 = HEAP32[$158>>2]|0;
     $gep_int56 = $$pre$i2$i$i;
     $gep57 = (($gep_int56) + 16)|0;
     $160 = $gep57;
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159|0)==($161|0);
     
     if (!($162)) {
      
      if (!($156)) {
       break;
      }
      $gep_int60 = $agg$result;
      $174 = $gep_int60;
      HEAP32[$174>>2] = $155;
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $163 = $$pre$i2$i$i;
     $164 = HEAP32[$$pre$i2$i$i>>2]|0;
     $gep_int58 = $164;
     $gep59 = (($gep_int58) + 36)|0;
     $165 = $gep59;
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = invoke_ii($166|0,$$pre$i2$i$i|0)|0;
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     
     if ($169) {
      break L1;
     }
     $170 = ($167|0)==(-1);
     
     if ($170) {
      HEAP32[$15>>2] = 0;
      
      label = 63;
      break;
     }
     $171 = ($$pre$i2$i$i|0)==(0);
     $tmp$i$i = $156 ^ $171;
     
     if (!($tmp$i$i)) {
      break;
     }
     $gep_int60 = $agg$result;
     $174 = $gep_int60;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 63) {
     
     if ($156) {
      break;
     }
     $gep_int60 = $agg$result;
     $174 = $gep_int60;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $172 = HEAP32[$__err>>2]|0;
   $173 = $172 | 2;
   HEAP32[$__err>>2] = $173;
   
   $gep_int60 = $agg$result;
   $174 = $gep_int60;
   HEAP32[$174>>2] = $155;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $90 = ___cxa_find_matching_catch(-1,-1)|0;
 $91 = tempRet0;
 
 $lpad$phi$index = $90;$lpad$phi$index2 = $91;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$off0$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre31 = 0, $$pre32 = 0, $$pre34 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $extract$t$i = 0;
 var $gep = 0, $gep11 = 0, $gep13 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0;
 var $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0;
 var $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0;
 var $tmp$i$i = 0, label = 0, sp = 0, u$65 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 $__atoms = sp;
 $__decimal_point = sp + 32|0;
 $__thousands_sep = sp + 40|0;
 $__grouping = sp + 48|0;
 $__buf = sp + 64|0;
 $__a_end = sp + 80|0;
 $__g = sp + 88|0;
 $__g_end = sp + 248|0;
 $__dc = sp + 256|0;
 $__in_units = sp + 264|0;
 $__exp = sp + 272|0;
 $gep_int = $__atoms;
 $1 = $gep_int;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 L1: do {
  if (!($3)) {
   $4 = HEAP8[$__buf]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   
   if ($6) {
    $9 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $10 = $gep11;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 8)|0;
    $$pre34 = $gep13;
    
    $$pre$phi33Z2D = $10;$$pre$phi35Z2D = $$pre34;$11 = $10;
   } else {
    $gep_int7 = $__buf;
    $gep = (($gep_int7) + 8)|0;
    $7 = $gep;
    $8 = HEAP32[$7>>2]|0;
    $$pre31 = $__buf;
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 1)|0;
    $$pre32 = $gep9;
    
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $7;$11 = $8;
   }
   
   
   
   HEAP32[$__a_end>>2] = $11;
   $12 = $__g;
   
   $gep_int14 = $__g;
   $13 = $gep_int14;
   HEAP32[$__g_end>>2] = $13;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $gep_int15 = $__b;
   $14 = $gep_int15;
   $gep_int16 = $__e;
   $15 = $gep_int16;
   $gep_int17 = $__buf;
   $16 = $gep_int17;
   $gep_int18 = $__buf;
   $gep19 = (($gep_int18) + 4)|0;
   $17 = $gep19;
   $18 = HEAP8[$__decimal_point]|0;
   $19 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$14>>2]|0;
   
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L7: while(1) {
    
    
    $20 = ($$pre$i$i$i4|0)==(0);
    
    do {
     if ($20) {
      $34 = 0;
     } else {
      $gep_int20 = $$pre$i$i$i4;
      $gep21 = (($gep_int20) + 12)|0;
      $21 = $gep21;
      $22 = HEAP32[$21>>2]|0;
      $gep_int22 = $$pre$i$i$i4;
      $gep23 = (($gep_int22) + 16)|0;
      $23 = $gep23;
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      
      if (!($25)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      $26 = $$pre$i$i$i4;
      $27 = HEAP32[$$pre$i$i$i4>>2]|0;
      $gep_int24 = $27;
      $gep25 = (($gep_int24) + 36)|0;
      $28 = $gep25;
      $29 = HEAP32[$28>>2]|0;
      __THREW__ = 0;
      $30 = invoke_ii($29|0,$$pre$i$i$i4|0)|0;
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      
      if ($32) {
       label = 33;
       break L7;
      }
      $33 = ($30|0)==(-1);
      
      if (!($33)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$14>>2] = 0;
      
      $34 = 0;
     }
    } while(0);
    
    $35 = ($34|0)==(0);
    $36 = HEAP32[$15>>2]|0;
    $37 = ($36|0)==(0);
    
    do {
     if ($37) {
      label = 17;
     } else {
      $gep_int26 = $36;
      $gep27 = (($gep_int26) + 12)|0;
      $38 = $gep27;
      $39 = HEAP32[$38>>2]|0;
      $gep_int28 = $36;
      $gep29 = (($gep_int28) + 16)|0;
      $40 = $gep29;
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      
      if (!($42)) {
       
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
      $43 = $36;
      $44 = HEAP32[$36>>2]|0;
      $gep_int30 = $44;
      $gep31 = (($gep_int30) + 36)|0;
      $45 = $gep31;
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = invoke_ii($46|0,$36|0)|0;
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      
      if ($49) {
       label = 33;
       break L7;
      }
      $50 = ($47|0)==(-1);
      
      if ($50) {
       HEAP32[$15>>2] = 0;
       
       label = 17;
       break;
      } else {
       
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     
     if ($35) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $51 = 0;
     }
    }
    
    $52 = HEAP32[$__a_end>>2]|0;
    $53 = $52;
    $54 = $__a$0;
    $55 = (($53) - ($54))|0;
    $56 = HEAP8[$__buf]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    
    if ($58) {
     $60 = $56&255;
     $61 = $60 >>> 1;
     
     $62 = $61;
    } else {
     $59 = HEAP32[$17>>2]|0;
     
     $62 = $59;
    }
    
    $63 = ($55|0)==($62|0);
    
    if ($63) {
     
     if ($58) {
      $65 = $56&255;
      $66 = $65 >>> 1;
      $67 = $56&255;
      $68 = $67 >>> 1;
      
      $69 = $66;$70 = $68;
     } else {
      $64 = HEAP32[$17>>2]|0;
      
      $69 = $64;$70 = $64;
     }
     
     
     $71 = $70 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$71|0,0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     
     if ($73) {
      label = 33;
      break;
     }
     $74 = HEAP8[$__buf]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     
     if ($76) {
      $79 = 10;
     } else {
      $77 = HEAP32[$16>>2]|0;
      $78 = $77 & -2;
      $phitmp$i19 = (($78) + -1)|0;
      
      $79 = $phitmp$i19;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$79|0,0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     
     if ($81) {
      label = 33;
      break;
     }
     $82 = HEAP8[$__buf]|0;
     $83 = $82 & 1;
     $84 = ($83<<24>>24)==(0);
     
     if ($84) {
      $86 = $$pre$phi33Z2D;
     } else {
      $85 = HEAP32[$$pre$phi35Z2D>>2]|0;
      
      $86 = $85;
     }
     
     $gep_int32 = $86;
     $gep33 = (($gep_int32) + ($69))|0;
     $87 = $gep33;
     HEAP32[$__a_end>>2] = $87;
     
     $__a$1 = $86;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int34 = $34;
    $gep35 = (($gep_int34) + 12)|0;
    $92 = $gep35;
    $93 = HEAP32[$92>>2]|0;
    $gep_int36 = $34;
    $gep37 = (($gep_int36) + 16)|0;
    $94 = $gep37;
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    
    if ($96) {
     $97 = $34;
     $98 = HEAP32[$34>>2]|0;
     $gep_int38 = $98;
     $gep39 = (($gep_int38) + 36)|0;
     $99 = $gep39;
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = invoke_ii($100|0,$34|0)|0;
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     
     if ($103) {
      label = 33;
      break;
     }
     $extract$t$i = $101&255;
     
     $$0$i$off0$i = $extract$t$i;
    } else {
     $104 = HEAP8[$93]|0;
     
     $$0$i$off0$i = $104;
    }
    
    $105 = __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$off0$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1)|0;
    $106 = ($105|0)==(0);
    
    if (!($106)) {
     $$pre$i2$i$i = $51;$__a$2 = $__a$1;
     break;
    }
    $107 = HEAP32[$92>>2]|0;
    $108 = HEAP32[$94>>2]|0;
    $109 = ($107|0)==($108|0);
    
    if ($109) {
     $110 = $34;
     $111 = HEAP32[$34>>2]|0;
     $gep_int40 = $111;
     $gep41 = (($gep_int40) + 40)|0;
     $112 = $gep41;
     $113 = HEAP32[$112>>2]|0;
     __THREW__ = 0;
     u$65 = invoke_ii($113|0,$34|0)|0;
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     
     if ($115) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int42 = $107;
     $gep43 = (($gep_int42) + 1)|0;
     $116 = $gep43;
     HEAP32[$92>>2] = $116;
     
     $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $expanded = 69;
    $88 = ___cxa_find_matching_catch(-1,-1)|0;
    $89 = tempRet0;
    
    $lpad$phi$index = $88;$lpad$phi$index2 = $89;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $117 = $__grouping;
   $118 = HEAP8[$__grouping]|0;
   $119 = $118 & 1;
   $120 = ($119<<24>>24)==(0);
   
   if ($120) {
    $123 = $118&255;
    $124 = $123 >>> 1;
    
    $125 = $124;
   } else {
    $gep_int44 = $__grouping;
    $gep45 = (($gep_int44) + 4)|0;
    $121 = $gep45;
    $122 = HEAP32[$121>>2]|0;
    
    $125 = $122;
   }
   
   $126 = ($125|0)==(0);
   
   do {
    if (!($126)) {
     $127 = HEAP8[$__in_units]|0;
     $128 = ($127<<24>>24)==(0);
     
     if ($128) {
      break;
     }
     $129 = HEAP32[$__g_end>>2]|0;
     $130 = $129;
     $131 = $__g;
     $132 = (($130) - ($131))|0;
     $133 = ($132|0)<(160);
     
     if (!($133)) {
      break;
     }
     $134 = HEAP32[$__dc>>2]|0;
     $gep_int46 = $129;
     $gep47 = (($gep_int46) + 4)|0;
     $135 = $gep47;
     HEAP32[$__g_end>>2] = $135;
     HEAP32[$129>>2] = $134;
     
    }
   } while(0);
   $136 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $137 = +invoke_diii(2,$__a$2|0,$136|0,$__err|0);
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   
   if ($139) {
    break;
   }
   HEAPF64[$__v>>3] = $137;
   $140 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$13,$140,$__err);
   $141 = ($34|0)==(0);
   
   do {
    if ($141) {
     $155 = 0;
    } else {
     $gep_int48 = $34;
     $gep49 = (($gep_int48) + 12)|0;
     $142 = $gep49;
     $143 = HEAP32[$142>>2]|0;
     $gep_int50 = $34;
     $gep51 = (($gep_int50) + 16)|0;
     $144 = $gep51;
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     
     if (!($146)) {
      $155 = $34;
      break;
     }
     $147 = $34;
     $148 = HEAP32[$34>>2]|0;
     $gep_int52 = $148;
     $gep53 = (($gep_int52) + 36)|0;
     $149 = $gep53;
     $150 = HEAP32[$149>>2]|0;
     __THREW__ = 0;
     $151 = invoke_ii($150|0,$34|0)|0;
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     
     if ($153) {
      break L1;
     }
     $154 = ($151|0)==(-1);
     
     if (!($154)) {
      $155 = $34;
      break;
     }
     HEAP32[$14>>2] = 0;
     
     $155 = 0;
    }
   } while(0);
   
   $156 = ($155|0)==(0);
   $157 = ($$pre$i2$i$i|0)==(0);
   
   do {
    if ($157) {
     label = 63;
    } else {
     $gep_int54 = $$pre$i2$i$i;
     $gep55 = (($gep_int54) + 12)|0;
     $158 = $gep55;
     $159 = HEAP32[$158>>2]|0;
     $gep_int56 = $$pre$i2$i$i;
     $gep57 = (($gep_int56) + 16)|0;
     $160 = $gep57;
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159|0)==($161|0);
     
     if (!($162)) {
      
      if (!($156)) {
       break;
      }
      $gep_int60 = $agg$result;
      $174 = $gep_int60;
      HEAP32[$174>>2] = $155;
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $163 = $$pre$i2$i$i;
     $164 = HEAP32[$$pre$i2$i$i>>2]|0;
     $gep_int58 = $164;
     $gep59 = (($gep_int58) + 36)|0;
     $165 = $gep59;
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = invoke_ii($166|0,$$pre$i2$i$i|0)|0;
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     
     if ($169) {
      break L1;
     }
     $170 = ($167|0)==(-1);
     
     if ($170) {
      HEAP32[$15>>2] = 0;
      
      label = 63;
      break;
     }
     $171 = ($$pre$i2$i$i|0)==(0);
     $tmp$i$i = $156 ^ $171;
     
     if (!($tmp$i$i)) {
      break;
     }
     $gep_int60 = $agg$result;
     $174 = $gep_int60;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 63) {
     
     if ($156) {
      break;
     }
     $gep_int60 = $agg$result;
     $174 = $gep_int60;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $172 = HEAP32[$__err>>2]|0;
   $173 = $172 | 2;
   HEAP32[$__err>>2] = $173;
   
   $gep_int60 = $agg$result;
   $174 = $gep_int60;
   HEAP32[$174>>2] = $155;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $90 = ___cxa_find_matching_catch(-1,-1)|0;
 $91 = tempRet0;
 
 $lpad$phi$index = $90;$lpad$phi$index2 = $91;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$off0$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre31 = 0, $$pre32 = 0, $$pre34 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $extract$t$i = 0;
 var $gep = 0, $gep11 = 0, $gep13 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0;
 var $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0;
 var $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0;
 var $tmp$i$i = 0, label = 0, sp = 0, u$65 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 $__atoms = sp;
 $__decimal_point = sp + 32|0;
 $__thousands_sep = sp + 40|0;
 $__grouping = sp + 48|0;
 $__buf = sp + 64|0;
 $__a_end = sp + 80|0;
 $__g = sp + 88|0;
 $__g_end = sp + 248|0;
 $__dc = sp + 256|0;
 $__in_units = sp + 264|0;
 $__exp = sp + 272|0;
 $gep_int = $__atoms;
 $1 = $gep_int;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 L1: do {
  if (!($3)) {
   $4 = HEAP8[$__buf]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   
   if ($6) {
    $9 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $10 = $gep11;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 8)|0;
    $$pre34 = $gep13;
    
    $$pre$phi33Z2D = $10;$$pre$phi35Z2D = $$pre34;$11 = $10;
   } else {
    $gep_int7 = $__buf;
    $gep = (($gep_int7) + 8)|0;
    $7 = $gep;
    $8 = HEAP32[$7>>2]|0;
    $$pre31 = $__buf;
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 1)|0;
    $$pre32 = $gep9;
    
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $7;$11 = $8;
   }
   
   
   
   HEAP32[$__a_end>>2] = $11;
   $12 = $__g;
   
   $gep_int14 = $__g;
   $13 = $gep_int14;
   HEAP32[$__g_end>>2] = $13;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $gep_int15 = $__b;
   $14 = $gep_int15;
   $gep_int16 = $__e;
   $15 = $gep_int16;
   $gep_int17 = $__buf;
   $16 = $gep_int17;
   $gep_int18 = $__buf;
   $gep19 = (($gep_int18) + 4)|0;
   $17 = $gep19;
   $18 = HEAP8[$__decimal_point]|0;
   $19 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$14>>2]|0;
   
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L7: while(1) {
    
    
    $20 = ($$pre$i$i$i4|0)==(0);
    
    do {
     if ($20) {
      $34 = 0;
     } else {
      $gep_int20 = $$pre$i$i$i4;
      $gep21 = (($gep_int20) + 12)|0;
      $21 = $gep21;
      $22 = HEAP32[$21>>2]|0;
      $gep_int22 = $$pre$i$i$i4;
      $gep23 = (($gep_int22) + 16)|0;
      $23 = $gep23;
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      
      if (!($25)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      $26 = $$pre$i$i$i4;
      $27 = HEAP32[$$pre$i$i$i4>>2]|0;
      $gep_int24 = $27;
      $gep25 = (($gep_int24) + 36)|0;
      $28 = $gep25;
      $29 = HEAP32[$28>>2]|0;
      __THREW__ = 0;
      $30 = invoke_ii($29|0,$$pre$i$i$i4|0)|0;
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      
      if ($32) {
       label = 33;
       break L7;
      }
      $33 = ($30|0)==(-1);
      
      if (!($33)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$14>>2] = 0;
      
      $34 = 0;
     }
    } while(0);
    
    $35 = ($34|0)==(0);
    $36 = HEAP32[$15>>2]|0;
    $37 = ($36|0)==(0);
    
    do {
     if ($37) {
      label = 17;
     } else {
      $gep_int26 = $36;
      $gep27 = (($gep_int26) + 12)|0;
      $38 = $gep27;
      $39 = HEAP32[$38>>2]|0;
      $gep_int28 = $36;
      $gep29 = (($gep_int28) + 16)|0;
      $40 = $gep29;
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      
      if (!($42)) {
       
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
      $43 = $36;
      $44 = HEAP32[$36>>2]|0;
      $gep_int30 = $44;
      $gep31 = (($gep_int30) + 36)|0;
      $45 = $gep31;
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = invoke_ii($46|0,$36|0)|0;
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      
      if ($49) {
       label = 33;
       break L7;
      }
      $50 = ($47|0)==(-1);
      
      if ($50) {
       HEAP32[$15>>2] = 0;
       
       label = 17;
       break;
      } else {
       
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     
     if ($35) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $51 = 0;
     }
    }
    
    $52 = HEAP32[$__a_end>>2]|0;
    $53 = $52;
    $54 = $__a$0;
    $55 = (($53) - ($54))|0;
    $56 = HEAP8[$__buf]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    
    if ($58) {
     $60 = $56&255;
     $61 = $60 >>> 1;
     
     $62 = $61;
    } else {
     $59 = HEAP32[$17>>2]|0;
     
     $62 = $59;
    }
    
    $63 = ($55|0)==($62|0);
    
    if ($63) {
     
     if ($58) {
      $65 = $56&255;
      $66 = $65 >>> 1;
      $67 = $56&255;
      $68 = $67 >>> 1;
      
      $69 = $66;$70 = $68;
     } else {
      $64 = HEAP32[$17>>2]|0;
      
      $69 = $64;$70 = $64;
     }
     
     
     $71 = $70 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$71|0,0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     
     if ($73) {
      label = 33;
      break;
     }
     $74 = HEAP8[$__buf]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     
     if ($76) {
      $79 = 10;
     } else {
      $77 = HEAP32[$16>>2]|0;
      $78 = $77 & -2;
      $phitmp$i19 = (($78) + -1)|0;
      
      $79 = $phitmp$i19;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$79|0,0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     
     if ($81) {
      label = 33;
      break;
     }
     $82 = HEAP8[$__buf]|0;
     $83 = $82 & 1;
     $84 = ($83<<24>>24)==(0);
     
     if ($84) {
      $86 = $$pre$phi33Z2D;
     } else {
      $85 = HEAP32[$$pre$phi35Z2D>>2]|0;
      
      $86 = $85;
     }
     
     $gep_int32 = $86;
     $gep33 = (($gep_int32) + ($69))|0;
     $87 = $gep33;
     HEAP32[$__a_end>>2] = $87;
     
     $__a$1 = $86;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int34 = $34;
    $gep35 = (($gep_int34) + 12)|0;
    $92 = $gep35;
    $93 = HEAP32[$92>>2]|0;
    $gep_int36 = $34;
    $gep37 = (($gep_int36) + 16)|0;
    $94 = $gep37;
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    
    if ($96) {
     $97 = $34;
     $98 = HEAP32[$34>>2]|0;
     $gep_int38 = $98;
     $gep39 = (($gep_int38) + 36)|0;
     $99 = $gep39;
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = invoke_ii($100|0,$34|0)|0;
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     
     if ($103) {
      label = 33;
      break;
     }
     $extract$t$i = $101&255;
     
     $$0$i$off0$i = $extract$t$i;
    } else {
     $104 = HEAP8[$93]|0;
     
     $$0$i$off0$i = $104;
    }
    
    $105 = __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$off0$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1)|0;
    $106 = ($105|0)==(0);
    
    if (!($106)) {
     $$pre$i2$i$i = $51;$__a$2 = $__a$1;
     break;
    }
    $107 = HEAP32[$92>>2]|0;
    $108 = HEAP32[$94>>2]|0;
    $109 = ($107|0)==($108|0);
    
    if ($109) {
     $110 = $34;
     $111 = HEAP32[$34>>2]|0;
     $gep_int40 = $111;
     $gep41 = (($gep_int40) + 40)|0;
     $112 = $gep41;
     $113 = HEAP32[$112>>2]|0;
     __THREW__ = 0;
     u$65 = invoke_ii($113|0,$34|0)|0;
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     
     if ($115) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int42 = $107;
     $gep43 = (($gep_int42) + 1)|0;
     $116 = $gep43;
     HEAP32[$92>>2] = $116;
     
     $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $expanded = 69;
    $88 = ___cxa_find_matching_catch(-1,-1)|0;
    $89 = tempRet0;
    
    $lpad$phi$index = $88;$lpad$phi$index2 = $89;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $117 = $__grouping;
   $118 = HEAP8[$__grouping]|0;
   $119 = $118 & 1;
   $120 = ($119<<24>>24)==(0);
   
   if ($120) {
    $123 = $118&255;
    $124 = $123 >>> 1;
    
    $125 = $124;
   } else {
    $gep_int44 = $__grouping;
    $gep45 = (($gep_int44) + 4)|0;
    $121 = $gep45;
    $122 = HEAP32[$121>>2]|0;
    
    $125 = $122;
   }
   
   $126 = ($125|0)==(0);
   
   do {
    if (!($126)) {
     $127 = HEAP8[$__in_units]|0;
     $128 = ($127<<24>>24)==(0);
     
     if ($128) {
      break;
     }
     $129 = HEAP32[$__g_end>>2]|0;
     $130 = $129;
     $131 = $__g;
     $132 = (($130) - ($131))|0;
     $133 = ($132|0)<(160);
     
     if (!($133)) {
      break;
     }
     $134 = HEAP32[$__dc>>2]|0;
     $gep_int46 = $129;
     $gep47 = (($gep_int46) + 4)|0;
     $135 = $gep47;
     HEAP32[$__g_end>>2] = $135;
     HEAP32[$129>>2] = $134;
     
    }
   } while(0);
   $136 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $137 = +invoke_diii(3,$__a$2|0,$136|0,$__err|0);
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   
   if ($139) {
    break;
   }
   HEAPF64[$__v>>3] = $137;
   $140 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$13,$140,$__err);
   $141 = ($34|0)==(0);
   
   do {
    if ($141) {
     $155 = 0;
    } else {
     $gep_int48 = $34;
     $gep49 = (($gep_int48) + 12)|0;
     $142 = $gep49;
     $143 = HEAP32[$142>>2]|0;
     $gep_int50 = $34;
     $gep51 = (($gep_int50) + 16)|0;
     $144 = $gep51;
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     
     if (!($146)) {
      $155 = $34;
      break;
     }
     $147 = $34;
     $148 = HEAP32[$34>>2]|0;
     $gep_int52 = $148;
     $gep53 = (($gep_int52) + 36)|0;
     $149 = $gep53;
     $150 = HEAP32[$149>>2]|0;
     __THREW__ = 0;
     $151 = invoke_ii($150|0,$34|0)|0;
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     
     if ($153) {
      break L1;
     }
     $154 = ($151|0)==(-1);
     
     if (!($154)) {
      $155 = $34;
      break;
     }
     HEAP32[$14>>2] = 0;
     
     $155 = 0;
    }
   } while(0);
   
   $156 = ($155|0)==(0);
   $157 = ($$pre$i2$i$i|0)==(0);
   
   do {
    if ($157) {
     label = 63;
    } else {
     $gep_int54 = $$pre$i2$i$i;
     $gep55 = (($gep_int54) + 12)|0;
     $158 = $gep55;
     $159 = HEAP32[$158>>2]|0;
     $gep_int56 = $$pre$i2$i$i;
     $gep57 = (($gep_int56) + 16)|0;
     $160 = $gep57;
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159|0)==($161|0);
     
     if (!($162)) {
      
      if (!($156)) {
       break;
      }
      $gep_int60 = $agg$result;
      $174 = $gep_int60;
      HEAP32[$174>>2] = $155;
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $163 = $$pre$i2$i$i;
     $164 = HEAP32[$$pre$i2$i$i>>2]|0;
     $gep_int58 = $164;
     $gep59 = (($gep_int58) + 36)|0;
     $165 = $gep59;
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = invoke_ii($166|0,$$pre$i2$i$i|0)|0;
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     
     if ($169) {
      break L1;
     }
     $170 = ($167|0)==(-1);
     
     if ($170) {
      HEAP32[$15>>2] = 0;
      
      label = 63;
      break;
     }
     $171 = ($$pre$i2$i$i|0)==(0);
     $tmp$i$i = $156 ^ $171;
     
     if (!($tmp$i$i)) {
      break;
     }
     $gep_int60 = $agg$result;
     $174 = $gep_int60;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 63) {
     
     if ($156) {
      break;
     }
     $gep_int60 = $agg$result;
     $174 = $gep_int60;
     HEAP32[$174>>2] = $155;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $172 = HEAP32[$__err>>2]|0;
   $173 = $172 | 2;
   HEAP32[$__err>>2] = $173;
   
   $gep_int60 = $agg$result;
   $174 = $gep_int60;
   HEAP32[$174>>2] = $155;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $90 = ___cxa_find_matching_catch(-1,-1)|0;
 $91 = tempRet0;
 
 $lpad$phi$index = $90;$lpad$phi$index2 = $91;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$off0$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre33 = 0, $$pre34 = 0, $$pre36 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0;
 var $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded8 = 0, $expanded9 = 0, $extract$t$i = 0;
 var $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0, $gep106 = 0, $gep108 = 0, $gep110 = 0, $gep37 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep49 = 0, $gep52 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep67 = 0, $gep69 = 0;
 var $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep84 = 0, $gep86 = 0, $gep88 = 0, $gep90 = 0, $gep92 = 0, $gep94 = 0, $gep_array = 0, $gep_int = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int111 = 0;
 var $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int63 = 0;
 var $gep_int64 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int96 = 0, $gep_int97 = 0;
 var $gep_int98 = 0, $gep_int99 = 0, $phitmp$i22 = 0, $this2$i$i$i = 0, $this2$i$i$i6 = 0, $tmp$i$i = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$21 = 0, u$23 = 0, u$73 = 0, u$87 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $vararg_buffer = sp;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__atoms = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $__grouping = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__buf = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__a_end = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__g = STACKTOP; STACKTOP = STACKTOP + 160|0;
 $__g_end = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__dc = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $this2$i$i$i = $__grouping;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(41,$1|0,$__iob|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 if ($3) {
  $expanded19 = 69;
  $125 = ___cxa_find_matching_catch(-1,-1)|0;
  $126 = tempRet0;
  
  $$0 = $125;$$01 = $126;
  
  
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable
 }
 $gep_int = $1;
 $4 = $gep_int;
 $5 = HEAP32[$4>>2]|0;
 $6 = $__p$i$i$i$i;
 
 $expanded8 = 8480;
 $gep_int33 = 8480;
 $expanded = $gep_int33;
 $7 = HEAP32[$expanded>>2]|0;
 $8 = ($7|0)==(-1);
 
 if ($8) {
  label = 4;
 } else {
  $gep_int34 = $__p$i$i$i$i;
  $9 = $gep_int34;
  $expanded9 = 8480;
  HEAP32[$9>>2] = $expanded9;
  $gep_int35 = $__p$i$i$i$i;
  $gep = (($gep_int35) + 4)|0;
  $10 = $gep;
  $expanded10 = 177;
  HEAP32[$10>>2] = $expanded10;
  $gep_int36 = $__p$i$i$i$i;
  $gep37 = (($gep_int36) + 8)|0;
  $11 = $gep37;
  HEAP32[$11>>2] = 0;
  __THREW__ = 0;
  $expanded12 = 8480;
  $gep_int38 = 8480;
  $expanded11 = $gep_int38;
  invoke_viii(17,$expanded11|0,$6|0,178);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  
  if (!($13)) {
   label = 4;
  }
 }
 L7: do {
  if ((label|0) == 4) {
   
   $expanded14 = 8480;
   $gep_int39 = 8480;
   $gep40 = (($gep_int39) + 4)|0;
   $expanded13 = $gep40;
   $14 = HEAP32[$expanded13>>2]|0;
   $15 = (($14) + -1)|0;
   $gep_int41 = $5;
   $gep42 = (($gep_int41) + 12)|0;
   $16 = $gep42;
   $17 = HEAP32[$16>>2]|0;
   $gep_int43 = $5;
   $gep44 = (($gep_int43) + 8)|0;
   $18 = $gep44;
   $19 = HEAP32[$18>>2]|0;
   $20 = $17;
   $21 = $19;
   $22 = (($20) - ($21))|0;
   $23 = $22 >> 2;
   $24 = ($23>>>0)>($15>>>0);
   
   do {
    if ($24) {
     $gep_int45 = $19;
     $gep_array = $15<<2;
     $gep46 = (($gep_int45) + ($gep_array))|0;
     $25 = $gep46;
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(0);
     
     if ($27) {
      break;
     }
     $32 = $26;
     $gep_int47 = $__atoms;
     $33 = $gep_int47;
     $34 = $26;
     $35 = HEAP32[$26>>2]|0;
     $gep_int48 = $35;
     $gep49 = (($gep_int48) + 32)|0;
     $36 = $gep49;
     $37 = HEAP32[$36>>2]|0;
     __THREW__ = 0;
     $gep_int50 = 7024;
     $expanded17 = $gep_int50;
     $gep_int51 = 7024;
     $gep52 = (($gep_int51) + 26)|0;
     $expanded18 = $gep52;
     u$21 = invoke_iiiii($37|0,$32|0,$expanded17|0,$expanded18|0,$33|0)|0;
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     
     if ($39) {
      break L7;
     }
     $40 = HEAP32[$4>>2]|0;
     $gep_int53 = $40;
     $41 = $gep_int53;
     u$23 = __ZNSt3__114__shared_count16__release_sharedEv($41)|0;
     $this2$i$i$i6 = $__buf;
     ;HEAP32[$this2$i$i$i6+0>>2]=0|0;HEAP32[$this2$i$i$i6+4>>2]=0|0;HEAP32[$this2$i$i$i6+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,10,0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     
     L13: do {
      if ($43) {
       label = 44;
      } else {
       $44 = HEAP8[$__buf]|0;
       $45 = $44 & 1;
       $46 = ($45<<24>>24)==(0);
       
       if ($46) {
        $49 = $__buf;
        $gep_int58 = $__buf;
        $gep59 = (($gep_int58) + 1)|0;
        $50 = $gep59;
        $gep_int60 = $__buf;
        $gep61 = (($gep_int60) + 8)|0;
        $$pre36 = $gep61;
        
        $$pre$phi35Z2D = $50;$$pre$phi37Z2D = $$pre36;$51 = $50;
       } else {
        $gep_int54 = $__buf;
        $gep55 = (($gep_int54) + 8)|0;
        $47 = $gep55;
        $48 = HEAP32[$47>>2]|0;
        $$pre33 = $__buf;
        $gep_int56 = $__buf;
        $gep57 = (($gep_int56) + 1)|0;
        $$pre34 = $gep57;
        
        $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $47;$51 = $48;
       }
       
       
       
       HEAP32[$__a_end>>2] = $51;
       $52 = $__g;
       
       $gep_int62 = $__g;
       $53 = $gep_int62;
       HEAP32[$__g_end>>2] = $53;
       HEAP32[$__dc>>2] = 0;
       $gep_int63 = $__b;
       $54 = $gep_int63;
       $gep_int64 = $__e;
       $55 = $gep_int64;
       $gep_int65 = $__buf;
       $56 = $gep_int65;
       $gep_int66 = $__buf;
       $gep67 = (($gep_int66) + 4)|0;
       $57 = $gep67;
       $$pre = HEAP32[$54>>2]|0;
       
       $$pre$i$i$i9 = $$pre;$__a$0 = $51;
       L19: while(1) {
        
        
        $58 = ($$pre$i$i$i9|0)==(0);
        
        do {
         if ($58) {
          $72 = 0;
         } else {
          $gep_int68 = $$pre$i$i$i9;
          $gep69 = (($gep_int68) + 12)|0;
          $59 = $gep69;
          $60 = HEAP32[$59>>2]|0;
          $gep_int70 = $$pre$i$i$i9;
          $gep71 = (($gep_int70) + 16)|0;
          $61 = $gep71;
          $62 = HEAP32[$61>>2]|0;
          $63 = ($60|0)==($62|0);
          
          if (!($63)) {
           $72 = $$pre$i$i$i9;
           break;
          }
          $64 = $$pre$i$i$i9;
          $65 = HEAP32[$$pre$i$i$i9>>2]|0;
          $gep_int72 = $65;
          $gep73 = (($gep_int72) + 36)|0;
          $66 = $gep73;
          $67 = HEAP32[$66>>2]|0;
          __THREW__ = 0;
          $68 = invoke_ii($67|0,$$pre$i$i$i9|0)|0;
          $69 = __THREW__; __THREW__ = 0;
          $70 = $69&1;
          
          if ($70) {
           label = 43;
           break L19;
          }
          $71 = ($68|0)==(-1);
          
          if (!($71)) {
           $72 = $$pre$i$i$i9;
           break;
          }
          HEAP32[$54>>2] = 0;
          
          $72 = 0;
         }
        } while(0);
        
        $73 = ($72|0)==(0);
        $74 = HEAP32[$55>>2]|0;
        $75 = ($74|0)==(0);
        
        do {
         if ($75) {
          label = 25;
         } else {
          $gep_int74 = $74;
          $gep75 = (($gep_int74) + 12)|0;
          $76 = $gep75;
          $77 = HEAP32[$76>>2]|0;
          $gep_int76 = $74;
          $gep77 = (($gep_int76) + 16)|0;
          $78 = $gep77;
          $79 = HEAP32[$78>>2]|0;
          $80 = ($77|0)==($79|0);
          
          if (!($80)) {
           
           if ($73) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
          $81 = $74;
          $82 = HEAP32[$74>>2]|0;
          $gep_int78 = $82;
          $gep79 = (($gep_int78) + 36)|0;
          $83 = $gep79;
          $84 = HEAP32[$83>>2]|0;
          __THREW__ = 0;
          $85 = invoke_ii($84|0,$74|0)|0;
          $86 = __THREW__; __THREW__ = 0;
          $87 = $86&1;
          
          if ($87) {
           label = 43;
           break L19;
          }
          $88 = ($85|0)==(-1);
          
          if ($88) {
           HEAP32[$55>>2] = 0;
           
           label = 25;
           break;
          } else {
           
           if ($73) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
         }
        } while(0);
        if ((label|0) == 25) {
         label = 0;
         
         if ($73) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $89 = HEAP32[$__a_end>>2]|0;
        $90 = $89;
        $91 = $__a$0;
        $92 = (($90) - ($91))|0;
        $93 = HEAP8[$__buf]|0;
        $94 = $93 & 1;
        $95 = ($94<<24>>24)==(0);
        
        if ($95) {
         $97 = $93&255;
         $98 = $97 >>> 1;
         
         $99 = $98;
        } else {
         $96 = HEAP32[$57>>2]|0;
         
         $99 = $96;
        }
        
        $100 = ($92|0)==($99|0);
        
        if ($100) {
         
         if ($95) {
          $102 = $93&255;
          $103 = $102 >>> 1;
          $104 = $93&255;
          $105 = $104 >>> 1;
          
          $106 = $103;$107 = $105;
         } else {
          $101 = HEAP32[$57>>2]|0;
          
          $106 = $101;$107 = $101;
         }
         
         
         $108 = $107 << 1;
         __THREW__ = 0;
         invoke_viii(18,$__buf|0,$108|0,0);
         $109 = __THREW__; __THREW__ = 0;
         $110 = $109&1;
         
         if ($110) {
          label = 43;
          break;
         }
         $111 = HEAP8[$__buf]|0;
         $112 = $111 & 1;
         $113 = ($112<<24>>24)==(0);
         
         if ($113) {
          $116 = 10;
         } else {
          $114 = HEAP32[$56>>2]|0;
          $115 = $114 & -2;
          $phitmp$i22 = (($115) + -1)|0;
          
          $116 = $phitmp$i22;
         }
         
         __THREW__ = 0;
         invoke_viii(18,$__buf|0,$116|0,0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         
         if ($118) {
          label = 43;
          break;
         }
         $119 = HEAP8[$__buf]|0;
         $120 = $119 & 1;
         $121 = ($120<<24>>24)==(0);
         
         if ($121) {
          $123 = $$pre$phi35Z2D;
         } else {
          $122 = HEAP32[$$pre$phi37Z2D>>2]|0;
          
          $123 = $122;
         }
         
         $gep_int80 = $123;
         $gep81 = (($gep_int80) + ($106))|0;
         $124 = $gep81;
         HEAP32[$__a_end>>2] = $124;
         
         $__a$1 = $123;
        } else {
         $__a$1 = $__a$0;
        }
        
        $gep_int83 = $72;
        $gep84 = (($gep_int83) + 12)|0;
        $135 = $gep84;
        $136 = HEAP32[$135>>2]|0;
        $gep_int85 = $72;
        $gep86 = (($gep_int85) + 16)|0;
        $137 = $gep86;
        $138 = HEAP32[$137>>2]|0;
        $139 = ($136|0)==($138|0);
        
        if ($139) {
         $140 = $72;
         $141 = HEAP32[$72>>2]|0;
         $gep_int87 = $141;
         $gep88 = (($gep_int87) + 36)|0;
         $142 = $gep88;
         $143 = HEAP32[$142>>2]|0;
         __THREW__ = 0;
         $144 = invoke_ii($143|0,$72|0)|0;
         $145 = __THREW__; __THREW__ = 0;
         $146 = $145&1;
         
         if ($146) {
          label = 43;
          break;
         }
         $extract$t$i = $144&255;
         
         $$0$i$off0$i = $extract$t$i;
        } else {
         $147 = HEAP8[$136]|0;
         
         $$0$i$off0$i = $147;
        }
        
        $148 = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$off0$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$53,$__g_end,$33)|0;
        $149 = ($148|0)==(0);
        
        if (!($149)) {
         $__a$2 = $__a$1;
         break;
        }
        $150 = HEAP32[$135>>2]|0;
        $151 = HEAP32[$137>>2]|0;
        $152 = ($150|0)==($151|0);
        
        if ($152) {
         $153 = $72;
         $154 = HEAP32[$72>>2]|0;
         $gep_int89 = $154;
         $gep90 = (($gep_int89) + 40)|0;
         $155 = $gep90;
         $156 = HEAP32[$155>>2]|0;
         __THREW__ = 0;
         u$87 = invoke_ii($156|0,$72|0)|0;
         $157 = __THREW__; __THREW__ = 0;
         $158 = $157&1;
         
         if ($158) {
          label = 43;
          break;
         } else {
          $$pre$i$i$i9 = $72;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $gep_int91 = $150;
         $gep92 = (($gep_int91) + 1)|0;
         $159 = $gep92;
         HEAP32[$135>>2] = $159;
         
         $$pre$i$i$i9 = $72;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 43) {
        $expanded21 = 69;
        $131 = ___cxa_find_matching_catch(-1,-1)|0;
        $132 = tempRet0;
        
        $eh$lpad$body$index3Z2D = $132;$eh$lpad$body$indexZ2D = $131;
        break;
       }
       
       $gep_int93 = $__a$2;
       $gep94 = (($gep_int93) + 3)|0;
       $160 = $gep94;
       HEAP8[$160] = 0;
       $gep_int95 = 8376;
       $expanded23 = $gep_int95;
       $161 = HEAP8[$expanded23]|0;
       $162 = ($161<<24>>24)==(0);
       
       do {
        if ($162) {
         $expanded24 = 8376;
         $163 = ___cxa_guard_acquire($expanded24|0)|0;
         $164 = ($163|0)==(0);
         
         if ($164) {
          break;
         }
         __THREW__ = 0;
         $gep_int96 = 8384;
         $expanded25 = $gep_int96;
         $165 = invoke_iiii(30,2147483647,$expanded25|0,0)|0;
         $166 = __THREW__; __THREW__ = 0;
         $167 = $166&1;
         
         if ($167) {
          $expanded28 = 69;
          $168 = ___cxa_find_matching_catch(-1,-1)|0;
          $169 = tempRet0;
          $expanded29 = 8376;
          ___cxa_guard_abort($expanded29|0);
          
          $eh$lpad$body$index3Z2D = $169;$eh$lpad$body$indexZ2D = $168;
          break L13;
         } else {
          $expanded26 = 8368;
          HEAP32[8368>>2] = $165;
          $expanded27 = 8376;
          ___cxa_guard_release($expanded27|0);
          
          break;
         }
        }
       } while(0);
       $expanded30 = 8368;
       $170 = HEAP32[8368>>2]|0;
       __THREW__ = 0;
       
       $gep_int97 = $vararg_buffer;
       $vararg_ptr = $gep_int97;
       HEAP32[$vararg_ptr>>2] = $__v;
       $expanded31 = 15;
       $vararg_func = $expanded31;
       $gep_int98 = 7064;
       $expanded32 = $gep_int98;
       $171 = invoke_iiiii(15,$__a$2|0,$170|0,$expanded32|0,$vararg_buffer|0)|0;
       
       $172 = __THREW__; __THREW__ = 0;
       $173 = $172&1;
       
       if ($173) {
        label = 44;
        break;
       }
       $174 = ($171|0)==(1);
       
       if (!($174)) {
        HEAP32[$__err>>2] = 4;
        
       }
       $175 = HEAP32[$54>>2]|0;
       $176 = ($175|0)==(0);
       
       do {
        if ($176) {
         $190 = 0;
        } else {
         $gep_int99 = $175;
         $gep100 = (($gep_int99) + 12)|0;
         $177 = $gep100;
         $178 = HEAP32[$177>>2]|0;
         $gep_int101 = $175;
         $gep102 = (($gep_int101) + 16)|0;
         $179 = $gep102;
         $180 = HEAP32[$179>>2]|0;
         $181 = ($178|0)==($180|0);
         
         if (!($181)) {
          $190 = $175;
          break;
         }
         $182 = $175;
         $183 = HEAP32[$175>>2]|0;
         $gep_int103 = $183;
         $gep104 = (($gep_int103) + 36)|0;
         $184 = $gep104;
         $185 = HEAP32[$184>>2]|0;
         __THREW__ = 0;
         $186 = invoke_ii($185|0,$175|0)|0;
         $187 = __THREW__; __THREW__ = 0;
         $188 = $187&1;
         
         if ($188) {
          label = 44;
          break L13;
         }
         $189 = ($186|0)==(-1);
         
         if (!($189)) {
          $190 = $175;
          break;
         }
         HEAP32[$54>>2] = 0;
         
         $190 = 0;
        }
       } while(0);
       
       $191 = ($190|0)==(0);
       $192 = HEAP32[$55>>2]|0;
       $193 = ($192|0)==(0);
       
       do {
        if ($193) {
         label = 73;
        } else {
         $gep_int105 = $192;
         $gep106 = (($gep_int105) + 12)|0;
         $194 = $gep106;
         $195 = HEAP32[$194>>2]|0;
         $gep_int107 = $192;
         $gep108 = (($gep_int107) + 16)|0;
         $196 = $gep108;
         $197 = HEAP32[$196>>2]|0;
         $198 = ($195|0)==($197|0);
         
         if (!($198)) {
          
          if (!($191)) {
           break;
          }
          $gep_int111 = $agg$result;
          $210 = $gep_int111;
          HEAP32[$210>>2] = $190;
          
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
         $199 = $192;
         $200 = HEAP32[$192>>2]|0;
         $gep_int109 = $200;
         $gep110 = (($gep_int109) + 36)|0;
         $201 = $gep110;
         $202 = HEAP32[$201>>2]|0;
         __THREW__ = 0;
         $203 = invoke_ii($202|0,$192|0)|0;
         $204 = __THREW__; __THREW__ = 0;
         $205 = $204&1;
         
         if ($205) {
          label = 44;
          break L13;
         }
         $206 = ($203|0)==(-1);
         
         if ($206) {
          HEAP32[$55>>2] = 0;
          
          label = 73;
          break;
         }
         $207 = ($192|0)==(0);
         $tmp$i$i = $191 ^ $207;
         
         if (!($tmp$i$i)) {
          break;
         }
         $gep_int111 = $agg$result;
         $210 = $gep_int111;
         HEAP32[$210>>2] = $190;
         
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         STACKTOP = sp;return;
        }
       } while(0);
       do {
        if ((label|0) == 73) {
         
         if ($191) {
          break;
         }
         $gep_int111 = $agg$result;
         $210 = $gep_int111;
         HEAP32[$210>>2] = $190;
         
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         STACKTOP = sp;return;
        }
       } while(0);
       $208 = HEAP32[$__err>>2]|0;
       $209 = $208 | 2;
       HEAP32[$__err>>2] = $209;
       
       $gep_int111 = $agg$result;
       $210 = $gep_int111;
       HEAP32[$210>>2] = $190;
       
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     } while(0);
     if ((label|0) == 44) {
      $expanded22 = 69;
      $133 = ___cxa_find_matching_catch(-1,-1)|0;
      $134 = tempRet0;
      
      $eh$lpad$body$index3Z2D = $134;$eh$lpad$body$indexZ2D = $133;
     }
     
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index3Z2D;
     
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($$0|0);
     // unreachable
    }
   } while(0);
   $28 = ___cxa_allocate_exception(4)|0;
   $29 = $28;
   __ZNSt8bad_castC2Ev($29);
   __THREW__ = 0;
   $expanded15 = 16440;
   $expanded16 = 119;
   invoke_viii(5,$28|0,$expanded15|0,$expanded16|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   
   if ($31) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded20 = 69;
 $127 = ___cxa_find_matching_catch(-1,-1)|0;
 $128 = tempRet0;
 $129 = HEAP32[$4>>2]|0;
 $gep_int82 = $129;
 $130 = $gep_int82;
 u$73 = __ZNSt3__114__shared_count16__release_sharedEv($130)|0;
 
 $$0 = $127;$$01 = $128;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $$01$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0;
 var $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int3 = 0, $gep_int5 = 0;
 var $gep_int7 = 0, $gep_int9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__a_end>>2]|0;
 $2 = ($1|0)==($__a|0);
 
 do {
  if ($2) {
   $gep_int = $__atoms;
   $gep = (($gep_int) + 24)|0;
   $3 = $gep;
   $4 = HEAP8[$3]|0;
   $5 = ($4<<24>>24)==($__ct<<24>>24);
   
   if (!($5)) {
    $gep_int1 = $__atoms;
    $gep2 = (($gep_int1) + 25)|0;
    $6 = $gep2;
    $7 = HEAP8[$6]|0;
    $8 = ($7<<24>>24)==($__ct<<24>>24);
    
    if (!($8)) {
     break;
    }
   }
   $9 = $5 ? 43 : 45;
   $gep_int3 = $__a;
   $gep4 = (($gep_int3) + 1)|0;
   $10 = $gep4;
   HEAP32[$__a_end>>2] = $10;
   HEAP8[$__a] = $9;
   HEAP32[$__dc>>2] = 0;
   
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $11 = $__grouping;
 $12 = HEAP8[$__grouping]|0;
 $13 = $12 & 1;
 $14 = ($13<<24>>24)==(0);
 
 if ($14) {
  $17 = $12&255;
  $18 = $17 >>> 1;
  
  $19 = $18;
 } else {
  $gep_int5 = $__grouping;
  $gep6 = (($gep_int5) + 4)|0;
  $15 = $gep6;
  $16 = HEAP32[$15>>2]|0;
  
  $19 = $16;
 }
 
 $20 = ($19|0)!=(0);
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $20 & $21;
 
 if ($or$cond) {
  $22 = HEAP32[$__g_end>>2]|0;
  $23 = $22;
  $24 = $__g;
  $25 = (($23) - ($24))|0;
  $26 = ($25|0)<(160);
  
  if (!($26)) {
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
  $27 = HEAP32[$__dc>>2]|0;
  $gep_int7 = $22;
  $gep8 = (($gep_int7) + 4)|0;
  $28 = $gep8;
  HEAP32[$__g_end>>2] = $28;
  HEAP32[$22>>2] = $27;
  HEAP32[$__dc>>2] = 0;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $gep_int9 = $__atoms;
 $gep10 = (($gep_int9) + 26)|0;
 $29 = $gep10;
 
 $$01$i = $__atoms;
 while(1) {
  
  $31 = HEAP8[$$01$i]|0;
  $32 = ($31<<24>>24)==($__ct<<24>>24);
  $gep_int11 = $$01$i;
  $gep12 = (($gep_int11) + 1)|0;
  $33 = $gep12;
  
  if ($32) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $30 = ($33|0)==($29|0);
  
  if ($30) {
   $$0$lcssa$i = $29;
   break;
  } else {
   $$01$i$phi = $33;$$01$i = $$01$i$phi;
  }
 }
 
 $34 = $$0$lcssa$i;
 $35 = $__atoms;
 $36 = (($34) - ($35))|0;
 $37 = ($36|0)>(23);
 
 if ($37) {
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 }
 
 do {
  if ((($__base|0) == 16)) {
   $39 = ($36|0)<(22);
   
   if ($39) {
    break;
   }
   
   if ($2) {
    $$0 = -1;
    
    STACKTOP = sp;return $$0|0;
   }
   $40 = $1;
   $41 = $__a;
   $42 = (($40) - ($41))|0;
   $43 = ($42|0)<(3);
   
   if (!($43)) {
    $$0 = -1;
    
    STACKTOP = sp;return $$0|0;
   }
   $gep_int13 = $1;
   $gep14 = (($gep_int13) + -1)|0;
   $44 = $gep14;
   $45 = HEAP8[$44]|0;
   $46 = ($45<<24>>24)==(48);
   
   if (!($46)) {
    $$0 = -1;
    
    STACKTOP = sp;return $$0|0;
   }
   HEAP32[$__dc>>2] = 0;
   $gep_int15 = 7024;
   $gep16 = (($gep_int15) + ($36))|0;
   $47 = $gep16;
   $48 = HEAP8[$47]|0;
   $gep_int17 = $1;
   $gep18 = (($gep_int17) + 1)|0;
   $49 = $gep18;
   HEAP32[$__a_end>>2] = $49;
   HEAP8[$1] = $48;
   
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
   $38 = ($36|0)<($__base|0);
   
   if ($38) {
    break;
   } else {
    $$0 = -1;
   }
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $gep_int19 = 7024;
 $gep20 = (($gep_int19) + ($36))|0;
 $50 = $gep20;
 $51 = HEAP8[$50]|0;
 $gep_int21 = $1;
 $gep22 = (($gep_int21) + 1)|0;
 $52 = $gep22;
 HEAP32[$__a_end>>2] = $52;
 HEAP8[$1] = $51;
 $53 = HEAP32[$__dc>>2]|0;
 $54 = (($53) + 1)|0;
 HEAP32[$__dc>>2] = $54;
 
 $$0 = 0;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__va = 0, $arglist = 0, $expanded = 0, $gep_int = 0, label = 0, sp = 0, u$3 = 0, u$5 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 $gep_int = $__va;
 $1 = $gep_int;
 $2 = $__va;
 $arglist = $2;
 HEAP32[$__va>>2] = $varargs;
 $3 = _uselocale($__l|0)|0;
 $4 = _vsscanf($__s|0,$__format|0,$1|0)|0;
 $5 = ($3|0)==(0);
 
 if ($5) {
  STACKTOP = sp;return $4|0;
 }
 __THREW__ = 0;
 u$3 = invoke_ii(95,$3|0)|0;
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 if ($7) {
  $expanded = 69;
  $8 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$5 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable
 } else {
  STACKTOP = sp;return $4|0;
 }
 return 0|0;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $137$phi = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0;
 var $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep27 = 0;
 var $gep38 = 0, $gep40 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep55 = 0, $gep57 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep67 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep79 = 0, $gep83 = 0, $gep88 = 0, $gep90 = 0, $gep_array = 0;
 var $gep_array66 = 0, $gep_int = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0;
 var $gep_int51 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int68 = 0, $gep_int69 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int77 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int81 = 0;
 var $gep_int82 = 0, $gep_int84 = 0, $gep_int85 = 0, $gep_int86 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, label = 0, sp = 0, u$39 = 0, u$57 = 0, u$75 = 0, u$77 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 136|0;
 $$byval_copy2 = sp;
 $$byval_copy1 = sp + 8|0;
 $$byval_copy = sp + 16|0;
 $__p$i$i$i$i4 = sp + 24|0;
 $__p$i$i$i$i = sp + 40|0;
 $__lv = sp + 56|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = sp + 80|0;
 $4 = sp + 88|0;
 $5 = sp + 96|0;
 $__names = sp + 104|0;
 $6 = sp + 128|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $7 = $gep;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 
 if ($10) {
  HEAP32[$__lv>>2] = -1;
  $11 = $this;
  $12 = HEAP32[$this>>2]|0;
  $gep_int26 = $12;
  $gep27 = (($gep_int26) + 16)|0;
  $13 = $gep27;
  $14 = HEAP32[$13>>2]|0;
  $gep_int28 = $__b;
  $15 = $gep_int28;
  $16 = HEAP32[$15>>2]|0;
  $gep_int29 = $2;
  $17 = $gep_int29;
  HEAP32[$17>>2] = $16;
  $gep_int30 = $__e;
  $18 = $gep_int30;
  $19 = HEAP32[$18>>2]|0;
  $gep_int31 = $3;
  $20 = $gep_int31;
  HEAP32[$20>>2] = $19;
  $21 = $$byval_copy;
  
  $22 = $$byval_copy;
  $23 = $2;
  ;HEAP32[$22+0>>2]=HEAP32[$23+0>>2]|0;
  $24 = $$byval_copy1;
  
  $25 = $$byval_copy1;
  $26 = $3;
  ;HEAP32[$25+0>>2]=HEAP32[$26+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$14 & 63]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $27 = $$byval_copy1;
  
  $28 = $$byval_copy;
  
  $gep_int32 = $1;
  $29 = $gep_int32;
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$15>>2] = $30;
  $31 = HEAP32[$__lv>>2]|0;
  
  if ((($31|0) == 0)) {
   HEAP8[$__v] = 0;
   
  } else if ((($31|0) == 1)) {
   HEAP8[$__v] = 1;
   
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err>>2] = 4;
   
  }
  $gep_int33 = $agg$result;
  $32 = $gep_int33;
  HEAP32[$32>>2] = $30;
  
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 $gep_int34 = $4;
 $33 = $gep_int34;
 $34 = HEAP32[$33>>2]|0;
 $35 = $__p$i$i$i$i;
 
 $expanded3 = 8472;
 $gep_int35 = 8472;
 $expanded = $gep_int35;
 $36 = HEAP32[$expanded>>2]|0;
 $37 = ($36|0)==(-1);
 
 if ($37) {
  label = 9;
 } else {
  $gep_int36 = $__p$i$i$i$i;
  $38 = $gep_int36;
  $expanded4 = 8472;
  HEAP32[$38>>2] = $expanded4;
  $gep_int37 = $__p$i$i$i$i;
  $gep38 = (($gep_int37) + 4)|0;
  $39 = $gep38;
  $expanded5 = 177;
  HEAP32[$39>>2] = $expanded5;
  $gep_int39 = $__p$i$i$i$i;
  $gep40 = (($gep_int39) + 8)|0;
  $40 = $gep40;
  HEAP32[$40>>2] = 0;
  __THREW__ = 0;
  $expanded7 = 8472;
  $gep_int41 = 8472;
  $expanded6 = $gep_int41;
  invoke_viii(17,$expanded6|0,$35|0,178);
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  
  if (!($42)) {
   label = 9;
  }
 }
 do {
  if ((label|0) == 9) {
   
   $expanded9 = 8472;
   $gep_int42 = 8472;
   $gep43 = (($gep_int42) + 4)|0;
   $expanded8 = $gep43;
   $43 = HEAP32[$expanded8>>2]|0;
   $44 = (($43) + -1)|0;
   $gep_int44 = $34;
   $gep45 = (($gep_int44) + 12)|0;
   $45 = $gep45;
   $46 = HEAP32[$45>>2]|0;
   $gep_int46 = $34;
   $gep47 = (($gep_int46) + 8)|0;
   $47 = $gep47;
   $48 = HEAP32[$47>>2]|0;
   $49 = $46;
   $50 = $48;
   $51 = (($49) - ($50))|0;
   $52 = $51 >> 2;
   $53 = ($52>>>0)>($44>>>0);
   
   do {
    if ($53) {
     $gep_int48 = $48;
     $gep_array = $44<<2;
     $gep49 = (($gep_int48) + ($gep_array))|0;
     $54 = $gep49;
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0);
     
     if ($56) {
      break;
     }
     $61 = $55;
     $62 = HEAP32[$33>>2]|0;
     $gep_int50 = $62;
     $63 = $gep_int50;
     u$39 = __ZNSt3__114__shared_count16__release_sharedEv($63)|0;
     __ZNKSt3__18ios_base6getlocEv($5,$__iob);
     $gep_int51 = $5;
     $64 = $gep_int51;
     $65 = HEAP32[$64>>2]|0;
     $66 = $__p$i$i$i$i4;
     
     $expanded13 = 8632;
     $gep_int52 = 8632;
     $expanded12 = $gep_int52;
     $67 = HEAP32[$expanded12>>2]|0;
     $68 = ($67|0)==(-1);
     
     if ($68) {
      label = 15;
     } else {
      $gep_int53 = $__p$i$i$i$i4;
      $69 = $gep_int53;
      $expanded14 = 8632;
      HEAP32[$69>>2] = $expanded14;
      $gep_int54 = $__p$i$i$i$i4;
      $gep55 = (($gep_int54) + 4)|0;
      $70 = $gep55;
      $expanded15 = 177;
      HEAP32[$70>>2] = $expanded15;
      $gep_int56 = $__p$i$i$i$i4;
      $gep57 = (($gep_int56) + 8)|0;
      $71 = $gep57;
      HEAP32[$71>>2] = 0;
      __THREW__ = 0;
      $expanded17 = 8632;
      $gep_int58 = 8632;
      $expanded16 = $gep_int58;
      invoke_viii(17,$expanded16|0,$66|0,178);
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      
      if (!($73)) {
       label = 15;
      }
     }
     do {
      if ((label|0) == 15) {
       
       $expanded19 = 8632;
       $gep_int59 = 8632;
       $gep60 = (($gep_int59) + 4)|0;
       $expanded18 = $gep60;
       $74 = HEAP32[$expanded18>>2]|0;
       $75 = (($74) + -1)|0;
       $gep_int61 = $65;
       $gep62 = (($gep_int61) + 12)|0;
       $76 = $gep62;
       $77 = HEAP32[$76>>2]|0;
       $gep_int63 = $65;
       $gep64 = (($gep_int63) + 8)|0;
       $78 = $gep64;
       $79 = HEAP32[$78>>2]|0;
       $80 = $77;
       $81 = $79;
       $82 = (($80) - ($81))|0;
       $83 = $82 >> 2;
       $84 = ($83>>>0)>($75>>>0);
       
       do {
        if ($84) {
         $gep_int65 = $79;
         $gep_array66 = $75<<2;
         $gep67 = (($gep_int65) + ($gep_array66))|0;
         $85 = $gep67;
         $86 = HEAP32[$85>>2]|0;
         $87 = ($86|0)==(0);
         
         if ($87) {
          break;
         }
         $92 = $86;
         $93 = HEAP32[$64>>2]|0;
         $gep_int68 = $93;
         $94 = $gep_int68;
         u$57 = __ZNSt3__114__shared_count16__release_sharedEv($94)|0;
         $gep_int69 = $__names;
         $95 = $gep_int69;
         $96 = $86;
         $97 = HEAP32[$86>>2]|0;
         $gep_int70 = $97;
         $gep71 = (($gep_int70) + 24)|0;
         $98 = $gep71;
         $99 = HEAP32[$98>>2]|0;
         __THREW__ = 0;
         invoke_vii($99|0,$95|0,$92|0);
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         
         do {
          if ($101) {
           $$02 = $95;
          } else {
           $gep_int72 = $__names;
           $gep73 = (($gep_int72) + 12)|0;
           $102 = $gep73;
           $103 = HEAP32[$86>>2]|0;
           $gep_int74 = $103;
           $gep75 = (($gep_int74) + 28)|0;
           $104 = $gep75;
           $105 = HEAP32[$104>>2]|0;
           __THREW__ = 0;
           invoke_vii($105|0,$102|0,$92|0);
           $106 = __THREW__; __THREW__ = 0;
           $107 = $106&1;
           
           if ($107) {
            $$02 = $102;
            break;
           }
           $gep_int76 = $__e;
           $108 = $gep_int76;
           $109 = HEAP32[$108>>2]|0;
           $gep_int77 = $6;
           $110 = $gep_int77;
           HEAP32[$110>>2] = $109;
           $gep_int78 = $__names;
           $gep79 = (($gep_int78) + 24)|0;
           $111 = $gep79;
           __THREW__ = 0;
           $112 = $$byval_copy2;
           
           $113 = $$byval_copy2;
           $114 = $6;
           ;HEAP32[$113+0>>2]=HEAP32[$114+0>>2]|0;
           $115 = invoke_iiiiiiii(3,$__b|0,$$byval_copy2|0,$95|0,$111|0,$61|0,$__err|0,1)|0;
           $116 = $$byval_copy2;
           
           $117 = __THREW__; __THREW__ = 0;
           $118 = $117&1;
           
           if ($118) {
            $expanded25 = 69;
            $140 = ___cxa_find_matching_catch(-1,-1)|0;
            $141 = tempRet0;
            $gep_int89 = $__names;
            $gep90 = (($gep_int89) + 12)|0;
            $142 = $gep90;
            __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($142);
            $gep_int91 = $__names;
            $143 = $gep_int91;
            __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($143);
            
            $$0 = $140;$$01 = $141;
            
            
            ___resumeException($$0|0);
            // unreachable
           } else {
            $119 = ($115|0)==($95|0);
            $120 = $119&1;
            HEAP8[$__v] = $120;
            $gep_int80 = $__b;
            $121 = $gep_int80;
            $122 = HEAP32[$121>>2]|0;
            $gep_int81 = $agg$result;
            $123 = $gep_int81;
            HEAP32[$123>>2] = $122;
            $gep_int82 = $__names;
            $gep83 = (($gep_int82) + 12)|0;
            $124 = $gep83;
            __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($124);
            $gep_int84 = $__names;
            $125 = $gep_int84;
            __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($125);
            
            STACKTOP = sp;return;
           }
          }
         } while(0);
         
         $expanded24 = 69;
         $134 = ___cxa_find_matching_catch(-1,-1)|0;
         $135 = tempRet0;
         $136 = ($95|0)==($$02|0);
         
         if ($136) {
          $$0 = $134;$$01 = $135;
          
          
          ___resumeException($$0|0);
          // unreachable
         } else {
          $137 = $$02;
         }
         while(1) {
          
          $gep_int87 = $137;
          $gep88 = (($gep_int87) + -12)|0;
          $138 = $gep88;
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($138);
          $139 = ($138|0)==($95|0);
          
          if ($139) {
           $$0 = $134;$$01 = $135;
           break;
          } else {
           $137$phi = $138;$137 = $137$phi;
          }
         }
         
         
         ___resumeException($$0|0);
         // unreachable
        }
       } while(0);
       $88 = ___cxa_allocate_exception(4)|0;
       $89 = $88;
       __ZNSt8bad_castC2Ev($89);
       __THREW__ = 0;
       $expanded20 = 16440;
       $expanded21 = 119;
       invoke_viii(5,$88|0,$expanded20|0,$expanded21|0);
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       
       if ($91) {
        break;
       }
       // unreachable
      }
     } while(0);
     $expanded23 = 69;
     $130 = ___cxa_find_matching_catch(-1,-1)|0;
     $131 = tempRet0;
     $132 = HEAP32[$64>>2]|0;
     $gep_int86 = $132;
     $133 = $gep_int86;
     u$77 = __ZNSt3__114__shared_count16__release_sharedEv($133)|0;
     
     $$0 = $130;$$01 = $131;
     
     
     ___resumeException($$0|0);
     // unreachable
    }
   } while(0);
   $57 = ___cxa_allocate_exception(4)|0;
   $58 = $57;
   __ZNSt8bad_castC2Ev($58);
   __THREW__ = 0;
   $expanded10 = 16440;
   $expanded11 = 119;
   invoke_viii(5,$57|0,$expanded10|0,$expanded11|0);
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   
   if ($60) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded22 = 69;
 $126 = ___cxa_find_matching_catch(-1,-1)|0;
 $127 = tempRet0;
 $128 = HEAP32[$33>>2]|0;
 $gep_int85 = $128;
 $129 = $gep_int85;
 u$75 = __ZNSt3__114__shared_count16__release_sharedEv($129)|0;
 
 $$0 = $126;$$01 = $127;
 
 
 ___resumeException($$0|0);
 // unreachable
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03082 = 0, $$03082$phi = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off039 = 0, $__consume$0$off039$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$068 = 0, $__ky1$040 = 0, $__ky1$040$us = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0;
 var $__n_does_match$066 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$336 = 0, $__n_does_match$336$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$065 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$335 = 0, $__n_might_match$335$us = 0, $__n_might_match$4 = 0;
 var $__n_might_match$4$us = 0, $__st$067 = 0, $__st$137 = 0, $__st$137$us = 0, $__st$250 = 0, $__st$32983 = 0, $__st$32983$phi = 0, $__statbuf = 0, $__status$0 = 0, $expanded = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $gep = 0, $gep101 = 0, $gep103 = 0, $gep24 = 0, $gep26 = 0;
 var $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep65 = 0, $gep67 = 0;
 var $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep97 = 0, $gep99 = 0, $gep_array = 0, $gep_array64 = 0, $gep_int = 0, $gep_int100 = 0;
 var $gep_int102 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0;
 var $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0;
 var $gep_int96 = 0, $gep_int98 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0, u$136 = 0, u$14 = 0, u$92 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 $__statbuf = sp;
 $1 = $__ke;
 $2 = $__kb;
 $3 = (($1) - ($2))|0;
 $4 = (($3|0) / 12)&-1;
 $gep_int = $__statbuf;
 $5 = $gep_int;
 
 $6 = ($4>>>0)>(100);
 
 do {
  if ($6) {
   $7 = _malloc($4)|0;
   $8 = ($7|0)==(0);
   
   if (!($8)) {
    $23 = $7;$__status$0 = $7;
    break;
   }
   __THREW__ = 0;
   invoke_v(13);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if (!($10)) {
    $23 = 0;$__status$0 = 0;
    break;
   }
   $expanded = 69;
   $11 = ___cxa_find_matching_catch(-1,-1)|0;
   $12 = tempRet0;
   
   $$index = $11;$$index10 = $12;
   
   
   ___resumeException($$index|0);
   // unreachable
  } else {
   $23 = 0;$__status$0 = $5;
  }
 } while(0);
 
 
 $24 = ($__kb|0)==($__ke|0);
 
 if ($24) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $4;
 } else {
  $__ky$068 = $__kb;$__n_does_match$066 = 0;$__n_might_match$065 = $4;$__st$067 = $__status$0;
  while(1) {
   
   
   
   
   $28 = $__ky$068;
   $29 = HEAP8[$__ky$068]|0;
   $30 = $29 & 1;
   $31 = ($30<<24>>24)==(0);
   
   if ($31) {
    $34 = $29&255;
    $35 = $34 >>> 1;
    
    $36 = $35;
   } else {
    $gep_int22 = $__ky$068;
    $gep = (($gep_int22) + 4)|0;
    $32 = $gep;
    $33 = HEAP32[$32>>2]|0;
    
    $36 = $33;
   }
   
   $37 = ($36|0)==(0);
   
   if ($37) {
    HEAP8[$__st$067] = 2;
    $38 = (($__n_might_match$065) + -1)|0;
    $39 = (($__n_does_match$066) + 1)|0;
    
    $__n_does_match$1 = $39;$__n_might_match$1 = $38;
   } else {
    HEAP8[$__st$067] = 1;
    
    $__n_does_match$1 = $__n_does_match$066;$__n_might_match$1 = $__n_might_match$065;
   }
   
   
   $gep_int23 = $__ky$068;
   $gep24 = (($gep_int23) + 12)|0;
   $40 = $gep24;
   $gep_int25 = $__st$067;
   $gep26 = (($gep_int25) + 1)|0;
   $41 = $gep26;
   $42 = ($40|0)==($__ke|0);
   
   if ($42) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$068 = $40;$__n_does_match$066 = $__n_does_match$1;$__n_might_match$065 = $__n_might_match$1;$__st$067 = $41;
   }
  }
 }
 
 
 $gep_int20 = $__b;
 $25 = $gep_int20;
 $gep_int21 = $__e;
 $26 = $gep_int21;
 $27 = $__ct;
 
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  
  
  
  $43 = HEAP32[$25>>2]|0;
  $44 = ($43|0)==(0);
  
  do {
   if ($44) {
    $59 = 1;
   } else {
    $gep_int27 = $43;
    $gep28 = (($gep_int27) + 12)|0;
    $45 = $gep28;
    $46 = HEAP32[$45>>2]|0;
    $gep_int29 = $43;
    $gep30 = (($gep_int29) + 16)|0;
    $47 = $gep30;
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    
    if ($49) {
     $50 = $43;
     $51 = HEAP32[$43>>2]|0;
     $gep_int31 = $51;
     $gep32 = (($gep_int31) + 36)|0;
     $52 = $gep32;
     $53 = HEAP32[$52>>2]|0;
     __THREW__ = 0;
     $54 = invoke_ii($53|0,$43|0)|0;
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     
     if ($56) {
      label = 6;
      break L19;
     } else {
      $$0$i$i$i$i = $54;
     }
    } else {
     $57 = HEAP32[$46>>2]|0;
     
     $$0$i$i$i$i = $57;
    }
    
    $58 = ($$0$i$i$i$i|0)==(-1);
    
    if ($58) {
     HEAP32[$25>>2] = 0;
     
     $59 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$25>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0);
     
     $59 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  
  $60 = HEAP32[$26>>2]|0;
  $61 = ($60|0)==(0);
  
  do {
   if ($61) {
    $$pre$i3$i$i19 = 0;$76 = 1;
   } else {
    $gep_int33 = $60;
    $gep34 = (($gep_int33) + 12)|0;
    $62 = $gep34;
    $63 = HEAP32[$62>>2]|0;
    $gep_int35 = $60;
    $gep36 = (($gep_int35) + 16)|0;
    $64 = $gep36;
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    
    if ($66) {
     $67 = $60;
     $68 = HEAP32[$60>>2]|0;
     $gep_int37 = $68;
     $gep38 = (($gep_int37) + 36)|0;
     $69 = $gep38;
     $70 = HEAP32[$69>>2]|0;
     __THREW__ = 0;
     $71 = invoke_ii($70|0,$60|0)|0;
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     
     if ($73) {
      label = 6;
      break L19;
     } else {
      $$0$i$i1$i$i = $71;
     }
    } else {
     $74 = HEAP32[$63>>2]|0;
     
     $$0$i$i1$i$i = $74;
    }
    
    $75 = ($$0$i$i1$i$i|0)==(-1);
    
    if (!($75)) {
     $$pre$i3$i$i19 = $60;$76 = 0;
     break;
    }
    HEAP32[$26>>2] = 0;
    
    $$pre$i3$i$i19 = 0;$76 = 1;
   }
  } while(0);
  
  
  $tmp$i$i = $59 ^ $76;
  $77 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $77;
  $78 = HEAP32[$25>>2]|0;
  
  if (!($$)) {
   label = 81;
   break;
  }
  $gep_int39 = $78;
  $gep40 = (($gep_int39) + 12)|0;
  $79 = $gep40;
  $80 = HEAP32[$79>>2]|0;
  $gep_int41 = $78;
  $gep42 = (($gep_int41) + 16)|0;
  $81 = $gep42;
  $82 = HEAP32[$81>>2]|0;
  $83 = ($80|0)==($82|0);
  
  if ($83) {
   $84 = $78;
   $85 = HEAP32[$78>>2]|0;
   $gep_int43 = $85;
   $gep44 = (($gep_int43) + 36)|0;
   $86 = $gep44;
   $87 = HEAP32[$86>>2]|0;
   __THREW__ = 0;
   $88 = invoke_ii($87|0,$78|0)|0;
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   
   if ($90) {
    label = 6;
    break;
   } else {
    $$0$i$i = $88;
   }
  } else {
   $91 = HEAP32[$80>>2]|0;
   
   $$0$i$i = $91;
  }
  
  
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $92 = HEAP32[$__ct>>2]|0;
   $gep_int45 = $92;
   $gep46 = (($gep_int45) + 28)|0;
   $93 = $gep46;
   $94 = HEAP32[$93>>2]|0;
   __THREW__ = 0;
   $95 = invoke_iii($94|0,$__ct|0,$$0$i$i|0)|0;
   $96 = __THREW__; __THREW__ = 0;
   $97 = $96&1;
   
   if ($97) {
    label = 6;
    break;
   } else {
    $__c$0 = $95;
   }
  }
  
  $$pre = (($__indx$0) + 1)|0;
  
  if ($24) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  
  L48: do {
   if ($__case_sensitive) {
    $__consume$0$off039$us = 0;$__ky1$040$us = $__kb;$__n_does_match$336$us = $__n_does_match$2;$__n_might_match$335$us = $__n_might_match$2;$__st$137$us = $__status$0;
    while(1) {
     
     
     
     
     
     $98 = HEAP8[$__st$137$us]|0;
     $99 = ($98<<24>>24)==(1);
     
     do {
      if ($99) {
       $100 = $__ky1$040$us;
       $101 = HEAP8[$__ky1$040$us]|0;
       $102 = $101 & 1;
       $103 = ($102<<24>>24)==(0);
       
       if ($103) {
        $gep_int49 = $__ky1$040$us;
        $gep50 = (($gep_int49) + 4)|0;
        $106 = $gep50;
        
        $107 = $106;
       } else {
        $gep_int47 = $__ky1$040$us;
        $gep48 = (($gep_int47) + 8)|0;
        $104 = $gep48;
        $105 = HEAP32[$104>>2]|0;
        
        $107 = $105;
       }
       
       $gep_int51 = $107;
       $gep_array = $__indx$0<<2;
       $gep52 = (($gep_int51) + ($gep_array))|0;
       $108 = $gep52;
       $109 = HEAP32[$108>>2]|0;
       $110 = ($__c$0|0)==($109|0);
       
       if (!($110)) {
        HEAP8[$__st$137$us] = 0;
        $111 = (($__n_might_match$335$us) + -1)|0;
        
        $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $111;
        break;
       }
       
       if ($103) {
        $114 = $101&255;
        $115 = $114 >>> 1;
        
        $116 = $115;
       } else {
        $gep_int53 = $__ky1$040$us;
        $gep54 = (($gep_int53) + 4)|0;
        $112 = $gep54;
        $113 = HEAP32[$112>>2]|0;
        
        $116 = $113;
       }
       
       $117 = ($116|0)==($$pre|0);
       
       if (!($117)) {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
        break;
       }
       HEAP8[$__st$137$us] = 2;
       $118 = (($__n_might_match$335$us) + -1)|0;
       $119 = (($__n_does_match$336$us) + 1)|0;
       
       $__consume$1$off0$us = 1;$__n_does_match$4$us = $119;$__n_might_match$4$us = $118;
      } else {
       $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
      }
     } while(0);
     
     
     
     $gep_int55 = $__ky1$040$us;
     $gep56 = (($gep_int55) + 12)|0;
     $120 = $gep56;
     $121 = ($120|0)==($__ke|0);
     
     if ($121) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L48;
     }
     $gep_int57 = $__st$137$us;
     $gep58 = (($gep_int57) + 1)|0;
     $122 = $gep58;
     
     $__consume$0$off039$us = $__consume$1$off0$us;$__ky1$040$us = $120;$__n_does_match$336$us = $__n_does_match$4$us;$__n_might_match$335$us = $__n_might_match$4$us;$__st$137$us = $122;
    }
   } else {
    $__consume$0$off039 = 0;$__ky1$040 = $__kb;$__n_does_match$336 = $__n_does_match$2;$__n_might_match$335 = $__n_might_match$2;$__st$137 = $__status$0;
    while(1) {
     
     
     
     
     
     $123 = HEAP8[$__st$137]|0;
     $124 = ($123<<24>>24)==(1);
     
     do {
      if ($124) {
       $125 = $__ky1$040;
       $126 = HEAP8[$__ky1$040]|0;
       $127 = $126 & 1;
       $128 = ($127<<24>>24)==(0);
       
       if ($128) {
        $gep_int61 = $__ky1$040;
        $gep62 = (($gep_int61) + 4)|0;
        $131 = $gep62;
        
        $132 = $131;
       } else {
        $gep_int59 = $__ky1$040;
        $gep60 = (($gep_int59) + 8)|0;
        $129 = $gep60;
        $130 = HEAP32[$129>>2]|0;
        
        $132 = $130;
       }
       
       $gep_int63 = $132;
       $gep_array64 = $__indx$0<<2;
       $gep65 = (($gep_int63) + ($gep_array64))|0;
       $133 = $gep65;
       $134 = HEAP32[$133>>2]|0;
       $135 = HEAP32[$__ct>>2]|0;
       $gep_int66 = $135;
       $gep67 = (($gep_int66) + 28)|0;
       $136 = $gep67;
       $137 = HEAP32[$136>>2]|0;
       __THREW__ = 0;
       $138 = invoke_iii($137|0,$__ct|0,$134|0)|0;
       $139 = __THREW__; __THREW__ = 0;
       $140 = $139&1;
       
       if ($140) {
        label = 5;
        break L19;
       }
       $141 = ($__c$0|0)==($138|0);
       
       if (!($141)) {
        HEAP8[$__st$137] = 0;
        $153 = (($__n_might_match$335) + -1)|0;
        
        $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $153;
        break;
       }
       $142 = HEAP8[$__ky1$040]|0;
       $143 = $142 & 1;
       $144 = ($143<<24>>24)==(0);
       
       if ($144) {
        $147 = $142&255;
        $148 = $147 >>> 1;
        
        $149 = $148;
       } else {
        $gep_int68 = $__ky1$040;
        $gep69 = (($gep_int68) + 4)|0;
        $145 = $gep69;
        $146 = HEAP32[$145>>2]|0;
        
        $149 = $146;
       }
       
       $150 = ($149|0)==($$pre|0);
       
       if (!($150)) {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
        break;
       }
       HEAP8[$__st$137] = 2;
       $151 = (($__n_might_match$335) + -1)|0;
       $152 = (($__n_does_match$336) + 1)|0;
       
       $__consume$1$off0 = 1;$__n_does_match$4 = $152;$__n_might_match$4 = $151;
      } else {
       $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
      }
     } while(0);
     
     
     
     $gep_int70 = $__ky1$040;
     $gep71 = (($gep_int70) + 12)|0;
     $154 = $gep71;
     $155 = ($154|0)==($__ke|0);
     
     if ($155) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L48;
     }
     $gep_int72 = $__st$137;
     $gep73 = (($gep_int72) + 1)|0;
     $156 = $gep73;
     
     $__consume$0$off039 = $__consume$1$off0;$__ky1$040 = $154;$__n_does_match$336 = $__n_does_match$4;$__n_might_match$335 = $__n_might_match$4;$__st$137 = $156;
    }
   }
  } while(0);
  
  
  
  
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $157 = HEAP32[$25>>2]|0;
  $gep_int74 = $157;
  $gep75 = (($gep_int74) + 12)|0;
  $158 = $gep75;
  $159 = HEAP32[$158>>2]|0;
  $gep_int76 = $157;
  $gep77 = (($gep_int76) + 16)|0;
  $160 = $gep77;
  $161 = HEAP32[$160>>2]|0;
  $162 = ($159|0)==($161|0);
  
  if ($162) {
   $163 = $157;
   $164 = HEAP32[$157>>2]|0;
   $gep_int78 = $164;
   $gep79 = (($gep_int78) + 40)|0;
   $165 = $gep79;
   $166 = HEAP32[$165>>2]|0;
   __THREW__ = 0;
   u$92 = invoke_ii($166|0,$157|0)|0;
   $167 = __THREW__; __THREW__ = 0;
   $168 = $167&1;
   
   if ($168) {
    label = 6;
    break;
   }
  } else {
   $gep_int80 = $159;
   $gep81 = (($gep_int80) + 4)|0;
   $169 = $gep81;
   HEAP32[$158>>2] = $169;
   
  }
  $170 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($170>>>0)<(2);
  
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$051 = $__kb;$__n_does_match$549 = $__n_does_match$3$lcssa;$__st$250 = $__status$0;
  }
  while(1) {
   
   
   
   $171 = HEAP8[$__st$250]|0;
   $172 = ($171<<24>>24)==(2);
   
   do {
    if ($172) {
     $173 = $__ky2$051;
     $174 = HEAP8[$__ky2$051]|0;
     $175 = $174 & 1;
     $176 = ($175<<24>>24)==(0);
     
     if ($176) {
      $179 = $174&255;
      $180 = $179 >>> 1;
      
      $181 = $180;
     } else {
      $gep_int82 = $__ky2$051;
      $gep83 = (($gep_int82) + 4)|0;
      $177 = $gep83;
      $178 = HEAP32[$177>>2]|0;
      
      $181 = $178;
     }
     
     $182 = ($181|0)==($$pre|0);
     
     if ($182) {
      $__n_does_match$6 = $__n_does_match$549;
      break;
     }
     HEAP8[$__st$250] = 0;
     $183 = (($__n_does_match$549) + -1)|0;
     
     $__n_does_match$6 = $183;
    } else {
     $__n_does_match$6 = $__n_does_match$549;
    }
   } while(0);
   
   $gep_int84 = $__ky2$051;
   $gep85 = (($gep_int84) + 12)|0;
   $184 = $gep85;
   $gep_int86 = $__st$250;
   $gep87 = (($gep_int86) + 1)|0;
   $185 = $gep87;
   $186 = ($184|0)==($__ke|0);
   
   if ($186) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L19;
   } else {
    $__ky2$051 = $184;$__n_does_match$549 = $__n_does_match$6;$__st$250 = $185;
   }
  }
 }
 if ((label|0) == 5) {
  $expanded15 = 69;
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 6) {
  $expanded16 = 69;
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 else if ((label|0) == 81) {
  $187 = ($78|0)==(0);
  
  do {
   if ($187) {
    $202 = 1;
    label = 88;
   } else {
    $gep_int88 = $78;
    $gep89 = (($gep_int88) + 12)|0;
    $188 = $gep89;
    $189 = HEAP32[$188>>2]|0;
    $gep_int90 = $78;
    $gep91 = (($gep_int90) + 16)|0;
    $190 = $gep91;
    $191 = HEAP32[$190>>2]|0;
    $192 = ($189|0)==($191|0);
    
    if ($192) {
     $193 = $78;
     $194 = HEAP32[$78>>2]|0;
     $gep_int92 = $194;
     $gep93 = (($gep_int92) + 36)|0;
     $195 = $gep93;
     $196 = HEAP32[$195>>2]|0;
     __THREW__ = 0;
     $197 = invoke_ii($196|0,$78|0)|0;
     $198 = __THREW__; __THREW__ = 0;
     $199 = $198&1;
     
     if ($199) {
      break;
     } else {
      $$0$i$i$i$i11 = $197;
     }
    } else {
     $200 = HEAP32[$189>>2]|0;
     
     $$0$i$i$i$i11 = $200;
    }
    
    $201 = ($$0$i$i$i$i11|0)==(-1);
    
    if ($201) {
     HEAP32[$25>>2] = 0;
     
     $202 = 1;
     label = 88;
     break;
    } else {
     $$pre$i$i$i13 = HEAP32[$25>>2]|0;
     $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0);
     
     $202 = $phitmp$i$i$i14;
     label = 88;
     break;
    }
   }
  } while(0);
  L115: do {
   if ((label|0) == 88) {
    
    $203 = ($$pre$i3$i$i19|0)==(0);
    
    do {
     if ($203) {
      label = 94;
     } else {
      $gep_int94 = $$pre$i3$i$i19;
      $gep95 = (($gep_int94) + 12)|0;
      $204 = $gep95;
      $205 = HEAP32[$204>>2]|0;
      $gep_int96 = $$pre$i3$i$i19;
      $gep97 = (($gep_int96) + 16)|0;
      $206 = $gep97;
      $207 = HEAP32[$206>>2]|0;
      $208 = ($205|0)==($207|0);
      
      if ($208) {
       $209 = $$pre$i3$i$i19;
       $210 = HEAP32[$$pre$i3$i$i19>>2]|0;
       $gep_int98 = $210;
       $gep99 = (($gep_int98) + 36)|0;
       $211 = $gep99;
       $212 = HEAP32[$211>>2]|0;
       __THREW__ = 0;
       $213 = invoke_ii($212|0,$$pre$i3$i$i19|0)|0;
       $214 = __THREW__; __THREW__ = 0;
       $215 = $214&1;
       
       if ($215) {
        break L115;
       } else {
        $$0$i$i1$i$i17 = $213;
       }
      } else {
       $216 = HEAP32[$205>>2]|0;
       
       $$0$i$i1$i$i17 = $216;
      }
      
      $217 = ($$0$i$i1$i$i17|0)==(-1);
      
      if ($217) {
       HEAP32[$26>>2] = 0;
       
       label = 94;
       break;
      } else {
       
       if ($202) {
        break;
       } else {
        label = 96;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 94) {
     
     if ($202) {
      label = 96;
     }
    }
    if ((label|0) == 96) {
     $218 = HEAP32[$__err>>2]|0;
     $219 = $218 | 2;
     HEAP32[$__err>>2] = $219;
     
    }
    
    L131: do {
     if ($24) {
      label = 101;
     } else {
      $220 = HEAP8[$__status$0]|0;
      $221 = ($220<<24>>24)==(2);
      
      if ($221) {
       $$028 = $__kb;
       break;
      } else {
       $$03082 = $__kb;$__st$32983 = $__status$0;
      }
      while(1) {
       
       
       $gep_int100 = $$03082;
       $gep101 = (($gep_int100) + 12)|0;
       $224 = $gep101;
       $225 = ($224|0)==($__ke|0);
       $gep_int102 = $__st$32983;
       $gep103 = (($gep_int102) + 1)|0;
       $226 = $gep103;
       
       if ($225) {
        label = 101;
        break L131;
       }
       $222 = HEAP8[$226]|0;
       $223 = ($222<<24>>24)==(2);
       
       if ($223) {
        $$028 = $224;
        break;
       } else {
        $__st$32983$phi = $226;$$03082$phi = $224;$__st$32983 = $__st$32983$phi;$$03082 = $$03082$phi;
       }
      }
     }
    } while(0);
    if ((label|0) == 101) {
     $227 = HEAP32[$__err>>2]|0;
     $228 = $227 | 4;
     HEAP32[$__err>>2] = $228;
     
     $$028 = $__ke;
    }
    
    $229 = ($23|0)==(0);
    
    if ($229) {
     
     STACKTOP = sp;return $$028|0;
    }
    __THREW__ = 0;
    invoke_vi(179,$23|0);
    $230 = __THREW__; __THREW__ = 0;
    $231 = $230&1;
    
    if ($231) {
     $expanded19 = 69;
     $232 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$136 = tempRet0;
     ___clang_call_terminate($232);
     // unreachable
    } else {
     
     STACKTOP = sp;return $$028|0;
    }
   }
  } while(0);
  $expanded17 = 69;
  $17 = ___cxa_find_matching_catch(-1,-1)|0;
  $18 = tempRet0;
  
  $lpad$phi$index = $17;$lpad$phi$index3 = $18;
 }
 
 
 $19 = ($23|0)==(0);
 
 if ($19) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  
  
  ___resumeException($$index|0);
  // unreachable
 }
 __THREW__ = 0;
 invoke_vi(179,$23|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 
 if ($21) {
  $expanded18 = 69;
  $22 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$14 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  
  
  ___resumeException($$index|0);
  // unreachable
 }
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0;
 var $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0;
 var $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0;
 var $gep_int62 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0, u$68 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else {
  
  $$0$i = 10;
 }
 
 $4 = $__atoms;
 
 $gep_int7 = $__atoms;
 $5 = $gep_int7;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$__buf]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   
   if ($10) {
    $13 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $14 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre35 = $gep15;
    
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $11 = $gep9;
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre33 = $gep11;
    
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   
   
   
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   
   $gep_int16 = $__g;
   $17 = $gep_int16;
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $18 = $gep_int17;
   $gep_int18 = $__e;
   $19 = $gep_int18;
   $gep_int19 = $__buf;
   $20 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $21 = $gep21;
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    
    
    $23 = ($$pre$i$i$i5|0)==(0);
    
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $gep_int22 = $$pre$i$i$i5;
      $gep23 = (($gep_int22) + 12)|0;
      $24 = $gep23;
      $25 = HEAP32[$24>>2]|0;
      $gep_int24 = $$pre$i$i$i5;
      $gep25 = (($gep_int24) + 16)|0;
      $26 = $gep25;
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$$pre$i$i$i5>>2]|0;
       $gep_int26 = $30;
       $gep27 = (($gep_int26) + 36)|0;
       $31 = $gep27;
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = invoke_ii($32|0,$$pre$i$i$i5|0)|0;
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       
       $$0$i$i$i$i3 = $36;
      }
      
      $37 = ($$0$i$i$i$i3|0)==(-1);
      
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      
      $38 = 0;$39 = 1;
     }
    } while(0);
    
    
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0);
    
    do {
     if ($41) {
      label = 22;
     } else {
      $gep_int28 = $40;
      $gep29 = (($gep_int28) + 12)|0;
      $42 = $gep29;
      $43 = HEAP32[$42>>2]|0;
      $gep_int30 = $40;
      $gep31 = (($gep_int30) + 16)|0;
      $44 = $gep31;
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$40>>2]|0;
       $gep_int32 = $48;
       $gep33 = (($gep_int32) + 36)|0;
       $49 = $gep33;
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = invoke_ii($50|0,$40|0)|0;
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       
       $$0$i$i1$i$i9 = $54;
      }
      
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      
      if ($55) {
       HEAP32[$19>>2] = 0;
       
       label = 22;
       break;
      } else {
       
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$__buf]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     
     $67 = $64;
    }
    
    $68 = ($60|0)==($67|0);
    
    if ($68) {
     
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      
      $74 = $69;$75 = $69;
     }
     
     
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$76|0,0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$__buf]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      
      $84 = $phitmp$i23;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$84|0,0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$__buf]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      
      $91 = $90;
     }
     
     $gep_int34 = $91;
     $gep35 = (($gep_int34) + ($74))|0;
     $92 = $gep35;
     HEAP32[$__a_end>>2] = $92;
     
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $38;
    $gep37 = (($gep_int36) + 12)|0;
    $97 = $gep37;
    $98 = HEAP32[$97>>2]|0;
    $gep_int38 = $38;
    $gep39 = (($gep_int38) + 16)|0;
    $99 = $gep39;
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$38>>2]|0;
     $gep_int40 = $103;
     $gep41 = (($gep_int40) + 36)|0;
     $104 = $gep41;
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = invoke_ii($105|0,$38|0)|0;
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     
     $$0$i$i = $109;
    }
    
    $110 = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0;
    $111 = ($110|0)==(0);
    
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$38>>2]|0;
     $gep_int42 = $116;
     $gep43 = (($gep_int42) + 40)|0;
     $117 = $gep43;
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     u$68 = invoke_ii($118|0,$38|0)|0;
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $112;
     $gep45 = (($gep_int44) + 4)|0;
     $121 = $gep45;
     HEAP32[$97>>2] = $121;
     
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $expanded = 69;
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $122 = $__grouping;
   $123 = HEAP8[$__grouping]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    
    $130 = $129;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $126 = $gep47;
    $127 = HEAP32[$126>>2]|0;
    
    $130 = $127;
   }
   
   $131 = ($130|0)==(0);
   
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $132;
     $gep49 = (($gep_int48) + 4)|0;
     $138 = $gep49;
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
     
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = invoke_iiiii(9,$__a$2|0,$139|0,$__err|0,$$0$i|0)|0;
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   
   if ($142) {
    break;
   }
   HEAP32[$__v>>2] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$143,$__err);
   $144 = ($38|0)==(0);
   
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $gep_int50 = $38;
     $gep51 = (($gep_int50) + 12)|0;
     $145 = $gep51;
     $146 = HEAP32[$145>>2]|0;
     $gep_int52 = $38;
     $gep53 = (($gep_int52) + 16)|0;
     $147 = $gep53;
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     
     if ($149) {
      $150 = $38;
      $151 = HEAP32[$38>>2]|0;
      $gep_int54 = $151;
      $gep55 = (($gep_int54) + 36)|0;
      $152 = $gep55;
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = invoke_ii($153|0,$38|0)|0;
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      
      if ($156) {
       break L6;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      
      $$0$i$i$i$i = $157;
     }
     
     $158 = ($$0$i$i$i$i|0)==(-1);
     
     if (!($158)) {
      $159 = $38;$160 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     
     $159 = 0;$160 = 1;
    }
   } while(0);
   
   
   $161 = ($$pre$i3$i$i|0)==(0);
   
   do {
    if ($161) {
     label = 67;
    } else {
     $gep_int56 = $$pre$i3$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $162 = $gep57;
     $163 = HEAP32[$162>>2]|0;
     $gep_int58 = $$pre$i3$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $164 = $gep59;
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$$pre$i3$i$i>>2]|0;
      $gep_int60 = $168;
      $gep61 = (($gep_int60) + 36)|0;
      $169 = $gep61;
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = invoke_ii($170|0,$$pre$i3$i$i|0)|0;
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      
      if ($173) {
       break L6;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      
      $$0$i$i1$i$i = $174;
     }
     
     $175 = ($$0$i$i1$i$i|0)==(-1);
     
     if ($175) {
      HEAP32[$19>>2] = 0;
      
      label = 67;
      break;
     }
     
     if (!($160)) {
      break;
     }
     $gep_int62 = $agg$result;
     $178 = $gep_int62;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     
     if ($160) {
      break;
     }
     $gep_int62 = $agg$result;
     $178 = $gep_int62;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   
   $gep_int62 = $agg$result;
   $178 = $gep_int62;
   HEAP32[$178>>2] = $159;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0;
 var $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0;
 var $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0;
 var $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0, u$68 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else {
  
  $$0$i = 10;
 }
 
 $4 = $__atoms;
 
 $gep_int7 = $__atoms;
 $5 = $gep_int7;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$__buf]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   
   if ($10) {
    $13 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $14 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre35 = $gep15;
    
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $11 = $gep9;
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre33 = $gep11;
    
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   
   
   
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   
   $gep_int16 = $__g;
   $17 = $gep_int16;
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $18 = $gep_int17;
   $gep_int18 = $__e;
   $19 = $gep_int18;
   $gep_int19 = $__buf;
   $20 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $21 = $gep21;
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    
    
    $23 = ($$pre$i$i$i5|0)==(0);
    
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $gep_int22 = $$pre$i$i$i5;
      $gep23 = (($gep_int22) + 12)|0;
      $24 = $gep23;
      $25 = HEAP32[$24>>2]|0;
      $gep_int24 = $$pre$i$i$i5;
      $gep25 = (($gep_int24) + 16)|0;
      $26 = $gep25;
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$$pre$i$i$i5>>2]|0;
       $gep_int26 = $30;
       $gep27 = (($gep_int26) + 36)|0;
       $31 = $gep27;
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = invoke_ii($32|0,$$pre$i$i$i5|0)|0;
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       
       $$0$i$i$i$i3 = $36;
      }
      
      $37 = ($$0$i$i$i$i3|0)==(-1);
      
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      
      $38 = 0;$39 = 1;
     }
    } while(0);
    
    
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0);
    
    do {
     if ($41) {
      label = 22;
     } else {
      $gep_int28 = $40;
      $gep29 = (($gep_int28) + 12)|0;
      $42 = $gep29;
      $43 = HEAP32[$42>>2]|0;
      $gep_int30 = $40;
      $gep31 = (($gep_int30) + 16)|0;
      $44 = $gep31;
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$40>>2]|0;
       $gep_int32 = $48;
       $gep33 = (($gep_int32) + 36)|0;
       $49 = $gep33;
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = invoke_ii($50|0,$40|0)|0;
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       
       $$0$i$i1$i$i9 = $54;
      }
      
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      
      if ($55) {
       HEAP32[$19>>2] = 0;
       
       label = 22;
       break;
      } else {
       
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$__buf]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     
     $67 = $64;
    }
    
    $68 = ($60|0)==($67|0);
    
    if ($68) {
     
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      
      $74 = $69;$75 = $69;
     }
     
     
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$76|0,0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$__buf]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      
      $84 = $phitmp$i23;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$84|0,0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$__buf]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      
      $91 = $90;
     }
     
     $gep_int34 = $91;
     $gep35 = (($gep_int34) + ($74))|0;
     $92 = $gep35;
     HEAP32[$__a_end>>2] = $92;
     
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $38;
    $gep37 = (($gep_int36) + 12)|0;
    $97 = $gep37;
    $98 = HEAP32[$97>>2]|0;
    $gep_int38 = $38;
    $gep39 = (($gep_int38) + 16)|0;
    $99 = $gep39;
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$38>>2]|0;
     $gep_int40 = $103;
     $gep41 = (($gep_int40) + 36)|0;
     $104 = $gep41;
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = invoke_ii($105|0,$38|0)|0;
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     
     $$0$i$i = $109;
    }
    
    $110 = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0;
    $111 = ($110|0)==(0);
    
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$38>>2]|0;
     $gep_int42 = $116;
     $gep43 = (($gep_int42) + 40)|0;
     $117 = $gep43;
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     u$68 = invoke_ii($118|0,$38|0)|0;
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $112;
     $gep45 = (($gep_int44) + 4)|0;
     $121 = $gep45;
     HEAP32[$97>>2] = $121;
     
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $expanded = 69;
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $122 = $__grouping;
   $123 = HEAP8[$__grouping]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    
    $130 = $129;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $126 = $gep47;
    $127 = HEAP32[$126>>2]|0;
    
    $130 = $127;
   }
   
   $131 = ($130|0)==(0);
   
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $132;
     $gep49 = (($gep_int48) + 4)|0;
     $138 = $gep49;
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
     
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = invoke_iiiii(10,$__a$2|0,$139|0,$__err|0,$$0$i|0)|0;
   $141 = tempRet0;
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   
   if ($143) {
    break;
   }
   $144 = $__v;
   $145 = $144;
   HEAP32[$145>>2] = $140;
   $146 = (($144) + 4)|0;
   $147 = $146;
   HEAP32[$147>>2] = $141;
   $148 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$148,$__err);
   $149 = ($38|0)==(0);
   
   do {
    if ($149) {
     $164 = 0;$165 = 1;
    } else {
     $gep_int50 = $38;
     $gep51 = (($gep_int50) + 12)|0;
     $150 = $gep51;
     $151 = HEAP32[$150>>2]|0;
     $gep_int52 = $38;
     $gep53 = (($gep_int52) + 16)|0;
     $152 = $gep53;
     $153 = HEAP32[$152>>2]|0;
     $154 = ($151|0)==($153|0);
     
     if ($154) {
      $155 = $38;
      $156 = HEAP32[$38>>2]|0;
      $gep_int54 = $156;
      $gep55 = (($gep_int54) + 36)|0;
      $157 = $gep55;
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = invoke_ii($158|0,$38|0)|0;
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      
      if ($161) {
       break L6;
      } else {
       $$0$i$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$151>>2]|0;
      
      $$0$i$i$i$i = $162;
     }
     
     $163 = ($$0$i$i$i$i|0)==(-1);
     
     if (!($163)) {
      $164 = $38;$165 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     
     $164 = 0;$165 = 1;
    }
   } while(0);
   
   
   $166 = ($$pre$i3$i$i|0)==(0);
   
   do {
    if ($166) {
     label = 67;
    } else {
     $gep_int56 = $$pre$i3$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $167 = $gep57;
     $168 = HEAP32[$167>>2]|0;
     $gep_int58 = $$pre$i3$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $169 = $gep59;
     $170 = HEAP32[$169>>2]|0;
     $171 = ($168|0)==($170|0);
     
     if ($171) {
      $172 = $$pre$i3$i$i;
      $173 = HEAP32[$$pre$i3$i$i>>2]|0;
      $gep_int60 = $173;
      $gep61 = (($gep_int60) + 36)|0;
      $174 = $gep61;
      $175 = HEAP32[$174>>2]|0;
      __THREW__ = 0;
      $176 = invoke_ii($175|0,$$pre$i3$i$i|0)|0;
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      
      if ($178) {
       break L6;
      } else {
       $$0$i$i1$i$i = $176;
      }
     } else {
      $179 = HEAP32[$168>>2]|0;
      
      $$0$i$i1$i$i = $179;
     }
     
     $180 = ($$0$i$i1$i$i|0)==(-1);
     
     if ($180) {
      HEAP32[$19>>2] = 0;
      
      label = 67;
      break;
     }
     
     if (!($165)) {
      break;
     }
     $gep_int62 = $agg$result;
     $183 = $gep_int62;
     HEAP32[$183>>2] = $164;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     
     if ($165) {
      break;
     }
     $gep_int62 = $agg$result;
     $183 = $gep_int62;
     HEAP32[$183>>2] = $164;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   $181 = HEAP32[$__err>>2]|0;
   $182 = $181 | 2;
   HEAP32[$__err>>2] = $182;
   
   $gep_int62 = $agg$result;
   $183 = $gep_int62;
   HEAP32[$183>>2] = $164;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0;
 var $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0;
 var $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0;
 var $gep_int62 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0, u$68 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else {
  
  $$0$i = 10;
 }
 
 $4 = $__atoms;
 
 $gep_int7 = $__atoms;
 $5 = $gep_int7;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$__buf]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   
   if ($10) {
    $13 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $14 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre35 = $gep15;
    
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $11 = $gep9;
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre33 = $gep11;
    
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   
   
   
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   
   $gep_int16 = $__g;
   $17 = $gep_int16;
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $18 = $gep_int17;
   $gep_int18 = $__e;
   $19 = $gep_int18;
   $gep_int19 = $__buf;
   $20 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $21 = $gep21;
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    
    
    $23 = ($$pre$i$i$i5|0)==(0);
    
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $gep_int22 = $$pre$i$i$i5;
      $gep23 = (($gep_int22) + 12)|0;
      $24 = $gep23;
      $25 = HEAP32[$24>>2]|0;
      $gep_int24 = $$pre$i$i$i5;
      $gep25 = (($gep_int24) + 16)|0;
      $26 = $gep25;
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$$pre$i$i$i5>>2]|0;
       $gep_int26 = $30;
       $gep27 = (($gep_int26) + 36)|0;
       $31 = $gep27;
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = invoke_ii($32|0,$$pre$i$i$i5|0)|0;
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       
       $$0$i$i$i$i3 = $36;
      }
      
      $37 = ($$0$i$i$i$i3|0)==(-1);
      
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      
      $38 = 0;$39 = 1;
     }
    } while(0);
    
    
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0);
    
    do {
     if ($41) {
      label = 22;
     } else {
      $gep_int28 = $40;
      $gep29 = (($gep_int28) + 12)|0;
      $42 = $gep29;
      $43 = HEAP32[$42>>2]|0;
      $gep_int30 = $40;
      $gep31 = (($gep_int30) + 16)|0;
      $44 = $gep31;
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$40>>2]|0;
       $gep_int32 = $48;
       $gep33 = (($gep_int32) + 36)|0;
       $49 = $gep33;
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = invoke_ii($50|0,$40|0)|0;
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       
       $$0$i$i1$i$i9 = $54;
      }
      
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      
      if ($55) {
       HEAP32[$19>>2] = 0;
       
       label = 22;
       break;
      } else {
       
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$__buf]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     
     $67 = $64;
    }
    
    $68 = ($60|0)==($67|0);
    
    if ($68) {
     
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      
      $74 = $69;$75 = $69;
     }
     
     
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$76|0,0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$__buf]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      
      $84 = $phitmp$i23;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$84|0,0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$__buf]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      
      $91 = $90;
     }
     
     $gep_int34 = $91;
     $gep35 = (($gep_int34) + ($74))|0;
     $92 = $gep35;
     HEAP32[$__a_end>>2] = $92;
     
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $38;
    $gep37 = (($gep_int36) + 12)|0;
    $97 = $gep37;
    $98 = HEAP32[$97>>2]|0;
    $gep_int38 = $38;
    $gep39 = (($gep_int38) + 16)|0;
    $99 = $gep39;
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$38>>2]|0;
     $gep_int40 = $103;
     $gep41 = (($gep_int40) + 36)|0;
     $104 = $gep41;
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = invoke_ii($105|0,$38|0)|0;
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     
     $$0$i$i = $109;
    }
    
    $110 = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0;
    $111 = ($110|0)==(0);
    
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$38>>2]|0;
     $gep_int42 = $116;
     $gep43 = (($gep_int42) + 40)|0;
     $117 = $gep43;
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     u$68 = invoke_ii($118|0,$38|0)|0;
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $112;
     $gep45 = (($gep_int44) + 4)|0;
     $121 = $gep45;
     HEAP32[$97>>2] = $121;
     
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $expanded = 69;
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $122 = $__grouping;
   $123 = HEAP8[$__grouping]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    
    $130 = $129;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $126 = $gep47;
    $127 = HEAP32[$126>>2]|0;
    
    $130 = $127;
   }
   
   $131 = ($130|0)==(0);
   
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $132;
     $gep49 = (($gep_int48) + 4)|0;
     $138 = $gep49;
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
     
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = invoke_iiiii(11,$__a$2|0,$139|0,$__err|0,$$0$i|0)|0;
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   
   if ($142) {
    break;
   }
   HEAP16[$__v>>1] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$143,$__err);
   $144 = ($38|0)==(0);
   
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $gep_int50 = $38;
     $gep51 = (($gep_int50) + 12)|0;
     $145 = $gep51;
     $146 = HEAP32[$145>>2]|0;
     $gep_int52 = $38;
     $gep53 = (($gep_int52) + 16)|0;
     $147 = $gep53;
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     
     if ($149) {
      $150 = $38;
      $151 = HEAP32[$38>>2]|0;
      $gep_int54 = $151;
      $gep55 = (($gep_int54) + 36)|0;
      $152 = $gep55;
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = invoke_ii($153|0,$38|0)|0;
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      
      if ($156) {
       break L6;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      
      $$0$i$i$i$i = $157;
     }
     
     $158 = ($$0$i$i$i$i|0)==(-1);
     
     if (!($158)) {
      $159 = $38;$160 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     
     $159 = 0;$160 = 1;
    }
   } while(0);
   
   
   $161 = ($$pre$i3$i$i|0)==(0);
   
   do {
    if ($161) {
     label = 67;
    } else {
     $gep_int56 = $$pre$i3$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $162 = $gep57;
     $163 = HEAP32[$162>>2]|0;
     $gep_int58 = $$pre$i3$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $164 = $gep59;
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$$pre$i3$i$i>>2]|0;
      $gep_int60 = $168;
      $gep61 = (($gep_int60) + 36)|0;
      $169 = $gep61;
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = invoke_ii($170|0,$$pre$i3$i$i|0)|0;
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      
      if ($173) {
       break L6;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      
      $$0$i$i1$i$i = $174;
     }
     
     $175 = ($$0$i$i1$i$i|0)==(-1);
     
     if ($175) {
      HEAP32[$19>>2] = 0;
      
      label = 67;
      break;
     }
     
     if (!($160)) {
      break;
     }
     $gep_int62 = $agg$result;
     $178 = $gep_int62;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     
     if ($160) {
      break;
     }
     $gep_int62 = $agg$result;
     $178 = $gep_int62;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   
   $gep_int62 = $agg$result;
   $178 = $gep_int62;
   HEAP32[$178>>2] = $159;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0;
 var $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0;
 var $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0;
 var $gep_int62 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0, u$68 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else {
  
  $$0$i = 10;
 }
 
 $4 = $__atoms;
 
 $gep_int7 = $__atoms;
 $5 = $gep_int7;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$__buf]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   
   if ($10) {
    $13 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $14 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre35 = $gep15;
    
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $11 = $gep9;
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre33 = $gep11;
    
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   
   
   
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   
   $gep_int16 = $__g;
   $17 = $gep_int16;
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $18 = $gep_int17;
   $gep_int18 = $__e;
   $19 = $gep_int18;
   $gep_int19 = $__buf;
   $20 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $21 = $gep21;
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    
    
    $23 = ($$pre$i$i$i5|0)==(0);
    
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $gep_int22 = $$pre$i$i$i5;
      $gep23 = (($gep_int22) + 12)|0;
      $24 = $gep23;
      $25 = HEAP32[$24>>2]|0;
      $gep_int24 = $$pre$i$i$i5;
      $gep25 = (($gep_int24) + 16)|0;
      $26 = $gep25;
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$$pre$i$i$i5>>2]|0;
       $gep_int26 = $30;
       $gep27 = (($gep_int26) + 36)|0;
       $31 = $gep27;
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = invoke_ii($32|0,$$pre$i$i$i5|0)|0;
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       
       $$0$i$i$i$i3 = $36;
      }
      
      $37 = ($$0$i$i$i$i3|0)==(-1);
      
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      
      $38 = 0;$39 = 1;
     }
    } while(0);
    
    
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0);
    
    do {
     if ($41) {
      label = 22;
     } else {
      $gep_int28 = $40;
      $gep29 = (($gep_int28) + 12)|0;
      $42 = $gep29;
      $43 = HEAP32[$42>>2]|0;
      $gep_int30 = $40;
      $gep31 = (($gep_int30) + 16)|0;
      $44 = $gep31;
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$40>>2]|0;
       $gep_int32 = $48;
       $gep33 = (($gep_int32) + 36)|0;
       $49 = $gep33;
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = invoke_ii($50|0,$40|0)|0;
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       
       $$0$i$i1$i$i9 = $54;
      }
      
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      
      if ($55) {
       HEAP32[$19>>2] = 0;
       
       label = 22;
       break;
      } else {
       
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$__buf]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     
     $67 = $64;
    }
    
    $68 = ($60|0)==($67|0);
    
    if ($68) {
     
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      
      $74 = $69;$75 = $69;
     }
     
     
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$76|0,0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$__buf]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      
      $84 = $phitmp$i23;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$84|0,0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$__buf]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      
      $91 = $90;
     }
     
     $gep_int34 = $91;
     $gep35 = (($gep_int34) + ($74))|0;
     $92 = $gep35;
     HEAP32[$__a_end>>2] = $92;
     
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $38;
    $gep37 = (($gep_int36) + 12)|0;
    $97 = $gep37;
    $98 = HEAP32[$97>>2]|0;
    $gep_int38 = $38;
    $gep39 = (($gep_int38) + 16)|0;
    $99 = $gep39;
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$38>>2]|0;
     $gep_int40 = $103;
     $gep41 = (($gep_int40) + 36)|0;
     $104 = $gep41;
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = invoke_ii($105|0,$38|0)|0;
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     
     $$0$i$i = $109;
    }
    
    $110 = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0;
    $111 = ($110|0)==(0);
    
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$38>>2]|0;
     $gep_int42 = $116;
     $gep43 = (($gep_int42) + 40)|0;
     $117 = $gep43;
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     u$68 = invoke_ii($118|0,$38|0)|0;
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $112;
     $gep45 = (($gep_int44) + 4)|0;
     $121 = $gep45;
     HEAP32[$97>>2] = $121;
     
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $expanded = 69;
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $122 = $__grouping;
   $123 = HEAP8[$__grouping]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    
    $130 = $129;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $126 = $gep47;
    $127 = HEAP32[$126>>2]|0;
    
    $130 = $127;
   }
   
   $131 = ($130|0)==(0);
   
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $132;
     $gep49 = (($gep_int48) + 4)|0;
     $138 = $gep49;
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
     
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = invoke_iiiii(12,$__a$2|0,$139|0,$__err|0,$$0$i|0)|0;
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   
   if ($142) {
    break;
   }
   HEAP32[$__v>>2] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$143,$__err);
   $144 = ($38|0)==(0);
   
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $gep_int50 = $38;
     $gep51 = (($gep_int50) + 12)|0;
     $145 = $gep51;
     $146 = HEAP32[$145>>2]|0;
     $gep_int52 = $38;
     $gep53 = (($gep_int52) + 16)|0;
     $147 = $gep53;
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     
     if ($149) {
      $150 = $38;
      $151 = HEAP32[$38>>2]|0;
      $gep_int54 = $151;
      $gep55 = (($gep_int54) + 36)|0;
      $152 = $gep55;
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = invoke_ii($153|0,$38|0)|0;
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      
      if ($156) {
       break L6;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      
      $$0$i$i$i$i = $157;
     }
     
     $158 = ($$0$i$i$i$i|0)==(-1);
     
     if (!($158)) {
      $159 = $38;$160 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     
     $159 = 0;$160 = 1;
    }
   } while(0);
   
   
   $161 = ($$pre$i3$i$i|0)==(0);
   
   do {
    if ($161) {
     label = 67;
    } else {
     $gep_int56 = $$pre$i3$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $162 = $gep57;
     $163 = HEAP32[$162>>2]|0;
     $gep_int58 = $$pre$i3$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $164 = $gep59;
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$$pre$i3$i$i>>2]|0;
      $gep_int60 = $168;
      $gep61 = (($gep_int60) + 36)|0;
      $169 = $gep61;
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = invoke_ii($170|0,$$pre$i3$i$i|0)|0;
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      
      if ($173) {
       break L6;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      
      $$0$i$i1$i$i = $174;
     }
     
     $175 = ($$0$i$i1$i$i|0)==(-1);
     
     if ($175) {
      HEAP32[$19>>2] = 0;
      
      label = 67;
      break;
     }
     
     if (!($160)) {
      break;
     }
     $gep_int62 = $agg$result;
     $178 = $gep_int62;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     
     if ($160) {
      break;
     }
     $gep_int62 = $agg$result;
     $178 = $gep_int62;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   
   $gep_int62 = $agg$result;
   $178 = $gep_int62;
   HEAP32[$178>>2] = $159;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0;
 var $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0;
 var $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0;
 var $gep_int62 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0, u$68 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else {
  
  $$0$i = 10;
 }
 
 $4 = $__atoms;
 
 $gep_int7 = $__atoms;
 $5 = $gep_int7;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$__buf]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   
   if ($10) {
    $13 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $14 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre35 = $gep15;
    
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $11 = $gep9;
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre33 = $gep11;
    
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   
   
   
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   
   $gep_int16 = $__g;
   $17 = $gep_int16;
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $18 = $gep_int17;
   $gep_int18 = $__e;
   $19 = $gep_int18;
   $gep_int19 = $__buf;
   $20 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $21 = $gep21;
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    
    
    $23 = ($$pre$i$i$i5|0)==(0);
    
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $gep_int22 = $$pre$i$i$i5;
      $gep23 = (($gep_int22) + 12)|0;
      $24 = $gep23;
      $25 = HEAP32[$24>>2]|0;
      $gep_int24 = $$pre$i$i$i5;
      $gep25 = (($gep_int24) + 16)|0;
      $26 = $gep25;
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$$pre$i$i$i5>>2]|0;
       $gep_int26 = $30;
       $gep27 = (($gep_int26) + 36)|0;
       $31 = $gep27;
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = invoke_ii($32|0,$$pre$i$i$i5|0)|0;
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       
       $$0$i$i$i$i3 = $36;
      }
      
      $37 = ($$0$i$i$i$i3|0)==(-1);
      
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      
      $38 = 0;$39 = 1;
     }
    } while(0);
    
    
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0);
    
    do {
     if ($41) {
      label = 22;
     } else {
      $gep_int28 = $40;
      $gep29 = (($gep_int28) + 12)|0;
      $42 = $gep29;
      $43 = HEAP32[$42>>2]|0;
      $gep_int30 = $40;
      $gep31 = (($gep_int30) + 16)|0;
      $44 = $gep31;
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$40>>2]|0;
       $gep_int32 = $48;
       $gep33 = (($gep_int32) + 36)|0;
       $49 = $gep33;
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = invoke_ii($50|0,$40|0)|0;
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       
       $$0$i$i1$i$i9 = $54;
      }
      
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      
      if ($55) {
       HEAP32[$19>>2] = 0;
       
       label = 22;
       break;
      } else {
       
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$__buf]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     
     $67 = $64;
    }
    
    $68 = ($60|0)==($67|0);
    
    if ($68) {
     
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      
      $74 = $69;$75 = $69;
     }
     
     
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$76|0,0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$__buf]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      
      $84 = $phitmp$i23;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$84|0,0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$__buf]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      
      $91 = $90;
     }
     
     $gep_int34 = $91;
     $gep35 = (($gep_int34) + ($74))|0;
     $92 = $gep35;
     HEAP32[$__a_end>>2] = $92;
     
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $38;
    $gep37 = (($gep_int36) + 12)|0;
    $97 = $gep37;
    $98 = HEAP32[$97>>2]|0;
    $gep_int38 = $38;
    $gep39 = (($gep_int38) + 16)|0;
    $99 = $gep39;
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$38>>2]|0;
     $gep_int40 = $103;
     $gep41 = (($gep_int40) + 36)|0;
     $104 = $gep41;
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = invoke_ii($105|0,$38|0)|0;
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     
     $$0$i$i = $109;
    }
    
    $110 = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0;
    $111 = ($110|0)==(0);
    
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$38>>2]|0;
     $gep_int42 = $116;
     $gep43 = (($gep_int42) + 40)|0;
     $117 = $gep43;
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     u$68 = invoke_ii($118|0,$38|0)|0;
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $112;
     $gep45 = (($gep_int44) + 4)|0;
     $121 = $gep45;
     HEAP32[$97>>2] = $121;
     
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $expanded = 69;
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $122 = $__grouping;
   $123 = HEAP8[$__grouping]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    
    $130 = $129;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $126 = $gep47;
    $127 = HEAP32[$126>>2]|0;
    
    $130 = $127;
   }
   
   $131 = ($130|0)==(0);
   
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $132;
     $gep49 = (($gep_int48) + 4)|0;
     $138 = $gep49;
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
     
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = invoke_iiiii(13,$__a$2|0,$139|0,$__err|0,$$0$i|0)|0;
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   
   if ($142) {
    break;
   }
   HEAP32[$__v>>2] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$143,$__err);
   $144 = ($38|0)==(0);
   
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $gep_int50 = $38;
     $gep51 = (($gep_int50) + 12)|0;
     $145 = $gep51;
     $146 = HEAP32[$145>>2]|0;
     $gep_int52 = $38;
     $gep53 = (($gep_int52) + 16)|0;
     $147 = $gep53;
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     
     if ($149) {
      $150 = $38;
      $151 = HEAP32[$38>>2]|0;
      $gep_int54 = $151;
      $gep55 = (($gep_int54) + 36)|0;
      $152 = $gep55;
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = invoke_ii($153|0,$38|0)|0;
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      
      if ($156) {
       break L6;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      
      $$0$i$i$i$i = $157;
     }
     
     $158 = ($$0$i$i$i$i|0)==(-1);
     
     if (!($158)) {
      $159 = $38;$160 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     
     $159 = 0;$160 = 1;
    }
   } while(0);
   
   
   $161 = ($$pre$i3$i$i|0)==(0);
   
   do {
    if ($161) {
     label = 67;
    } else {
     $gep_int56 = $$pre$i3$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $162 = $gep57;
     $163 = HEAP32[$162>>2]|0;
     $gep_int58 = $$pre$i3$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $164 = $gep59;
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$$pre$i3$i$i>>2]|0;
      $gep_int60 = $168;
      $gep61 = (($gep_int60) + 36)|0;
      $169 = $gep61;
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = invoke_ii($170|0,$$pre$i3$i$i|0)|0;
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      
      if ($173) {
       break L6;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      
      $$0$i$i1$i$i = $174;
     }
     
     $175 = ($$0$i$i1$i$i|0)==(-1);
     
     if ($175) {
      HEAP32[$19>>2] = 0;
      
      label = 67;
      break;
     }
     
     if (!($160)) {
      break;
     }
     $gep_int62 = $agg$result;
     $178 = $gep_int62;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     
     if ($160) {
      break;
     }
     $gep_int62 = $agg$result;
     $178 = $gep_int62;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   
   $gep_int62 = $agg$result;
   $178 = $gep_int62;
   HEAP32[$178>>2] = $159;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0;
 var $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0;
 var $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0;
 var $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0, u$68 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 
 if ((($3|0) == 8)) {
  
  $$0$i = 16;
 } else if ((($3|0) == 0)) {
  
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else {
  
  $$0$i = 10;
 }
 
 $4 = $__atoms;
 
 $gep_int7 = $__atoms;
 $5 = $gep_int7;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$__buf]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   
   if ($10) {
    $13 = $__buf;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 1)|0;
    $14 = $gep13;
    $gep_int14 = $__buf;
    $gep15 = (($gep_int14) + 8)|0;
    $$pre35 = $gep15;
    
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 8)|0;
    $11 = $gep9;
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $$pre33 = $gep11;
    
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   
   
   
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   
   $gep_int16 = $__g;
   $17 = $gep_int16;
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $gep_int17 = $__b;
   $18 = $gep_int17;
   $gep_int18 = $__e;
   $19 = $gep_int18;
   $gep_int19 = $__buf;
   $20 = $gep_int19;
   $gep_int20 = $__buf;
   $gep21 = (($gep_int20) + 4)|0;
   $21 = $gep21;
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    
    
    $23 = ($$pre$i$i$i5|0)==(0);
    
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $gep_int22 = $$pre$i$i$i5;
      $gep23 = (($gep_int22) + 12)|0;
      $24 = $gep23;
      $25 = HEAP32[$24>>2]|0;
      $gep_int24 = $$pre$i$i$i5;
      $gep25 = (($gep_int24) + 16)|0;
      $26 = $gep25;
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$$pre$i$i$i5>>2]|0;
       $gep_int26 = $30;
       $gep27 = (($gep_int26) + 36)|0;
       $31 = $gep27;
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = invoke_ii($32|0,$$pre$i$i$i5|0)|0;
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       
       $$0$i$i$i$i3 = $36;
      }
      
      $37 = ($$0$i$i$i$i3|0)==(-1);
      
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      
      $38 = 0;$39 = 1;
     }
    } while(0);
    
    
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0);
    
    do {
     if ($41) {
      label = 22;
     } else {
      $gep_int28 = $40;
      $gep29 = (($gep_int28) + 12)|0;
      $42 = $gep29;
      $43 = HEAP32[$42>>2]|0;
      $gep_int30 = $40;
      $gep31 = (($gep_int30) + 16)|0;
      $44 = $gep31;
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$40>>2]|0;
       $gep_int32 = $48;
       $gep33 = (($gep_int32) + 36)|0;
       $49 = $gep33;
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = invoke_ii($50|0,$40|0)|0;
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       
       $$0$i$i1$i$i9 = $54;
      }
      
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      
      if ($55) {
       HEAP32[$19>>2] = 0;
       
       label = 22;
       break;
      } else {
       
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$__buf]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     
     $67 = $64;
    }
    
    $68 = ($60|0)==($67|0);
    
    if ($68) {
     
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      
      $74 = $69;$75 = $69;
     }
     
     
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$76|0,0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$__buf]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      
      $84 = $phitmp$i23;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$84|0,0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$__buf]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      
      $91 = $90;
     }
     
     $gep_int34 = $91;
     $gep35 = (($gep_int34) + ($74))|0;
     $92 = $gep35;
     HEAP32[$__a_end>>2] = $92;
     
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int36 = $38;
    $gep37 = (($gep_int36) + 12)|0;
    $97 = $gep37;
    $98 = HEAP32[$97>>2]|0;
    $gep_int38 = $38;
    $gep39 = (($gep_int38) + 16)|0;
    $99 = $gep39;
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$38>>2]|0;
     $gep_int40 = $103;
     $gep41 = (($gep_int40) + 36)|0;
     $104 = $gep41;
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = invoke_ii($105|0,$38|0)|0;
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     
     $$0$i$i = $109;
    }
    
    $110 = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0;
    $111 = ($110|0)==(0);
    
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$38>>2]|0;
     $gep_int42 = $116;
     $gep43 = (($gep_int42) + 40)|0;
     $117 = $gep43;
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     u$68 = invoke_ii($118|0,$38|0)|0;
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int44 = $112;
     $gep45 = (($gep_int44) + 4)|0;
     $121 = $gep45;
     HEAP32[$97>>2] = $121;
     
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $expanded = 69;
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $122 = $__grouping;
   $123 = HEAP8[$__grouping]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    
    $130 = $129;
   } else {
    $gep_int46 = $__grouping;
    $gep47 = (($gep_int46) + 4)|0;
    $126 = $gep47;
    $127 = HEAP32[$126>>2]|0;
    
    $130 = $127;
   }
   
   $131 = ($130|0)==(0);
   
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $gep_int48 = $132;
     $gep49 = (($gep_int48) + 4)|0;
     $138 = $gep49;
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
     
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = invoke_iiiii(14,$__a$2|0,$139|0,$__err|0,$$0$i|0)|0;
   $141 = tempRet0;
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   
   if ($143) {
    break;
   }
   $144 = $__v;
   $145 = $144;
   HEAP32[$145>>2] = $140;
   $146 = (($144) + 4)|0;
   $147 = $146;
   HEAP32[$147>>2] = $141;
   $148 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$148,$__err);
   $149 = ($38|0)==(0);
   
   do {
    if ($149) {
     $164 = 0;$165 = 1;
    } else {
     $gep_int50 = $38;
     $gep51 = (($gep_int50) + 12)|0;
     $150 = $gep51;
     $151 = HEAP32[$150>>2]|0;
     $gep_int52 = $38;
     $gep53 = (($gep_int52) + 16)|0;
     $152 = $gep53;
     $153 = HEAP32[$152>>2]|0;
     $154 = ($151|0)==($153|0);
     
     if ($154) {
      $155 = $38;
      $156 = HEAP32[$38>>2]|0;
      $gep_int54 = $156;
      $gep55 = (($gep_int54) + 36)|0;
      $157 = $gep55;
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = invoke_ii($158|0,$38|0)|0;
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      
      if ($161) {
       break L6;
      } else {
       $$0$i$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$151>>2]|0;
      
      $$0$i$i$i$i = $162;
     }
     
     $163 = ($$0$i$i$i$i|0)==(-1);
     
     if (!($163)) {
      $164 = $38;$165 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     
     $164 = 0;$165 = 1;
    }
   } while(0);
   
   
   $166 = ($$pre$i3$i$i|0)==(0);
   
   do {
    if ($166) {
     label = 67;
    } else {
     $gep_int56 = $$pre$i3$i$i;
     $gep57 = (($gep_int56) + 12)|0;
     $167 = $gep57;
     $168 = HEAP32[$167>>2]|0;
     $gep_int58 = $$pre$i3$i$i;
     $gep59 = (($gep_int58) + 16)|0;
     $169 = $gep59;
     $170 = HEAP32[$169>>2]|0;
     $171 = ($168|0)==($170|0);
     
     if ($171) {
      $172 = $$pre$i3$i$i;
      $173 = HEAP32[$$pre$i3$i$i>>2]|0;
      $gep_int60 = $173;
      $gep61 = (($gep_int60) + 36)|0;
      $174 = $gep61;
      $175 = HEAP32[$174>>2]|0;
      __THREW__ = 0;
      $176 = invoke_ii($175|0,$$pre$i3$i$i|0)|0;
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      
      if ($178) {
       break L6;
      } else {
       $$0$i$i1$i$i = $176;
      }
     } else {
      $179 = HEAP32[$168>>2]|0;
      
      $$0$i$i1$i$i = $179;
     }
     
     $180 = ($$0$i$i1$i$i|0)==(-1);
     
     if ($180) {
      HEAP32[$19>>2] = 0;
      
      label = 67;
      break;
     }
     
     if (!($165)) {
      break;
     }
     $gep_int62 = $agg$result;
     $183 = $gep_int62;
     HEAP32[$183>>2] = $164;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     
     if ($165) {
      break;
     }
     $gep_int62 = $agg$result;
     $183 = $gep_int62;
     HEAP32[$183>>2] = $164;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   $181 = HEAP32[$__err>>2]|0;
   $182 = $181 | 2;
   HEAP32[$__err>>2] = $182;
   
   $gep_int62 = $agg$result;
   $183 = $gep_int62;
   HEAP32[$183>>2] = $164;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre33 = 0, $$pre34 = 0, $$pre36 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0;
 var $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0;
 var $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0;
 var $gep_int60 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0, u$66 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 376|0;
 $__atoms = sp;
 $__decimal_point = sp + 128|0;
 $__thousands_sep = sp + 136|0;
 $__grouping = sp + 144|0;
 $__buf = sp + 160|0;
 $__a_end = sp + 176|0;
 $__g = sp + 184|0;
 $__g_end = sp + 344|0;
 $__dc = sp + 352|0;
 $__in_units = sp + 360|0;
 $__exp = sp + 368|0;
 $1 = $__atoms;
 
 $gep_int = $__atoms;
 $2 = $gep_int;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$2,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 
 L1: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   
   if ($7) {
    $10 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $11 = $gep11;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 8)|0;
    $$pre36 = $gep13;
    
    $$pre$phi35Z2D = $11;$$pre$phi37Z2D = $$pre36;$12 = $11;
   } else {
    $gep_int7 = $__buf;
    $gep = (($gep_int7) + 8)|0;
    $8 = $gep;
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = $__buf;
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 1)|0;
    $$pre34 = $gep9;
    
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $8;$12 = $9;
   }
   
   
   
   HEAP32[$__a_end>>2] = $12;
   $13 = $__g;
   
   $gep_int14 = $__g;
   $14 = $gep_int14;
   HEAP32[$__g_end>>2] = $14;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $gep_int15 = $__b;
   $15 = $gep_int15;
   $gep_int16 = $__e;
   $16 = $gep_int16;
   $gep_int17 = $__buf;
   $17 = $gep_int17;
   $gep_int18 = $__buf;
   $gep19 = (($gep_int18) + 4)|0;
   $18 = $gep19;
   $19 = HEAP32[$__decimal_point>>2]|0;
   $20 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$15>>2]|0;
   
   $$pre$i$i$i5 = $$pre;$__a$0 = $12;
   L7: while(1) {
    
    
    $21 = ($$pre$i$i$i5|0)==(0);
    
    do {
     if ($21) {
      $36 = 0;$37 = 1;
     } else {
      $gep_int20 = $$pre$i$i$i5;
      $gep21 = (($gep_int20) + 12)|0;
      $22 = $gep21;
      $23 = HEAP32[$22>>2]|0;
      $gep_int22 = $$pre$i$i$i5;
      $gep23 = (($gep_int22) + 16)|0;
      $24 = $gep23;
      $25 = HEAP32[$24>>2]|0;
      $26 = ($23|0)==($25|0);
      
      if ($26) {
       $27 = $$pre$i$i$i5;
       $28 = HEAP32[$$pre$i$i$i5>>2]|0;
       $gep_int24 = $28;
       $gep25 = (($gep_int24) + 36)|0;
       $29 = $gep25;
       $30 = HEAP32[$29>>2]|0;
       __THREW__ = 0;
       $31 = invoke_ii($30|0,$$pre$i$i$i5|0)|0;
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       
       if ($33) {
        label = 34;
        break L7;
       } else {
        $$0$i$i$i$i3 = $31;
       }
      } else {
       $34 = HEAP32[$23>>2]|0;
       
       $$0$i$i$i$i3 = $34;
      }
      
      $35 = ($$0$i$i$i$i3|0)==(-1);
      
      if (!($35)) {
       $36 = $$pre$i$i$i5;$37 = 0;
       break;
      }
      HEAP32[$15>>2] = 0;
      
      $36 = 0;$37 = 1;
     }
    } while(0);
    
    
    $38 = HEAP32[$16>>2]|0;
    $39 = ($38|0)==(0);
    
    do {
     if ($39) {
      label = 18;
     } else {
      $gep_int26 = $38;
      $gep27 = (($gep_int26) + 12)|0;
      $40 = $gep27;
      $41 = HEAP32[$40>>2]|0;
      $gep_int28 = $38;
      $gep29 = (($gep_int28) + 16)|0;
      $42 = $gep29;
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      
      if ($44) {
       $45 = $38;
       $46 = HEAP32[$38>>2]|0;
       $gep_int30 = $46;
       $gep31 = (($gep_int30) + 36)|0;
       $47 = $gep31;
       $48 = HEAP32[$47>>2]|0;
       __THREW__ = 0;
       $49 = invoke_ii($48|0,$38|0)|0;
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       
       if ($51) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $49;
       }
      } else {
       $52 = HEAP32[$41>>2]|0;
       
       $$0$i$i1$i$i9 = $52;
      }
      
      $53 = ($$0$i$i1$i$i9|0)==(-1);
      
      if ($53) {
       HEAP32[$16>>2] = 0;
       
       label = 18;
       break;
      } else {
       
       if ($37) {
        $54 = $38;
        break;
       } else {
        $$pre$i3$i$i = $38;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     
     if ($37) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $54 = 0;
     }
    }
    
    $55 = HEAP32[$__a_end>>2]|0;
    $56 = $55;
    $57 = $__a$0;
    $58 = (($56) - ($57))|0;
    $59 = HEAP8[$__buf]|0;
    $60 = $59 & 1;
    $61 = ($60<<24>>24)==(0);
    
    if ($61) {
     $63 = $59&255;
     $64 = $63 >>> 1;
     
     $65 = $64;
    } else {
     $62 = HEAP32[$18>>2]|0;
     
     $65 = $62;
    }
    
    $66 = ($58|0)==($65|0);
    
    if ($66) {
     
     if ($61) {
      $68 = $59&255;
      $69 = $68 >>> 1;
      $70 = $59&255;
      $71 = $70 >>> 1;
      
      $72 = $69;$73 = $71;
     } else {
      $67 = HEAP32[$18>>2]|0;
      
      $72 = $67;$73 = $67;
     }
     
     
     $74 = $73 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$74|0,0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     
     if ($76) {
      label = 34;
      break;
     }
     $77 = HEAP8[$__buf]|0;
     $78 = $77 & 1;
     $79 = ($78<<24>>24)==(0);
     
     if ($79) {
      $82 = 10;
     } else {
      $80 = HEAP32[$17>>2]|0;
      $81 = $80 & -2;
      $phitmp$i23 = (($81) + -1)|0;
      
      $82 = $phitmp$i23;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$82|0,0);
     $83 = __THREW__; __THREW__ = 0;
     $84 = $83&1;
     
     if ($84) {
      label = 34;
      break;
     }
     $85 = HEAP8[$__buf]|0;
     $86 = $85 & 1;
     $87 = ($86<<24>>24)==(0);
     
     if ($87) {
      $89 = $$pre$phi35Z2D;
     } else {
      $88 = HEAP32[$$pre$phi37Z2D>>2]|0;
      
      $89 = $88;
     }
     
     $gep_int32 = $89;
     $gep33 = (($gep_int32) + ($72))|0;
     $90 = $gep33;
     HEAP32[$__a_end>>2] = $90;
     
     $__a$1 = $89;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int34 = $36;
    $gep35 = (($gep_int34) + 12)|0;
    $95 = $gep35;
    $96 = HEAP32[$95>>2]|0;
    $gep_int36 = $36;
    $gep37 = (($gep_int36) + 16)|0;
    $97 = $gep37;
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    
    if ($99) {
     $100 = $36;
     $101 = HEAP32[$36>>2]|0;
     $gep_int38 = $101;
     $gep39 = (($gep_int38) + 36)|0;
     $102 = $gep39;
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     $104 = invoke_ii($103|0,$36|0)|0;
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     
     if ($106) {
      label = 34;
      break;
     } else {
      $$0$i$i = $104;
     }
    } else {
     $107 = HEAP32[$96>>2]|0;
     
     $$0$i$i = $107;
    }
    
    $108 = __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$19,$20,$__grouping,$14,$__g_end,$__dc,$2)|0;
    $109 = ($108|0)==(0);
    
    if (!($109)) {
     $$pre$i3$i$i = $54;$__a$2 = $__a$1;
     break;
    }
    $110 = HEAP32[$95>>2]|0;
    $111 = HEAP32[$97>>2]|0;
    $112 = ($110|0)==($111|0);
    
    if ($112) {
     $113 = $36;
     $114 = HEAP32[$36>>2]|0;
     $gep_int40 = $114;
     $gep41 = (($gep_int40) + 40)|0;
     $115 = $gep41;
     $116 = HEAP32[$115>>2]|0;
     __THREW__ = 0;
     u$66 = invoke_ii($116|0,$36|0)|0;
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     
     if ($118) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int42 = $110;
     $gep43 = (($gep_int42) + 4)|0;
     $119 = $gep43;
     HEAP32[$95>>2] = $119;
     
     $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $expanded = 69;
    $91 = ___cxa_find_matching_catch(-1,-1)|0;
    $92 = tempRet0;
    
    $lpad$phi$index = $91;$lpad$phi$index2 = $92;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $120 = $__grouping;
   $121 = HEAP8[$__grouping]|0;
   $122 = $121 & 1;
   $123 = ($122<<24>>24)==(0);
   
   if ($123) {
    $126 = $121&255;
    $127 = $126 >>> 1;
    
    $128 = $127;
   } else {
    $gep_int44 = $__grouping;
    $gep45 = (($gep_int44) + 4)|0;
    $124 = $gep45;
    $125 = HEAP32[$124>>2]|0;
    
    $128 = $125;
   }
   
   $129 = ($128|0)==(0);
   
   do {
    if (!($129)) {
     $130 = HEAP8[$__in_units]|0;
     $131 = ($130<<24>>24)==(0);
     
     if ($131) {
      break;
     }
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $gep_int46 = $132;
     $gep47 = (($gep_int46) + 4)|0;
     $138 = $gep47;
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
     
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = +invoke_diii(1,$__a$2|0,$139|0,$__err|0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   
   if ($142) {
    break;
   }
   HEAPF32[$__v>>2] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$14,$143,$__err);
   $144 = ($36|0)==(0);
   
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $gep_int48 = $36;
     $gep49 = (($gep_int48) + 12)|0;
     $145 = $gep49;
     $146 = HEAP32[$145>>2]|0;
     $gep_int50 = $36;
     $gep51 = (($gep_int50) + 16)|0;
     $147 = $gep51;
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     
     if ($149) {
      $150 = $36;
      $151 = HEAP32[$36>>2]|0;
      $gep_int52 = $151;
      $gep53 = (($gep_int52) + 36)|0;
      $152 = $gep53;
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = invoke_ii($153|0,$36|0)|0;
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      
      if ($156) {
       break L1;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      
      $$0$i$i$i$i = $157;
     }
     
     $158 = ($$0$i$i$i$i|0)==(-1);
     
     if (!($158)) {
      $159 = $36;$160 = 0;
      break;
     }
     HEAP32[$15>>2] = 0;
     
     $159 = 0;$160 = 1;
    }
   } while(0);
   
   
   $161 = ($$pre$i3$i$i|0)==(0);
   
   do {
    if ($161) {
     label = 64;
    } else {
     $gep_int54 = $$pre$i3$i$i;
     $gep55 = (($gep_int54) + 12)|0;
     $162 = $gep55;
     $163 = HEAP32[$162>>2]|0;
     $gep_int56 = $$pre$i3$i$i;
     $gep57 = (($gep_int56) + 16)|0;
     $164 = $gep57;
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$$pre$i3$i$i>>2]|0;
      $gep_int58 = $168;
      $gep59 = (($gep_int58) + 36)|0;
      $169 = $gep59;
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = invoke_ii($170|0,$$pre$i3$i$i|0)|0;
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      
      if ($173) {
       break L1;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      
      $$0$i$i1$i$i = $174;
     }
     
     $175 = ($$0$i$i1$i$i|0)==(-1);
     
     if ($175) {
      HEAP32[$16>>2] = 0;
      
      label = 64;
      break;
     }
     
     if (!($160)) {
      break;
     }
     $gep_int60 = $agg$result;
     $178 = $gep_int60;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 64) {
     
     if ($160) {
      break;
     }
     $gep_int60 = $agg$result;
     $178 = $gep_int60;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   
   $gep_int60 = $agg$result;
   $178 = $gep_int60;
   HEAP32[$178>>2] = $159;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $93 = ___cxa_find_matching_catch(-1,-1)|0;
 $94 = tempRet0;
 
 $lpad$phi$index = $93;$lpad$phi$index2 = $94;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre33 = 0, $$pre34 = 0, $$pre36 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0;
 var $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0;
 var $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0;
 var $gep_int60 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0, u$66 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 376|0;
 $__atoms = sp;
 $__decimal_point = sp + 128|0;
 $__thousands_sep = sp + 136|0;
 $__grouping = sp + 144|0;
 $__buf = sp + 160|0;
 $__a_end = sp + 176|0;
 $__g = sp + 184|0;
 $__g_end = sp + 344|0;
 $__dc = sp + 352|0;
 $__in_units = sp + 360|0;
 $__exp = sp + 368|0;
 $1 = $__atoms;
 
 $gep_int = $__atoms;
 $2 = $gep_int;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$2,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 
 L1: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   
   if ($7) {
    $10 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $11 = $gep11;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 8)|0;
    $$pre36 = $gep13;
    
    $$pre$phi35Z2D = $11;$$pre$phi37Z2D = $$pre36;$12 = $11;
   } else {
    $gep_int7 = $__buf;
    $gep = (($gep_int7) + 8)|0;
    $8 = $gep;
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = $__buf;
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 1)|0;
    $$pre34 = $gep9;
    
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $8;$12 = $9;
   }
   
   
   
   HEAP32[$__a_end>>2] = $12;
   $13 = $__g;
   
   $gep_int14 = $__g;
   $14 = $gep_int14;
   HEAP32[$__g_end>>2] = $14;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $gep_int15 = $__b;
   $15 = $gep_int15;
   $gep_int16 = $__e;
   $16 = $gep_int16;
   $gep_int17 = $__buf;
   $17 = $gep_int17;
   $gep_int18 = $__buf;
   $gep19 = (($gep_int18) + 4)|0;
   $18 = $gep19;
   $19 = HEAP32[$__decimal_point>>2]|0;
   $20 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$15>>2]|0;
   
   $$pre$i$i$i5 = $$pre;$__a$0 = $12;
   L7: while(1) {
    
    
    $21 = ($$pre$i$i$i5|0)==(0);
    
    do {
     if ($21) {
      $36 = 0;$37 = 1;
     } else {
      $gep_int20 = $$pre$i$i$i5;
      $gep21 = (($gep_int20) + 12)|0;
      $22 = $gep21;
      $23 = HEAP32[$22>>2]|0;
      $gep_int22 = $$pre$i$i$i5;
      $gep23 = (($gep_int22) + 16)|0;
      $24 = $gep23;
      $25 = HEAP32[$24>>2]|0;
      $26 = ($23|0)==($25|0);
      
      if ($26) {
       $27 = $$pre$i$i$i5;
       $28 = HEAP32[$$pre$i$i$i5>>2]|0;
       $gep_int24 = $28;
       $gep25 = (($gep_int24) + 36)|0;
       $29 = $gep25;
       $30 = HEAP32[$29>>2]|0;
       __THREW__ = 0;
       $31 = invoke_ii($30|0,$$pre$i$i$i5|0)|0;
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       
       if ($33) {
        label = 34;
        break L7;
       } else {
        $$0$i$i$i$i3 = $31;
       }
      } else {
       $34 = HEAP32[$23>>2]|0;
       
       $$0$i$i$i$i3 = $34;
      }
      
      $35 = ($$0$i$i$i$i3|0)==(-1);
      
      if (!($35)) {
       $36 = $$pre$i$i$i5;$37 = 0;
       break;
      }
      HEAP32[$15>>2] = 0;
      
      $36 = 0;$37 = 1;
     }
    } while(0);
    
    
    $38 = HEAP32[$16>>2]|0;
    $39 = ($38|0)==(0);
    
    do {
     if ($39) {
      label = 18;
     } else {
      $gep_int26 = $38;
      $gep27 = (($gep_int26) + 12)|0;
      $40 = $gep27;
      $41 = HEAP32[$40>>2]|0;
      $gep_int28 = $38;
      $gep29 = (($gep_int28) + 16)|0;
      $42 = $gep29;
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      
      if ($44) {
       $45 = $38;
       $46 = HEAP32[$38>>2]|0;
       $gep_int30 = $46;
       $gep31 = (($gep_int30) + 36)|0;
       $47 = $gep31;
       $48 = HEAP32[$47>>2]|0;
       __THREW__ = 0;
       $49 = invoke_ii($48|0,$38|0)|0;
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       
       if ($51) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $49;
       }
      } else {
       $52 = HEAP32[$41>>2]|0;
       
       $$0$i$i1$i$i9 = $52;
      }
      
      $53 = ($$0$i$i1$i$i9|0)==(-1);
      
      if ($53) {
       HEAP32[$16>>2] = 0;
       
       label = 18;
       break;
      } else {
       
       if ($37) {
        $54 = $38;
        break;
       } else {
        $$pre$i3$i$i = $38;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     
     if ($37) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $54 = 0;
     }
    }
    
    $55 = HEAP32[$__a_end>>2]|0;
    $56 = $55;
    $57 = $__a$0;
    $58 = (($56) - ($57))|0;
    $59 = HEAP8[$__buf]|0;
    $60 = $59 & 1;
    $61 = ($60<<24>>24)==(0);
    
    if ($61) {
     $63 = $59&255;
     $64 = $63 >>> 1;
     
     $65 = $64;
    } else {
     $62 = HEAP32[$18>>2]|0;
     
     $65 = $62;
    }
    
    $66 = ($58|0)==($65|0);
    
    if ($66) {
     
     if ($61) {
      $68 = $59&255;
      $69 = $68 >>> 1;
      $70 = $59&255;
      $71 = $70 >>> 1;
      
      $72 = $69;$73 = $71;
     } else {
      $67 = HEAP32[$18>>2]|0;
      
      $72 = $67;$73 = $67;
     }
     
     
     $74 = $73 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$74|0,0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     
     if ($76) {
      label = 34;
      break;
     }
     $77 = HEAP8[$__buf]|0;
     $78 = $77 & 1;
     $79 = ($78<<24>>24)==(0);
     
     if ($79) {
      $82 = 10;
     } else {
      $80 = HEAP32[$17>>2]|0;
      $81 = $80 & -2;
      $phitmp$i23 = (($81) + -1)|0;
      
      $82 = $phitmp$i23;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$82|0,0);
     $83 = __THREW__; __THREW__ = 0;
     $84 = $83&1;
     
     if ($84) {
      label = 34;
      break;
     }
     $85 = HEAP8[$__buf]|0;
     $86 = $85 & 1;
     $87 = ($86<<24>>24)==(0);
     
     if ($87) {
      $89 = $$pre$phi35Z2D;
     } else {
      $88 = HEAP32[$$pre$phi37Z2D>>2]|0;
      
      $89 = $88;
     }
     
     $gep_int32 = $89;
     $gep33 = (($gep_int32) + ($72))|0;
     $90 = $gep33;
     HEAP32[$__a_end>>2] = $90;
     
     $__a$1 = $89;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int34 = $36;
    $gep35 = (($gep_int34) + 12)|0;
    $95 = $gep35;
    $96 = HEAP32[$95>>2]|0;
    $gep_int36 = $36;
    $gep37 = (($gep_int36) + 16)|0;
    $97 = $gep37;
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    
    if ($99) {
     $100 = $36;
     $101 = HEAP32[$36>>2]|0;
     $gep_int38 = $101;
     $gep39 = (($gep_int38) + 36)|0;
     $102 = $gep39;
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     $104 = invoke_ii($103|0,$36|0)|0;
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     
     if ($106) {
      label = 34;
      break;
     } else {
      $$0$i$i = $104;
     }
    } else {
     $107 = HEAP32[$96>>2]|0;
     
     $$0$i$i = $107;
    }
    
    $108 = __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$19,$20,$__grouping,$14,$__g_end,$__dc,$2)|0;
    $109 = ($108|0)==(0);
    
    if (!($109)) {
     $$pre$i3$i$i = $54;$__a$2 = $__a$1;
     break;
    }
    $110 = HEAP32[$95>>2]|0;
    $111 = HEAP32[$97>>2]|0;
    $112 = ($110|0)==($111|0);
    
    if ($112) {
     $113 = $36;
     $114 = HEAP32[$36>>2]|0;
     $gep_int40 = $114;
     $gep41 = (($gep_int40) + 40)|0;
     $115 = $gep41;
     $116 = HEAP32[$115>>2]|0;
     __THREW__ = 0;
     u$66 = invoke_ii($116|0,$36|0)|0;
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     
     if ($118) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int42 = $110;
     $gep43 = (($gep_int42) + 4)|0;
     $119 = $gep43;
     HEAP32[$95>>2] = $119;
     
     $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $expanded = 69;
    $91 = ___cxa_find_matching_catch(-1,-1)|0;
    $92 = tempRet0;
    
    $lpad$phi$index = $91;$lpad$phi$index2 = $92;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $120 = $__grouping;
   $121 = HEAP8[$__grouping]|0;
   $122 = $121 & 1;
   $123 = ($122<<24>>24)==(0);
   
   if ($123) {
    $126 = $121&255;
    $127 = $126 >>> 1;
    
    $128 = $127;
   } else {
    $gep_int44 = $__grouping;
    $gep45 = (($gep_int44) + 4)|0;
    $124 = $gep45;
    $125 = HEAP32[$124>>2]|0;
    
    $128 = $125;
   }
   
   $129 = ($128|0)==(0);
   
   do {
    if (!($129)) {
     $130 = HEAP8[$__in_units]|0;
     $131 = ($130<<24>>24)==(0);
     
     if ($131) {
      break;
     }
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $gep_int46 = $132;
     $gep47 = (($gep_int46) + 4)|0;
     $138 = $gep47;
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
     
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = +invoke_diii(2,$__a$2|0,$139|0,$__err|0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   
   if ($142) {
    break;
   }
   HEAPF64[$__v>>3] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$14,$143,$__err);
   $144 = ($36|0)==(0);
   
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $gep_int48 = $36;
     $gep49 = (($gep_int48) + 12)|0;
     $145 = $gep49;
     $146 = HEAP32[$145>>2]|0;
     $gep_int50 = $36;
     $gep51 = (($gep_int50) + 16)|0;
     $147 = $gep51;
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     
     if ($149) {
      $150 = $36;
      $151 = HEAP32[$36>>2]|0;
      $gep_int52 = $151;
      $gep53 = (($gep_int52) + 36)|0;
      $152 = $gep53;
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = invoke_ii($153|0,$36|0)|0;
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      
      if ($156) {
       break L1;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      
      $$0$i$i$i$i = $157;
     }
     
     $158 = ($$0$i$i$i$i|0)==(-1);
     
     if (!($158)) {
      $159 = $36;$160 = 0;
      break;
     }
     HEAP32[$15>>2] = 0;
     
     $159 = 0;$160 = 1;
    }
   } while(0);
   
   
   $161 = ($$pre$i3$i$i|0)==(0);
   
   do {
    if ($161) {
     label = 64;
    } else {
     $gep_int54 = $$pre$i3$i$i;
     $gep55 = (($gep_int54) + 12)|0;
     $162 = $gep55;
     $163 = HEAP32[$162>>2]|0;
     $gep_int56 = $$pre$i3$i$i;
     $gep57 = (($gep_int56) + 16)|0;
     $164 = $gep57;
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$$pre$i3$i$i>>2]|0;
      $gep_int58 = $168;
      $gep59 = (($gep_int58) + 36)|0;
      $169 = $gep59;
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = invoke_ii($170|0,$$pre$i3$i$i|0)|0;
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      
      if ($173) {
       break L1;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      
      $$0$i$i1$i$i = $174;
     }
     
     $175 = ($$0$i$i1$i$i|0)==(-1);
     
     if ($175) {
      HEAP32[$16>>2] = 0;
      
      label = 64;
      break;
     }
     
     if (!($160)) {
      break;
     }
     $gep_int60 = $agg$result;
     $178 = $gep_int60;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 64) {
     
     if ($160) {
      break;
     }
     $gep_int60 = $agg$result;
     $178 = $gep_int60;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   
   $gep_int60 = $agg$result;
   $178 = $gep_int60;
   HEAP32[$178>>2] = $159;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $93 = ___cxa_find_matching_catch(-1,-1)|0;
 $94 = tempRet0;
 
 $lpad$phi$index = $93;$lpad$phi$index2 = $94;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep_int = 0, $gep_int2 = 0;
 var $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int2 = $1;
 $5 = $gep_int2;
 HEAP32[$5>>2] = $4;
 $gep_int3 = $__e;
 $6 = $gep_int3;
 $7 = HEAP32[$6>>2]|0;
 $gep_int4 = $2;
 $8 = $gep_int4;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre33 = 0, $$pre34 = 0, $$pre36 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $expanded = 0, $expanded6 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0;
 var $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0;
 var $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0;
 var $gep_int60 = 0, $gep_int7 = 0, $gep_int8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0, u$66 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 376|0;
 $__atoms = sp;
 $__decimal_point = sp + 128|0;
 $__thousands_sep = sp + 136|0;
 $__grouping = sp + 144|0;
 $__buf = sp + 160|0;
 $__a_end = sp + 176|0;
 $__g = sp + 184|0;
 $__g_end = sp + 344|0;
 $__dc = sp + 352|0;
 $__in_units = sp + 360|0;
 $__exp = sp + 368|0;
 $1 = $__atoms;
 
 $gep_int = $__atoms;
 $2 = $gep_int;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$2,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(18,$__buf|0,10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 
 L1: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   
   if ($7) {
    $10 = $__buf;
    $gep_int10 = $__buf;
    $gep11 = (($gep_int10) + 1)|0;
    $11 = $gep11;
    $gep_int12 = $__buf;
    $gep13 = (($gep_int12) + 8)|0;
    $$pre36 = $gep13;
    
    $$pre$phi35Z2D = $11;$$pre$phi37Z2D = $$pre36;$12 = $11;
   } else {
    $gep_int7 = $__buf;
    $gep = (($gep_int7) + 8)|0;
    $8 = $gep;
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = $__buf;
    $gep_int8 = $__buf;
    $gep9 = (($gep_int8) + 1)|0;
    $$pre34 = $gep9;
    
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $8;$12 = $9;
   }
   
   
   
   HEAP32[$__a_end>>2] = $12;
   $13 = $__g;
   
   $gep_int14 = $__g;
   $14 = $gep_int14;
   HEAP32[$__g_end>>2] = $14;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $gep_int15 = $__b;
   $15 = $gep_int15;
   $gep_int16 = $__e;
   $16 = $gep_int16;
   $gep_int17 = $__buf;
   $17 = $gep_int17;
   $gep_int18 = $__buf;
   $gep19 = (($gep_int18) + 4)|0;
   $18 = $gep19;
   $19 = HEAP32[$__decimal_point>>2]|0;
   $20 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$15>>2]|0;
   
   $$pre$i$i$i5 = $$pre;$__a$0 = $12;
   L7: while(1) {
    
    
    $21 = ($$pre$i$i$i5|0)==(0);
    
    do {
     if ($21) {
      $36 = 0;$37 = 1;
     } else {
      $gep_int20 = $$pre$i$i$i5;
      $gep21 = (($gep_int20) + 12)|0;
      $22 = $gep21;
      $23 = HEAP32[$22>>2]|0;
      $gep_int22 = $$pre$i$i$i5;
      $gep23 = (($gep_int22) + 16)|0;
      $24 = $gep23;
      $25 = HEAP32[$24>>2]|0;
      $26 = ($23|0)==($25|0);
      
      if ($26) {
       $27 = $$pre$i$i$i5;
       $28 = HEAP32[$$pre$i$i$i5>>2]|0;
       $gep_int24 = $28;
       $gep25 = (($gep_int24) + 36)|0;
       $29 = $gep25;
       $30 = HEAP32[$29>>2]|0;
       __THREW__ = 0;
       $31 = invoke_ii($30|0,$$pre$i$i$i5|0)|0;
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       
       if ($33) {
        label = 34;
        break L7;
       } else {
        $$0$i$i$i$i3 = $31;
       }
      } else {
       $34 = HEAP32[$23>>2]|0;
       
       $$0$i$i$i$i3 = $34;
      }
      
      $35 = ($$0$i$i$i$i3|0)==(-1);
      
      if (!($35)) {
       $36 = $$pre$i$i$i5;$37 = 0;
       break;
      }
      HEAP32[$15>>2] = 0;
      
      $36 = 0;$37 = 1;
     }
    } while(0);
    
    
    $38 = HEAP32[$16>>2]|0;
    $39 = ($38|0)==(0);
    
    do {
     if ($39) {
      label = 18;
     } else {
      $gep_int26 = $38;
      $gep27 = (($gep_int26) + 12)|0;
      $40 = $gep27;
      $41 = HEAP32[$40>>2]|0;
      $gep_int28 = $38;
      $gep29 = (($gep_int28) + 16)|0;
      $42 = $gep29;
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      
      if ($44) {
       $45 = $38;
       $46 = HEAP32[$38>>2]|0;
       $gep_int30 = $46;
       $gep31 = (($gep_int30) + 36)|0;
       $47 = $gep31;
       $48 = HEAP32[$47>>2]|0;
       __THREW__ = 0;
       $49 = invoke_ii($48|0,$38|0)|0;
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       
       if ($51) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $49;
       }
      } else {
       $52 = HEAP32[$41>>2]|0;
       
       $$0$i$i1$i$i9 = $52;
      }
      
      $53 = ($$0$i$i1$i$i9|0)==(-1);
      
      if ($53) {
       HEAP32[$16>>2] = 0;
       
       label = 18;
       break;
      } else {
       
       if ($37) {
        $54 = $38;
        break;
       } else {
        $$pre$i3$i$i = $38;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     
     if ($37) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $54 = 0;
     }
    }
    
    $55 = HEAP32[$__a_end>>2]|0;
    $56 = $55;
    $57 = $__a$0;
    $58 = (($56) - ($57))|0;
    $59 = HEAP8[$__buf]|0;
    $60 = $59 & 1;
    $61 = ($60<<24>>24)==(0);
    
    if ($61) {
     $63 = $59&255;
     $64 = $63 >>> 1;
     
     $65 = $64;
    } else {
     $62 = HEAP32[$18>>2]|0;
     
     $65 = $62;
    }
    
    $66 = ($58|0)==($65|0);
    
    if ($66) {
     
     if ($61) {
      $68 = $59&255;
      $69 = $68 >>> 1;
      $70 = $59&255;
      $71 = $70 >>> 1;
      
      $72 = $69;$73 = $71;
     } else {
      $67 = HEAP32[$18>>2]|0;
      
      $72 = $67;$73 = $67;
     }
     
     
     $74 = $73 << 1;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$74|0,0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     
     if ($76) {
      label = 34;
      break;
     }
     $77 = HEAP8[$__buf]|0;
     $78 = $77 & 1;
     $79 = ($78<<24>>24)==(0);
     
     if ($79) {
      $82 = 10;
     } else {
      $80 = HEAP32[$17>>2]|0;
      $81 = $80 & -2;
      $phitmp$i23 = (($81) + -1)|0;
      
      $82 = $phitmp$i23;
     }
     
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,$82|0,0);
     $83 = __THREW__; __THREW__ = 0;
     $84 = $83&1;
     
     if ($84) {
      label = 34;
      break;
     }
     $85 = HEAP8[$__buf]|0;
     $86 = $85 & 1;
     $87 = ($86<<24>>24)==(0);
     
     if ($87) {
      $89 = $$pre$phi35Z2D;
     } else {
      $88 = HEAP32[$$pre$phi37Z2D>>2]|0;
      
      $89 = $88;
     }
     
     $gep_int32 = $89;
     $gep33 = (($gep_int32) + ($72))|0;
     $90 = $gep33;
     HEAP32[$__a_end>>2] = $90;
     
     $__a$1 = $89;
    } else {
     $__a$1 = $__a$0;
    }
    
    $gep_int34 = $36;
    $gep35 = (($gep_int34) + 12)|0;
    $95 = $gep35;
    $96 = HEAP32[$95>>2]|0;
    $gep_int36 = $36;
    $gep37 = (($gep_int36) + 16)|0;
    $97 = $gep37;
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    
    if ($99) {
     $100 = $36;
     $101 = HEAP32[$36>>2]|0;
     $gep_int38 = $101;
     $gep39 = (($gep_int38) + 36)|0;
     $102 = $gep39;
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     $104 = invoke_ii($103|0,$36|0)|0;
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     
     if ($106) {
      label = 34;
      break;
     } else {
      $$0$i$i = $104;
     }
    } else {
     $107 = HEAP32[$96>>2]|0;
     
     $$0$i$i = $107;
    }
    
    $108 = __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$19,$20,$__grouping,$14,$__g_end,$__dc,$2)|0;
    $109 = ($108|0)==(0);
    
    if (!($109)) {
     $$pre$i3$i$i = $54;$__a$2 = $__a$1;
     break;
    }
    $110 = HEAP32[$95>>2]|0;
    $111 = HEAP32[$97>>2]|0;
    $112 = ($110|0)==($111|0);
    
    if ($112) {
     $113 = $36;
     $114 = HEAP32[$36>>2]|0;
     $gep_int40 = $114;
     $gep41 = (($gep_int40) + 40)|0;
     $115 = $gep41;
     $116 = HEAP32[$115>>2]|0;
     __THREW__ = 0;
     u$66 = invoke_ii($116|0,$36|0)|0;
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     
     if ($118) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $gep_int42 = $110;
     $gep43 = (($gep_int42) + 4)|0;
     $119 = $gep43;
     HEAP32[$95>>2] = $119;
     
     $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $expanded = 69;
    $91 = ___cxa_find_matching_catch(-1,-1)|0;
    $92 = tempRet0;
    
    $lpad$phi$index = $91;$lpad$phi$index2 = $92;
    
    
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable
   }
   
   
   $120 = $__grouping;
   $121 = HEAP8[$__grouping]|0;
   $122 = $121 & 1;
   $123 = ($122<<24>>24)==(0);
   
   if ($123) {
    $126 = $121&255;
    $127 = $126 >>> 1;
    
    $128 = $127;
   } else {
    $gep_int44 = $__grouping;
    $gep45 = (($gep_int44) + 4)|0;
    $124 = $gep45;
    $125 = HEAP32[$124>>2]|0;
    
    $128 = $125;
   }
   
   $129 = ($128|0)==(0);
   
   do {
    if (!($129)) {
     $130 = HEAP8[$__in_units]|0;
     $131 = ($130<<24>>24)==(0);
     
     if ($131) {
      break;
     }
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $gep_int46 = $132;
     $gep47 = (($gep_int46) + 4)|0;
     $138 = $gep47;
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
     
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = +invoke_diii(3,$__a$2|0,$139|0,$__err|0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   
   if ($142) {
    break;
   }
   HEAPF64[$__v>>3] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$14,$143,$__err);
   $144 = ($36|0)==(0);
   
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $gep_int48 = $36;
     $gep49 = (($gep_int48) + 12)|0;
     $145 = $gep49;
     $146 = HEAP32[$145>>2]|0;
     $gep_int50 = $36;
     $gep51 = (($gep_int50) + 16)|0;
     $147 = $gep51;
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     
     if ($149) {
      $150 = $36;
      $151 = HEAP32[$36>>2]|0;
      $gep_int52 = $151;
      $gep53 = (($gep_int52) + 36)|0;
      $152 = $gep53;
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = invoke_ii($153|0,$36|0)|0;
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      
      if ($156) {
       break L1;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      
      $$0$i$i$i$i = $157;
     }
     
     $158 = ($$0$i$i$i$i|0)==(-1);
     
     if (!($158)) {
      $159 = $36;$160 = 0;
      break;
     }
     HEAP32[$15>>2] = 0;
     
     $159 = 0;$160 = 1;
    }
   } while(0);
   
   
   $161 = ($$pre$i3$i$i|0)==(0);
   
   do {
    if ($161) {
     label = 64;
    } else {
     $gep_int54 = $$pre$i3$i$i;
     $gep55 = (($gep_int54) + 12)|0;
     $162 = $gep55;
     $163 = HEAP32[$162>>2]|0;
     $gep_int56 = $$pre$i3$i$i;
     $gep57 = (($gep_int56) + 16)|0;
     $164 = $gep57;
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$$pre$i3$i$i>>2]|0;
      $gep_int58 = $168;
      $gep59 = (($gep_int58) + 36)|0;
      $169 = $gep59;
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = invoke_ii($170|0,$$pre$i3$i$i|0)|0;
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      
      if ($173) {
       break L1;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      
      $$0$i$i1$i$i = $174;
     }
     
     $175 = ($$0$i$i1$i$i|0)==(-1);
     
     if ($175) {
      HEAP32[$16>>2] = 0;
      
      label = 64;
      break;
     }
     
     if (!($160)) {
      break;
     }
     $gep_int60 = $agg$result;
     $178 = $gep_int60;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 64) {
     
     if ($160) {
      break;
     }
     $gep_int60 = $agg$result;
     $178 = $gep_int60;
     HEAP32[$178>>2] = $159;
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   
   $gep_int60 = $agg$result;
   $178 = $gep_int60;
   HEAP32[$178>>2] = $159;
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded6 = 69;
 $93 = ___cxa_find_matching_catch(-1,-1)|0;
 $94 = tempRet0;
 
 $lpad$phi$index = $93;$lpad$phi$index2 = $94;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i14 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i10 = 0, $$pre$phi37Z2D = 0, $$pre$phi39Z2D = 0, $$pre35 = 0, $$pre36 = 0, $$pre38 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0;
 var $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0, $gep106 = 0, $gep108 = 0, $gep110 = 0, $gep37 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep49 = 0;
 var $gep52 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep84 = 0, $gep86 = 0, $gep88 = 0, $gep90 = 0, $gep92 = 0, $gep94 = 0, $gep_array = 0;
 var $gep_int = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int111 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int51 = 0;
 var $gep_int53 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int63 = 0, $gep_int64 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int83 = 0, $gep_int85 = 0;
 var $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int96 = 0, $gep_int97 = 0, $gep_int98 = 0, $gep_int99 = 0, $phitmp$i26 = 0, $this2$i$i$i = 0, $this2$i$i$i6 = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$22 = 0, u$24 = 0;
 var u$75 = 0, u$88 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $vararg_buffer = sp;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__atoms = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__grouping = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__buf = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__a_end = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__g = STACKTOP; STACKTOP = STACKTOP + 160|0;
 $__g_end = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__dc = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = $__atoms;
 
 $this2$i$i$i = $__grouping;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(41,$1|0,$__iob|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 
 if ($4) {
  $expanded19 = 69;
  $128 = ___cxa_find_matching_catch(-1,-1)|0;
  $129 = tempRet0;
  
  $$0 = $128;$$01 = $129;
  
  
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable
 }
 $gep_int = $1;
 $5 = $gep_int;
 $6 = HEAP32[$5>>2]|0;
 $7 = $__p$i$i$i$i;
 
 $expanded8 = 8472;
 $gep_int33 = 8472;
 $expanded = $gep_int33;
 $8 = HEAP32[$expanded>>2]|0;
 $9 = ($8|0)==(-1);
 
 if ($9) {
  label = 4;
 } else {
  $gep_int34 = $__p$i$i$i$i;
  $10 = $gep_int34;
  $expanded9 = 8472;
  HEAP32[$10>>2] = $expanded9;
  $gep_int35 = $__p$i$i$i$i;
  $gep = (($gep_int35) + 4)|0;
  $11 = $gep;
  $expanded10 = 177;
  HEAP32[$11>>2] = $expanded10;
  $gep_int36 = $__p$i$i$i$i;
  $gep37 = (($gep_int36) + 8)|0;
  $12 = $gep37;
  HEAP32[$12>>2] = 0;
  __THREW__ = 0;
  $expanded12 = 8472;
  $gep_int38 = 8472;
  $expanded11 = $gep_int38;
  invoke_viii(17,$expanded11|0,$7|0,178);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  
  if (!($14)) {
   label = 4;
  }
 }
 L7: do {
  if ((label|0) == 4) {
   
   $expanded14 = 8472;
   $gep_int39 = 8472;
   $gep40 = (($gep_int39) + 4)|0;
   $expanded13 = $gep40;
   $15 = HEAP32[$expanded13>>2]|0;
   $16 = (($15) + -1)|0;
   $gep_int41 = $6;
   $gep42 = (($gep_int41) + 12)|0;
   $17 = $gep42;
   $18 = HEAP32[$17>>2]|0;
   $gep_int43 = $6;
   $gep44 = (($gep_int43) + 8)|0;
   $19 = $gep44;
   $20 = HEAP32[$19>>2]|0;
   $21 = $18;
   $22 = $20;
   $23 = (($21) - ($22))|0;
   $24 = $23 >> 2;
   $25 = ($24>>>0)>($16>>>0);
   
   do {
    if ($25) {
     $gep_int45 = $20;
     $gep_array = $16<<2;
     $gep46 = (($gep_int45) + ($gep_array))|0;
     $26 = $gep46;
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(0);
     
     if ($28) {
      break;
     }
     $33 = $27;
     $gep_int47 = $__atoms;
     $34 = $gep_int47;
     $35 = $27;
     $36 = HEAP32[$27>>2]|0;
     $gep_int48 = $36;
     $gep49 = (($gep_int48) + 48)|0;
     $37 = $gep49;
     $38 = HEAP32[$37>>2]|0;
     __THREW__ = 0;
     $gep_int50 = 7024;
     $expanded17 = $gep_int50;
     $gep_int51 = 7024;
     $gep52 = (($gep_int51) + 26)|0;
     $expanded18 = $gep52;
     u$22 = invoke_iiiii($38|0,$33|0,$expanded17|0,$expanded18|0,$34|0)|0;
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     
     if ($40) {
      break L7;
     }
     $41 = HEAP32[$5>>2]|0;
     $gep_int53 = $41;
     $42 = $gep_int53;
     u$24 = __ZNSt3__114__shared_count16__release_sharedEv($42)|0;
     $this2$i$i$i6 = $__buf;
     ;HEAP32[$this2$i$i$i6+0>>2]=0|0;HEAP32[$this2$i$i$i6+4>>2]=0|0;HEAP32[$this2$i$i$i6+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(18,$__buf|0,10,0);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     
     L13: do {
      if ($44) {
       label = 45;
      } else {
       $45 = HEAP8[$__buf]|0;
       $46 = $45 & 1;
       $47 = ($46<<24>>24)==(0);
       
       if ($47) {
        $50 = $__buf;
        $gep_int58 = $__buf;
        $gep59 = (($gep_int58) + 1)|0;
        $51 = $gep59;
        $gep_int60 = $__buf;
        $gep61 = (($gep_int60) + 8)|0;
        $$pre38 = $gep61;
        
        $$pre$phi37Z2D = $51;$$pre$phi39Z2D = $$pre38;$52 = $51;
       } else {
        $gep_int54 = $__buf;
        $gep55 = (($gep_int54) + 8)|0;
        $48 = $gep55;
        $49 = HEAP32[$48>>2]|0;
        $$pre35 = $__buf;
        $gep_int56 = $__buf;
        $gep57 = (($gep_int56) + 1)|0;
        $$pre36 = $gep57;
        
        $$pre$phi37Z2D = $$pre36;$$pre$phi39Z2D = $48;$52 = $49;
       }
       
       
       
       HEAP32[$__a_end>>2] = $52;
       $53 = $__g;
       
       $gep_int62 = $__g;
       $54 = $gep_int62;
       HEAP32[$__g_end>>2] = $54;
       HEAP32[$__dc>>2] = 0;
       $gep_int63 = $__b;
       $55 = $gep_int63;
       $gep_int64 = $__e;
       $56 = $gep_int64;
       $gep_int65 = $__buf;
       $57 = $gep_int65;
       $gep_int66 = $__buf;
       $gep67 = (($gep_int66) + 4)|0;
       $58 = $gep67;
       $$pre = HEAP32[$55>>2]|0;
       
       $$pre$i$i$i10 = $$pre;$__a$0 = $52;
       L19: while(1) {
        
        
        $59 = ($$pre$i$i$i10|0)==(0);
        
        do {
         if ($59) {
          $74 = 0;$75 = 1;
         } else {
          $gep_int68 = $$pre$i$i$i10;
          $gep69 = (($gep_int68) + 12)|0;
          $60 = $gep69;
          $61 = HEAP32[$60>>2]|0;
          $gep_int70 = $$pre$i$i$i10;
          $gep71 = (($gep_int70) + 16)|0;
          $62 = $gep71;
          $63 = HEAP32[$62>>2]|0;
          $64 = ($61|0)==($63|0);
          
          if ($64) {
           $65 = $$pre$i$i$i10;
           $66 = HEAP32[$$pre$i$i$i10>>2]|0;
           $gep_int72 = $66;
           $gep73 = (($gep_int72) + 36)|0;
           $67 = $gep73;
           $68 = HEAP32[$67>>2]|0;
           __THREW__ = 0;
           $69 = invoke_ii($68|0,$$pre$i$i$i10|0)|0;
           $70 = __THREW__; __THREW__ = 0;
           $71 = $70&1;
           
           if ($71) {
            label = 44;
            break L19;
           } else {
            $$0$i$i$i$i8 = $69;
           }
          } else {
           $72 = HEAP32[$61>>2]|0;
           
           $$0$i$i$i$i8 = $72;
          }
          
          $73 = ($$0$i$i$i$i8|0)==(-1);
          
          if (!($73)) {
           $74 = $$pre$i$i$i10;$75 = 0;
           break;
          }
          HEAP32[$55>>2] = 0;
          
          $74 = 0;$75 = 1;
         }
        } while(0);
        
        
        $76 = HEAP32[$56>>2]|0;
        $77 = ($76|0)==(0);
        
        do {
         if ($77) {
          label = 26;
         } else {
          $gep_int74 = $76;
          $gep75 = (($gep_int74) + 12)|0;
          $78 = $gep75;
          $79 = HEAP32[$78>>2]|0;
          $gep_int76 = $76;
          $gep77 = (($gep_int76) + 16)|0;
          $80 = $gep77;
          $81 = HEAP32[$80>>2]|0;
          $82 = ($79|0)==($81|0);
          
          if ($82) {
           $83 = $76;
           $84 = HEAP32[$76>>2]|0;
           $gep_int78 = $84;
           $gep79 = (($gep_int78) + 36)|0;
           $85 = $gep79;
           $86 = HEAP32[$85>>2]|0;
           __THREW__ = 0;
           $87 = invoke_ii($86|0,$76|0)|0;
           $88 = __THREW__; __THREW__ = 0;
           $89 = $88&1;
           
           if ($89) {
            label = 44;
            break L19;
           } else {
            $$0$i$i1$i$i14 = $87;
           }
          } else {
           $90 = HEAP32[$79>>2]|0;
           
           $$0$i$i1$i$i14 = $90;
          }
          
          $91 = ($$0$i$i1$i$i14|0)==(-1);
          
          if ($91) {
           HEAP32[$56>>2] = 0;
           
           label = 26;
           break;
          } else {
           
           if ($75) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
         }
        } while(0);
        if ((label|0) == 26) {
         label = 0;
         
         if ($75) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $92 = HEAP32[$__a_end>>2]|0;
        $93 = $92;
        $94 = $__a$0;
        $95 = (($93) - ($94))|0;
        $96 = HEAP8[$__buf]|0;
        $97 = $96 & 1;
        $98 = ($97<<24>>24)==(0);
        
        if ($98) {
         $100 = $96&255;
         $101 = $100 >>> 1;
         
         $102 = $101;
        } else {
         $99 = HEAP32[$58>>2]|0;
         
         $102 = $99;
        }
        
        $103 = ($95|0)==($102|0);
        
        if ($103) {
         
         if ($98) {
          $105 = $96&255;
          $106 = $105 >>> 1;
          $107 = $96&255;
          $108 = $107 >>> 1;
          
          $109 = $106;$110 = $108;
         } else {
          $104 = HEAP32[$58>>2]|0;
          
          $109 = $104;$110 = $104;
         }
         
         
         $111 = $110 << 1;
         __THREW__ = 0;
         invoke_viii(18,$__buf|0,$111|0,0);
         $112 = __THREW__; __THREW__ = 0;
         $113 = $112&1;
         
         if ($113) {
          label = 44;
          break;
         }
         $114 = HEAP8[$__buf]|0;
         $115 = $114 & 1;
         $116 = ($115<<24>>24)==(0);
         
         if ($116) {
          $119 = 10;
         } else {
          $117 = HEAP32[$57>>2]|0;
          $118 = $117 & -2;
          $phitmp$i26 = (($118) + -1)|0;
          
          $119 = $phitmp$i26;
         }
         
         __THREW__ = 0;
         invoke_viii(18,$__buf|0,$119|0,0);
         $120 = __THREW__; __THREW__ = 0;
         $121 = $120&1;
         
         if ($121) {
          label = 44;
          break;
         }
         $122 = HEAP8[$__buf]|0;
         $123 = $122 & 1;
         $124 = ($123<<24>>24)==(0);
         
         if ($124) {
          $126 = $$pre$phi37Z2D;
         } else {
          $125 = HEAP32[$$pre$phi39Z2D>>2]|0;
          
          $126 = $125;
         }
         
         $gep_int80 = $126;
         $gep81 = (($gep_int80) + ($109))|0;
         $127 = $gep81;
         HEAP32[$__a_end>>2] = $127;
         
         $__a$1 = $126;
        } else {
         $__a$1 = $__a$0;
        }
        
        $gep_int83 = $74;
        $gep84 = (($gep_int83) + 12)|0;
        $138 = $gep84;
        $139 = HEAP32[$138>>2]|0;
        $gep_int85 = $74;
        $gep86 = (($gep_int85) + 16)|0;
        $140 = $gep86;
        $141 = HEAP32[$140>>2]|0;
        $142 = ($139|0)==($141|0);
        
        if ($142) {
         $143 = $74;
         $144 = HEAP32[$74>>2]|0;
         $gep_int87 = $144;
         $gep88 = (($gep_int87) + 36)|0;
         $145 = $gep88;
         $146 = HEAP32[$145>>2]|0;
         __THREW__ = 0;
         $147 = invoke_ii($146|0,$74|0)|0;
         $148 = __THREW__; __THREW__ = 0;
         $149 = $148&1;
         
         if ($149) {
          label = 44;
          break;
         } else {
          $$0$i$i = $147;
         }
        } else {
         $150 = HEAP32[$139>>2]|0;
         
         $$0$i$i = $150;
        }
        
        $151 = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$54,$__g_end,$34)|0;
        $152 = ($151|0)==(0);
        
        if (!($152)) {
         $__a$2 = $__a$1;
         break;
        }
        $153 = HEAP32[$138>>2]|0;
        $154 = HEAP32[$140>>2]|0;
        $155 = ($153|0)==($154|0);
        
        if ($155) {
         $156 = $74;
         $157 = HEAP32[$74>>2]|0;
         $gep_int89 = $157;
         $gep90 = (($gep_int89) + 40)|0;
         $158 = $gep90;
         $159 = HEAP32[$158>>2]|0;
         __THREW__ = 0;
         u$88 = invoke_ii($159|0,$74|0)|0;
         $160 = __THREW__; __THREW__ = 0;
         $161 = $160&1;
         
         if ($161) {
          label = 44;
          break;
         } else {
          $$pre$i$i$i10 = $74;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $gep_int91 = $153;
         $gep92 = (($gep_int91) + 4)|0;
         $162 = $gep92;
         HEAP32[$138>>2] = $162;
         
         $$pre$i$i$i10 = $74;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 44) {
        $expanded21 = 69;
        $134 = ___cxa_find_matching_catch(-1,-1)|0;
        $135 = tempRet0;
        
        $eh$lpad$body$index3Z2D = $135;$eh$lpad$body$indexZ2D = $134;
        break;
       }
       
       $gep_int93 = $__a$2;
       $gep94 = (($gep_int93) + 3)|0;
       $163 = $gep94;
       HEAP8[$163] = 0;
       $gep_int95 = 8376;
       $expanded23 = $gep_int95;
       $164 = HEAP8[$expanded23]|0;
       $165 = ($164<<24>>24)==(0);
       
       do {
        if ($165) {
         $expanded24 = 8376;
         $166 = ___cxa_guard_acquire($expanded24|0)|0;
         $167 = ($166|0)==(0);
         
         if ($167) {
          break;
         }
         __THREW__ = 0;
         $gep_int96 = 8384;
         $expanded25 = $gep_int96;
         $168 = invoke_iiii(30,2147483647,$expanded25|0,0)|0;
         $169 = __THREW__; __THREW__ = 0;
         $170 = $169&1;
         
         if ($170) {
          $expanded28 = 69;
          $171 = ___cxa_find_matching_catch(-1,-1)|0;
          $172 = tempRet0;
          $expanded29 = 8376;
          ___cxa_guard_abort($expanded29|0);
          
          $eh$lpad$body$index3Z2D = $172;$eh$lpad$body$indexZ2D = $171;
          break L13;
         } else {
          $expanded26 = 8368;
          HEAP32[8368>>2] = $168;
          $expanded27 = 8376;
          ___cxa_guard_release($expanded27|0);
          
          break;
         }
        }
       } while(0);
       $expanded30 = 8368;
       $173 = HEAP32[8368>>2]|0;
       __THREW__ = 0;
       
       $gep_int97 = $vararg_buffer;
       $vararg_ptr = $gep_int97;
       HEAP32[$vararg_ptr>>2] = $__v;
       $expanded31 = 15;
       $vararg_func = $expanded31;
       $gep_int98 = 7064;
       $expanded32 = $gep_int98;
       $174 = invoke_iiiii(15,$__a$2|0,$173|0,$expanded32|0,$vararg_buffer|0)|0;
       
       $175 = __THREW__; __THREW__ = 0;
       $176 = $175&1;
       
       if ($176) {
        label = 45;
        break;
       }
       $177 = ($174|0)==(1);
       
       if (!($177)) {
        HEAP32[$__err>>2] = 4;
        
       }
       $178 = HEAP32[$55>>2]|0;
       $179 = ($178|0)==(0);
       
       do {
        if ($179) {
         $194 = 0;$195 = 1;
        } else {
         $gep_int99 = $178;
         $gep100 = (($gep_int99) + 12)|0;
         $180 = $gep100;
         $181 = HEAP32[$180>>2]|0;
         $gep_int101 = $178;
         $gep102 = (($gep_int101) + 16)|0;
         $182 = $gep102;
         $183 = HEAP32[$182>>2]|0;
         $184 = ($181|0)==($183|0);
         
         if ($184) {
          $185 = $178;
          $186 = HEAP32[$178>>2]|0;
          $gep_int103 = $186;
          $gep104 = (($gep_int103) + 36)|0;
          $187 = $gep104;
          $188 = HEAP32[$187>>2]|0;
          __THREW__ = 0;
          $189 = invoke_ii($188|0,$178|0)|0;
          $190 = __THREW__; __THREW__ = 0;
          $191 = $190&1;
          
          if ($191) {
           label = 45;
           break L13;
          } else {
           $$0$i$i$i$i = $189;
          }
         } else {
          $192 = HEAP32[$181>>2]|0;
          
          $$0$i$i$i$i = $192;
         }
         
         $193 = ($$0$i$i$i$i|0)==(-1);
         
         if (!($193)) {
          $194 = $178;$195 = 0;
          break;
         }
         HEAP32[$55>>2] = 0;
         
         $194 = 0;$195 = 1;
        }
       } while(0);
       
       
       $196 = HEAP32[$56>>2]|0;
       $197 = ($196|0)==(0);
       
       do {
        if ($197) {
         label = 74;
        } else {
         $gep_int105 = $196;
         $gep106 = (($gep_int105) + 12)|0;
         $198 = $gep106;
         $199 = HEAP32[$198>>2]|0;
         $gep_int107 = $196;
         $gep108 = (($gep_int107) + 16)|0;
         $200 = $gep108;
         $201 = HEAP32[$200>>2]|0;
         $202 = ($199|0)==($201|0);
         
         if ($202) {
          $203 = $196;
          $204 = HEAP32[$196>>2]|0;
          $gep_int109 = $204;
          $gep110 = (($gep_int109) + 36)|0;
          $205 = $gep110;
          $206 = HEAP32[$205>>2]|0;
          __THREW__ = 0;
          $207 = invoke_ii($206|0,$196|0)|0;
          $208 = __THREW__; __THREW__ = 0;
          $209 = $208&1;
          
          if ($209) {
           label = 45;
           break L13;
          } else {
           $$0$i$i1$i$i = $207;
          }
         } else {
          $210 = HEAP32[$199>>2]|0;
          
          $$0$i$i1$i$i = $210;
         }
         
         $211 = ($$0$i$i1$i$i|0)==(-1);
         
         if ($211) {
          HEAP32[$56>>2] = 0;
          
          label = 74;
          break;
         }
         
         if (!($195)) {
          break;
         }
         $gep_int111 = $agg$result;
         $214 = $gep_int111;
         HEAP32[$214>>2] = $194;
         
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         
         STACKTOP = sp;return;
        }
       } while(0);
       do {
        if ((label|0) == 74) {
         
         if ($195) {
          break;
         }
         $gep_int111 = $agg$result;
         $214 = $gep_int111;
         HEAP32[$214>>2] = $194;
         
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         
         STACKTOP = sp;return;
        }
       } while(0);
       $212 = HEAP32[$__err>>2]|0;
       $213 = $212 | 2;
       HEAP32[$__err>>2] = $213;
       
       $gep_int111 = $agg$result;
       $214 = $gep_int111;
       HEAP32[$214>>2] = $194;
       
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       
       STACKTOP = sp;return;
      }
     } while(0);
     if ((label|0) == 45) {
      $expanded22 = 69;
      $136 = ___cxa_find_matching_catch(-1,-1)|0;
      $137 = tempRet0;
      
      $eh$lpad$body$index3Z2D = $137;$eh$lpad$body$indexZ2D = $136;
     }
     
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index3Z2D;
     
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($$0|0);
     // unreachable
    }
   } while(0);
   $29 = ___cxa_allocate_exception(4)|0;
   $30 = $29;
   __ZNSt8bad_castC2Ev($30);
   __THREW__ = 0;
   $expanded15 = 16440;
   $expanded16 = 119;
   invoke_viii(5,$29|0,$expanded15|0,$expanded16|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   
   if ($32) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded20 = 69;
 $130 = ___cxa_find_matching_catch(-1,-1)|0;
 $131 = tempRet0;
 $132 = HEAP32[$5>>2]|0;
 $gep_int82 = $132;
 $133 = $gep_int82;
 u$75 = __ZNSt3__114__shared_count16__release_sharedEv($133)|0;
 
 $$0 = $130;$$01 = $131;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $$01$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0;
 var $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int3 = 0;
 var $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__a_end>>2]|0;
 $2 = ($1|0)==($__a|0);
 
 do {
  if ($2) {
   $gep_int = $__atoms;
   $gep = (($gep_int) + 96)|0;
   $3 = $gep;
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($__ct|0);
   
   if (!($5)) {
    $gep_int1 = $__atoms;
    $gep2 = (($gep_int1) + 100)|0;
    $6 = $gep2;
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==($__ct|0);
    
    if (!($8)) {
     break;
    }
   }
   $9 = $5 ? 43 : 45;
   $gep_int3 = $__a;
   $gep4 = (($gep_int3) + 1)|0;
   $10 = $gep4;
   HEAP32[$__a_end>>2] = $10;
   HEAP8[$__a] = $9;
   HEAP32[$__dc>>2] = 0;
   
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $11 = $__grouping;
 $12 = HEAP8[$__grouping]|0;
 $13 = $12 & 1;
 $14 = ($13<<24>>24)==(0);
 
 if ($14) {
  $17 = $12&255;
  $18 = $17 >>> 1;
  
  $19 = $18;
 } else {
  $gep_int5 = $__grouping;
  $gep6 = (($gep_int5) + 4)|0;
  $15 = $gep6;
  $16 = HEAP32[$15>>2]|0;
  
  $19 = $16;
 }
 
 $20 = ($19|0)!=(0);
 $21 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $20 & $21;
 
 if ($or$cond) {
  $22 = HEAP32[$__g_end>>2]|0;
  $23 = $22;
  $24 = $__g;
  $25 = (($23) - ($24))|0;
  $26 = ($25|0)<(160);
  
  if (!($26)) {
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
  $27 = HEAP32[$__dc>>2]|0;
  $gep_int7 = $22;
  $gep8 = (($gep_int7) + 4)|0;
  $28 = $gep8;
  HEAP32[$__g_end>>2] = $28;
  HEAP32[$22>>2] = $27;
  HEAP32[$__dc>>2] = 0;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $gep_int9 = $__atoms;
 $gep10 = (($gep_int9) + 104)|0;
 $29 = $gep10;
 
 $$01$i = $__atoms;
 while(1) {
  
  $31 = HEAP32[$$01$i>>2]|0;
  $32 = ($31|0)==($__ct|0);
  $gep_int11 = $$01$i;
  $gep12 = (($gep_int11) + 4)|0;
  $33 = $gep12;
  
  if ($32) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $30 = ($33|0)==($29|0);
  
  if ($30) {
   $$0$lcssa$i = $29;
   break;
  } else {
   $$01$i$phi = $33;$$01$i = $$01$i$phi;
  }
 }
 
 $34 = $$0$lcssa$i;
 $35 = $__atoms;
 $36 = (($34) - ($35))|0;
 $37 = $36 >> 2;
 $38 = ($36|0)>(92);
 
 if ($38) {
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 }
 
 do {
  if ((($__base|0) == 10) | (($__base|0) == 8)) {
   $39 = ($37|0)<($__base|0);
   
   if ($39) {
    break;
   } else {
    $$0 = -1;
   }
   
   STACKTOP = sp;return $$0|0;
  } else if ((($__base|0) == 16)) {
   $40 = ($36|0)<(88);
   
   if ($40) {
    break;
   }
   
   if ($2) {
    $$0 = -1;
    
    STACKTOP = sp;return $$0|0;
   }
   $41 = $1;
   $42 = $__a;
   $43 = (($41) - ($42))|0;
   $44 = ($43|0)<(3);
   
   if (!($44)) {
    $$0 = -1;
    
    STACKTOP = sp;return $$0|0;
   }
   $gep_int13 = $1;
   $gep14 = (($gep_int13) + -1)|0;
   $45 = $gep14;
   $46 = HEAP8[$45]|0;
   $47 = ($46<<24>>24)==(48);
   
   if (!($47)) {
    $$0 = -1;
    
    STACKTOP = sp;return $$0|0;
   }
   HEAP32[$__dc>>2] = 0;
   $gep_int15 = 7024;
   $gep16 = (($gep_int15) + ($37))|0;
   $48 = $gep16;
   $49 = HEAP8[$48]|0;
   $gep_int17 = $1;
   $gep18 = (($gep_int17) + 1)|0;
   $50 = $gep18;
   HEAP32[$__a_end>>2] = $50;
   HEAP8[$1] = $49;
   
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $gep_int19 = 7024;
 $gep20 = (($gep_int19) + ($37))|0;
 $51 = $gep20;
 $52 = HEAP8[$51]|0;
 $gep_int21 = $1;
 $gep22 = (($gep_int21) + 1)|0;
 $53 = $gep22;
 HEAP32[$__a_end>>2] = $53;
 HEAP8[$1] = $52;
 $54 = HEAP32[$__dc>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[$__dc>>2] = $55;
 
 $$0 = 0;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0;
 var $expanded22 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep27 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep41 = 0, $gep45 = 0, $gep47 = 0, $gep50 = 0, $gep52 = 0;
 var $gep54 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep_array = 0, $gep_array56 = 0, $gep_int = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int42 = 0;
 var $gep_int43 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int63 = 0, label = 0, sp = 0, u$18 = 0, u$42 = 0, u$44 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i3 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__loc = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $gep_int = $__loc;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 
 $expanded1 = 8480;
 $gep_int23 = 8480;
 $expanded = $gep_int23;
 $4 = HEAP32[$expanded>>2]|0;
 $5 = ($4|0)==(-1);
 
 if ($5) {
  label = 3;
 } else {
  $gep_int24 = $__p$i$i$i$i;
  $6 = $gep_int24;
  $expanded2 = 8480;
  HEAP32[$6>>2] = $expanded2;
  $gep_int25 = $__p$i$i$i$i;
  $gep = (($gep_int25) + 4)|0;
  $7 = $gep;
  $expanded3 = 177;
  HEAP32[$7>>2] = $expanded3;
  $gep_int26 = $__p$i$i$i$i;
  $gep27 = (($gep_int26) + 8)|0;
  $8 = $gep27;
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  $expanded5 = 8480;
  $gep_int28 = 8480;
  $expanded4 = $gep_int28;
  invoke_viii(17,$expanded4|0,$3|0,178);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  
  if (!($10)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   
   $expanded7 = 8480;
   $gep_int29 = 8480;
   $gep30 = (($gep_int29) + 4)|0;
   $expanded6 = $gep30;
   $11 = HEAP32[$expanded6>>2]|0;
   $12 = (($11) + -1)|0;
   $gep_int31 = $2;
   $gep32 = (($gep_int31) + 12)|0;
   $13 = $gep32;
   $14 = HEAP32[$13>>2]|0;
   $gep_int33 = $2;
   $gep34 = (($gep_int33) + 8)|0;
   $15 = $gep34;
   $16 = HEAP32[$15>>2]|0;
   $17 = $14;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 2;
   $21 = ($20>>>0)>($12>>>0);
   
   do {
    if ($21) {
     $gep_int35 = $16;
     $gep_array = $12<<2;
     $gep36 = (($gep_int35) + ($gep_array))|0;
     $22 = $gep36;
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0);
     
     if ($24) {
      break;
     }
     $29 = $23;
     $30 = $23;
     $31 = HEAP32[$23>>2]|0;
     $gep_int37 = $31;
     $gep38 = (($gep_int37) + 32)|0;
     $32 = $gep38;
     $33 = HEAP32[$32>>2]|0;
     __THREW__ = 0;
     $gep_int39 = 7024;
     $expanded10 = $gep_int39;
     $gep_int40 = 7024;
     $gep41 = (($gep_int40) + 26)|0;
     $expanded11 = $gep41;
     u$18 = invoke_iiiii($33|0,$29|0,$expanded10|0,$expanded11|0,$__atoms|0)|0;
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     
     if ($35) {
      break L3;
     }
     $36 = HEAP32[$1>>2]|0;
     $37 = $__p$i$i$i$i3;
     
     $expanded13 = 8624;
     $gep_int42 = 8624;
     $expanded12 = $gep_int42;
     $38 = HEAP32[$expanded12>>2]|0;
     $39 = ($38|0)==(-1);
     
     if (!($39)) {
      $gep_int43 = $__p$i$i$i$i3;
      $40 = $gep_int43;
      $expanded14 = 8624;
      HEAP32[$40>>2] = $expanded14;
      $gep_int44 = $__p$i$i$i$i3;
      $gep45 = (($gep_int44) + 4)|0;
      $41 = $gep45;
      $expanded15 = 177;
      HEAP32[$41>>2] = $expanded15;
      $gep_int46 = $__p$i$i$i$i3;
      $gep47 = (($gep_int46) + 8)|0;
      $42 = $gep47;
      HEAP32[$42>>2] = 0;
      __THREW__ = 0;
      $expanded17 = 8624;
      $gep_int48 = 8624;
      $expanded16 = $gep_int48;
      invoke_viii(17,$expanded16|0,$37|0,178);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      
      if ($44) {
       break L3;
      }
     }
     
     $expanded19 = 8624;
     $gep_int49 = 8624;
     $gep50 = (($gep_int49) + 4)|0;
     $expanded18 = $gep50;
     $45 = HEAP32[$expanded18>>2]|0;
     $46 = (($45) + -1)|0;
     $gep_int51 = $36;
     $gep52 = (($gep_int51) + 12)|0;
     $47 = $gep52;
     $48 = HEAP32[$47>>2]|0;
     $gep_int53 = $36;
     $gep54 = (($gep_int53) + 8)|0;
     $49 = $gep54;
     $50 = HEAP32[$49>>2]|0;
     $51 = $48;
     $52 = $50;
     $53 = (($51) - ($52))|0;
     $54 = $53 >> 2;
     $55 = ($54>>>0)>($46>>>0);
     
     do {
      if ($55) {
       $gep_int55 = $50;
       $gep_array56 = $46<<2;
       $gep57 = (($gep_int55) + ($gep_array56))|0;
       $56 = $gep57;
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0);
       
       if ($58) {
        break;
       }
       $63 = $57;
       $64 = $57;
       $65 = HEAP32[$57>>2]|0;
       $gep_int58 = $65;
       $gep59 = (($gep_int58) + 16)|0;
       $66 = $gep59;
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       $68 = invoke_ii($67|0,$63|0)|0;
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       
       if ($70) {
        break L3;
       }
       HEAP8[$__thousands_sep] = $68;
       $71 = $57;
       $72 = HEAP32[$57>>2]|0;
       $gep_int60 = $72;
       $gep61 = (($gep_int60) + 20)|0;
       $73 = $gep61;
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       invoke_vii($74|0,$agg$result|0,$63|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       
       if ($76) {
        break L3;
       }
       $77 = HEAP32[$1>>2]|0;
       $gep_int62 = $77;
       $78 = $gep_int62;
       u$42 = __ZNSt3__114__shared_count16__release_sharedEv($78)|0;
       STACKTOP = sp;return;
      }
     } while(0);
     $59 = ___cxa_allocate_exception(4)|0;
     $60 = $59;
     __ZNSt8bad_castC2Ev($60);
     __THREW__ = 0;
     $expanded20 = 16440;
     $expanded21 = 119;
     invoke_viii(5,$59|0,$expanded20|0,$expanded21|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     
     if ($62) {
      break L3;
     }
     // unreachable
    }
   } while(0);
   $25 = ___cxa_allocate_exception(4)|0;
   $26 = $25;
   __ZNSt8bad_castC2Ev($26);
   __THREW__ = 0;
   $expanded8 = 16440;
   $expanded9 = 119;
   invoke_viii(5,$25|0,$expanded8|0,$expanded9|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   
   if ($28) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded22 = 69;
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $81 = HEAP32[$1>>2]|0;
 $gep_int63 = $81;
 $82 = $gep_int63;
 u$44 = __ZNSt3__114__shared_count16__release_sharedEv($82)|0;
 ___resumeException($79|0);
 // unreachable
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0;
 var $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep27 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0;
 var $gep38 = 0, $gep41 = 0, $gep45 = 0, $gep47 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep_array = 0, $gep_array56 = 0, $gep_int = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0;
 var $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int43 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int65 = 0;
 var label = 0, sp = 0, u$18 = 0, u$45 = 0, u$47 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i3 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__loc = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $gep_int = $__loc;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 
 $expanded1 = 8480;
 $gep_int23 = 8480;
 $expanded = $gep_int23;
 $4 = HEAP32[$expanded>>2]|0;
 $5 = ($4|0)==(-1);
 
 if ($5) {
  label = 3;
 } else {
  $gep_int24 = $__p$i$i$i$i;
  $6 = $gep_int24;
  $expanded2 = 8480;
  HEAP32[$6>>2] = $expanded2;
  $gep_int25 = $__p$i$i$i$i;
  $gep = (($gep_int25) + 4)|0;
  $7 = $gep;
  $expanded3 = 177;
  HEAP32[$7>>2] = $expanded3;
  $gep_int26 = $__p$i$i$i$i;
  $gep27 = (($gep_int26) + 8)|0;
  $8 = $gep27;
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  $expanded5 = 8480;
  $gep_int28 = 8480;
  $expanded4 = $gep_int28;
  invoke_viii(17,$expanded4|0,$3|0,178);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  
  if (!($10)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   
   $expanded7 = 8480;
   $gep_int29 = 8480;
   $gep30 = (($gep_int29) + 4)|0;
   $expanded6 = $gep30;
   $11 = HEAP32[$expanded6>>2]|0;
   $12 = (($11) + -1)|0;
   $gep_int31 = $2;
   $gep32 = (($gep_int31) + 12)|0;
   $13 = $gep32;
   $14 = HEAP32[$13>>2]|0;
   $gep_int33 = $2;
   $gep34 = (($gep_int33) + 8)|0;
   $15 = $gep34;
   $16 = HEAP32[$15>>2]|0;
   $17 = $14;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 2;
   $21 = ($20>>>0)>($12>>>0);
   
   do {
    if ($21) {
     $gep_int35 = $16;
     $gep_array = $12<<2;
     $gep36 = (($gep_int35) + ($gep_array))|0;
     $22 = $gep36;
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0);
     
     if ($24) {
      break;
     }
     $29 = $23;
     $30 = $23;
     $31 = HEAP32[$23>>2]|0;
     $gep_int37 = $31;
     $gep38 = (($gep_int37) + 32)|0;
     $32 = $gep38;
     $33 = HEAP32[$32>>2]|0;
     __THREW__ = 0;
     $gep_int39 = 7024;
     $expanded10 = $gep_int39;
     $gep_int40 = 7024;
     $gep41 = (($gep_int40) + 32)|0;
     $expanded11 = $gep41;
     u$18 = invoke_iiiii($33|0,$29|0,$expanded10|0,$expanded11|0,$__atoms|0)|0;
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     
     if ($35) {
      break L3;
     }
     $36 = HEAP32[$1>>2]|0;
     $37 = $__p$i$i$i$i3;
     
     $expanded13 = 8624;
     $gep_int42 = 8624;
     $expanded12 = $gep_int42;
     $38 = HEAP32[$expanded12>>2]|0;
     $39 = ($38|0)==(-1);
     
     if (!($39)) {
      $gep_int43 = $__p$i$i$i$i3;
      $40 = $gep_int43;
      $expanded14 = 8624;
      HEAP32[$40>>2] = $expanded14;
      $gep_int44 = $__p$i$i$i$i3;
      $gep45 = (($gep_int44) + 4)|0;
      $41 = $gep45;
      $expanded15 = 177;
      HEAP32[$41>>2] = $expanded15;
      $gep_int46 = $__p$i$i$i$i3;
      $gep47 = (($gep_int46) + 8)|0;
      $42 = $gep47;
      HEAP32[$42>>2] = 0;
      __THREW__ = 0;
      $expanded17 = 8624;
      $gep_int48 = 8624;
      $expanded16 = $gep_int48;
      invoke_viii(17,$expanded16|0,$37|0,178);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      
      if ($44) {
       break L3;
      }
     }
     
     $expanded19 = 8624;
     $gep_int49 = 8624;
     $gep50 = (($gep_int49) + 4)|0;
     $expanded18 = $gep50;
     $45 = HEAP32[$expanded18>>2]|0;
     $46 = (($45) + -1)|0;
     $gep_int51 = $36;
     $gep52 = (($gep_int51) + 12)|0;
     $47 = $gep52;
     $48 = HEAP32[$47>>2]|0;
     $gep_int53 = $36;
     $gep54 = (($gep_int53) + 8)|0;
     $49 = $gep54;
     $50 = HEAP32[$49>>2]|0;
     $51 = $48;
     $52 = $50;
     $53 = (($51) - ($52))|0;
     $54 = $53 >> 2;
     $55 = ($54>>>0)>($46>>>0);
     
     do {
      if ($55) {
       $gep_int55 = $50;
       $gep_array56 = $46<<2;
       $gep57 = (($gep_int55) + ($gep_array56))|0;
       $56 = $gep57;
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0);
       
       if ($58) {
        break;
       }
       $63 = $57;
       $64 = $57;
       $65 = HEAP32[$57>>2]|0;
       $gep_int58 = $65;
       $gep59 = (($gep_int58) + 12)|0;
       $66 = $gep59;
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       $68 = invoke_ii($67|0,$63|0)|0;
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       
       if ($70) {
        break L3;
       }
       HEAP8[$__decimal_point] = $68;
       $71 = HEAP32[$57>>2]|0;
       $gep_int60 = $71;
       $gep61 = (($gep_int60) + 16)|0;
       $72 = $gep61;
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = invoke_ii($73|0,$63|0)|0;
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       
       if ($76) {
        break L3;
       }
       HEAP8[$__thousands_sep] = $74;
       $77 = $57;
       $78 = HEAP32[$57>>2]|0;
       $gep_int62 = $78;
       $gep63 = (($gep_int62) + 20)|0;
       $79 = $gep63;
       $80 = HEAP32[$79>>2]|0;
       __THREW__ = 0;
       invoke_vii($80|0,$agg$result|0,$63|0);
       $81 = __THREW__; __THREW__ = 0;
       $82 = $81&1;
       
       if ($82) {
        break L3;
       }
       $83 = HEAP32[$1>>2]|0;
       $gep_int64 = $83;
       $84 = $gep_int64;
       u$45 = __ZNSt3__114__shared_count16__release_sharedEv($84)|0;
       STACKTOP = sp;return;
      }
     } while(0);
     $59 = ___cxa_allocate_exception(4)|0;
     $60 = $59;
     __ZNSt8bad_castC2Ev($60);
     __THREW__ = 0;
     $expanded20 = 16440;
     $expanded21 = 119;
     invoke_viii(5,$59|0,$expanded20|0,$expanded21|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     
     if ($62) {
      break L3;
     }
     // unreachable
    }
   } while(0);
   $25 = ___cxa_allocate_exception(4)|0;
   $26 = $25;
   __ZNSt8bad_castC2Ev($26);
   __THREW__ = 0;
   $expanded8 = 16440;
   $expanded9 = 119;
   invoke_viii(5,$25|0,$expanded8|0,$expanded9|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   
   if ($28) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded22 = 69;
 $85 = ___cxa_find_matching_catch(-1,-1)|0;
 $86 = tempRet0;
 $87 = HEAP32[$1>>2]|0;
 $gep_int65 = $87;
 $88 = $gep_int65;
 u$47 = __ZNSt3__114__shared_count16__release_sharedEv($88)|0;
 ___resumeException($85|0);
 // unreachable
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $$01$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0;
 var $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 
 if ($1) {
  $2 = HEAP8[$__in_units]|0;
  $3 = ($2<<24>>24)==(0);
  
  if ($3) {
   $$0 = -1;
   
   STACKTOP = sp;return $$0|0;
  }
  HEAP8[$__in_units] = 0;
  $4 = HEAP32[$__a_end>>2]|0;
  $gep_int = $4;
  $gep = (($gep_int) + 1)|0;
  $5 = $gep;
  HEAP32[$__a_end>>2] = $5;
  HEAP8[$4] = 46;
  $6 = $__grouping;
  $7 = HEAP8[$__grouping]|0;
  $8 = $7 & 1;
  $9 = ($8<<24>>24)==(0);
  
  if ($9) {
   $12 = $7&255;
   $13 = $12 >>> 1;
   
   $14 = $13;
  } else {
   $gep_int1 = $__grouping;
   $gep2 = (($gep_int1) + 4)|0;
   $10 = $gep2;
   $11 = HEAP32[$10>>2]|0;
   
   $14 = $11;
  }
  
  $15 = ($14|0)==(0);
  
  if ($15) {
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
  $16 = HEAP32[$__g_end>>2]|0;
  $17 = $16;
  $18 = $__g;
  $19 = (($17) - ($18))|0;
  $20 = ($19|0)<(160);
  
  if (!($20)) {
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
  $21 = HEAP32[$__dc>>2]|0;
  $gep_int3 = $16;
  $gep4 = (($gep_int3) + 4)|0;
  $22 = $gep4;
  HEAP32[$__g_end>>2] = $22;
  HEAP32[$16>>2] = $21;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $23 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 
 do {
  if ($23) {
   $24 = $__grouping;
   $25 = HEAP8[$__grouping]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   
   if ($27) {
    $30 = $25&255;
    $31 = $30 >>> 1;
    
    $32 = $31;
   } else {
    $gep_int5 = $__grouping;
    $gep6 = (($gep_int5) + 4)|0;
    $28 = $gep6;
    $29 = HEAP32[$28>>2]|0;
    
    $32 = $29;
   }
   
   $33 = ($32|0)==(0);
   
   if ($33) {
    break;
   }
   $34 = HEAP8[$__in_units]|0;
   $35 = ($34<<24>>24)==(0);
   
   if ($35) {
    $$0 = -1;
    
    STACKTOP = sp;return $$0|0;
   }
   $36 = HEAP32[$__g_end>>2]|0;
   $37 = $36;
   $38 = $__g;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)<(160);
   
   if (!($40)) {
    $$0 = 0;
    
    STACKTOP = sp;return $$0|0;
   }
   $41 = HEAP32[$__dc>>2]|0;
   $gep_int7 = $36;
   $gep8 = (($gep_int7) + 4)|0;
   $42 = $gep8;
   HEAP32[$__g_end>>2] = $42;
   HEAP32[$36>>2] = $41;
   HEAP32[$__dc>>2] = 0;
   
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $gep_int9 = $__atoms;
 $gep10 = (($gep_int9) + 32)|0;
 $43 = $gep10;
 
 $$01$i = $__atoms;
 while(1) {
  
  $45 = HEAP8[$$01$i]|0;
  $46 = ($45<<24>>24)==($__ct<<24>>24);
  $gep_int11 = $$01$i;
  $gep12 = (($gep_int11) + 1)|0;
  $47 = $gep12;
  
  if ($46) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $44 = ($47|0)==($43|0);
  
  if ($44) {
   $$0$lcssa$i = $43;
   break;
  } else {
   $$01$i$phi = $47;$$01$i = $$01$i$phi;
  }
 }
 
 $48 = $$0$lcssa$i;
 $49 = $__atoms;
 $50 = (($48) - ($49))|0;
 $51 = ($50|0)>(31);
 
 if ($51) {
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 }
 $gep_int13 = 7024;
 $gep14 = (($gep_int13) + ($50))|0;
 $52 = $gep14;
 $53 = HEAP8[$52]|0;
 
 if ((($50|0) == 24) | (($50|0) == 25)) {
  $54 = HEAP32[$__a_end>>2]|0;
  $55 = ($54|0)==($__a|0);
  
  do {
   if (!($55)) {
    $gep_int15 = $54;
    $gep16 = (($gep_int15) + -1)|0;
    $56 = $gep16;
    $57 = HEAP8[$56]|0;
    $58 = $57&255;
    $59 = $58 & 95;
    $60 = HEAP8[$__exp]|0;
    $61 = $60&255;
    $62 = $61 & 127;
    $63 = ($59|0)==($62|0);
    
    if ($63) {
     break;
    } else {
     $$0 = -1;
    }
    
    STACKTOP = sp;return $$0|0;
   }
  } while(0);
  $gep_int17 = $54;
  $gep18 = (($gep_int17) + 1)|0;
  $64 = $gep18;
  HEAP32[$__a_end>>2] = $64;
  HEAP8[$54] = $53;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 } else if ((($50|0) == 23) | (($50|0) == 22)) {
  HEAP8[$__exp] = 80;
  $65 = HEAP32[$__a_end>>2]|0;
  $gep_int19 = $65;
  $gep20 = (($gep_int19) + 1)|0;
  $66 = $gep20;
  HEAP32[$__a_end>>2] = $66;
  HEAP8[$65] = $53;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 } else {
  $67 = $53&255;
  $68 = $67 & 95;
  $69 = HEAP8[$__exp]|0;
  $70 = $69 << 24 >> 24;
  $71 = ($68|0)==($70|0);
  
  do {
   if ($71) {
    $72 = $69 | -128;
    HEAP8[$__exp] = $72;
    $73 = HEAP8[$__in_units]|0;
    $74 = ($73<<24>>24)==(0);
    
    if ($74) {
     break;
    }
    HEAP8[$__in_units] = 0;
    $75 = $__grouping;
    $76 = HEAP8[$__grouping]|0;
    $77 = $76 & 1;
    $78 = ($77<<24>>24)==(0);
    
    if ($78) {
     $81 = $76&255;
     $82 = $81 >>> 1;
     
     $83 = $82;
    } else {
     $gep_int21 = $__grouping;
     $gep22 = (($gep_int21) + 4)|0;
     $79 = $gep22;
     $80 = HEAP32[$79>>2]|0;
     
     $83 = $80;
    }
    
    $84 = ($83|0)==(0);
    
    if ($84) {
     break;
    }
    $85 = HEAP32[$__g_end>>2]|0;
    $86 = $85;
    $87 = $__g;
    $88 = (($86) - ($87))|0;
    $89 = ($88|0)<(160);
    
    if (!($89)) {
     break;
    }
    $90 = HEAP32[$__dc>>2]|0;
    $gep_int23 = $85;
    $gep24 = (($gep_int23) + 4)|0;
    $91 = $gep24;
    HEAP32[$__g_end>>2] = $91;
    HEAP32[$85>>2] = $90;
    
   }
  } while(0);
  $92 = HEAP32[$__a_end>>2]|0;
  $gep_int25 = $92;
  $gep26 = (($gep_int25) + 1)|0;
  $93 = $gep26;
  HEAP32[$__a_end>>2] = $93;
  HEAP8[$92] = $53;
  $94 = ($50|0)>(21);
  
  if ($94) {
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
  $95 = HEAP32[$__dc>>2]|0;
  $96 = (($95) + 1)|0;
  HEAP32[$__dc>>2] = $96;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0;
 var $expanded22 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep27 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep41 = 0, $gep45 = 0, $gep47 = 0, $gep50 = 0, $gep52 = 0;
 var $gep54 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep_array = 0, $gep_array56 = 0, $gep_int = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int42 = 0;
 var $gep_int43 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int63 = 0, label = 0, sp = 0, u$18 = 0, u$42 = 0, u$44 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i3 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__loc = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $gep_int = $__loc;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 
 $expanded1 = 8472;
 $gep_int23 = 8472;
 $expanded = $gep_int23;
 $4 = HEAP32[$expanded>>2]|0;
 $5 = ($4|0)==(-1);
 
 if ($5) {
  label = 3;
 } else {
  $gep_int24 = $__p$i$i$i$i;
  $6 = $gep_int24;
  $expanded2 = 8472;
  HEAP32[$6>>2] = $expanded2;
  $gep_int25 = $__p$i$i$i$i;
  $gep = (($gep_int25) + 4)|0;
  $7 = $gep;
  $expanded3 = 177;
  HEAP32[$7>>2] = $expanded3;
  $gep_int26 = $__p$i$i$i$i;
  $gep27 = (($gep_int26) + 8)|0;
  $8 = $gep27;
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  $expanded5 = 8472;
  $gep_int28 = 8472;
  $expanded4 = $gep_int28;
  invoke_viii(17,$expanded4|0,$3|0,178);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  
  if (!($10)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   
   $expanded7 = 8472;
   $gep_int29 = 8472;
   $gep30 = (($gep_int29) + 4)|0;
   $expanded6 = $gep30;
   $11 = HEAP32[$expanded6>>2]|0;
   $12 = (($11) + -1)|0;
   $gep_int31 = $2;
   $gep32 = (($gep_int31) + 12)|0;
   $13 = $gep32;
   $14 = HEAP32[$13>>2]|0;
   $gep_int33 = $2;
   $gep34 = (($gep_int33) + 8)|0;
   $15 = $gep34;
   $16 = HEAP32[$15>>2]|0;
   $17 = $14;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 2;
   $21 = ($20>>>0)>($12>>>0);
   
   do {
    if ($21) {
     $gep_int35 = $16;
     $gep_array = $12<<2;
     $gep36 = (($gep_int35) + ($gep_array))|0;
     $22 = $gep36;
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0);
     
     if ($24) {
      break;
     }
     $29 = $23;
     $30 = $23;
     $31 = HEAP32[$23>>2]|0;
     $gep_int37 = $31;
     $gep38 = (($gep_int37) + 48)|0;
     $32 = $gep38;
     $33 = HEAP32[$32>>2]|0;
     __THREW__ = 0;
     $gep_int39 = 7024;
     $expanded10 = $gep_int39;
     $gep_int40 = 7024;
     $gep41 = (($gep_int40) + 26)|0;
     $expanded11 = $gep41;
     u$18 = invoke_iiiii($33|0,$29|0,$expanded10|0,$expanded11|0,$__atoms|0)|0;
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     
     if ($35) {
      break L3;
     }
     $36 = HEAP32[$1>>2]|0;
     $37 = $__p$i$i$i$i3;
     
     $expanded13 = 8632;
     $gep_int42 = 8632;
     $expanded12 = $gep_int42;
     $38 = HEAP32[$expanded12>>2]|0;
     $39 = ($38|0)==(-1);
     
     if (!($39)) {
      $gep_int43 = $__p$i$i$i$i3;
      $40 = $gep_int43;
      $expanded14 = 8632;
      HEAP32[$40>>2] = $expanded14;
      $gep_int44 = $__p$i$i$i$i3;
      $gep45 = (($gep_int44) + 4)|0;
      $41 = $gep45;
      $expanded15 = 177;
      HEAP32[$41>>2] = $expanded15;
      $gep_int46 = $__p$i$i$i$i3;
      $gep47 = (($gep_int46) + 8)|0;
      $42 = $gep47;
      HEAP32[$42>>2] = 0;
      __THREW__ = 0;
      $expanded17 = 8632;
      $gep_int48 = 8632;
      $expanded16 = $gep_int48;
      invoke_viii(17,$expanded16|0,$37|0,178);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      
      if ($44) {
       break L3;
      }
     }
     
     $expanded19 = 8632;
     $gep_int49 = 8632;
     $gep50 = (($gep_int49) + 4)|0;
     $expanded18 = $gep50;
     $45 = HEAP32[$expanded18>>2]|0;
     $46 = (($45) + -1)|0;
     $gep_int51 = $36;
     $gep52 = (($gep_int51) + 12)|0;
     $47 = $gep52;
     $48 = HEAP32[$47>>2]|0;
     $gep_int53 = $36;
     $gep54 = (($gep_int53) + 8)|0;
     $49 = $gep54;
     $50 = HEAP32[$49>>2]|0;
     $51 = $48;
     $52 = $50;
     $53 = (($51) - ($52))|0;
     $54 = $53 >> 2;
     $55 = ($54>>>0)>($46>>>0);
     
     do {
      if ($55) {
       $gep_int55 = $50;
       $gep_array56 = $46<<2;
       $gep57 = (($gep_int55) + ($gep_array56))|0;
       $56 = $gep57;
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0);
       
       if ($58) {
        break;
       }
       $63 = $57;
       $64 = $57;
       $65 = HEAP32[$57>>2]|0;
       $gep_int58 = $65;
       $gep59 = (($gep_int58) + 16)|0;
       $66 = $gep59;
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       $68 = invoke_ii($67|0,$63|0)|0;
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       
       if ($70) {
        break L3;
       }
       HEAP32[$__thousands_sep>>2] = $68;
       $71 = $57;
       $72 = HEAP32[$57>>2]|0;
       $gep_int60 = $72;
       $gep61 = (($gep_int60) + 20)|0;
       $73 = $gep61;
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       invoke_vii($74|0,$agg$result|0,$63|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       
       if ($76) {
        break L3;
       }
       $77 = HEAP32[$1>>2]|0;
       $gep_int62 = $77;
       $78 = $gep_int62;
       u$42 = __ZNSt3__114__shared_count16__release_sharedEv($78)|0;
       STACKTOP = sp;return;
      }
     } while(0);
     $59 = ___cxa_allocate_exception(4)|0;
     $60 = $59;
     __ZNSt8bad_castC2Ev($60);
     __THREW__ = 0;
     $expanded20 = 16440;
     $expanded21 = 119;
     invoke_viii(5,$59|0,$expanded20|0,$expanded21|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     
     if ($62) {
      break L3;
     }
     // unreachable
    }
   } while(0);
   $25 = ___cxa_allocate_exception(4)|0;
   $26 = $25;
   __ZNSt8bad_castC2Ev($26);
   __THREW__ = 0;
   $expanded8 = 16440;
   $expanded9 = 119;
   invoke_viii(5,$25|0,$expanded8|0,$expanded9|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   
   if ($28) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded22 = 69;
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $81 = HEAP32[$1>>2]|0;
 $gep_int63 = $81;
 $82 = $gep_int63;
 u$44 = __ZNSt3__114__shared_count16__release_sharedEv($82)|0;
 ___resumeException($79|0);
 // unreachable
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0;
 var $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep27 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0;
 var $gep38 = 0, $gep41 = 0, $gep45 = 0, $gep47 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep_array = 0, $gep_array56 = 0, $gep_int = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0;
 var $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int43 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int65 = 0;
 var label = 0, sp = 0, u$18 = 0, u$45 = 0, u$47 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i3 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__loc = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $gep_int = $__loc;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 
 $expanded1 = 8472;
 $gep_int23 = 8472;
 $expanded = $gep_int23;
 $4 = HEAP32[$expanded>>2]|0;
 $5 = ($4|0)==(-1);
 
 if ($5) {
  label = 3;
 } else {
  $gep_int24 = $__p$i$i$i$i;
  $6 = $gep_int24;
  $expanded2 = 8472;
  HEAP32[$6>>2] = $expanded2;
  $gep_int25 = $__p$i$i$i$i;
  $gep = (($gep_int25) + 4)|0;
  $7 = $gep;
  $expanded3 = 177;
  HEAP32[$7>>2] = $expanded3;
  $gep_int26 = $__p$i$i$i$i;
  $gep27 = (($gep_int26) + 8)|0;
  $8 = $gep27;
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  $expanded5 = 8472;
  $gep_int28 = 8472;
  $expanded4 = $gep_int28;
  invoke_viii(17,$expanded4|0,$3|0,178);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  
  if (!($10)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   
   $expanded7 = 8472;
   $gep_int29 = 8472;
   $gep30 = (($gep_int29) + 4)|0;
   $expanded6 = $gep30;
   $11 = HEAP32[$expanded6>>2]|0;
   $12 = (($11) + -1)|0;
   $gep_int31 = $2;
   $gep32 = (($gep_int31) + 12)|0;
   $13 = $gep32;
   $14 = HEAP32[$13>>2]|0;
   $gep_int33 = $2;
   $gep34 = (($gep_int33) + 8)|0;
   $15 = $gep34;
   $16 = HEAP32[$15>>2]|0;
   $17 = $14;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 2;
   $21 = ($20>>>0)>($12>>>0);
   
   do {
    if ($21) {
     $gep_int35 = $16;
     $gep_array = $12<<2;
     $gep36 = (($gep_int35) + ($gep_array))|0;
     $22 = $gep36;
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0);
     
     if ($24) {
      break;
     }
     $29 = $23;
     $30 = $23;
     $31 = HEAP32[$23>>2]|0;
     $gep_int37 = $31;
     $gep38 = (($gep_int37) + 48)|0;
     $32 = $gep38;
     $33 = HEAP32[$32>>2]|0;
     __THREW__ = 0;
     $gep_int39 = 7024;
     $expanded10 = $gep_int39;
     $gep_int40 = 7024;
     $gep41 = (($gep_int40) + 32)|0;
     $expanded11 = $gep41;
     u$18 = invoke_iiiii($33|0,$29|0,$expanded10|0,$expanded11|0,$__atoms|0)|0;
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     
     if ($35) {
      break L3;
     }
     $36 = HEAP32[$1>>2]|0;
     $37 = $__p$i$i$i$i3;
     
     $expanded13 = 8632;
     $gep_int42 = 8632;
     $expanded12 = $gep_int42;
     $38 = HEAP32[$expanded12>>2]|0;
     $39 = ($38|0)==(-1);
     
     if (!($39)) {
      $gep_int43 = $__p$i$i$i$i3;
      $40 = $gep_int43;
      $expanded14 = 8632;
      HEAP32[$40>>2] = $expanded14;
      $gep_int44 = $__p$i$i$i$i3;
      $gep45 = (($gep_int44) + 4)|0;
      $41 = $gep45;
      $expanded15 = 177;
      HEAP32[$41>>2] = $expanded15;
      $gep_int46 = $__p$i$i$i$i3;
      $gep47 = (($gep_int46) + 8)|0;
      $42 = $gep47;
      HEAP32[$42>>2] = 0;
      __THREW__ = 0;
      $expanded17 = 8632;
      $gep_int48 = 8632;
      $expanded16 = $gep_int48;
      invoke_viii(17,$expanded16|0,$37|0,178);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      
      if ($44) {
       break L3;
      }
     }
     
     $expanded19 = 8632;
     $gep_int49 = 8632;
     $gep50 = (($gep_int49) + 4)|0;
     $expanded18 = $gep50;
     $45 = HEAP32[$expanded18>>2]|0;
     $46 = (($45) + -1)|0;
     $gep_int51 = $36;
     $gep52 = (($gep_int51) + 12)|0;
     $47 = $gep52;
     $48 = HEAP32[$47>>2]|0;
     $gep_int53 = $36;
     $gep54 = (($gep_int53) + 8)|0;
     $49 = $gep54;
     $50 = HEAP32[$49>>2]|0;
     $51 = $48;
     $52 = $50;
     $53 = (($51) - ($52))|0;
     $54 = $53 >> 2;
     $55 = ($54>>>0)>($46>>>0);
     
     do {
      if ($55) {
       $gep_int55 = $50;
       $gep_array56 = $46<<2;
       $gep57 = (($gep_int55) + ($gep_array56))|0;
       $56 = $gep57;
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0);
       
       if ($58) {
        break;
       }
       $63 = $57;
       $64 = $57;
       $65 = HEAP32[$57>>2]|0;
       $gep_int58 = $65;
       $gep59 = (($gep_int58) + 12)|0;
       $66 = $gep59;
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       $68 = invoke_ii($67|0,$63|0)|0;
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       
       if ($70) {
        break L3;
       }
       HEAP32[$__decimal_point>>2] = $68;
       $71 = HEAP32[$57>>2]|0;
       $gep_int60 = $71;
       $gep61 = (($gep_int60) + 16)|0;
       $72 = $gep61;
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = invoke_ii($73|0,$63|0)|0;
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       
       if ($76) {
        break L3;
       }
       HEAP32[$__thousands_sep>>2] = $74;
       $77 = $57;
       $78 = HEAP32[$57>>2]|0;
       $gep_int62 = $78;
       $gep63 = (($gep_int62) + 20)|0;
       $79 = $gep63;
       $80 = HEAP32[$79>>2]|0;
       __THREW__ = 0;
       invoke_vii($80|0,$agg$result|0,$63|0);
       $81 = __THREW__; __THREW__ = 0;
       $82 = $81&1;
       
       if ($82) {
        break L3;
       }
       $83 = HEAP32[$1>>2]|0;
       $gep_int64 = $83;
       $84 = $gep_int64;
       u$45 = __ZNSt3__114__shared_count16__release_sharedEv($84)|0;
       STACKTOP = sp;return;
      }
     } while(0);
     $59 = ___cxa_allocate_exception(4)|0;
     $60 = $59;
     __ZNSt8bad_castC2Ev($60);
     __THREW__ = 0;
     $expanded20 = 16440;
     $expanded21 = 119;
     invoke_viii(5,$59|0,$expanded20|0,$expanded21|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     
     if ($62) {
      break L3;
     }
     // unreachable
    }
   } while(0);
   $25 = ___cxa_allocate_exception(4)|0;
   $26 = $25;
   __ZNSt8bad_castC2Ev($26);
   __THREW__ = 0;
   $expanded8 = 16440;
   $expanded9 = 119;
   invoke_viii(5,$25|0,$expanded8|0,$expanded9|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   
   if ($28) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded22 = 69;
 $85 = ___cxa_find_matching_catch(-1,-1)|0;
 $86 = tempRet0;
 $87 = HEAP32[$1>>2]|0;
 $gep_int65 = $87;
 $88 = $gep_int65;
 u$47 = __ZNSt3__114__shared_count16__release_sharedEv($88)|0;
 ___resumeException($85|0);
 // unreachable
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $$01$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $gep = 0;
 var $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0;
 var $gep_int23 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__ct|0)==($__decimal_point|0);
 
 if ($1) {
  $2 = HEAP8[$__in_units]|0;
  $3 = ($2<<24>>24)==(0);
  
  if ($3) {
   $$0 = -1;
   
   STACKTOP = sp;return $$0|0;
  }
  HEAP8[$__in_units] = 0;
  $4 = HEAP32[$__a_end>>2]|0;
  $gep_int = $4;
  $gep = (($gep_int) + 1)|0;
  $5 = $gep;
  HEAP32[$__a_end>>2] = $5;
  HEAP8[$4] = 46;
  $6 = $__grouping;
  $7 = HEAP8[$__grouping]|0;
  $8 = $7 & 1;
  $9 = ($8<<24>>24)==(0);
  
  if ($9) {
   $12 = $7&255;
   $13 = $12 >>> 1;
   
   $14 = $13;
  } else {
   $gep_int1 = $__grouping;
   $gep2 = (($gep_int1) + 4)|0;
   $10 = $gep2;
   $11 = HEAP32[$10>>2]|0;
   
   $14 = $11;
  }
  
  $15 = ($14|0)==(0);
  
  if ($15) {
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
  $16 = HEAP32[$__g_end>>2]|0;
  $17 = $16;
  $18 = $__g;
  $19 = (($17) - ($18))|0;
  $20 = ($19|0)<(160);
  
  if (!($20)) {
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
  $21 = HEAP32[$__dc>>2]|0;
  $gep_int3 = $16;
  $gep4 = (($gep_int3) + 4)|0;
  $22 = $gep4;
  HEAP32[$__g_end>>2] = $22;
  HEAP32[$16>>2] = $21;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $23 = ($__ct|0)==($__thousands_sep|0);
 
 do {
  if ($23) {
   $24 = $__grouping;
   $25 = HEAP8[$__grouping]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   
   if ($27) {
    $30 = $25&255;
    $31 = $30 >>> 1;
    
    $32 = $31;
   } else {
    $gep_int5 = $__grouping;
    $gep6 = (($gep_int5) + 4)|0;
    $28 = $gep6;
    $29 = HEAP32[$28>>2]|0;
    
    $32 = $29;
   }
   
   $33 = ($32|0)==(0);
   
   if ($33) {
    break;
   }
   $34 = HEAP8[$__in_units]|0;
   $35 = ($34<<24>>24)==(0);
   
   if ($35) {
    $$0 = -1;
    
    STACKTOP = sp;return $$0|0;
   }
   $36 = HEAP32[$__g_end>>2]|0;
   $37 = $36;
   $38 = $__g;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)<(160);
   
   if (!($40)) {
    $$0 = 0;
    
    STACKTOP = sp;return $$0|0;
   }
   $41 = HEAP32[$__dc>>2]|0;
   $gep_int7 = $36;
   $gep8 = (($gep_int7) + 4)|0;
   $42 = $gep8;
   HEAP32[$__g_end>>2] = $42;
   HEAP32[$36>>2] = $41;
   HEAP32[$__dc>>2] = 0;
   
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $gep_int9 = $__atoms;
 $gep10 = (($gep_int9) + 128)|0;
 $43 = $gep10;
 
 $$01$i = $__atoms;
 while(1) {
  
  $45 = HEAP32[$$01$i>>2]|0;
  $46 = ($45|0)==($__ct|0);
  $gep_int11 = $$01$i;
  $gep12 = (($gep_int11) + 4)|0;
  $47 = $gep12;
  
  if ($46) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $44 = ($47|0)==($43|0);
  
  if ($44) {
   $$0$lcssa$i = $43;
   break;
  } else {
   $$01$i$phi = $47;$$01$i = $$01$i$phi;
  }
 }
 
 $48 = $$0$lcssa$i;
 $49 = $__atoms;
 $50 = (($48) - ($49))|0;
 $51 = $50 >> 2;
 $52 = ($50|0)>(124);
 
 if ($52) {
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 }
 $gep_int13 = 7024;
 $gep14 = (($gep_int13) + ($51))|0;
 $53 = $gep14;
 $54 = HEAP8[$53]|0;
 
 do {
  if ((($51|0) == 23) | (($51|0) == 22)) {
   HEAP8[$__exp] = 80;
   
  } else if ((($51|0) == 24) | (($51|0) == 25)) {
   $55 = HEAP32[$__a_end>>2]|0;
   $56 = ($55|0)==($__a|0);
   
   do {
    if (!($56)) {
     $gep_int15 = $55;
     $gep16 = (($gep_int15) + -1)|0;
     $57 = $gep16;
     $58 = HEAP8[$57]|0;
     $59 = $58&255;
     $60 = $59 & 95;
     $61 = HEAP8[$__exp]|0;
     $62 = $61&255;
     $63 = $62 & 127;
     $64 = ($60|0)==($63|0);
     
     if ($64) {
      break;
     } else {
      $$0 = -1;
     }
     
     STACKTOP = sp;return $$0|0;
    }
   } while(0);
   $gep_int17 = $55;
   $gep18 = (($gep_int17) + 1)|0;
   $65 = $gep18;
   HEAP32[$__a_end>>2] = $65;
   HEAP8[$55] = $54;
   
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  } else {
   $66 = $54&255;
   $67 = $66 & 95;
   $68 = HEAP8[$__exp]|0;
   $69 = $68 << 24 >> 24;
   $70 = ($67|0)==($69|0);
   
   if (!($70)) {
    break;
   }
   $71 = $68 | -128;
   HEAP8[$__exp] = $71;
   $72 = HEAP8[$__in_units]|0;
   $73 = ($72<<24>>24)==(0);
   
   if ($73) {
    break;
   }
   HEAP8[$__in_units] = 0;
   $74 = $__grouping;
   $75 = HEAP8[$__grouping]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    
    $82 = $81;
   } else {
    $gep_int19 = $__grouping;
    $gep20 = (($gep_int19) + 4)|0;
    $78 = $gep20;
    $79 = HEAP32[$78>>2]|0;
    
    $82 = $79;
   }
   
   $83 = ($82|0)==(0);
   
   if ($83) {
    break;
   }
   $84 = HEAP32[$__g_end>>2]|0;
   $85 = $84;
   $86 = $__g;
   $87 = (($85) - ($86))|0;
   $88 = ($87|0)<(160);
   
   if (!($88)) {
    break;
   }
   $89 = HEAP32[$__dc>>2]|0;
   $gep_int21 = $84;
   $gep22 = (($gep_int21) + 4)|0;
   $90 = $gep22;
   HEAP32[$__g_end>>2] = $90;
   HEAP32[$84>>2] = $89;
   
  }
 } while(0);
 $91 = HEAP32[$__a_end>>2]|0;
 $gep_int23 = $91;
 $gep24 = (($gep_int23) + 1)|0;
 $92 = $gep24;
 HEAP32[$__a_end>>2] = $92;
 HEAP8[$91] = $54;
 $93 = ($50|0)>(84);
 
 if ($93) {
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $94 = HEAP32[$__dc>>2]|0;
 $95 = (($94) + 1)|0;
 HEAP32[$__dc>>2] = $95;
 
 $$0 = 0;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre4 = 0, $$pre5 = 0, $$pre7 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nm = 0, $__p$i$i$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0;
 var $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep13 = 0, $gep20 = 0, $gep22 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0;
 var $gep42 = 0, $gep44 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep_array = 0, $gep_int = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0;
 var $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0;
 var $gep_int61 = 0, label = 0, sp = 0, u$24 = 0, u$49 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $1 = sp + 24|0;
 $2 = sp + 32|0;
 $__nm = sp + 40|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 
 if ($6) {
  $7 = $this;
  $8 = HEAP32[$this>>2]|0;
  $gep_int12 = $8;
  $gep13 = (($gep_int12) + 24)|0;
  $9 = $gep13;
  $10 = HEAP32[$9>>2]|0;
  $gep_int14 = $__s;
  $11 = $gep_int14;
  $12 = HEAP32[$11>>2]|0;
  $gep_int15 = $1;
  $13 = $gep_int15;
  HEAP32[$13>>2] = $12;
  $14 = $__v&1;
  $15 = $$byval_copy;
  
  $16 = $$byval_copy;
  $17 = $1;
  ;HEAP32[$16+0>>2]=HEAP32[$17+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$10 & 31]($agg$result,$this,$$byval_copy,$__iob,$__fl,$14);
  $18 = $$byval_copy;
  
  
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $gep_int16 = $2;
 $19 = $gep_int16;
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p$i$i$i$i;
 
 $expanded1 = 8624;
 $gep_int17 = 8624;
 $expanded = $gep_int17;
 $22 = HEAP32[$expanded>>2]|0;
 $23 = ($22|0)==(-1);
 
 if ($23) {
  label = 5;
 } else {
  $gep_int18 = $__p$i$i$i$i;
  $24 = $gep_int18;
  $expanded2 = 8624;
  HEAP32[$24>>2] = $expanded2;
  $gep_int19 = $__p$i$i$i$i;
  $gep20 = (($gep_int19) + 4)|0;
  $25 = $gep20;
  $expanded3 = 177;
  HEAP32[$25>>2] = $expanded3;
  $gep_int21 = $__p$i$i$i$i;
  $gep22 = (($gep_int21) + 8)|0;
  $26 = $gep22;
  HEAP32[$26>>2] = 0;
  __THREW__ = 0;
  $expanded5 = 8624;
  $gep_int23 = 8624;
  $expanded4 = $gep_int23;
  invoke_viii(17,$expanded4|0,$21|0,178);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  
  if (!($28)) {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   
   $expanded7 = 8624;
   $gep_int24 = 8624;
   $gep25 = (($gep_int24) + 4)|0;
   $expanded6 = $gep25;
   $29 = HEAP32[$expanded6>>2]|0;
   $30 = (($29) + -1)|0;
   $gep_int26 = $20;
   $gep27 = (($gep_int26) + 12)|0;
   $31 = $gep27;
   $32 = HEAP32[$31>>2]|0;
   $gep_int28 = $20;
   $gep29 = (($gep_int28) + 8)|0;
   $33 = $gep29;
   $34 = HEAP32[$33>>2]|0;
   $35 = $32;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = $37 >> 2;
   $39 = ($38>>>0)>($30>>>0);
   
   do {
    if ($39) {
     $gep_int30 = $34;
     $gep_array = $30<<2;
     $gep31 = (($gep_int30) + ($gep_array))|0;
     $40 = $gep31;
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(0);
     
     if ($42) {
      break;
     }
     $47 = $41;
     $48 = HEAP32[$19>>2]|0;
     $gep_int32 = $48;
     $49 = $gep_int32;
     u$24 = __ZNSt3__114__shared_count16__release_sharedEv($49)|0;
     $50 = $41;
     $51 = HEAP32[$41>>2]|0;
     
     if ($__v) {
      $gep_int33 = $51;
      $gep34 = (($gep_int33) + 24)|0;
      $52 = $gep34;
      $53 = HEAP32[$52>>2]|0;
      FUNCTION_TABLE_vii[$53 & 127]($__nm,$47);
      
     } else {
      $gep_int35 = $51;
      $gep36 = (($gep_int35) + 28)|0;
      $54 = $gep36;
      $55 = HEAP32[$54>>2]|0;
      FUNCTION_TABLE_vii[$55 & 127]($__nm,$47);
      
     }
     $56 = $__nm;
     $57 = HEAP8[$__nm]|0;
     $58 = $57 & 1;
     $59 = ($58<<24>>24)==(0);
     
     if ($59) {
      $62 = $__nm;
      $gep_int41 = $__nm;
      $gep42 = (($gep_int41) + 1)|0;
      $63 = $gep42;
      $gep_int43 = $__nm;
      $gep44 = (($gep_int43) + 8)|0;
      $$pre7 = $gep44;
      
      $$ph = $63;$$pre$phi6Z2D = $63;$$pre$phi8Z2D = $$pre7;
     } else {
      $gep_int37 = $__nm;
      $gep38 = (($gep_int37) + 8)|0;
      $60 = $gep38;
      $61 = HEAP32[$60>>2]|0;
      $$pre4 = $__nm;
      $gep_int39 = $__nm;
      $gep40 = (($gep_int39) + 1)|0;
      $$pre5 = $gep40;
      
      $$ph = $61;$$pre$phi6Z2D = $$pre5;$$pre$phi8Z2D = $60;
     }
     
     
     
     $gep_int45 = $__s;
     $64 = $gep_int45;
     $gep_int46 = $__nm;
     $gep47 = (($gep_int46) + 4)|0;
     $65 = $gep47;
     
     $66 = $57;$67 = $$ph;
     L20: while(1) {
      
      
      $68 = $66 & 1;
      $69 = ($68<<24>>24)==(0);
      
      if ($69) {
       $72 = $66&255;
       $73 = $72 >>> 1;
       
       $74 = $$pre$phi6Z2D;$75 = $73;
      } else {
       $70 = HEAP32[$$pre$phi8Z2D>>2]|0;
       $71 = HEAP32[$65>>2]|0;
       
       $74 = $70;$75 = $71;
      }
      
      
      $gep_int48 = $74;
      $gep49 = (($gep_int48) + ($75))|0;
      $76 = $gep49;
      $77 = ($67|0)==($76|0);
      
      if ($77) {
       label = 29;
       break;
      }
      $78 = HEAP8[$67]|0;
      $79 = HEAP32[$64>>2]|0;
      $80 = ($79|0)==(0);
      
      do {
       if (!($80)) {
        $gep_int50 = $79;
        $gep51 = (($gep_int50) + 24)|0;
        $81 = $gep51;
        $82 = HEAP32[$81>>2]|0;
        $gep_int52 = $79;
        $gep53 = (($gep_int52) + 28)|0;
        $83 = $gep53;
        $84 = HEAP32[$83>>2]|0;
        $85 = ($82|0)==($84|0);
        
        if (!($85)) {
         $gep_int54 = $82;
         $gep55 = (($gep_int54) + 1)|0;
         $86 = $gep55;
         HEAP32[$81>>2] = $86;
         HEAP8[$82] = $78;
         
         break;
        }
        $87 = $79;
        $88 = HEAP32[$79>>2]|0;
        $gep_int56 = $88;
        $gep57 = (($gep_int56) + 52)|0;
        $89 = $gep57;
        $90 = HEAP32[$89>>2]|0;
        $91 = $78&255;
        __THREW__ = 0;
        $92 = invoke_iii($90|0,$79|0,$91|0)|0;
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        
        if ($94) {
         label = 28;
         break L20;
        }
        $95 = ($92|0)==(-1);
        
        if (!($95)) {
         break;
        }
        HEAP32[$64>>2] = 0;
        
       }
      } while(0);
      $gep_int58 = $67;
      $gep59 = (($gep_int58) + 1)|0;
      $96 = $gep59;
      $$pre = HEAP8[$__nm]|0;
      
      $66 = $$pre;$67 = $96;
     }
     if ((label|0) == 28) {
      $expanded11 = 69;
      $101 = ___cxa_find_matching_catch(-1,-1)|0;
      $102 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
      
      $$0 = $101;$$01 = $102;
      
      
      ___resumeException($$0|0);
      // unreachable
     }
     else if ((label|0) == 29) {
      $103 = HEAP32[$64>>2]|0;
      $gep_int61 = $agg$result;
      $104 = $gep_int61;
      HEAP32[$104>>2] = $103;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
      
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $43 = ___cxa_allocate_exception(4)|0;
   $44 = $43;
   __ZNSt8bad_castC2Ev($44);
   __THREW__ = 0;
   $expanded8 = 16440;
   $expanded9 = 119;
   invoke_viii(5,$43|0,$expanded8|0,$expanded9|0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   
   if ($46) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded10 = 69;
 $97 = ___cxa_find_matching_catch(-1,-1)|0;
 $98 = tempRet0;
 $99 = HEAP32[$19>>2]|0;
 $gep_int60 = $99;
 $100 = $gep_int60;
 u$49 = __ZNSt3__114__shared_count16__release_sharedEv($100)|0;
 
 $$0 = $97;$$01 = $98;
 
 
 ___resumeException($$0|0);
 // unreachable
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep14 = 0, $gep16 = 0;
 var $gep18 = 0, $gep20 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0;
 var $gep_int31 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $gep_int39 = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$42 = 0, u$49 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $gep_int = $__fmt;
 $3 = $gep_int;
 $gep_int11 = 7272;
 $expanded = $gep_int11;
 ;HEAP8[$3+0|0]=HEAP8[$expanded+0|0]|0;HEAP8[$3+1|0]=HEAP8[$expanded+1|0]|0;HEAP8[$3+2|0]=HEAP8[$expanded+2|0]|0;HEAP8[$3+3|0]=HEAP8[$expanded+3|0]|0;HEAP8[$3+4|0]=HEAP8[$expanded+4|0]|0;HEAP8[$3+5|0]=HEAP8[$expanded+5|0]|0;
 $gep_int12 = $__fmt;
 $gep = (($gep_int12) + 1)|0;
 $4 = $gep;
 $gep_int13 = $__iob;
 $gep14 = (($gep_int13) + 4)|0;
 $5 = $gep14;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2048;
 $8 = ($7|0)==(0);
 
 if ($8) {
  $$0$i = $4;
 } else {
  $gep_int15 = $__fmt;
  $gep16 = (($gep_int15) + 2)|0;
  $9 = $gep16;
  HEAP8[$4] = 43;
  
  $$0$i = $9;
 }
 
 $10 = $6 & 512;
 $11 = ($10|0)==(0);
 
 if ($11) {
  $$13$i$ph = $$0$i;
 } else {
  $gep_int17 = $$0$i;
  $gep18 = (($gep_int17) + 1)|0;
  $12 = $gep18;
  HEAP8[$$0$i] = 35;
  
  $$13$i$ph = $12;
 }
 
 HEAP8[$$13$i$ph] = 108;
 $gep_int19 = $$13$i$ph;
 $gep20 = (($gep_int19) + 1)|0;
 $scevgep = $gep20;
 $13 = $6 & 74;
 
 do {
  if ((($13|0) == 64)) {
   HEAP8[$scevgep] = 111;
   
  } else if ((($13|0) == 8)) {
   $14 = $6 & 16384;
   $15 = ($14|0)==(0);
   
   if ($15) {
    HEAP8[$scevgep] = 120;
    
    break;
   } else {
    HEAP8[$scevgep] = 88;
    
    break;
   }
  } else {
   HEAP8[$scevgep] = 100;
   
  }
 } while(0);
 $gep_int21 = $__nar;
 $16 = $gep_int21;
 $gep_int22 = 8376;
 $expanded1 = $gep_int22;
 $17 = HEAP8[$expanded1]|0;
 $18 = ($17<<24>>24)==(0);
 
 do {
  if ($18) {
   $expanded2 = 8376;
   $19 = ___cxa_guard_acquire($expanded2|0)|0;
   $20 = ($19|0)==(0);
   
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $gep_int23 = 8384;
   $expanded3 = $gep_int23;
   $21 = invoke_iiii(30,2147483647,$expanded3|0,0)|0;
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   
   if ($23) {
    $expanded6 = 69;
    $24 = ___cxa_find_matching_catch(-1,-1)|0;
    $25 = tempRet0;
    $expanded7 = 8376;
    ___cxa_guard_abort($expanded7|0);
    ___resumeException($24|0);
    // unreachable
   } else {
    $expanded4 = 8368;
    HEAP32[8368>>2] = $21;
    $expanded5 = 8376;
    ___cxa_guard_release($expanded5|0);
    
    break;
   }
  }
 } while(0);
 $expanded8 = 8368;
 $26 = HEAP32[8368>>2]|0;
 
 $gep_int24 = $vararg_buffer;
 $vararg_ptr = $gep_int24;
 HEAP32[$vararg_ptr>>2] = $__v;
 $expanded9 = 18;
 $vararg_func = $expanded9;
 $27 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16,12,$26,$3,$vararg_buffer)|0;
 
 $gep_int25 = $__nar;
 $gep26 = (($gep_int25) + ($27))|0;
 $28 = $gep26;
 $29 = HEAP32[$5>>2]|0;
 $30 = $29 & 176;
 
 do {
  if ((($30|0) == 32)) {
   $$0$i1 = $28;
  } else if ((($30|0) == 16)) {
   $31 = HEAP8[$16]|0;
   
   if ((($31<<24>>24) == 43) | (($31<<24>>24) == 45)) {
    $gep_int27 = $__nar;
    $gep28 = (($gep_int27) + 1)|0;
    $32 = $gep28;
    
    $$0$i1 = $32;
    break;
   }
   $33 = ($27|0)>(1);
   $34 = ($31<<24>>24)==(48);
   $or$cond$i = $33 & $34;
   
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $gep_int29 = $__nar;
   $gep30 = (($gep_int29) + 1)|0;
   $35 = $gep30;
   $36 = HEAP8[$35]|0;
   
   if (!((($36<<24>>24) == 88) | (($36<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $gep_int31 = $__nar;
   $gep32 = (($gep_int31) + 2)|0;
   $37 = $gep32;
   
   $$0$i1 = $37;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  
  $$0$i1 = $16;
 }
 
 $gep_int33 = $__o;
 $38 = $gep_int33;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(43,$16|0,$$0$i1|0,$28|0,$38|0,$__op|0,$__oe|0,$1|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 
 if ($40) {
  $expanded10 = 69;
  $53 = ___cxa_find_matching_catch(-1,-1)|0;
  $54 = tempRet0;
  $gep_int38 = $1;
  $55 = $gep_int38;
  $56 = HEAP32[$55>>2]|0;
  $gep_int39 = $56;
  $57 = $gep_int39;
  u$49 = __ZNSt3__114__shared_count16__release_sharedEv($57)|0;
  ___resumeException($53|0);
  // unreachable
 } else {
  $gep_int34 = $1;
  $41 = $gep_int34;
  $42 = HEAP32[$41>>2]|0;
  $gep_int35 = $42;
  $43 = $gep_int35;
  u$42 = __ZNSt3__114__shared_count16__release_sharedEv($43)|0;
  $gep_int36 = $__s;
  $44 = $gep_int36;
  $45 = HEAP32[$44>>2]|0;
  $gep_int37 = $2;
  $46 = $gep_int37;
  HEAP32[$46>>2] = $45;
  $47 = HEAP32[$__op>>2]|0;
  $48 = HEAP32[$__oe>>2]|0;
  $49 = $$byval_copy;
  
  $50 = $$byval_copy;
  $51 = $2;
  ;HEAP32[$50+0>>2]=HEAP32[$51+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$38,$47,$48,$__iob,$__fl);
  $52 = $$byval_copy;
  
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__va = 0, $arglist = 0, $expanded = 0, $gep_int = 0, label = 0, sp = 0, u$3 = 0, u$5 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 $gep_int = $__va;
 $1 = $gep_int;
 $2 = $__va;
 $arglist = $2;
 HEAP32[$__va>>2] = $varargs;
 $3 = _uselocale($__l|0)|0;
 $4 = _vsnprintf($__s|0,$__n|0,$__format|0,$1|0)|0;
 $5 = ($3|0)==(0);
 
 if ($5) {
  STACKTOP = sp;return $4|0;
 }
 __THREW__ = 0;
 u$3 = invoke_ii(95,$3|0)|0;
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 if ($7) {
  $expanded = 69;
  $8 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$5 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable
 } else {
  STACKTOP = sp;return $4|0;
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$012$i$i10 = 0, $$012$i$i10$phi = 0, $$16 = 0, $$__dg$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $119$phi = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $182$phi = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$013 = 0, $__dc$1 = 0, $__dg$014 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$015 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0;
 var $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0, $gep106 = 0, $gep108 = 0;
 var $gep110 = 0, $gep112 = 0, $gep114 = 0, $gep116 = 0, $gep118 = 0, $gep31 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0, $gep44 = 0, $gep46 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0;
 var $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep76 = 0, $gep78 = 0, $gep80 = 0, $gep82 = 0, $gep84 = 0, $gep86 = 0, $gep88 = 0, $gep90 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep98 = 0, $gep_array = 0, $gep_array55 = 0, $gep_int = 0;
 var $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int111 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0, $gep_int27 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int42 = 0;
 var $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0;
 var $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int99 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0, u$32 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__grouping = sp + 32|0;
 $gep_int = $__loc;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 
 $expanded6 = 8480;
 $gep_int27 = 8480;
 $expanded = $gep_int27;
 $4 = HEAP32[$expanded>>2]|0;
 $5 = ($4|0)==(-1);
 
 if (!($5)) {
  $gep_int28 = $__p$i$i$i$i;
  $6 = $gep_int28;
  $expanded7 = 8480;
  HEAP32[$6>>2] = $expanded7;
  $gep_int29 = $__p$i$i$i$i;
  $gep = (($gep_int29) + 4)|0;
  $7 = $gep;
  $expanded8 = 177;
  HEAP32[$7>>2] = $expanded8;
  $gep_int30 = $__p$i$i$i$i;
  $gep31 = (($gep_int30) + 8)|0;
  $8 = $gep31;
  HEAP32[$8>>2] = 0;
  $expanded10 = 8480;
  $gep_int32 = 8480;
  $expanded9 = $gep_int32;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded9,$3,178);
  
 }
 
 $expanded12 = 8480;
 $gep_int33 = 8480;
 $gep34 = (($gep_int33) + 4)|0;
 $expanded11 = $gep34;
 $9 = HEAP32[$expanded11>>2]|0;
 $10 = (($9) + -1)|0;
 $gep_int35 = $2;
 $gep36 = (($gep_int35) + 12)|0;
 $11 = $gep36;
 $12 = HEAP32[$11>>2]|0;
 $gep_int37 = $2;
 $gep38 = (($gep_int37) + 8)|0;
 $13 = $gep38;
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 
 if (!($19)) {
  $23 = ___cxa_allocate_exception(4)|0;
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  $expanded13 = 16440;
  $expanded14 = 119;
  ___cxa_throw($23|0,$expanded13|0,$expanded14|0);
  // unreachable
 }
 $gep_int39 = $14;
 $gep_array = $10<<2;
 $gep40 = (($gep_int39) + ($gep_array))|0;
 $20 = $gep40;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 
 if ($22) {
  $23 = ___cxa_allocate_exception(4)|0;
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  $expanded13 = 16440;
  $expanded14 = 119;
  ___cxa_throw($23|0,$expanded13|0,$expanded14|0);
  // unreachable
 }
 $25 = $21;
 $26 = HEAP32[$1>>2]|0;
 $27 = $__p$i$i$i$i1;
 
 $expanded16 = 8624;
 $gep_int41 = 8624;
 $expanded15 = $gep_int41;
 $28 = HEAP32[$expanded15>>2]|0;
 $29 = ($28|0)==(-1);
 
 if (!($29)) {
  $gep_int42 = $__p$i$i$i$i1;
  $30 = $gep_int42;
  $expanded17 = 8624;
  HEAP32[$30>>2] = $expanded17;
  $gep_int43 = $__p$i$i$i$i1;
  $gep44 = (($gep_int43) + 4)|0;
  $31 = $gep44;
  $expanded18 = 177;
  HEAP32[$31>>2] = $expanded18;
  $gep_int45 = $__p$i$i$i$i1;
  $gep46 = (($gep_int45) + 8)|0;
  $32 = $gep46;
  HEAP32[$32>>2] = 0;
  $expanded20 = 8624;
  $gep_int47 = 8624;
  $expanded19 = $gep_int47;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded19,$27,178);
  
 }
 
 $expanded22 = 8624;
 $gep_int48 = 8624;
 $gep49 = (($gep_int48) + 4)|0;
 $expanded21 = $gep49;
 $33 = HEAP32[$expanded21>>2]|0;
 $34 = (($33) + -1)|0;
 $gep_int50 = $26;
 $gep51 = (($gep_int50) + 12)|0;
 $35 = $gep51;
 $36 = HEAP32[$35>>2]|0;
 $gep_int52 = $26;
 $gep53 = (($gep_int52) + 8)|0;
 $37 = $gep53;
 $38 = HEAP32[$37>>2]|0;
 $39 = $36;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 $42 = $41 >> 2;
 $43 = ($42>>>0)>($34>>>0);
 
 if (!($43)) {
  $47 = ___cxa_allocate_exception(4)|0;
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  $expanded23 = 16440;
  $expanded24 = 119;
  ___cxa_throw($47|0,$expanded23|0,$expanded24|0);
  // unreachable
 }
 $gep_int54 = $38;
 $gep_array55 = $34<<2;
 $gep56 = (($gep_int54) + ($gep_array55))|0;
 $44 = $gep56;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 
 if ($46) {
  $47 = ___cxa_allocate_exception(4)|0;
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  $expanded23 = 16440;
  $expanded24 = 119;
  ___cxa_throw($47|0,$expanded23|0,$expanded24|0);
  // unreachable
 }
 $49 = $45;
 $50 = $45;
 $51 = HEAP32[$45>>2]|0;
 $gep_int57 = $51;
 $gep58 = (($gep_int57) + 20)|0;
 $52 = $gep58;
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vii[$53 & 127]($__grouping,$49);
 $54 = $__grouping;
 $55 = HEAP8[$__grouping]|0;
 $56 = $55 & 1;
 $57 = ($56<<24>>24)==(0);
 
 if ($57) {
  $60 = $55&255;
  $61 = $60 >>> 1;
  
  $62 = $61;
 } else {
  $gep_int59 = $__grouping;
  $gep60 = (($gep_int59) + 4)|0;
  $58 = $gep60;
  $59 = HEAP32[$58>>2]|0;
  
  $62 = $59;
 }
 
 $63 = ($62|0)==(0);
 
 L23: do {
  if ($63) {
   $64 = $21;
   $65 = HEAP32[$21>>2]|0;
   $gep_int61 = $65;
   $gep62 = (($gep_int61) + 32)|0;
   $66 = $gep62;
   $67 = HEAP32[$66>>2]|0;
   __THREW__ = 0;
   u$32 = invoke_iiiii($67|0,$25|0,$__nb|0,$__ne|0,$__ob|0)|0;
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   
   if ($69) {
    label = 18;
    break;
   }
   $70 = $__ne;
   $71 = $__nb;
   $72 = (($70) - ($71))|0;
   $gep_int63 = $__ob;
   $gep64 = (($gep_int63) + ($72))|0;
   $73 = $gep64;
   HEAP32[$__oe>>2] = $73;
   
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $78 = HEAP8[$__nb]|0;
   
   if ((($78<<24>>24) == 43) | (($78<<24>>24) == 45)) {
    $79 = $21;
    $80 = HEAP32[$21>>2]|0;
    $gep_int65 = $80;
    $gep66 = (($gep_int65) + 28)|0;
    $81 = $gep66;
    $82 = HEAP32[$81>>2]|0;
    __THREW__ = 0;
    $83 = invoke_iii($82|0,$25|0,$78|0)|0;
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    
    if ($85) {
     label = 18;
     break;
    }
    $gep_int67 = $__nb;
    $gep68 = (($gep_int67) + 1)|0;
    $86 = $gep68;
    $87 = HEAP32[$__oe>>2]|0;
    $gep_int69 = $87;
    $gep70 = (($gep_int69) + 1)|0;
    $88 = $gep70;
    HEAP32[$__oe>>2] = $88;
    HEAP8[$87] = $83;
    
    $__nf$0 = $86;
   } else {
    $__nf$0 = $__nb;
   }
   
   $89 = $__ne;
   $90 = $__nf$0;
   $91 = (($89) - ($90))|0;
   $92 = ($91|0)>(1);
   
   do {
    if ($92) {
     $93 = HEAP8[$__nf$0]|0;
     $94 = ($93<<24>>24)==(48);
     
     if (!($94)) {
      $__nf$1 = $__nf$0;
      break;
     }
     $gep_int71 = $__nf$0;
     $gep72 = (($gep_int71) + 1)|0;
     $95 = $gep72;
     $96 = HEAP8[$95]|0;
     
     if (!((($96<<24>>24) == 88) | (($96<<24>>24) == 120))) {
      $__nf$1 = $__nf$0;
      break;
     }
     $97 = $21;
     $98 = HEAP32[$21>>2]|0;
     $gep_int73 = $98;
     $gep74 = (($gep_int73) + 28)|0;
     $99 = $gep74;
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = invoke_iii($100|0,$25|0,48)|0;
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     
     if ($103) {
      label = 18;
      break L23;
     }
     $104 = HEAP32[$__oe>>2]|0;
     $gep_int75 = $104;
     $gep76 = (($gep_int75) + 1)|0;
     $105 = $gep76;
     HEAP32[$__oe>>2] = $105;
     HEAP8[$104] = $101;
     $106 = HEAP8[$95]|0;
     $107 = HEAP32[$21>>2]|0;
     $gep_int77 = $107;
     $gep78 = (($gep_int77) + 28)|0;
     $108 = $gep78;
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     $110 = invoke_iii($109|0,$25|0,$106|0)|0;
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     
     if ($112) {
      label = 18;
      break L23;
     }
     $gep_int79 = $__nf$0;
     $gep80 = (($gep_int79) + 2)|0;
     $113 = $gep80;
     $114 = HEAP32[$__oe>>2]|0;
     $gep_int81 = $114;
     $gep82 = (($gep_int81) + 1)|0;
     $115 = $gep82;
     HEAP32[$__oe>>2] = $115;
     HEAP8[$114] = $110;
     
     $__nf$1 = $113;
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   
   $116 = ($__nf$1|0)==($__ne|0);
   
   do {
    if (!($116)) {
     $gep_int83 = $__ne;
     $gep84 = (($gep_int83) + -1)|0;
     $117 = $gep84;
     $118 = ($117>>>0)>($__nf$1>>>0);
     
     if ($118) {
      $$012$i$i = $__nf$1;$119 = $117;
     } else {
      break;
     }
     while(1) {
      
      
      $120 = HEAP8[$$012$i$i]|0;
      $121 = HEAP8[$119]|0;
      HEAP8[$$012$i$i] = $121;
      HEAP8[$119] = $120;
      $gep_int85 = $$012$i$i;
      $gep86 = (($gep_int85) + 1)|0;
      $122 = $gep86;
      $gep_int87 = $119;
      $gep88 = (($gep_int87) + -1)|0;
      $123 = $gep88;
      $124 = ($122>>>0)<($123>>>0);
      
      if ($124) {
       $119$phi = $123;$$012$i$i$phi = $122;$119 = $119$phi;$$012$i$i = $$012$i$i$phi;
      } else {
       break;
      }
     }
    }
   } while(0);
   $125 = $45;
   $126 = HEAP32[$45>>2]|0;
   $gep_int89 = $126;
   $gep90 = (($gep_int89) + 16)|0;
   $127 = $gep90;
   $128 = HEAP32[$127>>2]|0;
   __THREW__ = 0;
   $129 = invoke_ii($128|0,$49|0)|0;
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   
   if ($131) {
    label = 18;
    break;
   }
   $132 = ($__nf$1>>>0)<($__ne>>>0);
   
   L44: do {
    if ($132) {
     $133 = $__grouping;
     $gep_int91 = $__grouping;
     $gep92 = (($gep_int91) + 1)|0;
     $134 = $gep92;
     $135 = $21;
     $gep_int93 = $__grouping;
     $gep94 = (($gep_int93) + 4)|0;
     $136 = $gep94;
     $gep_int95 = $__grouping;
     $gep96 = (($gep_int95) + 8)|0;
     $137 = $gep96;
     
     $__dc$013 = 0;$__dg$014 = 0;$__p$015 = $__nf$1;
     while(1) {
      
      
      
      $138 = HEAP8[$__grouping]|0;
      $139 = $138 & 1;
      $140 = ($139<<24>>24)==(0);
      $141 = HEAP32[$137>>2]|0;
      $$ = $140 ? $134 : $141;
      $gep_int97 = $$;
      $gep98 = (($gep_int97) + ($__dg$014))|0;
      $142 = $gep98;
      $143 = HEAP8[$142]|0;
      $144 = ($143<<24>>24)==(0);
      
      do {
       if ($144) {
        $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
       } else {
        $145 = HEAP32[$137>>2]|0;
        $$16 = $140 ? $134 : $145;
        $gep_int99 = $$16;
        $gep100 = (($gep_int99) + ($__dg$014))|0;
        $146 = $gep100;
        $147 = HEAP8[$146]|0;
        $148 = $147 << 24 >> 24;
        $149 = ($__dc$013|0)==($148|0);
        
        if (!($149)) {
         $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
         break;
        }
        $150 = HEAP32[$__oe>>2]|0;
        $gep_int101 = $150;
        $gep102 = (($gep_int101) + 1)|0;
        $151 = $gep102;
        HEAP32[$__oe>>2] = $151;
        HEAP8[$150] = $129;
        $152 = HEAP8[$__grouping]|0;
        $153 = $152 & 1;
        $154 = ($153<<24>>24)==(0);
        
        if ($154) {
         $156 = $152&255;
         $157 = $156 >>> 1;
         
         $158 = $157;
        } else {
         $155 = HEAP32[$136>>2]|0;
         
         $158 = $155;
        }
        
        $159 = (($158) + -1)|0;
        $160 = ($__dg$014>>>0)<($159>>>0);
        $161 = $160&1;
        $$__dg$0 = (($161) + ($__dg$014))|0;
        
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       }
      } while(0);
      
      
      $162 = HEAP8[$__p$015]|0;
      $163 = HEAP32[$21>>2]|0;
      $gep_int103 = $163;
      $gep104 = (($gep_int103) + 28)|0;
      $164 = $gep104;
      $165 = HEAP32[$164>>2]|0;
      __THREW__ = 0;
      $166 = invoke_iii($165|0,$25|0,$162|0)|0;
      $167 = __THREW__; __THREW__ = 0;
      $168 = $167&1;
      
      if ($168) {
       break;
      }
      $169 = HEAP32[$__oe>>2]|0;
      $gep_int105 = $169;
      $gep106 = (($gep_int105) + 1)|0;
      $170 = $gep106;
      HEAP32[$__oe>>2] = $170;
      HEAP8[$169] = $166;
      $171 = (($__dc$1) + 1)|0;
      $gep_int107 = $__p$015;
      $gep108 = (($gep_int107) + 1)|0;
      $172 = $gep108;
      $173 = ($172>>>0)<($__ne>>>0);
      
      if ($173) {
       $__dc$013 = $171;$__dg$014 = $__dg$1;$__p$015 = $172;
      } else {
       break L44;
      }
     }
     $expanded25 = 69;
     $74 = ___cxa_find_matching_catch(-1,-1)|0;
     $75 = tempRet0;
     
     $lpad$phi$index = $74;$lpad$phi$index2 = $75;
     
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($lpad$phi$index|0);
     // unreachable
    }
   } while(0);
   $174 = $__nf$1;
   $175 = $__nb;
   $176 = (($174) - ($175))|0;
   $gep_int109 = $__ob;
   $gep110 = (($gep_int109) + ($176))|0;
   $177 = $gep110;
   $178 = HEAP32[$__oe>>2]|0;
   $179 = ($177|0)==($178|0);
   
   if ($179) {
    break;
   }
   $gep_int111 = $178;
   $gep112 = (($gep_int111) + -1)|0;
   $180 = $gep112;
   $181 = ($180>>>0)>($177>>>0);
   
   if ($181) {
    $$012$i$i10 = $177;$182 = $180;
   } else {
    break;
   }
   while(1) {
    
    
    $183 = HEAP8[$$012$i$i10]|0;
    $184 = HEAP8[$182]|0;
    HEAP8[$$012$i$i10] = $184;
    HEAP8[$182] = $183;
    $gep_int113 = $$012$i$i10;
    $gep114 = (($gep_int113) + 1)|0;
    $185 = $gep114;
    $gep_int115 = $182;
    $gep116 = (($gep_int115) + -1)|0;
    $186 = $gep116;
    $187 = ($185>>>0)<($186>>>0);
    
    if ($187) {
     $182$phi = $186;$$012$i$i10$phi = $185;$182 = $182$phi;$$012$i$i10 = $$012$i$i10$phi;
    } else {
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $expanded26 = 69;
  $76 = ___cxa_find_matching_catch(-1,-1)|0;
  $77 = tempRet0;
  
  $lpad$phi$index = $76;$lpad$phi$index2 = $77;
  
  
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable
 }
 $188 = ($__np|0)==($__ne|0);
 
 if ($188) {
  $189 = HEAP32[$__oe>>2]|0;
  
  $storemerge = $189;
  
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $190 = $__np;
  $191 = $__nb;
  $192 = (($190) - ($191))|0;
  $gep_int117 = $__ob;
  $gep118 = (($gep_int117) + ($192))|0;
  $193 = $gep118;
  
  $storemerge = $193;
  
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$1,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0;
 var $gep_int18 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_func = 0;
 var $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$46 = 0, u$54 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 48|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $5 = $__fmt;
 $6 = $5;
 HEAP32[$6>>2] = 37;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $__fmt;
 $gep_int = $__fmt;
 $gep = (($gep_int) + 1)|0;
 $10 = $gep;
 $gep_int10 = $__iob;
 $gep11 = (($gep_int10) + 4)|0;
 $11 = $gep11;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 2048;
 $14 = ($13|0)==(0);
 
 if ($14) {
  $$0$i = $10;
 } else {
  $gep_int12 = $__fmt;
  $gep13 = (($gep_int12) + 2)|0;
  $15 = $gep13;
  HEAP8[$10] = 43;
  
  $$0$i = $15;
 }
 
 $16 = $12 & 512;
 $17 = ($16|0)==(0);
 
 if ($17) {
  $$13$i$ph = $$0$i;
 } else {
  $gep_int14 = $$0$i;
  $gep15 = (($gep_int14) + 1)|0;
  $18 = $gep15;
  HEAP8[$$0$i] = 35;
  
  $$13$i$ph = $18;
 }
 
 $gep_int16 = $$13$i$ph;
 $gep17 = (($gep_int16) + 1)|0;
 $19 = $gep17;
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$19] = 108;
 $gep_int18 = $$13$i$ph;
 $gep19 = (($gep_int18) + 2)|0;
 $scevgep = $gep19;
 $20 = $12 & 74;
 
 do {
  if ((($20|0) == 64)) {
   HEAP8[$scevgep] = 111;
   
  } else if ((($20|0) == 8)) {
   $21 = $12 & 16384;
   $22 = ($21|0)==(0);
   
   if ($22) {
    HEAP8[$scevgep] = 120;
    
    break;
   } else {
    HEAP8[$scevgep] = 88;
    
    break;
   }
  } else {
   HEAP8[$scevgep] = 100;
   
  }
 } while(0);
 $gep_int20 = $__nar;
 $23 = $gep_int20;
 $gep_int21 = 8376;
 $expanded = $gep_int21;
 $24 = HEAP8[$expanded]|0;
 $25 = ($24<<24>>24)==(0);
 
 do {
  if ($25) {
   $expanded1 = 8376;
   $26 = ___cxa_guard_acquire($expanded1|0)|0;
   $27 = ($26|0)==(0);
   
   if ($27) {
    break;
   }
   __THREW__ = 0;
   $gep_int22 = 8384;
   $expanded2 = $gep_int22;
   $28 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   
   if ($30) {
    $expanded5 = 69;
    $31 = ___cxa_find_matching_catch(-1,-1)|0;
    $32 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($31|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $28;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $33 = HEAP32[8368>>2]|0;
 
 $gep_int23 = $vararg_buffer;
 $vararg_ptr = $gep_int23;
 $34 = $vararg_ptr;
 $35 = $34;
 HEAP32[$35>>2] = $1;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $2;
 $expanded8 = 18;
 $vararg_func = $expanded8;
 $38 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,22,$33,$9,$vararg_buffer)|0;
 
 $gep_int24 = $__nar;
 $gep25 = (($gep_int24) + ($38))|0;
 $39 = $gep25;
 $40 = HEAP32[$11>>2]|0;
 $41 = $40 & 176;
 
 do {
  if ((($41|0) == 32)) {
   $$0$i1 = $39;
  } else if ((($41|0) == 16)) {
   $42 = HEAP8[$23]|0;
   
   if ((($42<<24>>24) == 43) | (($42<<24>>24) == 45)) {
    $gep_int26 = $__nar;
    $gep27 = (($gep_int26) + 1)|0;
    $43 = $gep27;
    
    $$0$i1 = $43;
    break;
   }
   $44 = ($38|0)>(1);
   $45 = ($42<<24>>24)==(48);
   $or$cond$i = $44 & $45;
   
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $gep_int28 = $__nar;
   $gep29 = (($gep_int28) + 1)|0;
   $46 = $gep29;
   $47 = HEAP8[$46]|0;
   
   if (!((($47<<24>>24) == 88) | (($47<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $gep_int30 = $__nar;
   $gep31 = (($gep_int30) + 2)|0;
   $48 = $gep31;
   
   $$0$i1 = $48;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  
  $$0$i1 = $23;
 }
 
 $gep_int32 = $__o;
 $49 = $gep_int32;
 
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(43,$23|0,$$0$i1|0,$39|0,$49|0,$__op|0,$__oe|0,$3|0);
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 
 if ($51) {
  $expanded9 = 69;
  $64 = ___cxa_find_matching_catch(-1,-1)|0;
  $65 = tempRet0;
  $gep_int37 = $3;
  $66 = $gep_int37;
  $67 = HEAP32[$66>>2]|0;
  $gep_int38 = $67;
  $68 = $gep_int38;
  u$54 = __ZNSt3__114__shared_count16__release_sharedEv($68)|0;
  ___resumeException($64|0);
  // unreachable
 } else {
  $gep_int33 = $3;
  $52 = $gep_int33;
  $53 = HEAP32[$52>>2]|0;
  $gep_int34 = $53;
  $54 = $gep_int34;
  u$46 = __ZNSt3__114__shared_count16__release_sharedEv($54)|0;
  $gep_int35 = $__s;
  $55 = $gep_int35;
  $56 = HEAP32[$55>>2]|0;
  $gep_int36 = $4;
  $57 = $gep_int36;
  HEAP32[$57>>2] = $56;
  $58 = HEAP32[$__op>>2]|0;
  $59 = HEAP32[$__oe>>2]|0;
  $60 = $$byval_copy;
  
  $61 = $$byval_copy;
  $62 = $4;
  ;HEAP32[$61+0>>2]=HEAP32[$62+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$49,$58,$59,$__iob,$__fl);
  $63 = $$byval_copy;
  
  
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep14 = 0, $gep16 = 0;
 var $gep18 = 0, $gep20 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0;
 var $gep_int31 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $gep_int39 = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$42 = 0, u$49 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $gep_int = $__fmt;
 $3 = $gep_int;
 $gep_int11 = 7272;
 $expanded = $gep_int11;
 ;HEAP8[$3+0|0]=HEAP8[$expanded+0|0]|0;HEAP8[$3+1|0]=HEAP8[$expanded+1|0]|0;HEAP8[$3+2|0]=HEAP8[$expanded+2|0]|0;HEAP8[$3+3|0]=HEAP8[$expanded+3|0]|0;HEAP8[$3+4|0]=HEAP8[$expanded+4|0]|0;HEAP8[$3+5|0]=HEAP8[$expanded+5|0]|0;
 $gep_int12 = $__fmt;
 $gep = (($gep_int12) + 1)|0;
 $4 = $gep;
 $gep_int13 = $__iob;
 $gep14 = (($gep_int13) + 4)|0;
 $5 = $gep14;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2048;
 $8 = ($7|0)==(0);
 
 if ($8) {
  $$0$i = $4;
 } else {
  $gep_int15 = $__fmt;
  $gep16 = (($gep_int15) + 2)|0;
  $9 = $gep16;
  HEAP8[$4] = 43;
  
  $$0$i = $9;
 }
 
 $10 = $6 & 512;
 $11 = ($10|0)==(0);
 
 if ($11) {
  $$13$i$ph = $$0$i;
 } else {
  $gep_int17 = $$0$i;
  $gep18 = (($gep_int17) + 1)|0;
  $12 = $gep18;
  HEAP8[$$0$i] = 35;
  
  $$13$i$ph = $12;
 }
 
 HEAP8[$$13$i$ph] = 108;
 $gep_int19 = $$13$i$ph;
 $gep20 = (($gep_int19) + 1)|0;
 $scevgep = $gep20;
 $13 = $6 & 74;
 
 do {
  if ((($13|0) == 8)) {
   $14 = $6 & 16384;
   $15 = ($14|0)==(0);
   
   if ($15) {
    HEAP8[$scevgep] = 120;
    
    break;
   } else {
    HEAP8[$scevgep] = 88;
    
    break;
   }
  } else if ((($13|0) == 64)) {
   HEAP8[$scevgep] = 111;
   
  } else {
   HEAP8[$scevgep] = 117;
   
  }
 } while(0);
 $gep_int21 = $__nar;
 $16 = $gep_int21;
 $gep_int22 = 8376;
 $expanded1 = $gep_int22;
 $17 = HEAP8[$expanded1]|0;
 $18 = ($17<<24>>24)==(0);
 
 do {
  if ($18) {
   $expanded2 = 8376;
   $19 = ___cxa_guard_acquire($expanded2|0)|0;
   $20 = ($19|0)==(0);
   
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $gep_int23 = 8384;
   $expanded3 = $gep_int23;
   $21 = invoke_iiii(30,2147483647,$expanded3|0,0)|0;
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   
   if ($23) {
    $expanded6 = 69;
    $24 = ___cxa_find_matching_catch(-1,-1)|0;
    $25 = tempRet0;
    $expanded7 = 8376;
    ___cxa_guard_abort($expanded7|0);
    ___resumeException($24|0);
    // unreachable
   } else {
    $expanded4 = 8368;
    HEAP32[8368>>2] = $21;
    $expanded5 = 8376;
    ___cxa_guard_release($expanded5|0);
    
    break;
   }
  }
 } while(0);
 $expanded8 = 8368;
 $26 = HEAP32[8368>>2]|0;
 
 $gep_int24 = $vararg_buffer;
 $vararg_ptr = $gep_int24;
 HEAP32[$vararg_ptr>>2] = $__v;
 $expanded9 = 18;
 $vararg_func = $expanded9;
 $27 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16,12,$26,$3,$vararg_buffer)|0;
 
 $gep_int25 = $__nar;
 $gep26 = (($gep_int25) + ($27))|0;
 $28 = $gep26;
 $29 = HEAP32[$5>>2]|0;
 $30 = $29 & 176;
 
 do {
  if ((($30|0) == 16)) {
   $31 = HEAP8[$16]|0;
   
   if ((($31<<24>>24) == 43) | (($31<<24>>24) == 45)) {
    $gep_int27 = $__nar;
    $gep28 = (($gep_int27) + 1)|0;
    $32 = $gep28;
    
    $$0$i1 = $32;
    break;
   }
   $33 = ($27|0)>(1);
   $34 = ($31<<24>>24)==(48);
   $or$cond$i = $33 & $34;
   
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $gep_int29 = $__nar;
   $gep30 = (($gep_int29) + 1)|0;
   $35 = $gep30;
   $36 = HEAP8[$35]|0;
   
   if (!((($36<<24>>24) == 88) | (($36<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $gep_int31 = $__nar;
   $gep32 = (($gep_int31) + 2)|0;
   $37 = $gep32;
   
   $$0$i1 = $37;
  } else if ((($30|0) == 32)) {
   $$0$i1 = $28;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  
  $$0$i1 = $16;
 }
 
 $gep_int33 = $__o;
 $38 = $gep_int33;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(43,$16|0,$$0$i1|0,$28|0,$38|0,$__op|0,$__oe|0,$1|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 
 if ($40) {
  $expanded10 = 69;
  $53 = ___cxa_find_matching_catch(-1,-1)|0;
  $54 = tempRet0;
  $gep_int38 = $1;
  $55 = $gep_int38;
  $56 = HEAP32[$55>>2]|0;
  $gep_int39 = $56;
  $57 = $gep_int39;
  u$49 = __ZNSt3__114__shared_count16__release_sharedEv($57)|0;
  ___resumeException($53|0);
  // unreachable
 } else {
  $gep_int34 = $1;
  $41 = $gep_int34;
  $42 = HEAP32[$41>>2]|0;
  $gep_int35 = $42;
  $43 = $gep_int35;
  u$42 = __ZNSt3__114__shared_count16__release_sharedEv($43)|0;
  $gep_int36 = $__s;
  $44 = $gep_int36;
  $45 = HEAP32[$44>>2]|0;
  $gep_int37 = $2;
  $46 = $gep_int37;
  HEAP32[$46>>2] = $45;
  $47 = HEAP32[$__op>>2]|0;
  $48 = HEAP32[$__oe>>2]|0;
  $49 = $$byval_copy;
  
  $50 = $$byval_copy;
  $51 = $2;
  ;HEAP32[$50+0>>2]=HEAP32[$51+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$38,$47,$48,$__iob,$__fl);
  $52 = $$byval_copy;
  
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$1,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0;
 var $gep_int18 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_func = 0;
 var $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$46 = 0, u$54 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 48|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $5 = $__fmt;
 $6 = $5;
 HEAP32[$6>>2] = 37;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $__fmt;
 $gep_int = $__fmt;
 $gep = (($gep_int) + 1)|0;
 $10 = $gep;
 $gep_int10 = $__iob;
 $gep11 = (($gep_int10) + 4)|0;
 $11 = $gep11;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 2048;
 $14 = ($13|0)==(0);
 
 if ($14) {
  $$0$i = $10;
 } else {
  $gep_int12 = $__fmt;
  $gep13 = (($gep_int12) + 2)|0;
  $15 = $gep13;
  HEAP8[$10] = 43;
  
  $$0$i = $15;
 }
 
 $16 = $12 & 512;
 $17 = ($16|0)==(0);
 
 if ($17) {
  $$13$i$ph = $$0$i;
 } else {
  $gep_int14 = $$0$i;
  $gep15 = (($gep_int14) + 1)|0;
  $18 = $gep15;
  HEAP8[$$0$i] = 35;
  
  $$13$i$ph = $18;
 }
 
 $gep_int16 = $$13$i$ph;
 $gep17 = (($gep_int16) + 1)|0;
 $19 = $gep17;
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$19] = 108;
 $gep_int18 = $$13$i$ph;
 $gep19 = (($gep_int18) + 2)|0;
 $scevgep = $gep19;
 $20 = $12 & 74;
 
 do {
  if ((($20|0) == 64)) {
   HEAP8[$scevgep] = 111;
   
  } else if ((($20|0) == 8)) {
   $21 = $12 & 16384;
   $22 = ($21|0)==(0);
   
   if ($22) {
    HEAP8[$scevgep] = 120;
    
    break;
   } else {
    HEAP8[$scevgep] = 88;
    
    break;
   }
  } else {
   HEAP8[$scevgep] = 117;
   
  }
 } while(0);
 $gep_int20 = $__nar;
 $23 = $gep_int20;
 $gep_int21 = 8376;
 $expanded = $gep_int21;
 $24 = HEAP8[$expanded]|0;
 $25 = ($24<<24>>24)==(0);
 
 do {
  if ($25) {
   $expanded1 = 8376;
   $26 = ___cxa_guard_acquire($expanded1|0)|0;
   $27 = ($26|0)==(0);
   
   if ($27) {
    break;
   }
   __THREW__ = 0;
   $gep_int22 = 8384;
   $expanded2 = $gep_int22;
   $28 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   
   if ($30) {
    $expanded5 = 69;
    $31 = ___cxa_find_matching_catch(-1,-1)|0;
    $32 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($31|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $28;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $33 = HEAP32[8368>>2]|0;
 
 $gep_int23 = $vararg_buffer;
 $vararg_ptr = $gep_int23;
 $34 = $vararg_ptr;
 $35 = $34;
 HEAP32[$35>>2] = $1;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $2;
 $expanded8 = 18;
 $vararg_func = $expanded8;
 $38 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,23,$33,$9,$vararg_buffer)|0;
 
 $gep_int24 = $__nar;
 $gep25 = (($gep_int24) + ($38))|0;
 $39 = $gep25;
 $40 = HEAP32[$11>>2]|0;
 $41 = $40 & 176;
 
 do {
  if ((($41|0) == 32)) {
   $$0$i1 = $39;
  } else if ((($41|0) == 16)) {
   $42 = HEAP8[$23]|0;
   
   if ((($42<<24>>24) == 43) | (($42<<24>>24) == 45)) {
    $gep_int26 = $__nar;
    $gep27 = (($gep_int26) + 1)|0;
    $43 = $gep27;
    
    $$0$i1 = $43;
    break;
   }
   $44 = ($38|0)>(1);
   $45 = ($42<<24>>24)==(48);
   $or$cond$i = $44 & $45;
   
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $gep_int28 = $__nar;
   $gep29 = (($gep_int28) + 1)|0;
   $46 = $gep29;
   $47 = HEAP8[$46]|0;
   
   if (!((($47<<24>>24) == 88) | (($47<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $gep_int30 = $__nar;
   $gep31 = (($gep_int30) + 2)|0;
   $48 = $gep31;
   
   $$0$i1 = $48;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  
  $$0$i1 = $23;
 }
 
 $gep_int32 = $__o;
 $49 = $gep_int32;
 
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(43,$23|0,$$0$i1|0,$39|0,$49|0,$__op|0,$__oe|0,$3|0);
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 
 if ($51) {
  $expanded9 = 69;
  $64 = ___cxa_find_matching_catch(-1,-1)|0;
  $65 = tempRet0;
  $gep_int37 = $3;
  $66 = $gep_int37;
  $67 = HEAP32[$66>>2]|0;
  $gep_int38 = $67;
  $68 = $gep_int38;
  u$54 = __ZNSt3__114__shared_count16__release_sharedEv($68)|0;
  ___resumeException($64|0);
  // unreachable
 } else {
  $gep_int33 = $3;
  $52 = $gep_int33;
  $53 = HEAP32[$52>>2]|0;
  $gep_int34 = $53;
  $54 = $gep_int34;
  u$46 = __ZNSt3__114__shared_count16__release_sharedEv($54)|0;
  $gep_int35 = $__s;
  $55 = $gep_int35;
  $56 = HEAP32[$55>>2]|0;
  $gep_int36 = $4;
  $57 = $gep_int36;
  HEAP32[$57>>2] = $56;
  $58 = HEAP32[$__op>>2]|0;
  $59 = HEAP32[$__oe>>2]|0;
  $60 = $$byval_copy;
  
  $61 = $$byval_copy;
  $62 = $4;
  ;HEAP32[$61+0>>2]=HEAP32[$62+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$49,$58,$59,$__iob,$__fl);
  $63 = $$byval_copy;
  
  
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$118 = 0, $$1217 = 0, $$byval_copy = 0, $$pre = 0, $$pre19 = 0, $$pre20 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0;
 var $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded51 = 0;
 var $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0, $gep = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep70 = 0, $gep73 = 0, $gep78 = 0, $gep81 = 0, $gep84 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0;
 var $gep_int = 0, $gep_int100 = 0, $gep_int101 = 0, $gep_int102 = 0, $gep_int103 = 0, $gep_int104 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int67 = 0, $gep_int68 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int75 = 0, $gep_int76 = 0;
 var $gep_int77 = 0, $gep_int79 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int97 = 0, $gep_int98 = 0, $gep_int99 = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i12 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer9 = 0, $vararg_func = 0, $vararg_func12 = 0, $vararg_func17 = 0, $vararg_func22 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast10 = 0, $vararg_lifetime_bitcast14 = 0, $vararg_lifetime_bitcast19 = 0, $vararg_ptr = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr8 = 0, label = 0, sp = 0, u$114 = 0, u$128 = 0;
 var u$136 = 0, u$140 = 0, u$146 = 0, u$153 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $$byval_copy = sp;
 $vararg_buffer18 = sp + 8|0;
 $vararg_lifetime_bitcast19 = $vararg_buffer18;
 $vararg_buffer13 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast14 = $vararg_buffer13;
 $vararg_buffer9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast10 = $vararg_buffer9;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $__nb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 64|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $__fmt;
 $gep_int = $__fmt;
 $gep = (($gep_int) + 1)|0;
 $9 = $gep;
 $gep_int56 = $__iob;
 $gep57 = (($gep_int56) + 4)|0;
 $10 = $gep57;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2048;
 $13 = ($12|0)==(0);
 
 if ($13) {
  $$0$i = $9;
 } else {
  $gep_int58 = $__fmt;
  $gep59 = (($gep_int58) + 2)|0;
  $14 = $gep59;
  HEAP8[$9] = 43;
  
  $$0$i = $14;
 }
 
 $15 = $11 & 1024;
 $16 = ($15|0)==(0);
 
 if ($16) {
  $$1$i = $$0$i;
 } else {
  $gep_int60 = $$0$i;
  $gep61 = (($gep_int60) + 1)|0;
  $17 = $gep61;
  HEAP8[$$0$i] = 35;
  
  $$1$i = $17;
 }
 
 $18 = $11 & 260;
 $19 = $11 >>> 14;
 $20 = ($18|0)==(260);
 
 do {
  if ($20) {
   $27 = $19 & 1;
   $28 = ($27|0)==(0);
   
   if ($28) {
    HEAP8[$$1$i] = 97;
    
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   } else {
    HEAP8[$$1$i] = 65;
    
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   }
  } else {
   $gep_int62 = $$1$i;
   $gep63 = (($gep_int62) + 1)|0;
   $21 = $gep63;
   HEAP8[$$1$i] = 46;
   $gep_int64 = $$1$i;
   $gep65 = (($gep_int64) + 2)|0;
   $22 = $gep65;
   HEAP8[$21] = 42;
   
   if ((($18|0) == 4)) {
    $23 = $19 & 1;
    $24 = ($23|0)==(0);
    
    if ($24) {
     HEAP8[$22] = 102;
     
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$22] = 70;
     
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else if ((($18|0) == 256)) {
    $25 = $19 & 1;
    $26 = ($25|0)==(0);
    
    if ($26) {
     HEAP8[$22] = 101;
     
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$22] = 69;
     
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else {
    $29 = $19 & 1;
    $30 = ($29|0)==(0);
    
    if ($30) {
     HEAP8[$22] = 103;
     
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$22] = 71;
     
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   }
  }
 } while(0);
 
 $gep_int66 = $__nar;
 $31 = $gep_int66;
 HEAP32[$__nb>>2] = $31;
 $gep_int67 = 8376;
 $expanded = $gep_int67;
 $32 = HEAP8[$expanded]|0;
 $33 = ($32<<24>>24)==(0);
 
 do {
  if ($33) {
   $expanded23 = 8376;
   $34 = ___cxa_guard_acquire($expanded23|0)|0;
   $35 = ($34|0)==(0);
   
   if ($35) {
    break;
   }
   __THREW__ = 0;
   $gep_int68 = 8384;
   $expanded24 = $gep_int68;
   $36 = invoke_iiii(30,2147483647,$expanded24|0,0)|0;
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   
   if ($38) {
    $expanded27 = 69;
    $39 = ___cxa_find_matching_catch(-1,-1)|0;
    $40 = tempRet0;
    $expanded28 = 8376;
    ___cxa_guard_abort($expanded28|0);
    ___resumeException($39|0);
    // unreachable
   } else {
    $expanded25 = 8368;
    HEAP32[8368>>2] = $36;
    $expanded26 = 8376;
    ___cxa_guard_release($expanded26|0);
    
    break;
   }
  }
 } while(0);
 $expanded29 = 8368;
 $41 = HEAP32[8368>>2]|0;
 
 if ($specify_precision$0$off0$ph$i12) {
  $gep_int69 = $__iob;
  $gep70 = (($gep_int69) + 8)|0;
  $42 = $gep70;
  $43 = HEAP32[$42>>2]|0;
  
  $gep_int71 = $vararg_buffer;
  $vararg_ptr = $gep_int71;
  HEAP32[$vararg_ptr>>2] = $43;
  $gep_int72 = $vararg_buffer;
  $gep73 = (($gep_int72) + 4)|0;
  $vararg_ptr8 = $gep73;
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $expanded30 = 18;
  $vararg_func = $expanded30;
  $44 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer)|0;
  
  
  $__nc$0 = $44;
 } else {
  
  $gep_int74 = $vararg_buffer9;
  $vararg_ptr11 = $gep_int74;
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $expanded31 = 18;
  $vararg_func12 = $expanded31;
  $45 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer9)|0;
  
  
  $__nc$0 = $45;
 }
 
 $46 = ($__nc$0|0)>(29);
 
 L38: do {
  if ($46) {
   $gep_int75 = 8376;
   $expanded32 = $gep_int75;
   $47 = HEAP8[$expanded32]|0;
   $48 = ($47<<24>>24)==(0);
   
   L41: do {
    if ($specify_precision$0$off0$ph$i12) {
     
     do {
      if ($48) {
       $expanded33 = 8376;
       $49 = ___cxa_guard_acquire($expanded33|0)|0;
       $50 = ($49|0)==(0);
       
       if ($50) {
        break;
       }
       __THREW__ = 0;
       $gep_int76 = 8384;
       $expanded34 = $gep_int76;
       $51 = invoke_iiii(30,2147483647,$expanded34|0,0)|0;
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       
       if ($53) {
        $expanded37 = 69;
        $54 = ___cxa_find_matching_catch(-1,-1)|0;
        $55 = tempRet0;
        $expanded38 = 8376;
        ___cxa_guard_abort($expanded38|0);
        
        $eh$lpad$body$index3Z2D = $55;$eh$lpad$body$indexZ2D = $54;
        break L41;
       } else {
        $expanded35 = 8368;
        HEAP32[8368>>2] = $51;
        $expanded36 = 8376;
        ___cxa_guard_release($expanded36|0);
        
        break;
       }
      }
     } while(0);
     $expanded39 = 8368;
     $56 = HEAP32[8368>>2]|0;
     $gep_int77 = $__iob;
     $gep78 = (($gep_int77) + 8)|0;
     $57 = $gep78;
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     
     $gep_int79 = $vararg_buffer13;
     $vararg_ptr15 = $gep_int79;
     HEAP32[$vararg_ptr15>>2] = $58;
     $gep_int80 = $vararg_buffer13;
     $gep81 = (($gep_int80) + 4)|0;
     $vararg_ptr16 = $gep81;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $expanded40 = 16;
     $vararg_func17 = $expanded40;
     $59 = invoke_iiiii(16,$__nb|0,$56|0,$8|0,$vararg_buffer13|0)|0;
     
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     
     if ($61) {
      label = 36;
     } else {
      $__nc$1 = $59;
      label = 44;
     }
    } else {
     
     do {
      if ($48) {
       $expanded42 = 8376;
       $64 = ___cxa_guard_acquire($expanded42|0)|0;
       $65 = ($64|0)==(0);
       
       if ($65) {
        break;
       }
       __THREW__ = 0;
       $gep_int82 = 8384;
       $expanded43 = $gep_int82;
       $66 = invoke_iiii(30,2147483647,$expanded43|0,0)|0;
       $67 = __THREW__; __THREW__ = 0;
       $68 = $67&1;
       
       if ($68) {
        $expanded46 = 69;
        $69 = ___cxa_find_matching_catch(-1,-1)|0;
        $70 = tempRet0;
        $expanded47 = 8376;
        ___cxa_guard_abort($expanded47|0);
        
        $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
        break L41;
       } else {
        $expanded44 = 8368;
        HEAP32[8368>>2] = $66;
        $expanded45 = 8376;
        ___cxa_guard_release($expanded45|0);
        
        break;
       }
      }
     } while(0);
     $expanded48 = 8368;
     $71 = HEAP32[8368>>2]|0;
     $gep_int83 = $__iob;
     $gep84 = (($gep_int83) + 8)|0;
     $72 = $gep84;
     $73 = HEAP32[$72>>2]|0;
     __THREW__ = 0;
     
     $gep_int85 = $vararg_buffer18;
     $vararg_ptr20 = $gep_int85;
     HEAP32[$vararg_ptr20>>2] = $73;
     $gep_int86 = $vararg_buffer18;
     $gep87 = (($gep_int86) + 4)|0;
     $vararg_ptr21 = $gep87;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr21>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr21+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $expanded49 = 16;
     $vararg_func22 = $expanded49;
     $74 = invoke_iiiii(16,$__nb|0,$71|0,$8|0,$vararg_buffer18|0)|0;
     
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     
     if ($76) {
      label = 36;
     } else {
      $__nc$1 = $74;
      label = 44;
     }
    }
   } while(0);
   do {
    if ((label|0) == 44) {
     
     $77 = HEAP32[$__nb>>2]|0;
     $78 = ($77|0)==(0);
     
     if (!($78)) {
      $81 = $77;$82 = $77;$__nc$2 = $__nc$1;
      break L38;
     }
     __THREW__ = 0;
     invoke_v(13);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     
     if ($80) {
      label = 36;
      break;
     }
     $$pre = HEAP32[$__nb>>2]|0;
     
     $81 = $$pre;$82 = $$pre;$__nc$2 = $__nc$1;
     break L38;
    }
   } while(0);
   if ((label|0) == 36) {
    $expanded41 = 69;
    $62 = ___cxa_find_matching_catch(-1,-1)|0;
    $63 = tempRet0;
    
    $eh$lpad$body$index3Z2D = $63;$eh$lpad$body$indexZ2D = $62;
   }
   
   
   
   $$118 = $eh$lpad$body$indexZ2D;$$1217 = $eh$lpad$body$index3Z2D;
   
   
   ___resumeException($$118|0);
   // unreachable
  } else {
   $$pre19 = HEAP32[$__nb>>2]|0;
   
   $81 = $$pre19;$82 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 
 
 
 $gep_int88 = $81;
 $gep89 = (($gep_int88) + ($__nc$2))|0;
 $83 = $gep89;
 $84 = HEAP32[$10>>2]|0;
 $85 = $84 & 176;
 
 do {
  if ((($85|0) == 16)) {
   $86 = HEAP8[$81]|0;
   
   if ((($86<<24>>24) == 43) | (($86<<24>>24) == 45)) {
    $gep_int90 = $81;
    $gep91 = (($gep_int90) + 1)|0;
    $87 = $gep91;
    
    $$0$i7 = $87;
    break;
   }
   $88 = ($__nc$2|0)>(1);
   $89 = ($86<<24>>24)==(48);
   $or$cond$i = $88 & $89;
   
   if (!($or$cond$i)) {
    label = 53;
    break;
   }
   $gep_int92 = $81;
   $gep93 = (($gep_int92) + 1)|0;
   $90 = $gep93;
   $91 = HEAP8[$90]|0;
   
   if (!((($91<<24>>24) == 88) | (($91<<24>>24) == 120))) {
    label = 53;
    break;
   }
   $gep_int94 = $81;
   $gep95 = (($gep_int94) + 2)|0;
   $92 = $gep95;
   
   $$0$i7 = $92;
  } else if ((($85|0) == 32)) {
   $$0$i7 = $83;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  
  $$0$i7 = $81;
 }
 
 $gep_int96 = $__o;
 $93 = $gep_int96;
 
 $94 = ($81|0)==($31|0);
 
 do {
  if ($94) {
   $103 = $31;$104 = 0;$__ob$0 = $93;
   label = 59;
  } else {
   $95 = $__nc$2 << 1;
   $96 = _malloc($95)|0;
   $97 = ($96|0)==(0);
   
   if (!($97)) {
    $103 = $81;$104 = $96;$__ob$0 = $96;
    label = 59;
    break;
   }
   __THREW__ = 0;
   invoke_v(13);
   $98 = __THREW__; __THREW__ = 0;
   $99 = $98&1;
   
   if ($99) {
    $100 = 0;
    label = 58;
    break;
   }
   $$pre20 = HEAP32[$__nb>>2]|0;
   
   $103 = $$pre20;$104 = 0;$__ob$0 = 0;
   label = 59;
  }
 } while(0);
 do {
  if ((label|0) == 59) {
   
   
   
   __THREW__ = 0;
   invoke_vii(41,$1|0,$__iob|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   
   if ($106) {
    $100 = $104;
    label = 58;
    break;
   }
   __THREW__ = 0;
   invoke_viiiiiii(44,$103|0,$$0$i7|0,$83|0,$__ob$0|0,$__op|0,$__oe|0,$1|0);
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   
   if ($108) {
    $expanded53 = 69;
    $134 = ___cxa_find_matching_catch(-1,-1)|0;
    $135 = tempRet0;
    $gep_int103 = $1;
    $136 = $gep_int103;
    $137 = HEAP32[$136>>2]|0;
    $gep_int104 = $137;
    $138 = $gep_int104;
    u$140 = __ZNSt3__114__shared_count16__release_sharedEv($138)|0;
    
    $$0 = $134;$$01 = $135;$139 = $104;
    break;
   }
   $gep_int97 = $1;
   $109 = $gep_int97;
   $110 = HEAP32[$109>>2]|0;
   $gep_int98 = $110;
   $111 = $gep_int98;
   u$114 = __ZNSt3__114__shared_count16__release_sharedEv($111)|0;
   $gep_int99 = $__s;
   $112 = $gep_int99;
   $113 = HEAP32[$112>>2]|0;
   $gep_int100 = $3;
   $114 = $gep_int100;
   HEAP32[$114>>2] = $113;
   $115 = HEAP32[$__op>>2]|0;
   $116 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   $117 = $$byval_copy;
   
   $118 = $$byval_copy;
   $119 = $3;
   ;HEAP32[$118+0>>2]=HEAP32[$119+0>>2]|0;
   invoke_viiiiiii(40,$2|0,$$byval_copy|0,$__ob$0|0,$115|0,$116|0,$__iob|0,$__fl|0);
   $120 = $$byval_copy;
   
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   
   if ($122) {
    $100 = $104;
    label = 58;
    break;
   }
   $gep_int101 = $2;
   $123 = $gep_int101;
   $124 = HEAP32[$123>>2]|0;
   HEAP32[$112>>2] = $124;
   $gep_int102 = $agg$result;
   $125 = $gep_int102;
   HEAP32[$125>>2] = $124;
   $126 = ($104|0)==(0);
   
   do {
    if (!($126)) {
     __THREW__ = 0;
     invoke_vi(179,$104|0);
     $127 = __THREW__; __THREW__ = 0;
     $128 = $127&1;
     
     if (!($128)) {
      break;
     }
     $expanded51 = 69;
     $129 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$128 = tempRet0;
     ___clang_call_terminate($129);
     // unreachable
    }
   } while(0);
   
   $130 = ($82|0)==(0);
   
   if ($130) {
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_vi(179,$82|0);
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   
   if ($132) {
    $expanded52 = 69;
    $133 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$136 = tempRet0;
    ___clang_call_terminate($133);
    // unreachable
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 58) {
  
  $expanded50 = 69;
  $101 = ___cxa_find_matching_catch(-1,-1)|0;
  $102 = tempRet0;
  
  $$0 = $101;$$01 = $102;$139 = $100;
 }
 
 
 
 $140 = ($139|0)==(0);
 
 do {
  if (!($140)) {
   __THREW__ = 0;
   invoke_vi(179,$139|0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   
   if (!($142)) {
    break;
   }
   $expanded54 = 69;
   $143 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$146 = tempRet0;
   ___clang_call_terminate($143);
   // unreachable
  }
 } while(0);
 $144 = ($82|0)==(0);
 
 if ($144) {
  $$118 = $$0;$$1217 = $$01;
  
  
  ___resumeException($$118|0);
  // unreachable
 }
 __THREW__ = 0;
 invoke_vi(179,$82|0);
 $145 = __THREW__; __THREW__ = 0;
 $146 = $145&1;
 
 if ($146) {
  $expanded55 = 69;
  $147 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$153 = tempRet0;
  ___clang_call_terminate($147);
  // unreachable
 } else {
  $$118 = $$0;$$1217 = $$01;
  
  
  ___resumeException($$118|0);
  // unreachable
 }
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, $arglist = 0, $expanded = 0, $expanded1 = 0;
 var $expanded2 = 0, $gep_int = 0, label = 0, sp = 0, u$13 = 0, u$15 = 0, u$5 = 0, u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 $gep_int = $__va;
 $1 = $gep_int;
 $2 = $__va;
 $arglist = $2;
 HEAP32[$__va>>2] = $varargs;
 $3 = _uselocale($__l|0)|0;
 __THREW__ = 0;
 $4 = invoke_iiii(31,$__s|0,$__format|0,$1|0)|0;
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if ($6) {
  $expanded1 = 69;
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $13 = ($3|0)==(0);
  
  if ($13) {
   ___resumeException($11|0);
   // unreachable
  }
  __THREW__ = 0;
  u$13 = invoke_ii(95,$3|0)|0;
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  
  if ($15) {
   $expanded2 = 69;
   $16 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$15 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable
  } else {
   ___resumeException($11|0);
   // unreachable
  }
 } else {
  $7 = ($3|0)==(0);
  
  if ($7) {
   STACKTOP = sp;return $4|0;
  }
  __THREW__ = 0;
  u$5 = invoke_ii(95,$3|0)|0;
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  
  if ($9) {
   $expanded = 69;
   $10 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$7 = tempRet0;
   ___clang_call_terminate($10);
   // unreachable
  } else {
   STACKTOP = sp;return $4|0;
  }
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$012$i$i13 = 0, $$012$i$i13$phi = 0, $$58 = 0, $$__dg$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $165$phi = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $228$phi = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$025 = 0, $__dc$1 = 0, $__dg$026 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$221 = 0, $__nf$3 = 0, $__ns$043 = 0, $__ns$134 = 0, $__ns$2 = 0, $__p$027 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0;
 var $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0;
 var $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0;
 var $gep = 0, $gep101 = 0, $gep103 = 0, $gep105 = 0, $gep109 = 0, $gep113 = 0, $gep115 = 0, $gep117 = 0, $gep119 = 0, $gep121 = 0, $gep123 = 0, $gep125 = 0, $gep127 = 0, $gep129 = 0, $gep131 = 0, $gep133 = 0, $gep135 = 0, $gep137 = 0, $gep139 = 0, $gep141 = 0;
 var $gep143 = 0, $gep145 = 0, $gep147 = 0, $gep149 = 0, $gep151 = 0, $gep153 = 0, $gep155 = 0, $gep157 = 0, $gep159 = 0, $gep161 = 0, $gep163 = 0, $gep165 = 0, $gep167 = 0, $gep169 = 0, $gep171 = 0, $gep60 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0;
 var $gep73 = 0, $gep75 = 0, $gep78 = 0, $gep80 = 0, $gep82 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep97 = 0, $gep99 = 0, $gep_array = 0, $gep_array84 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int106 = 0;
 var $gep_int107 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int111 = 0, $gep_int112 = 0, $gep_int114 = 0, $gep_int116 = 0, $gep_int118 = 0, $gep_int120 = 0, $gep_int122 = 0, $gep_int124 = 0, $gep_int126 = 0, $gep_int128 = 0, $gep_int130 = 0, $gep_int132 = 0, $gep_int134 = 0, $gep_int136 = 0, $gep_int138 = 0, $gep_int140 = 0, $gep_int142 = 0;
 var $gep_int144 = 0, $gep_int146 = 0, $gep_int148 = 0, $gep_int150 = 0, $gep_int152 = 0, $gep_int154 = 0, $gep_int156 = 0, $gep_int158 = 0, $gep_int160 = 0, $gep_int162 = 0, $gep_int164 = 0, $gep_int166 = 0, $gep_int168 = 0, $gep_int170 = 0, $gep_int56 = 0, $gep_int57 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int62 = 0;
 var $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int71 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int98 = 0, $storemerge = 0;
 var label = 0, sp = 0, u$131 = 0, u$86 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__grouping = sp + 32|0;
 $gep_int = $__loc;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 
 $expanded16 = 8480;
 $gep_int56 = 8480;
 $expanded = $gep_int56;
 $4 = HEAP32[$expanded>>2]|0;
 $5 = ($4|0)==(-1);
 
 if (!($5)) {
  $gep_int57 = $__p$i$i$i$i;
  $6 = $gep_int57;
  $expanded17 = 8480;
  HEAP32[$6>>2] = $expanded17;
  $gep_int58 = $__p$i$i$i$i;
  $gep = (($gep_int58) + 4)|0;
  $7 = $gep;
  $expanded18 = 177;
  HEAP32[$7>>2] = $expanded18;
  $gep_int59 = $__p$i$i$i$i;
  $gep60 = (($gep_int59) + 8)|0;
  $8 = $gep60;
  HEAP32[$8>>2] = 0;
  $expanded20 = 8480;
  $gep_int61 = 8480;
  $expanded19 = $gep_int61;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded19,$3,178);
  
 }
 
 $expanded22 = 8480;
 $gep_int62 = 8480;
 $gep63 = (($gep_int62) + 4)|0;
 $expanded21 = $gep63;
 $9 = HEAP32[$expanded21>>2]|0;
 $10 = (($9) + -1)|0;
 $gep_int64 = $2;
 $gep65 = (($gep_int64) + 12)|0;
 $11 = $gep65;
 $12 = HEAP32[$11>>2]|0;
 $gep_int66 = $2;
 $gep67 = (($gep_int66) + 8)|0;
 $13 = $gep67;
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 
 if (!($19)) {
  $23 = ___cxa_allocate_exception(4)|0;
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  $expanded23 = 16440;
  $expanded24 = 119;
  ___cxa_throw($23|0,$expanded23|0,$expanded24|0);
  // unreachable
 }
 $gep_int68 = $14;
 $gep_array = $10<<2;
 $gep69 = (($gep_int68) + ($gep_array))|0;
 $20 = $gep69;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 
 if ($22) {
  $23 = ___cxa_allocate_exception(4)|0;
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  $expanded23 = 16440;
  $expanded24 = 119;
  ___cxa_throw($23|0,$expanded23|0,$expanded24|0);
  // unreachable
 }
 $25 = $21;
 $26 = HEAP32[$1>>2]|0;
 $27 = $__p$i$i$i$i1;
 
 $expanded26 = 8624;
 $gep_int70 = 8624;
 $expanded25 = $gep_int70;
 $28 = HEAP32[$expanded25>>2]|0;
 $29 = ($28|0)==(-1);
 
 if (!($29)) {
  $gep_int71 = $__p$i$i$i$i1;
  $30 = $gep_int71;
  $expanded27 = 8624;
  HEAP32[$30>>2] = $expanded27;
  $gep_int72 = $__p$i$i$i$i1;
  $gep73 = (($gep_int72) + 4)|0;
  $31 = $gep73;
  $expanded28 = 177;
  HEAP32[$31>>2] = $expanded28;
  $gep_int74 = $__p$i$i$i$i1;
  $gep75 = (($gep_int74) + 8)|0;
  $32 = $gep75;
  HEAP32[$32>>2] = 0;
  $expanded30 = 8624;
  $gep_int76 = 8624;
  $expanded29 = $gep_int76;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded29,$27,178);
  
 }
 
 $expanded32 = 8624;
 $gep_int77 = 8624;
 $gep78 = (($gep_int77) + 4)|0;
 $expanded31 = $gep78;
 $33 = HEAP32[$expanded31>>2]|0;
 $34 = (($33) + -1)|0;
 $gep_int79 = $26;
 $gep80 = (($gep_int79) + 12)|0;
 $35 = $gep80;
 $36 = HEAP32[$35>>2]|0;
 $gep_int81 = $26;
 $gep82 = (($gep_int81) + 8)|0;
 $37 = $gep82;
 $38 = HEAP32[$37>>2]|0;
 $39 = $36;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 $42 = $41 >> 2;
 $43 = ($42>>>0)>($34>>>0);
 
 if (!($43)) {
  $47 = ___cxa_allocate_exception(4)|0;
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  $expanded33 = 16440;
  $expanded34 = 119;
  ___cxa_throw($47|0,$expanded33|0,$expanded34|0);
  // unreachable
 }
 $gep_int83 = $38;
 $gep_array84 = $34<<2;
 $gep85 = (($gep_int83) + ($gep_array84))|0;
 $44 = $gep85;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 
 if ($46) {
  $47 = ___cxa_allocate_exception(4)|0;
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  $expanded33 = 16440;
  $expanded34 = 119;
  ___cxa_throw($47|0,$expanded33|0,$expanded34|0);
  // unreachable
 }
 $49 = $45;
 $50 = $45;
 $51 = HEAP32[$45>>2]|0;
 $gep_int86 = $51;
 $gep87 = (($gep_int86) + 20)|0;
 $52 = $gep87;
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vii[$53 & 127]($__grouping,$49);
 HEAP32[$__oe>>2] = $__ob;
 $54 = HEAP8[$__nb]|0;
 
 do {
  if ((($54<<24>>24) == 43) | (($54<<24>>24) == 45)) {
   $55 = $21;
   $56 = HEAP32[$21>>2]|0;
   $gep_int88 = $56;
   $gep89 = (($gep_int88) + 28)|0;
   $57 = $gep89;
   $58 = HEAP32[$57>>2]|0;
   __THREW__ = 0;
   $59 = invoke_iii($58|0,$25|0,$54|0)|0;
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   
   if ($61) {
    break;
   }
   $gep_int90 = $__nb;
   $gep91 = (($gep_int90) + 1)|0;
   $62 = $gep91;
   $63 = HEAP32[$__oe>>2]|0;
   $gep_int92 = $63;
   $gep93 = (($gep_int92) + 1)|0;
   $64 = $gep93;
   HEAP32[$__oe>>2] = $64;
   HEAP8[$63] = $59;
   
   $__nf$0 = $62;
   label = 20;
  } else {
   $__nf$0 = $__nb;
   label = 20;
  }
 } while(0);
 L22: do {
  if ((label|0) == 20) {
   
   $75 = $__ne;
   $76 = $__nf$0;
   $77 = (($75) - ($76))|0;
   $78 = ($77|0)>(1);
   
   L24: do {
    if ($78) {
     $80 = HEAP8[$__nf$0]|0;
     $81 = ($80<<24>>24)==(48);
     
     if (!($81)) {
      label = 21;
      break;
     }
     $gep_int94 = $__nf$0;
     $gep95 = (($gep_int94) + 1)|0;
     $82 = $gep95;
     $83 = HEAP8[$82]|0;
     
     if (!((($83<<24>>24) == 88) | (($83<<24>>24) == 120))) {
      label = 21;
      break;
     }
     $84 = $21;
     $85 = HEAP32[$21>>2]|0;
     $gep_int96 = $85;
     $gep97 = (($gep_int96) + 28)|0;
     $86 = $gep97;
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = invoke_iii($87|0,$25|0,48)|0;
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     
     if ($90) {
      break L22;
     }
     $91 = HEAP32[$__oe>>2]|0;
     $gep_int98 = $91;
     $gep99 = (($gep_int98) + 1)|0;
     $92 = $gep99;
     HEAP32[$__oe>>2] = $92;
     HEAP8[$91] = $88;
     $gep_int100 = $__nf$0;
     $gep101 = (($gep_int100) + 2)|0;
     $93 = $gep101;
     $94 = HEAP8[$82]|0;
     $95 = HEAP32[$21>>2]|0;
     $gep_int102 = $95;
     $gep103 = (($gep_int102) + 28)|0;
     $96 = $gep103;
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = invoke_iii($97|0,$25|0,$94|0)|0;
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     
     if ($100) {
      break L22;
     }
     $101 = HEAP32[$__oe>>2]|0;
     $gep_int104 = $101;
     $gep105 = (($gep_int104) + 1)|0;
     $102 = $gep105;
     HEAP32[$__oe>>2] = $102;
     HEAP8[$101] = $98;
     $103 = ($93>>>0)<($__ne>>>0);
     
     if ($103) {
      $__ns$043 = $93;
     } else {
      $__nf$1 = $93;$__ns$2 = $93;
      break;
     }
     L30: while(1) {
      
      $105 = HEAP8[$__ns$043]|0;
      $gep_int106 = 8376;
      $expanded40 = $gep_int106;
      $106 = HEAP8[$expanded40]|0;
      $107 = ($106<<24>>24)==(0);
      
      do {
       if ($107) {
        $expanded41 = 8376;
        $108 = ___cxa_guard_acquire($expanded41|0)|0;
        $109 = ($108|0)==(0);
        
        if ($109) {
         break;
        }
        __THREW__ = 0;
        $gep_int107 = 8384;
        $expanded42 = $gep_int107;
        $110 = invoke_iiii(30,2147483647,$expanded42|0,0)|0;
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        
        if ($112) {
         label = 32;
         break L30;
        }
        $expanded43 = 8368;
        HEAP32[8368>>2] = $110;
        $expanded44 = 8376;
        ___cxa_guard_release($expanded44|0);
        
       }
      } while(0);
      $expanded47 = 8368;
      $115 = HEAP32[8368>>2]|0;
      $116 = $105 << 24 >> 24;
      __THREW__ = 0;
      $117 = invoke_iii(35,$116|0,$115|0)|0;
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      
      if ($119) {
       label = 17;
       break;
      }
      $120 = ($117|0)==(0);
      $gep_int108 = $__ns$043;
      $gep109 = (($gep_int108) + 1)|0;
      $121 = $gep109;
      
      if ($120) {
       $__nf$1 = $93;$__ns$2 = $__ns$043;
       break L24;
      }
      $104 = ($121>>>0)<($__ne>>>0);
      
      if ($104) {
       $__ns$043 = $121;
      } else {
       $__nf$1 = $93;$__ns$2 = $121;
       break L24;
      }
     }
     if ((label|0) == 17) {
      $expanded38 = 69;
      $71 = ___cxa_find_matching_catch(-1,-1)|0;
      $72 = tempRet0;
      
      $eh$lpad$body$index7Z2D = $72;$eh$lpad$body$indexZ2D = $71;
      
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable
     }
     else if ((label|0) == 32) {
      $expanded45 = 69;
      $113 = ___cxa_find_matching_catch(-1,-1)|0;
      $114 = tempRet0;
      $expanded46 = 8376;
      ___cxa_guard_abort($expanded46|0);
      
      $eh$lpad$body$index7Z2D = $114;$eh$lpad$body$indexZ2D = $113;
      
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable
     }
    } else {
     label = 21;
    }
   } while(0);
   L44: do {
    if ((label|0) == 21) {
     $79 = ($__nf$0>>>0)<($__ne>>>0);
     
     if ($79) {
      $__ns$134 = $__nf$0;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
      break;
     }
     L46: while(1) {
      
      $123 = HEAP8[$__ns$134]|0;
      $gep_int110 = 8376;
      $expanded48 = $gep_int110;
      $124 = HEAP8[$expanded48]|0;
      $125 = ($124<<24>>24)==(0);
      
      do {
       if ($125) {
        $expanded49 = 8376;
        $126 = ___cxa_guard_acquire($expanded49|0)|0;
        $127 = ($126|0)==(0);
        
        if ($127) {
         break;
        }
        __THREW__ = 0;
        $gep_int111 = 8384;
        $expanded50 = $gep_int111;
        $128 = invoke_iiii(30,2147483647,$expanded50|0,0)|0;
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        
        if ($130) {
         label = 40;
         break L46;
        }
        $expanded51 = 8368;
        HEAP32[8368>>2] = $128;
        $expanded52 = 8376;
        ___cxa_guard_release($expanded52|0);
        
       }
      } while(0);
      $expanded55 = 8368;
      $133 = HEAP32[8368>>2]|0;
      $134 = $123 << 24 >> 24;
      __THREW__ = 0;
      $135 = invoke_iii(36,$134|0,$133|0)|0;
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      
      if ($137) {
       label = 16;
       break;
      }
      $138 = ($135|0)==(0);
      $gep_int112 = $__ns$134;
      $gep113 = (($gep_int112) + 1)|0;
      $139 = $gep113;
      
      if ($138) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$134;
       break L44;
      }
      $122 = ($139>>>0)<($__ne>>>0);
      
      if ($122) {
       $__ns$134 = $139;
      } else {
       $__nf$1 = $__nf$0;$__ns$2 = $139;
       break L44;
      }
     }
     if ((label|0) == 16) {
      $expanded37 = 69;
      $69 = ___cxa_find_matching_catch(-1,-1)|0;
      $70 = tempRet0;
      
      $eh$lpad$body$index7Z2D = $70;$eh$lpad$body$indexZ2D = $69;
      
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable
     }
     else if ((label|0) == 40) {
      $expanded53 = 69;
      $131 = ___cxa_find_matching_catch(-1,-1)|0;
      $132 = tempRet0;
      $expanded54 = 8376;
      ___cxa_guard_abort($expanded54|0);
      
      $eh$lpad$body$index7Z2D = $132;$eh$lpad$body$indexZ2D = $131;
      
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable
     }
    }
   } while(0);
   
   
   $140 = $__grouping;
   $141 = HEAP8[$__grouping]|0;
   $142 = $141 & 1;
   $143 = ($142<<24>>24)==(0);
   
   if ($143) {
    $146 = $141&255;
    $147 = $146 >>> 1;
    
    $148 = $147;
   } else {
    $gep_int114 = $__grouping;
    $gep115 = (($gep_int114) + 4)|0;
    $144 = $gep115;
    $145 = HEAP32[$144>>2]|0;
    
    $148 = $145;
   }
   
   $149 = ($148|0)==(0);
   
   do {
    if ($149) {
     $150 = HEAP32[$__oe>>2]|0;
     $151 = $21;
     $152 = HEAP32[$21>>2]|0;
     $gep_int116 = $152;
     $gep117 = (($gep_int116) + 32)|0;
     $153 = $gep117;
     $154 = HEAP32[$153>>2]|0;
     __THREW__ = 0;
     u$86 = invoke_iiiii($154|0,$25|0,$__nf$1|0,$__ns$2|0,$150|0)|0;
     $155 = __THREW__; __THREW__ = 0;
     $156 = $155&1;
     
     if ($156) {
      break L22;
     }
     $157 = $__ns$2;
     $158 = $__nf$1;
     $159 = (($157) - ($158))|0;
     $160 = HEAP32[$__oe>>2]|0;
     $gep_int118 = $160;
     $gep119 = (($gep_int118) + ($159))|0;
     $161 = $gep119;
     HEAP32[$__oe>>2] = $161;
     
    } else {
     $162 = ($__nf$1|0)==($__ns$2|0);
     
     do {
      if (!($162)) {
       $gep_int120 = $__ns$2;
       $gep121 = (($gep_int120) + -1)|0;
       $163 = $gep121;
       $164 = ($163>>>0)>($__nf$1>>>0);
       
       if ($164) {
        $$012$i$i = $__nf$1;$165 = $163;
       } else {
        break;
       }
       while(1) {
        
        
        $166 = HEAP8[$$012$i$i]|0;
        $167 = HEAP8[$165]|0;
        HEAP8[$$012$i$i] = $167;
        HEAP8[$165] = $166;
        $gep_int122 = $$012$i$i;
        $gep123 = (($gep_int122) + 1)|0;
        $168 = $gep123;
        $gep_int124 = $165;
        $gep125 = (($gep_int124) + -1)|0;
        $169 = $gep125;
        $170 = ($168>>>0)<($169>>>0);
        
        if ($170) {
         $165$phi = $169;$$012$i$i$phi = $168;$165 = $165$phi;$$012$i$i = $$012$i$i$phi;
        } else {
         break;
        }
       }
      }
     } while(0);
     $171 = $45;
     $172 = HEAP32[$45>>2]|0;
     $gep_int126 = $172;
     $gep127 = (($gep_int126) + 16)|0;
     $173 = $gep127;
     $174 = HEAP32[$173>>2]|0;
     __THREW__ = 0;
     $175 = invoke_ii($174|0,$49|0)|0;
     $176 = __THREW__; __THREW__ = 0;
     $177 = $176&1;
     
     if ($177) {
      break L22;
     }
     $178 = ($__nf$1>>>0)<($__ns$2>>>0);
     
     L73: do {
      if ($178) {
       $179 = $__grouping;
       $gep_int128 = $__grouping;
       $gep129 = (($gep_int128) + 1)|0;
       $180 = $gep129;
       $gep_int130 = $__grouping;
       $gep131 = (($gep_int130) + 4)|0;
       $181 = $gep131;
       $gep_int132 = $__grouping;
       $gep133 = (($gep_int132) + 8)|0;
       $182 = $gep133;
       $183 = $21;
       
       $__dc$025 = 0;$__dg$026 = 0;$__p$027 = $__nf$1;
       while(1) {
        
        
        
        $184 = HEAP8[$__grouping]|0;
        $185 = $184 & 1;
        $186 = ($185<<24>>24)==(0);
        $187 = HEAP32[$182>>2]|0;
        $$ = $186 ? $180 : $187;
        $gep_int134 = $$;
        $gep135 = (($gep_int134) + ($__dg$026))|0;
        $188 = $gep135;
        $189 = HEAP8[$188]|0;
        $190 = ($189<<24>>24)>(0);
        
        do {
         if ($190) {
          $191 = HEAP32[$182>>2]|0;
          $$58 = $186 ? $180 : $191;
          $gep_int136 = $$58;
          $gep137 = (($gep_int136) + ($__dg$026))|0;
          $192 = $gep137;
          $193 = HEAP8[$192]|0;
          $194 = $193 << 24 >> 24;
          $195 = ($__dc$025|0)==($194|0);
          
          if (!($195)) {
           $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
           break;
          }
          $196 = HEAP32[$__oe>>2]|0;
          $gep_int138 = $196;
          $gep139 = (($gep_int138) + 1)|0;
          $197 = $gep139;
          HEAP32[$__oe>>2] = $197;
          HEAP8[$196] = $175;
          $198 = HEAP8[$__grouping]|0;
          $199 = $198 & 1;
          $200 = ($199<<24>>24)==(0);
          
          if ($200) {
           $202 = $198&255;
           $203 = $202 >>> 1;
           
           $204 = $203;
          } else {
           $201 = HEAP32[$181>>2]|0;
           
           $204 = $201;
          }
          
          $205 = (($204) + -1)|0;
          $206 = ($__dg$026>>>0)<($205>>>0);
          $207 = $206&1;
          $$__dg$0 = (($207) + ($__dg$026))|0;
          
          $__dc$1 = 0;$__dg$1 = $$__dg$0;
         } else {
          $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
         }
        } while(0);
        
        
        $208 = HEAP8[$__p$027]|0;
        $209 = HEAP32[$21>>2]|0;
        $gep_int140 = $209;
        $gep141 = (($gep_int140) + 28)|0;
        $210 = $gep141;
        $211 = HEAP32[$210>>2]|0;
        __THREW__ = 0;
        $212 = invoke_iii($211|0,$25|0,$208|0)|0;
        $213 = __THREW__; __THREW__ = 0;
        $214 = $213&1;
        
        if ($214) {
         break;
        }
        $215 = HEAP32[$__oe>>2]|0;
        $gep_int142 = $215;
        $gep143 = (($gep_int142) + 1)|0;
        $216 = $gep143;
        HEAP32[$__oe>>2] = $216;
        HEAP8[$215] = $212;
        $217 = (($__dc$1) + 1)|0;
        $gep_int144 = $__p$027;
        $gep145 = (($gep_int144) + 1)|0;
        $218 = $gep145;
        $219 = ($218>>>0)<($__ns$2>>>0);
        
        if ($219) {
         $__dc$025 = $217;$__dg$026 = $__dg$1;$__p$027 = $218;
        } else {
         break L73;
        }
       }
       $expanded36 = 69;
       $67 = ___cxa_find_matching_catch(-1,-1)|0;
       $68 = tempRet0;
       
       $eh$lpad$body$index7Z2D = $68;$eh$lpad$body$indexZ2D = $67;
       
       
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable
      }
     } while(0);
     $220 = $__nf$1;
     $221 = $__nb;
     $222 = (($220) - ($221))|0;
     $gep_int146 = $__ob;
     $gep147 = (($gep_int146) + ($222))|0;
     $223 = $gep147;
     $224 = HEAP32[$__oe>>2]|0;
     $225 = ($223|0)==($224|0);
     
     if ($225) {
      break;
     }
     $gep_int148 = $224;
     $gep149 = (($gep_int148) + -1)|0;
     $226 = $gep149;
     $227 = ($226>>>0)>($223>>>0);
     
     if ($227) {
      $$012$i$i13 = $223;$228 = $226;
     } else {
      break;
     }
     while(1) {
      
      
      $229 = HEAP8[$$012$i$i13]|0;
      $230 = HEAP8[$228]|0;
      HEAP8[$$012$i$i13] = $230;
      HEAP8[$228] = $229;
      $gep_int150 = $$012$i$i13;
      $gep151 = (($gep_int150) + 1)|0;
      $231 = $gep151;
      $gep_int152 = $228;
      $gep153 = (($gep_int152) + -1)|0;
      $232 = $gep153;
      $233 = ($231>>>0)<($232>>>0);
      
      if ($233) {
       $228$phi = $232;$$012$i$i13$phi = $231;$228 = $228$phi;$$012$i$i13 = $$012$i$i13$phi;
      } else {
       break;
      }
     }
    }
   } while(0);
   $234 = ($__ns$2>>>0)<($__ne>>>0);
   
   L95: do {
    if ($234) {
     $235 = $21;
     
     $__nf$221 = $__ns$2;
     while(1) {
      
      $236 = HEAP8[$__nf$221]|0;
      $237 = ($236<<24>>24)==(46);
      
      if ($237) {
       label = 69;
       break;
      }
      $248 = HEAP32[$21>>2]|0;
      $gep_int160 = $248;
      $gep161 = (($gep_int160) + 28)|0;
      $249 = $gep161;
      $250 = HEAP32[$249>>2]|0;
      __THREW__ = 0;
      $251 = invoke_iii($250|0,$25|0,$236|0)|0;
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      
      if ($253) {
       label = 14;
       break;
      }
      $254 = HEAP32[$__oe>>2]|0;
      $gep_int162 = $254;
      $gep163 = (($gep_int162) + 1)|0;
      $255 = $gep163;
      HEAP32[$__oe>>2] = $255;
      HEAP8[$254] = $251;
      $gep_int164 = $__nf$221;
      $gep165 = (($gep_int164) + 1)|0;
      $256 = $gep165;
      $257 = ($256>>>0)<($__ne>>>0);
      
      if ($257) {
       $__nf$221 = $256;
      } else {
       $__nf$3 = $256;
       break L95;
      }
     }
     if ((label|0) == 14) {
      $expanded35 = 69;
      $65 = ___cxa_find_matching_catch(-1,-1)|0;
      $66 = tempRet0;
      
      $eh$lpad$body$index7Z2D = $66;$eh$lpad$body$indexZ2D = $65;
      
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable
     }
     else if ((label|0) == 69) {
      $238 = $45;
      $239 = HEAP32[$45>>2]|0;
      $gep_int154 = $239;
      $gep155 = (($gep_int154) + 12)|0;
      $240 = $gep155;
      $241 = HEAP32[$240>>2]|0;
      __THREW__ = 0;
      $242 = invoke_ii($241|0,$49|0)|0;
      $243 = __THREW__; __THREW__ = 0;
      $244 = $243&1;
      
      if ($244) {
       break L22;
      }
      $245 = HEAP32[$__oe>>2]|0;
      $gep_int156 = $245;
      $gep157 = (($gep_int156) + 1)|0;
      $246 = $gep157;
      HEAP32[$__oe>>2] = $246;
      HEAP8[$245] = $242;
      $gep_int158 = $__nf$221;
      $gep159 = (($gep_int158) + 1)|0;
      $247 = $gep159;
      
      $__nf$3 = $247;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   
   $258 = HEAP32[$__oe>>2]|0;
   $259 = $21;
   $260 = HEAP32[$21>>2]|0;
   $gep_int166 = $260;
   $gep167 = (($gep_int166) + 32)|0;
   $261 = $gep167;
   $262 = HEAP32[$261>>2]|0;
   __THREW__ = 0;
   u$131 = invoke_iiiii($262|0,$25|0,$__nf$3|0,$__ne|0,$258|0)|0;
   $263 = __THREW__; __THREW__ = 0;
   $264 = $263&1;
   
   if ($264) {
    break;
   }
   $265 = $__nf$3;
   $266 = (($75) - ($265))|0;
   $267 = HEAP32[$__oe>>2]|0;
   $gep_int168 = $267;
   $gep169 = (($gep_int168) + ($266))|0;
   $268 = $gep169;
   HEAP32[$__oe>>2] = $268;
   $269 = ($__np|0)==($__ne|0);
   
   if ($269) {
    $storemerge = $268;
    
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $270 = $__np;
   $271 = $__nb;
   $272 = (($270) - ($271))|0;
   $gep_int170 = $__ob;
   $gep171 = (($gep_int170) + ($272))|0;
   $273 = $gep171;
   
   $storemerge = $273;
   
   HEAP32[$__op>>2] = $storemerge;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded39 = 69;
 $73 = ___cxa_find_matching_catch(-1,-1)|0;
 $74 = tempRet0;
 
 $eh$lpad$body$index7Z2D = $74;$eh$lpad$body$indexZ2D = $73;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$113 = 0, $$1212 = 0, $$byval_copy = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0;
 var $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0;
 var $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $gep = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep69 = 0, $gep72 = 0, $gep77 = 0, $gep80 = 0, $gep84 = 0, $gep86 = 0;
 var $gep88 = 0, $gep90 = 0, $gep_int = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int67 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int74 = 0, $gep_int75 = 0, $gep_int76 = 0;
 var $gep_int78 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int82 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int92 = 0, $gep_int93 = 0, $gep_int94 = 0, $gep_int95 = 0, $gep_int96 = 0, $gep_int97 = 0, $gep_int98 = 0, $gep_int99 = 0, $or$cond$i = 0, $scevgep = 0, $scevgep16 = 0;
 var $specify_precision$0$off0$ph$i17 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer9 = 0, $vararg_func = 0, $vararg_func12 = 0, $vararg_func17 = 0, $vararg_func21 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast10 = 0, $vararg_lifetime_bitcast14 = 0, $vararg_lifetime_bitcast19 = 0, $vararg_ptr = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0, u$115 = 0, u$133 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer18 = sp + 8|0;
 $vararg_lifetime_bitcast19 = $vararg_buffer18;
 $vararg_buffer13 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast14 = $vararg_buffer13;
 $vararg_buffer9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast10 = $vararg_buffer9;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $__nb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 64|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $__fmt;
 $gep_int = $__fmt;
 $gep = (($gep_int) + 1)|0;
 $9 = $gep;
 $gep_int51 = $__iob;
 $gep52 = (($gep_int51) + 4)|0;
 $10 = $gep52;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2048;
 $13 = ($12|0)==(0);
 
 if ($13) {
  $$0$i = $9;
 } else {
  $gep_int53 = $__fmt;
  $gep54 = (($gep_int53) + 2)|0;
  $14 = $gep54;
  HEAP8[$9] = 43;
  
  $$0$i = $14;
 }
 
 $15 = $11 & 1024;
 $16 = ($15|0)==(0);
 
 if ($16) {
  $$1$i = $$0$i;
 } else {
  $gep_int55 = $$0$i;
  $gep56 = (($gep_int55) + 1)|0;
  $17 = $gep56;
  HEAP8[$$0$i] = 35;
  
  $$1$i = $17;
 }
 
 $18 = $11 & 260;
 $19 = $11 >>> 14;
 $20 = ($18|0)==(260);
 
 do {
  if ($20) {
   HEAP8[$$1$i] = 76;
   $gep_int63 = $$1$i;
   $gep64 = (($gep_int63) + 1)|0;
   $scevgep16 = $gep64;
   $27 = $19 & 1;
   $28 = ($27|0)==(0);
   
   if ($28) {
    HEAP8[$scevgep16] = 97;
    
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   } else {
    HEAP8[$scevgep16] = 65;
    
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   }
  } else {
   $gep_int57 = $$1$i;
   $gep58 = (($gep_int57) + 1)|0;
   $21 = $gep58;
   HEAP8[$$1$i] = 46;
   $gep_int59 = $$1$i;
   $gep60 = (($gep_int59) + 2)|0;
   $22 = $gep60;
   HEAP8[$21] = 42;
   HEAP8[$22] = 76;
   $gep_int61 = $$1$i;
   $gep62 = (($gep_int61) + 3)|0;
   $scevgep = $gep62;
   
   if ((($18|0) == 256)) {
    $25 = $19 & 1;
    $26 = ($25|0)==(0);
    
    if ($26) {
     HEAP8[$scevgep] = 101;
     
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else if ((($18|0) == 4)) {
    $23 = $19 & 1;
    $24 = ($23|0)==(0);
    
    if ($24) {
     HEAP8[$scevgep] = 102;
     
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else {
    $29 = $19 & 1;
    $30 = ($29|0)==(0);
    
    if ($30) {
     HEAP8[$scevgep] = 103;
     
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   }
  }
 } while(0);
 
 $gep_int65 = $__nar;
 $31 = $gep_int65;
 HEAP32[$__nb>>2] = $31;
 $gep_int66 = 8376;
 $expanded = $gep_int66;
 $32 = HEAP8[$expanded]|0;
 $33 = ($32<<24>>24)==(0);
 
 do {
  if ($33) {
   $expanded22 = 8376;
   $34 = ___cxa_guard_acquire($expanded22|0)|0;
   $35 = ($34|0)==(0);
   
   if ($35) {
    break;
   }
   __THREW__ = 0;
   $gep_int67 = 8384;
   $expanded23 = $gep_int67;
   $36 = invoke_iiii(30,2147483647,$expanded23|0,0)|0;
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   
   if ($38) {
    $expanded26 = 69;
    $39 = ___cxa_find_matching_catch(-1,-1)|0;
    $40 = tempRet0;
    $expanded27 = 8376;
    ___cxa_guard_abort($expanded27|0);
    ___resumeException($39|0);
    // unreachable
   } else {
    $expanded24 = 8368;
    HEAP32[8368>>2] = $36;
    $expanded25 = 8376;
    ___cxa_guard_release($expanded25|0);
    
    break;
   }
  }
 } while(0);
 $expanded28 = 8368;
 $41 = HEAP32[8368>>2]|0;
 
 if ($specify_precision$0$off0$ph$i17) {
  $gep_int68 = $__iob;
  $gep69 = (($gep_int68) + 8)|0;
  $42 = $gep69;
  $43 = HEAP32[$42>>2]|0;
  
  $gep_int70 = $vararg_buffer;
  $vararg_ptr = $gep_int70;
  HEAP32[$vararg_ptr>>2] = $43;
  $gep_int71 = $vararg_buffer;
  $gep72 = (($gep_int71) + 4)|0;
  $vararg_ptr8 = $gep72;
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $expanded29 = 18;
  $vararg_func = $expanded29;
  $44 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer)|0;
  
  
  $__nc$0 = $44;
 } else {
  
  $gep_int73 = $vararg_buffer9;
  $vararg_ptr11 = $gep_int73;
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $expanded30 = 18;
  $vararg_func12 = $expanded30;
  $45 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer9)|0;
  
  
  $__nc$0 = $45;
 }
 
 $46 = ($__nc$0|0)>(29);
 
 L38: do {
  if ($46) {
   $gep_int74 = 8376;
   $expanded31 = $gep_int74;
   $47 = HEAP8[$expanded31]|0;
   $48 = ($47<<24>>24)==(0);
   
   L41: do {
    if ($specify_precision$0$off0$ph$i17) {
     
     do {
      if ($48) {
       $expanded32 = 8376;
       $49 = ___cxa_guard_acquire($expanded32|0)|0;
       $50 = ($49|0)==(0);
       
       if ($50) {
        break;
       }
       __THREW__ = 0;
       $gep_int75 = 8384;
       $expanded33 = $gep_int75;
       $51 = invoke_iiii(30,2147483647,$expanded33|0,0)|0;
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       
       if ($53) {
        $expanded36 = 69;
        $54 = ___cxa_find_matching_catch(-1,-1)|0;
        $55 = tempRet0;
        $expanded37 = 8376;
        ___cxa_guard_abort($expanded37|0);
        
        $eh$lpad$body$index3Z2D = $55;$eh$lpad$body$indexZ2D = $54;
        break L41;
       } else {
        $expanded34 = 8368;
        HEAP32[8368>>2] = $51;
        $expanded35 = 8376;
        ___cxa_guard_release($expanded35|0);
        
        break;
       }
      }
     } while(0);
     $expanded38 = 8368;
     $56 = HEAP32[8368>>2]|0;
     $gep_int76 = $__iob;
     $gep77 = (($gep_int76) + 8)|0;
     $57 = $gep77;
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     
     $gep_int78 = $vararg_buffer13;
     $vararg_ptr15 = $gep_int78;
     HEAP32[$vararg_ptr15>>2] = $58;
     $gep_int79 = $vararg_buffer13;
     $gep80 = (($gep_int79) + 4)|0;
     $vararg_ptr16 = $gep80;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $expanded39 = 16;
     $vararg_func17 = $expanded39;
     $59 = invoke_iiiii(16,$__nb|0,$56|0,$8|0,$vararg_buffer13|0)|0;
     
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     
     if ($61) {
      label = 36;
     } else {
      $__nc$1 = $59;
      label = 44;
     }
    } else {
     
     do {
      if ($48) {
       $expanded41 = 8376;
       $64 = ___cxa_guard_acquire($expanded41|0)|0;
       $65 = ($64|0)==(0);
       
       if ($65) {
        break;
       }
       __THREW__ = 0;
       $gep_int81 = 8384;
       $expanded42 = $gep_int81;
       $66 = invoke_iiii(30,2147483647,$expanded42|0,0)|0;
       $67 = __THREW__; __THREW__ = 0;
       $68 = $67&1;
       
       if ($68) {
        $expanded45 = 69;
        $69 = ___cxa_find_matching_catch(-1,-1)|0;
        $70 = tempRet0;
        $expanded46 = 8376;
        ___cxa_guard_abort($expanded46|0);
        
        $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
        break L41;
       } else {
        $expanded43 = 8368;
        HEAP32[8368>>2] = $66;
        $expanded44 = 8376;
        ___cxa_guard_release($expanded44|0);
        
        break;
       }
      }
     } while(0);
     $expanded47 = 8368;
     $71 = HEAP32[8368>>2]|0;
     __THREW__ = 0;
     
     $gep_int82 = $vararg_buffer18;
     $vararg_ptr20 = $gep_int82;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr20+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $expanded48 = 16;
     $vararg_func21 = $expanded48;
     $72 = invoke_iiiii(16,$__nb|0,$71|0,$8|0,$vararg_buffer18|0)|0;
     
     $73 = __THREW__; __THREW__ = 0;
     $74 = $73&1;
     
     if ($74) {
      label = 36;
     } else {
      $__nc$1 = $72;
      label = 44;
     }
    }
   } while(0);
   do {
    if ((label|0) == 44) {
     
     $75 = HEAP32[$__nb>>2]|0;
     $76 = ($75|0)==(0);
     
     if (!($76)) {
      $79 = $75;$80 = $75;$__nc$2 = $__nc$1;
      break L38;
     }
     __THREW__ = 0;
     invoke_v(13);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     
     if ($78) {
      label = 36;
      break;
     }
     $$pre = HEAP32[$__nb>>2]|0;
     
     $79 = $$pre;$80 = $$pre;$__nc$2 = $__nc$1;
     break L38;
    }
   } while(0);
   if ((label|0) == 36) {
    $expanded40 = 69;
    $62 = ___cxa_find_matching_catch(-1,-1)|0;
    $63 = tempRet0;
    
    $eh$lpad$body$index3Z2D = $63;$eh$lpad$body$indexZ2D = $62;
   }
   
   
   
   $$113 = $eh$lpad$body$indexZ2D;$$1212 = $eh$lpad$body$index3Z2D;
   
   
   ___resumeException($$113|0);
   // unreachable
  } else {
   $$pre14 = HEAP32[$__nb>>2]|0;
   
   $79 = $$pre14;$80 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 
 
 
 $gep_int83 = $79;
 $gep84 = (($gep_int83) + ($__nc$2))|0;
 $81 = $gep84;
 $82 = HEAP32[$10>>2]|0;
 $83 = $82 & 176;
 
 do {
  if ((($83|0) == 16)) {
   $84 = HEAP8[$79]|0;
   
   if ((($84<<24>>24) == 43) | (($84<<24>>24) == 45)) {
    $gep_int85 = $79;
    $gep86 = (($gep_int85) + 1)|0;
    $85 = $gep86;
    
    $$0$i7 = $85;
    break;
   }
   $86 = ($__nc$2|0)>(1);
   $87 = ($84<<24>>24)==(48);
   $or$cond$i = $86 & $87;
   
   if (!($or$cond$i)) {
    label = 53;
    break;
   }
   $gep_int87 = $79;
   $gep88 = (($gep_int87) + 1)|0;
   $88 = $gep88;
   $89 = HEAP8[$88]|0;
   
   if (!((($89<<24>>24) == 88) | (($89<<24>>24) == 120))) {
    label = 53;
    break;
   }
   $gep_int89 = $79;
   $gep90 = (($gep_int89) + 2)|0;
   $90 = $gep90;
   
   $$0$i7 = $90;
  } else if ((($83|0) == 32)) {
   $$0$i7 = $81;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  
  $$0$i7 = $79;
 }
 
 $gep_int91 = $__o;
 $91 = $gep_int91;
 
 $92 = ($79|0)==($31|0);
 
 do {
  if ($92) {
   $101 = $31;$102 = 0;$__ob$0 = $91;
   label = 59;
  } else {
   $93 = $__nc$2 << 1;
   $94 = _malloc($93)|0;
   $95 = ($94|0)==(0);
   
   if (!($95)) {
    $101 = $79;$102 = $94;$__ob$0 = $94;
    label = 59;
    break;
   }
   __THREW__ = 0;
   invoke_v(13);
   $96 = __THREW__; __THREW__ = 0;
   $97 = $96&1;
   
   if ($97) {
    $98 = 0;
    label = 58;
    break;
   }
   $$pre15 = HEAP32[$__nb>>2]|0;
   
   $101 = $$pre15;$102 = 0;$__ob$0 = 0;
   label = 59;
  }
 } while(0);
 do {
  if ((label|0) == 59) {
   
   
   
   __THREW__ = 0;
   invoke_vii(41,$1|0,$__iob|0);
   $103 = __THREW__; __THREW__ = 0;
   $104 = $103&1;
   
   if ($104) {
    $98 = $102;
    label = 58;
    break;
   }
   __THREW__ = 0;
   invoke_viiiiiii(44,$101|0,$$0$i7|0,$81|0,$__ob$0|0,$__op|0,$__oe|0,$1|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   
   if ($106) {
    $expanded50 = 69;
    $126 = ___cxa_find_matching_catch(-1,-1)|0;
    $127 = tempRet0;
    $gep_int98 = $1;
    $128 = $gep_int98;
    $129 = HEAP32[$128>>2]|0;
    $gep_int99 = $129;
    $130 = $gep_int99;
    u$133 = __ZNSt3__114__shared_count16__release_sharedEv($130)|0;
    
    $$0 = $126;$$01 = $127;$131 = $102;
    break;
   }
   $gep_int92 = $1;
   $107 = $gep_int92;
   $108 = HEAP32[$107>>2]|0;
   $gep_int93 = $108;
   $109 = $gep_int93;
   u$115 = __ZNSt3__114__shared_count16__release_sharedEv($109)|0;
   $gep_int94 = $__s;
   $110 = $gep_int94;
   $111 = HEAP32[$110>>2]|0;
   $gep_int95 = $3;
   $112 = $gep_int95;
   HEAP32[$112>>2] = $111;
   $113 = HEAP32[$__op>>2]|0;
   $114 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   $115 = $$byval_copy;
   
   $116 = $$byval_copy;
   $117 = $3;
   ;HEAP32[$116+0>>2]=HEAP32[$117+0>>2]|0;
   invoke_viiiiiii(40,$2|0,$$byval_copy|0,$__ob$0|0,$113|0,$114|0,$__iob|0,$__fl|0);
   $118 = $$byval_copy;
   
   $119 = __THREW__; __THREW__ = 0;
   $120 = $119&1;
   
   if ($120) {
    $98 = $102;
    label = 58;
    break;
   }
   $gep_int96 = $2;
   $121 = $gep_int96;
   $122 = HEAP32[$121>>2]|0;
   HEAP32[$110>>2] = $122;
   $gep_int97 = $agg$result;
   $123 = $gep_int97;
   HEAP32[$123>>2] = $122;
   $124 = ($102|0)==(0);
   
   if (!($124)) {
    _free($102);
    
   }
   
   $125 = ($80|0)==(0);
   
   if ($125) {
    STACKTOP = sp;return;
   }
   _free($80);
   
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 58) {
  
  $expanded49 = 69;
  $99 = ___cxa_find_matching_catch(-1,-1)|0;
  $100 = tempRet0;
  
  $$0 = $99;$$01 = $100;$131 = $98;
 }
 
 
 
 $132 = ($131|0)==(0);
 
 if (!($132)) {
  _free($131);
  
 }
 $133 = ($80|0)==(0);
 
 if ($133) {
  $$113 = $$0;$$1212 = $$01;
  
  
  ___resumeException($$113|0);
  // unreachable
 }
 _free($80);
 
 $$113 = $$0;$$1212 = $$01;
 
 
 ___resumeException($$113|0);
 // unreachable
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0;
 var $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep40 = 0, $gep42 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep54 = 0, $gep56 = 0;
 var $gep59 = 0, $gep_array = 0, $gep_int = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0;
 var $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int61 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$39 = 0, u$40 = 0;
 var u$42 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 40|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $gep_int = $__fmt;
 $3 = $gep_int;
 $gep_int21 = 7280;
 $expanded = $gep_int21;
 ;HEAP8[$3+0|0]=HEAP8[$expanded+0|0]|0;HEAP8[$3+1|0]=HEAP8[$expanded+1|0]|0;HEAP8[$3+2|0]=HEAP8[$expanded+2|0]|0;HEAP8[$3+3|0]=HEAP8[$expanded+3|0]|0;HEAP8[$3+4|0]=HEAP8[$expanded+4|0]|0;HEAP8[$3+5|0]=HEAP8[$expanded+5|0]|0;
 $gep_int22 = $__nar;
 $4 = $gep_int22;
 $gep_int23 = 8376;
 $expanded1 = $gep_int23;
 $5 = HEAP8[$expanded1]|0;
 $6 = ($5<<24>>24)==(0);
 
 do {
  if ($6) {
   $expanded2 = 8376;
   $7 = ___cxa_guard_acquire($expanded2|0)|0;
   $8 = ($7|0)==(0);
   
   if ($8) {
    break;
   }
   __THREW__ = 0;
   $gep_int24 = 8384;
   $expanded3 = $gep_int24;
   $9 = invoke_iiii(30,2147483647,$expanded3|0,0)|0;
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   
   if ($11) {
    $expanded6 = 69;
    $12 = ___cxa_find_matching_catch(-1,-1)|0;
    $13 = tempRet0;
    $expanded7 = 8376;
    ___cxa_guard_abort($expanded7|0);
    ___resumeException($12|0);
    // unreachable
   } else {
    $expanded4 = 8368;
    HEAP32[8368>>2] = $9;
    $expanded5 = 8376;
    ___cxa_guard_release($expanded5|0);
    
    break;
   }
  }
 } while(0);
 $expanded8 = 8368;
 $14 = HEAP32[8368>>2]|0;
 
 $gep_int25 = $vararg_buffer;
 $vararg_ptr = $gep_int25;
 HEAP32[$vararg_ptr>>2] = $__v;
 $expanded9 = 18;
 $vararg_func = $expanded9;
 $15 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$14,$3,$vararg_buffer)|0;
 
 $gep_int26 = $__nar;
 $gep = (($gep_int26) + ($15))|0;
 $16 = $gep;
 $gep_int27 = $__iob;
 $gep28 = (($gep_int27) + 4)|0;
 $17 = $gep28;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 176;
 
 do {
  if ((($19|0) == 32)) {
   $$0$i = $16;
  } else if ((($19|0) == 16)) {
   $20 = HEAP8[$4]|0;
   
   if ((($20<<24>>24) == 43) | (($20<<24>>24) == 45)) {
    $gep_int29 = $__nar;
    $gep30 = (($gep_int29) + 1)|0;
    $21 = $gep30;
    
    $$0$i = $21;
    break;
   }
   $22 = ($15|0)>(1);
   $23 = ($20<<24>>24)==(48);
   $or$cond$i = $22 & $23;
   
   if (!($or$cond$i)) {
    label = 12;
    break;
   }
   $gep_int31 = $__nar;
   $gep32 = (($gep_int31) + 1)|0;
   $24 = $gep32;
   $25 = HEAP8[$24]|0;
   
   if (!((($25<<24>>24) == 88) | (($25<<24>>24) == 120))) {
    label = 12;
    break;
   }
   $gep_int33 = $__nar;
   $gep34 = (($gep_int33) + 2)|0;
   $26 = $gep34;
   
   $$0$i = $26;
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  
  $$0$i = $4;
 }
 
 $gep_int35 = $__o;
 $27 = $gep_int35;
 
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $gep_int36 = $1;
 $28 = $gep_int36;
 $29 = HEAP32[$28>>2]|0;
 $30 = $__p$i$i$i$i;
 
 $expanded11 = 8480;
 $gep_int37 = 8480;
 $expanded10 = $gep_int37;
 $31 = HEAP32[$expanded10>>2]|0;
 $32 = ($31|0)==(-1);
 
 do {
  if (!($32)) {
   $gep_int38 = $__p$i$i$i$i;
   $33 = $gep_int38;
   $expanded12 = 8480;
   HEAP32[$33>>2] = $expanded12;
   $gep_int39 = $__p$i$i$i$i;
   $gep40 = (($gep_int39) + 4)|0;
   $34 = $gep40;
   $expanded13 = 177;
   HEAP32[$34>>2] = $expanded13;
   $gep_int41 = $__p$i$i$i$i;
   $gep42 = (($gep_int41) + 8)|0;
   $35 = $gep42;
   HEAP32[$35>>2] = 0;
   __THREW__ = 0;
   $expanded15 = 8480;
   $gep_int43 = 8480;
   $expanded14 = $gep_int43;
   invoke_viii(17,$expanded14|0,$30|0,178);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   
   if (!($37)) {
    break;
   }
   $expanded20 = 69;
   $65 = ___cxa_find_matching_catch(-1,-1)|0;
   $66 = tempRet0;
   $67 = HEAP32[$28>>2]|0;
   $gep_int57 = $67;
   $68 = $gep_int57;
   u$42 = __ZNSt3__114__shared_count16__release_sharedEv($68)|0;
   ___resumeException($65|0);
   // unreachable
  }
 } while(0);
 
 $expanded17 = 8480;
 $gep_int44 = 8480;
 $gep45 = (($gep_int44) + 4)|0;
 $expanded16 = $gep45;
 $38 = HEAP32[$expanded16>>2]|0;
 $39 = (($38) + -1)|0;
 $gep_int46 = $29;
 $gep47 = (($gep_int46) + 12)|0;
 $40 = $gep47;
 $41 = HEAP32[$40>>2]|0;
 $gep_int48 = $29;
 $gep49 = (($gep_int48) + 8)|0;
 $42 = $gep49;
 $43 = HEAP32[$42>>2]|0;
 $44 = $41;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = $46 >> 2;
 $48 = ($47>>>0)>($39>>>0);
 
 do {
  if ($48) {
   $gep_int50 = $43;
   $gep_array = $39<<2;
   $gep51 = (($gep_int50) + ($gep_array))|0;
   $49 = $gep51;
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0);
   
   if ($51) {
    break;
   }
   $56 = $50;
   $57 = HEAP32[$28>>2]|0;
   $gep_int52 = $57;
   $58 = $gep_int52;
   u$39 = __ZNSt3__114__shared_count16__release_sharedEv($58)|0;
   $59 = $50;
   $60 = HEAP32[$50>>2]|0;
   $gep_int53 = $60;
   $gep54 = (($gep_int53) + 32)|0;
   $61 = $gep54;
   $62 = HEAP32[$61>>2]|0;
   u$40 = FUNCTION_TABLE_iiiii[$62 & 31]($56,$4,$16,$27)|0;
   $gep_int55 = $__o;
   $gep56 = (($gep_int55) + ($15))|0;
   $63 = $gep56;
   $64 = ($$0$i|0)==($16|0);
   
   if ($64) {
    $__op$0 = $63;
    
    $gep_int60 = $__s;
    $73 = $gep_int60;
    $74 = HEAP32[$73>>2]|0;
    $gep_int61 = $2;
    $75 = $gep_int61;
    HEAP32[$75>>2] = $74;
    $76 = $$byval_copy;
    
    $77 = $$byval_copy;
    $78 = $2;
    ;HEAP32[$77+0>>2]=HEAP32[$78+0>>2]|0;
    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$27,$__op$0,$63,$__iob,$__fl);
    $79 = $$byval_copy;
    
    
    STACKTOP = sp;return;
   }
   $69 = $__nar;
   $70 = $$0$i;
   $71 = (($70) - ($69))|0;
   $gep_int58 = $__o;
   $gep59 = (($gep_int58) + ($71))|0;
   $72 = $gep59;
   
   $__op$0 = $72;
   
   $gep_int60 = $__s;
   $73 = $gep_int60;
   $74 = HEAP32[$73>>2]|0;
   $gep_int61 = $2;
   $75 = $gep_int61;
   HEAP32[$75>>2] = $74;
   $76 = $$byval_copy;
   
   $77 = $$byval_copy;
   $78 = $2;
   ;HEAP32[$77+0>>2]=HEAP32[$78+0>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$27,$__op$0,$63,$__iob,$__fl);
   $79 = $$byval_copy;
   
   
   STACKTOP = sp;return;
  }
 } while(0);
 $52 = ___cxa_allocate_exception(4)|0;
 $53 = $52;
 __ZNSt8bad_castC2Ev($53);
 __THREW__ = 0;
 $expanded18 = 16440;
 $expanded19 = 119;
 invoke_viii(5,$52|0,$expanded18|0,$expanded19|0);
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 
 if ($55) {
  $expanded20 = 69;
  $65 = ___cxa_find_matching_catch(-1,-1)|0;
  $66 = tempRet0;
  $67 = HEAP32[$28>>2]|0;
  $gep_int57 = $67;
  $68 = $gep_int57;
  u$42 = __ZNSt3__114__shared_count16__release_sharedEv($68)|0;
  ___resumeException($65|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$pre5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nm = 0, $__p$i$i$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep13 = 0, $gep20 = 0, $gep22 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep48 = 0;
 var $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep_array = 0, $gep_array47 = 0, $gep_int = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0;
 var $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int46 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int60 = 0, label = 0, sp = 0, u$24 = 0;
 var u$49 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $1 = sp + 24|0;
 $2 = sp + 32|0;
 $__nm = sp + 40|0;
 $gep_int = $__iob;
 $gep = (($gep_int) + 4)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 
 if ($6) {
  $7 = $this;
  $8 = HEAP32[$this>>2]|0;
  $gep_int12 = $8;
  $gep13 = (($gep_int12) + 24)|0;
  $9 = $gep13;
  $10 = HEAP32[$9>>2]|0;
  $gep_int14 = $__s;
  $11 = $gep_int14;
  $12 = HEAP32[$11>>2]|0;
  $gep_int15 = $1;
  $13 = $gep_int15;
  HEAP32[$13>>2] = $12;
  $14 = $__v&1;
  $15 = $$byval_copy;
  
  $16 = $$byval_copy;
  $17 = $1;
  ;HEAP32[$16+0>>2]=HEAP32[$17+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$10 & 31]($agg$result,$this,$$byval_copy,$__iob,$__fl,$14);
  $18 = $$byval_copy;
  
  
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $gep_int16 = $2;
 $19 = $gep_int16;
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p$i$i$i$i;
 
 $expanded1 = 8632;
 $gep_int17 = 8632;
 $expanded = $gep_int17;
 $22 = HEAP32[$expanded>>2]|0;
 $23 = ($22|0)==(-1);
 
 if ($23) {
  label = 5;
 } else {
  $gep_int18 = $__p$i$i$i$i;
  $24 = $gep_int18;
  $expanded2 = 8632;
  HEAP32[$24>>2] = $expanded2;
  $gep_int19 = $__p$i$i$i$i;
  $gep20 = (($gep_int19) + 4)|0;
  $25 = $gep20;
  $expanded3 = 177;
  HEAP32[$25>>2] = $expanded3;
  $gep_int21 = $__p$i$i$i$i;
  $gep22 = (($gep_int21) + 8)|0;
  $26 = $gep22;
  HEAP32[$26>>2] = 0;
  __THREW__ = 0;
  $expanded5 = 8632;
  $gep_int23 = 8632;
  $expanded4 = $gep_int23;
  invoke_viii(17,$expanded4|0,$21|0,178);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  
  if (!($28)) {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   
   $expanded7 = 8632;
   $gep_int24 = 8632;
   $gep25 = (($gep_int24) + 4)|0;
   $expanded6 = $gep25;
   $29 = HEAP32[$expanded6>>2]|0;
   $30 = (($29) + -1)|0;
   $gep_int26 = $20;
   $gep27 = (($gep_int26) + 12)|0;
   $31 = $gep27;
   $32 = HEAP32[$31>>2]|0;
   $gep_int28 = $20;
   $gep29 = (($gep_int28) + 8)|0;
   $33 = $gep29;
   $34 = HEAP32[$33>>2]|0;
   $35 = $32;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = $37 >> 2;
   $39 = ($38>>>0)>($30>>>0);
   
   do {
    if ($39) {
     $gep_int30 = $34;
     $gep_array = $30<<2;
     $gep31 = (($gep_int30) + ($gep_array))|0;
     $40 = $gep31;
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(0);
     
     if ($42) {
      break;
     }
     $47 = $41;
     $48 = HEAP32[$19>>2]|0;
     $gep_int32 = $48;
     $49 = $gep_int32;
     u$24 = __ZNSt3__114__shared_count16__release_sharedEv($49)|0;
     $50 = $41;
     $51 = HEAP32[$41>>2]|0;
     
     if ($__v) {
      $gep_int33 = $51;
      $gep34 = (($gep_int33) + 24)|0;
      $52 = $gep34;
      $53 = HEAP32[$52>>2]|0;
      FUNCTION_TABLE_vii[$53 & 127]($__nm,$47);
      
     } else {
      $gep_int35 = $51;
      $gep36 = (($gep_int35) + 28)|0;
      $54 = $gep36;
      $55 = HEAP32[$54>>2]|0;
      FUNCTION_TABLE_vii[$55 & 127]($__nm,$47);
      
     }
     $56 = $__nm;
     $57 = HEAP8[$__nm]|0;
     $58 = $57 & 1;
     $59 = ($58<<24>>24)==(0);
     
     if ($59) {
      $gep_int41 = $__nm;
      $gep42 = (($gep_int41) + 4)|0;
      $62 = $gep42;
      $gep_int43 = $__nm;
      $gep44 = (($gep_int43) + 8)|0;
      $$pre5 = $gep44;
      
      $$ph = $62;$$pre$phi6Z2D = $$pre5;$$pre$phiZ2D = $62;
     } else {
      $gep_int37 = $__nm;
      $gep38 = (($gep_int37) + 8)|0;
      $60 = $gep38;
      $61 = HEAP32[$60>>2]|0;
      $gep_int39 = $__nm;
      $gep40 = (($gep_int39) + 4)|0;
      $$pre4 = $gep40;
      
      $$ph = $61;$$pre$phi6Z2D = $60;$$pre$phiZ2D = $$pre4;
     }
     
     
     
     $gep_int45 = $__s;
     $63 = $gep_int45;
     
     $64 = $57;$65 = $$ph;
     L20: while(1) {
      
      
      $66 = $64 & 1;
      $67 = ($66<<24>>24)==(0);
      
      if ($67) {
       $70 = $64&255;
       $71 = $70 >>> 1;
       
       $72 = $$pre$phiZ2D;$73 = $71;
      } else {
       $68 = HEAP32[$$pre$phi6Z2D>>2]|0;
       $69 = HEAP32[$$pre$phiZ2D>>2]|0;
       
       $72 = $68;$73 = $69;
      }
      
      
      $gep_int46 = $72;
      $gep_array47 = $73<<2;
      $gep48 = (($gep_int46) + ($gep_array47))|0;
      $74 = $gep48;
      $75 = ($65|0)==($74|0);
      
      if ($75) {
       label = 29;
       break;
      }
      $76 = HEAP32[$65>>2]|0;
      $77 = HEAP32[$63>>2]|0;
      $78 = ($77|0)==(0);
      
      do {
       if (!($78)) {
        $gep_int49 = $77;
        $gep50 = (($gep_int49) + 24)|0;
        $79 = $gep50;
        $80 = HEAP32[$79>>2]|0;
        $gep_int51 = $77;
        $gep52 = (($gep_int51) + 28)|0;
        $81 = $gep52;
        $82 = HEAP32[$81>>2]|0;
        $83 = ($80|0)==($82|0);
        
        if ($83) {
         $84 = $77;
         $85 = HEAP32[$77>>2]|0;
         $gep_int53 = $85;
         $gep54 = (($gep_int53) + 52)|0;
         $86 = $gep54;
         $87 = HEAP32[$86>>2]|0;
         __THREW__ = 0;
         $88 = invoke_iii($87|0,$77|0,$76|0)|0;
         $89 = __THREW__; __THREW__ = 0;
         $90 = $89&1;
         
         if ($90) {
          label = 28;
          break L20;
         } else {
          $$0$i$i = $88;
         }
        } else {
         $gep_int55 = $80;
         $gep56 = (($gep_int55) + 4)|0;
         $91 = $gep56;
         HEAP32[$79>>2] = $91;
         HEAP32[$80>>2] = $76;
         
         $$0$i$i = $76;
        }
        
        $92 = ($$0$i$i|0)==(-1);
        
        if (!($92)) {
         break;
        }
        HEAP32[$63>>2] = 0;
        
       }
      } while(0);
      $gep_int57 = $65;
      $gep58 = (($gep_int57) + 4)|0;
      $93 = $gep58;
      $$pre = HEAP8[$__nm]|0;
      
      $64 = $$pre;$65 = $93;
     }
     if ((label|0) == 28) {
      $expanded11 = 69;
      $98 = ___cxa_find_matching_catch(-1,-1)|0;
      $99 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
      
      $$0 = $98;$$01 = $99;
      
      
      ___resumeException($$0|0);
      // unreachable
     }
     else if ((label|0) == 29) {
      $100 = HEAP32[$63>>2]|0;
      $gep_int60 = $agg$result;
      $101 = $gep_int60;
      HEAP32[$101>>2] = $100;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
      
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $43 = ___cxa_allocate_exception(4)|0;
   $44 = $43;
   __ZNSt8bad_castC2Ev($44);
   __THREW__ = 0;
   $expanded8 = 16440;
   $expanded9 = 119;
   invoke_viii(5,$43|0,$expanded8|0,$expanded9|0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   
   if ($46) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded10 = 69;
 $94 = ___cxa_find_matching_catch(-1,-1)|0;
 $95 = tempRet0;
 $96 = HEAP32[$19>>2]|0;
 $gep_int59 = $96;
 $97 = $gep_int59;
 u$49 = __ZNSt3__114__shared_count16__release_sharedEv($97)|0;
 
 $$0 = $94;$$01 = $95;
 
 
 ___resumeException($$0|0);
 // unreachable
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep14 = 0;
 var $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int27 = 0;
 var $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $gep_int39 = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$43 = 0, u$51 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 88|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $gep_int = $__fmt;
 $3 = $gep_int;
 $gep_int11 = 7272;
 $expanded = $gep_int11;
 ;HEAP8[$3+0|0]=HEAP8[$expanded+0|0]|0;HEAP8[$3+1|0]=HEAP8[$expanded+1|0]|0;HEAP8[$3+2|0]=HEAP8[$expanded+2|0]|0;HEAP8[$3+3|0]=HEAP8[$expanded+3|0]|0;HEAP8[$3+4|0]=HEAP8[$expanded+4|0]|0;HEAP8[$3+5|0]=HEAP8[$expanded+5|0]|0;
 $gep_int12 = $__fmt;
 $gep = (($gep_int12) + 1)|0;
 $4 = $gep;
 $gep_int13 = $__iob;
 $gep14 = (($gep_int13) + 4)|0;
 $5 = $gep14;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2048;
 $8 = ($7|0)==(0);
 
 if ($8) {
  $$0$i = $4;
 } else {
  $gep_int15 = $__fmt;
  $gep16 = (($gep_int15) + 2)|0;
  $9 = $gep16;
  HEAP8[$4] = 43;
  
  $$0$i = $9;
 }
 
 $10 = $6 & 512;
 $11 = ($10|0)==(0);
 
 if ($11) {
  $$13$i$ph = $$0$i;
 } else {
  $gep_int17 = $$0$i;
  $gep18 = (($gep_int17) + 1)|0;
  $12 = $gep18;
  HEAP8[$$0$i] = 35;
  
  $$13$i$ph = $12;
 }
 
 HEAP8[$$13$i$ph] = 108;
 $gep_int19 = $$13$i$ph;
 $gep20 = (($gep_int19) + 1)|0;
 $scevgep = $gep20;
 $13 = $6 & 74;
 
 do {
  if ((($13|0) == 8)) {
   $14 = $6 & 16384;
   $15 = ($14|0)==(0);
   
   if ($15) {
    HEAP8[$scevgep] = 120;
    
    break;
   } else {
    HEAP8[$scevgep] = 88;
    
    break;
   }
  } else if ((($13|0) == 64)) {
   HEAP8[$scevgep] = 111;
   
  } else {
   HEAP8[$scevgep] = 100;
   
  }
 } while(0);
 $gep_int21 = $__nar;
 $16 = $gep_int21;
 $gep_int22 = 8376;
 $expanded1 = $gep_int22;
 $17 = HEAP8[$expanded1]|0;
 $18 = ($17<<24>>24)==(0);
 
 do {
  if ($18) {
   $expanded2 = 8376;
   $19 = ___cxa_guard_acquire($expanded2|0)|0;
   $20 = ($19|0)==(0);
   
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $gep_int23 = 8384;
   $expanded3 = $gep_int23;
   $21 = invoke_iiii(30,2147483647,$expanded3|0,0)|0;
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   
   if ($23) {
    $expanded6 = 69;
    $24 = ___cxa_find_matching_catch(-1,-1)|0;
    $25 = tempRet0;
    $expanded7 = 8376;
    ___cxa_guard_abort($expanded7|0);
    ___resumeException($24|0);
    // unreachable
   } else {
    $expanded4 = 8368;
    HEAP32[8368>>2] = $21;
    $expanded5 = 8376;
    ___cxa_guard_release($expanded5|0);
    
    break;
   }
  }
 } while(0);
 $expanded8 = 8368;
 $26 = HEAP32[8368>>2]|0;
 
 $gep_int24 = $vararg_buffer;
 $vararg_ptr = $gep_int24;
 HEAP32[$vararg_ptr>>2] = $__v;
 $expanded9 = 18;
 $vararg_func = $expanded9;
 $27 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16,12,$26,$3,$vararg_buffer)|0;
 
 $gep_int25 = $__nar;
 $gep26 = (($gep_int25) + ($27))|0;
 $28 = $gep26;
 $29 = HEAP32[$5>>2]|0;
 $30 = $29 & 176;
 
 do {
  if ((($30|0) == 16)) {
   $31 = HEAP8[$16]|0;
   
   if ((($31<<24>>24) == 43) | (($31<<24>>24) == 45)) {
    $gep_int27 = $__nar;
    $gep28 = (($gep_int27) + 1)|0;
    $32 = $gep28;
    
    $$0$i1 = $32;
    break;
   }
   $33 = ($27|0)>(1);
   $34 = ($31<<24>>24)==(48);
   $or$cond$i = $33 & $34;
   
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $gep_int29 = $__nar;
   $gep30 = (($gep_int29) + 1)|0;
   $35 = $gep30;
   $36 = HEAP8[$35]|0;
   
   if (!((($36<<24>>24) == 88) | (($36<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $gep_int31 = $__nar;
   $gep32 = (($gep_int31) + 2)|0;
   $37 = $gep32;
   
   $$0$i1 = $37;
  } else if ((($30|0) == 32)) {
   $$0$i1 = $28;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  
  $$0$i1 = $16;
 }
 
 $38 = $__o;
 
 $gep_int33 = $__o;
 $39 = $gep_int33;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(45,$16|0,$$0$i1|0,$28|0,$39|0,$__op|0,$__oe|0,$1|0);
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 
 if ($41) {
  $expanded10 = 69;
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $gep_int38 = $1;
  $56 = $gep_int38;
  $57 = HEAP32[$56>>2]|0;
  $gep_int39 = $57;
  $58 = $gep_int39;
  u$51 = __ZNSt3__114__shared_count16__release_sharedEv($58)|0;
  ___resumeException($54|0);
  // unreachable
 } else {
  $gep_int34 = $1;
  $42 = $gep_int34;
  $43 = HEAP32[$42>>2]|0;
  $gep_int35 = $43;
  $44 = $gep_int35;
  u$43 = __ZNSt3__114__shared_count16__release_sharedEv($44)|0;
  $gep_int36 = $__s;
  $45 = $gep_int36;
  $46 = HEAP32[$45>>2]|0;
  $gep_int37 = $2;
  $47 = $gep_int37;
  HEAP32[$47>>2] = $46;
  $48 = HEAP32[$__op>>2]|0;
  $49 = HEAP32[$__oe>>2]|0;
  $50 = $$byval_copy;
  
  $51 = $$byval_copy;
  $52 = $2;
  ;HEAP32[$51+0>>2]=HEAP32[$52+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$39,$48,$49,$__iob,$__fl);
  $53 = $$byval_copy;
  
  
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$012$i$i10 = 0, $$012$i$i10$phi = 0, $$15 = 0, $$__dg$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $119$phi = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $182$phi = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dc$012 = 0, $__dc$1 = 0, $__dg$013 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$014 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0;
 var $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep101 = 0, $gep103 = 0, $gep105 = 0, $gep107 = 0;
 var $gep109 = 0, $gep112 = 0, $gep114 = 0, $gep116 = 0, $gep118 = 0, $gep121 = 0, $gep31 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0, $gep44 = 0, $gep46 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0;
 var $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep97 = 0, $gep99 = 0, $gep_array = 0, $gep_array111 = 0;
 var $gep_array120 = 0, $gep_array55 = 0, $gep_array64 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0, $gep_int119 = 0, $gep_int27 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0;
 var $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int42 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0;
 var $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int98 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0, u$32 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__grouping = sp + 32|0;
 $gep_int = $__loc;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 
 $expanded6 = 8472;
 $gep_int27 = 8472;
 $expanded = $gep_int27;
 $4 = HEAP32[$expanded>>2]|0;
 $5 = ($4|0)==(-1);
 
 if (!($5)) {
  $gep_int28 = $__p$i$i$i$i;
  $6 = $gep_int28;
  $expanded7 = 8472;
  HEAP32[$6>>2] = $expanded7;
  $gep_int29 = $__p$i$i$i$i;
  $gep = (($gep_int29) + 4)|0;
  $7 = $gep;
  $expanded8 = 177;
  HEAP32[$7>>2] = $expanded8;
  $gep_int30 = $__p$i$i$i$i;
  $gep31 = (($gep_int30) + 8)|0;
  $8 = $gep31;
  HEAP32[$8>>2] = 0;
  $expanded10 = 8472;
  $gep_int32 = 8472;
  $expanded9 = $gep_int32;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded9,$3,178);
  
 }
 
 $expanded12 = 8472;
 $gep_int33 = 8472;
 $gep34 = (($gep_int33) + 4)|0;
 $expanded11 = $gep34;
 $9 = HEAP32[$expanded11>>2]|0;
 $10 = (($9) + -1)|0;
 $gep_int35 = $2;
 $gep36 = (($gep_int35) + 12)|0;
 $11 = $gep36;
 $12 = HEAP32[$11>>2]|0;
 $gep_int37 = $2;
 $gep38 = (($gep_int37) + 8)|0;
 $13 = $gep38;
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 
 if (!($19)) {
  $23 = ___cxa_allocate_exception(4)|0;
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  $expanded13 = 16440;
  $expanded14 = 119;
  ___cxa_throw($23|0,$expanded13|0,$expanded14|0);
  // unreachable
 }
 $gep_int39 = $14;
 $gep_array = $10<<2;
 $gep40 = (($gep_int39) + ($gep_array))|0;
 $20 = $gep40;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 
 if ($22) {
  $23 = ___cxa_allocate_exception(4)|0;
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  $expanded13 = 16440;
  $expanded14 = 119;
  ___cxa_throw($23|0,$expanded13|0,$expanded14|0);
  // unreachable
 }
 $25 = $21;
 $26 = HEAP32[$1>>2]|0;
 $27 = $__p$i$i$i$i1;
 
 $expanded16 = 8632;
 $gep_int41 = 8632;
 $expanded15 = $gep_int41;
 $28 = HEAP32[$expanded15>>2]|0;
 $29 = ($28|0)==(-1);
 
 if (!($29)) {
  $gep_int42 = $__p$i$i$i$i1;
  $30 = $gep_int42;
  $expanded17 = 8632;
  HEAP32[$30>>2] = $expanded17;
  $gep_int43 = $__p$i$i$i$i1;
  $gep44 = (($gep_int43) + 4)|0;
  $31 = $gep44;
  $expanded18 = 177;
  HEAP32[$31>>2] = $expanded18;
  $gep_int45 = $__p$i$i$i$i1;
  $gep46 = (($gep_int45) + 8)|0;
  $32 = $gep46;
  HEAP32[$32>>2] = 0;
  $expanded20 = 8632;
  $gep_int47 = 8632;
  $expanded19 = $gep_int47;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded19,$27,178);
  
 }
 
 $expanded22 = 8632;
 $gep_int48 = 8632;
 $gep49 = (($gep_int48) + 4)|0;
 $expanded21 = $gep49;
 $33 = HEAP32[$expanded21>>2]|0;
 $34 = (($33) + -1)|0;
 $gep_int50 = $26;
 $gep51 = (($gep_int50) + 12)|0;
 $35 = $gep51;
 $36 = HEAP32[$35>>2]|0;
 $gep_int52 = $26;
 $gep53 = (($gep_int52) + 8)|0;
 $37 = $gep53;
 $38 = HEAP32[$37>>2]|0;
 $39 = $36;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 $42 = $41 >> 2;
 $43 = ($42>>>0)>($34>>>0);
 
 if (!($43)) {
  $47 = ___cxa_allocate_exception(4)|0;
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  $expanded23 = 16440;
  $expanded24 = 119;
  ___cxa_throw($47|0,$expanded23|0,$expanded24|0);
  // unreachable
 }
 $gep_int54 = $38;
 $gep_array55 = $34<<2;
 $gep56 = (($gep_int54) + ($gep_array55))|0;
 $44 = $gep56;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 
 if ($46) {
  $47 = ___cxa_allocate_exception(4)|0;
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  $expanded23 = 16440;
  $expanded24 = 119;
  ___cxa_throw($47|0,$expanded23|0,$expanded24|0);
  // unreachable
 }
 $49 = $45;
 $50 = $45;
 $51 = HEAP32[$45>>2]|0;
 $gep_int57 = $51;
 $gep58 = (($gep_int57) + 20)|0;
 $52 = $gep58;
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vii[$53 & 127]($__grouping,$49);
 $54 = $__grouping;
 $55 = HEAP8[$__grouping]|0;
 $56 = $55 & 1;
 $57 = ($56<<24>>24)==(0);
 
 if ($57) {
  $60 = $55&255;
  $61 = $60 >>> 1;
  
  $62 = $61;
 } else {
  $gep_int59 = $__grouping;
  $gep60 = (($gep_int59) + 4)|0;
  $58 = $gep60;
  $59 = HEAP32[$58>>2]|0;
  
  $62 = $59;
 }
 
 $63 = ($62|0)==(0);
 
 L23: do {
  if ($63) {
   $64 = $21;
   $65 = HEAP32[$21>>2]|0;
   $gep_int61 = $65;
   $gep62 = (($gep_int61) + 48)|0;
   $66 = $gep62;
   $67 = HEAP32[$66>>2]|0;
   __THREW__ = 0;
   u$32 = invoke_iiiii($67|0,$25|0,$__nb|0,$__ne|0,$__ob|0)|0;
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   
   if ($69) {
    label = 18;
    break;
   }
   $70 = $__ne;
   $71 = $__nb;
   $72 = (($70) - ($71))|0;
   $gep_int63 = $__ob;
   $gep_array64 = $72<<2;
   $gep65 = (($gep_int63) + ($gep_array64))|0;
   $73 = $gep65;
   HEAP32[$__oe>>2] = $73;
   
   $188 = $73;
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $78 = HEAP8[$__nb]|0;
   
   if ((($78<<24>>24) == 43) | (($78<<24>>24) == 45)) {
    $79 = $21;
    $80 = HEAP32[$21>>2]|0;
    $gep_int66 = $80;
    $gep67 = (($gep_int66) + 44)|0;
    $81 = $gep67;
    $82 = HEAP32[$81>>2]|0;
    __THREW__ = 0;
    $83 = invoke_iii($82|0,$25|0,$78|0)|0;
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    
    if ($85) {
     label = 18;
     break;
    }
    $gep_int68 = $__nb;
    $gep69 = (($gep_int68) + 1)|0;
    $86 = $gep69;
    $87 = HEAP32[$__oe>>2]|0;
    $gep_int70 = $87;
    $gep71 = (($gep_int70) + 4)|0;
    $88 = $gep71;
    HEAP32[$__oe>>2] = $88;
    HEAP32[$87>>2] = $83;
    
    $__nf$0 = $86;
   } else {
    $__nf$0 = $__nb;
   }
   
   $89 = $__ne;
   $90 = $__nf$0;
   $91 = (($89) - ($90))|0;
   $92 = ($91|0)>(1);
   
   do {
    if ($92) {
     $93 = HEAP8[$__nf$0]|0;
     $94 = ($93<<24>>24)==(48);
     
     if (!($94)) {
      $__nf$1 = $__nf$0;
      break;
     }
     $gep_int72 = $__nf$0;
     $gep73 = (($gep_int72) + 1)|0;
     $95 = $gep73;
     $96 = HEAP8[$95]|0;
     
     if (!((($96<<24>>24) == 88) | (($96<<24>>24) == 120))) {
      $__nf$1 = $__nf$0;
      break;
     }
     $97 = $21;
     $98 = HEAP32[$21>>2]|0;
     $gep_int74 = $98;
     $gep75 = (($gep_int74) + 44)|0;
     $99 = $gep75;
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = invoke_iii($100|0,$25|0,48)|0;
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     
     if ($103) {
      label = 18;
      break L23;
     }
     $104 = HEAP32[$__oe>>2]|0;
     $gep_int76 = $104;
     $gep77 = (($gep_int76) + 4)|0;
     $105 = $gep77;
     HEAP32[$__oe>>2] = $105;
     HEAP32[$104>>2] = $101;
     $106 = HEAP8[$95]|0;
     $107 = HEAP32[$21>>2]|0;
     $gep_int78 = $107;
     $gep79 = (($gep_int78) + 44)|0;
     $108 = $gep79;
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     $110 = invoke_iii($109|0,$25|0,$106|0)|0;
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     
     if ($112) {
      label = 18;
      break L23;
     }
     $gep_int80 = $__nf$0;
     $gep81 = (($gep_int80) + 2)|0;
     $113 = $gep81;
     $114 = HEAP32[$__oe>>2]|0;
     $gep_int82 = $114;
     $gep83 = (($gep_int82) + 4)|0;
     $115 = $gep83;
     HEAP32[$__oe>>2] = $115;
     HEAP32[$114>>2] = $110;
     
     $__nf$1 = $113;
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   
   $116 = ($__nf$1|0)==($__ne|0);
   
   do {
    if (!($116)) {
     $gep_int84 = $__ne;
     $gep85 = (($gep_int84) + -1)|0;
     $117 = $gep85;
     $118 = ($117>>>0)>($__nf$1>>>0);
     
     if ($118) {
      $$012$i$i = $__nf$1;$119 = $117;
     } else {
      break;
     }
     while(1) {
      
      
      $120 = HEAP8[$$012$i$i]|0;
      $121 = HEAP8[$119]|0;
      HEAP8[$$012$i$i] = $121;
      HEAP8[$119] = $120;
      $gep_int86 = $$012$i$i;
      $gep87 = (($gep_int86) + 1)|0;
      $122 = $gep87;
      $gep_int88 = $119;
      $gep89 = (($gep_int88) + -1)|0;
      $123 = $gep89;
      $124 = ($122>>>0)<($123>>>0);
      
      if ($124) {
       $119$phi = $123;$$012$i$i$phi = $122;$119 = $119$phi;$$012$i$i = $$012$i$i$phi;
      } else {
       break;
      }
     }
    }
   } while(0);
   $125 = $45;
   $126 = HEAP32[$45>>2]|0;
   $gep_int90 = $126;
   $gep91 = (($gep_int90) + 16)|0;
   $127 = $gep91;
   $128 = HEAP32[$127>>2]|0;
   __THREW__ = 0;
   $129 = invoke_ii($128|0,$49|0)|0;
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   
   if ($131) {
    label = 18;
    break;
   }
   $132 = ($__nf$1>>>0)<($__ne>>>0);
   
   L44: do {
    if ($132) {
     $133 = $__grouping;
     $gep_int92 = $__grouping;
     $gep93 = (($gep_int92) + 1)|0;
     $134 = $gep93;
     $135 = $21;
     $gep_int94 = $__grouping;
     $gep95 = (($gep_int94) + 4)|0;
     $136 = $gep95;
     $gep_int96 = $__grouping;
     $gep97 = (($gep_int96) + 8)|0;
     $137 = $gep97;
     
     $__dc$012 = 0;$__dg$013 = 0;$__p$014 = $__nf$1;
     while(1) {
      
      
      
      $138 = HEAP8[$__grouping]|0;
      $139 = $138 & 1;
      $140 = ($139<<24>>24)==(0);
      $141 = HEAP32[$137>>2]|0;
      $$ = $140 ? $134 : $141;
      $gep_int98 = $$;
      $gep99 = (($gep_int98) + ($__dg$013))|0;
      $142 = $gep99;
      $143 = HEAP8[$142]|0;
      $144 = ($143<<24>>24)==(0);
      
      do {
       if ($144) {
        $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
       } else {
        $145 = HEAP32[$137>>2]|0;
        $$15 = $140 ? $134 : $145;
        $gep_int100 = $$15;
        $gep101 = (($gep_int100) + ($__dg$013))|0;
        $146 = $gep101;
        $147 = HEAP8[$146]|0;
        $148 = $147 << 24 >> 24;
        $149 = ($__dc$012|0)==($148|0);
        
        if (!($149)) {
         $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
         break;
        }
        $150 = HEAP32[$__oe>>2]|0;
        $gep_int102 = $150;
        $gep103 = (($gep_int102) + 4)|0;
        $151 = $gep103;
        HEAP32[$__oe>>2] = $151;
        HEAP32[$150>>2] = $129;
        $152 = HEAP8[$__grouping]|0;
        $153 = $152 & 1;
        $154 = ($153<<24>>24)==(0);
        
        if ($154) {
         $156 = $152&255;
         $157 = $156 >>> 1;
         
         $158 = $157;
        } else {
         $155 = HEAP32[$136>>2]|0;
         
         $158 = $155;
        }
        
        $159 = (($158) + -1)|0;
        $160 = ($__dg$013>>>0)<($159>>>0);
        $161 = $160&1;
        $$__dg$0 = (($161) + ($__dg$013))|0;
        
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       }
      } while(0);
      
      
      $162 = HEAP8[$__p$014]|0;
      $163 = HEAP32[$21>>2]|0;
      $gep_int104 = $163;
      $gep105 = (($gep_int104) + 44)|0;
      $164 = $gep105;
      $165 = HEAP32[$164>>2]|0;
      __THREW__ = 0;
      $166 = invoke_iii($165|0,$25|0,$162|0)|0;
      $167 = __THREW__; __THREW__ = 0;
      $168 = $167&1;
      
      if ($168) {
       break;
      }
      $169 = HEAP32[$__oe>>2]|0;
      $gep_int106 = $169;
      $gep107 = (($gep_int106) + 4)|0;
      $170 = $gep107;
      HEAP32[$__oe>>2] = $170;
      HEAP32[$169>>2] = $166;
      $171 = (($__dc$1) + 1)|0;
      $gep_int108 = $__p$014;
      $gep109 = (($gep_int108) + 1)|0;
      $172 = $gep109;
      $173 = ($172>>>0)<($__ne>>>0);
      
      if ($173) {
       $__dc$012 = $171;$__dg$013 = $__dg$1;$__p$014 = $172;
      } else {
       $174 = $170;
       break L44;
      }
     }
     $expanded25 = 69;
     $74 = ___cxa_find_matching_catch(-1,-1)|0;
     $75 = tempRet0;
     
     $lpad$phi$index = $74;$lpad$phi$index2 = $75;
     
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($lpad$phi$index|0);
     // unreachable
    } else {
     $$pre = HEAP32[$__oe>>2]|0;
     
     $174 = $$pre;
    }
   } while(0);
   
   $175 = $__nf$1;
   $176 = $__nb;
   $177 = (($175) - ($176))|0;
   $gep_int110 = $__ob;
   $gep_array111 = $177<<2;
   $gep112 = (($gep_int110) + ($gep_array111))|0;
   $178 = $gep112;
   $179 = ($178|0)==($174|0);
   
   if ($179) {
    $188 = $174;
    break;
   }
   $gep_int113 = $174;
   $gep114 = (($gep_int113) + -4)|0;
   $180 = $gep114;
   $181 = ($180>>>0)>($178>>>0);
   
   if ($181) {
    $$012$i$i10 = $178;$182 = $180;
   } else {
    $188 = $174;
    break;
   }
   while(1) {
    
    
    $183 = HEAP32[$$012$i$i10>>2]|0;
    $184 = HEAP32[$182>>2]|0;
    HEAP32[$$012$i$i10>>2] = $184;
    HEAP32[$182>>2] = $183;
    $gep_int115 = $$012$i$i10;
    $gep116 = (($gep_int115) + 4)|0;
    $185 = $gep116;
    $gep_int117 = $182;
    $gep118 = (($gep_int117) + -4)|0;
    $186 = $gep118;
    $187 = ($185>>>0)<($186>>>0);
    
    if ($187) {
     $182$phi = $186;$$012$i$i10$phi = $185;$182 = $182$phi;$$012$i$i10 = $$012$i$i10$phi;
    } else {
     $188 = $174;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $expanded26 = 69;
  $76 = ___cxa_find_matching_catch(-1,-1)|0;
  $77 = tempRet0;
  
  $lpad$phi$index = $76;$lpad$phi$index2 = $77;
  
  
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable
 }
 
 $189 = ($__np|0)==($__ne|0);
 
 if ($189) {
  $storemerge = $188;
  
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $190 = $__np;
 $191 = $__nb;
 $192 = (($190) - ($191))|0;
 $gep_int119 = $__ob;
 $gep_array120 = $192<<2;
 $gep121 = (($gep_int119) + ($gep_array120))|0;
 $193 = $gep121;
 
 $storemerge = $193;
 
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, $expanded = 0, $gep = 0, $gep11 = 0, $gep14 = 0;
 var $gep4 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $gep_int = $__s;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 
 if ($3) {
  $gep_int1 = $agg$result;
  $4 = $gep_int1;
  HEAP32[$4>>2] = 0;
  
  STACKTOP = sp;return;
 }
 $5 = $__oe;
 $6 = $__ob;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $gep_int2 = $__iob;
 $gep = (($gep_int2) + 12)|0;
 $9 = $gep;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>($8|0);
 $12 = (($10) - ($8))|0;
 $__ns$0 = $11 ? $12 : 0;
 $13 = $__op;
 $14 = (($13) - ($6))|0;
 $15 = $14 >> 2;
 $16 = ($14|0)>(0);
 
 do {
  if ($16) {
   $17 = $2;
   $18 = HEAP32[$2>>2]|0;
   $gep_int3 = $18;
   $gep4 = (($gep_int3) + 48)|0;
   $19 = $gep4;
   $20 = HEAP32[$19>>2]|0;
   $21 = FUNCTION_TABLE_iiii[$20 & 63]($2,$__ob,$15)|0;
   $22 = ($21|0)==($15|0);
   
   if ($22) {
    break;
   }
   HEAP32[$1>>2] = 0;
   $gep_int5 = $agg$result;
   $23 = $gep_int5;
   HEAP32[$23>>2] = 0;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $24 = ($__ns$0|0)>(0);
 
 do {
  if ($24) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $25 = $__sp;
   $26 = HEAP8[$__sp]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   
   if ($28) {
    $gep_int8 = $__sp;
    $gep9 = (($gep_int8) + 4)|0;
    $31 = $gep9;
    
    $32 = $31;
   } else {
    $gep_int6 = $__sp;
    $gep7 = (($gep_int6) + 8)|0;
    $29 = $gep7;
    $30 = HEAP32[$29>>2]|0;
    
    $32 = $30;
   }
   
   $33 = $2;
   $34 = HEAP32[$2>>2]|0;
   $gep_int10 = $34;
   $gep11 = (($gep_int10) + 48)|0;
   $35 = $gep11;
   $36 = HEAP32[$35>>2]|0;
   __THREW__ = 0;
   $37 = invoke_iiii($36|0,$2|0,$32|0,$__ns$0|0)|0;
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   
   if ($39) {
    $expanded = 69;
    $42 = ___cxa_find_matching_catch(-1,-1)|0;
    $43 = tempRet0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    ___resumeException($42|0);
    // unreachable
   }
   $40 = ($37|0)==($__ns$0|0);
   
   if ($40) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    
    break;
   }
   HEAP32[$1>>2] = 0;
   $gep_int12 = $agg$result;
   $41 = $gep_int12;
   HEAP32[$41>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   
   STACKTOP = sp;return;
  }
 } while(0);
 $44 = (($5) - ($13))|0;
 $45 = $44 >> 2;
 $46 = ($44|0)>(0);
 
 do {
  if ($46) {
   $47 = $2;
   $48 = HEAP32[$2>>2]|0;
   $gep_int13 = $48;
   $gep14 = (($gep_int13) + 48)|0;
   $49 = $gep14;
   $50 = HEAP32[$49>>2]|0;
   $51 = FUNCTION_TABLE_iiii[$50 & 63]($2,$__op,$45)|0;
   $52 = ($51|0)==($45|0);
   
   if ($52) {
    break;
   }
   HEAP32[$1>>2] = 0;
   $gep_int15 = $agg$result;
   $53 = $gep_int15;
   HEAP32[$53>>2] = 0;
   
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP32[$9>>2] = 0;
 $gep_int16 = $agg$result;
 $54 = $gep_int16;
 HEAP32[$54>>2] = $2;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$1,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0;
 var $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0;
 var $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0;
 var $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$46 = 0, u$54 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 168|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $5 = $__fmt;
 $6 = $5;
 HEAP32[$6>>2] = 37;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $__fmt;
 $gep_int = $__fmt;
 $gep = (($gep_int) + 1)|0;
 $10 = $gep;
 $gep_int10 = $__iob;
 $gep11 = (($gep_int10) + 4)|0;
 $11 = $gep11;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 2048;
 $14 = ($13|0)==(0);
 
 if ($14) {
  $$0$i = $10;
 } else {
  $gep_int12 = $__fmt;
  $gep13 = (($gep_int12) + 2)|0;
  $15 = $gep13;
  HEAP8[$10] = 43;
  
  $$0$i = $15;
 }
 
 $16 = $12 & 512;
 $17 = ($16|0)==(0);
 
 if ($17) {
  $$13$i$ph = $$0$i;
 } else {
  $gep_int14 = $$0$i;
  $gep15 = (($gep_int14) + 1)|0;
  $18 = $gep15;
  HEAP8[$$0$i] = 35;
  
  $$13$i$ph = $18;
 }
 
 $gep_int16 = $$13$i$ph;
 $gep17 = (($gep_int16) + 1)|0;
 $19 = $gep17;
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$19] = 108;
 $gep_int18 = $$13$i$ph;
 $gep19 = (($gep_int18) + 2)|0;
 $scevgep = $gep19;
 $20 = $12 & 74;
 
 do {
  if ((($20|0) == 8)) {
   $21 = $12 & 16384;
   $22 = ($21|0)==(0);
   
   if ($22) {
    HEAP8[$scevgep] = 120;
    
    break;
   } else {
    HEAP8[$scevgep] = 88;
    
    break;
   }
  } else if ((($20|0) == 64)) {
   HEAP8[$scevgep] = 111;
   
  } else {
   HEAP8[$scevgep] = 100;
   
  }
 } while(0);
 $gep_int20 = $__nar;
 $23 = $gep_int20;
 $gep_int21 = 8376;
 $expanded = $gep_int21;
 $24 = HEAP8[$expanded]|0;
 $25 = ($24<<24>>24)==(0);
 
 do {
  if ($25) {
   $expanded1 = 8376;
   $26 = ___cxa_guard_acquire($expanded1|0)|0;
   $27 = ($26|0)==(0);
   
   if ($27) {
    break;
   }
   __THREW__ = 0;
   $gep_int22 = 8384;
   $expanded2 = $gep_int22;
   $28 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   
   if ($30) {
    $expanded5 = 69;
    $31 = ___cxa_find_matching_catch(-1,-1)|0;
    $32 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($31|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $28;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $33 = HEAP32[8368>>2]|0;
 
 $gep_int23 = $vararg_buffer;
 $vararg_ptr = $gep_int23;
 $34 = $vararg_ptr;
 $35 = $34;
 HEAP32[$35>>2] = $1;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $2;
 $expanded8 = 18;
 $vararg_func = $expanded8;
 $38 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,22,$33,$9,$vararg_buffer)|0;
 
 $gep_int24 = $__nar;
 $gep25 = (($gep_int24) + ($38))|0;
 $39 = $gep25;
 $40 = HEAP32[$11>>2]|0;
 $41 = $40 & 176;
 
 do {
  if ((($41|0) == 32)) {
   $$0$i1 = $39;
  } else if ((($41|0) == 16)) {
   $42 = HEAP8[$23]|0;
   
   if ((($42<<24>>24) == 43) | (($42<<24>>24) == 45)) {
    $gep_int26 = $__nar;
    $gep27 = (($gep_int26) + 1)|0;
    $43 = $gep27;
    
    $$0$i1 = $43;
    break;
   }
   $44 = ($38|0)>(1);
   $45 = ($42<<24>>24)==(48);
   $or$cond$i = $44 & $45;
   
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $gep_int28 = $__nar;
   $gep29 = (($gep_int28) + 1)|0;
   $46 = $gep29;
   $47 = HEAP8[$46]|0;
   
   if (!((($47<<24>>24) == 88) | (($47<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $gep_int30 = $__nar;
   $gep31 = (($gep_int30) + 2)|0;
   $48 = $gep31;
   
   $$0$i1 = $48;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  
  $$0$i1 = $23;
 }
 
 $49 = $__o;
 
 $gep_int32 = $__o;
 $50 = $gep_int32;
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(45,$23|0,$$0$i1|0,$39|0,$50|0,$__op|0,$__oe|0,$3|0);
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 
 if ($52) {
  $expanded9 = 69;
  $65 = ___cxa_find_matching_catch(-1,-1)|0;
  $66 = tempRet0;
  $gep_int37 = $3;
  $67 = $gep_int37;
  $68 = HEAP32[$67>>2]|0;
  $gep_int38 = $68;
  $69 = $gep_int38;
  u$54 = __ZNSt3__114__shared_count16__release_sharedEv($69)|0;
  ___resumeException($65|0);
  // unreachable
 } else {
  $gep_int33 = $3;
  $53 = $gep_int33;
  $54 = HEAP32[$53>>2]|0;
  $gep_int34 = $54;
  $55 = $gep_int34;
  u$46 = __ZNSt3__114__shared_count16__release_sharedEv($55)|0;
  $gep_int35 = $__s;
  $56 = $gep_int35;
  $57 = HEAP32[$56>>2]|0;
  $gep_int36 = $4;
  $58 = $gep_int36;
  HEAP32[$58>>2] = $57;
  $59 = HEAP32[$__op>>2]|0;
  $60 = HEAP32[$__oe>>2]|0;
  $61 = $$byval_copy;
  
  $62 = $$byval_copy;
  $63 = $4;
  ;HEAP32[$62+0>>2]=HEAP32[$63+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$50,$59,$60,$__iob,$__fl);
  $64 = $$byval_copy;
  
  
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep14 = 0;
 var $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int27 = 0;
 var $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $gep_int39 = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$43 = 0, u$51 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 88|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $gep_int = $__fmt;
 $3 = $gep_int;
 $gep_int11 = 7272;
 $expanded = $gep_int11;
 ;HEAP8[$3+0|0]=HEAP8[$expanded+0|0]|0;HEAP8[$3+1|0]=HEAP8[$expanded+1|0]|0;HEAP8[$3+2|0]=HEAP8[$expanded+2|0]|0;HEAP8[$3+3|0]=HEAP8[$expanded+3|0]|0;HEAP8[$3+4|0]=HEAP8[$expanded+4|0]|0;HEAP8[$3+5|0]=HEAP8[$expanded+5|0]|0;
 $gep_int12 = $__fmt;
 $gep = (($gep_int12) + 1)|0;
 $4 = $gep;
 $gep_int13 = $__iob;
 $gep14 = (($gep_int13) + 4)|0;
 $5 = $gep14;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2048;
 $8 = ($7|0)==(0);
 
 if ($8) {
  $$0$i = $4;
 } else {
  $gep_int15 = $__fmt;
  $gep16 = (($gep_int15) + 2)|0;
  $9 = $gep16;
  HEAP8[$4] = 43;
  
  $$0$i = $9;
 }
 
 $10 = $6 & 512;
 $11 = ($10|0)==(0);
 
 if ($11) {
  $$13$i$ph = $$0$i;
 } else {
  $gep_int17 = $$0$i;
  $gep18 = (($gep_int17) + 1)|0;
  $12 = $gep18;
  HEAP8[$$0$i] = 35;
  
  $$13$i$ph = $12;
 }
 
 HEAP8[$$13$i$ph] = 108;
 $gep_int19 = $$13$i$ph;
 $gep20 = (($gep_int19) + 1)|0;
 $scevgep = $gep20;
 $13 = $6 & 74;
 
 do {
  if ((($13|0) == 64)) {
   HEAP8[$scevgep] = 111;
   
  } else if ((($13|0) == 8)) {
   $14 = $6 & 16384;
   $15 = ($14|0)==(0);
   
   if ($15) {
    HEAP8[$scevgep] = 120;
    
    break;
   } else {
    HEAP8[$scevgep] = 88;
    
    break;
   }
  } else {
   HEAP8[$scevgep] = 117;
   
  }
 } while(0);
 $gep_int21 = $__nar;
 $16 = $gep_int21;
 $gep_int22 = 8376;
 $expanded1 = $gep_int22;
 $17 = HEAP8[$expanded1]|0;
 $18 = ($17<<24>>24)==(0);
 
 do {
  if ($18) {
   $expanded2 = 8376;
   $19 = ___cxa_guard_acquire($expanded2|0)|0;
   $20 = ($19|0)==(0);
   
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $gep_int23 = 8384;
   $expanded3 = $gep_int23;
   $21 = invoke_iiii(30,2147483647,$expanded3|0,0)|0;
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   
   if ($23) {
    $expanded6 = 69;
    $24 = ___cxa_find_matching_catch(-1,-1)|0;
    $25 = tempRet0;
    $expanded7 = 8376;
    ___cxa_guard_abort($expanded7|0);
    ___resumeException($24|0);
    // unreachable
   } else {
    $expanded4 = 8368;
    HEAP32[8368>>2] = $21;
    $expanded5 = 8376;
    ___cxa_guard_release($expanded5|0);
    
    break;
   }
  }
 } while(0);
 $expanded8 = 8368;
 $26 = HEAP32[8368>>2]|0;
 
 $gep_int24 = $vararg_buffer;
 $vararg_ptr = $gep_int24;
 HEAP32[$vararg_ptr>>2] = $__v;
 $expanded9 = 18;
 $vararg_func = $expanded9;
 $27 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16,12,$26,$3,$vararg_buffer)|0;
 
 $gep_int25 = $__nar;
 $gep26 = (($gep_int25) + ($27))|0;
 $28 = $gep26;
 $29 = HEAP32[$5>>2]|0;
 $30 = $29 & 176;
 
 do {
  if ((($30|0) == 32)) {
   $$0$i1 = $28;
  } else if ((($30|0) == 16)) {
   $31 = HEAP8[$16]|0;
   
   if ((($31<<24>>24) == 43) | (($31<<24>>24) == 45)) {
    $gep_int27 = $__nar;
    $gep28 = (($gep_int27) + 1)|0;
    $32 = $gep28;
    
    $$0$i1 = $32;
    break;
   }
   $33 = ($27|0)>(1);
   $34 = ($31<<24>>24)==(48);
   $or$cond$i = $33 & $34;
   
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $gep_int29 = $__nar;
   $gep30 = (($gep_int29) + 1)|0;
   $35 = $gep30;
   $36 = HEAP8[$35]|0;
   
   if (!((($36<<24>>24) == 88) | (($36<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $gep_int31 = $__nar;
   $gep32 = (($gep_int31) + 2)|0;
   $37 = $gep32;
   
   $$0$i1 = $37;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  
  $$0$i1 = $16;
 }
 
 $38 = $__o;
 
 $gep_int33 = $__o;
 $39 = $gep_int33;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(45,$16|0,$$0$i1|0,$28|0,$39|0,$__op|0,$__oe|0,$1|0);
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 
 if ($41) {
  $expanded10 = 69;
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $gep_int38 = $1;
  $56 = $gep_int38;
  $57 = HEAP32[$56>>2]|0;
  $gep_int39 = $57;
  $58 = $gep_int39;
  u$51 = __ZNSt3__114__shared_count16__release_sharedEv($58)|0;
  ___resumeException($54|0);
  // unreachable
 } else {
  $gep_int34 = $1;
  $42 = $gep_int34;
  $43 = HEAP32[$42>>2]|0;
  $gep_int35 = $43;
  $44 = $gep_int35;
  u$43 = __ZNSt3__114__shared_count16__release_sharedEv($44)|0;
  $gep_int36 = $__s;
  $45 = $gep_int36;
  $46 = HEAP32[$45>>2]|0;
  $gep_int37 = $2;
  $47 = $gep_int37;
  HEAP32[$47>>2] = $46;
  $48 = HEAP32[$__op>>2]|0;
  $49 = HEAP32[$__oe>>2]|0;
  $50 = $$byval_copy;
  
  $51 = $$byval_copy;
  $52 = $2;
  ;HEAP32[$51+0>>2]=HEAP32[$52+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$39,$48,$49,$__iob,$__fl);
  $53 = $$byval_copy;
  
  
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$1,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0;
 var $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0;
 var $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0;
 var $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$46 = 0, u$54 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 176|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $5 = $__fmt;
 $6 = $5;
 HEAP32[$6>>2] = 37;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $__fmt;
 $gep_int = $__fmt;
 $gep = (($gep_int) + 1)|0;
 $10 = $gep;
 $gep_int10 = $__iob;
 $gep11 = (($gep_int10) + 4)|0;
 $11 = $gep11;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 2048;
 $14 = ($13|0)==(0);
 
 if ($14) {
  $$0$i = $10;
 } else {
  $gep_int12 = $__fmt;
  $gep13 = (($gep_int12) + 2)|0;
  $15 = $gep13;
  HEAP8[$10] = 43;
  
  $$0$i = $15;
 }
 
 $16 = $12 & 512;
 $17 = ($16|0)==(0);
 
 if ($17) {
  $$13$i$ph = $$0$i;
 } else {
  $gep_int14 = $$0$i;
  $gep15 = (($gep_int14) + 1)|0;
  $18 = $gep15;
  HEAP8[$$0$i] = 35;
  
  $$13$i$ph = $18;
 }
 
 $gep_int16 = $$13$i$ph;
 $gep17 = (($gep_int16) + 1)|0;
 $19 = $gep17;
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$19] = 108;
 $gep_int18 = $$13$i$ph;
 $gep19 = (($gep_int18) + 2)|0;
 $scevgep = $gep19;
 $20 = $12 & 74;
 
 do {
  if ((($20|0) == 8)) {
   $21 = $12 & 16384;
   $22 = ($21|0)==(0);
   
   if ($22) {
    HEAP8[$scevgep] = 120;
    
    break;
   } else {
    HEAP8[$scevgep] = 88;
    
    break;
   }
  } else if ((($20|0) == 64)) {
   HEAP8[$scevgep] = 111;
   
  } else {
   HEAP8[$scevgep] = 117;
   
  }
 } while(0);
 $gep_int20 = $__nar;
 $23 = $gep_int20;
 $gep_int21 = 8376;
 $expanded = $gep_int21;
 $24 = HEAP8[$expanded]|0;
 $25 = ($24<<24>>24)==(0);
 
 do {
  if ($25) {
   $expanded1 = 8376;
   $26 = ___cxa_guard_acquire($expanded1|0)|0;
   $27 = ($26|0)==(0);
   
   if ($27) {
    break;
   }
   __THREW__ = 0;
   $gep_int22 = 8384;
   $expanded2 = $gep_int22;
   $28 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   
   if ($30) {
    $expanded5 = 69;
    $31 = ___cxa_find_matching_catch(-1,-1)|0;
    $32 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($31|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $28;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $33 = HEAP32[8368>>2]|0;
 
 $gep_int23 = $vararg_buffer;
 $vararg_ptr = $gep_int23;
 $34 = $vararg_ptr;
 $35 = $34;
 HEAP32[$35>>2] = $1;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $2;
 $expanded8 = 18;
 $vararg_func = $expanded8;
 $38 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,23,$33,$9,$vararg_buffer)|0;
 
 $gep_int24 = $__nar;
 $gep25 = (($gep_int24) + ($38))|0;
 $39 = $gep25;
 $40 = HEAP32[$11>>2]|0;
 $41 = $40 & 176;
 
 do {
  if ((($41|0) == 32)) {
   $$0$i1 = $39;
  } else if ((($41|0) == 16)) {
   $42 = HEAP8[$23]|0;
   
   if ((($42<<24>>24) == 43) | (($42<<24>>24) == 45)) {
    $gep_int26 = $__nar;
    $gep27 = (($gep_int26) + 1)|0;
    $43 = $gep27;
    
    $$0$i1 = $43;
    break;
   }
   $44 = ($38|0)>(1);
   $45 = ($42<<24>>24)==(48);
   $or$cond$i = $44 & $45;
   
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $gep_int28 = $__nar;
   $gep29 = (($gep_int28) + 1)|0;
   $46 = $gep29;
   $47 = HEAP8[$46]|0;
   
   if (!((($47<<24>>24) == 88) | (($47<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $gep_int30 = $__nar;
   $gep31 = (($gep_int30) + 2)|0;
   $48 = $gep31;
   
   $$0$i1 = $48;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  
  $$0$i1 = $23;
 }
 
 $49 = $__o;
 
 $gep_int32 = $__o;
 $50 = $gep_int32;
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(45,$23|0,$$0$i1|0,$39|0,$50|0,$__op|0,$__oe|0,$3|0);
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 
 if ($52) {
  $expanded9 = 69;
  $65 = ___cxa_find_matching_catch(-1,-1)|0;
  $66 = tempRet0;
  $gep_int37 = $3;
  $67 = $gep_int37;
  $68 = HEAP32[$67>>2]|0;
  $gep_int38 = $68;
  $69 = $gep_int38;
  u$54 = __ZNSt3__114__shared_count16__release_sharedEv($69)|0;
  ___resumeException($65|0);
  // unreachable
 } else {
  $gep_int33 = $3;
  $53 = $gep_int33;
  $54 = HEAP32[$53>>2]|0;
  $gep_int34 = $54;
  $55 = $gep_int34;
  u$46 = __ZNSt3__114__shared_count16__release_sharedEv($55)|0;
  $gep_int35 = $__s;
  $56 = $gep_int35;
  $57 = HEAP32[$56>>2]|0;
  $gep_int36 = $4;
  $58 = $gep_int36;
  HEAP32[$58>>2] = $57;
  $59 = HEAP32[$__op>>2]|0;
  $60 = HEAP32[$__oe>>2]|0;
  $61 = $$byval_copy;
  
  $62 = $$byval_copy;
  $63 = $4;
  ;HEAP32[$62+0>>2]=HEAP32[$63+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$50,$59,$60,$__iob,$__fl);
  $64 = $$byval_copy;
  
  
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$116 = 0, $$1215 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0;
 var $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0;
 var $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded51 = 0, $gep = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep66 = 0, $gep69 = 0;
 var $gep74 = 0, $gep77 = 0, $gep80 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int63 = 0, $gep_int64 = 0, $gep_int65 = 0, $gep_int67 = 0;
 var $gep_int68 = 0, $gep_int70 = 0, $gep_int71 = 0, $gep_int72 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int93 = 0, $gep_int94 = 0, $gep_int95 = 0, $gep_int96 = 0;
 var $gep_int97 = 0, $gep_int98 = 0, $gep_int99 = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i10 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer9 = 0, $vararg_func = 0, $vararg_func12 = 0, $vararg_func17 = 0, $vararg_func22 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast10 = 0, $vararg_lifetime_bitcast14 = 0, $vararg_lifetime_bitcast19 = 0, $vararg_ptr = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr8 = 0, label = 0, sp = 0, u$114 = 0, u$132 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $$byval_copy = sp;
 $vararg_buffer18 = sp + 8|0;
 $vararg_lifetime_bitcast19 = $vararg_buffer18;
 $vararg_buffer13 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast14 = $vararg_buffer13;
 $vararg_buffer9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast10 = $vararg_buffer9;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $__nb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 232|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $__fmt;
 $gep_int = $__fmt;
 $gep = (($gep_int) + 1)|0;
 $9 = $gep;
 $gep_int52 = $__iob;
 $gep53 = (($gep_int52) + 4)|0;
 $10 = $gep53;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2048;
 $13 = ($12|0)==(0);
 
 if ($13) {
  $$0$i = $9;
 } else {
  $gep_int54 = $__fmt;
  $gep55 = (($gep_int54) + 2)|0;
  $14 = $gep55;
  HEAP8[$9] = 43;
  
  $$0$i = $14;
 }
 
 $15 = $11 & 1024;
 $16 = ($15|0)==(0);
 
 if ($16) {
  $$1$i = $$0$i;
 } else {
  $gep_int56 = $$0$i;
  $gep57 = (($gep_int56) + 1)|0;
  $17 = $gep57;
  HEAP8[$$0$i] = 35;
  
  $$1$i = $17;
 }
 
 $18 = $11 & 260;
 $19 = $11 >>> 14;
 $20 = ($18|0)==(260);
 
 do {
  if ($20) {
   $27 = $19 & 1;
   $28 = ($27|0)==(0);
   
   if ($28) {
    HEAP8[$$1$i] = 97;
    
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   } else {
    HEAP8[$$1$i] = 65;
    
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   }
  } else {
   $gep_int58 = $$1$i;
   $gep59 = (($gep_int58) + 1)|0;
   $21 = $gep59;
   HEAP8[$$1$i] = 46;
   $gep_int60 = $$1$i;
   $gep61 = (($gep_int60) + 2)|0;
   $22 = $gep61;
   HEAP8[$21] = 42;
   
   if ((($18|0) == 4)) {
    $23 = $19 & 1;
    $24 = ($23|0)==(0);
    
    if ($24) {
     HEAP8[$22] = 102;
     
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$22] = 70;
     
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else if ((($18|0) == 256)) {
    $25 = $19 & 1;
    $26 = ($25|0)==(0);
    
    if ($26) {
     HEAP8[$22] = 101;
     
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$22] = 69;
     
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else {
    $29 = $19 & 1;
    $30 = ($29|0)==(0);
    
    if ($30) {
     HEAP8[$22] = 103;
     
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$22] = 71;
     
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   }
  }
 } while(0);
 
 $gep_int62 = $__nar;
 $31 = $gep_int62;
 HEAP32[$__nb>>2] = $31;
 $gep_int63 = 8376;
 $expanded = $gep_int63;
 $32 = HEAP8[$expanded]|0;
 $33 = ($32<<24>>24)==(0);
 
 do {
  if ($33) {
   $expanded23 = 8376;
   $34 = ___cxa_guard_acquire($expanded23|0)|0;
   $35 = ($34|0)==(0);
   
   if ($35) {
    break;
   }
   __THREW__ = 0;
   $gep_int64 = 8384;
   $expanded24 = $gep_int64;
   $36 = invoke_iiii(30,2147483647,$expanded24|0,0)|0;
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   
   if ($38) {
    $expanded27 = 69;
    $39 = ___cxa_find_matching_catch(-1,-1)|0;
    $40 = tempRet0;
    $expanded28 = 8376;
    ___cxa_guard_abort($expanded28|0);
    ___resumeException($39|0);
    // unreachable
   } else {
    $expanded25 = 8368;
    HEAP32[8368>>2] = $36;
    $expanded26 = 8376;
    ___cxa_guard_release($expanded26|0);
    
    break;
   }
  }
 } while(0);
 $expanded29 = 8368;
 $41 = HEAP32[8368>>2]|0;
 
 if ($specify_precision$0$off0$ph$i10) {
  $gep_int65 = $__iob;
  $gep66 = (($gep_int65) + 8)|0;
  $42 = $gep66;
  $43 = HEAP32[$42>>2]|0;
  
  $gep_int67 = $vararg_buffer;
  $vararg_ptr = $gep_int67;
  HEAP32[$vararg_ptr>>2] = $43;
  $gep_int68 = $vararg_buffer;
  $gep69 = (($gep_int68) + 4)|0;
  $vararg_ptr8 = $gep69;
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $expanded30 = 18;
  $vararg_func = $expanded30;
  $44 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer)|0;
  
  
  $__nc$0 = $44;
 } else {
  
  $gep_int70 = $vararg_buffer9;
  $vararg_ptr11 = $gep_int70;
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $expanded31 = 18;
  $vararg_func12 = $expanded31;
  $45 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer9)|0;
  
  
  $__nc$0 = $45;
 }
 
 $46 = ($__nc$0|0)>(29);
 
 L38: do {
  if ($46) {
   $gep_int71 = 8376;
   $expanded32 = $gep_int71;
   $47 = HEAP8[$expanded32]|0;
   $48 = ($47<<24>>24)==(0);
   
   L41: do {
    if ($specify_precision$0$off0$ph$i10) {
     
     do {
      if ($48) {
       $expanded33 = 8376;
       $49 = ___cxa_guard_acquire($expanded33|0)|0;
       $50 = ($49|0)==(0);
       
       if ($50) {
        break;
       }
       __THREW__ = 0;
       $gep_int72 = 8384;
       $expanded34 = $gep_int72;
       $51 = invoke_iiii(30,2147483647,$expanded34|0,0)|0;
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       
       if ($53) {
        $expanded37 = 69;
        $54 = ___cxa_find_matching_catch(-1,-1)|0;
        $55 = tempRet0;
        $expanded38 = 8376;
        ___cxa_guard_abort($expanded38|0);
        
        $eh$lpad$body$index3Z2D = $55;$eh$lpad$body$indexZ2D = $54;
        break L41;
       } else {
        $expanded35 = 8368;
        HEAP32[8368>>2] = $51;
        $expanded36 = 8376;
        ___cxa_guard_release($expanded36|0);
        
        break;
       }
      }
     } while(0);
     $expanded39 = 8368;
     $56 = HEAP32[8368>>2]|0;
     $gep_int73 = $__iob;
     $gep74 = (($gep_int73) + 8)|0;
     $57 = $gep74;
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     
     $gep_int75 = $vararg_buffer13;
     $vararg_ptr15 = $gep_int75;
     HEAP32[$vararg_ptr15>>2] = $58;
     $gep_int76 = $vararg_buffer13;
     $gep77 = (($gep_int76) + 4)|0;
     $vararg_ptr16 = $gep77;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $expanded40 = 16;
     $vararg_func17 = $expanded40;
     $59 = invoke_iiiii(16,$__nb|0,$56|0,$8|0,$vararg_buffer13|0)|0;
     
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     
     if ($61) {
      label = 36;
     } else {
      $__nc$1 = $59;
      label = 44;
     }
    } else {
     
     do {
      if ($48) {
       $expanded42 = 8376;
       $64 = ___cxa_guard_acquire($expanded42|0)|0;
       $65 = ($64|0)==(0);
       
       if ($65) {
        break;
       }
       __THREW__ = 0;
       $gep_int78 = 8384;
       $expanded43 = $gep_int78;
       $66 = invoke_iiii(30,2147483647,$expanded43|0,0)|0;
       $67 = __THREW__; __THREW__ = 0;
       $68 = $67&1;
       
       if ($68) {
        $expanded46 = 69;
        $69 = ___cxa_find_matching_catch(-1,-1)|0;
        $70 = tempRet0;
        $expanded47 = 8376;
        ___cxa_guard_abort($expanded47|0);
        
        $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
        break L41;
       } else {
        $expanded44 = 8368;
        HEAP32[8368>>2] = $66;
        $expanded45 = 8376;
        ___cxa_guard_release($expanded45|0);
        
        break;
       }
      }
     } while(0);
     $expanded48 = 8368;
     $71 = HEAP32[8368>>2]|0;
     $gep_int79 = $__iob;
     $gep80 = (($gep_int79) + 8)|0;
     $72 = $gep80;
     $73 = HEAP32[$72>>2]|0;
     __THREW__ = 0;
     
     $gep_int81 = $vararg_buffer18;
     $vararg_ptr20 = $gep_int81;
     HEAP32[$vararg_ptr20>>2] = $73;
     $gep_int82 = $vararg_buffer18;
     $gep83 = (($gep_int82) + 4)|0;
     $vararg_ptr21 = $gep83;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr21>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr21+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $expanded49 = 16;
     $vararg_func22 = $expanded49;
     $74 = invoke_iiiii(16,$__nb|0,$71|0,$8|0,$vararg_buffer18|0)|0;
     
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     
     if ($76) {
      label = 36;
     } else {
      $__nc$1 = $74;
      label = 44;
     }
    }
   } while(0);
   do {
    if ((label|0) == 44) {
     
     $77 = HEAP32[$__nb>>2]|0;
     $78 = ($77|0)==(0);
     
     if (!($78)) {
      $81 = $77;$82 = $77;$__nc$2 = $__nc$1;
      break L38;
     }
     __THREW__ = 0;
     invoke_v(13);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     
     if ($80) {
      label = 36;
      break;
     }
     $$pre = HEAP32[$__nb>>2]|0;
     
     $81 = $$pre;$82 = $$pre;$__nc$2 = $__nc$1;
     break L38;
    }
   } while(0);
   if ((label|0) == 36) {
    $expanded41 = 69;
    $62 = ___cxa_find_matching_catch(-1,-1)|0;
    $63 = tempRet0;
    
    $eh$lpad$body$index3Z2D = $63;$eh$lpad$body$indexZ2D = $62;
   }
   
   
   
   $$116 = $eh$lpad$body$indexZ2D;$$1215 = $eh$lpad$body$index3Z2D;
   
   
   ___resumeException($$116|0);
   // unreachable
  } else {
   $$pre17 = HEAP32[$__nb>>2]|0;
   
   $81 = $$pre17;$82 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 
 
 
 $gep_int84 = $81;
 $gep85 = (($gep_int84) + ($__nc$2))|0;
 $83 = $gep85;
 $84 = HEAP32[$10>>2]|0;
 $85 = $84 & 176;
 
 do {
  if ((($85|0) == 16)) {
   $86 = HEAP8[$81]|0;
   
   if ((($86<<24>>24) == 43) | (($86<<24>>24) == 45)) {
    $gep_int86 = $81;
    $gep87 = (($gep_int86) + 1)|0;
    $87 = $gep87;
    
    $$0$i7 = $87;
    break;
   }
   $88 = ($__nc$2|0)>(1);
   $89 = ($86<<24>>24)==(48);
   $or$cond$i = $88 & $89;
   
   if (!($or$cond$i)) {
    label = 53;
    break;
   }
   $gep_int88 = $81;
   $gep89 = (($gep_int88) + 1)|0;
   $90 = $gep89;
   $91 = HEAP8[$90]|0;
   
   if (!((($91<<24>>24) == 88) | (($91<<24>>24) == 120))) {
    label = 53;
    break;
   }
   $gep_int90 = $81;
   $gep91 = (($gep_int90) + 2)|0;
   $92 = $gep91;
   
   $$0$i7 = $92;
  } else if ((($85|0) == 32)) {
   $$0$i7 = $83;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  
  $$0$i7 = $81;
 }
 
 $93 = $__o;
 
 $gep_int92 = $__o;
 $94 = $gep_int92;
 $95 = ($81|0)==($31|0);
 
 do {
  if ($95) {
   $105 = $31;$106 = 0;$__ob$0 = $94;
   label = 59;
  } else {
   $96 = $__nc$2 << 3;
   $97 = _malloc($96)|0;
   $98 = $97;
   $99 = ($97|0)==(0);
   
   if (!($99)) {
    $105 = $81;$106 = $98;$__ob$0 = $98;
    label = 59;
    break;
   }
   __THREW__ = 0;
   invoke_v(13);
   $100 = __THREW__; __THREW__ = 0;
   $101 = $100&1;
   
   if ($101) {
    $102 = 0;
    label = 58;
    break;
   }
   $$pre18 = HEAP32[$__nb>>2]|0;
   
   $105 = $$pre18;$106 = $98;$__ob$0 = $98;
   label = 59;
  }
 } while(0);
 do {
  if ((label|0) == 59) {
   
   
   
   __THREW__ = 0;
   invoke_vii(41,$1|0,$__iob|0);
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   
   if ($108) {
    $102 = $106;
    label = 58;
    break;
   }
   __THREW__ = 0;
   invoke_viiiiiii(46,$105|0,$$0$i7|0,$83|0,$__ob$0|0,$__op|0,$__oe|0,$1|0);
   $109 = __THREW__; __THREW__ = 0;
   $110 = $109&1;
   
   if ($110) {
    $expanded51 = 69;
    $131 = ___cxa_find_matching_catch(-1,-1)|0;
    $132 = tempRet0;
    $gep_int99 = $1;
    $133 = $gep_int99;
    $134 = HEAP32[$133>>2]|0;
    $gep_int100 = $134;
    $135 = $gep_int100;
    u$132 = __ZNSt3__114__shared_count16__release_sharedEv($135)|0;
    
    $$0 = $131;$$01 = $132;$136 = $106;
    break;
   }
   $gep_int93 = $1;
   $111 = $gep_int93;
   $112 = HEAP32[$111>>2]|0;
   $gep_int94 = $112;
   $113 = $gep_int94;
   u$114 = __ZNSt3__114__shared_count16__release_sharedEv($113)|0;
   $gep_int95 = $__s;
   $114 = $gep_int95;
   $115 = HEAP32[$114>>2]|0;
   $gep_int96 = $3;
   $116 = $gep_int96;
   HEAP32[$116>>2] = $115;
   $117 = HEAP32[$__op>>2]|0;
   $118 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   $119 = $$byval_copy;
   
   $120 = $$byval_copy;
   $121 = $3;
   ;HEAP32[$120+0>>2]=HEAP32[$121+0>>2]|0;
   invoke_viiiiiii(47,$2|0,$$byval_copy|0,$__ob$0|0,$117|0,$118|0,$__iob|0,$__fl|0);
   $122 = $$byval_copy;
   
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   
   if ($124) {
    $102 = $106;
    label = 58;
    break;
   }
   $gep_int97 = $2;
   $125 = $gep_int97;
   $126 = HEAP32[$125>>2]|0;
   HEAP32[$114>>2] = $126;
   $gep_int98 = $agg$result;
   $127 = $gep_int98;
   HEAP32[$127>>2] = $126;
   $128 = ($106|0)==(0);
   
   if (!($128)) {
    $129 = $106;
    _free($129);
    
   }
   
   $130 = ($82|0)==(0);
   
   if ($130) {
    STACKTOP = sp;return;
   }
   _free($82);
   
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 58) {
  
  $expanded50 = 69;
  $103 = ___cxa_find_matching_catch(-1,-1)|0;
  $104 = tempRet0;
  
  $$0 = $103;$$01 = $104;$136 = $102;
 }
 
 
 
 $137 = ($136|0)==(0);
 
 if (!($137)) {
  $138 = $136;
  _free($138);
  
 }
 $139 = ($82|0)==(0);
 
 if ($139) {
  $$116 = $$0;$$1215 = $$01;
  
  
  ___resumeException($$116|0);
  // unreachable
 }
 _free($82);
 
 $$116 = $$0;$$1215 = $$01;
 
 
 ___resumeException($$116|0);
 // unreachable
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$012$i$i13 = 0, $$012$i$i13$phi = 0, $$57 = 0, $$__dg$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $165$phi = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $228$phi = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$024 = 0, $__dc$1 = 0, $__dg$025 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$220 = 0, $__nf$3 = 0, $__ns$042 = 0, $__ns$133 = 0, $__ns$2 = 0, $__p$026 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index7Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0;
 var $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0;
 var $expanded54 = 0, $expanded55 = 0, $gep = 0, $gep101 = 0, $gep103 = 0, $gep105 = 0, $gep109 = 0, $gep113 = 0, $gep115 = 0, $gep117 = 0, $gep120 = 0, $gep122 = 0, $gep124 = 0, $gep126 = 0, $gep128 = 0, $gep130 = 0, $gep132 = 0, $gep134 = 0, $gep136 = 0, $gep138 = 0;
 var $gep140 = 0, $gep142 = 0, $gep144 = 0, $gep146 = 0, $gep149 = 0, $gep151 = 0, $gep153 = 0, $gep155 = 0, $gep157 = 0, $gep159 = 0, $gep161 = 0, $gep163 = 0, $gep165 = 0, $gep167 = 0, $gep169 = 0, $gep172 = 0, $gep175 = 0, $gep60 = 0, $gep63 = 0, $gep65 = 0;
 var $gep67 = 0, $gep69 = 0, $gep73 = 0, $gep75 = 0, $gep78 = 0, $gep80 = 0, $gep82 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep97 = 0, $gep99 = 0, $gep_array = 0, $gep_array119 = 0, $gep_array148 = 0, $gep_array171 = 0, $gep_array174 = 0;
 var $gep_array84 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int107 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int111 = 0, $gep_int112 = 0, $gep_int114 = 0, $gep_int116 = 0, $gep_int118 = 0, $gep_int121 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int127 = 0, $gep_int129 = 0, $gep_int131 = 0;
 var $gep_int133 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int139 = 0, $gep_int141 = 0, $gep_int143 = 0, $gep_int145 = 0, $gep_int147 = 0, $gep_int150 = 0, $gep_int152 = 0, $gep_int154 = 0, $gep_int156 = 0, $gep_int158 = 0, $gep_int160 = 0, $gep_int162 = 0, $gep_int164 = 0, $gep_int166 = 0, $gep_int168 = 0, $gep_int170 = 0, $gep_int173 = 0;
 var $gep_int56 = 0, $gep_int57 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int71 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int86 = 0, $gep_int88 = 0;
 var $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int98 = 0, $storemerge = 0, label = 0, sp = 0, u$132 = 0, u$86 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__grouping = sp + 32|0;
 $gep_int = $__loc;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 
 $expanded16 = 8472;
 $gep_int56 = 8472;
 $expanded = $gep_int56;
 $4 = HEAP32[$expanded>>2]|0;
 $5 = ($4|0)==(-1);
 
 if (!($5)) {
  $gep_int57 = $__p$i$i$i$i;
  $6 = $gep_int57;
  $expanded17 = 8472;
  HEAP32[$6>>2] = $expanded17;
  $gep_int58 = $__p$i$i$i$i;
  $gep = (($gep_int58) + 4)|0;
  $7 = $gep;
  $expanded18 = 177;
  HEAP32[$7>>2] = $expanded18;
  $gep_int59 = $__p$i$i$i$i;
  $gep60 = (($gep_int59) + 8)|0;
  $8 = $gep60;
  HEAP32[$8>>2] = 0;
  $expanded20 = 8472;
  $gep_int61 = 8472;
  $expanded19 = $gep_int61;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded19,$3,178);
  
 }
 
 $expanded22 = 8472;
 $gep_int62 = 8472;
 $gep63 = (($gep_int62) + 4)|0;
 $expanded21 = $gep63;
 $9 = HEAP32[$expanded21>>2]|0;
 $10 = (($9) + -1)|0;
 $gep_int64 = $2;
 $gep65 = (($gep_int64) + 12)|0;
 $11 = $gep65;
 $12 = HEAP32[$11>>2]|0;
 $gep_int66 = $2;
 $gep67 = (($gep_int66) + 8)|0;
 $13 = $gep67;
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 
 if (!($19)) {
  $23 = ___cxa_allocate_exception(4)|0;
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  $expanded23 = 16440;
  $expanded24 = 119;
  ___cxa_throw($23|0,$expanded23|0,$expanded24|0);
  // unreachable
 }
 $gep_int68 = $14;
 $gep_array = $10<<2;
 $gep69 = (($gep_int68) + ($gep_array))|0;
 $20 = $gep69;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 
 if ($22) {
  $23 = ___cxa_allocate_exception(4)|0;
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  $expanded23 = 16440;
  $expanded24 = 119;
  ___cxa_throw($23|0,$expanded23|0,$expanded24|0);
  // unreachable
 }
 $25 = $21;
 $26 = HEAP32[$1>>2]|0;
 $27 = $__p$i$i$i$i1;
 
 $expanded26 = 8632;
 $gep_int70 = 8632;
 $expanded25 = $gep_int70;
 $28 = HEAP32[$expanded25>>2]|0;
 $29 = ($28|0)==(-1);
 
 if (!($29)) {
  $gep_int71 = $__p$i$i$i$i1;
  $30 = $gep_int71;
  $expanded27 = 8632;
  HEAP32[$30>>2] = $expanded27;
  $gep_int72 = $__p$i$i$i$i1;
  $gep73 = (($gep_int72) + 4)|0;
  $31 = $gep73;
  $expanded28 = 177;
  HEAP32[$31>>2] = $expanded28;
  $gep_int74 = $__p$i$i$i$i1;
  $gep75 = (($gep_int74) + 8)|0;
  $32 = $gep75;
  HEAP32[$32>>2] = 0;
  $expanded30 = 8632;
  $gep_int76 = 8632;
  $expanded29 = $gep_int76;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded29,$27,178);
  
 }
 
 $expanded32 = 8632;
 $gep_int77 = 8632;
 $gep78 = (($gep_int77) + 4)|0;
 $expanded31 = $gep78;
 $33 = HEAP32[$expanded31>>2]|0;
 $34 = (($33) + -1)|0;
 $gep_int79 = $26;
 $gep80 = (($gep_int79) + 12)|0;
 $35 = $gep80;
 $36 = HEAP32[$35>>2]|0;
 $gep_int81 = $26;
 $gep82 = (($gep_int81) + 8)|0;
 $37 = $gep82;
 $38 = HEAP32[$37>>2]|0;
 $39 = $36;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 $42 = $41 >> 2;
 $43 = ($42>>>0)>($34>>>0);
 
 if (!($43)) {
  $47 = ___cxa_allocate_exception(4)|0;
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  $expanded33 = 16440;
  $expanded34 = 119;
  ___cxa_throw($47|0,$expanded33|0,$expanded34|0);
  // unreachable
 }
 $gep_int83 = $38;
 $gep_array84 = $34<<2;
 $gep85 = (($gep_int83) + ($gep_array84))|0;
 $44 = $gep85;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 
 if ($46) {
  $47 = ___cxa_allocate_exception(4)|0;
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  $expanded33 = 16440;
  $expanded34 = 119;
  ___cxa_throw($47|0,$expanded33|0,$expanded34|0);
  // unreachable
 }
 $49 = $45;
 $50 = $45;
 $51 = HEAP32[$45>>2]|0;
 $gep_int86 = $51;
 $gep87 = (($gep_int86) + 20)|0;
 $52 = $gep87;
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vii[$53 & 127]($__grouping,$49);
 HEAP32[$__oe>>2] = $__ob;
 $54 = HEAP8[$__nb]|0;
 
 do {
  if ((($54<<24>>24) == 43) | (($54<<24>>24) == 45)) {
   $55 = $21;
   $56 = HEAP32[$21>>2]|0;
   $gep_int88 = $56;
   $gep89 = (($gep_int88) + 44)|0;
   $57 = $gep89;
   $58 = HEAP32[$57>>2]|0;
   __THREW__ = 0;
   $59 = invoke_iii($58|0,$25|0,$54|0)|0;
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   
   if ($61) {
    break;
   }
   $gep_int90 = $__nb;
   $gep91 = (($gep_int90) + 1)|0;
   $62 = $gep91;
   $63 = HEAP32[$__oe>>2]|0;
   $gep_int92 = $63;
   $gep93 = (($gep_int92) + 4)|0;
   $64 = $gep93;
   HEAP32[$__oe>>2] = $64;
   HEAP32[$63>>2] = $59;
   
   $__nf$0 = $62;
   label = 20;
  } else {
   $__nf$0 = $__nb;
   label = 20;
  }
 } while(0);
 L22: do {
  if ((label|0) == 20) {
   
   $75 = $__ne;
   $76 = $__nf$0;
   $77 = (($75) - ($76))|0;
   $78 = ($77|0)>(1);
   
   L24: do {
    if ($78) {
     $80 = HEAP8[$__nf$0]|0;
     $81 = ($80<<24>>24)==(48);
     
     if (!($81)) {
      label = 21;
      break;
     }
     $gep_int94 = $__nf$0;
     $gep95 = (($gep_int94) + 1)|0;
     $82 = $gep95;
     $83 = HEAP8[$82]|0;
     
     if (!((($83<<24>>24) == 88) | (($83<<24>>24) == 120))) {
      label = 21;
      break;
     }
     $84 = $21;
     $85 = HEAP32[$21>>2]|0;
     $gep_int96 = $85;
     $gep97 = (($gep_int96) + 44)|0;
     $86 = $gep97;
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = invoke_iii($87|0,$25|0,48)|0;
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     
     if ($90) {
      break L22;
     }
     $91 = HEAP32[$__oe>>2]|0;
     $gep_int98 = $91;
     $gep99 = (($gep_int98) + 4)|0;
     $92 = $gep99;
     HEAP32[$__oe>>2] = $92;
     HEAP32[$91>>2] = $88;
     $gep_int100 = $__nf$0;
     $gep101 = (($gep_int100) + 2)|0;
     $93 = $gep101;
     $94 = HEAP8[$82]|0;
     $95 = HEAP32[$21>>2]|0;
     $gep_int102 = $95;
     $gep103 = (($gep_int102) + 44)|0;
     $96 = $gep103;
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = invoke_iii($97|0,$25|0,$94|0)|0;
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     
     if ($100) {
      break L22;
     }
     $101 = HEAP32[$__oe>>2]|0;
     $gep_int104 = $101;
     $gep105 = (($gep_int104) + 4)|0;
     $102 = $gep105;
     HEAP32[$__oe>>2] = $102;
     HEAP32[$101>>2] = $98;
     $103 = ($93>>>0)<($__ne>>>0);
     
     if ($103) {
      $__ns$042 = $93;
     } else {
      $__nf$1 = $93;$__ns$2 = $93;
      break;
     }
     L30: while(1) {
      
      $105 = HEAP8[$__ns$042]|0;
      $gep_int106 = 8376;
      $expanded40 = $gep_int106;
      $106 = HEAP8[$expanded40]|0;
      $107 = ($106<<24>>24)==(0);
      
      do {
       if ($107) {
        $expanded41 = 8376;
        $108 = ___cxa_guard_acquire($expanded41|0)|0;
        $109 = ($108|0)==(0);
        
        if ($109) {
         break;
        }
        __THREW__ = 0;
        $gep_int107 = 8384;
        $expanded42 = $gep_int107;
        $110 = invoke_iiii(30,2147483647,$expanded42|0,0)|0;
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        
        if ($112) {
         label = 32;
         break L30;
        }
        $expanded43 = 8368;
        HEAP32[8368>>2] = $110;
        $expanded44 = 8376;
        ___cxa_guard_release($expanded44|0);
        
       }
      } while(0);
      $expanded47 = 8368;
      $115 = HEAP32[8368>>2]|0;
      $116 = $105 << 24 >> 24;
      __THREW__ = 0;
      $117 = invoke_iii(35,$116|0,$115|0)|0;
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      
      if ($119) {
       label = 17;
       break;
      }
      $120 = ($117|0)==(0);
      $gep_int108 = $__ns$042;
      $gep109 = (($gep_int108) + 1)|0;
      $121 = $gep109;
      
      if ($120) {
       $__nf$1 = $93;$__ns$2 = $__ns$042;
       break L24;
      }
      $104 = ($121>>>0)<($__ne>>>0);
      
      if ($104) {
       $__ns$042 = $121;
      } else {
       $__nf$1 = $93;$__ns$2 = $121;
       break L24;
      }
     }
     if ((label|0) == 17) {
      $expanded38 = 69;
      $71 = ___cxa_find_matching_catch(-1,-1)|0;
      $72 = tempRet0;
      
      $eh$lpad$body$index7Z2D = $72;$eh$lpad$body$indexZ2D = $71;
      
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable
     }
     else if ((label|0) == 32) {
      $expanded45 = 69;
      $113 = ___cxa_find_matching_catch(-1,-1)|0;
      $114 = tempRet0;
      $expanded46 = 8376;
      ___cxa_guard_abort($expanded46|0);
      
      $eh$lpad$body$index7Z2D = $114;$eh$lpad$body$indexZ2D = $113;
      
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable
     }
    } else {
     label = 21;
    }
   } while(0);
   L44: do {
    if ((label|0) == 21) {
     $79 = ($__nf$0>>>0)<($__ne>>>0);
     
     if ($79) {
      $__ns$133 = $__nf$0;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
      break;
     }
     L46: while(1) {
      
      $123 = HEAP8[$__ns$133]|0;
      $gep_int110 = 8376;
      $expanded48 = $gep_int110;
      $124 = HEAP8[$expanded48]|0;
      $125 = ($124<<24>>24)==(0);
      
      do {
       if ($125) {
        $expanded49 = 8376;
        $126 = ___cxa_guard_acquire($expanded49|0)|0;
        $127 = ($126|0)==(0);
        
        if ($127) {
         break;
        }
        __THREW__ = 0;
        $gep_int111 = 8384;
        $expanded50 = $gep_int111;
        $128 = invoke_iiii(30,2147483647,$expanded50|0,0)|0;
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        
        if ($130) {
         label = 40;
         break L46;
        }
        $expanded51 = 8368;
        HEAP32[8368>>2] = $128;
        $expanded52 = 8376;
        ___cxa_guard_release($expanded52|0);
        
       }
      } while(0);
      $expanded55 = 8368;
      $133 = HEAP32[8368>>2]|0;
      $134 = $123 << 24 >> 24;
      __THREW__ = 0;
      $135 = invoke_iii(36,$134|0,$133|0)|0;
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      
      if ($137) {
       label = 16;
       break;
      }
      $138 = ($135|0)==(0);
      $gep_int112 = $__ns$133;
      $gep113 = (($gep_int112) + 1)|0;
      $139 = $gep113;
      
      if ($138) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$133;
       break L44;
      }
      $122 = ($139>>>0)<($__ne>>>0);
      
      if ($122) {
       $__ns$133 = $139;
      } else {
       $__nf$1 = $__nf$0;$__ns$2 = $139;
       break L44;
      }
     }
     if ((label|0) == 16) {
      $expanded37 = 69;
      $69 = ___cxa_find_matching_catch(-1,-1)|0;
      $70 = tempRet0;
      
      $eh$lpad$body$index7Z2D = $70;$eh$lpad$body$indexZ2D = $69;
      
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable
     }
     else if ((label|0) == 40) {
      $expanded53 = 69;
      $131 = ___cxa_find_matching_catch(-1,-1)|0;
      $132 = tempRet0;
      $expanded54 = 8376;
      ___cxa_guard_abort($expanded54|0);
      
      $eh$lpad$body$index7Z2D = $132;$eh$lpad$body$indexZ2D = $131;
      
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable
     }
    }
   } while(0);
   
   
   $140 = $__grouping;
   $141 = HEAP8[$__grouping]|0;
   $142 = $141 & 1;
   $143 = ($142<<24>>24)==(0);
   
   if ($143) {
    $146 = $141&255;
    $147 = $146 >>> 1;
    
    $148 = $147;
   } else {
    $gep_int114 = $__grouping;
    $gep115 = (($gep_int114) + 4)|0;
    $144 = $gep115;
    $145 = HEAP32[$144>>2]|0;
    
    $148 = $145;
   }
   
   $149 = ($148|0)==(0);
   
   do {
    if ($149) {
     $150 = HEAP32[$__oe>>2]|0;
     $151 = $21;
     $152 = HEAP32[$21>>2]|0;
     $gep_int116 = $152;
     $gep117 = (($gep_int116) + 48)|0;
     $153 = $gep117;
     $154 = HEAP32[$153>>2]|0;
     __THREW__ = 0;
     u$86 = invoke_iiiii($154|0,$25|0,$__nf$1|0,$__ns$2|0,$150|0)|0;
     $155 = __THREW__; __THREW__ = 0;
     $156 = $155&1;
     
     if ($156) {
      break L22;
     }
     $157 = $__ns$2;
     $158 = $__nf$1;
     $159 = (($157) - ($158))|0;
     $160 = HEAP32[$__oe>>2]|0;
     $gep_int118 = $160;
     $gep_array119 = $159<<2;
     $gep120 = (($gep_int118) + ($gep_array119))|0;
     $161 = $gep120;
     HEAP32[$__oe>>2] = $161;
     
     $234 = $161;
    } else {
     $162 = ($__nf$1|0)==($__ns$2|0);
     
     do {
      if (!($162)) {
       $gep_int121 = $__ns$2;
       $gep122 = (($gep_int121) + -1)|0;
       $163 = $gep122;
       $164 = ($163>>>0)>($__nf$1>>>0);
       
       if ($164) {
        $$012$i$i = $__nf$1;$165 = $163;
       } else {
        break;
       }
       while(1) {
        
        
        $166 = HEAP8[$$012$i$i]|0;
        $167 = HEAP8[$165]|0;
        HEAP8[$$012$i$i] = $167;
        HEAP8[$165] = $166;
        $gep_int123 = $$012$i$i;
        $gep124 = (($gep_int123) + 1)|0;
        $168 = $gep124;
        $gep_int125 = $165;
        $gep126 = (($gep_int125) + -1)|0;
        $169 = $gep126;
        $170 = ($168>>>0)<($169>>>0);
        
        if ($170) {
         $165$phi = $169;$$012$i$i$phi = $168;$165 = $165$phi;$$012$i$i = $$012$i$i$phi;
        } else {
         break;
        }
       }
      }
     } while(0);
     $171 = $45;
     $172 = HEAP32[$45>>2]|0;
     $gep_int127 = $172;
     $gep128 = (($gep_int127) + 16)|0;
     $173 = $gep128;
     $174 = HEAP32[$173>>2]|0;
     __THREW__ = 0;
     $175 = invoke_ii($174|0,$49|0)|0;
     $176 = __THREW__; __THREW__ = 0;
     $177 = $176&1;
     
     if ($177) {
      break L22;
     }
     $178 = ($__nf$1>>>0)<($__ns$2>>>0);
     
     L75: do {
      if ($178) {
       $179 = $__grouping;
       $gep_int129 = $__grouping;
       $gep130 = (($gep_int129) + 1)|0;
       $180 = $gep130;
       $gep_int131 = $__grouping;
       $gep132 = (($gep_int131) + 4)|0;
       $181 = $gep132;
       $gep_int133 = $__grouping;
       $gep134 = (($gep_int133) + 8)|0;
       $182 = $gep134;
       $183 = $21;
       
       $__dc$024 = 0;$__dg$025 = 0;$__p$026 = $__nf$1;
       while(1) {
        
        
        
        $184 = HEAP8[$__grouping]|0;
        $185 = $184 & 1;
        $186 = ($185<<24>>24)==(0);
        $187 = HEAP32[$182>>2]|0;
        $$ = $186 ? $180 : $187;
        $gep_int135 = $$;
        $gep136 = (($gep_int135) + ($__dg$025))|0;
        $188 = $gep136;
        $189 = HEAP8[$188]|0;
        $190 = ($189<<24>>24)>(0);
        
        do {
         if ($190) {
          $191 = HEAP32[$182>>2]|0;
          $$57 = $186 ? $180 : $191;
          $gep_int137 = $$57;
          $gep138 = (($gep_int137) + ($__dg$025))|0;
          $192 = $gep138;
          $193 = HEAP8[$192]|0;
          $194 = $193 << 24 >> 24;
          $195 = ($__dc$024|0)==($194|0);
          
          if (!($195)) {
           $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
           break;
          }
          $196 = HEAP32[$__oe>>2]|0;
          $gep_int139 = $196;
          $gep140 = (($gep_int139) + 4)|0;
          $197 = $gep140;
          HEAP32[$__oe>>2] = $197;
          HEAP32[$196>>2] = $175;
          $198 = HEAP8[$__grouping]|0;
          $199 = $198 & 1;
          $200 = ($199<<24>>24)==(0);
          
          if ($200) {
           $202 = $198&255;
           $203 = $202 >>> 1;
           
           $204 = $203;
          } else {
           $201 = HEAP32[$181>>2]|0;
           
           $204 = $201;
          }
          
          $205 = (($204) + -1)|0;
          $206 = ($__dg$025>>>0)<($205>>>0);
          $207 = $206&1;
          $$__dg$0 = (($207) + ($__dg$025))|0;
          
          $__dc$1 = 0;$__dg$1 = $$__dg$0;
         } else {
          $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
         }
        } while(0);
        
        
        $208 = HEAP8[$__p$026]|0;
        $209 = HEAP32[$21>>2]|0;
        $gep_int141 = $209;
        $gep142 = (($gep_int141) + 44)|0;
        $210 = $gep142;
        $211 = HEAP32[$210>>2]|0;
        __THREW__ = 0;
        $212 = invoke_iii($211|0,$25|0,$208|0)|0;
        $213 = __THREW__; __THREW__ = 0;
        $214 = $213&1;
        
        if ($214) {
         break;
        }
        $215 = HEAP32[$__oe>>2]|0;
        $gep_int143 = $215;
        $gep144 = (($gep_int143) + 4)|0;
        $216 = $gep144;
        HEAP32[$__oe>>2] = $216;
        HEAP32[$215>>2] = $212;
        $217 = (($__dc$1) + 1)|0;
        $gep_int145 = $__p$026;
        $gep146 = (($gep_int145) + 1)|0;
        $218 = $gep146;
        $219 = ($218>>>0)<($__ns$2>>>0);
        
        if ($219) {
         $__dc$024 = $217;$__dg$025 = $__dg$1;$__p$026 = $218;
        } else {
         $220 = $216;
         break L75;
        }
       }
       $expanded36 = 69;
       $67 = ___cxa_find_matching_catch(-1,-1)|0;
       $68 = tempRet0;
       
       $eh$lpad$body$index7Z2D = $68;$eh$lpad$body$indexZ2D = $67;
       
       
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable
      } else {
       $$pre = HEAP32[$__oe>>2]|0;
       
       $220 = $$pre;
      }
     } while(0);
     
     $221 = $__nf$1;
     $222 = $__nb;
     $223 = (($221) - ($222))|0;
     $gep_int147 = $__ob;
     $gep_array148 = $223<<2;
     $gep149 = (($gep_int147) + ($gep_array148))|0;
     $224 = $gep149;
     $225 = ($224|0)==($220|0);
     
     if ($225) {
      $234 = $220;
      break;
     }
     $gep_int150 = $220;
     $gep151 = (($gep_int150) + -4)|0;
     $226 = $gep151;
     $227 = ($226>>>0)>($224>>>0);
     
     if ($227) {
      $$012$i$i13 = $224;$228 = $226;
     } else {
      $234 = $220;
      break;
     }
     while(1) {
      
      
      $229 = HEAP32[$$012$i$i13>>2]|0;
      $230 = HEAP32[$228>>2]|0;
      HEAP32[$$012$i$i13>>2] = $230;
      HEAP32[$228>>2] = $229;
      $gep_int152 = $$012$i$i13;
      $gep153 = (($gep_int152) + 4)|0;
      $231 = $gep153;
      $gep_int154 = $228;
      $gep155 = (($gep_int154) + -4)|0;
      $232 = $gep155;
      $233 = ($231>>>0)<($232>>>0);
      
      if ($233) {
       $228$phi = $232;$$012$i$i13$phi = $231;$228 = $228$phi;$$012$i$i13 = $$012$i$i13$phi;
      } else {
       $234 = $220;
       break;
      }
     }
    }
   } while(0);
   
   $235 = ($__ns$2>>>0)<($__ne>>>0);
   
   L96: do {
    if ($235) {
     $236 = $21;
     
     $__nf$220 = $__ns$2;
     while(1) {
      
      $237 = HEAP8[$__nf$220]|0;
      $238 = ($237<<24>>24)==(46);
      
      if ($238) {
       label = 70;
       break;
      }
      $249 = HEAP32[$21>>2]|0;
      $gep_int162 = $249;
      $gep163 = (($gep_int162) + 44)|0;
      $250 = $gep163;
      $251 = HEAP32[$250>>2]|0;
      __THREW__ = 0;
      $252 = invoke_iii($251|0,$25|0,$237|0)|0;
      $253 = __THREW__; __THREW__ = 0;
      $254 = $253&1;
      
      if ($254) {
       label = 14;
       break;
      }
      $255 = HEAP32[$__oe>>2]|0;
      $gep_int164 = $255;
      $gep165 = (($gep_int164) + 4)|0;
      $256 = $gep165;
      HEAP32[$__oe>>2] = $256;
      HEAP32[$255>>2] = $252;
      $gep_int166 = $__nf$220;
      $gep167 = (($gep_int166) + 1)|0;
      $257 = $gep167;
      $258 = ($257>>>0)<($__ne>>>0);
      
      if ($258) {
       $__nf$220 = $257;
      } else {
       $259 = $256;$__nf$3 = $257;
       break L96;
      }
     }
     if ((label|0) == 14) {
      $expanded35 = 69;
      $65 = ___cxa_find_matching_catch(-1,-1)|0;
      $66 = tempRet0;
      
      $eh$lpad$body$index7Z2D = $66;$eh$lpad$body$indexZ2D = $65;
      
      
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable
     }
     else if ((label|0) == 70) {
      $239 = $45;
      $240 = HEAP32[$45>>2]|0;
      $gep_int156 = $240;
      $gep157 = (($gep_int156) + 12)|0;
      $241 = $gep157;
      $242 = HEAP32[$241>>2]|0;
      __THREW__ = 0;
      $243 = invoke_ii($242|0,$49|0)|0;
      $244 = __THREW__; __THREW__ = 0;
      $245 = $244&1;
      
      if ($245) {
       break L22;
      }
      $246 = HEAP32[$__oe>>2]|0;
      $gep_int158 = $246;
      $gep159 = (($gep_int158) + 4)|0;
      $247 = $gep159;
      HEAP32[$__oe>>2] = $247;
      HEAP32[$246>>2] = $243;
      $gep_int160 = $__nf$220;
      $gep161 = (($gep_int160) + 1)|0;
      $248 = $gep161;
      
      $259 = $247;$__nf$3 = $248;
      break;
     }
    } else {
     $259 = $234;$__nf$3 = $__ns$2;
    }
   } while(0);
   
   
   $260 = $21;
   $261 = HEAP32[$21>>2]|0;
   $gep_int168 = $261;
   $gep169 = (($gep_int168) + 48)|0;
   $262 = $gep169;
   $263 = HEAP32[$262>>2]|0;
   __THREW__ = 0;
   u$132 = invoke_iiiii($263|0,$25|0,$__nf$3|0,$__ne|0,$259|0)|0;
   $264 = __THREW__; __THREW__ = 0;
   $265 = $264&1;
   
   if ($265) {
    break;
   }
   $266 = $__nf$3;
   $267 = (($75) - ($266))|0;
   $268 = HEAP32[$__oe>>2]|0;
   $gep_int170 = $268;
   $gep_array171 = $267<<2;
   $gep172 = (($gep_int170) + ($gep_array171))|0;
   $269 = $gep172;
   HEAP32[$__oe>>2] = $269;
   $270 = ($__np|0)==($__ne|0);
   
   if ($270) {
    $storemerge = $269;
    
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $271 = $__np;
   $272 = $__nb;
   $273 = (($271) - ($272))|0;
   $gep_int173 = $__ob;
   $gep_array174 = $273<<2;
   $gep175 = (($gep_int173) + ($gep_array174))|0;
   $274 = $gep175;
   
   $storemerge = $274;
   
   HEAP32[$__op>>2] = $storemerge;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $expanded39 = 69;
 $73 = ___cxa_find_matching_catch(-1,-1)|0;
 $74 = tempRet0;
 
 $eh$lpad$body$index7Z2D = $74;$eh$lpad$body$indexZ2D = $73;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$111 = 0, $$1210 = 0, $$byval_copy = 0, $$pre = 0, $$pre12 = 0, $$pre13 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var $expanded = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded40 = 0;
 var $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $gep = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep69 = 0, $gep72 = 0;
 var $gep77 = 0, $gep80 = 0, $gep84 = 0, $gep86 = 0, $gep88 = 0, $gep90 = 0, $gep_int = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int67 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int71 = 0;
 var $gep_int73 = 0, $gep_int74 = 0, $gep_int75 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int82 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int92 = 0, $gep_int93 = 0, $gep_int94 = 0, $gep_int95 = 0, $gep_int96 = 0, $gep_int97 = 0, $gep_int98 = 0;
 var $gep_int99 = 0, $or$cond$i = 0, $scevgep = 0, $scevgep14 = 0, $specify_precision$0$off0$ph$i15 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer9 = 0, $vararg_func = 0, $vararg_func12 = 0, $vararg_func17 = 0, $vararg_func21 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast10 = 0, $vararg_lifetime_bitcast14 = 0, $vararg_lifetime_bitcast19 = 0, $vararg_ptr = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr8 = 0, label = 0, sp = 0, u$115 = 0, u$133 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer18 = sp + 8|0;
 $vararg_lifetime_bitcast19 = $vararg_buffer18;
 $vararg_buffer13 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast14 = $vararg_buffer13;
 $vararg_buffer9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast10 = $vararg_buffer9;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $__nb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 232|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $__fmt;
 $gep_int = $__fmt;
 $gep = (($gep_int) + 1)|0;
 $9 = $gep;
 $gep_int51 = $__iob;
 $gep52 = (($gep_int51) + 4)|0;
 $10 = $gep52;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2048;
 $13 = ($12|0)==(0);
 
 if ($13) {
  $$0$i = $9;
 } else {
  $gep_int53 = $__fmt;
  $gep54 = (($gep_int53) + 2)|0;
  $14 = $gep54;
  HEAP8[$9] = 43;
  
  $$0$i = $14;
 }
 
 $15 = $11 & 1024;
 $16 = ($15|0)==(0);
 
 if ($16) {
  $$1$i = $$0$i;
 } else {
  $gep_int55 = $$0$i;
  $gep56 = (($gep_int55) + 1)|0;
  $17 = $gep56;
  HEAP8[$$0$i] = 35;
  
  $$1$i = $17;
 }
 
 $18 = $11 & 260;
 $19 = $11 >>> 14;
 $20 = ($18|0)==(260);
 
 do {
  if ($20) {
   HEAP8[$$1$i] = 76;
   $gep_int63 = $$1$i;
   $gep64 = (($gep_int63) + 1)|0;
   $scevgep14 = $gep64;
   $27 = $19 & 1;
   $28 = ($27|0)==(0);
   
   if ($28) {
    HEAP8[$scevgep14] = 97;
    
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   } else {
    HEAP8[$scevgep14] = 65;
    
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   }
  } else {
   $gep_int57 = $$1$i;
   $gep58 = (($gep_int57) + 1)|0;
   $21 = $gep58;
   HEAP8[$$1$i] = 46;
   $gep_int59 = $$1$i;
   $gep60 = (($gep_int59) + 2)|0;
   $22 = $gep60;
   HEAP8[$21] = 42;
   HEAP8[$22] = 76;
   $gep_int61 = $$1$i;
   $gep62 = (($gep_int61) + 3)|0;
   $scevgep = $gep62;
   
   if ((($18|0) == 256)) {
    $25 = $19 & 1;
    $26 = ($25|0)==(0);
    
    if ($26) {
     HEAP8[$scevgep] = 101;
     
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else if ((($18|0) == 4)) {
    $23 = $19 & 1;
    $24 = ($23|0)==(0);
    
    if ($24) {
     HEAP8[$scevgep] = 102;
     
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else {
    $29 = $19 & 1;
    $30 = ($29|0)==(0);
    
    if ($30) {
     HEAP8[$scevgep] = 103;
     
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   }
  }
 } while(0);
 
 $gep_int65 = $__nar;
 $31 = $gep_int65;
 HEAP32[$__nb>>2] = $31;
 $gep_int66 = 8376;
 $expanded = $gep_int66;
 $32 = HEAP8[$expanded]|0;
 $33 = ($32<<24>>24)==(0);
 
 do {
  if ($33) {
   $expanded22 = 8376;
   $34 = ___cxa_guard_acquire($expanded22|0)|0;
   $35 = ($34|0)==(0);
   
   if ($35) {
    break;
   }
   __THREW__ = 0;
   $gep_int67 = 8384;
   $expanded23 = $gep_int67;
   $36 = invoke_iiii(30,2147483647,$expanded23|0,0)|0;
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   
   if ($38) {
    $expanded26 = 69;
    $39 = ___cxa_find_matching_catch(-1,-1)|0;
    $40 = tempRet0;
    $expanded27 = 8376;
    ___cxa_guard_abort($expanded27|0);
    ___resumeException($39|0);
    // unreachable
   } else {
    $expanded24 = 8368;
    HEAP32[8368>>2] = $36;
    $expanded25 = 8376;
    ___cxa_guard_release($expanded25|0);
    
    break;
   }
  }
 } while(0);
 $expanded28 = 8368;
 $41 = HEAP32[8368>>2]|0;
 
 if ($specify_precision$0$off0$ph$i15) {
  $gep_int68 = $__iob;
  $gep69 = (($gep_int68) + 8)|0;
  $42 = $gep69;
  $43 = HEAP32[$42>>2]|0;
  
  $gep_int70 = $vararg_buffer;
  $vararg_ptr = $gep_int70;
  HEAP32[$vararg_ptr>>2] = $43;
  $gep_int71 = $vararg_buffer;
  $gep72 = (($gep_int71) + 4)|0;
  $vararg_ptr8 = $gep72;
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $expanded29 = 18;
  $vararg_func = $expanded29;
  $44 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer)|0;
  
  
  $__nc$0 = $44;
 } else {
  
  $gep_int73 = $vararg_buffer9;
  $vararg_ptr11 = $gep_int73;
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $expanded30 = 18;
  $vararg_func12 = $expanded30;
  $45 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer9)|0;
  
  
  $__nc$0 = $45;
 }
 
 $46 = ($__nc$0|0)>(29);
 
 L38: do {
  if ($46) {
   $gep_int74 = 8376;
   $expanded31 = $gep_int74;
   $47 = HEAP8[$expanded31]|0;
   $48 = ($47<<24>>24)==(0);
   
   L40: do {
    if ($specify_precision$0$off0$ph$i15) {
     
     do {
      if ($48) {
       $expanded32 = 8376;
       $49 = ___cxa_guard_acquire($expanded32|0)|0;
       $50 = ($49|0)==(0);
       
       if ($50) {
        break;
       }
       __THREW__ = 0;
       $gep_int75 = 8384;
       $expanded33 = $gep_int75;
       $51 = invoke_iiii(30,2147483647,$expanded33|0,0)|0;
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       
       if ($53) {
        $expanded36 = 69;
        $54 = ___cxa_find_matching_catch(-1,-1)|0;
        $55 = tempRet0;
        $expanded37 = 8376;
        ___cxa_guard_abort($expanded37|0);
        
        $eh$lpad$body$index3Z2D = $55;$eh$lpad$body$indexZ2D = $54;
        break L40;
       } else {
        $expanded34 = 8368;
        HEAP32[8368>>2] = $51;
        $expanded35 = 8376;
        ___cxa_guard_release($expanded35|0);
        
        break;
       }
      }
     } while(0);
     $expanded38 = 8368;
     $56 = HEAP32[8368>>2]|0;
     $gep_int76 = $__iob;
     $gep77 = (($gep_int76) + 8)|0;
     $57 = $gep77;
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     
     $gep_int78 = $vararg_buffer13;
     $vararg_ptr15 = $gep_int78;
     HEAP32[$vararg_ptr15>>2] = $58;
     $gep_int79 = $vararg_buffer13;
     $gep80 = (($gep_int79) + 4)|0;
     $vararg_ptr16 = $gep80;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $expanded39 = 16;
     $vararg_func17 = $expanded39;
     $59 = invoke_iiiii(16,$__nb|0,$56|0,$8|0,$vararg_buffer13|0)|0;
     
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     
     if ($61) {
      label = 36;
     } else {
      $__nc$1 = $59;
      label = 44;
     }
    } else {
     
     do {
      if ($48) {
       $expanded41 = 8376;
       $64 = ___cxa_guard_acquire($expanded41|0)|0;
       $65 = ($64|0)==(0);
       
       if ($65) {
        break;
       }
       __THREW__ = 0;
       $gep_int81 = 8384;
       $expanded42 = $gep_int81;
       $66 = invoke_iiii(30,2147483647,$expanded42|0,0)|0;
       $67 = __THREW__; __THREW__ = 0;
       $68 = $67&1;
       
       if ($68) {
        $expanded45 = 69;
        $69 = ___cxa_find_matching_catch(-1,-1)|0;
        $70 = tempRet0;
        $expanded46 = 8376;
        ___cxa_guard_abort($expanded46|0);
        
        $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
        break L40;
       } else {
        $expanded43 = 8368;
        HEAP32[8368>>2] = $66;
        $expanded44 = 8376;
        ___cxa_guard_release($expanded44|0);
        
        break;
       }
      }
     } while(0);
     $expanded47 = 8368;
     $71 = HEAP32[8368>>2]|0;
     __THREW__ = 0;
     
     $gep_int82 = $vararg_buffer18;
     $vararg_ptr20 = $gep_int82;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr20+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $expanded48 = 16;
     $vararg_func21 = $expanded48;
     $72 = invoke_iiiii(16,$__nb|0,$71|0,$8|0,$vararg_buffer18|0)|0;
     
     $73 = __THREW__; __THREW__ = 0;
     $74 = $73&1;
     
     if ($74) {
      label = 36;
     } else {
      $__nc$1 = $72;
      label = 44;
     }
    }
   } while(0);
   do {
    if ((label|0) == 44) {
     
     $75 = HEAP32[$__nb>>2]|0;
     $76 = ($75|0)==(0);
     
     if (!($76)) {
      $79 = $75;$80 = $75;$__nc$2 = $__nc$1;
      break L38;
     }
     __THREW__ = 0;
     invoke_v(13);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     
     if ($78) {
      label = 36;
      break;
     }
     $$pre = HEAP32[$__nb>>2]|0;
     
     $79 = $$pre;$80 = $$pre;$__nc$2 = $__nc$1;
     break L38;
    }
   } while(0);
   if ((label|0) == 36) {
    $expanded40 = 69;
    $62 = ___cxa_find_matching_catch(-1,-1)|0;
    $63 = tempRet0;
    
    $eh$lpad$body$index3Z2D = $63;$eh$lpad$body$indexZ2D = $62;
   }
   
   
   
   $$111 = $eh$lpad$body$indexZ2D;$$1210 = $eh$lpad$body$index3Z2D;
   
   
   ___resumeException($$111|0);
   // unreachable
  } else {
   $$pre12 = HEAP32[$__nb>>2]|0;
   
   $79 = $$pre12;$80 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 
 
 
 $gep_int83 = $79;
 $gep84 = (($gep_int83) + ($__nc$2))|0;
 $81 = $gep84;
 $82 = HEAP32[$10>>2]|0;
 $83 = $82 & 176;
 
 do {
  if ((($83|0) == 16)) {
   $84 = HEAP8[$79]|0;
   
   if ((($84<<24>>24) == 43) | (($84<<24>>24) == 45)) {
    $gep_int85 = $79;
    $gep86 = (($gep_int85) + 1)|0;
    $85 = $gep86;
    
    $$0$i7 = $85;
    break;
   }
   $86 = ($__nc$2|0)>(1);
   $87 = ($84<<24>>24)==(48);
   $or$cond$i = $86 & $87;
   
   if (!($or$cond$i)) {
    label = 53;
    break;
   }
   $gep_int87 = $79;
   $gep88 = (($gep_int87) + 1)|0;
   $88 = $gep88;
   $89 = HEAP8[$88]|0;
   
   if (!((($89<<24>>24) == 88) | (($89<<24>>24) == 120))) {
    label = 53;
    break;
   }
   $gep_int89 = $79;
   $gep90 = (($gep_int89) + 2)|0;
   $90 = $gep90;
   
   $$0$i7 = $90;
  } else if ((($83|0) == 32)) {
   $$0$i7 = $81;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  
  $$0$i7 = $79;
 }
 
 $91 = $__o;
 
 $gep_int91 = $__o;
 $92 = $gep_int91;
 $93 = ($79|0)==($31|0);
 
 do {
  if ($93) {
   $103 = $31;$104 = 0;$__ob$0 = $92;
   label = 59;
  } else {
   $94 = $__nc$2 << 3;
   $95 = _malloc($94)|0;
   $96 = $95;
   $97 = ($95|0)==(0);
   
   if (!($97)) {
    $103 = $79;$104 = $96;$__ob$0 = $96;
    label = 59;
    break;
   }
   __THREW__ = 0;
   invoke_v(13);
   $98 = __THREW__; __THREW__ = 0;
   $99 = $98&1;
   
   if ($99) {
    $100 = 0;
    label = 58;
    break;
   }
   $$pre13 = HEAP32[$__nb>>2]|0;
   
   $103 = $$pre13;$104 = $96;$__ob$0 = $96;
   label = 59;
  }
 } while(0);
 do {
  if ((label|0) == 59) {
   
   
   
   __THREW__ = 0;
   invoke_vii(41,$1|0,$__iob|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   
   if ($106) {
    $100 = $104;
    label = 58;
    break;
   }
   __THREW__ = 0;
   invoke_viiiiiii(46,$103|0,$$0$i7|0,$81|0,$__ob$0|0,$__op|0,$__oe|0,$1|0);
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   
   if ($108) {
    $expanded50 = 69;
    $129 = ___cxa_find_matching_catch(-1,-1)|0;
    $130 = tempRet0;
    $gep_int98 = $1;
    $131 = $gep_int98;
    $132 = HEAP32[$131>>2]|0;
    $gep_int99 = $132;
    $133 = $gep_int99;
    u$133 = __ZNSt3__114__shared_count16__release_sharedEv($133)|0;
    
    $$0 = $129;$$01 = $130;$134 = $104;
    break;
   }
   $gep_int92 = $1;
   $109 = $gep_int92;
   $110 = HEAP32[$109>>2]|0;
   $gep_int93 = $110;
   $111 = $gep_int93;
   u$115 = __ZNSt3__114__shared_count16__release_sharedEv($111)|0;
   $gep_int94 = $__s;
   $112 = $gep_int94;
   $113 = HEAP32[$112>>2]|0;
   $gep_int95 = $3;
   $114 = $gep_int95;
   HEAP32[$114>>2] = $113;
   $115 = HEAP32[$__op>>2]|0;
   $116 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   $117 = $$byval_copy;
   
   $118 = $$byval_copy;
   $119 = $3;
   ;HEAP32[$118+0>>2]=HEAP32[$119+0>>2]|0;
   invoke_viiiiiii(47,$2|0,$$byval_copy|0,$__ob$0|0,$115|0,$116|0,$__iob|0,$__fl|0);
   $120 = $$byval_copy;
   
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   
   if ($122) {
    $100 = $104;
    label = 58;
    break;
   }
   $gep_int96 = $2;
   $123 = $gep_int96;
   $124 = HEAP32[$123>>2]|0;
   HEAP32[$112>>2] = $124;
   $gep_int97 = $agg$result;
   $125 = $gep_int97;
   HEAP32[$125>>2] = $124;
   $126 = ($104|0)==(0);
   
   if (!($126)) {
    $127 = $104;
    _free($127);
    
   }
   
   $128 = ($80|0)==(0);
   
   if ($128) {
    STACKTOP = sp;return;
   }
   _free($80);
   
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 58) {
  
  $expanded49 = 69;
  $101 = ___cxa_find_matching_catch(-1,-1)|0;
  $102 = tempRet0;
  
  $$0 = $101;$$01 = $102;$134 = $100;
 }
 
 
 
 $135 = ($134|0)==(0);
 
 if (!($135)) {
  $136 = $134;
  _free($136);
  
 }
 $137 = ($80|0)==(0);
 
 if ($137) {
  $$111 = $$0;$$1210 = $$01;
  
  
  ___resumeException($$111|0);
  // unreachable
 }
 _free($80);
 
 $$111 = $$0;$$1210 = $$01;
 
 
 ___resumeException($$111|0);
 // unreachable
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0;
 var $expanded20 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep39 = 0, $gep41 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep54 = 0;
 var $gep57 = 0, $gep61 = 0, $gep_array = 0, $gep_array56 = 0, $gep_array60 = 0, $gep_int = 0, $gep_int21 = 0, $gep_int22 = 0, $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0;
 var $gep_int40 = 0, $gep_int42 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int62 = 0, $gep_int63 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0;
 var sp = 0, u$39 = 0, u$40 = 0, u$42 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 152|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $gep_int = $__fmt;
 $3 = $gep_int;
 $gep_int21 = 7280;
 $expanded = $gep_int21;
 ;HEAP8[$3+0|0]=HEAP8[$expanded+0|0]|0;HEAP8[$3+1|0]=HEAP8[$expanded+1|0]|0;HEAP8[$3+2|0]=HEAP8[$expanded+2|0]|0;HEAP8[$3+3|0]=HEAP8[$expanded+3|0]|0;HEAP8[$3+4|0]=HEAP8[$expanded+4|0]|0;HEAP8[$3+5|0]=HEAP8[$expanded+5|0]|0;
 $gep_int22 = $__nar;
 $4 = $gep_int22;
 $gep_int23 = 8376;
 $expanded1 = $gep_int23;
 $5 = HEAP8[$expanded1]|0;
 $6 = ($5<<24>>24)==(0);
 
 do {
  if ($6) {
   $expanded2 = 8376;
   $7 = ___cxa_guard_acquire($expanded2|0)|0;
   $8 = ($7|0)==(0);
   
   if ($8) {
    break;
   }
   __THREW__ = 0;
   $gep_int24 = 8384;
   $expanded3 = $gep_int24;
   $9 = invoke_iiii(30,2147483647,$expanded3|0,0)|0;
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   
   if ($11) {
    $expanded6 = 69;
    $12 = ___cxa_find_matching_catch(-1,-1)|0;
    $13 = tempRet0;
    $expanded7 = 8376;
    ___cxa_guard_abort($expanded7|0);
    ___resumeException($12|0);
    // unreachable
   } else {
    $expanded4 = 8368;
    HEAP32[8368>>2] = $9;
    $expanded5 = 8376;
    ___cxa_guard_release($expanded5|0);
    
    break;
   }
  }
 } while(0);
 $expanded8 = 8368;
 $14 = HEAP32[8368>>2]|0;
 
 $gep_int25 = $vararg_buffer;
 $vararg_ptr = $gep_int25;
 HEAP32[$vararg_ptr>>2] = $__v;
 $expanded9 = 18;
 $vararg_func = $expanded9;
 $15 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$14,$3,$vararg_buffer)|0;
 
 $gep_int26 = $__nar;
 $gep = (($gep_int26) + ($15))|0;
 $16 = $gep;
 $gep_int27 = $__iob;
 $gep28 = (($gep_int27) + 4)|0;
 $17 = $gep28;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 176;
 
 do {
  if ((($19|0) == 32)) {
   $$0$i = $16;
  } else if ((($19|0) == 16)) {
   $20 = HEAP8[$4]|0;
   
   if ((($20<<24>>24) == 43) | (($20<<24>>24) == 45)) {
    $gep_int29 = $__nar;
    $gep30 = (($gep_int29) + 1)|0;
    $21 = $gep30;
    
    $$0$i = $21;
    break;
   }
   $22 = ($15|0)>(1);
   $23 = ($20<<24>>24)==(48);
   $or$cond$i = $22 & $23;
   
   if (!($or$cond$i)) {
    label = 12;
    break;
   }
   $gep_int31 = $__nar;
   $gep32 = (($gep_int31) + 1)|0;
   $24 = $gep32;
   $25 = HEAP8[$24]|0;
   
   if (!((($25<<24>>24) == 88) | (($25<<24>>24) == 120))) {
    label = 12;
    break;
   }
   $gep_int33 = $__nar;
   $gep34 = (($gep_int33) + 2)|0;
   $26 = $gep34;
   
   $$0$i = $26;
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  
  $$0$i = $4;
 }
 
 $27 = $__o;
 
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $gep_int35 = $1;
 $28 = $gep_int35;
 $29 = HEAP32[$28>>2]|0;
 $30 = $__p$i$i$i$i;
 
 $expanded11 = 8472;
 $gep_int36 = 8472;
 $expanded10 = $gep_int36;
 $31 = HEAP32[$expanded10>>2]|0;
 $32 = ($31|0)==(-1);
 
 do {
  if (!($32)) {
   $gep_int37 = $__p$i$i$i$i;
   $33 = $gep_int37;
   $expanded12 = 8472;
   HEAP32[$33>>2] = $expanded12;
   $gep_int38 = $__p$i$i$i$i;
   $gep39 = (($gep_int38) + 4)|0;
   $34 = $gep39;
   $expanded13 = 177;
   HEAP32[$34>>2] = $expanded13;
   $gep_int40 = $__p$i$i$i$i;
   $gep41 = (($gep_int40) + 8)|0;
   $35 = $gep41;
   HEAP32[$35>>2] = 0;
   __THREW__ = 0;
   $expanded15 = 8472;
   $gep_int42 = 8472;
   $expanded14 = $gep_int42;
   invoke_viii(17,$expanded14|0,$30|0,178);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   
   if (!($37)) {
    break;
   }
   $expanded20 = 69;
   $66 = ___cxa_find_matching_catch(-1,-1)|0;
   $67 = tempRet0;
   $68 = HEAP32[$28>>2]|0;
   $gep_int58 = $68;
   $69 = $gep_int58;
   u$42 = __ZNSt3__114__shared_count16__release_sharedEv($69)|0;
   ___resumeException($66|0);
   // unreachable
  }
 } while(0);
 
 $expanded17 = 8472;
 $gep_int43 = 8472;
 $gep44 = (($gep_int43) + 4)|0;
 $expanded16 = $gep44;
 $38 = HEAP32[$expanded16>>2]|0;
 $39 = (($38) + -1)|0;
 $gep_int45 = $29;
 $gep46 = (($gep_int45) + 12)|0;
 $40 = $gep46;
 $41 = HEAP32[$40>>2]|0;
 $gep_int47 = $29;
 $gep48 = (($gep_int47) + 8)|0;
 $42 = $gep48;
 $43 = HEAP32[$42>>2]|0;
 $44 = $41;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = $46 >> 2;
 $48 = ($47>>>0)>($39>>>0);
 
 do {
  if ($48) {
   $gep_int49 = $43;
   $gep_array = $39<<2;
   $gep50 = (($gep_int49) + ($gep_array))|0;
   $49 = $gep50;
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0);
   
   if ($51) {
    break;
   }
   $56 = $50;
   $57 = HEAP32[$28>>2]|0;
   $gep_int51 = $57;
   $58 = $gep_int51;
   u$39 = __ZNSt3__114__shared_count16__release_sharedEv($58)|0;
   $gep_int52 = $__o;
   $59 = $gep_int52;
   $60 = $50;
   $61 = HEAP32[$50>>2]|0;
   $gep_int53 = $61;
   $gep54 = (($gep_int53) + 48)|0;
   $62 = $gep54;
   $63 = HEAP32[$62>>2]|0;
   u$40 = FUNCTION_TABLE_iiiii[$63 & 31]($56,$4,$16,$59)|0;
   $gep_int55 = $__o;
   $gep_array56 = $15<<2;
   $gep57 = (($gep_int55) + ($gep_array56))|0;
   $64 = $gep57;
   $65 = ($$0$i|0)==($16|0);
   
   if ($65) {
    $__op$0 = $64;
    
    $gep_int62 = $__s;
    $74 = $gep_int62;
    $75 = HEAP32[$74>>2]|0;
    $gep_int63 = $2;
    $76 = $gep_int63;
    HEAP32[$76>>2] = $75;
    $77 = $$byval_copy;
    
    $78 = $$byval_copy;
    $79 = $2;
    ;HEAP32[$78+0>>2]=HEAP32[$79+0>>2]|0;
    __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$59,$__op$0,$64,$__iob,$__fl);
    $80 = $$byval_copy;
    
    
    STACKTOP = sp;return;
   }
   $70 = $__nar;
   $71 = $$0$i;
   $72 = (($71) - ($70))|0;
   $gep_int59 = $__o;
   $gep_array60 = $72<<2;
   $gep61 = (($gep_int59) + ($gep_array60))|0;
   $73 = $gep61;
   
   $__op$0 = $73;
   
   $gep_int62 = $__s;
   $74 = $gep_int62;
   $75 = HEAP32[$74>>2]|0;
   $gep_int63 = $2;
   $76 = $gep_int63;
   HEAP32[$76>>2] = $75;
   $77 = $$byval_copy;
   
   $78 = $$byval_copy;
   $79 = $2;
   ;HEAP32[$78+0>>2]=HEAP32[$79+0>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$59,$__op$0,$64,$__iob,$__fl);
   $80 = $$byval_copy;
   
   
   STACKTOP = sp;return;
  }
 } while(0);
 $52 = ___cxa_allocate_exception(4)|0;
 $53 = $52;
 __ZNSt8bad_castC2Ev($53);
 __THREW__ = 0;
 $expanded18 = 16440;
 $expanded19 = 119;
 invoke_viii(5,$52|0,$expanded18|0,$expanded19|0);
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 
 if ($55) {
  $expanded20 = 69;
  $66 = ___cxa_find_matching_catch(-1,-1)|0;
  $67 = tempRet0;
  $68 = HEAP32[$28>>2]|0;
  $gep_int58 = $68;
  $69 = $gep_int58;
  u$42 = __ZNSt3__114__shared_count16__release_sharedEv($69)|0;
  ___resumeException($66|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$off0$i = 0, $$0$i$off0$i17 = 0, $$0$ph$be = 0, $$0$ph39 = 0, $$0$pn = 0, $$0$pn$phi = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$phi$trans$insert$pre$pre = 0, $$pre = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i1141 = 0, $$pre$i2$i$i1142 = 0, $$pre40 = 0, $$pre40$pre = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $extract$t$i = 0, $extract$t$i16 = 0;
 var $gep = 0, $gep101 = 0, $gep103 = 0, $gep105 = 0, $gep107 = 0, $gep109 = 0, $gep112 = 0, $gep114 = 0, $gep116 = 0, $gep119 = 0, $gep121 = 0, $gep123 = 0, $gep16 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep30 = 0, $gep35 = 0, $gep37 = 0;
 var $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep63 = 0, $gep65 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep76 = 0, $gep78 = 0, $gep80 = 0;
 var $gep82 = 0, $gep84 = 0, $gep86 = 0, $gep89 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep97 = 0, $gep99 = 0, $gep_array = 0, $gep_array62 = 0, $gep_array67 = 0, $gep_array88 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0;
 var $gep_int111 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0, $gep_int118 = 0, $gep_int12 = 0, $gep_int120 = 0, $gep_int122 = 0, $gep_int124 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int27 = 0, $gep_int28 = 0;
 var $gep_int29 = 0, $gep_int31 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int64 = 0;
 var $gep_int66 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int98 = 0, $isascii1$i = 0, $isascii1$i14 = 0, $isascii1$i4 = 0, $tmp$i$i13 = 0;
 var label = 0, sp = 0, u$17 = 0, u$37 = 0, u$87 = 0, u$96 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $2 = sp + 40|0;
 $3 = sp + 48|0;
 $4 = sp + 56|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $gep_int = $1;
 $5 = $gep_int;
 $6 = HEAP32[$5>>2]|0;
 $7 = $__p$i$i$i$i;
 
 $expanded2 = 8480;
 $gep_int12 = 8480;
 $expanded = $gep_int12;
 $8 = HEAP32[$expanded>>2]|0;
 $9 = ($8|0)==(-1);
 
 do {
  if (!($9)) {
   $gep_int13 = $__p$i$i$i$i;
   $10 = $gep_int13;
   $expanded3 = 8480;
   HEAP32[$10>>2] = $expanded3;
   $gep_int14 = $__p$i$i$i$i;
   $gep = (($gep_int14) + 4)|0;
   $11 = $gep;
   $expanded4 = 177;
   HEAP32[$11>>2] = $expanded4;
   $gep_int15 = $__p$i$i$i$i;
   $gep16 = (($gep_int15) + 8)|0;
   $12 = $gep16;
   HEAP32[$12>>2] = 0;
   __THREW__ = 0;
   $expanded6 = 8480;
   $gep_int17 = 8480;
   $expanded5 = $gep_int17;
   invoke_viii(17,$expanded5|0,$7|0,178);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if (!($14)) {
    break;
   }
   $expanded11 = 69;
   $76 = ___cxa_find_matching_catch(-1,-1)|0;
   $77 = tempRet0;
   $78 = HEAP32[$5>>2]|0;
   $gep_int46 = $78;
   $79 = $gep_int46;
   u$37 = __ZNSt3__114__shared_count16__release_sharedEv($79)|0;
   ___resumeException($76|0);
   // unreachable
  }
 } while(0);
 
 $expanded8 = 8480;
 $gep_int18 = 8480;
 $gep19 = (($gep_int18) + 4)|0;
 $expanded7 = $gep19;
 $15 = HEAP32[$expanded7>>2]|0;
 $16 = (($15) + -1)|0;
 $gep_int20 = $6;
 $gep21 = (($gep_int20) + 12)|0;
 $17 = $gep21;
 $18 = HEAP32[$17>>2]|0;
 $gep_int22 = $6;
 $gep23 = (($gep_int22) + 8)|0;
 $19 = $gep23;
 $20 = HEAP32[$19>>2]|0;
 $21 = $18;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = $23 >> 2;
 $25 = ($24>>>0)>($16>>>0);
 
 do {
  if ($25) {
   $gep_int24 = $20;
   $gep_array = $16<<2;
   $gep25 = (($gep_int24) + ($gep_array))|0;
   $26 = $gep25;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0);
   
   if ($28) {
    break;
   }
   $33 = $27;
   $34 = HEAP32[$5>>2]|0;
   $gep_int26 = $34;
   $35 = $gep_int26;
   u$17 = __ZNSt3__114__shared_count16__release_sharedEv($35)|0;
   HEAP32[$__err>>2] = 0;
   $36 = ($__fmtb|0)==($__fmte|0);
   $gep_int27 = $__b;
   $$phi$trans$insert$pre$pre = $gep_int27;
   
   L8: do {
    if ($36) {
     label = 67;
    } else {
     $gep_int28 = $__e;
     $37 = $gep_int28;
     $38 = $27;
     $gep_int29 = $27;
     $gep30 = (($gep_int29) + 8)|0;
     $39 = $gep30;
     $40 = $39;
     $41 = $27;
     $42 = $this;
     $gep_int31 = $3;
     $43 = $gep_int31;
     $gep_int32 = $4;
     $44 = $gep_int32;
     $gep_int33 = $2;
     $45 = $gep_int33;
     
     $$0$ph39 = $__fmtb;$$pre40 = 0;
     L10: while(1) {
      
      
      
      $46 = $$pre40;
      while(1) {
       
       $47 = ($46|0)==(0);
       
       if (!($47)) {
        label = 67;
        break L8;
       }
       $48 = HEAP32[$$phi$trans$insert$pre$pre>>2]|0;
       $49 = ($48|0)==(0);
       
       do {
        if ($49) {
         $61 = 0;
        } else {
         $gep_int34 = $48;
         $gep35 = (($gep_int34) + 12)|0;
         $50 = $gep35;
         $51 = HEAP32[$50>>2]|0;
         $gep_int36 = $48;
         $gep37 = (($gep_int36) + 16)|0;
         $52 = $gep37;
         $53 = HEAP32[$52>>2]|0;
         $54 = ($51|0)==($53|0);
         
         if (!($54)) {
          $61 = $48;
          break;
         }
         $55 = $48;
         $56 = HEAP32[$48>>2]|0;
         $gep_int38 = $56;
         $gep39 = (($gep_int38) + 36)|0;
         $57 = $gep39;
         $58 = HEAP32[$57>>2]|0;
         $59 = FUNCTION_TABLE_ii[$58 & 127]($48)|0;
         $60 = ($59|0)==(-1);
         
         if (!($60)) {
          $61 = $48;
          break;
         }
         HEAP32[$$phi$trans$insert$pre$pre>>2] = 0;
         
         $61 = 0;
        }
       } while(0);
       
       $62 = ($61|0)==(0);
       $63 = HEAP32[$37>>2]|0;
       $64 = ($63|0)==(0);
       
       L20: do {
        if ($64) {
         label = 20;
        } else {
         $gep_int40 = $63;
         $gep41 = (($gep_int40) + 12)|0;
         $65 = $gep41;
         $66 = HEAP32[$65>>2]|0;
         $gep_int42 = $63;
         $gep43 = (($gep_int42) + 16)|0;
         $67 = $gep43;
         $68 = HEAP32[$67>>2]|0;
         $69 = ($66|0)==($68|0);
         
         do {
          if ($69) {
           $70 = $63;
           $71 = HEAP32[$63>>2]|0;
           $gep_int44 = $71;
           $gep45 = (($gep_int44) + 36)|0;
           $72 = $gep45;
           $73 = HEAP32[$72>>2]|0;
           $74 = FUNCTION_TABLE_ii[$73 & 127]($63)|0;
           $75 = ($74|0)==(-1);
           
           if (!($75)) {
            break;
           }
           HEAP32[$37>>2] = 0;
           
           label = 20;
           break L20;
          }
         } while(0);
         
         if ($62) {
          $80 = $63;
         } else {
          label = 21;
          break L10;
         }
        }
       } while(0);
       if ((label|0) == 20) {
        label = 0;
        
        if ($62) {
         label = 21;
         break L10;
        } else {
         $80 = 0;
        }
       }
       
       $81 = HEAP8[$$0$ph39]|0;
       $82 = HEAP32[$27>>2]|0;
       $gep_int47 = $82;
       $gep48 = (($gep_int47) + 36)|0;
       $83 = $gep48;
       $84 = HEAP32[$83>>2]|0;
       $85 = FUNCTION_TABLE_iiii[$84 & 63]($33,$81,0)|0;
       $86 = ($85<<24>>24)==(37);
       
       if ($86) {
        label = 24;
        break;
       }
       $115 = HEAP8[$$0$ph39]|0;
       $isascii1$i = ($115<<24>>24)>(-1);
       
       if ($isascii1$i) {
        $116 = $115 << 24 >> 24;
        $117 = HEAP32[$39>>2]|0;
        $gep_int61 = $117;
        $gep_array62 = $116<<1;
        $gep63 = (($gep_int61) + ($gep_array62))|0;
        $118 = $gep63;
        $119 = HEAP16[$118>>1]|0;
        $120 = $119 & 8192;
        $121 = ($120<<16>>16)==(0);
        
        if (!($121)) {
         $$0$pn = $$0$ph39;
         label = 35;
         break;
        }
       }
       $gep_int94 = $61;
       $gep95 = (($gep_int94) + 12)|0;
       $183 = $gep95;
       $184 = HEAP32[$183>>2]|0;
       $gep_int96 = $61;
       $gep97 = (($gep_int96) + 16)|0;
       $185 = $gep97;
       $186 = HEAP32[$185>>2]|0;
       $187 = ($184|0)==($186|0);
       
       if ($187) {
        $188 = $61;
        $189 = HEAP32[$61>>2]|0;
        $gep_int98 = $189;
        $gep99 = (($gep_int98) + 36)|0;
        $190 = $gep99;
        $191 = HEAP32[$190>>2]|0;
        $192 = FUNCTION_TABLE_ii[$191 & 127]($61)|0;
        $extract$t$i16 = $192&255;
        
        $$0$i$off0$i17 = $extract$t$i16;
       } else {
        $193 = HEAP8[$184]|0;
        
        $$0$i$off0$i17 = $193;
       }
       
       $194 = HEAP32[$27>>2]|0;
       $gep_int100 = $194;
       $gep101 = (($gep_int100) + 12)|0;
       $195 = $gep101;
       $196 = HEAP32[$195>>2]|0;
       $197 = FUNCTION_TABLE_iii[$196 & 63]($33,$$0$i$off0$i17)|0;
       $198 = HEAP8[$$0$ph39]|0;
       $199 = HEAP32[$27>>2]|0;
       $gep_int102 = $199;
       $gep103 = (($gep_int102) + 12)|0;
       $200 = $gep103;
       $201 = HEAP32[$200>>2]|0;
       $202 = FUNCTION_TABLE_iii[$201 & 63]($33,$198)|0;
       $203 = ($197<<24>>24)==($202<<24>>24);
       
       if ($203) {
        label = 62;
        break;
       }
       HEAP32[$__err>>2] = 4;
       
       $46 = 4;
      }
      L38: do {
       if ((label|0) == 24) {
        label = 0;
        $gep_int49 = $$0$ph39;
        $gep50 = (($gep_int49) + 1)|0;
        $87 = $gep50;
        $88 = ($87|0)==($__fmte|0);
        
        if ($88) {
         label = 25;
         break L10;
        }
        $89 = HEAP8[$87]|0;
        $90 = HEAP32[$27>>2]|0;
        $gep_int51 = $90;
        $gep52 = (($gep_int51) + 36)|0;
        $91 = $gep52;
        $92 = HEAP32[$91>>2]|0;
        $93 = FUNCTION_TABLE_iiii[$92 & 63]($33,$89,0)|0;
        
        if ((($93<<24>>24) == 48) | (($93<<24>>24) == 69)) {
         $gep_int53 = $$0$ph39;
         $gep54 = (($gep_int53) + 2)|0;
         $94 = $gep54;
         $95 = ($94|0)==($__fmte|0);
         
         if ($95) {
          label = 28;
          break L10;
         }
         $96 = HEAP8[$94]|0;
         $97 = HEAP32[$27>>2]|0;
         $gep_int55 = $97;
         $gep56 = (($gep_int55) + 36)|0;
         $98 = $gep56;
         $99 = HEAP32[$98>>2]|0;
         $100 = FUNCTION_TABLE_iiii[$99 & 63]($33,$96,0)|0;
         
         $$1 = $94;$__cmd$0 = $100;$__opt$0 = $93;
        } else {
         $$1 = $87;$__cmd$0 = $93;$__opt$0 = 0;
        }
        
        
        
        $101 = HEAP32[$this>>2]|0;
        $gep_int57 = $101;
        $gep58 = (($gep_int57) + 36)|0;
        $102 = $gep58;
        $103 = HEAP32[$102>>2]|0;
        HEAP32[$43>>2] = $61;
        HEAP32[$44>>2] = $80;
        $104 = $$byval_copy;
        
        $105 = $$byval_copy;
        $106 = $3;
        ;HEAP32[$105+0>>2]=HEAP32[$106+0>>2]|0;
        $107 = $$byval_copy1;
        
        $108 = $$byval_copy1;
        $109 = $4;
        ;HEAP32[$108+0>>2]=HEAP32[$109+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$103 & 3]($2,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $110 = $$byval_copy1;
        
        $111 = $$byval_copy;
        
        $112 = HEAP32[$45>>2]|0;
        HEAP32[$$phi$trans$insert$pre$pre>>2] = $112;
        $gep_int59 = $$1;
        $gep60 = (($gep_int59) + 1)|0;
        $113 = $gep60;
        
        $$0$ph$be = $113;
       }
       else if ((label|0) == 35) {
        while(1) {
         label = 0;
         
         $gep_int64 = $$0$pn;
         $gep65 = (($gep_int64) + 1)|0;
         $$2 = $gep65;
         $122 = ($$2|0)==($__fmte|0);
         
         if ($122) {
          $$2$lcssa = $__fmte;
          break;
         }
         $123 = HEAP8[$$2]|0;
         $isascii1$i4 = ($123<<24>>24)>(-1);
         
         if (!($isascii1$i4)) {
          $$2$lcssa = $$2;
          break;
         }
         $124 = $123 << 24 >> 24;
         $gep_int66 = $117;
         $gep_array67 = $124<<1;
         $gep68 = (($gep_int66) + ($gep_array67))|0;
         $125 = $gep68;
         $126 = HEAP16[$125>>1]|0;
         $127 = $126 & 8192;
         $128 = ($127<<16>>16)==(0);
         
         if ($128) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn$phi = $$2;$$0$pn = $$0$pn$phi;
          label = 35;
         }
        }
        
        
        $$pre$i$i$i7 = $61;$$pre$i2$i$i11 = $80;$129 = $80;
        while(1) {
         
         
         
         $130 = ($$pre$i$i$i7|0)==(0);
         
         do {
          if ($130) {
           $142 = 0;
          } else {
           $gep_int69 = $$pre$i$i$i7;
           $gep70 = (($gep_int69) + 12)|0;
           $131 = $gep70;
           $132 = HEAP32[$131>>2]|0;
           $gep_int71 = $$pre$i$i$i7;
           $gep72 = (($gep_int71) + 16)|0;
           $133 = $gep72;
           $134 = HEAP32[$133>>2]|0;
           $135 = ($132|0)==($134|0);
           
           if (!($135)) {
            $142 = $$pre$i$i$i7;
            break;
           }
           $136 = $$pre$i$i$i7;
           $137 = HEAP32[$$pre$i$i$i7>>2]|0;
           $gep_int73 = $137;
           $gep74 = (($gep_int73) + 36)|0;
           $138 = $gep74;
           $139 = HEAP32[$138>>2]|0;
           $140 = FUNCTION_TABLE_ii[$139 & 127]($$pre$i$i$i7)|0;
           $141 = ($140|0)==(-1);
           
           if (!($141)) {
            $142 = $$pre$i$i$i7;
            break;
           }
           HEAP32[$$phi$trans$insert$pre$pre>>2] = 0;
           
           $142 = 0;
          }
         } while(0);
         
         $143 = ($142|0)==(0);
         $144 = ($129|0)==(0);
         
         do {
          if ($144) {
           $$pre$i2$i$i1142 = $$pre$i2$i$i11;
           label = 48;
          } else {
           $gep_int75 = $129;
           $gep76 = (($gep_int75) + 12)|0;
           $145 = $gep76;
           $146 = HEAP32[$145>>2]|0;
           $gep_int77 = $129;
           $gep78 = (($gep_int77) + 16)|0;
           $147 = $gep78;
           $148 = HEAP32[$147>>2]|0;
           $149 = ($146|0)==($148|0);
           
           if (!($149)) {
            
            if ($143) {
             $$pre$i2$i$i1141 = $$pre$i2$i$i11;$157 = $129;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L38;
            }
           }
           $150 = $129;
           $151 = HEAP32[$129>>2]|0;
           $gep_int79 = $151;
           $gep80 = (($gep_int79) + 36)|0;
           $152 = $gep80;
           $153 = HEAP32[$152>>2]|0;
           $154 = FUNCTION_TABLE_ii[$153 & 127]($129)|0;
           $155 = ($154|0)==(-1);
           
           if ($155) {
            HEAP32[$37>>2] = 0;
            
            $$pre$i2$i$i1142 = 0;
            label = 48;
            break;
           } else {
            $156 = ($$pre$i2$i$i11|0)==(0);
            $tmp$i$i13 = $143 ^ $156;
            
            if ($tmp$i$i13) {
             $$pre$i2$i$i1141 = $$pre$i2$i$i11;$157 = $$pre$i2$i$i11;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L38;
            }
           }
          }
         } while(0);
         if ((label|0) == 48) {
          label = 0;
          
          
          if ($143) {
           $$0$ph$be = $$2$lcssa;
           break L38;
          } else {
           $$pre$i2$i$i1141 = $$pre$i2$i$i1142;$157 = 0;
          }
         }
         
         
         $gep_int81 = $142;
         $gep82 = (($gep_int81) + 12)|0;
         $158 = $gep82;
         $159 = HEAP32[$158>>2]|0;
         $gep_int83 = $142;
         $gep84 = (($gep_int83) + 16)|0;
         $160 = $gep84;
         $161 = HEAP32[$160>>2]|0;
         $162 = ($159|0)==($161|0);
         
         if ($162) {
          $163 = $142;
          $164 = HEAP32[$142>>2]|0;
          $gep_int85 = $164;
          $gep86 = (($gep_int85) + 36)|0;
          $165 = $gep86;
          $166 = HEAP32[$165>>2]|0;
          $167 = FUNCTION_TABLE_ii[$166 & 127]($142)|0;
          $extract$t$i = $167&255;
          
          $$0$i$off0$i = $extract$t$i;
         } else {
          $168 = HEAP8[$159]|0;
          
          $$0$i$off0$i = $168;
         }
         
         $isascii1$i14 = ($$0$i$off0$i<<24>>24)>(-1);
         
         if (!($isascii1$i14)) {
          $$0$ph$be = $$2$lcssa;
          break L38;
         }
         $169 = $$0$i$off0$i << 24 >> 24;
         $170 = HEAP32[$39>>2]|0;
         $gep_int87 = $170;
         $gep_array88 = $169<<1;
         $gep89 = (($gep_int87) + ($gep_array88))|0;
         $171 = $gep89;
         $172 = HEAP16[$171>>1]|0;
         $173 = $172 & 8192;
         $174 = ($173<<16>>16)==(0);
         
         if ($174) {
          $$0$ph$be = $$2$lcssa;
          break L38;
         }
         $175 = HEAP32[$158>>2]|0;
         $176 = HEAP32[$160>>2]|0;
         $177 = ($175|0)==($176|0);
         
         if ($177) {
          $178 = $142;
          $179 = HEAP32[$142>>2]|0;
          $gep_int90 = $179;
          $gep91 = (($gep_int90) + 40)|0;
          $180 = $gep91;
          $181 = HEAP32[$180>>2]|0;
          u$87 = FUNCTION_TABLE_ii[$181 & 127]($142)|0;
          
          $$pre$i$i$i7 = $142;$$pre$i2$i$i11 = $$pre$i2$i$i1141;$129 = $157;
          continue;
         } else {
          $gep_int92 = $175;
          $gep93 = (($gep_int92) + 1)|0;
          $182 = $gep93;
          HEAP32[$158>>2] = $182;
          
          $$pre$i$i$i7 = $142;$$pre$i2$i$i11 = $$pre$i2$i$i1141;$129 = $157;
          continue;
         }
        }
       }
       else if ((label|0) == 62) {
        label = 0;
        $204 = HEAP32[$183>>2]|0;
        $205 = HEAP32[$185>>2]|0;
        $206 = ($204|0)==($205|0);
        
        if ($206) {
         $207 = $61;
         $208 = HEAP32[$61>>2]|0;
         $gep_int104 = $208;
         $gep105 = (($gep_int104) + 40)|0;
         $209 = $gep105;
         $210 = HEAP32[$209>>2]|0;
         u$96 = FUNCTION_TABLE_ii[$210 & 127]($61)|0;
         
        } else {
         $gep_int106 = $204;
         $gep107 = (($gep_int106) + 1)|0;
         $211 = $gep107;
         HEAP32[$183>>2] = $211;
         
        }
        $gep_int108 = $$0$ph39;
        $gep109 = (($gep_int108) + 1)|0;
        $212 = $gep109;
        
        $$0$ph$be = $212;
       }
      } while(0);
      
      $114 = ($$0$ph$be|0)==($__fmte|0);
      
      if ($114) {
       label = 67;
       break L8;
      }
      $$pre40$pre = HEAP32[$__err>>2]|0;
      
      $$0$ph39 = $$0$ph$be;$$pre40 = $$pre40$pre;
     }
     if ((label|0) == 21) {
      HEAP32[$__err>>2] = 4;
      
      $$pre$i$i$i21 = $61;
      break;
     }
     else if ((label|0) == 25) {
      HEAP32[$__err>>2] = 4;
      
      $$pre$i$i$i21 = $61;
      break;
     }
     else if ((label|0) == 28) {
      HEAP32[$__err>>2] = 4;
      
      $$pre$i$i$i21 = $61;
      break;
     }
    }
   } while(0);
   if ((label|0) == 67) {
    $$pre = HEAP32[$$phi$trans$insert$pre$pre>>2]|0;
    
    $$pre$i$i$i21 = $$pre;
   }
   
   $gep_int110 = $__b;
   $213 = $gep_int110;
   $214 = ($$pre$i$i$i21|0)==(0);
   
   do {
    if ($214) {
     $226 = 0;
    } else {
     $gep_int111 = $$pre$i$i$i21;
     $gep112 = (($gep_int111) + 12)|0;
     $215 = $gep112;
     $216 = HEAP32[$215>>2]|0;
     $gep_int113 = $$pre$i$i$i21;
     $gep114 = (($gep_int113) + 16)|0;
     $217 = $gep114;
     $218 = HEAP32[$217>>2]|0;
     $219 = ($216|0)==($218|0);
     
     if (!($219)) {
      $226 = $$pre$i$i$i21;
      break;
     }
     $220 = $$pre$i$i$i21;
     $221 = HEAP32[$$pre$i$i$i21>>2]|0;
     $gep_int115 = $221;
     $gep116 = (($gep_int115) + 36)|0;
     $222 = $gep116;
     $223 = HEAP32[$222>>2]|0;
     $224 = FUNCTION_TABLE_ii[$223 & 127]($$pre$i$i$i21)|0;
     $225 = ($224|0)==(-1);
     
     if (!($225)) {
      $226 = $$pre$i$i$i21;
      break;
     }
     HEAP32[$213>>2] = 0;
     
     $226 = 0;
    }
   } while(0);
   
   $227 = ($226|0)==(0);
   $gep_int117 = $__e;
   $228 = $gep_int117;
   $229 = HEAP32[$228>>2]|0;
   $230 = ($229|0)==(0);
   
   L96: do {
    if ($230) {
     label = 77;
    } else {
     $gep_int118 = $229;
     $gep119 = (($gep_int118) + 12)|0;
     $231 = $gep119;
     $232 = HEAP32[$231>>2]|0;
     $gep_int120 = $229;
     $gep121 = (($gep_int120) + 16)|0;
     $233 = $gep121;
     $234 = HEAP32[$233>>2]|0;
     $235 = ($232|0)==($234|0);
     
     do {
      if ($235) {
       $236 = $229;
       $237 = HEAP32[$229>>2]|0;
       $gep_int122 = $237;
       $gep123 = (($gep_int122) + 36)|0;
       $238 = $gep123;
       $239 = HEAP32[$238>>2]|0;
       $240 = FUNCTION_TABLE_ii[$239 & 127]($229)|0;
       $241 = ($240|0)==(-1);
       
       if (!($241)) {
        break;
       }
       HEAP32[$228>>2] = 0;
       
       label = 77;
       break L96;
      }
     } while(0);
     
     if (!($227)) {
      break;
     }
     $gep_int124 = $agg$result;
     $244 = $gep_int124;
     HEAP32[$244>>2] = $226;
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 77) {
     
     if ($227) {
      break;
     }
     $gep_int124 = $agg$result;
     $244 = $gep_int124;
     HEAP32[$244>>2] = $226;
     STACKTOP = sp;return;
    }
   } while(0);
   $242 = HEAP32[$__err>>2]|0;
   $243 = $242 | 2;
   HEAP32[$__err>>2] = $243;
   
   $gep_int124 = $agg$result;
   $244 = $gep_int124;
   HEAP32[$244>>2] = $226;
   STACKTOP = sp;return;
  }
 } while(0);
 $29 = ___cxa_allocate_exception(4)|0;
 $30 = $29;
 __ZNSt8bad_castC2Ev($30);
 __THREW__ = 0;
 $expanded9 = 16440;
 $expanded10 = 119;
 invoke_viii(5,$29|0,$expanded9|0,$expanded10|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 
 if ($32) {
  $expanded11 = 69;
  $76 = ___cxa_find_matching_catch(-1,-1)|0;
  $77 = tempRet0;
  $78 = HEAP32[$5>>2]|0;
  $gep_int46 = $78;
  $79 = $gep_int46;
  u$37 = __ZNSt3__114__shared_count16__release_sharedEv($79)|0;
  ___resumeException($76|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded2 = 0;
 var $gep = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int3 = $1;
 $5 = $gep_int3;
 HEAP32[$5>>2] = $4;
 $gep_int4 = $__e;
 $6 = $gep_int4;
 $7 = HEAP32[$6>>2]|0;
 $gep_int5 = $2;
 $8 = $gep_int5;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 $gep_int6 = 7384;
 $expanded = $gep_int6;
 $gep_int7 = 7384;
 $gep = (($gep_int7) + 8)|0;
 $expanded2 = $gep;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$expanded,$expanded2);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep3 = 0, $gep9 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int7 = 0, $gep_int8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $3 = $gep;
 $4 = $3;
 $5 = HEAP32[$3>>2]|0;
 $gep_int2 = $5;
 $gep3 = (($gep_int2) + 20)|0;
 $6 = $gep3;
 $7 = HEAP32[$6>>2]|0;
 $8 = FUNCTION_TABLE_ii[$7 & 127]($3)|0;
 $gep_int4 = $__b;
 $9 = $gep_int4;
 $10 = HEAP32[$9>>2]|0;
 $gep_int5 = $1;
 $11 = $gep_int5;
 HEAP32[$11>>2] = $10;
 $gep_int6 = $__e;
 $12 = $gep_int6;
 $13 = HEAP32[$12>>2]|0;
 $gep_int7 = $2;
 $14 = $gep_int7;
 HEAP32[$14>>2] = $13;
 $15 = $8;
 $16 = HEAP8[$8]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 
 if ($18) {
  $23 = $8;
  $gep_int12 = $8;
  $gep13 = (($gep_int12) + 1)|0;
  $24 = $gep13;
  $25 = $8;
  $gep_int14 = $8;
  $gep15 = (($gep_int14) + 1)|0;
  $26 = $gep15;
  $27 = $16&255;
  $28 = $27 >>> 1;
  
  $29 = $26;$30 = $24;$31 = $28;
 } else {
  $gep_int8 = $8;
  $gep9 = (($gep_int8) + 8)|0;
  $19 = $gep9;
  $20 = HEAP32[$19>>2]|0;
  $gep_int10 = $8;
  $gep11 = (($gep_int10) + 4)|0;
  $21 = $gep11;
  $22 = HEAP32[$21>>2]|0;
  
  $29 = $20;$30 = $20;$31 = $22;
 }
 
 
 
 $gep_int16 = $29;
 $gep17 = (($gep_int16) + ($31))|0;
 $32 = $gep17;
 $33 = $$byval_copy;
 
 $34 = $$byval_copy;
 $35 = $1;
 ;HEAP32[$34+0>>2]=HEAP32[$35+0>>2]|0;
 $36 = $$byval_copy1;
 
 $37 = $$byval_copy1;
 $38 = $2;
 ;HEAP32[$37+0>>2]=HEAP32[$38+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$30,$32);
 $39 = $$byval_copy1;
 
 $40 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep15 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0;
 var $gep24 = 0, $gep28 = 0, $gep31 = 0, $gep33 = 0, $gep_array = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int30 = 0;
 var $gep_int32 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, label = 0, sp = 0, u$17 = 0, u$29 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 
 $expanded1 = 8480;
 $gep_int11 = 8480;
 $expanded = $gep_int11;
 $6 = HEAP32[$expanded>>2]|0;
 $7 = ($6|0)==(-1);
 
 do {
  if (!($7)) {
   $gep_int12 = $__p$i$i$i$i;
   $8 = $gep_int12;
   $expanded2 = 8480;
   HEAP32[$8>>2] = $expanded2;
   $gep_int13 = $__p$i$i$i$i;
   $gep = (($gep_int13) + 4)|0;
   $9 = $gep;
   $expanded3 = 177;
   HEAP32[$9>>2] = $expanded3;
   $gep_int14 = $__p$i$i$i$i;
   $gep15 = (($gep_int14) + 8)|0;
   $10 = $gep15;
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   $expanded5 = 8480;
   $gep_int16 = 8480;
   $expanded4 = $gep_int16;
   invoke_viii(17,$expanded4|0,$5|0,178);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if (!($12)) {
    break;
   }
   $expanded10 = 69;
   $59 = ___cxa_find_matching_catch(-1,-1)|0;
   $60 = tempRet0;
   $61 = HEAP32[$3>>2]|0;
   $gep_int36 = $61;
   $62 = $gep_int36;
   u$29 = __ZNSt3__114__shared_count16__release_sharedEv($62)|0;
   ___resumeException($59|0);
   // unreachable
  }
 } while(0);
 
 $expanded7 = 8480;
 $gep_int17 = 8480;
 $gep18 = (($gep_int17) + 4)|0;
 $expanded6 = $gep18;
 $13 = HEAP32[$expanded6>>2]|0;
 $14 = (($13) + -1)|0;
 $gep_int19 = $4;
 $gep20 = (($gep_int19) + 12)|0;
 $15 = $gep20;
 $16 = HEAP32[$15>>2]|0;
 $gep_int21 = $4;
 $gep22 = (($gep_int21) + 8)|0;
 $17 = $gep22;
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 
 do {
  if ($23) {
   $gep_int23 = $18;
   $gep_array = $14<<2;
   $gep24 = (($gep_int23) + ($gep_array))|0;
   $24 = $gep24;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $gep_int25 = $32;
   $33 = $gep_int25;
   u$17 = __ZNSt3__114__shared_count16__release_sharedEv($33)|0;
   $gep_int26 = $__e;
   $34 = $gep_int26;
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   
   $gep_int27 = $this;
   $gep28 = (($gep_int27) + 8)|0;
   $37 = $gep28;
   $38 = $37;
   $39 = HEAP32[$37>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = FUNCTION_TABLE_ii[$40 & 127]($37)|0;
   $gep_int29 = $1;
   $42 = $gep_int29;
   HEAP32[$42>>2] = $35;
   $gep_int30 = $41;
   $gep31 = (($gep_int30) + 168)|0;
   $43 = $gep31;
   $44 = $$byval_copy;
   
   $45 = $$byval_copy;
   $46 = $1;
   ;HEAP32[$45+0>>2]=HEAP32[$46+0>>2]|0;
   $47 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$41,$43,$31,$__err,0)|0;
   $48 = $$byval_copy;
   
   $49 = $47;
   $50 = $41;
   $51 = (($49) - ($50))|0;
   $52 = ($51|0)<(168);
   
   if (!($52)) {
    
    $gep_int34 = $__b;
    $56 = $gep_int34;
    $57 = HEAP32[$56>>2]|0;
    $gep_int35 = $agg$result;
    $58 = $gep_int35;
    HEAP32[$58>>2] = $57;
    STACKTOP = sp;return;
   }
   $gep_int32 = $__tm;
   $gep33 = (($gep_int32) + 24)|0;
   $53 = $gep33;
   $54 = (($51|0) / 12)&-1;
   $55 = (($54|0) % 7)&-1;
   HEAP32[$53>>2] = $55;
   
   
   $gep_int34 = $__b;
   $56 = $gep_int34;
   $57 = HEAP32[$56>>2]|0;
   $gep_int35 = $agg$result;
   $58 = $gep_int35;
   HEAP32[$58>>2] = $57;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = ___cxa_allocate_exception(4)|0;
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 $expanded8 = 16440;
 $expanded9 = 119;
 invoke_viii(5,$27|0,$expanded8|0,$expanded9|0);
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 
 if ($30) {
  $expanded10 = 69;
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $61 = HEAP32[$3>>2]|0;
  $gep_int36 = $61;
  $62 = $gep_int36;
  u$29 = __ZNSt3__114__shared_count16__release_sharedEv($62)|0;
  ___resumeException($59|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep15 = 0, $gep18 = 0, $gep20 = 0;
 var $gep22 = 0, $gep24 = 0, $gep28 = 0, $gep30 = 0, $gep33 = 0, $gep35 = 0, $gep_array = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int27 = 0;
 var $gep_int29 = 0, $gep_int31 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, label = 0, sp = 0, u$17 = 0, u$29 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 
 $expanded1 = 8480;
 $gep_int11 = 8480;
 $expanded = $gep_int11;
 $6 = HEAP32[$expanded>>2]|0;
 $7 = ($6|0)==(-1);
 
 do {
  if (!($7)) {
   $gep_int12 = $__p$i$i$i$i;
   $8 = $gep_int12;
   $expanded2 = 8480;
   HEAP32[$8>>2] = $expanded2;
   $gep_int13 = $__p$i$i$i$i;
   $gep = (($gep_int13) + 4)|0;
   $9 = $gep;
   $expanded3 = 177;
   HEAP32[$9>>2] = $expanded3;
   $gep_int14 = $__p$i$i$i$i;
   $gep15 = (($gep_int14) + 8)|0;
   $10 = $gep15;
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   $expanded5 = 8480;
   $gep_int16 = 8480;
   $expanded4 = $gep_int16;
   invoke_viii(17,$expanded4|0,$5|0,178);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if (!($12)) {
    break;
   }
   $expanded10 = 69;
   $60 = ___cxa_find_matching_catch(-1,-1)|0;
   $61 = tempRet0;
   $62 = HEAP32[$3>>2]|0;
   $gep_int38 = $62;
   $63 = $gep_int38;
   u$29 = __ZNSt3__114__shared_count16__release_sharedEv($63)|0;
   ___resumeException($60|0);
   // unreachable
  }
 } while(0);
 
 $expanded7 = 8480;
 $gep_int17 = 8480;
 $gep18 = (($gep_int17) + 4)|0;
 $expanded6 = $gep18;
 $13 = HEAP32[$expanded6>>2]|0;
 $14 = (($13) + -1)|0;
 $gep_int19 = $4;
 $gep20 = (($gep_int19) + 12)|0;
 $15 = $gep20;
 $16 = HEAP32[$15>>2]|0;
 $gep_int21 = $4;
 $gep22 = (($gep_int21) + 8)|0;
 $17 = $gep22;
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 
 do {
  if ($23) {
   $gep_int23 = $18;
   $gep_array = $14<<2;
   $gep24 = (($gep_int23) + ($gep_array))|0;
   $24 = $gep24;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $gep_int25 = $32;
   $33 = $gep_int25;
   u$17 = __ZNSt3__114__shared_count16__release_sharedEv($33)|0;
   $gep_int26 = $__e;
   $34 = $gep_int26;
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   
   $gep_int27 = $this;
   $gep28 = (($gep_int27) + 8)|0;
   $37 = $gep28;
   $38 = $37;
   $39 = HEAP32[$37>>2]|0;
   $gep_int29 = $39;
   $gep30 = (($gep_int29) + 4)|0;
   $40 = $gep30;
   $41 = HEAP32[$40>>2]|0;
   $42 = FUNCTION_TABLE_ii[$41 & 127]($37)|0;
   $gep_int31 = $1;
   $43 = $gep_int31;
   HEAP32[$43>>2] = $35;
   $gep_int32 = $42;
   $gep33 = (($gep_int32) + 288)|0;
   $44 = $gep33;
   $45 = $$byval_copy;
   
   $46 = $$byval_copy;
   $47 = $1;
   ;HEAP32[$46+0>>2]=HEAP32[$47+0>>2]|0;
   $48 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$42,$44,$31,$__err,0)|0;
   $49 = $$byval_copy;
   
   $50 = $48;
   $51 = $42;
   $52 = (($50) - ($51))|0;
   $53 = ($52|0)<(288);
   
   if (!($53)) {
    
    $gep_int36 = $__b;
    $57 = $gep_int36;
    $58 = HEAP32[$57>>2]|0;
    $gep_int37 = $agg$result;
    $59 = $gep_int37;
    HEAP32[$59>>2] = $58;
    STACKTOP = sp;return;
   }
   $gep_int34 = $__tm;
   $gep35 = (($gep_int34) + 16)|0;
   $54 = $gep35;
   $55 = (($52|0) / 12)&-1;
   $56 = (($55|0) % 12)&-1;
   HEAP32[$54>>2] = $56;
   
   
   $gep_int36 = $__b;
   $57 = $gep_int36;
   $58 = HEAP32[$57>>2]|0;
   $gep_int37 = $agg$result;
   $59 = $gep_int37;
   HEAP32[$59>>2] = $58;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = ___cxa_allocate_exception(4)|0;
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 $expanded8 = 16440;
 $expanded9 = 119;
 invoke_viii(5,$27|0,$expanded8|0,$expanded9|0);
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 
 if ($30) {
  $expanded10 = 69;
  $60 = ___cxa_find_matching_catch(-1,-1)|0;
  $61 = tempRet0;
  $62 = HEAP32[$3>>2]|0;
  $gep_int38 = $62;
  $63 = $gep_int38;
  u$29 = __ZNSt3__114__shared_count16__release_sharedEv($63)|0;
  ___resumeException($60|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep15 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0;
 var $gep27 = 0, $gep_array = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int32 = 0, label = 0;
 var sp = 0, u$17 = 0, u$32 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 
 $expanded1 = 8480;
 $gep_int11 = 8480;
 $expanded = $gep_int11;
 $6 = HEAP32[$expanded>>2]|0;
 $7 = ($6|0)==(-1);
 
 do {
  if (!($7)) {
   $gep_int12 = $__p$i$i$i$i;
   $8 = $gep_int12;
   $expanded2 = 8480;
   HEAP32[$8>>2] = $expanded2;
   $gep_int13 = $__p$i$i$i$i;
   $gep = (($gep_int13) + 4)|0;
   $9 = $gep;
   $expanded3 = 177;
   HEAP32[$9>>2] = $expanded3;
   $gep_int14 = $__p$i$i$i$i;
   $gep15 = (($gep_int14) + 8)|0;
   $10 = $gep15;
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   $expanded5 = 8480;
   $gep_int16 = 8480;
   $expanded4 = $gep_int16;
   invoke_viii(17,$expanded4|0,$5|0,178);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if (!($12)) {
    break;
   }
   $expanded10 = 69;
   $55 = ___cxa_find_matching_catch(-1,-1)|0;
   $56 = tempRet0;
   $57 = HEAP32[$3>>2]|0;
   $gep_int32 = $57;
   $58 = $gep_int32;
   u$32 = __ZNSt3__114__shared_count16__release_sharedEv($58)|0;
   ___resumeException($55|0);
   // unreachable
  }
 } while(0);
 
 $expanded7 = 8480;
 $gep_int17 = 8480;
 $gep18 = (($gep_int17) + 4)|0;
 $expanded6 = $gep18;
 $13 = HEAP32[$expanded6>>2]|0;
 $14 = (($13) + -1)|0;
 $gep_int19 = $4;
 $gep20 = (($gep_int19) + 12)|0;
 $15 = $gep20;
 $16 = HEAP32[$15>>2]|0;
 $gep_int21 = $4;
 $gep22 = (($gep_int21) + 8)|0;
 $17 = $gep22;
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 
 do {
  if ($23) {
   $gep_int23 = $18;
   $gep_array = $14<<2;
   $gep24 = (($gep_int23) + ($gep_array))|0;
   $24 = $gep24;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $gep_int25 = $32;
   $33 = $gep_int25;
   u$17 = __ZNSt3__114__shared_count16__release_sharedEv($33)|0;
   $gep_int26 = $__tm;
   $gep27 = (($gep_int26) + 20)|0;
   $34 = $gep27;
   $gep_int28 = $__e;
   $35 = $gep_int28;
   $36 = HEAP32[$35>>2]|0;
   $37 = $1;
   
   $gep_int29 = $1;
   $38 = $gep_int29;
   HEAP32[$38>>2] = $36;
   $39 = $$byval_copy;
   
   $40 = $$byval_copy;
   $41 = $1;
   ;HEAP32[$40+0>>2]=HEAP32[$41+0>>2]|0;
   $42 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$31,4)|0;
   $43 = $$byval_copy;
   
   $44 = HEAP32[$__err>>2]|0;
   $45 = $44 & 4;
   $46 = ($45|0)==(0);
   
   if (!($46)) {
    
    $gep_int30 = $__b;
    $52 = $gep_int30;
    $53 = HEAP32[$52>>2]|0;
    $gep_int31 = $agg$result;
    $54 = $gep_int31;
    HEAP32[$54>>2] = $53;
    STACKTOP = sp;return;
   }
   $47 = ($42|0)<(69);
   
   if ($47) {
    $48 = (($42) + 2000)|0;
    
    $__t$0$i = $48;
   } else {
    $$off$i = (($42) + -69)|0;
    $49 = ($$off$i>>>0)<(31);
    $50 = (($42) + 1900)|0;
    $$$i = $49 ? $50 : $42;
    
    $__t$0$i = $$$i;
   }
   
   $51 = (($__t$0$i) + -1900)|0;
   HEAP32[$34>>2] = $51;
   
   
   $gep_int30 = $__b;
   $52 = $gep_int30;
   $53 = HEAP32[$52>>2]|0;
   $gep_int31 = $agg$result;
   $54 = $gep_int31;
   HEAP32[$54>>2] = $53;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = ___cxa_allocate_exception(4)|0;
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 $expanded8 = 16440;
 $expanded9 = 119;
 invoke_viii(5,$27|0,$expanded8|0,$expanded9|0);
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 
 if ($30) {
  $expanded10 = 69;
  $55 = ___cxa_find_matching_catch(-1,-1)|0;
  $56 = tempRet0;
  $57 = HEAP32[$3>>2]|0;
  $gep_int32 = $57;
  $58 = $gep_int32;
  u$32 = __ZNSt3__114__shared_count16__release_sharedEv($58)|0;
  ___resumeException($55|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,u$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 u$0 = u$0|0;
 var $$$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0;
 var $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $expanded = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0;
 var $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep105 = 0;
 var $gep114 = 0, $gep122 = 0, $gep127 = 0, $gep129 = 0, $gep135 = 0, $gep139 = 0, $gep143 = 0, $gep147 = 0, $gep156 = 0, $gep164 = 0, $gep175 = 0, $gep180 = 0, $gep182 = 0, $gep188 = 0, $gep190 = 0, $gep196 = 0, $gep198 = 0, $gep200 = 0, $gep202 = 0, $gep204 = 0;
 var $gep207 = 0, $gep213 = 0, $gep55 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep69 = 0, $gep72 = 0, $gep74 = 0, $gep77 = 0, $gep79 = 0, $gep82 = 0, $gep84 = 0, $gep86 = 0, $gep88 = 0, $gep94 = 0, $gep96 = 0, $gep98 = 0, $gep_array = 0;
 var $gep_int = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int107 = 0, $gep_int108 = 0, $gep_int109 = 0, $gep_int110 = 0, $gep_int111 = 0, $gep_int112 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int116 = 0, $gep_int117 = 0, $gep_int118 = 0, $gep_int119 = 0, $gep_int120 = 0, $gep_int121 = 0, $gep_int123 = 0;
 var $gep_int124 = 0, $gep_int125 = 0, $gep_int126 = 0, $gep_int128 = 0, $gep_int130 = 0, $gep_int131 = 0, $gep_int132 = 0, $gep_int133 = 0, $gep_int134 = 0, $gep_int136 = 0, $gep_int137 = 0, $gep_int138 = 0, $gep_int140 = 0, $gep_int141 = 0, $gep_int142 = 0, $gep_int144 = 0, $gep_int145 = 0, $gep_int146 = 0, $gep_int148 = 0, $gep_int149 = 0;
 var $gep_int150 = 0, $gep_int151 = 0, $gep_int152 = 0, $gep_int153 = 0, $gep_int154 = 0, $gep_int155 = 0, $gep_int157 = 0, $gep_int158 = 0, $gep_int159 = 0, $gep_int160 = 0, $gep_int161 = 0, $gep_int162 = 0, $gep_int163 = 0, $gep_int165 = 0, $gep_int166 = 0, $gep_int167 = 0, $gep_int168 = 0, $gep_int169 = 0, $gep_int170 = 0, $gep_int171 = 0;
 var $gep_int172 = 0, $gep_int173 = 0, $gep_int174 = 0, $gep_int176 = 0, $gep_int177 = 0, $gep_int178 = 0, $gep_int179 = 0, $gep_int181 = 0, $gep_int183 = 0, $gep_int184 = 0, $gep_int185 = 0, $gep_int186 = 0, $gep_int187 = 0, $gep_int189 = 0, $gep_int191 = 0, $gep_int192 = 0, $gep_int193 = 0, $gep_int194 = 0, $gep_int195 = 0, $gep_int197 = 0;
 var $gep_int199 = 0, $gep_int201 = 0, $gep_int203 = 0, $gep_int205 = 0, $gep_int206 = 0, $gep_int208 = 0, $gep_int209 = 0, $gep_int210 = 0, $gep_int211 = 0, $gep_int212 = 0, $gep_int214 = 0, $gep_int215 = 0, $gep_int216 = 0, $gep_int217 = 0, $gep_int51 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int57 = 0;
 var $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int67 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int90 = 0;
 var $gep_int91 = 0, $gep_int92 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int99 = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i24 = 0, $or$cond$i27 = 0, label = 0, sp = 0, u$19 = 0, u$21 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0;
 $$byval_copy30 = sp;
 $$byval_copy29 = sp + 8|0;
 $$byval_copy28 = sp + 16|0;
 $$byval_copy27 = sp + 24|0;
 $$byval_copy26 = sp + 32|0;
 $$byval_copy25 = sp + 40|0;
 $$byval_copy24 = sp + 48|0;
 $$byval_copy23 = sp + 56|0;
 $$byval_copy22 = sp + 64|0;
 $$byval_copy21 = sp + 72|0;
 $$byval_copy20 = sp + 80|0;
 $$byval_copy19 = sp + 88|0;
 $$byval_copy18 = sp + 96|0;
 $$byval_copy17 = sp + 104|0;
 $$byval_copy16 = sp + 112|0;
 $$byval_copy15 = sp + 120|0;
 $$byval_copy14 = sp + 128|0;
 $$byval_copy13 = sp + 136|0;
 $$byval_copy12 = sp + 144|0;
 $$byval_copy11 = sp + 152|0;
 $$byval_copy10 = sp + 160|0;
 $$byval_copy9 = sp + 168|0;
 $$byval_copy8 = sp + 176|0;
 $$byval_copy7 = sp + 184|0;
 $$byval_copy6 = sp + 192|0;
 $$byval_copy5 = sp + 200|0;
 $$byval_copy4 = sp + 208|0;
 $$byval_copy3 = sp + 216|0;
 $$byval_copy2 = sp + 224|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 280|0;
 $6 = sp + 288|0;
 $7 = sp + 296|0;
 $8 = sp + 304|0;
 $9 = sp + 312|0;
 $10 = sp + 320|0;
 $11 = sp + 328|0;
 $12 = sp + 336|0;
 $__p$i$i$i$i = sp + 344|0;
 $13 = sp + 360|0;
 $14 = sp + 368|0;
 $15 = sp + 376|0;
 $16 = sp + 384|0;
 $17 = sp + 392|0;
 $18 = sp + 400|0;
 $19 = sp + 408|0;
 $20 = sp + 416|0;
 $21 = sp + 424|0;
 $22 = sp + 432|0;
 $23 = sp + 440|0;
 $24 = sp + 448|0;
 $25 = sp + 456|0;
 $26 = sp + 464|0;
 $27 = sp + 472|0;
 $28 = sp + 480|0;
 $29 = sp + 488|0;
 $30 = sp + 496|0;
 $31 = sp + 504|0;
 $32 = sp + 512|0;
 $33 = sp + 520|0;
 $34 = sp + 528|0;
 $35 = sp + 536|0;
 $36 = sp + 544|0;
 $37 = sp + 552|0;
 $38 = sp + 560|0;
 $39 = sp + 568|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($13,$__iob);
 $gep_int = $13;
 $40 = $gep_int;
 $41 = HEAP32[$40>>2]|0;
 $42 = $__p$i$i$i$i;
 
 $expanded31 = 8480;
 $gep_int51 = 8480;
 $expanded = $gep_int51;
 $43 = HEAP32[$expanded>>2]|0;
 $44 = ($43|0)==(-1);
 
 do {
  if (!($44)) {
   $gep_int52 = $__p$i$i$i$i;
   $45 = $gep_int52;
   $expanded32 = 8480;
   HEAP32[$45>>2] = $expanded32;
   $gep_int53 = $__p$i$i$i$i;
   $gep = (($gep_int53) + 4)|0;
   $46 = $gep;
   $expanded33 = 177;
   HEAP32[$46>>2] = $expanded33;
   $gep_int54 = $__p$i$i$i$i;
   $gep55 = (($gep_int54) + 8)|0;
   $47 = $gep55;
   HEAP32[$47>>2] = 0;
   __THREW__ = 0;
   $expanded35 = 8480;
   $gep_int56 = 8480;
   $expanded34 = $gep_int56;
   invoke_viii(17,$expanded34|0,$42|0,178);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   
   if (!($49)) {
    break;
   }
   $expanded40 = 69;
   $72 = ___cxa_find_matching_catch(-1,-1)|0;
   $73 = tempRet0;
   $74 = HEAP32[$40>>2]|0;
   $gep_int66 = $74;
   $75 = $gep_int66;
   u$21 = __ZNSt3__114__shared_count16__release_sharedEv($75)|0;
   ___resumeException($72|0);
   // unreachable
  }
 } while(0);
 
 $expanded37 = 8480;
 $gep_int57 = 8480;
 $gep58 = (($gep_int57) + 4)|0;
 $expanded36 = $gep58;
 $50 = HEAP32[$expanded36>>2]|0;
 $51 = (($50) + -1)|0;
 $gep_int59 = $41;
 $gep60 = (($gep_int59) + 12)|0;
 $52 = $gep60;
 $53 = HEAP32[$52>>2]|0;
 $gep_int61 = $41;
 $gep62 = (($gep_int61) + 8)|0;
 $54 = $gep62;
 $55 = HEAP32[$54>>2]|0;
 $56 = $53;
 $57 = $55;
 $58 = (($56) - ($57))|0;
 $59 = $58 >> 2;
 $60 = ($59>>>0)>($51>>>0);
 
 do {
  if ($60) {
   $gep_int63 = $55;
   $gep_array = $51<<2;
   $gep64 = (($gep_int63) + ($gep_array))|0;
   $61 = $gep64;
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0);
   
   if ($63) {
    break;
   }
   $68 = $62;
   $69 = HEAP32[$40>>2]|0;
   $gep_int65 = $69;
   $70 = $gep_int65;
   u$19 = __ZNSt3__114__shared_count16__release_sharedEv($70)|0;
   $71 = $__fmt << 24 >> 24;
   
   L8: do {
    switch ($71|0) {
    case 104: case 66: case 98:  {
     $gep_int75 = $__e;
     $98 = $gep_int75;
     $99 = HEAP32[$98>>2]|0;
     $100 = $11;
     
     $gep_int76 = $this;
     $gep77 = (($gep_int76) + 8)|0;
     $101 = $gep77;
     $102 = $101;
     $103 = HEAP32[$101>>2]|0;
     $gep_int78 = $103;
     $gep79 = (($gep_int78) + 4)|0;
     $104 = $gep79;
     $105 = HEAP32[$104>>2]|0;
     $106 = FUNCTION_TABLE_ii[$105 & 127]($101)|0;
     $gep_int80 = $11;
     $107 = $gep_int80;
     HEAP32[$107>>2] = $99;
     $gep_int81 = $106;
     $gep82 = (($gep_int81) + 288)|0;
     $108 = $gep82;
     $109 = $$byval_copy1;
     
     $110 = $$byval_copy1;
     $111 = $11;
     ;HEAP32[$110+0>>2]=HEAP32[$111+0>>2]|0;
     $112 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy1,$106,$108,$68,$__err,0)|0;
     $113 = $$byval_copy1;
     
     $114 = $112;
     $115 = $106;
     $116 = (($114) - ($115))|0;
     $117 = ($116|0)<(288);
     
     if (!($117)) {
      break L8;
     }
     $gep_int83 = $__tm;
     $gep84 = (($gep_int83) + 16)|0;
     $118 = $gep84;
     $119 = (($116|0) / 12)&-1;
     $120 = (($119|0) % 12)&-1;
     HEAP32[$118>>2] = $120;
     
     break;
    }
    case 101: case 100:  {
     $gep_int104 = $__tm;
     $gep105 = (($gep_int104) + 12)|0;
     $161 = $gep105;
     $gep_int106 = $__e;
     $162 = $gep_int106;
     $163 = HEAP32[$162>>2]|0;
     $164 = $10;
     
     $gep_int107 = $10;
     $165 = $gep_int107;
     HEAP32[$165>>2] = $163;
     $166 = $$byval_copy4;
     
     $167 = $$byval_copy4;
     $168 = $10;
     ;HEAP32[$167+0>>2]=HEAP32[$168+0>>2]|0;
     $169 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy4,$__err,$68,2)|0;
     $170 = $$byval_copy4;
     
     $171 = HEAP32[$__err>>2]|0;
     $172 = $171 & 4;
     $173 = ($172|0)==(0);
     
     do {
      if ($173) {
       $$off$i = (($169) + -1)|0;
       $174 = ($$off$i>>>0)<(31);
       
       if (!($174)) {
        break;
       }
       HEAP32[$161>>2] = $169;
       
       break L8;
      }
     } while(0);
     $175 = $171 | 4;
     HEAP32[$__err>>2] = $175;
     
     break;
    }
    case 68:  {
     $gep_int108 = $__b;
     $176 = $gep_int108;
     $177 = HEAP32[$176>>2]|0;
     $gep_int109 = $18;
     $178 = $gep_int109;
     HEAP32[$178>>2] = $177;
     $gep_int110 = $__e;
     $179 = $gep_int110;
     $180 = HEAP32[$179>>2]|0;
     $gep_int111 = $19;
     $181 = $gep_int111;
     HEAP32[$181>>2] = $180;
     $182 = $$byval_copy5;
     
     $183 = $$byval_copy5;
     $184 = $18;
     ;HEAP32[$183+0>>2]=HEAP32[$184+0>>2]|0;
     $185 = $$byval_copy6;
     
     $186 = $$byval_copy6;
     $187 = $19;
     ;HEAP32[$186+0>>2]=HEAP32[$187+0>>2]|0;
     $gep_int112 = 7392;
     $expanded41 = $gep_int112;
     $gep_int113 = 7392;
     $gep114 = (($gep_int113) + 8)|0;
     $expanded42 = $gep114;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($17,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,$expanded41,$expanded42);
     $188 = $$byval_copy6;
     
     $189 = $$byval_copy5;
     
     $gep_int115 = $17;
     $190 = $gep_int115;
     $191 = HEAP32[$190>>2]|0;
     HEAP32[$176>>2] = $191;
     
     break;
    }
    case 70:  {
     $gep_int116 = $__b;
     $192 = $gep_int116;
     $193 = HEAP32[$192>>2]|0;
     $gep_int117 = $21;
     $194 = $gep_int117;
     HEAP32[$194>>2] = $193;
     $gep_int118 = $__e;
     $195 = $gep_int118;
     $196 = HEAP32[$195>>2]|0;
     $gep_int119 = $22;
     $197 = $gep_int119;
     HEAP32[$197>>2] = $196;
     $198 = $$byval_copy7;
     
     $199 = $$byval_copy7;
     $200 = $21;
     ;HEAP32[$199+0>>2]=HEAP32[$200+0>>2]|0;
     $201 = $$byval_copy8;
     
     $202 = $$byval_copy8;
     $203 = $22;
     ;HEAP32[$202+0>>2]=HEAP32[$203+0>>2]|0;
     $gep_int120 = 7400;
     $expanded43 = $gep_int120;
     $gep_int121 = 7400;
     $gep122 = (($gep_int121) + 8)|0;
     $expanded44 = $gep122;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($20,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,$expanded43,$expanded44);
     $204 = $$byval_copy8;
     
     $205 = $$byval_copy7;
     
     $gep_int123 = $20;
     $206 = $gep_int123;
     $207 = HEAP32[$206>>2]|0;
     HEAP32[$192>>2] = $207;
     
     break;
    }
    case 77:  {
     $gep_int140 = $__e;
     $269 = $gep_int140;
     $270 = HEAP32[$269>>2]|0;
     $271 = $5;
     
     $gep_int141 = $5;
     $272 = $gep_int141;
     HEAP32[$272>>2] = $270;
     $273 = $$byval_copy13;
     
     $274 = $$byval_copy13;
     $275 = $5;
     ;HEAP32[$274+0>>2]=HEAP32[$275+0>>2]|0;
     $276 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy13,$__err,$68,2)|0;
     $277 = $$byval_copy13;
     
     $278 = HEAP32[$__err>>2]|0;
     $279 = $278 & 4;
     $280 = ($279|0)==(0);
     $281 = ($276|0)<(60);
     $or$cond$i21 = $280 & $281;
     
     if ($or$cond$i21) {
      $gep_int142 = $__tm;
      $gep143 = (($gep_int142) + 4)|0;
      $282 = $gep143;
      HEAP32[$282>>2] = $276;
      
      break L8;
     } else {
      $283 = $278 | 4;
      HEAP32[$__err>>2] = $283;
      
      break L8;
     }
     break;
    }
    case 116: case 110:  {
     $gep_int144 = $__e;
     $284 = $gep_int144;
     $285 = HEAP32[$284>>2]|0;
     $gep_int145 = $23;
     $286 = $gep_int145;
     HEAP32[$286>>2] = $285;
     $287 = $$byval_copy14;
     
     $288 = $$byval_copy14;
     $289 = $23;
     ;HEAP32[$288+0>>2]=HEAP32[$289+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy14,$__err,$68);
     $290 = $$byval_copy14;
     
     
     break;
    }
    case 112:  {
     $gep_int146 = $__tm;
     $gep147 = (($gep_int146) + 8)|0;
     $291 = $gep147;
     $gep_int148 = $__e;
     $292 = $gep_int148;
     $293 = HEAP32[$292>>2]|0;
     $gep_int149 = $24;
     $294 = $gep_int149;
     HEAP32[$294>>2] = $293;
     $295 = $$byval_copy15;
     
     $296 = $$byval_copy15;
     $297 = $24;
     ;HEAP32[$296+0>>2]=HEAP32[$297+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$291,$__b,$$byval_copy15,$__err,$68);
     $298 = $$byval_copy15;
     
     
     break;
    }
    case 65: case 97:  {
     $gep_int67 = $__e;
     $76 = $gep_int67;
     $77 = HEAP32[$76>>2]|0;
     $78 = $12;
     
     $gep_int68 = $this;
     $gep69 = (($gep_int68) + 8)|0;
     $79 = $gep69;
     $80 = $79;
     $81 = HEAP32[$79>>2]|0;
     $82 = HEAP32[$81>>2]|0;
     $83 = FUNCTION_TABLE_ii[$82 & 127]($79)|0;
     $gep_int70 = $12;
     $84 = $gep_int70;
     HEAP32[$84>>2] = $77;
     $gep_int71 = $83;
     $gep72 = (($gep_int71) + 168)|0;
     $85 = $gep72;
     $86 = $$byval_copy;
     
     $87 = $$byval_copy;
     $88 = $12;
     ;HEAP32[$87+0>>2]=HEAP32[$88+0>>2]|0;
     $89 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$83,$85,$68,$__err,0)|0;
     $90 = $$byval_copy;
     
     $91 = $89;
     $92 = $83;
     $93 = (($91) - ($92))|0;
     $94 = ($93|0)<(168);
     
     if (!($94)) {
      break L8;
     }
     $gep_int73 = $__tm;
     $gep74 = (($gep_int73) + 24)|0;
     $95 = $gep74;
     $96 = (($93|0) / 12)&-1;
     $97 = (($96|0) % 7)&-1;
     HEAP32[$95>>2] = $97;
     
     break;
    }
    case 119:  {
     $gep_int177 = $__e;
     $362 = $gep_int177;
     $363 = HEAP32[$362>>2]|0;
     $364 = $3;
     
     $gep_int178 = $3;
     $365 = $gep_int178;
     HEAP32[$365>>2] = $363;
     $366 = $$byval_copy23;
     
     $367 = $$byval_copy23;
     $368 = $3;
     ;HEAP32[$367+0>>2]=HEAP32[$368+0>>2]|0;
     $369 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy23,$__err,$68,1)|0;
     $370 = $$byval_copy23;
     
     $371 = HEAP32[$__err>>2]|0;
     $372 = $371 & 4;
     $373 = ($372|0)==(0);
     $374 = ($369|0)<(7);
     $or$cond$i27 = $373 & $374;
     
     if ($or$cond$i27) {
      $gep_int179 = $__tm;
      $gep180 = (($gep_int179) + 24)|0;
      $375 = $gep180;
      HEAP32[$375>>2] = $369;
      
      break L8;
     } else {
      $376 = $371 | 4;
      HEAP32[$__err>>2] = $376;
      
      break L8;
     }
     break;
    }
    case 120:  {
     $377 = $this;
     $378 = HEAP32[$this>>2]|0;
     $gep_int181 = $378;
     $gep182 = (($gep_int181) + 20)|0;
     $379 = $gep182;
     $380 = HEAP32[$379>>2]|0;
     $gep_int183 = $__b;
     $381 = $gep_int183;
     $382 = HEAP32[$381>>2]|0;
     $gep_int184 = $34;
     $383 = $gep_int184;
     HEAP32[$383>>2] = $382;
     $gep_int185 = $__e;
     $384 = $gep_int185;
     $385 = HEAP32[$384>>2]|0;
     $gep_int186 = $35;
     $386 = $gep_int186;
     HEAP32[$386>>2] = $385;
     $387 = $$byval_copy24;
     
     $388 = $$byval_copy24;
     $389 = $34;
     ;HEAP32[$388+0>>2]=HEAP32[$389+0>>2]|0;
     $390 = $$byval_copy25;
     
     $391 = $$byval_copy25;
     $392 = $35;
     ;HEAP32[$391+0>>2]=HEAP32[$392+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$380 & 63]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
     $393 = $$byval_copy25;
     
     $394 = $$byval_copy24;
     
     
     STACKTOP = sp;return;
     break;
    }
    case 88:  {
     $gep_int187 = $this;
     $gep188 = (($gep_int187) + 8)|0;
     $395 = $gep188;
     $396 = $395;
     $397 = HEAP32[$395>>2]|0;
     $gep_int189 = $397;
     $gep190 = (($gep_int189) + 24)|0;
     $398 = $gep190;
     $399 = HEAP32[$398>>2]|0;
     $400 = FUNCTION_TABLE_ii[$399 & 127]($395)|0;
     $gep_int191 = $__b;
     $401 = $gep_int191;
     $402 = HEAP32[$401>>2]|0;
     $gep_int192 = $37;
     $403 = $gep_int192;
     HEAP32[$403>>2] = $402;
     $gep_int193 = $__e;
     $404 = $gep_int193;
     $405 = HEAP32[$404>>2]|0;
     $gep_int194 = $38;
     $406 = $gep_int194;
     HEAP32[$406>>2] = $405;
     $407 = $400;
     $408 = HEAP8[$400]|0;
     $409 = $408 & 1;
     $410 = ($409<<24>>24)==(0);
     
     if ($410) {
      $415 = $400;
      $gep_int199 = $400;
      $gep200 = (($gep_int199) + 1)|0;
      $416 = $gep200;
      $417 = $400;
      $gep_int201 = $400;
      $gep202 = (($gep_int201) + 1)|0;
      $418 = $gep202;
      $419 = $408&255;
      $420 = $419 >>> 1;
      
      $421 = $418;$422 = $416;$423 = $420;
     } else {
      $gep_int195 = $400;
      $gep196 = (($gep_int195) + 8)|0;
      $411 = $gep196;
      $412 = HEAP32[$411>>2]|0;
      $gep_int197 = $400;
      $gep198 = (($gep_int197) + 4)|0;
      $413 = $gep198;
      $414 = HEAP32[$413>>2]|0;
      
      $421 = $412;$422 = $412;$423 = $414;
     }
     
     
     
     $gep_int203 = $421;
     $gep204 = (($gep_int203) + ($423))|0;
     $424 = $gep204;
     $425 = $$byval_copy26;
     
     $426 = $$byval_copy26;
     $427 = $37;
     ;HEAP32[$426+0>>2]=HEAP32[$427+0>>2]|0;
     $428 = $$byval_copy27;
     
     $429 = $$byval_copy27;
     $430 = $38;
     ;HEAP32[$429+0>>2]=HEAP32[$430+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($36,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$422,$424);
     $431 = $$byval_copy27;
     
     $432 = $$byval_copy26;
     
     $gep_int205 = $36;
     $433 = $gep_int205;
     $434 = HEAP32[$433>>2]|0;
     HEAP32[$401>>2] = $434;
     
     break;
    }
    case 84:  {
     $gep_int169 = $__b;
     $346 = $gep_int169;
     $347 = HEAP32[$346>>2]|0;
     $gep_int170 = $32;
     $348 = $gep_int170;
     HEAP32[$348>>2] = $347;
     $gep_int171 = $__e;
     $349 = $gep_int171;
     $350 = HEAP32[$349>>2]|0;
     $gep_int172 = $33;
     $351 = $gep_int172;
     HEAP32[$351>>2] = $350;
     $352 = $$byval_copy21;
     
     $353 = $$byval_copy21;
     $354 = $32;
     ;HEAP32[$353+0>>2]=HEAP32[$354+0>>2]|0;
     $355 = $$byval_copy22;
     
     $356 = $$byval_copy22;
     $357 = $33;
     ;HEAP32[$356+0>>2]=HEAP32[$357+0>>2]|0;
     $gep_int173 = 7432;
     $expanded49 = $gep_int173;
     $gep_int174 = 7432;
     $gep175 = (($gep_int174) + 8)|0;
     $expanded50 = $gep175;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($31,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,$expanded49,$expanded50);
     $358 = $$byval_copy22;
     
     $359 = $$byval_copy21;
     
     $gep_int176 = $31;
     $360 = $gep_int176;
     $361 = HEAP32[$360>>2]|0;
     HEAP32[$346>>2] = $361;
     
     break;
    }
    case 72:  {
     $gep_int124 = $__e;
     $208 = $gep_int124;
     $209 = HEAP32[$208>>2]|0;
     $210 = $9;
     
     $gep_int125 = $9;
     $211 = $gep_int125;
     HEAP32[$211>>2] = $209;
     $212 = $$byval_copy9;
     
     $213 = $$byval_copy9;
     $214 = $9;
     ;HEAP32[$213+0>>2]=HEAP32[$214+0>>2]|0;
     $215 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy9,$__err,$68,2)|0;
     $216 = $$byval_copy9;
     
     $217 = HEAP32[$__err>>2]|0;
     $218 = $217 & 4;
     $219 = ($218|0)==(0);
     $220 = ($215|0)<(24);
     $or$cond$i = $219 & $220;
     
     if ($or$cond$i) {
      $gep_int126 = $__tm;
      $gep127 = (($gep_int126) + 8)|0;
      $221 = $gep127;
      HEAP32[$221>>2] = $215;
      
      break L8;
     } else {
      $222 = $217 | 4;
      HEAP32[$__err>>2] = $222;
      
      break L8;
     }
     break;
    }
    case 73:  {
     $gep_int128 = $__tm;
     $gep129 = (($gep_int128) + 8)|0;
     $223 = $gep129;
     $gep_int130 = $__e;
     $224 = $gep_int130;
     $225 = HEAP32[$224>>2]|0;
     $226 = $8;
     
     $gep_int131 = $8;
     $227 = $gep_int131;
     HEAP32[$227>>2] = $225;
     $228 = $$byval_copy10;
     
     $229 = $$byval_copy10;
     $230 = $8;
     ;HEAP32[$229+0>>2]=HEAP32[$230+0>>2]|0;
     $231 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy10,$__err,$68,2)|0;
     $232 = $$byval_copy10;
     
     $233 = HEAP32[$__err>>2]|0;
     $234 = $233 & 4;
     $235 = ($234|0)==(0);
     
     do {
      if ($235) {
       $$off$i12 = (($231) + -1)|0;
       $236 = ($$off$i12>>>0)<(12);
       
       if (!($236)) {
        break;
       }
       HEAP32[$223>>2] = $231;
       
       break L8;
      }
     } while(0);
     $237 = $233 | 4;
     HEAP32[$__err>>2] = $237;
     
     break;
    }
    case 99:  {
     $gep_int85 = $this;
     $gep86 = (($gep_int85) + 8)|0;
     $121 = $gep86;
     $122 = $121;
     $123 = HEAP32[$121>>2]|0;
     $gep_int87 = $123;
     $gep88 = (($gep_int87) + 12)|0;
     $124 = $gep88;
     $125 = HEAP32[$124>>2]|0;
     $126 = FUNCTION_TABLE_ii[$125 & 127]($121)|0;
     $gep_int89 = $__b;
     $127 = $gep_int89;
     $128 = HEAP32[$127>>2]|0;
     $gep_int90 = $15;
     $129 = $gep_int90;
     HEAP32[$129>>2] = $128;
     $gep_int91 = $__e;
     $130 = $gep_int91;
     $131 = HEAP32[$130>>2]|0;
     $gep_int92 = $16;
     $132 = $gep_int92;
     HEAP32[$132>>2] = $131;
     $133 = $126;
     $134 = HEAP8[$126]|0;
     $135 = $134 & 1;
     $136 = ($135<<24>>24)==(0);
     
     if ($136) {
      $141 = $126;
      $gep_int97 = $126;
      $gep98 = (($gep_int97) + 1)|0;
      $142 = $gep98;
      $143 = $126;
      $gep_int99 = $126;
      $gep100 = (($gep_int99) + 1)|0;
      $144 = $gep100;
      $145 = $134&255;
      $146 = $145 >>> 1;
      
      $147 = $144;$148 = $142;$149 = $146;
     } else {
      $gep_int93 = $126;
      $gep94 = (($gep_int93) + 8)|0;
      $137 = $gep94;
      $138 = HEAP32[$137>>2]|0;
      $gep_int95 = $126;
      $gep96 = (($gep_int95) + 4)|0;
      $139 = $gep96;
      $140 = HEAP32[$139>>2]|0;
      
      $147 = $138;$148 = $138;$149 = $140;
     }
     
     
     
     $gep_int101 = $147;
     $gep102 = (($gep_int101) + ($149))|0;
     $150 = $gep102;
     $151 = $$byval_copy2;
     
     $152 = $$byval_copy2;
     $153 = $15;
     ;HEAP32[$152+0>>2]=HEAP32[$153+0>>2]|0;
     $154 = $$byval_copy3;
     
     $155 = $$byval_copy3;
     $156 = $16;
     ;HEAP32[$155+0>>2]=HEAP32[$156+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($14,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$148,$150);
     $157 = $$byval_copy3;
     
     $158 = $$byval_copy2;
     
     $gep_int103 = $14;
     $159 = $gep_int103;
     $160 = HEAP32[$159>>2]|0;
     HEAP32[$127>>2] = $160;
     
     break;
    }
    case 106:  {
     $gep_int132 = $__e;
     $238 = $gep_int132;
     $239 = HEAP32[$238>>2]|0;
     $240 = $7;
     
     $gep_int133 = $7;
     $241 = $gep_int133;
     HEAP32[$241>>2] = $239;
     $242 = $$byval_copy11;
     
     $243 = $$byval_copy11;
     $244 = $7;
     ;HEAP32[$243+0>>2]=HEAP32[$244+0>>2]|0;
     $245 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy11,$__err,$68,3)|0;
     $246 = $$byval_copy11;
     
     $247 = HEAP32[$__err>>2]|0;
     $248 = $247 & 4;
     $249 = ($248|0)==(0);
     $250 = ($245|0)<(366);
     $or$cond$i15 = $249 & $250;
     
     if ($or$cond$i15) {
      $gep_int134 = $__tm;
      $gep135 = (($gep_int134) + 28)|0;
      $251 = $gep135;
      HEAP32[$251>>2] = $245;
      
      break L8;
     } else {
      $252 = $247 | 4;
      HEAP32[$__err>>2] = $252;
      
      break L8;
     }
     break;
    }
    case 109:  {
     $gep_int136 = $__e;
     $253 = $gep_int136;
     $254 = HEAP32[$253>>2]|0;
     $255 = $6;
     
     $gep_int137 = $6;
     $256 = $gep_int137;
     HEAP32[$256>>2] = $254;
     $257 = $$byval_copy12;
     
     $258 = $$byval_copy12;
     $259 = $6;
     ;HEAP32[$258+0>>2]=HEAP32[$259+0>>2]|0;
     $260 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy12,$__err,$68,2)|0;
     $261 = $$byval_copy12;
     
     $262 = HEAP32[$__err>>2]|0;
     $263 = $262 & 4;
     $264 = ($263|0)==(0);
     $265 = ($260|0)<(13);
     $or$cond$i18 = $264 & $265;
     
     if ($or$cond$i18) {
      $gep_int138 = $__tm;
      $gep139 = (($gep_int138) + 16)|0;
      $266 = $gep139;
      $267 = (($260) + -1)|0;
      HEAP32[$266>>2] = $267;
      
      break L8;
     } else {
      $268 = $262 | 4;
      HEAP32[$__err>>2] = $268;
      
      break L8;
     }
     break;
    }
    case 114:  {
     $gep_int150 = $__b;
     $299 = $gep_int150;
     $300 = HEAP32[$299>>2]|0;
     $gep_int151 = $26;
     $301 = $gep_int151;
     HEAP32[$301>>2] = $300;
     $gep_int152 = $__e;
     $302 = $gep_int152;
     $303 = HEAP32[$302>>2]|0;
     $gep_int153 = $27;
     $304 = $gep_int153;
     HEAP32[$304>>2] = $303;
     $305 = $$byval_copy16;
     
     $306 = $$byval_copy16;
     $307 = $26;
     ;HEAP32[$306+0>>2]=HEAP32[$307+0>>2]|0;
     $308 = $$byval_copy17;
     
     $309 = $$byval_copy17;
     $310 = $27;
     ;HEAP32[$309+0>>2]=HEAP32[$310+0>>2]|0;
     $gep_int154 = 7408;
     $expanded45 = $gep_int154;
     $gep_int155 = 7408;
     $gep156 = (($gep_int155) + 11)|0;
     $expanded46 = $gep156;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($25,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,$expanded45,$expanded46);
     $311 = $$byval_copy17;
     
     $312 = $$byval_copy16;
     
     $gep_int157 = $25;
     $313 = $gep_int157;
     $314 = HEAP32[$313>>2]|0;
     HEAP32[$299>>2] = $314;
     
     break;
    }
    case 82:  {
     $gep_int158 = $__b;
     $315 = $gep_int158;
     $316 = HEAP32[$315>>2]|0;
     $gep_int159 = $29;
     $317 = $gep_int159;
     HEAP32[$317>>2] = $316;
     $gep_int160 = $__e;
     $318 = $gep_int160;
     $319 = HEAP32[$318>>2]|0;
     $gep_int161 = $30;
     $320 = $gep_int161;
     HEAP32[$320>>2] = $319;
     $321 = $$byval_copy18;
     
     $322 = $$byval_copy18;
     $323 = $29;
     ;HEAP32[$322+0>>2]=HEAP32[$323+0>>2]|0;
     $324 = $$byval_copy19;
     
     $325 = $$byval_copy19;
     $326 = $30;
     ;HEAP32[$325+0>>2]=HEAP32[$326+0>>2]|0;
     $gep_int162 = 7424;
     $expanded47 = $gep_int162;
     $gep_int163 = 7424;
     $gep164 = (($gep_int163) + 5)|0;
     $expanded48 = $gep164;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,$expanded47,$expanded48);
     $327 = $$byval_copy19;
     
     $328 = $$byval_copy18;
     
     $gep_int165 = $28;
     $329 = $gep_int165;
     $330 = HEAP32[$329>>2]|0;
     HEAP32[$315>>2] = $330;
     
     break;
    }
    case 83:  {
     $gep_int166 = $__e;
     $331 = $gep_int166;
     $332 = HEAP32[$331>>2]|0;
     $333 = $4;
     
     $gep_int167 = $4;
     $334 = $gep_int167;
     HEAP32[$334>>2] = $332;
     $335 = $$byval_copy20;
     
     $336 = $$byval_copy20;
     $337 = $4;
     ;HEAP32[$336+0>>2]=HEAP32[$337+0>>2]|0;
     $338 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy20,$__err,$68,2)|0;
     $339 = $$byval_copy20;
     
     $340 = HEAP32[$__err>>2]|0;
     $341 = $340 & 4;
     $342 = ($341|0)==(0);
     $343 = ($338|0)<(61);
     $or$cond$i24 = $342 & $343;
     
     if ($or$cond$i24) {
      $gep_int168 = $__tm;
      $344 = $gep_int168;
      HEAP32[$344>>2] = $338;
      
      break L8;
     } else {
      $345 = $340 | 4;
      HEAP32[$__err>>2] = $345;
      
      break L8;
     }
     break;
    }
    case 121:  {
     $gep_int206 = $__tm;
     $gep207 = (($gep_int206) + 20)|0;
     $435 = $gep207;
     $gep_int208 = $__e;
     $436 = $gep_int208;
     $437 = HEAP32[$436>>2]|0;
     $438 = $2;
     
     $gep_int209 = $2;
     $439 = $gep_int209;
     HEAP32[$439>>2] = $437;
     $440 = $$byval_copy28;
     
     $441 = $$byval_copy28;
     $442 = $2;
     ;HEAP32[$441+0>>2]=HEAP32[$442+0>>2]|0;
     $443 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy28,$__err,$68,4)|0;
     $444 = $$byval_copy28;
     
     $445 = HEAP32[$__err>>2]|0;
     $446 = $445 & 4;
     $447 = ($446|0)==(0);
     
     if (!($447)) {
      break L8;
     }
     $448 = ($443|0)<(69);
     
     if ($448) {
      $449 = (($443) + 2000)|0;
      
      $__t$0$i = $449;
     } else {
      $$off$i33 = (($443) + -69)|0;
      $450 = ($$off$i33>>>0)<(31);
      $451 = (($443) + 1900)|0;
      $$$i = $450 ? $451 : $443;
      
      $__t$0$i = $$$i;
     }
     
     $452 = (($__t$0$i) + -1900)|0;
     HEAP32[$435>>2] = $452;
     
     break;
    }
    case 89:  {
     $gep_int210 = $__e;
     $453 = $gep_int210;
     $454 = HEAP32[$453>>2]|0;
     $455 = $1;
     
     $gep_int211 = $1;
     $456 = $gep_int211;
     HEAP32[$456>>2] = $454;
     $457 = $$byval_copy29;
     
     $458 = $$byval_copy29;
     $459 = $1;
     ;HEAP32[$458+0>>2]=HEAP32[$459+0>>2]|0;
     $460 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy29,$__err,$68,4)|0;
     $461 = $$byval_copy29;
     
     $462 = HEAP32[$__err>>2]|0;
     $463 = $462 & 4;
     $464 = ($463|0)==(0);
     
     if (!($464)) {
      break L8;
     }
     $gep_int212 = $__tm;
     $gep213 = (($gep_int212) + 20)|0;
     $465 = $gep213;
     $466 = (($460) + -1900)|0;
     HEAP32[$465>>2] = $466;
     
     break;
    }
    case 37:  {
     $gep_int214 = $__e;
     $467 = $gep_int214;
     $468 = HEAP32[$467>>2]|0;
     $gep_int215 = $39;
     $469 = $gep_int215;
     HEAP32[$469>>2] = $468;
     $470 = $$byval_copy30;
     
     $471 = $$byval_copy30;
     $472 = $39;
     ;HEAP32[$471+0>>2]=HEAP32[$472+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy30,$__err,$68);
     $473 = $$byval_copy30;
     
     
     break;
    }
    default: {
     $474 = HEAP32[$__err>>2]|0;
     $475 = $474 | 4;
     HEAP32[$__err>>2] = $475;
     
    }
    }
   } while(0);
   $gep_int216 = $__b;
   $476 = $gep_int216;
   $477 = HEAP32[$476>>2]|0;
   $gep_int217 = $agg$result;
   $478 = $gep_int217;
   HEAP32[$478>>2] = $477;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $64 = ___cxa_allocate_exception(4)|0;
 $65 = $64;
 __ZNSt8bad_castC2Ev($65);
 __THREW__ = 0;
 $expanded38 = 16440;
 $expanded39 = 119;
 invoke_viii(5,$64|0,$expanded38|0,$expanded39|0);
 $66 = __THREW__; __THREW__ = 0;
 $67 = $66&1;
 
 if ($67) {
  $expanded40 = 69;
  $72 = ___cxa_find_matching_catch(-1,-1)|0;
  $73 = tempRet0;
  $74 = HEAP32[$40>>2]|0;
  $gep_int66 = $74;
  $75 = $gep_int66;
  u$21 = __ZNSt3__114__shared_count16__release_sharedEv($75)|0;
  ___resumeException($72|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$off0$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $extract$t$i = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0;
 var $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep4 = 0, $gep40 = 0, $gep42 = 0, $gep6 = 0, $gep8 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0;
 var $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0;
 var $isascii1$i = 0, label = 0, sp = 0, u$21 = 0;
 sp = STACKTOP;
 $gep_int = $__b;
 $1 = $gep_int;
 $gep_int1 = $__e;
 $2 = $gep_int1;
 $gep_int2 = $__ct;
 $gep = (($gep_int2) + 8)|0;
 $3 = $gep;
 
 L1: while(1) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($4|0)==(0);
  
  do {
   if ($5) {
    $17 = 0;
   } else {
    $gep_int3 = $4;
    $gep4 = (($gep_int3) + 12)|0;
    $6 = $gep4;
    $7 = HEAP32[$6>>2]|0;
    $gep_int5 = $4;
    $gep6 = (($gep_int5) + 16)|0;
    $8 = $gep6;
    $9 = HEAP32[$8>>2]|0;
    $10 = ($7|0)==($9|0);
    
    if (!($10)) {
     $17 = $4;
     break;
    }
    $11 = $4;
    $12 = HEAP32[$4>>2]|0;
    $gep_int7 = $12;
    $gep8 = (($gep_int7) + 36)|0;
    $13 = $gep8;
    $14 = HEAP32[$13>>2]|0;
    $15 = FUNCTION_TABLE_ii[$14 & 127]($4)|0;
    $16 = ($15|0)==(-1);
    
    if ($16) {
     HEAP32[$1>>2] = 0;
     
     $17 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     
     $17 = $$pre$i$i$i;
     break;
    }
   }
  } while(0);
  
  $18 = ($17|0)==(0);
  $19 = HEAP32[$2>>2]|0;
  $20 = ($19|0)==(0);
  
  do {
   if ($20) {
    label = 12;
   } else {
    $gep_int9 = $19;
    $gep10 = (($gep_int9) + 12)|0;
    $21 = $gep10;
    $22 = HEAP32[$21>>2]|0;
    $gep_int11 = $19;
    $gep12 = (($gep_int11) + 16)|0;
    $23 = $gep12;
    $24 = HEAP32[$23>>2]|0;
    $25 = ($22|0)==($24|0);
    
    if (!($25)) {
     
     if ($18) {
      $32 = $19;
      break;
     } else {
      $$pre$i2$i$i6 = $19;
      break L1;
     }
    }
    $26 = $19;
    $27 = HEAP32[$19>>2]|0;
    $gep_int13 = $27;
    $gep14 = (($gep_int13) + 36)|0;
    $28 = $gep14;
    $29 = HEAP32[$28>>2]|0;
    $30 = FUNCTION_TABLE_ii[$29 & 127]($19)|0;
    $31 = ($30|0)==(-1);
    
    if ($31) {
     HEAP32[$2>>2] = 0;
     
     label = 12;
     break;
    } else {
     
     if ($18) {
      $32 = $19;
      break;
     } else {
      $$pre$i2$i$i6 = $19;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   
   if ($18) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $32 = 0;
   }
  }
  
  $33 = HEAP32[$1>>2]|0;
  $gep_int15 = $33;
  $gep16 = (($gep_int15) + 12)|0;
  $34 = $gep16;
  $35 = HEAP32[$34>>2]|0;
  $gep_int17 = $33;
  $gep18 = (($gep_int17) + 16)|0;
  $36 = $gep18;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($35|0)==($37|0);
  
  if ($38) {
   $39 = $33;
   $40 = HEAP32[$33>>2]|0;
   $gep_int19 = $40;
   $gep20 = (($gep_int19) + 36)|0;
   $41 = $gep20;
   $42 = HEAP32[$41>>2]|0;
   $43 = FUNCTION_TABLE_ii[$42 & 127]($33)|0;
   $extract$t$i = $43&255;
   
   $$0$i$off0$i = $extract$t$i;
  } else {
   $44 = HEAP8[$35]|0;
   
   $$0$i$off0$i = $44;
  }
  
  $isascii1$i = ($$0$i$off0$i<<24>>24)>(-1);
  
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $32;
   break;
  }
  $45 = $$0$i$off0$i << 24 >> 24;
  $46 = HEAP32[$3>>2]|0;
  $gep_int21 = $46;
  $gep_array = $45<<1;
  $gep22 = (($gep_int21) + ($gep_array))|0;
  $47 = $gep22;
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 & 8192;
  $50 = ($49<<16>>16)==(0);
  
  if ($50) {
   $$pre$i2$i$i6 = $32;
   break;
  }
  $51 = HEAP32[$1>>2]|0;
  $gep_int23 = $51;
  $gep24 = (($gep_int23) + 12)|0;
  $52 = $gep24;
  $53 = HEAP32[$52>>2]|0;
  $gep_int25 = $51;
  $gep26 = (($gep_int25) + 16)|0;
  $54 = $gep26;
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)==($55|0);
  
  if ($56) {
   $57 = $51;
   $58 = HEAP32[$51>>2]|0;
   $gep_int27 = $58;
   $gep28 = (($gep_int27) + 40)|0;
   $59 = $gep28;
   $60 = HEAP32[$59>>2]|0;
   u$21 = FUNCTION_TABLE_ii[$60 & 127]($51)|0;
   
   continue;
  } else {
   $gep_int29 = $53;
   $gep30 = (($gep_int29) + 1)|0;
   $61 = $gep30;
   HEAP32[$52>>2] = $61;
   
   continue;
  }
 }
 
 $62 = HEAP32[$1>>2]|0;
 $63 = ($62|0)==(0);
 
 do {
  if ($63) {
   $75 = 0;
  } else {
   $gep_int31 = $62;
   $gep32 = (($gep_int31) + 12)|0;
   $64 = $gep32;
   $65 = HEAP32[$64>>2]|0;
   $gep_int33 = $62;
   $gep34 = (($gep_int33) + 16)|0;
   $66 = $gep34;
   $67 = HEAP32[$66>>2]|0;
   $68 = ($65|0)==($67|0);
   
   if (!($68)) {
    $75 = $62;
    break;
   }
   $69 = $62;
   $70 = HEAP32[$62>>2]|0;
   $gep_int35 = $70;
   $gep36 = (($gep_int35) + 36)|0;
   $71 = $gep36;
   $72 = HEAP32[$71>>2]|0;
   $73 = FUNCTION_TABLE_ii[$72 & 127]($62)|0;
   $74 = ($73|0)==(-1);
   
   if ($74) {
    HEAP32[$1>>2] = 0;
    
    $75 = 0;
    break;
   } else {
    $$pre$i$i$i2 = HEAP32[$1>>2]|0;
    
    $75 = $$pre$i$i$i2;
    break;
   }
  }
 } while(0);
 
 $76 = ($75|0)==(0);
 $77 = ($$pre$i2$i$i6|0)==(0);
 
 L38: do {
  if ($77) {
   label = 32;
  } else {
   $gep_int37 = $$pre$i2$i$i6;
   $gep38 = (($gep_int37) + 12)|0;
   $78 = $gep38;
   $79 = HEAP32[$78>>2]|0;
   $gep_int39 = $$pre$i2$i$i6;
   $gep40 = (($gep_int39) + 16)|0;
   $80 = $gep40;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($79|0)==($81|0);
   
   do {
    if ($82) {
     $83 = $$pre$i2$i$i6;
     $84 = HEAP32[$$pre$i2$i$i6>>2]|0;
     $gep_int41 = $84;
     $gep42 = (($gep_int41) + 36)|0;
     $85 = $gep42;
     $86 = HEAP32[$85>>2]|0;
     $87 = FUNCTION_TABLE_ii[$86 & 127]($$pre$i2$i$i6)|0;
     $88 = ($87|0)==(-1);
     
     if (!($88)) {
      break;
     }
     HEAP32[$2>>2] = 0;
     
     label = 32;
     break L38;
    }
   } while(0);
   
   if (!($76)) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 do {
  if ((label|0) == 32) {
   
   if ($76) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $89 = HEAP32[$__err>>2]|0;
 $90 = $89 | 2;
 HEAP32[$__err>>2] = $90;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep12 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int11 = 0;
 var $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $2 = $gep;
 $3 = $2;
 $4 = HEAP32[$2>>2]|0;
 $gep_int1 = $4;
 $gep2 = (($gep_int1) + 8)|0;
 $5 = $gep2;
 $6 = HEAP32[$5>>2]|0;
 $7 = FUNCTION_TABLE_ii[$6 & 127]($2)|0;
 $8 = $7;
 $9 = HEAP8[$7]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 
 if ($11) {
  $14 = $9&255;
  $15 = $14 >>> 1;
  
  $16 = $15;
 } else {
  $gep_int3 = $7;
  $gep4 = (($gep_int3) + 4)|0;
  $12 = $gep4;
  $13 = HEAP32[$12>>2]|0;
  
  $16 = $13;
 }
 
 $gep_int5 = $7;
 $gep6 = (($gep_int5) + 12)|0;
 $17 = $gep6;
 $18 = $17;
 $19 = HEAP8[$17]|0;
 $20 = $19 & 1;
 $21 = ($20<<24>>24)==(0);
 
 if ($21) {
  $24 = $19&255;
  $25 = $24 >>> 1;
  
  $26 = $25;
 } else {
  $gep_int7 = $7;
  $gep8 = (($gep_int7) + 16)|0;
  $22 = $gep8;
  $23 = HEAP32[$22>>2]|0;
  
  $26 = $23;
 }
 
 $27 = (0 - ($26))|0;
 $28 = ($16|0)==($27|0);
 
 if ($28) {
  $29 = HEAP32[$__err>>2]|0;
  $30 = $29 | 4;
  HEAP32[$__err>>2] = $30;
  
  STACKTOP = sp;return;
 }
 $gep_int9 = $__e;
 $31 = $gep_int9;
 $32 = HEAP32[$31>>2]|0;
 $gep_int10 = $1;
 $33 = $gep_int10;
 HEAP32[$33>>2] = $32;
 $gep_int11 = $7;
 $gep12 = (($gep_int11) + 24)|0;
 $34 = $gep12;
 $35 = $$byval_copy;
 
 $36 = $$byval_copy;
 $37 = $1;
 ;HEAP32[$36+0>>2]=HEAP32[$37+0>>2]|0;
 $38 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$7,$34,$__ct,$__err,0)|0;
 $39 = $$byval_copy;
 
 $40 = $38;
 $41 = $7;
 $42 = (($40) - ($41))|0;
 $43 = ($38|0)==($7|0);
 
 do {
  if ($43) {
   $44 = HEAP32[$__h>>2]|0;
   $45 = ($44|0)==(12);
   
   if (!($45)) {
    break;
   }
   HEAP32[$__h>>2] = 0;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $46 = ($42|0)==(12);
 
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[$__h>>2]|0;
 $48 = ($47|0)<(12);
 
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = (($47) + 12)|0;
 HEAP32[$__h>>2] = $49;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$off0$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $extract$t$i = 0, $gep = 0, $gep10 = 0, $gep12 = 0;
 var $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep3 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0, $gep5 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0;
 var $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0;
 var sp = 0, u$22 = 0;
 sp = STACKTOP;
 $gep_int = $__b;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 
 do {
  if ($3) {
   $15 = 0;
  } else {
   $gep_int1 = $2;
   $gep = (($gep_int1) + 12)|0;
   $4 = $gep;
   $5 = HEAP32[$4>>2]|0;
   $gep_int2 = $2;
   $gep3 = (($gep_int2) + 16)|0;
   $6 = $gep3;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($5|0)==($7|0);
   
   if (!($8)) {
    $15 = $2;
    break;
   }
   $9 = $2;
   $10 = HEAP32[$2>>2]|0;
   $gep_int4 = $10;
   $gep5 = (($gep_int4) + 36)|0;
   $11 = $gep5;
   $12 = HEAP32[$11>>2]|0;
   $13 = FUNCTION_TABLE_ii[$12 & 127]($2)|0;
   $14 = ($13|0)==(-1);
   
   if ($14) {
    HEAP32[$1>>2] = 0;
    
    $15 = 0;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    
    $15 = $$pre$i$i$i;
    break;
   }
  }
 } while(0);
 
 $16 = ($15|0)==(0);
 $gep_int6 = $__e;
 $17 = $gep_int6;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 
 L8: do {
  if ($19) {
   label = 11;
  } else {
   $gep_int7 = $18;
   $gep8 = (($gep_int7) + 12)|0;
   $20 = $gep8;
   $21 = HEAP32[$20>>2]|0;
   $gep_int9 = $18;
   $gep10 = (($gep_int9) + 16)|0;
   $22 = $gep10;
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   
   do {
    if ($24) {
     $25 = $18;
     $26 = HEAP32[$18>>2]|0;
     $gep_int11 = $26;
     $gep12 = (($gep_int11) + 36)|0;
     $27 = $gep12;
     $28 = HEAP32[$27>>2]|0;
     $29 = FUNCTION_TABLE_ii[$28 & 127]($18)|0;
     $30 = ($29|0)==(-1);
     
     if (!($30)) {
      break;
     }
     HEAP32[$17>>2] = 0;
     
     label = 11;
     break L8;
    }
   } while(0);
   
   if ($16) {
    $$pre$i2$i$i611 = $18;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  
  if ($16) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $31 = HEAP32[$__err>>2]|0;
  $32 = $31 | 6;
  HEAP32[$__err>>2] = $32;
  
  STACKTOP = sp;return;
 }
 
 $33 = HEAP32[$1>>2]|0;
 $gep_int13 = $33;
 $gep14 = (($gep_int13) + 12)|0;
 $34 = $gep14;
 $35 = HEAP32[$34>>2]|0;
 $gep_int15 = $33;
 $gep16 = (($gep_int15) + 16)|0;
 $36 = $gep16;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35|0)==($37|0);
 
 if ($38) {
  $39 = $33;
  $40 = HEAP32[$33>>2]|0;
  $gep_int17 = $40;
  $gep18 = (($gep_int17) + 36)|0;
  $41 = $gep18;
  $42 = HEAP32[$41>>2]|0;
  $43 = FUNCTION_TABLE_ii[$42 & 127]($33)|0;
  $extract$t$i = $43&255;
  
  $$0$i$off0$i = $extract$t$i;
 } else {
  $44 = HEAP8[$35]|0;
  
  $$0$i$off0$i = $44;
 }
 
 $45 = $__ct;
 $46 = HEAP32[$__ct>>2]|0;
 $gep_int19 = $46;
 $gep20 = (($gep_int19) + 36)|0;
 $47 = $gep20;
 $48 = HEAP32[$47>>2]|0;
 $49 = FUNCTION_TABLE_iiii[$48 & 63]($__ct,$$0$i$off0$i,0)|0;
 $50 = ($49<<24>>24)==(37);
 
 if (!($50)) {
  $51 = HEAP32[$__err>>2]|0;
  $52 = $51 | 4;
  HEAP32[$__err>>2] = $52;
  
  STACKTOP = sp;return;
 }
 $53 = HEAP32[$1>>2]|0;
 $gep_int21 = $53;
 $gep22 = (($gep_int21) + 12)|0;
 $54 = $gep22;
 $55 = HEAP32[$54>>2]|0;
 $gep_int23 = $53;
 $gep24 = (($gep_int23) + 16)|0;
 $56 = $gep24;
 $57 = HEAP32[$56>>2]|0;
 $58 = ($55|0)==($57|0);
 
 if ($58) {
  $59 = $53;
  $60 = HEAP32[$53>>2]|0;
  $gep_int25 = $60;
  $gep26 = (($gep_int25) + 40)|0;
  $61 = $gep26;
  $62 = HEAP32[$61>>2]|0;
  u$22 = FUNCTION_TABLE_ii[$62 & 127]($53)|0;
  
 } else {
  $gep_int27 = $55;
  $gep28 = (($gep_int27) + 1)|0;
  $63 = $gep28;
  HEAP32[$54>>2] = $63;
  
 }
 $64 = HEAP32[$1>>2]|0;
 $65 = ($64|0)==(0);
 
 do {
  if ($65) {
   $77 = 0;
  } else {
   $gep_int29 = $64;
   $gep30 = (($gep_int29) + 12)|0;
   $66 = $gep30;
   $67 = HEAP32[$66>>2]|0;
   $gep_int31 = $64;
   $gep32 = (($gep_int31) + 16)|0;
   $68 = $gep32;
   $69 = HEAP32[$68>>2]|0;
   $70 = ($67|0)==($69|0);
   
   if (!($70)) {
    $77 = $64;
    break;
   }
   $71 = $64;
   $72 = HEAP32[$64>>2]|0;
   $gep_int33 = $72;
   $gep34 = (($gep_int33) + 36)|0;
   $73 = $gep34;
   $74 = HEAP32[$73>>2]|0;
   $75 = FUNCTION_TABLE_ii[$74 & 127]($64)|0;
   $76 = ($75|0)==(-1);
   
   if ($76) {
    HEAP32[$1>>2] = 0;
    
    $77 = 0;
    break;
   } else {
    $$pre$i$i$i2 = HEAP32[$1>>2]|0;
    
    $77 = $$pre$i$i$i2;
    break;
   }
  }
 } while(0);
 
 $78 = ($77|0)==(0);
 $79 = ($$pre$i2$i$i611|0)==(0);
 
 L39: do {
  if ($79) {
   label = 31;
  } else {
   $gep_int35 = $$pre$i2$i$i611;
   $gep36 = (($gep_int35) + 12)|0;
   $80 = $gep36;
   $81 = HEAP32[$80>>2]|0;
   $gep_int37 = $$pre$i2$i$i611;
   $gep38 = (($gep_int37) + 16)|0;
   $82 = $gep38;
   $83 = HEAP32[$82>>2]|0;
   $84 = ($81|0)==($83|0);
   
   do {
    if ($84) {
     $85 = $$pre$i2$i$i611;
     $86 = HEAP32[$$pre$i2$i$i611>>2]|0;
     $gep_int39 = $86;
     $gep40 = (($gep_int39) + 36)|0;
     $87 = $gep40;
     $88 = HEAP32[$87>>2]|0;
     $89 = FUNCTION_TABLE_ii[$88 & 127]($$pre$i2$i$i611)|0;
     $90 = ($89|0)==(-1);
     
     if (!($90)) {
      break;
     }
     HEAP32[$17>>2] = 0;
     
     label = 31;
     break L39;
    }
   } while(0);
   
   if (!($78)) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   
   if ($78) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $91 = HEAP32[$__err>>2]|0;
 $92 = $91 | 2;
 HEAP32[$__err>>2] = $92;
 
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$off0$i = 0, $$0$i$off0$i11 = 0, $$0$in = 0, $$0$in$phi = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i21 = 0, $$pre$i2$i$i7 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0;
 var $extract$t$i = 0, $extract$t$i10 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep3 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0;
 var $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep5 = 0, $gep50 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep8 = 0, $gep_array = 0;
 var $gep_array52 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int4 = 0;
 var $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int6 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int7 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int9 = 0;
 var $isascii1$i = 0, $isascii1$i13 = 0, $tmp$i$i9 = 0, label = 0, sp = 0, u$23 = 0, u$45 = 0;
 sp = STACKTOP;
 $gep_int = $__b;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 
 do {
  if ($3) {
   $15 = 0;
  } else {
   $gep_int1 = $2;
   $gep = (($gep_int1) + 12)|0;
   $4 = $gep;
   $5 = HEAP32[$4>>2]|0;
   $gep_int2 = $2;
   $gep3 = (($gep_int2) + 16)|0;
   $6 = $gep3;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($5|0)==($7|0);
   
   if (!($8)) {
    $15 = $2;
    break;
   }
   $9 = $2;
   $10 = HEAP32[$2>>2]|0;
   $gep_int4 = $10;
   $gep5 = (($gep_int4) + 36)|0;
   $11 = $gep5;
   $12 = HEAP32[$11>>2]|0;
   $13 = FUNCTION_TABLE_ii[$12 & 127]($2)|0;
   $14 = ($13|0)==(-1);
   
   if ($14) {
    HEAP32[$1>>2] = 0;
    
    $15 = 0;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    
    $15 = $$pre$i$i$i;
    break;
   }
  }
 } while(0);
 
 $16 = ($15|0)==(0);
 $gep_int6 = $__e;
 $17 = $gep_int6;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 
 L8: do {
  if ($19) {
   label = 11;
  } else {
   $gep_int7 = $18;
   $gep8 = (($gep_int7) + 12)|0;
   $20 = $gep8;
   $21 = HEAP32[$20>>2]|0;
   $gep_int9 = $18;
   $gep10 = (($gep_int9) + 16)|0;
   $22 = $gep10;
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   
   do {
    if ($24) {
     $25 = $18;
     $26 = HEAP32[$18>>2]|0;
     $gep_int11 = $26;
     $gep12 = (($gep_int11) + 36)|0;
     $27 = $gep12;
     $28 = HEAP32[$27>>2]|0;
     $29 = FUNCTION_TABLE_ii[$28 & 127]($18)|0;
     $30 = ($29|0)==(-1);
     
     if (!($30)) {
      break;
     }
     HEAP32[$17>>2] = 0;
     
     label = 11;
     break L8;
    }
   } while(0);
   
   if ($16) {
    $33 = $18;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  
  if ($16) {
   label = 12;
  } else {
   $33 = 0;
  }
 }
 if ((label|0) == 12) {
  $31 = HEAP32[$__err>>2]|0;
  $32 = $31 | 6;
  HEAP32[$__err>>2] = $32;
  
  $$01 = 0;
  
  STACKTOP = sp;return $$01|0;
 }
 
 $34 = HEAP32[$1>>2]|0;
 $gep_int13 = $34;
 $gep14 = (($gep_int13) + 12)|0;
 $35 = $gep14;
 $36 = HEAP32[$35>>2]|0;
 $gep_int15 = $34;
 $gep16 = (($gep_int15) + 16)|0;
 $37 = $gep16;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($36|0)==($38|0);
 
 if ($39) {
  $40 = $34;
  $41 = HEAP32[$34>>2]|0;
  $gep_int17 = $41;
  $gep18 = (($gep_int17) + 36)|0;
  $42 = $gep18;
  $43 = HEAP32[$42>>2]|0;
  $44 = FUNCTION_TABLE_ii[$43 & 127]($34)|0;
  $extract$t$i = $44&255;
  
  $$0$i$off0$i = $extract$t$i;
 } else {
  $45 = HEAP8[$36]|0;
  
  $$0$i$off0$i = $45;
 }
 
 $isascii1$i = ($$0$i$off0$i<<24>>24)>(-1);
 
 do {
  if ($isascii1$i) {
   $46 = $$0$i$off0$i << 24 >> 24;
   $gep_int19 = $__ct;
   $gep20 = (($gep_int19) + 8)|0;
   $47 = $gep20;
   $48 = HEAP32[$47>>2]|0;
   $gep_int21 = $48;
   $gep_array = $46<<1;
   $gep22 = (($gep_int21) + ($gep_array))|0;
   $49 = $gep22;
   $50 = HEAP16[$49>>1]|0;
   $51 = $50 & 2048;
   $52 = ($51<<16>>16)==(0);
   
   if ($52) {
    break;
   }
   $55 = $__ct;
   $56 = HEAP32[$__ct>>2]|0;
   $gep_int23 = $56;
   $gep24 = (($gep_int23) + 36)|0;
   $57 = $gep24;
   $58 = HEAP32[$57>>2]|0;
   $59 = FUNCTION_TABLE_iiii[$58 & 63]($__ct,$$0$i$off0$i,0)|0;
   $60 = $59 << 24 >> 24;
   $61 = HEAP32[$1>>2]|0;
   $gep_int25 = $61;
   $gep26 = (($gep_int25) + 12)|0;
   $62 = $gep26;
   $63 = HEAP32[$62>>2]|0;
   $gep_int27 = $61;
   $gep28 = (($gep_int27) + 16)|0;
   $64 = $gep28;
   $65 = HEAP32[$64>>2]|0;
   $66 = ($63|0)==($65|0);
   
   if ($66) {
    $67 = $61;
    $68 = HEAP32[$61>>2]|0;
    $gep_int29 = $68;
    $gep30 = (($gep_int29) + 40)|0;
    $69 = $gep30;
    $70 = HEAP32[$69>>2]|0;
    u$23 = FUNCTION_TABLE_ii[$70 & 127]($61)|0;
    
    $$0$in = $__n;$$pre$i2$i$i7 = $33;$72 = $33;$__r$0$in = $60;
   } else {
    $gep_int31 = $63;
    $gep32 = (($gep_int31) + 1)|0;
    $71 = $gep32;
    HEAP32[$62>>2] = $71;
    
    $$0$in = $__n;$$pre$i2$i$i7 = $33;$72 = $33;$__r$0$in = $60;
   }
   while(1) {
    
    
    
    
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $73 = HEAP32[$1>>2]|0;
    $74 = ($73|0)==(0);
    
    do {
     if ($74) {
      $86 = 0;
     } else {
      $gep_int33 = $73;
      $gep34 = (($gep_int33) + 12)|0;
      $75 = $gep34;
      $76 = HEAP32[$75>>2]|0;
      $gep_int35 = $73;
      $gep36 = (($gep_int35) + 16)|0;
      $77 = $gep36;
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      
      if (!($79)) {
       $86 = $73;
       break;
      }
      $80 = $73;
      $81 = HEAP32[$73>>2]|0;
      $gep_int37 = $81;
      $gep38 = (($gep_int37) + 36)|0;
      $82 = $gep38;
      $83 = HEAP32[$82>>2]|0;
      $84 = FUNCTION_TABLE_ii[$83 & 127]($73)|0;
      $85 = ($84|0)==(-1);
      
      if ($85) {
       HEAP32[$1>>2] = 0;
       
       $86 = 0;
       break;
      } else {
       $$pre$i$i$i3 = HEAP32[$1>>2]|0;
       
       $86 = $$pre$i$i$i3;
       break;
      }
     }
    } while(0);
    
    $87 = ($86|0)==(0);
    $88 = ($72|0)==(0);
    
    do {
     if ($88) {
      $$pre$i2$i$i21 = $$pre$i2$i$i7;$100 = 0;
     } else {
      $gep_int39 = $72;
      $gep40 = (($gep_int39) + 12)|0;
      $89 = $gep40;
      $90 = HEAP32[$89>>2]|0;
      $gep_int41 = $72;
      $gep42 = (($gep_int41) + 16)|0;
      $91 = $gep42;
      $92 = HEAP32[$91>>2]|0;
      $93 = ($90|0)==($92|0);
      
      if (!($93)) {
       $$pre$i2$i$i21 = $$pre$i2$i$i7;$100 = $72;
       break;
      }
      $94 = $72;
      $95 = HEAP32[$72>>2]|0;
      $gep_int43 = $95;
      $gep44 = (($gep_int43) + 36)|0;
      $96 = $gep44;
      $97 = HEAP32[$96>>2]|0;
      $98 = FUNCTION_TABLE_ii[$97 & 127]($72)|0;
      $99 = ($98|0)==(-1);
      
      if (!($99)) {
       $$pre$i2$i$i21 = $$pre$i2$i$i7;$100 = $$pre$i2$i$i7;
       break;
      }
      HEAP32[$17>>2] = 0;
      
      $$pre$i2$i$i21 = 0;$100 = 0;
     }
    } while(0);
    
    
    $101 = ($100|0)==(0);
    $tmp$i$i9 = $87 ^ $101;
    $102 = ($$0|0)>(0);
    $$ = $tmp$i$i9 & $102;
    $103 = HEAP32[$1>>2]|0;
    
    if (!($$)) {
     label = 40;
     break;
    }
    $gep_int45 = $103;
    $gep46 = (($gep_int45) + 12)|0;
    $104 = $gep46;
    $105 = HEAP32[$104>>2]|0;
    $gep_int47 = $103;
    $gep48 = (($gep_int47) + 16)|0;
    $106 = $gep48;
    $107 = HEAP32[$106>>2]|0;
    $108 = ($105|0)==($107|0);
    
    if ($108) {
     $109 = $103;
     $110 = HEAP32[$103>>2]|0;
     $gep_int49 = $110;
     $gep50 = (($gep_int49) + 36)|0;
     $111 = $gep50;
     $112 = HEAP32[$111>>2]|0;
     $113 = FUNCTION_TABLE_ii[$112 & 127]($103)|0;
     $extract$t$i10 = $113&255;
     
     $$0$i$off0$i11 = $extract$t$i10;
    } else {
     $114 = HEAP8[$105]|0;
     
     $$0$i$off0$i11 = $114;
    }
    
    $isascii1$i13 = ($$0$i$off0$i11<<24>>24)>(-1);
    
    if (!($isascii1$i13)) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $115 = $$0$i$off0$i11 << 24 >> 24;
    $116 = HEAP32[$47>>2]|0;
    $gep_int51 = $116;
    $gep_array52 = $115<<1;
    $gep53 = (($gep_int51) + ($gep_array52))|0;
    $117 = $gep53;
    $118 = HEAP16[$117>>1]|0;
    $119 = $118 & 2048;
    $120 = ($119<<16>>16)==(0);
    
    if ($120) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $121 = ($__r$0*10)|0;
    $122 = HEAP32[$__ct>>2]|0;
    $gep_int54 = $122;
    $gep55 = (($gep_int54) + 36)|0;
    $123 = $gep55;
    $124 = HEAP32[$123>>2]|0;
    $125 = FUNCTION_TABLE_iiii[$124 & 63]($__ct,$$0$i$off0$i11,0)|0;
    $126 = $125 << 24 >> 24;
    $127 = (($126) + ($121))|0;
    $128 = HEAP32[$1>>2]|0;
    $gep_int56 = $128;
    $gep57 = (($gep_int56) + 12)|0;
    $129 = $gep57;
    $130 = HEAP32[$129>>2]|0;
    $gep_int58 = $128;
    $gep59 = (($gep_int58) + 16)|0;
    $131 = $gep59;
    $132 = HEAP32[$131>>2]|0;
    $133 = ($130|0)==($132|0);
    
    if ($133) {
     $134 = $128;
     $135 = HEAP32[$128>>2]|0;
     $gep_int60 = $135;
     $gep61 = (($gep_int60) + 40)|0;
     $136 = $gep61;
     $137 = HEAP32[$136>>2]|0;
     u$45 = FUNCTION_TABLE_ii[$137 & 127]($128)|0;
     
     $$0$in$phi = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i21;$72 = $100;$__r$0$in = $127;$$0$in = $$0$in$phi;
     continue;
    } else {
     $gep_int62 = $130;
     $gep63 = (($gep_int62) + 1)|0;
     $138 = $gep63;
     HEAP32[$129>>2] = $138;
     
     $$0$in$phi = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i21;$72 = $100;$__r$0$in = $127;$$0$in = $$0$in$phi;
     continue;
    }
   }
   if ((label|0) == 40) {
    $139 = ($103|0)==(0);
    
    do {
     if ($139) {
      $151 = 0;
     } else {
      $gep_int64 = $103;
      $gep65 = (($gep_int64) + 12)|0;
      $140 = $gep65;
      $141 = HEAP32[$140>>2]|0;
      $gep_int66 = $103;
      $gep67 = (($gep_int66) + 16)|0;
      $142 = $gep67;
      $143 = HEAP32[$142>>2]|0;
      $144 = ($141|0)==($143|0);
      
      if (!($144)) {
       $151 = $103;
       break;
      }
      $145 = $103;
      $146 = HEAP32[$103>>2]|0;
      $gep_int68 = $146;
      $gep69 = (($gep_int68) + 36)|0;
      $147 = $gep69;
      $148 = HEAP32[$147>>2]|0;
      $149 = FUNCTION_TABLE_ii[$148 & 127]($103)|0;
      $150 = ($149|0)==(-1);
      
      if ($150) {
       HEAP32[$1>>2] = 0;
       
       $151 = 0;
       break;
      } else {
       $$pre$i$i$i17 = HEAP32[$1>>2]|0;
       
       $151 = $$pre$i$i$i17;
       break;
      }
     }
    } while(0);
    
    $152 = ($151|0)==(0);
    $153 = ($$pre$i2$i$i21|0)==(0);
    
    L65: do {
     if ($153) {
      label = 50;
     } else {
      $gep_int70 = $$pre$i2$i$i21;
      $gep71 = (($gep_int70) + 12)|0;
      $154 = $gep71;
      $155 = HEAP32[$154>>2]|0;
      $gep_int72 = $$pre$i2$i$i21;
      $gep73 = (($gep_int72) + 16)|0;
      $156 = $gep73;
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      
      do {
       if ($158) {
        $159 = $$pre$i2$i$i21;
        $160 = HEAP32[$$pre$i2$i$i21>>2]|0;
        $gep_int74 = $160;
        $gep75 = (($gep_int74) + 36)|0;
        $161 = $gep75;
        $162 = HEAP32[$161>>2]|0;
        $163 = FUNCTION_TABLE_ii[$162 & 127]($$pre$i2$i$i21)|0;
        $164 = ($163|0)==(-1);
        
        if (!($164)) {
         break;
        }
        HEAP32[$17>>2] = 0;
        
        label = 50;
        break L65;
       }
      } while(0);
      
      if ($152) {
       $$01 = $__r$0;
      } else {
       break;
      }
      
      STACKTOP = sp;return $$01|0;
     }
    } while(0);
    do {
     if ((label|0) == 50) {
      
      if ($152) {
       break;
      } else {
       $$01 = $__r$0;
      }
      
      STACKTOP = sp;return $$01|0;
     }
    } while(0);
    $165 = HEAP32[$__err>>2]|0;
    $166 = $165 | 2;
    HEAP32[$__err>>2] = $166;
    
    $$01 = $__r$0;
    
    STACKTOP = sp;return $$01|0;
   }
   else if ((label|0) == 52) {
    
    STACKTOP = sp;return $$01|0;
   }
  }
 } while(0);
 $53 = HEAP32[$__err>>2]|0;
 $54 = $53 | 4;
 HEAP32[$__err>>2] = $54;
 
 $$01 = 0;
 
 STACKTOP = sp;return $$01|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph43 = 0, $$0$pn = 0, $$0$pn$phi = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$phi$trans$insert$pre$pre = 0, $$pre = 0, $$pre$i$i$i21 = 0;
 var $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0, $$pre$i3$i$i1245 = 0, $$pre$i3$i$i1246 = 0, $$pre44 = 0, $$pre44$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0;
 var $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0, $gep107 = 0, $gep109 = 0, $gep111 = 0, $gep114 = 0, $gep116 = 0, $gep118 = 0, $gep16 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep33 = 0, $gep35 = 0;
 var $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep76 = 0;
 var $gep78 = 0, $gep80 = 0, $gep82 = 0, $gep84 = 0, $gep86 = 0, $gep88 = 0, $gep90 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep98 = 0, $gep_array = 0, $gep_int = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int112 = 0;
 var $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0, $gep_int119 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int27 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int32 = 0;
 var $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int71 = 0;
 var $gep_int73 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int99 = 0, $phitmp$i4$i$i13 = 0, $tmp$i$i15 = 0, label = 0, sp = 0, u$100 = 0, u$17 = 0;
 var u$41 = 0, u$91 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $2 = sp + 40|0;
 $3 = sp + 48|0;
 $4 = sp + 56|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $gep_int = $1;
 $5 = $gep_int;
 $6 = HEAP32[$5>>2]|0;
 $7 = $__p$i$i$i$i;
 
 $expanded2 = 8472;
 $gep_int12 = 8472;
 $expanded = $gep_int12;
 $8 = HEAP32[$expanded>>2]|0;
 $9 = ($8|0)==(-1);
 
 do {
  if (!($9)) {
   $gep_int13 = $__p$i$i$i$i;
   $10 = $gep_int13;
   $expanded3 = 8472;
   HEAP32[$10>>2] = $expanded3;
   $gep_int14 = $__p$i$i$i$i;
   $gep = (($gep_int14) + 4)|0;
   $11 = $gep;
   $expanded4 = 177;
   HEAP32[$11>>2] = $expanded4;
   $gep_int15 = $__p$i$i$i$i;
   $gep16 = (($gep_int15) + 8)|0;
   $12 = $gep16;
   HEAP32[$12>>2] = 0;
   __THREW__ = 0;
   $expanded6 = 8472;
   $gep_int17 = 8472;
   $expanded5 = $gep_int17;
   invoke_viii(17,$expanded5|0,$7|0,178);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if (!($14)) {
    break;
   }
   $expanded11 = 69;
   $77 = ___cxa_find_matching_catch(-1,-1)|0;
   $78 = tempRet0;
   $79 = HEAP32[$5>>2]|0;
   $gep_int44 = $79;
   $80 = $gep_int44;
   u$41 = __ZNSt3__114__shared_count16__release_sharedEv($80)|0;
   ___resumeException($77|0);
   // unreachable
  }
 } while(0);
 
 $expanded8 = 8472;
 $gep_int18 = 8472;
 $gep19 = (($gep_int18) + 4)|0;
 $expanded7 = $gep19;
 $15 = HEAP32[$expanded7>>2]|0;
 $16 = (($15) + -1)|0;
 $gep_int20 = $6;
 $gep21 = (($gep_int20) + 12)|0;
 $17 = $gep21;
 $18 = HEAP32[$17>>2]|0;
 $gep_int22 = $6;
 $gep23 = (($gep_int22) + 8)|0;
 $19 = $gep23;
 $20 = HEAP32[$19>>2]|0;
 $21 = $18;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = $23 >> 2;
 $25 = ($24>>>0)>($16>>>0);
 
 do {
  if ($25) {
   $gep_int24 = $20;
   $gep_array = $16<<2;
   $gep25 = (($gep_int24) + ($gep_array))|0;
   $26 = $gep25;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0);
   
   if ($28) {
    break;
   }
   $33 = $27;
   $34 = HEAP32[$5>>2]|0;
   $gep_int26 = $34;
   $35 = $gep_int26;
   u$17 = __ZNSt3__114__shared_count16__release_sharedEv($35)|0;
   HEAP32[$__err>>2] = 0;
   $36 = ($__fmtb|0)==($__fmte|0);
   $gep_int27 = $__b;
   $$phi$trans$insert$pre$pre = $gep_int27;
   
   L8: do {
    if ($36) {
     label = 71;
    } else {
     $gep_int28 = $__e;
     $37 = $gep_int28;
     $38 = $27;
     $39 = $27;
     $40 = $27;
     $41 = $this;
     $gep_int29 = $3;
     $42 = $gep_int29;
     $gep_int30 = $4;
     $43 = $gep_int30;
     $gep_int31 = $2;
     $44 = $gep_int31;
     
     $$0$ph43 = $__fmtb;$$pre44 = 0;
     L10: while(1) {
      
      
      
      $45 = $$pre44;
      while(1) {
       
       $46 = ($45|0)==(0);
       
       if (!($46)) {
        label = 71;
        break L8;
       }
       $47 = HEAP32[$$phi$trans$insert$pre$pre>>2]|0;
       $48 = ($47|0)==(0);
       
       do {
        if ($48) {
         $61 = 0;$62 = 1;
        } else {
         $gep_int32 = $47;
         $gep33 = (($gep_int32) + 12)|0;
         $49 = $gep33;
         $50 = HEAP32[$49>>2]|0;
         $gep_int34 = $47;
         $gep35 = (($gep_int34) + 16)|0;
         $51 = $gep35;
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         
         if ($53) {
          $54 = $47;
          $55 = HEAP32[$47>>2]|0;
          $gep_int36 = $55;
          $gep37 = (($gep_int36) + 36)|0;
          $56 = $gep37;
          $57 = HEAP32[$56>>2]|0;
          $58 = FUNCTION_TABLE_ii[$57 & 127]($47)|0;
          
          $$0$i$i$i$i = $58;
         } else {
          $59 = HEAP32[$50>>2]|0;
          
          $$0$i$i$i$i = $59;
         }
         
         $60 = ($$0$i$i$i$i|0)==(-1);
         
         if (!($60)) {
          $61 = $47;$62 = 0;
          break;
         }
         HEAP32[$$phi$trans$insert$pre$pre>>2] = 0;
         
         $61 = 0;$62 = 1;
        }
       } while(0);
       
       
       $63 = HEAP32[$37>>2]|0;
       $64 = ($63|0)==(0);
       
       do {
        if ($64) {
         label = 23;
        } else {
         $gep_int38 = $63;
         $gep39 = (($gep_int38) + 12)|0;
         $65 = $gep39;
         $66 = HEAP32[$65>>2]|0;
         $gep_int40 = $63;
         $gep41 = (($gep_int40) + 16)|0;
         $67 = $gep41;
         $68 = HEAP32[$67>>2]|0;
         $69 = ($66|0)==($68|0);
         
         if ($69) {
          $70 = $63;
          $71 = HEAP32[$63>>2]|0;
          $gep_int42 = $71;
          $gep43 = (($gep_int42) + 36)|0;
          $72 = $gep43;
          $73 = HEAP32[$72>>2]|0;
          $74 = FUNCTION_TABLE_ii[$73 & 127]($63)|0;
          
          $$0$i$i1$i$i = $74;
         } else {
          $75 = HEAP32[$66>>2]|0;
          
          $$0$i$i1$i$i = $75;
         }
         
         $76 = ($$0$i$i1$i$i|0)==(-1);
         
         if ($76) {
          HEAP32[$37>>2] = 0;
          
          label = 23;
          break;
         } else {
          
          if ($62) {
           $81 = $63;
           break;
          } else {
           label = 25;
           break L10;
          }
         }
        }
       } while(0);
       if ((label|0) == 23) {
        label = 0;
        
        if ($62) {
         label = 25;
         break L10;
        } else {
         $81 = 0;
        }
       }
       
       $82 = HEAP32[$$0$ph43>>2]|0;
       $83 = HEAP32[$27>>2]|0;
       $gep_int45 = $83;
       $gep46 = (($gep_int45) + 52)|0;
       $84 = $gep46;
       $85 = HEAP32[$84>>2]|0;
       $86 = FUNCTION_TABLE_iiii[$85 & 63]($33,$82,0)|0;
       $87 = ($86<<24>>24)==(37);
       
       if ($87) {
        label = 28;
        break;
       }
       $116 = HEAP32[$$0$ph43>>2]|0;
       $117 = HEAP32[$27>>2]|0;
       $gep_int59 = $117;
       $gep60 = (($gep_int59) + 12)|0;
       $118 = $gep60;
       $119 = HEAP32[$118>>2]|0;
       $120 = FUNCTION_TABLE_iiii[$119 & 63]($33,8192,$116)|0;
       
       if ($120) {
        $$0$pn = $$0$ph43;
        label = 38;
        break;
       }
       $gep_int89 = $61;
       $gep90 = (($gep_int89) + 12)|0;
       $180 = $gep90;
       $181 = HEAP32[$180>>2]|0;
       $gep_int91 = $61;
       $gep92 = (($gep_int91) + 16)|0;
       $182 = $gep92;
       $183 = HEAP32[$182>>2]|0;
       $184 = ($181|0)==($183|0);
       
       if ($184) {
        $185 = $61;
        $186 = HEAP32[$61>>2]|0;
        $gep_int93 = $186;
        $gep94 = (($gep_int93) + 36)|0;
        $187 = $gep94;
        $188 = HEAP32[$187>>2]|0;
        $189 = FUNCTION_TABLE_ii[$188 & 127]($61)|0;
        
        $$0$i$i16 = $189;
       } else {
        $190 = HEAP32[$181>>2]|0;
        
        $$0$i$i16 = $190;
       }
       
       $191 = HEAP32[$27>>2]|0;
       $gep_int95 = $191;
       $gep96 = (($gep_int95) + 28)|0;
       $192 = $gep96;
       $193 = HEAP32[$192>>2]|0;
       $194 = FUNCTION_TABLE_iii[$193 & 63]($33,$$0$i$i16)|0;
       $195 = HEAP32[$$0$ph43>>2]|0;
       $196 = HEAP32[$27>>2]|0;
       $gep_int97 = $196;
       $gep98 = (($gep_int97) + 28)|0;
       $197 = $gep98;
       $198 = HEAP32[$197>>2]|0;
       $199 = FUNCTION_TABLE_iii[$198 & 63]($33,$195)|0;
       $200 = ($194|0)==($199|0);
       
       if ($200) {
        label = 66;
        break;
       }
       HEAP32[$__err>>2] = 4;
       
       $45 = 4;
      }
      L42: do {
       if ((label|0) == 28) {
        label = 0;
        $gep_int47 = $$0$ph43;
        $gep48 = (($gep_int47) + 4)|0;
        $88 = $gep48;
        $89 = ($88|0)==($__fmte|0);
        
        if ($89) {
         label = 29;
         break L10;
        }
        $90 = HEAP32[$88>>2]|0;
        $91 = HEAP32[$27>>2]|0;
        $gep_int49 = $91;
        $gep50 = (($gep_int49) + 52)|0;
        $92 = $gep50;
        $93 = HEAP32[$92>>2]|0;
        $94 = FUNCTION_TABLE_iiii[$93 & 63]($33,$90,0)|0;
        
        if ((($94<<24>>24) == 48) | (($94<<24>>24) == 69)) {
         $gep_int51 = $$0$ph43;
         $gep52 = (($gep_int51) + 8)|0;
         $95 = $gep52;
         $96 = ($95|0)==($__fmte|0);
         
         if ($96) {
          label = 32;
          break L10;
         }
         $97 = HEAP32[$95>>2]|0;
         $98 = HEAP32[$27>>2]|0;
         $gep_int53 = $98;
         $gep54 = (($gep_int53) + 52)|0;
         $99 = $gep54;
         $100 = HEAP32[$99>>2]|0;
         $101 = FUNCTION_TABLE_iiii[$100 & 63]($33,$97,0)|0;
         
         $$1 = $95;$__cmd$0 = $101;$__opt$0 = $94;
        } else {
         $$1 = $88;$__cmd$0 = $94;$__opt$0 = 0;
        }
        
        
        
        $102 = HEAP32[$this>>2]|0;
        $gep_int55 = $102;
        $gep56 = (($gep_int55) + 36)|0;
        $103 = $gep56;
        $104 = HEAP32[$103>>2]|0;
        HEAP32[$42>>2] = $61;
        HEAP32[$43>>2] = $81;
        $105 = $$byval_copy;
        
        $106 = $$byval_copy;
        $107 = $3;
        ;HEAP32[$106+0>>2]=HEAP32[$107+0>>2]|0;
        $108 = $$byval_copy1;
        
        $109 = $$byval_copy1;
        $110 = $4;
        ;HEAP32[$109+0>>2]=HEAP32[$110+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$104 & 3]($2,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $111 = $$byval_copy1;
        
        $112 = $$byval_copy;
        
        $113 = HEAP32[$44>>2]|0;
        HEAP32[$$phi$trans$insert$pre$pre>>2] = $113;
        $gep_int57 = $$1;
        $gep58 = (($gep_int57) + 4)|0;
        $114 = $gep58;
        
        $$0$ph$be = $114;
       }
       else if ((label|0) == 38) {
        while(1) {
         label = 0;
         
         $gep_int61 = $$0$pn;
         $gep62 = (($gep_int61) + 4)|0;
         $$2 = $gep62;
         $121 = ($$2|0)==($__fmte|0);
         
         if ($121) {
          $$2$lcssa = $__fmte;
          break;
         }
         $122 = HEAP32[$$2>>2]|0;
         $123 = HEAP32[$27>>2]|0;
         $gep_int63 = $123;
         $gep64 = (($gep_int63) + 12)|0;
         $124 = $gep64;
         $125 = HEAP32[$124>>2]|0;
         $126 = FUNCTION_TABLE_iiii[$125 & 63]($33,8192,$122)|0;
         
         if ($126) {
          $$0$pn$phi = $$2;$$0$pn = $$0$pn$phi;
          label = 38;
         } else {
          $$2$lcssa = $$2;
          break;
         }
        }
        
        
        $$pre$i$i$i6 = $61;$$pre$i3$i$i12 = $81;$127 = $81;
        while(1) {
         
         
         
         $128 = ($$pre$i$i$i6|0)==(0);
         
         do {
          if ($128) {
           $141 = 0;$142 = 1;
          } else {
           $gep_int65 = $$pre$i$i$i6;
           $gep66 = (($gep_int65) + 12)|0;
           $129 = $gep66;
           $130 = HEAP32[$129>>2]|0;
           $gep_int67 = $$pre$i$i$i6;
           $gep68 = (($gep_int67) + 16)|0;
           $131 = $gep68;
           $132 = HEAP32[$131>>2]|0;
           $133 = ($130|0)==($132|0);
           
           if ($133) {
            $134 = $$pre$i$i$i6;
            $135 = HEAP32[$$pre$i$i$i6>>2]|0;
            $gep_int69 = $135;
            $gep70 = (($gep_int69) + 36)|0;
            $136 = $gep70;
            $137 = HEAP32[$136>>2]|0;
            $138 = FUNCTION_TABLE_ii[$137 & 127]($$pre$i$i$i6)|0;
            
            $$0$i$i$i$i4 = $138;
           } else {
            $139 = HEAP32[$130>>2]|0;
            
            $$0$i$i$i$i4 = $139;
           }
           
           $140 = ($$0$i$i$i$i4|0)==(-1);
           
           if (!($140)) {
            $141 = $$pre$i$i$i6;$142 = 0;
            break;
           }
           HEAP32[$$phi$trans$insert$pre$pre>>2] = 0;
           
           $141 = 0;$142 = 1;
          }
         } while(0);
         
         
         $143 = ($127|0)==(0);
         
         do {
          if ($143) {
           $$pre$i3$i$i1246 = $$pre$i3$i$i12;
           label = 53;
          } else {
           $gep_int71 = $127;
           $gep72 = (($gep_int71) + 12)|0;
           $144 = $gep72;
           $145 = HEAP32[$144>>2]|0;
           $gep_int73 = $127;
           $gep74 = (($gep_int73) + 16)|0;
           $146 = $gep74;
           $147 = HEAP32[$146>>2]|0;
           $148 = ($145|0)==($147|0);
           
           if ($148) {
            $149 = $127;
            $150 = HEAP32[$127>>2]|0;
            $gep_int75 = $150;
            $gep76 = (($gep_int75) + 36)|0;
            $151 = $gep76;
            $152 = HEAP32[$151>>2]|0;
            $153 = FUNCTION_TABLE_ii[$152 & 127]($127)|0;
            
            $$0$i$i1$i$i10 = $153;
           } else {
            $154 = HEAP32[$145>>2]|0;
            
            $$0$i$i1$i$i10 = $154;
           }
           
           $155 = ($$0$i$i1$i$i10|0)==(-1);
           
           if ($155) {
            HEAP32[$37>>2] = 0;
            
            $$pre$i3$i$i1246 = 0;
            label = 53;
            break;
           } else {
            $phitmp$i4$i$i13 = ($$pre$i3$i$i12|0)==(0);
            $tmp$i$i15 = $142 ^ $phitmp$i4$i$i13;
            
            if ($tmp$i$i15) {
             $$pre$i3$i$i1245 = $$pre$i3$i$i12;$156 = $$pre$i3$i$i12;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L42;
            }
           }
          }
         } while(0);
         if ((label|0) == 53) {
          label = 0;
          
          
          if ($142) {
           $$0$ph$be = $$2$lcssa;
           break L42;
          } else {
           $$pre$i3$i$i1245 = $$pre$i3$i$i1246;$156 = 0;
          }
         }
         
         
         $gep_int77 = $141;
         $gep78 = (($gep_int77) + 12)|0;
         $157 = $gep78;
         $158 = HEAP32[$157>>2]|0;
         $gep_int79 = $141;
         $gep80 = (($gep_int79) + 16)|0;
         $159 = $gep80;
         $160 = HEAP32[$159>>2]|0;
         $161 = ($158|0)==($160|0);
         
         if ($161) {
          $162 = $141;
          $163 = HEAP32[$141>>2]|0;
          $gep_int81 = $163;
          $gep82 = (($gep_int81) + 36)|0;
          $164 = $gep82;
          $165 = HEAP32[$164>>2]|0;
          $166 = FUNCTION_TABLE_ii[$165 & 127]($141)|0;
          
          $$0$i$i = $166;
         } else {
          $167 = HEAP32[$158>>2]|0;
          
          $$0$i$i = $167;
         }
         
         $168 = HEAP32[$27>>2]|0;
         $gep_int83 = $168;
         $gep84 = (($gep_int83) + 12)|0;
         $169 = $gep84;
         $170 = HEAP32[$169>>2]|0;
         $171 = FUNCTION_TABLE_iiii[$170 & 63]($33,8192,$$0$i$i)|0;
         
         if (!($171)) {
          $$0$ph$be = $$2$lcssa;
          break L42;
         }
         $172 = HEAP32[$157>>2]|0;
         $173 = HEAP32[$159>>2]|0;
         $174 = ($172|0)==($173|0);
         
         if ($174) {
          $175 = $141;
          $176 = HEAP32[$141>>2]|0;
          $gep_int85 = $176;
          $gep86 = (($gep_int85) + 40)|0;
          $177 = $gep86;
          $178 = HEAP32[$177>>2]|0;
          u$91 = FUNCTION_TABLE_ii[$178 & 127]($141)|0;
          
          $$pre$i$i$i6 = $141;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$127 = $156;
          continue;
         } else {
          $gep_int87 = $172;
          $gep88 = (($gep_int87) + 4)|0;
          $179 = $gep88;
          HEAP32[$157>>2] = $179;
          
          $$pre$i$i$i6 = $141;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$127 = $156;
          continue;
         }
        }
       }
       else if ((label|0) == 66) {
        label = 0;
        $201 = HEAP32[$180>>2]|0;
        $202 = HEAP32[$182>>2]|0;
        $203 = ($201|0)==($202|0);
        
        if ($203) {
         $204 = $61;
         $205 = HEAP32[$61>>2]|0;
         $gep_int99 = $205;
         $gep100 = (($gep_int99) + 40)|0;
         $206 = $gep100;
         $207 = HEAP32[$206>>2]|0;
         u$100 = FUNCTION_TABLE_ii[$207 & 127]($61)|0;
         
        } else {
         $gep_int101 = $201;
         $gep102 = (($gep_int101) + 4)|0;
         $208 = $gep102;
         HEAP32[$180>>2] = $208;
         
        }
        $gep_int103 = $$0$ph43;
        $gep104 = (($gep_int103) + 4)|0;
        $209 = $gep104;
        
        $$0$ph$be = $209;
       }
      } while(0);
      
      $115 = ($$0$ph$be|0)==($__fmte|0);
      
      if ($115) {
       label = 71;
       break L8;
      }
      $$pre44$pre = HEAP32[$__err>>2]|0;
      
      $$0$ph43 = $$0$ph$be;$$pre44 = $$pre44$pre;
     }
     if ((label|0) == 25) {
      HEAP32[$__err>>2] = 4;
      
      $$pre$i$i$i21 = $61;
      break;
     }
     else if ((label|0) == 29) {
      HEAP32[$__err>>2] = 4;
      
      $$pre$i$i$i21 = $61;
      break;
     }
     else if ((label|0) == 32) {
      HEAP32[$__err>>2] = 4;
      
      $$pre$i$i$i21 = $61;
      break;
     }
    }
   } while(0);
   if ((label|0) == 71) {
    $$pre = HEAP32[$$phi$trans$insert$pre$pre>>2]|0;
    
    $$pre$i$i$i21 = $$pre;
   }
   
   $gep_int105 = $__b;
   $210 = $gep_int105;
   $211 = ($$pre$i$i$i21|0)==(0);
   
   do {
    if ($211) {
     $224 = 0;$225 = 1;
    } else {
     $gep_int106 = $$pre$i$i$i21;
     $gep107 = (($gep_int106) + 12)|0;
     $212 = $gep107;
     $213 = HEAP32[$212>>2]|0;
     $gep_int108 = $$pre$i$i$i21;
     $gep109 = (($gep_int108) + 16)|0;
     $214 = $gep109;
     $215 = HEAP32[$214>>2]|0;
     $216 = ($213|0)==($215|0);
     
     if ($216) {
      $217 = $$pre$i$i$i21;
      $218 = HEAP32[$$pre$i$i$i21>>2]|0;
      $gep_int110 = $218;
      $gep111 = (($gep_int110) + 36)|0;
      $219 = $gep111;
      $220 = HEAP32[$219>>2]|0;
      $221 = FUNCTION_TABLE_ii[$220 & 127]($$pre$i$i$i21)|0;
      
      $$0$i$i$i$i19 = $221;
     } else {
      $222 = HEAP32[$213>>2]|0;
      
      $$0$i$i$i$i19 = $222;
     }
     
     $223 = ($$0$i$i$i$i19|0)==(-1);
     
     if (!($223)) {
      $224 = $$pre$i$i$i21;$225 = 0;
      break;
     }
     HEAP32[$210>>2] = 0;
     
     $224 = 0;$225 = 1;
    }
   } while(0);
   
   
   $gep_int112 = $__e;
   $226 = $gep_int112;
   $227 = HEAP32[$226>>2]|0;
   $228 = ($227|0)==(0);
   
   do {
    if ($228) {
     label = 84;
    } else {
     $gep_int113 = $227;
     $gep114 = (($gep_int113) + 12)|0;
     $229 = $gep114;
     $230 = HEAP32[$229>>2]|0;
     $gep_int115 = $227;
     $gep116 = (($gep_int115) + 16)|0;
     $231 = $gep116;
     $232 = HEAP32[$231>>2]|0;
     $233 = ($230|0)==($232|0);
     
     if ($233) {
      $234 = $227;
      $235 = HEAP32[$227>>2]|0;
      $gep_int117 = $235;
      $gep118 = (($gep_int117) + 36)|0;
      $236 = $gep118;
      $237 = HEAP32[$236>>2]|0;
      $238 = FUNCTION_TABLE_ii[$237 & 127]($227)|0;
      
      $$0$i$i1$i$i25 = $238;
     } else {
      $239 = HEAP32[$230>>2]|0;
      
      $$0$i$i1$i$i25 = $239;
     }
     
     $240 = ($$0$i$i1$i$i25|0)==(-1);
     
     if ($240) {
      HEAP32[$226>>2] = 0;
      
      label = 84;
      break;
     }
     
     if (!($225)) {
      break;
     }
     $gep_int119 = $agg$result;
     $243 = $gep_int119;
     HEAP32[$243>>2] = $224;
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 84) {
     
     if ($225) {
      break;
     }
     $gep_int119 = $agg$result;
     $243 = $gep_int119;
     HEAP32[$243>>2] = $224;
     STACKTOP = sp;return;
    }
   } while(0);
   $241 = HEAP32[$__err>>2]|0;
   $242 = $241 | 2;
   HEAP32[$__err>>2] = $242;
   
   $gep_int119 = $agg$result;
   $243 = $gep_int119;
   HEAP32[$243>>2] = $224;
   STACKTOP = sp;return;
  }
 } while(0);
 $29 = ___cxa_allocate_exception(4)|0;
 $30 = $29;
 __ZNSt8bad_castC2Ev($30);
 __THREW__ = 0;
 $expanded9 = 16440;
 $expanded10 = 119;
 invoke_viii(5,$29|0,$expanded9|0,$expanded10|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 
 if ($32) {
  $expanded11 = 69;
  $77 = ___cxa_find_matching_catch(-1,-1)|0;
  $78 = tempRet0;
  $79 = HEAP32[$5>>2]|0;
  $gep_int44 = $79;
  $80 = $gep_int44;
  u$41 = __ZNSt3__114__shared_count16__release_sharedEv($80)|0;
  ___resumeException($77|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded2 = 0;
 var $expanded3 = 0, $expanded4 = 0, $gep = 0, $gep_int = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int7 = 0, $gep_int8 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $__b;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $gep_int5 = $1;
 $5 = $gep_int5;
 HEAP32[$5>>2] = $4;
 $gep_int6 = $__e;
 $6 = $gep_int6;
 $7 = HEAP32[$6>>2]|0;
 $gep_int7 = $2;
 $8 = $gep_int7;
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 $expanded2 = 7536;
 $gep_int8 = 7536;
 $expanded = $gep_int8;
 $expanded4 = 7536;
 $gep_int9 = 7536;
 $gep = (($gep_int9) + 32)|0;
 $expanded3 = $gep;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$expanded,$expanded3);
 $15 = $$byval_copy1;
 
 $16 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep3 = 0, $gep9 = 0, $gep_array = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int7 = 0, $gep_int8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $3 = $gep;
 $4 = $3;
 $5 = HEAP32[$3>>2]|0;
 $gep_int2 = $5;
 $gep3 = (($gep_int2) + 20)|0;
 $6 = $gep3;
 $7 = HEAP32[$6>>2]|0;
 $8 = FUNCTION_TABLE_ii[$7 & 127]($3)|0;
 $gep_int4 = $__b;
 $9 = $gep_int4;
 $10 = HEAP32[$9>>2]|0;
 $gep_int5 = $1;
 $11 = $gep_int5;
 HEAP32[$11>>2] = $10;
 $gep_int6 = $__e;
 $12 = $gep_int6;
 $13 = HEAP32[$12>>2]|0;
 $gep_int7 = $2;
 $14 = $gep_int7;
 HEAP32[$14>>2] = $13;
 $15 = $8;
 $16 = HEAP8[$8]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 
 if ($18) {
  $gep_int12 = $8;
  $gep13 = (($gep_int12) + 4)|0;
  $23 = $gep13;
  $gep_int14 = $8;
  $gep15 = (($gep_int14) + 4)|0;
  $24 = $gep15;
  $25 = $16&255;
  $26 = $25 >>> 1;
  
  $27 = $24;$28 = $23;$29 = $26;
 } else {
  $gep_int8 = $8;
  $gep9 = (($gep_int8) + 8)|0;
  $19 = $gep9;
  $20 = HEAP32[$19>>2]|0;
  $gep_int10 = $8;
  $gep11 = (($gep_int10) + 4)|0;
  $21 = $gep11;
  $22 = HEAP32[$21>>2]|0;
  
  $27 = $20;$28 = $20;$29 = $22;
 }
 
 
 
 $gep_int16 = $27;
 $gep_array = $29<<2;
 $gep17 = (($gep_int16) + ($gep_array))|0;
 $30 = $gep17;
 $31 = $$byval_copy;
 
 $32 = $$byval_copy;
 $33 = $1;
 ;HEAP32[$32+0>>2]=HEAP32[$33+0>>2]|0;
 $34 = $$byval_copy1;
 
 $35 = $$byval_copy1;
 $36 = $2;
 ;HEAP32[$35+0>>2]=HEAP32[$36+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$28,$30);
 $37 = $$byval_copy1;
 
 $38 = $$byval_copy;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep15 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0;
 var $gep24 = 0, $gep28 = 0, $gep31 = 0, $gep33 = 0, $gep_array = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int30 = 0;
 var $gep_int32 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, label = 0, sp = 0, u$17 = 0, u$29 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 
 $expanded1 = 8472;
 $gep_int11 = 8472;
 $expanded = $gep_int11;
 $6 = HEAP32[$expanded>>2]|0;
 $7 = ($6|0)==(-1);
 
 do {
  if (!($7)) {
   $gep_int12 = $__p$i$i$i$i;
   $8 = $gep_int12;
   $expanded2 = 8472;
   HEAP32[$8>>2] = $expanded2;
   $gep_int13 = $__p$i$i$i$i;
   $gep = (($gep_int13) + 4)|0;
   $9 = $gep;
   $expanded3 = 177;
   HEAP32[$9>>2] = $expanded3;
   $gep_int14 = $__p$i$i$i$i;
   $gep15 = (($gep_int14) + 8)|0;
   $10 = $gep15;
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   $expanded5 = 8472;
   $gep_int16 = 8472;
   $expanded4 = $gep_int16;
   invoke_viii(17,$expanded4|0,$5|0,178);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if (!($12)) {
    break;
   }
   $expanded10 = 69;
   $59 = ___cxa_find_matching_catch(-1,-1)|0;
   $60 = tempRet0;
   $61 = HEAP32[$3>>2]|0;
   $gep_int36 = $61;
   $62 = $gep_int36;
   u$29 = __ZNSt3__114__shared_count16__release_sharedEv($62)|0;
   ___resumeException($59|0);
   // unreachable
  }
 } while(0);
 
 $expanded7 = 8472;
 $gep_int17 = 8472;
 $gep18 = (($gep_int17) + 4)|0;
 $expanded6 = $gep18;
 $13 = HEAP32[$expanded6>>2]|0;
 $14 = (($13) + -1)|0;
 $gep_int19 = $4;
 $gep20 = (($gep_int19) + 12)|0;
 $15 = $gep20;
 $16 = HEAP32[$15>>2]|0;
 $gep_int21 = $4;
 $gep22 = (($gep_int21) + 8)|0;
 $17 = $gep22;
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 
 do {
  if ($23) {
   $gep_int23 = $18;
   $gep_array = $14<<2;
   $gep24 = (($gep_int23) + ($gep_array))|0;
   $24 = $gep24;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $gep_int25 = $32;
   $33 = $gep_int25;
   u$17 = __ZNSt3__114__shared_count16__release_sharedEv($33)|0;
   $gep_int26 = $__e;
   $34 = $gep_int26;
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   
   $gep_int27 = $this;
   $gep28 = (($gep_int27) + 8)|0;
   $37 = $gep28;
   $38 = $37;
   $39 = HEAP32[$37>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = FUNCTION_TABLE_ii[$40 & 127]($37)|0;
   $gep_int29 = $1;
   $42 = $gep_int29;
   HEAP32[$42>>2] = $35;
   $gep_int30 = $41;
   $gep31 = (($gep_int30) + 168)|0;
   $43 = $gep31;
   $44 = $$byval_copy;
   
   $45 = $$byval_copy;
   $46 = $1;
   ;HEAP32[$45+0>>2]=HEAP32[$46+0>>2]|0;
   $47 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$41,$43,$31,$__err,0)|0;
   $48 = $$byval_copy;
   
   $49 = $47;
   $50 = $41;
   $51 = (($49) - ($50))|0;
   $52 = ($51|0)<(168);
   
   if (!($52)) {
    
    $gep_int34 = $__b;
    $56 = $gep_int34;
    $57 = HEAP32[$56>>2]|0;
    $gep_int35 = $agg$result;
    $58 = $gep_int35;
    HEAP32[$58>>2] = $57;
    STACKTOP = sp;return;
   }
   $gep_int32 = $__tm;
   $gep33 = (($gep_int32) + 24)|0;
   $53 = $gep33;
   $54 = (($51|0) / 12)&-1;
   $55 = (($54|0) % 7)&-1;
   HEAP32[$53>>2] = $55;
   
   
   $gep_int34 = $__b;
   $56 = $gep_int34;
   $57 = HEAP32[$56>>2]|0;
   $gep_int35 = $agg$result;
   $58 = $gep_int35;
   HEAP32[$58>>2] = $57;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = ___cxa_allocate_exception(4)|0;
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 $expanded8 = 16440;
 $expanded9 = 119;
 invoke_viii(5,$27|0,$expanded8|0,$expanded9|0);
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 
 if ($30) {
  $expanded10 = 69;
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $61 = HEAP32[$3>>2]|0;
  $gep_int36 = $61;
  $62 = $gep_int36;
  u$29 = __ZNSt3__114__shared_count16__release_sharedEv($62)|0;
  ___resumeException($59|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep15 = 0, $gep18 = 0, $gep20 = 0;
 var $gep22 = 0, $gep24 = 0, $gep28 = 0, $gep30 = 0, $gep33 = 0, $gep35 = 0, $gep_array = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int27 = 0;
 var $gep_int29 = 0, $gep_int31 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, label = 0, sp = 0, u$17 = 0, u$29 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 
 $expanded1 = 8472;
 $gep_int11 = 8472;
 $expanded = $gep_int11;
 $6 = HEAP32[$expanded>>2]|0;
 $7 = ($6|0)==(-1);
 
 do {
  if (!($7)) {
   $gep_int12 = $__p$i$i$i$i;
   $8 = $gep_int12;
   $expanded2 = 8472;
   HEAP32[$8>>2] = $expanded2;
   $gep_int13 = $__p$i$i$i$i;
   $gep = (($gep_int13) + 4)|0;
   $9 = $gep;
   $expanded3 = 177;
   HEAP32[$9>>2] = $expanded3;
   $gep_int14 = $__p$i$i$i$i;
   $gep15 = (($gep_int14) + 8)|0;
   $10 = $gep15;
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   $expanded5 = 8472;
   $gep_int16 = 8472;
   $expanded4 = $gep_int16;
   invoke_viii(17,$expanded4|0,$5|0,178);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if (!($12)) {
    break;
   }
   $expanded10 = 69;
   $60 = ___cxa_find_matching_catch(-1,-1)|0;
   $61 = tempRet0;
   $62 = HEAP32[$3>>2]|0;
   $gep_int38 = $62;
   $63 = $gep_int38;
   u$29 = __ZNSt3__114__shared_count16__release_sharedEv($63)|0;
   ___resumeException($60|0);
   // unreachable
  }
 } while(0);
 
 $expanded7 = 8472;
 $gep_int17 = 8472;
 $gep18 = (($gep_int17) + 4)|0;
 $expanded6 = $gep18;
 $13 = HEAP32[$expanded6>>2]|0;
 $14 = (($13) + -1)|0;
 $gep_int19 = $4;
 $gep20 = (($gep_int19) + 12)|0;
 $15 = $gep20;
 $16 = HEAP32[$15>>2]|0;
 $gep_int21 = $4;
 $gep22 = (($gep_int21) + 8)|0;
 $17 = $gep22;
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 
 do {
  if ($23) {
   $gep_int23 = $18;
   $gep_array = $14<<2;
   $gep24 = (($gep_int23) + ($gep_array))|0;
   $24 = $gep24;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $gep_int25 = $32;
   $33 = $gep_int25;
   u$17 = __ZNSt3__114__shared_count16__release_sharedEv($33)|0;
   $gep_int26 = $__e;
   $34 = $gep_int26;
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   
   $gep_int27 = $this;
   $gep28 = (($gep_int27) + 8)|0;
   $37 = $gep28;
   $38 = $37;
   $39 = HEAP32[$37>>2]|0;
   $gep_int29 = $39;
   $gep30 = (($gep_int29) + 4)|0;
   $40 = $gep30;
   $41 = HEAP32[$40>>2]|0;
   $42 = FUNCTION_TABLE_ii[$41 & 127]($37)|0;
   $gep_int31 = $1;
   $43 = $gep_int31;
   HEAP32[$43>>2] = $35;
   $gep_int32 = $42;
   $gep33 = (($gep_int32) + 288)|0;
   $44 = $gep33;
   $45 = $$byval_copy;
   
   $46 = $$byval_copy;
   $47 = $1;
   ;HEAP32[$46+0>>2]=HEAP32[$47+0>>2]|0;
   $48 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$42,$44,$31,$__err,0)|0;
   $49 = $$byval_copy;
   
   $50 = $48;
   $51 = $42;
   $52 = (($50) - ($51))|0;
   $53 = ($52|0)<(288);
   
   if (!($53)) {
    
    $gep_int36 = $__b;
    $57 = $gep_int36;
    $58 = HEAP32[$57>>2]|0;
    $gep_int37 = $agg$result;
    $59 = $gep_int37;
    HEAP32[$59>>2] = $58;
    STACKTOP = sp;return;
   }
   $gep_int34 = $__tm;
   $gep35 = (($gep_int34) + 16)|0;
   $54 = $gep35;
   $55 = (($52|0) / 12)&-1;
   $56 = (($55|0) % 12)&-1;
   HEAP32[$54>>2] = $56;
   
   
   $gep_int36 = $__b;
   $57 = $gep_int36;
   $58 = HEAP32[$57>>2]|0;
   $gep_int37 = $agg$result;
   $59 = $gep_int37;
   HEAP32[$59>>2] = $58;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = ___cxa_allocate_exception(4)|0;
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 $expanded8 = 16440;
 $expanded9 = 119;
 invoke_viii(5,$27|0,$expanded8|0,$expanded9|0);
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 
 if ($30) {
  $expanded10 = 69;
  $60 = ___cxa_find_matching_catch(-1,-1)|0;
  $61 = tempRet0;
  $62 = HEAP32[$3>>2]|0;
  $gep_int38 = $62;
  $63 = $gep_int38;
  u$29 = __ZNSt3__114__shared_count16__release_sharedEv($63)|0;
  ___resumeException($60|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep15 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0;
 var $gep27 = 0, $gep_array = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int32 = 0, label = 0;
 var sp = 0, u$17 = 0, u$32 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $gep_int = $2;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 
 $expanded1 = 8472;
 $gep_int11 = 8472;
 $expanded = $gep_int11;
 $6 = HEAP32[$expanded>>2]|0;
 $7 = ($6|0)==(-1);
 
 do {
  if (!($7)) {
   $gep_int12 = $__p$i$i$i$i;
   $8 = $gep_int12;
   $expanded2 = 8472;
   HEAP32[$8>>2] = $expanded2;
   $gep_int13 = $__p$i$i$i$i;
   $gep = (($gep_int13) + 4)|0;
   $9 = $gep;
   $expanded3 = 177;
   HEAP32[$9>>2] = $expanded3;
   $gep_int14 = $__p$i$i$i$i;
   $gep15 = (($gep_int14) + 8)|0;
   $10 = $gep15;
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   $expanded5 = 8472;
   $gep_int16 = 8472;
   $expanded4 = $gep_int16;
   invoke_viii(17,$expanded4|0,$5|0,178);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if (!($12)) {
    break;
   }
   $expanded10 = 69;
   $55 = ___cxa_find_matching_catch(-1,-1)|0;
   $56 = tempRet0;
   $57 = HEAP32[$3>>2]|0;
   $gep_int32 = $57;
   $58 = $gep_int32;
   u$32 = __ZNSt3__114__shared_count16__release_sharedEv($58)|0;
   ___resumeException($55|0);
   // unreachable
  }
 } while(0);
 
 $expanded7 = 8472;
 $gep_int17 = 8472;
 $gep18 = (($gep_int17) + 4)|0;
 $expanded6 = $gep18;
 $13 = HEAP32[$expanded6>>2]|0;
 $14 = (($13) + -1)|0;
 $gep_int19 = $4;
 $gep20 = (($gep_int19) + 12)|0;
 $15 = $gep20;
 $16 = HEAP32[$15>>2]|0;
 $gep_int21 = $4;
 $gep22 = (($gep_int21) + 8)|0;
 $17 = $gep22;
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 
 do {
  if ($23) {
   $gep_int23 = $18;
   $gep_array = $14<<2;
   $gep24 = (($gep_int23) + ($gep_array))|0;
   $24 = $gep24;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $gep_int25 = $32;
   $33 = $gep_int25;
   u$17 = __ZNSt3__114__shared_count16__release_sharedEv($33)|0;
   $gep_int26 = $__tm;
   $gep27 = (($gep_int26) + 20)|0;
   $34 = $gep27;
   $gep_int28 = $__e;
   $35 = $gep_int28;
   $36 = HEAP32[$35>>2]|0;
   $37 = $1;
   
   $gep_int29 = $1;
   $38 = $gep_int29;
   HEAP32[$38>>2] = $36;
   $39 = $$byval_copy;
   
   $40 = $$byval_copy;
   $41 = $1;
   ;HEAP32[$40+0>>2]=HEAP32[$41+0>>2]|0;
   $42 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$31,4)|0;
   $43 = $$byval_copy;
   
   $44 = HEAP32[$__err>>2]|0;
   $45 = $44 & 4;
   $46 = ($45|0)==(0);
   
   if (!($46)) {
    
    $gep_int30 = $__b;
    $52 = $gep_int30;
    $53 = HEAP32[$52>>2]|0;
    $gep_int31 = $agg$result;
    $54 = $gep_int31;
    HEAP32[$54>>2] = $53;
    STACKTOP = sp;return;
   }
   $47 = ($42|0)<(69);
   
   if ($47) {
    $48 = (($42) + 2000)|0;
    
    $__t$0$i = $48;
   } else {
    $$off$i = (($42) + -69)|0;
    $49 = ($$off$i>>>0)<(31);
    $50 = (($42) + 1900)|0;
    $$$i = $49 ? $50 : $42;
    
    $__t$0$i = $$$i;
   }
   
   $51 = (($__t$0$i) + -1900)|0;
   HEAP32[$34>>2] = $51;
   
   
   $gep_int30 = $__b;
   $52 = $gep_int30;
   $53 = HEAP32[$52>>2]|0;
   $gep_int31 = $agg$result;
   $54 = $gep_int31;
   HEAP32[$54>>2] = $53;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = ___cxa_allocate_exception(4)|0;
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 $expanded8 = 16440;
 $expanded9 = 119;
 invoke_viii(5,$27|0,$expanded8|0,$expanded9|0);
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 
 if ($30) {
  $expanded10 = 69;
  $55 = ___cxa_find_matching_catch(-1,-1)|0;
  $56 = tempRet0;
  $57 = HEAP32[$3>>2]|0;
  $gep_int32 = $57;
  $58 = $gep_int32;
  u$32 = __ZNSt3__114__shared_count16__release_sharedEv($58)|0;
  ___resumeException($55|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,u$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 u$0 = u$0|0;
 var $$$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0;
 var $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $expanded = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0;
 var $expanded39 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded58 = 0;
 var $expanded59 = 0, $expanded60 = 0, $gep = 0, $gep104 = 0, $gep106 = 0, $gep108 = 0, $gep110 = 0, $gep113 = 0, $gep116 = 0, $gep125 = 0, $gep133 = 0, $gep138 = 0, $gep140 = 0, $gep146 = 0, $gep150 = 0, $gep154 = 0, $gep158 = 0, $gep167 = 0, $gep175 = 0, $gep186 = 0;
 var $gep191 = 0, $gep193 = 0, $gep199 = 0, $gep201 = 0, $gep207 = 0, $gep209 = 0, $gep211 = 0, $gep213 = 0, $gep216 = 0, $gep219 = 0, $gep225 = 0, $gep65 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep79 = 0, $gep82 = 0, $gep84 = 0, $gep87 = 0;
 var $gep89 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep98 = 0, $gep_array = 0, $gep_array112 = 0, $gep_array215 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int101 = 0, $gep_int102 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int111 = 0, $gep_int114 = 0, $gep_int115 = 0, $gep_int117 = 0;
 var $gep_int118 = 0, $gep_int119 = 0, $gep_int120 = 0, $gep_int121 = 0, $gep_int122 = 0, $gep_int123 = 0, $gep_int124 = 0, $gep_int126 = 0, $gep_int127 = 0, $gep_int128 = 0, $gep_int129 = 0, $gep_int130 = 0, $gep_int131 = 0, $gep_int132 = 0, $gep_int134 = 0, $gep_int135 = 0, $gep_int136 = 0, $gep_int137 = 0, $gep_int139 = 0, $gep_int141 = 0;
 var $gep_int142 = 0, $gep_int143 = 0, $gep_int144 = 0, $gep_int145 = 0, $gep_int147 = 0, $gep_int148 = 0, $gep_int149 = 0, $gep_int151 = 0, $gep_int152 = 0, $gep_int153 = 0, $gep_int155 = 0, $gep_int156 = 0, $gep_int157 = 0, $gep_int159 = 0, $gep_int160 = 0, $gep_int161 = 0, $gep_int162 = 0, $gep_int163 = 0, $gep_int164 = 0, $gep_int165 = 0;
 var $gep_int166 = 0, $gep_int168 = 0, $gep_int169 = 0, $gep_int170 = 0, $gep_int171 = 0, $gep_int172 = 0, $gep_int173 = 0, $gep_int174 = 0, $gep_int176 = 0, $gep_int177 = 0, $gep_int178 = 0, $gep_int179 = 0, $gep_int180 = 0, $gep_int181 = 0, $gep_int182 = 0, $gep_int183 = 0, $gep_int184 = 0, $gep_int185 = 0, $gep_int187 = 0, $gep_int188 = 0;
 var $gep_int189 = 0, $gep_int190 = 0, $gep_int192 = 0, $gep_int194 = 0, $gep_int195 = 0, $gep_int196 = 0, $gep_int197 = 0, $gep_int198 = 0, $gep_int200 = 0, $gep_int202 = 0, $gep_int203 = 0, $gep_int204 = 0, $gep_int205 = 0, $gep_int206 = 0, $gep_int208 = 0, $gep_int210 = 0, $gep_int212 = 0, $gep_int214 = 0, $gep_int217 = 0, $gep_int218 = 0;
 var $gep_int220 = 0, $gep_int221 = 0, $gep_int222 = 0, $gep_int223 = 0, $gep_int224 = 0, $gep_int226 = 0, $gep_int227 = 0, $gep_int228 = 0, $gep_int229 = 0, $gep_int61 = 0, $gep_int62 = 0, $gep_int63 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int76 = 0;
 var $gep_int77 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int99 = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i24 = 0, $or$cond$i27 = 0;
 var label = 0, sp = 0, u$19 = 0, u$21 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0;
 $$byval_copy30 = sp;
 $$byval_copy29 = sp + 8|0;
 $$byval_copy28 = sp + 16|0;
 $$byval_copy27 = sp + 24|0;
 $$byval_copy26 = sp + 32|0;
 $$byval_copy25 = sp + 40|0;
 $$byval_copy24 = sp + 48|0;
 $$byval_copy23 = sp + 56|0;
 $$byval_copy22 = sp + 64|0;
 $$byval_copy21 = sp + 72|0;
 $$byval_copy20 = sp + 80|0;
 $$byval_copy19 = sp + 88|0;
 $$byval_copy18 = sp + 96|0;
 $$byval_copy17 = sp + 104|0;
 $$byval_copy16 = sp + 112|0;
 $$byval_copy15 = sp + 120|0;
 $$byval_copy14 = sp + 128|0;
 $$byval_copy13 = sp + 136|0;
 $$byval_copy12 = sp + 144|0;
 $$byval_copy11 = sp + 152|0;
 $$byval_copy10 = sp + 160|0;
 $$byval_copy9 = sp + 168|0;
 $$byval_copy8 = sp + 176|0;
 $$byval_copy7 = sp + 184|0;
 $$byval_copy6 = sp + 192|0;
 $$byval_copy5 = sp + 200|0;
 $$byval_copy4 = sp + 208|0;
 $$byval_copy3 = sp + 216|0;
 $$byval_copy2 = sp + 224|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 280|0;
 $6 = sp + 288|0;
 $7 = sp + 296|0;
 $8 = sp + 304|0;
 $9 = sp + 312|0;
 $10 = sp + 320|0;
 $11 = sp + 328|0;
 $12 = sp + 336|0;
 $__p$i$i$i$i = sp + 344|0;
 $13 = sp + 360|0;
 $14 = sp + 368|0;
 $15 = sp + 376|0;
 $16 = sp + 384|0;
 $17 = sp + 392|0;
 $18 = sp + 400|0;
 $19 = sp + 408|0;
 $20 = sp + 416|0;
 $21 = sp + 424|0;
 $22 = sp + 432|0;
 $23 = sp + 440|0;
 $24 = sp + 448|0;
 $25 = sp + 456|0;
 $26 = sp + 464|0;
 $27 = sp + 472|0;
 $28 = sp + 480|0;
 $29 = sp + 488|0;
 $30 = sp + 496|0;
 $31 = sp + 504|0;
 $32 = sp + 512|0;
 $33 = sp + 520|0;
 $34 = sp + 528|0;
 $35 = sp + 536|0;
 $36 = sp + 544|0;
 $37 = sp + 552|0;
 $38 = sp + 560|0;
 $39 = sp + 568|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($13,$__iob);
 $gep_int = $13;
 $40 = $gep_int;
 $41 = HEAP32[$40>>2]|0;
 $42 = $__p$i$i$i$i;
 
 $expanded31 = 8472;
 $gep_int61 = 8472;
 $expanded = $gep_int61;
 $43 = HEAP32[$expanded>>2]|0;
 $44 = ($43|0)==(-1);
 
 do {
  if (!($44)) {
   $gep_int62 = $__p$i$i$i$i;
   $45 = $gep_int62;
   $expanded32 = 8472;
   HEAP32[$45>>2] = $expanded32;
   $gep_int63 = $__p$i$i$i$i;
   $gep = (($gep_int63) + 4)|0;
   $46 = $gep;
   $expanded33 = 177;
   HEAP32[$46>>2] = $expanded33;
   $gep_int64 = $__p$i$i$i$i;
   $gep65 = (($gep_int64) + 8)|0;
   $47 = $gep65;
   HEAP32[$47>>2] = 0;
   __THREW__ = 0;
   $expanded35 = 8472;
   $gep_int66 = 8472;
   $expanded34 = $gep_int66;
   invoke_viii(17,$expanded34|0,$42|0,178);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   
   if (!($49)) {
    break;
   }
   $expanded40 = 69;
   $72 = ___cxa_find_matching_catch(-1,-1)|0;
   $73 = tempRet0;
   $74 = HEAP32[$40>>2]|0;
   $gep_int76 = $74;
   $75 = $gep_int76;
   u$21 = __ZNSt3__114__shared_count16__release_sharedEv($75)|0;
   ___resumeException($72|0);
   // unreachable
  }
 } while(0);
 
 $expanded37 = 8472;
 $gep_int67 = 8472;
 $gep68 = (($gep_int67) + 4)|0;
 $expanded36 = $gep68;
 $50 = HEAP32[$expanded36>>2]|0;
 $51 = (($50) + -1)|0;
 $gep_int69 = $41;
 $gep70 = (($gep_int69) + 12)|0;
 $52 = $gep70;
 $53 = HEAP32[$52>>2]|0;
 $gep_int71 = $41;
 $gep72 = (($gep_int71) + 8)|0;
 $54 = $gep72;
 $55 = HEAP32[$54>>2]|0;
 $56 = $53;
 $57 = $55;
 $58 = (($56) - ($57))|0;
 $59 = $58 >> 2;
 $60 = ($59>>>0)>($51>>>0);
 
 do {
  if ($60) {
   $gep_int73 = $55;
   $gep_array = $51<<2;
   $gep74 = (($gep_int73) + ($gep_array))|0;
   $61 = $gep74;
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0);
   
   if ($63) {
    break;
   }
   $68 = $62;
   $69 = HEAP32[$40>>2]|0;
   $gep_int75 = $69;
   $70 = $gep_int75;
   u$19 = __ZNSt3__114__shared_count16__release_sharedEv($70)|0;
   $71 = $__fmt << 24 >> 24;
   
   L8: do {
    switch ($71|0) {
    case 99:  {
     $gep_int95 = $this;
     $gep96 = (($gep_int95) + 8)|0;
     $121 = $gep96;
     $122 = $121;
     $123 = HEAP32[$121>>2]|0;
     $gep_int97 = $123;
     $gep98 = (($gep_int97) + 12)|0;
     $124 = $gep98;
     $125 = HEAP32[$124>>2]|0;
     $126 = FUNCTION_TABLE_ii[$125 & 127]($121)|0;
     $gep_int99 = $__b;
     $127 = $gep_int99;
     $128 = HEAP32[$127>>2]|0;
     $gep_int100 = $15;
     $129 = $gep_int100;
     HEAP32[$129>>2] = $128;
     $gep_int101 = $__e;
     $130 = $gep_int101;
     $131 = HEAP32[$130>>2]|0;
     $gep_int102 = $16;
     $132 = $gep_int102;
     HEAP32[$132>>2] = $131;
     $133 = $126;
     $134 = HEAP8[$126]|0;
     $135 = $134 & 1;
     $136 = ($135<<24>>24)==(0);
     
     if ($136) {
      $gep_int107 = $126;
      $gep108 = (($gep_int107) + 4)|0;
      $141 = $gep108;
      $gep_int109 = $126;
      $gep110 = (($gep_int109) + 4)|0;
      $142 = $gep110;
      $143 = $134&255;
      $144 = $143 >>> 1;
      
      $145 = $142;$146 = $141;$147 = $144;
     } else {
      $gep_int103 = $126;
      $gep104 = (($gep_int103) + 8)|0;
      $137 = $gep104;
      $138 = HEAP32[$137>>2]|0;
      $gep_int105 = $126;
      $gep106 = (($gep_int105) + 4)|0;
      $139 = $gep106;
      $140 = HEAP32[$139>>2]|0;
      
      $145 = $138;$146 = $138;$147 = $140;
     }
     
     
     
     $gep_int111 = $145;
     $gep_array112 = $147<<2;
     $gep113 = (($gep_int111) + ($gep_array112))|0;
     $148 = $gep113;
     $149 = $$byval_copy2;
     
     $150 = $$byval_copy2;
     $151 = $15;
     ;HEAP32[$150+0>>2]=HEAP32[$151+0>>2]|0;
     $152 = $$byval_copy3;
     
     $153 = $$byval_copy3;
     $154 = $16;
     ;HEAP32[$153+0>>2]=HEAP32[$154+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($14,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$146,$148);
     $155 = $$byval_copy3;
     
     $156 = $$byval_copy2;
     
     $gep_int114 = $14;
     $157 = $gep_int114;
     $158 = HEAP32[$157>>2]|0;
     HEAP32[$127>>2] = $158;
     
     break;
    }
    case 65: case 97:  {
     $gep_int77 = $__e;
     $76 = $gep_int77;
     $77 = HEAP32[$76>>2]|0;
     $78 = $12;
     
     $gep_int78 = $this;
     $gep79 = (($gep_int78) + 8)|0;
     $79 = $gep79;
     $80 = $79;
     $81 = HEAP32[$79>>2]|0;
     $82 = HEAP32[$81>>2]|0;
     $83 = FUNCTION_TABLE_ii[$82 & 127]($79)|0;
     $gep_int80 = $12;
     $84 = $gep_int80;
     HEAP32[$84>>2] = $77;
     $gep_int81 = $83;
     $gep82 = (($gep_int81) + 168)|0;
     $85 = $gep82;
     $86 = $$byval_copy;
     
     $87 = $$byval_copy;
     $88 = $12;
     ;HEAP32[$87+0>>2]=HEAP32[$88+0>>2]|0;
     $89 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$83,$85,$68,$__err,0)|0;
     $90 = $$byval_copy;
     
     $91 = $89;
     $92 = $83;
     $93 = (($91) - ($92))|0;
     $94 = ($93|0)<(168);
     
     if (!($94)) {
      break L8;
     }
     $gep_int83 = $__tm;
     $gep84 = (($gep_int83) + 24)|0;
     $95 = $gep84;
     $96 = (($93|0) / 12)&-1;
     $97 = (($96|0) % 7)&-1;
     HEAP32[$95>>2] = $97;
     
     break;
    }
    case 104: case 66: case 98:  {
     $gep_int85 = $__e;
     $98 = $gep_int85;
     $99 = HEAP32[$98>>2]|0;
     $100 = $11;
     
     $gep_int86 = $this;
     $gep87 = (($gep_int86) + 8)|0;
     $101 = $gep87;
     $102 = $101;
     $103 = HEAP32[$101>>2]|0;
     $gep_int88 = $103;
     $gep89 = (($gep_int88) + 4)|0;
     $104 = $gep89;
     $105 = HEAP32[$104>>2]|0;
     $106 = FUNCTION_TABLE_ii[$105 & 127]($101)|0;
     $gep_int90 = $11;
     $107 = $gep_int90;
     HEAP32[$107>>2] = $99;
     $gep_int91 = $106;
     $gep92 = (($gep_int91) + 288)|0;
     $108 = $gep92;
     $109 = $$byval_copy1;
     
     $110 = $$byval_copy1;
     $111 = $11;
     ;HEAP32[$110+0>>2]=HEAP32[$111+0>>2]|0;
     $112 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy1,$106,$108,$68,$__err,0)|0;
     $113 = $$byval_copy1;
     
     $114 = $112;
     $115 = $106;
     $116 = (($114) - ($115))|0;
     $117 = ($116|0)<(288);
     
     if (!($117)) {
      break L8;
     }
     $gep_int93 = $__tm;
     $gep94 = (($gep_int93) + 16)|0;
     $118 = $gep94;
     $119 = (($116|0) / 12)&-1;
     $120 = (($119|0) % 12)&-1;
     HEAP32[$118>>2] = $120;
     
     break;
    }
    case 101: case 100:  {
     $gep_int115 = $__tm;
     $gep116 = (($gep_int115) + 12)|0;
     $159 = $gep116;
     $gep_int117 = $__e;
     $160 = $gep_int117;
     $161 = HEAP32[$160>>2]|0;
     $162 = $10;
     
     $gep_int118 = $10;
     $163 = $gep_int118;
     HEAP32[$163>>2] = $161;
     $164 = $$byval_copy4;
     
     $165 = $$byval_copy4;
     $166 = $10;
     ;HEAP32[$165+0>>2]=HEAP32[$166+0>>2]|0;
     $167 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy4,$__err,$68,2)|0;
     $168 = $$byval_copy4;
     
     $169 = HEAP32[$__err>>2]|0;
     $170 = $169 & 4;
     $171 = ($170|0)==(0);
     
     do {
      if ($171) {
       $$off$i = (($167) + -1)|0;
       $172 = ($$off$i>>>0)<(31);
       
       if (!($172)) {
        break;
       }
       HEAP32[$159>>2] = $167;
       
       break L8;
      }
     } while(0);
     $173 = $169 | 4;
     HEAP32[$__err>>2] = $173;
     
     break;
    }
    case 68:  {
     $gep_int119 = $__b;
     $174 = $gep_int119;
     $175 = HEAP32[$174>>2]|0;
     $gep_int120 = $18;
     $176 = $gep_int120;
     HEAP32[$176>>2] = $175;
     $gep_int121 = $__e;
     $177 = $gep_int121;
     $178 = HEAP32[$177>>2]|0;
     $gep_int122 = $19;
     $179 = $gep_int122;
     HEAP32[$179>>2] = $178;
     $180 = $$byval_copy5;
     
     $181 = $$byval_copy5;
     $182 = $18;
     ;HEAP32[$181+0>>2]=HEAP32[$182+0>>2]|0;
     $183 = $$byval_copy6;
     
     $184 = $$byval_copy6;
     $185 = $19;
     ;HEAP32[$184+0>>2]=HEAP32[$185+0>>2]|0;
     $expanded42 = 7568;
     $gep_int123 = 7568;
     $expanded41 = $gep_int123;
     $expanded44 = 7568;
     $gep_int124 = 7568;
     $gep125 = (($gep_int124) + 32)|0;
     $expanded43 = $gep125;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($17,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,$expanded41,$expanded43);
     $186 = $$byval_copy6;
     
     $187 = $$byval_copy5;
     
     $gep_int126 = $17;
     $188 = $gep_int126;
     $189 = HEAP32[$188>>2]|0;
     HEAP32[$174>>2] = $189;
     
     break;
    }
    case 70:  {
     $gep_int127 = $__b;
     $190 = $gep_int127;
     $191 = HEAP32[$190>>2]|0;
     $gep_int128 = $21;
     $192 = $gep_int128;
     HEAP32[$192>>2] = $191;
     $gep_int129 = $__e;
     $193 = $gep_int129;
     $194 = HEAP32[$193>>2]|0;
     $gep_int130 = $22;
     $195 = $gep_int130;
     HEAP32[$195>>2] = $194;
     $196 = $$byval_copy7;
     
     $197 = $$byval_copy7;
     $198 = $21;
     ;HEAP32[$197+0>>2]=HEAP32[$198+0>>2]|0;
     $199 = $$byval_copy8;
     
     $200 = $$byval_copy8;
     $201 = $22;
     ;HEAP32[$200+0>>2]=HEAP32[$201+0>>2]|0;
     $expanded46 = 7600;
     $gep_int131 = 7600;
     $expanded45 = $gep_int131;
     $expanded48 = 7600;
     $gep_int132 = 7600;
     $gep133 = (($gep_int132) + 32)|0;
     $expanded47 = $gep133;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($20,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,$expanded45,$expanded47);
     $202 = $$byval_copy8;
     
     $203 = $$byval_copy7;
     
     $gep_int134 = $20;
     $204 = $gep_int134;
     $205 = HEAP32[$204>>2]|0;
     HEAP32[$190>>2] = $205;
     
     break;
    }
    case 72:  {
     $gep_int135 = $__e;
     $206 = $gep_int135;
     $207 = HEAP32[$206>>2]|0;
     $208 = $9;
     
     $gep_int136 = $9;
     $209 = $gep_int136;
     HEAP32[$209>>2] = $207;
     $210 = $$byval_copy9;
     
     $211 = $$byval_copy9;
     $212 = $9;
     ;HEAP32[$211+0>>2]=HEAP32[$212+0>>2]|0;
     $213 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy9,$__err,$68,2)|0;
     $214 = $$byval_copy9;
     
     $215 = HEAP32[$__err>>2]|0;
     $216 = $215 & 4;
     $217 = ($216|0)==(0);
     $218 = ($213|0)<(24);
     $or$cond$i = $217 & $218;
     
     if ($or$cond$i) {
      $gep_int137 = $__tm;
      $gep138 = (($gep_int137) + 8)|0;
      $219 = $gep138;
      HEAP32[$219>>2] = $213;
      
      break L8;
     } else {
      $220 = $215 | 4;
      HEAP32[$__err>>2] = $220;
      
      break L8;
     }
     break;
    }
    case 73:  {
     $gep_int139 = $__tm;
     $gep140 = (($gep_int139) + 8)|0;
     $221 = $gep140;
     $gep_int141 = $__e;
     $222 = $gep_int141;
     $223 = HEAP32[$222>>2]|0;
     $224 = $8;
     
     $gep_int142 = $8;
     $225 = $gep_int142;
     HEAP32[$225>>2] = $223;
     $226 = $$byval_copy10;
     
     $227 = $$byval_copy10;
     $228 = $8;
     ;HEAP32[$227+0>>2]=HEAP32[$228+0>>2]|0;
     $229 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy10,$__err,$68,2)|0;
     $230 = $$byval_copy10;
     
     $231 = HEAP32[$__err>>2]|0;
     $232 = $231 & 4;
     $233 = ($232|0)==(0);
     
     do {
      if ($233) {
       $$off$i12 = (($229) + -1)|0;
       $234 = ($$off$i12>>>0)<(12);
       
       if (!($234)) {
        break;
       }
       HEAP32[$221>>2] = $229;
       
       break L8;
      }
     } while(0);
     $235 = $231 | 4;
     HEAP32[$__err>>2] = $235;
     
     break;
    }
    case 106:  {
     $gep_int143 = $__e;
     $236 = $gep_int143;
     $237 = HEAP32[$236>>2]|0;
     $238 = $7;
     
     $gep_int144 = $7;
     $239 = $gep_int144;
     HEAP32[$239>>2] = $237;
     $240 = $$byval_copy11;
     
     $241 = $$byval_copy11;
     $242 = $7;
     ;HEAP32[$241+0>>2]=HEAP32[$242+0>>2]|0;
     $243 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy11,$__err,$68,3)|0;
     $244 = $$byval_copy11;
     
     $245 = HEAP32[$__err>>2]|0;
     $246 = $245 & 4;
     $247 = ($246|0)==(0);
     $248 = ($243|0)<(366);
     $or$cond$i15 = $247 & $248;
     
     if ($or$cond$i15) {
      $gep_int145 = $__tm;
      $gep146 = (($gep_int145) + 28)|0;
      $249 = $gep146;
      HEAP32[$249>>2] = $243;
      
      break L8;
     } else {
      $250 = $245 | 4;
      HEAP32[$__err>>2] = $250;
      
      break L8;
     }
     break;
    }
    case 109:  {
     $gep_int147 = $__e;
     $251 = $gep_int147;
     $252 = HEAP32[$251>>2]|0;
     $253 = $6;
     
     $gep_int148 = $6;
     $254 = $gep_int148;
     HEAP32[$254>>2] = $252;
     $255 = $$byval_copy12;
     
     $256 = $$byval_copy12;
     $257 = $6;
     ;HEAP32[$256+0>>2]=HEAP32[$257+0>>2]|0;
     $258 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy12,$__err,$68,2)|0;
     $259 = $$byval_copy12;
     
     $260 = HEAP32[$__err>>2]|0;
     $261 = $260 & 4;
     $262 = ($261|0)==(0);
     $263 = ($258|0)<(13);
     $or$cond$i18 = $262 & $263;
     
     if ($or$cond$i18) {
      $gep_int149 = $__tm;
      $gep150 = (($gep_int149) + 16)|0;
      $264 = $gep150;
      $265 = (($258) + -1)|0;
      HEAP32[$264>>2] = $265;
      
      break L8;
     } else {
      $266 = $260 | 4;
      HEAP32[$__err>>2] = $266;
      
      break L8;
     }
     break;
    }
    case 77:  {
     $gep_int151 = $__e;
     $267 = $gep_int151;
     $268 = HEAP32[$267>>2]|0;
     $269 = $5;
     
     $gep_int152 = $5;
     $270 = $gep_int152;
     HEAP32[$270>>2] = $268;
     $271 = $$byval_copy13;
     
     $272 = $$byval_copy13;
     $273 = $5;
     ;HEAP32[$272+0>>2]=HEAP32[$273+0>>2]|0;
     $274 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy13,$__err,$68,2)|0;
     $275 = $$byval_copy13;
     
     $276 = HEAP32[$__err>>2]|0;
     $277 = $276 & 4;
     $278 = ($277|0)==(0);
     $279 = ($274|0)<(60);
     $or$cond$i21 = $278 & $279;
     
     if ($or$cond$i21) {
      $gep_int153 = $__tm;
      $gep154 = (($gep_int153) + 4)|0;
      $280 = $gep154;
      HEAP32[$280>>2] = $274;
      
      break L8;
     } else {
      $281 = $276 | 4;
      HEAP32[$__err>>2] = $281;
      
      break L8;
     }
     break;
    }
    case 116: case 110:  {
     $gep_int155 = $__e;
     $282 = $gep_int155;
     $283 = HEAP32[$282>>2]|0;
     $gep_int156 = $23;
     $284 = $gep_int156;
     HEAP32[$284>>2] = $283;
     $285 = $$byval_copy14;
     
     $286 = $$byval_copy14;
     $287 = $23;
     ;HEAP32[$286+0>>2]=HEAP32[$287+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy14,$__err,$68);
     $288 = $$byval_copy14;
     
     
     break;
    }
    case 112:  {
     $gep_int157 = $__tm;
     $gep158 = (($gep_int157) + 8)|0;
     $289 = $gep158;
     $gep_int159 = $__e;
     $290 = $gep_int159;
     $291 = HEAP32[$290>>2]|0;
     $gep_int160 = $24;
     $292 = $gep_int160;
     HEAP32[$292>>2] = $291;
     $293 = $$byval_copy15;
     
     $294 = $$byval_copy15;
     $295 = $24;
     ;HEAP32[$294+0>>2]=HEAP32[$295+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$289,$__b,$$byval_copy15,$__err,$68);
     $296 = $$byval_copy15;
     
     
     break;
    }
    case 114:  {
     $gep_int161 = $__b;
     $297 = $gep_int161;
     $298 = HEAP32[$297>>2]|0;
     $gep_int162 = $26;
     $299 = $gep_int162;
     HEAP32[$299>>2] = $298;
     $gep_int163 = $__e;
     $300 = $gep_int163;
     $301 = HEAP32[$300>>2]|0;
     $gep_int164 = $27;
     $302 = $gep_int164;
     HEAP32[$302>>2] = $301;
     $303 = $$byval_copy16;
     
     $304 = $$byval_copy16;
     $305 = $26;
     ;HEAP32[$304+0>>2]=HEAP32[$305+0>>2]|0;
     $306 = $$byval_copy17;
     
     $307 = $$byval_copy17;
     $308 = $27;
     ;HEAP32[$307+0>>2]=HEAP32[$308+0>>2]|0;
     $expanded50 = 7632;
     $gep_int165 = 7632;
     $expanded49 = $gep_int165;
     $expanded52 = 7632;
     $gep_int166 = 7632;
     $gep167 = (($gep_int166) + 44)|0;
     $expanded51 = $gep167;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($25,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,$expanded49,$expanded51);
     $309 = $$byval_copy17;
     
     $310 = $$byval_copy16;
     
     $gep_int168 = $25;
     $311 = $gep_int168;
     $312 = HEAP32[$311>>2]|0;
     HEAP32[$297>>2] = $312;
     
     break;
    }
    case 82:  {
     $gep_int169 = $__b;
     $313 = $gep_int169;
     $314 = HEAP32[$313>>2]|0;
     $gep_int170 = $29;
     $315 = $gep_int170;
     HEAP32[$315>>2] = $314;
     $gep_int171 = $__e;
     $316 = $gep_int171;
     $317 = HEAP32[$316>>2]|0;
     $gep_int172 = $30;
     $318 = $gep_int172;
     HEAP32[$318>>2] = $317;
     $319 = $$byval_copy18;
     
     $320 = $$byval_copy18;
     $321 = $29;
     ;HEAP32[$320+0>>2]=HEAP32[$321+0>>2]|0;
     $322 = $$byval_copy19;
     
     $323 = $$byval_copy19;
     $324 = $30;
     ;HEAP32[$323+0>>2]=HEAP32[$324+0>>2]|0;
     $expanded54 = 7680;
     $gep_int173 = 7680;
     $expanded53 = $gep_int173;
     $expanded56 = 7680;
     $gep_int174 = 7680;
     $gep175 = (($gep_int174) + 20)|0;
     $expanded55 = $gep175;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,$expanded53,$expanded55);
     $325 = $$byval_copy19;
     
     $326 = $$byval_copy18;
     
     $gep_int176 = $28;
     $327 = $gep_int176;
     $328 = HEAP32[$327>>2]|0;
     HEAP32[$313>>2] = $328;
     
     break;
    }
    case 83:  {
     $gep_int177 = $__e;
     $329 = $gep_int177;
     $330 = HEAP32[$329>>2]|0;
     $331 = $4;
     
     $gep_int178 = $4;
     $332 = $gep_int178;
     HEAP32[$332>>2] = $330;
     $333 = $$byval_copy20;
     
     $334 = $$byval_copy20;
     $335 = $4;
     ;HEAP32[$334+0>>2]=HEAP32[$335+0>>2]|0;
     $336 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy20,$__err,$68,2)|0;
     $337 = $$byval_copy20;
     
     $338 = HEAP32[$__err>>2]|0;
     $339 = $338 & 4;
     $340 = ($339|0)==(0);
     $341 = ($336|0)<(61);
     $or$cond$i24 = $340 & $341;
     
     if ($or$cond$i24) {
      $gep_int179 = $__tm;
      $342 = $gep_int179;
      HEAP32[$342>>2] = $336;
      
      break L8;
     } else {
      $343 = $338 | 4;
      HEAP32[$__err>>2] = $343;
      
      break L8;
     }
     break;
    }
    case 84:  {
     $gep_int180 = $__b;
     $344 = $gep_int180;
     $345 = HEAP32[$344>>2]|0;
     $gep_int181 = $32;
     $346 = $gep_int181;
     HEAP32[$346>>2] = $345;
     $gep_int182 = $__e;
     $347 = $gep_int182;
     $348 = HEAP32[$347>>2]|0;
     $gep_int183 = $33;
     $349 = $gep_int183;
     HEAP32[$349>>2] = $348;
     $350 = $$byval_copy21;
     
     $351 = $$byval_copy21;
     $352 = $32;
     ;HEAP32[$351+0>>2]=HEAP32[$352+0>>2]|0;
     $353 = $$byval_copy22;
     
     $354 = $$byval_copy22;
     $355 = $33;
     ;HEAP32[$354+0>>2]=HEAP32[$355+0>>2]|0;
     $expanded58 = 7704;
     $gep_int184 = 7704;
     $expanded57 = $gep_int184;
     $expanded60 = 7704;
     $gep_int185 = 7704;
     $gep186 = (($gep_int185) + 32)|0;
     $expanded59 = $gep186;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($31,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,$expanded57,$expanded59);
     $356 = $$byval_copy22;
     
     $357 = $$byval_copy21;
     
     $gep_int187 = $31;
     $358 = $gep_int187;
     $359 = HEAP32[$358>>2]|0;
     HEAP32[$344>>2] = $359;
     
     break;
    }
    case 119:  {
     $gep_int188 = $__e;
     $360 = $gep_int188;
     $361 = HEAP32[$360>>2]|0;
     $362 = $3;
     
     $gep_int189 = $3;
     $363 = $gep_int189;
     HEAP32[$363>>2] = $361;
     $364 = $$byval_copy23;
     
     $365 = $$byval_copy23;
     $366 = $3;
     ;HEAP32[$365+0>>2]=HEAP32[$366+0>>2]|0;
     $367 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy23,$__err,$68,1)|0;
     $368 = $$byval_copy23;
     
     $369 = HEAP32[$__err>>2]|0;
     $370 = $369 & 4;
     $371 = ($370|0)==(0);
     $372 = ($367|0)<(7);
     $or$cond$i27 = $371 & $372;
     
     if ($or$cond$i27) {
      $gep_int190 = $__tm;
      $gep191 = (($gep_int190) + 24)|0;
      $373 = $gep191;
      HEAP32[$373>>2] = $367;
      
      break L8;
     } else {
      $374 = $369 | 4;
      HEAP32[$__err>>2] = $374;
      
      break L8;
     }
     break;
    }
    case 120:  {
     $375 = $this;
     $376 = HEAP32[$this>>2]|0;
     $gep_int192 = $376;
     $gep193 = (($gep_int192) + 20)|0;
     $377 = $gep193;
     $378 = HEAP32[$377>>2]|0;
     $gep_int194 = $__b;
     $379 = $gep_int194;
     $380 = HEAP32[$379>>2]|0;
     $gep_int195 = $34;
     $381 = $gep_int195;
     HEAP32[$381>>2] = $380;
     $gep_int196 = $__e;
     $382 = $gep_int196;
     $383 = HEAP32[$382>>2]|0;
     $gep_int197 = $35;
     $384 = $gep_int197;
     HEAP32[$384>>2] = $383;
     $385 = $$byval_copy24;
     
     $386 = $$byval_copy24;
     $387 = $34;
     ;HEAP32[$386+0>>2]=HEAP32[$387+0>>2]|0;
     $388 = $$byval_copy25;
     
     $389 = $$byval_copy25;
     $390 = $35;
     ;HEAP32[$389+0>>2]=HEAP32[$390+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$378 & 63]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
     $391 = $$byval_copy25;
     
     $392 = $$byval_copy24;
     
     
     STACKTOP = sp;return;
     break;
    }
    case 88:  {
     $gep_int198 = $this;
     $gep199 = (($gep_int198) + 8)|0;
     $393 = $gep199;
     $394 = $393;
     $395 = HEAP32[$393>>2]|0;
     $gep_int200 = $395;
     $gep201 = (($gep_int200) + 24)|0;
     $396 = $gep201;
     $397 = HEAP32[$396>>2]|0;
     $398 = FUNCTION_TABLE_ii[$397 & 127]($393)|0;
     $gep_int202 = $__b;
     $399 = $gep_int202;
     $400 = HEAP32[$399>>2]|0;
     $gep_int203 = $37;
     $401 = $gep_int203;
     HEAP32[$401>>2] = $400;
     $gep_int204 = $__e;
     $402 = $gep_int204;
     $403 = HEAP32[$402>>2]|0;
     $gep_int205 = $38;
     $404 = $gep_int205;
     HEAP32[$404>>2] = $403;
     $405 = $398;
     $406 = HEAP8[$398]|0;
     $407 = $406 & 1;
     $408 = ($407<<24>>24)==(0);
     
     if ($408) {
      $gep_int210 = $398;
      $gep211 = (($gep_int210) + 4)|0;
      $413 = $gep211;
      $gep_int212 = $398;
      $gep213 = (($gep_int212) + 4)|0;
      $414 = $gep213;
      $415 = $406&255;
      $416 = $415 >>> 1;
      
      $417 = $414;$418 = $413;$419 = $416;
     } else {
      $gep_int206 = $398;
      $gep207 = (($gep_int206) + 8)|0;
      $409 = $gep207;
      $410 = HEAP32[$409>>2]|0;
      $gep_int208 = $398;
      $gep209 = (($gep_int208) + 4)|0;
      $411 = $gep209;
      $412 = HEAP32[$411>>2]|0;
      
      $417 = $410;$418 = $410;$419 = $412;
     }
     
     
     
     $gep_int214 = $417;
     $gep_array215 = $419<<2;
     $gep216 = (($gep_int214) + ($gep_array215))|0;
     $420 = $gep216;
     $421 = $$byval_copy26;
     
     $422 = $$byval_copy26;
     $423 = $37;
     ;HEAP32[$422+0>>2]=HEAP32[$423+0>>2]|0;
     $424 = $$byval_copy27;
     
     $425 = $$byval_copy27;
     $426 = $38;
     ;HEAP32[$425+0>>2]=HEAP32[$426+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($36,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$418,$420);
     $427 = $$byval_copy27;
     
     $428 = $$byval_copy26;
     
     $gep_int217 = $36;
     $429 = $gep_int217;
     $430 = HEAP32[$429>>2]|0;
     HEAP32[$399>>2] = $430;
     
     break;
    }
    case 121:  {
     $gep_int218 = $__tm;
     $gep219 = (($gep_int218) + 20)|0;
     $431 = $gep219;
     $gep_int220 = $__e;
     $432 = $gep_int220;
     $433 = HEAP32[$432>>2]|0;
     $434 = $2;
     
     $gep_int221 = $2;
     $435 = $gep_int221;
     HEAP32[$435>>2] = $433;
     $436 = $$byval_copy28;
     
     $437 = $$byval_copy28;
     $438 = $2;
     ;HEAP32[$437+0>>2]=HEAP32[$438+0>>2]|0;
     $439 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy28,$__err,$68,4)|0;
     $440 = $$byval_copy28;
     
     $441 = HEAP32[$__err>>2]|0;
     $442 = $441 & 4;
     $443 = ($442|0)==(0);
     
     if (!($443)) {
      break L8;
     }
     $444 = ($439|0)<(69);
     
     if ($444) {
      $445 = (($439) + 2000)|0;
      
      $__t$0$i = $445;
     } else {
      $$off$i33 = (($439) + -69)|0;
      $446 = ($$off$i33>>>0)<(31);
      $447 = (($439) + 1900)|0;
      $$$i = $446 ? $447 : $439;
      
      $__t$0$i = $$$i;
     }
     
     $448 = (($__t$0$i) + -1900)|0;
     HEAP32[$431>>2] = $448;
     
     break;
    }
    case 89:  {
     $gep_int222 = $__e;
     $449 = $gep_int222;
     $450 = HEAP32[$449>>2]|0;
     $451 = $1;
     
     $gep_int223 = $1;
     $452 = $gep_int223;
     HEAP32[$452>>2] = $450;
     $453 = $$byval_copy29;
     
     $454 = $$byval_copy29;
     $455 = $1;
     ;HEAP32[$454+0>>2]=HEAP32[$455+0>>2]|0;
     $456 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy29,$__err,$68,4)|0;
     $457 = $$byval_copy29;
     
     $458 = HEAP32[$__err>>2]|0;
     $459 = $458 & 4;
     $460 = ($459|0)==(0);
     
     if (!($460)) {
      break L8;
     }
     $gep_int224 = $__tm;
     $gep225 = (($gep_int224) + 20)|0;
     $461 = $gep225;
     $462 = (($456) + -1900)|0;
     HEAP32[$461>>2] = $462;
     
     break;
    }
    case 37:  {
     $gep_int226 = $__e;
     $463 = $gep_int226;
     $464 = HEAP32[$463>>2]|0;
     $gep_int227 = $39;
     $465 = $gep_int227;
     HEAP32[$465>>2] = $464;
     $466 = $$byval_copy30;
     
     $467 = $$byval_copy30;
     $468 = $39;
     ;HEAP32[$467+0>>2]=HEAP32[$468+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy30,$__err,$68);
     $469 = $$byval_copy30;
     
     
     break;
    }
    default: {
     $470 = HEAP32[$__err>>2]|0;
     $471 = $470 | 4;
     HEAP32[$__err>>2] = $471;
     
    }
    }
   } while(0);
   $gep_int228 = $__b;
   $472 = $gep_int228;
   $473 = HEAP32[$472>>2]|0;
   $gep_int229 = $agg$result;
   $474 = $gep_int229;
   HEAP32[$474>>2] = $473;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $64 = ___cxa_allocate_exception(4)|0;
 $65 = $64;
 __ZNSt8bad_castC2Ev($65);
 __THREW__ = 0;
 $expanded38 = 16440;
 $expanded39 = 119;
 invoke_viii(5,$64|0,$expanded38|0,$expanded39|0);
 $66 = __THREW__; __THREW__ = 0;
 $67 = $66&1;
 
 if ($67) {
  $expanded40 = 69;
  $72 = ___cxa_find_matching_catch(-1,-1)|0;
  $73 = tempRet0;
  $74 = HEAP32[$40>>2]|0;
  $gep_int76 = $74;
  $75 = $gep_int76;
  u$21 = __ZNSt3__114__shared_count16__release_sharedEv($75)|0;
  ___resumeException($72|0);
  // unreachable
 } else {
  // unreachable
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $gep = 0, $gep10 = 0;
 var $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep4 = 0, $gep40 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0;
 var $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0;
 var $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0, u$23 = 0;
 sp = STACKTOP;
 $gep_int = $__b;
 $1 = $gep_int;
 $gep_int1 = $__e;
 $2 = $gep_int1;
 $3 = $__ct;
 
 L1: while(1) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($4|0)==(0);
  
  do {
   if ($5) {
    $18 = 1;
   } else {
    $gep_int2 = $4;
    $gep = (($gep_int2) + 12)|0;
    $6 = $gep;
    $7 = HEAP32[$6>>2]|0;
    $gep_int3 = $4;
    $gep4 = (($gep_int3) + 16)|0;
    $8 = $gep4;
    $9 = HEAP32[$8>>2]|0;
    $10 = ($7|0)==($9|0);
    
    if ($10) {
     $11 = $4;
     $12 = HEAP32[$4>>2]|0;
     $gep_int5 = $12;
     $gep6 = (($gep_int5) + 36)|0;
     $13 = $gep6;
     $14 = HEAP32[$13>>2]|0;
     $15 = FUNCTION_TABLE_ii[$14 & 127]($4)|0;
     
     $$0$i$i$i$i = $15;
    } else {
     $16 = HEAP32[$7>>2]|0;
     
     $$0$i$i$i$i = $16;
    }
    
    $17 = ($$0$i$i$i$i|0)==(-1);
    
    if ($17) {
     HEAP32[$1>>2] = 0;
     
     $18 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0);
     
     $18 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  
  $19 = HEAP32[$2>>2]|0;
  $20 = ($19|0)==(0);
  
  do {
   if ($20) {
    label = 15;
   } else {
    $gep_int7 = $19;
    $gep8 = (($gep_int7) + 12)|0;
    $21 = $gep8;
    $22 = HEAP32[$21>>2]|0;
    $gep_int9 = $19;
    $gep10 = (($gep_int9) + 16)|0;
    $23 = $gep10;
    $24 = HEAP32[$23>>2]|0;
    $25 = ($22|0)==($24|0);
    
    if ($25) {
     $26 = $19;
     $27 = HEAP32[$19>>2]|0;
     $gep_int11 = $27;
     $gep12 = (($gep_int11) + 36)|0;
     $28 = $gep12;
     $29 = HEAP32[$28>>2]|0;
     $30 = FUNCTION_TABLE_ii[$29 & 127]($19)|0;
     
     $$0$i$i1$i$i = $30;
    } else {
     $31 = HEAP32[$22>>2]|0;
     
     $$0$i$i1$i$i = $31;
    }
    
    $32 = ($$0$i$i1$i$i|0)==(-1);
    
    if ($32) {
     HEAP32[$2>>2] = 0;
     
     label = 15;
     break;
    } else {
     
     if ($18) {
      $33 = $19;
      break;
     } else {
      $$pre$i3$i$i9 = $19;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   
   if ($18) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $33 = 0;
   }
  }
  
  $34 = HEAP32[$1>>2]|0;
  $gep_int13 = $34;
  $gep14 = (($gep_int13) + 12)|0;
  $35 = $gep14;
  $36 = HEAP32[$35>>2]|0;
  $gep_int15 = $34;
  $gep16 = (($gep_int15) + 16)|0;
  $37 = $gep16;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)==($38|0);
  
  if ($39) {
   $40 = $34;
   $41 = HEAP32[$34>>2]|0;
   $gep_int17 = $41;
   $gep18 = (($gep_int17) + 36)|0;
   $42 = $gep18;
   $43 = HEAP32[$42>>2]|0;
   $44 = FUNCTION_TABLE_ii[$43 & 127]($34)|0;
   
   $$0$i$i = $44;
  } else {
   $45 = HEAP32[$36>>2]|0;
   
   $$0$i$i = $45;
  }
  
  $46 = HEAP32[$__ct>>2]|0;
  $gep_int19 = $46;
  $gep20 = (($gep_int19) + 12)|0;
  $47 = $gep20;
  $48 = HEAP32[$47>>2]|0;
  $49 = FUNCTION_TABLE_iiii[$48 & 63]($__ct,8192,$$0$i$i)|0;
  
  if (!($49)) {
   $$pre$i3$i$i9 = $33;
   break;
  }
  $50 = HEAP32[$1>>2]|0;
  $gep_int21 = $50;
  $gep22 = (($gep_int21) + 12)|0;
  $51 = $gep22;
  $52 = HEAP32[$51>>2]|0;
  $gep_int23 = $50;
  $gep24 = (($gep_int23) + 16)|0;
  $53 = $gep24;
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)==($54|0);
  
  if ($55) {
   $56 = $50;
   $57 = HEAP32[$50>>2]|0;
   $gep_int25 = $57;
   $gep26 = (($gep_int25) + 40)|0;
   $58 = $gep26;
   $59 = HEAP32[$58>>2]|0;
   u$23 = FUNCTION_TABLE_ii[$59 & 127]($50)|0;
   
   continue;
  } else {
   $gep_int27 = $52;
   $gep28 = (($gep_int27) + 4)|0;
   $60 = $gep28;
   HEAP32[$51>>2] = $60;
   
   continue;
  }
 }
 
 $61 = HEAP32[$1>>2]|0;
 $62 = ($61|0)==(0);
 
 do {
  if ($62) {
   $75 = 1;
  } else {
   $gep_int29 = $61;
   $gep30 = (($gep_int29) + 12)|0;
   $63 = $gep30;
   $64 = HEAP32[$63>>2]|0;
   $gep_int31 = $61;
   $gep32 = (($gep_int31) + 16)|0;
   $65 = $gep32;
   $66 = HEAP32[$65>>2]|0;
   $67 = ($64|0)==($66|0);
   
   if ($67) {
    $68 = $61;
    $69 = HEAP32[$61>>2]|0;
    $gep_int33 = $69;
    $gep34 = (($gep_int33) + 36)|0;
    $70 = $gep34;
    $71 = HEAP32[$70>>2]|0;
    $72 = FUNCTION_TABLE_ii[$71 & 127]($61)|0;
    
    $$0$i$i$i$i1 = $72;
   } else {
    $73 = HEAP32[$64>>2]|0;
    
    $$0$i$i$i$i1 = $73;
   }
   
   $74 = ($$0$i$i$i$i1|0)==(-1);
   
   if ($74) {
    HEAP32[$1>>2] = 0;
    
    $75 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0);
    
    $75 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 
 $76 = ($$pre$i3$i$i9|0)==(0);
 
 do {
  if ($76) {
   label = 37;
  } else {
   $gep_int35 = $$pre$i3$i$i9;
   $gep36 = (($gep_int35) + 12)|0;
   $77 = $gep36;
   $78 = HEAP32[$77>>2]|0;
   $gep_int37 = $$pre$i3$i$i9;
   $gep38 = (($gep_int37) + 16)|0;
   $79 = $gep38;
   $80 = HEAP32[$79>>2]|0;
   $81 = ($78|0)==($80|0);
   
   if ($81) {
    $82 = $$pre$i3$i$i9;
    $83 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $gep_int39 = $83;
    $gep40 = (($gep_int39) + 36)|0;
    $84 = $gep40;
    $85 = HEAP32[$84>>2]|0;
    $86 = FUNCTION_TABLE_ii[$85 & 127]($$pre$i3$i$i9)|0;
    
    $$0$i$i1$i$i7 = $86;
   } else {
    $87 = HEAP32[$78>>2]|0;
    
    $$0$i$i1$i$i7 = $87;
   }
   
   $88 = ($$0$i$i1$i$i7|0)==(-1);
   
   if ($88) {
    HEAP32[$2>>2] = 0;
    
    label = 37;
    break;
   }
   
   if (!($75)) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 do {
  if ((label|0) == 37) {
   
   if ($75) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $89 = HEAP32[$__err>>2]|0;
 $90 = $89 | 2;
 HEAP32[$__err>>2] = $90;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep12 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int11 = 0;
 var $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $2 = $gep;
 $3 = $2;
 $4 = HEAP32[$2>>2]|0;
 $gep_int1 = $4;
 $gep2 = (($gep_int1) + 8)|0;
 $5 = $gep2;
 $6 = HEAP32[$5>>2]|0;
 $7 = FUNCTION_TABLE_ii[$6 & 127]($2)|0;
 $8 = $7;
 $9 = HEAP8[$7]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 
 if ($11) {
  $14 = $9&255;
  $15 = $14 >>> 1;
  
  $16 = $15;
 } else {
  $gep_int3 = $7;
  $gep4 = (($gep_int3) + 4)|0;
  $12 = $gep4;
  $13 = HEAP32[$12>>2]|0;
  
  $16 = $13;
 }
 
 $gep_int5 = $7;
 $gep6 = (($gep_int5) + 12)|0;
 $17 = $gep6;
 $18 = $17;
 $19 = HEAP8[$17]|0;
 $20 = $19 & 1;
 $21 = ($20<<24>>24)==(0);
 
 if ($21) {
  $24 = $19&255;
  $25 = $24 >>> 1;
  
  $26 = $25;
 } else {
  $gep_int7 = $7;
  $gep8 = (($gep_int7) + 16)|0;
  $22 = $gep8;
  $23 = HEAP32[$22>>2]|0;
  
  $26 = $23;
 }
 
 $27 = (0 - ($26))|0;
 $28 = ($16|0)==($27|0);
 
 if ($28) {
  $29 = HEAP32[$__err>>2]|0;
  $30 = $29 | 4;
  HEAP32[$__err>>2] = $30;
  
  STACKTOP = sp;return;
 }
 $gep_int9 = $__e;
 $31 = $gep_int9;
 $32 = HEAP32[$31>>2]|0;
 $gep_int10 = $1;
 $33 = $gep_int10;
 HEAP32[$33>>2] = $32;
 $gep_int11 = $7;
 $gep12 = (($gep_int11) + 24)|0;
 $34 = $gep12;
 $35 = $$byval_copy;
 
 $36 = $$byval_copy;
 $37 = $1;
 ;HEAP32[$36+0>>2]=HEAP32[$37+0>>2]|0;
 $38 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$7,$34,$__ct,$__err,0)|0;
 $39 = $$byval_copy;
 
 $40 = $38;
 $41 = $7;
 $42 = (($40) - ($41))|0;
 $43 = ($38|0)==($7|0);
 
 do {
  if ($43) {
   $44 = HEAP32[$__h>>2]|0;
   $45 = ($44|0)==(12);
   
   if (!($45)) {
    break;
   }
   HEAP32[$__h>>2] = 0;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $46 = ($42|0)==(12);
 
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[$__h>>2]|0;
 $48 = ($47|0)<(12);
 
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = (($47) + 12)|0;
 HEAP32[$__h>>2] = $49;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep3 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0;
 var $gep5 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0;
 var $gep_int4 = 0, $gep_int6 = 0, $gep_int7 = 0, $gep_int9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0, u$26 = 0;
 sp = STACKTOP;
 $gep_int = $__b;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 
 do {
  if ($3) {
   $16 = 1;
  } else {
   $gep_int1 = $2;
   $gep = (($gep_int1) + 12)|0;
   $4 = $gep;
   $5 = HEAP32[$4>>2]|0;
   $gep_int2 = $2;
   $gep3 = (($gep_int2) + 16)|0;
   $6 = $gep3;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($5|0)==($7|0);
   
   if ($8) {
    $9 = $2;
    $10 = HEAP32[$2>>2]|0;
    $gep_int4 = $10;
    $gep5 = (($gep_int4) + 36)|0;
    $11 = $gep5;
    $12 = HEAP32[$11>>2]|0;
    $13 = FUNCTION_TABLE_ii[$12 & 127]($2)|0;
    
    $$0$i$i$i$i = $13;
   } else {
    $14 = HEAP32[$5>>2]|0;
    
    $$0$i$i$i$i = $14;
   }
   
   $15 = ($$0$i$i$i$i|0)==(-1);
   
   if ($15) {
    HEAP32[$1>>2] = 0;
    
    $16 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0);
    
    $16 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 
 $gep_int6 = $__e;
 $17 = $gep_int6;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 
 do {
  if ($19) {
   label = 14;
  } else {
   $gep_int7 = $18;
   $gep8 = (($gep_int7) + 12)|0;
   $20 = $gep8;
   $21 = HEAP32[$20>>2]|0;
   $gep_int9 = $18;
   $gep10 = (($gep_int9) + 16)|0;
   $22 = $gep10;
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   
   if ($24) {
    $25 = $18;
    $26 = HEAP32[$18>>2]|0;
    $gep_int11 = $26;
    $gep12 = (($gep_int11) + 36)|0;
    $27 = $gep12;
    $28 = HEAP32[$27>>2]|0;
    $29 = FUNCTION_TABLE_ii[$28 & 127]($18)|0;
    
    $$0$i$i1$i$i = $29;
   } else {
    $30 = HEAP32[$21>>2]|0;
    
    $$0$i$i1$i$i = $30;
   }
   
   $31 = ($$0$i$i1$i$i|0)==(-1);
   
   if ($31) {
    HEAP32[$17>>2] = 0;
    
    label = 14;
    break;
   } else {
    
    if ($16) {
     $$pre$i3$i$i915 = $18;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  
  if ($16) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $32 = HEAP32[$__err>>2]|0;
  $33 = $32 | 6;
  HEAP32[$__err>>2] = $33;
  
  STACKTOP = sp;return;
 }
 
 $34 = HEAP32[$1>>2]|0;
 $gep_int13 = $34;
 $gep14 = (($gep_int13) + 12)|0;
 $35 = $gep14;
 $36 = HEAP32[$35>>2]|0;
 $gep_int15 = $34;
 $gep16 = (($gep_int15) + 16)|0;
 $37 = $gep16;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($36|0)==($38|0);
 
 if ($39) {
  $40 = $34;
  $41 = HEAP32[$34>>2]|0;
  $gep_int17 = $41;
  $gep18 = (($gep_int17) + 36)|0;
  $42 = $gep18;
  $43 = HEAP32[$42>>2]|0;
  $44 = FUNCTION_TABLE_ii[$43 & 127]($34)|0;
  
  $$0$i$i = $44;
 } else {
  $45 = HEAP32[$36>>2]|0;
  
  $$0$i$i = $45;
 }
 
 $46 = $__ct;
 $47 = HEAP32[$__ct>>2]|0;
 $gep_int19 = $47;
 $gep20 = (($gep_int19) + 52)|0;
 $48 = $gep20;
 $49 = HEAP32[$48>>2]|0;
 $50 = FUNCTION_TABLE_iiii[$49 & 63]($__ct,$$0$i$i,0)|0;
 $51 = ($50<<24>>24)==(37);
 
 if (!($51)) {
  $52 = HEAP32[$__err>>2]|0;
  $53 = $52 | 4;
  HEAP32[$__err>>2] = $53;
  
  STACKTOP = sp;return;
 }
 $54 = HEAP32[$1>>2]|0;
 $gep_int21 = $54;
 $gep22 = (($gep_int21) + 12)|0;
 $55 = $gep22;
 $56 = HEAP32[$55>>2]|0;
 $gep_int23 = $54;
 $gep24 = (($gep_int23) + 16)|0;
 $57 = $gep24;
 $58 = HEAP32[$57>>2]|0;
 $59 = ($56|0)==($58|0);
 
 if ($59) {
  $60 = $54;
  $61 = HEAP32[$54>>2]|0;
  $gep_int25 = $61;
  $gep26 = (($gep_int25) + 40)|0;
  $62 = $gep26;
  $63 = HEAP32[$62>>2]|0;
  u$26 = FUNCTION_TABLE_ii[$63 & 127]($54)|0;
  
 } else {
  $gep_int27 = $56;
  $gep28 = (($gep_int27) + 4)|0;
  $64 = $gep28;
  HEAP32[$55>>2] = $64;
  
 }
 $65 = HEAP32[$1>>2]|0;
 $66 = ($65|0)==(0);
 
 do {
  if ($66) {
   $79 = 1;
  } else {
   $gep_int29 = $65;
   $gep30 = (($gep_int29) + 12)|0;
   $67 = $gep30;
   $68 = HEAP32[$67>>2]|0;
   $gep_int31 = $65;
   $gep32 = (($gep_int31) + 16)|0;
   $69 = $gep32;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($68|0)==($70|0);
   
   if ($71) {
    $72 = $65;
    $73 = HEAP32[$65>>2]|0;
    $gep_int33 = $73;
    $gep34 = (($gep_int33) + 36)|0;
    $74 = $gep34;
    $75 = HEAP32[$74>>2]|0;
    $76 = FUNCTION_TABLE_ii[$75 & 127]($65)|0;
    
    $$0$i$i$i$i1 = $76;
   } else {
    $77 = HEAP32[$68>>2]|0;
    
    $$0$i$i$i$i1 = $77;
   }
   
   $78 = ($$0$i$i$i$i1|0)==(-1);
   
   if ($78) {
    HEAP32[$1>>2] = 0;
    
    $79 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0);
    
    $79 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 
 $80 = ($$pre$i3$i$i915|0)==(0);
 
 do {
  if ($80) {
   label = 38;
  } else {
   $gep_int35 = $$pre$i3$i$i915;
   $gep36 = (($gep_int35) + 12)|0;
   $81 = $gep36;
   $82 = HEAP32[$81>>2]|0;
   $gep_int37 = $$pre$i3$i$i915;
   $gep38 = (($gep_int37) + 16)|0;
   $83 = $gep38;
   $84 = HEAP32[$83>>2]|0;
   $85 = ($82|0)==($84|0);
   
   if ($85) {
    $86 = $$pre$i3$i$i915;
    $87 = HEAP32[$$pre$i3$i$i915>>2]|0;
    $gep_int39 = $87;
    $gep40 = (($gep_int39) + 36)|0;
    $88 = $gep40;
    $89 = HEAP32[$88>>2]|0;
    $90 = FUNCTION_TABLE_ii[$89 & 127]($$pre$i3$i$i915)|0;
    
    $$0$i$i1$i$i7 = $90;
   } else {
    $91 = HEAP32[$82>>2]|0;
    
    $$0$i$i1$i$i7 = $91;
   }
   
   $92 = ($$0$i$i1$i$i7|0)==(-1);
   
   if ($92) {
    HEAP32[$17>>2] = 0;
    
    label = 38;
    break;
   }
   
   if (!($79)) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 do {
  if ((label|0) == 38) {
   
   if ($79) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $93 = HEAP32[$__err>>2]|0;
 $94 = $93 | 2;
 HEAP32[$__err>>2] = $94;
 
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$0$in$phi = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep3 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0;
 var $gep36 = 0, $gep38 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep5 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0;
 var $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int4 = 0;
 var $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int6 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int7 = 0, $gep_int71 = 0, $gep_int9 = 0, $phitmp$i$i$i = 0;
 var $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0, u$26 = 0, u$52 = 0;
 sp = STACKTOP;
 $gep_int = $__b;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 
 do {
  if ($3) {
   $16 = 1;
  } else {
   $gep_int1 = $2;
   $gep = (($gep_int1) + 12)|0;
   $4 = $gep;
   $5 = HEAP32[$4>>2]|0;
   $gep_int2 = $2;
   $gep3 = (($gep_int2) + 16)|0;
   $6 = $gep3;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($5|0)==($7|0);
   
   if ($8) {
    $9 = $2;
    $10 = HEAP32[$2>>2]|0;
    $gep_int4 = $10;
    $gep5 = (($gep_int4) + 36)|0;
    $11 = $gep5;
    $12 = HEAP32[$11>>2]|0;
    $13 = FUNCTION_TABLE_ii[$12 & 127]($2)|0;
    
    $$0$i$i$i$i = $13;
   } else {
    $14 = HEAP32[$5>>2]|0;
    
    $$0$i$i$i$i = $14;
   }
   
   $15 = ($$0$i$i$i$i|0)==(-1);
   
   if ($15) {
    HEAP32[$1>>2] = 0;
    
    $16 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0);
    
    $16 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 
 $gep_int6 = $__e;
 $17 = $gep_int6;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 
 do {
  if ($19) {
   label = 14;
  } else {
   $gep_int7 = $18;
   $gep8 = (($gep_int7) + 12)|0;
   $20 = $gep8;
   $21 = HEAP32[$20>>2]|0;
   $gep_int9 = $18;
   $gep10 = (($gep_int9) + 16)|0;
   $22 = $gep10;
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   
   if ($24) {
    $25 = $18;
    $26 = HEAP32[$18>>2]|0;
    $gep_int11 = $26;
    $gep12 = (($gep_int11) + 36)|0;
    $27 = $gep12;
    $28 = HEAP32[$27>>2]|0;
    $29 = FUNCTION_TABLE_ii[$28 & 127]($18)|0;
    
    $$0$i$i1$i$i = $29;
   } else {
    $30 = HEAP32[$21>>2]|0;
    
    $$0$i$i1$i$i = $30;
   }
   
   $31 = ($$0$i$i1$i$i|0)==(-1);
   
   if ($31) {
    HEAP32[$17>>2] = 0;
    
    label = 14;
    break;
   } else {
    
    if ($16) {
     $34 = $18;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  
  if ($16) {
   label = 16;
  } else {
   $34 = 0;
  }
 }
 if ((label|0) == 16) {
  $32 = HEAP32[$__err>>2]|0;
  $33 = $32 | 6;
  HEAP32[$__err>>2] = $33;
  
  $$01 = 0;
  
  STACKTOP = sp;return $$01|0;
 }
 
 $35 = HEAP32[$1>>2]|0;
 $gep_int13 = $35;
 $gep14 = (($gep_int13) + 12)|0;
 $36 = $gep14;
 $37 = HEAP32[$36>>2]|0;
 $gep_int15 = $35;
 $gep16 = (($gep_int15) + 16)|0;
 $38 = $gep16;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37|0)==($39|0);
 
 if ($40) {
  $41 = $35;
  $42 = HEAP32[$35>>2]|0;
  $gep_int17 = $42;
  $gep18 = (($gep_int17) + 36)|0;
  $43 = $gep18;
  $44 = HEAP32[$43>>2]|0;
  $45 = FUNCTION_TABLE_ii[$44 & 127]($35)|0;
  
  $$0$i$i = $45;
 } else {
  $46 = HEAP32[$37>>2]|0;
  
  $$0$i$i = $46;
 }
 
 $47 = $__ct;
 $48 = HEAP32[$__ct>>2]|0;
 $gep_int19 = $48;
 $gep20 = (($gep_int19) + 12)|0;
 $49 = $gep20;
 $50 = HEAP32[$49>>2]|0;
 $51 = FUNCTION_TABLE_iiii[$50 & 63]($__ct,2048,$$0$i$i)|0;
 
 if (!($51)) {
  $52 = HEAP32[$__err>>2]|0;
  $53 = $52 | 4;
  HEAP32[$__err>>2] = $53;
  
  $$01 = 0;
  
  STACKTOP = sp;return $$01|0;
 }
 $54 = $__ct;
 $55 = HEAP32[$__ct>>2]|0;
 $gep_int21 = $55;
 $gep22 = (($gep_int21) + 52)|0;
 $56 = $gep22;
 $57 = HEAP32[$56>>2]|0;
 $58 = FUNCTION_TABLE_iiii[$57 & 63]($__ct,$$0$i$i,0)|0;
 $59 = $58 << 24 >> 24;
 $60 = HEAP32[$1>>2]|0;
 $gep_int23 = $60;
 $gep24 = (($gep_int23) + 12)|0;
 $61 = $gep24;
 $62 = HEAP32[$61>>2]|0;
 $gep_int25 = $60;
 $gep26 = (($gep_int25) + 16)|0;
 $63 = $gep26;
 $64 = HEAP32[$63>>2]|0;
 $65 = ($62|0)==($64|0);
 
 if ($65) {
  $66 = $60;
  $67 = HEAP32[$60>>2]|0;
  $gep_int27 = $67;
  $gep28 = (($gep_int27) + 40)|0;
  $68 = $gep28;
  $69 = HEAP32[$68>>2]|0;
  u$26 = FUNCTION_TABLE_ii[$69 & 127]($60)|0;
  
  $$0$in = $__n;$$pre$i3$i$i10 = $34;$71 = $34;$__r$0$in = $59;
 } else {
  $gep_int29 = $62;
  $gep30 = (($gep_int29) + 4)|0;
  $70 = $gep30;
  HEAP32[$61>>2] = $70;
  
  $$0$in = $__n;$$pre$i3$i$i10 = $34;$71 = $34;$__r$0$in = $59;
 }
 while(1) {
  
  
  
  
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $72 = HEAP32[$1>>2]|0;
  $73 = ($72|0)==(0);
  
  do {
   if ($73) {
    $86 = 1;
   } else {
    $gep_int31 = $72;
    $gep32 = (($gep_int31) + 12)|0;
    $74 = $gep32;
    $75 = HEAP32[$74>>2]|0;
    $gep_int33 = $72;
    $gep34 = (($gep_int33) + 16)|0;
    $76 = $gep34;
    $77 = HEAP32[$76>>2]|0;
    $78 = ($75|0)==($77|0);
    
    if ($78) {
     $79 = $72;
     $80 = HEAP32[$72>>2]|0;
     $gep_int35 = $80;
     $gep36 = (($gep_int35) + 36)|0;
     $81 = $gep36;
     $82 = HEAP32[$81>>2]|0;
     $83 = FUNCTION_TABLE_ii[$82 & 127]($72)|0;
     
     $$0$i$i$i$i2 = $83;
    } else {
     $84 = HEAP32[$75>>2]|0;
     
     $$0$i$i$i$i2 = $84;
    }
    
    $85 = ($$0$i$i$i$i2|0)==(-1);
    
    if ($85) {
     HEAP32[$1>>2] = 0;
     
     $86 = 1;
     break;
    } else {
     $$pre$i$i$i4 = HEAP32[$1>>2]|0;
     $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0);
     
     $86 = $phitmp$i$i$i5;
     break;
    }
   }
  } while(0);
  
  $87 = ($71|0)==(0);
  
  do {
   if ($87) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;$100 = 0;$101 = 1;
   } else {
    $gep_int37 = $71;
    $gep38 = (($gep_int37) + 12)|0;
    $88 = $gep38;
    $89 = HEAP32[$88>>2]|0;
    $gep_int39 = $71;
    $gep40 = (($gep_int39) + 16)|0;
    $90 = $gep40;
    $91 = HEAP32[$90>>2]|0;
    $92 = ($89|0)==($91|0);
    
    if ($92) {
     $93 = $71;
     $94 = HEAP32[$71>>2]|0;
     $gep_int41 = $94;
     $gep42 = (($gep_int41) + 36)|0;
     $95 = $gep42;
     $96 = HEAP32[$95>>2]|0;
     $97 = FUNCTION_TABLE_ii[$96 & 127]($71)|0;
     
     $$0$i$i1$i$i8 = $97;
    } else {
     $98 = HEAP32[$89>>2]|0;
     
     $$0$i$i1$i$i8 = $98;
    }
    
    $99 = ($$0$i$i1$i$i8|0)==(-1);
    
    if ($99) {
     HEAP32[$17>>2] = 0;
     
     $$pre$i3$i$i25 = 0;$100 = 0;$101 = 1;
     break;
    } else {
     $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0);
     
     $$pre$i3$i$i25 = $$pre$i3$i$i10;$100 = $$pre$i3$i$i10;$101 = $phitmp$i4$i$i11;
     break;
    }
   }
  } while(0);
  
  
  
  $tmp$i$i13 = $86 ^ $101;
  $102 = ($$0|0)>(0);
  $$ = $tmp$i$i13 & $102;
  $103 = HEAP32[$1>>2]|0;
  
  if (!($$)) {
   break;
  }
  $gep_int43 = $103;
  $gep44 = (($gep_int43) + 12)|0;
  $104 = $gep44;
  $105 = HEAP32[$104>>2]|0;
  $gep_int45 = $103;
  $gep46 = (($gep_int45) + 16)|0;
  $106 = $gep46;
  $107 = HEAP32[$106>>2]|0;
  $108 = ($105|0)==($107|0);
  
  if ($108) {
   $109 = $103;
   $110 = HEAP32[$103>>2]|0;
   $gep_int47 = $110;
   $gep48 = (($gep_int47) + 36)|0;
   $111 = $gep48;
   $112 = HEAP32[$111>>2]|0;
   $113 = FUNCTION_TABLE_ii[$112 & 127]($103)|0;
   
   $$0$i$i14 = $113;
  } else {
   $114 = HEAP32[$105>>2]|0;
   
   $$0$i$i14 = $114;
  }
  
  $115 = HEAP32[$__ct>>2]|0;
  $gep_int49 = $115;
  $gep50 = (($gep_int49) + 12)|0;
  $116 = $gep50;
  $117 = HEAP32[$116>>2]|0;
  $118 = FUNCTION_TABLE_iiii[$117 & 63]($__ct,2048,$$0$i$i14)|0;
  
  if (!($118)) {
   $$01 = $__r$0;
   label = 63;
   break;
  }
  $119 = ($__r$0*10)|0;
  $120 = HEAP32[$__ct>>2]|0;
  $gep_int51 = $120;
  $gep52 = (($gep_int51) + 52)|0;
  $121 = $gep52;
  $122 = HEAP32[$121>>2]|0;
  $123 = FUNCTION_TABLE_iiii[$122 & 63]($__ct,$$0$i$i14,0)|0;
  $124 = $123 << 24 >> 24;
  $125 = (($124) + ($119))|0;
  $126 = HEAP32[$1>>2]|0;
  $gep_int53 = $126;
  $gep54 = (($gep_int53) + 12)|0;
  $127 = $gep54;
  $128 = HEAP32[$127>>2]|0;
  $gep_int55 = $126;
  $gep56 = (($gep_int55) + 16)|0;
  $129 = $gep56;
  $130 = HEAP32[$129>>2]|0;
  $131 = ($128|0)==($130|0);
  
  if ($131) {
   $132 = $126;
   $133 = HEAP32[$126>>2]|0;
   $gep_int57 = $133;
   $gep58 = (($gep_int57) + 40)|0;
   $134 = $gep58;
   $135 = HEAP32[$134>>2]|0;
   u$52 = FUNCTION_TABLE_ii[$135 & 127]($126)|0;
   
   $$0$in$phi = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$71 = $100;$__r$0$in = $125;$$0$in = $$0$in$phi;
   continue;
  } else {
   $gep_int59 = $128;
   $gep60 = (($gep_int59) + 4)|0;
   $136 = $gep60;
   HEAP32[$127>>2] = $136;
   
   $$0$in$phi = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$71 = $100;$__r$0$in = $125;$$0$in = $$0$in$phi;
   continue;
  }
 }
 if ((label|0) == 63) {
  
  STACKTOP = sp;return $$01|0;
 }
 $137 = ($103|0)==(0);
 
 do {
  if ($137) {
   $150 = 1;
  } else {
   $gep_int61 = $103;
   $gep62 = (($gep_int61) + 12)|0;
   $138 = $gep62;
   $139 = HEAP32[$138>>2]|0;
   $gep_int63 = $103;
   $gep64 = (($gep_int63) + 16)|0;
   $140 = $gep64;
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   
   if ($142) {
    $143 = $103;
    $144 = HEAP32[$103>>2]|0;
    $gep_int65 = $144;
    $gep66 = (($gep_int65) + 36)|0;
    $145 = $gep66;
    $146 = HEAP32[$145>>2]|0;
    $147 = FUNCTION_TABLE_ii[$146 & 127]($103)|0;
    
    $$0$i$i$i$i17 = $147;
   } else {
    $148 = HEAP32[$139>>2]|0;
    
    $$0$i$i$i$i17 = $148;
   }
   
   $149 = ($$0$i$i$i$i17|0)==(-1);
   
   if ($149) {
    HEAP32[$1>>2] = 0;
    
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i19 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0);
    
    $150 = $phitmp$i$i$i20;
    break;
   }
  }
 } while(0);
 
 $151 = ($$pre$i3$i$i25|0)==(0);
 
 do {
  if ($151) {
   label = 60;
  } else {
   $gep_int67 = $$pre$i3$i$i25;
   $gep68 = (($gep_int67) + 12)|0;
   $152 = $gep68;
   $153 = HEAP32[$152>>2]|0;
   $gep_int69 = $$pre$i3$i$i25;
   $gep70 = (($gep_int69) + 16)|0;
   $154 = $gep70;
   $155 = HEAP32[$154>>2]|0;
   $156 = ($153|0)==($155|0);
   
   if ($156) {
    $157 = $$pre$i3$i$i25;
    $158 = HEAP32[$$pre$i3$i$i25>>2]|0;
    $gep_int71 = $158;
    $gep72 = (($gep_int71) + 36)|0;
    $159 = $gep72;
    $160 = HEAP32[$159>>2]|0;
    $161 = FUNCTION_TABLE_ii[$160 & 127]($$pre$i3$i$i25)|0;
    
    $$0$i$i1$i$i23 = $161;
   } else {
    $162 = HEAP32[$153>>2]|0;
    
    $$0$i$i1$i$i23 = $162;
   }
   
   $163 = ($$0$i$i1$i$i23|0)==(-1);
   
   if ($163) {
    HEAP32[$17>>2] = 0;
    
    label = 60;
    break;
   }
   
   if ($150) {
    $$01 = $__r$0;
   } else {
    break;
   }
   
   STACKTOP = sp;return $$01|0;
  }
 } while(0);
 do {
  if ((label|0) == 60) {
   
   if ($150) {
    break;
   } else {
    $$01 = $__r$0;
   }
   
   STACKTOP = sp;return $$01|0;
  }
 } while(0);
 $164 = HEAP32[$__err>>2]|0;
 $165 = $164 | 2;
 HEAP32[$__err>>2] = $165;
 
 $$01 = $__r$0;
 
 STACKTOP = sp;return $$01|0;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, $expanded = 0, $expanded10 = 0;
 var $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, label = 0, sp = 0, u$14 = 0, u$7 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $gep_int14 = 8376;
 $expanded = $gep_int14;
 $3 = HEAP8[$expanded]|0;
 $4 = ($3<<24>>24)==(0);
 
 do {
  if ($4) {
   $expanded6 = 8376;
   $5 = ___cxa_guard_acquire($expanded6|0)|0;
   $6 = ($5|0)==(0);
   
   if ($6) {
    break;
   }
   __THREW__ = 0;
   $gep_int15 = 8384;
   $expanded7 = $gep_int15;
   $7 = invoke_iiii(30,2147483647,$expanded7|0,0)|0;
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   
   if (!($9)) {
    $expanded8 = 8368;
    HEAP32[8368>>2] = $7;
    $expanded9 = 8376;
    ___cxa_guard_release($expanded9|0);
    
    break;
   }
   $expanded10 = 69;
   $10 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$7 = tempRet0;
   $expanded11 = 8376;
   ___cxa_guard_abort($expanded11|0);
   
   $eh$lpad$body$i$i$i$indexZ2D = $10;
   
   ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
   // unreachable
  }
 } while(0);
 $expanded12 = 8368;
 $11 = HEAP32[8368>>2]|0;
 $12 = ($2|0)==($11|0);
 
 if ($12) {
  $17 = $this;
  __ZdlPv($17);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(180,$13|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 
 if (!($15)) {
  $17 = $this;
  __ZdlPv($17);
  STACKTOP = sp;return;
 }
 $expanded13 = 69;
 $16 = ___cxa_find_matching_catch(-1,-1,0)|0;
 u$14 = tempRet0;
 
 $eh$lpad$body$i$i$i$indexZ2D = $16;
 
 ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
 // unreachable
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0;
 var $expanded12 = 0, $expanded13 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, label = 0, sp = 0, u$14 = 0, u$7 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $gep_int14 = 8376;
 $expanded = $gep_int14;
 $3 = HEAP8[$expanded]|0;
 $4 = ($3<<24>>24)==(0);
 
 do {
  if ($4) {
   $expanded6 = 8376;
   $5 = ___cxa_guard_acquire($expanded6|0)|0;
   $6 = ($5|0)==(0);
   
   if ($6) {
    break;
   }
   __THREW__ = 0;
   $gep_int15 = 8384;
   $expanded7 = $gep_int15;
   $7 = invoke_iiii(30,2147483647,$expanded7|0,0)|0;
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   
   if (!($9)) {
    $expanded8 = 8368;
    HEAP32[8368>>2] = $7;
    $expanded9 = 8376;
    ___cxa_guard_release($expanded9|0);
    
    break;
   }
   $expanded10 = 69;
   $10 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$7 = tempRet0;
   $expanded11 = 8376;
   ___cxa_guard_abort($expanded11|0);
   
   $eh$lpad$body$i$i$indexZ2D = $10;
   
   ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
   // unreachable
  }
 } while(0);
 $expanded12 = 8368;
 $11 = HEAP32[8368>>2]|0;
 $12 = ($2|0)==($11|0);
 
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(180,$13|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $expanded13 = 69;
 $16 = ___cxa_find_matching_catch(-1,-1,0)|0;
 u$14 = tempRet0;
 
 $eh$lpad$body$i$i$indexZ2D = $16;
 
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,u$0,u$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$7$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0;
 var $fmt$i = 0, $gep = 0, $gep10 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int2 = 0, $gep_int20 = 0;
 var $gep_int22 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $fmt$i = sp;
 $__nar = sp + 8|0;
 $gep_int = $__nar;
 $1 = $gep_int;
 
 $gep_int1 = $fmt$i;
 $2 = $gep_int1;
 
 HEAP8[$2] = 37;
 $gep_int2 = $fmt$i;
 $gep = (($gep_int2) + 1)|0;
 $3 = $gep;
 HEAP8[$3] = $__fmt;
 $gep_int3 = $fmt$i;
 $gep4 = (($gep_int3) + 2)|0;
 $4 = $gep4;
 HEAP8[$4] = $__mod;
 $gep_int5 = $fmt$i;
 $gep6 = (($gep_int5) + 3)|0;
 $5 = $gep6;
 HEAP8[$5] = 0;
 $6 = ($__mod<<24>>24)==(0);
 
 if (!($6)) {
  HEAP8[$3] = $__mod;
  HEAP8[$4] = $__fmt;
  
 }
 $gep_int7 = $this;
 $gep8 = (($gep_int7) + 8)|0;
 $7 = $gep8;
 $8 = HEAP32[$7>>2]|0;
 $9 = _strftime_l($1|0,100,$2|0,$__tm|0,$8|0)|0;
 $gep_int9 = $__nar;
 $gep10 = (($gep_int9) + ($9))|0;
 $10 = $gep10;
 
 $gep_int11 = $__s;
 $11 = $gep_int11;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)==(0);
 
 if ($13) {
  $35 = $12;
  
  $gep_int22 = $agg$result;
  $36 = $gep_int22;
  HEAP32[$36>>2] = $35;
  
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $1;$14 = $12;$15 = $12;
 }
 while(1) {
  
  
  
  $16 = HEAP8[$$01$i$i]|0;
  $17 = ($15|0)==(0);
  
  do {
   if ($17) {
    $31 = $14;$32 = 0;
   } else {
    $gep_int12 = $15;
    $gep13 = (($gep_int12) + 24)|0;
    $18 = $gep13;
    $19 = HEAP32[$18>>2]|0;
    $gep_int14 = $15;
    $gep15 = (($gep_int14) + 28)|0;
    $20 = $gep15;
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19|0)==($21|0);
    
    if ($22) {
     $24 = $15;
     $25 = HEAP32[$15>>2]|0;
     $gep_int18 = $25;
     $gep19 = (($gep_int18) + 52)|0;
     $26 = $gep19;
     $27 = HEAP32[$26>>2]|0;
     $28 = $16&255;
     $29 = FUNCTION_TABLE_iii[$27 & 63]($15,$28)|0;
     $30 = ($29|0)==(-1);
     $$$i = $30 ? 0 : $14;
     $$7$i = $30 ? 0 : $15;
     
     $31 = $$$i;$32 = $$7$i;
     break;
    } else {
     $gep_int16 = $19;
     $gep17 = (($gep_int16) + 1)|0;
     $23 = $gep17;
     HEAP32[$18>>2] = $23;
     HEAP8[$19] = $16;
     
     $31 = $14;$32 = $15;
     break;
    }
   }
  } while(0);
  
  
  $gep_int20 = $$01$i$i;
  $gep21 = (($gep_int20) + 1)|0;
  $33 = $gep21;
  $34 = ($33|0)==($10|0);
  
  if ($34) {
   $35 = $31;
   break;
  } else {
   $$01$i$i = $33;$14 = $31;$15 = $32;
  }
 }
 
 $gep_int22 = $agg$result;
 $36 = $gep_int22;
 HEAP32[$36>>2] = $35;
 
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, $expanded = 0, $expanded10 = 0;
 var $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, label = 0, sp = 0, u$14 = 0, u$7 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $gep_int14 = 8376;
 $expanded = $gep_int14;
 $3 = HEAP8[$expanded]|0;
 $4 = ($3<<24>>24)==(0);
 
 do {
  if ($4) {
   $expanded6 = 8376;
   $5 = ___cxa_guard_acquire($expanded6|0)|0;
   $6 = ($5|0)==(0);
   
   if ($6) {
    break;
   }
   __THREW__ = 0;
   $gep_int15 = 8384;
   $expanded7 = $gep_int15;
   $7 = invoke_iiii(30,2147483647,$expanded7|0,0)|0;
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   
   if (!($9)) {
    $expanded8 = 8368;
    HEAP32[8368>>2] = $7;
    $expanded9 = 8376;
    ___cxa_guard_release($expanded9|0);
    
    break;
   }
   $expanded10 = 69;
   $10 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$7 = tempRet0;
   $expanded11 = 8376;
   ___cxa_guard_abort($expanded11|0);
   
   $eh$lpad$body$i$i$i$indexZ2D = $10;
   
   ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
   // unreachable
  }
 } while(0);
 $expanded12 = 8368;
 $11 = HEAP32[8368>>2]|0;
 $12 = ($2|0)==($11|0);
 
 if ($12) {
  $17 = $this;
  __ZdlPv($17);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(180,$13|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 
 if (!($15)) {
  $17 = $this;
  __ZdlPv($17);
  STACKTOP = sp;return;
 }
 $expanded13 = 69;
 $16 = ___cxa_find_matching_catch(-1,-1,0)|0;
 u$14 = tempRet0;
 
 $eh$lpad$body$i$i$i$indexZ2D = $16;
 
 ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
 // unreachable
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0;
 var $expanded12 = 0, $expanded13 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, label = 0, sp = 0, u$14 = 0, u$7 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $gep_int14 = 8376;
 $expanded = $gep_int14;
 $3 = HEAP8[$expanded]|0;
 $4 = ($3<<24>>24)==(0);
 
 do {
  if ($4) {
   $expanded6 = 8376;
   $5 = ___cxa_guard_acquire($expanded6|0)|0;
   $6 = ($5|0)==(0);
   
   if ($6) {
    break;
   }
   __THREW__ = 0;
   $gep_int15 = 8384;
   $expanded7 = $gep_int15;
   $7 = invoke_iiii(30,2147483647,$expanded7|0,0)|0;
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   
   if (!($9)) {
    $expanded8 = 8368;
    HEAP32[8368>>2] = $7;
    $expanded9 = 8376;
    ___cxa_guard_release($expanded9|0);
    
    break;
   }
   $expanded10 = 69;
   $10 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$7 = tempRet0;
   $expanded11 = 8376;
   ___cxa_guard_abort($expanded11|0);
   
   $eh$lpad$body$i$i$indexZ2D = $10;
   
   ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
   // unreachable
  }
 } while(0);
 $expanded12 = 8368;
 $11 = HEAP32[8368>>2]|0;
 $12 = ($2|0)==($11|0);
 
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(180,$13|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $expanded13 = 69;
 $16 = ___cxa_find_matching_catch(-1,-1,0)|0;
 u$14 = tempRet0;
 
 $eh$lpad$body$i$i$indexZ2D = $16;
 
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,u$0,u$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$7$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0;
 var $gep3 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 408|0;
 $__nar = sp;
 $__ne = sp + 400|0;
 $1 = $__nar;
 
 $gep_int = $__nar;
 $2 = $gep_int;
 $gep_int1 = $__nar;
 $gep = (($gep_int1) + 400)|0;
 $3 = $gep;
 HEAP32[$__ne>>2] = $3;
 $gep_int2 = $this;
 $gep3 = (($gep_int2) + 8)|0;
 $4 = $gep3;
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($4,$2,$__ne,$__tm,$__fmt,$__mod);
 $5 = HEAP32[$__ne>>2]|0;
 $gep_int4 = $__s;
 $6 = $gep_int4;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2|0)==($5|0);
 
 if ($8) {
  $29 = $7;
  
  $gep_int15 = $agg$result;
  $30 = $gep_int15;
  HEAP32[$30>>2] = $29;
  
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $2;$10 = $7;$9 = $7;
 }
 while(1) {
  
  
  
  $11 = HEAP32[$$01$i$i>>2]|0;
  $12 = ($10|0)==(0);
  
  if ($12) {
   $25 = $9;$26 = 0;
  } else {
   $gep_int5 = $10;
   $gep6 = (($gep_int5) + 24)|0;
   $13 = $gep6;
   $14 = HEAP32[$13>>2]|0;
   $gep_int7 = $10;
   $gep8 = (($gep_int7) + 28)|0;
   $15 = $gep8;
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   
   if ($17) {
    $18 = $10;
    $19 = HEAP32[$10>>2]|0;
    $gep_int9 = $19;
    $gep10 = (($gep_int9) + 52)|0;
    $20 = $gep10;
    $21 = HEAP32[$20>>2]|0;
    $22 = FUNCTION_TABLE_iii[$21 & 63]($10,$11)|0;
    
    $$0$i$i$i$i = $22;
   } else {
    $gep_int11 = $14;
    $gep12 = (($gep_int11) + 4)|0;
    $23 = $gep12;
    HEAP32[$13>>2] = $23;
    HEAP32[$14>>2] = $11;
    
    $$0$i$i$i$i = $11;
   }
   
   $24 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $24 ? 0 : $9;
   $$7$i = $24 ? 0 : $10;
   
   $25 = $$$i;$26 = $$7$i;
  }
  
  
  $gep_int13 = $$01$i$i;
  $gep14 = (($gep_int13) + 4)|0;
  $27 = $gep14;
  $28 = ($27|0)==($5|0);
  
  if ($28) {
   $29 = $25;
   break;
  } else {
   $$01$i$i = $27;$10 = $26;$9 = $25;
  }
 }
 
 $gep_int15 = $agg$result;
 $30 = $gep_int15;
 HEAP32[$30>>2] = $29;
 
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0;
 var $fmt$i = 0, $gep = 0, $gep13 = 0, $gep7 = 0, $gep9 = 0, $gep_array = 0, $gep_int = 0, $gep_int10 = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int8 = 0, $mb = 0, $tmpcast = 0, label = 0, sp = 0, u$10 = 0, u$19 = 0;
 var u$21 = 0, u$26 = 0, u$28 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 120|0;
 $fmt$i = sp;
 $__nar = sp + 8|0;
 $mb = sp + 112|0;
 $tmpcast = $mb;
 $__nb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $gep_int = $__nar;
 $1 = $gep_int;
 
 $gep_int4 = $fmt$i;
 $2 = $gep_int4;
 
 HEAP8[$2] = 37;
 $gep_int5 = $fmt$i;
 $gep = (($gep_int5) + 1)|0;
 $3 = $gep;
 HEAP8[$3] = $__fmt;
 $gep_int6 = $fmt$i;
 $gep7 = (($gep_int6) + 2)|0;
 $4 = $gep7;
 HEAP8[$4] = $__mod;
 $gep_int8 = $fmt$i;
 $gep9 = (($gep_int8) + 3)|0;
 $5 = $gep9;
 HEAP8[$5] = 0;
 $6 = ($__mod<<24>>24)==(0);
 
 if (!($6)) {
  HEAP8[$3] = $__mod;
  HEAP8[$4] = $__fmt;
  
 }
 $gep_int10 = $this;
 $7 = $gep_int10;
 $8 = HEAP32[$7>>2]|0;
 u$10 = _strftime_l($1|0,100,$2|0,$__tm|0,$8|0)|0;
 
 $9 = $mb;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 HEAP32[$__nb>>2] = $1;
 $13 = HEAP32[$__we>>2]|0;
 $14 = $13;
 $15 = $__wb;
 $16 = (($14) - ($15))|0;
 $17 = $16 >> 2;
 $18 = HEAP32[$7>>2]|0;
 $19 = _uselocale($18|0)|0;
 __THREW__ = 0;
 $20 = invoke_iiiii(17,$__wb|0,$__nb|0,$17|0,$tmpcast|0)|0;
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 
 if ($22) {
  $expanded1 = 69;
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  $29 = ($19|0)==(0);
  
  if ($29) {
   ___resumeException($27|0);
   // unreachable
  }
  __THREW__ = 0;
  u$26 = invoke_ii(95,$19|0)|0;
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  
  if ($31) {
   $expanded2 = 69;
   $32 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$28 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable
  } else {
   ___resumeException($27|0);
   // unreachable
  }
 }
 $23 = ($19|0)==(0);
 
 do {
  if (!($23)) {
   __THREW__ = 0;
   u$19 = invoke_ii(95,$19|0)|0;
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   
   if (!($25)) {
    break;
   }
   $expanded = 69;
   $26 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$21 = tempRet0;
   ___clang_call_terminate($26);
   // unreachable
  }
 } while(0);
 $33 = ($20|0)==(-1);
 
 if ($33) {
  $gep_int11 = 9360;
  $expanded3 = $gep_int11;
  __ZNSt3__121__throw_runtime_errorEPKc($expanded3);
  // unreachable
 } else {
  $gep_int12 = $__wb;
  $gep_array = $20<<2;
  $gep13 = (($gep_int12) + ($gep_array))|0;
  $34 = $gep13;
  HEAP32[$__we>>2] = $34;
  
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$01$i$phi = 0, $$117 = 0, $$118 = 0, $$1215 = 0, $$1216 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$211 = 0, $__neg = 0, $__p$i$i$i$i = 0;
 var $__w$012 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0;
 var $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep31 = 0, $gep36 = 0, $gep38 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep51 = 0, $gep54 = 0, $gep57 = 0;
 var $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep76 = 0, $gep78 = 0, $gep80 = 0, $gep82 = 0, $gep84 = 0, $gep86 = 0, $gep_array = 0, $gep_int = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0;
 var $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int49 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0;
 var $gep_int69 = 0, $gep_int71 = 0, $gep_int72 = 0, $gep_int73 = 0, $gep_int74 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int88 = 0, $gep_int89 = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0;
 var u$104 = 0, u$111 = 0, u$31 = 0, u$93 = 0, u$99 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__wbuf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__wb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__wn = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__loc = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__neg = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__atoms = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__nbuf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $gep_int = $__wbuf;
 $2 = $gep_int;
 
 $gep_int28 = $__wb;
 $3 = $gep_int28;
 HEAP32[$3>>2] = $2;
 $gep_int29 = $__wb;
 $gep = (($gep_int29) + 4)|0;
 $4 = $gep;
 HEAP32[$4>>2] = 181;
 $gep_int30 = $__wbuf;
 $gep31 = (($gep_int30) + 100)|0;
 $5 = $gep31;
 __THREW__ = 0;
 invoke_vii(41,$__loc|0,$__iob|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 do {
  if ($7) {
   $expanded17 = 69;
   $68 = ___cxa_find_matching_catch(-1,-1)|0;
   $69 = tempRet0;
   HEAP32[$3>>2] = 0;
   
   $$117 = $68;$$1215 = $69;$155 = 181;$156 = $2;
  } else {
   $gep_int32 = $__loc;
   $8 = $gep_int32;
   $9 = HEAP32[$8>>2]|0;
   $10 = $__p$i$i$i$i;
   
   $expanded6 = 8480;
   $gep_int33 = 8480;
   $expanded = $gep_int33;
   $11 = HEAP32[$expanded>>2]|0;
   $12 = ($11|0)==(-1);
   
   if ($12) {
    label = 4;
   } else {
    $gep_int34 = $__p$i$i$i$i;
    $13 = $gep_int34;
    $expanded7 = 8480;
    HEAP32[$13>>2] = $expanded7;
    $gep_int35 = $__p$i$i$i$i;
    $gep36 = (($gep_int35) + 4)|0;
    $14 = $gep36;
    $expanded8 = 177;
    HEAP32[$14>>2] = $expanded8;
    $gep_int37 = $__p$i$i$i$i;
    $gep38 = (($gep_int37) + 8)|0;
    $15 = $gep38;
    HEAP32[$15>>2] = 0;
    __THREW__ = 0;
    $expanded10 = 8480;
    $gep_int39 = 8480;
    $expanded9 = $gep_int39;
    invoke_viii(17,$expanded9|0,$10|0,178);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    
    if ($17) {
     label = 15;
    } else {
     label = 4;
    }
   }
   L6: do {
    if ((label|0) == 4) {
     
     $expanded12 = 8480;
     $gep_int40 = 8480;
     $gep41 = (($gep_int40) + 4)|0;
     $expanded11 = $gep41;
     $18 = HEAP32[$expanded11>>2]|0;
     $19 = (($18) + -1)|0;
     $gep_int42 = $9;
     $gep43 = (($gep_int42) + 12)|0;
     $20 = $gep43;
     $21 = HEAP32[$20>>2]|0;
     $gep_int44 = $9;
     $gep45 = (($gep_int44) + 8)|0;
     $22 = $gep45;
     $23 = HEAP32[$22>>2]|0;
     $24 = $21;
     $25 = $23;
     $26 = (($24) - ($25))|0;
     $27 = $26 >> 2;
     $28 = ($27>>>0)>($19>>>0);
     
     do {
      if ($28) {
       $gep_int46 = $23;
       $gep_array = $19<<2;
       $gep47 = (($gep_int46) + ($gep_array))|0;
       $29 = $gep47;
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)==(0);
       
       if ($31) {
        break;
       }
       $36 = $30;
       HEAP8[$__neg] = 0;
       $gep_int48 = $__e;
       $37 = $gep_int48;
       $38 = HEAP32[$37>>2]|0;
       $gep_int49 = $1;
       $39 = $gep_int49;
       HEAP32[$39>>2] = $38;
       $gep_int50 = $__iob;
       $gep51 = (($gep_int50) + 4)|0;
       $40 = $gep51;
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = $$byval_copy;
       
       $43 = $$byval_copy;
       $44 = $1;
       ;HEAP32[$43+0>>2]=HEAP32[$44+0>>2]|0;
       $45 = invoke_iiiiiiiiiiii(1,$__b|0,$$byval_copy|0,$__intl|0,$__loc|0,$41|0,$__err|0,$__neg|0,$36|0,$__wb|0,$__wn|0,$5|0)|0;
       $46 = $$byval_copy;
       
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       
       if ($48) {
        label = 15;
        break L6;
       }
       
       L12: do {
        if ($45) {
         $gep_int52 = $__atoms;
         $49 = $gep_int52;
         $50 = $30;
         $51 = HEAP32[$30>>2]|0;
         $gep_int53 = $51;
         $gep54 = (($gep_int53) + 32)|0;
         $52 = $gep54;
         $53 = HEAP32[$52>>2]|0;
         __THREW__ = 0;
         $gep_int55 = 8096;
         $expanded15 = $gep_int55;
         $gep_int56 = 8096;
         $gep57 = (($gep_int56) + 10)|0;
         $expanded16 = $gep57;
         u$31 = invoke_iiiii($53|0,$36|0,$expanded15|0,$expanded16|0,$49|0)|0;
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         
         if ($55) {
          label = 15;
          break L6;
         }
         $gep_int58 = $__nbuf;
         $56 = $gep_int58;
         
         $57 = HEAP32[$__wn>>2]|0;
         $58 = HEAP32[$3>>2]|0;
         $59 = $57;
         $60 = $58;
         $61 = (($59) - ($60))|0;
         $62 = ($61|0)>(98);
         
         do {
          if ($62) {
           $63 = (($61) + 2)|0;
           $64 = _malloc($63)|0;
           $65 = ($64|0)==(0);
           
           if (!($65)) {
            $77 = $64;$__nc$0 = $64;
            label = 19;
            break;
           }
           __THREW__ = 0;
           invoke_v(13);
           $66 = __THREW__; __THREW__ = 0;
           $67 = $66&1;
           
           if ($67) {
            $72 = 0;
            label = 16;
           } else {
            $77 = 0;$__nc$0 = 0;
            label = 19;
           }
          } else {
           $77 = 0;$__nc$0 = $56;
           label = 19;
          }
         } while(0);
         do {
          if ((label|0) == 19) {
           
           
           $78 = HEAP8[$__neg]|0;
           $79 = ($78<<24>>24)==(0);
           
           if ($79) {
            $__nc$1 = $__nc$0;
           } else {
            $gep_int59 = $__nc$0;
            $gep60 = (($gep_int59) + 1)|0;
            $80 = $gep60;
            HEAP8[$__nc$0] = 45;
            
            $__nc$1 = $80;
           }
           
           $81 = ($58>>>0)<($57>>>0);
           
           if ($81) {
            $gep_int61 = $__atoms;
            $gep62 = (($gep_int61) + 10)|0;
            $82 = $gep62;
            $83 = $__atoms;
            
            $__nc$211 = $__nc$1;$__w$012 = $58;
            while(1) {
             
             
             $84 = HEAP8[$__w$012]|0;
             
             $$01$i = $49;
             while(1) {
              
              $86 = HEAP8[$$01$i]|0;
              $87 = ($86<<24>>24)==($84<<24>>24);
              $gep_int63 = $$01$i;
              $gep64 = (($gep_int63) + 1)|0;
              $88 = $gep64;
              
              if ($87) {
               $$0$lcssa$i = $$01$i;
               break;
              }
              $85 = ($88|0)==($82|0);
              
              if ($85) {
               $$0$lcssa$i = $82;
               break;
              } else {
               $$01$i$phi = $88;$$01$i = $$01$i$phi;
              }
             }
             
             $89 = $$0$lcssa$i;
             $90 = (($89) - ($83))|0;
             $gep_int65 = 8096;
             $gep66 = (($gep_int65) + ($90))|0;
             $91 = $gep66;
             $92 = HEAP8[$91]|0;
             HEAP8[$__nc$211] = $92;
             $gep_int67 = $__w$012;
             $gep68 = (($gep_int67) + 1)|0;
             $93 = $gep68;
             $gep_int69 = $__nc$211;
             $gep70 = (($gep_int69) + 1)|0;
             $94 = $gep70;
             $95 = HEAP32[$__wn>>2]|0;
             $96 = ($93>>>0)<($95>>>0);
             
             if ($96) {
              $__nc$211 = $94;$__w$012 = $93;
             } else {
              $__nc$2$lcssa = $94;
              break;
             }
            }
           } else {
            $__nc$2$lcssa = $__nc$1;
           }
           
           HEAP8[$__nc$2$lcssa] = 0;
           
           $gep_int71 = $vararg_buffer;
           $vararg_ptr = $gep_int71;
           HEAP32[$vararg_ptr>>2] = $__v;
           $expanded20 = 32;
           $vararg_func = $expanded20;
           $gep_int72 = 8112;
           $expanded21 = $gep_int72;
           $97 = _sscanf($56|0,$expanded21|0,$vararg_buffer|0)|0;
           
           $98 = ($97|0)==(1);
           
           if ($98) {
            $107 = ($77|0)==(0);
            
            if ($107) {
             break L12;
            }
            _free($77);
            
            break L12;
           }
           $99 = ___cxa_allocate_exception(8)|0;
           $100 = $99;
           __THREW__ = 0;
           $gep_int73 = 8120;
           $expanded22 = $gep_int73;
           invoke_vii(44,$100|0,$expanded22|0);
           $101 = __THREW__; __THREW__ = 0;
           $102 = $101&1;
           
           if ($102) {
            $expanded25 = 69;
            $105 = ___cxa_find_matching_catch(-1,-1)|0;
            $106 = tempRet0;
            ___cxa_free_exception($99|0);
            
            $75 = $77;$eh$lpad$body$index2Z2D = $106;$eh$lpad$body$indexZ2D = $105;
            break;
           }
           __THREW__ = 0;
           $expanded23 = 5392;
           $expanded24 = 35;
           invoke_viii(5,$99|0,$expanded23|0,$expanded24|0);
           $103 = __THREW__; __THREW__ = 0;
           $104 = $103&1;
           
           if ($104) {
            $72 = $77;
            label = 16;
            break;
           }
           // unreachable
          }
         } while(0);
         if ((label|0) == 16) {
          
          $expanded19 = 69;
          $73 = ___cxa_find_matching_catch(-1,-1)|0;
          $74 = tempRet0;
          
          $75 = $72;$eh$lpad$body$index2Z2D = $74;$eh$lpad$body$indexZ2D = $73;
         }
         
         
         
         $76 = ($75|0)==(0);
         
         if ($76) {
          $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
          break L6;
         }
         _free($75);
         
         $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
         break L6;
        }
       } while(0);
       $gep_int74 = $__b;
       $108 = $gep_int74;
       $109 = HEAP32[$108>>2]|0;
       $110 = ($109|0)==(0);
       
       do {
        if ($110) {
         $124 = 0;
        } else {
         $gep_int75 = $109;
         $gep76 = (($gep_int75) + 12)|0;
         $111 = $gep76;
         $112 = HEAP32[$111>>2]|0;
         $gep_int77 = $109;
         $gep78 = (($gep_int77) + 16)|0;
         $113 = $gep78;
         $114 = HEAP32[$113>>2]|0;
         $115 = ($112|0)==($114|0);
         
         if (!($115)) {
          $124 = $109;
          break;
         }
         $116 = $109;
         $117 = HEAP32[$109>>2]|0;
         $gep_int79 = $117;
         $gep80 = (($gep_int79) + 36)|0;
         $118 = $gep80;
         $119 = HEAP32[$118>>2]|0;
         __THREW__ = 0;
         $120 = invoke_ii($119|0,$109|0)|0;
         $121 = __THREW__; __THREW__ = 0;
         $122 = $121&1;
         
         if ($122) {
          label = 15;
          break L6;
         }
         $123 = ($120|0)==(-1);
         
         if (!($123)) {
          $124 = $109;
          break;
         }
         HEAP32[$108>>2] = 0;
         
         $124 = 0;
        }
       } while(0);
       
       $125 = ($124|0)==(0);
       $126 = HEAP32[$37>>2]|0;
       $127 = ($126|0)==(0);
       
       do {
        if ($127) {
         label = 45;
        } else {
         $gep_int81 = $126;
         $gep82 = (($gep_int81) + 12)|0;
         $128 = $gep82;
         $129 = HEAP32[$128>>2]|0;
         $gep_int83 = $126;
         $gep84 = (($gep_int83) + 16)|0;
         $130 = $gep84;
         $131 = HEAP32[$130>>2]|0;
         $132 = ($129|0)==($131|0);
         
         if (!($132)) {
          
          if ($125) {
           break;
          } else {
           label = 47;
           break;
          }
         }
         $133 = $126;
         $134 = HEAP32[$126>>2]|0;
         $gep_int85 = $134;
         $gep86 = (($gep_int85) + 36)|0;
         $135 = $gep86;
         $136 = HEAP32[$135>>2]|0;
         __THREW__ = 0;
         $137 = invoke_ii($136|0,$126|0)|0;
         $138 = __THREW__; __THREW__ = 0;
         $139 = $138&1;
         
         if ($139) {
          label = 15;
          break L6;
         }
         $140 = ($137|0)==(-1);
         
         if ($140) {
          HEAP32[$37>>2] = 0;
          
          label = 45;
          break;
         } else {
          
          if ($125) {
           break;
          } else {
           label = 47;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 45) {
        
        if ($125) {
         label = 47;
        }
       }
       if ((label|0) == 47) {
        $141 = HEAP32[$__err>>2]|0;
        $142 = $141 | 2;
        HEAP32[$__err>>2] = $142;
        
       }
       $gep_int87 = $agg$result;
       $143 = $gep_int87;
       HEAP32[$143>>2] = $124;
       $144 = HEAP32[$8>>2]|0;
       $gep_int88 = $144;
       $145 = $gep_int88;
       u$93 = __ZNSt3__114__shared_count16__release_sharedEv($145)|0;
       $146 = HEAP32[$3>>2]|0;
       HEAP32[$3>>2] = 0;
       $147 = ($146|0)==(0);
       
       if ($147) {
        
        STACKTOP = sp;return;
       }
       $148 = HEAP32[$4>>2]|0;
       __THREW__ = 0;
       invoke_vi($148|0,$146|0);
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       
       if ($150) {
        $expanded26 = 69;
        $151 = ___cxa_find_matching_catch(-1,-1,0)|0;
        u$99 = tempRet0;
        ___clang_call_terminate($151);
        // unreachable
       } else {
        
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $32 = ___cxa_allocate_exception(4)|0;
     $33 = $32;
     __ZNSt8bad_castC2Ev($33);
     __THREW__ = 0;
     $expanded13 = 16440;
     $expanded14 = 119;
     invoke_viii(5,$32|0,$expanded13|0,$expanded14|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     
     if ($35) {
      label = 15;
      break;
     }
     // unreachable
    }
   } while(0);
   if ((label|0) == 15) {
    $expanded18 = 69;
    $70 = ___cxa_find_matching_catch(-1,-1)|0;
    $71 = tempRet0;
    
    $$0 = $70;$$01 = $71;
   }
   
   
   $152 = HEAP32[$8>>2]|0;
   $gep_int89 = $152;
   $153 = $gep_int89;
   u$104 = __ZNSt3__114__shared_count16__release_sharedEv($153)|0;
   $$pre = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $154 = ($$pre|0)==(0);
   
   if ($154) {
    $$118 = $$0;$$1216 = $$01;
    
    
    ___resumeException($$118|0);
    // unreachable
   } else {
    $$pre20 = HEAP32[$4>>2]|0;
    
    $$117 = $$0;$$1215 = $$01;$155 = $$pre20;$156 = $$pre;
    break;
   }
  }
 } while(0);
 
 
 
 
 __THREW__ = 0;
 invoke_vi($155|0,$156|0);
 $157 = __THREW__; __THREW__ = 0;
 $158 = $157&1;
 
 if ($158) {
  $expanded27 = 69;
  $159 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$111 = tempRet0;
  ___clang_call_terminate($159);
  // unreachable
 } else {
  $$118 = $$117;$$1216 = $$1215;
  
  
  ___resumeException($$118|0);
  // unreachable
 }
}
function __ZNSt3__112__do_nothingEPv(u$0) {
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i129 = 0, $$$i139 = 0, $$$i151 = 0, $$0 = 0, $$0$i$off0$i = 0, $$0$i$off0$i102 = 0, $$0$i$off0$i106 = 0, $$0$i$off0$i125 = 0, $$0$i$off0$i163 = 0, $$0$i$off0$i184 = 0, $$0$i$off0$i30 = 0, $$0$i$off0$i34 = 0, $$0$i$off0$i48 = 0, $$0$i$off0$i54 = 0, $$0$i$off0$i58 = 0, $$0$i$off0$i70 = 0, $$0$i$off0$i74 = 0, $$0$i$off0$i92 = 0;
 var $$463 = 0, $$464 = 0, $$465 = 0, $$466 = 0, $$468 = 0, $$lcssa302 = 0, $$lcssa318 = 0, $$lcssa536 = 0, $$ph$ph = 0, $$ph$ph244$ph$ph$ph$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert577 = 0, $$pr$i = 0, $$pr$i153 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i111 = 0, $$pre$i$i$i168 = 0, $$pre$i$i$i188 = 0;
 var $$pre$i$i$i19 = 0, $$pre$i$i$i37 = 0, $$pre$i$i$i78 = 0, $$pre$i154 = 0, $$pre$i2$i$i192 = 0, $$pre$i2$i$i192439 = 0, $$pre$i2$i$i192440 = 0, $$pre$i2$i$i41 = 0, $$pre$i2$i$i41433 = 0, $$pre$i2$i$i41435 = 0, $$pre$i2$i$i82 = 0, $$pre$i2$i$i82444$ph = 0, $$pre$i2$i$i82444459 = 0, $$pre436 = 0, $$pre437 = 0, $$pre438 = 0, $$pre442 = 0, $$pre575 = 0, $$pre576 = 0, $$pre578 = 0;
 var $$sum = 0, $$sum455 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0362 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0;
 var $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0364 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $expanded = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $extract$t$i = 0, $extract$t$i101 = 0;
 var $extract$t$i105 = 0, $extract$t$i124 = 0, $extract$t$i162 = 0, $extract$t$i183 = 0, $extract$t$i29 = 0, $extract$t$i33 = 0, $extract$t$i47 = 0, $extract$t$i53 = 0, $extract$t$i57 = 0, $extract$t$i69 = 0, $extract$t$i73 = 0, $extract$t$i91 = 0, $free = 0, $free212 = 0, $free213 = 0, $free214$lcssa = 0, $free214358 = 0, $free215 = 0, $free216 = 0, $free217 = 0;
 var $free218 = 0, $free218$ph$ph = 0, $free218$ph$ph243$ph$ph$ph$ph = 0, $free220 = 0, $gep = 0, $gep101 = 0, $gep103 = 0, $gep105 = 0, $gep107 = 0, $gep109 = 0, $gep112 = 0, $gep114 = 0, $gep116 = 0, $gep118 = 0, $gep120 = 0, $gep122 = 0, $gep124 = 0, $gep126 = 0, $gep128 = 0, $gep130 = 0;
 var $gep132 = 0, $gep134 = 0, $gep136 = 0, $gep138 = 0, $gep140 = 0, $gep142 = 0, $gep144 = 0, $gep146 = 0, $gep148 = 0, $gep150 = 0, $gep152 = 0, $gep154 = 0, $gep156 = 0, $gep158 = 0, $gep160 = 0, $gep162 = 0, $gep164 = 0, $gep166 = 0, $gep168 = 0, $gep170 = 0;
 var $gep172 = 0, $gep174 = 0, $gep177 = 0, $gep179 = 0, $gep181 = 0, $gep183 = 0, $gep184 = 0, $gep186 = 0, $gep188 = 0, $gep190 = 0, $gep192 = 0, $gep194 = 0, $gep196 = 0, $gep198 = 0, $gep200 = 0, $gep202 = 0, $gep204 = 0, $gep206 = 0, $gep208 = 0, $gep210 = 0;
 var $gep212 = 0, $gep214 = 0, $gep216 = 0, $gep218 = 0, $gep220 = 0, $gep222 = 0, $gep224 = 0, $gep226 = 0, $gep228 = 0, $gep230 = 0, $gep232 = 0, $gep234 = 0, $gep236 = 0, $gep238 = 0, $gep240 = 0, $gep243 = 0, $gep245 = 0, $gep247 = 0, $gep249 = 0, $gep252 = 0;
 var $gep255 = 0, $gep257 = 0, $gep259 = 0, $gep261 = 0, $gep263 = 0, $gep265 = 0, $gep268 = 0, $gep271 = 0, $gep273 = 0, $gep275 = 0, $gep277 = 0, $gep279 = 0, $gep281 = 0, $gep283 = 0, $gep285 = 0, $gep287 = 0, $gep289 = 0, $gep291 = 0, $gep293 = 0, $gep295 = 0;
 var $gep297 = 0, $gep299 = 0, $gep301 = 0, $gep303 = 0, $gep305 = 0, $gep307 = 0, $gep309 = 0, $gep31 = 0, $gep311 = 0, $gep313 = 0, $gep315 = 0, $gep317 = 0, $gep320 = 0, $gep322 = 0, $gep324 = 0, $gep326 = 0, $gep328 = 0, $gep33 = 0, $gep330 = 0, $gep332 = 0;
 var $gep334 = 0, $gep336 = 0, $gep338 = 0, $gep340 = 0, $gep342 = 0, $gep344 = 0, $gep346 = 0, $gep348 = 0, $gep35 = 0, $gep350 = 0, $gep352 = 0, $gep354 = 0, $gep356 = 0, $gep358 = 0, $gep360 = 0, $gep362 = 0, $gep364 = 0, $gep366 = 0, $gep368 = 0, $gep37 = 0;
 var $gep370 = 0, $gep372 = 0, $gep374 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0;
 var $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep97 = 0, $gep99 = 0, $gep_array = 0, $gep_array111 = 0, $gep_array176 = 0, $gep_array242 = 0, $gep_array251 = 0, $gep_array254 = 0;
 var $gep_array267 = 0, $gep_array270 = 0, $gep_array319 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0, $gep_int119 = 0, $gep_int121 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int127 = 0, $gep_int129 = 0, $gep_int131 = 0;
 var $gep_int133 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int139 = 0, $gep_int141 = 0, $gep_int143 = 0, $gep_int145 = 0, $gep_int147 = 0, $gep_int149 = 0, $gep_int151 = 0, $gep_int153 = 0, $gep_int155 = 0, $gep_int157 = 0, $gep_int159 = 0, $gep_int161 = 0, $gep_int163 = 0, $gep_int165 = 0, $gep_int167 = 0, $gep_int169 = 0, $gep_int171 = 0;
 var $gep_int173 = 0, $gep_int175 = 0, $gep_int178 = 0, $gep_int180 = 0, $gep_int182 = 0, $gep_int185 = 0, $gep_int187 = 0, $gep_int189 = 0, $gep_int191 = 0, $gep_int193 = 0, $gep_int195 = 0, $gep_int197 = 0, $gep_int199 = 0, $gep_int201 = 0, $gep_int203 = 0, $gep_int205 = 0, $gep_int207 = 0, $gep_int209 = 0, $gep_int211 = 0, $gep_int213 = 0;
 var $gep_int215 = 0, $gep_int217 = 0, $gep_int219 = 0, $gep_int221 = 0, $gep_int223 = 0, $gep_int225 = 0, $gep_int227 = 0, $gep_int229 = 0, $gep_int231 = 0, $gep_int233 = 0, $gep_int235 = 0, $gep_int237 = 0, $gep_int239 = 0, $gep_int241 = 0, $gep_int244 = 0, $gep_int246 = 0, $gep_int248 = 0, $gep_int250 = 0, $gep_int253 = 0, $gep_int256 = 0;
 var $gep_int258 = 0, $gep_int26 = 0, $gep_int260 = 0, $gep_int262 = 0, $gep_int264 = 0, $gep_int266 = 0, $gep_int269 = 0, $gep_int27 = 0, $gep_int272 = 0, $gep_int274 = 0, $gep_int276 = 0, $gep_int278 = 0, $gep_int28 = 0, $gep_int280 = 0, $gep_int282 = 0, $gep_int284 = 0, $gep_int286 = 0, $gep_int288 = 0, $gep_int29 = 0, $gep_int290 = 0;
 var $gep_int292 = 0, $gep_int294 = 0, $gep_int296 = 0, $gep_int298 = 0, $gep_int30 = 0, $gep_int300 = 0, $gep_int302 = 0, $gep_int304 = 0, $gep_int306 = 0, $gep_int308 = 0, $gep_int310 = 0, $gep_int312 = 0, $gep_int314 = 0, $gep_int316 = 0, $gep_int318 = 0, $gep_int32 = 0, $gep_int321 = 0, $gep_int323 = 0, $gep_int325 = 0, $gep_int327 = 0;
 var $gep_int329 = 0, $gep_int331 = 0, $gep_int333 = 0, $gep_int335 = 0, $gep_int337 = 0, $gep_int339 = 0, $gep_int34 = 0, $gep_int341 = 0, $gep_int343 = 0, $gep_int345 = 0, $gep_int347 = 0, $gep_int349 = 0, $gep_int351 = 0, $gep_int353 = 0, $gep_int355 = 0, $gep_int357 = 0, $gep_int359 = 0, $gep_int36 = 0, $gep_int361 = 0, $gep_int363 = 0;
 var $gep_int365 = 0, $gep_int367 = 0, $gep_int369 = 0, $gep_int371 = 0, $gep_int373 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0;
 var $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int98 = 0, $isascii1$i = 0, $isascii1$i147 = 0, $isascii1$i160 = 0, $isascii1$i51 = 0;
 var $isascii1$i67 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond7 = 0, $or$cond8 = 0, $phitmp$i = 0, $phitmp$i140 = 0, $switch = 0, $this2$i$i$i = 0, $this2$i$i$i10 = 0, $this2$i$i$i12 = 0, $this2$i$i$i15 = 0, $this2$i$i$i9 = 0, $tmp$i$i194 = 0, $tmp$i$i43 = 0, $tmp$i$i84 = 0, $tmpcast = 0, label = 0, sp = 0;
 var u$133 = 0, u$151 = 0, u$168 = 0, u$184 = 0, u$245 = 0, u$296 = 0, u$322 = 0, u$366 = 0, u$411 = 0, u$427 = 0, u$47 = 0, u$472 = 0, u$491 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 408|0;
 $__gbuf = sp;
 $__pat = sp + 400|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__psn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__nsn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__spaces = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__et = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = $__gbuf;
 
 $gep_int = $__gbuf;
 $2 = $gep_int;
 HEAP32[$__pat>>2] = 0;
 $this2$i$i$i = $__grp;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 $this2$i$i$i9 = $__sym;
 ;HEAP32[$this2$i$i$i9+0>>2]=0|0;HEAP32[$this2$i$i$i9+4>>2]=0|0;HEAP32[$this2$i$i$i9+8>>2]=0|0;
 $this2$i$i$i10 = $__psn;
 ;HEAP32[$this2$i$i$i10+0>>2]=0|0;HEAP32[$this2$i$i$i10+4>>2]=0|0;HEAP32[$this2$i$i$i10+8>>2]=0|0;
 $this2$i$i$i12 = $__nsn;
 ;HEAP32[$this2$i$i$i12+0>>2]=0|0;HEAP32[$this2$i$i$i12+4>>2]=0|0;HEAP32[$this2$i$i$i12+8>>2]=0|0;
 $this2$i$i$i15 = $__spaces;
 ;HEAP32[$this2$i$i$i15+0>>2]=0|0;HEAP32[$this2$i$i$i15+4>>2]=0|0;HEAP32[$this2$i$i$i15+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(1,$__intl|0,$__loc|0,$tmpcast|0,$__dp|0,$__ts|0,$__grp|0,$__sym|0,$__psn|0,$__nsn|0,$__fd|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 
 L1: do {
  if ($4) {
   $expanded21 = 69;
   $85 = ___cxa_find_matching_catch(-1,-1)|0;
   $86 = tempRet0;
   
   $87 = $2;$free218 = 181;$lpad$phi$index = $85;$lpad$phi$index7 = $86;
  } else {
   $gep_int26 = $__gbuf;
   $gep = (($gep_int26) + 400)|0;
   $5 = $gep;
   $gep_int27 = $__wb;
   $6 = $gep_int27;
   $7 = HEAP32[$6>>2]|0;
   HEAP32[$__wn>>2] = $7;
   $gep_int28 = $__b;
   $8 = $gep_int28;
   $gep_int29 = $__e;
   $9 = $gep_int29;
   $10 = $__pat;
   $gep_int30 = $__ct;
   $gep31 = (($gep_int30) + 8)|0;
   $11 = $gep31;
   $12 = $__nsn;
   $gep_int32 = $__nsn;
   $gep33 = (($gep_int32) + 1)|0;
   $13 = $gep33;
   $gep_int34 = $__nsn;
   $gep35 = (($gep_int34) + 4)|0;
   $14 = $gep35;
   $gep_int36 = $__nsn;
   $gep37 = (($gep_int36) + 8)|0;
   $15 = $gep37;
   $16 = $__psn;
   $gep_int38 = $__psn;
   $gep39 = (($gep_int38) + 1)|0;
   $17 = $gep39;
   $gep_int40 = $__psn;
   $gep41 = (($gep_int40) + 4)|0;
   $18 = $gep41;
   $gep_int42 = $__psn;
   $gep43 = (($gep_int42) + 8)|0;
   $19 = $gep43;
   $20 = $__flags & 512;
   $21 = ($20|0)!=(0);
   $22 = $__sym;
   $gep_int44 = $__sym;
   $gep45 = (($gep_int44) + 1)|0;
   $23 = $gep45;
   $gep_int46 = $__sym;
   $gep47 = (($gep_int46) + 8)|0;
   $24 = $gep47;
   $gep_int48 = $__sym;
   $gep49 = (($gep_int48) + 4)|0;
   $25 = $gep49;
   $26 = $__spaces;
   $gep_int50 = $__spaces;
   $gep51 = (($gep_int50) + 1)|0;
   $27 = $gep51;
   $gep_int52 = $__spaces;
   $gep53 = (($gep_int52) + 8)|0;
   $28 = $gep53;
   $gep_int54 = $__spaces;
   $gep55 = (($gep_int54) + 4)|0;
   $29 = $gep55;
   $gep_int56 = $__pat;
   $gep57 = (($gep_int56) + 3)|0;
   $30 = $gep57;
   $gep_int58 = $__wb;
   $gep59 = (($gep_int58) + 4)|0;
   $31 = $gep59;
   $gep_int60 = $__grp;
   $gep61 = (($gep_int60) + 4)|0;
   $32 = $gep61;
   
   $33 = $5;$34 = $2;$35 = $2;$36 = $__we;$__p$0362 = 0;$__trailing_sign$0364 = 0;$free214358 = 181;
   L3: while(1) {
    
    
    
    
    
    
    
    $37 = HEAP32[$8>>2]|0;
    $38 = ($37|0)==(0);
    
    do {
     if ($38) {
      $52 = 0;
     } else {
      $gep_int62 = $37;
      $gep63 = (($gep_int62) + 12)|0;
      $39 = $gep63;
      $40 = HEAP32[$39>>2]|0;
      $gep_int64 = $37;
      $gep65 = (($gep_int64) + 16)|0;
      $41 = $gep65;
      $42 = HEAP32[$41>>2]|0;
      $43 = ($40|0)==($42|0);
      
      if (!($43)) {
       $52 = $37;
       break;
      }
      $44 = $37;
      $45 = HEAP32[$37>>2]|0;
      $gep_int66 = $45;
      $gep67 = (($gep_int66) + 36)|0;
      $46 = $gep67;
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = invoke_ii($47|0,$37|0)|0;
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      
      if ($50) {
       $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
       label = 23;
       break L3;
      }
      $51 = ($48|0)==(-1);
      
      if ($51) {
       HEAP32[$8>>2] = 0;
       
       $52 = 0;
       break;
      } else {
       $$pre$i$i$i19 = HEAP32[$8>>2]|0;
       
       $52 = $$pre$i$i$i19;
       break;
      }
     }
    } while(0);
    
    $53 = ($52|0)==(0);
    $54 = HEAP32[$9>>2]|0;
    $55 = ($54|0)==(0);
    
    do {
     if ($55) {
      label = 15;
     } else {
      $gep_int68 = $54;
      $gep69 = (($gep_int68) + 12)|0;
      $56 = $gep69;
      $57 = HEAP32[$56>>2]|0;
      $gep_int70 = $54;
      $gep71 = (($gep_int70) + 16)|0;
      $58 = $gep71;
      $59 = HEAP32[$58>>2]|0;
      $60 = ($57|0)==($59|0);
      
      if (!($60)) {
       
       if ($53) {
        $69 = $54;
        break;
       } else {
        $$lcssa302 = $35;$$lcssa318 = $34;$__trailing_sign$0$lcssa = $__trailing_sign$0364;$free214$lcssa = $free214358;
        label = 310;
        break L3;
       }
      }
      $61 = $54;
      $62 = HEAP32[$54>>2]|0;
      $gep_int72 = $62;
      $gep73 = (($gep_int72) + 36)|0;
      $63 = $gep73;
      $64 = HEAP32[$63>>2]|0;
      __THREW__ = 0;
      $65 = invoke_ii($64|0,$54|0)|0;
      $66 = __THREW__; __THREW__ = 0;
      $67 = $66&1;
      
      if ($67) {
       $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
       label = 23;
       break L3;
      }
      $68 = ($65|0)==(-1);
      
      if ($68) {
       HEAP32[$9>>2] = 0;
       
       label = 15;
       break;
      } else {
       
       if ($53) {
        $69 = $54;
        break;
       } else {
        $$lcssa302 = $35;$$lcssa318 = $34;$__trailing_sign$0$lcssa = $__trailing_sign$0364;$free214$lcssa = $free214358;
        label = 310;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     
     if ($53) {
      $$lcssa302 = $35;$$lcssa318 = $34;$__trailing_sign$0$lcssa = $__trailing_sign$0364;$free214$lcssa = $free214358;
      label = 310;
      break;
     } else {
      $69 = 0;
     }
    }
    
    $gep_int74 = $__pat;
    $gep75 = (($gep_int74) + ($__p$0362))|0;
    $70 = $gep75;
    $71 = HEAP8[$70]|0;
    $72 = $71 << 24 >> 24;
    
    L25: do {
     switch ($72|0) {
     case 4:  {
      $535 = $36;$536 = $35;$537 = $34;$538 = $33;$__ng$0 = 0;$free213 = $free214358;
      L26: while(1) {
       
       
       
       
       
       
       $539 = HEAP32[$8>>2]|0;
       $540 = ($539|0)==(0);
       
       do {
        if ($540) {
         $554 = 0;
        } else {
         $gep_int223 = $539;
         $gep224 = (($gep_int223) + 12)|0;
         $541 = $gep224;
         $542 = HEAP32[$541>>2]|0;
         $gep_int225 = $539;
         $gep226 = (($gep_int225) + 16)|0;
         $543 = $gep226;
         $544 = HEAP32[$543>>2]|0;
         $545 = ($542|0)==($544|0);
         
         if (!($545)) {
          $554 = $539;
          break;
         }
         $546 = $539;
         $547 = HEAP32[$539>>2]|0;
         $gep_int227 = $547;
         $gep228 = (($gep_int227) + 36)|0;
         $548 = $gep228;
         $549 = HEAP32[$548>>2]|0;
         __THREW__ = 0;
         $550 = invoke_ii($549|0,$539|0)|0;
         $551 = __THREW__; __THREW__ = 0;
         $552 = $551&1;
         
         if ($552) {
          $$ph$ph = $536;$free218$ph$ph = $free213;
          label = 19;
          break L3;
         }
         $553 = ($550|0)==(-1);
         
         if ($553) {
          HEAP32[$8>>2] = 0;
          
          $554 = 0;
          break;
         } else {
          $$pre$i$i$i168 = HEAP32[$8>>2]|0;
          
          $554 = $$pre$i$i$i168;
          break;
         }
        }
       } while(0);
       
       $555 = ($554|0)==(0);
       $556 = HEAP32[$9>>2]|0;
       $557 = ($556|0)==(0);
       
       do {
        if ($557) {
         label = 202;
        } else {
         $gep_int229 = $556;
         $gep230 = (($gep_int229) + 12)|0;
         $558 = $gep230;
         $559 = HEAP32[$558>>2]|0;
         $gep_int231 = $556;
         $gep232 = (($gep_int231) + 16)|0;
         $560 = $gep232;
         $561 = HEAP32[$560>>2]|0;
         $562 = ($559|0)==($561|0);
         
         if (!($562)) {
          
          if ($555) {
           break;
          } else {
           break L26;
          }
         }
         $563 = $556;
         $564 = HEAP32[$556>>2]|0;
         $gep_int233 = $564;
         $gep234 = (($gep_int233) + 36)|0;
         $565 = $gep234;
         $566 = HEAP32[$565>>2]|0;
         __THREW__ = 0;
         $567 = invoke_ii($566|0,$556|0)|0;
         $568 = __THREW__; __THREW__ = 0;
         $569 = $568&1;
         
         if ($569) {
          $$ph$ph = $536;$free218$ph$ph = $free213;
          label = 19;
          break L3;
         }
         $570 = ($567|0)==(-1);
         
         if ($570) {
          HEAP32[$9>>2] = 0;
          
          label = 202;
          break;
         } else {
          
          if ($555) {
           break;
          } else {
           break L26;
          }
         }
        }
       } while(0);
       if ((label|0) == 202) {
        label = 0;
        
        if ($555) {
         break;
        }
       }
       $571 = HEAP32[$8>>2]|0;
       $gep_int235 = $571;
       $gep236 = (($gep_int235) + 12)|0;
       $572 = $gep236;
       $573 = HEAP32[$572>>2]|0;
       $gep_int237 = $571;
       $gep238 = (($gep_int237) + 16)|0;
       $574 = $gep238;
       $575 = HEAP32[$574>>2]|0;
       $576 = ($573|0)==($575|0);
       
       if ($576) {
        $577 = $571;
        $578 = HEAP32[$571>>2]|0;
        $gep_int239 = $578;
        $gep240 = (($gep_int239) + 36)|0;
        $579 = $gep240;
        $580 = HEAP32[$579>>2]|0;
        __THREW__ = 0;
        $581 = invoke_ii($580|0,$571|0)|0;
        $582 = __THREW__; __THREW__ = 0;
        $583 = $582&1;
        
        if ($583) {
         $$ph$ph = $536;$free218$ph$ph = $free213;
         label = 19;
         break L3;
        }
        $extract$t$i162 = $581&255;
        
        $$0$i$off0$i163 = $extract$t$i162;
       } else {
        $584 = HEAP8[$573]|0;
        
        $$0$i$off0$i163 = $584;
       }
       
       $isascii1$i160 = ($$0$i$off0$i163<<24>>24)>(-1);
       
       do {
        if ($isascii1$i160) {
         $585 = $$0$i$off0$i163 << 24 >> 24;
         $586 = HEAP32[$11>>2]|0;
         $gep_int241 = $586;
         $gep_array242 = $585<<1;
         $gep243 = (($gep_int241) + ($gep_array242))|0;
         $587 = $gep243;
         $588 = HEAP16[$587>>1]|0;
         $589 = $588 & 2048;
         $590 = ($589<<16>>16)==(0);
         
         if ($590) {
          label = 221;
          break;
         }
         $591 = HEAP32[$__wn>>2]|0;
         $592 = ($591|0)==($535|0);
         
         if ($592) {
          $593 = HEAP32[$31>>2]|0;
          $594 = ($593|0)!=(181);
          $595 = HEAP32[$6>>2]|0;
          $596 = $535;
          $597 = $595;
          $598 = (($596) - ($597))|0;
          $599 = ($598>>>0)<(2147483647);
          $600 = $598 << 1;
          $$$i151 = $599 ? $600 : -1;
          $601 = $594 ? $595 : 0;
          $602 = _realloc($601,$$$i151)|0;
          $603 = ($602|0)==(0);
          
          if ($603) {
           __THREW__ = 0;
           invoke_v(13);
           $604 = __THREW__; __THREW__ = 0;
           $605 = $604&1;
           
           if ($605) {
            $$ph$ph = $536;$free218$ph$ph = $free213;
            label = 19;
            break L3;
           }
          }
          
          do {
           if ($594) {
            HEAP32[$6>>2] = $602;
            
            $611 = $602;
           } else {
            $$pr$i153 = HEAP32[$6>>2]|0;
            HEAP32[$6>>2] = $602;
            $606 = ($$pr$i153|0)==(0);
            
            if ($606) {
             $611 = $602;
             break;
            }
            $607 = HEAP32[$31>>2]|0;
            __THREW__ = 0;
            invoke_vi($607|0,$$pr$i153|0);
            $608 = __THREW__; __THREW__ = 0;
            $609 = $608&1;
            
            if ($609) {
             label = 218;
             break L3;
            }
            $$pre$i154 = HEAP32[$6>>2]|0;
            
            $611 = $$pre$i154;
           }
          } while(0);
          
          HEAP32[$31>>2] = 179;
          $gep_int244 = $611;
          $gep245 = (($gep_int244) + ($598))|0;
          $612 = $gep245;
          HEAP32[$__wn>>2] = $612;
          $613 = HEAP32[$6>>2]|0;
          $gep_int246 = $613;
          $gep247 = (($gep_int246) + ($$$i151))|0;
          $614 = $gep247;
          
          $615 = $612;$616 = $614;
         } else {
          $615 = $591;$616 = $535;
         }
         
         
         $gep_int248 = $615;
         $gep249 = (($gep_int248) + 1)|0;
         $617 = $gep249;
         HEAP32[$__wn>>2] = $617;
         HEAP8[$615] = $$0$i$off0$i163;
         $618 = (($__ng$0) + 1)|0;
         
         $651 = $616;$652 = $536;$653 = $537;$654 = $538;$__ng$1 = $618;$free = $free213;
        } else {
         label = 221;
        }
       } while(0);
       if ((label|0) == 221) {
        label = 0;
        $619 = HEAP8[$__grp]|0;
        $620 = $619 & 1;
        $621 = ($620<<24>>24)==(0);
        
        if ($621) {
         $623 = $619&255;
         $624 = $623 >>> 1;
         
         $625 = $624;
        } else {
         $622 = HEAP32[$32>>2]|0;
         
         $625 = $622;
        }
        
        $626 = ($625|0)==(0);
        $627 = ($__ng$0|0)==(0);
        $or$cond7 = $626 | $627;
        
        if ($or$cond7) {
         break;
        }
        $628 = HEAP8[$__ts]|0;
        $629 = ($$0$i$off0$i163<<24>>24)==($628<<24>>24);
        
        if (!($629)) {
         break;
        }
        $630 = ($537|0)==($538|0);
        
        if ($630) {
         $631 = ($free213|0)==(181);
         $632 = $537;
         $633 = $536;
         $634 = (($632) - ($633))|0;
         $635 = ($634>>>0)<(2147483647);
         $636 = $634 << 1;
         $$$i139 = $635 ? $636 : -1;
         $637 = $634 >> 2;
         
         if ($631) {
          $638 = 0;
         } else {
          $phitmp$i140 = $536;
          
          $638 = $phitmp$i140;
         }
         
         $639 = _realloc($638,$$$i139)|0;
         $640 = $639;
         $641 = ($639|0)==(0);
         
         if ($641) {
          __THREW__ = 0;
          invoke_v(13);
          $642 = __THREW__; __THREW__ = 0;
          $643 = $642&1;
          
          if ($643) {
           $$ph$ph = $536;$free218$ph$ph = $free213;
           label = 19;
           break L3;
          }
         }
         $644 = $$$i139 >>> 2;
         $gep_int250 = $639;
         $gep_array251 = $637<<2;
         $gep252 = (($gep_int250) + ($gep_array251))|0;
         $645 = $gep252;
         $gep_int253 = $639;
         $gep_array254 = $644<<2;
         $gep255 = (($gep_int253) + ($gep_array254))|0;
         $646 = $gep255;
         
         $647 = $640;$648 = $645;$649 = $646;$free212 = 179;
        } else {
         $647 = $536;$648 = $537;$649 = $538;$free212 = $free213;
        }
        
        
        
        
        $gep_int256 = $648;
        $gep257 = (($gep_int256) + 4)|0;
        $650 = $gep257;
        HEAP32[$648>>2] = $__ng$0;
        
        $651 = $535;$652 = $647;$653 = $650;$654 = $649;$__ng$1 = 0;$free = $free212;
       }
       
       
       
       
       
       
       $655 = HEAP32[$8>>2]|0;
       $gep_int258 = $655;
       $gep259 = (($gep_int258) + 12)|0;
       $656 = $gep259;
       $657 = HEAP32[$656>>2]|0;
       $gep_int260 = $655;
       $gep261 = (($gep_int260) + 16)|0;
       $658 = $gep261;
       $659 = HEAP32[$658>>2]|0;
       $660 = ($657|0)==($659|0);
       
       if ($660) {
        $661 = $655;
        $662 = HEAP32[$655>>2]|0;
        $gep_int262 = $662;
        $gep263 = (($gep_int262) + 40)|0;
        $663 = $gep263;
        $664 = HEAP32[$663>>2]|0;
        __THREW__ = 0;
        u$322 = invoke_ii($664|0,$655|0)|0;
        $665 = __THREW__; __THREW__ = 0;
        $666 = $665&1;
        
        if ($666) {
         $$ph$ph = $652;$free218$ph$ph = $free;
         label = 19;
         break L3;
        } else {
         $535 = $651;$536 = $652;$537 = $653;$538 = $654;$__ng$0 = $__ng$1;$free213 = $free;
         continue;
        }
       } else {
        $gep_int264 = $657;
        $gep265 = (($gep_int264) + 1)|0;
        $667 = $gep265;
        HEAP32[$656>>2] = $667;
        
        $535 = $651;$536 = $652;$537 = $653;$538 = $654;$__ng$0 = $__ng$1;$free213 = $free;
        continue;
       }
      }
      $668 = ($536|0)==($537|0);
      $669 = ($__ng$0|0)==(0);
      $or$cond8 = $668 | $669;
      
      if ($or$cond8) {
       $691 = $536;$692 = $537;$693 = $538;$free216 = $free213;
      } else {
       $670 = ($537|0)==($538|0);
       
       if ($670) {
        $671 = ($free213|0)==(181);
        $672 = $537;
        $673 = $536;
        $674 = (($672) - ($673))|0;
        $675 = ($674>>>0)<(2147483647);
        $676 = $674 << 1;
        $$$i129 = $675 ? $676 : -1;
        $677 = $674 >> 2;
        
        if ($671) {
         $678 = 0;
        } else {
         $phitmp$i = $536;
         
         $678 = $phitmp$i;
        }
        
        $679 = _realloc($678,$$$i129)|0;
        $680 = $679;
        $681 = ($679|0)==(0);
        
        if ($681) {
         __THREW__ = 0;
         invoke_v(13);
         $682 = __THREW__; __THREW__ = 0;
         $683 = $682&1;
         
         if ($683) {
          $$ph$ph244$ph$ph$ph$ph = $536;$free218$ph$ph243$ph$ph$ph$ph = $free213;
          label = 23;
          break L3;
         }
        }
        $684 = $$$i129 >>> 2;
        $gep_int266 = $679;
        $gep_array267 = $677<<2;
        $gep268 = (($gep_int266) + ($gep_array267))|0;
        $685 = $gep268;
        $gep_int269 = $679;
        $gep_array270 = $684<<2;
        $gep271 = (($gep_int269) + ($gep_array270))|0;
        $686 = $gep271;
        
        $687 = $680;$688 = $685;$689 = $686;$free217 = 179;
       } else {
        $687 = $536;$688 = $537;$689 = $538;$free217 = $free213;
       }
       
       
       
       
       $gep_int272 = $688;
       $gep273 = (($gep_int272) + 4)|0;
       $690 = $gep273;
       HEAP32[$688>>2] = $__ng$0;
       
       $691 = $687;$692 = $690;$693 = $689;$free216 = $free217;
      }
      
      
      
      
      $694 = HEAP32[$__fd>>2]|0;
      $695 = ($694|0)>(0);
      
      if ($695) {
       $696 = HEAP32[$8>>2]|0;
       $697 = ($696|0)==(0);
       
       do {
        if ($697) {
         $711 = 0;
        } else {
         $gep_int274 = $696;
         $gep275 = (($gep_int274) + 12)|0;
         $698 = $gep275;
         $699 = HEAP32[$698>>2]|0;
         $gep_int276 = $696;
         $gep277 = (($gep_int276) + 16)|0;
         $700 = $gep277;
         $701 = HEAP32[$700>>2]|0;
         $702 = ($699|0)==($701|0);
         
         if (!($702)) {
          $711 = $696;
          break;
         }
         $703 = $696;
         $704 = HEAP32[$696>>2]|0;
         $gep_int278 = $704;
         $gep279 = (($gep_int278) + 36)|0;
         $705 = $gep279;
         $706 = HEAP32[$705>>2]|0;
         __THREW__ = 0;
         $707 = invoke_ii($706|0,$696|0)|0;
         $708 = __THREW__; __THREW__ = 0;
         $709 = $708&1;
         
         if ($709) {
          $$ph$ph244$ph$ph$ph$ph = $691;$free218$ph$ph243$ph$ph$ph$ph = $free216;
          label = 23;
          break L3;
         }
         $710 = ($707|0)==(-1);
         
         if ($710) {
          HEAP32[$8>>2] = 0;
          
          $711 = 0;
          break;
         } else {
          $$pre$i$i$i111 = HEAP32[$8>>2]|0;
          
          $711 = $$pre$i$i$i111;
          break;
         }
        }
       } while(0);
       
       $712 = ($711|0)==(0);
       $713 = HEAP32[$9>>2]|0;
       $714 = ($713|0)==(0);
       
       do {
        if ($714) {
         label = 257;
        } else {
         $gep_int280 = $713;
         $gep281 = (($gep_int280) + 12)|0;
         $715 = $gep281;
         $716 = HEAP32[$715>>2]|0;
         $gep_int282 = $713;
         $gep283 = (($gep_int282) + 16)|0;
         $717 = $gep283;
         $718 = HEAP32[$717>>2]|0;
         $719 = ($716|0)==($718|0);
         
         if (!($719)) {
          
          if ($712) {
           $728 = $713;
           break;
          } else {
           label = 264;
           break L3;
          }
         }
         $720 = $713;
         $721 = HEAP32[$713>>2]|0;
         $gep_int284 = $721;
         $gep285 = (($gep_int284) + 36)|0;
         $722 = $gep285;
         $723 = HEAP32[$722>>2]|0;
         __THREW__ = 0;
         $724 = invoke_ii($723|0,$713|0)|0;
         $725 = __THREW__; __THREW__ = 0;
         $726 = $725&1;
         
         if ($726) {
          $$ph$ph244$ph$ph$ph$ph = $691;$free218$ph$ph243$ph$ph$ph$ph = $free216;
          label = 23;
          break L3;
         }
         $727 = ($724|0)==(-1);
         
         if ($727) {
          HEAP32[$9>>2] = 0;
          
          label = 257;
          break;
         } else {
          
          if ($712) {
           $728 = $713;
           break;
          } else {
           label = 264;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 257) {
        label = 0;
        
        if ($712) {
         label = 264;
         break L3;
        } else {
         $728 = 0;
        }
       }
       
       $729 = HEAP32[$8>>2]|0;
       $gep_int286 = $729;
       $gep287 = (($gep_int286) + 12)|0;
       $730 = $gep287;
       $731 = HEAP32[$730>>2]|0;
       $gep_int288 = $729;
       $gep289 = (($gep_int288) + 16)|0;
       $732 = $gep289;
       $733 = HEAP32[$732>>2]|0;
       $734 = ($731|0)==($733|0);
       
       if ($734) {
        $735 = $729;
        $736 = HEAP32[$729>>2]|0;
        $gep_int290 = $736;
        $gep291 = (($gep_int290) + 36)|0;
        $737 = $gep291;
        $738 = HEAP32[$737>>2]|0;
        __THREW__ = 0;
        $739 = invoke_ii($738|0,$729|0)|0;
        $740 = __THREW__; __THREW__ = 0;
        $741 = $740&1;
        
        if ($741) {
         $$ph$ph244$ph$ph$ph$ph = $691;$free218$ph$ph243$ph$ph$ph$ph = $free216;
         label = 23;
         break L3;
        }
        $extract$t$i101 = $739&255;
        
        $$0$i$off0$i102 = $extract$t$i101;
       } else {
        $742 = HEAP8[$731]|0;
        
        $$0$i$off0$i102 = $742;
       }
       
       $743 = HEAP8[$__dp]|0;
       $744 = ($$0$i$off0$i102<<24>>24)==($743<<24>>24);
       
       if (!($744)) {
        label = 264;
        break L3;
       }
       $747 = HEAP32[$8>>2]|0;
       $gep_int292 = $747;
       $gep293 = (($gep_int292) + 12)|0;
       $748 = $gep293;
       $749 = HEAP32[$748>>2]|0;
       $gep_int294 = $747;
       $gep295 = (($gep_int294) + 16)|0;
       $750 = $gep295;
       $751 = HEAP32[$750>>2]|0;
       $752 = ($749|0)==($751|0);
       
       if ($752) {
        $753 = $747;
        $754 = HEAP32[$747>>2]|0;
        $gep_int296 = $754;
        $gep297 = (($gep_int296) + 40)|0;
        $755 = $gep297;
        $756 = HEAP32[$755>>2]|0;
        __THREW__ = 0;
        u$366 = invoke_ii($756|0,$747|0)|0;
        $757 = __THREW__; __THREW__ = 0;
        $758 = $757&1;
        
        if ($758) {
         $$ph$ph244$ph$ph$ph$ph = $691;$free218$ph$ph243$ph$ph$ph$ph = $free216;
         label = 23;
         break L3;
        } else {
         $$pre$i2$i$i82 = $728;$760 = $728;$761 = $535;
        }
       } else {
        $gep_int298 = $749;
        $gep299 = (($gep_int298) + 1)|0;
        $759 = $gep299;
        HEAP32[$748>>2] = $759;
        
        $$pre$i2$i$i82 = $728;$760 = $728;$761 = $535;
       }
       while(1) {
        
        
        
        $762 = HEAP32[$8>>2]|0;
        $763 = ($762|0)==(0);
        
        do {
         if ($763) {
          $777 = 0;
         } else {
          $gep_int300 = $762;
          $gep301 = (($gep_int300) + 12)|0;
          $764 = $gep301;
          $765 = HEAP32[$764>>2]|0;
          $gep_int302 = $762;
          $gep303 = (($gep_int302) + 16)|0;
          $766 = $gep303;
          $767 = HEAP32[$766>>2]|0;
          $768 = ($765|0)==($767|0);
          
          if (!($768)) {
           $777 = $762;
           break;
          }
          $769 = $762;
          $770 = HEAP32[$762>>2]|0;
          $gep_int304 = $770;
          $gep305 = (($gep_int304) + 36)|0;
          $771 = $gep305;
          $772 = HEAP32[$771>>2]|0;
          __THREW__ = 0;
          $773 = invoke_ii($772|0,$762|0)|0;
          $774 = __THREW__; __THREW__ = 0;
          $775 = $774&1;
          
          if ($775) {
           label = 20;
           break L3;
          }
          $776 = ($773|0)==(-1);
          
          if ($776) {
           HEAP32[$8>>2] = 0;
           
           $777 = 0;
           break;
          } else {
           $$pre$i$i$i78 = HEAP32[$8>>2]|0;
           
           $777 = $$pre$i$i$i78;
           break;
          }
         }
        } while(0);
        
        $778 = ($777|0)==(0);
        $779 = ($760|0)==(0);
        
        do {
         if ($779) {
          $$pre$i2$i$i82444$ph = $$pre$i2$i$i82;
          label = 280;
         } else {
          $gep_int306 = $760;
          $gep307 = (($gep_int306) + 12)|0;
          $780 = $gep307;
          $781 = HEAP32[$780>>2]|0;
          $gep_int308 = $760;
          $gep309 = (($gep_int308) + 16)|0;
          $782 = $gep309;
          $783 = HEAP32[$782>>2]|0;
          $784 = ($781|0)==($783|0);
          
          if (!($784)) {
           
           if ($778) {
            $$pre$i2$i$i82444459 = $$pre$i2$i$i82;$794 = $760;
            break;
           } else {
            label = 288;
            break L3;
           }
          }
          $785 = $760;
          $786 = HEAP32[$760>>2]|0;
          $gep_int310 = $786;
          $gep311 = (($gep_int310) + 36)|0;
          $787 = $gep311;
          $788 = HEAP32[$787>>2]|0;
          __THREW__ = 0;
          $789 = invoke_ii($788|0,$760|0)|0;
          $790 = __THREW__; __THREW__ = 0;
          $791 = $790&1;
          
          if ($791) {
           label = 20;
           break L3;
          }
          $792 = ($789|0)==(-1);
          
          if ($792) {
           HEAP32[$9>>2] = 0;
           
           $$pre$i2$i$i82444$ph = 0;
           label = 280;
           break;
          } else {
           $793 = ($$pre$i2$i$i82|0)==(0);
           $tmp$i$i84 = $778 ^ $793;
           
           if ($tmp$i$i84) {
            $$pre$i2$i$i82444459 = $$pre$i2$i$i82;$794 = $$pre$i2$i$i82;
            break;
           } else {
            label = 288;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 280) {
         label = 0;
         
         
         if ($778) {
          label = 288;
          break L3;
         } else {
          $$pre$i2$i$i82444459 = $$pre$i2$i$i82444$ph;$794 = 0;
         }
        }
        
        
        $795 = HEAP32[$8>>2]|0;
        $gep_int312 = $795;
        $gep313 = (($gep_int312) + 12)|0;
        $796 = $gep313;
        $797 = HEAP32[$796>>2]|0;
        $gep_int314 = $795;
        $gep315 = (($gep_int314) + 16)|0;
        $798 = $gep315;
        $799 = HEAP32[$798>>2]|0;
        $800 = ($797|0)==($799|0);
        
        if ($800) {
         $801 = $795;
         $802 = HEAP32[$795>>2]|0;
         $gep_int316 = $802;
         $gep317 = (($gep_int316) + 36)|0;
         $803 = $gep317;
         $804 = HEAP32[$803>>2]|0;
         __THREW__ = 0;
         $805 = invoke_ii($804|0,$795|0)|0;
         $806 = __THREW__; __THREW__ = 0;
         $807 = $806&1;
         
         if ($807) {
          label = 20;
          break L3;
         }
         $extract$t$i69 = $805&255;
         
         $$0$i$off0$i70 = $extract$t$i69;
        } else {
         $808 = HEAP8[$797]|0;
         
         $$0$i$off0$i70 = $808;
        }
        
        $isascii1$i67 = ($$0$i$off0$i70<<24>>24)>(-1);
        
        if (!($isascii1$i67)) {
         label = 288;
         break L3;
        }
        $809 = $$0$i$off0$i70 << 24 >> 24;
        $810 = HEAP32[$11>>2]|0;
        $gep_int318 = $810;
        $gep_array319 = $809<<1;
        $gep320 = (($gep_int318) + ($gep_array319))|0;
        $811 = $gep320;
        $812 = HEAP16[$811>>1]|0;
        $813 = $812 & 2048;
        $814 = ($813<<16>>16)==(0);
        
        if ($814) {
         label = 288;
         break L3;
        }
        $817 = HEAP32[$__wn>>2]|0;
        $818 = ($817|0)==($761|0);
        
        if ($818) {
         $819 = HEAP32[$31>>2]|0;
         $820 = ($819|0)!=(181);
         $821 = HEAP32[$6>>2]|0;
         $822 = $761;
         $823 = $821;
         $824 = (($822) - ($823))|0;
         $825 = ($824>>>0)<(2147483647);
         $826 = $824 << 1;
         $$$i = $825 ? $826 : -1;
         $827 = $820 ? $821 : 0;
         $828 = _realloc($827,$$$i)|0;
         $829 = ($828|0)==(0);
         
         if ($829) {
          __THREW__ = 0;
          invoke_v(13);
          $830 = __THREW__; __THREW__ = 0;
          $831 = $830&1;
          
          if ($831) {
           label = 20;
           break L3;
          }
         }
         
         do {
          if ($820) {
           HEAP32[$6>>2] = $828;
           
           $837 = $828;
          } else {
           $$pr$i = HEAP32[$6>>2]|0;
           HEAP32[$6>>2] = $828;
           $832 = ($$pr$i|0)==(0);
           
           if ($832) {
            $837 = $828;
            break;
           }
           $833 = HEAP32[$31>>2]|0;
           __THREW__ = 0;
           invoke_vi($833|0,$$pr$i|0);
           $834 = __THREW__; __THREW__ = 0;
           $835 = $834&1;
           
           if ($835) {
            label = 297;
            break L3;
           }
           $$pre$i = HEAP32[$6>>2]|0;
           
           $837 = $$pre$i;
          }
         } while(0);
         
         HEAP32[$31>>2] = 179;
         $gep_int321 = $837;
         $gep322 = (($gep_int321) + ($824))|0;
         $838 = $gep322;
         HEAP32[$__wn>>2] = $838;
         $839 = HEAP32[$6>>2]|0;
         $gep_int323 = $839;
         $gep324 = (($gep_int323) + ($$$i))|0;
         $840 = $gep324;
         
         $841 = $838;$842 = $840;
        } else {
         $841 = $817;$842 = $761;
        }
        
        
        $843 = HEAP32[$8>>2]|0;
        $gep_int325 = $843;
        $gep326 = (($gep_int325) + 12)|0;
        $844 = $gep326;
        $845 = HEAP32[$844>>2]|0;
        $gep_int327 = $843;
        $gep328 = (($gep_int327) + 16)|0;
        $846 = $gep328;
        $847 = HEAP32[$846>>2]|0;
        $848 = ($845|0)==($847|0);
        
        if ($848) {
         $849 = $843;
         $850 = HEAP32[$843>>2]|0;
         $gep_int329 = $850;
         $gep330 = (($gep_int329) + 36)|0;
         $851 = $gep330;
         $852 = HEAP32[$851>>2]|0;
         __THREW__ = 0;
         $853 = invoke_ii($852|0,$843|0)|0;
         $854 = __THREW__; __THREW__ = 0;
         $855 = $854&1;
         
         if ($855) {
          label = 20;
          break L3;
         }
         $extract$t$i57 = $853&255;
         $$pre442 = HEAP32[$__wn>>2]|0;
         
         $$0$i$off0$i58 = $extract$t$i57;$857 = $$pre442;
        } else {
         $856 = HEAP8[$845]|0;
         
         $$0$i$off0$i58 = $856;$857 = $841;
        }
        
        
        $gep_int331 = $857;
        $gep332 = (($gep_int331) + 1)|0;
        $858 = $gep332;
        HEAP32[$__wn>>2] = $858;
        HEAP8[$857] = $$0$i$off0$i58;
        $859 = HEAP32[$__fd>>2]|0;
        $860 = (($859) + -1)|0;
        HEAP32[$__fd>>2] = $860;
        $861 = HEAP32[$8>>2]|0;
        $gep_int333 = $861;
        $gep334 = (($gep_int333) + 12)|0;
        $862 = $gep334;
        $863 = HEAP32[$862>>2]|0;
        $gep_int335 = $861;
        $gep336 = (($gep_int335) + 16)|0;
        $864 = $gep336;
        $865 = HEAP32[$864>>2]|0;
        $866 = ($863|0)==($865|0);
        
        if ($866) {
         $867 = $861;
         $868 = HEAP32[$861>>2]|0;
         $gep_int337 = $868;
         $gep338 = (($gep_int337) + 40)|0;
         $869 = $gep338;
         $870 = HEAP32[$869>>2]|0;
         __THREW__ = 0;
         u$427 = invoke_ii($870|0,$861|0)|0;
         $871 = __THREW__; __THREW__ = 0;
         $872 = $871&1;
         
         if ($872) {
          label = 20;
          break L3;
         }
        } else {
         $gep_int339 = $863;
         $gep340 = (($gep_int339) + 1)|0;
         $874 = $gep340;
         HEAP32[$862>>2] = $874;
         
        }
        $873 = ($860|0)>(0);
        
        if ($873) {
         $$pre$i2$i$i82 = $$pre$i2$i$i82444459;$760 = $794;$761 = $842;
        } else {
         $875 = $842;
         break;
        }
       }
      } else {
       $875 = $535;
      }
      
      $876 = HEAP32[$__wn>>2]|0;
      $877 = HEAP32[$6>>2]|0;
      $878 = ($876|0)==($877|0);
      
      if ($878) {
       label = 308;
       break L3;
      } else {
       $881 = $875;$882 = $691;$883 = $692;$884 = $693;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free216;
      }
      break;
     }
     case 2:  {
      $388 = ($__trailing_sign$0364|0)!=(0);
      $389 = ($__p$0362>>>0)<(2);
      $or$cond = $388 | $389;
      
      if (!($or$cond)) {
       $390 = ($__p$0362|0)==(2);
       
       if ($390) {
        $391 = HEAP8[$30]|0;
        $392 = ($391<<24>>24)!=(0);
        
        $393 = $392;
       } else {
        $393 = 0;
       }
       
       $brmerge = $21 | $393;
       
       if (!($brmerge)) {
        $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = 0;$free215 = $free214358;
        break L25;
       }
      }
      $394 = HEAP8[$__sym]|0;
      $395 = $394 & 1;
      $396 = ($395<<24>>24)==(0);
      $397 = HEAP32[$24>>2]|0;
      $$466 = $396 ? $23 : $397;
      $398 = ($__p$0362|0)==(0);
      
      L191: do {
       if ($398) {
        $$pre$i2$i$i192 = $69;$446 = $69;$447 = $394;$448 = $$466;
       } else {
        $399 = (($__p$0362) + -1)|0;
        $gep_int171 = $__pat;
        $gep172 = (($gep_int171) + ($399))|0;
        $400 = $gep172;
        $401 = HEAP8[$400]|0;
        $switch = ($401&255)<(2);
        
        if (!($switch)) {
         $$pre$i2$i$i192 = $69;$446 = $69;$447 = $394;$448 = $$466;
         break;
        }
        $402 = $394&255;
        $403 = $402 >>> 1;
        $404 = HEAP32[$25>>2]|0;
        $$468 = $396 ? $403 : $404;
        $gep_int173 = $$466;
        $gep174 = (($gep_int173) + ($$468))|0;
        $405 = $gep174;
        
        $406 = $$466;
        while(1) {
         
         $407 = ($406|0)==($405|0);
         
         if ($407) {
          $$lcssa536 = $405;
          break;
         }
         $408 = HEAP8[$406]|0;
         $isascii1$i147 = ($408<<24>>24)>(-1);
         
         if (!($isascii1$i147)) {
          $$lcssa536 = $406;
          break;
         }
         $409 = $408 << 24 >> 24;
         $410 = HEAP32[$11>>2]|0;
         $gep_int175 = $410;
         $gep_array176 = $409<<1;
         $gep177 = (($gep_int175) + ($gep_array176))|0;
         $411 = $gep177;
         $412 = HEAP16[$411>>1]|0;
         $413 = $412 & 8192;
         $414 = ($413<<16>>16)==(0);
         $gep_int178 = $406;
         $gep179 = (($gep_int178) + 1)|0;
         $415 = $gep179;
         
         if ($414) {
          $$lcssa536 = $406;
          break;
         } else {
          $406 = $415;
         }
        }
        
        $416 = $$lcssa536;
        $417 = $$466;
        $418 = (($416) - ($417))|0;
        $419 = HEAP8[$__spaces]|0;
        $420 = $419 & 1;
        $421 = ($420<<24>>24)==(0);
        
        if ($421) {
         $423 = $419&255;
         $424 = $423 >>> 1;
         
         $425 = $424;
        } else {
         $422 = HEAP32[$29>>2]|0;
         
         $425 = $422;
        }
        
        $426 = ($418>>>0)>($425>>>0);
        
        if ($426) {
         $$pre$i2$i$i192 = $69;$446 = $69;$447 = $394;$448 = $$466;
         break;
        }
        
        if ($421) {
         $430 = $419&255;
         $431 = $430 >>> 1;
         $$sum455 = (($431) - ($418))|0;
         $gep_int182 = $__spaces;
         $gep183 = (($gep_int182) + 1)|0;
         $gep184 = (($gep183) + ($$sum455))|0;
         $432 = $gep184;
         
         $433 = $432;$434 = $27;$435 = $431;
        } else {
         $427 = HEAP32[$28>>2]|0;
         $428 = HEAP32[$29>>2]|0;
         $$sum = (($428) - ($418))|0;
         $gep_int180 = $427;
         $gep181 = (($gep_int180) + ($$sum))|0;
         $429 = $gep181;
         
         $433 = $429;$434 = $427;$435 = $428;
        }
        
        
        
        $gep_int185 = $434;
        $gep186 = (($gep_int185) + ($435))|0;
        $436 = $gep186;
        $437 = ($433|0)==($436|0);
        
        if ($437) {
         $$pre$i2$i$i192 = $69;$446 = $69;$447 = $394;$448 = $$lcssa536;
         break;
        } else {
         $438 = $$466;$439 = $433;
        }
        while(1) {
         
         
         $440 = HEAP8[$439]|0;
         $441 = HEAP8[$438]|0;
         $442 = ($440<<24>>24)==($441<<24>>24);
         
         if (!($442)) {
          $$pre$i2$i$i192 = $69;$446 = $69;$447 = $394;$448 = $$466;
          break L191;
         }
         $gep_int187 = $439;
         $gep188 = (($gep_int187) + 1)|0;
         $443 = $gep188;
         $gep_int189 = $438;
         $gep190 = (($gep_int189) + 1)|0;
         $444 = $gep190;
         $445 = ($443|0)==($436|0);
         
         if ($445) {
          $$pre$i2$i$i192 = $69;$446 = $69;$447 = $394;$448 = $$lcssa536;
          break;
         } else {
          $438 = $444;$439 = $443;
         }
        }
       }
      } while(0);
      L211: while(1) {
       
       
       
       
       $449 = $447 & 1;
       $450 = ($449<<24>>24)==(0);
       
       if ($450) {
        $453 = $447&255;
        $454 = $453 >>> 1;
        
        $455 = $23;$456 = $454;
       } else {
        $451 = HEAP32[$24>>2]|0;
        $452 = HEAP32[$25>>2]|0;
        
        $455 = $451;$456 = $452;
       }
       
       
       $gep_int191 = $455;
       $gep192 = (($gep_int191) + ($456))|0;
       $457 = $gep192;
       $458 = ($448|0)==($457|0);
       
       if ($458) {
        break;
       }
       $459 = HEAP32[$8>>2]|0;
       $460 = ($459|0)==(0);
       
       do {
        if ($460) {
         $474 = 0;
        } else {
         $gep_int193 = $459;
         $gep194 = (($gep_int193) + 12)|0;
         $461 = $gep194;
         $462 = HEAP32[$461>>2]|0;
         $gep_int195 = $459;
         $gep196 = (($gep_int195) + 16)|0;
         $463 = $gep196;
         $464 = HEAP32[$463>>2]|0;
         $465 = ($462|0)==($464|0);
         
         if (!($465)) {
          $474 = $459;
          break;
         }
         $466 = $459;
         $467 = HEAP32[$459>>2]|0;
         $gep_int197 = $467;
         $gep198 = (($gep_int197) + 36)|0;
         $468 = $gep198;
         $469 = HEAP32[$468>>2]|0;
         __THREW__ = 0;
         $470 = invoke_ii($469|0,$459|0)|0;
         $471 = __THREW__; __THREW__ = 0;
         $472 = $471&1;
         
         if ($472) {
          label = 21;
          break L3;
         }
         $473 = ($470|0)==(-1);
         
         if ($473) {
          HEAP32[$8>>2] = 0;
          
          $474 = 0;
          break;
         } else {
          $$pre$i$i$i188 = HEAP32[$8>>2]|0;
          
          $474 = $$pre$i$i$i188;
          break;
         }
        }
       } while(0);
       
       $475 = ($474|0)==(0);
       $476 = ($446|0)==(0);
       
       do {
        if ($476) {
         $$pre$i2$i$i192440 = $$pre$i2$i$i192;
         label = 173;
        } else {
         $gep_int199 = $446;
         $gep200 = (($gep_int199) + 12)|0;
         $477 = $gep200;
         $478 = HEAP32[$477>>2]|0;
         $gep_int201 = $446;
         $gep202 = (($gep_int201) + 16)|0;
         $479 = $gep202;
         $480 = HEAP32[$479>>2]|0;
         $481 = ($478|0)==($480|0);
         
         if (!($481)) {
          
          if ($475) {
           $$pre$i2$i$i192439 = $$pre$i2$i$i192;$491 = $446;
           break;
          } else {
           break L211;
          }
         }
         $482 = $446;
         $483 = HEAP32[$446>>2]|0;
         $gep_int203 = $483;
         $gep204 = (($gep_int203) + 36)|0;
         $484 = $gep204;
         $485 = HEAP32[$484>>2]|0;
         __THREW__ = 0;
         $486 = invoke_ii($485|0,$446|0)|0;
         $487 = __THREW__; __THREW__ = 0;
         $488 = $487&1;
         
         if ($488) {
          label = 21;
          break L3;
         }
         $489 = ($486|0)==(-1);
         
         if ($489) {
          HEAP32[$9>>2] = 0;
          
          $$pre$i2$i$i192440 = 0;
          label = 173;
          break;
         } else {
          $490 = ($$pre$i2$i$i192|0)==(0);
          $tmp$i$i194 = $475 ^ $490;
          
          if ($tmp$i$i194) {
           $$pre$i2$i$i192439 = $$pre$i2$i$i192;$491 = $$pre$i2$i$i192;
           break;
          } else {
           break L211;
          }
         }
        }
       } while(0);
       if ((label|0) == 173) {
        label = 0;
        
        
        if ($475) {
         break;
        } else {
         $$pre$i2$i$i192439 = $$pre$i2$i$i192440;$491 = 0;
        }
       }
       
       
       $492 = HEAP32[$8>>2]|0;
       $gep_int205 = $492;
       $gep206 = (($gep_int205) + 12)|0;
       $493 = $gep206;
       $494 = HEAP32[$493>>2]|0;
       $gep_int207 = $492;
       $gep208 = (($gep_int207) + 16)|0;
       $495 = $gep208;
       $496 = HEAP32[$495>>2]|0;
       $497 = ($494|0)==($496|0);
       
       if ($497) {
        $498 = $492;
        $499 = HEAP32[$492>>2]|0;
        $gep_int209 = $499;
        $gep210 = (($gep_int209) + 36)|0;
        $500 = $gep210;
        $501 = HEAP32[$500>>2]|0;
        __THREW__ = 0;
        $502 = invoke_ii($501|0,$492|0)|0;
        $503 = __THREW__; __THREW__ = 0;
        $504 = $503&1;
        
        if ($504) {
         label = 21;
         break L3;
        }
        $extract$t$i183 = $502&255;
        
        $$0$i$off0$i184 = $extract$t$i183;
       } else {
        $505 = HEAP8[$494]|0;
        
        $$0$i$off0$i184 = $505;
       }
       
       $506 = HEAP8[$448]|0;
       $507 = ($$0$i$off0$i184<<24>>24)==($506<<24>>24);
       
       if (!($507)) {
        break;
       }
       $508 = HEAP32[$8>>2]|0;
       $gep_int211 = $508;
       $gep212 = (($gep_int211) + 12)|0;
       $509 = $gep212;
       $510 = HEAP32[$509>>2]|0;
       $gep_int213 = $508;
       $gep214 = (($gep_int213) + 16)|0;
       $511 = $gep214;
       $512 = HEAP32[$511>>2]|0;
       $513 = ($510|0)==($512|0);
       
       if ($513) {
        $514 = $508;
        $515 = HEAP32[$508>>2]|0;
        $gep_int215 = $515;
        $gep216 = (($gep_int215) + 40)|0;
        $516 = $gep216;
        $517 = HEAP32[$516>>2]|0;
        __THREW__ = 0;
        u$245 = invoke_ii($517|0,$508|0)|0;
        $518 = __THREW__; __THREW__ = 0;
        $519 = $518&1;
        
        if ($519) {
         label = 21;
         break L3;
        }
       } else {
        $gep_int217 = $510;
        $gep218 = (($gep_int217) + 1)|0;
        $520 = $gep218;
        HEAP32[$509>>2] = $520;
        
       }
       $gep_int219 = $448;
       $gep220 = (($gep_int219) + 1)|0;
       $521 = $gep220;
       $$pre438 = HEAP8[$__sym]|0;
       
       $$pre$i2$i$i192 = $$pre$i2$i$i192439;$446 = $491;$447 = $$pre438;$448 = $521;
      }
      
      if (!($21)) {
       $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
       break L25;
      }
      $522 = HEAP8[$__sym]|0;
      $523 = $522 & 1;
      $524 = ($523<<24>>24)==(0);
      
      if ($524) {
       $527 = $522&255;
       $528 = $527 >>> 1;
       
       $529 = $23;$530 = $528;
      } else {
       $525 = HEAP32[$24>>2]|0;
       $526 = HEAP32[$25>>2]|0;
       
       $529 = $525;$530 = $526;
      }
      
      
      $gep_int221 = $529;
      $gep222 = (($gep_int221) + ($530))|0;
      $531 = $gep222;
      $532 = ($448|0)==($531|0);
      
      if ($532) {
       $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
      } else {
       label = 189;
       break L3;
      }
      break;
     }
     case 3:  {
      $204 = HEAP8[$__psn]|0;
      $205 = $204 & 1;
      $206 = ($205<<24>>24)==(0);
      
      if ($206) {
       $208 = $204&255;
       $209 = $208 >>> 1;
       
       $210 = $209;
      } else {
       $207 = HEAP32[$18>>2]|0;
       
       $210 = $207;
      }
      
      $211 = HEAP8[$__nsn]|0;
      $212 = $211 & 1;
      $213 = ($212<<24>>24)==(0);
      
      if ($213) {
       $215 = $211&255;
       $216 = $215 >>> 1;
       
       $217 = $216;
      } else {
       $214 = HEAP32[$14>>2]|0;
       
       $217 = $214;
      }
      
      $218 = (0 - ($217))|0;
      $219 = ($210|0)==($218|0);
      
      if ($219) {
       $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
       break L25;
      }
      
      if ($206) {
       $221 = $204&255;
       $222 = $221 >>> 1;
       
       $223 = $222;
      } else {
       $220 = HEAP32[$18>>2]|0;
       
       $223 = $220;
      }
      
      $224 = ($223|0)==(0);
      
      do {
       if (!($224)) {
        
        if ($213) {
         $226 = $211&255;
         $227 = $226 >>> 1;
         
         $228 = $227;
        } else {
         $225 = HEAP32[$14>>2]|0;
         
         $228 = $225;
        }
        
        $229 = ($228|0)==(0);
        
        if ($229) {
         break;
        }
        $311 = HEAP32[$8>>2]|0;
        $gep_int145 = $311;
        $gep146 = (($gep_int145) + 12)|0;
        $312 = $gep146;
        $313 = HEAP32[$312>>2]|0;
        $gep_int147 = $311;
        $gep148 = (($gep_int147) + 16)|0;
        $314 = $gep148;
        $315 = HEAP32[$314>>2]|0;
        $316 = ($313|0)==($315|0);
        
        if ($316) {
         $317 = $311;
         $318 = HEAP32[$311>>2]|0;
         $gep_int149 = $318;
         $gep150 = (($gep_int149) + 36)|0;
         $319 = $gep150;
         $320 = HEAP32[$319>>2]|0;
         __THREW__ = 0;
         $321 = invoke_ii($320|0,$311|0)|0;
         $322 = __THREW__; __THREW__ = 0;
         $323 = $322&1;
         
         if ($323) {
          $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
          label = 23;
          break L3;
         }
         $extract$t$i105 = $321&255;
         $$pre437 = HEAP8[$__psn]|0;
         $$pre575 = HEAP32[$8>>2]|0;
         $gep_int151 = $$pre575;
         $gep152 = (($gep_int151) + 12)|0;
         $$phi$trans$insert = $gep152;
         $$pre576 = HEAP32[$$phi$trans$insert>>2]|0;
         $gep_int153 = $$pre575;
         $gep154 = (($gep_int153) + 16)|0;
         $$phi$trans$insert577 = $gep154;
         $$pre578 = HEAP32[$$phi$trans$insert577>>2]|0;
         
         $$0$i$off0$i106 = $extract$t$i105;$325 = $$pre578;$326 = $$pre576;$327 = $$pre575;$328 = $$pre437;
        } else {
         $324 = HEAP8[$313]|0;
         
         $$0$i$off0$i106 = $324;$325 = $315;$326 = $313;$327 = $311;$328 = $204;
        }
        
        
        
        
        
        $329 = $328 & 1;
        $330 = ($329<<24>>24)==(0);
        $331 = HEAP32[$19>>2]|0;
        $$464 = $330 ? $17 : $331;
        $332 = HEAP8[$$464]|0;
        $333 = ($$0$i$off0$i106<<24>>24)==($332<<24>>24);
        $gep_int155 = $327;
        $gep156 = (($gep_int155) + 12)|0;
        $334 = $gep156;
        $335 = ($326|0)==($325|0);
        
        if ($333) {
         
         if ($335) {
          $336 = $327;
          $337 = HEAP32[$327>>2]|0;
          $gep_int157 = $337;
          $gep158 = (($gep_int157) + 40)|0;
          $338 = $gep158;
          $339 = HEAP32[$338>>2]|0;
          __THREW__ = 0;
          u$168 = invoke_ii($339|0,$327|0)|0;
          $340 = __THREW__; __THREW__ = 0;
          $341 = $340&1;
          
          if ($341) {
           $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
           label = 23;
           break L3;
          }
         } else {
          $gep_int159 = $326;
          $gep160 = (($gep_int159) + 1)|0;
          $342 = $gep160;
          HEAP32[$334>>2] = $342;
          
         }
         $343 = HEAP8[$__psn]|0;
         $344 = $343 & 1;
         $345 = ($344<<24>>24)==(0);
         
         if ($345) {
          $347 = $343&255;
          $348 = $347 >>> 1;
          
          $349 = $348;
         } else {
          $346 = HEAP32[$18>>2]|0;
          
          $349 = $346;
         }
         
         $350 = ($349>>>0)>(1);
         $__psn$__trailing_sign$05 = $350 ? $__psn : $__trailing_sign$0364;
         
         $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free215 = $free214358;
         break L25;
        }
        
        if ($335) {
         $351 = $327;
         $352 = HEAP32[$327>>2]|0;
         $gep_int161 = $352;
         $gep162 = (($gep_int161) + 36)|0;
         $353 = $gep162;
         $354 = HEAP32[$353>>2]|0;
         __THREW__ = 0;
         $355 = invoke_ii($354|0,$327|0)|0;
         $356 = __THREW__; __THREW__ = 0;
         $357 = $356&1;
         
         if ($357) {
          $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
          label = 23;
          break L3;
         }
         $extract$t$i124 = $355&255;
         
         $$0$i$off0$i125 = $extract$t$i124;
        } else {
         $358 = HEAP8[$326]|0;
         
         $$0$i$off0$i125 = $358;
        }
        
        $359 = HEAP8[$__nsn]|0;
        $360 = $359 & 1;
        $361 = ($360<<24>>24)==(0);
        $362 = HEAP32[$15>>2]|0;
        $$465 = $361 ? $13 : $362;
        $363 = HEAP8[$$465]|0;
        $364 = ($$0$i$off0$i125<<24>>24)==($363<<24>>24);
        
        if (!($364)) {
         label = 136;
         break L3;
        }
        $365 = HEAP32[$8>>2]|0;
        $gep_int163 = $365;
        $gep164 = (($gep_int163) + 12)|0;
        $366 = $gep164;
        $367 = HEAP32[$366>>2]|0;
        $gep_int165 = $365;
        $gep166 = (($gep_int165) + 16)|0;
        $368 = $gep166;
        $369 = HEAP32[$368>>2]|0;
        $370 = ($367|0)==($369|0);
        
        if ($370) {
         $371 = $365;
         $372 = HEAP32[$365>>2]|0;
         $gep_int167 = $372;
         $gep168 = (($gep_int167) + 40)|0;
         $373 = $gep168;
         $374 = HEAP32[$373>>2]|0;
         __THREW__ = 0;
         u$184 = invoke_ii($374|0,$365|0)|0;
         $375 = __THREW__; __THREW__ = 0;
         $376 = $375&1;
         
         if ($376) {
          $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
          label = 23;
          break L3;
         }
        } else {
         $gep_int169 = $367;
         $gep170 = (($gep_int169) + 1)|0;
         $377 = $gep170;
         HEAP32[$366>>2] = $377;
         
        }
        HEAP8[$__neg] = 1;
        $378 = HEAP8[$__nsn]|0;
        $379 = $378 & 1;
        $380 = ($379<<24>>24)==(0);
        
        if ($380) {
         $382 = $378&255;
         $383 = $382 >>> 1;
         
         $384 = $383;
        } else {
         $381 = HEAP32[$14>>2]|0;
         
         $384 = $381;
        }
        
        $385 = ($384>>>0)>(1);
        $__nsn$__trailing_sign$06 = $385 ? $__nsn : $__trailing_sign$0364;
        
        $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free215 = $free214358;
        break L25;
       }
      } while(0);
      
      if ($206) {
       $231 = $204&255;
       $232 = $231 >>> 1;
       
       $233 = $232;
      } else {
       $230 = HEAP32[$18>>2]|0;
       
       $233 = $230;
      }
      
      $234 = ($233|0)==(0);
      $235 = HEAP32[$8>>2]|0;
      $gep_int121 = $235;
      $gep122 = (($gep_int121) + 12)|0;
      $236 = $gep122;
      $237 = HEAP32[$236>>2]|0;
      $gep_int123 = $235;
      $gep124 = (($gep_int123) + 16)|0;
      $238 = $gep124;
      $239 = HEAP32[$238>>2]|0;
      $240 = ($237|0)==($239|0);
      
      if ($234) {
       
       if ($240) {
        $276 = $235;
        $277 = HEAP32[$235>>2]|0;
        $gep_int135 = $277;
        $gep136 = (($gep_int135) + 36)|0;
        $278 = $gep136;
        $279 = HEAP32[$278>>2]|0;
        __THREW__ = 0;
        $280 = invoke_ii($279|0,$235|0)|0;
        $281 = __THREW__; __THREW__ = 0;
        $282 = $281&1;
        
        if ($282) {
         $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
         label = 23;
         break L3;
        }
        $extract$t$i91 = $280&255;
        $$pre = HEAP8[$__nsn]|0;
        
        $$0$i$off0$i92 = $extract$t$i91;$284 = $$pre;
       } else {
        $283 = HEAP8[$237]|0;
        
        $$0$i$off0$i92 = $283;$284 = $211;
       }
       
       
       $285 = $284 & 1;
       $286 = ($285<<24>>24)==(0);
       $287 = HEAP32[$15>>2]|0;
       $$463 = $286 ? $13 : $287;
       $288 = HEAP8[$$463]|0;
       $289 = ($$0$i$off0$i92<<24>>24)==($288<<24>>24);
       
       if (!($289)) {
        $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
        break L25;
       }
       $290 = HEAP32[$8>>2]|0;
       $gep_int137 = $290;
       $gep138 = (($gep_int137) + 12)|0;
       $291 = $gep138;
       $292 = HEAP32[$291>>2]|0;
       $gep_int139 = $290;
       $gep140 = (($gep_int139) + 16)|0;
       $293 = $gep140;
       $294 = HEAP32[$293>>2]|0;
       $295 = ($292|0)==($294|0);
       
       if ($295) {
        $296 = $290;
        $297 = HEAP32[$290>>2]|0;
        $gep_int141 = $297;
        $gep142 = (($gep_int141) + 40)|0;
        $298 = $gep142;
        $299 = HEAP32[$298>>2]|0;
        __THREW__ = 0;
        u$151 = invoke_ii($299|0,$290|0)|0;
        $300 = __THREW__; __THREW__ = 0;
        $301 = $300&1;
        
        if ($301) {
         $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
         label = 23;
         break L3;
        }
       } else {
        $gep_int143 = $292;
        $gep144 = (($gep_int143) + 1)|0;
        $302 = $gep144;
        HEAP32[$291>>2] = $302;
        
       }
       HEAP8[$__neg] = 1;
       $303 = HEAP8[$__nsn]|0;
       $304 = $303 & 1;
       $305 = ($304<<24>>24)==(0);
       
       if ($305) {
        $307 = $303&255;
        $308 = $307 >>> 1;
        
        $309 = $308;
       } else {
        $306 = HEAP32[$14>>2]|0;
        
        $309 = $306;
       }
       
       $310 = ($309>>>0)>(1);
       $__nsn$__trailing_sign$0 = $310 ? $__nsn : $__trailing_sign$0364;
       
       $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free215 = $free214358;
       break L25;
      }
      
      if ($240) {
       $241 = $235;
       $242 = HEAP32[$235>>2]|0;
       $gep_int125 = $242;
       $gep126 = (($gep_int125) + 36)|0;
       $243 = $gep126;
       $244 = HEAP32[$243>>2]|0;
       __THREW__ = 0;
       $245 = invoke_ii($244|0,$235|0)|0;
       $246 = __THREW__; __THREW__ = 0;
       $247 = $246&1;
       
       if ($247) {
        $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
        label = 23;
        break L3;
       }
       $extract$t$i73 = $245&255;
       $$pre436 = HEAP8[$__psn]|0;
       
       $$0$i$off0$i74 = $extract$t$i73;$249 = $$pre436;
      } else {
       $248 = HEAP8[$237]|0;
       
       $$0$i$off0$i74 = $248;$249 = $204;
      }
      
      
      $250 = $249 & 1;
      $251 = ($250<<24>>24)==(0);
      $252 = HEAP32[$19>>2]|0;
      $$ = $251 ? $17 : $252;
      $253 = HEAP8[$$]|0;
      $254 = ($$0$i$off0$i74<<24>>24)==($253<<24>>24);
      
      if (!($254)) {
       HEAP8[$__neg] = 1;
       
       $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
       break L25;
      }
      $255 = HEAP32[$8>>2]|0;
      $gep_int127 = $255;
      $gep128 = (($gep_int127) + 12)|0;
      $256 = $gep128;
      $257 = HEAP32[$256>>2]|0;
      $gep_int129 = $255;
      $gep130 = (($gep_int129) + 16)|0;
      $258 = $gep130;
      $259 = HEAP32[$258>>2]|0;
      $260 = ($257|0)==($259|0);
      
      if ($260) {
       $261 = $255;
       $262 = HEAP32[$255>>2]|0;
       $gep_int131 = $262;
       $gep132 = (($gep_int131) + 40)|0;
       $263 = $gep132;
       $264 = HEAP32[$263>>2]|0;
       __THREW__ = 0;
       u$133 = invoke_ii($264|0,$255|0)|0;
       $265 = __THREW__; __THREW__ = 0;
       $266 = $265&1;
       
       if ($266) {
        $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
        label = 23;
        break L3;
       }
      } else {
       $gep_int133 = $257;
       $gep134 = (($gep_int133) + 1)|0;
       $267 = $gep134;
       HEAP32[$256>>2] = $267;
       
      }
      $268 = HEAP8[$__psn]|0;
      $269 = $268 & 1;
      $270 = ($269<<24>>24)==(0);
      
      if ($270) {
       $272 = $268&255;
       $273 = $272 >>> 1;
       
       $274 = $273;
      } else {
       $271 = HEAP32[$18>>2]|0;
       
       $274 = $271;
      }
      
      $275 = ($274>>>0)>(1);
      $__psn$__trailing_sign$0 = $275 ? $__psn : $__trailing_sign$0364;
      
      $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free215 = $free214358;
      break;
     }
     case 0:  {
      label = 42;
      break;
     }
     case 1:  {
      $cond = ($__p$0362|0)==(3);
      
      if ($cond) {
       $$lcssa302 = $35;$$lcssa318 = $34;$__trailing_sign$0$lcssa = $__trailing_sign$0364;$free214$lcssa = $free214358;
       label = 310;
       break L3;
      }
      $93 = HEAP32[$8>>2]|0;
      $gep_int76 = $93;
      $gep77 = (($gep_int76) + 12)|0;
      $94 = $gep77;
      $95 = HEAP32[$94>>2]|0;
      $gep_int78 = $93;
      $gep79 = (($gep_int78) + 16)|0;
      $96 = $gep79;
      $97 = HEAP32[$96>>2]|0;
      $98 = ($95|0)==($97|0);
      
      if ($98) {
       $99 = $93;
       $100 = HEAP32[$93>>2]|0;
       $gep_int80 = $100;
       $gep81 = (($gep_int80) + 36)|0;
       $101 = $gep81;
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = invoke_ii($102|0,$93|0)|0;
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       
       if ($105) {
        $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
        label = 23;
        break L3;
       }
       $extract$t$i29 = $103&255;
       
       $$0$i$off0$i30 = $extract$t$i29;
      } else {
       $106 = HEAP8[$95]|0;
       
       $$0$i$off0$i30 = $106;
      }
      
      $isascii1$i = ($$0$i$off0$i30<<24>>24)>(-1);
      
      if (!($isascii1$i)) {
       label = 41;
       break L3;
      }
      $107 = $$0$i$off0$i30 << 24 >> 24;
      $108 = HEAP32[$11>>2]|0;
      $gep_int82 = $108;
      $gep_array = $107<<1;
      $gep83 = (($gep_int82) + ($gep_array))|0;
      $109 = $gep83;
      $110 = HEAP16[$109>>1]|0;
      $111 = $110 & 8192;
      $112 = ($111<<16>>16)==(0);
      
      if ($112) {
       label = 41;
       break L3;
      }
      $113 = HEAP32[$8>>2]|0;
      $gep_int84 = $113;
      $gep85 = (($gep_int84) + 12)|0;
      $114 = $gep85;
      $115 = HEAP32[$114>>2]|0;
      $gep_int86 = $113;
      $gep87 = (($gep_int86) + 16)|0;
      $116 = $gep87;
      $117 = HEAP32[$116>>2]|0;
      $118 = ($115|0)==($117|0);
      
      if ($118) {
       $119 = $113;
       $120 = HEAP32[$113>>2]|0;
       $gep_int88 = $120;
       $gep89 = (($gep_int88) + 40)|0;
       $121 = $gep89;
       $122 = HEAP32[$121>>2]|0;
       __THREW__ = 0;
       $123 = invoke_ii($122|0,$113|0)|0;
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       
       if ($125) {
        $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
        label = 23;
        break L3;
       }
       $extract$t$i33 = $123&255;
       
       $$0$i$off0$i34 = $extract$t$i33;
      } else {
       $gep_int90 = $115;
       $gep91 = (($gep_int90) + 1)|0;
       $126 = $gep91;
       HEAP32[$114>>2] = $126;
       $127 = HEAP8[$115]|0;
       
       $$0$i$off0$i34 = $127;
      }
      
      __THREW__ = 0;
      invoke_vii(61,$__spaces|0,$$0$i$off0$i34|0);
      $128 = __THREW__; __THREW__ = 0;
      $129 = $128&1;
      
      if ($129) {
       $$ph$ph244$ph$ph$ph$ph = $35;$free218$ph$ph243$ph$ph$ph$ph = $free214358;
       label = 23;
       break L3;
      } else {
       label = 42;
      }
      break;
     }
     default: {
      $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
     }
     }
    } while(0);
    L357: do {
     if ((label|0) == 42) {
      label = 0;
      $132 = ($__p$0362|0)==(3);
      
      if ($132) {
       $$lcssa302 = $35;$$lcssa318 = $34;$__trailing_sign$0$lcssa = $__trailing_sign$0364;$free214$lcssa = $free214358;
       label = 310;
       break L3;
      } else {
       $$pre$i2$i$i41 = $69;$133 = $69;
      }
      while(1) {
       
       
       $134 = HEAP32[$8>>2]|0;
       $135 = ($134|0)==(0);
       
       do {
        if ($135) {
         $149 = 0;
        } else {
         $gep_int92 = $134;
         $gep93 = (($gep_int92) + 12)|0;
         $136 = $gep93;
         $137 = HEAP32[$136>>2]|0;
         $gep_int94 = $134;
         $gep95 = (($gep_int94) + 16)|0;
         $138 = $gep95;
         $139 = HEAP32[$138>>2]|0;
         $140 = ($137|0)==($139|0);
         
         if (!($140)) {
          $149 = $134;
          break;
         }
         $141 = $134;
         $142 = HEAP32[$134>>2]|0;
         $gep_int96 = $142;
         $gep97 = (($gep_int96) + 36)|0;
         $143 = $gep97;
         $144 = HEAP32[$143>>2]|0;
         __THREW__ = 0;
         $145 = invoke_ii($144|0,$134|0)|0;
         $146 = __THREW__; __THREW__ = 0;
         $147 = $146&1;
         
         if ($147) {
          label = 22;
          break L3;
         }
         $148 = ($145|0)==(-1);
         
         if ($148) {
          HEAP32[$8>>2] = 0;
          
          $149 = 0;
          break;
         } else {
          $$pre$i$i$i37 = HEAP32[$8>>2]|0;
          
          $149 = $$pre$i$i$i37;
          break;
         }
        }
       } while(0);
       
       $150 = ($149|0)==(0);
       $151 = ($133|0)==(0);
       
       do {
        if ($151) {
         $$pre$i2$i$i41433 = $$pre$i2$i$i41;
         label = 55;
        } else {
         $gep_int98 = $133;
         $gep99 = (($gep_int98) + 12)|0;
         $152 = $gep99;
         $153 = HEAP32[$152>>2]|0;
         $gep_int100 = $133;
         $gep101 = (($gep_int100) + 16)|0;
         $154 = $gep101;
         $155 = HEAP32[$154>>2]|0;
         $156 = ($153|0)==($155|0);
         
         if (!($156)) {
          
          if ($150) {
           $$pre$i2$i$i41435 = $$pre$i2$i$i41;$166 = $133;
           break;
          } else {
           $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
           break L357;
          }
         }
         $157 = $133;
         $158 = HEAP32[$133>>2]|0;
         $gep_int102 = $158;
         $gep103 = (($gep_int102) + 36)|0;
         $159 = $gep103;
         $160 = HEAP32[$159>>2]|0;
         __THREW__ = 0;
         $161 = invoke_ii($160|0,$133|0)|0;
         $162 = __THREW__; __THREW__ = 0;
         $163 = $162&1;
         
         if ($163) {
          label = 22;
          break L3;
         }
         $164 = ($161|0)==(-1);
         
         if ($164) {
          HEAP32[$9>>2] = 0;
          
          $$pre$i2$i$i41433 = 0;
          label = 55;
          break;
         } else {
          $165 = ($$pre$i2$i$i41|0)==(0);
          $tmp$i$i43 = $150 ^ $165;
          
          if ($tmp$i$i43) {
           $$pre$i2$i$i41435 = $$pre$i2$i$i41;$166 = $$pre$i2$i$i41;
           break;
          } else {
           $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
           break L357;
          }
         }
        }
       } while(0);
       if ((label|0) == 55) {
        label = 0;
        
        
        if ($150) {
         $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
         break L357;
        } else {
         $$pre$i2$i$i41435 = $$pre$i2$i$i41433;$166 = 0;
        }
       }
       
       
       $167 = HEAP32[$8>>2]|0;
       $gep_int104 = $167;
       $gep105 = (($gep_int104) + 12)|0;
       $168 = $gep105;
       $169 = HEAP32[$168>>2]|0;
       $gep_int106 = $167;
       $gep107 = (($gep_int106) + 16)|0;
       $170 = $gep107;
       $171 = HEAP32[$170>>2]|0;
       $172 = ($169|0)==($171|0);
       
       if ($172) {
        $173 = $167;
        $174 = HEAP32[$167>>2]|0;
        $gep_int108 = $174;
        $gep109 = (($gep_int108) + 36)|0;
        $175 = $gep109;
        $176 = HEAP32[$175>>2]|0;
        __THREW__ = 0;
        $177 = invoke_ii($176|0,$167|0)|0;
        $178 = __THREW__; __THREW__ = 0;
        $179 = $178&1;
        
        if ($179) {
         label = 22;
         break L3;
        }
        $extract$t$i47 = $177&255;
        
        $$0$i$off0$i48 = $extract$t$i47;
       } else {
        $180 = HEAP8[$169]|0;
        
        $$0$i$off0$i48 = $180;
       }
       
       $isascii1$i51 = ($$0$i$off0$i48<<24>>24)>(-1);
       
       if (!($isascii1$i51)) {
        $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
        break L357;
       }
       $181 = $$0$i$off0$i48 << 24 >> 24;
       $182 = HEAP32[$11>>2]|0;
       $gep_int110 = $182;
       $gep_array111 = $181<<1;
       $gep112 = (($gep_int110) + ($gep_array111))|0;
       $183 = $gep112;
       $184 = HEAP16[$183>>1]|0;
       $185 = $184 & 8192;
       $186 = ($185<<16>>16)==(0);
       
       if ($186) {
        $881 = $36;$882 = $35;$883 = $34;$884 = $33;$__trailing_sign$1 = $__trailing_sign$0364;$free215 = $free214358;
        break L357;
       }
       $187 = HEAP32[$8>>2]|0;
       $gep_int113 = $187;
       $gep114 = (($gep_int113) + 12)|0;
       $188 = $gep114;
       $189 = HEAP32[$188>>2]|0;
       $gep_int115 = $187;
       $gep116 = (($gep_int115) + 16)|0;
       $190 = $gep116;
       $191 = HEAP32[$190>>2]|0;
       $192 = ($189|0)==($191|0);
       
       if ($192) {
        $193 = $187;
        $194 = HEAP32[$187>>2]|0;
        $gep_int117 = $194;
        $gep118 = (($gep_int117) + 40)|0;
        $195 = $gep118;
        $196 = HEAP32[$195>>2]|0;
        __THREW__ = 0;
        $197 = invoke_ii($196|0,$187|0)|0;
        $198 = __THREW__; __THREW__ = 0;
        $199 = $198&1;
        
        if ($199) {
         label = 22;
         break L3;
        }
        $extract$t$i53 = $197&255;
        
        $$0$i$off0$i54 = $extract$t$i53;
       } else {
        $gep_int119 = $189;
        $gep120 = (($gep_int119) + 1)|0;
        $200 = $gep120;
        HEAP32[$188>>2] = $200;
        $201 = HEAP8[$189]|0;
        
        $$0$i$off0$i54 = $201;
       }
       
       __THREW__ = 0;
       invoke_vii(61,$__spaces|0,$$0$i$off0$i54|0);
       $202 = __THREW__; __THREW__ = 0;
       $203 = $202&1;
       
       if ($203) {
        label = 22;
        break L3;
       } else {
        $$pre$i2$i$i41 = $$pre$i2$i$i41435;$133 = $166;
       }
      }
     }
    } while(0);
    
    
    
    
    
    
    $885 = (($__p$0362) + 1)|0;
    $886 = ($885>>>0)<(4);
    
    if ($886) {
     $33 = $884;$34 = $883;$35 = $882;$36 = $881;$__p$0362 = $885;$__trailing_sign$0364 = $__trailing_sign$1;$free214358 = $free215;
    } else {
     $$lcssa302 = $882;$$lcssa318 = $883;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free214$lcssa = $free215;
     label = 310;
     break;
    }
   }
   L394: do {
    if ((label|0) == 19) {
     
     
     $expanded16 = 69;
     $75 = ___cxa_find_matching_catch(-1,-1)|0;
     $76 = tempRet0;
     
     $87 = $$ph$ph;$free218 = $free218$ph$ph;$lpad$phi$index = $75;$lpad$phi$index7 = $76;
     break L1;
    }
    else if ((label|0) == 20) {
     $expanded17 = 69;
     $77 = ___cxa_find_matching_catch(-1,-1)|0;
     $78 = tempRet0;
     
     $87 = $691;$free218 = $free216;$lpad$phi$index = $77;$lpad$phi$index7 = $78;
     break L1;
    }
    else if ((label|0) == 21) {
     $expanded18 = 69;
     $79 = ___cxa_find_matching_catch(-1,-1)|0;
     $80 = tempRet0;
     
     $87 = $35;$free218 = $free214358;$lpad$phi$index = $79;$lpad$phi$index7 = $80;
     break L1;
    }
    else if ((label|0) == 22) {
     $expanded19 = 69;
     $81 = ___cxa_find_matching_catch(-1,-1)|0;
     $82 = tempRet0;
     
     $87 = $35;$free218 = $free214358;$lpad$phi$index = $81;$lpad$phi$index7 = $82;
     break L1;
    }
    else if ((label|0) == 23) {
     
     
     $expanded20 = 69;
     $83 = ___cxa_find_matching_catch(-1,-1)|0;
     $84 = tempRet0;
     
     $87 = $$ph$ph244$ph$ph$ph$ph;$free218 = $free218$ph$ph243$ph$ph$ph$ph;$lpad$phi$index = $83;$lpad$phi$index7 = $84;
     break L1;
    }
    else if ((label|0) == 41) {
     $130 = HEAP32[$__err>>2]|0;
     $131 = $130 | 4;
     HEAP32[$__err>>2] = $131;
     
     $$0 = 0;$976 = $35;$free220 = $free214358;
    }
    else if ((label|0) == 136) {
     $386 = HEAP32[$__err>>2]|0;
     $387 = $386 | 4;
     HEAP32[$__err>>2] = $387;
     
     $$0 = 0;$976 = $35;$free220 = $free214358;
    }
    else if ((label|0) == 189) {
     $533 = HEAP32[$__err>>2]|0;
     $534 = $533 | 4;
     HEAP32[$__err>>2] = $534;
     
     $$0 = 0;$976 = $35;$free220 = $free214358;
    }
    else if ((label|0) == 218) {
     $expanded23 = 69;
     $610 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$296 = tempRet0;
     ___clang_call_terminate($610);
     // unreachable
    }
    else if ((label|0) == 264) {
     $745 = HEAP32[$__err>>2]|0;
     $746 = $745 | 4;
     HEAP32[$__err>>2] = $746;
     
     $$0 = 0;$976 = $691;$free220 = $free216;
    }
    else if ((label|0) == 288) {
     $815 = HEAP32[$__err>>2]|0;
     $816 = $815 | 4;
     HEAP32[$__err>>2] = $816;
     
     $$0 = 0;$976 = $691;$free220 = $free216;
    }
    else if ((label|0) == 297) {
     $expanded24 = 69;
     $836 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$411 = tempRet0;
     ___clang_call_terminate($836);
     // unreachable
    }
    else if ((label|0) == 308) {
     $879 = HEAP32[$__err>>2]|0;
     $880 = $879 | 4;
     HEAP32[$__err>>2] = $880;
     
     $$0 = 0;$976 = $691;$free220 = $free216;
    }
    else if ((label|0) == 310) {
     
     
     
     
     $887 = ($__trailing_sign$0$lcssa|0)==(0);
     
     L403: do {
      if (!($887)) {
       $888 = $__trailing_sign$0$lcssa;
       $889 = $__trailing_sign$0$lcssa;
       $gep_int341 = $__trailing_sign$0$lcssa;
       $gep342 = (($gep_int341) + 1)|0;
       $890 = $gep342;
       $gep_int343 = $__trailing_sign$0$lcssa;
       $gep344 = (($gep_int343) + 8)|0;
       $891 = $gep344;
       $gep_int345 = $__trailing_sign$0$lcssa;
       $gep346 = (($gep_int345) + 4)|0;
       $892 = $gep346;
       
       $__i$0 = 1;
       L405: while(1) {
        
        $893 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $894 = $893 & 1;
        $895 = ($894<<24>>24)==(0);
        
        if ($895) {
         $897 = $893&255;
         $898 = $897 >>> 1;
         
         $899 = $898;
        } else {
         $896 = HEAP32[$892>>2]|0;
         
         $899 = $896;
        }
        
        $900 = ($__i$0>>>0)<($899>>>0);
        
        if (!($900)) {
         break L403;
        }
        $901 = HEAP32[$8>>2]|0;
        $902 = ($901|0)==(0);
        
        do {
         if ($902) {
          $916 = 0;
         } else {
          $gep_int347 = $901;
          $gep348 = (($gep_int347) + 12)|0;
          $903 = $gep348;
          $904 = HEAP32[$903>>2]|0;
          $gep_int349 = $901;
          $gep350 = (($gep_int349) + 16)|0;
          $905 = $gep350;
          $906 = HEAP32[$905>>2]|0;
          $907 = ($904|0)==($906|0);
          
          if (!($907)) {
           $916 = $901;
           break;
          }
          $908 = $901;
          $909 = HEAP32[$901>>2]|0;
          $gep_int351 = $909;
          $gep352 = (($gep_int351) + 36)|0;
          $910 = $gep352;
          $911 = HEAP32[$910>>2]|0;
          __THREW__ = 0;
          $912 = invoke_ii($911|0,$901|0)|0;
          $913 = __THREW__; __THREW__ = 0;
          $914 = $913&1;
          
          if ($914) {
           label = 18;
           break L405;
          }
          $915 = ($912|0)==(-1);
          
          if ($915) {
           HEAP32[$8>>2] = 0;
           
           $916 = 0;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$8>>2]|0;
           
           $916 = $$pre$i$i$i;
           break;
          }
         }
        } while(0);
        
        $917 = ($916|0)==(0);
        $918 = HEAP32[$9>>2]|0;
        $919 = ($918|0)==(0);
        
        do {
         if ($919) {
          label = 328;
         } else {
          $gep_int353 = $918;
          $gep354 = (($gep_int353) + 12)|0;
          $920 = $gep354;
          $921 = HEAP32[$920>>2]|0;
          $gep_int355 = $918;
          $gep356 = (($gep_int355) + 16)|0;
          $922 = $gep356;
          $923 = HEAP32[$922>>2]|0;
          $924 = ($921|0)==($923|0);
          
          if (!($924)) {
           
           if ($917) {
            break;
           } else {
            label = 337;
            break L405;
           }
          }
          $925 = $918;
          $926 = HEAP32[$918>>2]|0;
          $gep_int357 = $926;
          $gep358 = (($gep_int357) + 36)|0;
          $927 = $gep358;
          $928 = HEAP32[$927>>2]|0;
          __THREW__ = 0;
          $929 = invoke_ii($928|0,$918|0)|0;
          $930 = __THREW__; __THREW__ = 0;
          $931 = $930&1;
          
          if ($931) {
           label = 18;
           break L405;
          }
          $932 = ($929|0)==(-1);
          
          if ($932) {
           HEAP32[$9>>2] = 0;
           
           label = 328;
           break;
          } else {
           
           if ($917) {
            break;
           } else {
            label = 337;
            break L405;
           }
          }
         }
        } while(0);
        if ((label|0) == 328) {
         label = 0;
         
         if ($917) {
          label = 337;
          break;
         }
        }
        $933 = HEAP32[$8>>2]|0;
        $gep_int359 = $933;
        $gep360 = (($gep_int359) + 12)|0;
        $934 = $gep360;
        $935 = HEAP32[$934>>2]|0;
        $gep_int361 = $933;
        $gep362 = (($gep_int361) + 16)|0;
        $936 = $gep362;
        $937 = HEAP32[$936>>2]|0;
        $938 = ($935|0)==($937|0);
        
        if ($938) {
         $939 = $933;
         $940 = HEAP32[$933>>2]|0;
         $gep_int363 = $940;
         $gep364 = (($gep_int363) + 36)|0;
         $941 = $gep364;
         $942 = HEAP32[$941>>2]|0;
         __THREW__ = 0;
         $943 = invoke_ii($942|0,$933|0)|0;
         $944 = __THREW__; __THREW__ = 0;
         $945 = $944&1;
         
         if ($945) {
          label = 18;
          break;
         }
         $extract$t$i = $943&255;
         
         $$0$i$off0$i = $extract$t$i;
        } else {
         $946 = HEAP8[$935]|0;
         
         $$0$i$off0$i = $946;
        }
        
        $947 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $948 = $947 & 1;
        $949 = ($948<<24>>24)==(0);
        
        if ($949) {
         $951 = $890;
        } else {
         $950 = HEAP32[$891>>2]|0;
         
         $951 = $950;
        }
        
        $gep_int365 = $951;
        $gep366 = (($gep_int365) + ($__i$0))|0;
        $952 = $gep366;
        $953 = HEAP8[$952]|0;
        $954 = ($$0$i$off0$i<<24>>24)==($953<<24>>24);
        
        if (!($954)) {
         label = 337;
         break;
        }
        $957 = (($__i$0) + 1)|0;
        $958 = HEAP32[$8>>2]|0;
        $gep_int367 = $958;
        $gep368 = (($gep_int367) + 12)|0;
        $959 = $gep368;
        $960 = HEAP32[$959>>2]|0;
        $gep_int369 = $958;
        $gep370 = (($gep_int369) + 16)|0;
        $961 = $gep370;
        $962 = HEAP32[$961>>2]|0;
        $963 = ($960|0)==($962|0);
        
        if ($963) {
         $964 = $958;
         $965 = HEAP32[$958>>2]|0;
         $gep_int371 = $965;
         $gep372 = (($gep_int371) + 40)|0;
         $966 = $gep372;
         $967 = HEAP32[$966>>2]|0;
         __THREW__ = 0;
         u$472 = invoke_ii($967|0,$958|0)|0;
         $968 = __THREW__; __THREW__ = 0;
         $969 = $968&1;
         
         if ($969) {
          label = 18;
          break;
         } else {
          $__i$0 = $957;
          continue;
         }
        } else {
         $gep_int373 = $960;
         $gep374 = (($gep_int373) + 1)|0;
         $970 = $gep374;
         HEAP32[$959>>2] = $970;
         
         $__i$0 = $957;
         continue;
        }
       }
       if ((label|0) == 18) {
        $expanded = 69;
        $73 = ___cxa_find_matching_catch(-1,-1)|0;
        $74 = tempRet0;
        
        $87 = $$lcssa302;$free218 = $free214$lcssa;$lpad$phi$index = $73;$lpad$phi$index7 = $74;
        break L1;
       }
       else if ((label|0) == 337) {
        $955 = HEAP32[$__err>>2]|0;
        $956 = $955 | 4;
        HEAP32[$__err>>2] = $956;
        
        $$0 = 0;$976 = $$lcssa302;$free220 = $free214$lcssa;
        break L394;
       }
      }
     } while(0);
     $971 = ($$lcssa302|0)==($$lcssa318|0);
     
     if ($971) {
      $$0 = 1;$976 = $$lcssa318;$free220 = $free214$lcssa;
      break;
     }
     HEAP32[$__et>>2] = 0;
     __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa302,$$lcssa318,$__et);
     $972 = HEAP32[$__et>>2]|0;
     $973 = ($972|0)==(0);
     
     if ($973) {
      $$0 = 1;$976 = $$lcssa302;$free220 = $free214$lcssa;
      break;
     }
     $974 = HEAP32[$__err>>2]|0;
     $975 = $974 | 4;
     HEAP32[$__err>>2] = $975;
     
     $$0 = 0;$976 = $$lcssa302;$free220 = $free214$lcssa;
    }
   } while(0);
   
   
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $977 = ($976|0)==(0);
   
   if ($977) {
    
    STACKTOP = sp;return $$0|0;
   }
   $978 = $976;
   __THREW__ = 0;
   invoke_vi($free220|0,$978|0);
   $979 = __THREW__; __THREW__ = 0;
   $980 = $979&1;
   
   if ($980) {
    $expanded25 = 69;
    $981 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$491 = tempRet0;
    ___clang_call_terminate($981);
    // unreachable
   } else {
    
    STACKTOP = sp;return $$0|0;
   }
  }
 } while(0);
 
 
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $88 = ($87|0)==(0);
 
 if ($88) {
  ___resumeException($lpad$phi$index|0);
  // unreachable
 }
 $89 = $87;
 __THREW__ = 0;
 invoke_vi($free218|0,$89|0);
 $90 = __THREW__; __THREW__ = 0;
 $91 = $90&1;
 
 if ($91) {
  $expanded22 = 69;
  $92 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$47 = tempRet0;
  ___clang_call_terminate($92);
  // unreachable
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___cxa_allocate_exception(8)|0;
 $2 = $1;
 __THREW__ = 0;
 invoke_vii(44,$2|0,$msg|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 
 if ($4) {
  $expanded2 = 69;
  $5 = ___cxa_find_matching_catch(-1,-1)|0;
  $6 = tempRet0;
  ___cxa_free_exception($1|0);
  ___resumeException($5|0);
  // unreachable
 } else {
  $expanded = 5392;
  $expanded1 = 35;
  ___cxa_throw($1|0,$expanded|0,$expanded1|0);
  // unreachable
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0117 = 0, $$0118 = 0, $$019 = 0, $$020 = 0, $$byval_copy = 0, $$pre = 0, $$pre14 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__w$09$phi = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0;
 var $expanded13 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep17 = 0, $gep22 = 0, $gep24 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0;
 var $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep_array = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int21 = 0;
 var $gep_int23 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0;
 var $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int67 = 0, $tmp$i$i = 0, label = 0, sp = 0, u$51 = 0, u$73 = 0, u$79 = 0, u$84 = 0, u$90 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 168|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 128|0;
 $__wn = sp + 136|0;
 $__loc = sp + 144|0;
 $__neg = sp + 152|0;
 $1 = sp + 160|0;
 $gep_int = $__wbuf;
 $2 = $gep_int;
 
 $gep_int14 = $__wb;
 $3 = $gep_int14;
 HEAP32[$3>>2] = $2;
 $gep_int15 = $__wb;
 $gep = (($gep_int15) + 4)|0;
 $4 = $gep;
 HEAP32[$4>>2] = 181;
 $gep_int16 = $__wbuf;
 $gep17 = (($gep_int16) + 100)|0;
 $5 = $gep17;
 __THREW__ = 0;
 invoke_vii(41,$__loc|0,$__iob|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 do {
  if ($7) {
   $expanded10 = 69;
   $68 = ___cxa_find_matching_catch(-1,-1)|0;
   $69 = tempRet0;
   HEAP32[$3>>2] = 0;
   
   $$0117 = $69;$$019 = $68;$135 = $2;
  } else {
   $gep_int18 = $__loc;
   $8 = $gep_int18;
   $9 = HEAP32[$8>>2]|0;
   $10 = $__p$i$i$i$i;
   
   $expanded1 = 8480;
   $gep_int19 = 8480;
   $expanded = $gep_int19;
   $11 = HEAP32[$expanded>>2]|0;
   $12 = ($11|0)==(-1);
   
   if ($12) {
    label = 4;
   } else {
    $gep_int20 = $__p$i$i$i$i;
    $13 = $gep_int20;
    $expanded2 = 8480;
    HEAP32[$13>>2] = $expanded2;
    $gep_int21 = $__p$i$i$i$i;
    $gep22 = (($gep_int21) + 4)|0;
    $14 = $gep22;
    $expanded3 = 177;
    HEAP32[$14>>2] = $expanded3;
    $gep_int23 = $__p$i$i$i$i;
    $gep24 = (($gep_int23) + 8)|0;
    $15 = $gep24;
    HEAP32[$15>>2] = 0;
    __THREW__ = 0;
    $expanded5 = 8480;
    $gep_int25 = 8480;
    $expanded4 = $gep_int25;
    invoke_viii(17,$expanded4|0,$10|0,178);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    
    if (!($17)) {
     label = 4;
    }
   }
   L5: do {
    if ((label|0) == 4) {
     
     $expanded7 = 8480;
     $gep_int26 = 8480;
     $gep27 = (($gep_int26) + 4)|0;
     $expanded6 = $gep27;
     $18 = HEAP32[$expanded6>>2]|0;
     $19 = (($18) + -1)|0;
     $gep_int28 = $9;
     $gep29 = (($gep_int28) + 12)|0;
     $20 = $gep29;
     $21 = HEAP32[$20>>2]|0;
     $gep_int30 = $9;
     $gep31 = (($gep_int30) + 8)|0;
     $22 = $gep31;
     $23 = HEAP32[$22>>2]|0;
     $24 = $21;
     $25 = $23;
     $26 = (($24) - ($25))|0;
     $27 = $26 >> 2;
     $28 = ($27>>>0)>($19>>>0);
     
     do {
      if ($28) {
       $gep_int32 = $23;
       $gep_array = $19<<2;
       $gep33 = (($gep_int32) + ($gep_array))|0;
       $29 = $gep33;
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)==(0);
       
       if ($31) {
        break;
       }
       $36 = $30;
       HEAP8[$__neg] = 0;
       $gep_int34 = $__e;
       $37 = $gep_int34;
       $38 = HEAP32[$37>>2]|0;
       $gep_int35 = $1;
       $39 = $gep_int35;
       HEAP32[$39>>2] = $38;
       $gep_int36 = $__iob;
       $gep37 = (($gep_int36) + 4)|0;
       $40 = $gep37;
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = $$byval_copy;
       
       $43 = $$byval_copy;
       $44 = $1;
       ;HEAP32[$43+0>>2]=HEAP32[$44+0>>2]|0;
       $45 = invoke_iiiiiiiiiiii(1,$__b|0,$$byval_copy|0,$__intl|0,$__loc|0,$41|0,$__err|0,$__neg|0,$36|0,$__wb|0,$__wn|0,$5|0)|0;
       $46 = $$byval_copy;
       
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       
       if ($48) {
        break L5;
       }
       
       if ($45) {
        $49 = $__v;
        $50 = HEAP8[$__v]|0;
        $51 = $50 & 1;
        $52 = ($51<<24>>24)==(0);
        
        if ($52) {
         $56 = $__v;
         $gep_int42 = $__v;
         $gep43 = (($gep_int42) + 1)|0;
         $57 = $gep43;
         HEAP8[$57] = 0;
         HEAP8[$__v] = 0;
         
        } else {
         $gep_int38 = $__v;
         $gep39 = (($gep_int38) + 8)|0;
         $53 = $gep39;
         $54 = HEAP32[$53>>2]|0;
         HEAP8[$54] = 0;
         $gep_int40 = $__v;
         $gep41 = (($gep_int40) + 4)|0;
         $55 = $gep41;
         HEAP32[$55>>2] = 0;
         
        }
        $58 = HEAP8[$__neg]|0;
        $59 = ($58<<24>>24)==(0);
        $$pre14 = $30;
        
        if (!($59)) {
         $60 = HEAP32[$30>>2]|0;
         $gep_int44 = $60;
         $gep45 = (($gep_int44) + 28)|0;
         $61 = $gep45;
         $62 = HEAP32[$61>>2]|0;
         __THREW__ = 0;
         $63 = invoke_iii($62|0,$36|0,45)|0;
         $64 = __THREW__; __THREW__ = 0;
         $65 = $64&1;
         
         if ($65) {
          break L5;
         }
         __THREW__ = 0;
         invoke_vii(61,$__v|0,$63|0);
         $66 = __THREW__; __THREW__ = 0;
         $67 = $66&1;
         
         if ($67) {
          break L5;
         }
        }
        $70 = HEAP32[$30>>2]|0;
        $gep_int46 = $70;
        $gep47 = (($gep_int46) + 28)|0;
        $71 = $gep47;
        $72 = HEAP32[$71>>2]|0;
        __THREW__ = 0;
        $73 = invoke_iii($72|0,$36|0,48)|0;
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        
        if ($75) {
         break L5;
        }
        $76 = HEAP32[$3>>2]|0;
        $77 = HEAP32[$__wn>>2]|0;
        $gep_int48 = $77;
        $gep49 = (($gep_int48) + -1)|0;
        $78 = $gep49;
        $79 = ($76>>>0)<($78>>>0);
        
        L22: do {
         if ($79) {
          $__w$09 = $76;
          while(1) {
           
           $81 = HEAP8[$__w$09]|0;
           $82 = ($81<<24>>24)==($73<<24>>24);
           $gep_int50 = $__w$09;
           $gep51 = (($gep_int50) + 1)|0;
           $83 = $gep51;
           
           if (!($82)) {
            $__w$0$lcssa = $__w$09;
            break L22;
           }
           $80 = ($83>>>0)<($78>>>0);
           
           if ($80) {
            $__w$09$phi = $83;$__w$09 = $__w$09$phi;
           } else {
            $__w$0$lcssa = $83;
            break;
           }
          }
         } else {
          $__w$0$lcssa = $76;
         }
        } while(0);
        
        __THREW__ = 0;
        u$51 = invoke_iiii(33,$__v|0,$__w$0$lcssa|0,$77|0)|0;
        $84 = __THREW__; __THREW__ = 0;
        $85 = $84&1;
        
        if ($85) {
         break L5;
        }
       }
       $gep_int52 = $__b;
       $86 = $gep_int52;
       $87 = HEAP32[$86>>2]|0;
       $88 = ($87|0)==(0);
       
       do {
        if ($88) {
         $102 = 0;
        } else {
         $gep_int53 = $87;
         $gep54 = (($gep_int53) + 12)|0;
         $89 = $gep54;
         $90 = HEAP32[$89>>2]|0;
         $gep_int55 = $87;
         $gep56 = (($gep_int55) + 16)|0;
         $91 = $gep56;
         $92 = HEAP32[$91>>2]|0;
         $93 = ($90|0)==($92|0);
         
         if (!($93)) {
          $102 = $87;
          break;
         }
         $94 = $87;
         $95 = HEAP32[$87>>2]|0;
         $gep_int57 = $95;
         $gep58 = (($gep_int57) + 36)|0;
         $96 = $gep58;
         $97 = HEAP32[$96>>2]|0;
         __THREW__ = 0;
         $98 = invoke_ii($97|0,$87|0)|0;
         $99 = __THREW__; __THREW__ = 0;
         $100 = $99&1;
         
         if ($100) {
          break L5;
         }
         $101 = ($98|0)==(-1);
         
         if (!($101)) {
          $102 = $87;
          break;
         }
         HEAP32[$86>>2] = 0;
         
         $102 = 0;
        }
       } while(0);
       
       $103 = ($102|0)==(0);
       $104 = ($38|0)==(0);
       
       do {
        if ($104) {
         label = 33;
        } else {
         $gep_int59 = $38;
         $gep60 = (($gep_int59) + 12)|0;
         $105 = $gep60;
         $106 = HEAP32[$105>>2]|0;
         $gep_int61 = $38;
         $gep62 = (($gep_int61) + 16)|0;
         $107 = $gep62;
         $108 = HEAP32[$107>>2]|0;
         $109 = ($106|0)==($108|0);
         
         if (!($109)) {
          
          if ($103) {
           break;
          } else {
           label = 35;
           break;
          }
         }
         $110 = $38;
         $111 = HEAP32[$38>>2]|0;
         $gep_int63 = $111;
         $gep64 = (($gep_int63) + 36)|0;
         $112 = $gep64;
         $113 = HEAP32[$112>>2]|0;
         __THREW__ = 0;
         $114 = invoke_ii($113|0,$38|0)|0;
         $115 = __THREW__; __THREW__ = 0;
         $116 = $115&1;
         
         if ($116) {
          break L5;
         }
         $117 = ($114|0)==(-1);
         
         if ($117) {
          HEAP32[$37>>2] = 0;
          
          label = 33;
          break;
         } else {
          $118 = ($38|0)==(0);
          $tmp$i$i = $103 ^ $118;
          
          if ($tmp$i$i) {
           break;
          } else {
           label = 35;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 33) {
        
        if ($103) {
         label = 35;
        }
       }
       if ((label|0) == 35) {
        $119 = HEAP32[$__err>>2]|0;
        $120 = $119 | 2;
        HEAP32[$__err>>2] = $120;
        
       }
       $gep_int65 = $agg$result;
       $121 = $gep_int65;
       HEAP32[$121>>2] = $102;
       $122 = HEAP32[$8>>2]|0;
       $gep_int66 = $122;
       $123 = $gep_int66;
       u$73 = __ZNSt3__114__shared_count16__release_sharedEv($123)|0;
       $124 = HEAP32[$3>>2]|0;
       HEAP32[$3>>2] = 0;
       $125 = ($124|0)==(0);
       
       if ($125) {
        
        STACKTOP = sp;return;
       }
       $126 = HEAP32[$4>>2]|0;
       __THREW__ = 0;
       invoke_vi($126|0,$124|0);
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       
       if ($128) {
        $expanded11 = 69;
        $129 = ___cxa_find_matching_catch(-1,-1,0)|0;
        u$79 = tempRet0;
        ___clang_call_terminate($129);
        // unreachable
       } else {
        
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $32 = ___cxa_allocate_exception(4)|0;
     $33 = $32;
     __ZNSt8bad_castC2Ev($33);
     __THREW__ = 0;
     $expanded8 = 16440;
     $expanded9 = 119;
     invoke_viii(5,$32|0,$expanded8|0,$expanded9|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     
     if ($35) {
      break;
     }
     // unreachable
    }
   } while(0);
   $expanded12 = 69;
   $130 = ___cxa_find_matching_catch(-1,-1)|0;
   $131 = tempRet0;
   $132 = HEAP32[$8>>2]|0;
   $gep_int67 = $132;
   $133 = $gep_int67;
   u$84 = __ZNSt3__114__shared_count16__release_sharedEv($133)|0;
   $$pre = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $134 = ($$pre|0)==(0);
   
   if ($134) {
    $$0118 = $131;$$020 = $130;
   } else {
    $$0117 = $131;$$019 = $130;$135 = $$pre;
    break;
   }
   
   
   ___resumeException($$020|0);
   // unreachable
  }
 } while(0);
 
 
 
 $136 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($136|0,$135|0);
 $137 = __THREW__; __THREW__ = 0;
 $138 = $137&1;
 
 if ($138) {
  $expanded13 = 69;
  $139 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$90 = tempRet0;
  ___clang_call_terminate($139);
  // unreachable
 } else {
  $$0118 = $$0117;$$020 = $$019;
  
  
  ___resumeException($$020|0);
  // unreachable
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$01$phi = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $__p$02$phi = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0;
 var $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $__first;
 $3 = HEAP8[$this]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 
 if ($5) {
  $6 = $3&255;
  $7 = $6 >>> 1;
  
  $14 = $7;$15 = $3;$16 = 10;
 } else {
  $gep_int = $this;
  $gep = (($gep_int) + 4)|0;
  $8 = $gep;
  $9 = HEAP32[$8>>2]|0;
  $gep_int1 = $this;
  $10 = $gep_int1;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & -2;
  $phitmp$i = (($12) + -1)|0;
  $13 = $11&255;
  
  $14 = $9;$15 = $13;$16 = $phitmp$i;
 }
 
 
 
 $17 = $__last;
 $18 = (($17) - ($2))|0;
 $19 = ($__last|0)==($__first|0);
 
 if ($19) {
  STACKTOP = sp;return $this|0;
 }
 $20 = (($16) - ($14))|0;
 $21 = ($20>>>0)<($18>>>0);
 
 if ($21) {
  $22 = (($14) + ($18))|0;
  $23 = (($22) - ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$23,$14,$14,0,0);
  $$pre = HEAP8[$this]|0;
  
  $24 = $$pre;
 } else {
  $24 = $15;
 }
 
 $25 = $24 & 1;
 $26 = ($25<<24>>24)==(0);
 
 if ($26) {
  $29 = $this;
  $gep_int4 = $this;
  $gep5 = (($gep_int4) + 1)|0;
  $30 = $gep5;
  
  $31 = $30;
 } else {
  $gep_int2 = $this;
  $gep3 = (($gep_int2) + 8)|0;
  $27 = $gep3;
  $28 = HEAP32[$27>>2]|0;
  
  $31 = $28;
 }
 
 $gep_int6 = $31;
 $gep7 = (($gep_int6) + ($14))|0;
 $32 = $gep7;
 $33 = (($14) - ($2))|0;
 $gep_int8 = $__last;
 $gep9 = (($gep_int8) + ($33))|0;
 $scevgep = $gep9;
 $scevgep3 = $scevgep;
 
 $$01 = $__first;$__p$02 = $32;
 while(1) {
  
  
  $34 = HEAP8[$$01]|0;
  HEAP8[$__p$02] = $34;
  $gep_int10 = $__p$02;
  $gep11 = (($gep_int10) + 1)|0;
  $35 = $gep11;
  $gep_int12 = $$01;
  $gep13 = (($gep_int12) + 1)|0;
  $36 = $gep13;
  $37 = ($36|0)==($__last|0);
  
  if ($37) {
   break;
  } else {
   $__p$02$phi = $35;$$01$phi = $36;$__p$02 = $__p$02$phi;$$01 = $$01$phi;
  }
 }
 $gep_int14 = $31;
 $gep15 = (($gep_int14) + ($scevgep3))|0;
 $scevgep4 = $gep15;
 HEAP8[$scevgep4] = 0;
 $38 = (($14) + ($18))|0;
 $39 = HEAP8[$this]|0;
 $40 = $39 & 1;
 $41 = ($40<<24>>24)==(0);
 
 if ($41) {
  $43 = $38 << 1;
  $44 = $43&255;
  HEAP8[$this] = $44;
  
  STACKTOP = sp;return $this|0;
 } else {
  $gep_int16 = $this;
  $gep17 = (($gep_int16) + 4)|0;
  $42 = $gep17;
  HEAP32[$42>>2] = $38;
  
  STACKTOP = sp;return $this|0;
 }
 return 0|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0;
 var $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0;
 var $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0, $gep106 = 0, $gep108 = 0, $gep110 = 0, $gep112 = 0, $gep114 = 0, $gep116 = 0, $gep118 = 0, $gep120 = 0, $gep122 = 0, $gep124 = 0, $gep126 = 0, $gep128 = 0, $gep130 = 0, $gep132 = 0, $gep134 = 0, $gep136 = 0;
 var $gep138 = 0, $gep32 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0;
 var $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep86 = 0, $gep88 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep98 = 0, $gep_array = 0, $gep_array97 = 0, $gep_int = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0;
 var $gep_int111 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0, $gep_int119 = 0, $gep_int121 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int127 = 0, $gep_int129 = 0, $gep_int131 = 0, $gep_int133 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int34 = 0;
 var $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0;
 var $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int83 = 0, $gep_int84 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int99 = 0, $storemerge = 0, $tmpcast = 0, $tmpcast1 = 0, label = 0, sp = 0, u$113 = 0;
 var u$130 = 0, u$149 = 0, u$166 = 0, u$27 = 0, u$44 = 0, u$63 = 0, u$80 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $__p$i$i$i$i8 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $2 = sp + 40|0;
 $3 = sp + 56|0;
 $4 = sp + 72|0;
 $5 = sp + 88|0;
 $6 = sp + 104|0;
 $7 = sp + 112|0;
 $8 = sp + 128|0;
 $9 = sp + 144|0;
 $10 = sp + 160|0;
 
 if ($__intl) {
  $tmpcast1 = $1;
  $gep_int = $__loc;
  $11 = $gep_int;
  $12 = HEAP32[$11>>2]|0;
  $13 = $__p$i$i$i$i;
  
  $expanded1 = 7920;
  $gep_int28 = 7920;
  $expanded = $gep_int28;
  $14 = HEAP32[$expanded>>2]|0;
  $15 = ($14|0)==(-1);
  
  if (!($15)) {
   $gep_int29 = $__p$i$i$i$i;
   $16 = $gep_int29;
   $expanded2 = 7920;
   HEAP32[$16>>2] = $expanded2;
   $gep_int30 = $__p$i$i$i$i;
   $gep = (($gep_int30) + 4)|0;
   $17 = $gep;
   $expanded3 = 177;
   HEAP32[$17>>2] = $expanded3;
   $gep_int31 = $__p$i$i$i$i;
   $gep32 = (($gep_int31) + 8)|0;
   $18 = $gep32;
   HEAP32[$18>>2] = 0;
   $expanded5 = 7920;
   $gep_int33 = 7920;
   $expanded4 = $gep_int33;
   __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded4,$13,178);
   
  }
  
  $expanded7 = 7920;
  $gep_int34 = 7920;
  $gep35 = (($gep_int34) + 4)|0;
  $expanded6 = $gep35;
  $19 = HEAP32[$expanded6>>2]|0;
  $20 = (($19) + -1)|0;
  $gep_int36 = $12;
  $gep37 = (($gep_int36) + 12)|0;
  $21 = $gep37;
  $22 = HEAP32[$21>>2]|0;
  $gep_int38 = $12;
  $gep39 = (($gep_int38) + 8)|0;
  $23 = $gep39;
  $24 = HEAP32[$23>>2]|0;
  $25 = $22;
  $26 = $24;
  $27 = (($25) - ($26))|0;
  $28 = $27 >> 2;
  $29 = ($28>>>0)>($20>>>0);
  
  if (!($29)) {
   $33 = ___cxa_allocate_exception(4)|0;
   $34 = $33;
   __ZNSt8bad_castC2Ev($34);
   $expanded8 = 16440;
   $expanded9 = 119;
   ___cxa_throw($33|0,$expanded8|0,$expanded9|0);
   // unreachable
  }
  $gep_int40 = $24;
  $gep_array = $20<<2;
  $gep41 = (($gep_int40) + ($gep_array))|0;
  $30 = $gep41;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  
  if ($32) {
   $33 = ___cxa_allocate_exception(4)|0;
   $34 = $33;
   __ZNSt8bad_castC2Ev($34);
   $expanded8 = 16440;
   $expanded9 = 119;
   ___cxa_throw($33|0,$expanded8|0,$expanded9|0);
   // unreachable
  }
  $35 = $31;
  $36 = $31;
  $37 = HEAP32[$31>>2]|0;
  $gep_int42 = $37;
  $gep43 = (($gep_int42) + 44)|0;
  $38 = $gep43;
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vii[$39 & 127]($tmpcast1,$35);
  $40 = $__pat;
  $41 = HEAP32[$1>>2]|0;
  HEAP8[$40]=$41&255;HEAP8[$40+1|0]=($41>>8)&255;HEAP8[$40+2|0]=($41>>16)&255;HEAP8[$40+3|0]=$41>>24;
  $42 = $31;
  $43 = HEAP32[$31>>2]|0;
  $gep_int44 = $43;
  $gep45 = (($gep_int44) + 32)|0;
  $44 = $gep45;
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$45 & 127]($2,$35);
  $46 = $__nsn;
  $47 = HEAP8[$__nsn]|0;
  $48 = $47 & 1;
  $49 = ($48<<24>>24)==(0);
  
  if ($49) {
   $53 = $__nsn;
   $gep_int50 = $__nsn;
   $gep51 = (($gep_int50) + 1)|0;
   $54 = $gep51;
   HEAP8[$54] = 0;
   HEAP8[$__nsn] = 0;
   
  } else {
   $gep_int46 = $__nsn;
   $gep47 = (($gep_int46) + 8)|0;
   $50 = $gep47;
   $51 = HEAP32[$50>>2]|0;
   HEAP8[$51] = 0;
   $gep_int48 = $__nsn;
   $gep49 = (($gep_int48) + 4)|0;
   $52 = $gep49;
   HEAP32[$52>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__nsn|0,0);
  $55 = __THREW__; __THREW__ = 0;
  $56 = $55&1;
  
  if ($56) {
   $expanded10 = 69;
   $57 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$27 = tempRet0;
   ___clang_call_terminate($57);
   // unreachable
  }
  $58 = $2;
  ;HEAP32[$46+0>>2]=HEAP32[$58+0>>2]|0;HEAP32[$46+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$58+8>>2]|0;
  ;HEAP32[$58+0>>2]=0|0;HEAP32[$58+4>>2]=0|0;HEAP32[$58+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $59 = HEAP32[$31>>2]|0;
  $gep_int52 = $59;
  $gep53 = (($gep_int52) + 28)|0;
  $60 = $gep53;
  $61 = HEAP32[$60>>2]|0;
  FUNCTION_TABLE_vii[$61 & 127]($3,$35);
  $62 = $__psn;
  $63 = HEAP8[$__psn]|0;
  $64 = $63 & 1;
  $65 = ($64<<24>>24)==(0);
  
  if ($65) {
   $69 = $__psn;
   $gep_int58 = $__psn;
   $gep59 = (($gep_int58) + 1)|0;
   $70 = $gep59;
   HEAP8[$70] = 0;
   HEAP8[$__psn] = 0;
   
  } else {
   $gep_int54 = $__psn;
   $gep55 = (($gep_int54) + 8)|0;
   $66 = $gep55;
   $67 = HEAP32[$66>>2]|0;
   HEAP8[$67] = 0;
   $gep_int56 = $__psn;
   $gep57 = (($gep_int56) + 4)|0;
   $68 = $gep57;
   HEAP32[$68>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__psn|0,0);
  $71 = __THREW__; __THREW__ = 0;
  $72 = $71&1;
  
  if ($72) {
   $expanded11 = 69;
   $73 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$44 = tempRet0;
   ___clang_call_terminate($73);
   // unreachable
  }
  $74 = $3;
  ;HEAP32[$62+0>>2]=HEAP32[$74+0>>2]|0;HEAP32[$62+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$74+8>>2]|0;
  ;HEAP32[$74+0>>2]=0|0;HEAP32[$74+4>>2]=0|0;HEAP32[$74+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $75 = $31;
  $76 = HEAP32[$31>>2]|0;
  $gep_int60 = $76;
  $gep61 = (($gep_int60) + 12)|0;
  $77 = $gep61;
  $78 = HEAP32[$77>>2]|0;
  $79 = FUNCTION_TABLE_ii[$78 & 127]($35)|0;
  HEAP8[$__dp] = $79;
  $80 = HEAP32[$31>>2]|0;
  $gep_int62 = $80;
  $gep63 = (($gep_int62) + 16)|0;
  $81 = $gep63;
  $82 = HEAP32[$81>>2]|0;
  $83 = FUNCTION_TABLE_ii[$82 & 127]($35)|0;
  HEAP8[$__ts] = $83;
  $84 = HEAP32[$31>>2]|0;
  $gep_int64 = $84;
  $gep65 = (($gep_int64) + 20)|0;
  $85 = $gep65;
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 127]($4,$35);
  $87 = $__grp;
  $88 = HEAP8[$__grp]|0;
  $89 = $88 & 1;
  $90 = ($89<<24>>24)==(0);
  
  if ($90) {
   $94 = $__grp;
   $gep_int70 = $__grp;
   $gep71 = (($gep_int70) + 1)|0;
   $95 = $gep71;
   HEAP8[$95] = 0;
   HEAP8[$__grp] = 0;
   
  } else {
   $gep_int66 = $__grp;
   $gep67 = (($gep_int66) + 8)|0;
   $91 = $gep67;
   $92 = HEAP32[$91>>2]|0;
   HEAP8[$92] = 0;
   $gep_int68 = $__grp;
   $gep69 = (($gep_int68) + 4)|0;
   $93 = $gep69;
   HEAP32[$93>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__grp|0,0);
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  
  if ($97) {
   $expanded12 = 69;
   $98 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$63 = tempRet0;
   ___clang_call_terminate($98);
   // unreachable
  }
  $99 = $4;
  ;HEAP32[$87+0>>2]=HEAP32[$99+0>>2]|0;HEAP32[$87+4>>2]=HEAP32[$99+4>>2]|0;HEAP32[$87+8>>2]=HEAP32[$99+8>>2]|0;
  ;HEAP32[$99+0>>2]=0|0;HEAP32[$99+4>>2]=0|0;HEAP32[$99+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $100 = HEAP32[$31>>2]|0;
  $gep_int72 = $100;
  $gep73 = (($gep_int72) + 24)|0;
  $101 = $gep73;
  $102 = HEAP32[$101>>2]|0;
  FUNCTION_TABLE_vii[$102 & 127]($5,$35);
  $103 = $__sym;
  $104 = HEAP8[$__sym]|0;
  $105 = $104 & 1;
  $106 = ($105<<24>>24)==(0);
  
  if ($106) {
   $110 = $__sym;
   $gep_int78 = $__sym;
   $gep79 = (($gep_int78) + 1)|0;
   $111 = $gep79;
   HEAP8[$111] = 0;
   HEAP8[$__sym] = 0;
   
  } else {
   $gep_int74 = $__sym;
   $gep75 = (($gep_int74) + 8)|0;
   $107 = $gep75;
   $108 = HEAP32[$107>>2]|0;
   HEAP8[$108] = 0;
   $gep_int76 = $__sym;
   $gep77 = (($gep_int76) + 4)|0;
   $109 = $gep77;
   HEAP32[$109>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__sym|0,0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  
  if ($113) {
   $expanded13 = 69;
   $114 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$80 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable
  }
  $115 = $5;
  ;HEAP32[$103+0>>2]=HEAP32[$115+0>>2]|0;HEAP32[$103+4>>2]=HEAP32[$115+4>>2]|0;HEAP32[$103+8>>2]=HEAP32[$115+8>>2]|0;
  ;HEAP32[$115+0>>2]=0|0;HEAP32[$115+4>>2]=0|0;HEAP32[$115+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $116 = $31;
  $117 = HEAP32[$31>>2]|0;
  $gep_int80 = $117;
  $gep81 = (($gep_int80) + 36)|0;
  $118 = $gep81;
  $119 = HEAP32[$118>>2]|0;
  $120 = FUNCTION_TABLE_ii[$119 & 127]($35)|0;
  
  $storemerge = $120;
  
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $tmpcast = $6;
  $gep_int82 = $__loc;
  $121 = $gep_int82;
  $122 = HEAP32[$121>>2]|0;
  $123 = $__p$i$i$i$i8;
  
  $expanded15 = 7856;
  $gep_int83 = 7856;
  $expanded14 = $gep_int83;
  $124 = HEAP32[$expanded14>>2]|0;
  $125 = ($124|0)==(-1);
  
  if (!($125)) {
   $gep_int84 = $__p$i$i$i$i8;
   $126 = $gep_int84;
   $expanded16 = 7856;
   HEAP32[$126>>2] = $expanded16;
   $gep_int85 = $__p$i$i$i$i8;
   $gep86 = (($gep_int85) + 4)|0;
   $127 = $gep86;
   $expanded17 = 177;
   HEAP32[$127>>2] = $expanded17;
   $gep_int87 = $__p$i$i$i$i8;
   $gep88 = (($gep_int87) + 8)|0;
   $128 = $gep88;
   HEAP32[$128>>2] = 0;
   $expanded19 = 7856;
   $gep_int89 = 7856;
   $expanded18 = $gep_int89;
   __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded18,$123,178);
   
  }
  
  $expanded21 = 7856;
  $gep_int90 = 7856;
  $gep91 = (($gep_int90) + 4)|0;
  $expanded20 = $gep91;
  $129 = HEAP32[$expanded20>>2]|0;
  $130 = (($129) + -1)|0;
  $gep_int92 = $122;
  $gep93 = (($gep_int92) + 12)|0;
  $131 = $gep93;
  $132 = HEAP32[$131>>2]|0;
  $gep_int94 = $122;
  $gep95 = (($gep_int94) + 8)|0;
  $133 = $gep95;
  $134 = HEAP32[$133>>2]|0;
  $135 = $132;
  $136 = $134;
  $137 = (($135) - ($136))|0;
  $138 = $137 >> 2;
  $139 = ($138>>>0)>($130>>>0);
  
  if (!($139)) {
   $143 = ___cxa_allocate_exception(4)|0;
   $144 = $143;
   __ZNSt8bad_castC2Ev($144);
   $expanded22 = 16440;
   $expanded23 = 119;
   ___cxa_throw($143|0,$expanded22|0,$expanded23|0);
   // unreachable
  }
  $gep_int96 = $134;
  $gep_array97 = $130<<2;
  $gep98 = (($gep_int96) + ($gep_array97))|0;
  $140 = $gep98;
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)==(0);
  
  if ($142) {
   $143 = ___cxa_allocate_exception(4)|0;
   $144 = $143;
   __ZNSt8bad_castC2Ev($144);
   $expanded22 = 16440;
   $expanded23 = 119;
   ___cxa_throw($143|0,$expanded22|0,$expanded23|0);
   // unreachable
  }
  $145 = $141;
  $146 = $141;
  $147 = HEAP32[$141>>2]|0;
  $gep_int99 = $147;
  $gep100 = (($gep_int99) + 44)|0;
  $148 = $gep100;
  $149 = HEAP32[$148>>2]|0;
  FUNCTION_TABLE_vii[$149 & 127]($tmpcast,$145);
  $150 = $__pat;
  $151 = HEAP32[$6>>2]|0;
  HEAP8[$150]=$151&255;HEAP8[$150+1|0]=($151>>8)&255;HEAP8[$150+2|0]=($151>>16)&255;HEAP8[$150+3|0]=$151>>24;
  $152 = $141;
  $153 = HEAP32[$141>>2]|0;
  $gep_int101 = $153;
  $gep102 = (($gep_int101) + 32)|0;
  $154 = $gep102;
  $155 = HEAP32[$154>>2]|0;
  FUNCTION_TABLE_vii[$155 & 127]($7,$145);
  $156 = $__nsn;
  $157 = HEAP8[$__nsn]|0;
  $158 = $157 & 1;
  $159 = ($158<<24>>24)==(0);
  
  if ($159) {
   $163 = $__nsn;
   $gep_int107 = $__nsn;
   $gep108 = (($gep_int107) + 1)|0;
   $164 = $gep108;
   HEAP8[$164] = 0;
   HEAP8[$__nsn] = 0;
   
  } else {
   $gep_int103 = $__nsn;
   $gep104 = (($gep_int103) + 8)|0;
   $160 = $gep104;
   $161 = HEAP32[$160>>2]|0;
   HEAP8[$161] = 0;
   $gep_int105 = $__nsn;
   $gep106 = (($gep_int105) + 4)|0;
   $162 = $gep106;
   HEAP32[$162>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__nsn|0,0);
  $165 = __THREW__; __THREW__ = 0;
  $166 = $165&1;
  
  if ($166) {
   $expanded24 = 69;
   $167 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$113 = tempRet0;
   ___clang_call_terminate($167);
   // unreachable
  }
  $168 = $7;
  ;HEAP32[$156+0>>2]=HEAP32[$168+0>>2]|0;HEAP32[$156+4>>2]=HEAP32[$168+4>>2]|0;HEAP32[$156+8>>2]=HEAP32[$168+8>>2]|0;
  ;HEAP32[$168+0>>2]=0|0;HEAP32[$168+4>>2]=0|0;HEAP32[$168+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $169 = HEAP32[$141>>2]|0;
  $gep_int109 = $169;
  $gep110 = (($gep_int109) + 28)|0;
  $170 = $gep110;
  $171 = HEAP32[$170>>2]|0;
  FUNCTION_TABLE_vii[$171 & 127]($8,$145);
  $172 = $__psn;
  $173 = HEAP8[$__psn]|0;
  $174 = $173 & 1;
  $175 = ($174<<24>>24)==(0);
  
  if ($175) {
   $179 = $__psn;
   $gep_int115 = $__psn;
   $gep116 = (($gep_int115) + 1)|0;
   $180 = $gep116;
   HEAP8[$180] = 0;
   HEAP8[$__psn] = 0;
   
  } else {
   $gep_int111 = $__psn;
   $gep112 = (($gep_int111) + 8)|0;
   $176 = $gep112;
   $177 = HEAP32[$176>>2]|0;
   HEAP8[$177] = 0;
   $gep_int113 = $__psn;
   $gep114 = (($gep_int113) + 4)|0;
   $178 = $gep114;
   HEAP32[$178>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__psn|0,0);
  $181 = __THREW__; __THREW__ = 0;
  $182 = $181&1;
  
  if ($182) {
   $expanded25 = 69;
   $183 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$130 = tempRet0;
   ___clang_call_terminate($183);
   // unreachable
  }
  $184 = $8;
  ;HEAP32[$172+0>>2]=HEAP32[$184+0>>2]|0;HEAP32[$172+4>>2]=HEAP32[$184+4>>2]|0;HEAP32[$172+8>>2]=HEAP32[$184+8>>2]|0;
  ;HEAP32[$184+0>>2]=0|0;HEAP32[$184+4>>2]=0|0;HEAP32[$184+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $185 = $141;
  $186 = HEAP32[$141>>2]|0;
  $gep_int117 = $186;
  $gep118 = (($gep_int117) + 12)|0;
  $187 = $gep118;
  $188 = HEAP32[$187>>2]|0;
  $189 = FUNCTION_TABLE_ii[$188 & 127]($145)|0;
  HEAP8[$__dp] = $189;
  $190 = HEAP32[$141>>2]|0;
  $gep_int119 = $190;
  $gep120 = (($gep_int119) + 16)|0;
  $191 = $gep120;
  $192 = HEAP32[$191>>2]|0;
  $193 = FUNCTION_TABLE_ii[$192 & 127]($145)|0;
  HEAP8[$__ts] = $193;
  $194 = HEAP32[$141>>2]|0;
  $gep_int121 = $194;
  $gep122 = (($gep_int121) + 20)|0;
  $195 = $gep122;
  $196 = HEAP32[$195>>2]|0;
  FUNCTION_TABLE_vii[$196 & 127]($9,$145);
  $197 = $__grp;
  $198 = HEAP8[$__grp]|0;
  $199 = $198 & 1;
  $200 = ($199<<24>>24)==(0);
  
  if ($200) {
   $204 = $__grp;
   $gep_int127 = $__grp;
   $gep128 = (($gep_int127) + 1)|0;
   $205 = $gep128;
   HEAP8[$205] = 0;
   HEAP8[$__grp] = 0;
   
  } else {
   $gep_int123 = $__grp;
   $gep124 = (($gep_int123) + 8)|0;
   $201 = $gep124;
   $202 = HEAP32[$201>>2]|0;
   HEAP8[$202] = 0;
   $gep_int125 = $__grp;
   $gep126 = (($gep_int125) + 4)|0;
   $203 = $gep126;
   HEAP32[$203>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__grp|0,0);
  $206 = __THREW__; __THREW__ = 0;
  $207 = $206&1;
  
  if ($207) {
   $expanded26 = 69;
   $208 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$149 = tempRet0;
   ___clang_call_terminate($208);
   // unreachable
  }
  $209 = $9;
  ;HEAP32[$197+0>>2]=HEAP32[$209+0>>2]|0;HEAP32[$197+4>>2]=HEAP32[$209+4>>2]|0;HEAP32[$197+8>>2]=HEAP32[$209+8>>2]|0;
  ;HEAP32[$209+0>>2]=0|0;HEAP32[$209+4>>2]=0|0;HEAP32[$209+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $210 = HEAP32[$141>>2]|0;
  $gep_int129 = $210;
  $gep130 = (($gep_int129) + 24)|0;
  $211 = $gep130;
  $212 = HEAP32[$211>>2]|0;
  FUNCTION_TABLE_vii[$212 & 127]($10,$145);
  $213 = $__sym;
  $214 = HEAP8[$__sym]|0;
  $215 = $214 & 1;
  $216 = ($215<<24>>24)==(0);
  
  if ($216) {
   $220 = $__sym;
   $gep_int135 = $__sym;
   $gep136 = (($gep_int135) + 1)|0;
   $221 = $gep136;
   HEAP8[$221] = 0;
   HEAP8[$__sym] = 0;
   
  } else {
   $gep_int131 = $__sym;
   $gep132 = (($gep_int131) + 8)|0;
   $217 = $gep132;
   $218 = HEAP32[$217>>2]|0;
   HEAP8[$218] = 0;
   $gep_int133 = $__sym;
   $gep134 = (($gep_int133) + 4)|0;
   $219 = $gep134;
   HEAP32[$219>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__sym|0,0);
  $222 = __THREW__; __THREW__ = 0;
  $223 = $222&1;
  
  if ($223) {
   $expanded27 = 69;
   $224 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$166 = tempRet0;
   ___clang_call_terminate($224);
   // unreachable
  }
  $225 = $10;
  ;HEAP32[$213+0>>2]=HEAP32[$225+0>>2]|0;HEAP32[$213+4>>2]=HEAP32[$225+4>>2]|0;HEAP32[$213+8>>2]=HEAP32[$225+8>>2]|0;
  ;HEAP32[$225+0>>2]=0|0;HEAP32[$225+4>>2]=0|0;HEAP32[$225+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $226 = $141;
  $227 = HEAP32[$141>>2]|0;
  $gep_int137 = $227;
  $gep138 = (($gep_int137) + 36)|0;
  $228 = $gep138;
  $229 = HEAP32[$228>>2]|0;
  $230 = FUNCTION_TABLE_ii[$229 & 127]($145)|0;
  
  $storemerge = $230;
  
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$012$i$i$phi = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $14$phi = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0;
 var $gep_int17 = 0, $gep_int19 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__grouping;
 $2 = HEAP8[$__grouping]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 
 if ($4) {
  $7 = $2&255;
  $8 = $7 >>> 1;
  
  $9 = $8;
 } else {
  $gep_int = $__grouping;
  $gep = (($gep_int) + 4)|0;
  $5 = $gep;
  $6 = HEAP32[$5>>2]|0;
  
  $9 = $6;
 }
 
 $10 = ($9|0)==(0);
 
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ($__g|0)==($__g_end|0);
 
 do {
  if ($11) {
   $20 = $2;
  } else {
   $gep_int1 = $__g_end;
   $gep2 = (($gep_int1) + -4)|0;
   $12 = $gep2;
   $13 = ($12>>>0)>($__g>>>0);
   
   if ($13) {
    $$012$i$i = $__g;$14 = $12;
   } else {
    $20 = $2;
    break;
   }
   while(1) {
    
    
    $15 = HEAP32[$$012$i$i>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $16;
    HEAP32[$14>>2] = $15;
    $gep_int3 = $$012$i$i;
    $gep4 = (($gep_int3) + 4)|0;
    $17 = $gep4;
    $gep_int5 = $14;
    $gep6 = (($gep_int5) + -4)|0;
    $18 = $gep6;
    $19 = ($17>>>0)<($18>>>0);
    
    if ($19) {
     $14$phi = $18;$$012$i$i$phi = $17;$14 = $14$phi;$$012$i$i = $$012$i$i$phi;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping]|0;
   
   $20 = $$pre;
  }
 } while(0);
 
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 
 if ($22) {
  $27 = $__grouping;
  $gep_int11 = $__grouping;
  $gep12 = (($gep_int11) + 1)|0;
  $28 = $gep12;
  $29 = $20&255;
  $30 = $29 >>> 1;
  
  $31 = $28;$32 = $30;
 } else {
  $gep_int7 = $__grouping;
  $gep8 = (($gep_int7) + 8)|0;
  $23 = $gep8;
  $24 = HEAP32[$23>>2]|0;
  $gep_int9 = $__grouping;
  $gep10 = (($gep_int9) + 4)|0;
  $25 = $gep10;
  $26 = HEAP32[$25>>2]|0;
  
  $31 = $24;$32 = $26;
 }
 
 
 $gep_int13 = $__g_end;
 $gep14 = (($gep_int13) + -4)|0;
 $33 = $gep14;
 $34 = ($33>>>0)>($__g>>>0);
 $35 = HEAP8[$31]|0;
 $$not9 = ($35<<24>>24)<(1);
 $36 = ($35<<24>>24)==(127);
 $or$cond210 = $$not9 | $36;
 
 L18: do {
  if ($34) {
   $gep_int15 = $31;
   $gep16 = (($gep_int15) + ($32))|0;
   $37 = $gep16;
   $38 = $37;
   
   $39 = $35;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    
    
    
    
    
    if (!($or$cond213)) {
     $40 = $39 << 24 >> 24;
     $41 = HEAP32[$__r$012>>2]|0;
     $42 = ($40|0)==($41|0);
     
     if (!($42)) {
      break;
     }
    }
    $43 = $__ig$011;
    $44 = (($38) - ($43))|0;
    $45 = ($44|0)>(1);
    $gep_int17 = $__ig$011;
    $gep18 = (($gep_int17) + 1)|0;
    $46 = $gep18;
    $$__ig$0 = $45 ? $46 : $__ig$011;
    $gep_int19 = $__r$012;
    $gep20 = (($gep_int19) + 4)|0;
    $47 = $gep20;
    $48 = ($47>>>0)<($33>>>0);
    $49 = HEAP8[$$__ig$0]|0;
    $$not = ($49<<24>>24)<(1);
    $50 = ($49<<24>>24)==(127);
    $or$cond2 = $$not | $50;
    
    if ($48) {
     $39 = $49;$__ig$011 = $$__ig$0;$__r$012 = $47;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $49;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $35;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 
 
 
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $51 = $$lcssa6 << 24 >> 24;
 $52 = HEAP32[$33>>2]|0;
 $53 = ($51>>>0)<($52>>>0);
 $54 = ($52|0)==(0);
 $or$cond = $53 | $54;
 
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$01$i$phi = 0, $$116 = 0, $$117 = 0, $$1214 = 0, $$1215 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre19 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$210 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$011 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0;
 var $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0;
 var $gep = 0, $gep31 = 0, $gep36 = 0, $gep38 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep51 = 0, $gep54 = 0, $gep57 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep76 = 0, $gep78 = 0, $gep80 = 0;
 var $gep82 = 0, $gep84 = 0, $gep86 = 0, $gep_array = 0, $gep_int = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int49 = 0;
 var $gep_int50 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int72 = 0, $gep_int73 = 0, $gep_int74 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0;
 var $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int88 = 0, $gep_int89 = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, $vararg_func = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$102 = 0, u$107 = 0, u$114 = 0, u$32 = 0, u$96 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__wbuf = STACKTOP; STACKTOP = STACKTOP + 400|0;
 $__wb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__wn = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__loc = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__neg = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__atoms = STACKTOP; STACKTOP = STACKTOP + 40|0;
 $__nbuf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $2 = $__wbuf;
 
 $gep_int = $__wbuf;
 $3 = $gep_int;
 $gep_int28 = $__wb;
 $4 = $gep_int28;
 HEAP32[$4>>2] = $3;
 $gep_int29 = $__wb;
 $gep = (($gep_int29) + 4)|0;
 $5 = $gep;
 HEAP32[$5>>2] = 181;
 $gep_int30 = $__wbuf;
 $gep31 = (($gep_int30) + 400)|0;
 $6 = $gep31;
 __THREW__ = 0;
 invoke_vii(41,$__loc|0,$__iob|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 
 do {
  if ($8) {
   $expanded17 = 69;
   $71 = ___cxa_find_matching_catch(-1,-1)|0;
   $72 = tempRet0;
   HEAP32[$4>>2] = 0;
   
   $$116 = $71;$$1214 = $72;$162 = 181;$163 = $3;
  } else {
   $gep_int32 = $__loc;
   $9 = $gep_int32;
   $10 = HEAP32[$9>>2]|0;
   $11 = $__p$i$i$i$i;
   
   $expanded6 = 8472;
   $gep_int33 = 8472;
   $expanded = $gep_int33;
   $12 = HEAP32[$expanded>>2]|0;
   $13 = ($12|0)==(-1);
   
   if ($13) {
    label = 4;
   } else {
    $gep_int34 = $__p$i$i$i$i;
    $14 = $gep_int34;
    $expanded7 = 8472;
    HEAP32[$14>>2] = $expanded7;
    $gep_int35 = $__p$i$i$i$i;
    $gep36 = (($gep_int35) + 4)|0;
    $15 = $gep36;
    $expanded8 = 177;
    HEAP32[$15>>2] = $expanded8;
    $gep_int37 = $__p$i$i$i$i;
    $gep38 = (($gep_int37) + 8)|0;
    $16 = $gep38;
    HEAP32[$16>>2] = 0;
    __THREW__ = 0;
    $expanded10 = 8472;
    $gep_int39 = 8472;
    $expanded9 = $gep_int39;
    invoke_viii(17,$expanded9|0,$11|0,178);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    
    if ($18) {
     label = 15;
    } else {
     label = 4;
    }
   }
   L6: do {
    if ((label|0) == 4) {
     
     $expanded12 = 8472;
     $gep_int40 = 8472;
     $gep41 = (($gep_int40) + 4)|0;
     $expanded11 = $gep41;
     $19 = HEAP32[$expanded11>>2]|0;
     $20 = (($19) + -1)|0;
     $gep_int42 = $10;
     $gep43 = (($gep_int42) + 12)|0;
     $21 = $gep43;
     $22 = HEAP32[$21>>2]|0;
     $gep_int44 = $10;
     $gep45 = (($gep_int44) + 8)|0;
     $23 = $gep45;
     $24 = HEAP32[$23>>2]|0;
     $25 = $22;
     $26 = $24;
     $27 = (($25) - ($26))|0;
     $28 = $27 >> 2;
     $29 = ($28>>>0)>($20>>>0);
     
     do {
      if ($29) {
       $gep_int46 = $24;
       $gep_array = $20<<2;
       $gep47 = (($gep_int46) + ($gep_array))|0;
       $30 = $gep47;
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==(0);
       
       if ($32) {
        break;
       }
       $37 = $31;
       HEAP8[$__neg] = 0;
       $gep_int48 = $__e;
       $38 = $gep_int48;
       $39 = HEAP32[$38>>2]|0;
       $gep_int49 = $1;
       $40 = $gep_int49;
       HEAP32[$40>>2] = $39;
       $gep_int50 = $__iob;
       $gep51 = (($gep_int50) + 4)|0;
       $41 = $gep51;
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = $$byval_copy;
       
       $44 = $$byval_copy;
       $45 = $1;
       ;HEAP32[$44+0>>2]=HEAP32[$45+0>>2]|0;
       $46 = invoke_iiiiiiiiiiii(2,$__b|0,$$byval_copy|0,$__intl|0,$__loc|0,$42|0,$__err|0,$__neg|0,$37|0,$__wb|0,$__wn|0,$6|0)|0;
       $47 = $$byval_copy;
       
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       
       if ($49) {
        label = 15;
        break L6;
       }
       
       L12: do {
        if ($46) {
         $50 = $__atoms;
         
         $gep_int52 = $__atoms;
         $51 = $gep_int52;
         $52 = $31;
         $53 = HEAP32[$31>>2]|0;
         $gep_int53 = $53;
         $gep54 = (($gep_int53) + 48)|0;
         $54 = $gep54;
         $55 = HEAP32[$54>>2]|0;
         __THREW__ = 0;
         $gep_int55 = 8176;
         $expanded15 = $gep_int55;
         $gep_int56 = 8176;
         $gep57 = (($gep_int56) + 10)|0;
         $expanded16 = $gep57;
         u$32 = invoke_iiiii($55|0,$37|0,$expanded15|0,$expanded16|0,$51|0)|0;
         $56 = __THREW__; __THREW__ = 0;
         $57 = $56&1;
         
         if ($57) {
          label = 15;
          break L6;
         }
         $gep_int58 = $__nbuf;
         $58 = $gep_int58;
         
         $59 = HEAP32[$__wn>>2]|0;
         $60 = HEAP32[$4>>2]|0;
         $61 = $59;
         $62 = $60;
         $63 = (($61) - ($62))|0;
         $64 = ($63|0)>(392);
         
         do {
          if ($64) {
           $65 = $63 >> 2;
           $66 = (($65) + 2)|0;
           $67 = _malloc($66)|0;
           $68 = ($67|0)==(0);
           
           if (!($68)) {
            $80 = $67;$__nc$0 = $67;
            label = 19;
            break;
           }
           __THREW__ = 0;
           invoke_v(13);
           $69 = __THREW__; __THREW__ = 0;
           $70 = $69&1;
           
           if ($70) {
            $75 = 0;
            label = 16;
           } else {
            $80 = 0;$__nc$0 = 0;
            label = 19;
           }
          } else {
           $80 = 0;$__nc$0 = $58;
           label = 19;
          }
         } while(0);
         do {
          if ((label|0) == 19) {
           
           
           $81 = HEAP8[$__neg]|0;
           $82 = ($81<<24>>24)==(0);
           
           if ($82) {
            $__nc$1 = $__nc$0;
           } else {
            $gep_int59 = $__nc$0;
            $gep60 = (($gep_int59) + 1)|0;
            $83 = $gep60;
            HEAP8[$__nc$0] = 45;
            
            $__nc$1 = $83;
           }
           
           $84 = ($60>>>0)<($59>>>0);
           
           if ($84) {
            $gep_int61 = $__atoms;
            $gep62 = (($gep_int61) + 40)|0;
            $85 = $gep62;
            $86 = $__atoms;
            
            $__nc$210 = $__nc$1;$__w$011 = $60;
            while(1) {
             
             
             $87 = HEAP32[$__w$011>>2]|0;
             
             $$01$i = $51;
             while(1) {
              
              $89 = HEAP32[$$01$i>>2]|0;
              $90 = ($89|0)==($87|0);
              $gep_int63 = $$01$i;
              $gep64 = (($gep_int63) + 4)|0;
              $91 = $gep64;
              
              if ($90) {
               $$0$lcssa$i = $$01$i;
               break;
              }
              $88 = ($91|0)==($85|0);
              
              if ($88) {
               $$0$lcssa$i = $85;
               break;
              } else {
               $$01$i$phi = $91;$$01$i = $$01$i$phi;
              }
             }
             
             $92 = $$0$lcssa$i;
             $93 = (($92) - ($86))|0;
             $94 = $93 >> 2;
             $gep_int65 = 8176;
             $gep66 = (($gep_int65) + ($94))|0;
             $95 = $gep66;
             $96 = HEAP8[$95]|0;
             HEAP8[$__nc$210] = $96;
             $gep_int67 = $__w$011;
             $gep68 = (($gep_int67) + 4)|0;
             $97 = $gep68;
             $gep_int69 = $__nc$210;
             $gep70 = (($gep_int69) + 1)|0;
             $98 = $gep70;
             $99 = HEAP32[$__wn>>2]|0;
             $100 = ($97>>>0)<($99>>>0);
             
             if ($100) {
              $__nc$210 = $98;$__w$011 = $97;
             } else {
              $__nc$2$lcssa = $98;
              break;
             }
            }
           } else {
            $__nc$2$lcssa = $__nc$1;
           }
           
           HEAP8[$__nc$2$lcssa] = 0;
           
           $gep_int71 = $vararg_buffer;
           $vararg_ptr = $gep_int71;
           HEAP32[$vararg_ptr>>2] = $__v;
           $expanded20 = 32;
           $vararg_func = $expanded20;
           $gep_int72 = 8112;
           $expanded21 = $gep_int72;
           $101 = _sscanf($58|0,$expanded21|0,$vararg_buffer|0)|0;
           
           $102 = ($101|0)==(1);
           
           if ($102) {
            $111 = ($80|0)==(0);
            
            if ($111) {
             break L12;
            }
            _free($80);
            
            break L12;
           }
           $103 = ___cxa_allocate_exception(8)|0;
           $104 = $103;
           __THREW__ = 0;
           $gep_int73 = 8120;
           $expanded22 = $gep_int73;
           invoke_vii(44,$104|0,$expanded22|0);
           $105 = __THREW__; __THREW__ = 0;
           $106 = $105&1;
           
           if ($106) {
            $expanded25 = 69;
            $109 = ___cxa_find_matching_catch(-1,-1)|0;
            $110 = tempRet0;
            ___cxa_free_exception($103|0);
            
            $78 = $80;$eh$lpad$body$index2Z2D = $110;$eh$lpad$body$indexZ2D = $109;
            break;
           }
           __THREW__ = 0;
           $expanded23 = 5392;
           $expanded24 = 35;
           invoke_viii(5,$103|0,$expanded23|0,$expanded24|0);
           $107 = __THREW__; __THREW__ = 0;
           $108 = $107&1;
           
           if ($108) {
            $75 = $80;
            label = 16;
            break;
           }
           // unreachable
          }
         } while(0);
         if ((label|0) == 16) {
          
          $expanded19 = 69;
          $76 = ___cxa_find_matching_catch(-1,-1)|0;
          $77 = tempRet0;
          
          $78 = $75;$eh$lpad$body$index2Z2D = $77;$eh$lpad$body$indexZ2D = $76;
         }
         
         
         
         $79 = ($78|0)==(0);
         
         if ($79) {
          $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
          break L6;
         }
         _free($78);
         
         $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
         break L6;
        }
       } while(0);
       $gep_int74 = $__b;
       $112 = $gep_int74;
       $113 = HEAP32[$112>>2]|0;
       $114 = ($113|0)==(0);
       
       do {
        if ($114) {
         $129 = 1;
        } else {
         $gep_int75 = $113;
         $gep76 = (($gep_int75) + 12)|0;
         $115 = $gep76;
         $116 = HEAP32[$115>>2]|0;
         $gep_int77 = $113;
         $gep78 = (($gep_int77) + 16)|0;
         $117 = $gep78;
         $118 = HEAP32[$117>>2]|0;
         $119 = ($116|0)==($118|0);
         
         if ($119) {
          $120 = $113;
          $121 = HEAP32[$113>>2]|0;
          $gep_int79 = $121;
          $gep80 = (($gep_int79) + 36)|0;
          $122 = $gep80;
          $123 = HEAP32[$122>>2]|0;
          __THREW__ = 0;
          $124 = invoke_ii($123|0,$113|0)|0;
          $125 = __THREW__; __THREW__ = 0;
          $126 = $125&1;
          
          if ($126) {
           label = 15;
           break L6;
          } else {
           $$0$i$i$i$i = $124;
          }
         } else {
          $127 = HEAP32[$116>>2]|0;
          
          $$0$i$i$i$i = $127;
         }
         
         $128 = ($$0$i$i$i$i|0)==(-1);
         
         if ($128) {
          HEAP32[$112>>2] = 0;
          
          $129 = 1;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$112>>2]|0;
          $phitmp$i$i$i = ($$pre$i$i$i|0)==(0);
          
          $129 = $phitmp$i$i$i;
          break;
         }
        }
       } while(0);
       
       $130 = HEAP32[$38>>2]|0;
       $131 = ($130|0)==(0);
       
       do {
        if ($131) {
         label = 47;
        } else {
         $gep_int81 = $130;
         $gep82 = (($gep_int81) + 12)|0;
         $132 = $gep82;
         $133 = HEAP32[$132>>2]|0;
         $gep_int83 = $130;
         $gep84 = (($gep_int83) + 16)|0;
         $134 = $gep84;
         $135 = HEAP32[$134>>2]|0;
         $136 = ($133|0)==($135|0);
         
         if ($136) {
          $137 = $130;
          $138 = HEAP32[$130>>2]|0;
          $gep_int85 = $138;
          $gep86 = (($gep_int85) + 36)|0;
          $139 = $gep86;
          $140 = HEAP32[$139>>2]|0;
          __THREW__ = 0;
          $141 = invoke_ii($140|0,$130|0)|0;
          $142 = __THREW__; __THREW__ = 0;
          $143 = $142&1;
          
          if ($143) {
           label = 15;
           break L6;
          } else {
           $$0$i$i1$i$i = $141;
          }
         } else {
          $144 = HEAP32[$133>>2]|0;
          
          $$0$i$i1$i$i = $144;
         }
         
         $145 = ($$0$i$i1$i$i|0)==(-1);
         
         if ($145) {
          HEAP32[$38>>2] = 0;
          
          label = 47;
          break;
         } else {
          
          if ($129) {
           break;
          } else {
           label = 49;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 47) {
        
        if ($129) {
         label = 49;
        }
       }
       if ((label|0) == 49) {
        $146 = HEAP32[$__err>>2]|0;
        $147 = $146 | 2;
        HEAP32[$__err>>2] = $147;
        
       }
       $148 = HEAP32[$112>>2]|0;
       $gep_int87 = $agg$result;
       $149 = $gep_int87;
       HEAP32[$149>>2] = $148;
       $150 = HEAP32[$9>>2]|0;
       $gep_int88 = $150;
       $151 = $gep_int88;
       u$96 = __ZNSt3__114__shared_count16__release_sharedEv($151)|0;
       $152 = HEAP32[$4>>2]|0;
       HEAP32[$4>>2] = 0;
       $153 = ($152|0)==(0);
       
       if ($153) {
        
        STACKTOP = sp;return;
       }
       $154 = HEAP32[$5>>2]|0;
       $155 = $152;
       __THREW__ = 0;
       invoke_vi($154|0,$155|0);
       $156 = __THREW__; __THREW__ = 0;
       $157 = $156&1;
       
       if ($157) {
        $expanded26 = 69;
        $158 = ___cxa_find_matching_catch(-1,-1,0)|0;
        u$102 = tempRet0;
        ___clang_call_terminate($158);
        // unreachable
       } else {
        
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $33 = ___cxa_allocate_exception(4)|0;
     $34 = $33;
     __ZNSt8bad_castC2Ev($34);
     __THREW__ = 0;
     $expanded13 = 16440;
     $expanded14 = 119;
     invoke_viii(5,$33|0,$expanded13|0,$expanded14|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     
     if ($36) {
      label = 15;
      break;
     }
     // unreachable
    }
   } while(0);
   if ((label|0) == 15) {
    $expanded18 = 69;
    $73 = ___cxa_find_matching_catch(-1,-1)|0;
    $74 = tempRet0;
    
    $$0 = $73;$$01 = $74;
   }
   
   
   $159 = HEAP32[$9>>2]|0;
   $gep_int89 = $159;
   $160 = $gep_int89;
   u$107 = __ZNSt3__114__shared_count16__release_sharedEv($160)|0;
   $$pre = HEAP32[$4>>2]|0;
   HEAP32[$4>>2] = 0;
   $161 = ($$pre|0)==(0);
   
   if ($161) {
    $$117 = $$0;$$1215 = $$01;
    
    
    ___resumeException($$117|0);
    // unreachable
   } else {
    $$pre19 = HEAP32[$5>>2]|0;
    
    $$116 = $$0;$$1214 = $$01;$162 = $$pre19;$163 = $$pre;
    break;
   }
  }
 } while(0);
 
 
 
 
 $164 = $163;
 __THREW__ = 0;
 invoke_vi($162|0,$164|0);
 $165 = __THREW__; __THREW__ = 0;
 $166 = $165&1;
 
 if ($166) {
  $expanded27 = 69;
  $167 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$114 = tempRet0;
  ___clang_call_terminate($167);
  // unreachable
 } else {
  $$117 = $$116;$$1215 = $$1214;
  
  
  ___resumeException($$117|0);
  // unreachable
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i140 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i112 = 0, $$0$i$i$i$i158 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i183 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i78 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i118 = 0, $$0$i$i1$i$i164 = 0, $$0$i$i1$i$i189 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0, $$0$i$i1$i$i84 = 0, $$0$i$i105 = 0;
 var $$0$i$i108 = 0, $$0$i$i130 = 0, $$0$i$i155 = 0, $$0$i$i179 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i72 = 0, $$0$i$i75 = 0, $$0$i$i96 = 0, $$422 = 0, $$423 = 0, $$424 = 0, $$425 = 0, $$426 = 0, $$427 = 0, $$428 = 0, $$lcssa285 = 0;
 var $$lcssa300 = 0, $$ph$ph = 0, $$ph$ph237$ph$ph$ph$ph$ph = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i114 = 0, $$pre$i$i$i160 = 0, $$pre$i$i$i185 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i80 = 0, $$pre$i3$i$i191 = 0, $$pre$i3$i$i191399 = 0, $$pre$i3$i$i191400 = 0, $$pre$i3$i$i47 = 0, $$pre$i3$i$i47396 = 0, $$pre$i3$i$i47398 = 0, $$pre$i3$i$i86 = 0, $$pre$i3$i$i86403$ph = 0, $$pre$i3$i$i86403420 = 0;
 var $$pre410 = 0, $$pre411 = 0, $$pre412 = 0, $$pre413 = 0, $$pre414 = 0, $$pre415 = 0, $$sum = 0, $$sum416 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0;
 var $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0341 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0343 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0;
 var $expanded = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $free = 0, $free212 = 0, $free213 = 0, $free214$lcssa = 0, $free214336 = 0, $free215 = 0, $free216 = 0, $free217 = 0, $free218 = 0, $free218$ph$ph = 0;
 var $free218$ph$ph236$ph$ph$ph$ph$ph = 0, $free220 = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0, $gep106 = 0, $gep108 = 0, $gep110 = 0, $gep112 = 0, $gep114 = 0, $gep116 = 0, $gep118 = 0, $gep120 = 0, $gep122 = 0, $gep124 = 0, $gep126 = 0, $gep128 = 0, $gep130 = 0, $gep132 = 0;
 var $gep134 = 0, $gep136 = 0, $gep138 = 0, $gep140 = 0, $gep142 = 0, $gep144 = 0, $gep146 = 0, $gep148 = 0, $gep150 = 0, $gep152 = 0, $gep154 = 0, $gep156 = 0, $gep158 = 0, $gep160 = 0, $gep162 = 0, $gep164 = 0, $gep167 = 0, $gep170 = 0, $gep173 = 0, $gep175 = 0;
 var $gep177 = 0, $gep180 = 0, $gep182 = 0, $gep184 = 0, $gep186 = 0, $gep188 = 0, $gep190 = 0, $gep192 = 0, $gep194 = 0, $gep196 = 0, $gep198 = 0, $gep200 = 0, $gep202 = 0, $gep204 = 0, $gep206 = 0, $gep208 = 0, $gep211 = 0, $gep213 = 0, $gep215 = 0, $gep217 = 0;
 var $gep219 = 0, $gep221 = 0, $gep223 = 0, $gep225 = 0, $gep227 = 0, $gep229 = 0, $gep231 = 0, $gep233 = 0, $gep236 = 0, $gep239 = 0, $gep241 = 0, $gep243 = 0, $gep245 = 0, $gep247 = 0, $gep249 = 0, $gep252 = 0, $gep255 = 0, $gep257 = 0, $gep259 = 0, $gep261 = 0;
 var $gep263 = 0, $gep265 = 0, $gep267 = 0, $gep269 = 0, $gep271 = 0, $gep273 = 0, $gep275 = 0, $gep277 = 0, $gep279 = 0, $gep281 = 0, $gep283 = 0, $gep285 = 0, $gep287 = 0, $gep289 = 0, $gep291 = 0, $gep293 = 0, $gep295 = 0, $gep297 = 0, $gep299 = 0, $gep301 = 0;
 var $gep303 = 0, $gep305 = 0, $gep307 = 0, $gep309 = 0, $gep311 = 0, $gep313 = 0, $gep315 = 0, $gep317 = 0, $gep319 = 0, $gep32 = 0, $gep321 = 0, $gep323 = 0, $gep325 = 0, $gep327 = 0, $gep329 = 0, $gep331 = 0, $gep333 = 0, $gep335 = 0, $gep337 = 0, $gep339 = 0;
 var $gep34 = 0, $gep341 = 0, $gep344 = 0, $gep346 = 0, $gep348 = 0, $gep350 = 0, $gep352 = 0, $gep36 = 0, $gep38 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0;
 var $gep62 = 0, $gep64 = 0, $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep76 = 0, $gep78 = 0, $gep80 = 0, $gep82 = 0, $gep84 = 0, $gep86 = 0, $gep88 = 0, $gep90 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep98 = 0, $gep_array = 0;
 var $gep_array166 = 0, $gep_array169 = 0, $gep_array172 = 0, $gep_array179 = 0, $gep_array210 = 0, $gep_array235 = 0, $gep_array238 = 0, $gep_array251 = 0, $gep_array254 = 0, $gep_array343 = 0, $gep_int = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int111 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0;
 var $gep_int119 = 0, $gep_int121 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int127 = 0, $gep_int129 = 0, $gep_int131 = 0, $gep_int133 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int139 = 0, $gep_int141 = 0, $gep_int143 = 0, $gep_int145 = 0, $gep_int147 = 0, $gep_int149 = 0, $gep_int151 = 0, $gep_int153 = 0, $gep_int155 = 0, $gep_int157 = 0;
 var $gep_int159 = 0, $gep_int161 = 0, $gep_int163 = 0, $gep_int165 = 0, $gep_int168 = 0, $gep_int171 = 0, $gep_int174 = 0, $gep_int176 = 0, $gep_int178 = 0, $gep_int181 = 0, $gep_int183 = 0, $gep_int185 = 0, $gep_int187 = 0, $gep_int189 = 0, $gep_int191 = 0, $gep_int193 = 0, $gep_int195 = 0, $gep_int197 = 0, $gep_int199 = 0, $gep_int201 = 0;
 var $gep_int203 = 0, $gep_int205 = 0, $gep_int207 = 0, $gep_int209 = 0, $gep_int212 = 0, $gep_int214 = 0, $gep_int216 = 0, $gep_int218 = 0, $gep_int220 = 0, $gep_int222 = 0, $gep_int224 = 0, $gep_int226 = 0, $gep_int228 = 0, $gep_int230 = 0, $gep_int232 = 0, $gep_int234 = 0, $gep_int237 = 0, $gep_int240 = 0, $gep_int242 = 0, $gep_int244 = 0;
 var $gep_int246 = 0, $gep_int248 = 0, $gep_int250 = 0, $gep_int253 = 0, $gep_int256 = 0, $gep_int258 = 0, $gep_int260 = 0, $gep_int262 = 0, $gep_int264 = 0, $gep_int266 = 0, $gep_int268 = 0, $gep_int27 = 0, $gep_int270 = 0, $gep_int272 = 0, $gep_int274 = 0, $gep_int276 = 0, $gep_int278 = 0, $gep_int28 = 0, $gep_int280 = 0, $gep_int282 = 0;
 var $gep_int284 = 0, $gep_int286 = 0, $gep_int288 = 0, $gep_int29 = 0, $gep_int290 = 0, $gep_int292 = 0, $gep_int294 = 0, $gep_int296 = 0, $gep_int298 = 0, $gep_int30 = 0, $gep_int300 = 0, $gep_int302 = 0, $gep_int304 = 0, $gep_int306 = 0, $gep_int308 = 0, $gep_int31 = 0, $gep_int310 = 0, $gep_int312 = 0, $gep_int314 = 0, $gep_int316 = 0;
 var $gep_int318 = 0, $gep_int320 = 0, $gep_int322 = 0, $gep_int324 = 0, $gep_int326 = 0, $gep_int328 = 0, $gep_int33 = 0, $gep_int330 = 0, $gep_int332 = 0, $gep_int334 = 0, $gep_int336 = 0, $gep_int338 = 0, $gep_int340 = 0, $gep_int342 = 0, $gep_int345 = 0, $gep_int347 = 0, $gep_int349 = 0, $gep_int35 = 0, $gep_int351 = 0, $gep_int37 = 0;
 var $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int77 = 0;
 var $gep_int79 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int99 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond233 = 0, $or$cond234 = 0, $or$cond7 = 0, $or$cond8 = 0, $phitmp$i = 0, $phitmp$i$i$i = 0;
 var $phitmp$i$i$i115 = 0, $phitmp$i$i$i161 = 0, $phitmp$i$i$i186 = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i42 = 0, $phitmp$i$i$i81 = 0, $phitmp$i141 = 0, $phitmp$i4$i$i192 = 0, $phitmp$i4$i$i48 = 0, $phitmp$i4$i$i87 = 0, $switch = 0, $this2$i$i$i = 0, $this2$i$i$i10 = 0, $this2$i$i$i12 = 0, $this2$i$i$i15 = 0, $this2$i$i$i9 = 0, $tmp$i$i194 = 0, $tmp$i$i50 = 0, $tmp$i$i89 = 0, $tmpcast = 0;
 var label = 0, sp = 0, u$135 = 0, u$153 = 0, u$170 = 0, u$185 = 0, u$253 = 0, u$318 = 0, u$364 = 0, u$409 = 0, u$454 = 0, u$473 = 0, u$50 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $1 = sp;
 $__gbuf = sp + 8|0;
 $__pat = sp + 408|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__psn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__nsn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__spaces = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__et = STACKTOP; STACKTOP = STACKTOP + 8|0;
 HEAP32[$1>>2] = $__we;
 $2 = $__gbuf;
 
 $gep_int = $__gbuf;
 $3 = $gep_int;
 HEAP32[$__pat>>2] = 0;
 $this2$i$i$i = $__grp;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 $this2$i$i$i9 = $__sym;
 ;HEAP32[$this2$i$i$i9+0>>2]=0|0;HEAP32[$this2$i$i$i9+4>>2]=0|0;HEAP32[$this2$i$i$i9+8>>2]=0|0;
 $this2$i$i$i10 = $__psn;
 ;HEAP32[$this2$i$i$i10+0>>2]=0|0;HEAP32[$this2$i$i$i10+4>>2]=0|0;HEAP32[$this2$i$i$i10+8>>2]=0|0;
 $this2$i$i$i12 = $__nsn;
 ;HEAP32[$this2$i$i$i12+0>>2]=0|0;HEAP32[$this2$i$i$i12+4>>2]=0|0;HEAP32[$this2$i$i$i12+8>>2]=0|0;
 $this2$i$i$i15 = $__spaces;
 ;HEAP32[$this2$i$i$i15+0>>2]=0|0;HEAP32[$this2$i$i$i15+4>>2]=0|0;HEAP32[$this2$i$i$i15+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(2,$__intl|0,$__loc|0,$tmpcast|0,$__dp|0,$__ts|0,$__grp|0,$__sym|0,$__psn|0,$__nsn|0,$__fd|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 
 L1: do {
  if ($5) {
   $expanded24 = 69;
   $79 = ___cxa_find_matching_catch(-1,-1)|0;
   $80 = tempRet0;
   
   $81 = $3;$free218 = 181;$lpad$phi$index = $79;$lpad$phi$index8 = $80;
  } else {
   $gep_int27 = $__gbuf;
   $gep = (($gep_int27) + 400)|0;
   $6 = $gep;
   $gep_int28 = $__wb;
   $7 = $gep_int28;
   $8 = HEAP32[$7>>2]|0;
   HEAP32[$__wn>>2] = $8;
   $gep_int29 = $__b;
   $9 = $gep_int29;
   $gep_int30 = $__e;
   $10 = $gep_int30;
   $11 = $__pat;
   $12 = $__ct;
   $gep_int31 = $__nsn;
   $gep32 = (($gep_int31) + 4)|0;
   $13 = $gep32;
   $gep_int33 = $__nsn;
   $gep34 = (($gep_int33) + 8)|0;
   $14 = $gep34;
   $gep_int35 = $__psn;
   $gep36 = (($gep_int35) + 4)|0;
   $15 = $gep36;
   $gep_int37 = $__psn;
   $gep38 = (($gep_int37) + 8)|0;
   $16 = $gep38;
   $17 = $__flags & 512;
   $18 = ($17|0)!=(0);
   $gep_int39 = $__sym;
   $gep40 = (($gep_int39) + 4)|0;
   $19 = $gep40;
   $gep_int41 = $__sym;
   $gep42 = (($gep_int41) + 8)|0;
   $20 = $gep42;
   $gep_int43 = $__spaces;
   $gep44 = (($gep_int43) + 4)|0;
   $21 = $gep44;
   $gep_int45 = $__spaces;
   $gep46 = (($gep_int45) + 8)|0;
   $22 = $gep46;
   $gep_int47 = $__pat;
   $gep48 = (($gep_int47) + 3)|0;
   $23 = $gep48;
   $gep_int49 = $__grp;
   $gep50 = (($gep_int49) + 4)|0;
   $24 = $gep50;
   
   $25 = $6;$26 = $3;$27 = $3;$__p$0341 = 0;$__trailing_sign$0343 = 0;$free214336 = 181;
   L3: while(1) {
    
    
    
    
    
    
    $28 = HEAP32[$9>>2]|0;
    $29 = ($28|0)==(0);
    
    do {
     if ($29) {
      $44 = 1;
     } else {
      $gep_int51 = $28;
      $gep52 = (($gep_int51) + 12)|0;
      $30 = $gep52;
      $31 = HEAP32[$30>>2]|0;
      $gep_int53 = $28;
      $gep54 = (($gep_int53) + 16)|0;
      $32 = $gep54;
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      
      if ($34) {
       $35 = $28;
       $36 = HEAP32[$28>>2]|0;
       $gep_int55 = $36;
       $gep56 = (($gep_int55) + 36)|0;
       $37 = $gep56;
       $38 = HEAP32[$37>>2]|0;
       __THREW__ = 0;
       $39 = invoke_ii($38|0,$28|0)|0;
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       
       if ($41) {
        $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
        label = 25;
        break L3;
       } else {
        $$0$i$i$i$i18 = $39;
       }
      } else {
       $42 = HEAP32[$31>>2]|0;
       
       $$0$i$i$i$i18 = $42;
      }
      
      $43 = ($$0$i$i$i$i18|0)==(-1);
      
      if ($43) {
       HEAP32[$9>>2] = 0;
       
       $44 = 1;
       break;
      } else {
       $$pre$i$i$i20 = HEAP32[$9>>2]|0;
       $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0);
       
       $44 = $phitmp$i$i$i21;
       break;
      }
     }
    } while(0);
    
    $45 = HEAP32[$10>>2]|0;
    $46 = ($45|0)==(0);
    
    do {
     if ($46) {
      label = 16;
     } else {
      $gep_int57 = $45;
      $gep58 = (($gep_int57) + 12)|0;
      $47 = $gep58;
      $48 = HEAP32[$47>>2]|0;
      $gep_int59 = $45;
      $gep60 = (($gep_int59) + 16)|0;
      $49 = $gep60;
      $50 = HEAP32[$49>>2]|0;
      $51 = ($48|0)==($50|0);
      
      if ($51) {
       $52 = $45;
       $53 = HEAP32[$45>>2]|0;
       $gep_int61 = $53;
       $gep62 = (($gep_int61) + 36)|0;
       $54 = $gep62;
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = invoke_ii($55|0,$45|0)|0;
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       
       if ($58) {
        $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
        label = 25;
        break L3;
       } else {
        $$0$i$i1$i$i24 = $56;
       }
      } else {
       $59 = HEAP32[$48>>2]|0;
       
       $$0$i$i1$i$i24 = $59;
      }
      
      $60 = ($$0$i$i1$i$i24|0)==(-1);
      
      if ($60) {
       HEAP32[$10>>2] = 0;
       
       label = 16;
       break;
      } else {
       
       if ($44) {
        $61 = $45;
        break;
       } else {
        $$lcssa285 = $27;$$lcssa300 = $26;$__trailing_sign$0$lcssa = $__trailing_sign$0343;$free214$lcssa = $free214336;
        label = 302;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     
     if ($44) {
      $$lcssa285 = $27;$$lcssa300 = $26;$__trailing_sign$0$lcssa = $__trailing_sign$0343;$free214$lcssa = $free214336;
      label = 302;
      break;
     } else {
      $61 = 0;
     }
    }
    
    $gep_int63 = $__pat;
    $gep64 = (($gep_int63) + ($__p$0341))|0;
    $62 = $gep64;
    $63 = HEAP8[$62]|0;
    $64 = $63 << 24 >> 24;
    
    L27: do {
     switch ($64|0) {
     case 3:  {
      $198 = HEAP8[$__psn]|0;
      $199 = $198 & 1;
      $200 = ($199<<24>>24)==(0);
      
      if ($200) {
       $202 = $198&255;
       $203 = $202 >>> 1;
       
       $204 = $203;
      } else {
       $201 = HEAP32[$15>>2]|0;
       
       $204 = $201;
      }
      
      $205 = HEAP8[$__nsn]|0;
      $206 = $205 & 1;
      $207 = ($206<<24>>24)==(0);
      
      if ($207) {
       $209 = $205&255;
       $210 = $209 >>> 1;
       
       $211 = $210;
      } else {
       $208 = HEAP32[$13>>2]|0;
       
       $211 = $208;
      }
      
      $212 = (0 - ($211))|0;
      $213 = ($204|0)==($212|0);
      
      if ($213) {
       $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__trailing_sign$0343;$free215 = $free214336;
       break L27;
      }
      
      if ($200) {
       $215 = $198&255;
       $216 = $215 >>> 1;
       
       $217 = $216;
      } else {
       $214 = HEAP32[$15>>2]|0;
       
       $217 = $214;
      }
      
      $218 = ($217|0)==(0);
      
      do {
       if (!($218)) {
        
        if ($207) {
         $220 = $205&255;
         $221 = $220 >>> 1;
         
         $222 = $221;
        } else {
         $219 = HEAP32[$13>>2]|0;
         
         $222 = $219;
        }
        
        $223 = ($222|0)==(0);
        
        if ($223) {
         break;
        }
        $305 = HEAP32[$9>>2]|0;
        $gep_int133 = $305;
        $gep134 = (($gep_int133) + 12)|0;
        $306 = $gep134;
        $307 = HEAP32[$306>>2]|0;
        $gep_int135 = $305;
        $gep136 = (($gep_int135) + 16)|0;
        $308 = $gep136;
        $309 = HEAP32[$308>>2]|0;
        $310 = ($307|0)==($309|0);
        
        if ($310) {
         $311 = $305;
         $312 = HEAP32[$305>>2]|0;
         $gep_int137 = $312;
         $gep138 = (($gep_int137) + 36)|0;
         $313 = $gep138;
         $314 = HEAP32[$313>>2]|0;
         __THREW__ = 0;
         $315 = invoke_ii($314|0,$305|0)|0;
         $316 = __THREW__; __THREW__ = 0;
         $317 = $316&1;
         
         if ($317) {
          $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
          label = 25;
          break L3;
         }
         $$pre412 = HEAP8[$__psn]|0;
         
         $$0$i$i108 = $315;$319 = $$pre412;
        } else {
         $318 = HEAP32[$307>>2]|0;
         
         $$0$i$i108 = $318;$319 = $198;
        }
        
        
        $320 = $319 & 1;
        $321 = ($320<<24>>24)==(0);
        $322 = HEAP32[$16>>2]|0;
        $$423 = $321 ? $15 : $322;
        $323 = HEAP32[$$423>>2]|0;
        $324 = ($$0$i$i108|0)==($323|0);
        $325 = HEAP32[$9>>2]|0;
        $gep_int139 = $325;
        $gep140 = (($gep_int139) + 12)|0;
        $326 = $gep140;
        $327 = HEAP32[$326>>2]|0;
        $gep_int141 = $325;
        $gep142 = (($gep_int141) + 16)|0;
        $328 = $gep142;
        $329 = HEAP32[$328>>2]|0;
        $330 = ($327|0)==($329|0);
        
        if ($324) {
         
         if ($330) {
          $331 = $325;
          $332 = HEAP32[$325>>2]|0;
          $gep_int143 = $332;
          $gep144 = (($gep_int143) + 40)|0;
          $333 = $gep144;
          $334 = HEAP32[$333>>2]|0;
          __THREW__ = 0;
          u$170 = invoke_ii($334|0,$325|0)|0;
          $335 = __THREW__; __THREW__ = 0;
          $336 = $335&1;
          
          if ($336) {
           $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
           label = 25;
           break L3;
          }
         } else {
          $gep_int145 = $327;
          $gep146 = (($gep_int145) + 4)|0;
          $337 = $gep146;
          HEAP32[$326>>2] = $337;
          
         }
         $338 = HEAP8[$__psn]|0;
         $339 = $338 & 1;
         $340 = ($339<<24>>24)==(0);
         
         if ($340) {
          $342 = $338&255;
          $343 = $342 >>> 1;
          
          $344 = $343;
         } else {
          $341 = HEAP32[$15>>2]|0;
          
          $344 = $341;
         }
         
         $345 = ($344>>>0)>(1);
         $__psn$__trailing_sign$05 = $345 ? $__psn : $__trailing_sign$0343;
         
         $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free215 = $free214336;
         break L27;
        }
        
        if ($330) {
         $346 = $325;
         $347 = HEAP32[$325>>2]|0;
         $gep_int147 = $347;
         $gep148 = (($gep_int147) + 36)|0;
         $348 = $gep148;
         $349 = HEAP32[$348>>2]|0;
         __THREW__ = 0;
         $350 = invoke_ii($349|0,$325|0)|0;
         $351 = __THREW__; __THREW__ = 0;
         $352 = $351&1;
         
         if ($352) {
          $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
          label = 25;
          break L3;
         } else {
          $$0$i$i130 = $350;
         }
        } else {
         $353 = HEAP32[$327>>2]|0;
         
         $$0$i$i130 = $353;
        }
        
        $354 = HEAP8[$__nsn]|0;
        $355 = $354 & 1;
        $356 = ($355<<24>>24)==(0);
        $357 = HEAP32[$14>>2]|0;
        $$424 = $356 ? $13 : $357;
        $358 = HEAP32[$$424>>2]|0;
        $359 = ($$0$i$i130|0)==($358|0);
        
        if (!($359)) {
         label = 134;
         break L3;
        }
        $360 = HEAP32[$9>>2]|0;
        $gep_int149 = $360;
        $gep150 = (($gep_int149) + 12)|0;
        $361 = $gep150;
        $362 = HEAP32[$361>>2]|0;
        $gep_int151 = $360;
        $gep152 = (($gep_int151) + 16)|0;
        $363 = $gep152;
        $364 = HEAP32[$363>>2]|0;
        $365 = ($362|0)==($364|0);
        
        if ($365) {
         $366 = $360;
         $367 = HEAP32[$360>>2]|0;
         $gep_int153 = $367;
         $gep154 = (($gep_int153) + 40)|0;
         $368 = $gep154;
         $369 = HEAP32[$368>>2]|0;
         __THREW__ = 0;
         u$185 = invoke_ii($369|0,$360|0)|0;
         $370 = __THREW__; __THREW__ = 0;
         $371 = $370&1;
         
         if ($371) {
          $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
          label = 25;
          break L3;
         }
        } else {
         $gep_int155 = $362;
         $gep156 = (($gep_int155) + 4)|0;
         $372 = $gep156;
         HEAP32[$361>>2] = $372;
         
        }
        HEAP8[$__neg] = 1;
        $373 = HEAP8[$__nsn]|0;
        $374 = $373 & 1;
        $375 = ($374<<24>>24)==(0);
        
        if ($375) {
         $377 = $373&255;
         $378 = $377 >>> 1;
         
         $379 = $378;
        } else {
         $376 = HEAP32[$13>>2]|0;
         
         $379 = $376;
        }
        
        $380 = ($379>>>0)>(1);
        $__nsn$__trailing_sign$06 = $380 ? $__nsn : $__trailing_sign$0343;
        
        $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free215 = $free214336;
        break L27;
       }
      } while(0);
      
      if ($200) {
       $225 = $198&255;
       $226 = $225 >>> 1;
       
       $227 = $226;
      } else {
       $224 = HEAP32[$15>>2]|0;
       
       $227 = $224;
      }
      
      $228 = ($227|0)==(0);
      $229 = HEAP32[$9>>2]|0;
      $gep_int109 = $229;
      $gep110 = (($gep_int109) + 12)|0;
      $230 = $gep110;
      $231 = HEAP32[$230>>2]|0;
      $gep_int111 = $229;
      $gep112 = (($gep_int111) + 16)|0;
      $232 = $gep112;
      $233 = HEAP32[$232>>2]|0;
      $234 = ($231|0)==($233|0);
      
      if ($228) {
       
       if ($234) {
        $270 = $229;
        $271 = HEAP32[$229>>2]|0;
        $gep_int123 = $271;
        $gep124 = (($gep_int123) + 36)|0;
        $272 = $gep124;
        $273 = HEAP32[$272>>2]|0;
        __THREW__ = 0;
        $274 = invoke_ii($273|0,$229|0)|0;
        $275 = __THREW__; __THREW__ = 0;
        $276 = $275&1;
        
        if ($276) {
         $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
         label = 25;
         break L3;
        }
        $$pre410 = HEAP8[$__nsn]|0;
        
        $$0$i$i96 = $274;$278 = $$pre410;
       } else {
        $277 = HEAP32[$231>>2]|0;
        
        $$0$i$i96 = $277;$278 = $205;
       }
       
       
       $279 = $278 & 1;
       $280 = ($279<<24>>24)==(0);
       $281 = HEAP32[$14>>2]|0;
       $$422 = $280 ? $13 : $281;
       $282 = HEAP32[$$422>>2]|0;
       $283 = ($$0$i$i96|0)==($282|0);
       
       if (!($283)) {
        $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__trailing_sign$0343;$free215 = $free214336;
        break L27;
       }
       $284 = HEAP32[$9>>2]|0;
       $gep_int125 = $284;
       $gep126 = (($gep_int125) + 12)|0;
       $285 = $gep126;
       $286 = HEAP32[$285>>2]|0;
       $gep_int127 = $284;
       $gep128 = (($gep_int127) + 16)|0;
       $287 = $gep128;
       $288 = HEAP32[$287>>2]|0;
       $289 = ($286|0)==($288|0);
       
       if ($289) {
        $290 = $284;
        $291 = HEAP32[$284>>2]|0;
        $gep_int129 = $291;
        $gep130 = (($gep_int129) + 40)|0;
        $292 = $gep130;
        $293 = HEAP32[$292>>2]|0;
        __THREW__ = 0;
        u$153 = invoke_ii($293|0,$284|0)|0;
        $294 = __THREW__; __THREW__ = 0;
        $295 = $294&1;
        
        if ($295) {
         $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
         label = 25;
         break L3;
        }
       } else {
        $gep_int131 = $286;
        $gep132 = (($gep_int131) + 4)|0;
        $296 = $gep132;
        HEAP32[$285>>2] = $296;
        
       }
       HEAP8[$__neg] = 1;
       $297 = HEAP8[$__nsn]|0;
       $298 = $297 & 1;
       $299 = ($298<<24>>24)==(0);
       
       if ($299) {
        $301 = $297&255;
        $302 = $301 >>> 1;
        
        $303 = $302;
       } else {
        $300 = HEAP32[$13>>2]|0;
        
        $303 = $300;
       }
       
       $304 = ($303>>>0)>(1);
       $__nsn$__trailing_sign$0 = $304 ? $__nsn : $__trailing_sign$0343;
       
       $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free215 = $free214336;
       break L27;
      }
      
      if ($234) {
       $235 = $229;
       $236 = HEAP32[$229>>2]|0;
       $gep_int113 = $236;
       $gep114 = (($gep_int113) + 36)|0;
       $237 = $gep114;
       $238 = HEAP32[$237>>2]|0;
       __THREW__ = 0;
       $239 = invoke_ii($238|0,$229|0)|0;
       $240 = __THREW__; __THREW__ = 0;
       $241 = $240&1;
       
       if ($241) {
        $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
        label = 25;
        break L3;
       }
       $$pre411 = HEAP8[$__psn]|0;
       
       $$0$i$i75 = $239;$243 = $$pre411;
      } else {
       $242 = HEAP32[$231>>2]|0;
       
       $$0$i$i75 = $242;$243 = $198;
      }
      
      
      $244 = $243 & 1;
      $245 = ($244<<24>>24)==(0);
      $246 = HEAP32[$16>>2]|0;
      $$ = $245 ? $15 : $246;
      $247 = HEAP32[$$>>2]|0;
      $248 = ($$0$i$i75|0)==($247|0);
      
      if (!($248)) {
       HEAP8[$__neg] = 1;
       
       $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__trailing_sign$0343;$free215 = $free214336;
       break L27;
      }
      $249 = HEAP32[$9>>2]|0;
      $gep_int115 = $249;
      $gep116 = (($gep_int115) + 12)|0;
      $250 = $gep116;
      $251 = HEAP32[$250>>2]|0;
      $gep_int117 = $249;
      $gep118 = (($gep_int117) + 16)|0;
      $252 = $gep118;
      $253 = HEAP32[$252>>2]|0;
      $254 = ($251|0)==($253|0);
      
      if ($254) {
       $255 = $249;
       $256 = HEAP32[$249>>2]|0;
       $gep_int119 = $256;
       $gep120 = (($gep_int119) + 40)|0;
       $257 = $gep120;
       $258 = HEAP32[$257>>2]|0;
       __THREW__ = 0;
       u$135 = invoke_ii($258|0,$249|0)|0;
       $259 = __THREW__; __THREW__ = 0;
       $260 = $259&1;
       
       if ($260) {
        $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
        label = 25;
        break L3;
       }
      } else {
       $gep_int121 = $251;
       $gep122 = (($gep_int121) + 4)|0;
       $261 = $gep122;
       HEAP32[$250>>2] = $261;
       
      }
      $262 = HEAP8[$__psn]|0;
      $263 = $262 & 1;
      $264 = ($263<<24>>24)==(0);
      
      if ($264) {
       $266 = $262&255;
       $267 = $266 >>> 1;
       
       $268 = $267;
      } else {
       $265 = HEAP32[$15>>2]|0;
       
       $268 = $265;
      }
      
      $269 = ($268>>>0)>(1);
      $__psn$__trailing_sign$0 = $269 ? $__psn : $__trailing_sign$0343;
      
      $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free215 = $free214336;
      break;
     }
     case 1:  {
      $cond = ($__p$0341|0)==(3);
      
      if ($cond) {
       $$lcssa285 = $27;$$lcssa300 = $26;$__trailing_sign$0$lcssa = $__trailing_sign$0343;$free214$lcssa = $free214336;
       label = 302;
       break L3;
      }
      $87 = HEAP32[$9>>2]|0;
      $gep_int65 = $87;
      $gep66 = (($gep_int65) + 12)|0;
      $88 = $gep66;
      $89 = HEAP32[$88>>2]|0;
      $gep_int67 = $87;
      $gep68 = (($gep_int67) + 16)|0;
      $90 = $gep68;
      $91 = HEAP32[$90>>2]|0;
      $92 = ($89|0)==($91|0);
      
      if ($92) {
       $93 = $87;
       $94 = HEAP32[$87>>2]|0;
       $gep_int69 = $94;
       $gep70 = (($gep_int69) + 36)|0;
       $95 = $gep70;
       $96 = HEAP32[$95>>2]|0;
       __THREW__ = 0;
       $97 = invoke_ii($96|0,$87|0)|0;
       $98 = __THREW__; __THREW__ = 0;
       $99 = $98&1;
       
       if ($99) {
        $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
        label = 25;
        break L3;
       } else {
        $$0$i$i33 = $97;
       }
      } else {
       $100 = HEAP32[$89>>2]|0;
       
       $$0$i$i33 = $100;
      }
      
      $101 = HEAP32[$__ct>>2]|0;
      $gep_int71 = $101;
      $gep72 = (($gep_int71) + 12)|0;
      $102 = $gep72;
      $103 = HEAP32[$102>>2]|0;
      __THREW__ = 0;
      $104 = invoke_iiii($103|0,$__ct|0,8192,$$0$i$i33|0)|0;
      $105 = __THREW__; __THREW__ = 0;
      $106 = $105&1;
      
      if ($106) {
       $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
       label = 25;
       break L3;
      }
      
      if (!($104)) {
       label = 41;
       break L3;
      }
      $107 = HEAP32[$9>>2]|0;
      $gep_int73 = $107;
      $gep74 = (($gep_int73) + 12)|0;
      $108 = $gep74;
      $109 = HEAP32[$108>>2]|0;
      $gep_int75 = $107;
      $gep76 = (($gep_int75) + 16)|0;
      $110 = $gep76;
      $111 = HEAP32[$110>>2]|0;
      $112 = ($109|0)==($111|0);
      
      if ($112) {
       $113 = $107;
       $114 = HEAP32[$107>>2]|0;
       $gep_int77 = $114;
       $gep78 = (($gep_int77) + 40)|0;
       $115 = $gep78;
       $116 = HEAP32[$115>>2]|0;
       __THREW__ = 0;
       $117 = invoke_ii($116|0,$107|0)|0;
       $118 = __THREW__; __THREW__ = 0;
       $119 = $118&1;
       
       if ($119) {
        $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
        label = 25;
        break L3;
       } else {
        $$0$i$i37 = $117;
       }
      } else {
       $gep_int79 = $109;
       $gep80 = (($gep_int79) + 4)|0;
       $120 = $gep80;
       HEAP32[$108>>2] = $120;
       $121 = HEAP32[$109>>2]|0;
       
       $$0$i$i37 = $121;
      }
      
      __THREW__ = 0;
      invoke_vii(66,$__spaces|0,$$0$i$i37|0);
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      
      if ($123) {
       $$ph$ph237$ph$ph$ph$ph$ph = $27;$free218$ph$ph236$ph$ph$ph$ph$ph = $free214336;
       label = 25;
       break L3;
      } else {
       label = 42;
      }
      break;
     }
     case 0:  {
      label = 42;
      break;
     }
     case 2:  {
      $383 = ($__trailing_sign$0343|0)!=(0);
      $384 = ($__p$0341>>>0)<(2);
      $or$cond = $383 | $384;
      
      if (!($or$cond)) {
       $385 = ($__p$0341|0)==(2);
       
       if ($385) {
        $386 = HEAP8[$23]|0;
        $387 = ($386<<24>>24)!=(0);
        
        $388 = $387;
       } else {
        $388 = 0;
       }
       
       $brmerge = $18 | $388;
       
       if (!($brmerge)) {
        $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = 0;$free215 = $free214336;
        break L27;
       }
      }
      $389 = HEAP8[$__sym]|0;
      $390 = $389 & 1;
      $391 = ($390<<24>>24)==(0);
      $392 = HEAP32[$20>>2]|0;
      $$425 = $391 ? $19 : $392;
      $393 = ($__p$0341|0)==(0);
      
      L135: do {
       if ($393) {
        $$pre$i3$i$i191 = $61;$456 = $61;$457 = $389;$458 = $$425;
       } else {
        $394 = (($__p$0341) + -1)|0;
        $gep_int157 = $__pat;
        $gep158 = (($gep_int157) + ($394))|0;
        $395 = $gep158;
        $396 = HEAP8[$395]|0;
        $switch = ($396&255)<(2);
        
        if ($switch) {
         $397 = $389;$398 = $$425;
        } else {
         $$pre$i3$i$i191 = $61;$456 = $61;$457 = $389;$458 = $$425;
         break;
        }
        while(1) {
         
         
         $399 = $397 & 1;
         $400 = ($399<<24>>24)==(0);
         
         if ($400) {
          $403 = $397&255;
          $404 = $403 >>> 1;
          
          $405 = $19;$406 = $404;
         } else {
          $401 = HEAP32[$20>>2]|0;
          $402 = HEAP32[$19>>2]|0;
          
          $405 = $401;$406 = $402;
         }
         
         
         $gep_int159 = $405;
         $gep_array = $406<<2;
         $gep160 = (($gep_int159) + ($gep_array))|0;
         $407 = $gep160;
         $408 = ($398|0)==($407|0);
         
         if ($408) {
          $417 = $397;
          break;
         }
         $409 = HEAP32[$398>>2]|0;
         $410 = HEAP32[$__ct>>2]|0;
         $gep_int161 = $410;
         $gep162 = (($gep_int161) + 12)|0;
         $411 = $gep162;
         $412 = HEAP32[$411>>2]|0;
         __THREW__ = 0;
         $413 = invoke_iiii($412|0,$__ct|0,8192,$409|0)|0;
         $414 = __THREW__; __THREW__ = 0;
         $415 = $414&1;
         
         if ($415) {
          label = 22;
          break L3;
         }
         
         if (!($413)) {
          label = 148;
          break;
         }
         $gep_int163 = $398;
         $gep164 = (($gep_int163) + 4)|0;
         $416 = $gep164;
         $$pre413 = HEAP8[$__sym]|0;
         
         $397 = $$pre413;$398 = $416;
        }
        if ((label|0) == 148) {
         label = 0;
         $$pre414 = HEAP8[$__sym]|0;
         
         $417 = $$pre414;
        }
        
        $418 = $417 & 1;
        $419 = ($418<<24>>24)==(0);
        $420 = HEAP32[$20>>2]|0;
        $$426 = $419 ? $19 : $420;
        $421 = $398;
        $422 = $$426;
        $423 = (($421) - ($422))|0;
        $424 = $423 >> 2;
        $425 = HEAP8[$__spaces]|0;
        $426 = $425 & 1;
        $427 = ($426<<24>>24)==(0);
        
        if ($427) {
         $429 = $425&255;
         $430 = $429 >>> 1;
         
         $431 = $430;
        } else {
         $428 = HEAP32[$21>>2]|0;
         
         $431 = $428;
        }
        
        $432 = ($424>>>0)>($431>>>0);
        
        L153: do {
         if (!($432)) {
          
          if ($427) {
           $436 = $425&255;
           $437 = $436 >>> 1;
           $$sum416 = (($437) - ($424))|0;
           $gep_int168 = $21;
           $gep_array169 = $$sum416<<2;
           $gep170 = (($gep_int168) + ($gep_array169))|0;
           $438 = $gep170;
           $439 = $425&255;
           $440 = $439 >>> 1;
           
           $441 = $438;$442 = $21;$443 = $440;
          } else {
           $433 = HEAP32[$22>>2]|0;
           $434 = HEAP32[$21>>2]|0;
           $$sum = (($434) - ($424))|0;
           $gep_int165 = $433;
           $gep_array166 = $$sum<<2;
           $gep167 = (($gep_int165) + ($gep_array166))|0;
           $435 = $gep167;
           
           $441 = $435;$442 = $433;$443 = $434;
          }
          
          
          
          $gep_int171 = $442;
          $gep_array172 = $443<<2;
          $gep173 = (($gep_int171) + ($gep_array172))|0;
          $444 = $gep173;
          $445 = HEAP32[$20>>2]|0;
          $$427 = $419 ? $19 : $445;
          $446 = ($441|0)==($444|0);
          
          if ($446) {
           $$pre$i3$i$i191 = $61;$456 = $61;$457 = $417;$458 = $398;
           break L135;
          } else {
           $447 = $$427;$448 = $441;
          }
          while(1) {
           
           
           $449 = HEAP32[$448>>2]|0;
           $450 = HEAP32[$447>>2]|0;
           $451 = ($449|0)==($450|0);
           
           if (!($451)) {
            break L153;
           }
           $gep_int174 = $448;
           $gep175 = (($gep_int174) + 4)|0;
           $452 = $gep175;
           $453 = ($452|0)==($444|0);
           
           if ($453) {
            $$pre$i3$i$i191 = $61;$456 = $61;$457 = $417;$458 = $398;
            break L135;
           }
           $gep_int176 = $447;
           $gep177 = (($gep_int176) + 4)|0;
           $454 = $gep177;
           
           $447 = $454;$448 = $452;
          }
         }
        } while(0);
        $455 = HEAP32[$20>>2]|0;
        $$428 = $419 ? $19 : $455;
        
        $$pre$i3$i$i191 = $61;$456 = $61;$457 = $417;$458 = $$428;
       }
      } while(0);
      L164: while(1) {
       
       
       
       
       $459 = $457 & 1;
       $460 = ($459<<24>>24)==(0);
       
       if ($460) {
        $463 = $457&255;
        $464 = $463 >>> 1;
        
        $465 = $19;$466 = $464;
       } else {
        $461 = HEAP32[$20>>2]|0;
        $462 = HEAP32[$19>>2]|0;
        
        $465 = $461;$466 = $462;
       }
       
       
       $gep_int178 = $465;
       $gep_array179 = $466<<2;
       $gep180 = (($gep_int178) + ($gep_array179))|0;
       $467 = $gep180;
       $468 = ($458|0)==($467|0);
       
       if ($468) {
        break;
       }
       $469 = HEAP32[$9>>2]|0;
       $470 = ($469|0)==(0);
       
       do {
        if ($470) {
         $485 = 1;
        } else {
         $gep_int181 = $469;
         $gep182 = (($gep_int181) + 12)|0;
         $471 = $gep182;
         $472 = HEAP32[$471>>2]|0;
         $gep_int183 = $469;
         $gep184 = (($gep_int183) + 16)|0;
         $473 = $gep184;
         $474 = HEAP32[$473>>2]|0;
         $475 = ($472|0)==($474|0);
         
         if ($475) {
          $476 = $469;
          $477 = HEAP32[$469>>2]|0;
          $gep_int185 = $477;
          $gep186 = (($gep_int185) + 36)|0;
          $478 = $gep186;
          $479 = HEAP32[$478>>2]|0;
          __THREW__ = 0;
          $480 = invoke_ii($479|0,$469|0)|0;
          $481 = __THREW__; __THREW__ = 0;
          $482 = $481&1;
          
          if ($482) {
           label = 23;
           break L3;
          } else {
           $$0$i$i$i$i183 = $480;
          }
         } else {
          $483 = HEAP32[$472>>2]|0;
          
          $$0$i$i$i$i183 = $483;
         }
         
         $484 = ($$0$i$i$i$i183|0)==(-1);
         
         if ($484) {
          HEAP32[$9>>2] = 0;
          
          $485 = 1;
          break;
         } else {
          $$pre$i$i$i185 = HEAP32[$9>>2]|0;
          $phitmp$i$i$i186 = ($$pre$i$i$i185|0)==(0);
          
          $485 = $phitmp$i$i$i186;
          break;
         }
        }
       } while(0);
       
       $486 = ($456|0)==(0);
       
       do {
        if ($486) {
         $$pre$i3$i$i191400 = $$pre$i3$i$i191;
         label = 178;
        } else {
         $gep_int187 = $456;
         $gep188 = (($gep_int187) + 12)|0;
         $487 = $gep188;
         $488 = HEAP32[$487>>2]|0;
         $gep_int189 = $456;
         $gep190 = (($gep_int189) + 16)|0;
         $489 = $gep190;
         $490 = HEAP32[$489>>2]|0;
         $491 = ($488|0)==($490|0);
         
         if ($491) {
          $492 = $456;
          $493 = HEAP32[$456>>2]|0;
          $gep_int191 = $493;
          $gep192 = (($gep_int191) + 36)|0;
          $494 = $gep192;
          $495 = HEAP32[$494>>2]|0;
          __THREW__ = 0;
          $496 = invoke_ii($495|0,$456|0)|0;
          $497 = __THREW__; __THREW__ = 0;
          $498 = $497&1;
          
          if ($498) {
           label = 23;
           break L3;
          } else {
           $$0$i$i1$i$i189 = $496;
          }
         } else {
          $499 = HEAP32[$488>>2]|0;
          
          $$0$i$i1$i$i189 = $499;
         }
         
         $500 = ($$0$i$i1$i$i189|0)==(-1);
         
         if ($500) {
          HEAP32[$10>>2] = 0;
          
          $$pre$i3$i$i191400 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i4$i$i192 = ($$pre$i3$i$i191|0)==(0);
          $tmp$i$i194 = $485 ^ $phitmp$i4$i$i192;
          
          if ($tmp$i$i194) {
           $$pre$i3$i$i191399 = $$pre$i3$i$i191;$501 = $$pre$i3$i$i191;
           break;
          } else {
           break L164;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        
        
        if ($485) {
         break;
        } else {
         $$pre$i3$i$i191399 = $$pre$i3$i$i191400;$501 = 0;
        }
       }
       
       
       $502 = HEAP32[$9>>2]|0;
       $gep_int193 = $502;
       $gep194 = (($gep_int193) + 12)|0;
       $503 = $gep194;
       $504 = HEAP32[$503>>2]|0;
       $gep_int195 = $502;
       $gep196 = (($gep_int195) + 16)|0;
       $505 = $gep196;
       $506 = HEAP32[$505>>2]|0;
       $507 = ($504|0)==($506|0);
       
       if ($507) {
        $508 = $502;
        $509 = HEAP32[$502>>2]|0;
        $gep_int197 = $509;
        $gep198 = (($gep_int197) + 36)|0;
        $510 = $gep198;
        $511 = HEAP32[$510>>2]|0;
        __THREW__ = 0;
        $512 = invoke_ii($511|0,$502|0)|0;
        $513 = __THREW__; __THREW__ = 0;
        $514 = $513&1;
        
        if ($514) {
         label = 23;
         break L3;
        } else {
         $$0$i$i179 = $512;
        }
       } else {
        $515 = HEAP32[$504>>2]|0;
        
        $$0$i$i179 = $515;
       }
       
       $516 = HEAP32[$458>>2]|0;
       $517 = ($$0$i$i179|0)==($516|0);
       
       if (!($517)) {
        break;
       }
       $518 = HEAP32[$9>>2]|0;
       $gep_int199 = $518;
       $gep200 = (($gep_int199) + 12)|0;
       $519 = $gep200;
       $520 = HEAP32[$519>>2]|0;
       $gep_int201 = $518;
       $gep202 = (($gep_int201) + 16)|0;
       $521 = $gep202;
       $522 = HEAP32[$521>>2]|0;
       $523 = ($520|0)==($522|0);
       
       if ($523) {
        $524 = $518;
        $525 = HEAP32[$518>>2]|0;
        $gep_int203 = $525;
        $gep204 = (($gep_int203) + 40)|0;
        $526 = $gep204;
        $527 = HEAP32[$526>>2]|0;
        __THREW__ = 0;
        u$253 = invoke_ii($527|0,$518|0)|0;
        $528 = __THREW__; __THREW__ = 0;
        $529 = $528&1;
        
        if ($529) {
         label = 23;
         break L3;
        }
       } else {
        $gep_int205 = $520;
        $gep206 = (($gep_int205) + 4)|0;
        $530 = $gep206;
        HEAP32[$519>>2] = $530;
        
       }
       $gep_int207 = $458;
       $gep208 = (($gep_int207) + 4)|0;
       $531 = $gep208;
       $$pre = HEAP8[$__sym]|0;
       
       $$pre$i3$i$i191 = $$pre$i3$i$i191399;$456 = $501;$457 = $$pre;$458 = $531;
      }
      
      if (!($18)) {
       $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__trailing_sign$0343;$free215 = $free214336;
       break L27;
      }
      $532 = HEAP8[$__sym]|0;
      $533 = $532 & 1;
      $534 = ($533<<24>>24)==(0);
      
      if ($534) {
       $537 = $532&255;
       $538 = $537 >>> 1;
       
       $539 = $19;$540 = $538;
      } else {
       $535 = HEAP32[$20>>2]|0;
       $536 = HEAP32[$19>>2]|0;
       
       $539 = $535;$540 = $536;
      }
      
      
      $gep_int209 = $539;
      $gep_array210 = $540<<2;
      $gep211 = (($gep_int209) + ($gep_array210))|0;
      $541 = $gep211;
      $542 = ($458|0)==($541|0);
      
      if ($542) {
       $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__trailing_sign$0343;$free215 = $free214336;
      } else {
       label = 193;
       break L3;
      }
      break;
     }
     case 4:  {
      $545 = $27;$546 = $26;$547 = $25;$__ng$0 = 0;$free213 = $free214336;
      L208: while(1) {
       
       
       
       
       
       $548 = HEAP32[$9>>2]|0;
       $549 = ($548|0)==(0);
       
       do {
        if ($549) {
         $564 = 1;
        } else {
         $gep_int212 = $548;
         $gep213 = (($gep_int212) + 12)|0;
         $550 = $gep213;
         $551 = HEAP32[$550>>2]|0;
         $gep_int214 = $548;
         $gep215 = (($gep_int214) + 16)|0;
         $552 = $gep215;
         $553 = HEAP32[$552>>2]|0;
         $554 = ($551|0)==($553|0);
         
         if ($554) {
          $555 = $548;
          $556 = HEAP32[$548>>2]|0;
          $gep_int216 = $556;
          $gep217 = (($gep_int216) + 36)|0;
          $557 = $gep217;
          $558 = HEAP32[$557>>2]|0;
          __THREW__ = 0;
          $559 = invoke_ii($558|0,$548|0)|0;
          $560 = __THREW__; __THREW__ = 0;
          $561 = $560&1;
          
          if ($561) {
           $$ph$ph = $545;$free218$ph$ph = $free213;
           label = 20;
           break L3;
          } else {
           $$0$i$i$i$i158 = $559;
          }
         } else {
          $562 = HEAP32[$551>>2]|0;
          
          $$0$i$i$i$i158 = $562;
         }
         
         $563 = ($$0$i$i$i$i158|0)==(-1);
         
         if ($563) {
          HEAP32[$9>>2] = 0;
          
          $564 = 1;
          break;
         } else {
          $$pre$i$i$i160 = HEAP32[$9>>2]|0;
          $phitmp$i$i$i161 = ($$pre$i$i$i160|0)==(0);
          
          $564 = $phitmp$i$i$i161;
          break;
         }
        }
       } while(0);
       
       $565 = HEAP32[$10>>2]|0;
       $566 = ($565|0)==(0);
       
       do {
        if ($566) {
         label = 207;
        } else {
         $gep_int218 = $565;
         $gep219 = (($gep_int218) + 12)|0;
         $567 = $gep219;
         $568 = HEAP32[$567>>2]|0;
         $gep_int220 = $565;
         $gep221 = (($gep_int220) + 16)|0;
         $569 = $gep221;
         $570 = HEAP32[$569>>2]|0;
         $571 = ($568|0)==($570|0);
         
         if ($571) {
          $572 = $565;
          $573 = HEAP32[$565>>2]|0;
          $gep_int222 = $573;
          $gep223 = (($gep_int222) + 36)|0;
          $574 = $gep223;
          $575 = HEAP32[$574>>2]|0;
          __THREW__ = 0;
          $576 = invoke_ii($575|0,$565|0)|0;
          $577 = __THREW__; __THREW__ = 0;
          $578 = $577&1;
          
          if ($578) {
           $$ph$ph = $545;$free218$ph$ph = $free213;
           label = 20;
           break L3;
          } else {
           $$0$i$i1$i$i164 = $576;
          }
         } else {
          $579 = HEAP32[$568>>2]|0;
          
          $$0$i$i1$i$i164 = $579;
         }
         
         $580 = ($$0$i$i1$i$i164|0)==(-1);
         
         if ($580) {
          HEAP32[$10>>2] = 0;
          
          label = 207;
          break;
         } else {
          
          if ($564) {
           break;
          } else {
           break L208;
          }
         }
        }
       } while(0);
       if ((label|0) == 207) {
        label = 0;
        
        if ($564) {
         break;
        }
       }
       $581 = HEAP32[$9>>2]|0;
       $gep_int224 = $581;
       $gep225 = (($gep_int224) + 12)|0;
       $582 = $gep225;
       $583 = HEAP32[$582>>2]|0;
       $gep_int226 = $581;
       $gep227 = (($gep_int226) + 16)|0;
       $584 = $gep227;
       $585 = HEAP32[$584>>2]|0;
       $586 = ($583|0)==($585|0);
       
       if ($586) {
        $587 = $581;
        $588 = HEAP32[$581>>2]|0;
        $gep_int228 = $588;
        $gep229 = (($gep_int228) + 36)|0;
        $589 = $gep229;
        $590 = HEAP32[$589>>2]|0;
        __THREW__ = 0;
        $591 = invoke_ii($590|0,$581|0)|0;
        $592 = __THREW__; __THREW__ = 0;
        $593 = $592&1;
        
        if ($593) {
         $$ph$ph = $545;$free218$ph$ph = $free213;
         label = 20;
         break L3;
        } else {
         $$0$i$i155 = $591;
        }
       } else {
        $594 = HEAP32[$583>>2]|0;
        
        $$0$i$i155 = $594;
       }
       
       $595 = HEAP32[$__ct>>2]|0;
       $gep_int230 = $595;
       $gep231 = (($gep_int230) + 12)|0;
       $596 = $gep231;
       $597 = HEAP32[$596>>2]|0;
       __THREW__ = 0;
       $598 = invoke_iiii($597|0,$__ct|0,2048,$$0$i$i155|0)|0;
       $599 = __THREW__; __THREW__ = 0;
       $600 = $599&1;
       
       if ($600) {
        $$ph$ph = $545;$free218$ph$ph = $free213;
        label = 20;
        break L3;
       }
       
       if ($598) {
        $601 = HEAP32[$__wn>>2]|0;
        $602 = HEAP32[$1>>2]|0;
        $603 = ($601|0)==($602|0);
        
        if ($603) {
         __THREW__ = 0;
         invoke_viii(19,$__wb|0,$__wn|0,$1|0);
         $604 = __THREW__; __THREW__ = 0;
         $605 = $604&1;
         
         if ($605) {
          $$ph$ph = $545;$free218$ph$ph = $free213;
          label = 20;
          break L3;
         }
         $$pre415 = HEAP32[$__wn>>2]|0;
         
         $606 = $$pre415;
        } else {
         $606 = $601;
        }
        
        $gep_int232 = $606;
        $gep233 = (($gep_int232) + 4)|0;
        $607 = $gep233;
        HEAP32[$__wn>>2] = $607;
        HEAP32[$606>>2] = $$0$i$i155;
        $608 = (($__ng$0) + 1)|0;
        
        $642 = $545;$643 = $546;$644 = $547;$__ng$1 = $608;$free = $free213;
       } else {
        $609 = HEAP8[$__grp]|0;
        $610 = $609 & 1;
        $611 = ($610<<24>>24)==(0);
        
        if ($611) {
         $613 = $609&255;
         $614 = $613 >>> 1;
         
         $615 = $614;
        } else {
         $612 = HEAP32[$24>>2]|0;
         
         $615 = $612;
        }
        
        $616 = ($615|0)==(0);
        $617 = ($__ng$0|0)==(0);
        $or$cond7 = $616 | $617;
        
        if ($or$cond7) {
         break;
        }
        $618 = HEAP32[$__ts>>2]|0;
        $619 = ($$0$i$i155|0)==($618|0);
        
        if (!($619)) {
         break;
        }
        $620 = ($546|0)==($547|0);
        
        if ($620) {
         $621 = ($free213|0)!=(181);
         $622 = $546;
         $623 = $545;
         $624 = (($622) - ($623))|0;
         $625 = ($624>>>0)<(2147483647);
         $626 = $624 << 1;
         $$$i140 = $625 ? $626 : -1;
         $627 = $624 >> 2;
         
         if ($621) {
          $phitmp$i141 = $545;
          
          $628 = $phitmp$i141;
         } else {
          $628 = 0;
         }
         
         $629 = _realloc($628,$$$i140)|0;
         $630 = $629;
         $631 = ($629|0)==(0);
         
         if ($631) {
          __THREW__ = 0;
          invoke_v(13);
          $632 = __THREW__; __THREW__ = 0;
          $633 = $632&1;
          
          if ($633) {
           $$ph$ph = $545;$free218$ph$ph = $free213;
           label = 20;
           break L3;
          }
         }
         $634 = ($545|0)==(0);
         $or$cond233 = $621 | $634;
         
         if (!($or$cond233)) {
          
         }
         $635 = $$$i140 >>> 2;
         $gep_int234 = $629;
         $gep_array235 = $627<<2;
         $gep236 = (($gep_int234) + ($gep_array235))|0;
         $636 = $gep236;
         $gep_int237 = $629;
         $gep_array238 = $635<<2;
         $gep239 = (($gep_int237) + ($gep_array238))|0;
         $637 = $gep239;
         
         $638 = $630;$639 = $636;$640 = $637;$free212 = 179;
        } else {
         $638 = $545;$639 = $546;$640 = $547;$free212 = $free213;
        }
        
        
        
        
        $gep_int240 = $639;
        $gep241 = (($gep_int240) + 4)|0;
        $641 = $gep241;
        HEAP32[$639>>2] = $__ng$0;
        
        $642 = $638;$643 = $641;$644 = $640;$__ng$1 = 0;$free = $free212;
       }
       
       
       
       
       
       $645 = HEAP32[$9>>2]|0;
       $gep_int242 = $645;
       $gep243 = (($gep_int242) + 12)|0;
       $646 = $gep243;
       $647 = HEAP32[$646>>2]|0;
       $gep_int244 = $645;
       $gep245 = (($gep_int244) + 16)|0;
       $648 = $gep245;
       $649 = HEAP32[$648>>2]|0;
       $650 = ($647|0)==($649|0);
       
       if ($650) {
        $651 = $645;
        $652 = HEAP32[$645>>2]|0;
        $gep_int246 = $652;
        $gep247 = (($gep_int246) + 40)|0;
        $653 = $gep247;
        $654 = HEAP32[$653>>2]|0;
        __THREW__ = 0;
        u$318 = invoke_ii($654|0,$645|0)|0;
        $655 = __THREW__; __THREW__ = 0;
        $656 = $655&1;
        
        if ($656) {
         $$ph$ph = $642;$free218$ph$ph = $free;
         label = 20;
         break L3;
        } else {
         $545 = $642;$546 = $643;$547 = $644;$__ng$0 = $__ng$1;$free213 = $free;
         continue;
        }
       } else {
        $gep_int248 = $647;
        $gep249 = (($gep_int248) + 4)|0;
        $657 = $gep249;
        HEAP32[$646>>2] = $657;
        
        $545 = $642;$546 = $643;$547 = $644;$__ng$0 = $__ng$1;$free213 = $free;
        continue;
       }
      }
      $658 = ($545|0)==($546|0);
      $659 = ($__ng$0|0)==(0);
      $or$cond8 = $658 | $659;
      
      if ($or$cond8) {
       $682 = $545;$683 = $546;$684 = $547;$free216 = $free213;
      } else {
       $660 = ($546|0)==($547|0);
       
       if ($660) {
        $661 = ($free213|0)!=(181);
        $662 = $546;
        $663 = $545;
        $664 = (($662) - ($663))|0;
        $665 = ($664>>>0)<(2147483647);
        $666 = $664 << 1;
        $$$i = $665 ? $666 : -1;
        $667 = $664 >> 2;
        
        if ($661) {
         $phitmp$i = $545;
         
         $668 = $phitmp$i;
        } else {
         $668 = 0;
        }
        
        $669 = _realloc($668,$$$i)|0;
        $670 = $669;
        $671 = ($669|0)==(0);
        
        if ($671) {
         __THREW__ = 0;
         invoke_v(13);
         $672 = __THREW__; __THREW__ = 0;
         $673 = $672&1;
         
         if ($673) {
          $$ph$ph237$ph$ph$ph$ph$ph = $545;$free218$ph$ph236$ph$ph$ph$ph$ph = $free213;
          label = 25;
          break L3;
         }
        }
        $674 = ($545|0)==(0);
        $or$cond234 = $661 | $674;
        
        if (!($or$cond234)) {
         
        }
        $675 = $$$i >>> 2;
        $gep_int250 = $669;
        $gep_array251 = $667<<2;
        $gep252 = (($gep_int250) + ($gep_array251))|0;
        $676 = $gep252;
        $gep_int253 = $669;
        $gep_array254 = $675<<2;
        $gep255 = (($gep_int253) + ($gep_array254))|0;
        $677 = $gep255;
        
        $678 = $670;$679 = $676;$680 = $677;$free217 = 179;
       } else {
        $678 = $545;$679 = $546;$680 = $547;$free217 = $free213;
       }
       
       
       
       
       $gep_int256 = $679;
       $gep257 = (($gep_int256) + 4)|0;
       $681 = $gep257;
       HEAP32[$679>>2] = $__ng$0;
       
       $682 = $678;$683 = $681;$684 = $680;$free216 = $free217;
      }
      
      
      
      
      $685 = HEAP32[$__fd>>2]|0;
      $686 = ($685|0)>(0);
      
      if ($686) {
       $687 = HEAP32[$9>>2]|0;
       $688 = ($687|0)==(0);
       
       do {
        if ($688) {
         $703 = 1;
        } else {
         $gep_int258 = $687;
         $gep259 = (($gep_int258) + 12)|0;
         $689 = $gep259;
         $690 = HEAP32[$689>>2]|0;
         $gep_int260 = $687;
         $gep261 = (($gep_int260) + 16)|0;
         $691 = $gep261;
         $692 = HEAP32[$691>>2]|0;
         $693 = ($690|0)==($692|0);
         
         if ($693) {
          $694 = $687;
          $695 = HEAP32[$687>>2]|0;
          $gep_int262 = $695;
          $gep263 = (($gep_int262) + 36)|0;
          $696 = $gep263;
          $697 = HEAP32[$696>>2]|0;
          __THREW__ = 0;
          $698 = invoke_ii($697|0,$687|0)|0;
          $699 = __THREW__; __THREW__ = 0;
          $700 = $699&1;
          
          if ($700) {
           $$ph$ph237$ph$ph$ph$ph$ph = $682;$free218$ph$ph236$ph$ph$ph$ph$ph = $free216;
           label = 25;
           break L3;
          } else {
           $$0$i$i$i$i112 = $698;
          }
         } else {
          $701 = HEAP32[$690>>2]|0;
          
          $$0$i$i$i$i112 = $701;
         }
         
         $702 = ($$0$i$i$i$i112|0)==(-1);
         
         if ($702) {
          HEAP32[$9>>2] = 0;
          
          $703 = 1;
          break;
         } else {
          $$pre$i$i$i114 = HEAP32[$9>>2]|0;
          $phitmp$i$i$i115 = ($$pre$i$i$i114|0)==(0);
          
          $703 = $phitmp$i$i$i115;
          break;
         }
        }
       } while(0);
       
       $704 = HEAP32[$10>>2]|0;
       $705 = ($704|0)==(0);
       
       do {
        if ($705) {
         label = 259;
        } else {
         $gep_int264 = $704;
         $gep265 = (($gep_int264) + 12)|0;
         $706 = $gep265;
         $707 = HEAP32[$706>>2]|0;
         $gep_int266 = $704;
         $gep267 = (($gep_int266) + 16)|0;
         $708 = $gep267;
         $709 = HEAP32[$708>>2]|0;
         $710 = ($707|0)==($709|0);
         
         if ($710) {
          $711 = $704;
          $712 = HEAP32[$704>>2]|0;
          $gep_int268 = $712;
          $gep269 = (($gep_int268) + 36)|0;
          $713 = $gep269;
          $714 = HEAP32[$713>>2]|0;
          __THREW__ = 0;
          $715 = invoke_ii($714|0,$704|0)|0;
          $716 = __THREW__; __THREW__ = 0;
          $717 = $716&1;
          
          if ($717) {
           $$ph$ph237$ph$ph$ph$ph$ph = $682;$free218$ph$ph236$ph$ph$ph$ph$ph = $free216;
           label = 25;
           break L3;
          } else {
           $$0$i$i1$i$i118 = $715;
          }
         } else {
          $718 = HEAP32[$707>>2]|0;
          
          $$0$i$i1$i$i118 = $718;
         }
         
         $719 = ($$0$i$i1$i$i118|0)==(-1);
         
         if ($719) {
          HEAP32[$10>>2] = 0;
          
          label = 259;
          break;
         } else {
          
          if ($703) {
           $720 = $704;
           break;
          } else {
           label = 265;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 259) {
        label = 0;
        
        if ($703) {
         label = 265;
         break L3;
        } else {
         $720 = 0;
        }
       }
       
       $721 = HEAP32[$9>>2]|0;
       $gep_int270 = $721;
       $gep271 = (($gep_int270) + 12)|0;
       $722 = $gep271;
       $723 = HEAP32[$722>>2]|0;
       $gep_int272 = $721;
       $gep273 = (($gep_int272) + 16)|0;
       $724 = $gep273;
       $725 = HEAP32[$724>>2]|0;
       $726 = ($723|0)==($725|0);
       
       if ($726) {
        $727 = $721;
        $728 = HEAP32[$721>>2]|0;
        $gep_int274 = $728;
        $gep275 = (($gep_int274) + 36)|0;
        $729 = $gep275;
        $730 = HEAP32[$729>>2]|0;
        __THREW__ = 0;
        $731 = invoke_ii($730|0,$721|0)|0;
        $732 = __THREW__; __THREW__ = 0;
        $733 = $732&1;
        
        if ($733) {
         $$ph$ph237$ph$ph$ph$ph$ph = $682;$free218$ph$ph236$ph$ph$ph$ph$ph = $free216;
         label = 25;
         break L3;
        } else {
         $$0$i$i105 = $731;
        }
       } else {
        $734 = HEAP32[$723>>2]|0;
        
        $$0$i$i105 = $734;
       }
       
       $735 = HEAP32[$__dp>>2]|0;
       $736 = ($$0$i$i105|0)==($735|0);
       
       if (!($736)) {
        label = 265;
        break L3;
       }
       $739 = HEAP32[$9>>2]|0;
       $gep_int276 = $739;
       $gep277 = (($gep_int276) + 12)|0;
       $740 = $gep277;
       $741 = HEAP32[$740>>2]|0;
       $gep_int278 = $739;
       $gep279 = (($gep_int278) + 16)|0;
       $742 = $gep279;
       $743 = HEAP32[$742>>2]|0;
       $744 = ($741|0)==($743|0);
       
       if ($744) {
        $745 = $739;
        $746 = HEAP32[$739>>2]|0;
        $gep_int280 = $746;
        $gep281 = (($gep_int280) + 40)|0;
        $747 = $gep281;
        $748 = HEAP32[$747>>2]|0;
        __THREW__ = 0;
        u$364 = invoke_ii($748|0,$739|0)|0;
        $749 = __THREW__; __THREW__ = 0;
        $750 = $749&1;
        
        if ($750) {
         $$ph$ph237$ph$ph$ph$ph$ph = $682;$free218$ph$ph236$ph$ph$ph$ph$ph = $free216;
         label = 25;
         break L3;
        } else {
         $$pre$i3$i$i86 = $720;$752 = $685;$753 = $720;
        }
       } else {
        $gep_int282 = $741;
        $gep283 = (($gep_int282) + 4)|0;
        $751 = $gep283;
        HEAP32[$740>>2] = $751;
        
        $$pre$i3$i$i86 = $720;$752 = $685;$753 = $720;
       }
       while(1) {
        
        
        
        $754 = HEAP32[$9>>2]|0;
        $755 = ($754|0)==(0);
        
        do {
         if ($755) {
          $770 = 1;
         } else {
          $gep_int284 = $754;
          $gep285 = (($gep_int284) + 12)|0;
          $756 = $gep285;
          $757 = HEAP32[$756>>2]|0;
          $gep_int286 = $754;
          $gep287 = (($gep_int286) + 16)|0;
          $758 = $gep287;
          $759 = HEAP32[$758>>2]|0;
          $760 = ($757|0)==($759|0);
          
          if ($760) {
           $761 = $754;
           $762 = HEAP32[$754>>2]|0;
           $gep_int288 = $762;
           $gep289 = (($gep_int288) + 36)|0;
           $763 = $gep289;
           $764 = HEAP32[$763>>2]|0;
           __THREW__ = 0;
           $765 = invoke_ii($764|0,$754|0)|0;
           $766 = __THREW__; __THREW__ = 0;
           $767 = $766&1;
           
           if ($767) {
            label = 21;
            break L3;
           } else {
            $$0$i$i$i$i78 = $765;
           }
          } else {
           $768 = HEAP32[$757>>2]|0;
           
           $$0$i$i$i$i78 = $768;
          }
          
          $769 = ($$0$i$i$i$i78|0)==(-1);
          
          if ($769) {
           HEAP32[$9>>2] = 0;
           
           $770 = 1;
           break;
          } else {
           $$pre$i$i$i80 = HEAP32[$9>>2]|0;
           $phitmp$i$i$i81 = ($$pre$i$i$i80|0)==(0);
           
           $770 = $phitmp$i$i$i81;
           break;
          }
         }
        } while(0);
        
        $771 = ($753|0)==(0);
        
        do {
         if ($771) {
          $$pre$i3$i$i86403$ph = $$pre$i3$i$i86;
          label = 282;
         } else {
          $gep_int290 = $753;
          $gep291 = (($gep_int290) + 12)|0;
          $772 = $gep291;
          $773 = HEAP32[$772>>2]|0;
          $gep_int292 = $753;
          $gep293 = (($gep_int292) + 16)|0;
          $774 = $gep293;
          $775 = HEAP32[$774>>2]|0;
          $776 = ($773|0)==($775|0);
          
          if ($776) {
           $777 = $753;
           $778 = HEAP32[$753>>2]|0;
           $gep_int294 = $778;
           $gep295 = (($gep_int294) + 36)|0;
           $779 = $gep295;
           $780 = HEAP32[$779>>2]|0;
           __THREW__ = 0;
           $781 = invoke_ii($780|0,$753|0)|0;
           $782 = __THREW__; __THREW__ = 0;
           $783 = $782&1;
           
           if ($783) {
            label = 21;
            break L3;
           } else {
            $$0$i$i1$i$i84 = $781;
           }
          } else {
           $784 = HEAP32[$773>>2]|0;
           
           $$0$i$i1$i$i84 = $784;
          }
          
          $785 = ($$0$i$i1$i$i84|0)==(-1);
          
          if ($785) {
           HEAP32[$10>>2] = 0;
           
           $$pre$i3$i$i86403$ph = 0;
           label = 282;
           break;
          } else {
           $phitmp$i4$i$i87 = ($$pre$i3$i$i86|0)==(0);
           $tmp$i$i89 = $770 ^ $phitmp$i4$i$i87;
           
           if ($tmp$i$i89) {
            $$pre$i3$i$i86403420 = $$pre$i3$i$i86;$786 = $$pre$i3$i$i86;
            break;
           } else {
            label = 289;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 282) {
         label = 0;
         
         
         if ($770) {
          label = 289;
          break L3;
         } else {
          $$pre$i3$i$i86403420 = $$pre$i3$i$i86403$ph;$786 = 0;
         }
        }
        
        
        $787 = HEAP32[$9>>2]|0;
        $gep_int296 = $787;
        $gep297 = (($gep_int296) + 12)|0;
        $788 = $gep297;
        $789 = HEAP32[$788>>2]|0;
        $gep_int298 = $787;
        $gep299 = (($gep_int298) + 16)|0;
        $790 = $gep299;
        $791 = HEAP32[$790>>2]|0;
        $792 = ($789|0)==($791|0);
        
        if ($792) {
         $793 = $787;
         $794 = HEAP32[$787>>2]|0;
         $gep_int300 = $794;
         $gep301 = (($gep_int300) + 36)|0;
         $795 = $gep301;
         $796 = HEAP32[$795>>2]|0;
         __THREW__ = 0;
         $797 = invoke_ii($796|0,$787|0)|0;
         $798 = __THREW__; __THREW__ = 0;
         $799 = $798&1;
         
         if ($799) {
          label = 21;
          break L3;
         } else {
          $$0$i$i72 = $797;
         }
        } else {
         $800 = HEAP32[$789>>2]|0;
         
         $$0$i$i72 = $800;
        }
        
        $801 = HEAP32[$__ct>>2]|0;
        $gep_int302 = $801;
        $gep303 = (($gep_int302) + 12)|0;
        $802 = $gep303;
        $803 = HEAP32[$802>>2]|0;
        __THREW__ = 0;
        $804 = invoke_iiii($803|0,$__ct|0,2048,$$0$i$i72|0)|0;
        $805 = __THREW__; __THREW__ = 0;
        $806 = $805&1;
        
        if ($806) {
         label = 21;
         break L3;
        }
        
        if (!($804)) {
         label = 289;
         break L3;
        }
        $809 = HEAP32[$__wn>>2]|0;
        $810 = HEAP32[$1>>2]|0;
        $811 = ($809|0)==($810|0);
        
        if ($811) {
         __THREW__ = 0;
         invoke_viii(19,$__wb|0,$__wn|0,$1|0);
         $812 = __THREW__; __THREW__ = 0;
         $813 = $812&1;
         
         if ($813) {
          label = 21;
          break L3;
         }
        }
        $814 = HEAP32[$9>>2]|0;
        $gep_int304 = $814;
        $gep305 = (($gep_int304) + 12)|0;
        $815 = $gep305;
        $816 = HEAP32[$815>>2]|0;
        $gep_int306 = $814;
        $gep307 = (($gep_int306) + 16)|0;
        $817 = $gep307;
        $818 = HEAP32[$817>>2]|0;
        $819 = ($816|0)==($818|0);
        
        if ($819) {
         $820 = $814;
         $821 = HEAP32[$814>>2]|0;
         $gep_int308 = $821;
         $gep309 = (($gep_int308) + 36)|0;
         $822 = $gep309;
         $823 = HEAP32[$822>>2]|0;
         __THREW__ = 0;
         $824 = invoke_ii($823|0,$814|0)|0;
         $825 = __THREW__; __THREW__ = 0;
         $826 = $825&1;
         
         if ($826) {
          label = 21;
          break L3;
         } else {
          $$0$i$i64 = $824;
         }
        } else {
         $827 = HEAP32[$816>>2]|0;
         
         $$0$i$i64 = $827;
        }
        
        $828 = HEAP32[$__wn>>2]|0;
        $gep_int310 = $828;
        $gep311 = (($gep_int310) + 4)|0;
        $829 = $gep311;
        HEAP32[$__wn>>2] = $829;
        HEAP32[$828>>2] = $$0$i$i64;
        $830 = (($752) + -1)|0;
        HEAP32[$__fd>>2] = $830;
        $831 = HEAP32[$9>>2]|0;
        $gep_int312 = $831;
        $gep313 = (($gep_int312) + 12)|0;
        $832 = $gep313;
        $833 = HEAP32[$832>>2]|0;
        $gep_int314 = $831;
        $gep315 = (($gep_int314) + 16)|0;
        $834 = $gep315;
        $835 = HEAP32[$834>>2]|0;
        $836 = ($833|0)==($835|0);
        
        if ($836) {
         $837 = $831;
         $838 = HEAP32[$831>>2]|0;
         $gep_int316 = $838;
         $gep317 = (($gep_int316) + 40)|0;
         $839 = $gep317;
         $840 = HEAP32[$839>>2]|0;
         __THREW__ = 0;
         u$409 = invoke_ii($840|0,$831|0)|0;
         $841 = __THREW__; __THREW__ = 0;
         $842 = $841&1;
         
         if ($842) {
          label = 21;
          break L3;
         }
        } else {
         $gep_int318 = $833;
         $gep319 = (($gep_int318) + 4)|0;
         $844 = $gep319;
         HEAP32[$832>>2] = $844;
         
        }
        $843 = ($830|0)>(0);
        
        if ($843) {
         $$pre$i3$i$i86 = $$pre$i3$i$i86403420;$752 = $830;$753 = $786;
        } else {
         break;
        }
       }
      }
      $845 = HEAP32[$__wn>>2]|0;
      $846 = HEAP32[$7>>2]|0;
      $847 = ($845|0)==($846|0);
      
      if ($847) {
       label = 300;
       break L3;
      } else {
       $850 = $682;$851 = $683;$852 = $684;$__trailing_sign$1 = $__trailing_sign$0343;$free215 = $free216;
      }
      break;
     }
     default: {
      $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__trailing_sign$0343;$free215 = $free214336;
     }
     }
    } while(0);
    L356: do {
     if ((label|0) == 42) {
      label = 0;
      $126 = ($__p$0341|0)==(3);
      
      if ($126) {
       $$lcssa285 = $27;$$lcssa300 = $26;$__trailing_sign$0$lcssa = $__trailing_sign$0343;$free214$lcssa = $free214336;
       label = 302;
       break L3;
      } else {
       $$pre$i3$i$i47 = $61;$127 = $61;
      }
      while(1) {
       
       
       $128 = HEAP32[$9>>2]|0;
       $129 = ($128|0)==(0);
       
       do {
        if ($129) {
         $144 = 1;
        } else {
         $gep_int81 = $128;
         $gep82 = (($gep_int81) + 12)|0;
         $130 = $gep82;
         $131 = HEAP32[$130>>2]|0;
         $gep_int83 = $128;
         $gep84 = (($gep_int83) + 16)|0;
         $132 = $gep84;
         $133 = HEAP32[$132>>2]|0;
         $134 = ($131|0)==($133|0);
         
         if ($134) {
          $135 = $128;
          $136 = HEAP32[$128>>2]|0;
          $gep_int85 = $136;
          $gep86 = (($gep_int85) + 36)|0;
          $137 = $gep86;
          $138 = HEAP32[$137>>2]|0;
          __THREW__ = 0;
          $139 = invoke_ii($138|0,$128|0)|0;
          $140 = __THREW__; __THREW__ = 0;
          $141 = $140&1;
          
          if ($141) {
           label = 24;
           break L3;
          } else {
           $$0$i$i$i$i39 = $139;
          }
         } else {
          $142 = HEAP32[$131>>2]|0;
          
          $$0$i$i$i$i39 = $142;
         }
         
         $143 = ($$0$i$i$i$i39|0)==(-1);
         
         if ($143) {
          HEAP32[$9>>2] = 0;
          
          $144 = 1;
          break;
         } else {
          $$pre$i$i$i41 = HEAP32[$9>>2]|0;
          $phitmp$i$i$i42 = ($$pre$i$i$i41|0)==(0);
          
          $144 = $phitmp$i$i$i42;
          break;
         }
        }
       } while(0);
       
       $145 = ($127|0)==(0);
       
       do {
        if ($145) {
         $$pre$i3$i$i47396 = $$pre$i3$i$i47;
         label = 56;
        } else {
         $gep_int87 = $127;
         $gep88 = (($gep_int87) + 12)|0;
         $146 = $gep88;
         $147 = HEAP32[$146>>2]|0;
         $gep_int89 = $127;
         $gep90 = (($gep_int89) + 16)|0;
         $148 = $gep90;
         $149 = HEAP32[$148>>2]|0;
         $150 = ($147|0)==($149|0);
         
         if ($150) {
          $151 = $127;
          $152 = HEAP32[$127>>2]|0;
          $gep_int91 = $152;
          $gep92 = (($gep_int91) + 36)|0;
          $153 = $gep92;
          $154 = HEAP32[$153>>2]|0;
          __THREW__ = 0;
          $155 = invoke_ii($154|0,$127|0)|0;
          $156 = __THREW__; __THREW__ = 0;
          $157 = $156&1;
          
          if ($157) {
           label = 24;
           break L3;
          } else {
           $$0$i$i1$i$i45 = $155;
          }
         } else {
          $158 = HEAP32[$147>>2]|0;
          
          $$0$i$i1$i$i45 = $158;
         }
         
         $159 = ($$0$i$i1$i$i45|0)==(-1);
         
         if ($159) {
          HEAP32[$10>>2] = 0;
          
          $$pre$i3$i$i47396 = 0;
          label = 56;
          break;
         } else {
          $phitmp$i4$i$i48 = ($$pre$i3$i$i47|0)==(0);
          $tmp$i$i50 = $144 ^ $phitmp$i4$i$i48;
          
          if ($tmp$i$i50) {
           $$pre$i3$i$i47398 = $$pre$i3$i$i47;$160 = $$pre$i3$i$i47;
           break;
          } else {
           $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__trailing_sign$0343;$free215 = $free214336;
           break L356;
          }
         }
        }
       } while(0);
       if ((label|0) == 56) {
        label = 0;
        
        
        if ($144) {
         $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__trailing_sign$0343;$free215 = $free214336;
         break L356;
        } else {
         $$pre$i3$i$i47398 = $$pre$i3$i$i47396;$160 = 0;
        }
       }
       
       
       $161 = HEAP32[$9>>2]|0;
       $gep_int93 = $161;
       $gep94 = (($gep_int93) + 12)|0;
       $162 = $gep94;
       $163 = HEAP32[$162>>2]|0;
       $gep_int95 = $161;
       $gep96 = (($gep_int95) + 16)|0;
       $164 = $gep96;
       $165 = HEAP32[$164>>2]|0;
       $166 = ($163|0)==($165|0);
       
       if ($166) {
        $167 = $161;
        $168 = HEAP32[$161>>2]|0;
        $gep_int97 = $168;
        $gep98 = (($gep_int97) + 36)|0;
        $169 = $gep98;
        $170 = HEAP32[$169>>2]|0;
        __THREW__ = 0;
        $171 = invoke_ii($170|0,$161|0)|0;
        $172 = __THREW__; __THREW__ = 0;
        $173 = $172&1;
        
        if ($173) {
         label = 24;
         break L3;
        } else {
         $$0$i$i54 = $171;
        }
       } else {
        $174 = HEAP32[$163>>2]|0;
        
        $$0$i$i54 = $174;
       }
       
       $175 = HEAP32[$__ct>>2]|0;
       $gep_int99 = $175;
       $gep100 = (($gep_int99) + 12)|0;
       $176 = $gep100;
       $177 = HEAP32[$176>>2]|0;
       __THREW__ = 0;
       $178 = invoke_iiii($177|0,$__ct|0,8192,$$0$i$i54|0)|0;
       $179 = __THREW__; __THREW__ = 0;
       $180 = $179&1;
       
       if ($180) {
        label = 24;
        break L3;
       }
       
       if (!($178)) {
        $850 = $27;$851 = $26;$852 = $25;$__trailing_sign$1 = $__trailing_sign$0343;$free215 = $free214336;
        break L356;
       }
       $181 = HEAP32[$9>>2]|0;
       $gep_int101 = $181;
       $gep102 = (($gep_int101) + 12)|0;
       $182 = $gep102;
       $183 = HEAP32[$182>>2]|0;
       $gep_int103 = $181;
       $gep104 = (($gep_int103) + 16)|0;
       $184 = $gep104;
       $185 = HEAP32[$184>>2]|0;
       $186 = ($183|0)==($185|0);
       
       if ($186) {
        $187 = $181;
        $188 = HEAP32[$181>>2]|0;
        $gep_int105 = $188;
        $gep106 = (($gep_int105) + 40)|0;
        $189 = $gep106;
        $190 = HEAP32[$189>>2]|0;
        __THREW__ = 0;
        $191 = invoke_ii($190|0,$181|0)|0;
        $192 = __THREW__; __THREW__ = 0;
        $193 = $192&1;
        
        if ($193) {
         label = 24;
         break L3;
        } else {
         $$0$i$i59 = $191;
        }
       } else {
        $gep_int107 = $183;
        $gep108 = (($gep_int107) + 4)|0;
        $194 = $gep108;
        HEAP32[$182>>2] = $194;
        $195 = HEAP32[$183>>2]|0;
        
        $$0$i$i59 = $195;
       }
       
       __THREW__ = 0;
       invoke_vii(66,$__spaces|0,$$0$i$i59|0);
       $196 = __THREW__; __THREW__ = 0;
       $197 = $196&1;
       
       if ($197) {
        label = 24;
        break L3;
       } else {
        $$pre$i3$i$i47 = $$pre$i3$i$i47398;$127 = $160;
       }
      }
     }
    } while(0);
    
    
    
    
    
    $853 = (($__p$0341) + 1)|0;
    $854 = ($853>>>0)<(4);
    
    if ($854) {
     $25 = $852;$26 = $851;$27 = $850;$__p$0341 = $853;$__trailing_sign$0343 = $__trailing_sign$1;$free214336 = $free215;
    } else {
     $$lcssa285 = $850;$$lcssa300 = $851;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free214$lcssa = $free215;
     label = 302;
     break;
    }
   }
   L393: do {
    if ((label|0) == 20) {
     
     
     $expanded18 = 69;
     $67 = ___cxa_find_matching_catch(-1,-1)|0;
     $68 = tempRet0;
     
     $81 = $$ph$ph;$free218 = $free218$ph$ph;$lpad$phi$index = $67;$lpad$phi$index8 = $68;
     break L1;
    }
    else if ((label|0) == 21) {
     $expanded19 = 69;
     $69 = ___cxa_find_matching_catch(-1,-1)|0;
     $70 = tempRet0;
     
     $81 = $682;$free218 = $free216;$lpad$phi$index = $69;$lpad$phi$index8 = $70;
     break L1;
    }
    else if ((label|0) == 22) {
     $expanded20 = 69;
     $71 = ___cxa_find_matching_catch(-1,-1)|0;
     $72 = tempRet0;
     
     $81 = $27;$free218 = $free214336;$lpad$phi$index = $71;$lpad$phi$index8 = $72;
     break L1;
    }
    else if ((label|0) == 23) {
     $expanded21 = 69;
     $73 = ___cxa_find_matching_catch(-1,-1)|0;
     $74 = tempRet0;
     
     $81 = $27;$free218 = $free214336;$lpad$phi$index = $73;$lpad$phi$index8 = $74;
     break L1;
    }
    else if ((label|0) == 24) {
     $expanded22 = 69;
     $75 = ___cxa_find_matching_catch(-1,-1)|0;
     $76 = tempRet0;
     
     $81 = $27;$free218 = $free214336;$lpad$phi$index = $75;$lpad$phi$index8 = $76;
     break L1;
    }
    else if ((label|0) == 25) {
     
     
     $expanded23 = 69;
     $77 = ___cxa_find_matching_catch(-1,-1)|0;
     $78 = tempRet0;
     
     $81 = $$ph$ph237$ph$ph$ph$ph$ph;$free218 = $free218$ph$ph236$ph$ph$ph$ph$ph;$lpad$phi$index = $77;$lpad$phi$index8 = $78;
     break L1;
    }
    else if ((label|0) == 41) {
     $124 = HEAP32[$__err>>2]|0;
     $125 = $124 | 4;
     HEAP32[$__err>>2] = $125;
     
     $$0 = 0;$943 = $27;$free220 = $free214336;
    }
    else if ((label|0) == 134) {
     $381 = HEAP32[$__err>>2]|0;
     $382 = $381 | 4;
     HEAP32[$__err>>2] = $382;
     
     $$0 = 0;$943 = $27;$free220 = $free214336;
    }
    else if ((label|0) == 193) {
     $543 = HEAP32[$__err>>2]|0;
     $544 = $543 | 4;
     HEAP32[$__err>>2] = $544;
     
     $$0 = 0;$943 = $27;$free220 = $free214336;
    }
    else if ((label|0) == 265) {
     $737 = HEAP32[$__err>>2]|0;
     $738 = $737 | 4;
     HEAP32[$__err>>2] = $738;
     
     $$0 = 0;$943 = $682;$free220 = $free216;
    }
    else if ((label|0) == 289) {
     $807 = HEAP32[$__err>>2]|0;
     $808 = $807 | 4;
     HEAP32[$__err>>2] = $808;
     
     $$0 = 0;$943 = $682;$free220 = $free216;
    }
    else if ((label|0) == 300) {
     $848 = HEAP32[$__err>>2]|0;
     $849 = $848 | 4;
     HEAP32[$__err>>2] = $849;
     
     $$0 = 0;$943 = $682;$free220 = $free216;
    }
    else if ((label|0) == 302) {
     
     
     
     
     $855 = ($__trailing_sign$0$lcssa|0)==(0);
     
     L407: do {
      if (!($855)) {
       $856 = $__trailing_sign$0$lcssa;
       $gep_int320 = $__trailing_sign$0$lcssa;
       $gep321 = (($gep_int320) + 4)|0;
       $857 = $gep321;
       $gep_int322 = $__trailing_sign$0$lcssa;
       $gep323 = (($gep_int322) + 8)|0;
       $858 = $gep323;
       
       $__i$0 = 1;
       L409: while(1) {
        
        $859 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $860 = $859 & 1;
        $861 = ($860<<24>>24)==(0);
        
        if ($861) {
         $863 = $859&255;
         $864 = $863 >>> 1;
         
         $865 = $864;
        } else {
         $862 = HEAP32[$857>>2]|0;
         
         $865 = $862;
        }
        
        $866 = ($__i$0>>>0)<($865>>>0);
        
        if (!($866)) {
         break L407;
        }
        $867 = HEAP32[$9>>2]|0;
        $868 = ($867|0)==(0);
        
        do {
         if ($868) {
          $883 = 1;
         } else {
          $gep_int324 = $867;
          $gep325 = (($gep_int324) + 12)|0;
          $869 = $gep325;
          $870 = HEAP32[$869>>2]|0;
          $gep_int326 = $867;
          $gep327 = (($gep_int326) + 16)|0;
          $871 = $gep327;
          $872 = HEAP32[$871>>2]|0;
          $873 = ($870|0)==($872|0);
          
          if ($873) {
           $874 = $867;
           $875 = HEAP32[$867>>2]|0;
           $gep_int328 = $875;
           $gep329 = (($gep_int328) + 36)|0;
           $876 = $gep329;
           $877 = HEAP32[$876>>2]|0;
           __THREW__ = 0;
           $878 = invoke_ii($877|0,$867|0)|0;
           $879 = __THREW__; __THREW__ = 0;
           $880 = $879&1;
           
           if ($880) {
            label = 19;
            break L409;
           } else {
            $$0$i$i$i$i = $878;
           }
          } else {
           $881 = HEAP32[$870>>2]|0;
           
           $$0$i$i$i$i = $881;
          }
          
          $882 = ($$0$i$i$i$i|0)==(-1);
          
          if ($882) {
           HEAP32[$9>>2] = 0;
           
           $883 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$9>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0);
           
           $883 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        
        $884 = HEAP32[$10>>2]|0;
        $885 = ($884|0)==(0);
        
        do {
         if ($885) {
          label = 321;
         } else {
          $gep_int330 = $884;
          $gep331 = (($gep_int330) + 12)|0;
          $886 = $gep331;
          $887 = HEAP32[$886>>2]|0;
          $gep_int332 = $884;
          $gep333 = (($gep_int332) + 16)|0;
          $888 = $gep333;
          $889 = HEAP32[$888>>2]|0;
          $890 = ($887|0)==($889|0);
          
          if ($890) {
           $891 = $884;
           $892 = HEAP32[$884>>2]|0;
           $gep_int334 = $892;
           $gep335 = (($gep_int334) + 36)|0;
           $893 = $gep335;
           $894 = HEAP32[$893>>2]|0;
           __THREW__ = 0;
           $895 = invoke_ii($894|0,$884|0)|0;
           $896 = __THREW__; __THREW__ = 0;
           $897 = $896&1;
           
           if ($897) {
            label = 19;
            break L409;
           } else {
            $$0$i$i1$i$i = $895;
           }
          } else {
           $898 = HEAP32[$887>>2]|0;
           
           $$0$i$i1$i$i = $898;
          }
          
          $899 = ($$0$i$i1$i$i|0)==(-1);
          
          if ($899) {
           HEAP32[$10>>2] = 0;
           
           label = 321;
           break;
          } else {
           
           if ($883) {
            break;
           } else {
            label = 329;
            break L409;
           }
          }
         }
        } while(0);
        if ((label|0) == 321) {
         label = 0;
         
         if ($883) {
          label = 329;
          break;
         }
        }
        $900 = HEAP32[$9>>2]|0;
        $gep_int336 = $900;
        $gep337 = (($gep_int336) + 12)|0;
        $901 = $gep337;
        $902 = HEAP32[$901>>2]|0;
        $gep_int338 = $900;
        $gep339 = (($gep_int338) + 16)|0;
        $903 = $gep339;
        $904 = HEAP32[$903>>2]|0;
        $905 = ($902|0)==($904|0);
        
        if ($905) {
         $906 = $900;
         $907 = HEAP32[$900>>2]|0;
         $gep_int340 = $907;
         $gep341 = (($gep_int340) + 36)|0;
         $908 = $gep341;
         $909 = HEAP32[$908>>2]|0;
         __THREW__ = 0;
         $910 = invoke_ii($909|0,$900|0)|0;
         $911 = __THREW__; __THREW__ = 0;
         $912 = $911&1;
         
         if ($912) {
          label = 19;
          break;
         } else {
          $$0$i$i = $910;
         }
        } else {
         $913 = HEAP32[$902>>2]|0;
         
         $$0$i$i = $913;
        }
        
        $914 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $915 = $914 & 1;
        $916 = ($915<<24>>24)==(0);
        
        if ($916) {
         $918 = $857;
        } else {
         $917 = HEAP32[$858>>2]|0;
         
         $918 = $917;
        }
        
        $gep_int342 = $918;
        $gep_array343 = $__i$0<<2;
        $gep344 = (($gep_int342) + ($gep_array343))|0;
        $919 = $gep344;
        $920 = HEAP32[$919>>2]|0;
        $921 = ($$0$i$i|0)==($920|0);
        
        if (!($921)) {
         label = 329;
         break;
        }
        $924 = (($__i$0) + 1)|0;
        $925 = HEAP32[$9>>2]|0;
        $gep_int345 = $925;
        $gep346 = (($gep_int345) + 12)|0;
        $926 = $gep346;
        $927 = HEAP32[$926>>2]|0;
        $gep_int347 = $925;
        $gep348 = (($gep_int347) + 16)|0;
        $928 = $gep348;
        $929 = HEAP32[$928>>2]|0;
        $930 = ($927|0)==($929|0);
        
        if ($930) {
         $931 = $925;
         $932 = HEAP32[$925>>2]|0;
         $gep_int349 = $932;
         $gep350 = (($gep_int349) + 40)|0;
         $933 = $gep350;
         $934 = HEAP32[$933>>2]|0;
         __THREW__ = 0;
         u$454 = invoke_ii($934|0,$925|0)|0;
         $935 = __THREW__; __THREW__ = 0;
         $936 = $935&1;
         
         if ($936) {
          label = 19;
          break;
         } else {
          $__i$0 = $924;
          continue;
         }
        } else {
         $gep_int351 = $927;
         $gep352 = (($gep_int351) + 4)|0;
         $937 = $gep352;
         HEAP32[$926>>2] = $937;
         
         $__i$0 = $924;
         continue;
        }
       }
       if ((label|0) == 19) {
        $expanded = 69;
        $65 = ___cxa_find_matching_catch(-1,-1)|0;
        $66 = tempRet0;
        
        $81 = $$lcssa285;$free218 = $free214$lcssa;$lpad$phi$index = $65;$lpad$phi$index8 = $66;
        break L1;
       }
       else if ((label|0) == 329) {
        $922 = HEAP32[$__err>>2]|0;
        $923 = $922 | 4;
        HEAP32[$__err>>2] = $923;
        
        $$0 = 0;$943 = $$lcssa285;$free220 = $free214$lcssa;
        break L393;
       }
      }
     } while(0);
     $938 = ($$lcssa285|0)==($$lcssa300|0);
     
     if ($938) {
      $$0 = 1;$943 = $$lcssa300;$free220 = $free214$lcssa;
      break;
     }
     HEAP32[$__et>>2] = 0;
     __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa285,$$lcssa300,$__et);
     $939 = HEAP32[$__et>>2]|0;
     $940 = ($939|0)==(0);
     
     if ($940) {
      $$0 = 1;$943 = $$lcssa285;$free220 = $free214$lcssa;
      break;
     }
     $941 = HEAP32[$__err>>2]|0;
     $942 = $941 | 4;
     HEAP32[$__err>>2] = $942;
     
     $$0 = 0;$943 = $$lcssa285;$free220 = $free214$lcssa;
    }
   } while(0);
   
   
   
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $944 = ($943|0)==(0);
   
   if ($944) {
    
    STACKTOP = sp;return $$0|0;
   }
   $945 = $943;
   __THREW__ = 0;
   invoke_vi($free220|0,$945|0);
   $946 = __THREW__; __THREW__ = 0;
   $947 = $946&1;
   
   if ($947) {
    $expanded26 = 69;
    $948 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$473 = tempRet0;
    ___clang_call_terminate($948);
    // unreachable
   } else {
    
    STACKTOP = sp;return $$0|0;
   }
  }
 } while(0);
 
 
 
 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $82 = ($81|0)==(0);
 
 if ($82) {
  ___resumeException($lpad$phi$index|0);
  // unreachable
 }
 $83 = $81;
 __THREW__ = 0;
 invoke_vi($free218|0,$83|0);
 $84 = __THREW__; __THREW__ = 0;
 $85 = $84&1;
 
 if ($85) {
  $expanded25 = 69;
  $86 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$50 = tempRet0;
  ___clang_call_terminate($86);
  // unreachable
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0116 = 0, $$0117 = 0, $$018 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre14 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__w$09$phi = 0, $__wb = 0, $__wbuf = 0;
 var $__wn = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep17 = 0, $gep22 = 0, $gep24 = 0, $gep27 = 0;
 var $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0, $gep_array = 0, $gep_int = 0, $gep_int14 = 0;
 var $gep_int15 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int35 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0;
 var $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int67 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0, u$51 = 0, u$75 = 0, u$81 = 0, u$86 = 0, u$92 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 424|0;
 $__wn = sp + 432|0;
 $__loc = sp + 440|0;
 $__neg = sp + 448|0;
 $1 = sp + 456|0;
 $2 = $__wbuf;
 
 $gep_int = $__wbuf;
 $3 = $gep_int;
 $gep_int14 = $__wb;
 $4 = $gep_int14;
 HEAP32[$4>>2] = $3;
 $gep_int15 = $__wb;
 $gep = (($gep_int15) + 4)|0;
 $5 = $gep;
 HEAP32[$5>>2] = 181;
 $gep_int16 = $__wbuf;
 $gep17 = (($gep_int16) + 400)|0;
 $6 = $gep17;
 __THREW__ = 0;
 invoke_vii(41,$__loc|0,$__iob|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 
 do {
  if ($8) {
   $expanded10 = 69;
   $68 = ___cxa_find_matching_catch(-1,-1)|0;
   $69 = tempRet0;
   HEAP32[$4>>2] = 0;
   
   $$0116 = $69;$$018 = $68;$137 = $3;
  } else {
   $gep_int18 = $__loc;
   $9 = $gep_int18;
   $10 = HEAP32[$9>>2]|0;
   $11 = $__p$i$i$i$i;
   
   $expanded1 = 8472;
   $gep_int19 = 8472;
   $expanded = $gep_int19;
   $12 = HEAP32[$expanded>>2]|0;
   $13 = ($12|0)==(-1);
   
   if ($13) {
    label = 4;
   } else {
    $gep_int20 = $__p$i$i$i$i;
    $14 = $gep_int20;
    $expanded2 = 8472;
    HEAP32[$14>>2] = $expanded2;
    $gep_int21 = $__p$i$i$i$i;
    $gep22 = (($gep_int21) + 4)|0;
    $15 = $gep22;
    $expanded3 = 177;
    HEAP32[$15>>2] = $expanded3;
    $gep_int23 = $__p$i$i$i$i;
    $gep24 = (($gep_int23) + 8)|0;
    $16 = $gep24;
    HEAP32[$16>>2] = 0;
    __THREW__ = 0;
    $expanded5 = 8472;
    $gep_int25 = 8472;
    $expanded4 = $gep_int25;
    invoke_viii(17,$expanded4|0,$11|0,178);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    
    if (!($18)) {
     label = 4;
    }
   }
   L6: do {
    if ((label|0) == 4) {
     
     $expanded7 = 8472;
     $gep_int26 = 8472;
     $gep27 = (($gep_int26) + 4)|0;
     $expanded6 = $gep27;
     $19 = HEAP32[$expanded6>>2]|0;
     $20 = (($19) + -1)|0;
     $gep_int28 = $10;
     $gep29 = (($gep_int28) + 12)|0;
     $21 = $gep29;
     $22 = HEAP32[$21>>2]|0;
     $gep_int30 = $10;
     $gep31 = (($gep_int30) + 8)|0;
     $23 = $gep31;
     $24 = HEAP32[$23>>2]|0;
     $25 = $22;
     $26 = $24;
     $27 = (($25) - ($26))|0;
     $28 = $27 >> 2;
     $29 = ($28>>>0)>($20>>>0);
     
     do {
      if ($29) {
       $gep_int32 = $24;
       $gep_array = $20<<2;
       $gep33 = (($gep_int32) + ($gep_array))|0;
       $30 = $gep33;
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==(0);
       
       if ($32) {
        break;
       }
       $37 = $31;
       HEAP8[$__neg] = 0;
       $gep_int34 = $__e;
       $38 = $gep_int34;
       $39 = HEAP32[$38>>2]|0;
       $gep_int35 = $1;
       $40 = $gep_int35;
       HEAP32[$40>>2] = $39;
       $gep_int36 = $__iob;
       $gep37 = (($gep_int36) + 4)|0;
       $41 = $gep37;
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = $$byval_copy;
       
       $44 = $$byval_copy;
       $45 = $1;
       ;HEAP32[$44+0>>2]=HEAP32[$45+0>>2]|0;
       $46 = invoke_iiiiiiiiiiii(2,$__b|0,$$byval_copy|0,$__intl|0,$__loc|0,$42|0,$__err|0,$__neg|0,$37|0,$__wb|0,$__wn|0,$6|0)|0;
       $47 = $$byval_copy;
       
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       
       if ($49) {
        break L6;
       }
       
       if ($46) {
        $50 = $__v;
        $51 = HEAP8[$__v]|0;
        $52 = $51 & 1;
        $53 = ($52<<24>>24)==(0);
        
        if ($53) {
         $gep_int42 = $__v;
         $gep43 = (($gep_int42) + 4)|0;
         $57 = $gep43;
         HEAP32[$57>>2] = 0;
         HEAP8[$__v] = 0;
         
        } else {
         $gep_int38 = $__v;
         $gep39 = (($gep_int38) + 8)|0;
         $54 = $gep39;
         $55 = HEAP32[$54>>2]|0;
         HEAP32[$55>>2] = 0;
         $gep_int40 = $__v;
         $gep41 = (($gep_int40) + 4)|0;
         $56 = $gep41;
         HEAP32[$56>>2] = 0;
         
        }
        $58 = HEAP8[$__neg]|0;
        $59 = ($58<<24>>24)==(0);
        $$pre14 = $31;
        
        if (!($59)) {
         $60 = HEAP32[$31>>2]|0;
         $gep_int44 = $60;
         $gep45 = (($gep_int44) + 44)|0;
         $61 = $gep45;
         $62 = HEAP32[$61>>2]|0;
         __THREW__ = 0;
         $63 = invoke_iii($62|0,$37|0,45)|0;
         $64 = __THREW__; __THREW__ = 0;
         $65 = $64&1;
         
         if ($65) {
          break L6;
         }
         __THREW__ = 0;
         invoke_vii(66,$__v|0,$63|0);
         $66 = __THREW__; __THREW__ = 0;
         $67 = $66&1;
         
         if ($67) {
          break L6;
         }
        }
        $70 = HEAP32[$31>>2]|0;
        $gep_int46 = $70;
        $gep47 = (($gep_int46) + 44)|0;
        $71 = $gep47;
        $72 = HEAP32[$71>>2]|0;
        __THREW__ = 0;
        $73 = invoke_iii($72|0,$37|0,48)|0;
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        
        if ($75) {
         break L6;
        }
        $76 = HEAP32[$4>>2]|0;
        $77 = HEAP32[$__wn>>2]|0;
        $gep_int48 = $77;
        $gep49 = (($gep_int48) + -4)|0;
        $78 = $gep49;
        $79 = ($76>>>0)<($78>>>0);
        
        L23: do {
         if ($79) {
          $__w$09 = $76;
          while(1) {
           
           $81 = HEAP32[$__w$09>>2]|0;
           $82 = ($81|0)==($73|0);
           $gep_int50 = $__w$09;
           $gep51 = (($gep_int50) + 4)|0;
           $83 = $gep51;
           
           if (!($82)) {
            $__w$0$lcssa = $__w$09;
            break L23;
           }
           $80 = ($83>>>0)<($78>>>0);
           
           if ($80) {
            $__w$09$phi = $83;$__w$09 = $__w$09$phi;
           } else {
            $__w$0$lcssa = $83;
            break;
           }
          }
         } else {
          $__w$0$lcssa = $76;
         }
        } while(0);
        
        __THREW__ = 0;
        u$51 = invoke_iiii(34,$__v|0,$__w$0$lcssa|0,$77|0)|0;
        $84 = __THREW__; __THREW__ = 0;
        $85 = $84&1;
        
        if ($85) {
         break L6;
        }
       }
       $gep_int52 = $__b;
       $86 = $gep_int52;
       $87 = HEAP32[$86>>2]|0;
       $88 = ($87|0)==(0);
       
       do {
        if ($88) {
         $103 = 1;
        } else {
         $gep_int53 = $87;
         $gep54 = (($gep_int53) + 12)|0;
         $89 = $gep54;
         $90 = HEAP32[$89>>2]|0;
         $gep_int55 = $87;
         $gep56 = (($gep_int55) + 16)|0;
         $91 = $gep56;
         $92 = HEAP32[$91>>2]|0;
         $93 = ($90|0)==($92|0);
         
         if ($93) {
          $94 = $87;
          $95 = HEAP32[$87>>2]|0;
          $gep_int57 = $95;
          $gep58 = (($gep_int57) + 36)|0;
          $96 = $gep58;
          $97 = HEAP32[$96>>2]|0;
          __THREW__ = 0;
          $98 = invoke_ii($97|0,$87|0)|0;
          $99 = __THREW__; __THREW__ = 0;
          $100 = $99&1;
          
          if ($100) {
           break L6;
          } else {
           $$0$i$i$i$i = $98;
          }
         } else {
          $101 = HEAP32[$90>>2]|0;
          
          $$0$i$i$i$i = $101;
         }
         
         $102 = ($$0$i$i$i$i|0)==(-1);
         
         if ($102) {
          HEAP32[$86>>2] = 0;
          
          $103 = 1;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$86>>2]|0;
          $phitmp$i$i$i = ($$pre$i$i$i|0)==(0);
          
          $103 = $phitmp$i$i$i;
          break;
         }
        }
       } while(0);
       
       $104 = ($39|0)==(0);
       
       do {
        if ($104) {
         label = 35;
        } else {
         $gep_int59 = $39;
         $gep60 = (($gep_int59) + 12)|0;
         $105 = $gep60;
         $106 = HEAP32[$105>>2]|0;
         $gep_int61 = $39;
         $gep62 = (($gep_int61) + 16)|0;
         $107 = $gep62;
         $108 = HEAP32[$107>>2]|0;
         $109 = ($106|0)==($108|0);
         
         if ($109) {
          $110 = $39;
          $111 = HEAP32[$39>>2]|0;
          $gep_int63 = $111;
          $gep64 = (($gep_int63) + 36)|0;
          $112 = $gep64;
          $113 = HEAP32[$112>>2]|0;
          __THREW__ = 0;
          $114 = invoke_ii($113|0,$39|0)|0;
          $115 = __THREW__; __THREW__ = 0;
          $116 = $115&1;
          
          if ($116) {
           break L6;
          } else {
           $$0$i$i1$i$i = $114;
          }
         } else {
          $117 = HEAP32[$106>>2]|0;
          
          $$0$i$i1$i$i = $117;
         }
         
         $118 = ($$0$i$i1$i$i|0)==(-1);
         
         if ($118) {
          HEAP32[$38>>2] = 0;
          
          label = 35;
          break;
         } else {
          
          if ($103) {
           break;
          } else {
           label = 37;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 35) {
        
        if ($103) {
         label = 37;
        }
       }
       if ((label|0) == 37) {
        $119 = HEAP32[$__err>>2]|0;
        $120 = $119 | 2;
        HEAP32[$__err>>2] = $120;
        
       }
       $121 = HEAP32[$86>>2]|0;
       $gep_int65 = $agg$result;
       $122 = $gep_int65;
       HEAP32[$122>>2] = $121;
       $123 = HEAP32[$9>>2]|0;
       $gep_int66 = $123;
       $124 = $gep_int66;
       u$75 = __ZNSt3__114__shared_count16__release_sharedEv($124)|0;
       $125 = HEAP32[$4>>2]|0;
       HEAP32[$4>>2] = 0;
       $126 = ($125|0)==(0);
       
       if ($126) {
        
        STACKTOP = sp;return;
       }
       $127 = HEAP32[$5>>2]|0;
       $128 = $125;
       __THREW__ = 0;
       invoke_vi($127|0,$128|0);
       $129 = __THREW__; __THREW__ = 0;
       $130 = $129&1;
       
       if ($130) {
        $expanded11 = 69;
        $131 = ___cxa_find_matching_catch(-1,-1,0)|0;
        u$81 = tempRet0;
        ___clang_call_terminate($131);
        // unreachable
       } else {
        
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $33 = ___cxa_allocate_exception(4)|0;
     $34 = $33;
     __ZNSt8bad_castC2Ev($34);
     __THREW__ = 0;
     $expanded8 = 16440;
     $expanded9 = 119;
     invoke_viii(5,$33|0,$expanded8|0,$expanded9|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     
     if ($36) {
      break;
     }
     // unreachable
    }
   } while(0);
   $expanded12 = 69;
   $132 = ___cxa_find_matching_catch(-1,-1)|0;
   $133 = tempRet0;
   $134 = HEAP32[$9>>2]|0;
   $gep_int67 = $134;
   $135 = $gep_int67;
   u$86 = __ZNSt3__114__shared_count16__release_sharedEv($135)|0;
   $$pre = HEAP32[$4>>2]|0;
   HEAP32[$4>>2] = 0;
   $136 = ($$pre|0)==(0);
   
   if ($136) {
    $$0117 = $133;$$019 = $132;
   } else {
    $$0116 = $133;$$018 = $132;$137 = $$pre;
    break;
   }
   
   
   ___resumeException($$019|0);
   // unreachable
  }
 } while(0);
 
 
 
 $138 = HEAP32[$5>>2]|0;
 $139 = $137;
 __THREW__ = 0;
 invoke_vi($138|0,$139|0);
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 
 if ($141) {
  $expanded13 = 69;
  $142 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$92 = tempRet0;
  ___clang_call_terminate($142);
  // unreachable
 } else {
  $$0117 = $$0116;$$019 = $$018;
  
  
  ___resumeException($$019|0);
  // unreachable
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$01$phi = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $__p$02$phi = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep18 = 0, $gep20 = 0;
 var $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_array = 0, $gep_array17 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0;
 var $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $__first;
 $3 = HEAP8[$this]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 
 if ($5) {
  $6 = $3&255;
  $7 = $6 >>> 1;
  
  $14 = $7;$15 = $3;$16 = 1;
 } else {
  $gep_int = $this;
  $gep = (($gep_int) + 4)|0;
  $8 = $gep;
  $9 = HEAP32[$8>>2]|0;
  $gep_int1 = $this;
  $10 = $gep_int1;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & -2;
  $phitmp$i = (($12) + -1)|0;
  $13 = $11&255;
  
  $14 = $9;$15 = $13;$16 = $phitmp$i;
 }
 
 
 
 $17 = $__last;
 $18 = (($17) - ($2))|0;
 $19 = $18 >> 2;
 $20 = ($19|0)==(0);
 
 if ($20) {
  STACKTOP = sp;return $this|0;
 }
 $21 = (($16) - ($14))|0;
 $22 = ($21>>>0)<($19>>>0);
 
 if ($22) {
  $23 = (($14) + ($19))|0;
  $24 = (($23) - ($16))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$24,$14,$14,0,0);
  $$pre = HEAP8[$this]|0;
  
  $25 = $$pre;
 } else {
  $25 = $15;
 }
 
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 
 if ($27) {
  $gep_int4 = $this;
  $gep5 = (($gep_int4) + 4)|0;
  $30 = $gep5;
  
  $31 = $30;
 } else {
  $gep_int2 = $this;
  $gep3 = (($gep_int2) + 8)|0;
  $28 = $gep3;
  $29 = HEAP32[$28>>2]|0;
  
  $31 = $29;
 }
 
 $gep_int6 = $31;
 $gep_array = $14<<2;
 $gep7 = (($gep_int6) + ($gep_array))|0;
 $32 = $gep7;
 $33 = ($__first|0)==($__last|0);
 
 if ($33) {
  $__p$0$lcssa = $32;
 } else {
  $gep_int8 = $__last;
  $gep9 = (($gep_int8) + -4)|0;
  $scevgep = $gep9;
  $scevgep3 = $scevgep;
  $34 = (0 - ($2))|0;
  $gep_int10 = $scevgep;
  $gep11 = (($gep_int10) + ($34))|0;
  $uglygep = $gep11;
  $uglygep4 = $uglygep;
  $35 = $uglygep4 >>> 2;
  $36 = (($14) + ($35))|0;
  $37 = (($36) + 1)|0;
  
  $$01 = $__first;$__p$02 = $32;
  while(1) {
   
   
   $38 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $38;
   $gep_int12 = $__p$02;
   $gep13 = (($gep_int12) + 4)|0;
   $39 = $gep13;
   $gep_int14 = $$01;
   $gep15 = (($gep_int14) + 4)|0;
   $40 = $gep15;
   $41 = ($40|0)==($__last|0);
   
   if ($41) {
    break;
   } else {
    $__p$02$phi = $39;$$01$phi = $40;$__p$02 = $__p$02$phi;$$01 = $$01$phi;
   }
  }
  $gep_int16 = $31;
  $gep_array17 = $37<<2;
  $gep18 = (($gep_int16) + ($gep_array17))|0;
  $scevgep5 = $gep18;
  
  $__p$0$lcssa = $scevgep5;
 }
 
 HEAP32[$__p$0$lcssa>>2] = 0;
 $42 = (($14) + ($19))|0;
 $43 = HEAP8[$this]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 
 if ($45) {
  $47 = $42 << 1;
  $48 = $47&255;
  HEAP8[$this] = $48;
  
  STACKTOP = sp;return $this|0;
 } else {
  $gep_int19 = $this;
  $gep20 = (($gep_int19) + 4)|0;
  $46 = $gep20;
  HEAP32[$46>>2] = $42;
  
  STACKTOP = sp;return $this|0;
 }
 return 0|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i6 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0;
 var $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0, $gep106 = 0, $gep108 = 0;
 var $gep110 = 0, $gep112 = 0, $gep114 = 0, $gep116 = 0, $gep118 = 0, $gep120 = 0, $gep122 = 0, $gep124 = 0, $gep126 = 0, $gep128 = 0, $gep130 = 0, $gep132 = 0, $gep134 = 0, $gep136 = 0, $gep138 = 0, $gep32 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0;
 var $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0;
 var $gep86 = 0, $gep88 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep98 = 0, $gep_array = 0, $gep_array97 = 0, $gep_int = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int111 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0, $gep_int119 = 0, $gep_int121 = 0;
 var $gep_int123 = 0, $gep_int125 = 0, $gep_int127 = 0, $gep_int129 = 0, $gep_int131 = 0, $gep_int133 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0;
 var $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int83 = 0, $gep_int84 = 0;
 var $gep_int85 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int96 = 0, $gep_int99 = 0, $storemerge = 0, $tmpcast = 0, $tmpcast1 = 0, label = 0, sp = 0, u$113 = 0, u$130 = 0, u$149 = 0, u$166 = 0, u$27 = 0, u$44 = 0, u$63 = 0;
 var u$80 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $__p$i$i$i$i6 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $2 = sp + 40|0;
 $3 = sp + 56|0;
 $4 = sp + 72|0;
 $5 = sp + 88|0;
 $6 = sp + 104|0;
 $7 = sp + 112|0;
 $8 = sp + 128|0;
 $9 = sp + 144|0;
 $10 = sp + 160|0;
 
 if ($__intl) {
  $tmpcast1 = $1;
  $gep_int = $__loc;
  $11 = $gep_int;
  $12 = HEAP32[$11>>2]|0;
  $13 = $__p$i$i$i$i;
  
  $expanded1 = 8048;
  $gep_int28 = 8048;
  $expanded = $gep_int28;
  $14 = HEAP32[$expanded>>2]|0;
  $15 = ($14|0)==(-1);
  
  if (!($15)) {
   $gep_int29 = $__p$i$i$i$i;
   $16 = $gep_int29;
   $expanded2 = 8048;
   HEAP32[$16>>2] = $expanded2;
   $gep_int30 = $__p$i$i$i$i;
   $gep = (($gep_int30) + 4)|0;
   $17 = $gep;
   $expanded3 = 177;
   HEAP32[$17>>2] = $expanded3;
   $gep_int31 = $__p$i$i$i$i;
   $gep32 = (($gep_int31) + 8)|0;
   $18 = $gep32;
   HEAP32[$18>>2] = 0;
   $expanded5 = 8048;
   $gep_int33 = 8048;
   $expanded4 = $gep_int33;
   __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded4,$13,178);
   
  }
  
  $expanded7 = 8048;
  $gep_int34 = 8048;
  $gep35 = (($gep_int34) + 4)|0;
  $expanded6 = $gep35;
  $19 = HEAP32[$expanded6>>2]|0;
  $20 = (($19) + -1)|0;
  $gep_int36 = $12;
  $gep37 = (($gep_int36) + 12)|0;
  $21 = $gep37;
  $22 = HEAP32[$21>>2]|0;
  $gep_int38 = $12;
  $gep39 = (($gep_int38) + 8)|0;
  $23 = $gep39;
  $24 = HEAP32[$23>>2]|0;
  $25 = $22;
  $26 = $24;
  $27 = (($25) - ($26))|0;
  $28 = $27 >> 2;
  $29 = ($28>>>0)>($20>>>0);
  
  if (!($29)) {
   $33 = ___cxa_allocate_exception(4)|0;
   $34 = $33;
   __ZNSt8bad_castC2Ev($34);
   $expanded8 = 16440;
   $expanded9 = 119;
   ___cxa_throw($33|0,$expanded8|0,$expanded9|0);
   // unreachable
  }
  $gep_int40 = $24;
  $gep_array = $20<<2;
  $gep41 = (($gep_int40) + ($gep_array))|0;
  $30 = $gep41;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  
  if ($32) {
   $33 = ___cxa_allocate_exception(4)|0;
   $34 = $33;
   __ZNSt8bad_castC2Ev($34);
   $expanded8 = 16440;
   $expanded9 = 119;
   ___cxa_throw($33|0,$expanded8|0,$expanded9|0);
   // unreachable
  }
  $35 = $31;
  $36 = $31;
  $37 = HEAP32[$31>>2]|0;
  $gep_int42 = $37;
  $gep43 = (($gep_int42) + 44)|0;
  $38 = $gep43;
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vii[$39 & 127]($tmpcast1,$35);
  $40 = $__pat;
  $41 = HEAP32[$1>>2]|0;
  HEAP8[$40]=$41&255;HEAP8[$40+1|0]=($41>>8)&255;HEAP8[$40+2|0]=($41>>16)&255;HEAP8[$40+3|0]=$41>>24;
  $42 = $31;
  $43 = HEAP32[$31>>2]|0;
  $gep_int44 = $43;
  $gep45 = (($gep_int44) + 32)|0;
  $44 = $gep45;
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$45 & 127]($2,$35);
  $46 = $__nsn;
  $47 = HEAP8[$__nsn]|0;
  $48 = $47 & 1;
  $49 = ($48<<24>>24)==(0);
  
  if ($49) {
   $gep_int50 = $__nsn;
   $gep51 = (($gep_int50) + 4)|0;
   $53 = $gep51;
   HEAP32[$53>>2] = 0;
   HEAP8[$__nsn] = 0;
   
  } else {
   $gep_int46 = $__nsn;
   $gep47 = (($gep_int46) + 8)|0;
   $50 = $gep47;
   $51 = HEAP32[$50>>2]|0;
   HEAP32[$51>>2] = 0;
   $gep_int48 = $__nsn;
   $gep49 = (($gep_int48) + 4)|0;
   $52 = $gep49;
   HEAP32[$52>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(67,$__nsn|0,0);
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  
  if ($55) {
   $expanded10 = 69;
   $56 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$27 = tempRet0;
   ___clang_call_terminate($56);
   // unreachable
  }
  $57 = $2;
  ;HEAP32[$46+0>>2]=HEAP32[$57+0>>2]|0;HEAP32[$46+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$57+8>>2]|0;
  ;HEAP32[$57+0>>2]=0|0;HEAP32[$57+4>>2]=0|0;HEAP32[$57+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $58 = HEAP32[$31>>2]|0;
  $gep_int52 = $58;
  $gep53 = (($gep_int52) + 28)|0;
  $59 = $gep53;
  $60 = HEAP32[$59>>2]|0;
  FUNCTION_TABLE_vii[$60 & 127]($3,$35);
  $61 = $__psn;
  $62 = HEAP8[$__psn]|0;
  $63 = $62 & 1;
  $64 = ($63<<24>>24)==(0);
  
  if ($64) {
   $gep_int58 = $__psn;
   $gep59 = (($gep_int58) + 4)|0;
   $68 = $gep59;
   HEAP32[$68>>2] = 0;
   HEAP8[$__psn] = 0;
   
  } else {
   $gep_int54 = $__psn;
   $gep55 = (($gep_int54) + 8)|0;
   $65 = $gep55;
   $66 = HEAP32[$65>>2]|0;
   HEAP32[$66>>2] = 0;
   $gep_int56 = $__psn;
   $gep57 = (($gep_int56) + 4)|0;
   $67 = $gep57;
   HEAP32[$67>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(67,$__psn|0,0);
  $69 = __THREW__; __THREW__ = 0;
  $70 = $69&1;
  
  if ($70) {
   $expanded11 = 69;
   $71 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$44 = tempRet0;
   ___clang_call_terminate($71);
   // unreachable
  }
  $72 = $3;
  ;HEAP32[$61+0>>2]=HEAP32[$72+0>>2]|0;HEAP32[$61+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$61+8>>2]=HEAP32[$72+8>>2]|0;
  ;HEAP32[$72+0>>2]=0|0;HEAP32[$72+4>>2]=0|0;HEAP32[$72+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
  $73 = $31;
  $74 = HEAP32[$31>>2]|0;
  $gep_int60 = $74;
  $gep61 = (($gep_int60) + 12)|0;
  $75 = $gep61;
  $76 = HEAP32[$75>>2]|0;
  $77 = FUNCTION_TABLE_ii[$76 & 127]($35)|0;
  HEAP32[$__dp>>2] = $77;
  $78 = HEAP32[$31>>2]|0;
  $gep_int62 = $78;
  $gep63 = (($gep_int62) + 16)|0;
  $79 = $gep63;
  $80 = HEAP32[$79>>2]|0;
  $81 = FUNCTION_TABLE_ii[$80 & 127]($35)|0;
  HEAP32[$__ts>>2] = $81;
  $82 = $31;
  $83 = HEAP32[$31>>2]|0;
  $gep_int64 = $83;
  $gep65 = (($gep_int64) + 20)|0;
  $84 = $gep65;
  $85 = HEAP32[$84>>2]|0;
  FUNCTION_TABLE_vii[$85 & 127]($4,$35);
  $86 = $__grp;
  $87 = HEAP8[$__grp]|0;
  $88 = $87 & 1;
  $89 = ($88<<24>>24)==(0);
  
  if ($89) {
   $93 = $__grp;
   $gep_int70 = $__grp;
   $gep71 = (($gep_int70) + 1)|0;
   $94 = $gep71;
   HEAP8[$94] = 0;
   HEAP8[$__grp] = 0;
   
  } else {
   $gep_int66 = $__grp;
   $gep67 = (($gep_int66) + 8)|0;
   $90 = $gep67;
   $91 = HEAP32[$90>>2]|0;
   HEAP8[$91] = 0;
   $gep_int68 = $__grp;
   $gep69 = (($gep_int68) + 4)|0;
   $92 = $gep69;
   HEAP32[$92>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__grp|0,0);
  $95 = __THREW__; __THREW__ = 0;
  $96 = $95&1;
  
  if ($96) {
   $expanded12 = 69;
   $97 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$63 = tempRet0;
   ___clang_call_terminate($97);
   // unreachable
  }
  $98 = $4;
  ;HEAP32[$86+0>>2]=HEAP32[$98+0>>2]|0;HEAP32[$86+4>>2]=HEAP32[$98+4>>2]|0;HEAP32[$86+8>>2]=HEAP32[$98+8>>2]|0;
  ;HEAP32[$98+0>>2]=0|0;HEAP32[$98+4>>2]=0|0;HEAP32[$98+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $99 = HEAP32[$31>>2]|0;
  $gep_int72 = $99;
  $gep73 = (($gep_int72) + 24)|0;
  $100 = $gep73;
  $101 = HEAP32[$100>>2]|0;
  FUNCTION_TABLE_vii[$101 & 127]($5,$35);
  $102 = $__sym;
  $103 = HEAP8[$__sym]|0;
  $104 = $103 & 1;
  $105 = ($104<<24>>24)==(0);
  
  if ($105) {
   $gep_int78 = $__sym;
   $gep79 = (($gep_int78) + 4)|0;
   $109 = $gep79;
   HEAP32[$109>>2] = 0;
   HEAP8[$__sym] = 0;
   
  } else {
   $gep_int74 = $__sym;
   $gep75 = (($gep_int74) + 8)|0;
   $106 = $gep75;
   $107 = HEAP32[$106>>2]|0;
   HEAP32[$107>>2] = 0;
   $gep_int76 = $__sym;
   $gep77 = (($gep_int76) + 4)|0;
   $108 = $gep77;
   HEAP32[$108>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(67,$__sym|0,0);
  $110 = __THREW__; __THREW__ = 0;
  $111 = $110&1;
  
  if ($111) {
   $expanded13 = 69;
   $112 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$80 = tempRet0;
   ___clang_call_terminate($112);
   // unreachable
  }
  $113 = $5;
  ;HEAP32[$102+0>>2]=HEAP32[$113+0>>2]|0;HEAP32[$102+4>>2]=HEAP32[$113+4>>2]|0;HEAP32[$102+8>>2]=HEAP32[$113+8>>2]|0;
  ;HEAP32[$113+0>>2]=0|0;HEAP32[$113+4>>2]=0|0;HEAP32[$113+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $114 = HEAP32[$31>>2]|0;
  $gep_int80 = $114;
  $gep81 = (($gep_int80) + 36)|0;
  $115 = $gep81;
  $116 = HEAP32[$115>>2]|0;
  $117 = FUNCTION_TABLE_ii[$116 & 127]($35)|0;
  
  $storemerge = $117;
  
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $tmpcast = $6;
  $gep_int82 = $__loc;
  $118 = $gep_int82;
  $119 = HEAP32[$118>>2]|0;
  $120 = $__p$i$i$i$i6;
  
  $expanded15 = 7984;
  $gep_int83 = 7984;
  $expanded14 = $gep_int83;
  $121 = HEAP32[$expanded14>>2]|0;
  $122 = ($121|0)==(-1);
  
  if (!($122)) {
   $gep_int84 = $__p$i$i$i$i6;
   $123 = $gep_int84;
   $expanded16 = 7984;
   HEAP32[$123>>2] = $expanded16;
   $gep_int85 = $__p$i$i$i$i6;
   $gep86 = (($gep_int85) + 4)|0;
   $124 = $gep86;
   $expanded17 = 177;
   HEAP32[$124>>2] = $expanded17;
   $gep_int87 = $__p$i$i$i$i6;
   $gep88 = (($gep_int87) + 8)|0;
   $125 = $gep88;
   HEAP32[$125>>2] = 0;
   $expanded19 = 7984;
   $gep_int89 = 7984;
   $expanded18 = $gep_int89;
   __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded18,$120,178);
   
  }
  
  $expanded21 = 7984;
  $gep_int90 = 7984;
  $gep91 = (($gep_int90) + 4)|0;
  $expanded20 = $gep91;
  $126 = HEAP32[$expanded20>>2]|0;
  $127 = (($126) + -1)|0;
  $gep_int92 = $119;
  $gep93 = (($gep_int92) + 12)|0;
  $128 = $gep93;
  $129 = HEAP32[$128>>2]|0;
  $gep_int94 = $119;
  $gep95 = (($gep_int94) + 8)|0;
  $130 = $gep95;
  $131 = HEAP32[$130>>2]|0;
  $132 = $129;
  $133 = $131;
  $134 = (($132) - ($133))|0;
  $135 = $134 >> 2;
  $136 = ($135>>>0)>($127>>>0);
  
  if (!($136)) {
   $140 = ___cxa_allocate_exception(4)|0;
   $141 = $140;
   __ZNSt8bad_castC2Ev($141);
   $expanded22 = 16440;
   $expanded23 = 119;
   ___cxa_throw($140|0,$expanded22|0,$expanded23|0);
   // unreachable
  }
  $gep_int96 = $131;
  $gep_array97 = $127<<2;
  $gep98 = (($gep_int96) + ($gep_array97))|0;
  $137 = $gep98;
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)==(0);
  
  if ($139) {
   $140 = ___cxa_allocate_exception(4)|0;
   $141 = $140;
   __ZNSt8bad_castC2Ev($141);
   $expanded22 = 16440;
   $expanded23 = 119;
   ___cxa_throw($140|0,$expanded22|0,$expanded23|0);
   // unreachable
  }
  $142 = $138;
  $143 = $138;
  $144 = HEAP32[$138>>2]|0;
  $gep_int99 = $144;
  $gep100 = (($gep_int99) + 44)|0;
  $145 = $gep100;
  $146 = HEAP32[$145>>2]|0;
  FUNCTION_TABLE_vii[$146 & 127]($tmpcast,$142);
  $147 = $__pat;
  $148 = HEAP32[$6>>2]|0;
  HEAP8[$147]=$148&255;HEAP8[$147+1|0]=($148>>8)&255;HEAP8[$147+2|0]=($148>>16)&255;HEAP8[$147+3|0]=$148>>24;
  $149 = $138;
  $150 = HEAP32[$138>>2]|0;
  $gep_int101 = $150;
  $gep102 = (($gep_int101) + 32)|0;
  $151 = $gep102;
  $152 = HEAP32[$151>>2]|0;
  FUNCTION_TABLE_vii[$152 & 127]($7,$142);
  $153 = $__nsn;
  $154 = HEAP8[$__nsn]|0;
  $155 = $154 & 1;
  $156 = ($155<<24>>24)==(0);
  
  if ($156) {
   $gep_int107 = $__nsn;
   $gep108 = (($gep_int107) + 4)|0;
   $160 = $gep108;
   HEAP32[$160>>2] = 0;
   HEAP8[$__nsn] = 0;
   
  } else {
   $gep_int103 = $__nsn;
   $gep104 = (($gep_int103) + 8)|0;
   $157 = $gep104;
   $158 = HEAP32[$157>>2]|0;
   HEAP32[$158>>2] = 0;
   $gep_int105 = $__nsn;
   $gep106 = (($gep_int105) + 4)|0;
   $159 = $gep106;
   HEAP32[$159>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(67,$__nsn|0,0);
  $161 = __THREW__; __THREW__ = 0;
  $162 = $161&1;
  
  if ($162) {
   $expanded24 = 69;
   $163 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$113 = tempRet0;
   ___clang_call_terminate($163);
   // unreachable
  }
  $164 = $7;
  ;HEAP32[$153+0>>2]=HEAP32[$164+0>>2]|0;HEAP32[$153+4>>2]=HEAP32[$164+4>>2]|0;HEAP32[$153+8>>2]=HEAP32[$164+8>>2]|0;
  ;HEAP32[$164+0>>2]=0|0;HEAP32[$164+4>>2]=0|0;HEAP32[$164+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $165 = HEAP32[$138>>2]|0;
  $gep_int109 = $165;
  $gep110 = (($gep_int109) + 28)|0;
  $166 = $gep110;
  $167 = HEAP32[$166>>2]|0;
  FUNCTION_TABLE_vii[$167 & 127]($8,$142);
  $168 = $__psn;
  $169 = HEAP8[$__psn]|0;
  $170 = $169 & 1;
  $171 = ($170<<24>>24)==(0);
  
  if ($171) {
   $gep_int115 = $__psn;
   $gep116 = (($gep_int115) + 4)|0;
   $175 = $gep116;
   HEAP32[$175>>2] = 0;
   HEAP8[$__psn] = 0;
   
  } else {
   $gep_int111 = $__psn;
   $gep112 = (($gep_int111) + 8)|0;
   $172 = $gep112;
   $173 = HEAP32[$172>>2]|0;
   HEAP32[$173>>2] = 0;
   $gep_int113 = $__psn;
   $gep114 = (($gep_int113) + 4)|0;
   $174 = $gep114;
   HEAP32[$174>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(67,$__psn|0,0);
  $176 = __THREW__; __THREW__ = 0;
  $177 = $176&1;
  
  if ($177) {
   $expanded25 = 69;
   $178 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$130 = tempRet0;
   ___clang_call_terminate($178);
   // unreachable
  }
  $179 = $8;
  ;HEAP32[$168+0>>2]=HEAP32[$179+0>>2]|0;HEAP32[$168+4>>2]=HEAP32[$179+4>>2]|0;HEAP32[$168+8>>2]=HEAP32[$179+8>>2]|0;
  ;HEAP32[$179+0>>2]=0|0;HEAP32[$179+4>>2]=0|0;HEAP32[$179+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
  $180 = $138;
  $181 = HEAP32[$138>>2]|0;
  $gep_int117 = $181;
  $gep118 = (($gep_int117) + 12)|0;
  $182 = $gep118;
  $183 = HEAP32[$182>>2]|0;
  $184 = FUNCTION_TABLE_ii[$183 & 127]($142)|0;
  HEAP32[$__dp>>2] = $184;
  $185 = HEAP32[$138>>2]|0;
  $gep_int119 = $185;
  $gep120 = (($gep_int119) + 16)|0;
  $186 = $gep120;
  $187 = HEAP32[$186>>2]|0;
  $188 = FUNCTION_TABLE_ii[$187 & 127]($142)|0;
  HEAP32[$__ts>>2] = $188;
  $189 = $138;
  $190 = HEAP32[$138>>2]|0;
  $gep_int121 = $190;
  $gep122 = (($gep_int121) + 20)|0;
  $191 = $gep122;
  $192 = HEAP32[$191>>2]|0;
  FUNCTION_TABLE_vii[$192 & 127]($9,$142);
  $193 = $__grp;
  $194 = HEAP8[$__grp]|0;
  $195 = $194 & 1;
  $196 = ($195<<24>>24)==(0);
  
  if ($196) {
   $200 = $__grp;
   $gep_int127 = $__grp;
   $gep128 = (($gep_int127) + 1)|0;
   $201 = $gep128;
   HEAP8[$201] = 0;
   HEAP8[$__grp] = 0;
   
  } else {
   $gep_int123 = $__grp;
   $gep124 = (($gep_int123) + 8)|0;
   $197 = $gep124;
   $198 = HEAP32[$197>>2]|0;
   HEAP8[$198] = 0;
   $gep_int125 = $__grp;
   $gep126 = (($gep_int125) + 4)|0;
   $199 = $gep126;
   HEAP32[$199>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__grp|0,0);
  $202 = __THREW__; __THREW__ = 0;
  $203 = $202&1;
  
  if ($203) {
   $expanded26 = 69;
   $204 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$149 = tempRet0;
   ___clang_call_terminate($204);
   // unreachable
  }
  $205 = $9;
  ;HEAP32[$193+0>>2]=HEAP32[$205+0>>2]|0;HEAP32[$193+4>>2]=HEAP32[$205+4>>2]|0;HEAP32[$193+8>>2]=HEAP32[$205+8>>2]|0;
  ;HEAP32[$205+0>>2]=0|0;HEAP32[$205+4>>2]=0|0;HEAP32[$205+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $206 = HEAP32[$138>>2]|0;
  $gep_int129 = $206;
  $gep130 = (($gep_int129) + 24)|0;
  $207 = $gep130;
  $208 = HEAP32[$207>>2]|0;
  FUNCTION_TABLE_vii[$208 & 127]($10,$142);
  $209 = $__sym;
  $210 = HEAP8[$__sym]|0;
  $211 = $210 & 1;
  $212 = ($211<<24>>24)==(0);
  
  if ($212) {
   $gep_int135 = $__sym;
   $gep136 = (($gep_int135) + 4)|0;
   $216 = $gep136;
   HEAP32[$216>>2] = 0;
   HEAP8[$__sym] = 0;
   
  } else {
   $gep_int131 = $__sym;
   $gep132 = (($gep_int131) + 8)|0;
   $213 = $gep132;
   $214 = HEAP32[$213>>2]|0;
   HEAP32[$214>>2] = 0;
   $gep_int133 = $__sym;
   $gep134 = (($gep_int133) + 4)|0;
   $215 = $gep134;
   HEAP32[$215>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(67,$__sym|0,0);
  $217 = __THREW__; __THREW__ = 0;
  $218 = $217&1;
  
  if ($218) {
   $expanded27 = 69;
   $219 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$166 = tempRet0;
   ___clang_call_terminate($219);
   // unreachable
  }
  $220 = $10;
  ;HEAP32[$209+0>>2]=HEAP32[$220+0>>2]|0;HEAP32[$209+4>>2]=HEAP32[$220+4>>2]|0;HEAP32[$209+8>>2]=HEAP32[$220+8>>2]|0;
  ;HEAP32[$220+0>>2]=0|0;HEAP32[$220+4>>2]=0|0;HEAP32[$220+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($10);
  $221 = HEAP32[$138>>2]|0;
  $gep_int137 = $221;
  $gep138 = (($gep_int137) + 36)|0;
  $222 = $gep138;
  $223 = HEAP32[$222>>2]|0;
  $224 = FUNCTION_TABLE_ii[$223 & 127]($142)|0;
  
  $storemerge = $224;
  
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep3 = 0, $gep6 = 0, $gep_array = 0, $gep_array5 = 0, $gep_int = 0;
 var $gep_int1 = 0, $gep_int2 = 0, $gep_int4 = 0, $phitmp = 0, label = 0, sp = 0, u$14 = 0;
 sp = STACKTOP;
 $gep_int = $__b;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(181);
 $4 = HEAP32[$__e>>2]|0;
 $gep_int1 = $__b;
 $5 = $gep_int1;
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)<(2147483647);
 $11 = $9 << 1;
 $$ = $10 ? $11 : -1;
 $12 = HEAP32[$__n>>2]|0;
 $13 = $12;
 $14 = (($13) - ($8))|0;
 $15 = $14 >> 2;
 
 if ($3) {
  $phitmp = $6;
  
  $16 = $phitmp;
 } else {
  $16 = 0;
 }
 
 $17 = _realloc($16,$$)|0;
 $18 = $17;
 $19 = ($17|0)==(0);
 
 if ($19) {
  __ZSt17__throw_bad_allocv();
  
 }
 
 do {
  if ($3) {
   HEAP32[$5>>2] = $18;
   
   $26 = $18;
  } else {
   $$pr = HEAP32[$5>>2]|0;
   HEAP32[$5>>2] = $18;
   $20 = ($$pr|0)==(0);
   
   if ($20) {
    $26 = $18;
    break;
   }
   $21 = HEAP32[$1>>2]|0;
   $22 = $$pr;
   __THREW__ = 0;
   invoke_vi($21|0,$22|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   
   if ($24) {
    $expanded = 69;
    $25 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$14 = tempRet0;
    ___clang_call_terminate($25);
    // unreachable
   } else {
    $$pre = HEAP32[$5>>2]|0;
    
    $26 = $$pre;
    break;
   }
  }
 } while(0);
 
 HEAP32[$1>>2] = 179;
 $27 = $$ >>> 2;
 $gep_int2 = $26;
 $gep_array = $15<<2;
 $gep3 = (($gep_int2) + ($gep_array))|0;
 $28 = $gep3;
 HEAP32[$__n>>2] = $28;
 $29 = HEAP32[$5>>2]|0;
 $gep_int4 = $29;
 $gep_array5 = $27<<2;
 $gep6 = (($gep_int4) + ($gep_array5))|0;
 $30 = $gep6;
 HEAP32[$__e>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0;
 var $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0;
 var $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $gep = 0, $gep48 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep64 = 0, $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep_array = 0, $gep_int = 0;
 var $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int41 = 0, $gep_int42 = 0, $gep_int43 = 0, $gep_int44 = 0, $gep_int45 = 0, $gep_int46 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0;
 var $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int76 = 0, $gep_int77 = 0, $gep_int78 = 0, $this2$i$i$i = 0, $this2$i$i$i7 = 0, $this2$i$i$i8 = 0, $tmpcast = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_func = 0, $vararg_func9 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast7 = 0;
 var $vararg_ptr = 0, $vararg_ptr8 = 0, label = 0, sp = 0, u$107 = 0, u$121 = 0, u$52 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer6 = sp + 8|0;
 $vararg_lifetime_bitcast7 = $vararg_buffer6;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__buf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__bb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__digits = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__loc = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__pat = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__mbuf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__mi = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__me = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $gep_int = $__buf;
 $2 = $gep_int;
 
 HEAP32[$__bb>>2] = $2;
 $gep_int36 = $__digits;
 $3 = $gep_int36;
 
 
 $gep_int37 = $vararg_buffer;
 $vararg_ptr = $gep_int37;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_ptr>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $expanded = 18;
 $vararg_func = $expanded;
 $gep_int38 = 8232;
 $expanded10 = $gep_int38;
 $4 = _snprintf($2|0,100,$expanded10|0,$vararg_buffer|0)|0;
 
 $5 = ($4>>>0)>(99);
 
 L1: do {
  if ($5) {
   $gep_int39 = 8376;
   $expanded11 = $gep_int39;
   $6 = HEAP8[$expanded11]|0;
   $7 = ($6<<24>>24)==(0);
   
   do {
    if ($7) {
     $expanded12 = 8376;
     $8 = ___cxa_guard_acquire($expanded12|0)|0;
     $9 = ($8|0)==(0);
     
     if ($9) {
      break;
     }
     __THREW__ = 0;
     $gep_int40 = 8384;
     $expanded13 = $gep_int40;
     $10 = invoke_iiii(30,2147483647,$expanded13|0,0)|0;
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     
     if ($12) {
      $expanded16 = 69;
      $13 = ___cxa_find_matching_catch(-1,-1)|0;
      $14 = tempRet0;
      $expanded17 = 8376;
      ___cxa_guard_abort($expanded17|0);
      
      $27 = 0;$28 = 0;$eh$lpad$body$index2Z2D = $14;$eh$lpad$body$indexZ2D = $13;
      label = 12;
      break L1;
     } else {
      $expanded14 = 8368;
      HEAP32[8368>>2] = $10;
      $expanded15 = 8376;
      ___cxa_guard_release($expanded15|0);
      
      break;
     }
    }
   } while(0);
   $expanded18 = 8368;
   $15 = HEAP32[8368>>2]|0;
   __THREW__ = 0;
   
   $gep_int41 = $vararg_buffer6;
   $vararg_ptr8 = $gep_int41;
   HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $expanded19 = 16;
   $vararg_func9 = $expanded19;
   $gep_int42 = 8232;
   $expanded20 = $gep_int42;
   $16 = invoke_iiiii(16,$__bb|0,$15|0,$expanded20|0,$vararg_buffer6|0)|0;
   
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   
   if ($18) {
    $23 = 0;$24 = 0;
    label = 11;
    break;
   }
   $19 = HEAP32[$__bb>>2]|0;
   $20 = ($19|0)==(0);
   
   if ($20) {
    __THREW__ = 0;
    invoke_v(13);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    
    if ($22) {
     $23 = 0;$24 = 0;
     label = 11;
     break;
    }
    $$pre = HEAP32[$__bb>>2]|0;
    
    $29 = $$pre;
   } else {
    $29 = $19;
   }
   
   $30 = _malloc($16)|0;
   $31 = ($30|0)==(0);
   
   if (!($31)) {
    $34 = $29;$35 = $30;$__db$0 = $30;$__n$0 = $16;
    label = 15;
    break;
   }
   __THREW__ = 0;
   invoke_v(13);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   
   if ($33) {
    $23 = $29;$24 = 0;
    label = 11;
   } else {
    $34 = $29;$35 = 0;$__db$0 = 0;$__n$0 = $16;
    label = 15;
   }
  } else {
   $34 = 0;$35 = 0;$__db$0 = $3;$__n$0 = $4;
   label = 15;
  }
 } while(0);
 do {
  if ((label|0) == 15) {
   
   
   
   
   __THREW__ = 0;
   invoke_vii(41,$__loc|0,$__iob|0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   
   if ($37) {
    $23 = $34;$24 = $35;
    label = 11;
    break;
   }
   $gep_int43 = $__loc;
   $38 = $gep_int43;
   $39 = HEAP32[$38>>2]|0;
   $40 = $__p$i$i$i$i;
   
   $expanded23 = 8480;
   $gep_int44 = 8480;
   $expanded22 = $gep_int44;
   $41 = HEAP32[$expanded22>>2]|0;
   $42 = ($41|0)==(-1);
   
   if ($42) {
    label = 18;
   } else {
    $gep_int45 = $__p$i$i$i$i;
    $43 = $gep_int45;
    $expanded24 = 8480;
    HEAP32[$43>>2] = $expanded24;
    $gep_int46 = $__p$i$i$i$i;
    $gep = (($gep_int46) + 4)|0;
    $44 = $gep;
    $expanded25 = 177;
    HEAP32[$44>>2] = $expanded25;
    $gep_int47 = $__p$i$i$i$i;
    $gep48 = (($gep_int47) + 8)|0;
    $45 = $gep48;
    HEAP32[$45>>2] = 0;
    __THREW__ = 0;
    $expanded27 = 8480;
    $gep_int49 = 8480;
    $expanded26 = $gep_int49;
    invoke_viii(17,$expanded26|0,$40|0,178);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    
    if ($47) {
     label = 45;
    } else {
     label = 18;
    }
   }
   L21: do {
    if ((label|0) == 18) {
     
     $expanded29 = 8480;
     $gep_int50 = 8480;
     $gep51 = (($gep_int50) + 4)|0;
     $expanded28 = $gep51;
     $48 = HEAP32[$expanded28>>2]|0;
     $49 = (($48) + -1)|0;
     $gep_int52 = $39;
     $gep53 = (($gep_int52) + 12)|0;
     $50 = $gep53;
     $51 = HEAP32[$50>>2]|0;
     $gep_int54 = $39;
     $gep55 = (($gep_int54) + 8)|0;
     $52 = $gep55;
     $53 = HEAP32[$52>>2]|0;
     $54 = $51;
     $55 = $53;
     $56 = (($54) - ($55))|0;
     $57 = $56 >> 2;
     $58 = ($57>>>0)>($49>>>0);
     
     do {
      if ($58) {
       $gep_int56 = $53;
       $gep_array = $49<<2;
       $gep57 = (($gep_int56) + ($gep_array))|0;
       $59 = $gep57;
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(0);
       
       if ($61) {
        break;
       }
       $66 = $60;
       $67 = HEAP32[$__bb>>2]|0;
       $gep_int58 = $67;
       $gep59 = (($gep_int58) + ($__n$0))|0;
       $68 = $gep59;
       $69 = $60;
       $70 = HEAP32[$60>>2]|0;
       $gep_int60 = $70;
       $gep61 = (($gep_int60) + 32)|0;
       $71 = $gep61;
       $72 = HEAP32[$71>>2]|0;
       __THREW__ = 0;
       u$52 = invoke_iiiii($72|0,$66|0,$67|0,$68|0,$__db$0|0)|0;
       $73 = __THREW__; __THREW__ = 0;
       $74 = $73&1;
       
       if ($74) {
        label = 45;
        break L21;
       }
       $75 = ($__n$0|0)==(0);
       
       if ($75) {
        $79 = 0;
       } else {
        $76 = HEAP32[$__bb>>2]|0;
        $77 = HEAP8[$76]|0;
        $78 = ($77<<24>>24)==(45);
        
        $79 = $78;
       }
       
       HEAP32[$__pat>>2] = 0;
       $this2$i$i$i = $__grp;
       ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
       $this2$i$i$i7 = $__sym;
       ;HEAP32[$this2$i$i$i7+0>>2]=0|0;HEAP32[$this2$i$i$i7+4>>2]=0|0;HEAP32[$this2$i$i$i7+8>>2]=0|0;
       $this2$i$i$i8 = $__sn;
       ;HEAP32[$this2$i$i$i8+0>>2]=0|0;HEAP32[$this2$i$i$i8+4>>2]=0|0;HEAP32[$this2$i$i$i8+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viiiiiiiiii(3,$__intl|0,$79|0,$__loc|0,$tmpcast|0,$__dp|0,$__ts|0,$__grp|0,$__sym|0,$__sn|0,$__fd|0);
       $80 = __THREW__; __THREW__ = 0;
       $81 = $80&1;
       
       L30: do {
        if ($81) {
         $expanded34 = 69;
         $134 = ___cxa_find_matching_catch(-1,-1)|0;
         $135 = tempRet0;
         
         $$0 = $134;$$01 = $135;
        } else {
         $gep_int62 = $__mbuf;
         $82 = $gep_int62;
         
         $83 = HEAP32[$__fd>>2]|0;
         $84 = ($__n$0|0)>($83|0);
         
         if ($84) {
          $85 = (($__n$0) - ($83))|0;
          $86 = $85 << 1;
          $87 = HEAP8[$__sn]|0;
          $88 = $87 & 1;
          $89 = ($88<<24>>24)==(0);
          
          if ($89) {
           $92 = $87&255;
           $93 = $92 >>> 1;
           
           $94 = $93;
          } else {
           $gep_int63 = $__sn;
           $gep64 = (($gep_int63) + 4)|0;
           $90 = $gep64;
           $91 = HEAP32[$90>>2]|0;
           
           $94 = $91;
          }
          
          $95 = HEAP8[$__sym]|0;
          $96 = $95 & 1;
          $97 = ($96<<24>>24)==(0);
          
          if ($97) {
           $100 = $95&255;
           $101 = $100 >>> 1;
           
           $102 = $101;
          } else {
           $gep_int65 = $__sym;
           $gep66 = (($gep_int65) + 4)|0;
           $98 = $gep66;
           $99 = HEAP32[$98>>2]|0;
           
           $102 = $99;
          }
          
          $103 = $86 | 1;
          $104 = (($94) + ($103))|0;
          $105 = (($104) + ($102))|0;
          
          $$pn = $105;
         } else {
          $106 = HEAP8[$__sn]|0;
          $107 = $106 & 1;
          $108 = ($107<<24>>24)==(0);
          
          if ($108) {
           $111 = $106&255;
           $112 = $111 >>> 1;
           
           $113 = $112;
          } else {
           $gep_int67 = $__sn;
           $gep68 = (($gep_int67) + 4)|0;
           $109 = $gep68;
           $110 = HEAP32[$109>>2]|0;
           
           $113 = $110;
          }
          
          $114 = HEAP8[$__sym]|0;
          $115 = $114 & 1;
          $116 = ($115<<24>>24)==(0);
          
          if ($116) {
           $119 = $114&255;
           $120 = $119 >>> 1;
           
           $121 = $120;
          } else {
           $gep_int69 = $__sym;
           $gep70 = (($gep_int69) + 4)|0;
           $117 = $gep70;
           $118 = HEAP32[$117>>2]|0;
           
           $121 = $118;
          }
          
          $122 = (($113) + 2)|0;
          $123 = (($122) + ($121))|0;
          
          $$pn = $123;
         }
         
         $124 = (($$pn) + ($83))|0;
         $125 = ($124>>>0)>(100);
         
         do {
          if ($125) {
           $126 = _malloc($124)|0;
           $127 = ($126|0)==(0);
           
           if (!($127)) {
            $139 = $126;$__mb$0 = $126;
            break;
           }
           __THREW__ = 0;
           invoke_v(13);
           $128 = __THREW__; __THREW__ = 0;
           $129 = $128&1;
           
           if (!($129)) {
            $139 = 0;$__mb$0 = 0;
            break;
           }
           $expanded32 = 69;
           $130 = ___cxa_find_matching_catch(-1,-1)|0;
           $131 = tempRet0;
           
           $$0 = $130;$$01 = $131;
           break L30;
          } else {
           $139 = 0;$__mb$0 = $82;
          }
         } while(0);
         
         
         $gep_int71 = $__iob;
         $gep72 = (($gep_int71) + 4)|0;
         $140 = $gep72;
         $141 = HEAP32[$140>>2]|0;
         $gep_int73 = $__db$0;
         $gep74 = (($gep_int73) + ($__n$0))|0;
         $142 = $gep74;
         $143 = HEAP8[$__dp]|0;
         $144 = HEAP8[$__ts]|0;
         __THREW__ = 0;
         invoke_viiiiiiiiiiiiiii(1,$__mb$0|0,$__mi|0,$__me|0,$141|0,$__db$0|0,$142|0,$66|0,$79|0,$tmpcast|0,$143|0,$144|0,$__grp|0,$__sym|0,$__sn|0,$83|0);
         $145 = __THREW__; __THREW__ = 0;
         $146 = $145&1;
         
         do {
          if (!($146)) {
           $gep_int75 = $__s;
           $147 = $gep_int75;
           $148 = HEAP32[$147>>2]|0;
           $gep_int76 = $1;
           $149 = $gep_int76;
           HEAP32[$149>>2] = $148;
           $150 = HEAP32[$__mi>>2]|0;
           $151 = HEAP32[$__me>>2]|0;
           __THREW__ = 0;
           $152 = $$byval_copy;
           
           $153 = $$byval_copy;
           $154 = $1;
           ;HEAP32[$153+0>>2]=HEAP32[$154+0>>2]|0;
           invoke_viiiiiii(40,$agg$result|0,$$byval_copy|0,$__mb$0|0,$150|0,$151|0,$__iob|0,$__fl|0);
           $155 = $$byval_copy;
           
           $156 = __THREW__; __THREW__ = 0;
           $157 = $156&1;
           
           if ($157) {
            break;
           }
           $158 = ($139|0)==(0);
           
           if (!($158)) {
            _free($139);
            
           }
           
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
           $159 = HEAP32[$38>>2]|0;
           $gep_int77 = $159;
           $160 = $gep_int77;
           u$107 = __ZNSt3__114__shared_count16__release_sharedEv($160)|0;
           $161 = ($35|0)==(0);
           
           if (!($161)) {
            _free($35);
            
           }
           $162 = ($34|0)==(0);
           
           if ($162) {
            
            
            STACKTOP = sp;return;
           }
           _free($34);
           
           
           
           STACKTOP = sp;return;
          }
         } while(0);
         $expanded35 = 69;
         $136 = ___cxa_find_matching_catch(-1,-1)|0;
         $137 = tempRet0;
         $138 = ($139|0)==(0);
         
         if ($138) {
          $$0 = $136;$$01 = $137;
          break;
         }
         _free($139);
         
         $$0 = $136;$$01 = $137;
        }
       } while(0);
       
       
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       
       $$1 = $$0;$$12 = $$01;
       break L21;
      }
     } while(0);
     $62 = ___cxa_allocate_exception(4)|0;
     $63 = $62;
     __ZNSt8bad_castC2Ev($63);
     __THREW__ = 0;
     $expanded30 = 16440;
     $expanded31 = 119;
     invoke_viii(5,$62|0,$expanded30|0,$expanded31|0);
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     
     if ($65) {
      label = 45;
      break;
     }
     // unreachable
    }
   } while(0);
   if ((label|0) == 45) {
    $expanded33 = 69;
    $132 = ___cxa_find_matching_catch(-1,-1)|0;
    $133 = tempRet0;
    
    $$1 = $132;$$12 = $133;
   }
   
   
   $163 = HEAP32[$38>>2]|0;
   $gep_int78 = $163;
   $164 = $gep_int78;
   u$121 = __ZNSt3__114__shared_count16__release_sharedEv($164)|0;
   
   $$2 = $$1;$$23 = $$12;$165 = $34;$166 = $35;
  }
 } while(0);
 if ((label|0) == 11) {
  
  
  $expanded21 = 69;
  $25 = ___cxa_find_matching_catch(-1,-1)|0;
  $26 = tempRet0;
  
  $27 = $23;$28 = $24;$eh$lpad$body$index2Z2D = $26;$eh$lpad$body$indexZ2D = $25;
  label = 12;
 }
 if ((label|0) == 12) {
  
  
  
  
  
  $$2 = $eh$lpad$body$indexZ2D;$$23 = $eh$lpad$body$index2Z2D;$165 = $27;$166 = $28;
 }
 
 
 
 
 $167 = ($166|0)==(0);
 
 if (!($167)) {
  _free($166);
  
 }
 $168 = ($165|0)==(0);
 
 if ($168) {
  ___resumeException($$2|0);
  // unreachable
 }
 _free($165);
 
 ___resumeException($$2|0);
 // unreachable
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i10 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0;
 var $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep101 = 0, $gep103 = 0, $gep105 = 0, $gep107 = 0, $gep109 = 0, $gep111 = 0, $gep113 = 0;
 var $gep115 = 0, $gep117 = 0, $gep119 = 0, $gep121 = 0, $gep123 = 0, $gep125 = 0, $gep127 = 0, $gep129 = 0, $gep131 = 0, $gep133 = 0, $gep135 = 0, $gep137 = 0, $gep139 = 0, $gep141 = 0, $gep32 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0;
 var $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0;
 var $gep87 = 0, $gep89 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep99 = 0, $gep_array = 0, $gep_array98 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int112 = 0, $gep_int114 = 0, $gep_int116 = 0, $gep_int118 = 0, $gep_int120 = 0;
 var $gep_int122 = 0, $gep_int124 = 0, $gep_int126 = 0, $gep_int128 = 0, $gep_int130 = 0, $gep_int132 = 0, $gep_int134 = 0, $gep_int136 = 0, $gep_int138 = 0, $gep_int140 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0;
 var $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0;
 var $gep_int84 = 0, $gep_int85 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $storemerge = 0, $tmpcast = 0, $tmpcast1 = 0, $tmpcast2 = 0, $tmpcast3 = 0, label = 0, sp = 0, u$119 = 0, u$139 = 0, u$159 = 0, u$176 = 0;
 var u$28 = 0, u$48 = 0, u$68 = 0, u$85 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i10 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $tmpcast3 = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast2 = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $5 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $6 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $7 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast1 = $7;
 $8 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast = $9;
 $10 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $11 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $12 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $gep_int = $__loc;
 $13 = $gep_int;
 $14 = HEAP32[$13>>2]|0;
 
 if ($__intl) {
  $15 = $__p$i$i$i$i;
  
  $expanded1 = 7920;
  $gep_int28 = 7920;
  $expanded = $gep_int28;
  $16 = HEAP32[$expanded>>2]|0;
  $17 = ($16|0)==(-1);
  
  if (!($17)) {
   $gep_int29 = $__p$i$i$i$i;
   $18 = $gep_int29;
   $expanded2 = 7920;
   HEAP32[$18>>2] = $expanded2;
   $gep_int30 = $__p$i$i$i$i;
   $gep = (($gep_int30) + 4)|0;
   $19 = $gep;
   $expanded3 = 177;
   HEAP32[$19>>2] = $expanded3;
   $gep_int31 = $__p$i$i$i$i;
   $gep32 = (($gep_int31) + 8)|0;
   $20 = $gep32;
   HEAP32[$20>>2] = 0;
   $expanded5 = 7920;
   $gep_int33 = 7920;
   $expanded4 = $gep_int33;
   __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded4,$15,178);
   
  }
  
  $expanded7 = 7920;
  $gep_int34 = 7920;
  $gep35 = (($gep_int34) + 4)|0;
  $expanded6 = $gep35;
  $21 = HEAP32[$expanded6>>2]|0;
  $22 = (($21) + -1)|0;
  $gep_int36 = $14;
  $gep37 = (($gep_int36) + 12)|0;
  $23 = $gep37;
  $24 = HEAP32[$23>>2]|0;
  $gep_int38 = $14;
  $gep39 = (($gep_int38) + 8)|0;
  $25 = $gep39;
  $26 = HEAP32[$25>>2]|0;
  $27 = $24;
  $28 = $26;
  $29 = (($27) - ($28))|0;
  $30 = $29 >> 2;
  $31 = ($30>>>0)>($22>>>0);
  
  if (!($31)) {
   $35 = ___cxa_allocate_exception(4)|0;
   $36 = $35;
   __ZNSt8bad_castC2Ev($36);
   $expanded8 = 16440;
   $expanded9 = 119;
   ___cxa_throw($35|0,$expanded8|0,$expanded9|0);
   // unreachable
  }
  $gep_int40 = $26;
  $gep_array = $22<<2;
  $gep41 = (($gep_int40) + ($gep_array))|0;
  $32 = $gep41;
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0);
  
  if ($34) {
   $35 = ___cxa_allocate_exception(4)|0;
   $36 = $35;
   __ZNSt8bad_castC2Ev($36);
   $expanded8 = 16440;
   $expanded9 = 119;
   ___cxa_throw($35|0,$expanded8|0,$expanded9|0);
   // unreachable
  }
  $37 = $33;
  $38 = $33;
  $39 = HEAP32[$33>>2]|0;
  
  do {
   if ($__neg) {
    $gep_int42 = $39;
    $gep43 = (($gep_int42) + 44)|0;
    $40 = $gep43;
    $41 = HEAP32[$40>>2]|0;
    FUNCTION_TABLE_vii[$41 & 127]($tmpcast3,$37);
    $42 = $__pat;
    $43 = HEAP32[$1>>2]|0;
    HEAP8[$42]=$43&255;HEAP8[$42+1|0]=($43>>8)&255;HEAP8[$42+2|0]=($43>>16)&255;HEAP8[$42+3|0]=$43>>24;
    $44 = $33;
    $45 = HEAP32[$33>>2]|0;
    $gep_int44 = $45;
    $gep45 = (($gep_int44) + 32)|0;
    $46 = $gep45;
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_vii[$47 & 127]($2,$37);
    $48 = $__sn;
    $49 = HEAP8[$__sn]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    
    if ($51) {
     $55 = $__sn;
     $gep_int50 = $__sn;
     $gep51 = (($gep_int50) + 1)|0;
     $56 = $gep51;
     HEAP8[$56] = 0;
     HEAP8[$__sn] = 0;
     
    } else {
     $gep_int46 = $__sn;
     $gep47 = (($gep_int46) + 8)|0;
     $52 = $gep47;
     $53 = HEAP32[$52>>2]|0;
     HEAP8[$53] = 0;
     $gep_int48 = $__sn;
     $gep49 = (($gep_int48) + 4)|0;
     $54 = $gep49;
     HEAP32[$54>>2] = 0;
     
    }
    __THREW__ = 0;
    invoke_vii(65,$__sn|0,0);
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    
    if ($58) {
     $expanded10 = 69;
     $59 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$28 = tempRet0;
     ___clang_call_terminate($59);
     // unreachable
    } else {
     $60 = $2;
     ;HEAP32[$48+0>>2]=HEAP32[$60+0>>2]|0;HEAP32[$48+4>>2]=HEAP32[$60+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$60+8>>2]|0;
     ;HEAP32[$60+0>>2]=0|0;HEAP32[$60+4>>2]=0|0;HEAP32[$60+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
     
     break;
    }
   } else {
    $gep_int52 = $39;
    $gep53 = (($gep_int52) + 40)|0;
    $61 = $gep53;
    $62 = HEAP32[$61>>2]|0;
    FUNCTION_TABLE_vii[$62 & 127]($tmpcast2,$37);
    $63 = $__pat;
    $64 = HEAP32[$3>>2]|0;
    HEAP8[$63]=$64&255;HEAP8[$63+1|0]=($64>>8)&255;HEAP8[$63+2|0]=($64>>16)&255;HEAP8[$63+3|0]=$64>>24;
    $65 = $33;
    $66 = HEAP32[$33>>2]|0;
    $gep_int54 = $66;
    $gep55 = (($gep_int54) + 28)|0;
    $67 = $gep55;
    $68 = HEAP32[$67>>2]|0;
    FUNCTION_TABLE_vii[$68 & 127]($4,$37);
    $69 = $__sn;
    $70 = HEAP8[$__sn]|0;
    $71 = $70 & 1;
    $72 = ($71<<24>>24)==(0);
    
    if ($72) {
     $76 = $__sn;
     $gep_int60 = $__sn;
     $gep61 = (($gep_int60) + 1)|0;
     $77 = $gep61;
     HEAP8[$77] = 0;
     HEAP8[$__sn] = 0;
     
    } else {
     $gep_int56 = $__sn;
     $gep57 = (($gep_int56) + 8)|0;
     $73 = $gep57;
     $74 = HEAP32[$73>>2]|0;
     HEAP8[$74] = 0;
     $gep_int58 = $__sn;
     $gep59 = (($gep_int58) + 4)|0;
     $75 = $gep59;
     HEAP32[$75>>2] = 0;
     
    }
    __THREW__ = 0;
    invoke_vii(65,$__sn|0,0);
    $78 = __THREW__; __THREW__ = 0;
    $79 = $78&1;
    
    if ($79) {
     $expanded11 = 69;
     $80 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$48 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable
    } else {
     $81 = $4;
     ;HEAP32[$69+0>>2]=HEAP32[$81+0>>2]|0;HEAP32[$69+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$81+8>>2]|0;
     ;HEAP32[$81+0>>2]=0|0;HEAP32[$81+4>>2]=0|0;HEAP32[$81+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
     
     break;
    }
   }
  } while(0);
  $82 = $33;
  $83 = HEAP32[$33>>2]|0;
  $gep_int62 = $83;
  $gep63 = (($gep_int62) + 12)|0;
  $84 = $gep63;
  $85 = HEAP32[$84>>2]|0;
  $86 = FUNCTION_TABLE_ii[$85 & 127]($37)|0;
  HEAP8[$__dp] = $86;
  $87 = HEAP32[$33>>2]|0;
  $gep_int64 = $87;
  $gep65 = (($gep_int64) + 16)|0;
  $88 = $gep65;
  $89 = HEAP32[$88>>2]|0;
  $90 = FUNCTION_TABLE_ii[$89 & 127]($37)|0;
  HEAP8[$__ts] = $90;
  $91 = $33;
  $92 = HEAP32[$33>>2]|0;
  $gep_int66 = $92;
  $gep67 = (($gep_int66) + 20)|0;
  $93 = $gep67;
  $94 = HEAP32[$93>>2]|0;
  FUNCTION_TABLE_vii[$94 & 127]($5,$37);
  $95 = $__grp;
  $96 = HEAP8[$__grp]|0;
  $97 = $96 & 1;
  $98 = ($97<<24>>24)==(0);
  
  if ($98) {
   $102 = $__grp;
   $gep_int72 = $__grp;
   $gep73 = (($gep_int72) + 1)|0;
   $103 = $gep73;
   HEAP8[$103] = 0;
   HEAP8[$__grp] = 0;
   
  } else {
   $gep_int68 = $__grp;
   $gep69 = (($gep_int68) + 8)|0;
   $99 = $gep69;
   $100 = HEAP32[$99>>2]|0;
   HEAP8[$100] = 0;
   $gep_int70 = $__grp;
   $gep71 = (($gep_int70) + 4)|0;
   $101 = $gep71;
   HEAP32[$101>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__grp|0,0);
  $104 = __THREW__; __THREW__ = 0;
  $105 = $104&1;
  
  if ($105) {
   $expanded12 = 69;
   $106 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$68 = tempRet0;
   ___clang_call_terminate($106);
   // unreachable
  }
  $107 = $5;
  ;HEAP32[$95+0>>2]=HEAP32[$107+0>>2]|0;HEAP32[$95+4>>2]=HEAP32[$107+4>>2]|0;HEAP32[$95+8>>2]=HEAP32[$107+8>>2]|0;
  ;HEAP32[$107+0>>2]=0|0;HEAP32[$107+4>>2]=0|0;HEAP32[$107+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $108 = HEAP32[$33>>2]|0;
  $gep_int74 = $108;
  $gep75 = (($gep_int74) + 24)|0;
  $109 = $gep75;
  $110 = HEAP32[$109>>2]|0;
  FUNCTION_TABLE_vii[$110 & 127]($6,$37);
  $111 = $__sym;
  $112 = HEAP8[$__sym]|0;
  $113 = $112 & 1;
  $114 = ($113<<24>>24)==(0);
  
  if ($114) {
   $118 = $__sym;
   $gep_int80 = $__sym;
   $gep81 = (($gep_int80) + 1)|0;
   $119 = $gep81;
   HEAP8[$119] = 0;
   HEAP8[$__sym] = 0;
   
  } else {
   $gep_int76 = $__sym;
   $gep77 = (($gep_int76) + 8)|0;
   $115 = $gep77;
   $116 = HEAP32[$115>>2]|0;
   HEAP8[$116] = 0;
   $gep_int78 = $__sym;
   $gep79 = (($gep_int78) + 4)|0;
   $117 = $gep79;
   HEAP32[$117>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__sym|0,0);
  $120 = __THREW__; __THREW__ = 0;
  $121 = $120&1;
  
  if ($121) {
   $expanded13 = 69;
   $122 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$85 = tempRet0;
   ___clang_call_terminate($122);
   // unreachable
  }
  $123 = $6;
  ;HEAP32[$111+0>>2]=HEAP32[$123+0>>2]|0;HEAP32[$111+4>>2]=HEAP32[$123+4>>2]|0;HEAP32[$111+8>>2]=HEAP32[$123+8>>2]|0;
  ;HEAP32[$123+0>>2]=0|0;HEAP32[$123+4>>2]=0|0;HEAP32[$123+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $124 = $33;
  $125 = HEAP32[$33>>2]|0;
  $gep_int82 = $125;
  $gep83 = (($gep_int82) + 36)|0;
  $126 = $gep83;
  $127 = HEAP32[$126>>2]|0;
  $128 = FUNCTION_TABLE_ii[$127 & 127]($37)|0;
  
  $storemerge = $128;
  
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $129 = $__p$i$i$i$i10;
  
  $expanded15 = 7856;
  $gep_int84 = 7856;
  $expanded14 = $gep_int84;
  $130 = HEAP32[$expanded14>>2]|0;
  $131 = ($130|0)==(-1);
  
  if (!($131)) {
   $gep_int85 = $__p$i$i$i$i10;
   $132 = $gep_int85;
   $expanded16 = 7856;
   HEAP32[$132>>2] = $expanded16;
   $gep_int86 = $__p$i$i$i$i10;
   $gep87 = (($gep_int86) + 4)|0;
   $133 = $gep87;
   $expanded17 = 177;
   HEAP32[$133>>2] = $expanded17;
   $gep_int88 = $__p$i$i$i$i10;
   $gep89 = (($gep_int88) + 8)|0;
   $134 = $gep89;
   HEAP32[$134>>2] = 0;
   $expanded19 = 7856;
   $gep_int90 = 7856;
   $expanded18 = $gep_int90;
   __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded18,$129,178);
   
  }
  
  $expanded21 = 7856;
  $gep_int91 = 7856;
  $gep92 = (($gep_int91) + 4)|0;
  $expanded20 = $gep92;
  $135 = HEAP32[$expanded20>>2]|0;
  $136 = (($135) + -1)|0;
  $gep_int93 = $14;
  $gep94 = (($gep_int93) + 12)|0;
  $137 = $gep94;
  $138 = HEAP32[$137>>2]|0;
  $gep_int95 = $14;
  $gep96 = (($gep_int95) + 8)|0;
  $139 = $gep96;
  $140 = HEAP32[$139>>2]|0;
  $141 = $138;
  $142 = $140;
  $143 = (($141) - ($142))|0;
  $144 = $143 >> 2;
  $145 = ($144>>>0)>($136>>>0);
  
  if (!($145)) {
   $149 = ___cxa_allocate_exception(4)|0;
   $150 = $149;
   __ZNSt8bad_castC2Ev($150);
   $expanded22 = 16440;
   $expanded23 = 119;
   ___cxa_throw($149|0,$expanded22|0,$expanded23|0);
   // unreachable
  }
  $gep_int97 = $140;
  $gep_array98 = $136<<2;
  $gep99 = (($gep_int97) + ($gep_array98))|0;
  $146 = $gep99;
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147|0)==(0);
  
  if ($148) {
   $149 = ___cxa_allocate_exception(4)|0;
   $150 = $149;
   __ZNSt8bad_castC2Ev($150);
   $expanded22 = 16440;
   $expanded23 = 119;
   ___cxa_throw($149|0,$expanded22|0,$expanded23|0);
   // unreachable
  }
  $151 = $147;
  $152 = $147;
  $153 = HEAP32[$147>>2]|0;
  
  do {
   if ($__neg) {
    $gep_int100 = $153;
    $gep101 = (($gep_int100) + 44)|0;
    $154 = $gep101;
    $155 = HEAP32[$154>>2]|0;
    FUNCTION_TABLE_vii[$155 & 127]($tmpcast1,$151);
    $156 = $__pat;
    $157 = HEAP32[$7>>2]|0;
    HEAP8[$156]=$157&255;HEAP8[$156+1|0]=($157>>8)&255;HEAP8[$156+2|0]=($157>>16)&255;HEAP8[$156+3|0]=$157>>24;
    $158 = $147;
    $159 = HEAP32[$147>>2]|0;
    $gep_int102 = $159;
    $gep103 = (($gep_int102) + 32)|0;
    $160 = $gep103;
    $161 = HEAP32[$160>>2]|0;
    FUNCTION_TABLE_vii[$161 & 127]($8,$151);
    $162 = $__sn;
    $163 = HEAP8[$__sn]|0;
    $164 = $163 & 1;
    $165 = ($164<<24>>24)==(0);
    
    if ($165) {
     $169 = $__sn;
     $gep_int108 = $__sn;
     $gep109 = (($gep_int108) + 1)|0;
     $170 = $gep109;
     HEAP8[$170] = 0;
     HEAP8[$__sn] = 0;
     
    } else {
     $gep_int104 = $__sn;
     $gep105 = (($gep_int104) + 8)|0;
     $166 = $gep105;
     $167 = HEAP32[$166>>2]|0;
     HEAP8[$167] = 0;
     $gep_int106 = $__sn;
     $gep107 = (($gep_int106) + 4)|0;
     $168 = $gep107;
     HEAP32[$168>>2] = 0;
     
    }
    __THREW__ = 0;
    invoke_vii(65,$__sn|0,0);
    $171 = __THREW__; __THREW__ = 0;
    $172 = $171&1;
    
    if ($172) {
     $expanded24 = 69;
     $173 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$119 = tempRet0;
     ___clang_call_terminate($173);
     // unreachable
    } else {
     $174 = $8;
     ;HEAP32[$162+0>>2]=HEAP32[$174+0>>2]|0;HEAP32[$162+4>>2]=HEAP32[$174+4>>2]|0;HEAP32[$162+8>>2]=HEAP32[$174+8>>2]|0;
     ;HEAP32[$174+0>>2]=0|0;HEAP32[$174+4>>2]=0|0;HEAP32[$174+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
     
     break;
    }
   } else {
    $gep_int110 = $153;
    $gep111 = (($gep_int110) + 40)|0;
    $175 = $gep111;
    $176 = HEAP32[$175>>2]|0;
    FUNCTION_TABLE_vii[$176 & 127]($tmpcast,$151);
    $177 = $__pat;
    $178 = HEAP32[$9>>2]|0;
    HEAP8[$177]=$178&255;HEAP8[$177+1|0]=($178>>8)&255;HEAP8[$177+2|0]=($178>>16)&255;HEAP8[$177+3|0]=$178>>24;
    $179 = $147;
    $180 = HEAP32[$147>>2]|0;
    $gep_int112 = $180;
    $gep113 = (($gep_int112) + 28)|0;
    $181 = $gep113;
    $182 = HEAP32[$181>>2]|0;
    FUNCTION_TABLE_vii[$182 & 127]($10,$151);
    $183 = $__sn;
    $184 = HEAP8[$__sn]|0;
    $185 = $184 & 1;
    $186 = ($185<<24>>24)==(0);
    
    if ($186) {
     $190 = $__sn;
     $gep_int118 = $__sn;
     $gep119 = (($gep_int118) + 1)|0;
     $191 = $gep119;
     HEAP8[$191] = 0;
     HEAP8[$__sn] = 0;
     
    } else {
     $gep_int114 = $__sn;
     $gep115 = (($gep_int114) + 8)|0;
     $187 = $gep115;
     $188 = HEAP32[$187>>2]|0;
     HEAP8[$188] = 0;
     $gep_int116 = $__sn;
     $gep117 = (($gep_int116) + 4)|0;
     $189 = $gep117;
     HEAP32[$189>>2] = 0;
     
    }
    __THREW__ = 0;
    invoke_vii(65,$__sn|0,0);
    $192 = __THREW__; __THREW__ = 0;
    $193 = $192&1;
    
    if ($193) {
     $expanded25 = 69;
     $194 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$139 = tempRet0;
     ___clang_call_terminate($194);
     // unreachable
    } else {
     $195 = $10;
     ;HEAP32[$183+0>>2]=HEAP32[$195+0>>2]|0;HEAP32[$183+4>>2]=HEAP32[$195+4>>2]|0;HEAP32[$183+8>>2]=HEAP32[$195+8>>2]|0;
     ;HEAP32[$195+0>>2]=0|0;HEAP32[$195+4>>2]=0|0;HEAP32[$195+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
     
     break;
    }
   }
  } while(0);
  $196 = $147;
  $197 = HEAP32[$147>>2]|0;
  $gep_int120 = $197;
  $gep121 = (($gep_int120) + 12)|0;
  $198 = $gep121;
  $199 = HEAP32[$198>>2]|0;
  $200 = FUNCTION_TABLE_ii[$199 & 127]($151)|0;
  HEAP8[$__dp] = $200;
  $201 = HEAP32[$147>>2]|0;
  $gep_int122 = $201;
  $gep123 = (($gep_int122) + 16)|0;
  $202 = $gep123;
  $203 = HEAP32[$202>>2]|0;
  $204 = FUNCTION_TABLE_ii[$203 & 127]($151)|0;
  HEAP8[$__ts] = $204;
  $205 = $147;
  $206 = HEAP32[$147>>2]|0;
  $gep_int124 = $206;
  $gep125 = (($gep_int124) + 20)|0;
  $207 = $gep125;
  $208 = HEAP32[$207>>2]|0;
  FUNCTION_TABLE_vii[$208 & 127]($11,$151);
  $209 = $__grp;
  $210 = HEAP8[$__grp]|0;
  $211 = $210 & 1;
  $212 = ($211<<24>>24)==(0);
  
  if ($212) {
   $216 = $__grp;
   $gep_int130 = $__grp;
   $gep131 = (($gep_int130) + 1)|0;
   $217 = $gep131;
   HEAP8[$217] = 0;
   HEAP8[$__grp] = 0;
   
  } else {
   $gep_int126 = $__grp;
   $gep127 = (($gep_int126) + 8)|0;
   $213 = $gep127;
   $214 = HEAP32[$213>>2]|0;
   HEAP8[$214] = 0;
   $gep_int128 = $__grp;
   $gep129 = (($gep_int128) + 4)|0;
   $215 = $gep129;
   HEAP32[$215>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__grp|0,0);
  $218 = __THREW__; __THREW__ = 0;
  $219 = $218&1;
  
  if ($219) {
   $expanded26 = 69;
   $220 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$159 = tempRet0;
   ___clang_call_terminate($220);
   // unreachable
  }
  $221 = $11;
  ;HEAP32[$209+0>>2]=HEAP32[$221+0>>2]|0;HEAP32[$209+4>>2]=HEAP32[$221+4>>2]|0;HEAP32[$209+8>>2]=HEAP32[$221+8>>2]|0;
  ;HEAP32[$221+0>>2]=0|0;HEAP32[$221+4>>2]=0|0;HEAP32[$221+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $222 = HEAP32[$147>>2]|0;
  $gep_int132 = $222;
  $gep133 = (($gep_int132) + 24)|0;
  $223 = $gep133;
  $224 = HEAP32[$223>>2]|0;
  FUNCTION_TABLE_vii[$224 & 127]($12,$151);
  $225 = $__sym;
  $226 = HEAP8[$__sym]|0;
  $227 = $226 & 1;
  $228 = ($227<<24>>24)==(0);
  
  if ($228) {
   $232 = $__sym;
   $gep_int138 = $__sym;
   $gep139 = (($gep_int138) + 1)|0;
   $233 = $gep139;
   HEAP8[$233] = 0;
   HEAP8[$__sym] = 0;
   
  } else {
   $gep_int134 = $__sym;
   $gep135 = (($gep_int134) + 8)|0;
   $229 = $gep135;
   $230 = HEAP32[$229>>2]|0;
   HEAP8[$230] = 0;
   $gep_int136 = $__sym;
   $gep137 = (($gep_int136) + 4)|0;
   $231 = $gep137;
   HEAP32[$231>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__sym|0,0);
  $234 = __THREW__; __THREW__ = 0;
  $235 = $234&1;
  
  if ($235) {
   $expanded27 = 69;
   $236 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$176 = tempRet0;
   ___clang_call_terminate($236);
   // unreachable
  }
  $237 = $12;
  ;HEAP32[$225+0>>2]=HEAP32[$237+0>>2]|0;HEAP32[$225+4>>2]=HEAP32[$237+4>>2]|0;HEAP32[$225+8>>2]=HEAP32[$237+8>>2]|0;
  ;HEAP32[$237+0>>2]=0|0;HEAP32[$237+4>>2]=0|0;HEAP32[$237+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12);
  $238 = $147;
  $239 = HEAP32[$147>>2]|0;
  $gep_int140 = $239;
  $gep141 = (($gep_int140) + 36)|0;
  $240 = $gep141;
  $241 = HEAP32[$240>>2]|0;
  $242 = FUNCTION_TABLE_ii[$241 & 127]($151)|0;
  
  $storemerge = $242;
  
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i$phi = 0, $$01$i$i15 = 0, $$01$i$i15$phi = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $155$phi = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $181$phi = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $64$phi = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $99$phi = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$132$phi = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0, $__f$033 = 0, $__f$033$phi = 0, $__f$139 = 0, $__f$139$phi = 0;
 var $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $brmerge = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0;
 var $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep4 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep6 = 0, $gep60 = 0, $gep62 = 0, $gep64 = 0;
 var $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep76 = 0, $gep78 = 0, $gep8 = 0, $gep80 = 0, $gep82 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0;
 var $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int5 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0;
 var $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int7 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int9 = 0, $isascii1$i = 0, $or$cond = 0, $scevgep = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep6162 = 0, $scevgep63 = 0;
 var $umax = 0, $umax60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $1 = $__ct;
 $2 = $__sn;
 $3 = $__sn;
 $gep_int = $__sn;
 $gep = (($gep_int) + 1)|0;
 $4 = $gep;
 $gep_int1 = $__sn;
 $gep2 = (($gep_int1) + 8)|0;
 $5 = $gep2;
 $gep_int3 = $__sn;
 $gep4 = (($gep_int3) + 4)|0;
 $6 = $gep4;
 $7 = $__sym;
 $8 = $__flags & 512;
 $9 = ($8|0)==(0);
 $10 = $__sym;
 $gep_int5 = $__sym;
 $gep6 = (($gep_int5) + 1)|0;
 $11 = $gep6;
 $gep_int7 = $__sym;
 $gep8 = (($gep_int7) + 8)|0;
 $12 = $gep8;
 $gep_int9 = $__sym;
 $gep10 = (($gep_int9) + 4)|0;
 $13 = $gep10;
 $14 = ($__fd|0)>(0);
 $15 = $__grp;
 $16 = $__grp;
 $gep_int11 = $__grp;
 $gep12 = (($gep_int11) + 1)|0;
 $17 = $gep12;
 $gep_int13 = $__grp;
 $gep14 = (($gep_int13) + 8)|0;
 $18 = $gep14;
 $gep_int15 = $__grp;
 $gep16 = (($gep_int15) + 4)|0;
 $19 = $gep16;
 $gep_int17 = $__ct;
 $gep18 = (($gep_int17) + 8)|0;
 $20 = $gep18;
 $21 = (0 - ($__fd))|0;
 
 $$050 = $__db;$__p$049 = 0;
 while(1) {
  
  
  $gep_int19 = $__pat;
  $gep20 = (($gep_int19) + ($__p$049))|0;
  $22 = $gep20;
  $23 = HEAP8[$22]|0;
  $24 = $23 << 24 >> 24;
  
  L3: do {
   switch ($24|0) {
   case 4:  {
    $69 = HEAP32[$__me>>2]|0;
    $gep_int33 = $$050;
    $gep34 = (($gep_int33) + 1)|0;
    $70 = $gep34;
    $$$0 = $__neg ? $70 : $$050;
    $71 = ($$$0>>>0)<($__de>>>0);
    
    L5: do {
     if ($71) {
      $__d$029 = $$$0;
      while(1) {
       
       $73 = HEAP8[$__d$029]|0;
       $isascii1$i = ($73<<24>>24)>(-1);
       
       if (!($isascii1$i)) {
        $__d$0$lcssa = $__d$029;
        break L5;
       }
       $74 = $73 << 24 >> 24;
       $75 = HEAP32[$20>>2]|0;
       $gep_int35 = $75;
       $gep_array = $74<<1;
       $gep36 = (($gep_int35) + ($gep_array))|0;
       $76 = $gep36;
       $77 = HEAP16[$76>>1]|0;
       $78 = $77 & 2048;
       $79 = ($78<<16>>16)==(0);
       $gep_int37 = $__d$029;
       $gep38 = (($gep_int37) + 1)|0;
       $80 = $gep38;
       
       if ($79) {
        $__d$0$lcssa = $__d$029;
        break L5;
       }
       $72 = ($80>>>0)<($__de>>>0);
       
       if ($72) {
        $__d$029 = $80;
       } else {
        $__d$0$lcssa = $80;
        break;
       }
      }
     } else {
      $__d$0$lcssa = $$$0;
     }
    } while(0);
    
    $__d$0$lcssa58 = $__d$0$lcssa;
    
    if ($14) {
     $81 = ($__d$0$lcssa>>>0)>($$$0>>>0);
     
     if ($81) {
      $82 = (0 - ($__d$0$lcssa58))|0;
      $gep_int39 = $$$0;
      $gep40 = (($gep_int39) + ($82))|0;
      $scevgep = $gep40;
      $scevgep59 = $scevgep;
      $83 = ($scevgep59>>>0)<($21>>>0);
      $umax = $83 ? $21 : $scevgep59;
      $umax60 = $umax;
      $gep_int41 = $umax60;
      $gep42 = (($gep_int41) + ($__fd))|0;
      $scevgep61 = $gep42;
      $scevgep6162 = $scevgep61;
      
      $84 = $69;$__d$132 = $__d$0$lcssa;$__f$033 = $__fd;
      while(1) {
       
       
       
       $gep_int43 = $__d$132;
       $gep44 = (($gep_int43) + -1)|0;
       $85 = $gep44;
       $86 = HEAP8[$85]|0;
       $gep_int45 = $84;
       $gep46 = (($gep_int45) + 1)|0;
       $87 = $gep46;
       HEAP32[$__me>>2] = $87;
       HEAP8[$84] = $86;
       $88 = (($__f$033) + -1)|0;
       $89 = ($85>>>0)>($$$0>>>0);
       $90 = ($88|0)>(0);
       $or$cond = $89 & $90;
       
       if (!($or$cond)) {
        break;
       }
       $$pre = HEAP32[$__me>>2]|0;
       
       $__f$033$phi = $88;$__d$132$phi = $85;$84 = $$pre;$__f$033 = $__f$033$phi;$__d$132 = $__d$132$phi;
      }
      $gep_int47 = $__d$0$lcssa;
      $gep48 = (($gep_int47) + ($umax))|0;
      $scevgep63 = $gep48;
      
      if ($90) {
       $__d$1$lcssa74 = $scevgep63;$__f$0$lcssa72 = $scevgep6162;
       label = 32;
      } else {
       $95 = 0;$__d$1$lcssa73 = $scevgep63;$__f$0$lcssa71 = $scevgep6162;
      }
     } else {
      $__d$1$lcssa74 = $__d$0$lcssa;$__f$0$lcssa72 = $__fd;
      label = 32;
     }
     if ((label|0) == 32) {
      label = 0;
      
      
      $91 = HEAP32[$__ct>>2]|0;
      $gep_int49 = $91;
      $gep50 = (($gep_int49) + 28)|0;
      $92 = $gep50;
      $93 = HEAP32[$92>>2]|0;
      $94 = FUNCTION_TABLE_iii[$93 & 63]($__ct,48)|0;
      
      $95 = $94;$__d$1$lcssa73 = $__d$1$lcssa74;$__f$0$lcssa71 = $__f$0$lcssa72;
     }
     
     
     
     $96 = ($__f$0$lcssa71|0)>(0);
     $97 = HEAP32[$__me>>2]|0;
     $gep_int51 = $97;
     $gep52 = (($gep_int51) + 1)|0;
     $98 = $gep52;
     HEAP32[$__me>>2] = $98;
     
     if ($96) {
      $99 = $97;$__f$139 = $__f$0$lcssa71;
      while(1) {
       
       
       HEAP8[$99] = $95;
       $100 = (($__f$139) + -1)|0;
       $101 = ($100|0)>(0);
       $102 = HEAP32[$__me>>2]|0;
       $gep_int53 = $102;
       $gep54 = (($gep_int53) + 1)|0;
       $103 = $gep54;
       HEAP32[$__me>>2] = $103;
       
       if ($101) {
        $__f$139$phi = $100;$99$phi = $102;$__f$139 = $__f$139$phi;$99 = $99$phi;
       } else {
        $$lcssa38 = $102;
        break;
       }
      }
     } else {
      $$lcssa38 = $97;
     }
     
     HEAP8[$$lcssa38] = $__dp;
     
     $__d$2 = $__d$1$lcssa73;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    
    $104 = ($__d$2|0)==($$$0|0);
    
    if ($104) {
     $105 = HEAP32[$__ct>>2]|0;
     $gep_int55 = $105;
     $gep56 = (($gep_int55) + 28)|0;
     $106 = $gep56;
     $107 = HEAP32[$106>>2]|0;
     $108 = FUNCTION_TABLE_iii[$107 & 63]($__ct,48)|0;
     $109 = HEAP32[$__me>>2]|0;
     $gep_int57 = $109;
     $gep58 = (($gep_int57) + 1)|0;
     $110 = $gep58;
     HEAP32[$__me>>2] = $110;
     HEAP8[$109] = $108;
     
    } else {
     $111 = HEAP8[$__grp]|0;
     $112 = $111 & 1;
     $113 = ($112<<24>>24)==(0);
     
     if ($113) {
      $115 = $111&255;
      $116 = $115 >>> 1;
      
      $117 = $116;
     } else {
      $114 = HEAP32[$19>>2]|0;
      
      $117 = $114;
     }
     
     $118 = ($117|0)==(0);
     
     if ($118) {
      $__d$343 = $__d$2;$__gl$046 = -1;$__ig$045 = 0;$__ng$044 = 0;
     } else {
      
      if ($113) {
       $120 = $17;
      } else {
       $119 = HEAP32[$18>>2]|0;
       
       $120 = $119;
      }
      
      $121 = HEAP8[$120]|0;
      $122 = $121 << 24 >> 24;
      
      $__d$343 = $__d$2;$__gl$046 = $122;$__ig$045 = 0;$__ng$044 = 0;
     }
     while(1) {
      
      
      
      
      $123 = ($__ng$044|0)==($__gl$046|0);
      
      do {
       if ($123) {
        $124 = HEAP32[$__me>>2]|0;
        $gep_int59 = $124;
        $gep60 = (($gep_int59) + 1)|0;
        $125 = $gep60;
        HEAP32[$__me>>2] = $125;
        HEAP8[$124] = $__ts;
        $126 = (($__ig$045) + 1)|0;
        $127 = HEAP8[$__grp]|0;
        $128 = $127 & 1;
        $129 = ($128<<24>>24)==(0);
        
        if ($129) {
         $131 = $127&255;
         $132 = $131 >>> 1;
         
         $133 = $132;
        } else {
         $130 = HEAP32[$19>>2]|0;
         
         $133 = $130;
        }
        
        $134 = ($126>>>0)<($133>>>0);
        
        if (!($134)) {
         $__gl$1 = $__gl$046;$__ig$1 = $126;$__ng$1 = 0;
         break;
        }
        
        if ($129) {
         $136 = $17;
        } else {
         $135 = HEAP32[$18>>2]|0;
         
         $136 = $135;
        }
        
        $gep_int61 = $136;
        $gep62 = (($gep_int61) + ($126))|0;
        $137 = $gep62;
        $138 = HEAP8[$137]|0;
        $139 = ($138<<24>>24)==(127);
        
        if ($139) {
         $__gl$1 = -1;$__ig$1 = $126;$__ng$1 = 0;
         break;
        }
        
        if ($129) {
         $141 = $17;
        } else {
         $140 = HEAP32[$18>>2]|0;
         
         $141 = $140;
        }
        
        $gep_int63 = $141;
        $gep64 = (($gep_int63) + ($126))|0;
        $142 = $gep64;
        $143 = HEAP8[$142]|0;
        $144 = $143 << 24 >> 24;
        
        $__gl$1 = $144;$__ig$1 = $126;$__ng$1 = 0;
       } else {
        $__gl$1 = $__gl$046;$__ig$1 = $__ig$045;$__ng$1 = $__ng$044;
       }
      } while(0);
      
      
      
      $gep_int65 = $__d$343;
      $gep66 = (($gep_int65) + -1)|0;
      $145 = $gep66;
      $146 = HEAP8[$145]|0;
      $147 = HEAP32[$__me>>2]|0;
      $gep_int67 = $147;
      $gep68 = (($gep_int67) + 1)|0;
      $148 = $gep68;
      HEAP32[$__me>>2] = $148;
      HEAP8[$147] = $146;
      $149 = (($__ng$1) + 1)|0;
      $150 = ($145|0)==($$$0|0);
      
      if ($150) {
       break;
      } else {
       $__d$343 = $145;$__gl$046 = $__gl$1;$__ig$045 = $__ig$1;$__ng$044 = $149;
      }
     }
    }
    $151 = HEAP32[$__me>>2]|0;
    $152 = ($69|0)==($151|0);
    
    if ($152) {
     $$2 = $$$0;
     break L3;
    }
    $gep_int69 = $151;
    $gep70 = (($gep_int69) + -1)|0;
    $153 = $gep70;
    $154 = ($153>>>0)>($69>>>0);
    
    if ($154) {
     $$012$i$i = $69;$155 = $153;
    } else {
     $$2 = $$$0;
     break L3;
    }
    while(1) {
     
     
     $156 = HEAP8[$$012$i$i]|0;
     $157 = HEAP8[$155]|0;
     HEAP8[$$012$i$i] = $157;
     HEAP8[$155] = $156;
     $gep_int71 = $$012$i$i;
     $gep72 = (($gep_int71) + 1)|0;
     $158 = $gep72;
     $gep_int73 = $155;
     $gep74 = (($gep_int73) + -1)|0;
     $159 = $gep74;
     $160 = ($158>>>0)<($159>>>0);
     
     if ($160) {
      $155$phi = $159;$$012$i$i$phi = $158;$155 = $155$phi;$$012$i$i = $$012$i$i$phi;
     } else {
      $$2 = $$$0;
      break;
     }
    }
    break;
   }
   case 3:  {
    $33 = HEAP8[$__sn]|0;
    $34 = $33 & 1;
    $35 = ($34<<24>>24)==(0);
    
    if ($35) {
     $37 = $33&255;
     $38 = $37 >>> 1;
     
     $39 = $38;
    } else {
     $36 = HEAP32[$6>>2]|0;
     
     $39 = $36;
    }
    
    $40 = ($39|0)==(0);
    
    if ($40) {
     $$2 = $$050;
     break L3;
    }
    
    if ($35) {
     $42 = $4;
    } else {
     $41 = HEAP32[$5>>2]|0;
     
     $42 = $41;
    }
    
    $43 = HEAP8[$42]|0;
    $44 = HEAP32[$__me>>2]|0;
    $gep_int25 = $44;
    $gep26 = (($gep_int25) + 1)|0;
    $45 = $gep26;
    HEAP32[$__me>>2] = $45;
    HEAP8[$44] = $43;
    
    $$2 = $$050;
    break;
   }
   case 0:  {
    $25 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $25;
    
    $$2 = $$050;
    break;
   }
   case 2:  {
    $46 = HEAP8[$__sym]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     
     $52 = $51;
    } else {
     $49 = HEAP32[$13>>2]|0;
     
     $52 = $49;
    }
    
    $53 = ($52|0)==(0);
    $brmerge = $53 | $9;
    
    if ($brmerge) {
     $$2 = $$050;
     break L3;
    }
    
    if ($48) {
     $56 = $46&255;
     $57 = $56 >>> 1;
     
     $58 = $11;$59 = $11;$60 = $57;
    } else {
     $54 = HEAP32[$12>>2]|0;
     $55 = HEAP32[$13>>2]|0;
     
     $58 = $54;$59 = $54;$60 = $55;
    }
    
    
    
    $gep_int27 = $59;
    $gep28 = (($gep_int27) + ($60))|0;
    $61 = $gep28;
    $62 = HEAP32[$__me>>2]|0;
    $63 = ($58|0)==($61|0);
    
    if ($63) {
     $$0$lcssa$i$i17 = $62;
    } else {
     $$01$i$i15 = $62;$64 = $58;
     while(1) {
      
      
      $65 = HEAP8[$64]|0;
      HEAP8[$$01$i$i15] = $65;
      $gep_int29 = $64;
      $gep30 = (($gep_int29) + 1)|0;
      $66 = $gep30;
      $gep_int31 = $$01$i$i15;
      $gep32 = (($gep_int31) + 1)|0;
      $67 = $gep32;
      $68 = ($66|0)==($61|0);
      
      if ($68) {
       $$0$lcssa$i$i17 = $67;
       break;
      } else {
       $64$phi = $66;$$01$i$i15$phi = $67;$64 = $64$phi;$$01$i$i15 = $$01$i$i15$phi;
      }
     }
    }
    
    HEAP32[$__me>>2] = $$0$lcssa$i$i17;
    
    $$2 = $$050;
    break;
   }
   case 1:  {
    $26 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $26;
    $27 = HEAP32[$__ct>>2]|0;
    $gep_int21 = $27;
    $gep22 = (($gep_int21) + 28)|0;
    $28 = $gep22;
    $29 = HEAP32[$28>>2]|0;
    $30 = FUNCTION_TABLE_iii[$29 & 63]($__ct,32)|0;
    $31 = HEAP32[$__me>>2]|0;
    $gep_int23 = $31;
    $gep24 = (($gep_int23) + 1)|0;
    $32 = $gep24;
    HEAP32[$__me>>2] = $32;
    HEAP8[$31] = $30;
    
    $$2 = $$050;
    break;
   }
   default: {
    $$2 = $$050;
   }
   }
  } while(0);
  
  $161 = (($__p$049) + 1)|0;
  $162 = ($161>>>0)<(4);
  
  if ($162) {
   $$050 = $$2;$__p$049 = $161;
  } else {
   break;
  }
 }
 $163 = HEAP8[$__sn]|0;
 $164 = $163 & 1;
 $165 = ($164<<24>>24)==(0);
 
 if ($165) {
  $167 = $163&255;
  $168 = $167 >>> 1;
  
  $169 = $168;
 } else {
  $166 = HEAP32[$6>>2]|0;
  
  $169 = $166;
 }
 
 $170 = ($169>>>0)>(1);
 
 if ($170) {
  
  if ($165) {
   $173 = $163&255;
   $174 = $173 >>> 1;
   
   $$pn = $4;$175 = $4;$176 = $174;
  } else {
   $171 = HEAP32[$5>>2]|0;
   $172 = HEAP32[$6>>2]|0;
   
   $$pn = $171;$175 = $171;$176 = $172;
  }
  
  
  
  $gep_int75 = $$pn;
  $gep76 = (($gep_int75) + 1)|0;
  $177 = $gep76;
  $gep_int77 = $175;
  $gep78 = (($gep_int77) + ($176))|0;
  $178 = $gep78;
  $179 = HEAP32[$__me>>2]|0;
  $180 = ($177|0)==($178|0);
  
  if ($180) {
   $$0$lcssa$i$i = $179;
  } else {
   $$01$i$i = $179;$181 = $177;
   while(1) {
    
    
    $182 = HEAP8[$181]|0;
    HEAP8[$$01$i$i] = $182;
    $gep_int79 = $181;
    $gep80 = (($gep_int79) + 1)|0;
    $183 = $gep80;
    $gep_int81 = $$01$i$i;
    $gep82 = (($gep_int81) + 1)|0;
    $184 = $gep82;
    $185 = ($183|0)==($178|0);
    
    if ($185) {
     $$0$lcssa$i$i = $184;
     break;
    } else {
     $181$phi = $183;$$01$i$i$phi = $184;$181 = $181$phi;$$01$i$i = $$01$i$i$phi;
    }
   }
  }
  
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
  
 }
 $186 = $__flags & 176;
 
 if ((($186|0) == 16)) {
  STACKTOP = sp;return;
 } else if ((($186|0) == 32)) {
  $187 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $187;
  
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__p$i$i$i$i = 0;
 var $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep18 = 0;
 var $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep38 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep_array = 0;
 var $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0;
 var $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int59 = 0, $gep_int60 = 0, $gep_int61 = 0, $gep_int62 = 0, $this2$i$i$i = 0, $this2$i$i$i5 = 0, $this2$i$i$i6 = 0, $tmpcast = 0, label = 0, sp = 0, u$88 = 0, u$94 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__loc = sp + 24|0;
 $__pat = sp + 32|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__mbuf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__mi = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__me = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $gep_int = $__loc;
 $2 = $gep_int;
 $3 = HEAP32[$2>>2]|0;
 $4 = $__p$i$i$i$i;
 
 $expanded1 = 8480;
 $gep_int14 = 8480;
 $expanded = $gep_int14;
 $5 = HEAP32[$expanded>>2]|0;
 $6 = ($5|0)==(-1);
 
 if ($6) {
  label = 3;
 } else {
  $gep_int15 = $__p$i$i$i$i;
  $7 = $gep_int15;
  $expanded2 = 8480;
  HEAP32[$7>>2] = $expanded2;
  $gep_int16 = $__p$i$i$i$i;
  $gep = (($gep_int16) + 4)|0;
  $8 = $gep;
  $expanded3 = 177;
  HEAP32[$8>>2] = $expanded3;
  $gep_int17 = $__p$i$i$i$i;
  $gep18 = (($gep_int17) + 8)|0;
  $9 = $gep18;
  HEAP32[$9>>2] = 0;
  __THREW__ = 0;
  $expanded5 = 8480;
  $gep_int19 = 8480;
  $expanded4 = $gep_int19;
  invoke_viii(17,$expanded4|0,$4|0,178);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  
  if (!($11)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   
   $expanded7 = 8480;
   $gep_int20 = 8480;
   $gep21 = (($gep_int20) + 4)|0;
   $expanded6 = $gep21;
   $12 = HEAP32[$expanded6>>2]|0;
   $13 = (($12) + -1)|0;
   $gep_int22 = $3;
   $gep23 = (($gep_int22) + 12)|0;
   $14 = $gep23;
   $15 = HEAP32[$14>>2]|0;
   $gep_int24 = $3;
   $gep25 = (($gep_int24) + 8)|0;
   $16 = $gep25;
   $17 = HEAP32[$16>>2]|0;
   $18 = $15;
   $19 = $17;
   $20 = (($18) - ($19))|0;
   $21 = $20 >> 2;
   $22 = ($21>>>0)>($13>>>0);
   
   do {
    if ($22) {
     $gep_int26 = $17;
     $gep_array = $13<<2;
     $gep27 = (($gep_int26) + ($gep_array))|0;
     $23 = $gep27;
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0);
     
     if ($25) {
      break;
     }
     $30 = $24;
     $31 = $__digits;
     $32 = HEAP8[$__digits]|0;
     $33 = $32 & 1;
     $34 = ($33<<24>>24)==(0);
     
     if ($34) {
      $37 = $32&255;
      $38 = $37 >>> 1;
      
      $39 = $38;
     } else {
      $gep_int28 = $__digits;
      $gep29 = (($gep_int28) + 4)|0;
      $35 = $gep29;
      $36 = HEAP32[$35>>2]|0;
      
      $39 = $36;
     }
     
     $40 = ($39|0)==(0);
     
     if ($40) {
      $55 = 0;
     } else {
      
      if ($34) {
       $43 = $__digits;
       $gep_int32 = $__digits;
       $gep33 = (($gep_int32) + 1)|0;
       $44 = $gep33;
       
       $45 = $44;
      } else {
       $gep_int30 = $__digits;
       $gep31 = (($gep_int30) + 8)|0;
       $41 = $gep31;
       $42 = HEAP32[$41>>2]|0;
       
       $45 = $42;
      }
      
      $46 = HEAP8[$45]|0;
      $47 = $24;
      $48 = HEAP32[$24>>2]|0;
      $gep_int34 = $48;
      $gep35 = (($gep_int34) + 28)|0;
      $49 = $gep35;
      $50 = HEAP32[$49>>2]|0;
      __THREW__ = 0;
      $51 = invoke_iii($50|0,$30|0,45)|0;
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      
      if ($53) {
       break L3;
      }
      $54 = ($46<<24>>24)==($51<<24>>24);
      
      $55 = $54;
     }
     
     HEAP32[$__pat>>2] = 0;
     $this2$i$i$i = $__grp;
     ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
     $this2$i$i$i5 = $__sym;
     ;HEAP32[$this2$i$i$i5+0>>2]=0|0;HEAP32[$this2$i$i$i5+4>>2]=0|0;HEAP32[$this2$i$i$i5+8>>2]=0|0;
     $this2$i$i$i6 = $__sn;
     ;HEAP32[$this2$i$i$i6+0>>2]=0|0;HEAP32[$this2$i$i$i6+4>>2]=0|0;HEAP32[$this2$i$i$i6+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(3,$__intl|0,$55|0,$__loc|0,$tmpcast|0,$__dp|0,$__ts|0,$__grp|0,$__sym|0,$__sn|0,$__fd|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     
     L20: do {
      if ($57) {
       $expanded12 = 69;
       $123 = ___cxa_find_matching_catch(-1,-1)|0;
       $124 = tempRet0;
       
       $$0 = $123;$$01 = $124;
      } else {
       $gep_int36 = $__mbuf;
       $58 = $gep_int36;
       
       $59 = HEAP8[$__digits]|0;
       $60 = $59 & 1;
       $61 = ($60<<24>>24)==(0);
       
       if ($61) {
        $64 = $59&255;
        $65 = $64 >>> 1;
        
        $66 = $65;
       } else {
        $gep_int37 = $__digits;
        $gep38 = (($gep_int37) + 4)|0;
        $62 = $gep38;
        $63 = HEAP32[$62>>2]|0;
        
        $66 = $63;
       }
       
       $67 = HEAP32[$__fd>>2]|0;
       $68 = ($66|0)>($67|0);
       
       if ($68) {
        
        if ($61) {
         $71 = $59&255;
         $72 = $71 >>> 1;
         
         $73 = $72;
        } else {
         $gep_int39 = $__digits;
         $gep40 = (($gep_int39) + 4)|0;
         $69 = $gep40;
         $70 = HEAP32[$69>>2]|0;
         
         $73 = $70;
        }
        
        $74 = (($73) - ($67))|0;
        $75 = $74 << 1;
        $76 = HEAP8[$__sn]|0;
        $77 = $76 & 1;
        $78 = ($77<<24>>24)==(0);
        
        if ($78) {
         $81 = $76&255;
         $82 = $81 >>> 1;
         
         $83 = $82;
        } else {
         $gep_int41 = $__sn;
         $gep42 = (($gep_int41) + 4)|0;
         $79 = $gep42;
         $80 = HEAP32[$79>>2]|0;
         
         $83 = $80;
        }
        
        $84 = HEAP8[$__sym]|0;
        $85 = $84 & 1;
        $86 = ($85<<24>>24)==(0);
        
        if ($86) {
         $89 = $84&255;
         $90 = $89 >>> 1;
         
         $91 = $90;
        } else {
         $gep_int43 = $__sym;
         $gep44 = (($gep_int43) + 4)|0;
         $87 = $gep44;
         $88 = HEAP32[$87>>2]|0;
         
         $91 = $88;
        }
        
        $92 = $75 | 1;
        $93 = (($83) + ($92))|0;
        $94 = (($93) + ($91))|0;
        
        $$pn = $94;
       } else {
        $95 = HEAP8[$__sn]|0;
        $96 = $95 & 1;
        $97 = ($96<<24>>24)==(0);
        
        if ($97) {
         $100 = $95&255;
         $101 = $100 >>> 1;
         
         $102 = $101;
        } else {
         $gep_int45 = $__sn;
         $gep46 = (($gep_int45) + 4)|0;
         $98 = $gep46;
         $99 = HEAP32[$98>>2]|0;
         
         $102 = $99;
        }
        
        $103 = HEAP8[$__sym]|0;
        $104 = $103 & 1;
        $105 = ($104<<24>>24)==(0);
        
        if ($105) {
         $108 = $103&255;
         $109 = $108 >>> 1;
         
         $110 = $109;
        } else {
         $gep_int47 = $__sym;
         $gep48 = (($gep_int47) + 4)|0;
         $106 = $gep48;
         $107 = HEAP32[$106>>2]|0;
         
         $110 = $107;
        }
        
        $111 = (($102) + 2)|0;
        $112 = (($111) + ($110))|0;
        
        $$pn = $112;
       }
       
       $113 = (($$pn) + ($67))|0;
       $114 = ($113>>>0)>(100);
       
       do {
        if ($114) {
         $115 = _malloc($113)|0;
         $116 = ($115|0)==(0);
         
         if (!($116)) {
          $128 = $59;$129 = $115;$__mb$0 = $115;
          break;
         }
         __THREW__ = 0;
         invoke_v(13);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         
         if ($118) {
          $expanded10 = 69;
          $119 = ___cxa_find_matching_catch(-1,-1)|0;
          $120 = tempRet0;
          
          $$0 = $119;$$01 = $120;
          break L20;
         } else {
          $$pre = HEAP8[$__digits]|0;
          
          $128 = $$pre;$129 = 0;$__mb$0 = 0;
          break;
         }
        } else {
         $128 = $59;$129 = 0;$__mb$0 = $58;
        }
       } while(0);
       
       
       
       $gep_int49 = $__iob;
       $gep50 = (($gep_int49) + 4)|0;
       $130 = $gep50;
       $131 = HEAP32[$130>>2]|0;
       $132 = $128 & 1;
       $133 = ($132<<24>>24)==(0);
       
       if ($133) {
        $138 = $__digits;
        $gep_int55 = $__digits;
        $gep56 = (($gep_int55) + 1)|0;
        $139 = $gep56;
        $140 = $128&255;
        $141 = $140 >>> 1;
        
        $142 = $139;$143 = $141;
       } else {
        $gep_int51 = $__digits;
        $gep52 = (($gep_int51) + 8)|0;
        $134 = $gep52;
        $135 = HEAP32[$134>>2]|0;
        $gep_int53 = $__digits;
        $gep54 = (($gep_int53) + 4)|0;
        $136 = $gep54;
        $137 = HEAP32[$136>>2]|0;
        
        $142 = $135;$143 = $137;
       }
       
       
       $gep_int57 = $142;
       $gep58 = (($gep_int57) + ($143))|0;
       $144 = $gep58;
       $145 = HEAP8[$__dp]|0;
       $146 = HEAP8[$__ts]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(1,$__mb$0|0,$__mi|0,$__me|0,$131|0,$142|0,$144|0,$30|0,$55|0,$tmpcast|0,$145|0,$146|0,$__grp|0,$__sym|0,$__sn|0,$67|0);
       $147 = __THREW__; __THREW__ = 0;
       $148 = $147&1;
       
       do {
        if (!($148)) {
         $gep_int59 = $__s;
         $149 = $gep_int59;
         $150 = HEAP32[$149>>2]|0;
         $gep_int60 = $1;
         $151 = $gep_int60;
         HEAP32[$151>>2] = $150;
         $152 = HEAP32[$__mi>>2]|0;
         $153 = HEAP32[$__me>>2]|0;
         __THREW__ = 0;
         $154 = $$byval_copy;
         
         $155 = $$byval_copy;
         $156 = $1;
         ;HEAP32[$155+0>>2]=HEAP32[$156+0>>2]|0;
         invoke_viiiiiii(40,$agg$result|0,$$byval_copy|0,$__mb$0|0,$152|0,$153|0,$__iob|0,$__fl|0);
         $157 = $$byval_copy;
         
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         
         if ($159) {
          break;
         }
         $160 = ($129|0)==(0);
         
         if ($160) {
          
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
          $161 = HEAP32[$2>>2]|0;
          $gep_int61 = $161;
          $162 = $gep_int61;
          u$88 = __ZNSt3__114__shared_count16__release_sharedEv($162)|0;
          STACKTOP = sp;return;
         }
         _free($129);
         
         
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $161 = HEAP32[$2>>2]|0;
         $gep_int61 = $161;
         $162 = $gep_int61;
         u$88 = __ZNSt3__114__shared_count16__release_sharedEv($162)|0;
         STACKTOP = sp;return;
        }
       } while(0);
       $expanded13 = 69;
       $125 = ___cxa_find_matching_catch(-1,-1)|0;
       $126 = tempRet0;
       $127 = ($129|0)==(0);
       
       if ($127) {
        $$0 = $125;$$01 = $126;
        break;
       }
       _free($129);
       
       $$0 = $125;$$01 = $126;
      }
     } while(0);
     
     
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     
     $$1 = $$0;$$12 = $$01;
     
     
     $163 = HEAP32[$2>>2]|0;
     $gep_int62 = $163;
     $164 = $gep_int62;
     u$94 = __ZNSt3__114__shared_count16__release_sharedEv($164)|0;
     ___resumeException($$1|0);
     // unreachable
    }
   } while(0);
   $26 = ___cxa_allocate_exception(4)|0;
   $27 = $26;
   __ZNSt8bad_castC2Ev($27);
   __THREW__ = 0;
   $expanded8 = 16440;
   $expanded9 = 119;
   invoke_viii(5,$26|0,$expanded8|0,$expanded9|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   
   if ($29) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded11 = 69;
 $121 = ___cxa_find_matching_catch(-1,-1)|0;
 $122 = tempRet0;
 
 $$1 = $121;$$12 = $122;
 
 
 $163 = HEAP32[$2>>2]|0;
 $gep_int62 = $163;
 $164 = $gep_int62;
 u$94 = __ZNSt3__114__shared_count16__release_sharedEv($164)|0;
 ___resumeException($$1|0);
 // unreachable
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0;
 var $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0;
 var $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $gep = 0, $gep48 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0;
 var $gep59 = 0, $gep61 = 0, $gep64 = 0, $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep75 = 0, $gep_array = 0, $gep_array74 = 0, $gep_int = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int38 = 0, $gep_int39 = 0, $gep_int40 = 0, $gep_int41 = 0, $gep_int42 = 0, $gep_int43 = 0, $gep_int44 = 0;
 var $gep_int45 = 0, $gep_int46 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int76 = 0, $gep_int77 = 0, $gep_int78 = 0;
 var $gep_int79 = 0, $this2$i$i$i = 0, $this2$i$i$i6 = 0, $this2$i$i$i7 = 0, $tmpcast = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_func = 0, $vararg_func9 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast7 = 0, $vararg_ptr = 0, $vararg_ptr8 = 0, label = 0, sp = 0, u$107 = 0, u$121 = 0, u$52 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer6 = sp + 8|0;
 $vararg_lifetime_bitcast7 = $vararg_buffer6;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__buf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__bb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__digits = STACKTOP; STACKTOP = STACKTOP + 400|0;
 $__loc = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__pat = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__mbuf = STACKTOP; STACKTOP = STACKTOP + 400|0;
 $__mi = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__me = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $gep_int = $__buf;
 $2 = $gep_int;
 
 HEAP32[$__bb>>2] = $2;
 $3 = $__digits;
 
 $gep_int36 = $__digits;
 $4 = $gep_int36;
 
 $gep_int37 = $vararg_buffer;
 $vararg_ptr = $gep_int37;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_ptr>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $expanded = 18;
 $vararg_func = $expanded;
 $gep_int38 = 8232;
 $expanded10 = $gep_int38;
 $5 = _snprintf($2|0,100,$expanded10|0,$vararg_buffer|0)|0;
 
 $6 = ($5>>>0)>(99);
 
 L1: do {
  if ($6) {
   $gep_int39 = 8376;
   $expanded11 = $gep_int39;
   $7 = HEAP8[$expanded11]|0;
   $8 = ($7<<24>>24)==(0);
   
   do {
    if ($8) {
     $expanded12 = 8376;
     $9 = ___cxa_guard_acquire($expanded12|0)|0;
     $10 = ($9|0)==(0);
     
     if ($10) {
      break;
     }
     __THREW__ = 0;
     $gep_int40 = 8384;
     $expanded13 = $gep_int40;
     $11 = invoke_iiii(30,2147483647,$expanded13|0,0)|0;
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     
     if ($13) {
      $expanded16 = 69;
      $14 = ___cxa_find_matching_catch(-1,-1)|0;
      $15 = tempRet0;
      $expanded17 = 8376;
      ___cxa_guard_abort($expanded17|0);
      
      $28 = 0;$29 = 0;$eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
      label = 12;
      break L1;
     } else {
      $expanded14 = 8368;
      HEAP32[8368>>2] = $11;
      $expanded15 = 8376;
      ___cxa_guard_release($expanded15|0);
      
      break;
     }
    }
   } while(0);
   $expanded18 = 8368;
   $16 = HEAP32[8368>>2]|0;
   __THREW__ = 0;
   
   $gep_int41 = $vararg_buffer6;
   $vararg_ptr8 = $gep_int41;
   HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $expanded19 = 16;
   $vararg_func9 = $expanded19;
   $gep_int42 = 8232;
   $expanded20 = $gep_int42;
   $17 = invoke_iiiii(16,$__bb|0,$16|0,$expanded20|0,$vararg_buffer6|0)|0;
   
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   
   if ($19) {
    $24 = 0;$25 = 0;
    label = 11;
    break;
   }
   $20 = HEAP32[$__bb>>2]|0;
   $21 = ($20|0)==(0);
   
   if ($21) {
    __THREW__ = 0;
    invoke_v(13);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    
    if ($23) {
     $24 = 0;$25 = 0;
     label = 11;
     break;
    }
    $$pre = HEAP32[$__bb>>2]|0;
    
    $30 = $$pre;
   } else {
    $30 = $20;
   }
   
   $31 = $17 << 2;
   $32 = _malloc($31)|0;
   $33 = $32;
   $34 = ($32|0)==(0);
   
   if (!($34)) {
    $37 = $30;$38 = $33;$__db$0 = $33;$__n$0 = $17;
    label = 15;
    break;
   }
   __THREW__ = 0;
   invoke_v(13);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   
   if ($36) {
    $24 = $30;$25 = 0;
    label = 11;
   } else {
    $37 = $30;$38 = 0;$__db$0 = 0;$__n$0 = $17;
    label = 15;
   }
  } else {
   $37 = 0;$38 = 0;$__db$0 = $4;$__n$0 = $5;
   label = 15;
  }
 } while(0);
 do {
  if ((label|0) == 15) {
   
   
   
   
   __THREW__ = 0;
   invoke_vii(41,$__loc|0,$__iob|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   
   if ($40) {
    $24 = $37;$25 = $38;
    label = 11;
    break;
   }
   $gep_int43 = $__loc;
   $41 = $gep_int43;
   $42 = HEAP32[$41>>2]|0;
   $43 = $__p$i$i$i$i;
   
   $expanded23 = 8472;
   $gep_int44 = 8472;
   $expanded22 = $gep_int44;
   $44 = HEAP32[$expanded22>>2]|0;
   $45 = ($44|0)==(-1);
   
   if ($45) {
    label = 18;
   } else {
    $gep_int45 = $__p$i$i$i$i;
    $46 = $gep_int45;
    $expanded24 = 8472;
    HEAP32[$46>>2] = $expanded24;
    $gep_int46 = $__p$i$i$i$i;
    $gep = (($gep_int46) + 4)|0;
    $47 = $gep;
    $expanded25 = 177;
    HEAP32[$47>>2] = $expanded25;
    $gep_int47 = $__p$i$i$i$i;
    $gep48 = (($gep_int47) + 8)|0;
    $48 = $gep48;
    HEAP32[$48>>2] = 0;
    __THREW__ = 0;
    $expanded27 = 8472;
    $gep_int49 = 8472;
    $expanded26 = $gep_int49;
    invoke_viii(17,$expanded26|0,$43|0,178);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    
    if ($50) {
     label = 45;
    } else {
     label = 18;
    }
   }
   L21: do {
    if ((label|0) == 18) {
     
     $expanded29 = 8472;
     $gep_int50 = 8472;
     $gep51 = (($gep_int50) + 4)|0;
     $expanded28 = $gep51;
     $51 = HEAP32[$expanded28>>2]|0;
     $52 = (($51) + -1)|0;
     $gep_int52 = $42;
     $gep53 = (($gep_int52) + 12)|0;
     $53 = $gep53;
     $54 = HEAP32[$53>>2]|0;
     $gep_int54 = $42;
     $gep55 = (($gep_int54) + 8)|0;
     $55 = $gep55;
     $56 = HEAP32[$55>>2]|0;
     $57 = $54;
     $58 = $56;
     $59 = (($57) - ($58))|0;
     $60 = $59 >> 2;
     $61 = ($60>>>0)>($52>>>0);
     
     do {
      if ($61) {
       $gep_int56 = $56;
       $gep_array = $52<<2;
       $gep57 = (($gep_int56) + ($gep_array))|0;
       $62 = $gep57;
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0);
       
       if ($64) {
        break;
       }
       $69 = $63;
       $70 = HEAP32[$__bb>>2]|0;
       $gep_int58 = $70;
       $gep59 = (($gep_int58) + ($__n$0))|0;
       $71 = $gep59;
       $72 = $63;
       $73 = HEAP32[$63>>2]|0;
       $gep_int60 = $73;
       $gep61 = (($gep_int60) + 48)|0;
       $74 = $gep61;
       $75 = HEAP32[$74>>2]|0;
       __THREW__ = 0;
       u$52 = invoke_iiiii($75|0,$69|0,$70|0,$71|0,$__db$0|0)|0;
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       
       if ($77) {
        label = 45;
        break L21;
       }
       $78 = ($__n$0|0)==(0);
       
       if ($78) {
        $82 = 0;
       } else {
        $79 = HEAP32[$__bb>>2]|0;
        $80 = HEAP8[$79]|0;
        $81 = ($80<<24>>24)==(45);
        
        $82 = $81;
       }
       
       HEAP32[$__pat>>2] = 0;
       $this2$i$i$i = $__grp;
       ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
       $this2$i$i$i6 = $__sym;
       ;HEAP32[$this2$i$i$i6+0>>2]=0|0;HEAP32[$this2$i$i$i6+4>>2]=0|0;HEAP32[$this2$i$i$i6+8>>2]=0|0;
       $this2$i$i$i7 = $__sn;
       ;HEAP32[$this2$i$i$i7+0>>2]=0|0;HEAP32[$this2$i$i$i7+4>>2]=0|0;HEAP32[$this2$i$i$i7+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viiiiiiiiii(4,$__intl|0,$82|0,$__loc|0,$tmpcast|0,$__dp|0,$__ts|0,$__grp|0,$__sym|0,$__sn|0,$__fd|0);
       $83 = __THREW__; __THREW__ = 0;
       $84 = $83&1;
       
       L30: do {
        if ($84) {
         $expanded34 = 69;
         $140 = ___cxa_find_matching_catch(-1,-1)|0;
         $141 = tempRet0;
         
         $$0 = $140;$$01 = $141;
        } else {
         $85 = $__mbuf;
         
         $gep_int62 = $__mbuf;
         $86 = $gep_int62;
         $87 = HEAP32[$__fd>>2]|0;
         $88 = ($__n$0|0)>($87|0);
         
         if ($88) {
          $89 = (($__n$0) - ($87))|0;
          $90 = $89 << 1;
          $91 = HEAP8[$__sn]|0;
          $92 = $91 & 1;
          $93 = ($92<<24>>24)==(0);
          
          if ($93) {
           $96 = $91&255;
           $97 = $96 >>> 1;
           
           $98 = $97;
          } else {
           $gep_int63 = $__sn;
           $gep64 = (($gep_int63) + 4)|0;
           $94 = $gep64;
           $95 = HEAP32[$94>>2]|0;
           
           $98 = $95;
          }
          
          $99 = HEAP8[$__sym]|0;
          $100 = $99 & 1;
          $101 = ($100<<24>>24)==(0);
          
          if ($101) {
           $104 = $99&255;
           $105 = $104 >>> 1;
           
           $106 = $105;
          } else {
           $gep_int65 = $__sym;
           $gep66 = (($gep_int65) + 4)|0;
           $102 = $gep66;
           $103 = HEAP32[$102>>2]|0;
           
           $106 = $103;
          }
          
          $107 = $90 | 1;
          $108 = (($98) + ($107))|0;
          $109 = (($108) + ($106))|0;
          
          $$pn = $109;
         } else {
          $110 = HEAP8[$__sn]|0;
          $111 = $110 & 1;
          $112 = ($111<<24>>24)==(0);
          
          if ($112) {
           $115 = $110&255;
           $116 = $115 >>> 1;
           
           $117 = $116;
          } else {
           $gep_int67 = $__sn;
           $gep68 = (($gep_int67) + 4)|0;
           $113 = $gep68;
           $114 = HEAP32[$113>>2]|0;
           
           $117 = $114;
          }
          
          $118 = HEAP8[$__sym]|0;
          $119 = $118 & 1;
          $120 = ($119<<24>>24)==(0);
          
          if ($120) {
           $123 = $118&255;
           $124 = $123 >>> 1;
           
           $125 = $124;
          } else {
           $gep_int69 = $__sym;
           $gep70 = (($gep_int69) + 4)|0;
           $121 = $gep70;
           $122 = HEAP32[$121>>2]|0;
           
           $125 = $122;
          }
          
          $126 = (($117) + 2)|0;
          $127 = (($126) + ($125))|0;
          
          $$pn = $127;
         }
         
         $128 = (($$pn) + ($87))|0;
         $129 = ($128>>>0)>(100);
         
         do {
          if ($129) {
           $130 = $128 << 2;
           $131 = _malloc($130)|0;
           $132 = $131;
           $133 = ($131|0)==(0);
           
           if (!($133)) {
            $146 = $132;$__mb$0 = $132;
            break;
           }
           __THREW__ = 0;
           invoke_v(13);
           $134 = __THREW__; __THREW__ = 0;
           $135 = $134&1;
           
           if (!($135)) {
            $146 = 0;$__mb$0 = 0;
            break;
           }
           $expanded32 = 69;
           $136 = ___cxa_find_matching_catch(-1,-1)|0;
           $137 = tempRet0;
           
           $$0 = $136;$$01 = $137;
           break L30;
          } else {
           $146 = 0;$__mb$0 = $86;
          }
         } while(0);
         
         
         $gep_int71 = $__iob;
         $gep72 = (($gep_int71) + 4)|0;
         $147 = $gep72;
         $148 = HEAP32[$147>>2]|0;
         $gep_int73 = $__db$0;
         $gep_array74 = $__n$0<<2;
         $gep75 = (($gep_int73) + ($gep_array74))|0;
         $149 = $gep75;
         $150 = HEAP32[$__dp>>2]|0;
         $151 = HEAP32[$__ts>>2]|0;
         __THREW__ = 0;
         invoke_viiiiiiiiiiiiiii(2,$__mb$0|0,$__mi|0,$__me|0,$148|0,$__db$0|0,$149|0,$69|0,$82|0,$tmpcast|0,$150|0,$151|0,$__grp|0,$__sym|0,$__sn|0,$87|0);
         $152 = __THREW__; __THREW__ = 0;
         $153 = $152&1;
         
         do {
          if (!($153)) {
           $gep_int76 = $__s;
           $154 = $gep_int76;
           $155 = HEAP32[$154>>2]|0;
           $gep_int77 = $1;
           $156 = $gep_int77;
           HEAP32[$156>>2] = $155;
           $157 = HEAP32[$__mi>>2]|0;
           $158 = HEAP32[$__me>>2]|0;
           __THREW__ = 0;
           $159 = $$byval_copy;
           
           $160 = $$byval_copy;
           $161 = $1;
           ;HEAP32[$160+0>>2]=HEAP32[$161+0>>2]|0;
           invoke_viiiiiii(47,$agg$result|0,$$byval_copy|0,$__mb$0|0,$157|0,$158|0,$__iob|0,$__fl|0);
           $162 = $$byval_copy;
           
           $163 = __THREW__; __THREW__ = 0;
           $164 = $163&1;
           
           if ($164) {
            break;
           }
           $165 = ($146|0)==(0);
           
           if (!($165)) {
            $166 = $146;
            _free($166);
            
           }
           
           __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
           __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
           $167 = HEAP32[$41>>2]|0;
           $gep_int78 = $167;
           $168 = $gep_int78;
           u$107 = __ZNSt3__114__shared_count16__release_sharedEv($168)|0;
           $169 = ($38|0)==(0);
           
           if (!($169)) {
            $170 = $38;
            _free($170);
            
           }
           $171 = ($37|0)==(0);
           
           if ($171) {
            
            
            STACKTOP = sp;return;
           }
           _free($37);
           
           
           
           STACKTOP = sp;return;
          }
         } while(0);
         $expanded35 = 69;
         $142 = ___cxa_find_matching_catch(-1,-1)|0;
         $143 = tempRet0;
         $144 = ($146|0)==(0);
         
         if ($144) {
          $$0 = $142;$$01 = $143;
          break;
         }
         $145 = $146;
         _free($145);
         
         $$0 = $142;$$01 = $143;
        }
       } while(0);
       
       
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       
       $$1 = $$0;$$12 = $$01;
       break L21;
      }
     } while(0);
     $65 = ___cxa_allocate_exception(4)|0;
     $66 = $65;
     __ZNSt8bad_castC2Ev($66);
     __THREW__ = 0;
     $expanded30 = 16440;
     $expanded31 = 119;
     invoke_viii(5,$65|0,$expanded30|0,$expanded31|0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     
     if ($68) {
      label = 45;
      break;
     }
     // unreachable
    }
   } while(0);
   if ((label|0) == 45) {
    $expanded33 = 69;
    $138 = ___cxa_find_matching_catch(-1,-1)|0;
    $139 = tempRet0;
    
    $$1 = $138;$$12 = $139;
   }
   
   
   $172 = HEAP32[$41>>2]|0;
   $gep_int79 = $172;
   $173 = $gep_int79;
   u$121 = __ZNSt3__114__shared_count16__release_sharedEv($173)|0;
   
   $$2 = $$1;$$23 = $$12;$174 = $37;$175 = $38;
  }
 } while(0);
 if ((label|0) == 11) {
  
  
  $expanded21 = 69;
  $26 = ___cxa_find_matching_catch(-1,-1)|0;
  $27 = tempRet0;
  
  $28 = $24;$29 = $25;$eh$lpad$body$index2Z2D = $27;$eh$lpad$body$indexZ2D = $26;
  label = 12;
 }
 if ((label|0) == 12) {
  
  
  
  
  
  $$2 = $eh$lpad$body$indexZ2D;$$23 = $eh$lpad$body$index2Z2D;$174 = $28;$175 = $29;
 }
 
 
 
 
 $176 = ($175|0)==(0);
 
 if (!($176)) {
  $177 = $175;
  _free($177);
  
 }
 $178 = ($174|0)==(0);
 
 if ($178) {
  ___resumeException($$2|0);
  // unreachable
 }
 _free($174);
 
 ___resumeException($$2|0);
 // unreachable
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $expanded = 0, $expanded1 = 0;
 var $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded3 = 0;
 var $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep101 = 0, $gep103 = 0, $gep105 = 0, $gep107 = 0, $gep109 = 0, $gep111 = 0, $gep113 = 0, $gep115 = 0, $gep117 = 0, $gep119 = 0, $gep121 = 0, $gep123 = 0, $gep125 = 0;
 var $gep127 = 0, $gep129 = 0, $gep131 = 0, $gep133 = 0, $gep135 = 0, $gep137 = 0, $gep139 = 0, $gep141 = 0, $gep32 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0;
 var $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep87 = 0, $gep89 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep99 = 0;
 var $gep_array = 0, $gep_array98 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int112 = 0, $gep_int114 = 0, $gep_int116 = 0, $gep_int118 = 0, $gep_int120 = 0, $gep_int122 = 0, $gep_int124 = 0, $gep_int126 = 0, $gep_int128 = 0, $gep_int130 = 0, $gep_int132 = 0;
 var $gep_int134 = 0, $gep_int136 = 0, $gep_int138 = 0, $gep_int140 = 0, $gep_int28 = 0, $gep_int29 = 0, $gep_int30 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0;
 var $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int85 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int91 = 0;
 var $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $storemerge = 0, $tmpcast = 0, $tmpcast1 = 0, $tmpcast2 = 0, $tmpcast3 = 0, label = 0, sp = 0, u$119 = 0, u$139 = 0, u$159 = 0, u$176 = 0, u$28 = 0, u$48 = 0, u$68 = 0, u$85 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i8 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $tmpcast3 = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast2 = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $5 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $6 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $7 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast1 = $7;
 $8 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast = $9;
 $10 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $11 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $12 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $gep_int = $__loc;
 $13 = $gep_int;
 $14 = HEAP32[$13>>2]|0;
 
 if ($__intl) {
  $15 = $__p$i$i$i$i;
  
  $expanded1 = 8048;
  $gep_int28 = 8048;
  $expanded = $gep_int28;
  $16 = HEAP32[$expanded>>2]|0;
  $17 = ($16|0)==(-1);
  
  if (!($17)) {
   $gep_int29 = $__p$i$i$i$i;
   $18 = $gep_int29;
   $expanded2 = 8048;
   HEAP32[$18>>2] = $expanded2;
   $gep_int30 = $__p$i$i$i$i;
   $gep = (($gep_int30) + 4)|0;
   $19 = $gep;
   $expanded3 = 177;
   HEAP32[$19>>2] = $expanded3;
   $gep_int31 = $__p$i$i$i$i;
   $gep32 = (($gep_int31) + 8)|0;
   $20 = $gep32;
   HEAP32[$20>>2] = 0;
   $expanded5 = 8048;
   $gep_int33 = 8048;
   $expanded4 = $gep_int33;
   __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded4,$15,178);
   
  }
  
  $expanded7 = 8048;
  $gep_int34 = 8048;
  $gep35 = (($gep_int34) + 4)|0;
  $expanded6 = $gep35;
  $21 = HEAP32[$expanded6>>2]|0;
  $22 = (($21) + -1)|0;
  $gep_int36 = $14;
  $gep37 = (($gep_int36) + 12)|0;
  $23 = $gep37;
  $24 = HEAP32[$23>>2]|0;
  $gep_int38 = $14;
  $gep39 = (($gep_int38) + 8)|0;
  $25 = $gep39;
  $26 = HEAP32[$25>>2]|0;
  $27 = $24;
  $28 = $26;
  $29 = (($27) - ($28))|0;
  $30 = $29 >> 2;
  $31 = ($30>>>0)>($22>>>0);
  
  if (!($31)) {
   $35 = ___cxa_allocate_exception(4)|0;
   $36 = $35;
   __ZNSt8bad_castC2Ev($36);
   $expanded8 = 16440;
   $expanded9 = 119;
   ___cxa_throw($35|0,$expanded8|0,$expanded9|0);
   // unreachable
  }
  $gep_int40 = $26;
  $gep_array = $22<<2;
  $gep41 = (($gep_int40) + ($gep_array))|0;
  $32 = $gep41;
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0);
  
  if ($34) {
   $35 = ___cxa_allocate_exception(4)|0;
   $36 = $35;
   __ZNSt8bad_castC2Ev($36);
   $expanded8 = 16440;
   $expanded9 = 119;
   ___cxa_throw($35|0,$expanded8|0,$expanded9|0);
   // unreachable
  }
  $37 = $33;
  $38 = $33;
  $39 = HEAP32[$33>>2]|0;
  
  do {
   if ($__neg) {
    $gep_int42 = $39;
    $gep43 = (($gep_int42) + 44)|0;
    $40 = $gep43;
    $41 = HEAP32[$40>>2]|0;
    FUNCTION_TABLE_vii[$41 & 127]($tmpcast3,$37);
    $42 = $__pat;
    $43 = HEAP32[$1>>2]|0;
    HEAP8[$42]=$43&255;HEAP8[$42+1|0]=($43>>8)&255;HEAP8[$42+2|0]=($43>>16)&255;HEAP8[$42+3|0]=$43>>24;
    $44 = $33;
    $45 = HEAP32[$33>>2]|0;
    $gep_int44 = $45;
    $gep45 = (($gep_int44) + 32)|0;
    $46 = $gep45;
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_vii[$47 & 127]($2,$37);
    $48 = $__sn;
    $49 = HEAP8[$__sn]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    
    if ($51) {
     $gep_int50 = $__sn;
     $gep51 = (($gep_int50) + 4)|0;
     $55 = $gep51;
     HEAP32[$55>>2] = 0;
     HEAP8[$__sn] = 0;
     
    } else {
     $gep_int46 = $__sn;
     $gep47 = (($gep_int46) + 8)|0;
     $52 = $gep47;
     $53 = HEAP32[$52>>2]|0;
     HEAP32[$53>>2] = 0;
     $gep_int48 = $__sn;
     $gep49 = (($gep_int48) + 4)|0;
     $54 = $gep49;
     HEAP32[$54>>2] = 0;
     
    }
    __THREW__ = 0;
    invoke_vii(67,$__sn|0,0);
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    
    if ($57) {
     $expanded10 = 69;
     $58 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$28 = tempRet0;
     ___clang_call_terminate($58);
     // unreachable
    } else {
     $59 = $2;
     ;HEAP32[$48+0>>2]=HEAP32[$59+0>>2]|0;HEAP32[$48+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$59+8>>2]|0;
     ;HEAP32[$59+0>>2]=0|0;HEAP32[$59+4>>2]=0|0;HEAP32[$59+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
     
     break;
    }
   } else {
    $gep_int52 = $39;
    $gep53 = (($gep_int52) + 40)|0;
    $60 = $gep53;
    $61 = HEAP32[$60>>2]|0;
    FUNCTION_TABLE_vii[$61 & 127]($tmpcast2,$37);
    $62 = $__pat;
    $63 = HEAP32[$3>>2]|0;
    HEAP8[$62]=$63&255;HEAP8[$62+1|0]=($63>>8)&255;HEAP8[$62+2|0]=($63>>16)&255;HEAP8[$62+3|0]=$63>>24;
    $64 = $33;
    $65 = HEAP32[$33>>2]|0;
    $gep_int54 = $65;
    $gep55 = (($gep_int54) + 28)|0;
    $66 = $gep55;
    $67 = HEAP32[$66>>2]|0;
    FUNCTION_TABLE_vii[$67 & 127]($4,$37);
    $68 = $__sn;
    $69 = HEAP8[$__sn]|0;
    $70 = $69 & 1;
    $71 = ($70<<24>>24)==(0);
    
    if ($71) {
     $gep_int60 = $__sn;
     $gep61 = (($gep_int60) + 4)|0;
     $75 = $gep61;
     HEAP32[$75>>2] = 0;
     HEAP8[$__sn] = 0;
     
    } else {
     $gep_int56 = $__sn;
     $gep57 = (($gep_int56) + 8)|0;
     $72 = $gep57;
     $73 = HEAP32[$72>>2]|0;
     HEAP32[$73>>2] = 0;
     $gep_int58 = $__sn;
     $gep59 = (($gep_int58) + 4)|0;
     $74 = $gep59;
     HEAP32[$74>>2] = 0;
     
    }
    __THREW__ = 0;
    invoke_vii(67,$__sn|0,0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    
    if ($77) {
     $expanded11 = 69;
     $78 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$48 = tempRet0;
     ___clang_call_terminate($78);
     // unreachable
    } else {
     $79 = $4;
     ;HEAP32[$68+0>>2]=HEAP32[$79+0>>2]|0;HEAP32[$68+4>>2]=HEAP32[$79+4>>2]|0;HEAP32[$68+8>>2]=HEAP32[$79+8>>2]|0;
     ;HEAP32[$79+0>>2]=0|0;HEAP32[$79+4>>2]=0|0;HEAP32[$79+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
     
     break;
    }
   }
  } while(0);
  $80 = $33;
  $81 = HEAP32[$33>>2]|0;
  $gep_int62 = $81;
  $gep63 = (($gep_int62) + 12)|0;
  $82 = $gep63;
  $83 = HEAP32[$82>>2]|0;
  $84 = FUNCTION_TABLE_ii[$83 & 127]($37)|0;
  HEAP32[$__dp>>2] = $84;
  $85 = HEAP32[$33>>2]|0;
  $gep_int64 = $85;
  $gep65 = (($gep_int64) + 16)|0;
  $86 = $gep65;
  $87 = HEAP32[$86>>2]|0;
  $88 = FUNCTION_TABLE_ii[$87 & 127]($37)|0;
  HEAP32[$__ts>>2] = $88;
  $89 = $33;
  $90 = HEAP32[$33>>2]|0;
  $gep_int66 = $90;
  $gep67 = (($gep_int66) + 20)|0;
  $91 = $gep67;
  $92 = HEAP32[$91>>2]|0;
  FUNCTION_TABLE_vii[$92 & 127]($5,$37);
  $93 = $__grp;
  $94 = HEAP8[$__grp]|0;
  $95 = $94 & 1;
  $96 = ($95<<24>>24)==(0);
  
  if ($96) {
   $100 = $__grp;
   $gep_int72 = $__grp;
   $gep73 = (($gep_int72) + 1)|0;
   $101 = $gep73;
   HEAP8[$101] = 0;
   HEAP8[$__grp] = 0;
   
  } else {
   $gep_int68 = $__grp;
   $gep69 = (($gep_int68) + 8)|0;
   $97 = $gep69;
   $98 = HEAP32[$97>>2]|0;
   HEAP8[$98] = 0;
   $gep_int70 = $__grp;
   $gep71 = (($gep_int70) + 4)|0;
   $99 = $gep71;
   HEAP32[$99>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__grp|0,0);
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  
  if ($103) {
   $expanded12 = 69;
   $104 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$68 = tempRet0;
   ___clang_call_terminate($104);
   // unreachable
  }
  $105 = $5;
  ;HEAP32[$93+0>>2]=HEAP32[$105+0>>2]|0;HEAP32[$93+4>>2]=HEAP32[$105+4>>2]|0;HEAP32[$93+8>>2]=HEAP32[$105+8>>2]|0;
  ;HEAP32[$105+0>>2]=0|0;HEAP32[$105+4>>2]=0|0;HEAP32[$105+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $106 = $33;
  $107 = HEAP32[$33>>2]|0;
  $gep_int74 = $107;
  $gep75 = (($gep_int74) + 24)|0;
  $108 = $gep75;
  $109 = HEAP32[$108>>2]|0;
  FUNCTION_TABLE_vii[$109 & 127]($6,$37);
  $110 = $__sym;
  $111 = HEAP8[$__sym]|0;
  $112 = $111 & 1;
  $113 = ($112<<24>>24)==(0);
  
  if ($113) {
   $gep_int80 = $__sym;
   $gep81 = (($gep_int80) + 4)|0;
   $117 = $gep81;
   HEAP32[$117>>2] = 0;
   HEAP8[$__sym] = 0;
   
  } else {
   $gep_int76 = $__sym;
   $gep77 = (($gep_int76) + 8)|0;
   $114 = $gep77;
   $115 = HEAP32[$114>>2]|0;
   HEAP32[$115>>2] = 0;
   $gep_int78 = $__sym;
   $gep79 = (($gep_int78) + 4)|0;
   $116 = $gep79;
   HEAP32[$116>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(67,$__sym|0,0);
  $118 = __THREW__; __THREW__ = 0;
  $119 = $118&1;
  
  if ($119) {
   $expanded13 = 69;
   $120 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$85 = tempRet0;
   ___clang_call_terminate($120);
   // unreachable
  }
  $121 = $6;
  ;HEAP32[$110+0>>2]=HEAP32[$121+0>>2]|0;HEAP32[$110+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$110+8>>2]=HEAP32[$121+8>>2]|0;
  ;HEAP32[$121+0>>2]=0|0;HEAP32[$121+4>>2]=0|0;HEAP32[$121+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $122 = HEAP32[$33>>2]|0;
  $gep_int82 = $122;
  $gep83 = (($gep_int82) + 36)|0;
  $123 = $gep83;
  $124 = HEAP32[$123>>2]|0;
  $125 = FUNCTION_TABLE_ii[$124 & 127]($37)|0;
  
  $storemerge = $125;
  
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $126 = $__p$i$i$i$i8;
  
  $expanded15 = 7984;
  $gep_int84 = 7984;
  $expanded14 = $gep_int84;
  $127 = HEAP32[$expanded14>>2]|0;
  $128 = ($127|0)==(-1);
  
  if (!($128)) {
   $gep_int85 = $__p$i$i$i$i8;
   $129 = $gep_int85;
   $expanded16 = 7984;
   HEAP32[$129>>2] = $expanded16;
   $gep_int86 = $__p$i$i$i$i8;
   $gep87 = (($gep_int86) + 4)|0;
   $130 = $gep87;
   $expanded17 = 177;
   HEAP32[$130>>2] = $expanded17;
   $gep_int88 = $__p$i$i$i$i8;
   $gep89 = (($gep_int88) + 8)|0;
   $131 = $gep89;
   HEAP32[$131>>2] = 0;
   $expanded19 = 7984;
   $gep_int90 = 7984;
   $expanded18 = $gep_int90;
   __ZNSt3__111__call_onceERVmPvPFvS2_E($expanded18,$126,178);
   
  }
  
  $expanded21 = 7984;
  $gep_int91 = 7984;
  $gep92 = (($gep_int91) + 4)|0;
  $expanded20 = $gep92;
  $132 = HEAP32[$expanded20>>2]|0;
  $133 = (($132) + -1)|0;
  $gep_int93 = $14;
  $gep94 = (($gep_int93) + 12)|0;
  $134 = $gep94;
  $135 = HEAP32[$134>>2]|0;
  $gep_int95 = $14;
  $gep96 = (($gep_int95) + 8)|0;
  $136 = $gep96;
  $137 = HEAP32[$136>>2]|0;
  $138 = $135;
  $139 = $137;
  $140 = (($138) - ($139))|0;
  $141 = $140 >> 2;
  $142 = ($141>>>0)>($133>>>0);
  
  if (!($142)) {
   $146 = ___cxa_allocate_exception(4)|0;
   $147 = $146;
   __ZNSt8bad_castC2Ev($147);
   $expanded22 = 16440;
   $expanded23 = 119;
   ___cxa_throw($146|0,$expanded22|0,$expanded23|0);
   // unreachable
  }
  $gep_int97 = $137;
  $gep_array98 = $133<<2;
  $gep99 = (($gep_int97) + ($gep_array98))|0;
  $143 = $gep99;
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)==(0);
  
  if ($145) {
   $146 = ___cxa_allocate_exception(4)|0;
   $147 = $146;
   __ZNSt8bad_castC2Ev($147);
   $expanded22 = 16440;
   $expanded23 = 119;
   ___cxa_throw($146|0,$expanded22|0,$expanded23|0);
   // unreachable
  }
  $148 = $144;
  $149 = $144;
  $150 = HEAP32[$144>>2]|0;
  
  do {
   if ($__neg) {
    $gep_int100 = $150;
    $gep101 = (($gep_int100) + 44)|0;
    $151 = $gep101;
    $152 = HEAP32[$151>>2]|0;
    FUNCTION_TABLE_vii[$152 & 127]($tmpcast1,$148);
    $153 = $__pat;
    $154 = HEAP32[$7>>2]|0;
    HEAP8[$153]=$154&255;HEAP8[$153+1|0]=($154>>8)&255;HEAP8[$153+2|0]=($154>>16)&255;HEAP8[$153+3|0]=$154>>24;
    $155 = $144;
    $156 = HEAP32[$144>>2]|0;
    $gep_int102 = $156;
    $gep103 = (($gep_int102) + 32)|0;
    $157 = $gep103;
    $158 = HEAP32[$157>>2]|0;
    FUNCTION_TABLE_vii[$158 & 127]($8,$148);
    $159 = $__sn;
    $160 = HEAP8[$__sn]|0;
    $161 = $160 & 1;
    $162 = ($161<<24>>24)==(0);
    
    if ($162) {
     $gep_int108 = $__sn;
     $gep109 = (($gep_int108) + 4)|0;
     $166 = $gep109;
     HEAP32[$166>>2] = 0;
     HEAP8[$__sn] = 0;
     
    } else {
     $gep_int104 = $__sn;
     $gep105 = (($gep_int104) + 8)|0;
     $163 = $gep105;
     $164 = HEAP32[$163>>2]|0;
     HEAP32[$164>>2] = 0;
     $gep_int106 = $__sn;
     $gep107 = (($gep_int106) + 4)|0;
     $165 = $gep107;
     HEAP32[$165>>2] = 0;
     
    }
    __THREW__ = 0;
    invoke_vii(67,$__sn|0,0);
    $167 = __THREW__; __THREW__ = 0;
    $168 = $167&1;
    
    if ($168) {
     $expanded24 = 69;
     $169 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$119 = tempRet0;
     ___clang_call_terminate($169);
     // unreachable
    } else {
     $170 = $8;
     ;HEAP32[$159+0>>2]=HEAP32[$170+0>>2]|0;HEAP32[$159+4>>2]=HEAP32[$170+4>>2]|0;HEAP32[$159+8>>2]=HEAP32[$170+8>>2]|0;
     ;HEAP32[$170+0>>2]=0|0;HEAP32[$170+4>>2]=0|0;HEAP32[$170+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
     
     break;
    }
   } else {
    $gep_int110 = $150;
    $gep111 = (($gep_int110) + 40)|0;
    $171 = $gep111;
    $172 = HEAP32[$171>>2]|0;
    FUNCTION_TABLE_vii[$172 & 127]($tmpcast,$148);
    $173 = $__pat;
    $174 = HEAP32[$9>>2]|0;
    HEAP8[$173]=$174&255;HEAP8[$173+1|0]=($174>>8)&255;HEAP8[$173+2|0]=($174>>16)&255;HEAP8[$173+3|0]=$174>>24;
    $175 = $144;
    $176 = HEAP32[$144>>2]|0;
    $gep_int112 = $176;
    $gep113 = (($gep_int112) + 28)|0;
    $177 = $gep113;
    $178 = HEAP32[$177>>2]|0;
    FUNCTION_TABLE_vii[$178 & 127]($10,$148);
    $179 = $__sn;
    $180 = HEAP8[$__sn]|0;
    $181 = $180 & 1;
    $182 = ($181<<24>>24)==(0);
    
    if ($182) {
     $gep_int118 = $__sn;
     $gep119 = (($gep_int118) + 4)|0;
     $186 = $gep119;
     HEAP32[$186>>2] = 0;
     HEAP8[$__sn] = 0;
     
    } else {
     $gep_int114 = $__sn;
     $gep115 = (($gep_int114) + 8)|0;
     $183 = $gep115;
     $184 = HEAP32[$183>>2]|0;
     HEAP32[$184>>2] = 0;
     $gep_int116 = $__sn;
     $gep117 = (($gep_int116) + 4)|0;
     $185 = $gep117;
     HEAP32[$185>>2] = 0;
     
    }
    __THREW__ = 0;
    invoke_vii(67,$__sn|0,0);
    $187 = __THREW__; __THREW__ = 0;
    $188 = $187&1;
    
    if ($188) {
     $expanded25 = 69;
     $189 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$139 = tempRet0;
     ___clang_call_terminate($189);
     // unreachable
    } else {
     $190 = $10;
     ;HEAP32[$179+0>>2]=HEAP32[$190+0>>2]|0;HEAP32[$179+4>>2]=HEAP32[$190+4>>2]|0;HEAP32[$179+8>>2]=HEAP32[$190+8>>2]|0;
     ;HEAP32[$190+0>>2]=0|0;HEAP32[$190+4>>2]=0|0;HEAP32[$190+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($10);
     
     break;
    }
   }
  } while(0);
  $191 = $144;
  $192 = HEAP32[$144>>2]|0;
  $gep_int120 = $192;
  $gep121 = (($gep_int120) + 12)|0;
  $193 = $gep121;
  $194 = HEAP32[$193>>2]|0;
  $195 = FUNCTION_TABLE_ii[$194 & 127]($148)|0;
  HEAP32[$__dp>>2] = $195;
  $196 = HEAP32[$144>>2]|0;
  $gep_int122 = $196;
  $gep123 = (($gep_int122) + 16)|0;
  $197 = $gep123;
  $198 = HEAP32[$197>>2]|0;
  $199 = FUNCTION_TABLE_ii[$198 & 127]($148)|0;
  HEAP32[$__ts>>2] = $199;
  $200 = $144;
  $201 = HEAP32[$144>>2]|0;
  $gep_int124 = $201;
  $gep125 = (($gep_int124) + 20)|0;
  $202 = $gep125;
  $203 = HEAP32[$202>>2]|0;
  FUNCTION_TABLE_vii[$203 & 127]($11,$148);
  $204 = $__grp;
  $205 = HEAP8[$__grp]|0;
  $206 = $205 & 1;
  $207 = ($206<<24>>24)==(0);
  
  if ($207) {
   $211 = $__grp;
   $gep_int130 = $__grp;
   $gep131 = (($gep_int130) + 1)|0;
   $212 = $gep131;
   HEAP8[$212] = 0;
   HEAP8[$__grp] = 0;
   
  } else {
   $gep_int126 = $__grp;
   $gep127 = (($gep_int126) + 8)|0;
   $208 = $gep127;
   $209 = HEAP32[$208>>2]|0;
   HEAP8[$209] = 0;
   $gep_int128 = $__grp;
   $gep129 = (($gep_int128) + 4)|0;
   $210 = $gep129;
   HEAP32[$210>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(65,$__grp|0,0);
  $213 = __THREW__; __THREW__ = 0;
  $214 = $213&1;
  
  if ($214) {
   $expanded26 = 69;
   $215 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$159 = tempRet0;
   ___clang_call_terminate($215);
   // unreachable
  }
  $216 = $11;
  ;HEAP32[$204+0>>2]=HEAP32[$216+0>>2]|0;HEAP32[$204+4>>2]=HEAP32[$216+4>>2]|0;HEAP32[$204+8>>2]=HEAP32[$216+8>>2]|0;
  ;HEAP32[$216+0>>2]=0|0;HEAP32[$216+4>>2]=0|0;HEAP32[$216+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $217 = $144;
  $218 = HEAP32[$144>>2]|0;
  $gep_int132 = $218;
  $gep133 = (($gep_int132) + 24)|0;
  $219 = $gep133;
  $220 = HEAP32[$219>>2]|0;
  FUNCTION_TABLE_vii[$220 & 127]($12,$148);
  $221 = $__sym;
  $222 = HEAP8[$__sym]|0;
  $223 = $222 & 1;
  $224 = ($223<<24>>24)==(0);
  
  if ($224) {
   $gep_int138 = $__sym;
   $gep139 = (($gep_int138) + 4)|0;
   $228 = $gep139;
   HEAP32[$228>>2] = 0;
   HEAP8[$__sym] = 0;
   
  } else {
   $gep_int134 = $__sym;
   $gep135 = (($gep_int134) + 8)|0;
   $225 = $gep135;
   $226 = HEAP32[$225>>2]|0;
   HEAP32[$226>>2] = 0;
   $gep_int136 = $__sym;
   $gep137 = (($gep_int136) + 4)|0;
   $227 = $gep137;
   HEAP32[$227>>2] = 0;
   
  }
  __THREW__ = 0;
  invoke_vii(67,$__sym|0,0);
  $229 = __THREW__; __THREW__ = 0;
  $230 = $229&1;
  
  if ($230) {
   $expanded27 = 69;
   $231 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$176 = tempRet0;
   ___clang_call_terminate($231);
   // unreachable
  }
  $232 = $12;
  ;HEAP32[$221+0>>2]=HEAP32[$232+0>>2]|0;HEAP32[$221+4>>2]=HEAP32[$232+4>>2]|0;HEAP32[$221+8>>2]=HEAP32[$232+8>>2]|0;
  ;HEAP32[$232+0>>2]=0|0;HEAP32[$232+4>>2]=0|0;HEAP32[$232+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($12);
  $233 = HEAP32[$144>>2]|0;
  $gep_int140 = $233;
  $gep141 = (($gep_int140) + 36)|0;
  $234 = $gep141;
  $235 = HEAP32[$234>>2]|0;
  $236 = FUNCTION_TABLE_ii[$235 & 127]($148)|0;
  
  $storemerge = $236;
  
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i$phi = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i13 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $150$phi = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $178$phi = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $61$phi = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $78$phi = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $94$phi = 0, $95 = 0, $95$phi = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$034$phi = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$137$phi = 0, $__d$2 = 0, $__d$353 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$038$phi = 0;
 var $__f$145 = 0, $__f$145$phi = 0, $__gl$056 = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, $brmerge = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0;
 var $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep4 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep55 = 0, $gep58 = 0, $gep6 = 0, $gep60 = 0, $gep62 = 0;
 var $gep64 = 0, $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep76 = 0, $gep78 = 0, $gep8 = 0, $gep80 = 0, $gep83 = 0, $gep86 = 0, $gep88 = 0, $gep90 = 0, $gep92 = 0, $gep95 = 0, $gep_array = 0, $gep_array24 = 0, $gep_array33 = 0, $gep_array54 = 0;
 var $gep_array57 = 0, $gep_array82 = 0, $gep_array85 = 0, $gep_array94 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int3 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int35 = 0, $gep_int37 = 0;
 var $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int5 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int56 = 0, $gep_int59 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int7 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0;
 var $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int84 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int9 = 0, $gep_int91 = 0, $gep_int93 = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i14 = 0, $scevgep3$i$i = 0, $scevgep3$i$i15 = 0, $scevgep6$i$i = 0, $scevgep6$i$i20 = 0, $scevgep70 = 0, $uglygep$i$i = 0, $uglygep$i$i16 = 0;
 var $uglygep5$i$i = 0, $uglygep5$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $1 = $__ct;
 $2 = $__sn;
 $gep_int = $__sn;
 $gep = (($gep_int) + 4)|0;
 $3 = $gep;
 $gep_int1 = $__sn;
 $gep2 = (($gep_int1) + 8)|0;
 $4 = $gep2;
 $5 = $__sym;
 $6 = $__flags & 512;
 $7 = ($6|0)==(0);
 $gep_int3 = $__sym;
 $gep4 = (($gep_int3) + 4)|0;
 $8 = $gep4;
 $gep_int5 = $__sym;
 $gep6 = (($gep_int5) + 8)|0;
 $9 = $gep6;
 $10 = ($__fd|0)>(0);
 $11 = $__grp;
 $12 = $__grp;
 $gep_int7 = $__grp;
 $gep8 = (($gep_int7) + 1)|0;
 $13 = $gep8;
 $gep_int9 = $__grp;
 $gep10 = (($gep_int9) + 8)|0;
 $14 = $gep10;
 $gep_int11 = $__grp;
 $gep12 = (($gep_int11) + 4)|0;
 $15 = $gep12;
 $16 = $__ct;
 
 $$059 = $__db;$__p$058 = 0;
 while(1) {
  
  
  $gep_int13 = $__pat;
  $gep14 = (($gep_int13) + ($__p$058))|0;
  $17 = $gep14;
  $18 = HEAP8[$17]|0;
  $19 = $18 << 24 >> 24;
  
  L3: do {
   switch ($19|0) {
   case 1:  {
    $21 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $21;
    $22 = HEAP32[$__ct>>2]|0;
    $gep_int15 = $22;
    $gep16 = (($gep_int15) + 44)|0;
    $23 = $gep16;
    $24 = HEAP32[$23>>2]|0;
    $25 = FUNCTION_TABLE_iii[$24 & 63]($__ct,32)|0;
    $26 = HEAP32[$__me>>2]|0;
    $gep_int17 = $26;
    $gep18 = (($gep_int17) + 4)|0;
    $27 = $gep18;
    HEAP32[$__me>>2] = $27;
    HEAP32[$26>>2] = $25;
    
    $$2 = $$059;
    break;
   }
   case 3:  {
    $28 = HEAP8[$__sn]|0;
    $29 = $28 & 1;
    $30 = ($29<<24>>24)==(0);
    
    if ($30) {
     $32 = $28&255;
     $33 = $32 >>> 1;
     
     $34 = $33;
    } else {
     $31 = HEAP32[$3>>2]|0;
     
     $34 = $31;
    }
    
    $35 = ($34|0)==(0);
    
    if ($35) {
     $$2 = $$059;
     break L3;
    }
    
    if ($30) {
     $37 = $3;
    } else {
     $36 = HEAP32[$4>>2]|0;
     
     $37 = $36;
    }
    
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$__me>>2]|0;
    $gep_int19 = $39;
    $gep20 = (($gep_int19) + 4)|0;
    $40 = $gep20;
    HEAP32[$__me>>2] = $40;
    HEAP32[$39>>2] = $38;
    
    $$2 = $$059;
    break;
   }
   case 2:  {
    $41 = HEAP8[$__sym]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    
    if ($43) {
     $45 = $41&255;
     $46 = $45 >>> 1;
     
     $47 = $46;
    } else {
     $44 = HEAP32[$8>>2]|0;
     
     $47 = $44;
    }
    
    $48 = ($47|0)==(0);
    $brmerge = $48 | $7;
    
    if ($brmerge) {
     $$2 = $$059;
     break L3;
    }
    
    if ($43) {
     $51 = $41&255;
     $52 = $51 >>> 1;
     
     $53 = $8;$54 = $8;$55 = $52;
    } else {
     $49 = HEAP32[$9>>2]|0;
     $50 = HEAP32[$8>>2]|0;
     
     $53 = $49;$54 = $49;$55 = $50;
    }
    
    
    
    $gep_int21 = $54;
    $gep_array = $55<<2;
    $gep22 = (($gep_int21) + ($gep_array))|0;
    $56 = $gep22;
    $57 = HEAP32[$__me>>2]|0;
    $58 = ($53|0)==($56|0);
    
    if ($58) {
     $$0$lcssa$i$i22 = $57;
    } else {
     $$promoted4$i$i13 = $53;
     $$sum33 = (($55) + -1)|0;
     $gep_int23 = $54;
     $gep_array24 = $$sum33<<2;
     $gep25 = (($gep_int23) + ($gep_array24))|0;
     $scevgep$i$i14 = $gep25;
     $scevgep3$i$i15 = $scevgep$i$i14;
     $59 = (0 - ($$promoted4$i$i13))|0;
     $gep_int26 = $scevgep$i$i14;
     $gep27 = (($gep_int26) + ($59))|0;
     $uglygep$i$i16 = $gep27;
     $uglygep5$i$i17 = $uglygep$i$i16;
     $60 = $uglygep5$i$i17 >>> 2;
     
     $$01$i$i19 = $57;$61 = $53;
     while(1) {
      
      
      $62 = HEAP32[$61>>2]|0;
      HEAP32[$$01$i$i19>>2] = $62;
      $gep_int28 = $61;
      $gep29 = (($gep_int28) + 4)|0;
      $63 = $gep29;
      $64 = ($63|0)==($56|0);
      
      if ($64) {
       break;
      }
      $gep_int30 = $$01$i$i19;
      $gep31 = (($gep_int30) + 4)|0;
      $65 = $gep31;
      
      $61$phi = $63;$$01$i$i19 = $65;$61 = $61$phi;
     }
     $66 = (($60) + 1)|0;
     $gep_int32 = $57;
     $gep_array33 = $66<<2;
     $gep34 = (($gep_int32) + ($gep_array33))|0;
     $scevgep6$i$i20 = $gep34;
     
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    
    $$2 = $$059;
    break;
   }
   case 0:  {
    $20 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $20;
    
    $$2 = $$059;
    break;
   }
   case 4:  {
    $67 = HEAP32[$__me>>2]|0;
    $gep_int35 = $$059;
    $gep36 = (($gep_int35) + 4)|0;
    $68 = $gep36;
    $$$0 = $__neg ? $68 : $$059;
    $69 = ($$$0>>>0)<($__de>>>0);
    
    L33: do {
     if ($69) {
      $__d$034 = $$$0;
      while(1) {
       
       $71 = HEAP32[$__d$034>>2]|0;
       $72 = HEAP32[$__ct>>2]|0;
       $gep_int37 = $72;
       $gep38 = (($gep_int37) + 12)|0;
       $73 = $gep38;
       $74 = HEAP32[$73>>2]|0;
       $75 = FUNCTION_TABLE_iiii[$74 & 63]($__ct,2048,$71)|0;
       $gep_int39 = $__d$034;
       $gep40 = (($gep_int39) + 4)|0;
       $76 = $gep40;
       
       if (!($75)) {
        $__d$0$lcssa = $__d$034;
        break L33;
       }
       $70 = ($76>>>0)<($__de>>>0);
       
       if ($70) {
        $__d$034$phi = $76;$__d$034 = $__d$034$phi;
       } else {
        $__d$0$lcssa = $76;
        break;
       }
      }
     } else {
      $__d$0$lcssa = $$$0;
     }
    } while(0);
    
    
    if ($10) {
     $77 = ($__d$0$lcssa>>>0)>($$$0>>>0);
     
     do {
      if ($77) {
       $__me$promoted = HEAP32[$__me>>2]|0;
       
       $78 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
       while(1) {
        
        
        
        $gep_int41 = $__d$137;
        $gep42 = (($gep_int41) + -4)|0;
        $79 = $gep42;
        $80 = HEAP32[$79>>2]|0;
        $gep_int43 = $78;
        $gep44 = (($gep_int43) + 4)|0;
        $81 = $gep44;
        HEAP32[$78>>2] = $80;
        $82 = (($__f$038) + -1)|0;
        $83 = ($79>>>0)>($$$0>>>0);
        $84 = ($82|0)>(0);
        $or$cond = $83 & $84;
        
        if ($or$cond) {
         $__f$038$phi = $82;$__d$137$phi = $79;$78$phi = $81;$__f$038 = $__f$038$phi;$__d$137 = $__d$137$phi;$78 = $78$phi;
        } else {
         break;
        }
       }
       HEAP32[$__me>>2] = $81;
       
       if ($84) {
        $__d$1$lcssa79 = $79;$__f$0$lcssa77 = $82;
        label = 34;
        break;
       }
       $85 = HEAP32[$__me>>2]|0;
       $gep_int45 = $85;
       $gep46 = (($gep_int45) + 4)|0;
       $86 = $gep46;
       HEAP32[$__me>>2] = $86;
       
       $$lcssa44 = $85;$__d$1$lcssa7880 = $79;
      } else {
       $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
       label = 34;
      }
     } while(0);
     do {
      if ((label|0) == 34) {
       label = 0;
       
       
       $87 = HEAP32[$__ct>>2]|0;
       $gep_int47 = $87;
       $gep48 = (($gep_int47) + 44)|0;
       $88 = $gep48;
       $89 = HEAP32[$88>>2]|0;
       $90 = FUNCTION_TABLE_iii[$89 & 63]($__ct,48)|0;
       $91 = ($__f$0$lcssa77|0)>(0);
       $92 = HEAP32[$__me>>2]|0;
       $gep_int49 = $92;
       $gep50 = (($gep_int49) + 4)|0;
       $93 = $gep50;
       HEAP32[$__me>>2] = $93;
       
       if ($91) {
        $94 = $93;$95 = $92;$__f$145 = $__f$0$lcssa77;
       } else {
        $$lcssa44 = $92;$__d$1$lcssa7880 = $__d$1$lcssa79;
        break;
       }
       while(1) {
        
        
        
        HEAP32[$95>>2] = $90;
        $96 = (($__f$145) + -1)|0;
        $97 = ($96|0)>(0);
        $gep_int51 = $94;
        $gep52 = (($gep_int51) + 4)|0;
        $98 = $gep52;
        
        if ($97) {
         $__f$145$phi = $96;$95$phi = $94;$94$phi = $98;$__f$145 = $__f$145$phi;$95 = $95$phi;$94 = $94$phi;
        } else {
         break;
        }
       }
       $$sum75 = (($__f$0$lcssa77) + 1)|0;
       $gep_int53 = $92;
       $gep_array54 = $$sum75<<2;
       $gep55 = (($gep_int53) + ($gep_array54))|0;
       $scevgep = $gep55;
       $gep_int56 = $92;
       $gep_array57 = $__f$0$lcssa77<<2;
       $gep58 = (($gep_int56) + ($gep_array57))|0;
       $scevgep70 = $gep58;
       HEAP32[$__me>>2] = $scevgep;
       
       $$lcssa44 = $scevgep70;$__d$1$lcssa7880 = $__d$1$lcssa79;
      }
     } while(0);
     
     
     HEAP32[$$lcssa44>>2] = $__dp;
     
     $__d$2 = $__d$1$lcssa7880;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    
    $99 = ($__d$2|0)==($$$0|0);
    
    if ($99) {
     $100 = HEAP32[$__ct>>2]|0;
     $gep_int59 = $100;
     $gep60 = (($gep_int59) + 44)|0;
     $101 = $gep60;
     $102 = HEAP32[$101>>2]|0;
     $103 = FUNCTION_TABLE_iii[$102 & 63]($__ct,48)|0;
     $104 = HEAP32[$__me>>2]|0;
     $gep_int61 = $104;
     $gep62 = (($gep_int61) + 4)|0;
     $105 = $gep62;
     HEAP32[$__me>>2] = $105;
     HEAP32[$104>>2] = $103;
     
     $146 = $105;
    } else {
     $106 = HEAP8[$__grp]|0;
     $107 = $106 & 1;
     $108 = ($107<<24>>24)==(0);
     
     if ($108) {
      $110 = $106&255;
      $111 = $110 >>> 1;
      
      $112 = $111;
     } else {
      $109 = HEAP32[$15>>2]|0;
      
      $112 = $109;
     }
     
     $113 = ($112|0)==(0);
     
     if ($113) {
      $__d$353 = $__d$2;$__gl$056 = -1;$__ig$055 = 0;$__ng$054 = 0;
     } else {
      
      if ($108) {
       $115 = $13;
      } else {
       $114 = HEAP32[$14>>2]|0;
       
       $115 = $114;
      }
      
      $116 = HEAP8[$115]|0;
      $117 = $116 << 24 >> 24;
      
      $__d$353 = $__d$2;$__gl$056 = $117;$__ig$055 = 0;$__ng$054 = 0;
     }
     while(1) {
      
      
      
      
      $118 = ($__ng$054|0)==($__gl$056|0);
      $119 = HEAP32[$__me>>2]|0;
      
      do {
       if ($118) {
        $gep_int63 = $119;
        $gep64 = (($gep_int63) + 4)|0;
        $120 = $gep64;
        HEAP32[$__me>>2] = $120;
        HEAP32[$119>>2] = $__ts;
        $121 = (($__ig$055) + 1)|0;
        $122 = HEAP8[$__grp]|0;
        $123 = $122 & 1;
        $124 = ($123<<24>>24)==(0);
        
        if ($124) {
         $126 = $122&255;
         $127 = $126 >>> 1;
         
         $128 = $127;
        } else {
         $125 = HEAP32[$15>>2]|0;
         
         $128 = $125;
        }
        
        $129 = ($121>>>0)<($128>>>0);
        
        if (!($129)) {
         $140 = $120;$__gl$1 = $__gl$056;$__ig$1 = $121;$__ng$1 = 0;
         break;
        }
        
        if ($124) {
         $131 = $13;
        } else {
         $130 = HEAP32[$14>>2]|0;
         
         $131 = $130;
        }
        
        $gep_int65 = $131;
        $gep66 = (($gep_int65) + ($121))|0;
        $132 = $gep66;
        $133 = HEAP8[$132]|0;
        $134 = ($133<<24>>24)==(127);
        
        if ($134) {
         $140 = $120;$__gl$1 = -1;$__ig$1 = $121;$__ng$1 = 0;
         break;
        }
        
        if ($124) {
         $136 = $13;
        } else {
         $135 = HEAP32[$14>>2]|0;
         
         $136 = $135;
        }
        
        $gep_int67 = $136;
        $gep68 = (($gep_int67) + ($121))|0;
        $137 = $gep68;
        $138 = HEAP8[$137]|0;
        $139 = $138 << 24 >> 24;
        
        $140 = $120;$__gl$1 = $139;$__ig$1 = $121;$__ng$1 = 0;
       } else {
        $140 = $119;$__gl$1 = $__gl$056;$__ig$1 = $__ig$055;$__ng$1 = $__ng$054;
       }
      } while(0);
      
      
      
      
      $gep_int69 = $__d$353;
      $gep70 = (($gep_int69) + -4)|0;
      $141 = $gep70;
      $142 = HEAP32[$141>>2]|0;
      $gep_int71 = $140;
      $gep72 = (($gep_int71) + 4)|0;
      $143 = $gep72;
      HEAP32[$__me>>2] = $143;
      HEAP32[$140>>2] = $142;
      $144 = (($__ng$1) + 1)|0;
      $145 = ($141|0)==($$$0|0);
      
      if ($145) {
       $146 = $143;
       break;
      } else {
       $__d$353 = $141;$__gl$056 = $__gl$1;$__ig$055 = $__ig$1;$__ng$054 = $144;
      }
     }
    }
    
    $147 = ($67|0)==($146|0);
    
    if ($147) {
     $$2 = $$$0;
     break L3;
    }
    $gep_int73 = $146;
    $gep74 = (($gep_int73) + -4)|0;
    $148 = $gep74;
    $149 = ($148>>>0)>($67>>>0);
    
    if ($149) {
     $$012$i$i = $67;$150 = $148;
    } else {
     $$2 = $$$0;
     break L3;
    }
    while(1) {
     
     
     $151 = HEAP32[$$012$i$i>>2]|0;
     $152 = HEAP32[$150>>2]|0;
     HEAP32[$$012$i$i>>2] = $152;
     HEAP32[$150>>2] = $151;
     $gep_int75 = $$012$i$i;
     $gep76 = (($gep_int75) + 4)|0;
     $153 = $gep76;
     $gep_int77 = $150;
     $gep78 = (($gep_int77) + -4)|0;
     $154 = $gep78;
     $155 = ($153>>>0)<($154>>>0);
     
     if ($155) {
      $150$phi = $154;$$012$i$i$phi = $153;$150 = $150$phi;$$012$i$i = $$012$i$i$phi;
     } else {
      $$2 = $$$0;
      break;
     }
    }
    break;
   }
   default: {
    $$2 = $$059;
   }
   }
  } while(0);
  
  $156 = (($__p$058) + 1)|0;
  $157 = ($156>>>0)<(4);
  
  if ($157) {
   $$059 = $$2;$__p$058 = $156;
  } else {
   break;
  }
 }
 $158 = HEAP8[$__sn]|0;
 $159 = $158 & 1;
 $160 = ($159<<24>>24)==(0);
 
 if ($160) {
  $162 = $158&255;
  $163 = $162 >>> 1;
  
  $164 = $163;
 } else {
  $161 = HEAP32[$3>>2]|0;
  
  $164 = $161;
 }
 
 $165 = ($164>>>0)>(1);
 
 if ($165) {
  
  if ($160) {
   $168 = $158&255;
   $169 = $168 >>> 1;
   
   $$pn = $3;$170 = $3;$171 = $169;
  } else {
   $166 = HEAP32[$4>>2]|0;
   $167 = HEAP32[$3>>2]|0;
   
   $$pn = $166;$170 = $166;$171 = $167;
  }
  
  
  
  $gep_int79 = $$pn;
  $gep80 = (($gep_int79) + 4)|0;
  $172 = $gep80;
  $gep_int81 = $170;
  $gep_array82 = $171<<2;
  $gep83 = (($gep_int81) + ($gep_array82))|0;
  $173 = $gep83;
  $174 = HEAP32[$__me>>2]|0;
  $175 = ($172|0)==($173|0);
  
  if ($175) {
   $$0$lcssa$i$i = $174;
  } else {
   $$promoted4$i$i = $172;
   $$sum = (($171) + -1)|0;
   $gep_int84 = $170;
   $gep_array85 = $$sum<<2;
   $gep86 = (($gep_int84) + ($gep_array85))|0;
   $scevgep$i$i = $gep86;
   $scevgep3$i$i = $scevgep$i$i;
   $176 = (0 - ($$promoted4$i$i))|0;
   $gep_int87 = $scevgep$i$i;
   $gep88 = (($gep_int87) + ($176))|0;
   $uglygep$i$i = $gep88;
   $uglygep5$i$i = $uglygep$i$i;
   $177 = $uglygep5$i$i >>> 2;
   
   $$01$i$i = $174;$178 = $172;
   while(1) {
    
    
    $179 = HEAP32[$178>>2]|0;
    HEAP32[$$01$i$i>>2] = $179;
    $gep_int89 = $178;
    $gep90 = (($gep_int89) + 4)|0;
    $180 = $gep90;
    $gep_int91 = $$01$i$i;
    $gep92 = (($gep_int91) + 4)|0;
    $181 = $gep92;
    $182 = ($180|0)==($173|0);
    
    if ($182) {
     break;
    } else {
     $178$phi = $180;$$01$i$i$phi = $181;$178 = $178$phi;$$01$i$i = $$01$i$i$phi;
    }
   }
   $183 = (($177) + 1)|0;
   $gep_int93 = $174;
   $gep_array94 = $183<<2;
   $gep95 = (($gep_int93) + ($gep_array94))|0;
   $scevgep6$i$i = $gep95;
   
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
  
 }
 $184 = $__flags & 176;
 
 if ((($184|0) == 16)) {
  STACKTOP = sp;return;
 } else if ((($184|0) == 32)) {
  $185 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $185;
  
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0;
 var $expanded9 = 0, $gep = 0, $gep18 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep38 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0;
 var $gep56 = 0, $gep59 = 0, $gep_array = 0, $gep_array58 = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int37 = 0;
 var $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int60 = 0, $gep_int61 = 0, $gep_int62 = 0, $gep_int63 = 0, $this2$i$i$i = 0, $this2$i$i$i5 = 0, $this2$i$i$i6 = 0, $tmpcast = 0, label = 0, sp = 0;
 var u$88 = 0, u$94 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__loc = sp + 24|0;
 $__pat = sp + 32|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__mbuf = STACKTOP; STACKTOP = STACKTOP + 400|0;
 $__mi = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__me = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $gep_int = $__loc;
 $2 = $gep_int;
 $3 = HEAP32[$2>>2]|0;
 $4 = $__p$i$i$i$i;
 
 $expanded1 = 8472;
 $gep_int14 = 8472;
 $expanded = $gep_int14;
 $5 = HEAP32[$expanded>>2]|0;
 $6 = ($5|0)==(-1);
 
 if ($6) {
  label = 3;
 } else {
  $gep_int15 = $__p$i$i$i$i;
  $7 = $gep_int15;
  $expanded2 = 8472;
  HEAP32[$7>>2] = $expanded2;
  $gep_int16 = $__p$i$i$i$i;
  $gep = (($gep_int16) + 4)|0;
  $8 = $gep;
  $expanded3 = 177;
  HEAP32[$8>>2] = $expanded3;
  $gep_int17 = $__p$i$i$i$i;
  $gep18 = (($gep_int17) + 8)|0;
  $9 = $gep18;
  HEAP32[$9>>2] = 0;
  __THREW__ = 0;
  $expanded5 = 8472;
  $gep_int19 = 8472;
  $expanded4 = $gep_int19;
  invoke_viii(17,$expanded4|0,$4|0,178);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  
  if (!($11)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   
   $expanded7 = 8472;
   $gep_int20 = 8472;
   $gep21 = (($gep_int20) + 4)|0;
   $expanded6 = $gep21;
   $12 = HEAP32[$expanded6>>2]|0;
   $13 = (($12) + -1)|0;
   $gep_int22 = $3;
   $gep23 = (($gep_int22) + 12)|0;
   $14 = $gep23;
   $15 = HEAP32[$14>>2]|0;
   $gep_int24 = $3;
   $gep25 = (($gep_int24) + 8)|0;
   $16 = $gep25;
   $17 = HEAP32[$16>>2]|0;
   $18 = $15;
   $19 = $17;
   $20 = (($18) - ($19))|0;
   $21 = $20 >> 2;
   $22 = ($21>>>0)>($13>>>0);
   
   do {
    if ($22) {
     $gep_int26 = $17;
     $gep_array = $13<<2;
     $gep27 = (($gep_int26) + ($gep_array))|0;
     $23 = $gep27;
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0);
     
     if ($25) {
      break;
     }
     $30 = $24;
     $31 = $__digits;
     $32 = HEAP8[$__digits]|0;
     $33 = $32 & 1;
     $34 = ($33<<24>>24)==(0);
     
     if ($34) {
      $37 = $32&255;
      $38 = $37 >>> 1;
      
      $39 = $38;
     } else {
      $gep_int28 = $__digits;
      $gep29 = (($gep_int28) + 4)|0;
      $35 = $gep29;
      $36 = HEAP32[$35>>2]|0;
      
      $39 = $36;
     }
     
     $40 = ($39|0)==(0);
     
     if ($40) {
      $54 = 0;
     } else {
      
      if ($34) {
       $gep_int32 = $__digits;
       $gep33 = (($gep_int32) + 4)|0;
       $43 = $gep33;
       
       $44 = $43;
      } else {
       $gep_int30 = $__digits;
       $gep31 = (($gep_int30) + 8)|0;
       $41 = $gep31;
       $42 = HEAP32[$41>>2]|0;
       
       $44 = $42;
      }
      
      $45 = HEAP32[$44>>2]|0;
      $46 = $24;
      $47 = HEAP32[$24>>2]|0;
      $gep_int34 = $47;
      $gep35 = (($gep_int34) + 44)|0;
      $48 = $gep35;
      $49 = HEAP32[$48>>2]|0;
      __THREW__ = 0;
      $50 = invoke_iii($49|0,$30|0,45)|0;
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      
      if ($52) {
       break L3;
      }
      $53 = ($45|0)==($50|0);
      
      $54 = $53;
     }
     
     HEAP32[$__pat>>2] = 0;
     $this2$i$i$i = $__grp;
     ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
     $this2$i$i$i5 = $__sym;
     ;HEAP32[$this2$i$i$i5+0>>2]=0|0;HEAP32[$this2$i$i$i5+4>>2]=0|0;HEAP32[$this2$i$i$i5+8>>2]=0|0;
     $this2$i$i$i6 = $__sn;
     ;HEAP32[$this2$i$i$i6+0>>2]=0|0;HEAP32[$this2$i$i$i6+4>>2]=0|0;HEAP32[$this2$i$i$i6+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(4,$__intl|0,$54|0,$__loc|0,$tmpcast|0,$__dp|0,$__ts|0,$__grp|0,$__sym|0,$__sn|0,$__fd|0);
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     
     L20: do {
      if ($56) {
       $expanded12 = 69;
       $125 = ___cxa_find_matching_catch(-1,-1)|0;
       $126 = tempRet0;
       
       $$0 = $125;$$01 = $126;
      } else {
       $57 = $__mbuf;
       
       $gep_int36 = $__mbuf;
       $58 = $gep_int36;
       $59 = HEAP8[$__digits]|0;
       $60 = $59 & 1;
       $61 = ($60<<24>>24)==(0);
       
       if ($61) {
        $64 = $59&255;
        $65 = $64 >>> 1;
        
        $66 = $65;
       } else {
        $gep_int37 = $__digits;
        $gep38 = (($gep_int37) + 4)|0;
        $62 = $gep38;
        $63 = HEAP32[$62>>2]|0;
        
        $66 = $63;
       }
       
       $67 = HEAP32[$__fd>>2]|0;
       $68 = ($66|0)>($67|0);
       
       if ($68) {
        
        if ($61) {
         $71 = $59&255;
         $72 = $71 >>> 1;
         
         $73 = $72;
        } else {
         $gep_int39 = $__digits;
         $gep40 = (($gep_int39) + 4)|0;
         $69 = $gep40;
         $70 = HEAP32[$69>>2]|0;
         
         $73 = $70;
        }
        
        $74 = (($73) - ($67))|0;
        $75 = $74 << 1;
        $76 = HEAP8[$__sn]|0;
        $77 = $76 & 1;
        $78 = ($77<<24>>24)==(0);
        
        if ($78) {
         $81 = $76&255;
         $82 = $81 >>> 1;
         
         $83 = $82;
        } else {
         $gep_int41 = $__sn;
         $gep42 = (($gep_int41) + 4)|0;
         $79 = $gep42;
         $80 = HEAP32[$79>>2]|0;
         
         $83 = $80;
        }
        
        $84 = HEAP8[$__sym]|0;
        $85 = $84 & 1;
        $86 = ($85<<24>>24)==(0);
        
        if ($86) {
         $89 = $84&255;
         $90 = $89 >>> 1;
         
         $91 = $90;
        } else {
         $gep_int43 = $__sym;
         $gep44 = (($gep_int43) + 4)|0;
         $87 = $gep44;
         $88 = HEAP32[$87>>2]|0;
         
         $91 = $88;
        }
        
        $92 = $75 | 1;
        $93 = (($83) + ($92))|0;
        $94 = (($93) + ($91))|0;
        
        $$pn = $94;
       } else {
        $95 = HEAP8[$__sn]|0;
        $96 = $95 & 1;
        $97 = ($96<<24>>24)==(0);
        
        if ($97) {
         $100 = $95&255;
         $101 = $100 >>> 1;
         
         $102 = $101;
        } else {
         $gep_int45 = $__sn;
         $gep46 = (($gep_int45) + 4)|0;
         $98 = $gep46;
         $99 = HEAP32[$98>>2]|0;
         
         $102 = $99;
        }
        
        $103 = HEAP8[$__sym]|0;
        $104 = $103 & 1;
        $105 = ($104<<24>>24)==(0);
        
        if ($105) {
         $108 = $103&255;
         $109 = $108 >>> 1;
         
         $110 = $109;
        } else {
         $gep_int47 = $__sym;
         $gep48 = (($gep_int47) + 4)|0;
         $106 = $gep48;
         $107 = HEAP32[$106>>2]|0;
         
         $110 = $107;
        }
        
        $111 = (($102) + 2)|0;
        $112 = (($111) + ($110))|0;
        
        $$pn = $112;
       }
       
       $113 = (($$pn) + ($67))|0;
       $114 = ($113>>>0)>(100);
       
       do {
        if ($114) {
         $115 = $113 << 2;
         $116 = _malloc($115)|0;
         $117 = $116;
         $118 = ($116|0)==(0);
         
         if (!($118)) {
          $131 = $59;$132 = $117;$__mb$0 = $117;
          break;
         }
         __THREW__ = 0;
         invoke_v(13);
         $119 = __THREW__; __THREW__ = 0;
         $120 = $119&1;
         
         if ($120) {
          $expanded10 = 69;
          $121 = ___cxa_find_matching_catch(-1,-1)|0;
          $122 = tempRet0;
          
          $$0 = $121;$$01 = $122;
          break L20;
         } else {
          $$pre = HEAP8[$__digits]|0;
          
          $131 = $$pre;$132 = 0;$__mb$0 = 0;
          break;
         }
        } else {
         $131 = $59;$132 = 0;$__mb$0 = $58;
        }
       } while(0);
       
       
       
       $gep_int49 = $__iob;
       $gep50 = (($gep_int49) + 4)|0;
       $133 = $gep50;
       $134 = HEAP32[$133>>2]|0;
       $135 = $131 & 1;
       $136 = ($135<<24>>24)==(0);
       
       if ($136) {
        $gep_int55 = $__digits;
        $gep56 = (($gep_int55) + 4)|0;
        $141 = $gep56;
        $142 = $131&255;
        $143 = $142 >>> 1;
        
        $144 = $141;$145 = $143;
       } else {
        $gep_int51 = $__digits;
        $gep52 = (($gep_int51) + 8)|0;
        $137 = $gep52;
        $138 = HEAP32[$137>>2]|0;
        $gep_int53 = $__digits;
        $gep54 = (($gep_int53) + 4)|0;
        $139 = $gep54;
        $140 = HEAP32[$139>>2]|0;
        
        $144 = $138;$145 = $140;
       }
       
       
       $gep_int57 = $144;
       $gep_array58 = $145<<2;
       $gep59 = (($gep_int57) + ($gep_array58))|0;
       $146 = $gep59;
       $147 = HEAP32[$__dp>>2]|0;
       $148 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(2,$__mb$0|0,$__mi|0,$__me|0,$134|0,$144|0,$146|0,$30|0,$54|0,$tmpcast|0,$147|0,$148|0,$__grp|0,$__sym|0,$__sn|0,$67|0);
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       
       do {
        if (!($150)) {
         $gep_int60 = $__s;
         $151 = $gep_int60;
         $152 = HEAP32[$151>>2]|0;
         $gep_int61 = $1;
         $153 = $gep_int61;
         HEAP32[$153>>2] = $152;
         $154 = HEAP32[$__mi>>2]|0;
         $155 = HEAP32[$__me>>2]|0;
         __THREW__ = 0;
         $156 = $$byval_copy;
         
         $157 = $$byval_copy;
         $158 = $1;
         ;HEAP32[$157+0>>2]=HEAP32[$158+0>>2]|0;
         invoke_viiiiiii(47,$agg$result|0,$$byval_copy|0,$__mb$0|0,$154|0,$155|0,$__iob|0,$__fl|0);
         $159 = $$byval_copy;
         
         $160 = __THREW__; __THREW__ = 0;
         $161 = $160&1;
         
         if ($161) {
          break;
         }
         $162 = ($132|0)==(0);
         
         if ($162) {
          
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
          $164 = HEAP32[$2>>2]|0;
          $gep_int62 = $164;
          $165 = $gep_int62;
          u$88 = __ZNSt3__114__shared_count16__release_sharedEv($165)|0;
          STACKTOP = sp;return;
         }
         $163 = $132;
         _free($163);
         
         
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $164 = HEAP32[$2>>2]|0;
         $gep_int62 = $164;
         $165 = $gep_int62;
         u$88 = __ZNSt3__114__shared_count16__release_sharedEv($165)|0;
         STACKTOP = sp;return;
        }
       } while(0);
       $expanded13 = 69;
       $127 = ___cxa_find_matching_catch(-1,-1)|0;
       $128 = tempRet0;
       $129 = ($132|0)==(0);
       
       if ($129) {
        $$0 = $127;$$01 = $128;
        break;
       }
       $130 = $132;
       _free($130);
       
       $$0 = $127;$$01 = $128;
      }
     } while(0);
     
     
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     
     $$1 = $$0;$$12 = $$01;
     
     
     $166 = HEAP32[$2>>2]|0;
     $gep_int63 = $166;
     $167 = $gep_int63;
     u$94 = __ZNSt3__114__shared_count16__release_sharedEv($167)|0;
     ___resumeException($$1|0);
     // unreachable
    }
   } while(0);
   $26 = ___cxa_allocate_exception(4)|0;
   $27 = $26;
   __ZNSt8bad_castC2Ev($27);
   __THREW__ = 0;
   $expanded8 = 16440;
   $expanded9 = 119;
   invoke_viii(5,$26|0,$expanded8|0,$expanded9|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   
   if ($29) {
    break;
   }
   // unreachable
  }
 } while(0);
 $expanded11 = 69;
 $123 = ___cxa_find_matching_catch(-1,-1)|0;
 $124 = tempRet0;
 
 $$1 = $123;$$12 = $124;
 
 
 $166 = HEAP32[$2>>2]|0;
 $gep_int63 = $166;
 $167 = $gep_int63;
 u$94 = __ZNSt3__114__shared_count16__release_sharedEv($167)|0;
 ___resumeException($$1|0);
 // unreachable
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,u$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 u$0 = u$0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, $not$ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = $__nm;
 $2 = HEAP8[$__nm]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 
 if ($4) {
  $7 = $__nm;
  $gep_int1 = $__nm;
  $gep2 = (($gep_int1) + 1)|0;
  $8 = $gep2;
  
  $9 = $8;
 } else {
  $gep_int = $__nm;
  $gep = (($gep_int) + 8)|0;
  $5 = $gep;
  $6 = HEAP32[$5>>2]|0;
  
  $9 = $6;
 }
 
 $10 = _catopen($9|0,1)|0;
 $11 = $10;
 $expanded = -1;
 $not$ = ($10|0)!=($expanded|0);
 $12 = $not$&1;
 $$ = $11 >>> $12;
 STACKTOP = sp;return $$|0;
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__ndflt = 0, $expanded = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0;
 var $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp = 0, $phitmp17 = 0, $this2$i$i$i = 0, $this2$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__ndflt = sp;
 $this2$i$i$i = $__ndflt;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 $1 = $__dflt;
 $2 = HEAP8[$__dflt]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 
 if ($4) {
  $9 = $__dflt;
  $gep_int12 = $__dflt;
  $gep13 = (($gep_int12) + 1)|0;
  $10 = $gep13;
  $11 = $__dflt;
  $gep_int14 = $__dflt;
  $gep15 = (($gep_int14) + 1)|0;
  $12 = $gep15;
  $13 = $2&255;
  $14 = $13 >>> 1;
  
  $15 = $12;$16 = $10;$17 = $14;
 } else {
  $gep_int = $__dflt;
  $gep = (($gep_int) + 8)|0;
  $5 = $gep;
  $6 = HEAP32[$5>>2]|0;
  $gep_int10 = $__dflt;
  $gep11 = (($gep_int10) + 4)|0;
  $7 = $gep11;
  $8 = HEAP32[$7>>2]|0;
  
  $15 = $6;$16 = $6;$17 = $8;
 }
 
 
 
 $gep_int16 = $15;
 $gep17 = (($gep_int16) + ($17))|0;
 $18 = $gep17;
 $19 = ($16>>>0)<($18>>>0);
 
 do {
  if ($19) {
   $$01$i7 = $16;
   while(1) {
    
    $24 = HEAP8[$$01$i7]|0;
    __THREW__ = 0;
    invoke_vii(61,$__ndflt|0,$24|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    
    if ($26) {
     label = 12;
     break;
    }
    $gep_int18 = $$01$i7;
    $gep19 = (($gep_int18) + 1)|0;
    $27 = $gep19;
    $28 = ($27>>>0)<($18>>>0);
    
    if ($28) {
     $$01$i7 = $27;
    } else {
     break;
    }
   }
   if ((label|0) == 12) {
    $expanded7 = 69;
    $43 = ___cxa_find_matching_catch(-1,-1)|0;
    $44 = tempRet0;
    
    $lpad$phi$index = $43;$lpad$phi$index2 = $44;
    break;
   }
   $$pre = HEAP8[$__ndflt]|0;
   $phitmp = $$pre & 1;
   $phitmp17 = ($phitmp<<24>>24)==(0);
   $29 = ($__c|0)==(-1);
   $30 = $__c << 1;
   $31 = $30;
   $expanded6 = -1;
   $32 = $29 ? $expanded6 : $31;
   
   if ($phitmp17) {
    $35 = $32;
    label = 10;
    break;
   }
   $gep_int20 = $__ndflt;
   $gep21 = (($gep_int20) + 8)|0;
   $33 = $gep21;
   $34 = HEAP32[$33>>2]|0;
   
   $38 = $32;$39 = $34;
   label = 11;
  } else {
   $20 = ($__c|0)==(-1);
   $21 = $__c << 1;
   $22 = $21;
   $expanded = -1;
   $23 = $20 ? $expanded : $22;
   
   $35 = $23;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  
  $36 = $__ndflt;
  $gep_int22 = $__ndflt;
  $gep23 = (($gep_int22) + 1)|0;
  $37 = $gep23;
  
  $38 = $35;$39 = $37;
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   
   
   __THREW__ = 0;
   $40 = invoke_iiiii(19,$38|0,$__set|0,$__msgid|0,$39|0)|0;
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   
   if ($42) {
    $expanded8 = 69;
    $45 = ___cxa_find_matching_catch(-1,-1)|0;
    $46 = tempRet0;
    
    $lpad$phi$index = $45;$lpad$phi$index2 = $46;
    break;
   }
   $this2$i$i$i4 = $agg$result;
   ;HEAP32[$this2$i$i$i4+0>>2]=0|0;HEAP32[$this2$i$i$i4+4>>2]=0|0;HEAP32[$this2$i$i$i4+8>>2]=0|0;
   $47 = _strlen($40|0)|0;
   $gep_int24 = $40;
   $gep25 = (($gep_int24) + ($47))|0;
   $48 = $gep25;
   $49 = ($47|0)>(0);
   
   if ($49) {
    $$01$i = $40;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   while(1) {
    
    $50 = HEAP8[$$01$i]|0;
    __THREW__ = 0;
    invoke_vii(61,$agg$result|0,$50|0);
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    
    if ($52) {
     break;
    }
    $gep_int26 = $$01$i;
    $gep27 = (($gep_int26) + 1)|0;
    $53 = $gep27;
    $54 = ($53>>>0)<($48>>>0);
    
    if ($54) {
     $$01$i = $53;
    } else {
     label = 19;
     break;
    }
   }
   if ((label|0) == 19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $expanded9 = 69;
   $55 = ___cxa_find_matching_catch(-1,-1)|0;
   $56 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   
   $$01 = $55;$$02 = $56;
   
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$01|0);
   // unreachable
  }
 } while(0);
 
 
 
 $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $expanded = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($__c|0)==(-1);
 $2 = $__c << 1;
 $3 = $2;
 $expanded = -1;
 $4 = $1 ? $expanded : $3;
 u$0 = _catclose($4|0)|0;
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,u$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 u$0 = u$0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, $not$ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = $__nm;
 $2 = HEAP8[$__nm]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 
 if ($4) {
  $7 = $__nm;
  $gep_int1 = $__nm;
  $gep2 = (($gep_int1) + 1)|0;
  $8 = $gep2;
  
  $9 = $8;
 } else {
  $gep_int = $__nm;
  $gep = (($gep_int) + 8)|0;
  $5 = $gep;
  $6 = HEAP32[$5>>2]|0;
  
  $9 = $6;
 }
 
 $10 = _catopen($9|0,1)|0;
 $11 = $10;
 $expanded = -1;
 $not$ = ($10|0)!=($expanded|0);
 $12 = $not$&1;
 $$ = $11 >>> $12;
 STACKTOP = sp;return $$|0;
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$04$i = 0, $$04$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre44 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0, $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0;
 var $__ndflt = 0, $__nn$i = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0, $expanded = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0;
 var $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $gep = 0, $gep38 = 0, $gep40 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep59 = 0, $gep62 = 0, $gep64 = 0;
 var $gep67 = 0, $gep70 = 0, $gep72 = 0, $gep76 = 0, $gep78 = 0, $gep80 = 0, $gep82 = 0, $gep85 = 0, $gep_array = 0, $gep_int = 0, $gep_int36 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int50 = 0, $gep_int51 = 0;
 var $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int58 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int74 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int84 = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0;
 var $lpad$phi38$index = 0, $lpad$phi38$index3 = 0, $or$cond2$i = 0, $or$cond2$i17 = 0, $this2$i$i$i = 0, $this2$i$i$i8 = 0, $tmpcast$i = 0, $tmpcast$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__mb$i11 = sp;
 $__buf$i13 = sp + 8|0;
 $__bn$i14 = sp + 40|0;
 $__wn$i = sp + 48|0;
 $__mb$i = sp + 56|0;
 $__buf$i = sp + 64|0;
 $__bn$i = sp + 192|0;
 $__nn$i = sp + 200|0;
 $__ndflt = sp + 208|0;
 $1 = sp + 224|0;
 $2 = sp + 232|0;
 $this2$i$i$i = $__ndflt;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 $gep_int = $1;
 $gep = (($gep_int) + 4)|0;
 $3 = $gep;
 HEAP32[$3>>2] = 0;
 $gep_int36 = $1;
 $4 = $gep_int36;
 $expanded16 = 10128;
 $gep_int37 = 10128;
 $gep38 = (($gep_int37) + 8)|0;
 $expanded15 = $gep38;
 $expanded = $expanded15;
 HEAP32[$4>>2] = $expanded;
 $5 = $__dflt;
 $6 = HEAP8[$__dflt]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 
 if ($8) {
  $gep_int43 = $__dflt;
  $gep44 = (($gep_int43) + 4)|0;
  $13 = $gep44;
  $gep_int45 = $__dflt;
  $gep46 = (($gep_int45) + 4)|0;
  $14 = $gep46;
  $15 = $6&255;
  $16 = $15 >>> 1;
  
  $17 = $14;$18 = $13;$19 = $16;
 } else {
  $gep_int39 = $__dflt;
  $gep40 = (($gep_int39) + 8)|0;
  $9 = $gep40;
  $10 = HEAP32[$9>>2]|0;
  $gep_int41 = $__dflt;
  $gep42 = (($gep_int41) + 4)|0;
  $11 = $gep42;
  $12 = HEAP32[$11>>2]|0;
  
  $17 = $10;$18 = $10;$19 = $12;
 }
 
 
 
 $gep_int47 = $17;
 $gep_array = $19<<2;
 $gep48 = (($gep_int47) + ($gep_array))|0;
 $20 = $gep48;
 $21 = $__mb$i11;
 
 $gep_int49 = $__buf$i13;
 $22 = $gep_int49;
 
 $23 = $__bn$i14;
 
 $24 = $__wn$i;
 
 $tmpcast$i12 = $__mb$i11;
 $25 = $__mb$i11;
 $26 = $25;
 HEAP32[$26>>2] = 0;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = ($18>>>0)<($20>>>0);
 
 L5: do {
  if ($29) {
   $gep_int50 = $1;
   $30 = $gep_int50;
   $31 = $1;
   $gep_int51 = $__buf$i13;
   $gep52 = (($gep_int51) + 32)|0;
   $32 = $gep52;
   $expanded19 = 10128;
   $gep_int53 = 10128;
   $gep54 = (($gep_int53) + 8)|0;
   $expanded18 = $gep54;
   $expanded17 = $expanded18;
   
   $$04$i16 = $18;$33 = $expanded17;
   L7: while(1) {
    
    
    HEAP32[$__wn$i>>2] = $$04$i16;
    $gep_int55 = $33;
    $gep56 = (($gep_int55) + 12)|0;
    $34 = $gep56;
    $35 = HEAP32[$34>>2]|0;
    __THREW__ = 0;
    $36 = invoke_iiiiiiiii($35|0,$30|0,$tmpcast$i12|0,$$04$i16|0,$20|0,$__wn$i|0,$22|0,$32|0,$__bn$i14|0)|0;
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    
    if ($38) {
     label = 22;
     break;
    }
    $39 = ($36|0)==(2);
    $40 = HEAP32[$__wn$i>>2]|0;
    $41 = ($40|0)==($$04$i16|0);
    $or$cond2$i17 = $39 | $41;
    
    if ($or$cond2$i17) {
     label = 9;
     break;
    }
    $42 = HEAP32[$__bn$i14>>2]|0;
    $43 = ($22>>>0)<($42>>>0);
    
    if ($43) {
     $__p$03$i20 = $22;
     while(1) {
      
      $46 = HEAP8[$__p$03$i20]|0;
      __THREW__ = 0;
      invoke_vii(61,$__ndflt|0,$46|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      
      if ($48) {
       label = 21;
       break L7;
      }
      $gep_int58 = $__p$03$i20;
      $gep59 = (($gep_int58) + 1)|0;
      $49 = $gep59;
      $50 = HEAP32[$__bn$i14>>2]|0;
      $51 = ($49>>>0)<($50>>>0);
      
      if ($51) {
       $__p$03$i20 = $49;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     
     $52 = $$pre$i21;
    } else {
     $52 = $40;
    }
    
    $53 = ($52>>>0)<($20>>>0);
    
    if (!($53)) {
     break L5;
    }
    $$pre = HEAP32[$1>>2]|0;
    
    $$04$i16 = $52;$33 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     $gep_int57 = 9360;
     $expanded20 = $gep_int57;
     invoke_vi(175,$expanded20|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     
     if ($45) {
      $expanded25 = 69;
      $75 = ___cxa_find_matching_catch(-1,-1)|0;
      $76 = tempRet0;
      
      $lpad$phi38$index = $75;$lpad$phi38$index3 = $76;
      break;
     } else {
      // unreachable
     }
    }
    else if ((label|0) == 21) {
     $expanded23 = 69;
     $71 = ___cxa_find_matching_catch(-1,-1)|0;
     $72 = tempRet0;
     
     $lpad$phi38$index = $71;$lpad$phi38$index3 = $72;
    }
    else if ((label|0) == 22) {
     $expanded24 = 69;
     $73 = ___cxa_find_matching_catch(-1,-1)|0;
     $74 = tempRet0;
     
     $lpad$phi38$index = $73;$lpad$phi38$index3 = $74;
    }
   } while(0);
   
   
   
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index3;
   
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$1|0);
   // unreachable
  }
 } while(0);
 
 
 
 
 $54 = ($__c|0)==(-1);
 $55 = $__c << 1;
 $56 = $55;
 $expanded21 = -1;
 $57 = $54 ? $expanded21 : $56;
 $58 = HEAP8[$__ndflt]|0;
 $59 = $58 & 1;
 $60 = ($59<<24>>24)==(0);
 
 if ($60) {
  $63 = $__ndflt;
  $gep_int63 = $__ndflt;
  $gep64 = (($gep_int63) + 1)|0;
  $64 = $gep64;
  
  $65 = $64;
 } else {
  $gep_int61 = $__ndflt;
  $gep62 = (($gep_int61) + 8)|0;
  $61 = $gep62;
  $62 = HEAP32[$61>>2]|0;
  
  $65 = $62;
 }
 
 __THREW__ = 0;
 $66 = invoke_iiiii(19,$57|0,$__set|0,$__msgid|0,$65|0)|0;
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 
 if ($68) {
  $expanded22 = 69;
  $69 = ___cxa_find_matching_catch(-1,-1)|0;
  $70 = tempRet0;
  
  $$1 = $69;$$13 = $70;
  
  
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  ___resumeException($$1|0);
  // unreachable
 }
 $this2$i$i$i8 = $agg$result;
 ;HEAP32[$this2$i$i$i8+0>>2]=0|0;HEAP32[$this2$i$i$i8+4>>2]=0|0;HEAP32[$this2$i$i$i8+8>>2]=0|0;
 $gep_int66 = $2;
 $gep67 = (($gep_int66) + 4)|0;
 $77 = $gep67;
 HEAP32[$77>>2] = 0;
 $gep_int68 = $2;
 $78 = $gep_int68;
 $expanded28 = 10232;
 $gep_int69 = 10232;
 $gep70 = (($gep_int69) + 8)|0;
 $expanded27 = $gep70;
 $expanded26 = $expanded27;
 HEAP32[$78>>2] = $expanded26;
 $79 = _strlen($66|0)|0;
 $gep_int71 = $66;
 $gep72 = (($gep_int71) + ($79))|0;
 $80 = $gep72;
 $81 = $__mb$i;
 
 $82 = $__bn$i;
 
 $83 = $__nn$i;
 
 $tmpcast$i = $__mb$i;
 $84 = $__mb$i;
 $85 = $84;
 HEAP32[$85>>2] = 0;
 $86 = (($84) + 4)|0;
 $87 = $86;
 HEAP32[$87>>2] = 0;
 $88 = ($79|0)>(0);
 
 if (!($88)) {
  
  
  
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $89 = $__buf$i;
 $gep_int73 = $2;
 $90 = $gep_int73;
 $91 = $2;
 $92 = $80;
 $gep_int74 = $__buf$i;
 $93 = $gep_int74;
 $gep_int75 = $__buf$i;
 $gep76 = (($gep_int75) + 128)|0;
 $94 = $gep76;
 $expanded31 = 10232;
 $gep_int77 = 10232;
 $gep78 = (($gep_int77) + 8)|0;
 $expanded30 = $gep78;
 $expanded29 = $expanded30;
 
 $$04$i = $66;$95 = $expanded29;
 L39: while(1) {
  
  
  
  HEAP32[$__nn$i>>2] = $$04$i;
  $gep_int79 = $95;
  $gep80 = (($gep_int79) + 16)|0;
  $96 = $gep80;
  $97 = HEAP32[$96>>2]|0;
  $98 = $$04$i;
  $99 = (($92) - ($98))|0;
  $100 = ($99|0)>(32);
  $gep_int81 = $$04$i;
  $gep82 = (($gep_int81) + 32)|0;
  $101 = $gep82;
  $102 = $100 ? $101 : $80;
  __THREW__ = 0;
  $103 = invoke_iiiiiiiii($97|0,$90|0,$tmpcast$i|0,$$04$i|0,$102|0,$__nn$i|0,$93|0,$94|0,$__bn$i|0)|0;
  $104 = __THREW__; __THREW__ = 0;
  $105 = $104&1;
  
  if ($105) {
   label = 39;
   break;
  }
  $106 = ($103|0)==(2);
  $107 = HEAP32[$__nn$i>>2]|0;
  $108 = ($107|0)==($$04$i|0);
  $or$cond2$i = $106 | $108;
  
  if ($or$cond2$i) {
   label = 30;
   break;
  }
  $109 = HEAP32[$__bn$i>>2]|0;
  $110 = ($93>>>0)<($109>>>0);
  
  if ($110) {
   $__p$03$i = $93;
   while(1) {
    
    $113 = HEAP32[$__p$03$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(66,$agg$result|0,$113|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    
    if ($115) {
     label = 38;
     break L39;
    }
    $gep_int84 = $__p$03$i;
    $gep85 = (($gep_int84) + 4)|0;
    $116 = $gep85;
    $117 = HEAP32[$__bn$i>>2]|0;
    $118 = ($116>>>0)<($117>>>0);
    
    if ($118) {
     $__p$03$i = $116;
    } else {
     break;
    }
   }
   $$pre$i = HEAP32[$__nn$i>>2]|0;
   
   $119 = $$pre$i;
  } else {
   $119 = $107;
  }
  
  
  $120 = ($119>>>0)<($80>>>0);
  
  if (!($120)) {
   label = 37;
   break;
  }
  $$pre44 = HEAP32[$2>>2]|0;
  
  $$04$i = $119;$95 = $$pre44;
 }
 do {
  if ((label|0) == 30) {
   __THREW__ = 0;
   $gep_int83 = 9360;
   $expanded32 = $gep_int83;
   invoke_vi(175,$expanded32|0);
   $111 = __THREW__; __THREW__ = 0;
   $112 = $111&1;
   
   if ($112) {
    $expanded35 = 69;
    $125 = ___cxa_find_matching_catch(-1,-1)|0;
    $126 = tempRet0;
    
    $lpad$phi$index = $125;$lpad$phi$index10 = $126;
    break;
   } else {
    // unreachable
   }
  }
  else if ((label|0) == 37) {
   
   
   
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 38) {
   $expanded33 = 69;
   $121 = ___cxa_find_matching_catch(-1,-1)|0;
   $122 = tempRet0;
   
   $lpad$phi$index = $121;$lpad$phi$index10 = $122;
  }
  else if ((label|0) == 39) {
   $expanded34 = 69;
   $123 = ___cxa_find_matching_catch(-1,-1)|0;
   $124 = tempRet0;
   
   $lpad$phi$index = $123;$lpad$phi$index10 = $124;
  }
 } while(0);
 
 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
 
 $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
 
 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $expanded = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($__c|0)==(-1);
 $2 = $__c << 1;
 $3 = $2;
 $expanded = -1;
 $4 = $1 ? $expanded : $3;
 u$0 = _catclose($4|0)|0;
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded2 = 0;
 var $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep14 = 0, $gep_int = 0, $gep_int12 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int16 = 0, label = 0, sp = 0, u$16 = 0, u$17 = 0, u$8 = 0, u$9 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 8560;
 $gep_int12 = 8560;
 $gep = (($gep_int12) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int13 = $this;
 $gep14 = (($gep_int13) + 8)|0;
 $2 = $gep14;
 $3 = HEAP32[$2>>2]|0;
 $gep_int15 = 8376;
 $expanded3 = $gep_int15;
 $4 = HEAP8[$expanded3]|0;
 $5 = ($4<<24>>24)==(0);
 
 do {
  if ($5) {
   $expanded4 = 8376;
   $6 = ___cxa_guard_acquire($expanded4|0)|0;
   $7 = ($6|0)==(0);
   
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $gep_int16 = 8384;
   $expanded5 = $gep_int16;
   $8 = invoke_iiii(30,2147483647,$expanded5|0,0)|0;
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if (!($10)) {
    $expanded6 = 8368;
    HEAP32[8368>>2] = $8;
    $expanded7 = 8376;
    ___cxa_guard_release($expanded7|0);
    
    break;
   }
   $expanded8 = 69;
   u$8 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$9 = tempRet0;
   $expanded9 = 8376;
   ___cxa_guard_abort($expanded9|0);
   
   __ZSt9terminatev();
   // unreachable
  }
 } while(0);
 $expanded10 = 8368;
 $11 = HEAP32[8368>>2]|0;
 $12 = ($3|0)==($11|0);
 
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi(180,$13|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $expanded11 = 69;
 u$16 = ___cxa_find_matching_catch(-1,-1,0)|0;
 u$17 = tempRet0;
 
 __ZSt9terminatev();
 // unreachable
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $gep = 0, $gep_int = 0, $gep_int7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___cxa_allocate_exception(8)|0;
 $2 = $1;
 __THREW__ = 0;
 $gep_int = 8360;
 $expanded = $gep_int;
 invoke_vii(64,$2|0,$expanded|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 
 if ($4) {
  $expanded6 = 69;
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_free_exception($1|0);
  ___resumeException($6|0);
  // unreachable
 } else {
  $5 = $1;
  $expanded3 = 5304;
  $gep_int7 = 5304;
  $gep = (($gep_int7) + 8)|0;
  $expanded2 = $gep;
  $expanded1 = $expanded2;
  HEAP32[$1>>2] = $expanded1;
  $expanded4 = 5352;
  $expanded5 = 33;
  ___cxa_throw($1|0,$expanded4|0,$expanded5|0);
  // unreachable
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre1$i$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i$i$i = 0, $__p$i$i$i = 0, $__p$i$i$i102 = 0, $__p$i$i$i109 = 0, $__p$i$i$i113 = 0, $__p$i$i$i12 = 0;
 var $__p$i$i$i16 = 0, $__p$i$i$i20 = 0, $__p$i$i$i24 = 0, $__p$i$i$i28 = 0, $__p$i$i$i32 = 0, $__p$i$i$i36 = 0, $__p$i$i$i4 = 0, $__p$i$i$i40 = 0, $__p$i$i$i44 = 0, $__p$i$i$i48 = 0, $__p$i$i$i52 = 0, $__p$i$i$i56 = 0, $__p$i$i$i60 = 0, $__p$i$i$i64 = 0, $__p$i$i$i68 = 0, $__p$i$i$i72 = 0, $__p$i$i$i76 = 0, $__p$i$i$i8 = 0, $__p$i$i$i80 = 0, $__p$i$i$i84 = 0;
 var $__p$i$i$i88 = 0, $__p$i$i$i92 = 0, $__p$i$i$i96 = 0, $eh$lpad$body$index4Z2D = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded100 = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded104 = 0, $expanded105 = 0, $expanded106 = 0, $expanded107 = 0, $expanded108 = 0, $expanded109 = 0, $expanded11 = 0, $expanded110 = 0, $expanded111 = 0;
 var $expanded112 = 0, $expanded113 = 0, $expanded114 = 0, $expanded115 = 0, $expanded117 = 0, $expanded118 = 0, $expanded119 = 0, $expanded12 = 0, $expanded120 = 0, $expanded121 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded125 = 0, $expanded126 = 0, $expanded127 = 0, $expanded128 = 0, $expanded129 = 0, $expanded13 = 0, $expanded130 = 0;
 var $expanded131 = 0, $expanded132 = 0, $expanded133 = 0, $expanded134 = 0, $expanded135 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded139 = 0, $expanded14 = 0, $expanded140 = 0, $expanded141 = 0, $expanded142 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded146 = 0, $expanded147 = 0, $expanded148 = 0, $expanded149 = 0;
 var $expanded15 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded153 = 0, $expanded154 = 0, $expanded155 = 0, $expanded156 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded16 = 0, $expanded160 = 0, $expanded161 = 0, $expanded162 = 0, $expanded163 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded167 = 0;
 var $expanded168 = 0, $expanded169 = 0, $expanded17 = 0, $expanded170 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded174 = 0, $expanded175 = 0, $expanded176 = 0, $expanded177 = 0, $expanded178 = 0, $expanded179 = 0, $expanded18 = 0, $expanded180 = 0, $expanded181 = 0, $expanded182 = 0, $expanded183 = 0, $expanded184 = 0, $expanded185 = 0;
 var $expanded186 = 0, $expanded187 = 0, $expanded188 = 0, $expanded189 = 0, $expanded19 = 0, $expanded190 = 0, $expanded191 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded195 = 0, $expanded196 = 0, $expanded197 = 0, $expanded198 = 0, $expanded199 = 0, $expanded20 = 0, $expanded200 = 0, $expanded201 = 0, $expanded202 = 0, $expanded203 = 0;
 var $expanded204 = 0, $expanded205 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded209 = 0, $expanded21 = 0, $expanded210 = 0, $expanded211 = 0, $expanded212 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded216 = 0, $expanded217 = 0, $expanded218 = 0, $expanded219 = 0, $expanded22 = 0, $expanded220 = 0, $expanded221 = 0;
 var $expanded222 = 0, $expanded223 = 0, $expanded224 = 0, $expanded225 = 0, $expanded226 = 0, $expanded227 = 0, $expanded228 = 0, $expanded229 = 0, $expanded23 = 0, $expanded230 = 0, $expanded231 = 0, $expanded232 = 0, $expanded233 = 0, $expanded234 = 0, $expanded235 = 0, $expanded236 = 0, $expanded237 = 0, $expanded238 = 0, $expanded239 = 0, $expanded24 = 0;
 var $expanded240 = 0, $expanded241 = 0, $expanded242 = 0, $expanded243 = 0, $expanded244 = 0, $expanded245 = 0, $expanded246 = 0, $expanded247 = 0, $expanded248 = 0, $expanded249 = 0, $expanded25 = 0, $expanded250 = 0, $expanded251 = 0, $expanded252 = 0, $expanded253 = 0, $expanded254 = 0, $expanded255 = 0, $expanded256 = 0, $expanded257 = 0, $expanded258 = 0;
 var $expanded259 = 0, $expanded26 = 0, $expanded260 = 0, $expanded261 = 0, $expanded262 = 0, $expanded263 = 0, $expanded264 = 0, $expanded265 = 0, $expanded266 = 0, $expanded267 = 0, $expanded268 = 0, $expanded269 = 0, $expanded27 = 0, $expanded270 = 0, $expanded271 = 0, $expanded272 = 0, $expanded273 = 0, $expanded274 = 0, $expanded275 = 0, $expanded276 = 0;
 var $expanded277 = 0, $expanded278 = 0, $expanded279 = 0, $expanded28 = 0, $expanded280 = 0, $expanded281 = 0, $expanded282 = 0, $expanded283 = 0, $expanded284 = 0, $expanded285 = 0, $expanded286 = 0, $expanded287 = 0, $expanded288 = 0, $expanded289 = 0, $expanded29 = 0, $expanded290 = 0, $expanded291 = 0, $expanded292 = 0, $expanded293 = 0, $expanded294 = 0;
 var $expanded295 = 0, $expanded296 = 0, $expanded297 = 0, $expanded298 = 0, $expanded299 = 0, $expanded30 = 0, $expanded300 = 0, $expanded301 = 0, $expanded302 = 0, $expanded303 = 0, $expanded304 = 0, $expanded305 = 0, $expanded306 = 0, $expanded307 = 0, $expanded308 = 0, $expanded309 = 0, $expanded31 = 0, $expanded310 = 0, $expanded311 = 0, $expanded312 = 0;
 var $expanded313 = 0, $expanded314 = 0, $expanded315 = 0, $expanded316 = 0, $expanded317 = 0, $expanded318 = 0, $expanded319 = 0, $expanded32 = 0, $expanded320 = 0, $expanded321 = 0, $expanded322 = 0, $expanded323 = 0, $expanded324 = 0, $expanded325 = 0, $expanded326 = 0, $expanded327 = 0, $expanded328 = 0, $expanded329 = 0, $expanded33 = 0, $expanded330 = 0;
 var $expanded331 = 0, $expanded332 = 0, $expanded333 = 0, $expanded334 = 0, $expanded335 = 0, $expanded336 = 0, $expanded337 = 0, $expanded338 = 0, $expanded339 = 0, $expanded34 = 0, $expanded340 = 0, $expanded341 = 0, $expanded342 = 0, $expanded343 = 0, $expanded344 = 0, $expanded345 = 0, $expanded346 = 0, $expanded347 = 0, $expanded348 = 0, $expanded349 = 0;
 var $expanded35 = 0, $expanded350 = 0, $expanded351 = 0, $expanded352 = 0, $expanded353 = 0, $expanded354 = 0, $expanded355 = 0, $expanded356 = 0, $expanded357 = 0, $expanded358 = 0, $expanded359 = 0, $expanded36 = 0, $expanded360 = 0, $expanded361 = 0, $expanded362 = 0, $expanded363 = 0, $expanded364 = 0, $expanded365 = 0, $expanded366 = 0, $expanded367 = 0;
 var $expanded368 = 0, $expanded369 = 0, $expanded37 = 0, $expanded370 = 0, $expanded371 = 0, $expanded372 = 0, $expanded373 = 0, $expanded374 = 0, $expanded375 = 0, $expanded376 = 0, $expanded377 = 0, $expanded378 = 0, $expanded379 = 0, $expanded38 = 0, $expanded380 = 0, $expanded381 = 0, $expanded382 = 0, $expanded383 = 0, $expanded384 = 0, $expanded385 = 0;
 var $expanded386 = 0, $expanded387 = 0, $expanded388 = 0, $expanded389 = 0, $expanded39 = 0, $expanded390 = 0, $expanded391 = 0, $expanded392 = 0, $expanded393 = 0, $expanded394 = 0, $expanded395 = 0, $expanded396 = 0, $expanded397 = 0, $expanded398 = 0, $expanded399 = 0, $expanded40 = 0, $expanded400 = 0, $expanded401 = 0, $expanded402 = 0, $expanded403 = 0;
 var $expanded404 = 0, $expanded405 = 0, $expanded406 = 0, $expanded407 = 0, $expanded408 = 0, $expanded409 = 0, $expanded41 = 0, $expanded410 = 0, $expanded411 = 0, $expanded412 = 0, $expanded413 = 0, $expanded414 = 0, $expanded415 = 0, $expanded416 = 0, $expanded417 = 0, $expanded418 = 0, $expanded419 = 0, $expanded42 = 0, $expanded420 = 0, $expanded421 = 0;
 var $expanded422 = 0, $expanded423 = 0, $expanded424 = 0, $expanded425 = 0, $expanded426 = 0, $expanded427 = 0, $expanded428 = 0, $expanded429 = 0, $expanded43 = 0, $expanded430 = 0, $expanded431 = 0, $expanded432 = 0, $expanded433 = 0, $expanded434 = 0, $expanded435 = 0, $expanded436 = 0, $expanded437 = 0, $expanded438 = 0, $expanded439 = 0, $expanded44 = 0;
 var $expanded440 = 0, $expanded441 = 0, $expanded442 = 0, $expanded443 = 0, $expanded444 = 0, $expanded445 = 0, $expanded446 = 0, $expanded447 = 0, $expanded448 = 0, $expanded449 = 0, $expanded45 = 0, $expanded450 = 0, $expanded451 = 0, $expanded452 = 0, $expanded453 = 0, $expanded454 = 0, $expanded455 = 0, $expanded456 = 0, $expanded457 = 0, $expanded459 = 0;
 var $expanded46 = 0, $expanded460 = 0, $expanded461 = 0, $expanded462 = 0, $expanded463 = 0, $expanded464 = 0, $expanded465 = 0, $expanded466 = 0, $expanded467 = 0, $expanded468 = 0, $expanded469 = 0, $expanded47 = 0, $expanded470 = 0, $expanded471 = 0, $expanded472 = 0, $expanded473 = 0, $expanded474 = 0, $expanded475 = 0, $expanded476 = 0, $expanded477 = 0;
 var $expanded478 = 0, $expanded479 = 0, $expanded48 = 0, $expanded480 = 0, $expanded481 = 0, $expanded482 = 0, $expanded483 = 0, $expanded484 = 0, $expanded485 = 0, $expanded486 = 0, $expanded487 = 0, $expanded488 = 0, $expanded489 = 0, $expanded49 = 0, $expanded491 = 0, $expanded492 = 0, $expanded493 = 0, $expanded494 = 0, $expanded495 = 0, $expanded496 = 0;
 var $expanded497 = 0, $expanded498 = 0, $expanded499 = 0, $expanded50 = 0, $expanded500 = 0, $expanded501 = 0, $expanded502 = 0, $expanded503 = 0, $expanded504 = 0, $expanded505 = 0, $expanded506 = 0, $expanded507 = 0, $expanded508 = 0, $expanded509 = 0, $expanded51 = 0, $expanded510 = 0, $expanded511 = 0, $expanded512 = 0, $expanded513 = 0, $expanded514 = 0;
 var $expanded515 = 0, $expanded516 = 0, $expanded517 = 0, $expanded518 = 0, $expanded519 = 0, $expanded52 = 0, $expanded520 = 0, $expanded521 = 0, $expanded522 = 0, $expanded523 = 0, $expanded524 = 0, $expanded525 = 0, $expanded526 = 0, $expanded527 = 0, $expanded528 = 0, $expanded529 = 0, $expanded53 = 0, $expanded530 = 0, $expanded531 = 0, $expanded532 = 0;
 var $expanded533 = 0, $expanded534 = 0, $expanded535 = 0, $expanded536 = 0, $expanded537 = 0, $expanded538 = 0, $expanded539 = 0, $expanded54 = 0, $expanded540 = 0, $expanded541 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded58 = 0, $expanded59 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0;
 var $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded70 = 0, $expanded71 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded84 = 0;
 var $expanded85 = 0, $expanded86 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded90 = 0, $expanded91 = 0, $expanded92 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded98 = 0, $expanded99 = 0, $gep = 0, $gep544 = 0, $gep546 = 0, $gep548 = 0, $gep550 = 0;
 var $gep552 = 0, $gep554 = 0, $gep556 = 0, $gep558 = 0, $gep561 = 0, $gep563 = 0, $gep565 = 0, $gep567 = 0, $gep569 = 0, $gep573 = 0, $gep575 = 0, $gep578 = 0, $gep580 = 0, $gep582 = 0, $gep586 = 0, $gep588 = 0, $gep591 = 0, $gep593 = 0, $gep595 = 0, $gep597 = 0;
 var $gep599 = 0, $gep601 = 0, $gep605 = 0, $gep607 = 0, $gep610 = 0, $gep612 = 0, $gep614 = 0, $gep618 = 0, $gep620 = 0, $gep623 = 0, $gep625 = 0, $gep627 = 0, $gep631 = 0, $gep633 = 0, $gep636 = 0, $gep638 = 0, $gep640 = 0, $gep644 = 0, $gep648 = 0, $gep650 = 0;
 var $gep653 = 0, $gep655 = 0, $gep657 = 0, $gep661 = 0, $gep663 = 0, $gep666 = 0, $gep668 = 0, $gep670 = 0, $gep674 = 0, $gep676 = 0, $gep679 = 0, $gep681 = 0, $gep683 = 0, $gep685 = 0, $gep687 = 0, $gep689 = 0, $gep693 = 0, $gep695 = 0, $gep698 = 0, $gep700 = 0;
 var $gep702 = 0, $gep704 = 0, $gep706 = 0, $gep708 = 0, $gep712 = 0, $gep714 = 0, $gep717 = 0, $gep719 = 0, $gep721 = 0, $gep725 = 0, $gep727 = 0, $gep730 = 0, $gep732 = 0, $gep734 = 0, $gep738 = 0, $gep740 = 0, $gep743 = 0, $gep745 = 0, $gep747 = 0, $gep751 = 0;
 var $gep753 = 0, $gep756 = 0, $gep758 = 0, $gep760 = 0, $gep764 = 0, $gep766 = 0, $gep769 = 0, $gep771 = 0, $gep773 = 0, $gep777 = 0, $gep779 = 0, $gep782 = 0, $gep784 = 0, $gep786 = 0, $gep790 = 0, $gep792 = 0, $gep795 = 0, $gep797 = 0, $gep799 = 0, $gep803 = 0;
 var $gep805 = 0, $gep808 = 0, $gep810 = 0, $gep812 = 0, $gep816 = 0, $gep818 = 0, $gep821 = 0, $gep823 = 0, $gep825 = 0, $gep829 = 0, $gep831 = 0, $gep834 = 0, $gep836 = 0, $gep838 = 0, $gep842 = 0, $gep844 = 0, $gep847 = 0, $gep849 = 0, $gep851 = 0, $gep855 = 0;
 var $gep857 = 0, $gep860 = 0, $gep862 = 0, $gep864 = 0, $gep868 = 0, $gep870 = 0, $gep873 = 0, $gep875 = 0, $gep877 = 0, $gep879 = 0, $gep881 = 0, $gep885 = 0, $gep887 = 0, $gep890 = 0, $gep892 = 0, $gep894 = 0, $gep896 = 0, $gep898 = 0, $gep902 = 0, $gep904 = 0;
 var $gep907 = 0, $gep909 = 0, $gep911 = 0, $gep915 = 0, $gep917 = 0, $gep921 = 0, $gep923 = 0, $gep926 = 0, $gep928 = 0, $gep930 = 0, $gep934 = 0, $gep936 = 0, $gep940 = 0, $gep942 = 0, $gep945 = 0, $gep947 = 0, $gep949 = 0, $gep953 = 0, $gep955 = 0, $gep958 = 0;
 var $gep960 = 0, $gep962 = 0, $gep966 = 0, $gep968 = 0, $gep971 = 0, $gep973 = 0, $gep975 = 0, $gep978 = 0, $gep_array = 0, $gep_array977 = 0, $gep_int = 0, $gep_int542 = 0, $gep_int543 = 0, $gep_int545 = 0, $gep_int547 = 0, $gep_int549 = 0, $gep_int551 = 0, $gep_int553 = 0, $gep_int555 = 0, $gep_int557 = 0;
 var $gep_int559 = 0, $gep_int560 = 0, $gep_int562 = 0, $gep_int564 = 0, $gep_int566 = 0, $gep_int568 = 0, $gep_int570 = 0, $gep_int571 = 0, $gep_int572 = 0, $gep_int574 = 0, $gep_int576 = 0, $gep_int577 = 0, $gep_int579 = 0, $gep_int581 = 0, $gep_int583 = 0, $gep_int584 = 0, $gep_int585 = 0, $gep_int587 = 0, $gep_int589 = 0, $gep_int590 = 0;
 var $gep_int592 = 0, $gep_int594 = 0, $gep_int596 = 0, $gep_int598 = 0, $gep_int600 = 0, $gep_int602 = 0, $gep_int603 = 0, $gep_int604 = 0, $gep_int606 = 0, $gep_int608 = 0, $gep_int609 = 0, $gep_int611 = 0, $gep_int613 = 0, $gep_int615 = 0, $gep_int616 = 0, $gep_int617 = 0, $gep_int619 = 0, $gep_int621 = 0, $gep_int622 = 0, $gep_int624 = 0;
 var $gep_int626 = 0, $gep_int628 = 0, $gep_int629 = 0, $gep_int630 = 0, $gep_int632 = 0, $gep_int634 = 0, $gep_int635 = 0, $gep_int637 = 0, $gep_int639 = 0, $gep_int641 = 0, $gep_int642 = 0, $gep_int643 = 0, $gep_int645 = 0, $gep_int646 = 0, $gep_int647 = 0, $gep_int649 = 0, $gep_int651 = 0, $gep_int652 = 0, $gep_int654 = 0, $gep_int656 = 0;
 var $gep_int658 = 0, $gep_int659 = 0, $gep_int660 = 0, $gep_int662 = 0, $gep_int664 = 0, $gep_int665 = 0, $gep_int667 = 0, $gep_int669 = 0, $gep_int671 = 0, $gep_int672 = 0, $gep_int673 = 0, $gep_int675 = 0, $gep_int677 = 0, $gep_int678 = 0, $gep_int680 = 0, $gep_int682 = 0, $gep_int684 = 0, $gep_int686 = 0, $gep_int688 = 0, $gep_int690 = 0;
 var $gep_int691 = 0, $gep_int692 = 0, $gep_int694 = 0, $gep_int696 = 0, $gep_int697 = 0, $gep_int699 = 0, $gep_int701 = 0, $gep_int703 = 0, $gep_int705 = 0, $gep_int707 = 0, $gep_int709 = 0, $gep_int710 = 0, $gep_int711 = 0, $gep_int713 = 0, $gep_int715 = 0, $gep_int716 = 0, $gep_int718 = 0, $gep_int720 = 0, $gep_int722 = 0, $gep_int723 = 0;
 var $gep_int724 = 0, $gep_int726 = 0, $gep_int728 = 0, $gep_int729 = 0, $gep_int731 = 0, $gep_int733 = 0, $gep_int735 = 0, $gep_int736 = 0, $gep_int737 = 0, $gep_int739 = 0, $gep_int741 = 0, $gep_int742 = 0, $gep_int744 = 0, $gep_int746 = 0, $gep_int748 = 0, $gep_int749 = 0, $gep_int750 = 0, $gep_int752 = 0, $gep_int754 = 0, $gep_int755 = 0;
 var $gep_int757 = 0, $gep_int759 = 0, $gep_int761 = 0, $gep_int762 = 0, $gep_int763 = 0, $gep_int765 = 0, $gep_int767 = 0, $gep_int768 = 0, $gep_int770 = 0, $gep_int772 = 0, $gep_int774 = 0, $gep_int775 = 0, $gep_int776 = 0, $gep_int778 = 0, $gep_int780 = 0, $gep_int781 = 0, $gep_int783 = 0, $gep_int785 = 0, $gep_int787 = 0, $gep_int788 = 0;
 var $gep_int789 = 0, $gep_int791 = 0, $gep_int793 = 0, $gep_int794 = 0, $gep_int796 = 0, $gep_int798 = 0, $gep_int800 = 0, $gep_int801 = 0, $gep_int802 = 0, $gep_int804 = 0, $gep_int806 = 0, $gep_int807 = 0, $gep_int809 = 0, $gep_int811 = 0, $gep_int813 = 0, $gep_int814 = 0, $gep_int815 = 0, $gep_int817 = 0, $gep_int819 = 0, $gep_int820 = 0;
 var $gep_int822 = 0, $gep_int824 = 0, $gep_int826 = 0, $gep_int827 = 0, $gep_int828 = 0, $gep_int830 = 0, $gep_int832 = 0, $gep_int833 = 0, $gep_int835 = 0, $gep_int837 = 0, $gep_int839 = 0, $gep_int840 = 0, $gep_int841 = 0, $gep_int843 = 0, $gep_int845 = 0, $gep_int846 = 0, $gep_int848 = 0, $gep_int850 = 0, $gep_int852 = 0, $gep_int853 = 0;
 var $gep_int854 = 0, $gep_int856 = 0, $gep_int858 = 0, $gep_int859 = 0, $gep_int861 = 0, $gep_int863 = 0, $gep_int865 = 0, $gep_int866 = 0, $gep_int867 = 0, $gep_int869 = 0, $gep_int871 = 0, $gep_int872 = 0, $gep_int874 = 0, $gep_int876 = 0, $gep_int878 = 0, $gep_int880 = 0, $gep_int882 = 0, $gep_int883 = 0, $gep_int884 = 0, $gep_int886 = 0;
 var $gep_int888 = 0, $gep_int889 = 0, $gep_int891 = 0, $gep_int893 = 0, $gep_int895 = 0, $gep_int897 = 0, $gep_int899 = 0, $gep_int900 = 0, $gep_int901 = 0, $gep_int903 = 0, $gep_int905 = 0, $gep_int906 = 0, $gep_int908 = 0, $gep_int910 = 0, $gep_int912 = 0, $gep_int913 = 0, $gep_int914 = 0, $gep_int916 = 0, $gep_int918 = 0, $gep_int919 = 0;
 var $gep_int920 = 0, $gep_int922 = 0, $gep_int924 = 0, $gep_int925 = 0, $gep_int927 = 0, $gep_int929 = 0, $gep_int931 = 0, $gep_int932 = 0, $gep_int933 = 0, $gep_int935 = 0, $gep_int937 = 0, $gep_int938 = 0, $gep_int939 = 0, $gep_int941 = 0, $gep_int943 = 0, $gep_int944 = 0, $gep_int946 = 0, $gep_int948 = 0, $gep_int950 = 0, $gep_int951 = 0;
 var $gep_int952 = 0, $gep_int954 = 0, $gep_int956 = 0, $gep_int957 = 0, $gep_int959 = 0, $gep_int961 = 0, $gep_int963 = 0, $gep_int964 = 0, $gep_int965 = 0, $gep_int967 = 0, $gep_int969 = 0, $gep_int970 = 0, $gep_int972 = 0, $gep_int974 = 0, $gep_int976 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i$i = 0, $scevgep1$i$i$i = 0, $scevgep1$i$i$i$i$i = 0, $scevgep4$i$i$i = 0;
 var $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0, u$52 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $__p$i$i$i113 = sp;
 $__p$i$i$i109 = sp + 16|0;
 $__p$i$i$i102 = sp + 32|0;
 $__p$i$i$i96 = sp + 48|0;
 $__p$i$i$i92 = sp + 64|0;
 $__p$i$i$i88 = sp + 80|0;
 $__p$i$i$i84 = sp + 96|0;
 $__p$i$i$i80 = sp + 112|0;
 $__p$i$i$i76 = sp + 128|0;
 $__p$i$i$i72 = sp + 144|0;
 $__p$i$i$i68 = sp + 160|0;
 $__p$i$i$i64 = sp + 176|0;
 $__p$i$i$i60 = sp + 192|0;
 $__p$i$i$i56 = sp + 208|0;
 $__p$i$i$i52 = sp + 224|0;
 $__p$i$i$i48 = sp + 240|0;
 $__p$i$i$i44 = sp + 256|0;
 $__p$i$i$i40 = sp + 272|0;
 $__p$i$i$i36 = sp + 288|0;
 $__p$i$i$i32 = sp + 304|0;
 $__p$i$i$i28 = sp + 320|0;
 $__p$i$i$i24 = sp + 336|0;
 $__p$i$i$i20 = sp + 352|0;
 $__p$i$i$i16 = sp + 368|0;
 $__p$i$i$i12 = sp + 384|0;
 $__p$i$i$i8 = sp + 400|0;
 $__p$i$i$i4 = sp + 416|0;
 $__p$i$i$i = sp + 432|0;
 $1 = (($refs) + -1)|0;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $2 = $gep;
 HEAP32[$2>>2] = $1;
 $gep_int542 = $this;
 $3 = $gep_int542;
 $expanded11 = 8392;
 $gep_int543 = 8392;
 $gep544 = (($gep_int543) + 8)|0;
 $expanded10 = $gep544;
 $expanded = $expanded10;
 HEAP32[$3>>2] = $expanded;
 $gep_int545 = $this;
 $gep546 = (($gep_int545) + 8)|0;
 $4 = $gep546;
 $gep_int547 = $this;
 $gep548 = (($gep_int547) + 12)|0;
 $5 = $gep548;
 $gep_int549 = $this;
 $gep550 = (($gep_int549) + 16)|0;
 $6 = $gep550;
 $gep_int551 = $this;
 $gep552 = (($gep_int551) + 136)|0;
 $7 = $gep552;
 $gep_int553 = $this;
 $gep554 = (($gep_int553) + 24)|0;
 $8 = $gep554;
 HEAP8[$7] = 1;
 $9 = $8;
 HEAP32[$5>>2] = $9;
 HEAP32[$4>>2] = $9;
 $10 = $7;
 HEAP32[$6>>2] = $10;
 
 $$0$i$i = 28;$11 = $9;
 while(1) {
  
  
  $12 = ($11|0)==(0);
  
  if ($12) {
   $13 = 0;
  } else {
   HEAP32[$11>>2] = 0;
   $$pre1$i$i = HEAP32[$5>>2]|0;
   
   $13 = $$pre1$i$i;
  }
  
  $gep_int555 = $13;
  $gep556 = (($gep_int555) + 4)|0;
  $14 = $gep556;
  HEAP32[$5>>2] = $14;
  $15 = (($$0$i$i) + -1)|0;
  $16 = ($15|0)==(0);
  
  if ($16) {
   break;
  } else {
   $$0$i$i = $15;$11 = $14;
  }
 }
 $gep_int557 = $this;
 $gep558 = (($gep_int557) + 144)|0;
 $17 = $gep558;
 __THREW__ = 0;
 $gep_int559 = 8384;
 $expanded12 = $gep_int559;
 invoke_viii(3,$17|0,$expanded12|0,1);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 
 if ($19) {
  $expanded540 = 69;
  $397 = ___cxa_find_matching_catch(-1,-1)|0;
  $398 = tempRet0;
  
  $$0 = $398;$$01 = $397;
 } else {
  $20 = HEAP32[$4>>2]|0;
  $21 = HEAP32[$5>>2]|0;
  $22 = ($21|0)==($20|0);
  
  if (!($22)) {
   $__new_last2$i$i$i = $20;
   $gep_int560 = $21;
   $gep561 = (($gep_int560) + -4)|0;
   $scevgep$i$i$i = $gep561;
   $scevgep1$i$i$i = $scevgep$i$i$i;
   $23 = (0 - ($__new_last2$i$i$i))|0;
   $gep_int562 = $scevgep$i$i$i;
   $gep563 = (($gep_int562) + ($23))|0;
   $uglygep$i$i$i = $gep563;
   $uglygep3$i$i$i = $uglygep$i$i$i;
   $24 = $uglygep3$i$i$i >>> 2;
   $25 = $24 ^ -1;
   $gep_int564 = $21;
   $gep_array = $25<<2;
   $gep565 = (($gep_int564) + ($gep_array))|0;
   $scevgep4$i$i$i = $gep565;
   HEAP32[$5>>2] = $scevgep4$i$i$i;
   
  }
  $expanded15 = 13288;
  $gep_int566 = 13288;
  $gep567 = (($gep_int566) + 4)|0;
  $expanded14 = $gep567;
  $expanded13 = $expanded14;
  HEAP32[$expanded14>>2] = 0;
  $expanded18 = 6872;
  $gep_int568 = 6872;
  $gep569 = (($gep_int568) + 8)|0;
  $expanded17 = $gep569;
  $expanded16 = $expanded17;
  $expanded19 = 13288;
  HEAP32[13288>>2] = $expanded16;
  $26 = $__p$i$i$i4;
  
  $expanded21 = 6904;
  $gep_int570 = 6904;
  $expanded20 = $gep_int570;
  $27 = HEAP32[$expanded20>>2]|0;
  $28 = ($27|0)==(-1);
  
  if ($28) {
   label = 10;
  } else {
   $gep_int571 = $__p$i$i$i4;
   $29 = $gep_int571;
   $expanded22 = 6904;
   HEAP32[$29>>2] = $expanded22;
   $gep_int572 = $__p$i$i$i4;
   $gep573 = (($gep_int572) + 4)|0;
   $30 = $gep573;
   $expanded23 = 177;
   HEAP32[$30>>2] = $expanded23;
   $gep_int574 = $__p$i$i$i4;
   $gep575 = (($gep_int574) + 8)|0;
   $31 = $gep575;
   HEAP32[$31>>2] = 0;
   __THREW__ = 0;
   $expanded25 = 6904;
   $gep_int576 = 6904;
   $expanded24 = $gep_int576;
   invoke_viii(17,$expanded24|0,$26|0,178);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   
   if ($33) {
    label = 111;
   } else {
    label = 10;
   }
  }
  L14: do {
   if ((label|0) == 10) {
    
    $expanded27 = 6904;
    $gep_int577 = 6904;
    $gep578 = (($gep_int577) + 4)|0;
    $expanded26 = $gep578;
    $34 = HEAP32[$expanded26>>2]|0;
    $35 = (($34) + -1)|0;
    __THREW__ = 0;
    $expanded28 = 13288;
    invoke_viii(20,$this|0,$expanded28|0,$35|0);
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    
    if ($37) {
     label = 111;
     break;
    }
    $expanded31 = 13280;
    $gep_int579 = 13280;
    $gep580 = (($gep_int579) + 4)|0;
    $expanded30 = $gep580;
    $expanded29 = $expanded30;
    HEAP32[$expanded30>>2] = 0;
    $expanded34 = 6912;
    $gep_int581 = 6912;
    $gep582 = (($gep_int581) + 8)|0;
    $expanded33 = $gep582;
    $expanded32 = $expanded33;
    $expanded35 = 13280;
    HEAP32[13280>>2] = $expanded32;
    $38 = $__p$i$i$i8;
    
    $expanded37 = 6944;
    $gep_int583 = 6944;
    $expanded36 = $gep_int583;
    $39 = HEAP32[$expanded36>>2]|0;
    $40 = ($39|0)==(-1);
    
    if (!($40)) {
     $gep_int584 = $__p$i$i$i8;
     $41 = $gep_int584;
     $expanded38 = 6944;
     HEAP32[$41>>2] = $expanded38;
     $gep_int585 = $__p$i$i$i8;
     $gep586 = (($gep_int585) + 4)|0;
     $42 = $gep586;
     $expanded39 = 177;
     HEAP32[$42>>2] = $expanded39;
     $gep_int587 = $__p$i$i$i8;
     $gep588 = (($gep_int587) + 8)|0;
     $43 = $gep588;
     HEAP32[$43>>2] = 0;
     __THREW__ = 0;
     $expanded41 = 6944;
     $gep_int589 = 6944;
     $expanded40 = $gep_int589;
     invoke_viii(17,$expanded40|0,$38|0,178);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     
     if ($45) {
      label = 111;
      break;
     }
    }
    
    $expanded43 = 6944;
    $gep_int590 = 6944;
    $gep591 = (($gep_int590) + 4)|0;
    $expanded42 = $gep591;
    $46 = HEAP32[$expanded42>>2]|0;
    $47 = (($46) + -1)|0;
    __THREW__ = 0;
    $expanded44 = 13280;
    invoke_viii(20,$this|0,$expanded44|0,$47|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    
    if ($49) {
     label = 111;
     break;
    }
    $expanded47 = 13264;
    $gep_int592 = 13264;
    $gep593 = (($gep_int592) + 4)|0;
    $expanded46 = $gep593;
    $expanded45 = $expanded46;
    HEAP32[$expanded46>>2] = 0;
    $expanded50 = 8488;
    $gep_int594 = 8488;
    $gep595 = (($gep_int594) + 8)|0;
    $expanded49 = $gep595;
    $expanded48 = $expanded49;
    $expanded51 = 13264;
    HEAP32[13264>>2] = $expanded48;
    $expanded54 = 13264;
    $gep_int596 = 13264;
    $gep597 = (($gep_int596) + 8)|0;
    $expanded53 = $gep597;
    $expanded52 = $expanded53;
    HEAP32[$expanded53>>2] = 0;
    $expanded56 = 13264;
    $gep_int598 = 13264;
    $gep599 = (($gep_int598) + 12)|0;
    $expanded55 = $gep599;
    HEAP8[$expanded55] = 0;
    __THREW__ = 0;
    $50 = invoke_i(1)|0;
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    
    if ($52) {
     $expanded57 = 69;
     $53 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$52 = tempRet0;
     ___clang_call_terminate($53);
     // unreachable
    }
    $54 = HEAP32[$50>>2]|0;
    $expanded60 = 13264;
    $gep_int600 = 13264;
    $gep601 = (($gep_int600) + 8)|0;
    $expanded59 = $gep601;
    $expanded58 = $expanded59;
    HEAP32[$expanded59>>2] = $54;
    $55 = $__p$i$i$i12;
    
    $expanded62 = 8480;
    $gep_int602 = 8480;
    $expanded61 = $gep_int602;
    $56 = HEAP32[$expanded61>>2]|0;
    $57 = ($56|0)==(-1);
    
    if (!($57)) {
     $gep_int603 = $__p$i$i$i12;
     $58 = $gep_int603;
     $expanded63 = 8480;
     HEAP32[$58>>2] = $expanded63;
     $gep_int604 = $__p$i$i$i12;
     $gep605 = (($gep_int604) + 4)|0;
     $59 = $gep605;
     $expanded64 = 177;
     HEAP32[$59>>2] = $expanded64;
     $gep_int606 = $__p$i$i$i12;
     $gep607 = (($gep_int606) + 8)|0;
     $60 = $gep607;
     HEAP32[$60>>2] = 0;
     __THREW__ = 0;
     $expanded66 = 8480;
     $gep_int608 = 8480;
     $expanded65 = $gep_int608;
     invoke_viii(17,$expanded65|0,$55|0,178);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     
     if ($62) {
      label = 111;
      break;
     }
    }
    
    $expanded68 = 8480;
    $gep_int609 = 8480;
    $gep610 = (($gep_int609) + 4)|0;
    $expanded67 = $gep610;
    $63 = HEAP32[$expanded67>>2]|0;
    $64 = (($63) + -1)|0;
    __THREW__ = 0;
    $expanded69 = 13264;
    invoke_viii(20,$this|0,$expanded69|0,$64|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    
    if ($66) {
     label = 111;
     break;
    }
    $expanded72 = 13256;
    $gep_int611 = 13256;
    $gep612 = (($gep_int611) + 4)|0;
    $expanded71 = $gep612;
    $expanded70 = $expanded71;
    HEAP32[$expanded71>>2] = 0;
    $expanded75 = 9448;
    $gep_int613 = 9448;
    $gep614 = (($gep_int613) + 8)|0;
    $expanded74 = $gep614;
    $expanded73 = $expanded74;
    $expanded76 = 13256;
    HEAP32[13256>>2] = $expanded73;
    $67 = $__p$i$i$i16;
    
    $expanded78 = 8472;
    $gep_int615 = 8472;
    $expanded77 = $gep_int615;
    $68 = HEAP32[$expanded77>>2]|0;
    $69 = ($68|0)==(-1);
    
    if (!($69)) {
     $gep_int616 = $__p$i$i$i16;
     $70 = $gep_int616;
     $expanded79 = 8472;
     HEAP32[$70>>2] = $expanded79;
     $gep_int617 = $__p$i$i$i16;
     $gep618 = (($gep_int617) + 4)|0;
     $71 = $gep618;
     $expanded80 = 177;
     HEAP32[$71>>2] = $expanded80;
     $gep_int619 = $__p$i$i$i16;
     $gep620 = (($gep_int619) + 8)|0;
     $72 = $gep620;
     HEAP32[$72>>2] = 0;
     __THREW__ = 0;
     $expanded82 = 8472;
     $gep_int621 = 8472;
     $expanded81 = $gep_int621;
     invoke_viii(17,$expanded81|0,$67|0,178);
     $73 = __THREW__; __THREW__ = 0;
     $74 = $73&1;
     
     if ($74) {
      label = 111;
      break;
     }
    }
    
    $expanded84 = 8472;
    $gep_int622 = 8472;
    $gep623 = (($gep_int622) + 4)|0;
    $expanded83 = $gep623;
    $75 = HEAP32[$expanded83>>2]|0;
    $76 = (($75) + -1)|0;
    __THREW__ = 0;
    $expanded85 = 13256;
    invoke_viii(20,$this|0,$expanded85|0,$76|0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    
    if ($78) {
     label = 111;
     break;
    }
    $expanded88 = 13248;
    $gep_int624 = 13248;
    $gep625 = (($gep_int624) + 4)|0;
    $expanded87 = $gep625;
    $expanded86 = $expanded87;
    HEAP32[$expanded87>>2] = 0;
    $expanded91 = 9664;
    $gep_int626 = 9664;
    $gep627 = (($gep_int626) + 8)|0;
    $expanded90 = $gep627;
    $expanded89 = $expanded90;
    $expanded92 = 13248;
    HEAP32[13248>>2] = $expanded89;
    $79 = $__p$i$i$i20;
    
    $expanded94 = 8544;
    $gep_int628 = 8544;
    $expanded93 = $gep_int628;
    $80 = HEAP32[$expanded93>>2]|0;
    $81 = ($80|0)==(-1);
    
    if (!($81)) {
     $gep_int629 = $__p$i$i$i20;
     $82 = $gep_int629;
     $expanded95 = 8544;
     HEAP32[$82>>2] = $expanded95;
     $gep_int630 = $__p$i$i$i20;
     $gep631 = (($gep_int630) + 4)|0;
     $83 = $gep631;
     $expanded96 = 177;
     HEAP32[$83>>2] = $expanded96;
     $gep_int632 = $__p$i$i$i20;
     $gep633 = (($gep_int632) + 8)|0;
     $84 = $gep633;
     HEAP32[$84>>2] = 0;
     __THREW__ = 0;
     $expanded98 = 8544;
     $gep_int634 = 8544;
     $expanded97 = $gep_int634;
     invoke_viii(17,$expanded97|0,$79|0,178);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     
     if ($86) {
      label = 111;
      break;
     }
    }
    
    $expanded100 = 8544;
    $gep_int635 = 8544;
    $gep636 = (($gep_int635) + 4)|0;
    $expanded99 = $gep636;
    $87 = HEAP32[$expanded99>>2]|0;
    $88 = (($87) + -1)|0;
    __THREW__ = 0;
    $expanded101 = 13248;
    invoke_viii(20,$this|0,$expanded101|0,$88|0);
    $89 = __THREW__; __THREW__ = 0;
    $90 = $89&1;
    
    if ($90) {
     label = 111;
     break;
    }
    $expanded104 = 13232;
    $gep_int637 = 13232;
    $gep638 = (($gep_int637) + 4)|0;
    $expanded103 = $gep638;
    $expanded102 = $expanded103;
    HEAP32[$expanded103>>2] = 0;
    $expanded107 = 8560;
    $gep_int639 = 8560;
    $gep640 = (($gep_int639) + 8)|0;
    $expanded106 = $gep640;
    $expanded105 = $expanded106;
    $expanded108 = 13232;
    HEAP32[13232>>2] = $expanded105;
    $gep_int641 = 8376;
    $expanded109 = $gep_int641;
    $91 = HEAP8[$expanded109]|0;
    $92 = ($91<<24>>24)==(0);
    
    do {
     if ($92) {
      $expanded110 = 8376;
      $93 = ___cxa_guard_acquire($expanded110|0)|0;
      $94 = ($93|0)==(0);
      
      if ($94) {
       break;
      }
      __THREW__ = 0;
      $gep_int642 = 8384;
      $expanded111 = $gep_int642;
      $95 = invoke_iiii(30,2147483647,$expanded111|0,0)|0;
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      
      if ($97) {
       $expanded114 = 69;
       $98 = ___cxa_find_matching_catch(-1,-1)|0;
       $99 = tempRet0;
       $expanded115 = 8376;
       ___cxa_guard_abort($expanded115|0);
       
       $eh$lpad$body$index4Z2D = $99;$eh$lpad$body$indexZ2D = $98;
       break L14;
      } else {
       $expanded112 = 8368;
       HEAP32[8368>>2] = $95;
       $expanded113 = 8376;
       ___cxa_guard_release($expanded113|0);
       
       break;
      }
     }
    } while(0);
    $expanded117 = 8368;
    $100 = HEAP32[8368>>2]|0;
    $expanded120 = 13232;
    $gep_int643 = 13232;
    $gep644 = (($gep_int643) + 8)|0;
    $expanded119 = $gep644;
    $expanded118 = $expanded119;
    HEAP32[$expanded119>>2] = $100;
    $101 = $__p$i$i$i24;
    
    $expanded122 = 8552;
    $gep_int645 = 8552;
    $expanded121 = $gep_int645;
    $102 = HEAP32[$expanded121>>2]|0;
    $103 = ($102|0)==(-1);
    
    if (!($103)) {
     $gep_int646 = $__p$i$i$i24;
     $104 = $gep_int646;
     $expanded123 = 8552;
     HEAP32[$104>>2] = $expanded123;
     $gep_int647 = $__p$i$i$i24;
     $gep648 = (($gep_int647) + 4)|0;
     $105 = $gep648;
     $expanded124 = 177;
     HEAP32[$105>>2] = $expanded124;
     $gep_int649 = $__p$i$i$i24;
     $gep650 = (($gep_int649) + 8)|0;
     $106 = $gep650;
     HEAP32[$106>>2] = 0;
     __THREW__ = 0;
     $expanded126 = 8552;
     $gep_int651 = 8552;
     $expanded125 = $gep_int651;
     invoke_viii(17,$expanded125|0,$101|0,178);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     
     if ($108) {
      label = 111;
      break;
     }
    }
    
    $expanded128 = 8552;
    $gep_int652 = 8552;
    $gep653 = (($gep_int652) + 4)|0;
    $expanded127 = $gep653;
    $109 = HEAP32[$expanded127>>2]|0;
    $110 = (($109) + -1)|0;
    __THREW__ = 0;
    $expanded129 = 13232;
    invoke_viii(20,$this|0,$expanded129|0,$110|0);
    $111 = __THREW__; __THREW__ = 0;
    $112 = $111&1;
    
    if ($112) {
     label = 111;
     break;
    }
    $expanded132 = 13224;
    $gep_int654 = 13224;
    $gep655 = (($gep_int654) + 4)|0;
    $expanded131 = $gep655;
    $expanded130 = $expanded131;
    HEAP32[$expanded131>>2] = 0;
    $expanded135 = 9888;
    $gep_int656 = 9888;
    $gep657 = (($gep_int656) + 8)|0;
    $expanded134 = $gep657;
    $expanded133 = $expanded134;
    $expanded136 = 13224;
    HEAP32[13224>>2] = $expanded133;
    $113 = $__p$i$i$i28;
    
    $expanded138 = 8608;
    $gep_int658 = 8608;
    $expanded137 = $gep_int658;
    $114 = HEAP32[$expanded137>>2]|0;
    $115 = ($114|0)==(-1);
    
    if (!($115)) {
     $gep_int659 = $__p$i$i$i28;
     $116 = $gep_int659;
     $expanded139 = 8608;
     HEAP32[$116>>2] = $expanded139;
     $gep_int660 = $__p$i$i$i28;
     $gep661 = (($gep_int660) + 4)|0;
     $117 = $gep661;
     $expanded140 = 177;
     HEAP32[$117>>2] = $expanded140;
     $gep_int662 = $__p$i$i$i28;
     $gep663 = (($gep_int662) + 8)|0;
     $118 = $gep663;
     HEAP32[$118>>2] = 0;
     __THREW__ = 0;
     $expanded142 = 8608;
     $gep_int664 = 8608;
     $expanded141 = $gep_int664;
     invoke_viii(17,$expanded141|0,$113|0,178);
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     
     if ($120) {
      label = 111;
      break;
     }
    }
    
    $expanded144 = 8608;
    $gep_int665 = 8608;
    $gep666 = (($gep_int665) + 4)|0;
    $expanded143 = $gep666;
    $121 = HEAP32[$expanded143>>2]|0;
    $122 = (($121) + -1)|0;
    __THREW__ = 0;
    $expanded145 = 13224;
    invoke_viii(20,$this|0,$expanded145|0,$122|0);
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    
    if ($124) {
     label = 111;
     break;
    }
    $expanded148 = 13216;
    $gep_int667 = 13216;
    $gep668 = (($gep_int667) + 4)|0;
    $expanded147 = $gep668;
    $expanded146 = $expanded147;
    HEAP32[$expanded147>>2] = 0;
    $expanded151 = 10008;
    $gep_int669 = 10008;
    $gep670 = (($gep_int669) + 8)|0;
    $expanded150 = $gep670;
    $expanded149 = $expanded150;
    $expanded152 = 13216;
    HEAP32[13216>>2] = $expanded149;
    $125 = $__p$i$i$i32;
    
    $expanded154 = 8616;
    $gep_int671 = 8616;
    $expanded153 = $gep_int671;
    $126 = HEAP32[$expanded153>>2]|0;
    $127 = ($126|0)==(-1);
    
    if (!($127)) {
     $gep_int672 = $__p$i$i$i32;
     $128 = $gep_int672;
     $expanded155 = 8616;
     HEAP32[$128>>2] = $expanded155;
     $gep_int673 = $__p$i$i$i32;
     $gep674 = (($gep_int673) + 4)|0;
     $129 = $gep674;
     $expanded156 = 177;
     HEAP32[$129>>2] = $expanded156;
     $gep_int675 = $__p$i$i$i32;
     $gep676 = (($gep_int675) + 8)|0;
     $130 = $gep676;
     HEAP32[$130>>2] = 0;
     __THREW__ = 0;
     $expanded158 = 8616;
     $gep_int677 = 8616;
     $expanded157 = $gep_int677;
     invoke_viii(17,$expanded157|0,$125|0,178);
     $131 = __THREW__; __THREW__ = 0;
     $132 = $131&1;
     
     if ($132) {
      label = 111;
      break;
     }
    }
    
    $expanded160 = 8616;
    $gep_int678 = 8616;
    $gep679 = (($gep_int678) + 4)|0;
    $expanded159 = $gep679;
    $133 = HEAP32[$expanded159>>2]|0;
    $134 = (($133) + -1)|0;
    __THREW__ = 0;
    $expanded161 = 13216;
    invoke_viii(20,$this|0,$expanded161|0,$134|0);
    $135 = __THREW__; __THREW__ = 0;
    $136 = $135&1;
    
    if ($136) {
     label = 111;
     break;
    }
    $expanded164 = 13192;
    $gep_int680 = 13192;
    $gep681 = (($gep_int680) + 4)|0;
    $expanded163 = $gep681;
    $expanded162 = $expanded163;
    HEAP32[$expanded163>>2] = 0;
    $expanded167 = 8640;
    $gep_int682 = 8640;
    $gep683 = (($gep_int682) + 8)|0;
    $expanded166 = $gep683;
    $expanded165 = $expanded166;
    $expanded168 = 13192;
    HEAP32[13192>>2] = $expanded165;
    $expanded170 = 13192;
    $gep_int684 = 13192;
    $gep685 = (($gep_int684) + 8)|0;
    $expanded169 = $gep685;
    HEAP8[$expanded169] = 46;
    $expanded172 = 13192;
    $gep_int686 = 13192;
    $gep687 = (($gep_int686) + 9)|0;
    $expanded171 = $gep687;
    HEAP8[$expanded171] = 44;
    $expanded174 = 13192;
    $gep_int688 = 13192;
    $gep689 = (($gep_int688) + 12)|0;
    $expanded173 = $gep689;
    ;HEAP32[$expanded173+0>>2]=0|0;HEAP32[$expanded173+4>>2]=0|0;HEAP32[$expanded173+8>>2]=0|0;
    $137 = $__p$i$i$i36;
    
    $expanded176 = 8624;
    $gep_int690 = 8624;
    $expanded175 = $gep_int690;
    $138 = HEAP32[$expanded175>>2]|0;
    $139 = ($138|0)==(-1);
    
    if (!($139)) {
     $gep_int691 = $__p$i$i$i36;
     $140 = $gep_int691;
     $expanded177 = 8624;
     HEAP32[$140>>2] = $expanded177;
     $gep_int692 = $__p$i$i$i36;
     $gep693 = (($gep_int692) + 4)|0;
     $141 = $gep693;
     $expanded178 = 177;
     HEAP32[$141>>2] = $expanded178;
     $gep_int694 = $__p$i$i$i36;
     $gep695 = (($gep_int694) + 8)|0;
     $142 = $gep695;
     HEAP32[$142>>2] = 0;
     __THREW__ = 0;
     $expanded180 = 8624;
     $gep_int696 = 8624;
     $expanded179 = $gep_int696;
     invoke_viii(17,$expanded179|0,$137|0,178);
     $143 = __THREW__; __THREW__ = 0;
     $144 = $143&1;
     
     if ($144) {
      label = 111;
      break;
     }
    }
    
    $expanded182 = 8624;
    $gep_int697 = 8624;
    $gep698 = (($gep_int697) + 4)|0;
    $expanded181 = $gep698;
    $145 = HEAP32[$expanded181>>2]|0;
    $146 = (($145) + -1)|0;
    __THREW__ = 0;
    $expanded183 = 13192;
    invoke_viii(20,$this|0,$expanded183|0,$146|0);
    $147 = __THREW__; __THREW__ = 0;
    $148 = $147&1;
    
    if ($148) {
     label = 111;
     break;
    }
    $expanded186 = 13160;
    $gep_int699 = 13160;
    $gep700 = (($gep_int699) + 4)|0;
    $expanded185 = $gep700;
    $expanded184 = $expanded185;
    HEAP32[$expanded185>>2] = 0;
    $expanded189 = 8680;
    $gep_int701 = 8680;
    $gep702 = (($gep_int701) + 8)|0;
    $expanded188 = $gep702;
    $expanded187 = $expanded188;
    $expanded190 = 13160;
    HEAP32[13160>>2] = $expanded187;
    $expanded193 = 13160;
    $gep_int703 = 13160;
    $gep704 = (($gep_int703) + 8)|0;
    $expanded192 = $gep704;
    $expanded191 = $expanded192;
    HEAP32[$expanded192>>2] = 46;
    $expanded196 = 13160;
    $gep_int705 = 13160;
    $gep706 = (($gep_int705) + 12)|0;
    $expanded195 = $gep706;
    $expanded194 = $expanded195;
    HEAP32[$expanded195>>2] = 44;
    $expanded198 = 13160;
    $gep_int707 = 13160;
    $gep708 = (($gep_int707) + 16)|0;
    $expanded197 = $gep708;
    ;HEAP32[$expanded197+0>>2]=0|0;HEAP32[$expanded197+4>>2]=0|0;HEAP32[$expanded197+8>>2]=0|0;
    $149 = $__p$i$i$i40;
    
    $expanded200 = 8632;
    $gep_int709 = 8632;
    $expanded199 = $gep_int709;
    $150 = HEAP32[$expanded199>>2]|0;
    $151 = ($150|0)==(-1);
    
    if (!($151)) {
     $gep_int710 = $__p$i$i$i40;
     $152 = $gep_int710;
     $expanded201 = 8632;
     HEAP32[$152>>2] = $expanded201;
     $gep_int711 = $__p$i$i$i40;
     $gep712 = (($gep_int711) + 4)|0;
     $153 = $gep712;
     $expanded202 = 177;
     HEAP32[$153>>2] = $expanded202;
     $gep_int713 = $__p$i$i$i40;
     $gep714 = (($gep_int713) + 8)|0;
     $154 = $gep714;
     HEAP32[$154>>2] = 0;
     __THREW__ = 0;
     $expanded204 = 8632;
     $gep_int715 = 8632;
     $expanded203 = $gep_int715;
     invoke_viii(17,$expanded203|0,$149|0,178);
     $155 = __THREW__; __THREW__ = 0;
     $156 = $155&1;
     
     if ($156) {
      label = 111;
      break;
     }
    }
    
    $expanded206 = 8632;
    $gep_int716 = 8632;
    $gep717 = (($gep_int716) + 4)|0;
    $expanded205 = $gep717;
    $157 = HEAP32[$expanded205>>2]|0;
    $158 = (($157) + -1)|0;
    __THREW__ = 0;
    $expanded207 = 13160;
    invoke_viii(20,$this|0,$expanded207|0,$158|0);
    $159 = __THREW__; __THREW__ = 0;
    $160 = $159&1;
    
    if ($160) {
     label = 111;
     break;
    }
    $expanded210 = 13152;
    $gep_int718 = 13152;
    $gep719 = (($gep_int718) + 4)|0;
    $expanded209 = $gep719;
    $expanded208 = $expanded209;
    HEAP32[$expanded209>>2] = 0;
    $expanded213 = 6952;
    $gep_int720 = 6952;
    $gep721 = (($gep_int720) + 8)|0;
    $expanded212 = $gep721;
    $expanded211 = $expanded212;
    $expanded214 = 13152;
    HEAP32[13152>>2] = $expanded211;
    $161 = $__p$i$i$i44;
    
    $expanded216 = 7016;
    $gep_int722 = 7016;
    $expanded215 = $gep_int722;
    $162 = HEAP32[$expanded215>>2]|0;
    $163 = ($162|0)==(-1);
    
    if (!($163)) {
     $gep_int723 = $__p$i$i$i44;
     $164 = $gep_int723;
     $expanded217 = 7016;
     HEAP32[$164>>2] = $expanded217;
     $gep_int724 = $__p$i$i$i44;
     $gep725 = (($gep_int724) + 4)|0;
     $165 = $gep725;
     $expanded218 = 177;
     HEAP32[$165>>2] = $expanded218;
     $gep_int726 = $__p$i$i$i44;
     $gep727 = (($gep_int726) + 8)|0;
     $166 = $gep727;
     HEAP32[$166>>2] = 0;
     __THREW__ = 0;
     $expanded220 = 7016;
     $gep_int728 = 7016;
     $expanded219 = $gep_int728;
     invoke_viii(17,$expanded219|0,$161|0,178);
     $167 = __THREW__; __THREW__ = 0;
     $168 = $167&1;
     
     if ($168) {
      label = 111;
      break;
     }
    }
    
    $expanded222 = 7016;
    $gep_int729 = 7016;
    $gep730 = (($gep_int729) + 4)|0;
    $expanded221 = $gep730;
    $169 = HEAP32[$expanded221>>2]|0;
    $170 = (($169) + -1)|0;
    __THREW__ = 0;
    $expanded223 = 13152;
    invoke_viii(20,$this|0,$expanded223|0,$170|0);
    $171 = __THREW__; __THREW__ = 0;
    $172 = $171&1;
    
    if ($172) {
     label = 111;
     break;
    }
    $expanded226 = 13144;
    $gep_int731 = 13144;
    $gep732 = (($gep_int731) + 4)|0;
    $expanded225 = $gep732;
    $expanded224 = $expanded225;
    HEAP32[$expanded225>>2] = 0;
    $expanded229 = 7072;
    $gep_int733 = 7072;
    $gep734 = (($gep_int733) + 8)|0;
    $expanded228 = $gep734;
    $expanded227 = $expanded228;
    $expanded230 = 13144;
    HEAP32[13144>>2] = $expanded227;
    $173 = $__p$i$i$i48;
    
    $expanded232 = 7136;
    $gep_int735 = 7136;
    $expanded231 = $gep_int735;
    $174 = HEAP32[$expanded231>>2]|0;
    $175 = ($174|0)==(-1);
    
    if (!($175)) {
     $gep_int736 = $__p$i$i$i48;
     $176 = $gep_int736;
     $expanded233 = 7136;
     HEAP32[$176>>2] = $expanded233;
     $gep_int737 = $__p$i$i$i48;
     $gep738 = (($gep_int737) + 4)|0;
     $177 = $gep738;
     $expanded234 = 177;
     HEAP32[$177>>2] = $expanded234;
     $gep_int739 = $__p$i$i$i48;
     $gep740 = (($gep_int739) + 8)|0;
     $178 = $gep740;
     HEAP32[$178>>2] = 0;
     __THREW__ = 0;
     $expanded236 = 7136;
     $gep_int741 = 7136;
     $expanded235 = $gep_int741;
     invoke_viii(17,$expanded235|0,$173|0,178);
     $179 = __THREW__; __THREW__ = 0;
     $180 = $179&1;
     
     if ($180) {
      label = 111;
      break;
     }
    }
    
    $expanded238 = 7136;
    $gep_int742 = 7136;
    $gep743 = (($gep_int742) + 4)|0;
    $expanded237 = $gep743;
    $181 = HEAP32[$expanded237>>2]|0;
    $182 = (($181) + -1)|0;
    __THREW__ = 0;
    $expanded239 = 13144;
    invoke_viii(20,$this|0,$expanded239|0,$182|0);
    $183 = __THREW__; __THREW__ = 0;
    $184 = $183&1;
    
    if ($184) {
     label = 111;
     break;
    }
    $expanded242 = 13136;
    $gep_int744 = 13136;
    $gep745 = (($gep_int744) + 4)|0;
    $expanded241 = $gep745;
    $expanded240 = $expanded241;
    HEAP32[$expanded241>>2] = 0;
    $expanded245 = 7144;
    $gep_int746 = 7144;
    $gep747 = (($gep_int746) + 8)|0;
    $expanded244 = $gep747;
    $expanded243 = $expanded244;
    $expanded246 = 13136;
    HEAP32[13136>>2] = $expanded243;
    $185 = $__p$i$i$i52;
    
    $expanded248 = 7200;
    $gep_int748 = 7200;
    $expanded247 = $gep_int748;
    $186 = HEAP32[$expanded247>>2]|0;
    $187 = ($186|0)==(-1);
    
    if (!($187)) {
     $gep_int749 = $__p$i$i$i52;
     $188 = $gep_int749;
     $expanded249 = 7200;
     HEAP32[$188>>2] = $expanded249;
     $gep_int750 = $__p$i$i$i52;
     $gep751 = (($gep_int750) + 4)|0;
     $189 = $gep751;
     $expanded250 = 177;
     HEAP32[$189>>2] = $expanded250;
     $gep_int752 = $__p$i$i$i52;
     $gep753 = (($gep_int752) + 8)|0;
     $190 = $gep753;
     HEAP32[$190>>2] = 0;
     __THREW__ = 0;
     $expanded252 = 7200;
     $gep_int754 = 7200;
     $expanded251 = $gep_int754;
     invoke_viii(17,$expanded251|0,$185|0,178);
     $191 = __THREW__; __THREW__ = 0;
     $192 = $191&1;
     
     if ($192) {
      label = 111;
      break;
     }
    }
    
    $expanded254 = 7200;
    $gep_int755 = 7200;
    $gep756 = (($gep_int755) + 4)|0;
    $expanded253 = $gep756;
    $193 = HEAP32[$expanded253>>2]|0;
    $194 = (($193) + -1)|0;
    __THREW__ = 0;
    $expanded255 = 13136;
    invoke_viii(20,$this|0,$expanded255|0,$194|0);
    $195 = __THREW__; __THREW__ = 0;
    $196 = $195&1;
    
    if ($196) {
     label = 111;
     break;
    }
    $expanded258 = 13128;
    $gep_int757 = 13128;
    $gep758 = (($gep_int757) + 4)|0;
    $expanded257 = $gep758;
    $expanded256 = $expanded257;
    HEAP32[$expanded257>>2] = 0;
    $expanded261 = 7208;
    $gep_int759 = 7208;
    $gep760 = (($gep_int759) + 8)|0;
    $expanded260 = $gep760;
    $expanded259 = $expanded260;
    $expanded262 = 13128;
    HEAP32[13128>>2] = $expanded259;
    $197 = $__p$i$i$i56;
    
    $expanded264 = 7264;
    $gep_int761 = 7264;
    $expanded263 = $gep_int761;
    $198 = HEAP32[$expanded263>>2]|0;
    $199 = ($198|0)==(-1);
    
    if (!($199)) {
     $gep_int762 = $__p$i$i$i56;
     $200 = $gep_int762;
     $expanded265 = 7264;
     HEAP32[$200>>2] = $expanded265;
     $gep_int763 = $__p$i$i$i56;
     $gep764 = (($gep_int763) + 4)|0;
     $201 = $gep764;
     $expanded266 = 177;
     HEAP32[$201>>2] = $expanded266;
     $gep_int765 = $__p$i$i$i56;
     $gep766 = (($gep_int765) + 8)|0;
     $202 = $gep766;
     HEAP32[$202>>2] = 0;
     __THREW__ = 0;
     $expanded268 = 7264;
     $gep_int767 = 7264;
     $expanded267 = $gep_int767;
     invoke_viii(17,$expanded267|0,$197|0,178);
     $203 = __THREW__; __THREW__ = 0;
     $204 = $203&1;
     
     if ($204) {
      label = 111;
      break;
     }
    }
    
    $expanded270 = 7264;
    $gep_int768 = 7264;
    $gep769 = (($gep_int768) + 4)|0;
    $expanded269 = $gep769;
    $205 = HEAP32[$expanded269>>2]|0;
    $206 = (($205) + -1)|0;
    __THREW__ = 0;
    $expanded271 = 13128;
    invoke_viii(20,$this|0,$expanded271|0,$206|0);
    $207 = __THREW__; __THREW__ = 0;
    $208 = $207&1;
    
    if ($208) {
     label = 111;
     break;
    }
    $expanded274 = 13120;
    $gep_int770 = 13120;
    $gep771 = (($gep_int770) + 4)|0;
    $expanded273 = $gep771;
    $expanded272 = $expanded273;
    HEAP32[$expanded273>>2] = 0;
    $expanded277 = 7800;
    $gep_int772 = 7800;
    $gep773 = (($gep_int772) + 8)|0;
    $expanded276 = $gep773;
    $expanded275 = $expanded276;
    $expanded278 = 13120;
    HEAP32[13120>>2] = $expanded275;
    $209 = $__p$i$i$i60;
    
    $expanded280 = 7856;
    $gep_int774 = 7856;
    $expanded279 = $gep_int774;
    $210 = HEAP32[$expanded279>>2]|0;
    $211 = ($210|0)==(-1);
    
    if (!($211)) {
     $gep_int775 = $__p$i$i$i60;
     $212 = $gep_int775;
     $expanded281 = 7856;
     HEAP32[$212>>2] = $expanded281;
     $gep_int776 = $__p$i$i$i60;
     $gep777 = (($gep_int776) + 4)|0;
     $213 = $gep777;
     $expanded282 = 177;
     HEAP32[$213>>2] = $expanded282;
     $gep_int778 = $__p$i$i$i60;
     $gep779 = (($gep_int778) + 8)|0;
     $214 = $gep779;
     HEAP32[$214>>2] = 0;
     __THREW__ = 0;
     $expanded284 = 7856;
     $gep_int780 = 7856;
     $expanded283 = $gep_int780;
     invoke_viii(17,$expanded283|0,$209|0,178);
     $215 = __THREW__; __THREW__ = 0;
     $216 = $215&1;
     
     if ($216) {
      label = 111;
      break;
     }
    }
    
    $expanded286 = 7856;
    $gep_int781 = 7856;
    $gep782 = (($gep_int781) + 4)|0;
    $expanded285 = $gep782;
    $217 = HEAP32[$expanded285>>2]|0;
    $218 = (($217) + -1)|0;
    __THREW__ = 0;
    $expanded287 = 13120;
    invoke_viii(20,$this|0,$expanded287|0,$218|0);
    $219 = __THREW__; __THREW__ = 0;
    $220 = $219&1;
    
    if ($220) {
     label = 111;
     break;
    }
    $expanded290 = 13112;
    $gep_int783 = 13112;
    $gep784 = (($gep_int783) + 4)|0;
    $expanded289 = $gep784;
    $expanded288 = $expanded289;
    HEAP32[$expanded289>>2] = 0;
    $expanded293 = 7864;
    $gep_int785 = 7864;
    $gep786 = (($gep_int785) + 8)|0;
    $expanded292 = $gep786;
    $expanded291 = $expanded292;
    $expanded294 = 13112;
    HEAP32[13112>>2] = $expanded291;
    $221 = $__p$i$i$i64;
    
    $expanded296 = 7920;
    $gep_int787 = 7920;
    $expanded295 = $gep_int787;
    $222 = HEAP32[$expanded295>>2]|0;
    $223 = ($222|0)==(-1);
    
    if (!($223)) {
     $gep_int788 = $__p$i$i$i64;
     $224 = $gep_int788;
     $expanded297 = 7920;
     HEAP32[$224>>2] = $expanded297;
     $gep_int789 = $__p$i$i$i64;
     $gep790 = (($gep_int789) + 4)|0;
     $225 = $gep790;
     $expanded298 = 177;
     HEAP32[$225>>2] = $expanded298;
     $gep_int791 = $__p$i$i$i64;
     $gep792 = (($gep_int791) + 8)|0;
     $226 = $gep792;
     HEAP32[$226>>2] = 0;
     __THREW__ = 0;
     $expanded300 = 7920;
     $gep_int793 = 7920;
     $expanded299 = $gep_int793;
     invoke_viii(17,$expanded299|0,$221|0,178);
     $227 = __THREW__; __THREW__ = 0;
     $228 = $227&1;
     
     if ($228) {
      label = 111;
      break;
     }
    }
    
    $expanded302 = 7920;
    $gep_int794 = 7920;
    $gep795 = (($gep_int794) + 4)|0;
    $expanded301 = $gep795;
    $229 = HEAP32[$expanded301>>2]|0;
    $230 = (($229) + -1)|0;
    __THREW__ = 0;
    $expanded303 = 13112;
    invoke_viii(20,$this|0,$expanded303|0,$230|0);
    $231 = __THREW__; __THREW__ = 0;
    $232 = $231&1;
    
    if ($232) {
     label = 111;
     break;
    }
    $expanded306 = 13104;
    $gep_int796 = 13104;
    $gep797 = (($gep_int796) + 4)|0;
    $expanded305 = $gep797;
    $expanded304 = $expanded305;
    HEAP32[$expanded305>>2] = 0;
    $expanded309 = 7928;
    $gep_int798 = 7928;
    $gep799 = (($gep_int798) + 8)|0;
    $expanded308 = $gep799;
    $expanded307 = $expanded308;
    $expanded310 = 13104;
    HEAP32[13104>>2] = $expanded307;
    $233 = $__p$i$i$i68;
    
    $expanded312 = 7984;
    $gep_int800 = 7984;
    $expanded311 = $gep_int800;
    $234 = HEAP32[$expanded311>>2]|0;
    $235 = ($234|0)==(-1);
    
    if (!($235)) {
     $gep_int801 = $__p$i$i$i68;
     $236 = $gep_int801;
     $expanded313 = 7984;
     HEAP32[$236>>2] = $expanded313;
     $gep_int802 = $__p$i$i$i68;
     $gep803 = (($gep_int802) + 4)|0;
     $237 = $gep803;
     $expanded314 = 177;
     HEAP32[$237>>2] = $expanded314;
     $gep_int804 = $__p$i$i$i68;
     $gep805 = (($gep_int804) + 8)|0;
     $238 = $gep805;
     HEAP32[$238>>2] = 0;
     __THREW__ = 0;
     $expanded316 = 7984;
     $gep_int806 = 7984;
     $expanded315 = $gep_int806;
     invoke_viii(17,$expanded315|0,$233|0,178);
     $239 = __THREW__; __THREW__ = 0;
     $240 = $239&1;
     
     if ($240) {
      label = 111;
      break;
     }
    }
    
    $expanded318 = 7984;
    $gep_int807 = 7984;
    $gep808 = (($gep_int807) + 4)|0;
    $expanded317 = $gep808;
    $241 = HEAP32[$expanded317>>2]|0;
    $242 = (($241) + -1)|0;
    __THREW__ = 0;
    $expanded319 = 13104;
    invoke_viii(20,$this|0,$expanded319|0,$242|0);
    $243 = __THREW__; __THREW__ = 0;
    $244 = $243&1;
    
    if ($244) {
     label = 111;
     break;
    }
    $expanded322 = 13096;
    $gep_int809 = 13096;
    $gep810 = (($gep_int809) + 4)|0;
    $expanded321 = $gep810;
    $expanded320 = $expanded321;
    HEAP32[$expanded321>>2] = 0;
    $expanded325 = 7992;
    $gep_int811 = 7992;
    $gep812 = (($gep_int811) + 8)|0;
    $expanded324 = $gep812;
    $expanded323 = $expanded324;
    $expanded326 = 13096;
    HEAP32[13096>>2] = $expanded323;
    $245 = $__p$i$i$i72;
    
    $expanded328 = 8048;
    $gep_int813 = 8048;
    $expanded327 = $gep_int813;
    $246 = HEAP32[$expanded327>>2]|0;
    $247 = ($246|0)==(-1);
    
    if (!($247)) {
     $gep_int814 = $__p$i$i$i72;
     $248 = $gep_int814;
     $expanded329 = 8048;
     HEAP32[$248>>2] = $expanded329;
     $gep_int815 = $__p$i$i$i72;
     $gep816 = (($gep_int815) + 4)|0;
     $249 = $gep816;
     $expanded330 = 177;
     HEAP32[$249>>2] = $expanded330;
     $gep_int817 = $__p$i$i$i72;
     $gep818 = (($gep_int817) + 8)|0;
     $250 = $gep818;
     HEAP32[$250>>2] = 0;
     __THREW__ = 0;
     $expanded332 = 8048;
     $gep_int819 = 8048;
     $expanded331 = $gep_int819;
     invoke_viii(17,$expanded331|0,$245|0,178);
     $251 = __THREW__; __THREW__ = 0;
     $252 = $251&1;
     
     if ($252) {
      label = 111;
      break;
     }
    }
    
    $expanded334 = 8048;
    $gep_int820 = 8048;
    $gep821 = (($gep_int820) + 4)|0;
    $expanded333 = $gep821;
    $253 = HEAP32[$expanded333>>2]|0;
    $254 = (($253) + -1)|0;
    __THREW__ = 0;
    $expanded335 = 13096;
    invoke_viii(20,$this|0,$expanded335|0,$254|0);
    $255 = __THREW__; __THREW__ = 0;
    $256 = $255&1;
    
    if ($256) {
     label = 111;
     break;
    }
    $expanded338 = 13088;
    $gep_int822 = 13088;
    $gep823 = (($gep_int822) + 4)|0;
    $expanded337 = $gep823;
    $expanded336 = $expanded337;
    HEAP32[$expanded337>>2] = 0;
    $expanded341 = 8056;
    $gep_int824 = 8056;
    $gep825 = (($gep_int824) + 8)|0;
    $expanded340 = $gep825;
    $expanded339 = $expanded340;
    $expanded342 = 13088;
    HEAP32[13088>>2] = $expanded339;
    $257 = $__p$i$i$i76;
    
    $expanded344 = 8088;
    $gep_int826 = 8088;
    $expanded343 = $gep_int826;
    $258 = HEAP32[$expanded343>>2]|0;
    $259 = ($258|0)==(-1);
    
    if (!($259)) {
     $gep_int827 = $__p$i$i$i76;
     $260 = $gep_int827;
     $expanded345 = 8088;
     HEAP32[$260>>2] = $expanded345;
     $gep_int828 = $__p$i$i$i76;
     $gep829 = (($gep_int828) + 4)|0;
     $261 = $gep829;
     $expanded346 = 177;
     HEAP32[$261>>2] = $expanded346;
     $gep_int830 = $__p$i$i$i76;
     $gep831 = (($gep_int830) + 8)|0;
     $262 = $gep831;
     HEAP32[$262>>2] = 0;
     __THREW__ = 0;
     $expanded348 = 8088;
     $gep_int832 = 8088;
     $expanded347 = $gep_int832;
     invoke_viii(17,$expanded347|0,$257|0,178);
     $263 = __THREW__; __THREW__ = 0;
     $264 = $263&1;
     
     if ($264) {
      label = 111;
      break;
     }
    }
    
    $expanded350 = 8088;
    $gep_int833 = 8088;
    $gep834 = (($gep_int833) + 4)|0;
    $expanded349 = $gep834;
    $265 = HEAP32[$expanded349>>2]|0;
    $266 = (($265) + -1)|0;
    __THREW__ = 0;
    $expanded351 = 13088;
    invoke_viii(20,$this|0,$expanded351|0,$266|0);
    $267 = __THREW__; __THREW__ = 0;
    $268 = $267&1;
    
    if ($268) {
     label = 111;
     break;
    }
    $expanded354 = 13080;
    $gep_int835 = 13080;
    $gep836 = (($gep_int835) + 4)|0;
    $expanded353 = $gep836;
    $expanded352 = $expanded353;
    HEAP32[$expanded353>>2] = 0;
    $expanded357 = 8136;
    $gep_int837 = 8136;
    $gep838 = (($gep_int837) + 8)|0;
    $expanded356 = $gep838;
    $expanded355 = $expanded356;
    $expanded358 = 13080;
    HEAP32[13080>>2] = $expanded355;
    $269 = $__p$i$i$i80;
    
    $expanded360 = 8168;
    $gep_int839 = 8168;
    $expanded359 = $gep_int839;
    $270 = HEAP32[$expanded359>>2]|0;
    $271 = ($270|0)==(-1);
    
    if (!($271)) {
     $gep_int840 = $__p$i$i$i80;
     $272 = $gep_int840;
     $expanded361 = 8168;
     HEAP32[$272>>2] = $expanded361;
     $gep_int841 = $__p$i$i$i80;
     $gep842 = (($gep_int841) + 4)|0;
     $273 = $gep842;
     $expanded362 = 177;
     HEAP32[$273>>2] = $expanded362;
     $gep_int843 = $__p$i$i$i80;
     $gep844 = (($gep_int843) + 8)|0;
     $274 = $gep844;
     HEAP32[$274>>2] = 0;
     __THREW__ = 0;
     $expanded364 = 8168;
     $gep_int845 = 8168;
     $expanded363 = $gep_int845;
     invoke_viii(17,$expanded363|0,$269|0,178);
     $275 = __THREW__; __THREW__ = 0;
     $276 = $275&1;
     
     if ($276) {
      label = 111;
      break;
     }
    }
    
    $expanded366 = 8168;
    $gep_int846 = 8168;
    $gep847 = (($gep_int846) + 4)|0;
    $expanded365 = $gep847;
    $277 = HEAP32[$expanded365>>2]|0;
    $278 = (($277) + -1)|0;
    __THREW__ = 0;
    $expanded367 = 13080;
    invoke_viii(20,$this|0,$expanded367|0,$278|0);
    $279 = __THREW__; __THREW__ = 0;
    $280 = $279&1;
    
    if ($280) {
     label = 111;
     break;
    }
    $expanded370 = 13072;
    $gep_int848 = 13072;
    $gep849 = (($gep_int848) + 4)|0;
    $expanded369 = $gep849;
    $expanded368 = $expanded369;
    HEAP32[$expanded369>>2] = 0;
    $expanded373 = 8192;
    $gep_int850 = 8192;
    $gep851 = (($gep_int850) + 8)|0;
    $expanded372 = $gep851;
    $expanded371 = $expanded372;
    $expanded374 = 13072;
    HEAP32[13072>>2] = $expanded371;
    $281 = $__p$i$i$i84;
    
    $expanded376 = 8224;
    $gep_int852 = 8224;
    $expanded375 = $gep_int852;
    $282 = HEAP32[$expanded375>>2]|0;
    $283 = ($282|0)==(-1);
    
    if (!($283)) {
     $gep_int853 = $__p$i$i$i84;
     $284 = $gep_int853;
     $expanded377 = 8224;
     HEAP32[$284>>2] = $expanded377;
     $gep_int854 = $__p$i$i$i84;
     $gep855 = (($gep_int854) + 4)|0;
     $285 = $gep855;
     $expanded378 = 177;
     HEAP32[$285>>2] = $expanded378;
     $gep_int856 = $__p$i$i$i84;
     $gep857 = (($gep_int856) + 8)|0;
     $286 = $gep857;
     HEAP32[$286>>2] = 0;
     __THREW__ = 0;
     $expanded380 = 8224;
     $gep_int858 = 8224;
     $expanded379 = $gep_int858;
     invoke_viii(17,$expanded379|0,$281|0,178);
     $287 = __THREW__; __THREW__ = 0;
     $288 = $287&1;
     
     if ($288) {
      label = 111;
      break;
     }
    }
    
    $expanded382 = 8224;
    $gep_int859 = 8224;
    $gep860 = (($gep_int859) + 4)|0;
    $expanded381 = $gep860;
    $289 = HEAP32[$expanded381>>2]|0;
    $290 = (($289) + -1)|0;
    __THREW__ = 0;
    $expanded383 = 13072;
    invoke_viii(20,$this|0,$expanded383|0,$290|0);
    $291 = __THREW__; __THREW__ = 0;
    $292 = $291&1;
    
    if ($292) {
     label = 111;
     break;
    }
    $expanded386 = 13064;
    $gep_int861 = 13064;
    $gep862 = (($gep_int861) + 4)|0;
    $expanded385 = $gep862;
    $expanded384 = $expanded385;
    HEAP32[$expanded385>>2] = 0;
    $expanded389 = 8240;
    $gep_int863 = 8240;
    $gep864 = (($gep_int863) + 8)|0;
    $expanded388 = $gep864;
    $expanded387 = $expanded388;
    $expanded390 = 13064;
    HEAP32[13064>>2] = $expanded387;
    $293 = $__p$i$i$i88;
    
    $expanded392 = 8272;
    $gep_int865 = 8272;
    $expanded391 = $gep_int865;
    $294 = HEAP32[$expanded391>>2]|0;
    $295 = ($294|0)==(-1);
    
    if (!($295)) {
     $gep_int866 = $__p$i$i$i88;
     $296 = $gep_int866;
     $expanded393 = 8272;
     HEAP32[$296>>2] = $expanded393;
     $gep_int867 = $__p$i$i$i88;
     $gep868 = (($gep_int867) + 4)|0;
     $297 = $gep868;
     $expanded394 = 177;
     HEAP32[$297>>2] = $expanded394;
     $gep_int869 = $__p$i$i$i88;
     $gep870 = (($gep_int869) + 8)|0;
     $298 = $gep870;
     HEAP32[$298>>2] = 0;
     __THREW__ = 0;
     $expanded396 = 8272;
     $gep_int871 = 8272;
     $expanded395 = $gep_int871;
     invoke_viii(17,$expanded395|0,$293|0,178);
     $299 = __THREW__; __THREW__ = 0;
     $300 = $299&1;
     
     if ($300) {
      label = 111;
      break;
     }
    }
    
    $expanded398 = 8272;
    $gep_int872 = 8272;
    $gep873 = (($gep_int872) + 4)|0;
    $expanded397 = $gep873;
    $301 = HEAP32[$expanded397>>2]|0;
    $302 = (($301) + -1)|0;
    __THREW__ = 0;
    $expanded399 = 13064;
    invoke_viii(20,$this|0,$expanded399|0,$302|0);
    $303 = __THREW__; __THREW__ = 0;
    $304 = $303&1;
    
    if ($304) {
     label = 111;
     break;
    }
    $expanded402 = 13048;
    $gep_int874 = 13048;
    $gep875 = (($gep_int874) + 4)|0;
    $expanded401 = $gep875;
    $expanded400 = $expanded401;
    HEAP32[$expanded401>>2] = 0;
    $expanded405 = 7288;
    $gep_int876 = 7288;
    $gep877 = (($gep_int876) + 8)|0;
    $expanded404 = $gep877;
    $expanded403 = $expanded404;
    $expanded406 = 13048;
    HEAP32[13048>>2] = $expanded403;
    $expanded409 = 7288;
    $gep_int878 = 7288;
    $gep879 = (($gep_int878) + 56)|0;
    $expanded408 = $gep879;
    $expanded407 = $expanded408;
    $expanded412 = 13048;
    $gep_int880 = 13048;
    $gep881 = (($gep_int880) + 8)|0;
    $expanded411 = $gep881;
    $expanded410 = $expanded411;
    HEAP32[$expanded411>>2] = $expanded407;
    $305 = $__p$i$i$i92;
    
    $expanded414 = 7376;
    $gep_int882 = 7376;
    $expanded413 = $gep_int882;
    $306 = HEAP32[$expanded413>>2]|0;
    $307 = ($306|0)==(-1);
    
    if (!($307)) {
     $gep_int883 = $__p$i$i$i92;
     $308 = $gep_int883;
     $expanded415 = 7376;
     HEAP32[$308>>2] = $expanded415;
     $gep_int884 = $__p$i$i$i92;
     $gep885 = (($gep_int884) + 4)|0;
     $309 = $gep885;
     $expanded416 = 177;
     HEAP32[$309>>2] = $expanded416;
     $gep_int886 = $__p$i$i$i92;
     $gep887 = (($gep_int886) + 8)|0;
     $310 = $gep887;
     HEAP32[$310>>2] = 0;
     __THREW__ = 0;
     $expanded418 = 7376;
     $gep_int888 = 7376;
     $expanded417 = $gep_int888;
     invoke_viii(17,$expanded417|0,$305|0,178);
     $311 = __THREW__; __THREW__ = 0;
     $312 = $311&1;
     
     if ($312) {
      label = 111;
      break;
     }
    }
    
    $expanded420 = 7376;
    $gep_int889 = 7376;
    $gep890 = (($gep_int889) + 4)|0;
    $expanded419 = $gep890;
    $313 = HEAP32[$expanded419>>2]|0;
    $314 = (($313) + -1)|0;
    __THREW__ = 0;
    $expanded421 = 13048;
    invoke_viii(20,$this|0,$expanded421|0,$314|0);
    $315 = __THREW__; __THREW__ = 0;
    $316 = $315&1;
    
    if ($316) {
     label = 111;
     break;
    }
    $expanded424 = 13032;
    $gep_int891 = 13032;
    $gep892 = (($gep_int891) + 4)|0;
    $expanded423 = $gep892;
    $expanded422 = $expanded423;
    HEAP32[$expanded423>>2] = 0;
    $expanded427 = 7440;
    $gep_int893 = 7440;
    $gep894 = (($gep_int893) + 8)|0;
    $expanded426 = $gep894;
    $expanded425 = $expanded426;
    $expanded428 = 13032;
    HEAP32[13032>>2] = $expanded425;
    $expanded431 = 7440;
    $gep_int895 = 7440;
    $gep896 = (($gep_int895) + 56)|0;
    $expanded430 = $gep896;
    $expanded429 = $expanded430;
    $expanded434 = 13032;
    $gep_int897 = 13032;
    $gep898 = (($gep_int897) + 8)|0;
    $expanded433 = $gep898;
    $expanded432 = $expanded433;
    HEAP32[$expanded433>>2] = $expanded429;
    $317 = $__p$i$i$i96;
    
    $expanded436 = 7528;
    $gep_int899 = 7528;
    $expanded435 = $gep_int899;
    $318 = HEAP32[$expanded435>>2]|0;
    $319 = ($318|0)==(-1);
    
    if (!($319)) {
     $gep_int900 = $__p$i$i$i96;
     $320 = $gep_int900;
     $expanded437 = 7528;
     HEAP32[$320>>2] = $expanded437;
     $gep_int901 = $__p$i$i$i96;
     $gep902 = (($gep_int901) + 4)|0;
     $321 = $gep902;
     $expanded438 = 177;
     HEAP32[$321>>2] = $expanded438;
     $gep_int903 = $__p$i$i$i96;
     $gep904 = (($gep_int903) + 8)|0;
     $322 = $gep904;
     HEAP32[$322>>2] = 0;
     __THREW__ = 0;
     $expanded440 = 7528;
     $gep_int905 = 7528;
     $expanded439 = $gep_int905;
     invoke_viii(17,$expanded439|0,$317|0,178);
     $323 = __THREW__; __THREW__ = 0;
     $324 = $323&1;
     
     if ($324) {
      label = 111;
      break;
     }
    }
    
    $expanded442 = 7528;
    $gep_int906 = 7528;
    $gep907 = (($gep_int906) + 4)|0;
    $expanded441 = $gep907;
    $325 = HEAP32[$expanded441>>2]|0;
    $326 = (($325) + -1)|0;
    __THREW__ = 0;
    $expanded443 = 13032;
    invoke_viii(20,$this|0,$expanded443|0,$326|0);
    $327 = __THREW__; __THREW__ = 0;
    $328 = $327&1;
    
    if ($328) {
     label = 111;
     break;
    }
    $expanded446 = 13016;
    $gep_int908 = 13016;
    $gep909 = (($gep_int908) + 4)|0;
    $expanded445 = $gep909;
    $expanded444 = $expanded445;
    HEAP32[$expanded445>>2] = 0;
    $expanded449 = 9384;
    $gep_int910 = 9384;
    $gep911 = (($gep_int910) + 8)|0;
    $expanded448 = $gep911;
    $expanded447 = $expanded448;
    $expanded450 = 13016;
    HEAP32[13016>>2] = $expanded447;
    $gep_int912 = 8376;
    $expanded451 = $gep_int912;
    $329 = HEAP8[$expanded451]|0;
    $330 = ($329<<24>>24)==(0);
    
    do {
     if ($330) {
      $expanded452 = 8376;
      $331 = ___cxa_guard_acquire($expanded452|0)|0;
      $332 = ($331|0)==(0);
      
      if ($332) {
       break;
      }
      __THREW__ = 0;
      $gep_int913 = 8384;
      $expanded453 = $gep_int913;
      $333 = invoke_iiii(30,2147483647,$expanded453|0,0)|0;
      $334 = __THREW__; __THREW__ = 0;
      $335 = $334&1;
      
      if ($335) {
       $expanded456 = 69;
       $336 = ___cxa_find_matching_catch(-1,-1)|0;
       $337 = tempRet0;
       $expanded457 = 8376;
       ___cxa_guard_abort($expanded457|0);
       
       $eh$lpad$body$index4Z2D = $337;$eh$lpad$body$indexZ2D = $336;
       break L14;
      } else {
       $expanded454 = 8368;
       HEAP32[8368>>2] = $333;
       $expanded455 = 8376;
       ___cxa_guard_release($expanded455|0);
       
       break;
      }
     }
    } while(0);
    $expanded459 = 8368;
    $338 = HEAP32[8368>>2]|0;
    $expanded462 = 13016;
    $gep_int914 = 13016;
    $gep915 = (($gep_int914) + 8)|0;
    $expanded461 = $gep915;
    $expanded460 = $expanded461;
    HEAP32[$expanded461>>2] = $338;
    $expanded465 = 7736;
    $gep_int916 = 7736;
    $gep917 = (($gep_int916) + 8)|0;
    $expanded464 = $gep917;
    $expanded463 = $expanded464;
    $expanded466 = 13016;
    HEAP32[13016>>2] = $expanded463;
    $339 = $__p$i$i$i102;
    
    $expanded468 = 7760;
    $gep_int918 = 7760;
    $expanded467 = $gep_int918;
    $340 = HEAP32[$expanded467>>2]|0;
    $341 = ($340|0)==(-1);
    
    if (!($341)) {
     $gep_int919 = $__p$i$i$i102;
     $342 = $gep_int919;
     $expanded469 = 7760;
     HEAP32[$342>>2] = $expanded469;
     $gep_int920 = $__p$i$i$i102;
     $gep921 = (($gep_int920) + 4)|0;
     $343 = $gep921;
     $expanded470 = 177;
     HEAP32[$343>>2] = $expanded470;
     $gep_int922 = $__p$i$i$i102;
     $gep923 = (($gep_int922) + 8)|0;
     $344 = $gep923;
     HEAP32[$344>>2] = 0;
     __THREW__ = 0;
     $expanded472 = 7760;
     $gep_int924 = 7760;
     $expanded471 = $gep_int924;
     invoke_viii(17,$expanded471|0,$339|0,178);
     $345 = __THREW__; __THREW__ = 0;
     $346 = $345&1;
     
     if ($346) {
      label = 111;
      break;
     }
    }
    
    $expanded474 = 7760;
    $gep_int925 = 7760;
    $gep926 = (($gep_int925) + 4)|0;
    $expanded473 = $gep926;
    $347 = HEAP32[$expanded473>>2]|0;
    $348 = (($347) + -1)|0;
    __THREW__ = 0;
    $expanded475 = 13016;
    invoke_viii(20,$this|0,$expanded475|0,$348|0);
    $349 = __THREW__; __THREW__ = 0;
    $350 = $349&1;
    
    if ($350) {
     label = 111;
     break;
    }
    $expanded478 = 13000;
    $gep_int927 = 13000;
    $gep928 = (($gep_int927) + 4)|0;
    $expanded477 = $gep928;
    $expanded476 = $expanded477;
    HEAP32[$expanded477>>2] = 0;
    $expanded481 = 9384;
    $gep_int929 = 9384;
    $gep930 = (($gep_int929) + 8)|0;
    $expanded480 = $gep930;
    $expanded479 = $expanded480;
    $expanded482 = 13000;
    HEAP32[13000>>2] = $expanded479;
    $gep_int931 = 8376;
    $expanded483 = $gep_int931;
    $351 = HEAP8[$expanded483]|0;
    $352 = ($351<<24>>24)==(0);
    
    do {
     if ($352) {
      $expanded484 = 8376;
      $353 = ___cxa_guard_acquire($expanded484|0)|0;
      $354 = ($353|0)==(0);
      
      if ($354) {
       break;
      }
      __THREW__ = 0;
      $gep_int932 = 8384;
      $expanded485 = $gep_int932;
      $355 = invoke_iiii(30,2147483647,$expanded485|0,0)|0;
      $356 = __THREW__; __THREW__ = 0;
      $357 = $356&1;
      
      if ($357) {
       $expanded488 = 69;
       $358 = ___cxa_find_matching_catch(-1,-1)|0;
       $359 = tempRet0;
       $expanded489 = 8376;
       ___cxa_guard_abort($expanded489|0);
       
       $eh$lpad$body$index4Z2D = $359;$eh$lpad$body$indexZ2D = $358;
       break L14;
      } else {
       $expanded486 = 8368;
       HEAP32[8368>>2] = $355;
       $expanded487 = 8376;
       ___cxa_guard_release($expanded487|0);
       
       break;
      }
     }
    } while(0);
    $expanded491 = 8368;
    $360 = HEAP32[8368>>2]|0;
    $expanded494 = 13000;
    $gep_int933 = 13000;
    $gep934 = (($gep_int933) + 8)|0;
    $expanded493 = $gep934;
    $expanded492 = $expanded493;
    HEAP32[$expanded493>>2] = $360;
    $expanded497 = 7768;
    $gep_int935 = 7768;
    $gep936 = (($gep_int935) + 8)|0;
    $expanded496 = $gep936;
    $expanded495 = $expanded496;
    $expanded498 = 13000;
    HEAP32[13000>>2] = $expanded495;
    $361 = $__p$i$i$i109;
    
    $expanded500 = 7792;
    $gep_int937 = 7792;
    $expanded499 = $gep_int937;
    $362 = HEAP32[$expanded499>>2]|0;
    $363 = ($362|0)==(-1);
    
    if (!($363)) {
     $gep_int938 = $__p$i$i$i109;
     $364 = $gep_int938;
     $expanded501 = 7792;
     HEAP32[$364>>2] = $expanded501;
     $gep_int939 = $__p$i$i$i109;
     $gep940 = (($gep_int939) + 4)|0;
     $365 = $gep940;
     $expanded502 = 177;
     HEAP32[$365>>2] = $expanded502;
     $gep_int941 = $__p$i$i$i109;
     $gep942 = (($gep_int941) + 8)|0;
     $366 = $gep942;
     HEAP32[$366>>2] = 0;
     __THREW__ = 0;
     $expanded504 = 7792;
     $gep_int943 = 7792;
     $expanded503 = $gep_int943;
     invoke_viii(17,$expanded503|0,$361|0,178);
     $367 = __THREW__; __THREW__ = 0;
     $368 = $367&1;
     
     if ($368) {
      label = 111;
      break;
     }
    }
    
    $expanded506 = 7792;
    $gep_int944 = 7792;
    $gep945 = (($gep_int944) + 4)|0;
    $expanded505 = $gep945;
    $369 = HEAP32[$expanded505>>2]|0;
    $370 = (($369) + -1)|0;
    __THREW__ = 0;
    $expanded507 = 13000;
    invoke_viii(20,$this|0,$expanded507|0,$370|0);
    $371 = __THREW__; __THREW__ = 0;
    $372 = $371&1;
    
    if ($372) {
     label = 111;
     break;
    }
    $expanded510 = 12992;
    $gep_int946 = 12992;
    $gep947 = (($gep_int946) + 4)|0;
    $expanded509 = $gep947;
    $expanded508 = $expanded509;
    HEAP32[$expanded509>>2] = 0;
    $expanded513 = 8280;
    $gep_int948 = 8280;
    $gep949 = (($gep_int948) + 8)|0;
    $expanded512 = $gep949;
    $expanded511 = $expanded512;
    $expanded514 = 12992;
    HEAP32[12992>>2] = $expanded511;
    $373 = $__p$i$i$i113;
    
    $expanded516 = 8312;
    $gep_int950 = 8312;
    $expanded515 = $gep_int950;
    $374 = HEAP32[$expanded515>>2]|0;
    $375 = ($374|0)==(-1);
    
    if (!($375)) {
     $gep_int951 = $__p$i$i$i113;
     $376 = $gep_int951;
     $expanded517 = 8312;
     HEAP32[$376>>2] = $expanded517;
     $gep_int952 = $__p$i$i$i113;
     $gep953 = (($gep_int952) + 4)|0;
     $377 = $gep953;
     $expanded518 = 177;
     HEAP32[$377>>2] = $expanded518;
     $gep_int954 = $__p$i$i$i113;
     $gep955 = (($gep_int954) + 8)|0;
     $378 = $gep955;
     HEAP32[$378>>2] = 0;
     __THREW__ = 0;
     $expanded520 = 8312;
     $gep_int956 = 8312;
     $expanded519 = $gep_int956;
     invoke_viii(17,$expanded519|0,$373|0,178);
     $379 = __THREW__; __THREW__ = 0;
     $380 = $379&1;
     
     if ($380) {
      label = 111;
      break;
     }
    }
    
    $expanded522 = 8312;
    $gep_int957 = 8312;
    $gep958 = (($gep_int957) + 4)|0;
    $expanded521 = $gep958;
    $381 = HEAP32[$expanded521>>2]|0;
    $382 = (($381) + -1)|0;
    __THREW__ = 0;
    $expanded523 = 12992;
    invoke_viii(20,$this|0,$expanded523|0,$382|0);
    $383 = __THREW__; __THREW__ = 0;
    $384 = $383&1;
    
    if ($384) {
     label = 111;
     break;
    }
    $expanded526 = 12984;
    $gep_int959 = 12984;
    $gep960 = (($gep_int959) + 4)|0;
    $expanded525 = $gep960;
    $expanded524 = $expanded525;
    HEAP32[$expanded525>>2] = 0;
    $expanded529 = 8320;
    $gep_int961 = 8320;
    $gep962 = (($gep_int961) + 8)|0;
    $expanded528 = $gep962;
    $expanded527 = $expanded528;
    $expanded530 = 12984;
    HEAP32[12984>>2] = $expanded527;
    $385 = $__p$i$i$i;
    
    $expanded532 = 8352;
    $gep_int963 = 8352;
    $expanded531 = $gep_int963;
    $386 = HEAP32[$expanded531>>2]|0;
    $387 = ($386|0)==(-1);
    
    if (!($387)) {
     $gep_int964 = $__p$i$i$i;
     $388 = $gep_int964;
     $expanded533 = 8352;
     HEAP32[$388>>2] = $expanded533;
     $gep_int965 = $__p$i$i$i;
     $gep966 = (($gep_int965) + 4)|0;
     $389 = $gep966;
     $expanded534 = 177;
     HEAP32[$389>>2] = $expanded534;
     $gep_int967 = $__p$i$i$i;
     $gep968 = (($gep_int967) + 8)|0;
     $390 = $gep968;
     HEAP32[$390>>2] = 0;
     __THREW__ = 0;
     $expanded536 = 8352;
     $gep_int969 = 8352;
     $expanded535 = $gep_int969;
     invoke_viii(17,$expanded535|0,$385|0,178);
     $391 = __THREW__; __THREW__ = 0;
     $392 = $391&1;
     
     if ($392) {
      label = 111;
      break;
     }
    }
    
    $expanded538 = 8352;
    $gep_int970 = 8352;
    $gep971 = (($gep_int970) + 4)|0;
    $expanded537 = $gep971;
    $393 = HEAP32[$expanded537>>2]|0;
    $394 = (($393) + -1)|0;
    __THREW__ = 0;
    $expanded539 = 12984;
    invoke_viii(20,$this|0,$expanded539|0,$394|0);
    $395 = __THREW__; __THREW__ = 0;
    $396 = $395&1;
    
    if ($396) {
     label = 111;
     break;
    }
    STACKTOP = sp;return;
   }
  } while(0);
  if ((label|0) == 111) {
   $expanded541 = 69;
   $399 = ___cxa_find_matching_catch(-1,-1)|0;
   $400 = tempRet0;
   
   $eh$lpad$body$index4Z2D = $400;$eh$lpad$body$indexZ2D = $399;
  }
  
  
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
  
  $$0 = $eh$lpad$body$index4Z2D;$$01 = $eh$lpad$body$indexZ2D;
 }
 
 
 $401 = HEAP32[$4>>2]|0;
 $402 = ($401|0)==(0);
 
 if ($402) {
  ___resumeException($$01|0);
  // unreachable
 }
 $403 = HEAP32[$5>>2]|0;
 $404 = ($403|0)==($401|0);
 
 if (!($404)) {
  $__new_last2$i$i$i$i$i = $401;
  $gep_int972 = $403;
  $gep973 = (($gep_int972) + -4)|0;
  $scevgep$i$i$i$i$i = $gep973;
  $scevgep1$i$i$i$i$i = $scevgep$i$i$i$i$i;
  $405 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $gep_int974 = $scevgep$i$i$i$i$i;
  $gep975 = (($gep_int974) + ($405))|0;
  $uglygep$i$i$i$i$i = $gep975;
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $406 = $uglygep3$i$i$i$i$i >>> 2;
  $407 = $406 ^ -1;
  $gep_int976 = $403;
  $gep_array977 = $407<<2;
  $gep978 = (($gep_int976) + ($gep_array977))|0;
  $scevgep4$i$i$i$i$i = $gep978;
  HEAP32[$5>>2] = $scevgep4$i$i$i$i$i;
  
 }
 $408 = ($9|0)==($401|0);
 
 if ($408) {
  HEAP8[$7] = 0;
  
  ___resumeException($$01|0);
  // unreachable
 } else {
  $409 = $401;
  __ZdlPv($409);
  
  ___resumeException($$01|0);
  // unreachable
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $expanded = 0, $gep = 0, $gep10 = 0, $gep13 = 0, $gep16 = 0;
 var $gep20 = 0, $gep3 = 0, $gep6 = 0, $gep8 = 0, $gep_array = 0, $gep_array12 = 0, $gep_array15 = 0, $gep_array19 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int14 = 0, $gep_int17 = 0, $gep_int18 = 0, $gep_int2 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $scevgep$i$i$i = 0;
 var $scevgep1$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0, u$12 = 0, u$17 = 0;
 sp = STACKTOP;
 $gep_int = $f;
 $1 = $gep_int;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 $gep_int1 = $this;
 $gep = (($gep_int1) + 8)|0;
 $2 = $gep;
 $gep_int2 = $this;
 $gep3 = (($gep_int2) + 12)|0;
 $3 = $gep3;
 $4 = HEAP32[$3>>2]|0;
 $gep_int4 = $2;
 $5 = $gep_int4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 2;
 $11 = ($10>>>0)>($id>>>0);
 
 do {
  if ($11) {
   $26 = $6;
  } else {
   $12 = (($id) + 1)|0;
   $13 = ($10>>>0)<($12>>>0);
   
   if (!($13)) {
    $17 = ($10>>>0)>($12>>>0);
    
    if (!($17)) {
     $26 = $6;
     break;
    }
    $gep_int5 = $6;
    $gep_array = $12<<2;
    $gep6 = (($gep_int5) + ($gep_array))|0;
    $18 = $gep6;
    $19 = ($4|0)==($18|0);
    
    if ($19) {
     $26 = $6;
     break;
    }
    $__new_last2$i$i$i = $18;
    $gep_int7 = $4;
    $gep8 = (($gep_int7) + -4)|0;
    $scevgep$i$i$i = $gep8;
    $scevgep1$i$i$i = $scevgep$i$i$i;
    $20 = (0 - ($__new_last2$i$i$i))|0;
    $gep_int9 = $scevgep$i$i$i;
    $gep10 = (($gep_int9) + ($20))|0;
    $uglygep$i$i$i = $gep10;
    $uglygep3$i$i$i = $uglygep$i$i$i;
    $21 = $uglygep3$i$i$i >>> 2;
    $22 = $21 ^ -1;
    $gep_int11 = $4;
    $gep_array12 = $22<<2;
    $gep13 = (($gep_int11) + ($gep_array12))|0;
    $scevgep4$i$i$i = $gep13;
    HEAP32[$3>>2] = $scevgep4$i$i$i;
    
    $26 = $6;
    break;
   }
   $14 = (($12) - ($10))|0;
   __THREW__ = 0;
   invoke_vii(68,$2|0,$14|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   
   if (!($16)) {
    $$pre2 = HEAP32[$5>>2]|0;
    
    $26 = $$pre2;
    break;
   }
   $expanded = 69;
   $23 = ___cxa_find_matching_catch(-1,-1)|0;
   $24 = tempRet0;
   $25 = ($f|0)==(0);
   
   if ($25) {
    ___resumeException($23|0);
    // unreachable
   }
   u$12 = __ZNSt3__114__shared_count16__release_sharedEv($1)|0;
   
   ___resumeException($23|0);
   // unreachable
  }
 } while(0);
 
 $gep_int14 = $26;
 $gep_array15 = $id<<2;
 $gep16 = (($gep_int14) + ($gep_array15))|0;
 $27 = $gep16;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 
 if ($29) {
  $31 = $26;
  
  $gep_int18 = $31;
  $gep_array19 = $id<<2;
  $gep20 = (($gep_int18) + ($gep_array19))|0;
  $32 = $gep20;
  HEAP32[$32>>2] = $f;
  STACKTOP = sp;return;
 }
 $gep_int17 = $28;
 $30 = $gep_int17;
 u$17 = __ZNSt3__114__shared_count16__release_sharedEv($30)|0;
 $$pre = HEAP32[$5>>2]|0;
 
 $31 = $$pre;
 
 $gep_int18 = $31;
 $gep_array19 = $id<<2;
 $gep20 = (($gep_int18) + ($gep_array19))|0;
 $32 = $gep20;
 HEAP32[$32>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0;
 var $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_array = 0, $gep_array18 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int3 = 0;
 var $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, $i$02 = 0, $scevgep$i$i$i$i$i = 0, $scevgep1$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0, u$3 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 8392;
 $gep_int3 = 8392;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 12)|0;
 $2 = $gep5;
 $3 = HEAP32[$2>>2]|0;
 $gep_int6 = $this;
 $gep7 = (($gep_int6) + 8)|0;
 $4 = $gep7;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 
 if (!($6)) {
  $7 = $3;$8 = $5;$i$02 = 0;
  while(1) {
   
   
   
   $gep_int8 = $8;
   $gep_array = $i$02<<2;
   $gep9 = (($gep_int8) + ($gep_array))|0;
   $9 = $gep9;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   
   if ($11) {
    $13 = $8;$14 = $7;
   } else {
    $gep_int10 = $10;
    $12 = $gep_int10;
    u$3 = __ZNSt3__114__shared_count16__release_sharedEv($12)|0;
    $$pre = HEAP32[$2>>2]|0;
    $$pre4 = HEAP32[$4>>2]|0;
    
    $13 = $$pre4;$14 = $$pre;
   }
   
   
   $15 = (($i$02) + 1)|0;
   $16 = $14;
   $17 = $13;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($15>>>0)<($19>>>0);
   
   if ($20) {
    $7 = $14;$8 = $13;$i$02 = $15;
   } else {
    break;
   }
  }
 }
 $gep_int11 = $this;
 $gep12 = (($gep_int11) + 144)|0;
 $21 = $gep12;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($21);
 $22 = HEAP32[$4>>2]|0;
 $23 = ($22|0)==(0);
 
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = HEAP32[$2>>2]|0;
 $25 = ($24|0)==($22|0);
 
 if (!($25)) {
  $__new_last2$i$i$i$i$i = $22;
  $gep_int13 = $24;
  $gep14 = (($gep_int13) + -4)|0;
  $scevgep$i$i$i$i$i = $gep14;
  $scevgep1$i$i$i$i$i = $scevgep$i$i$i$i$i;
  $26 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $gep_int15 = $scevgep$i$i$i$i$i;
  $gep16 = (($gep_int15) + ($26))|0;
  $uglygep$i$i$i$i$i = $gep16;
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $27 = $uglygep3$i$i$i$i$i >>> 2;
  $28 = $27 ^ -1;
  $gep_int17 = $24;
  $gep_array18 = $28<<2;
  $gep19 = (($gep_int17) + ($gep_array18))|0;
  $scevgep4$i$i$i$i$i = $gep19;
  HEAP32[$2>>2] = $scevgep4$i$i$i$i$i;
  
 }
 $gep_int20 = $this;
 $gep21 = (($gep_int20) + 24)|0;
 $29 = $gep21;
 $30 = $29;
 $31 = ($30|0)==($22|0);
 
 if ($31) {
  $gep_int22 = $this;
  $gep23 = (($gep_int22) + 136)|0;
  $32 = $gep23;
  HEAP8[$32] = 0;
  
  STACKTOP = sp;return;
 } else {
  $33 = $22;
  __ZdlPv($33);
  
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16locale8__globalEv() {
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0;
 var $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep_int = 0, $gep_int19 = 0, $gep_int20 = 0, $gep_int21 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = 8456;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded15 = 8448;
  $15 = HEAP32[8448>>2]|0;
  STACKTOP = sp;return $15|0;
 }
 $expanded1 = 8456;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded15 = 8448;
  $15 = HEAP32[8448>>2]|0;
  STACKTOP = sp;return $15|0;
 }
 $gep_int19 = 8432;
 $expanded2 = $gep_int19;
 $5 = HEAP8[$expanded2]|0;
 $6 = ($5<<24>>24)==(0);
 
 do {
  if ($6) {
   $expanded3 = 8432;
   $7 = ___cxa_guard_acquire($expanded3|0)|0;
   $8 = ($7|0)==(0);
   
   if ($8) {
    break;
   }
   __THREW__ = 0;
   $expanded4 = 12824;
   invoke_vii(69,$expanded4|0,1);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if ($10) {
    $expanded16 = 69;
    $16 = ___cxa_find_matching_catch(-1,-1)|0;
    $17 = tempRet0;
    $expanded17 = 8432;
    ___cxa_guard_abort($expanded17|0);
    $expanded18 = 8456;
    ___cxa_guard_abort($expanded18|0);
    ___resumeException($16|0);
    // unreachable
   } else {
    $expanded5 = 12824;
    $expanded6 = 8416;
    HEAP32[8416>>2] = $expanded5;
    $expanded7 = 8416;
    $expanded8 = 8424;
    HEAP32[8424>>2] = $expanded7;
    $expanded9 = 8432;
    ___cxa_guard_release($expanded9|0);
    
    break;
   }
  }
 } while(0);
 $expanded10 = 8424;
 $11 = HEAP32[8424>>2]|0;
 $gep_int20 = $11;
 $12 = $gep_int20;
 $13 = HEAP32[$12>>2]|0;
 $expanded11 = 8440;
 HEAP32[8440>>2] = $13;
 $gep_int21 = $13;
 $14 = $gep_int21;
 __ZNSt3__114__shared_count12__add_sharedEv($14);
 $expanded12 = 8440;
 $expanded13 = 8448;
 HEAP32[8448>>2] = $expanded12;
 $expanded14 = 8456;
 ___cxa_guard_release($expanded14|0);
 
 $expanded15 = 8448;
 $15 = HEAP32[8448>>2]|0;
 STACKTOP = sp;return $15|0;
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $expanded = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, label = 0, sp = 0, u$5 = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $1 = invoke_i(2)|0;
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 if ($3) {
  $expanded = 69;
  $8 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$5 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable
 } else {
  $gep_int = $this;
  $4 = $gep_int;
  $gep_int1 = $1;
  $5 = $gep_int1;
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$4>>2] = $6;
  $gep_int2 = $6;
  $7 = $gep_int2;
  __ZNSt3__114__shared_count12__add_sharedEv($7);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $gep_int1 = $l;
 $2 = $gep_int1;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 $gep_int2 = $3;
 $4 = $gep_int2;
 __ZNSt3__114__shared_count12__add_sharedEv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $gep_int1 = $2;
 $3 = $gep_int1;
 u$0 = __ZNSt3__114__shared_count16__release_sharedEv($3)|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i = 0, $expanded = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep5 = 0, $gep7 = 0, $gep9 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int2 = 0, $gep_int3 = 0;
 var $gep_int4 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i = sp;
 $gep_int = $this;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i;
 
 $gep_int1 = $x;
 $4 = $gep_int1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-1);
 
 if (!($6)) {
  $gep_int2 = $__p$i$i;
  $7 = $gep_int2;
  HEAP32[$7>>2] = $x;
  $gep_int3 = $__p$i$i;
  $gep = (($gep_int3) + 4)|0;
  $8 = $gep;
  $expanded = 177;
  HEAP32[$8>>2] = $expanded;
  $gep_int4 = $__p$i$i;
  $gep5 = (($gep_int4) + 8)|0;
  $9 = $gep5;
  HEAP32[$9>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,178);
  
 }
 
 $gep_int6 = $x;
 $gep7 = (($gep_int6) + 4)|0;
 $10 = $gep7;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 $gep_int8 = $2;
 $gep9 = (($gep_int8) + 12)|0;
 $13 = $gep9;
 $14 = HEAP32[$13>>2]|0;
 $gep_int10 = $2;
 $gep11 = (($gep_int10) + 8)|0;
 $15 = $gep11;
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($20>>>0)>($12>>>0);
 
 if (!($21)) {
  $25 = 0;
  
  STACKTOP = sp;return $25|0;
 }
 $gep_int12 = $16;
 $gep_array = $12<<2;
 $gep13 = (($gep_int12) + ($gep_array))|0;
 $22 = $gep13;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 
 $25 = $24;
 
 STACKTOP = sp;return $25|0;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep7 = 0, $gep9 = 0, $gep_array = 0, $gep_int = 0, $gep_int10 = 0, $gep_int12 = 0;
 var $gep_int14 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i = sp;
 $gep_int = $this;
 $1 = $gep_int;
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i;
 
 $gep_int3 = $x;
 $4 = $gep_int3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-1);
 
 if (!($6)) {
  $gep_int4 = $__p$i$i;
  $7 = $gep_int4;
  HEAP32[$7>>2] = $x;
  $gep_int5 = $__p$i$i;
  $gep = (($gep_int5) + 4)|0;
  $8 = $gep;
  $expanded = 177;
  HEAP32[$8>>2] = $expanded;
  $gep_int6 = $__p$i$i;
  $gep7 = (($gep_int6) + 8)|0;
  $9 = $gep7;
  HEAP32[$9>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,178);
  
 }
 
 $gep_int8 = $x;
 $gep9 = (($gep_int8) + 4)|0;
 $10 = $gep9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 $gep_int10 = $2;
 $gep11 = (($gep_int10) + 12)|0;
 $13 = $gep11;
 $14 = HEAP32[$13>>2]|0;
 $gep_int12 = $2;
 $gep13 = (($gep_int12) + 8)|0;
 $15 = $gep13;
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($20>>>0)>($12>>>0);
 
 if (!($21)) {
  $25 = ___cxa_allocate_exception(4)|0;
  $26 = $25;
  __ZNSt8bad_castC2Ev($26);
  $expanded1 = 16440;
  $expanded2 = 119;
  ___cxa_throw($25|0,$expanded1|0,$expanded2|0);
  // unreachable
 }
 $gep_int14 = $16;
 $gep_array = $12<<2;
 $gep15 = (($gep_int14) + ($gep_array))|0;
 $22 = $gep15;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 
 if ($24) {
  $25 = ___cxa_allocate_exception(4)|0;
  $26 = $25;
  __ZNSt8bad_castC2Ev($26);
  $expanded1 = 16440;
  $expanded2 = 119;
  ___cxa_throw($25|0,$expanded1|0,$expanded2|0);
  // unreachable
 } else {
  STACKTOP = sp;return $23|0;
 }
 return 0|0;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==(0);
 
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = $this;
 $3 = HEAP32[$this>>2]|0;
 $gep_int = $3;
 $gep = (($gep_int) + 4)|0;
 $4 = $gep;
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 255]($this);
 
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded = 8464;
 $1 = HEAP32[8464>>2]|0;HEAP32[8464>>2] = (($1+1)|0);
 $2 = (($1) + 1)|0;
 $gep_int = $this;
 $gep = (($gep_int) + 4)|0;
 $3 = $gep;
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $isascii = 0, label = 0, sp = 0, u$3 = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 
 if (!($isascii)) {
  $10 = 0;
  
  STACKTOP = sp;return $10|0;
 }
 __THREW__ = 0;
 $1 = invoke_i(1)|0;
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 if ($3) {
  $expanded = 69;
  $4 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$3 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable
 }
 $5 = HEAP32[$1>>2]|0;
 $gep_int = $5;
 $gep_array = $c<<1;
 $gep = (($gep_int) + ($gep_array))|0;
 $6 = $gep;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & $m;
 $9 = ($8<<16>>16)!=(0);
 
 $10 = $9;
 
 STACKTOP = sp;return $10|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$off0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep4 = 0;
 var $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $isascii = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$01$lcssa = $low;
  
  STACKTOP = sp;return $$01$lcssa|0;
 } else {
  $$013 = $low;$$04 = $vec;
 }
 while(1) {
  
  
  $2 = HEAP32[$$013>>2]|0;
  $isascii = ($2>>>0)<(128);
  
  if ($isascii) {
   __THREW__ = 0;
   $3 = invoke_i(1)|0;
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   
   if ($5) {
    label = 4;
    break;
   }
   $7 = HEAP32[$3>>2]|0;
   $gep_int = $7;
   $gep_array = $2<<1;
   $gep = (($gep_int) + ($gep_array))|0;
   $8 = $gep;
   $9 = HEAP16[$8>>1]|0;
   
   $$off0 = $9;
  } else {
   $$off0 = 0;
  }
  
  HEAP16[$$04>>1] = $$off0;
  $gep_int1 = $$013;
  $gep2 = (($gep_int1) + 4)|0;
  $10 = $gep2;
  $gep_int3 = $$04;
  $gep4 = (($gep_int3) + 2)|0;
  $11 = $gep4;
  $12 = ($10|0)==($high|0);
  
  if ($12) {
   $$01$lcssa = $high;
   label = 7;
   break;
  } else {
   $$013 = $10;$$04 = $11;
  }
 }
 if ((label|0) == 4) {
  $expanded = 69;
  $6 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$4 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable
 }
 else if ((label|0) == 7) {
  
  STACKTOP = sp;return $$01$lcssa|0;
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep_array = 0, $gep_int = 0;
 var $gep_int1 = 0, $isascii = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$0$lcssa = $low;
  
  STACKTOP = sp;return $$0$lcssa|0;
 } else {
  $$02 = $low;
 }
 while(1) {
  
  $2 = HEAP32[$$02>>2]|0;
  $isascii = ($2>>>0)<(128);
  
  if ($isascii) {
   __THREW__ = 0;
   $3 = invoke_i(1)|0;
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   
   if ($5) {
    label = 4;
    break;
   }
   $7 = HEAP32[$3>>2]|0;
   $gep_int = $7;
   $gep_array = $2<<1;
   $gep = (($gep_int) + ($gep_array))|0;
   $8 = $gep;
   $9 = HEAP16[$8>>1]|0;
   $10 = $9 & $m;
   $11 = ($10<<16>>16)==(0);
   
   if (!($11)) {
    $$0$lcssa = $$02;
    label = 7;
    break;
   }
  }
  $gep_int1 = $$02;
  $gep2 = (($gep_int1) + 4)|0;
  $12 = $gep2;
  $13 = ($12|0)==($high|0);
  
  if ($13) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $12;
  }
 }
 if ((label|0) == 4) {
  $expanded = 69;
  $6 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$4 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable
 }
 else if ((label|0) == 7) {
  
  STACKTOP = sp;return $$0$lcssa|0;
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep_array = 0, $gep_int = 0;
 var $gep_int1 = 0, $isascii = 0, label = 0, sp = 0, u$5 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$0$lcssa = $low;
  
  STACKTOP = sp;return $$0$lcssa|0;
 } else {
  $$02 = $low;
 }
 while(1) {
  
  $3 = HEAP32[$$02>>2]|0;
  $isascii = ($3>>>0)<(128);
  
  if (!($isascii)) {
   $$0$lcssa = $$02;
   label = 7;
   break;
  }
  __THREW__ = 0;
  $4 = invoke_i(1)|0;
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  
  if ($6) {
   label = 5;
   break;
  }
  $8 = HEAP32[$4>>2]|0;
  $gep_int = $8;
  $gep_array = $3<<1;
  $gep = (($gep_int) + ($gep_array))|0;
  $9 = $gep;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 & $m;
  $12 = ($11<<16>>16)==(0);
  $gep_int1 = $$02;
  $gep2 = (($gep_int1) + 4)|0;
  $13 = $gep2;
  
  if ($12) {
   $$0$lcssa = $$02;
   label = 7;
   break;
  }
  $2 = ($13|0)==($high|0);
  
  if ($2) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $13;
  }
 }
 if ((label|0) == 5) {
  $expanded = 69;
  $7 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$5 = tempRet0;
  ___clang_call_terminate($7);
  // unreachable
 }
 else if ((label|0) == 7) {
  
  STACKTOP = sp;return $$0$lcssa|0;
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $expanded = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $isascii = 0, label = 0, sp = 0, u$3 = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 
 if (!($isascii)) {
  $8 = $c;
  
  STACKTOP = sp;return $8|0;
 }
 __THREW__ = 0;
 $1 = invoke_i(3)|0;
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 if ($3) {
  $expanded = 69;
  $4 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$3 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable
 }
 $5 = HEAP32[$1>>2]|0;
 $gep_int = $5;
 $gep_array = $c<<2;
 $gep = (($gep_int) + ($gep_array))|0;
 $6 = $gep;
 $7 = HEAP32[$6>>2]|0;
 
 $8 = $7;
 
 STACKTOP = sp;return $8|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0;
 var $isascii = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$0$lcssa = $low;
  
  STACKTOP = sp;return $$0$lcssa|0;
 } else {
  $$02 = $low;
 }
 while(1) {
  
  $2 = HEAP32[$$02>>2]|0;
  $isascii = ($2>>>0)<(128);
  
  if ($isascii) {
   __THREW__ = 0;
   $3 = invoke_i(3)|0;
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   
   if ($5) {
    label = 4;
    break;
   }
   $7 = HEAP32[$3>>2]|0;
   $gep_int = $7;
   $gep_array = $2<<2;
   $gep = (($gep_int) + ($gep_array))|0;
   $8 = $gep;
   $9 = HEAP32[$8>>2]|0;
   
   $10 = $9;
  } else {
   $10 = $2;
  }
  
  HEAP32[$$02>>2] = $10;
  $gep_int1 = $$02;
  $gep2 = (($gep_int1) + 4)|0;
  $11 = $gep2;
  $12 = ($11|0)==($high|0);
  
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $expanded = 69;
  $6 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$4 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable
 }
 else if ((label|0) == 7) {
  
  STACKTOP = sp;return $$0$lcssa|0;
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $expanded = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $isascii = 0, label = 0, sp = 0, u$3 = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 
 if (!($isascii)) {
  $8 = $c;
  
  STACKTOP = sp;return $8|0;
 }
 __THREW__ = 0;
 $1 = invoke_i(4)|0;
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 if ($3) {
  $expanded = 69;
  $4 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$3 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable
 }
 $5 = HEAP32[$1>>2]|0;
 $gep_int = $5;
 $gep_array = $c<<2;
 $gep = (($gep_int) + ($gep_array))|0;
 $6 = $gep;
 $7 = HEAP32[$6>>2]|0;
 
 $8 = $7;
 
 STACKTOP = sp;return $8|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0;
 var $isascii = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$0$lcssa = $low;
  
  STACKTOP = sp;return $$0$lcssa|0;
 } else {
  $$02 = $low;
 }
 while(1) {
  
  $2 = HEAP32[$$02>>2]|0;
  $isascii = ($2>>>0)<(128);
  
  if ($isascii) {
   __THREW__ = 0;
   $3 = invoke_i(4)|0;
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   
   if ($5) {
    label = 4;
    break;
   }
   $7 = HEAP32[$3>>2]|0;
   $gep_int = $7;
   $gep_array = $2<<2;
   $gep = (($gep_int) + ($gep_array))|0;
   $8 = $gep;
   $9 = HEAP32[$8>>2]|0;
   
   $10 = $9;
  } else {
   $10 = $2;
  }
  
  HEAP32[$$02>>2] = $10;
  $gep_int1 = $$02;
  $gep2 = (($gep_int1) + 4)|0;
  $11 = $gep2;
  $12 = ($11|0)==($high|0);
  
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $expanded = 69;
  $6 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$4 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable
 }
 else if ((label|0) == 7) {
  
  STACKTOP = sp;return $$0$lcssa|0;
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $c << 24 >> 24;
 STACKTOP = sp;return $1|0;
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$012$phi = 0, $$03 = 0, $$03$phi = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$01$lcssa = $low;
  
  STACKTOP = sp;return $$01$lcssa|0;
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  
  
  $2 = HEAP8[$$012]|0;
  $3 = $2 << 24 >> 24;
  HEAP32[$$03>>2] = $3;
  $gep_int = $$012;
  $gep = (($gep_int) + 1)|0;
  $4 = $gep;
  $gep_int1 = $$03;
  $gep2 = (($gep_int1) + 4)|0;
  $5 = $gep2;
  $6 = ($4|0)==($high|0);
  
  if ($6) {
   $$01$lcssa = $high;
   break;
  } else {
   $$03$phi = $5;$$012$phi = $4;$$03 = $$03$phi;$$012 = $$012$phi;
  }
 }
 
 STACKTOP = sp;return $$01$lcssa|0;
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $1 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $1 = $c&255;
 $$0 = $isascii ? $1 : $dfault;
 STACKTOP = sp;return $$0|0;
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$012$phi = 0, $$03 = 0, $$03$phi = 0, $$dfault = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0;
 var $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep4 = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$01$lcssa = $low;
  
  STACKTOP = sp;return $$01$lcssa|0;
 }
 $low5 = $low;
 $gep_int = $high;
 $gep = (($gep_int) + -4)|0;
 $scevgep = $gep;
 $scevgep4 = $scevgep;
 $2 = (0 - ($low5))|0;
 $gep_int1 = $scevgep;
 $gep2 = (($gep_int1) + ($2))|0;
 $uglygep = $gep2;
 $uglygep6 = $uglygep;
 $3 = $uglygep6 >>> 2;
 $4 = (($3) + 1)|0;
 
 $$012 = $low;$$03 = $dest;
 while(1) {
  
  
  $5 = HEAP32[$$012>>2]|0;
  $isascii = ($5>>>0)<(128);
  $6 = $5&255;
  $$dfault = $isascii ? $6 : $dfault;
  HEAP8[$$03] = $$dfault;
  $gep_int3 = $$012;
  $gep4 = (($gep_int3) + 4)|0;
  $7 = $gep4;
  $gep_int5 = $$03;
  $gep6 = (($gep_int5) + 1)|0;
  $8 = $gep6;
  $9 = ($7|0)==($high|0);
  
  if ($9) {
   break;
  } else {
   $$03$phi = $8;$$012$phi = $7;$$03 = $$03$phi;$$012 = $$012$phi;
  }
 }
 $gep_int7 = $low;
 $gep_array = $4<<2;
 $gep8 = (($gep_int7) + ($gep_array))|0;
 $scevgep7 = $gep8;
 
 $$01$lcssa = $scevgep7;
 
 STACKTOP = sp;return $$01$lcssa|0;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 8488;
 $gep_int3 = 8488;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 8)|0;
 $2 = $gep5;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 
 do {
  if (!($4)) {
   $gep_int6 = $this;
   $gep7 = (($gep_int6) + 12)|0;
   $5 = $gep7;
   $6 = HEAP8[$5]|0;
   $7 = ($6<<24>>24)==(0);
   
   if ($7) {
    break;
   }
   $8 = $3;
   __ZdaPv($8);
   
  }
 } while(0);
 $9 = $this;
 __ZdlPv($9);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 8488;
 $gep_int3 = 8488;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 8)|0;
 $2 = $gep5;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  STACKTOP = sp;return;
 }
 $gep_int6 = $this;
 $gep7 = (($gep_int6) + 12)|0;
 $5 = $gep7;
 $6 = HEAP8[$5]|0;
 $7 = ($6<<24>>24)==(0);
 
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 __ZdaPv($8);
 
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $isascii1 = 0, label = 0, sp = 0, u$3 = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 
 if (!($isascii1)) {
  $10 = $c;
  
  STACKTOP = sp;return $10|0;
 }
 __THREW__ = 0;
 $1 = invoke_i(3)|0;
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 if ($3) {
  $expanded = 69;
  $4 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$3 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable
 }
 $5 = $c&255;
 $6 = HEAP32[$1>>2]|0;
 $gep_int = $6;
 $gep_array = $5<<2;
 $gep = (($gep_int) + ($gep_array))|0;
 $7 = $gep;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 
 $10 = $9;
 
 STACKTOP = sp;return $10|0;
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep_array = 0;
 var $gep_int = 0, $gep_int1 = 0, $isascii1 = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$0$lcssa = $low;
  
  STACKTOP = sp;return $$0$lcssa|0;
 } else {
  $$03 = $low;
 }
 while(1) {
  
  $2 = HEAP8[$$03]|0;
  $isascii1 = ($2<<24>>24)>(-1);
  
  if ($isascii1) {
   __THREW__ = 0;
   $3 = invoke_i(3)|0;
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   
   if ($5) {
    label = 4;
    break;
   }
   $7 = $2 << 24 >> 24;
   $8 = HEAP32[$3>>2]|0;
   $gep_int = $8;
   $gep_array = $7<<2;
   $gep = (($gep_int) + ($gep_array))|0;
   $9 = $gep;
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   
   $12 = $11;
  } else {
   $12 = $2;
  }
  
  HEAP8[$$03] = $12;
  $gep_int1 = $$03;
  $gep2 = (($gep_int1) + 1)|0;
  $13 = $gep2;
  $14 = ($13|0)==($high|0);
  
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $expanded = 69;
  $6 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$4 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable
 }
 else if ((label|0) == 7) {
  
  STACKTOP = sp;return $$0$lcssa|0;
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep_array = 0, $gep_int = 0, $isascii1 = 0, label = 0, sp = 0, u$3 = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 
 if (!($isascii1)) {
  $10 = $c;
  
  STACKTOP = sp;return $10|0;
 }
 __THREW__ = 0;
 $1 = invoke_i(4)|0;
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 if ($3) {
  $expanded = 69;
  $4 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$3 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable
 }
 $5 = $c << 24 >> 24;
 $6 = HEAP32[$1>>2]|0;
 $gep_int = $6;
 $gep_array = $5<<2;
 $gep = (($gep_int) + ($gep_array))|0;
 $7 = $gep;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 
 $10 = $9;
 
 STACKTOP = sp;return $10|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep_array = 0;
 var $gep_int = 0, $gep_int1 = 0, $isascii1 = 0, label = 0, sp = 0, u$4 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$0$lcssa = $low;
  
  STACKTOP = sp;return $$0$lcssa|0;
 } else {
  $$03 = $low;
 }
 while(1) {
  
  $2 = HEAP8[$$03]|0;
  $isascii1 = ($2<<24>>24)>(-1);
  
  if ($isascii1) {
   __THREW__ = 0;
   $3 = invoke_i(4)|0;
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   
   if ($5) {
    label = 4;
    break;
   }
   $7 = $2 << 24 >> 24;
   $8 = HEAP32[$3>>2]|0;
   $gep_int = $8;
   $gep_array = $7<<2;
   $gep = (($gep_int) + ($gep_array))|0;
   $9 = $gep;
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   
   $12 = $11;
  } else {
   $12 = $2;
  }
  
  HEAP8[$$03] = $12;
  $gep_int1 = $$03;
  $gep2 = (($gep_int1) + 1)|0;
  $13 = $gep2;
  $14 = ($13|0)==($high|0);
  
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $expanded = 69;
  $6 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$4 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable
 }
 else if ((label|0) == 7) {
  
  STACKTOP = sp;return $$0$lcssa|0;
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return $c|0;
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$012$phi = 0, $$03 = 0, $$03$phi = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$01$lcssa = $low;
  
  STACKTOP = sp;return $$01$lcssa|0;
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  
  
  $2 = HEAP8[$$012]|0;
  HEAP8[$$03] = $2;
  $gep_int = $$012;
  $gep = (($gep_int) + 1)|0;
  $3 = $gep;
  $gep_int1 = $$03;
  $gep2 = (($gep_int1) + 1)|0;
  $4 = $gep2;
  $5 = ($3|0)==($high|0);
  
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$03$phi = $4;$$012$phi = $3;$$03 = $$03$phi;$$012 = $$012$phi;
  }
 }
 
 STACKTOP = sp;return $$01$lcssa|0;
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return $c$dfault|0;
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$013$phi = 0, $$04 = 0, $$04$phi = 0, $$dfault = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 
 if ($1) {
  $$01$lcssa = $low;
  
  STACKTOP = sp;return $$01$lcssa|0;
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  
  
  $2 = HEAP8[$$013]|0;
  $isascii2 = ($2<<24>>24)>(-1);
  $$dfault = $isascii2 ? $2 : $dfault;
  HEAP8[$$04] = $$dfault;
  $gep_int = $$013;
  $gep = (($gep_int) + 1)|0;
  $3 = $gep;
  $gep_int1 = $$04;
  $gep2 = (($gep_int1) + 1)|0;
  $4 = $gep2;
  $5 = ($3|0)==($high|0);
  
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$04$phi = $4;$$013$phi = $3;$$04 = $$04$phi;$$013 = $$013$phi;
  }
 }
 
 STACKTOP = sp;return $$01$lcssa|0;
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,u$0,$frm,u$1,$frm_nxt,$to,u$2,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 u$1 = u$1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 u$2 = u$2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,u$0,$frm,u$1,$frm_nxt,$to,u$2,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 u$1 = u$1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 u$2 = u$2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,u$0,$to,u$1,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $to = $to|0;
 u$1 = u$1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,u$0,$frm,$end,$mx) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return $5|0;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre95 = 0, $$pre98 = 0, $$pre99 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $expanded = 0;
 var $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$052$phi = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$215$phi = 0, $fend$3 = 0, $gep = 0, $gep10 = 0, $gep13 = 0, $gep15 = 0;
 var $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int9 = 0, $n$011 = 0, $n$011$phi = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0;
 var $p$012 = 0, $save_state = 0, $tmp = 0, $tmpcast = 0, label = 0, sp = 0, u$16 = 0, u$18 = 0, u$23 = 0, u$25 = 0, u$37 = 0, u$39 = 0, u$44 = 0, u$46 = 0, u$64 = 0, u$66 = 0, u$71 = 0, u$73 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $save_state = sp;
 $tmpcast = $save_state;
 $tmp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = ($frm|0)==($frm_end|0);
 
 L1: do {
  if ($1) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   
   $109 = $frm;
  } else {
   $fend$052 = $frm;
   while(1) {
    
    $3 = HEAP32[$fend$052>>2]|0;
    $4 = ($3|0)==(0);
    $gep_int = $fend$052;
    $gep = (($gep_int) + 4)|0;
    $5 = $gep;
    
    if ($4) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $2 = ($5|0)==($frm_end|0);
    
    if ($2) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$052$phi = $5;$fend$052 = $fend$052$phi;
    }
   }
   
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $6 = ($to|0)==($to_end|0);
   $or$cond46 = $1 | $6;
   
   if ($or$cond46) {
    $109 = $frm;
    break;
   }
   $7 = $st;
   $8 = $to_end;
   $gep_int9 = $this;
   $gep10 = (($gep_int9) + 8)|0;
   $9 = $gep10;
   $gep_int11 = $tmp;
   $10 = $gep_int11;
   
   $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
   while(1) {
    
    
    
    $11 = $st;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = $save_state;
    $18 = $17;
    HEAP32[$18>>2] = $13;
    $19 = (($17) + 4)|0;
    $20 = $19;
    HEAP32[$20>>2] = $16;
    $21 = $fend$149;
    $22 = $$0148;
    $23 = (($21) - ($22))|0;
    $24 = $23 >> 2;
    $25 = $$0247;
    $26 = (($8) - ($25))|0;
    $27 = HEAP32[$9>>2]|0;
    $28 = _uselocale($27|0)|0;
    __THREW__ = 0;
    $29 = invoke_iiiiii(19,$$0247|0,$frm_nxt|0,$24|0,$26|0,$st|0)|0;
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    
    if ($31) {
     label = 11;
     break;
    }
    $32 = ($28|0)==(0);
    
    if (!($32)) {
     __THREW__ = 0;
     u$16 = invoke_ii(95,$28|0)|0;
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     
     if ($34) {
      label = 10;
      break;
     }
    }
    
    if ((($29|0) == -1)) {
     label = 16;
     break;
    } else if ((($29|0) == 0)) {
     $$0 = 1;
     label = 51;
     break;
    }
    $67 = HEAP32[$to_nxt>>2]|0;
    $gep_int16 = $67;
    $gep17 = (($gep_int16) + ($29))|0;
    $68 = $gep17;
    HEAP32[$to_nxt>>2] = $68;
    $69 = ($68|0)==($to_end|0);
    
    if ($69) {
     label = 49;
     break;
    }
    $70 = ($fend$149|0)==($frm_end|0);
    
    if ($70) {
     $$pre98 = HEAP32[$frm_nxt>>2]|0;
     
     $105 = $$pre98;$106 = $68;$fend$3 = $frm_end;
    } else {
     $71 = HEAP32[$9>>2]|0;
     $72 = _uselocale($71|0)|0;
     __THREW__ = 0;
     $73 = invoke_iiii(35,$10|0,0,$st|0)|0;
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     
     if ($75) {
      label = 35;
      break;
     }
     $76 = ($72|0)==(0);
     
     if (!($76)) {
      __THREW__ = 0;
      u$64 = invoke_ii(95,$72|0)|0;
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      
      if ($78) {
       label = 34;
       break;
      }
     }
     $86 = ($73|0)==(-1);
     
     if ($86) {
      $$0 = 2;
      label = 51;
      break;
     }
     $87 = HEAP32[$to_nxt>>2]|0;
     $88 = $87;
     $89 = (($8) - ($88))|0;
     $90 = ($73>>>0)>($89>>>0);
     
     if ($90) {
      $$0 = 1;
      label = 51;
      break;
     }
     $91 = ($73|0)==(0);
     
     L23: do {
      if (!($91)) {
       $92 = $87;$n$011 = $73;$p$012 = $10;
       while(1) {
        
        
        
        $93 = HEAP8[$p$012]|0;
        $gep_int18 = $92;
        $gep19 = (($gep_int18) + 1)|0;
        $94 = $gep19;
        HEAP32[$to_nxt>>2] = $94;
        HEAP8[$92] = $93;
        $95 = (($n$011) + -1)|0;
        $96 = ($95|0)==(0);
        
        if ($96) {
         break L23;
        }
        $gep_int20 = $p$012;
        $gep21 = (($gep_int20) + 1)|0;
        $97 = $gep21;
        $$pre99 = HEAP32[$to_nxt>>2]|0;
        
        $n$011$phi = $95;$92 = $$pre99;$p$012 = $97;$n$011 = $n$011$phi;
       }
      }
     } while(0);
     $98 = HEAP32[$frm_nxt>>2]|0;
     $gep_int22 = $98;
     $gep23 = (($gep_int22) + 4)|0;
     $99 = $gep23;
     HEAP32[$frm_nxt>>2] = $99;
     $100 = ($99|0)==($frm_end|0);
     
     L28: do {
      if ($100) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$215 = $99;
       while(1) {
        
        $102 = HEAP32[$fend$215>>2]|0;
        $103 = ($102|0)==(0);
        $gep_int24 = $fend$215;
        $gep25 = (($gep_int24) + 4)|0;
        $104 = $gep25;
        
        if ($103) {
         $fend$2$lcssa = $fend$215;
         break L28;
        }
        $101 = ($104|0)==($frm_end|0);
        
        if ($101) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$215$phi = $104;$fend$215 = $fend$215$phi;
        }
       }
      }
     } while(0);
     
     $$pre95 = HEAP32[$to_nxt>>2]|0;
     
     $105 = $99;$106 = $$pre95;$fend$3 = $fend$2$lcssa;
    }
    
    
    
    $107 = ($105|0)==($frm_end|0);
    $108 = ($106|0)==($to_end|0);
    $or$cond = $107 | $108;
    
    if ($or$cond) {
     $109 = $105;
     break L1;
    } else {
     $$0148 = $105;$$0247 = $106;$fend$149 = $fend$3;
    }
   }
   if ((label|0) == 10) {
    $expanded = 69;
    $35 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$18 = tempRet0;
    ___clang_call_terminate($35);
    // unreachable
   }
   else if ((label|0) == 11) {
    $expanded1 = 69;
    $36 = ___cxa_find_matching_catch(-1,-1)|0;
    $37 = tempRet0;
    $38 = ($28|0)==(0);
    
    if ($38) {
     ___resumeException($36|0);
     // unreachable
    }
    __THREW__ = 0;
    u$23 = invoke_ii(95,$28|0)|0;
    $39 = __THREW__; __THREW__ = 0;
    $40 = $39&1;
    
    if ($40) {
     $expanded2 = 69;
     $41 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$25 = tempRet0;
     ___clang_call_terminate($41);
     // unreachable
    } else {
     ___resumeException($36|0);
     // unreachable
    }
   }
   else if ((label|0) == 16) {
    HEAP32[$to_nxt>>2] = $$0247;
    $42 = HEAP32[$frm_nxt>>2]|0;
    $43 = ($$0148|0)==($42|0);
    
    L46: do {
     if ($43) {
      $$1$lcssa = $$0148;
     } else {
      $$19 = $$0148;$44 = $$0247;
      while(1) {
       
       
       $45 = HEAP32[$$19>>2]|0;
       $46 = HEAP32[$9>>2]|0;
       $47 = _uselocale($46|0)|0;
       __THREW__ = 0;
       $48 = invoke_iiii(35,$44|0,$45|0,$tmpcast|0)|0;
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       
       if ($50) {
        break;
       }
       $51 = ($47|0)==(0);
       
       if (!($51)) {
        __THREW__ = 0;
        u$37 = invoke_ii(95,$47|0)|0;
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        
        if ($53) {
         label = 20;
         break;
        }
       }
       $61 = ($48|0)==(-1);
       
       if ($61) {
        $$1$lcssa = $$19;
        break L46;
       }
       $62 = HEAP32[$to_nxt>>2]|0;
       $gep_int12 = $62;
       $gep13 = (($gep_int12) + ($48))|0;
       $63 = $gep13;
       HEAP32[$to_nxt>>2] = $63;
       $gep_int14 = $$19;
       $gep15 = (($gep_int14) + 4)|0;
       $64 = $gep15;
       $65 = HEAP32[$frm_nxt>>2]|0;
       $66 = ($64|0)==($65|0);
       
       if ($66) {
        $$1$lcssa = $64;
        break L46;
       } else {
        $$19 = $64;$44 = $63;
       }
      }
      if ((label|0) == 20) {
       $expanded3 = 69;
       $54 = ___cxa_find_matching_catch(-1,-1,0)|0;
       u$39 = tempRet0;
       ___clang_call_terminate($54);
       // unreachable
      }
      $expanded4 = 69;
      $55 = ___cxa_find_matching_catch(-1,-1)|0;
      $56 = tempRet0;
      $57 = ($47|0)==(0);
      
      if ($57) {
       ___resumeException($55|0);
       // unreachable
      }
      __THREW__ = 0;
      u$44 = invoke_ii(95,$47|0)|0;
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      
      if ($59) {
       $expanded5 = 69;
       $60 = ___cxa_find_matching_catch(-1,-1,0)|0;
       u$46 = tempRet0;
       ___clang_call_terminate($60);
       // unreachable
      } else {
       ___resumeException($55|0);
       // unreachable
      }
     }
    } while(0);
    
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    
    $$0 = 2;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 34) {
    $expanded6 = 69;
    $79 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$66 = tempRet0;
    ___clang_call_terminate($79);
    // unreachable
   }
   else if ((label|0) == 35) {
    $expanded7 = 69;
    $80 = ___cxa_find_matching_catch(-1,-1)|0;
    $81 = tempRet0;
    $82 = ($72|0)==(0);
    
    if ($82) {
     ___resumeException($80|0);
     // unreachable
    }
    __THREW__ = 0;
    u$71 = invoke_ii(95,$72|0)|0;
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    
    if ($84) {
     $expanded8 = 69;
     $85 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$73 = tempRet0;
     ___clang_call_terminate($85);
     // unreachable
    } else {
     ___resumeException($80|0);
     // unreachable
    }
   }
   else if ((label|0) == 49) {
    $$pre = HEAP32[$frm_nxt>>2]|0;
    
    $109 = $$pre;
    break;
   }
   else if ((label|0) == 51) {
    
    STACKTOP = sp;return $$0|0;
   }
  }
 } while(0);
 
 $not$ = ($109|0)!=($frm_end|0);
 $110 = $not$&1;
 
 $$0 = $110;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fend$0$lcssa = 0;
 var $fend$059 = 0, $fend$059$phi = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0, $fend$216$phi = 0, $fend$3 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep_array = 0, $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0;
 var $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int9 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, $tmpcast = 0, label = 0, sp = 0, u$16 = 0, u$18 = 0, u$23 = 0, u$25 = 0, u$37 = 0;
 var u$39 = 0, u$44 = 0, u$46 = 0, u$69 = 0, u$71 = 0, u$76 = 0, u$78 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $save_state = sp;
 $tmpcast = $save_state;
 $1 = ($frm|0)==($frm_end|0);
 
 L1: do {
  if ($1) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   
   $100 = $frm;
  } else {
   $fend$059 = $frm;
   while(1) {
    
    $3 = HEAP8[$fend$059]|0;
    $4 = ($3<<24>>24)==(0);
    $gep_int = $fend$059;
    $gep = (($gep_int) + 1)|0;
    $5 = $gep;
    
    if ($4) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $2 = ($5|0)==($frm_end|0);
    
    if ($2) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$059$phi = $5;$fend$059 = $fend$059$phi;
    }
   }
   
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $6 = ($to|0)==($to_end|0);
   $or$cond53 = $1 | $6;
   
   if ($or$cond53) {
    $100 = $frm;
    break;
   }
   $7 = $st;
   $8 = $to_end;
   $gep_int9 = $this;
   $gep10 = (($gep_int9) + 8)|0;
   $9 = $gep10;
   
   $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
   while(1) {
    
    
    
    $10 = $st;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = (($10) + 4)|0;
    $14 = $13;
    $15 = HEAP32[$14>>2]|0;
    $16 = $save_state;
    $17 = $16;
    HEAP32[$17>>2] = $12;
    $18 = (($16) + 4)|0;
    $19 = $18;
    HEAP32[$19>>2] = $15;
    $20 = $fend$156;
    $21 = $$0155;
    $22 = (($20) - ($21))|0;
    $23 = $$0254;
    $24 = (($8) - ($23))|0;
    $25 = $24 >> 2;
    $26 = HEAP32[$9>>2]|0;
    $27 = _uselocale($26|0)|0;
    __THREW__ = 0;
    $28 = invoke_iiiiii(20,$$0254|0,$frm_nxt|0,$22|0,$25|0,$st|0)|0;
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    
    if ($30) {
     label = 11;
     break;
    }
    $31 = ($27|0)==(0);
    
    if (!($31)) {
     __THREW__ = 0;
     u$16 = invoke_ii(95,$27|0)|0;
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     
     if ($33) {
      label = 10;
      break;
     }
    }
    
    if ((($28|0) == 0)) {
     $$0 = 2;
     label = 50;
     break;
    } else if ((($28|0) == -1)) {
     label = 16;
     break;
    }
    $67 = HEAP32[$to_nxt>>2]|0;
    $gep_int17 = $67;
    $gep_array = $28<<2;
    $gep18 = (($gep_int17) + ($gep_array))|0;
    $68 = $gep18;
    HEAP32[$to_nxt>>2] = $68;
    $69 = ($68|0)==($to_end|0);
    
    if ($69) {
     label = 48;
     break;
    }
    $70 = ($fend$156|0)==($frm_end|0);
    $$pre113 = HEAP32[$frm_nxt>>2]|0;
    
    if ($70) {
     $96 = $$pre113;$97 = $68;$fend$3 = $frm_end;
    } else {
     $71 = HEAP32[$9>>2]|0;
     $72 = _uselocale($71|0)|0;
     __THREW__ = 0;
     $73 = invoke_iiiii(20,$68|0,$$pre113|0,1,$st|0)|0;
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     
     if ($75) {
      label = 38;
      break;
     }
     $76 = ($72|0)==(0);
     
     if (!($76)) {
      __THREW__ = 0;
      u$69 = invoke_ii(95,$72|0)|0;
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      
      if ($78) {
       label = 37;
       break;
      }
     }
     $86 = ($73|0)==(0);
     
     if (!($86)) {
      $$0 = 2;
      label = 50;
      break;
     }
     $87 = HEAP32[$to_nxt>>2]|0;
     $gep_int19 = $87;
     $gep20 = (($gep_int19) + 4)|0;
     $88 = $gep20;
     HEAP32[$to_nxt>>2] = $88;
     $89 = HEAP32[$frm_nxt>>2]|0;
     $gep_int21 = $89;
     $gep22 = (($gep_int21) + 1)|0;
     $90 = $gep22;
     HEAP32[$frm_nxt>>2] = $90;
     $91 = ($90|0)==($frm_end|0);
     
     L23: do {
      if ($91) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$216 = $90;
       while(1) {
        
        $93 = HEAP8[$fend$216]|0;
        $94 = ($93<<24>>24)==(0);
        $gep_int23 = $fend$216;
        $gep24 = (($gep_int23) + 1)|0;
        $95 = $gep24;
        
        if ($94) {
         $fend$2$lcssa = $fend$216;
         break L23;
        }
        $92 = ($95|0)==($frm_end|0);
        
        if ($92) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$216$phi = $95;$fend$216 = $fend$216$phi;
        }
       }
      }
     } while(0);
     
     $$pre111 = HEAP32[$to_nxt>>2]|0;
     
     $96 = $90;$97 = $$pre111;$fend$3 = $fend$2$lcssa;
    }
    
    
    
    $98 = ($96|0)==($frm_end|0);
    $99 = ($97|0)==($to_end|0);
    $or$cond = $98 | $99;
    
    if ($or$cond) {
     $100 = $96;
     break L1;
    } else {
     $$0155 = $96;$$0254 = $97;$fend$156 = $fend$3;
    }
   }
   if ((label|0) == 10) {
    $expanded = 69;
    $34 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$18 = tempRet0;
    ___clang_call_terminate($34);
    // unreachable
   }
   else if ((label|0) == 11) {
    $expanded1 = 69;
    $35 = ___cxa_find_matching_catch(-1,-1)|0;
    $36 = tempRet0;
    $37 = ($27|0)==(0);
    
    if ($37) {
     ___resumeException($35|0);
     // unreachable
    }
    __THREW__ = 0;
    u$23 = invoke_ii(95,$27|0)|0;
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    
    if ($39) {
     $expanded2 = 69;
     $40 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$25 = tempRet0;
     ___clang_call_terminate($40);
     // unreachable
    } else {
     ___resumeException($35|0);
     // unreachable
    }
   }
   else if ((label|0) == 16) {
    HEAP32[$to_nxt>>2] = $$0254;
    $41 = HEAP32[$frm_nxt>>2]|0;
    $42 = ($$0155|0)==($41|0);
    
    L50: do {
     if ($42) {
      $$1$lcssa = $$0155;
     } else {
      $$115 = $$0155;$storemerge14 = $$0254;
      while(1) {
       
       
       $43 = $$115;
       $44 = (($20) - ($43))|0;
       $45 = HEAP32[$9>>2]|0;
       $46 = _uselocale($45|0)|0;
       __THREW__ = 0;
       $47 = invoke_iiiii(20,$storemerge14|0,$$115|0,$44|0,$tmpcast|0)|0;
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       
       if ($49) {
        label = 21;
        break;
       }
       $50 = ($46|0)==(0);
       
       if (!($50)) {
        __THREW__ = 0;
        u$37 = invoke_ii(95,$46|0)|0;
        $51 = __THREW__; __THREW__ = 0;
        $52 = $51&1;
        
        if ($52) {
         label = 20;
         break;
        }
       }
       
       if ((($47|0) == 0)) {
        $gep_int11 = $$115;
        $gep12 = (($gep_int11) + 1)|0;
        $60 = $gep12;
        
        $$2 = $60;
       } else if ((($47|0) == -1)) {
        label = 27;
        break;
       } else if ((($47|0) == -2)) {
        label = 28;
        break;
       } else {
        $gep_int13 = $$115;
        $gep14 = (($gep_int13) + ($47))|0;
        $61 = $gep14;
        
        $$2 = $61;
       }
       
       $62 = HEAP32[$to_nxt>>2]|0;
       $gep_int15 = $62;
       $gep16 = (($gep_int15) + 4)|0;
       $63 = $gep16;
       HEAP32[$to_nxt>>2] = $63;
       $64 = HEAP32[$frm_nxt>>2]|0;
       $65 = ($$2|0)==($64|0);
       
       if ($65) {
        $$1$lcssa = $$2;
        break L50;
       } else {
        $$115 = $$2;$storemerge14 = $63;
       }
      }
      if ((label|0) == 20) {
       $expanded3 = 69;
       $53 = ___cxa_find_matching_catch(-1,-1,0)|0;
       u$39 = tempRet0;
       ___clang_call_terminate($53);
       // unreachable
      }
      else if ((label|0) == 21) {
       $expanded4 = 69;
       $54 = ___cxa_find_matching_catch(-1,-1)|0;
       $55 = tempRet0;
       $56 = ($46|0)==(0);
       
       if ($56) {
        ___resumeException($54|0);
        // unreachable
       }
       __THREW__ = 0;
       u$44 = invoke_ii(95,$46|0)|0;
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       
       if ($58) {
        $expanded5 = 69;
        $59 = ___cxa_find_matching_catch(-1,-1,0)|0;
        u$46 = tempRet0;
        ___clang_call_terminate($59);
        // unreachable
       } else {
        ___resumeException($54|0);
        // unreachable
       }
      }
      else if ((label|0) == 27) {
       HEAP32[$frm_nxt>>2] = $$115;
       
       $$0 = 2;
       
       STACKTOP = sp;return $$0|0;
      }
      else if ((label|0) == 28) {
       HEAP32[$frm_nxt>>2] = $$115;
       
       $$0 = 1;
       
       STACKTOP = sp;return $$0|0;
      }
     }
    } while(0);
    
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    $not$3 = ($$1$lcssa|0)!=($frm_end|0);
    $66 = $not$3&1;
    
    $$0 = $66;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 37) {
    $expanded6 = 69;
    $79 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$71 = tempRet0;
    ___clang_call_terminate($79);
    // unreachable
   }
   else if ((label|0) == 38) {
    $expanded7 = 69;
    $80 = ___cxa_find_matching_catch(-1,-1)|0;
    $81 = tempRet0;
    $82 = ($72|0)==(0);
    
    if ($82) {
     ___resumeException($80|0);
     // unreachable
    }
    __THREW__ = 0;
    u$76 = invoke_ii(95,$72|0)|0;
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    
    if ($84) {
     $expanded8 = 69;
     $85 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$78 = tempRet0;
     ___clang_call_terminate($85);
     // unreachable
    } else {
     ___resumeException($80|0);
     // unreachable
    }
   }
   else if ((label|0) == 48) {
    $$pre = HEAP32[$frm_nxt>>2]|0;
    
    $100 = $$pre;
    break;
   }
   else if ((label|0) == 50) {
    
    STACKTOP = sp;return $$0|0;
   }
  }
 } while(0);
 
 $not$ = ($100|0)!=($frm_end|0);
 $101 = $not$&1;
 
 $$0 = $101;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep7 = 0, $gep_int = 0, $gep_int3 = 0;
 var $gep_int4 = 0, $gep_int6 = 0, $n$02 = 0, $n$02$phi = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0, u$12 = 0, u$14 = 0, u$5 = 0, u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $gep_int = $tmp;
 $1 = $gep_int;
 $gep_int3 = $this;
 $gep = (($gep_int3) + 8)|0;
 $2 = $gep;
 $3 = HEAP32[$2>>2]|0;
 $4 = _uselocale($3|0)|0;
 __THREW__ = 0;
 $5 = invoke_iiii(35,$1|0,0,$st|0)|0;
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 if ($7) {
  $expanded1 = 69;
  $12 = ___cxa_find_matching_catch(-1,-1)|0;
  $13 = tempRet0;
  $14 = ($4|0)==(0);
  
  if ($14) {
   ___resumeException($12|0);
   // unreachable
  }
  __THREW__ = 0;
  u$12 = invoke_ii(95,$4|0)|0;
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  
  if ($16) {
   $expanded2 = 69;
   $17 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$14 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable
  } else {
   ___resumeException($12|0);
   // unreachable
  }
 }
 $8 = ($4|0)==(0);
 
 do {
  if (!($8)) {
   __THREW__ = 0;
   u$5 = invoke_ii(95,$4|0)|0;
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if (!($10)) {
    break;
   }
   $expanded = 69;
   $11 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$7 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable
  }
 } while(0);
 
 if ((($5|0) == 0) | (($5|0) == -1)) {
  $$0 = 2;
  
  STACKTOP = sp;return $$0|0;
 }
 $18 = (($5) + -1)|0;
 $19 = HEAP32[$to_nxt>>2]|0;
 $20 = $to_end;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = ($18>>>0)>($22>>>0);
 
 if ($23) {
  $$0 = 1;
  
  STACKTOP = sp;return $$0|0;
 }
 $24 = ($18|0)==(0);
 
 if ($24) {
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 } else {
  $25 = $19;$n$02 = $18;$p$03 = $1;
 }
 while(1) {
  
  
  
  $26 = HEAP8[$p$03]|0;
  $gep_int4 = $25;
  $gep5 = (($gep_int4) + 1)|0;
  $27 = $gep5;
  HEAP32[$to_nxt>>2] = $27;
  HEAP8[$25] = $26;
  $28 = (($n$02) + -1)|0;
  $29 = ($28|0)==(0);
  
  if ($29) {
   $$0 = 0;
   break;
  }
  $gep_int6 = $p$03;
  $gep7 = (($gep_int6) + 1)|0;
  $30 = $gep7;
  $$pre = HEAP32[$to_nxt>>2]|0;
  
  $n$02$phi = $28;$25 = $$pre;$p$03 = $30;$n$02 = $n$02$phi;
 }
 
 STACKTOP = sp;return $$0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0, u$11 = 0;
 var u$14 = 0, u$16 = 0, u$25 = 0, u$27 = 0, u$31 = 0, u$6 = 0, u$8 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 $3 = invoke_ii(95,$2|0)|0;
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 
 do {
  if (!($5)) {
   __THREW__ = 0;
   $6 = invoke_iiii(36,0,0,4)|0;
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   
   if ($8) {
    $expanded8 = 69;
    $13 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$11 = tempRet0;
    $14 = ($3|0)==(0);
    
    if ($14) {
     $eh$lpad$body$indexZ2D = $13;
     
     ___clang_call_terminate($eh$lpad$body$indexZ2D);
     // unreachable
    }
    __THREW__ = 0;
    u$14 = invoke_ii(95,$3|0)|0;
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    
    if ($16) {
     $expanded9 = 69;
     $17 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$16 = tempRet0;
     ___clang_call_terminate($17);
     // unreachable
    } else {
     $eh$lpad$body$indexZ2D = $13;
     
     ___clang_call_terminate($eh$lpad$body$indexZ2D);
     // unreachable
    }
   }
   $9 = ($3|0)==(0);
   
   do {
    if (!($9)) {
     __THREW__ = 0;
     u$6 = invoke_ii(95,$3|0)|0;
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     
     if (!($11)) {
      break;
     }
     $expanded = 69;
     $12 = ___cxa_find_matching_catch(-1,-1,0)|0;
     u$8 = tempRet0;
     ___clang_call_terminate($12);
     // unreachable
    }
   } while(0);
   $18 = ($6|0)==(0);
   
   if (!($18)) {
    $$0 = -1;
    
    STACKTOP = sp;return $$0|0;
   }
   $19 = HEAP32[$1>>2]|0;
   $20 = ($19|0)==(0);
   
   if ($20) {
    $$0 = 1;
    
    STACKTOP = sp;return $$0|0;
   }
   __THREW__ = 0;
   $21 = invoke_ii(95,$19|0)|0;
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   
   if ($23) {
    break;
   }
   $24 = ($21|0)==(0);
   
   if ($24) {
    $$0 = 0;
    
    STACKTOP = sp;return $$0|0;
   }
   __THREW__ = 0;
   u$25 = invoke_ii(95,$21|0)|0;
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   
   if ($26) {
    $expanded10 = 69;
    $27 = ___cxa_find_matching_catch(-1,-1,0)|0;
    u$27 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable
   } else {
    $$0 = 0;
    
    STACKTOP = sp;return $$0|0;
   }
  }
 } while(0);
 $expanded11 = 69;
 $28 = ___cxa_find_matching_catch(-1,-1,0)|0;
 u$31 = tempRet0;
 
 $eh$lpad$body$indexZ2D = $28;
 
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep4 = 0, $gep6 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int5 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0;
 var $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0, u$13 = 0, u$15 = 0, u$6 = 0, u$8 = 0;
 sp = STACKTOP;
 $1 = ($mx|0)==(0);
 $2 = ($frm|0)==($frm_end|0);
 $or$cond5 = $1 | $2;
 
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  
  STACKTOP = sp;return $nbytes$0$lcssa|0;
 }
 $3 = $frm_end;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $4 = $gep;
 
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  
  
  
  $5 = $$016;
  $6 = (($3) - ($5))|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = _uselocale($7|0)|0;
  __THREW__ = 0;
  $9 = invoke_iiii(37,$$016|0,$6|0,$st|0)|0;
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  
  if ($11) {
   label = 7;
   break;
  }
  $12 = ($8|0)==(0);
  
  if (!($12)) {
   __THREW__ = 0;
   u$6 = invoke_ii(95,$8|0)|0;
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if ($14) {
    label = 6;
    break;
   }
  }
  
  if ((($9|0) == 0)) {
   $gep_int3 = $$016;
   $gep4 = (($gep_int3) + 1)|0;
   $22 = $gep4;
   
   $$1 = $22;$$pn = 1;
  } else if ((($9|0) == -2) | (($9|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 15;
   break;
  } else {
   $gep_int5 = $$016;
   $gep6 = (($gep_int5) + ($9))|0;
   $23 = $gep6;
   
   $$1 = $23;$$pn = $9;
  }
  
  
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $24 = (($nwchar_t$08) + 1)|0;
  $25 = ($24>>>0)>=($mx>>>0);
  $26 = ($$1|0)==($frm_end|0);
  $or$cond = $25 | $26;
  
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 15;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $24;
  }
 }
 if ((label|0) == 6) {
  $expanded = 69;
  $15 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$8 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable
 }
 else if ((label|0) == 7) {
  $expanded1 = 69;
  $16 = ___cxa_find_matching_catch(-1,-1)|0;
  $17 = tempRet0;
  $18 = ($8|0)==(0);
  
  if ($18) {
   ___resumeException($16|0);
   // unreachable
  }
  __THREW__ = 0;
  u$13 = invoke_ii(95,$8|0)|0;
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  
  if ($20) {
   $expanded2 = 69;
   $21 = ___cxa_find_matching_catch(-1,-1,0)|0;
   u$15 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable
  } else {
   ___resumeException($16|0);
   // unreachable
  }
 }
 else if ((label|0) == 15) {
  
  STACKTOP = sp;return $nbytes$0$lcssa|0;
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0, u$11 = 0, u$5 = 0;
 var u$7 = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 
 if ($3) {
  $11 = 1;
  
  STACKTOP = sp;return $11|0;
 }
 __THREW__ = 0;
 $4 = invoke_ii(95,$2|0)|0;
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if ($6) {
  $expanded1 = 69;
  $12 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$11 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable
 }
 $7 = ($4|0)==(0);
 
 if ($7) {
  $11 = 4;
  
  STACKTOP = sp;return $11|0;
 }
 __THREW__ = 0;
 u$5 = invoke_ii(95,$4|0)|0;
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 
 if ($9) {
  $expanded = 69;
  $10 = ___cxa_find_matching_catch(-1,-1,0)|0;
  u$7 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable
 } else {
  $11 = 4;
  
  STACKTOP = sp;return $11|0;
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,u$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, $gep = 0, $gep2 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp;
 $_to_nxt = sp + 8|0;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0;
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $gep_int = $frm;
 $gep_array = $6<<1;
 $gep = (($gep_int) + ($gep_array))|0;
 $7 = $gep;
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $gep_int1 = $to;
 $gep2 = (($gep_int1) + ($11))|0;
 $12 = $gep2;
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return $1|0;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0;
 var $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0;
 var $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $1 = $mode & 2;
 $2 = ($1|0)==(0);
 
 do {
  if (!($2)) {
   $3 = $to_end;
   $4 = $to;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)<(3);
   
   if ($6) {
    $$0 = 1;
    
    STACKTOP = sp;return $$0|0;
   } else {
    $gep_int = $to;
    $gep = (($gep_int) + 1)|0;
    $7 = $gep;
    HEAP32[$to_nxt>>2] = $7;
    HEAP8[$to] = -17;
    $8 = HEAP32[$to_nxt>>2]|0;
    $gep_int1 = $8;
    $gep2 = (($gep_int1) + 1)|0;
    $9 = $gep2;
    HEAP32[$to_nxt>>2] = $9;
    HEAP8[$8] = -69;
    $10 = HEAP32[$to_nxt>>2]|0;
    $gep_int3 = $10;
    $gep4 = (($gep_int3) + 1)|0;
    $11 = $gep4;
    HEAP32[$to_nxt>>2] = $11;
    HEAP8[$10] = -65;
    
    break;
   }
  }
 } while(0);
 $12 = $frm_end;
 $13 = HEAP32[$frm_nxt>>2]|0;
 $14 = ($13>>>0)<($frm_end>>>0);
 
 if (!($14)) {
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $15 = $to_end;
 
 $16 = $13;
 L10: while(1) {
  
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($18>>>0)>($Maxcode>>>0);
  
  if ($19) {
   $$0 = 2;
   label = 26;
   break;
  }
  $20 = ($17&65535)<(128);
  
  do {
   if ($20) {
    $21 = HEAP32[$to_nxt>>2]|0;
    $22 = $21;
    $23 = (($15) - ($22))|0;
    $24 = ($23|0)<(1);
    
    if ($24) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $25 = $17&255;
    $gep_int5 = $21;
    $gep6 = (($gep_int5) + 1)|0;
    $26 = $gep6;
    HEAP32[$to_nxt>>2] = $26;
    HEAP8[$21] = $25;
    
   } else {
    $27 = ($17&65535)<(2048);
    
    if ($27) {
     $28 = HEAP32[$to_nxt>>2]|0;
     $29 = $28;
     $30 = (($15) - ($29))|0;
     $31 = ($30|0)<(2);
     
     if ($31) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $32 = $18 >>> 6;
     $33 = $32 | 192;
     $34 = $33&255;
     $gep_int7 = $28;
     $gep8 = (($gep_int7) + 1)|0;
     $35 = $gep8;
     HEAP32[$to_nxt>>2] = $35;
     HEAP8[$28] = $34;
     $36 = $18 & 63;
     $37 = $36 | 128;
     $38 = $37&255;
     $39 = HEAP32[$to_nxt>>2]|0;
     $gep_int9 = $39;
     $gep10 = (($gep_int9) + 1)|0;
     $40 = $gep10;
     HEAP32[$to_nxt>>2] = $40;
     HEAP8[$39] = $38;
     
     break;
    }
    $41 = ($17&65535)<(55296);
    
    if ($41) {
     $42 = HEAP32[$to_nxt>>2]|0;
     $43 = $42;
     $44 = (($15) - ($43))|0;
     $45 = ($44|0)<(3);
     
     if ($45) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $46 = $18 >>> 12;
     $47 = $46 | 224;
     $48 = $47&255;
     $gep_int11 = $42;
     $gep12 = (($gep_int11) + 1)|0;
     $49 = $gep12;
     HEAP32[$to_nxt>>2] = $49;
     HEAP8[$42] = $48;
     $50 = $18 >>> 6;
     $51 = $50 & 63;
     $52 = $51 | 128;
     $53 = $52&255;
     $54 = HEAP32[$to_nxt>>2]|0;
     $gep_int13 = $54;
     $gep14 = (($gep_int13) + 1)|0;
     $55 = $gep14;
     HEAP32[$to_nxt>>2] = $55;
     HEAP8[$54] = $53;
     $56 = $18 & 63;
     $57 = $56 | 128;
     $58 = $57&255;
     $59 = HEAP32[$to_nxt>>2]|0;
     $gep_int15 = $59;
     $gep16 = (($gep_int15) + 1)|0;
     $60 = $gep16;
     HEAP32[$to_nxt>>2] = $60;
     HEAP8[$59] = $58;
     
     break;
    }
    $61 = ($17&65535)<(56320);
    
    if (!($61)) {
     $113 = ($17&65535)<(57344);
     
     if ($113) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $114 = HEAP32[$to_nxt>>2]|0;
     $115 = $114;
     $116 = (($15) - ($115))|0;
     $117 = ($116|0)<(3);
     
     if ($117) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $118 = $18 >>> 12;
     $119 = $118 | 224;
     $120 = $119&255;
     $gep_int27 = $114;
     $gep28 = (($gep_int27) + 1)|0;
     $121 = $gep28;
     HEAP32[$to_nxt>>2] = $121;
     HEAP8[$114] = $120;
     $122 = $18 >>> 6;
     $123 = $122 & 63;
     $124 = $123 | 128;
     $125 = $124&255;
     $126 = HEAP32[$to_nxt>>2]|0;
     $gep_int29 = $126;
     $gep30 = (($gep_int29) + 1)|0;
     $127 = $gep30;
     HEAP32[$to_nxt>>2] = $127;
     HEAP8[$126] = $125;
     $128 = $18 & 63;
     $129 = $128 | 128;
     $130 = $129&255;
     $131 = HEAP32[$to_nxt>>2]|0;
     $gep_int31 = $131;
     $gep32 = (($gep_int31) + 1)|0;
     $132 = $gep32;
     HEAP32[$to_nxt>>2] = $132;
     HEAP8[$131] = $130;
     
     break;
    }
    $62 = $16;
    $63 = (($12) - ($62))|0;
    $64 = ($63|0)<(4);
    
    if ($64) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $gep_int17 = $16;
    $gep18 = (($gep_int17) + 2)|0;
    $65 = $gep18;
    $66 = HEAP16[$65>>1]|0;
    $67 = $66&65535;
    $68 = $67 & 64512;
    $69 = ($68|0)==(56320);
    
    if (!($69)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $70 = HEAP32[$to_nxt>>2]|0;
    $71 = $70;
    $72 = (($15) - ($71))|0;
    $73 = ($72|0)<(4);
    
    if ($73) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $74 = $18 & 960;
    $75 = $74 << 10;
    $76 = (($75) + 65536)|0;
    $77 = $18 << 10;
    $78 = $77 & 64512;
    $79 = $76 | $78;
    $80 = $67 & 1023;
    $81 = $79 | $80;
    $82 = ($81>>>0)>($Maxcode>>>0);
    
    if ($82) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $65;
    $83 = $74 >>> 6;
    $84 = (($83) + 1)|0;
    $85 = $84 >>> 2;
    $86 = $85 | 240;
    $87 = $86&255;
    $88 = HEAP32[$to_nxt>>2]|0;
    $gep_int19 = $88;
    $gep20 = (($gep_int19) + 1)|0;
    $89 = $gep20;
    HEAP32[$to_nxt>>2] = $89;
    HEAP8[$88] = $87;
    $90 = $84 << 4;
    $91 = $90 & 48;
    $92 = $18 >>> 2;
    $93 = $92 & 15;
    $94 = $93 | $91;
    $95 = $94 | 128;
    $96 = $95&255;
    $97 = HEAP32[$to_nxt>>2]|0;
    $gep_int21 = $97;
    $gep22 = (($gep_int21) + 1)|0;
    $98 = $gep22;
    HEAP32[$to_nxt>>2] = $98;
    HEAP8[$97] = $96;
    $99 = $18 << 4;
    $100 = $99 & 48;
    $101 = $67 >>> 6;
    $102 = $101 & 15;
    $103 = $100 | $102;
    $104 = $103 | 128;
    $105 = $104&255;
    $106 = HEAP32[$to_nxt>>2]|0;
    $gep_int23 = $106;
    $gep24 = (($gep_int23) + 1)|0;
    $107 = $gep24;
    HEAP32[$to_nxt>>2] = $107;
    HEAP8[$106] = $105;
    $108 = $67 & 63;
    $109 = $108 | 128;
    $110 = $109&255;
    $111 = HEAP32[$to_nxt>>2]|0;
    $gep_int25 = $111;
    $gep26 = (($gep_int25) + 1)|0;
    $112 = $gep26;
    HEAP32[$to_nxt>>2] = $112;
    HEAP8[$111] = $110;
    
   }
  } while(0);
  $133 = HEAP32[$frm_nxt>>2]|0;
  $gep_int33 = $133;
  $gep34 = (($gep_int33) + 2)|0;
  $134 = $gep34;
  HEAP32[$frm_nxt>>2] = $134;
  $135 = ($134>>>0)<($frm_end>>>0);
  
  if ($135) {
   $16 = $134;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,u$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, $gep = 0, $gep2 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp;
 $_to_nxt = sp + 8|0;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0;
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $gep_int = $frm;
 $gep = (($gep_int) + ($5))|0;
 $6 = $gep;
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $gep_int1 = $to;
 $gep_array = $11<<1;
 $gep2 = (($gep_int1) + ($gep_array))|0;
 $12 = $gep2;
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return $1|0;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0;
 var $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $1 = $mode & 4;
 $2 = ($1|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 
 do {
  if ($2) {
   $16 = $$pre5;
  } else {
   $3 = $frm_end;
   $4 = $$pre5;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)>(2);
   
   if (!($6)) {
    $16 = $$pre5;
    break;
   }
   $7 = HEAP8[$$pre5]|0;
   $8 = ($7<<24>>24)==(-17);
   
   if (!($8)) {
    $16 = $$pre5;
    break;
   }
   $gep_int = $$pre5;
   $gep = (($gep_int) + 1)|0;
   $9 = $gep;
   $10 = HEAP8[$9]|0;
   $11 = ($10<<24>>24)==(-69);
   
   if (!($11)) {
    $16 = $$pre5;
    break;
   }
   $gep_int1 = $$pre5;
   $gep2 = (($gep_int1) + 2)|0;
   $12 = $gep2;
   $13 = HEAP8[$12]|0;
   $14 = ($13<<24>>24)==(-65);
   
   if (!($14)) {
    $16 = $$pre5;
    break;
   }
   $gep_int3 = $$pre5;
   $gep4 = (($gep_int3) + 3)|0;
   $15 = $gep4;
   HEAP32[$frm_nxt>>2] = $15;
   
   $16 = $15;
  }
 } while(0);
 
 $17 = ($16>>>0)<($frm_end>>>0);
 
 L8: do {
  if ($17) {
   $18 = $frm_end;
   $19 = $to_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   
   $20 = $16;$21 = $$pre;
   L10: while(1) {
    
    
    $22 = ($21>>>0)<($to_end>>>0);
    
    if (!($22)) {
     $135 = $20;
     break L8;
    }
    $23 = HEAP8[$20]|0;
    $24 = $23&255;
    $25 = ($24>>>0)>($Maxcode>>>0);
    
    if ($25) {
     $$0 = 2;
     label = 41;
     break;
    }
    $26 = ($23<<24>>24)>(-1);
    
    do {
     if ($26) {
      $27 = $23&255;
      HEAP16[$21>>1] = $27;
      $gep_int5 = $20;
      $gep6 = (($gep_int5) + 1)|0;
      $28 = $gep6;
      HEAP32[$frm_nxt>>2] = $28;
      
     } else {
      $29 = ($23&255)<(194);
      
      if ($29) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $30 = ($23&255)<(224);
      
      if ($30) {
       $31 = $20;
       $32 = (($18) - ($31))|0;
       $33 = ($32|0)<(2);
       
       if ($33) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $gep_int7 = $20;
       $gep8 = (($gep_int7) + 1)|0;
       $34 = $gep8;
       $35 = HEAP8[$34]|0;
       $36 = $35&255;
       $37 = $36 & 192;
       $38 = ($37|0)==(128);
       
       if (!($38)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $39 = $24 << 6;
       $40 = $39 & 1984;
       $41 = $36 & 63;
       $42 = $41 | $40;
       $43 = ($42>>>0)>($Maxcode>>>0);
       
       if ($43) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $44 = $42&65535;
       HEAP16[$21>>1] = $44;
       $gep_int9 = $20;
       $gep10 = (($gep_int9) + 2)|0;
       $45 = $gep10;
       HEAP32[$frm_nxt>>2] = $45;
       
       break;
      }
      $46 = ($23&255)<(240);
      
      if ($46) {
       $47 = $20;
       $48 = (($18) - ($47))|0;
       $49 = ($48|0)<(3);
       
       if ($49) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $gep_int11 = $20;
       $gep12 = (($gep_int11) + 1)|0;
       $50 = $gep12;
       $51 = HEAP8[$50]|0;
       $gep_int13 = $20;
       $gep14 = (($gep_int13) + 2)|0;
       $52 = $gep14;
       $53 = HEAP8[$52]|0;
       
       if ((($24|0) == 224)) {
        $54 = $51 & -32;
        $55 = ($54<<24>>24)==(-96);
        
        if (!($55)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($24|0) == 237)) {
        $56 = $51 & -32;
        $57 = ($56<<24>>24)==(-128);
        
        if (!($57)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $58 = $51 & -64;
        $59 = ($58<<24>>24)==(-128);
        
        if (!($59)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $60 = $53&255;
       $61 = $60 & 192;
       $62 = ($61|0)==(128);
       
       if (!($62)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $63 = $24 << 12;
       $64 = $51&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $60 & 63;
       $69 = $67 | $68;
       $70 = $69 & 65535;
       $71 = ($70>>>0)>($Maxcode>>>0);
       
       if ($71) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $72 = $69&65535;
       HEAP16[$21>>1] = $72;
       $gep_int15 = $20;
       $gep16 = (($gep_int15) + 3)|0;
       $73 = $gep16;
       HEAP32[$frm_nxt>>2] = $73;
       
       break;
      }
      $74 = ($23&255)<(245);
      
      if (!($74)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $75 = $20;
      $76 = (($18) - ($75))|0;
      $77 = ($76|0)<(4);
      
      if ($77) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $gep_int17 = $20;
      $gep18 = (($gep_int17) + 1)|0;
      $78 = $gep18;
      $79 = HEAP8[$78]|0;
      $gep_int19 = $20;
      $gep20 = (($gep_int19) + 2)|0;
      $80 = $gep20;
      $81 = HEAP8[$80]|0;
      $gep_int21 = $20;
      $gep22 = (($gep_int21) + 3)|0;
      $82 = $gep22;
      $83 = HEAP8[$82]|0;
      
      if ((($24|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       
       if (!($84)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($24|0) == 244)) {
       $85 = $79 & -16;
       $86 = ($85<<24>>24)==(-128);
       
       if (!($86)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $87 = $79 & -64;
       $88 = ($87<<24>>24)==(-128);
       
       if (!($88)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $89 = $81&255;
      $90 = $89 & 192;
      $91 = ($90|0)==(128);
      
      if (!($91)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $92 = $83&255;
      $93 = $92 & 192;
      $94 = ($93|0)==(128);
      
      if (!($94)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $95 = $21;
      $96 = (($19) - ($95))|0;
      $97 = ($96|0)<(4);
      
      if ($97) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $98 = $24 & 7;
      $99 = $98 << 18;
      $100 = $79&255;
      $101 = $100 << 12;
      $102 = $101 & 258048;
      $103 = $102 | $99;
      $104 = $89 << 6;
      $105 = $104 & 4032;
      $106 = $103 | $105;
      $107 = $92 & 63;
      $108 = $106 | $107;
      $109 = ($108>>>0)>($Maxcode>>>0);
      
      if ($109) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $110 = $98 << 2;
      $111 = $100 >>> 4;
      $112 = $111 & 3;
      $113 = $112 | $110;
      $114 = $113 << 6;
      $115 = (($114) + 16320)|0;
      $116 = $100 << 2;
      $117 = $116 & 60;
      $118 = $89 >>> 4;
      $119 = $118 & 3;
      $120 = $117 | $119;
      $121 = $120 | $115;
      $122 = $121 | 55296;
      $123 = $122&65535;
      HEAP16[$21>>1] = $123;
      $124 = $104 & 960;
      $125 = $107 | $124;
      $126 = $125 | 56320;
      $127 = $126&65535;
      $gep_int23 = $21;
      $gep24 = (($gep_int23) + 2)|0;
      $128 = $gep24;
      HEAP32[$to_nxt>>2] = $128;
      HEAP16[$128>>1] = $127;
      $129 = HEAP32[$frm_nxt>>2]|0;
      $gep_int25 = $129;
      $gep26 = (($gep_int25) + 4)|0;
      $130 = $gep26;
      HEAP32[$frm_nxt>>2] = $130;
      
     }
    } while(0);
    $131 = HEAP32[$to_nxt>>2]|0;
    $gep_int27 = $131;
    $gep28 = (($gep_int27) + 2)|0;
    $132 = $gep28;
    HEAP32[$to_nxt>>2] = $132;
    $133 = HEAP32[$frm_nxt>>2]|0;
    $134 = ($133>>>0)<($frm_end>>>0);
    
    if ($134) {
     $20 = $133;$21 = $132;
    } else {
     $135 = $133;
     break L8;
    }
   }
   if ((label|0) == 41) {
    
    STACKTOP = sp;return $$0|0;
   }
  } else {
   $135 = $16;
  }
 } while(0);
 
 $136 = ($135>>>0)<($frm_end>>>0);
 $137 = $136&1;
 
 $$0 = $137;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,u$0,$to,u$1,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $to = $to|0;
 u$1 = u$1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,u$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0;
 STACKTOP = sp;return $1|0;
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep4 = 0, $gep6 = 0;
 var $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $nchar16_t$014 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $mode & 4;
 $2 = ($1|0)==(0);
 
 do {
  if ($2) {
   $frm_nxt$1$ph = $frm;
  } else {
   $3 = $frm_end;
   $4 = $frm;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)>(2);
   
   if (!($6)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $7 = HEAP8[$frm]|0;
   $8 = ($7<<24>>24)==(-17);
   
   if (!($8)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $gep_int = $frm;
   $gep = (($gep_int) + 1)|0;
   $9 = $gep;
   $10 = HEAP8[$9]|0;
   $11 = ($10<<24>>24)==(-69);
   
   if (!($11)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $gep_int1 = $frm;
   $gep2 = (($gep_int1) + 2)|0;
   $12 = $gep2;
   $13 = HEAP8[$12]|0;
   $14 = ($13<<24>>24)==(-65);
   $gep_int3 = $frm;
   $gep4 = (($gep_int3) + 3)|0;
   $15 = $gep4;
   $$frm = $14 ? $15 : $frm;
   
   $frm_nxt$1$ph = $$frm;
  }
 } while(0);
 
 $16 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $17 = ($mx|0)!=(0);
 $or$cond13 = $16 & $17;
 
 L7: do {
  if ($or$cond13) {
   $18 = $frm_end;
   
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar16_t$014 = 0;
   L9: while(1) {
    
    
    $19 = HEAP8[$frm_nxt$115]|0;
    $20 = $19&255;
    $21 = ($20>>>0)>($Maxcode>>>0);
    
    if ($21) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     break L7;
    }
    $22 = ($19<<24>>24)>(-1);
    
    do {
     if ($22) {
      $gep_int5 = $frm_nxt$115;
      $gep6 = (($gep_int5) + 1)|0;
      $23 = $gep6;
      
      $frm_nxt$2 = $23;$nchar16_t$1 = $nchar16_t$014;
     } else {
      $24 = ($19&255)<(194);
      
      if ($24) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $25 = ($19&255)<(224);
      
      if ($25) {
       $26 = $frm_nxt$115;
       $27 = (($18) - ($26))|0;
       $28 = ($27|0)<(2);
       
       if ($28) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $gep_int7 = $frm_nxt$115;
       $gep8 = (($gep_int7) + 1)|0;
       $29 = $gep8;
       $30 = HEAP8[$29]|0;
       $31 = $30&255;
       $32 = $31 & 192;
       $33 = ($32|0)==(128);
       
       if (!($33)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $34 = $20 << 6;
       $35 = $34 & 1984;
       $36 = $31 & 63;
       $37 = $36 | $35;
       $38 = ($37>>>0)>($Maxcode>>>0);
       
       if ($38) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $gep_int9 = $frm_nxt$115;
       $gep10 = (($gep_int9) + 2)|0;
       $39 = $gep10;
       
       $frm_nxt$2 = $39;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $40 = ($19&255)<(240);
      
      if ($40) {
       $41 = $frm_nxt$115;
       $42 = (($18) - ($41))|0;
       $43 = ($42|0)<(3);
       
       if ($43) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $gep_int11 = $frm_nxt$115;
       $gep12 = (($gep_int11) + 1)|0;
       $44 = $gep12;
       $45 = HEAP8[$44]|0;
       $gep_int13 = $frm_nxt$115;
       $gep14 = (($gep_int13) + 2)|0;
       $46 = $gep14;
       $47 = HEAP8[$46]|0;
       
       if ((($20|0) == 224)) {
        $48 = $45 & -32;
        $49 = ($48<<24>>24)==(-96);
        
        if (!($49)) {
         label = 21;
         break L9;
        }
       } else if ((($20|0) == 237)) {
        $52 = $45 & -32;
        $53 = ($52<<24>>24)==(-128);
        
        if (!($53)) {
         label = 23;
         break L9;
        }
       } else {
        $56 = $45 & -64;
        $57 = ($56<<24>>24)==(-128);
        
        if (!($57)) {
         label = 25;
         break L9;
        }
       }
       $60 = $47&255;
       $61 = $60 & 192;
       $62 = ($61|0)==(128);
       
       if (!($62)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $63 = $20 << 12;
       $64 = $63 & 61440;
       $65 = $45&255;
       $66 = $65 << 6;
       $67 = $66 & 4032;
       $68 = $67 | $64;
       $69 = $60 & 63;
       $70 = $68 | $69;
       $71 = ($70>>>0)>($Maxcode>>>0);
       
       if ($71) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $gep_int15 = $frm_nxt$115;
       $gep16 = (($gep_int15) + 3)|0;
       $72 = $gep16;
       
       $frm_nxt$2 = $72;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $73 = ($19&255)<(245);
      
      if (!($73)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $74 = $frm_nxt$115;
      $75 = (($18) - ($74))|0;
      $76 = ($75|0)<(4);
      
      if ($76) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $77 = (($mx) - ($nchar16_t$014))|0;
      $78 = ($77>>>0)<(2);
      
      if ($78) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $gep_int17 = $frm_nxt$115;
      $gep18 = (($gep_int17) + 1)|0;
      $79 = $gep18;
      $80 = HEAP8[$79]|0;
      $gep_int19 = $frm_nxt$115;
      $gep20 = (($gep_int19) + 2)|0;
      $81 = $gep20;
      $82 = HEAP8[$81]|0;
      $gep_int21 = $frm_nxt$115;
      $gep22 = (($gep_int21) + 3)|0;
      $83 = $gep22;
      $84 = HEAP8[$83]|0;
      
      if ((($20|0) == 240)) {
       $$off = (($80) + 112)<<24>>24;
       $85 = ($$off&255)<(48);
       
       if (!($85)) {
        label = 34;
        break L9;
       }
      } else if ((($20|0) == 244)) {
       $88 = $80 & -16;
       $89 = ($88<<24>>24)==(-128);
       
       if (!($89)) {
        label = 36;
        break L9;
       }
      } else {
       $92 = $80 & -64;
       $93 = ($92<<24>>24)==(-128);
       
       if (!($93)) {
        label = 38;
        break L9;
       }
      }
      $96 = $82&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $84&255;
      $100 = $99 & 192;
      $101 = ($100|0)==(128);
      
      if (!($101)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $102 = $20 << 18;
      $103 = $102 & 1835008;
      $104 = $80&255;
      $105 = $104 << 12;
      $106 = $105 & 258048;
      $107 = $106 | $103;
      $108 = $96 << 6;
      $109 = $108 & 4032;
      $110 = $107 | $109;
      $111 = $99 & 63;
      $112 = $110 | $111;
      $113 = ($112>>>0)>($Maxcode>>>0);
      
      if ($113) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $114 = (($nchar16_t$014) + 1)|0;
      $gep_int23 = $frm_nxt$115;
      $gep24 = (($gep_int23) + 4)|0;
      $115 = $gep24;
      
      $frm_nxt$2 = $115;$nchar16_t$1 = $114;
     }
    } while(0);
    
    
    $116 = (($nchar16_t$1) + 1)|0;
    $117 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $118 = ($116>>>0)<($mx>>>0);
    $or$cond = $117 & $118;
    
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar16_t$014 = $116;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $50 = $frm;
    $51 = (($41) - ($50))|0;
    
    $$0 = $51;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 23) {
    $54 = $frm;
    $55 = (($41) - ($54))|0;
    
    $$0 = $55;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 25) {
    $58 = $frm;
    $59 = (($41) - ($58))|0;
    
    $$0 = $59;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 34) {
    $86 = $frm;
    $87 = (($74) - ($86))|0;
    
    $$0 = $87;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 36) {
    $90 = $frm;
    $91 = (($74) - ($90))|0;
    
    $$0 = $91;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 38) {
    $94 = $frm;
    $95 = (($74) - ($94))|0;
    
    $$0 = $95;
    
    STACKTOP = sp;return $$0|0;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 
 $119 = $frm_nxt$1$lcssa;
 $120 = $frm;
 $121 = (($119) - ($120))|0;
 
 $$0 = $121;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,u$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, $gep = 0, $gep2 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp;
 $_to_nxt = sp + 8|0;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0;
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $gep_int = $frm;
 $gep_array = $6<<2;
 $gep = (($gep_int) + ($gep_array))|0;
 $7 = $gep;
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $gep_int1 = $to;
 $gep2 = (($gep_int1) + ($11))|0;
 $12 = $gep2;
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return $1|0;
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0;
 var $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $1 = $mode & 2;
 $2 = ($1|0)==(0);
 
 do {
  if (!($2)) {
   $3 = $to_end;
   $4 = $to;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)<(3);
   
   if ($6) {
    $$0 = 1;
    
    STACKTOP = sp;return $$0|0;
   } else {
    $gep_int = $to;
    $gep = (($gep_int) + 1)|0;
    $7 = $gep;
    HEAP32[$to_nxt>>2] = $7;
    HEAP8[$to] = -17;
    $8 = HEAP32[$to_nxt>>2]|0;
    $gep_int1 = $8;
    $gep2 = (($gep_int1) + 1)|0;
    $9 = $gep2;
    HEAP32[$to_nxt>>2] = $9;
    HEAP8[$8] = -69;
    $10 = HEAP32[$to_nxt>>2]|0;
    $gep_int3 = $10;
    $gep4 = (($gep_int3) + 1)|0;
    $11 = $gep4;
    HEAP32[$to_nxt>>2] = $11;
    HEAP8[$10] = -65;
    
    break;
   }
  }
 } while(0);
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 
 if (!($13)) {
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $14 = $to_end;
 
 $15 = $12;
 L10: while(1) {
  
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & -2048;
  $18 = ($17|0)==(55296);
  $19 = ($16>>>0)>($Maxcode>>>0);
  $or$cond = $18 | $19;
  
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $20 = ($16>>>0)<(128);
  
  do {
   if ($20) {
    $21 = HEAP32[$to_nxt>>2]|0;
    $22 = $21;
    $23 = (($14) - ($22))|0;
    $24 = ($23|0)<(1);
    
    if ($24) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $25 = $16&255;
    $gep_int5 = $21;
    $gep6 = (($gep_int5) + 1)|0;
    $26 = $gep6;
    HEAP32[$to_nxt>>2] = $26;
    HEAP8[$21] = $25;
    
   } else {
    $27 = ($16>>>0)<(2048);
    
    if ($27) {
     $28 = HEAP32[$to_nxt>>2]|0;
     $29 = $28;
     $30 = (($14) - ($29))|0;
     $31 = ($30|0)<(2);
     
     if ($31) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $32 = $16 >>> 6;
     $33 = $32 | 192;
     $34 = $33&255;
     $gep_int7 = $28;
     $gep8 = (($gep_int7) + 1)|0;
     $35 = $gep8;
     HEAP32[$to_nxt>>2] = $35;
     HEAP8[$28] = $34;
     $36 = $16 & 63;
     $37 = $36 | 128;
     $38 = $37&255;
     $39 = HEAP32[$to_nxt>>2]|0;
     $gep_int9 = $39;
     $gep10 = (($gep_int9) + 1)|0;
     $40 = $gep10;
     HEAP32[$to_nxt>>2] = $40;
     HEAP8[$39] = $38;
     
     break;
    }
    $41 = ($16>>>0)<(65536);
    $42 = HEAP32[$to_nxt>>2]|0;
    $43 = $42;
    $44 = (($14) - ($43))|0;
    
    if ($41) {
     $45 = ($44|0)<(3);
     
     if ($45) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $46 = $16 >>> 12;
     $47 = $46 | 224;
     $48 = $47&255;
     $gep_int11 = $42;
     $gep12 = (($gep_int11) + 1)|0;
     $49 = $gep12;
     HEAP32[$to_nxt>>2] = $49;
     HEAP8[$42] = $48;
     $50 = $16 >>> 6;
     $51 = $50 & 63;
     $52 = $51 | 128;
     $53 = $52&255;
     $54 = HEAP32[$to_nxt>>2]|0;
     $gep_int13 = $54;
     $gep14 = (($gep_int13) + 1)|0;
     $55 = $gep14;
     HEAP32[$to_nxt>>2] = $55;
     HEAP8[$54] = $53;
     $56 = $16 & 63;
     $57 = $56 | 128;
     $58 = $57&255;
     $59 = HEAP32[$to_nxt>>2]|0;
     $gep_int15 = $59;
     $gep16 = (($gep_int15) + 1)|0;
     $60 = $gep16;
     HEAP32[$to_nxt>>2] = $60;
     HEAP8[$59] = $58;
     
     break;
    } else {
     $61 = ($44|0)<(4);
     
     if ($61) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $62 = $16 >>> 18;
     $63 = $62 | 240;
     $64 = $63&255;
     $gep_int17 = $42;
     $gep18 = (($gep_int17) + 1)|0;
     $65 = $gep18;
     HEAP32[$to_nxt>>2] = $65;
     HEAP8[$42] = $64;
     $66 = $16 >>> 12;
     $67 = $66 & 63;
     $68 = $67 | 128;
     $69 = $68&255;
     $70 = HEAP32[$to_nxt>>2]|0;
     $gep_int19 = $70;
     $gep20 = (($gep_int19) + 1)|0;
     $71 = $gep20;
     HEAP32[$to_nxt>>2] = $71;
     HEAP8[$70] = $69;
     $72 = $16 >>> 6;
     $73 = $72 & 63;
     $74 = $73 | 128;
     $75 = $74&255;
     $76 = HEAP32[$to_nxt>>2]|0;
     $gep_int21 = $76;
     $gep22 = (($gep_int21) + 1)|0;
     $77 = $gep22;
     HEAP32[$to_nxt>>2] = $77;
     HEAP8[$76] = $75;
     $78 = $16 & 63;
     $79 = $78 | 128;
     $80 = $79&255;
     $81 = HEAP32[$to_nxt>>2]|0;
     $gep_int23 = $81;
     $gep24 = (($gep_int23) + 1)|0;
     $82 = $gep24;
     HEAP32[$to_nxt>>2] = $82;
     HEAP8[$81] = $80;
     
     break;
    }
   }
  } while(0);
  $83 = HEAP32[$frm_nxt>>2]|0;
  $gep_int25 = $83;
  $gep26 = (($gep_int25) + 4)|0;
  $84 = $gep26;
  HEAP32[$frm_nxt>>2] = $84;
  $85 = ($84>>>0)<($frm_end>>>0);
  
  if ($85) {
   $15 = $84;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,u$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, $gep = 0, $gep2 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp;
 $_to_nxt = sp + 8|0;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0;
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $gep_int = $frm;
 $gep = (($gep_int) + ($5))|0;
 $6 = $gep;
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $gep_int1 = $to;
 $gep_array = $11<<2;
 $gep2 = (($gep_int1) + ($gep_array))|0;
 $12 = $gep2;
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return $1|0;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0;
 var $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int3 = 0, $gep_int5 = 0;
 var $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $1 = $mode & 4;
 $2 = ($1|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 
 do {
  if ($2) {
   $16 = $$pre5;
  } else {
   $3 = $frm_end;
   $4 = $$pre5;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)>(2);
   
   if (!($6)) {
    $16 = $$pre5;
    break;
   }
   $7 = HEAP8[$$pre5]|0;
   $8 = ($7<<24>>24)==(-17);
   
   if (!($8)) {
    $16 = $$pre5;
    break;
   }
   $gep_int = $$pre5;
   $gep = (($gep_int) + 1)|0;
   $9 = $gep;
   $10 = HEAP8[$9]|0;
   $11 = ($10<<24>>24)==(-69);
   
   if (!($11)) {
    $16 = $$pre5;
    break;
   }
   $gep_int1 = $$pre5;
   $gep2 = (($gep_int1) + 2)|0;
   $12 = $gep2;
   $13 = HEAP8[$12]|0;
   $14 = ($13<<24>>24)==(-65);
   
   if (!($14)) {
    $16 = $$pre5;
    break;
   }
   $gep_int3 = $$pre5;
   $gep4 = (($gep_int3) + 3)|0;
   $15 = $gep4;
   HEAP32[$frm_nxt>>2] = $15;
   
   $16 = $15;
  }
 } while(0);
 
 $17 = ($16>>>0)<($frm_end>>>0);
 
 L8: do {
  if ($17) {
   $18 = $frm_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   
   $19 = $16;$20 = $$pre;
   L10: while(1) {
    
    
    $21 = ($20>>>0)<($to_end>>>0);
    
    if (!($21)) {
     $108 = $19;
     break L8;
    }
    $22 = HEAP8[$19]|0;
    $23 = $22&255;
    $24 = ($22<<24>>24)>(-1);
    
    do {
     if ($24) {
      $25 = ($23>>>0)>($Maxcode>>>0);
      
      if ($25) {
       $$0 = 2;
       label = 40;
       break L10;
      }
      HEAP32[$20>>2] = $23;
      $gep_int5 = $19;
      $gep6 = (($gep_int5) + 1)|0;
      $26 = $gep6;
      HEAP32[$frm_nxt>>2] = $26;
      
     } else {
      $27 = ($22&255)<(194);
      
      if ($27) {
       $$0 = 2;
       label = 40;
       break L10;
      }
      $28 = ($22&255)<(224);
      
      if ($28) {
       $29 = $19;
       $30 = (($18) - ($29))|0;
       $31 = ($30|0)<(2);
       
       if ($31) {
        $$0 = 1;
        label = 40;
        break L10;
       }
       $gep_int7 = $19;
       $gep8 = (($gep_int7) + 1)|0;
       $32 = $gep8;
       $33 = HEAP8[$32]|0;
       $34 = $33&255;
       $35 = $34 & 192;
       $36 = ($35|0)==(128);
       
       if (!($36)) {
        $$0 = 2;
        label = 40;
        break L10;
       }
       $37 = $23 << 6;
       $38 = $37 & 1984;
       $39 = $34 & 63;
       $40 = $39 | $38;
       $41 = ($40>>>0)>($Maxcode>>>0);
       
       if ($41) {
        $$0 = 2;
        label = 40;
        break L10;
       }
       HEAP32[$20>>2] = $40;
       $gep_int9 = $19;
       $gep10 = (($gep_int9) + 2)|0;
       $42 = $gep10;
       HEAP32[$frm_nxt>>2] = $42;
       
       break;
      }
      $43 = ($22&255)<(240);
      
      if ($43) {
       $44 = $19;
       $45 = (($18) - ($44))|0;
       $46 = ($45|0)<(3);
       
       if ($46) {
        $$0 = 1;
        label = 40;
        break L10;
       }
       $gep_int11 = $19;
       $gep12 = (($gep_int11) + 1)|0;
       $47 = $gep12;
       $48 = HEAP8[$47]|0;
       $gep_int13 = $19;
       $gep14 = (($gep_int13) + 2)|0;
       $49 = $gep14;
       $50 = HEAP8[$49]|0;
       
       if ((($23|0) == 224)) {
        $51 = $48 & -32;
        $52 = ($51<<24>>24)==(-96);
        
        if (!($52)) {
         $$0 = 2;
         label = 40;
         break L10;
        }
       } else if ((($23|0) == 237)) {
        $53 = $48 & -32;
        $54 = ($53<<24>>24)==(-128);
        
        if (!($54)) {
         $$0 = 2;
         label = 40;
         break L10;
        }
       } else {
        $55 = $48 & -64;
        $56 = ($55<<24>>24)==(-128);
        
        if (!($56)) {
         $$0 = 2;
         label = 40;
         break L10;
        }
       }
       $57 = $50&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       
       if (!($59)) {
        $$0 = 2;
        label = 40;
        break L10;
       }
       $60 = $23 << 12;
       $61 = $60 & 61440;
       $62 = $48&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       
       if ($68) {
        $$0 = 2;
        label = 40;
        break L10;
       }
       HEAP32[$20>>2] = $67;
       $gep_int15 = $19;
       $gep16 = (($gep_int15) + 3)|0;
       $69 = $gep16;
       HEAP32[$frm_nxt>>2] = $69;
       
       break;
      }
      $70 = ($22&255)<(245);
      
      if (!($70)) {
       $$0 = 2;
       label = 40;
       break L10;
      }
      $71 = $19;
      $72 = (($18) - ($71))|0;
      $73 = ($72|0)<(4);
      
      if ($73) {
       $$0 = 1;
       label = 40;
       break L10;
      }
      $gep_int17 = $19;
      $gep18 = (($gep_int17) + 1)|0;
      $74 = $gep18;
      $75 = HEAP8[$74]|0;
      $gep_int19 = $19;
      $gep20 = (($gep_int19) + 2)|0;
      $76 = $gep20;
      $77 = HEAP8[$76]|0;
      $gep_int21 = $19;
      $gep22 = (($gep_int21) + 3)|0;
      $78 = $gep22;
      $79 = HEAP8[$78]|0;
      
      if ((($23|0) == 240)) {
       $$off = (($75) + 112)<<24>>24;
       $80 = ($$off&255)<(48);
       
       if (!($80)) {
        $$0 = 2;
        label = 40;
        break L10;
       }
      } else if ((($23|0) == 244)) {
       $81 = $75 & -16;
       $82 = ($81<<24>>24)==(-128);
       
       if (!($82)) {
        $$0 = 2;
        label = 40;
        break L10;
       }
      } else {
       $83 = $75 & -64;
       $84 = ($83<<24>>24)==(-128);
       
       if (!($84)) {
        $$0 = 2;
        label = 40;
        break L10;
       }
      }
      $85 = $77&255;
      $86 = $85 & 192;
      $87 = ($86|0)==(128);
      
      if (!($87)) {
       $$0 = 2;
       label = 40;
       break L10;
      }
      $88 = $79&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      
      if (!($90)) {
       $$0 = 2;
       label = 40;
       break L10;
      }
      $91 = $23 << 18;
      $92 = $91 & 1835008;
      $93 = $75&255;
      $94 = $93 << 12;
      $95 = $94 & 258048;
      $96 = $95 | $92;
      $97 = $85 << 6;
      $98 = $97 & 4032;
      $99 = $96 | $98;
      $100 = $88 & 63;
      $101 = $99 | $100;
      $102 = ($101>>>0)>($Maxcode>>>0);
      
      if ($102) {
       $$0 = 2;
       label = 40;
       break L10;
      }
      HEAP32[$20>>2] = $101;
      $gep_int23 = $19;
      $gep24 = (($gep_int23) + 4)|0;
      $103 = $gep24;
      HEAP32[$frm_nxt>>2] = $103;
      
     }
    } while(0);
    $104 = HEAP32[$to_nxt>>2]|0;
    $gep_int25 = $104;
    $gep26 = (($gep_int25) + 4)|0;
    $105 = $gep26;
    HEAP32[$to_nxt>>2] = $105;
    $106 = HEAP32[$frm_nxt>>2]|0;
    $107 = ($106>>>0)<($frm_end>>>0);
    
    if ($107) {
     $19 = $106;$20 = $105;
    } else {
     $108 = $106;
     break L8;
    }
   }
   if ((label|0) == 40) {
    
    STACKTOP = sp;return $$0|0;
   }
  } else {
   $108 = $16;
  }
 } while(0);
 
 $109 = ($108>>>0)<($frm_end>>>0);
 $110 = $109&1;
 
 $$0 = $110;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,u$0,$to,u$1,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $to = $to|0;
 u$1 = u$1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,u$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0;
 STACKTOP = sp;return $1|0;
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0;
 var $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $mode & 4;
 $2 = ($1|0)==(0);
 
 do {
  if ($2) {
   $frm_nxt$1$ph = $frm;
  } else {
   $3 = $frm_end;
   $4 = $frm;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)>(2);
   
   if (!($6)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $7 = HEAP8[$frm]|0;
   $8 = ($7<<24>>24)==(-17);
   
   if (!($8)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $gep_int = $frm;
   $gep = (($gep_int) + 1)|0;
   $9 = $gep;
   $10 = HEAP8[$9]|0;
   $11 = ($10<<24>>24)==(-69);
   
   if (!($11)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $gep_int1 = $frm;
   $gep2 = (($gep_int1) + 2)|0;
   $12 = $gep2;
   $13 = HEAP8[$12]|0;
   $14 = ($13<<24>>24)==(-65);
   $gep_int3 = $frm;
   $gep4 = (($gep_int3) + 3)|0;
   $15 = $gep4;
   $$frm = $14 ? $15 : $frm;
   
   $frm_nxt$1$ph = $$frm;
  }
 } while(0);
 
 $16 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $17 = ($mx|0)!=(0);
 $or$cond13 = $16 & $17;
 
 L7: do {
  if ($or$cond13) {
   $18 = $frm_end;
   
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 1;
   L9: while(1) {
    
    
    $19 = HEAP8[$frm_nxt$115]|0;
    $20 = $19&255;
    $21 = ($19<<24>>24)>(-1);
    
    do {
     if ($21) {
      $22 = ($20>>>0)>($Maxcode>>>0);
      
      if ($22) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $gep_int5 = $frm_nxt$115;
      $gep6 = (($gep_int5) + 1)|0;
      $23 = $gep6;
      
      $frm_nxt$2 = $23;
     } else {
      $24 = ($19&255)<(194);
      
      if ($24) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $25 = ($19&255)<(224);
      
      if ($25) {
       $26 = $frm_nxt$115;
       $27 = (($18) - ($26))|0;
       $28 = ($27|0)<(2);
       
       if ($28) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $gep_int7 = $frm_nxt$115;
       $gep8 = (($gep_int7) + 1)|0;
       $29 = $gep8;
       $30 = HEAP8[$29]|0;
       $31 = $30&255;
       $32 = $31 & 192;
       $33 = ($32|0)==(128);
       
       if (!($33)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $34 = $20 << 6;
       $35 = $34 & 1984;
       $36 = $31 & 63;
       $37 = $36 | $35;
       $38 = ($37>>>0)>($Maxcode>>>0);
       
       if ($38) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $gep_int9 = $frm_nxt$115;
       $gep10 = (($gep_int9) + 2)|0;
       $39 = $gep10;
       
       $frm_nxt$2 = $39;
       break;
      }
      $40 = ($19&255)<(240);
      
      if ($40) {
       $41 = $frm_nxt$115;
       $42 = (($18) - ($41))|0;
       $43 = ($42|0)<(3);
       
       if ($43) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $gep_int11 = $frm_nxt$115;
       $gep12 = (($gep_int11) + 1)|0;
       $44 = $gep12;
       $45 = HEAP8[$44]|0;
       $gep_int13 = $frm_nxt$115;
       $gep14 = (($gep_int13) + 2)|0;
       $46 = $gep14;
       $47 = HEAP8[$46]|0;
       
       if ((($20|0) == 237)) {
        $52 = $45 & -32;
        $53 = ($52<<24>>24)==(-128);
        
        if (!($53)) {
         label = 23;
         break L9;
        }
       } else if ((($20|0) == 224)) {
        $48 = $45 & -32;
        $49 = ($48<<24>>24)==(-96);
        
        if (!($49)) {
         label = 21;
         break L9;
        }
       } else {
        $56 = $45 & -64;
        $57 = ($56<<24>>24)==(-128);
        
        if (!($57)) {
         label = 25;
         break L9;
        }
       }
       $60 = $47&255;
       $61 = $60 & 192;
       $62 = ($61|0)==(128);
       
       if (!($62)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $63 = $20 << 12;
       $64 = $63 & 61440;
       $65 = $45&255;
       $66 = $65 << 6;
       $67 = $66 & 4032;
       $68 = $67 | $64;
       $69 = $60 & 63;
       $70 = $68 | $69;
       $71 = ($70>>>0)>($Maxcode>>>0);
       
       if ($71) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $gep_int15 = $frm_nxt$115;
       $gep16 = (($gep_int15) + 3)|0;
       $72 = $gep16;
       
       $frm_nxt$2 = $72;
       break;
      }
      $73 = ($19&255)<(245);
      
      if (!($73)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $74 = $frm_nxt$115;
      $75 = (($18) - ($74))|0;
      $76 = ($75|0)<(4);
      
      if ($76) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $gep_int17 = $frm_nxt$115;
      $gep18 = (($gep_int17) + 1)|0;
      $77 = $gep18;
      $78 = HEAP8[$77]|0;
      $gep_int19 = $frm_nxt$115;
      $gep20 = (($gep_int19) + 2)|0;
      $79 = $gep20;
      $80 = HEAP8[$79]|0;
      $gep_int21 = $frm_nxt$115;
      $gep22 = (($gep_int21) + 3)|0;
      $81 = $gep22;
      $82 = HEAP8[$81]|0;
      
      if ((($20|0) == 244)) {
       $86 = $78 & -16;
       $87 = ($86<<24>>24)==(-128);
       
       if (!($87)) {
        label = 35;
        break L9;
       }
      } else if ((($20|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       
       if (!($83)) {
        label = 33;
        break L9;
       }
      } else {
       $90 = $78 & -64;
       $91 = ($90<<24>>24)==(-128);
       
       if (!($91)) {
        label = 37;
        break L9;
       }
      }
      $94 = $80&255;
      $95 = $94 & 192;
      $96 = ($95|0)==(128);
      
      if (!($96)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $97 = $82&255;
      $98 = $97 & 192;
      $99 = ($98|0)==(128);
      
      if (!($99)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $100 = $20 << 18;
      $101 = $100 & 1835008;
      $102 = $78&255;
      $103 = $102 << 12;
      $104 = $103 & 258048;
      $105 = $104 | $101;
      $106 = $94 << 6;
      $107 = $106 & 4032;
      $108 = $105 | $107;
      $109 = $97 & 63;
      $110 = $108 | $109;
      $111 = ($110>>>0)>($Maxcode>>>0);
      
      if ($111) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $gep_int23 = $frm_nxt$115;
      $gep24 = (($gep_int23) + 4)|0;
      $112 = $gep24;
      
      $frm_nxt$2 = $112;
     }
    } while(0);
    
    $113 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $114 = ($nchar32_t$014>>>0)<($mx>>>0);
    $or$cond = $113 & $114;
    
    if (!($or$cond)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
    $phitmp = (($nchar32_t$014) + 1)|0;
    
    $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $phitmp;
   }
   if ((label|0) == 21) {
    $50 = $frm;
    $51 = (($41) - ($50))|0;
    
    $$0 = $51;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 23) {
    $54 = $frm;
    $55 = (($41) - ($54))|0;
    
    $$0 = $55;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 25) {
    $58 = $frm;
    $59 = (($41) - ($58))|0;
    
    $$0 = $59;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 33) {
    $84 = $frm;
    $85 = (($74) - ($84))|0;
    
    $$0 = $85;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 35) {
    $88 = $frm;
    $89 = (($74) - ($88))|0;
    
    $$0 = $89;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 37) {
    $92 = $frm;
    $93 = (($74) - ($92))|0;
    
    $$0 = $93;
    
    STACKTOP = sp;return $$0|0;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 
 $115 = $frm_nxt$1$lcssa;
 $116 = $frm;
 $117 = (($115) - ($116))|0;
 
 $$0 = $117;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 8640;
 $gep_int3 = 8640;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 12)|0;
 $2 = $gep5;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 8640;
 $gep_int3 = 8640;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 12)|0;
 $2 = $gep5;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 8680;
 $gep_int3 = 8680;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 16)|0;
 $2 = $gep5;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep5 = 0, $gep_int = 0, $gep_int3 = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 8680;
 $gep_int3 = 8680;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $gep_int4 = $this;
 $gep5 = (($gep_int4) + 16)|0;
 $2 = $gep5;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP8[$1]|0;
 STACKTOP = sp;return $2|0;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return $2|0;
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 9)|0;
 $1 = $gep;
 $2 = HEAP8[$1]|0;
 STACKTOP = sp;return $2|0;
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 12)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return $2|0;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 12)|0;
 $1 = $gep;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 16)|0;
 $1 = $gep;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $expanded = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = 8720;
 $expanded = $gep_int;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$expanded,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep_int = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded1 = 8728;
 $gep_int = 8728;
 $expanded = $gep_int;
 $1 = _wcslen($expanded)|0;
 $expanded3 = 8728;
 $gep_int4 = 8728;
 $expanded2 = $gep_int4;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,$expanded2,$1);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $expanded = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = 8752;
 $expanded = $gep_int;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$expanded,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $gep_int = 0, $gep_int4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded1 = 8760;
 $gep_int = 8760;
 $expanded = $gep_int;
 $1 = _wcslen($expanded)|0;
 $expanded3 = 8760;
 $gep_int4 = 8760;
 $expanded2 = $gep_int4;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,$expanded2,$1);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0;
 var $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0;
 var $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0;
 var $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded5 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep64 = 0, $gep67 = 0, $gep70 = 0, $gep73 = 0;
 var $gep76 = 0, $gep79 = 0, $gep82 = 0, $gep85 = 0, $gep88 = 0, $gep91 = 0, $gep94 = 0, $gep97 = 0, $gep_int = 0, $gep_int56 = 0, $gep_int57 = 0, $gep_int58 = 0, $gep_int59 = 0, $gep_int60 = 0, $gep_int61 = 0, $gep_int62 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int66 = 0, $gep_int68 = 0;
 var $gep_int69 = 0, $gep_int71 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int96 = 0, $gep_int98 = 0;
 var $gep_int99 = 0, label = 0, sp = 0, u$12 = 0, u$15 = 0, u$18 = 0, u$21 = 0, u$24 = 0, u$27 = 0, u$30 = 0, u$33 = 0, u$36 = 0, u$39 = 0, u$42 = 0, u$45 = 0, u$48 = 0, u$5 = 0, u$9 = 0;
 sp = STACKTOP;
 $gep_int = 8792;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded53 = 8784;
  $37 = HEAP32[8784>>2]|0;
  STACKTOP = sp;return $37|0;
 }
 $expanded1 = 8792;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded53 = 8784;
  $37 = HEAP32[8784>>2]|0;
  STACKTOP = sp;return $37|0;
 }
 $gep_int56 = 15992;
 $expanded2 = $gep_int56;
 $5 = HEAP8[$expanded2]|0;
 $6 = ($5<<24>>24)==(0);
 
 do {
  if ($6) {
   $expanded3 = 15992;
   $7 = ___cxa_guard_acquire($expanded3|0)|0;
   $8 = ($7|0)==(0);
   
   if ($8) {
    break;
   }
   $gep_int57 = 15824;
   $expanded4 = $gep_int57;
   _memset($expanded4|0,0,168)|0;
   $gep_int58 = ___dso_handle;
   $expanded5 = $gep_int58;
   u$5 = _atexit(182,0,$expanded5|0)|0;
   $expanded6 = 15992;
   ___cxa_guard_release($expanded6|0);
   
  }
 } while(0);
 __THREW__ = 0;
 $expanded8 = 15824;
 $gep_int59 = 15824;
 $expanded7 = $gep_int59;
 $gep_int60 = 16000;
 $expanded9 = $gep_int60;
 u$9 = invoke_iii(24,$expanded7|0,$expanded9|0)|0;
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 
 do {
  if (!($10)) {
   __THREW__ = 0;
   $expanded11 = 15824;
   $gep_int61 = 15824;
   $gep = (($gep_int61) + 12)|0;
   $expanded10 = $gep;
   $gep_int62 = 16008;
   $expanded12 = $gep_int62;
   u$12 = invoke_iii(24,$expanded10|0,$expanded12|0)|0;
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if ($12) {
    break;
   }
   __THREW__ = 0;
   $expanded14 = 15824;
   $gep_int63 = 15824;
   $gep64 = (($gep_int63) + 24)|0;
   $expanded13 = $gep64;
   $gep_int65 = 16016;
   $expanded15 = $gep_int65;
   u$15 = invoke_iii(24,$expanded13|0,$expanded15|0)|0;
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if ($14) {
    break;
   }
   __THREW__ = 0;
   $expanded17 = 15824;
   $gep_int66 = 15824;
   $gep67 = (($gep_int66) + 36)|0;
   $expanded16 = $gep67;
   $gep_int68 = 16024;
   $expanded18 = $gep_int68;
   u$18 = invoke_iii(24,$expanded16|0,$expanded18|0)|0;
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   
   if ($16) {
    break;
   }
   __THREW__ = 0;
   $expanded20 = 15824;
   $gep_int69 = 15824;
   $gep70 = (($gep_int69) + 48)|0;
   $expanded19 = $gep70;
   $gep_int71 = 16040;
   $expanded21 = $gep_int71;
   u$21 = invoke_iii(24,$expanded19|0,$expanded21|0)|0;
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   
   if ($18) {
    break;
   }
   __THREW__ = 0;
   $expanded23 = 15824;
   $gep_int72 = 15824;
   $gep73 = (($gep_int72) + 60)|0;
   $expanded22 = $gep73;
   $gep_int74 = 16056;
   $expanded24 = $gep_int74;
   u$24 = invoke_iii(24,$expanded22|0,$expanded24|0)|0;
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $expanded26 = 15824;
   $gep_int75 = 15824;
   $gep76 = (($gep_int75) + 72)|0;
   $expanded25 = $gep76;
   $gep_int77 = 16064;
   $expanded27 = $gep_int77;
   u$27 = invoke_iii(24,$expanded25|0,$expanded27|0)|0;
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   
   if ($22) {
    break;
   }
   __THREW__ = 0;
   $expanded29 = 15824;
   $gep_int78 = 15824;
   $gep79 = (($gep_int78) + 84)|0;
   $expanded28 = $gep79;
   $gep_int80 = 16080;
   $expanded30 = $gep_int80;
   u$30 = invoke_iii(24,$expanded28|0,$expanded30|0)|0;
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   
   if ($24) {
    break;
   }
   __THREW__ = 0;
   $expanded32 = 15824;
   $gep_int81 = 15824;
   $gep82 = (($gep_int81) + 96)|0;
   $expanded31 = $gep82;
   $gep_int83 = 16088;
   $expanded33 = $gep_int83;
   u$33 = invoke_iii(24,$expanded31|0,$expanded33|0)|0;
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   
   if ($26) {
    break;
   }
   __THREW__ = 0;
   $expanded35 = 15824;
   $gep_int84 = 15824;
   $gep85 = (($gep_int84) + 108)|0;
   $expanded34 = $gep85;
   $gep_int86 = 16096;
   $expanded36 = $gep_int86;
   u$36 = invoke_iii(24,$expanded34|0,$expanded36|0)|0;
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   
   if ($28) {
    break;
   }
   __THREW__ = 0;
   $expanded38 = 15824;
   $gep_int87 = 15824;
   $gep88 = (($gep_int87) + 120)|0;
   $expanded37 = $gep88;
   $gep_int89 = 16104;
   $expanded39 = $gep_int89;
   u$39 = invoke_iii(24,$expanded37|0,$expanded39|0)|0;
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   
   if ($30) {
    break;
   }
   __THREW__ = 0;
   $expanded41 = 15824;
   $gep_int90 = 15824;
   $gep91 = (($gep_int90) + 132)|0;
   $expanded40 = $gep91;
   $gep_int92 = 16112;
   $expanded42 = $gep_int92;
   u$42 = invoke_iii(24,$expanded40|0,$expanded42|0)|0;
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   
   if ($32) {
    break;
   }
   __THREW__ = 0;
   $expanded44 = 15824;
   $gep_int93 = 15824;
   $gep94 = (($gep_int93) + 144)|0;
   $expanded43 = $gep94;
   $gep_int95 = 16120;
   $expanded45 = $gep_int95;
   u$45 = invoke_iii(24,$expanded43|0,$expanded45|0)|0;
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   
   if ($34) {
    break;
   }
   __THREW__ = 0;
   $expanded47 = 15824;
   $gep_int96 = 15824;
   $gep97 = (($gep_int96) + 156)|0;
   $expanded46 = $gep97;
   $gep_int98 = 16128;
   $expanded48 = $gep_int98;
   u$48 = invoke_iii(24,$expanded46|0,$expanded48|0)|0;
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   
   if ($36) {
    break;
   }
   $expanded50 = 15824;
   $gep_int99 = 15824;
   $expanded49 = $gep_int99;
   $expanded51 = 8784;
   HEAP32[8784>>2] = $expanded49;
   $expanded52 = 8792;
   ___cxa_guard_release($expanded52|0);
   
   $expanded53 = 8784;
   $37 = HEAP32[8784>>2]|0;
   STACKTOP = sp;return $37|0;
  }
 } while(0);
 $expanded54 = 69;
 $38 = ___cxa_find_matching_catch(-1,-1)|0;
 $39 = tempRet0;
 $expanded55 = 8792;
 ___cxa_guard_abort($expanded55|0);
 ___resumeException($38|0);
 // unreachable
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0;
 var $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0;
 var $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0;
 var $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded5 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded58 = 0, $expanded59 = 0, $expanded6 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0;
 var $expanded64 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep102 = 0, $gep105 = 0, $gep108 = 0, $gep111 = 0, $gep78 = 0, $gep81 = 0, $gep84 = 0, $gep87 = 0, $gep90 = 0, $gep93 = 0;
 var $gep96 = 0, $gep99 = 0, $gep_int = 0, $gep_int100 = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int110 = 0, $gep_int112 = 0, $gep_int113 = 0, $gep_int70 = 0, $gep_int71 = 0, $gep_int72 = 0, $gep_int73 = 0, $gep_int74 = 0, $gep_int75 = 0, $gep_int76 = 0;
 var $gep_int77 = 0, $gep_int79 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int83 = 0, $gep_int85 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int89 = 0, $gep_int91 = 0, $gep_int92 = 0, $gep_int94 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int98 = 0, label = 0, sp = 0, u$12 = 0, u$15 = 0, u$18 = 0;
 var u$21 = 0, u$24 = 0, u$27 = 0, u$30 = 0, u$33 = 0, u$36 = 0, u$39 = 0, u$42 = 0, u$45 = 0, u$48 = 0, u$5 = 0, u$9 = 0;
 sp = STACKTOP;
 $gep_int = 8808;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded67 = 8800;
  $37 = HEAP32[8800>>2]|0;
  STACKTOP = sp;return $37|0;
 }
 $expanded1 = 8808;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded67 = 8800;
  $37 = HEAP32[8800>>2]|0;
  STACKTOP = sp;return $37|0;
 }
 $gep_int70 = 15456;
 $expanded2 = $gep_int70;
 $5 = HEAP8[$expanded2]|0;
 $6 = ($5<<24>>24)==(0);
 
 do {
  if ($6) {
   $expanded3 = 15456;
   $7 = ___cxa_guard_acquire($expanded3|0)|0;
   $8 = ($7|0)==(0);
   
   if ($8) {
    break;
   }
   $gep_int71 = 15288;
   $expanded4 = $gep_int71;
   _memset($expanded4|0,0,168)|0;
   $gep_int72 = ___dso_handle;
   $expanded5 = $gep_int72;
   u$5 = _atexit(183,0,$expanded5|0)|0;
   $expanded6 = 15456;
   ___cxa_guard_release($expanded6|0);
   
  }
 } while(0);
 __THREW__ = 0;
 $expanded8 = 15288;
 $gep_int73 = 15288;
 $expanded7 = $gep_int73;
 $expanded10 = 15464;
 $gep_int74 = 15464;
 $expanded9 = $gep_int74;
 u$9 = invoke_iii(37,$expanded7|0,$expanded9|0)|0;
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 
 do {
  if (!($10)) {
   __THREW__ = 0;
   $expanded12 = 15288;
   $gep_int75 = 15288;
   $gep = (($gep_int75) + 12)|0;
   $expanded11 = $gep;
   $expanded14 = 15496;
   $gep_int76 = 15496;
   $expanded13 = $gep_int76;
   u$12 = invoke_iii(37,$expanded11|0,$expanded13|0)|0;
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if ($12) {
    break;
   }
   __THREW__ = 0;
   $expanded16 = 15288;
   $gep_int77 = 15288;
   $gep78 = (($gep_int77) + 24)|0;
   $expanded15 = $gep78;
   $expanded18 = 15528;
   $gep_int79 = 15528;
   $expanded17 = $gep_int79;
   u$15 = invoke_iii(37,$expanded15|0,$expanded17|0)|0;
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if ($14) {
    break;
   }
   __THREW__ = 0;
   $expanded20 = 15288;
   $gep_int80 = 15288;
   $gep81 = (($gep_int80) + 36)|0;
   $expanded19 = $gep81;
   $expanded22 = 15560;
   $gep_int82 = 15560;
   $expanded21 = $gep_int82;
   u$18 = invoke_iii(37,$expanded19|0,$expanded21|0)|0;
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   
   if ($16) {
    break;
   }
   __THREW__ = 0;
   $expanded24 = 15288;
   $gep_int83 = 15288;
   $gep84 = (($gep_int83) + 48)|0;
   $expanded23 = $gep84;
   $expanded26 = 15600;
   $gep_int85 = 15600;
   $expanded25 = $gep_int85;
   u$21 = invoke_iii(37,$expanded23|0,$expanded25|0)|0;
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   
   if ($18) {
    break;
   }
   __THREW__ = 0;
   $expanded28 = 15288;
   $gep_int86 = 15288;
   $gep87 = (($gep_int86) + 60)|0;
   $expanded27 = $gep87;
   $expanded30 = 15640;
   $gep_int88 = 15640;
   $expanded29 = $gep_int88;
   u$24 = invoke_iii(37,$expanded27|0,$expanded29|0)|0;
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $expanded32 = 15288;
   $gep_int89 = 15288;
   $gep90 = (($gep_int89) + 72)|0;
   $expanded31 = $gep90;
   $expanded34 = 15672;
   $gep_int91 = 15672;
   $expanded33 = $gep_int91;
   u$27 = invoke_iii(37,$expanded31|0,$expanded33|0)|0;
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   
   if ($22) {
    break;
   }
   __THREW__ = 0;
   $expanded36 = 15288;
   $gep_int92 = 15288;
   $gep93 = (($gep_int92) + 84)|0;
   $expanded35 = $gep93;
   $expanded38 = 15712;
   $gep_int94 = 15712;
   $expanded37 = $gep_int94;
   u$30 = invoke_iii(37,$expanded35|0,$expanded37|0)|0;
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   
   if ($24) {
    break;
   }
   __THREW__ = 0;
   $expanded40 = 15288;
   $gep_int95 = 15288;
   $gep96 = (($gep_int95) + 96)|0;
   $expanded39 = $gep96;
   $expanded42 = 15728;
   $gep_int97 = 15728;
   $expanded41 = $gep_int97;
   u$33 = invoke_iii(37,$expanded39|0,$expanded41|0)|0;
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   
   if ($26) {
    break;
   }
   __THREW__ = 0;
   $expanded44 = 15288;
   $gep_int98 = 15288;
   $gep99 = (($gep_int98) + 108)|0;
   $expanded43 = $gep99;
   $expanded46 = 15744;
   $gep_int100 = 15744;
   $expanded45 = $gep_int100;
   u$36 = invoke_iii(37,$expanded43|0,$expanded45|0)|0;
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   
   if ($28) {
    break;
   }
   __THREW__ = 0;
   $expanded48 = 15288;
   $gep_int101 = 15288;
   $gep102 = (($gep_int101) + 120)|0;
   $expanded47 = $gep102;
   $expanded50 = 15760;
   $gep_int103 = 15760;
   $expanded49 = $gep_int103;
   u$39 = invoke_iii(37,$expanded47|0,$expanded49|0)|0;
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   
   if ($30) {
    break;
   }
   __THREW__ = 0;
   $expanded52 = 15288;
   $gep_int104 = 15288;
   $gep105 = (($gep_int104) + 132)|0;
   $expanded51 = $gep105;
   $expanded54 = 15776;
   $gep_int106 = 15776;
   $expanded53 = $gep_int106;
   u$42 = invoke_iii(37,$expanded51|0,$expanded53|0)|0;
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   
   if ($32) {
    break;
   }
   __THREW__ = 0;
   $expanded56 = 15288;
   $gep_int107 = 15288;
   $gep108 = (($gep_int107) + 144)|0;
   $expanded55 = $gep108;
   $expanded58 = 15792;
   $gep_int109 = 15792;
   $expanded57 = $gep_int109;
   u$45 = invoke_iii(37,$expanded55|0,$expanded57|0)|0;
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   
   if ($34) {
    break;
   }
   __THREW__ = 0;
   $expanded60 = 15288;
   $gep_int110 = 15288;
   $gep111 = (($gep_int110) + 156)|0;
   $expanded59 = $gep111;
   $expanded62 = 15808;
   $gep_int112 = 15808;
   $expanded61 = $gep_int112;
   u$48 = invoke_iii(37,$expanded59|0,$expanded61|0)|0;
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   
   if ($36) {
    break;
   }
   $expanded64 = 15288;
   $gep_int113 = 15288;
   $expanded63 = $gep_int113;
   $expanded65 = 8800;
   HEAP32[8800>>2] = $expanded63;
   $expanded66 = 8808;
   ___cxa_guard_release($expanded66|0);
   
   $expanded67 = 8800;
   $37 = HEAP32[8800>>2]|0;
   STACKTOP = sp;return $37|0;
  }
 } while(0);
 $expanded68 = 69;
 $38 = ___cxa_find_matching_catch(-1,-1)|0;
 $39 = tempRet0;
 $expanded69 = 8808;
 ___cxa_guard_abort($expanded69|0);
 ___resumeException($38|0);
 // unreachable
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0;
 var $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0;
 var $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0;
 var $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded5 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded58 = 0, $expanded59 = 0, $expanded6 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0;
 var $expanded64 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded7 = 0, $expanded70 = 0, $expanded71 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded79 = 0, $expanded8 = 0, $expanded80 = 0, $expanded81 = 0;
 var $expanded82 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, $expanded9 = 0, $gep = 0, $gep100 = 0, $gep103 = 0, $gep106 = 0, $gep109 = 0, $gep112 = 0, $gep115 = 0, $gep118 = 0, $gep121 = 0, $gep124 = 0, $gep127 = 0, $gep130 = 0, $gep133 = 0, $gep136 = 0, $gep139 = 0;
 var $gep142 = 0, $gep145 = 0, $gep148 = 0, $gep151 = 0, $gep154 = 0, $gep157 = 0, $gep94 = 0, $gep97 = 0, $gep_int = 0, $gep_int101 = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int111 = 0, $gep_int113 = 0, $gep_int114 = 0, $gep_int116 = 0;
 var $gep_int117 = 0, $gep_int119 = 0, $gep_int120 = 0, $gep_int122 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int126 = 0, $gep_int128 = 0, $gep_int129 = 0, $gep_int131 = 0, $gep_int132 = 0, $gep_int134 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int138 = 0, $gep_int140 = 0, $gep_int141 = 0, $gep_int143 = 0, $gep_int144 = 0, $gep_int146 = 0;
 var $gep_int147 = 0, $gep_int149 = 0, $gep_int150 = 0, $gep_int152 = 0, $gep_int153 = 0, $gep_int155 = 0, $gep_int156 = 0, $gep_int158 = 0, $gep_int159 = 0, $gep_int86 = 0, $gep_int87 = 0, $gep_int88 = 0, $gep_int89 = 0, $gep_int90 = 0, $gep_int91 = 0, $gep_int92 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int96 = 0, $gep_int98 = 0;
 var $gep_int99 = 0, label = 0, sp = 0, u$12 = 0, u$15 = 0, u$18 = 0, u$21 = 0, u$24 = 0, u$27 = 0, u$30 = 0, u$33 = 0, u$36 = 0, u$39 = 0, u$42 = 0, u$45 = 0, u$48 = 0, u$5 = 0, u$51 = 0, u$54 = 0, u$57 = 0;
 var u$60 = 0, u$63 = 0, u$66 = 0, u$69 = 0, u$72 = 0, u$75 = 0, u$78 = 0, u$9 = 0;
 sp = STACKTOP;
 $gep_int = 8824;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded83 = 8816;
  $57 = HEAP32[8816>>2]|0;
  STACKTOP = sp;return $57|0;
 }
 $expanded1 = 8824;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded83 = 8816;
  $57 = HEAP32[8816>>2]|0;
  STACKTOP = sp;return $57|0;
 }
 $gep_int86 = 15064;
 $expanded2 = $gep_int86;
 $5 = HEAP8[$expanded2]|0;
 $6 = ($5<<24>>24)==(0);
 
 do {
  if ($6) {
   $expanded3 = 15064;
   $7 = ___cxa_guard_acquire($expanded3|0)|0;
   $8 = ($7|0)==(0);
   
   if ($8) {
    break;
   }
   $gep_int87 = 14776;
   $expanded4 = $gep_int87;
   _memset($expanded4|0,0,288)|0;
   $gep_int88 = ___dso_handle;
   $expanded5 = $gep_int88;
   u$5 = _atexit(184,0,$expanded5|0)|0;
   $expanded6 = 15064;
   ___cxa_guard_release($expanded6|0);
   
  }
 } while(0);
 __THREW__ = 0;
 $expanded8 = 14776;
 $gep_int89 = 14776;
 $expanded7 = $gep_int89;
 $gep_int90 = 15072;
 $expanded9 = $gep_int90;
 u$9 = invoke_iii(24,$expanded7|0,$expanded9|0)|0;
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 
 do {
  if (!($10)) {
   __THREW__ = 0;
   $expanded11 = 14776;
   $gep_int91 = 14776;
   $gep = (($gep_int91) + 12)|0;
   $expanded10 = $gep;
   $gep_int92 = 15080;
   $expanded12 = $gep_int92;
   u$12 = invoke_iii(24,$expanded10|0,$expanded12|0)|0;
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if ($12) {
    break;
   }
   __THREW__ = 0;
   $expanded14 = 14776;
   $gep_int93 = 14776;
   $gep94 = (($gep_int93) + 24)|0;
   $expanded13 = $gep94;
   $gep_int95 = 15096;
   $expanded15 = $gep_int95;
   u$15 = invoke_iii(24,$expanded13|0,$expanded15|0)|0;
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if ($14) {
    break;
   }
   __THREW__ = 0;
   $expanded17 = 14776;
   $gep_int96 = 14776;
   $gep97 = (($gep_int96) + 36)|0;
   $expanded16 = $gep97;
   $gep_int98 = 15104;
   $expanded18 = $gep_int98;
   u$18 = invoke_iii(24,$expanded16|0,$expanded18|0)|0;
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   
   if ($16) {
    break;
   }
   __THREW__ = 0;
   $expanded20 = 14776;
   $gep_int99 = 14776;
   $gep100 = (($gep_int99) + 48)|0;
   $expanded19 = $gep100;
   $gep_int101 = 15112;
   $expanded21 = $gep_int101;
   u$21 = invoke_iii(24,$expanded19|0,$expanded21|0)|0;
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   
   if ($18) {
    break;
   }
   __THREW__ = 0;
   $expanded23 = 14776;
   $gep_int102 = 14776;
   $gep103 = (($gep_int102) + 60)|0;
   $expanded22 = $gep103;
   $gep_int104 = 15120;
   $expanded24 = $gep_int104;
   u$24 = invoke_iii(24,$expanded22|0,$expanded24|0)|0;
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $expanded26 = 14776;
   $gep_int105 = 14776;
   $gep106 = (($gep_int105) + 72)|0;
   $expanded25 = $gep106;
   $gep_int107 = 15128;
   $expanded27 = $gep_int107;
   u$27 = invoke_iii(24,$expanded25|0,$expanded27|0)|0;
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   
   if ($22) {
    break;
   }
   __THREW__ = 0;
   $expanded29 = 14776;
   $gep_int108 = 14776;
   $gep109 = (($gep_int108) + 84)|0;
   $expanded28 = $gep109;
   $gep_int110 = 15136;
   $expanded30 = $gep_int110;
   u$30 = invoke_iii(24,$expanded28|0,$expanded30|0)|0;
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   
   if ($24) {
    break;
   }
   __THREW__ = 0;
   $expanded32 = 14776;
   $gep_int111 = 14776;
   $gep112 = (($gep_int111) + 96)|0;
   $expanded31 = $gep112;
   $gep_int113 = 15144;
   $expanded33 = $gep_int113;
   u$33 = invoke_iii(24,$expanded31|0,$expanded33|0)|0;
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   
   if ($26) {
    break;
   }
   __THREW__ = 0;
   $expanded35 = 14776;
   $gep_int114 = 14776;
   $gep115 = (($gep_int114) + 108)|0;
   $expanded34 = $gep115;
   $gep_int116 = 15160;
   $expanded36 = $gep_int116;
   u$36 = invoke_iii(24,$expanded34|0,$expanded36|0)|0;
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   
   if ($28) {
    break;
   }
   __THREW__ = 0;
   $expanded38 = 14776;
   $gep_int117 = 14776;
   $gep118 = (($gep_int117) + 120)|0;
   $expanded37 = $gep118;
   $gep_int119 = 15168;
   $expanded39 = $gep_int119;
   u$39 = invoke_iii(24,$expanded37|0,$expanded39|0)|0;
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   
   if ($30) {
    break;
   }
   __THREW__ = 0;
   $expanded41 = 14776;
   $gep_int120 = 14776;
   $gep121 = (($gep_int120) + 132)|0;
   $expanded40 = $gep121;
   $gep_int122 = 15184;
   $expanded42 = $gep_int122;
   u$42 = invoke_iii(24,$expanded40|0,$expanded42|0)|0;
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   
   if ($32) {
    break;
   }
   __THREW__ = 0;
   $expanded44 = 14776;
   $gep_int123 = 14776;
   $gep124 = (($gep_int123) + 144)|0;
   $expanded43 = $gep124;
   $gep_int125 = 15200;
   $expanded45 = $gep_int125;
   u$45 = invoke_iii(24,$expanded43|0,$expanded45|0)|0;
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   
   if ($34) {
    break;
   }
   __THREW__ = 0;
   $expanded47 = 14776;
   $gep_int126 = 14776;
   $gep127 = (($gep_int126) + 156)|0;
   $expanded46 = $gep127;
   $gep_int128 = 15208;
   $expanded48 = $gep_int128;
   u$48 = invoke_iii(24,$expanded46|0,$expanded48|0)|0;
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   
   if ($36) {
    break;
   }
   __THREW__ = 0;
   $expanded50 = 14776;
   $gep_int129 = 14776;
   $gep130 = (($gep_int129) + 168)|0;
   $expanded49 = $gep130;
   $gep_int131 = 15216;
   $expanded51 = $gep_int131;
   u$51 = invoke_iii(24,$expanded49|0,$expanded51|0)|0;
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   
   if ($38) {
    break;
   }
   __THREW__ = 0;
   $expanded53 = 14776;
   $gep_int132 = 14776;
   $gep133 = (($gep_int132) + 180)|0;
   $expanded52 = $gep133;
   $gep_int134 = 15224;
   $expanded54 = $gep_int134;
   u$54 = invoke_iii(24,$expanded52|0,$expanded54|0)|0;
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   
   if ($40) {
    break;
   }
   __THREW__ = 0;
   $expanded56 = 14776;
   $gep_int135 = 14776;
   $gep136 = (($gep_int135) + 192)|0;
   $expanded55 = $gep136;
   $gep_int137 = 15112;
   $expanded57 = $gep_int137;
   u$57 = invoke_iii(24,$expanded55|0,$expanded57|0)|0;
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   
   if ($42) {
    break;
   }
   __THREW__ = 0;
   $expanded59 = 14776;
   $gep_int138 = 14776;
   $gep139 = (($gep_int138) + 204)|0;
   $expanded58 = $gep139;
   $gep_int140 = 15232;
   $expanded60 = $gep_int140;
   u$60 = invoke_iii(24,$expanded58|0,$expanded60|0)|0;
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   
   if ($44) {
    break;
   }
   __THREW__ = 0;
   $expanded62 = 14776;
   $gep_int141 = 14776;
   $gep142 = (($gep_int141) + 216)|0;
   $expanded61 = $gep142;
   $gep_int143 = 15240;
   $expanded63 = $gep_int143;
   u$63 = invoke_iii(24,$expanded61|0,$expanded63|0)|0;
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   
   if ($46) {
    break;
   }
   __THREW__ = 0;
   $expanded65 = 14776;
   $gep_int144 = 14776;
   $gep145 = (($gep_int144) + 228)|0;
   $expanded64 = $gep145;
   $gep_int146 = 15248;
   $expanded66 = $gep_int146;
   u$66 = invoke_iii(24,$expanded64|0,$expanded66|0)|0;
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   
   if ($48) {
    break;
   }
   __THREW__ = 0;
   $expanded68 = 14776;
   $gep_int147 = 14776;
   $gep148 = (($gep_int147) + 240)|0;
   $expanded67 = $gep148;
   $gep_int149 = 15256;
   $expanded69 = $gep_int149;
   u$69 = invoke_iii(24,$expanded67|0,$expanded69|0)|0;
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   
   if ($50) {
    break;
   }
   __THREW__ = 0;
   $expanded71 = 14776;
   $gep_int150 = 14776;
   $gep151 = (($gep_int150) + 252)|0;
   $expanded70 = $gep151;
   $gep_int152 = 15264;
   $expanded72 = $gep_int152;
   u$72 = invoke_iii(24,$expanded70|0,$expanded72|0)|0;
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   
   if ($52) {
    break;
   }
   __THREW__ = 0;
   $expanded74 = 14776;
   $gep_int153 = 14776;
   $gep154 = (($gep_int153) + 264)|0;
   $expanded73 = $gep154;
   $gep_int155 = 15272;
   $expanded75 = $gep_int155;
   u$75 = invoke_iii(24,$expanded73|0,$expanded75|0)|0;
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   
   if ($54) {
    break;
   }
   __THREW__ = 0;
   $expanded77 = 14776;
   $gep_int156 = 14776;
   $gep157 = (($gep_int156) + 276)|0;
   $expanded76 = $gep157;
   $gep_int158 = 15280;
   $expanded78 = $gep_int158;
   u$78 = invoke_iii(24,$expanded76|0,$expanded78|0)|0;
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   
   if ($56) {
    break;
   }
   $expanded80 = 14776;
   $gep_int159 = 14776;
   $expanded79 = $gep_int159;
   $expanded81 = 8816;
   HEAP32[8816>>2] = $expanded79;
   $expanded82 = 8824;
   ___cxa_guard_release($expanded82|0);
   
   $expanded83 = 8816;
   $57 = HEAP32[8816>>2]|0;
   STACKTOP = sp;return $57|0;
  }
 } while(0);
 $expanded84 = 69;
 $58 = ___cxa_find_matching_catch(-1,-1)|0;
 $59 = tempRet0;
 $expanded85 = 8824;
 ___cxa_guard_abort($expanded85|0);
 ___resumeException($58|0);
 // unreachable
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0;
 var $expanded1 = 0, $expanded10 = 0, $expanded100 = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded104 = 0, $expanded105 = 0, $expanded106 = 0, $expanded107 = 0, $expanded108 = 0, $expanded109 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0;
 var $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0;
 var $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded5 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0;
 var $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded58 = 0, $expanded59 = 0, $expanded6 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded7 = 0, $expanded70 = 0, $expanded71 = 0, $expanded72 = 0;
 var $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded79 = 0, $expanded8 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, $expanded86 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded9 = 0, $expanded90 = 0;
 var $expanded91 = 0, $expanded92 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded98 = 0, $expanded99 = 0, $gep = 0, $gep118 = 0, $gep121 = 0, $gep124 = 0, $gep127 = 0, $gep130 = 0, $gep133 = 0, $gep136 = 0, $gep139 = 0, $gep142 = 0, $gep145 = 0;
 var $gep148 = 0, $gep151 = 0, $gep154 = 0, $gep157 = 0, $gep160 = 0, $gep163 = 0, $gep166 = 0, $gep169 = 0, $gep172 = 0, $gep175 = 0, $gep178 = 0, $gep181 = 0, $gep_int = 0, $gep_int110 = 0, $gep_int111 = 0, $gep_int112 = 0, $gep_int113 = 0, $gep_int114 = 0, $gep_int115 = 0, $gep_int116 = 0;
 var $gep_int117 = 0, $gep_int119 = 0, $gep_int120 = 0, $gep_int122 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int126 = 0, $gep_int128 = 0, $gep_int129 = 0, $gep_int131 = 0, $gep_int132 = 0, $gep_int134 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int138 = 0, $gep_int140 = 0, $gep_int141 = 0, $gep_int143 = 0, $gep_int144 = 0, $gep_int146 = 0;
 var $gep_int147 = 0, $gep_int149 = 0, $gep_int150 = 0, $gep_int152 = 0, $gep_int153 = 0, $gep_int155 = 0, $gep_int156 = 0, $gep_int158 = 0, $gep_int159 = 0, $gep_int161 = 0, $gep_int162 = 0, $gep_int164 = 0, $gep_int165 = 0, $gep_int167 = 0, $gep_int168 = 0, $gep_int170 = 0, $gep_int171 = 0, $gep_int173 = 0, $gep_int174 = 0, $gep_int176 = 0;
 var $gep_int177 = 0, $gep_int179 = 0, $gep_int180 = 0, $gep_int182 = 0, $gep_int183 = 0, label = 0, sp = 0, u$12 = 0, u$15 = 0, u$18 = 0, u$21 = 0, u$24 = 0, u$27 = 0, u$30 = 0, u$33 = 0, u$36 = 0, u$39 = 0, u$42 = 0, u$45 = 0, u$48 = 0;
 var u$5 = 0, u$51 = 0, u$54 = 0, u$57 = 0, u$60 = 0, u$63 = 0, u$66 = 0, u$69 = 0, u$72 = 0, u$75 = 0, u$78 = 0, u$9 = 0;
 sp = STACKTOP;
 $gep_int = 8840;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded107 = 8832;
  $57 = HEAP32[8832>>2]|0;
  STACKTOP = sp;return $57|0;
 }
 $expanded1 = 8840;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded107 = 8832;
  $57 = HEAP32[8832>>2]|0;
  STACKTOP = sp;return $57|0;
 }
 $gep_int110 = 14224;
 $expanded2 = $gep_int110;
 $5 = HEAP8[$expanded2]|0;
 $6 = ($5<<24>>24)==(0);
 
 do {
  if ($6) {
   $expanded3 = 14224;
   $7 = ___cxa_guard_acquire($expanded3|0)|0;
   $8 = ($7|0)==(0);
   
   if ($8) {
    break;
   }
   $gep_int111 = 13936;
   $expanded4 = $gep_int111;
   _memset($expanded4|0,0,288)|0;
   $gep_int112 = ___dso_handle;
   $expanded5 = $gep_int112;
   u$5 = _atexit(185,0,$expanded5|0)|0;
   $expanded6 = 14224;
   ___cxa_guard_release($expanded6|0);
   
  }
 } while(0);
 __THREW__ = 0;
 $expanded8 = 13936;
 $gep_int113 = 13936;
 $expanded7 = $gep_int113;
 $expanded10 = 14232;
 $gep_int114 = 14232;
 $expanded9 = $gep_int114;
 u$9 = invoke_iii(37,$expanded7|0,$expanded9|0)|0;
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 
 do {
  if (!($10)) {
   __THREW__ = 0;
   $expanded12 = 13936;
   $gep_int115 = 13936;
   $gep = (($gep_int115) + 12)|0;
   $expanded11 = $gep;
   $expanded14 = 14264;
   $gep_int116 = 14264;
   $expanded13 = $gep_int116;
   u$12 = invoke_iii(37,$expanded11|0,$expanded13|0)|0;
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if ($12) {
    break;
   }
   __THREW__ = 0;
   $expanded16 = 13936;
   $gep_int117 = 13936;
   $gep118 = (($gep_int117) + 24)|0;
   $expanded15 = $gep118;
   $expanded18 = 14304;
   $gep_int119 = 14304;
   $expanded17 = $gep_int119;
   u$15 = invoke_iii(37,$expanded15|0,$expanded17|0)|0;
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   
   if ($14) {
    break;
   }
   __THREW__ = 0;
   $expanded20 = 13936;
   $gep_int120 = 13936;
   $gep121 = (($gep_int120) + 36)|0;
   $expanded19 = $gep121;
   $expanded22 = 14328;
   $gep_int122 = 14328;
   $expanded21 = $gep_int122;
   u$18 = invoke_iii(37,$expanded19|0,$expanded21|0)|0;
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   
   if ($16) {
    break;
   }
   __THREW__ = 0;
   $expanded24 = 13936;
   $gep_int123 = 13936;
   $gep124 = (($gep_int123) + 48)|0;
   $expanded23 = $gep124;
   $expanded26 = 14648;
   $gep_int125 = 14648;
   $expanded25 = $gep_int125;
   u$21 = invoke_iii(37,$expanded23|0,$expanded25|0)|0;
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   
   if ($18) {
    break;
   }
   __THREW__ = 0;
   $expanded28 = 13936;
   $gep_int126 = 13936;
   $gep127 = (($gep_int126) + 60)|0;
   $expanded27 = $gep127;
   $expanded30 = 14352;
   $gep_int128 = 14352;
   $expanded29 = $gep_int128;
   u$24 = invoke_iii(37,$expanded27|0,$expanded29|0)|0;
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $expanded32 = 13936;
   $gep_int129 = 13936;
   $gep130 = (($gep_int129) + 72)|0;
   $expanded31 = $gep130;
   $expanded34 = 14376;
   $gep_int131 = 14376;
   $expanded33 = $gep_int131;
   u$27 = invoke_iii(37,$expanded31|0,$expanded33|0)|0;
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   
   if ($22) {
    break;
   }
   __THREW__ = 0;
   $expanded36 = 13936;
   $gep_int132 = 13936;
   $gep133 = (($gep_int132) + 84)|0;
   $expanded35 = $gep133;
   $expanded38 = 14400;
   $gep_int134 = 14400;
   $expanded37 = $gep_int134;
   u$30 = invoke_iii(37,$expanded35|0,$expanded37|0)|0;
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   
   if ($24) {
    break;
   }
   __THREW__ = 0;
   $expanded40 = 13936;
   $gep_int135 = 13936;
   $gep136 = (($gep_int135) + 96)|0;
   $expanded39 = $gep136;
   $expanded42 = 14432;
   $gep_int137 = 14432;
   $expanded41 = $gep_int137;
   u$33 = invoke_iii(37,$expanded39|0,$expanded41|0)|0;
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   
   if ($26) {
    break;
   }
   __THREW__ = 0;
   $expanded44 = 13936;
   $gep_int138 = 13936;
   $gep139 = (($gep_int138) + 108)|0;
   $expanded43 = $gep139;
   $expanded46 = 14472;
   $gep_int140 = 14472;
   $expanded45 = $gep_int140;
   u$36 = invoke_iii(37,$expanded43|0,$expanded45|0)|0;
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   
   if ($28) {
    break;
   }
   __THREW__ = 0;
   $expanded48 = 13936;
   $gep_int141 = 13936;
   $gep142 = (($gep_int141) + 120)|0;
   $expanded47 = $gep142;
   $expanded50 = 14504;
   $gep_int143 = 14504;
   $expanded49 = $gep_int143;
   u$39 = invoke_iii(37,$expanded47|0,$expanded49|0)|0;
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   
   if ($30) {
    break;
   }
   __THREW__ = 0;
   $expanded52 = 13936;
   $gep_int144 = 13936;
   $gep145 = (($gep_int144) + 132)|0;
   $expanded51 = $gep145;
   $expanded54 = 14544;
   $gep_int146 = 14544;
   $expanded53 = $gep_int146;
   u$42 = invoke_iii(37,$expanded51|0,$expanded53|0)|0;
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   
   if ($32) {
    break;
   }
   __THREW__ = 0;
   $expanded56 = 13936;
   $gep_int147 = 13936;
   $gep148 = (($gep_int147) + 144)|0;
   $expanded55 = $gep148;
   $expanded58 = 14584;
   $gep_int149 = 14584;
   $expanded57 = $gep_int149;
   u$45 = invoke_iii(37,$expanded55|0,$expanded57|0)|0;
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   
   if ($34) {
    break;
   }
   __THREW__ = 0;
   $expanded60 = 13936;
   $gep_int150 = 13936;
   $gep151 = (($gep_int150) + 156)|0;
   $expanded59 = $gep151;
   $expanded62 = 14600;
   $gep_int152 = 14600;
   $expanded61 = $gep_int152;
   u$48 = invoke_iii(37,$expanded59|0,$expanded61|0)|0;
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   
   if ($36) {
    break;
   }
   __THREW__ = 0;
   $expanded64 = 13936;
   $gep_int153 = 13936;
   $gep154 = (($gep_int153) + 168)|0;
   $expanded63 = $gep154;
   $expanded66 = 14616;
   $gep_int155 = 14616;
   $expanded65 = $gep_int155;
   u$51 = invoke_iii(37,$expanded63|0,$expanded65|0)|0;
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   
   if ($38) {
    break;
   }
   __THREW__ = 0;
   $expanded68 = 13936;
   $gep_int156 = 13936;
   $gep157 = (($gep_int156) + 180)|0;
   $expanded67 = $gep157;
   $expanded70 = 14632;
   $gep_int158 = 14632;
   $expanded69 = $gep_int158;
   u$54 = invoke_iii(37,$expanded67|0,$expanded69|0)|0;
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   
   if ($40) {
    break;
   }
   __THREW__ = 0;
   $expanded72 = 13936;
   $gep_int159 = 13936;
   $gep160 = (($gep_int159) + 192)|0;
   $expanded71 = $gep160;
   $expanded74 = 14648;
   $gep_int161 = 14648;
   $expanded73 = $gep_int161;
   u$57 = invoke_iii(37,$expanded71|0,$expanded73|0)|0;
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   
   if ($42) {
    break;
   }
   __THREW__ = 0;
   $expanded76 = 13936;
   $gep_int162 = 13936;
   $gep163 = (($gep_int162) + 204)|0;
   $expanded75 = $gep163;
   $expanded78 = 14664;
   $gep_int164 = 14664;
   $expanded77 = $gep_int164;
   u$60 = invoke_iii(37,$expanded75|0,$expanded77|0)|0;
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   
   if ($44) {
    break;
   }
   __THREW__ = 0;
   $expanded80 = 13936;
   $gep_int165 = 13936;
   $gep166 = (($gep_int165) + 216)|0;
   $expanded79 = $gep166;
   $expanded82 = 14680;
   $gep_int167 = 14680;
   $expanded81 = $gep_int167;
   u$63 = invoke_iii(37,$expanded79|0,$expanded81|0)|0;
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   
   if ($46) {
    break;
   }
   __THREW__ = 0;
   $expanded84 = 13936;
   $gep_int168 = 13936;
   $gep169 = (($gep_int168) + 228)|0;
   $expanded83 = $gep169;
   $expanded86 = 14696;
   $gep_int170 = 14696;
   $expanded85 = $gep_int170;
   u$66 = invoke_iii(37,$expanded83|0,$expanded85|0)|0;
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   
   if ($48) {
    break;
   }
   __THREW__ = 0;
   $expanded88 = 13936;
   $gep_int171 = 13936;
   $gep172 = (($gep_int171) + 240)|0;
   $expanded87 = $gep172;
   $expanded90 = 14712;
   $gep_int173 = 14712;
   $expanded89 = $gep_int173;
   u$69 = invoke_iii(37,$expanded87|0,$expanded89|0)|0;
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   
   if ($50) {
    break;
   }
   __THREW__ = 0;
   $expanded92 = 13936;
   $gep_int174 = 13936;
   $gep175 = (($gep_int174) + 252)|0;
   $expanded91 = $gep175;
   $expanded94 = 14728;
   $gep_int176 = 14728;
   $expanded93 = $gep_int176;
   u$72 = invoke_iii(37,$expanded91|0,$expanded93|0)|0;
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   
   if ($52) {
    break;
   }
   __THREW__ = 0;
   $expanded96 = 13936;
   $gep_int177 = 13936;
   $gep178 = (($gep_int177) + 264)|0;
   $expanded95 = $gep178;
   $expanded98 = 14744;
   $gep_int179 = 14744;
   $expanded97 = $gep_int179;
   u$75 = invoke_iii(37,$expanded95|0,$expanded97|0)|0;
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   
   if ($54) {
    break;
   }
   __THREW__ = 0;
   $expanded100 = 13936;
   $gep_int180 = 13936;
   $gep181 = (($gep_int180) + 276)|0;
   $expanded99 = $gep181;
   $expanded102 = 14760;
   $gep_int182 = 14760;
   $expanded101 = $gep_int182;
   u$78 = invoke_iii(37,$expanded99|0,$expanded101|0)|0;
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   
   if ($56) {
    break;
   }
   $expanded104 = 13936;
   $gep_int183 = 13936;
   $expanded103 = $gep_int183;
   $expanded105 = 8832;
   HEAP32[8832>>2] = $expanded103;
   $expanded106 = 8840;
   ___cxa_guard_release($expanded106|0);
   
   $expanded107 = 8832;
   $57 = HEAP32[8832>>2]|0;
   STACKTOP = sp;return $57|0;
  }
 } while(0);
 $expanded108 = 69;
 $58 = ___cxa_find_matching_catch(-1,-1)|0;
 $59 = tempRet0;
 $expanded109 = 8840;
 ___cxa_guard_abort($expanded109|0);
 ___resumeException($58|0);
 // unreachable
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0;
 var $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep_int = 0, $gep_int20 = 0, $gep_int21 = 0, $gep_int22 = 0;
 var $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int27 = 0, label = 0, sp = 0, u$12 = 0, u$5 = 0, u$9 = 0;
 sp = STACKTOP;
 $gep_int = 8856;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded17 = 8848;
  $13 = HEAP32[8848>>2]|0;
  STACKTOP = sp;return $13|0;
 }
 $expanded1 = 8856;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded17 = 8848;
  $13 = HEAP32[8848>>2]|0;
  STACKTOP = sp;return $13|0;
 }
 $gep_int20 = 13912;
 $expanded2 = $gep_int20;
 $5 = HEAP8[$expanded2]|0;
 $6 = ($5<<24>>24)==(0);
 
 do {
  if ($6) {
   $expanded3 = 13912;
   $7 = ___cxa_guard_acquire($expanded3|0)|0;
   $8 = ($7|0)==(0);
   
   if ($8) {
    break;
   }
   $gep_int21 = 13624;
   $expanded4 = $gep_int21;
   _memset($expanded4|0,0,288)|0;
   $gep_int22 = ___dso_handle;
   $expanded5 = $gep_int22;
   u$5 = _atexit(186,0,$expanded5|0)|0;
   $expanded6 = 13912;
   ___cxa_guard_release($expanded6|0);
   
  }
 } while(0);
 __THREW__ = 0;
 $expanded8 = 13624;
 $gep_int23 = 13624;
 $expanded7 = $gep_int23;
 $gep_int24 = 13920;
 $expanded9 = $gep_int24;
 u$9 = invoke_iii(24,$expanded7|0,$expanded9|0)|0;
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 
 if ($10) {
  $expanded18 = 69;
  $14 = ___cxa_find_matching_catch(-1,-1)|0;
  $15 = tempRet0;
  $expanded19 = 8856;
  ___cxa_guard_abort($expanded19|0);
  ___resumeException($14|0);
  // unreachable
 }
 __THREW__ = 0;
 $expanded11 = 13624;
 $gep_int25 = 13624;
 $gep = (($gep_int25) + 12)|0;
 $expanded10 = $gep;
 $gep_int26 = 13928;
 $expanded12 = $gep_int26;
 u$12 = invoke_iii(24,$expanded10|0,$expanded12|0)|0;
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 
 if ($12) {
  $expanded18 = 69;
  $14 = ___cxa_find_matching_catch(-1,-1)|0;
  $15 = tempRet0;
  $expanded19 = 8856;
  ___cxa_guard_abort($expanded19|0);
  ___resumeException($14|0);
  // unreachable
 }
 $expanded14 = 13624;
 $gep_int27 = 13624;
 $expanded13 = $gep_int27;
 $expanded15 = 8848;
 HEAP32[8848>>2] = $expanded13;
 $expanded16 = 8856;
 ___cxa_guard_release($expanded16|0);
 
 $expanded17 = 8848;
 $13 = HEAP32[8848>>2]|0;
 STACKTOP = sp;return $13|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0;
 var $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep_int = 0, $gep_int22 = 0;
 var $gep_int23 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int26 = 0, $gep_int27 = 0, $gep_int28 = 0, $gep_int29 = 0, label = 0, sp = 0, u$12 = 0, u$5 = 0, u$9 = 0;
 sp = STACKTOP;
 $gep_int = 8872;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded19 = 8864;
  $13 = HEAP32[8864>>2]|0;
  STACKTOP = sp;return $13|0;
 }
 $expanded1 = 8872;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded19 = 8864;
  $13 = HEAP32[8864>>2]|0;
  STACKTOP = sp;return $13|0;
 }
 $gep_int22 = 13584;
 $expanded2 = $gep_int22;
 $5 = HEAP8[$expanded2]|0;
 $6 = ($5<<24>>24)==(0);
 
 do {
  if ($6) {
   $expanded3 = 13584;
   $7 = ___cxa_guard_acquire($expanded3|0)|0;
   $8 = ($7|0)==(0);
   
   if ($8) {
    break;
   }
   $gep_int23 = 13296;
   $expanded4 = $gep_int23;
   _memset($expanded4|0,0,288)|0;
   $gep_int24 = ___dso_handle;
   $expanded5 = $gep_int24;
   u$5 = _atexit(187,0,$expanded5|0)|0;
   $expanded6 = 13584;
   ___cxa_guard_release($expanded6|0);
   
  }
 } while(0);
 __THREW__ = 0;
 $expanded8 = 13296;
 $gep_int25 = 13296;
 $expanded7 = $gep_int25;
 $expanded10 = 13592;
 $gep_int26 = 13592;
 $expanded9 = $gep_int26;
 u$9 = invoke_iii(37,$expanded7|0,$expanded9|0)|0;
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 
 if ($10) {
  $expanded20 = 69;
  $14 = ___cxa_find_matching_catch(-1,-1)|0;
  $15 = tempRet0;
  $expanded21 = 8872;
  ___cxa_guard_abort($expanded21|0);
  ___resumeException($14|0);
  // unreachable
 }
 __THREW__ = 0;
 $expanded12 = 13296;
 $gep_int27 = 13296;
 $gep = (($gep_int27) + 12)|0;
 $expanded11 = $gep;
 $expanded14 = 13608;
 $gep_int28 = 13608;
 $expanded13 = $gep_int28;
 u$12 = invoke_iii(37,$expanded11|0,$expanded13|0)|0;
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 
 if ($12) {
  $expanded20 = 69;
  $14 = ___cxa_find_matching_catch(-1,-1)|0;
  $15 = tempRet0;
  $expanded21 = 8872;
  ___cxa_guard_abort($expanded21|0);
  ___resumeException($14|0);
  // unreachable
 }
 $expanded16 = 13296;
 $gep_int29 = 13296;
 $expanded15 = $gep_int29;
 $expanded17 = 8864;
 HEAP32[8864>>2] = $expanded15;
 $expanded18 = 8872;
 ___cxa_guard_release($expanded18|0);
 
 $expanded19 = 8864;
 $13 = HEAP32[8864>>2]|0;
 STACKTOP = sp;return $13|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep_int = 0;
 var $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, label = 0, sp = 0, u$5 = 0;
 sp = STACKTOP;
 $gep_int = 8896;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded8 = 8880;
  STACKTOP = sp;return $expanded8|0;
 }
 $expanded1 = 8896;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded8 = 8880;
  STACKTOP = sp;return $expanded8|0;
 }
 __THREW__ = 0;
 $expanded2 = 8880;
 $gep_int11 = 8904;
 $expanded3 = $gep_int11;
 invoke_viii(3,$expanded2|0,$expanded3|0,8);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if ($6) {
  $expanded9 = 69;
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  $expanded10 = 8896;
  ___cxa_guard_abort($expanded10|0);
  ___resumeException($7|0);
  // unreachable
 }
 $expanded4 = 131;
 $gep_int12 = 8880;
 $expanded5 = $gep_int12;
 $gep_int13 = ___dso_handle;
 $expanded6 = $gep_int13;
 u$5 = _atexit($expanded4|0,$expanded5|0,$expanded6|0)|0;
 $expanded7 = 8896;
 ___cxa_guard_release($expanded7|0);
 
 $expanded8 = 8880;
 STACKTOP = sp;return $expanded8|0;
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, label = 0, sp = 0, u$7 = 0;
 sp = STACKTOP;
 $gep_int = 8936;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded11 = 8920;
  STACKTOP = sp;return $expanded11|0;
 }
 $expanded1 = 8936;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded11 = 8920;
  STACKTOP = sp;return $expanded11|0;
 }
 __THREW__ = 0;
 $expanded3 = 8944;
 $gep_int14 = 8944;
 $expanded2 = $gep_int14;
 $5 = invoke_ii(96,$expanded2|0)|0;
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 if ($7) {
  $expanded12 = 69;
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  $expanded13 = 8936;
  ___cxa_guard_abort($expanded13|0);
  ___resumeException($10|0);
  // unreachable
 }
 __THREW__ = 0;
 $expanded4 = 8920;
 $expanded6 = 8944;
 $gep_int15 = 8944;
 $expanded5 = $gep_int15;
 invoke_viii(21,$expanded4|0,$expanded5|0,$5|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 
 if ($9) {
  $expanded12 = 69;
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  $expanded13 = 8936;
  ___cxa_guard_abort($expanded13|0);
  ___resumeException($10|0);
  // unreachable
 }
 $expanded7 = 188;
 $gep_int16 = 8920;
 $expanded8 = $gep_int16;
 $gep_int17 = ___dso_handle;
 $expanded9 = $gep_int17;
 u$7 = _atexit($expanded7|0,$expanded8|0,$expanded9|0)|0;
 $expanded10 = 8936;
 ___cxa_guard_release($expanded10|0);
 
 $expanded11 = 8920;
 STACKTOP = sp;return $expanded11|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep_int = 0;
 var $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, label = 0, sp = 0, u$5 = 0;
 sp = STACKTOP;
 $gep_int = 9000;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded8 = 8984;
  STACKTOP = sp;return $expanded8|0;
 }
 $expanded1 = 9000;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded8 = 8984;
  STACKTOP = sp;return $expanded8|0;
 }
 __THREW__ = 0;
 $expanded2 = 8984;
 $gep_int11 = 9008;
 $expanded3 = $gep_int11;
 invoke_viii(3,$expanded2|0,$expanded3|0,8);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if ($6) {
  $expanded9 = 69;
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  $expanded10 = 9000;
  ___cxa_guard_abort($expanded10|0);
  ___resumeException($7|0);
  // unreachable
 }
 $expanded4 = 131;
 $gep_int12 = 8984;
 $expanded5 = $gep_int12;
 $gep_int13 = ___dso_handle;
 $expanded6 = $gep_int13;
 u$5 = _atexit($expanded4|0,$expanded5|0,$expanded6|0)|0;
 $expanded7 = 9000;
 ___cxa_guard_release($expanded7|0);
 
 $expanded8 = 8984;
 STACKTOP = sp;return $expanded8|0;
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, label = 0, sp = 0, u$7 = 0;
 sp = STACKTOP;
 $gep_int = 9040;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded11 = 9024;
  STACKTOP = sp;return $expanded11|0;
 }
 $expanded1 = 9040;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded11 = 9024;
  STACKTOP = sp;return $expanded11|0;
 }
 __THREW__ = 0;
 $expanded3 = 9048;
 $gep_int14 = 9048;
 $expanded2 = $gep_int14;
 $5 = invoke_ii(96,$expanded2|0)|0;
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 if ($7) {
  $expanded12 = 69;
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  $expanded13 = 9040;
  ___cxa_guard_abort($expanded13|0);
  ___resumeException($10|0);
  // unreachable
 }
 __THREW__ = 0;
 $expanded4 = 9024;
 $expanded6 = 9048;
 $gep_int15 = 9048;
 $expanded5 = $gep_int15;
 invoke_viii(21,$expanded4|0,$expanded5|0,$5|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 
 if ($9) {
  $expanded12 = 69;
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  $expanded13 = 9040;
  ___cxa_guard_abort($expanded13|0);
  ___resumeException($10|0);
  // unreachable
 }
 $expanded7 = 188;
 $gep_int16 = 9024;
 $expanded8 = $gep_int16;
 $gep_int17 = ___dso_handle;
 $expanded9 = $gep_int17;
 u$7 = _atexit($expanded7|0,$expanded8|0,$expanded9|0)|0;
 $expanded10 = 9040;
 ___cxa_guard_release($expanded10|0);
 
 $expanded11 = 9024;
 STACKTOP = sp;return $expanded11|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep_int = 0;
 var $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, label = 0, sp = 0, u$5 = 0;
 sp = STACKTOP;
 $gep_int = 9104;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded8 = 9088;
  STACKTOP = sp;return $expanded8|0;
 }
 $expanded1 = 9104;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded8 = 9088;
  STACKTOP = sp;return $expanded8|0;
 }
 __THREW__ = 0;
 $expanded2 = 9088;
 $gep_int11 = 9112;
 $expanded3 = $gep_int11;
 invoke_viii(3,$expanded2|0,$expanded3|0,20);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if ($6) {
  $expanded9 = 69;
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  $expanded10 = 9104;
  ___cxa_guard_abort($expanded10|0);
  ___resumeException($7|0);
  // unreachable
 }
 $expanded4 = 131;
 $gep_int12 = 9088;
 $expanded5 = $gep_int12;
 $gep_int13 = ___dso_handle;
 $expanded6 = $gep_int13;
 u$5 = _atexit($expanded4|0,$expanded5|0,$expanded6|0)|0;
 $expanded7 = 9104;
 ___cxa_guard_release($expanded7|0);
 
 $expanded8 = 9088;
 STACKTOP = sp;return $expanded8|0;
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, label = 0, sp = 0, u$7 = 0;
 sp = STACKTOP;
 $gep_int = 9152;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded11 = 9136;
  STACKTOP = sp;return $expanded11|0;
 }
 $expanded1 = 9152;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded11 = 9136;
  STACKTOP = sp;return $expanded11|0;
 }
 __THREW__ = 0;
 $expanded3 = 9160;
 $gep_int14 = 9160;
 $expanded2 = $gep_int14;
 $5 = invoke_ii(96,$expanded2|0)|0;
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 if ($7) {
  $expanded12 = 69;
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  $expanded13 = 9152;
  ___cxa_guard_abort($expanded13|0);
  ___resumeException($10|0);
  // unreachable
 }
 __THREW__ = 0;
 $expanded4 = 9136;
 $expanded6 = 9160;
 $gep_int15 = 9160;
 $expanded5 = $gep_int15;
 invoke_viii(21,$expanded4|0,$expanded5|0,$5|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 
 if ($9) {
  $expanded12 = 69;
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  $expanded13 = 9152;
  ___cxa_guard_abort($expanded13|0);
  ___resumeException($10|0);
  // unreachable
 }
 $expanded7 = 188;
 $gep_int16 = 9136;
 $expanded8 = $gep_int16;
 $gep_int17 = ___dso_handle;
 $expanded9 = $gep_int17;
 u$7 = _atexit($expanded7|0,$expanded8|0,$expanded9|0)|0;
 $expanded10 = 9152;
 ___cxa_guard_release($expanded10|0);
 
 $expanded11 = 9136;
 STACKTOP = sp;return $expanded11|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep_int = 0;
 var $gep_int11 = 0, $gep_int12 = 0, $gep_int13 = 0, label = 0, sp = 0, u$5 = 0;
 sp = STACKTOP;
 $gep_int = 9264;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded8 = 9248;
  STACKTOP = sp;return $expanded8|0;
 }
 $expanded1 = 9264;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded8 = 9248;
  STACKTOP = sp;return $expanded8|0;
 }
 __THREW__ = 0;
 $expanded2 = 9248;
 $gep_int11 = 9272;
 $expanded3 = $gep_int11;
 invoke_viii(3,$expanded2|0,$expanded3|0,11);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 
 if ($6) {
  $expanded9 = 69;
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  $expanded10 = 9264;
  ___cxa_guard_abort($expanded10|0);
  ___resumeException($7|0);
  // unreachable
 }
 $expanded4 = 131;
 $gep_int12 = 9248;
 $expanded5 = $gep_int12;
 $gep_int13 = ___dso_handle;
 $expanded6 = $gep_int13;
 u$5 = _atexit($expanded4|0,$expanded5|0,$expanded6|0)|0;
 $expanded7 = 9264;
 ___cxa_guard_release($expanded7|0);
 
 $expanded8 = 9248;
 STACKTOP = sp;return $expanded8|0;
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep_int = 0, $gep_int14 = 0, $gep_int15 = 0, $gep_int16 = 0, $gep_int17 = 0, label = 0, sp = 0, u$7 = 0;
 sp = STACKTOP;
 $gep_int = 9304;
 $expanded = $gep_int;
 $1 = HEAP8[$expanded]|0;
 $2 = ($1<<24>>24)==(0);
 
 if (!($2)) {
  $expanded11 = 9288;
  STACKTOP = sp;return $expanded11|0;
 }
 $expanded1 = 9304;
 $3 = ___cxa_guard_acquire($expanded1|0)|0;
 $4 = ($3|0)==(0);
 
 if ($4) {
  $expanded11 = 9288;
  STACKTOP = sp;return $expanded11|0;
 }
 __THREW__ = 0;
 $expanded3 = 9312;
 $gep_int14 = 9312;
 $expanded2 = $gep_int14;
 $5 = invoke_ii(96,$expanded2|0)|0;
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 
 if ($7) {
  $expanded12 = 69;
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  $expanded13 = 9304;
  ___cxa_guard_abort($expanded13|0);
  ___resumeException($10|0);
  // unreachable
 }
 __THREW__ = 0;
 $expanded4 = 9288;
 $expanded6 = 9312;
 $gep_int15 = 9312;
 $expanded5 = $gep_int15;
 invoke_viii(21,$expanded4|0,$expanded5|0,$5|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 
 if ($9) {
  $expanded12 = 69;
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  $expanded13 = 9304;
  ___cxa_guard_abort($expanded13|0);
  ___resumeException($10|0);
  // unreachable
 }
 $expanded7 = 188;
 $gep_int16 = 9288;
 $expanded8 = $gep_int16;
 $gep_int17 = ___dso_handle;
 $expanded9 = $gep_int17;
 u$7 = _atexit($expanded7|0,$expanded8|0,$expanded9|0)|0;
 $expanded10 = 9304;
 ___cxa_guard_release($expanded10|0);
 
 $expanded11 = 9288;
 STACKTOP = sp;return $expanded11|0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $gep_int = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 
 if ($1) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0.000000e+00;
  
  STACKTOP = sp;return +$$0;
 }
 $2 = ___errno_location()|0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $gep_int = 8376;
 $expanded = $gep_int;
 $4 = HEAP8[$expanded]|0;
 $5 = ($4<<24>>24)==(0);
 
 do {
  if ($5) {
   $expanded1 = 8376;
   $6 = ___cxa_guard_acquire($expanded1|0)|0;
   $7 = ($6|0)==(0);
   
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $gep_int8 = 8384;
   $expanded2 = $gep_int8;
   $8 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if ($10) {
    $expanded5 = 69;
    $11 = ___cxa_find_matching_catch(-1,-1)|0;
    $12 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($11|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $8;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $13 = HEAP32[8368>>2]|0;
 $14 = +_strtold_l($__a,$__p2,$13);
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)==(0);
 
 if ($16) {
  HEAP32[$2>>2] = $3;
  
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0.000000e+00;
  
  STACKTOP = sp;return +$$0;
 }
 $19 = ($15|0)==(34);
 
 if (!($19)) {
  $$0 = $14;
  
  STACKTOP = sp;return +$$0;
 }
 HEAP32[$__err>>2] = 4;
 
 $$0 = $14;
 
 STACKTOP = sp;return +$$0;
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $gep_int = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 
 if ($1) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0.000000e+00;
  
  STACKTOP = sp;return +$$0;
 }
 $2 = ___errno_location()|0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $gep_int = 8376;
 $expanded = $gep_int;
 $4 = HEAP8[$expanded]|0;
 $5 = ($4<<24>>24)==(0);
 
 do {
  if ($5) {
   $expanded1 = 8376;
   $6 = ___cxa_guard_acquire($expanded1|0)|0;
   $7 = ($6|0)==(0);
   
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $gep_int8 = 8384;
   $expanded2 = $gep_int8;
   $8 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if ($10) {
    $expanded5 = 69;
    $11 = ___cxa_find_matching_catch(-1,-1)|0;
    $12 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($11|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $8;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $13 = HEAP32[8368>>2]|0;
 $14 = +_strtold_l($__a,$__p2,$13);
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)==(0);
 
 if ($16) {
  HEAP32[$2>>2] = $3;
  
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0.000000e+00;
  
  STACKTOP = sp;return +$$0;
 }
 $19 = ($15|0)==(34);
 
 if (!($19)) {
  $$0 = $14;
  
  STACKTOP = sp;return +$$0;
 }
 HEAP32[$__err>>2] = 4;
 
 $$0 = $14;
 
 STACKTOP = sp;return +$$0;
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $gep_int = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 
 if ($1) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0.000000e+00;
  
  STACKTOP = sp;return +$$0;
 }
 $2 = ___errno_location()|0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $gep_int = 8376;
 $expanded = $gep_int;
 $4 = HEAP8[$expanded]|0;
 $5 = ($4<<24>>24)==(0);
 
 do {
  if ($5) {
   $expanded1 = 8376;
   $6 = ___cxa_guard_acquire($expanded1|0)|0;
   $7 = ($6|0)==(0);
   
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $gep_int8 = 8384;
   $expanded2 = $gep_int8;
   $8 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if ($10) {
    $expanded5 = 69;
    $11 = ___cxa_find_matching_catch(-1,-1)|0;
    $12 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($11|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $8;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $13 = HEAP32[8368>>2]|0;
 $14 = +_strtold_l($__a,$__p2,$13);
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)==(0);
 
 if ($16) {
  HEAP32[$2>>2] = $3;
  
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0.000000e+00;
  
  STACKTOP = sp;return +$$0;
 }
 $19 = ($15|0)==(34);
 
 if ($19) {
  HEAP32[$__err>>2] = 4;
  
 }
 $20 = $14;
 
 $$0 = $20;
 
 STACKTOP = sp;return +$$0;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $gep_int = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 
 if ($1) {
  HEAP32[$__err>>2] = 4;
  
  $23 = 0;$24 = 0;
  
  
  tempRet0 = $24;
  STACKTOP = sp;return $23|0;
 }
 $2 = HEAP8[$__a]|0;
 $3 = ($2<<24>>24)==(45);
 
 if ($3) {
  HEAP32[$__err>>2] = 4;
  
  $23 = 0;$24 = 0;
  
  
  tempRet0 = $24;
  STACKTOP = sp;return $23|0;
 }
 $4 = ___errno_location()|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $gep_int = 8376;
 $expanded = $gep_int;
 $6 = HEAP8[$expanded]|0;
 $7 = ($6<<24>>24)==(0);
 
 do {
  if ($7) {
   $expanded1 = 8376;
   $8 = ___cxa_guard_acquire($expanded1|0)|0;
   $9 = ($8|0)==(0);
   
   if ($9) {
    break;
   }
   __THREW__ = 0;
   $gep_int8 = 8384;
   $expanded2 = $gep_int8;
   $10 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if ($12) {
    $expanded5 = 69;
    $13 = ___cxa_find_matching_catch(-1,-1)|0;
    $14 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($13|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $10;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $15 = HEAP32[8368>>2]|0;
 $16 = _strtoull_l($__a|0,$__p2|0,$__base|0,$15|0)|0;
 $17 = tempRet0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)==(0);
 
 if ($19) {
  HEAP32[$4>>2] = $5;
  
 }
 $20 = HEAP32[$__p2>>2]|0;
 $21 = ($20|0)==($__a_end|0);
 
 if (!($21)) {
  HEAP32[$__err>>2] = 4;
  
  $23 = 0;$24 = 0;
  
  
  tempRet0 = $24;
  STACKTOP = sp;return $23|0;
 }
 $22 = ($18|0)==(34);
 
 if (!($22)) {
  $23 = $16;$24 = $17;
  
  
  tempRet0 = $24;
  STACKTOP = sp;return $23|0;
 }
 HEAP32[$__err>>2] = 4;
 
 $23 = -1;$24 = -1;
 
 
 tempRet0 = $24;
 STACKTOP = sp;return $23|0;
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $gep_int = 0, $gep_int8 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 
 if ($1) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $2 = HEAP8[$__a]|0;
 $3 = ($2<<24>>24)==(45);
 
 if ($3) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $4 = ___errno_location()|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $gep_int = 8376;
 $expanded = $gep_int;
 $6 = HEAP8[$expanded]|0;
 $7 = ($6<<24>>24)==(0);
 
 do {
  if ($7) {
   $expanded1 = 8376;
   $8 = ___cxa_guard_acquire($expanded1|0)|0;
   $9 = ($8|0)==(0);
   
   if ($9) {
    break;
   }
   __THREW__ = 0;
   $gep_int8 = 8384;
   $expanded2 = $gep_int8;
   $10 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if ($12) {
    $expanded5 = 69;
    $13 = ___cxa_find_matching_catch(-1,-1)|0;
    $14 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($13|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $10;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $15 = HEAP32[8368>>2]|0;
 $16 = _strtoull_l($__a|0,$__p2|0,$__base|0,$15|0)|0;
 $17 = tempRet0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)==(0);
 
 if ($19) {
  HEAP32[$4>>2] = $5;
  
 }
 $20 = HEAP32[$__p2>>2]|0;
 $21 = ($20|0)==($__a_end|0);
 
 if (!($21)) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $22 = ($18|0)==(34);
 $23 = ($17>>>0)>(0);
 $24 = ($17|0)==(0);
 $25 = ($16>>>0)>(4294967295);
 $26 = $24 & $25;
 $27 = $23 | $26;
 $or$cond = $22 | $27;
 
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 } else {
  
  $$0 = $16;
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $gep_int = 0, $gep_int8 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 
 if ($1) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $2 = HEAP8[$__a]|0;
 $3 = ($2<<24>>24)==(45);
 
 if ($3) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $4 = ___errno_location()|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $gep_int = 8376;
 $expanded = $gep_int;
 $6 = HEAP8[$expanded]|0;
 $7 = ($6<<24>>24)==(0);
 
 do {
  if ($7) {
   $expanded1 = 8376;
   $8 = ___cxa_guard_acquire($expanded1|0)|0;
   $9 = ($8|0)==(0);
   
   if ($9) {
    break;
   }
   __THREW__ = 0;
   $gep_int8 = 8384;
   $expanded2 = $gep_int8;
   $10 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if ($12) {
    $expanded5 = 69;
    $13 = ___cxa_find_matching_catch(-1,-1)|0;
    $14 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($13|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $10;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $15 = HEAP32[8368>>2]|0;
 $16 = _strtoull_l($__a|0,$__p2|0,$__base|0,$15|0)|0;
 $17 = tempRet0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)==(0);
 
 if ($19) {
  HEAP32[$4>>2] = $5;
  
 }
 $20 = HEAP32[$__p2>>2]|0;
 $21 = ($20|0)==($__a_end|0);
 
 if (!($21)) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $22 = ($18|0)==(34);
 $23 = ($17>>>0)>(0);
 $24 = ($17|0)==(0);
 $25 = ($16>>>0)>(4294967295);
 $26 = $24 & $25;
 $27 = $23 | $26;
 $or$cond = $22 | $27;
 
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 } else {
  
  $$0 = $16;
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $gep_int = 0, $gep_int8 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 
 if ($1) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $2 = HEAP8[$__a]|0;
 $3 = ($2<<24>>24)==(45);
 
 if ($3) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $4 = ___errno_location()|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $gep_int = 8376;
 $expanded = $gep_int;
 $6 = HEAP8[$expanded]|0;
 $7 = ($6<<24>>24)==(0);
 
 do {
  if ($7) {
   $expanded1 = 8376;
   $8 = ___cxa_guard_acquire($expanded1|0)|0;
   $9 = ($8|0)==(0);
   
   if ($9) {
    break;
   }
   __THREW__ = 0;
   $gep_int8 = 8384;
   $expanded2 = $gep_int8;
   $10 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   
   if ($12) {
    $expanded5 = 69;
    $13 = ___cxa_find_matching_catch(-1,-1)|0;
    $14 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($13|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $10;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $15 = HEAP32[8368>>2]|0;
 $16 = _strtoull_l($__a|0,$__p2|0,$__base|0,$15|0)|0;
 $17 = tempRet0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)==(0);
 
 if ($19) {
  HEAP32[$4>>2] = $5;
  
 }
 $20 = HEAP32[$__p2>>2]|0;
 $21 = ($20|0)==($__a_end|0);
 
 if (!($21)) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $22 = ($18|0)==(34);
 $23 = ($17>>>0)>(0);
 $24 = ($17|0)==(0);
 $25 = ($16>>>0)>(65535);
 $26 = $24 & $25;
 $27 = $23 | $26;
 $or$cond = $22 | $27;
 
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 } else {
  $28 = $16&65535;
  
  $$0 = $28;
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $gep_int = 0, $gep_int8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 
 if ($1) {
  HEAP32[$__err>>2] = 4;
  
  $28 = 0;$29 = 0;
  
  
  tempRet0 = $29;
  STACKTOP = sp;return $28|0;
 }
 $2 = ___errno_location()|0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $gep_int = 8376;
 $expanded = $gep_int;
 $4 = HEAP8[$expanded]|0;
 $5 = ($4<<24>>24)==(0);
 
 do {
  if ($5) {
   $expanded1 = 8376;
   $6 = ___cxa_guard_acquire($expanded1|0)|0;
   $7 = ($6|0)==(0);
   
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $gep_int8 = 8384;
   $expanded2 = $gep_int8;
   $8 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if ($10) {
    $expanded5 = 69;
    $11 = ___cxa_find_matching_catch(-1,-1)|0;
    $12 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($11|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $8;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $13 = HEAP32[8368>>2]|0;
 $14 = _strtoll_l($__a|0,$__p2|0,$__base|0,$13|0)|0;
 $15 = tempRet0;
 $16 = HEAP32[$2>>2]|0;
 $17 = ($16|0)==(0);
 
 if ($17) {
  HEAP32[$2>>2] = $3;
  
 }
 $18 = HEAP32[$__p2>>2]|0;
 $19 = ($18|0)==($__a_end|0);
 
 if (!($19)) {
  HEAP32[$__err>>2] = 4;
  
  $28 = 0;$29 = 0;
  
  
  tempRet0 = $29;
  STACKTOP = sp;return $28|0;
 }
 $20 = ($16|0)==(34);
 
 if ($20) {
  HEAP32[$__err>>2] = 4;
  $21 = ($15|0)>(0);
  $22 = ($15|0)==(0);
  $23 = ($14>>>0)>(0);
  $24 = $22 & $23;
  $25 = $21 | $24;
  $26 = $25 ? -1 : 0;
  $27 = $25 ? 2147483647 : -2147483648;
  tempRet0 = $27;
  STACKTOP = sp;return $26|0;
 } else {
  $28 = $14;$29 = $15;
  
  
  tempRet0 = $29;
  STACKTOP = sp;return $28|0;
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0;
 var $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $gep_int = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 
 if ($1) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $2 = ___errno_location()|0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $gep_int = 8376;
 $expanded = $gep_int;
 $4 = HEAP8[$expanded]|0;
 $5 = ($4<<24>>24)==(0);
 
 do {
  if ($5) {
   $expanded1 = 8376;
   $6 = ___cxa_guard_acquire($expanded1|0)|0;
   $7 = ($6|0)==(0);
   
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $gep_int8 = 8384;
   $expanded2 = $gep_int8;
   $8 = invoke_iiii(30,2147483647,$expanded2|0,0)|0;
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   
   if ($10) {
    $expanded5 = 69;
    $11 = ___cxa_find_matching_catch(-1,-1)|0;
    $12 = tempRet0;
    $expanded6 = 8376;
    ___cxa_guard_abort($expanded6|0);
    ___resumeException($11|0);
    // unreachable
   } else {
    $expanded3 = 8368;
    HEAP32[8368>>2] = $8;
    $expanded4 = 8376;
    ___cxa_guard_release($expanded4|0);
    
    break;
   }
  }
 } while(0);
 $expanded7 = 8368;
 $13 = HEAP32[8368>>2]|0;
 $14 = _strtoll_l($__a|0,$__p2|0,$__base|0,$13|0)|0;
 $15 = tempRet0;
 $16 = HEAP32[$2>>2]|0;
 $17 = ($16|0)==(0);
 
 if ($17) {
  HEAP32[$2>>2] = $3;
  
 }
 $18 = HEAP32[$__p2>>2]|0;
 $19 = ($18|0)==($__a_end|0);
 
 if (!($19)) {
  HEAP32[$__err>>2] = 4;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $20 = ($16|0)==(34);
 
 do {
  if ($20) {
   HEAP32[$__err>>2] = 4;
   $31 = ($15|0)>(0);
   $32 = ($15|0)==(0);
   $33 = ($14>>>0)>(0);
   $34 = $32 & $33;
   $35 = $31 | $34;
   
   if ($35) {
    $$0 = 2147483647;
   } else {
    break;
   }
   
   STACKTOP = sp;return $$0|0;
  } else {
   $21 = ($15|0)<(-1);
   $22 = ($15|0)==(-1);
   $23 = ($14>>>0)<(2147483648);
   $24 = $22 & $23;
   $25 = $21 | $24;
   
   if ($25) {
    HEAP32[$__err>>2] = 4;
    
    break;
   }
   $26 = ($15|0)>(0);
   $27 = ($15|0)==(0);
   $28 = ($14>>>0)>(2147483647);
   $29 = $27 & $28;
   $30 = $26 | $29;
   
   if ($30) {
    HEAP32[$__err>>2] = 4;
    
    $$0 = 2147483647;
    
    STACKTOP = sp;return $$0|0;
   } else {
    
    $$0 = $14;
    
    STACKTOP = sp;return $$0|0;
   }
  }
 } while(0);
 
 $$0 = -2147483648;
 
 STACKTOP = sp;return $$0|0;
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val$field = 0, $$idx1$val$field2 = 0, $$idx1$val$index = 0, $$idx1$val$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $gep = 0, $gep10 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = $__vp;
 $$idx$val = HEAP32[$__vp>>2]|0;
 $gep_int = $__vp;
 $gep = (($gep_int) + 4)|0;
 $$idx1 = $gep;
 $1 = $$idx1;
 $gep_int4 = $$idx1;
 $$idx1$val$index = $gep_int4;
 $$idx1$val$field = HEAPU8[$$idx1$val$index]|(HEAPU8[$$idx1$val$index+1|0]<<8)|(HEAPU8[$$idx1$val$index+2|0]<<16)|(HEAPU8[$$idx1$val$index+3|0]<<24);
 $gep_int5 = $$idx1;
 $gep6 = (($gep_int5) + 4)|0;
 $$idx1$val$index1 = $gep6;
 $$idx1$val$field2 = HEAPU8[$$idx1$val$index1]|(HEAPU8[$$idx1$val$index1+1|0]<<8)|(HEAPU8[$$idx1$val$index1+2|0]<<16)|(HEAPU8[$$idx1$val$index1+3|0]<<24);
 $2 = $$idx1$val$field2 >> 1;
 $3 = $$idx$val;
 $gep_int7 = $$idx$val;
 $gep8 = (($gep_int7) + ($2))|0;
 $4 = $gep8;
 $5 = $4;
 $6 = $$idx1$val$field2 & 1;
 $7 = ($6|0)==(0);
 
 if ($7) {
  $13 = $$idx1$val$field;
  
  $14 = $13;
  
  FUNCTION_TABLE_vi[$14 & 255]($5);
  STACKTOP = sp;return;
 } else {
  $8 = $4;
  $9 = HEAP32[$4>>2]|0;
  $gep_int9 = $9;
  $gep10 = (($gep_int9) + ($$idx1$val$field))|0;
  $10 = $gep10;
  $11 = $10;
  $12 = HEAP32[$10>>2]|0;
  
  $14 = $12;
  
  FUNCTION_TABLE_vi[$14 & 255]($5);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i569 = 0, $$0$i57 = 0, $$pre1$i = 0, $$sum = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep16 = 0, $gep19 = 0, $gep2 = 0, $gep21 = 0, $gep4 = 0, $gep6 = 0, $gep9 = 0, $gep_array = 0, $gep_array15 = 0, $gep_array18 = 0, $gep_int = 0;
 var $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int17 = 0, $gep_int20 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int8 = 0, $or$cond$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $gep_int1 = $this;
 $gep2 = (($gep_int1) + 4)|0;
 $3 = $gep2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)<($__n>>>0);
 
 if (!($9)) {
  $$0$i = $__n;$10 = $4;
  while(1) {
   
   
   $11 = ($10|0)==(0);
   
   if ($11) {
    $12 = 0;
   } else {
    HEAP32[$10>>2] = 0;
    $$pre1$i = HEAP32[$3>>2]|0;
    
    $12 = $$pre1$i;
   }
   
   $gep_int3 = $12;
   $gep4 = (($gep_int3) + 4)|0;
   $13 = $gep4;
   HEAP32[$3>>2] = $13;
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   
   if ($15) {
    break;
   } else {
    $$0$i = $14;$10 = $13;
   }
  }
  STACKTOP = sp;return;
 }
 $gep_int5 = $this;
 $gep6 = (($gep_int5) + 16)|0;
 $16 = $gep6;
 $gep_int7 = $this;
 $17 = $gep_int7;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 $20 = (($6) - ($19))|0;
 $21 = $20 >> 2;
 $22 = (($21) + ($__n))|0;
 $23 = ($22>>>0)>(1073741823);
 
 if ($23) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable
 }
 $24 = (($5) - ($19))|0;
 $25 = $24 >> 2;
 $26 = ($25>>>0)<(536870911);
 
 do {
  if ($26) {
   $27 = $24 >> 1;
   $28 = ($27>>>0)<($22>>>0);
   $29 = $28 ? $22 : $27;
   $30 = ($29|0)==(0);
   
   if ($30) {
    $$0$i57 = 0;$39 = 0;
    break;
   }
   $gep_int8 = $this;
   $gep9 = (($gep_int8) + 128)|0;
   $31 = $gep9;
   $32 = HEAP8[$31]|0;
   $33 = ($32<<24>>24)==(0);
   $34 = ($29>>>0)<(29);
   $or$cond$i$i$i$i = $33 & $34;
   
   if (!($or$cond$i$i$i$i)) {
    $$0$i569 = $29;
    label = 11;
    break;
   }
   HEAP8[$31] = 1;
   $35 = $16;
   
   $$0$i57 = $29;$39 = $35;
  } else {
   $$0$i569 = 1073741823;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  
  $36 = $$0$i569 << 2;
  $37 = __Znwj($36)|0;
  $38 = $37;
  
  $$0$i57 = $$0$i569;$39 = $38;
 }
 
 
 $gep_int10 = $39;
 $gep_array = $21<<2;
 $gep11 = (($gep_int10) + ($gep_array))|0;
 $40 = $gep11;
 
 $$0$i2 = $__n;$41 = $40;
 while(1) {
  
  
  $42 = ($41|0)==(0);
  
  if ($42) {
   $43 = 0;
  } else {
   HEAP32[$41>>2] = 0;
   
   $43 = $41;
  }
  
  $gep_int12 = $43;
  $gep13 = (($gep_int12) + 4)|0;
  $44 = $gep13;
  $45 = (($$0$i2) + -1)|0;
  $46 = ($45|0)==(0);
  
  if ($46) {
   break;
  } else {
   $$0$i2 = $45;$41 = $44;
  }
 }
 $gep_int14 = $39;
 $gep_array15 = $$0$i57<<2;
 $gep16 = (($gep_int14) + ($gep_array15))|0;
 $47 = $gep16;
 $48 = HEAP32[$17>>2]|0;
 $49 = HEAP32[$3>>2]|0;
 $50 = $49;
 $51 = $48;
 $52 = (($50) - ($51))|0;
 $53 = $52 >> 2;
 $$sum = (($21) - ($53))|0;
 $gep_int17 = $39;
 $gep_array18 = $$sum<<2;
 $gep19 = (($gep_int17) + ($gep_array18))|0;
 $54 = $gep19;
 $55 = $54;
 $56 = $48;
 _memcpy($55|0,$56|0,$52|0)|0;
 HEAP32[$17>>2] = $54;
 HEAP32[$3>>2] = $44;
 HEAP32[$1>>2] = $47;
 $57 = ($48|0)==(0);
 
 if ($57) {
  STACKTOP = sp;return;
 }
 $58 = $16;
 $59 = ($58|0)==($48|0);
 
 if ($59) {
  $gep_int20 = $this;
  $gep21 = (($gep_int20) + 128)|0;
  $60 = $gep21;
  HEAP8[$60] = 0;
  
  STACKTOP = sp;return;
 } else {
  __ZdlPv($56);
  
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor(u$0) {
 u$0 = u$0|0;
 var $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0;
 var $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0;
 var $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0;
 var $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep_int = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0;
 var $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded1 = 13296;
 $gep_int = 13296;
 $gep = (($gep_int) + 276)|0;
 $expanded = $gep;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded);
 $expanded3 = 13296;
 $gep_int48 = 13296;
 $gep49 = (($gep_int48) + 264)|0;
 $expanded2 = $gep49;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded2);
 $expanded5 = 13296;
 $gep_int50 = 13296;
 $gep51 = (($gep_int50) + 252)|0;
 $expanded4 = $gep51;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded4);
 $expanded7 = 13296;
 $gep_int52 = 13296;
 $gep53 = (($gep_int52) + 240)|0;
 $expanded6 = $gep53;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded6);
 $expanded9 = 13296;
 $gep_int54 = 13296;
 $gep55 = (($gep_int54) + 228)|0;
 $expanded8 = $gep55;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded8);
 $expanded11 = 13296;
 $gep_int56 = 13296;
 $gep57 = (($gep_int56) + 216)|0;
 $expanded10 = $gep57;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded10);
 $expanded13 = 13296;
 $gep_int58 = 13296;
 $gep59 = (($gep_int58) + 204)|0;
 $expanded12 = $gep59;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded12);
 $expanded15 = 13296;
 $gep_int60 = 13296;
 $gep61 = (($gep_int60) + 192)|0;
 $expanded14 = $gep61;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded14);
 $expanded17 = 13296;
 $gep_int62 = 13296;
 $gep63 = (($gep_int62) + 180)|0;
 $expanded16 = $gep63;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded16);
 $expanded19 = 13296;
 $gep_int64 = 13296;
 $gep65 = (($gep_int64) + 168)|0;
 $expanded18 = $gep65;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded18);
 $expanded21 = 13296;
 $gep_int66 = 13296;
 $gep67 = (($gep_int66) + 156)|0;
 $expanded20 = $gep67;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded20);
 $expanded23 = 13296;
 $gep_int68 = 13296;
 $gep69 = (($gep_int68) + 144)|0;
 $expanded22 = $gep69;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded22);
 $expanded25 = 13296;
 $gep_int70 = 13296;
 $gep71 = (($gep_int70) + 132)|0;
 $expanded24 = $gep71;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded24);
 $expanded27 = 13296;
 $gep_int72 = 13296;
 $gep73 = (($gep_int72) + 120)|0;
 $expanded26 = $gep73;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded26);
 $expanded29 = 13296;
 $gep_int74 = 13296;
 $gep75 = (($gep_int74) + 108)|0;
 $expanded28 = $gep75;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded28);
 $expanded31 = 13296;
 $gep_int76 = 13296;
 $gep77 = (($gep_int76) + 96)|0;
 $expanded30 = $gep77;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded30);
 $expanded33 = 13296;
 $gep_int78 = 13296;
 $gep79 = (($gep_int78) + 84)|0;
 $expanded32 = $gep79;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded32);
 $expanded35 = 13296;
 $gep_int80 = 13296;
 $gep81 = (($gep_int80) + 72)|0;
 $expanded34 = $gep81;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded34);
 $expanded37 = 13296;
 $gep_int82 = 13296;
 $gep83 = (($gep_int82) + 60)|0;
 $expanded36 = $gep83;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded36);
 $expanded39 = 13296;
 $gep_int84 = 13296;
 $gep85 = (($gep_int84) + 48)|0;
 $expanded38 = $gep85;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded38);
 $expanded41 = 13296;
 $gep_int86 = 13296;
 $gep87 = (($gep_int86) + 36)|0;
 $expanded40 = $gep87;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded40);
 $expanded43 = 13296;
 $gep_int88 = 13296;
 $gep89 = (($gep_int88) + 24)|0;
 $expanded42 = $gep89;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded42);
 $expanded45 = 13296;
 $gep_int90 = 13296;
 $gep91 = (($gep_int90) + 12)|0;
 $expanded44 = $gep91;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded44);
 $expanded47 = 13296;
 $gep_int92 = 13296;
 $expanded46 = $gep_int92;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded46);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53(u$0) {
 u$0 = u$0|0;
 var $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0;
 var $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0;
 var $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0;
 var $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep_int = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0;
 var $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded1 = 13624;
 $gep_int = 13624;
 $gep = (($gep_int) + 276)|0;
 $expanded = $gep;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded);
 $expanded3 = 13624;
 $gep_int48 = 13624;
 $gep49 = (($gep_int48) + 264)|0;
 $expanded2 = $gep49;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded2);
 $expanded5 = 13624;
 $gep_int50 = 13624;
 $gep51 = (($gep_int50) + 252)|0;
 $expanded4 = $gep51;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded4);
 $expanded7 = 13624;
 $gep_int52 = 13624;
 $gep53 = (($gep_int52) + 240)|0;
 $expanded6 = $gep53;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded6);
 $expanded9 = 13624;
 $gep_int54 = 13624;
 $gep55 = (($gep_int54) + 228)|0;
 $expanded8 = $gep55;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded8);
 $expanded11 = 13624;
 $gep_int56 = 13624;
 $gep57 = (($gep_int56) + 216)|0;
 $expanded10 = $gep57;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded10);
 $expanded13 = 13624;
 $gep_int58 = 13624;
 $gep59 = (($gep_int58) + 204)|0;
 $expanded12 = $gep59;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded12);
 $expanded15 = 13624;
 $gep_int60 = 13624;
 $gep61 = (($gep_int60) + 192)|0;
 $expanded14 = $gep61;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded14);
 $expanded17 = 13624;
 $gep_int62 = 13624;
 $gep63 = (($gep_int62) + 180)|0;
 $expanded16 = $gep63;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded16);
 $expanded19 = 13624;
 $gep_int64 = 13624;
 $gep65 = (($gep_int64) + 168)|0;
 $expanded18 = $gep65;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded18);
 $expanded21 = 13624;
 $gep_int66 = 13624;
 $gep67 = (($gep_int66) + 156)|0;
 $expanded20 = $gep67;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded20);
 $expanded23 = 13624;
 $gep_int68 = 13624;
 $gep69 = (($gep_int68) + 144)|0;
 $expanded22 = $gep69;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded22);
 $expanded25 = 13624;
 $gep_int70 = 13624;
 $gep71 = (($gep_int70) + 132)|0;
 $expanded24 = $gep71;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded24);
 $expanded27 = 13624;
 $gep_int72 = 13624;
 $gep73 = (($gep_int72) + 120)|0;
 $expanded26 = $gep73;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded26);
 $expanded29 = 13624;
 $gep_int74 = 13624;
 $gep75 = (($gep_int74) + 108)|0;
 $expanded28 = $gep75;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded28);
 $expanded31 = 13624;
 $gep_int76 = 13624;
 $gep77 = (($gep_int76) + 96)|0;
 $expanded30 = $gep77;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded30);
 $expanded33 = 13624;
 $gep_int78 = 13624;
 $gep79 = (($gep_int78) + 84)|0;
 $expanded32 = $gep79;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded32);
 $expanded35 = 13624;
 $gep_int80 = 13624;
 $gep81 = (($gep_int80) + 72)|0;
 $expanded34 = $gep81;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded34);
 $expanded37 = 13624;
 $gep_int82 = 13624;
 $gep83 = (($gep_int82) + 60)|0;
 $expanded36 = $gep83;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded36);
 $expanded39 = 13624;
 $gep_int84 = 13624;
 $gep85 = (($gep_int84) + 48)|0;
 $expanded38 = $gep85;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded38);
 $expanded41 = 13624;
 $gep_int86 = 13624;
 $gep87 = (($gep_int86) + 36)|0;
 $expanded40 = $gep87;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded40);
 $expanded43 = 13624;
 $gep_int88 = 13624;
 $gep89 = (($gep_int88) + 24)|0;
 $expanded42 = $gep89;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded42);
 $expanded45 = 13624;
 $gep_int90 = 13624;
 $gep91 = (($gep_int90) + 12)|0;
 $expanded44 = $gep91;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded44);
 $expanded47 = 13624;
 $gep_int92 = 13624;
 $expanded46 = $gep_int92;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded46);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56(u$0) {
 u$0 = u$0|0;
 var $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0;
 var $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0;
 var $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0;
 var $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep_int = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0;
 var $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded1 = 13936;
 $gep_int = 13936;
 $gep = (($gep_int) + 276)|0;
 $expanded = $gep;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded);
 $expanded3 = 13936;
 $gep_int48 = 13936;
 $gep49 = (($gep_int48) + 264)|0;
 $expanded2 = $gep49;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded2);
 $expanded5 = 13936;
 $gep_int50 = 13936;
 $gep51 = (($gep_int50) + 252)|0;
 $expanded4 = $gep51;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded4);
 $expanded7 = 13936;
 $gep_int52 = 13936;
 $gep53 = (($gep_int52) + 240)|0;
 $expanded6 = $gep53;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded6);
 $expanded9 = 13936;
 $gep_int54 = 13936;
 $gep55 = (($gep_int54) + 228)|0;
 $expanded8 = $gep55;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded8);
 $expanded11 = 13936;
 $gep_int56 = 13936;
 $gep57 = (($gep_int56) + 216)|0;
 $expanded10 = $gep57;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded10);
 $expanded13 = 13936;
 $gep_int58 = 13936;
 $gep59 = (($gep_int58) + 204)|0;
 $expanded12 = $gep59;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded12);
 $expanded15 = 13936;
 $gep_int60 = 13936;
 $gep61 = (($gep_int60) + 192)|0;
 $expanded14 = $gep61;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded14);
 $expanded17 = 13936;
 $gep_int62 = 13936;
 $gep63 = (($gep_int62) + 180)|0;
 $expanded16 = $gep63;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded16);
 $expanded19 = 13936;
 $gep_int64 = 13936;
 $gep65 = (($gep_int64) + 168)|0;
 $expanded18 = $gep65;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded18);
 $expanded21 = 13936;
 $gep_int66 = 13936;
 $gep67 = (($gep_int66) + 156)|0;
 $expanded20 = $gep67;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded20);
 $expanded23 = 13936;
 $gep_int68 = 13936;
 $gep69 = (($gep_int68) + 144)|0;
 $expanded22 = $gep69;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded22);
 $expanded25 = 13936;
 $gep_int70 = 13936;
 $gep71 = (($gep_int70) + 132)|0;
 $expanded24 = $gep71;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded24);
 $expanded27 = 13936;
 $gep_int72 = 13936;
 $gep73 = (($gep_int72) + 120)|0;
 $expanded26 = $gep73;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded26);
 $expanded29 = 13936;
 $gep_int74 = 13936;
 $gep75 = (($gep_int74) + 108)|0;
 $expanded28 = $gep75;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded28);
 $expanded31 = 13936;
 $gep_int76 = 13936;
 $gep77 = (($gep_int76) + 96)|0;
 $expanded30 = $gep77;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded30);
 $expanded33 = 13936;
 $gep_int78 = 13936;
 $gep79 = (($gep_int78) + 84)|0;
 $expanded32 = $gep79;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded32);
 $expanded35 = 13936;
 $gep_int80 = 13936;
 $gep81 = (($gep_int80) + 72)|0;
 $expanded34 = $gep81;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded34);
 $expanded37 = 13936;
 $gep_int82 = 13936;
 $gep83 = (($gep_int82) + 60)|0;
 $expanded36 = $gep83;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded36);
 $expanded39 = 13936;
 $gep_int84 = 13936;
 $gep85 = (($gep_int84) + 48)|0;
 $expanded38 = $gep85;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded38);
 $expanded41 = 13936;
 $gep_int86 = 13936;
 $gep87 = (($gep_int86) + 36)|0;
 $expanded40 = $gep87;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded40);
 $expanded43 = 13936;
 $gep_int88 = 13936;
 $gep89 = (($gep_int88) + 24)|0;
 $expanded42 = $gep89;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded42);
 $expanded45 = 13936;
 $gep_int90 = 13936;
 $gep91 = (($gep_int90) + 12)|0;
 $expanded44 = $gep91;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded44);
 $expanded47 = 13936;
 $gep_int92 = 13936;
 $expanded46 = $gep_int92;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded46);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81(u$0) {
 u$0 = u$0|0;
 var $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0;
 var $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0;
 var $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep65 = 0, $gep67 = 0, $gep69 = 0;
 var $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep_int = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int62 = 0;
 var $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded1 = 14776;
 $gep_int = 14776;
 $gep = (($gep_int) + 276)|0;
 $expanded = $gep;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded);
 $expanded3 = 14776;
 $gep_int48 = 14776;
 $gep49 = (($gep_int48) + 264)|0;
 $expanded2 = $gep49;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded2);
 $expanded5 = 14776;
 $gep_int50 = 14776;
 $gep51 = (($gep_int50) + 252)|0;
 $expanded4 = $gep51;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded4);
 $expanded7 = 14776;
 $gep_int52 = 14776;
 $gep53 = (($gep_int52) + 240)|0;
 $expanded6 = $gep53;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded6);
 $expanded9 = 14776;
 $gep_int54 = 14776;
 $gep55 = (($gep_int54) + 228)|0;
 $expanded8 = $gep55;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded8);
 $expanded11 = 14776;
 $gep_int56 = 14776;
 $gep57 = (($gep_int56) + 216)|0;
 $expanded10 = $gep57;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded10);
 $expanded13 = 14776;
 $gep_int58 = 14776;
 $gep59 = (($gep_int58) + 204)|0;
 $expanded12 = $gep59;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded12);
 $expanded15 = 14776;
 $gep_int60 = 14776;
 $gep61 = (($gep_int60) + 192)|0;
 $expanded14 = $gep61;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded14);
 $expanded17 = 14776;
 $gep_int62 = 14776;
 $gep63 = (($gep_int62) + 180)|0;
 $expanded16 = $gep63;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded16);
 $expanded19 = 14776;
 $gep_int64 = 14776;
 $gep65 = (($gep_int64) + 168)|0;
 $expanded18 = $gep65;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded18);
 $expanded21 = 14776;
 $gep_int66 = 14776;
 $gep67 = (($gep_int66) + 156)|0;
 $expanded20 = $gep67;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded20);
 $expanded23 = 14776;
 $gep_int68 = 14776;
 $gep69 = (($gep_int68) + 144)|0;
 $expanded22 = $gep69;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded22);
 $expanded25 = 14776;
 $gep_int70 = 14776;
 $gep71 = (($gep_int70) + 132)|0;
 $expanded24 = $gep71;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded24);
 $expanded27 = 14776;
 $gep_int72 = 14776;
 $gep73 = (($gep_int72) + 120)|0;
 $expanded26 = $gep73;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded26);
 $expanded29 = 14776;
 $gep_int74 = 14776;
 $gep75 = (($gep_int74) + 108)|0;
 $expanded28 = $gep75;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded28);
 $expanded31 = 14776;
 $gep_int76 = 14776;
 $gep77 = (($gep_int76) + 96)|0;
 $expanded30 = $gep77;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded30);
 $expanded33 = 14776;
 $gep_int78 = 14776;
 $gep79 = (($gep_int78) + 84)|0;
 $expanded32 = $gep79;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded32);
 $expanded35 = 14776;
 $gep_int80 = 14776;
 $gep81 = (($gep_int80) + 72)|0;
 $expanded34 = $gep81;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded34);
 $expanded37 = 14776;
 $gep_int82 = 14776;
 $gep83 = (($gep_int82) + 60)|0;
 $expanded36 = $gep83;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded36);
 $expanded39 = 14776;
 $gep_int84 = 14776;
 $gep85 = (($gep_int84) + 48)|0;
 $expanded38 = $gep85;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded38);
 $expanded41 = 14776;
 $gep_int86 = 14776;
 $gep87 = (($gep_int86) + 36)|0;
 $expanded40 = $gep87;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded40);
 $expanded43 = 14776;
 $gep_int88 = 14776;
 $gep89 = (($gep_int88) + 24)|0;
 $expanded42 = $gep89;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded42);
 $expanded45 = 14776;
 $gep_int90 = 14776;
 $gep91 = (($gep_int90) + 12)|0;
 $expanded44 = $gep91;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded44);
 $expanded47 = 14776;
 $gep_int92 = 14776;
 $expanded46 = $gep_int92;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded46);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105(u$0) {
 u$0 = u$0|0;
 var $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0;
 var $expanded27 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0;
 var $gep51 = 0, $gep_int = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded1 = 15288;
 $gep_int = 15288;
 $gep = (($gep_int) + 156)|0;
 $expanded = $gep;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded);
 $expanded3 = 15288;
 $gep_int28 = 15288;
 $gep29 = (($gep_int28) + 144)|0;
 $expanded2 = $gep29;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded2);
 $expanded5 = 15288;
 $gep_int30 = 15288;
 $gep31 = (($gep_int30) + 132)|0;
 $expanded4 = $gep31;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded4);
 $expanded7 = 15288;
 $gep_int32 = 15288;
 $gep33 = (($gep_int32) + 120)|0;
 $expanded6 = $gep33;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded6);
 $expanded9 = 15288;
 $gep_int34 = 15288;
 $gep35 = (($gep_int34) + 108)|0;
 $expanded8 = $gep35;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded8);
 $expanded11 = 15288;
 $gep_int36 = 15288;
 $gep37 = (($gep_int36) + 96)|0;
 $expanded10 = $gep37;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded10);
 $expanded13 = 15288;
 $gep_int38 = 15288;
 $gep39 = (($gep_int38) + 84)|0;
 $expanded12 = $gep39;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded12);
 $expanded15 = 15288;
 $gep_int40 = 15288;
 $gep41 = (($gep_int40) + 72)|0;
 $expanded14 = $gep41;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded14);
 $expanded17 = 15288;
 $gep_int42 = 15288;
 $gep43 = (($gep_int42) + 60)|0;
 $expanded16 = $gep43;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded16);
 $expanded19 = 15288;
 $gep_int44 = 15288;
 $gep45 = (($gep_int44) + 48)|0;
 $expanded18 = $gep45;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded18);
 $expanded21 = 15288;
 $gep_int46 = 15288;
 $gep47 = (($gep_int46) + 36)|0;
 $expanded20 = $gep47;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded20);
 $expanded23 = 15288;
 $gep_int48 = 15288;
 $gep49 = (($gep_int48) + 24)|0;
 $expanded22 = $gep49;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded22);
 $expanded25 = 15288;
 $gep_int50 = 15288;
 $gep51 = (($gep_int50) + 12)|0;
 $expanded24 = $gep51;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded24);
 $expanded27 = 15288;
 $gep_int52 = 15288;
 $expanded26 = $gep_int52;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($expanded26);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120(u$0) {
 u$0 = u$0|0;
 var $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0;
 var $expanded27 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0;
 var $gep51 = 0, $gep_int = 0, $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $expanded1 = 15824;
 $gep_int = 15824;
 $gep = (($gep_int) + 156)|0;
 $expanded = $gep;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded);
 $expanded3 = 15824;
 $gep_int28 = 15824;
 $gep29 = (($gep_int28) + 144)|0;
 $expanded2 = $gep29;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded2);
 $expanded5 = 15824;
 $gep_int30 = 15824;
 $gep31 = (($gep_int30) + 132)|0;
 $expanded4 = $gep31;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded4);
 $expanded7 = 15824;
 $gep_int32 = 15824;
 $gep33 = (($gep_int32) + 120)|0;
 $expanded6 = $gep33;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded6);
 $expanded9 = 15824;
 $gep_int34 = 15824;
 $gep35 = (($gep_int34) + 108)|0;
 $expanded8 = $gep35;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded8);
 $expanded11 = 15824;
 $gep_int36 = 15824;
 $gep37 = (($gep_int36) + 96)|0;
 $expanded10 = $gep37;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded10);
 $expanded13 = 15824;
 $gep_int38 = 15824;
 $gep39 = (($gep_int38) + 84)|0;
 $expanded12 = $gep39;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded12);
 $expanded15 = 15824;
 $gep_int40 = 15824;
 $gep41 = (($gep_int40) + 72)|0;
 $expanded14 = $gep41;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded14);
 $expanded17 = 15824;
 $gep_int42 = 15824;
 $gep43 = (($gep_int42) + 60)|0;
 $expanded16 = $gep43;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded16);
 $expanded19 = 15824;
 $gep_int44 = 15824;
 $gep45 = (($gep_int44) + 48)|0;
 $expanded18 = $gep45;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded18);
 $expanded21 = 15824;
 $gep_int46 = 15824;
 $gep47 = (($gep_int46) + 36)|0;
 $expanded20 = $gep47;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded20);
 $expanded23 = 15824;
 $gep_int48 = 15824;
 $gep49 = (($gep_int48) + 24)|0;
 $expanded22 = $gep49;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded22);
 $expanded25 = 15824;
 $gep_int50 = 15824;
 $gep51 = (($gep_int50) + 12)|0;
 $expanded24 = $gep51;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded24);
 $expanded27 = 15824;
 $gep_int52 = 15824;
 $expanded26 = $gep_int52;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($expanded26);
 STACKTOP = sp;return;
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $1 = 0, $2 = 0, $3 = 0, $expanded = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($st|0)!=(0);
 $expanded = 16344;
 $2 = $1 ? $st : $expanded;
 $3 = _mbrtowc(0,$s,$n,$2)|0;
 STACKTOP = sp;return $3|0;
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$1$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$1$phi = 0, $c$2 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep4 = 0, $gep6 = 0;
 var $gep_array = 0, $gep_int = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int5 = 0, $s$0 = 0, $s$1 = 0, $s$1$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = sp;
 HEAP32[$1>>2] = $wc;
 $2 = ($st|0)==(0);
 $expanded = 16352;
 $$01 = $2 ? $expanded : $st;
 $gep_int = $$01;
 $3 = $gep_int;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($src|0)==(0);
 
 L1: do {
  if ($5) {
   $6 = ($4|0)==(0);
   
   if ($6) {
    $$0 = 0;
   } else {
    break;
   }
   
   STACKTOP = sp;return $$0|0;
  } else {
   $7 = ($wc|0)==(0);
   
   if ($7) {
    $8 = $1;
    HEAP32[$1>>2] = $8;
    
    $9 = $8;
   } else {
    $9 = $wc;
   }
   
   $10 = ($n|0)==(0);
   
   if ($10) {
    $$0 = -2;
    
    STACKTOP = sp;return $$0|0;
   }
   $11 = ($4|0)==(0);
   
   do {
    if ($11) {
     $12 = HEAP8[$src]|0;
     $13 = $12&255;
     $14 = ($12<<24>>24)>(-1);
     
     if ($14) {
      HEAP32[$9>>2] = $13;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      
      $$0 = $16;
      
      STACKTOP = sp;return $$0|0;
     } else {
      $17 = (($13) + -194)|0;
      $18 = ($17>>>0)>(50);
      
      if ($18) {
       break L1;
      }
      $gep_int2 = $src;
      $gep = (($gep_int2) + 1)|0;
      $19 = $gep;
      $expanded1 = 16136;
      $gep_int3 = 16136;
      $gep_array = $17<<2;
      $gep4 = (($gep_int3) + ($gep_array))|0;
      $20 = $gep4;
      $21 = HEAP32[$20>>2]|0;
      $22 = (($n) + -1)|0;
      
      $$02 = $22;$c$0 = $21;$s$0 = $19;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $4;$s$0 = $src;
    }
   } while(0);
   
   
   
   $23 = ($$02|0)==(0);
   
   L17: do {
    if ($23) {
     $c$2 = $c$0;
    } else {
     $24 = HEAP8[$s$0]|0;
     $25 = $24&255;
     $26 = $25 >>> 3;
     $27 = (($26) + -16)|0;
     $28 = $c$0 >> 26;
     $29 = (($26) + ($28))|0;
     $30 = $27 | $29;
     $31 = ($30>>>0)>(7);
     
     if ($31) {
      break L1;
     } else {
      $$1 = $$02;$32 = $24;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      
      
      
      
      $33 = $c$1 << 6;
      $gep_int5 = $s$1;
      $gep6 = (($gep_int5) + 1)|0;
      $34 = $gep6;
      $35 = $32&255;
      $36 = (($35) + -128)|0;
      $37 = $36 | $33;
      $38 = (($$1) + -1)|0;
      $39 = ($37|0)<(0);
      
      if (!($39)) {
       break;
      }
      $41 = ($38|0)==(0);
      
      if ($41) {
       $c$2 = $37;
       break L17;
      }
      $42 = HEAP8[$34]|0;
      $43 = $42&255;
      $44 = (($43) + -128)|0;
      $45 = ($44>>>0)>(63);
      
      if ($45) {
       break L1;
      } else {
       $s$1$phi = $34;$c$1$phi = $37;$$1$phi = $38;$32 = $42;$s$1 = $s$1$phi;$c$1 = $c$1$phi;$$1 = $$1$phi;
      }
     }
     HEAP32[$3>>2] = 0;
     HEAP32[$9>>2] = $37;
     $40 = (($n) - ($38))|0;
     
     $$0 = $40;
     
     STACKTOP = sp;return $$0|0;
    }
   } while(0);
   
   HEAP32[$3>>2] = $c$2;
   
   $$0 = -2;
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 HEAP32[$3>>2] = 0;
 $46 = ___errno_location()|0;
 HEAP32[$46>>2] = 84;
 
 $$0 = -1;
 
 STACKTOP = sp;return $$0|0;
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $gep = 0, $gep4 = 0, $gep6 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int5 = 0;
 var $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$018 = 0, $ws$025 = 0, $ws$1 = 0, $ws$213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1032|0;
 $wbuf = sp;
 $s = sp + 1024|0;
 $1 = $wbuf;
 
 $2 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $2;
 $3 = ($wcs|0)!=(0);
 $gep_int = $wbuf;
 $4 = $gep_int;
 $wn$ = $3 ? $wn : 256;
 $wcs$ = $3 ? $wcs : $4;
 $5 = ($2|0)==(0);
 $6 = ($wn$|0)==(0);
 $or$cond22 = $5 | $6;
 
 L1: do {
  if ($or$cond22) {
   $$1 = $n;$$26 = $wn$;$20 = $2;$cnt$1 = 0;$ws$018 = $wcs$;
  } else {
   $$026 = $n;$$0423 = $wn$;$$pr41 = $2;$cnt$024 = 0;$ws$025 = $wcs$;
   while(1) {
    
    
    
    
    
    $7 = $$026 >>> 2;
    $8 = ($7>>>0)>=($$0423>>>0);
    $9 = ($$026>>>0)>(131);
    $or$cond7 = $8 | $9;
    
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$20 = $$pr41;$cnt$1 = $cnt$024;$ws$018 = $ws$025;
     break L1;
    }
    $$04$ = $8 ? $$0423 : $7;
    $10 = (($$026) - ($$04$))|0;
    $11 = _mbsrtowcs($ws$025,$s,$$04$,$st)|0;
    $12 = ($11|0)==(-1);
    
    if ($12) {
     break;
    }
    $13 = ($ws$025|0)==($4|0);
    
    if ($13) {
     $$15 = $$0423;$ws$1 = $4;
    } else {
     $gep_int1 = $ws$025;
     $gep_array = $11<<2;
     $gep = (($gep_int1) + ($gep_array))|0;
     $14 = $gep;
     $15 = (($$0423) - ($11))|0;
     
     $$15 = $15;$ws$1 = $14;
    }
    
    
    $16 = (($11) + ($cnt$024))|0;
    $17 = HEAP32[$s>>2]|0;
    $18 = ($17|0)==(0);
    $19 = ($$15|0)==(0);
    $or$cond = $18 | $19;
    
    if ($or$cond) {
     $$1 = $10;$$26 = $$15;$20 = $17;$cnt$1 = $16;$ws$018 = $ws$1;
     break L1;
    } else {
     $$026 = $10;$$0423 = $$15;$$pr41 = $17;$cnt$024 = $16;$ws$025 = $ws$1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   
   $$1 = $10;$$26 = 0;$20 = $$pr$pre;$cnt$1 = -1;$ws$018 = $ws$025;
  }
 } while(0);
 
 
 
 
 
 $21 = ($20|0)==(0);
 
 L11: do {
  if ($21) {
   $cnt$3 = $cnt$1;
  } else {
   $22 = ($$26|0)==(0);
   $23 = ($$1|0)==(0);
   $or$cond810 = $22 | $23;
   
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
    break;
   } else {
    $$214 = $$1;$$311 = $$26;$24 = $20;$cnt$212 = $cnt$1;$ws$213 = $ws$018;
   }
   while(1) {
    
    
    
    
    
    $25 = _mbrtowc($ws$213,$24,$$214,$st)|0;
    $26 = (($25) + 2)|0;
    $27 = ($26>>>0)<(3);
    
    if ($27) {
     break;
    }
    $29 = HEAP32[$s>>2]|0;
    $gep_int3 = $29;
    $gep4 = (($gep_int3) + ($25))|0;
    $30 = $gep4;
    HEAP32[$s>>2] = $30;
    $31 = (($$214) - ($25))|0;
    $gep_int5 = $ws$213;
    $gep6 = (($gep_int5) + 4)|0;
    $32 = $gep6;
    $33 = (($$311) + -1)|0;
    $34 = (($cnt$212) + 1)|0;
    $35 = ($33|0)==(0);
    $36 = ($$214|0)==($25|0);
    $or$cond8 = $35 | $36;
    
    if ($or$cond8) {
     $cnt$3 = $34;
     break L11;
    } else {
     $$214 = $31;$$311 = $33;$24 = $30;$cnt$212 = $34;$ws$213 = $32;
    }
   }
   
   if ((($25|0) == -1)) {
    $cnt$3 = -1;
    break;
   } else if ((($25|0) == 0)) {
    HEAP32[$s>>2] = 0;
    
    $cnt$3 = $cnt$212;
    break;
   } else {
    $gep_int2 = $st;
    $28 = $gep_int2;
    HEAP32[$28>>2] = 0;
    
    $cnt$3 = $cnt$212;
    break;
   }
  }
 } while(0);
 
 
 if (!($3)) {
  
  STACKTOP = sp;return $cnt$3|0;
 }
 $37 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $37;
 
 
 STACKTOP = sp;return $cnt$3|0;
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$137 = 0, $$137$phi = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$441 = 0, $$442 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$840 = 0, $$pre$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0;
 var $expanded = 0, $expanded1 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep4 = 0, $gep40 = 0;
 var $gep42 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep6 = 0, $gep8 = 0, $gep_array = 0, $gep_array44 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0;
 var $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int39 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int5 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0;
 var $gep_int58 = 0, $gep_int7 = 0, $gep_int9 = 0, $or$cond = 0, $s$0 = 0, $s$10 = 0, $s$1043 = 0, $s$1044 = 0, $s$18 = 0, $s$18$phi = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$src>>2]|0;
 $2 = ($st|0)==(0);
 
 do {
  if ($2) {
   label = 5;
  } else {
   $gep_int = $st;
   $3 = $gep_int;
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0);
   
   if ($5) {
    label = 5;
    break;
   }
   $6 = ($ws|0)==(0);
   
   if ($6) {
    $$35 = $wn;$c$2 = $4;$s$3 = $1;
    label = 16;
    break;
   }
   HEAP32[$3>>2] = 0;
   
   $$3 = $ws;$$7 = $wn;$c$4 = $4;$s$8 = $1;
   label = 36;
  }
 } while(0);
 if ((label|0) == 5) {
  $7 = ($ws|0)==(0);
  
  if ($7) {
   $$02 = $wn;$s$0 = $1;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $1;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   
   
   
   $8 = ($$46$ph|0)==(0);
   
   if ($8) {
    $$0 = $wn;
    label = 53;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    
    
    
    $70 = HEAP8[$s$524]|0;
    $71 = $70&255;
    $72 = (($71) + -1)|0;
    $73 = ($72>>>0)<(127);
    
    do {
     if ($73) {
      $74 = $s$524;
      $75 = $74 & 3;
      $76 = ($75|0)==(0);
      $77 = ($$4622>>>0)>(3);
      $or$cond = $76 & $77;
      
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
      } else {
       $$2 = $$0123;$$6 = $$4622;$102 = $70;$s$7 = $s$524;
       break;
      }
      while(1) {
       
       
       
       $78 = $s$614;
       $79 = HEAP32[$s$614>>2]|0;
       $80 = (($79) + -16843009)|0;
       $81 = $80 | $79;
       $82 = $81 & -2139062144;
       $83 = ($82|0)==(0);
       
       if (!($83)) {
        label = 30;
        break;
       }
       $gep_int21 = $s$614;
       $gep22 = (($gep_int21) + 1)|0;
       $84 = $gep22;
       $85 = $79 & 255;
       $gep_int23 = $$113;
       $gep24 = (($gep_int23) + 4)|0;
       $86 = $gep24;
       HEAP32[$$113>>2] = $85;
       $gep_int25 = $s$614;
       $gep26 = (($gep_int25) + 2)|0;
       $87 = $gep26;
       $88 = HEAP8[$84]|0;
       $89 = $88&255;
       $gep_int27 = $$113;
       $gep28 = (($gep_int27) + 8)|0;
       $90 = $gep28;
       HEAP32[$86>>2] = $89;
       $gep_int29 = $s$614;
       $gep30 = (($gep_int29) + 3)|0;
       $91 = $gep30;
       $92 = HEAP8[$87]|0;
       $93 = $92&255;
       $gep_int31 = $$113;
       $gep32 = (($gep_int31) + 12)|0;
       $94 = $gep32;
       HEAP32[$90>>2] = $93;
       $gep_int33 = $s$614;
       $gep34 = (($gep_int33) + 4)|0;
       $95 = $gep34;
       $96 = HEAP8[$91]|0;
       $97 = $96&255;
       $gep_int35 = $$113;
       $gep36 = (($gep_int35) + 16)|0;
       $98 = $gep36;
       HEAP32[$94>>2] = $97;
       $99 = (($$512) + -4)|0;
       $100 = ($99>>>0)>(3);
       
       if ($100) {
        $$113 = $98;$$512 = $99;$s$614 = $95;
       } else {
        label = 31;
        break;
       }
      }
      if ((label|0) == 30) {
       label = 0;
       $101 = $79&255;
       
       $$2 = $$113;$$6 = $$512;$102 = $101;$s$7 = $s$614;
       break;
      }
      else if ((label|0) == 31) {
       label = 0;
       $$pre$pre = HEAP8[$95]|0;
       
       $$2 = $98;$$6 = $99;$102 = $$pre$pre;$s$7 = $95;
       break;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$102 = $70;$s$7 = $s$524;
     }
    } while(0);
    
    
    
    
    $103 = $102&255;
    $104 = (($103) + -1)|0;
    $105 = ($104>>>0)<(127);
    
    if (!($105)) {
     break;
    }
    $gep_int37 = $s$7;
    $gep38 = (($gep_int37) + 1)|0;
    $106 = $gep38;
    $gep_int39 = $$2;
    $gep40 = (($gep_int39) + 4)|0;
    $107 = $gep40;
    HEAP32[$$2>>2] = $103;
    $108 = (($$6) + -1)|0;
    $109 = ($108|0)==(0);
    
    if ($109) {
     $$0 = $wn;
     label = 53;
     break L7;
    } else {
     $$0123 = $107;$$4622 = $108;$s$524 = $106;
    }
   }
   $110 = (($103) + -194)|0;
   $111 = ($110>>>0)>(50);
   
   if ($111) {
    $$442 = $$2;$$840 = $$6;$s$1044 = $s$7;
    label = 47;
    break;
   }
   $gep_int41 = $s$7;
   $gep42 = (($gep_int41) + 1)|0;
   $112 = $gep42;
   $expanded1 = 16136;
   $gep_int43 = 16136;
   $gep_array44 = $110<<2;
   $gep45 = (($gep_int43) + ($gep_array44))|0;
   $113 = $gep45;
   $114 = HEAP32[$113>>2]|0;
   
   $$3 = $$2;$$7 = $$6;$c$4 = $114;$s$8 = $112;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   
   
   $9 = HEAP8[$s$0]|0;
   $10 = $9&255;
   $11 = (($10) + -1)|0;
   $12 = ($11>>>0)<(127);
   
   do {
    if ($12) {
     $13 = $s$0;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     
     if (!($15)) {
      $$24 = $$02;$32 = $9;$s$2 = $s$0;
      break;
     }
     $16 = $s$0;
     $17 = HEAP32[$s$0>>2]|0;
     $18 = (($17) + -16843009)|0;
     $19 = $18 | $17;
     $20 = $19 & -2139062144;
     $21 = ($20|0)==(0);
     $22 = $17&255;
     
     if ($21) {
      $$137 = $$02;$s$18 = $s$0;
     } else {
      $$24 = $$02;$32 = $22;$s$2 = $s$0;
      break;
     }
     while(1) {
      
      
      $gep_int2 = $s$18;
      $gep = (($gep_int2) + 4)|0;
      $23 = $gep;
      $24 = (($$137) + -4)|0;
      $25 = $23;
      $26 = HEAP32[$23>>2]|0;
      $27 = (($26) + -16843009)|0;
      $28 = $27 | $26;
      $29 = $28 & -2139062144;
      $30 = ($29|0)==(0);
      
      if ($30) {
       $s$18$phi = $23;$$137$phi = $24;$s$18 = $s$18$phi;$$137 = $$137$phi;
      } else {
       break;
      }
     }
     $31 = $26&255;
     
     $$24 = $24;$32 = $31;$s$2 = $23;
    } else {
     $$24 = $$02;$32 = $9;$s$2 = $s$0;
    }
   } while(0);
   
   
   
   $33 = $32&255;
   $34 = (($33) + -1)|0;
   $35 = ($34>>>0)<(127);
   
   if ($35) {
    $gep_int3 = $s$2;
    $gep4 = (($gep_int3) + 1)|0;
    $36 = $gep4;
    $37 = (($$24) + -1)|0;
    
    $$02 = $37;$s$0 = $36;
    label = 7;
    continue;
   }
   $38 = (($33) + -194)|0;
   $39 = ($38>>>0)>(50);
   
   if ($39) {
    $$442 = $ws;$$840 = $$24;$s$1044 = $s$2;
    label = 47;
    break;
   }
   $gep_int5 = $s$2;
   $gep6 = (($gep_int5) + 1)|0;
   $40 = $gep6;
   $expanded = 16136;
   $gep_int7 = 16136;
   $gep_array = $38<<2;
   $gep8 = (($gep_int7) + ($gep_array))|0;
   $41 = $gep8;
   $42 = HEAP32[$41>>2]|0;
   
   $$35 = $$24;$c$2 = $42;$s$3 = $40;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   
   
   
   $43 = HEAP8[$s$3]|0;
   $44 = $43&255;
   $45 = $44 >>> 3;
   $46 = (($45) + -16)|0;
   $47 = $c$2 >> 26;
   $48 = (($45) + ($47))|0;
   $49 = $46 | $48;
   $50 = ($49>>>0)>(7);
   
   if ($50) {
    label = 17;
    break;
   }
   $gep_int11 = $s$3;
   $gep12 = (($gep_int11) + 1)|0;
   $52 = $gep12;
   $53 = $c$2 & 33554432;
   $54 = ($53|0)==(0);
   
   do {
    if ($54) {
     $s$4 = $52;
    } else {
     $55 = HEAP8[$52]|0;
     $56 = $55&255;
     $57 = (($56) + -128)|0;
     $58 = ($57>>>0)>(63);
     
     if ($58) {
      label = 20;
      break L7;
     }
     $gep_int15 = $s$3;
     $gep16 = (($gep_int15) + 2)|0;
     $60 = $gep16;
     $61 = $c$2 & 524288;
     $62 = ($61|0)==(0);
     
     if ($62) {
      $s$4 = $60;
      break;
     }
     $63 = HEAP8[$60]|0;
     $64 = $63&255;
     $65 = (($64) + -128)|0;
     $66 = ($65>>>0)>(63);
     
     if ($66) {
      label = 23;
      break L7;
     }
     $gep_int19 = $s$3;
     $gep20 = (($gep_int19) + 3)|0;
     $68 = $gep20;
     
     $s$4 = $68;
    }
   } while(0);
   
   $69 = (($$35) + -1)|0;
   
   $$02 = $69;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   
   
   
   
   $115 = HEAP8[$s$8]|0;
   $116 = $115&255;
   $117 = $116 >>> 3;
   $118 = (($117) + -16)|0;
   $119 = $c$4 >> 26;
   $120 = (($117) + ($119))|0;
   $121 = $118 | $120;
   $122 = ($121>>>0)>(7);
   
   if ($122) {
    label = 37;
    break;
   }
   $124 = $c$4 << 6;
   $gep_int48 = $s$8;
   $gep49 = (($gep_int48) + 1)|0;
   $125 = $gep49;
   $126 = (($116) + -128)|0;
   $127 = $126 | $124;
   $128 = ($127|0)<(0);
   
   do {
    if ($128) {
     $129 = HEAP8[$125]|0;
     $130 = $129&255;
     $131 = (($130) + -128)|0;
     $132 = ($131>>>0)>(63);
     
     if ($132) {
      label = 40;
      break L7;
     }
     $134 = $127 << 6;
     $gep_int52 = $s$8;
     $gep53 = (($gep_int52) + 2)|0;
     $135 = $gep53;
     $136 = $131 | $134;
     $137 = ($136|0)<(0);
     
     if (!($137)) {
      $c$5 = $136;$s$9 = $135;
      break;
     }
     $138 = HEAP8[$135]|0;
     $139 = $138&255;
     $140 = (($139) + -128)|0;
     $141 = ($140>>>0)>(63);
     
     if ($141) {
      label = 43;
      break L7;
     }
     $143 = $136 << 6;
     $gep_int56 = $s$8;
     $gep57 = (($gep_int56) + 3)|0;
     $144 = $gep57;
     $145 = $140 | $143;
     
     $c$5 = $145;$s$9 = $144;
    } else {
     $c$5 = $127;$s$9 = $125;
    }
   } while(0);
   
   
   $gep_int58 = $$3;
   $gep59 = (($gep_int58) + 4)|0;
   $146 = $gep59;
   HEAP32[$$3>>2] = $c$5;
   $147 = (($$7) + -1)|0;
   
   $$01$ph = $146;$$46$ph = $147;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $gep_int9 = $s$3;
  $gep10 = (($gep_int9) + -1)|0;
  $51 = $gep10;
  
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $51;
  label = 46;
 }
 else if ((label|0) == 20) {
  $gep_int13 = $s$3;
  $gep14 = (($gep_int13) + -1)|0;
  $59 = $gep14;
  
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $59;
  label = 46;
 }
 else if ((label|0) == 23) {
  $gep_int17 = $s$3;
  $gep18 = (($gep_int17) + -1)|0;
  $67 = $gep18;
  
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $67;
  label = 46;
 }
 else if ((label|0) == 37) {
  $gep_int46 = $s$8;
  $gep47 = (($gep_int46) + -1)|0;
  $123 = $gep47;
  
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $123;
  label = 46;
 }
 else if ((label|0) == 40) {
  $gep_int50 = $s$8;
  $gep51 = (($gep_int50) + -1)|0;
  $133 = $gep51;
  
  $$4 = $$3;$$8 = $$7;$c$6 = $127;$s$10 = $133;
  label = 46;
 }
 else if ((label|0) == 43) {
  $gep_int54 = $s$8;
  $gep55 = (($gep_int54) + -1)|0;
  $142 = $gep55;
  
  $$4 = $$3;$$8 = $$7;$c$6 = $136;$s$10 = $142;
  label = 46;
 }
 else if ((label|0) == 53) {
  
  STACKTOP = sp;return $$0|0;
 }
 if ((label|0) == 46) {
  
  
  
  
  $148 = ($c$6|0)==(0);
  
  if ($148) {
   $$442 = $$4;$$840 = $$8;$s$1044 = $s$10;
   label = 47;
  } else {
   $$441 = $$4;$s$1043 = $s$10;
  }
 }
 do {
  if ((label|0) == 47) {
   
   
   
   $149 = HEAP8[$s$1044]|0;
   $150 = ($149<<24>>24)==(0);
   
   if (!($150)) {
    $$441 = $$442;$s$1043 = $s$1044;
    break;
   }
   $151 = ($$442|0)==(0);
   
   if (!($151)) {
    HEAP32[$$442>>2] = 0;
    HEAP32[$src>>2] = 0;
    
   }
   $152 = (($wn) - ($$840))|0;
   
   $$0 = $152;
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 
 
 $153 = ___errno_location()|0;
 HEAP32[$153>>2] = 84;
 $154 = ($$441|0)==(0);
 
 if ($154) {
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 }
 HEAP32[$src>>2] = $s$1043;
 
 $$0 = -1;
 
 STACKTOP = sp;return $$0|0;
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0;
 var $gep_int5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = sp;
 HEAP32[$1>>2] = $wc;
 $2 = ($src|0)==(0);
 
 if ($2) {
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $3 = ($n|0)==(0);
 
 do {
  if (!($3)) {
   $4 = ($wc|0)==(0);
   
   if ($4) {
    $5 = $1;
    HEAP32[$1>>2] = $5;
    
    $6 = $5;
   } else {
    $6 = $wc;
   }
   
   $7 = HEAP8[$src]|0;
   $8 = $7&255;
   $9 = ($7<<24>>24)>(-1);
   
   if ($9) {
    HEAP32[$6>>2] = $8;
    $10 = ($7<<24>>24)!=(0);
    $11 = $10&1;
    
    $$0 = $11;
    
    STACKTOP = sp;return $$0|0;
   }
   $12 = (($8) + -194)|0;
   $13 = ($12>>>0)>(50);
   
   if ($13) {
    break;
   }
   $gep_int = $src;
   $gep = (($gep_int) + 1)|0;
   $14 = $gep;
   $expanded = 16136;
   $gep_int1 = 16136;
   $gep_array = $12<<2;
   $gep2 = (($gep_int1) + ($gep_array))|0;
   $15 = $gep2;
   $16 = HEAP32[$15>>2]|0;
   $17 = ($n>>>0)<(4);
   
   if ($17) {
    $18 = ($n*6)|0;
    $19 = (($18) + -6)|0;
    $20 = -2147483648 >>> $19;
    $21 = $16 & $20;
    $22 = ($21|0)==(0);
    
    if (!($22)) {
     break;
    }
   }
   $23 = HEAP8[$14]|0;
   $24 = $23&255;
   $25 = $24 >>> 3;
   $26 = (($25) + -16)|0;
   $27 = $16 >> 26;
   $28 = (($25) + ($27))|0;
   $29 = $26 | $28;
   $30 = ($29>>>0)>(7);
   
   if ($30) {
    break;
   }
   $31 = $16 << 6;
   $32 = (($24) + -128)|0;
   $33 = $32 | $31;
   $34 = ($33|0)<(0);
   
   if (!($34)) {
    HEAP32[$6>>2] = $33;
    
    $$0 = 2;
    
    STACKTOP = sp;return $$0|0;
   }
   $gep_int3 = $src;
   $gep4 = (($gep_int3) + 2)|0;
   $35 = $gep4;
   $36 = HEAP8[$35]|0;
   $37 = $36&255;
   $38 = (($37) + -128)|0;
   $39 = ($38>>>0)>(63);
   
   if ($39) {
    break;
   }
   $40 = $33 << 6;
   $41 = $38 | $40;
   $42 = ($41|0)<(0);
   
   if (!($42)) {
    HEAP32[$6>>2] = $41;
    
    $$0 = 3;
    
    STACKTOP = sp;return $$0|0;
   }
   $gep_int5 = $src;
   $gep6 = (($gep_int5) + 3)|0;
   $43 = $gep6;
   $44 = HEAP8[$43]|0;
   $45 = $44&255;
   $46 = (($45) + -128)|0;
   $47 = ($46>>>0)>(63);
   
   if ($47) {
    break;
   }
   $48 = $41 << 6;
   $49 = $46 | $48;
   HEAP32[$6>>2] = $49;
   
   $$0 = 4;
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $50 = ___errno_location()|0;
 HEAP32[$50>>2] = 84;
 
 $$0 = -1;
 
 STACKTOP = sp;return $$0|0;
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($s|0)==(0);
 
 if ($1) {
  $$0 = 1;
  
  STACKTOP = sp;return $$0|0;
 }
 $2 = ($wc>>>0)<(128);
 
 if ($2) {
  $3 = $wc&255;
  HEAP8[$s] = $3;
  
  $$0 = 1;
  
  STACKTOP = sp;return $$0|0;
 }
 $4 = ($wc>>>0)<(2048);
 
 if ($4) {
  $5 = $wc >>> 6;
  $6 = $5 | 192;
  $7 = $6&255;
  $gep_int = $s;
  $gep = (($gep_int) + 1)|0;
  $8 = $gep;
  HEAP8[$s] = $7;
  $9 = $wc & 63;
  $10 = $9 | 128;
  $11 = $10&255;
  HEAP8[$8] = $11;
  
  $$0 = 2;
  
  STACKTOP = sp;return $$0|0;
 }
 $12 = ($wc>>>0)<(55296);
 $13 = (($wc) + -57344)|0;
 $14 = ($13>>>0)<(8192);
 $or$cond = $12 | $14;
 
 if ($or$cond) {
  $15 = $wc >>> 12;
  $16 = $15 | 224;
  $17 = $16&255;
  $gep_int1 = $s;
  $gep2 = (($gep_int1) + 1)|0;
  $18 = $gep2;
  HEAP8[$s] = $17;
  $19 = $wc >>> 6;
  $20 = $19 & 63;
  $21 = $20 | 128;
  $22 = $21&255;
  $gep_int3 = $s;
  $gep4 = (($gep_int3) + 2)|0;
  $23 = $gep4;
  HEAP8[$18] = $22;
  $24 = $wc & 63;
  $25 = $24 | 128;
  $26 = $25&255;
  HEAP8[$23] = $26;
  
  $$0 = 3;
  
  STACKTOP = sp;return $$0|0;
 }
 $27 = (($wc) + -65536)|0;
 $28 = ($27>>>0)<(1048576);
 
 if ($28) {
  $29 = $wc >>> 18;
  $30 = $29 | 240;
  $31 = $30&255;
  $gep_int5 = $s;
  $gep6 = (($gep_int5) + 1)|0;
  $32 = $gep6;
  HEAP8[$s] = $31;
  $33 = $wc >>> 12;
  $34 = $33 & 63;
  $35 = $34 | 128;
  $36 = $35&255;
  $gep_int7 = $s;
  $gep8 = (($gep_int7) + 2)|0;
  $37 = $gep8;
  HEAP8[$32] = $36;
  $38 = $wc >>> 6;
  $39 = $38 & 63;
  $40 = $39 | 128;
  $41 = $40&255;
  $gep_int9 = $s;
  $gep10 = (($gep_int9) + 3)|0;
  $42 = $gep10;
  HEAP8[$37] = $41;
  $43 = $wc & 63;
  $44 = $43 | 128;
  $45 = $44&255;
  HEAP8[$42] = $45;
  
  $$0 = 4;
  
  STACKTOP = sp;return $$0|0;
 } else {
  $46 = ___errno_location()|0;
  HEAP32[$46>>2] = 84;
  
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 }
 return 0|0;
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $gep = 0, $gep3 = 0, $gep5 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int2 = 0, $gep_int4 = 0, $n$ = 0;
 var $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s$018 = 0, $s$025 = 0, $s$1 = 0, $s$213 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 264|0;
 $buf = sp;
 $ws = sp + 256|0;
 $gep_int = $buf;
 $1 = $gep_int;
 
 $2 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $2;
 $3 = ($dst|0)!=(0);
 $n$ = $3 ? $n : 256;
 $dst$ = $3 ? $dst : $1;
 $4 = ($2|0)==(0);
 $5 = ($n$|0)==(0);
 $or$cond22 = $4 | $5;
 
 L1: do {
  if ($or$cond22) {
   $$1 = $wn;$$26 = $n$;$18 = $2;$cnt$1 = 0;$s$018 = $dst$;
  } else {
   $$026 = $wn;$$0423 = $n$;$$pr41 = $2;$cnt$024 = 0;$s$025 = $dst$;
   while(1) {
    
    
    
    
    
    $6 = ($$026>>>0)>=($$0423>>>0);
    $7 = ($$026>>>0)>(32);
    $or$cond7 = $6 | $7;
    
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$18 = $$pr41;$cnt$1 = $cnt$024;$s$018 = $s$025;
     break L1;
    }
    $$04$$0 = $6 ? $$0423 : $$026;
    $8 = (($$026) - ($$04$$0))|0;
    $9 = _wcsrtombs($s$025,$ws,$$04$$0,0)|0;
    $10 = ($9|0)==(-1);
    
    if ($10) {
     break;
    }
    $11 = ($s$025|0)==($1|0);
    
    if ($11) {
     $$15 = $$0423;$s$1 = $1;
    } else {
     $gep_int1 = $s$025;
     $gep = (($gep_int1) + ($9))|0;
     $12 = $gep;
     $13 = (($$0423) - ($9))|0;
     
     $$15 = $13;$s$1 = $12;
    }
    
    
    $14 = (($9) + ($cnt$024))|0;
    $15 = HEAP32[$ws>>2]|0;
    $16 = ($15|0)==(0);
    $17 = ($$15|0)==(0);
    $or$cond = $16 | $17;
    
    if ($or$cond) {
     $$1 = $8;$$26 = $$15;$18 = $15;$cnt$1 = $14;$s$018 = $s$1;
     break L1;
    } else {
     $$026 = $8;$$0423 = $$15;$$pr41 = $15;$cnt$024 = $14;$s$025 = $s$1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   
   $$1 = $8;$$26 = 0;$18 = $$pr$pre;$cnt$1 = -1;$s$018 = $s$025;
  }
 } while(0);
 
 
 
 
 
 $19 = ($18|0)==(0);
 
 L11: do {
  if ($19) {
   $cnt$3 = $cnt$1;
  } else {
   $20 = ($$26|0)==(0);
   $21 = ($$1|0)==(0);
   $or$cond810 = $20 | $21;
   
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
    break;
   } else {
    $$214 = $$1;$$311 = $$26;$22 = $18;$cnt$212 = $cnt$1;$s$213 = $s$018;
   }
   while(1) {
    
    
    
    
    
    $23 = HEAP32[$22>>2]|0;
    $24 = _wcrtomb($s$213,$23,0)|0;
    $25 = (($24) + 1)|0;
    $26 = ($25>>>0)<(2);
    
    if ($26) {
     break;
    }
    $28 = HEAP32[$ws>>2]|0;
    $gep_int2 = $28;
    $gep3 = (($gep_int2) + 4)|0;
    $29 = $gep3;
    HEAP32[$ws>>2] = $29;
    $30 = (($$214) + -1)|0;
    $gep_int4 = $s$213;
    $gep5 = (($gep_int4) + ($24))|0;
    $31 = $gep5;
    $32 = (($$311) - ($24))|0;
    $33 = (($cnt$212) + 1)|0;
    $34 = ($$311|0)==($24|0);
    $35 = ($30|0)==(0);
    $or$cond8 = $34 | $35;
    
    if ($or$cond8) {
     $cnt$3 = $33;
     break L11;
    } else {
     $$214 = $30;$$311 = $32;$22 = $29;$cnt$212 = $33;$s$213 = $31;
    }
   }
   $27 = ($24|0)==(0);
   
   if (!($27)) {
    $cnt$3 = -1;
    break;
   }
   HEAP32[$ws>>2] = 0;
   
   $cnt$3 = $cnt$212;
  }
 } while(0);
 
 
 if (!($3)) {
  
  STACKTOP = sp;return $cnt$3|0;
 }
 $36 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $36;
 
 
 STACKTOP = sp;return $cnt$3|0;
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$02$lcssa = 0, $$0226 = 0, $$038 = 0, $$1 = 0, $$14 = 0, $$219 = 0, $$25$lcssa = 0, $$2525 = 0, $$3 = 0, $$36 = 0, $$414 = 0, $$418 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int2 = 0, $gep_int3 = 0;
 var $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $ws2$09 = 0, label = 0, sp = 0, u$22 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $buf = sp;
 $1 = ($s|0)==(0);
 
 if ($1) {
  $3 = HEAP32[$ws>>2]|0;
  $gep_int = $buf;
  $4 = $gep_int;
  $5 = HEAP32[$3>>2]|0;
  $6 = ($5|0)==(0);
  
  if ($6) {
   $$0 = 0;
   
   STACKTOP = sp;return $$0|0;
  } else {
   $$038 = 0;$7 = $5;$ws2$09 = $3;
  }
  while(1) {
   
   
   
   $8 = ($7>>>0)>(127);
   
   if ($8) {
    $9 = _wcrtomb($4,$7,0)|0;
    $10 = ($9|0)==(-1);
    
    if ($10) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $9;
    }
   } else {
    $$pn = 1;
   }
   
   $$14 = (($$pn) + ($$038))|0;
   $gep_int1 = $ws2$09;
   $gep = (($gep_int1) + 4)|0;
   $11 = $gep;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   
   if ($13) {
    $$0 = $$14;
    label = 26;
    break;
   } else {
    $$038 = $$14;$7 = $12;$ws2$09 = $11;
   }
  }
  if ((label|0) == 26) {
   
   STACKTOP = sp;return $$0|0;
  }
 }
 $2 = ($n>>>0)>(3);
 
 L14: do {
  if ($2) {
   $$pre41 = HEAP32[$ws>>2]|0;
   
   $$0226 = $s;$$2525 = $n;$14 = $$pre41;
   while(1) {
    
    
    
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    
    if ($16) {
     $$02$lcssa = $$0226;$$25$lcssa = $$2525;
     break L14;
    }
    $19 = ($15>>>0)>(127);
    
    if ($19) {
     $20 = _wcrtomb($$0226,$15,0)|0;
     $21 = ($20|0)==(-1);
     
     if ($21) {
      $$0 = -1;
      break;
     }
     $gep_int3 = $$0226;
     $gep4 = (($gep_int3) + ($20))|0;
     $22 = $gep4;
     $23 = (($$2525) - ($20))|0;
     
     $$1 = $22;$$36 = $23;$27 = $14;
    } else {
     $24 = $15&255;
     $gep_int5 = $$0226;
     $gep6 = (($gep_int5) + 1)|0;
     $25 = $gep6;
     HEAP8[$$0226] = $24;
     $26 = (($$2525) + -1)|0;
     $$pre42 = HEAP32[$ws>>2]|0;
     
     $$1 = $25;$$36 = $26;$27 = $$pre42;
    }
    
    
    
    $gep_int7 = $27;
    $gep8 = (($gep_int7) + 4)|0;
    $28 = $gep8;
    HEAP32[$ws>>2] = $28;
    $29 = ($$36>>>0)>(3);
    
    if ($29) {
     $$0226 = $$1;$$2525 = $$36;$14 = $28;
    } else {
     $$02$lcssa = $$1;$$25$lcssa = $$36;
     break L14;
    }
   }
   
   STACKTOP = sp;return $$0|0;
  } else {
   $$02$lcssa = $s;$$25$lcssa = $n;
  }
 } while(0);
 
 
 $17 = ($$25$lcssa|0)==(0);
 
 L26: do {
  if ($17) {
   $$414 = 0;
  } else {
   $gep_int2 = $buf;
   $18 = $gep_int2;
   $$pre = HEAP32[$ws>>2]|0;
   
   $$219 = $$02$lcssa;$$418 = $$25$lcssa;$30 = $$pre;
   while(1) {
    
    
    
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(0);
    
    if ($32) {
     label = 24;
     break;
    }
    $33 = ($31>>>0)>(127);
    
    if ($33) {
     $34 = _wcrtomb($18,$31,0)|0;
     $35 = ($34|0)==(-1);
     
     if ($35) {
      $$0 = -1;
      label = 26;
      break;
     }
     $36 = ($34>>>0)>($$418>>>0);
     
     if ($36) {
      label = 20;
      break;
     }
     $38 = HEAP32[$30>>2]|0;
     u$22 = _wcrtomb($$219,$38,0)|0;
     $gep_int9 = $$219;
     $gep10 = (($gep_int9) + ($34))|0;
     $39 = $gep10;
     $40 = (($$418) - ($34))|0;
     
     $$3 = $39;$$5 = $40;$44 = $30;
    } else {
     $41 = $31&255;
     $gep_int11 = $$219;
     $gep12 = (($gep_int11) + 1)|0;
     $42 = $gep12;
     HEAP8[$$219] = $41;
     $43 = (($$418) + -1)|0;
     $$pre40 = HEAP32[$ws>>2]|0;
     
     $$3 = $42;$$5 = $43;$44 = $$pre40;
    }
    
    
    
    $gep_int13 = $44;
    $gep14 = (($gep_int13) + 4)|0;
    $45 = $gep14;
    HEAP32[$ws>>2] = $45;
    $46 = ($$5|0)==(0);
    
    if ($46) {
     $$414 = 0;
     break L26;
    } else {
     $$219 = $$3;$$418 = $$5;$30 = $45;
    }
   }
   if ((label|0) == 20) {
    $37 = (($n) - ($$418))|0;
    
    $$0 = $37;
    
    STACKTOP = sp;return $$0|0;
   }
   else if ((label|0) == 24) {
    HEAP8[$$219] = 0;
    
    $$414 = $$418;
    break;
   }
   else if ((label|0) == 26) {
    
    STACKTOP = sp;return $$0|0;
   }
  }
 } while(0);
 
 HEAP32[$ws>>2] = 0;
 $47 = (($n) - ($$414))|0;
 
 $$0 = $47;
 
 STACKTOP = sp;return $$0|0;
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$phi = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 
 $$0 = $s;
 while(1) {
  
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $gep_int = $$0;
  $gep = (($gep_int) + 4)|0;
  $3 = $gep;
  
  if ($2) {
   break;
  } else {
   $$0$phi = $3;$$0 = $$0$phi;
  }
 }
 $4 = $$0;
 $5 = $s;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 STACKTOP = sp;return $7|0;
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$014$phi = 0, $$023 = 0, $$023$phi = 0, $$05 = 0, $$05$phi = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($n|0)==(0);
 
 if ($1) {
  STACKTOP = sp;return $d|0;
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  
  
  
  $2 = (($$014) + -1)|0;
  $gep_int = $$023;
  $gep = (($gep_int) + 4)|0;
  $3 = $gep;
  $4 = HEAP32[$$023>>2]|0;
  $gep_int1 = $$05;
  $gep2 = (($gep_int1) + 4)|0;
  $5 = $gep2;
  HEAP32[$$05>>2] = $4;
  $6 = ($2|0)==(0);
  
  if ($6) {
   break;
  } else {
   $$05$phi = $5;$$023$phi = $3;$$014$phi = $2;$$05 = $$05$phi;$$023 = $$023$phi;$$014 = $$014$phi;
  }
 }
 STACKTOP = sp;return $d|0;
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$025$phi = 0, $$07 = 0, $$07$phi = 0, $$16 = 0, $$16$phi = 0, $$in = 0, $$in$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep3 = 0, $gep5 = 0, $gep7 = 0, $gep_array = 0, $gep_array2 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int4 = 0, $gep_int6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $d;
 $2 = $s;
 $3 = (($1) - ($2))|0;
 $4 = $3 >> 2;
 $5 = ($4>>>0)<($n>>>0);
 $6 = ($n|0)==(0);
 
 if ($5) {
  
  if ($6) {
   STACKTOP = sp;return $d|0;
  } else {
   $$in = $n;
  }
  while(1) {
   
   $7 = (($$in) + -1)|0;
   $gep_int = $s;
   $gep_array = $7<<2;
   $gep = (($gep_int) + ($gep_array))|0;
   $8 = $gep;
   $9 = HEAP32[$8>>2]|0;
   $gep_int1 = $d;
   $gep_array2 = $7<<2;
   $gep3 = (($gep_int1) + ($gep_array2))|0;
   $10 = $gep3;
   HEAP32[$10>>2] = $9;
   $11 = ($7|0)==(0);
   
   if ($11) {
    break;
   } else {
    $$in$phi = $7;$$in = $$in$phi;
   }
  }
  STACKTOP = sp;return $d|0;
 } else {
  
  if ($6) {
   STACKTOP = sp;return $d|0;
  } else {
   $$025 = $s;$$07 = $d;$$16 = $n;
  }
  while(1) {
   
   
   
   $12 = (($$16) + -1)|0;
   $gep_int4 = $$025;
   $gep5 = (($gep_int4) + 4)|0;
   $13 = $gep5;
   $14 = HEAP32[$$025>>2]|0;
   $gep_int6 = $$07;
   $gep7 = (($gep_int6) + 4)|0;
   $15 = $gep7;
   HEAP32[$$07>>2] = $14;
   $16 = ($12|0)==(0);
   
   if ($16) {
    break;
   } else {
    $$16$phi = $12;$$07$phi = $15;$$025$phi = $13;$$16 = $$16$phi;$$07 = $$07$phi;$$025 = $$025$phi;
   }
  }
  STACKTOP = sp;return $d|0;
 }
 return 0|0;
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$012$phi = 0, $$03 = 0, $$03$phi = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($n|0)==(0);
 
 if ($1) {
  STACKTOP = sp;return $d|0;
 } else {
  $$012 = $n;$$03 = $d;
 }
 while(1) {
  
  
  $2 = (($$012) + -1)|0;
  $gep_int = $$03;
  $gep = (($gep_int) + 4)|0;
  $3 = $gep;
  HEAP32[$$03>>2] = $c;
  $4 = ($2|0)==(0);
  
  if ($4) {
   break;
  } else {
   $$03$phi = $3;$$012$phi = $2;$$03 = $$03$phi;$$012 = $$012$phi;
  }
 }
 STACKTOP = sp;return $d|0;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $gep = 0, $gep_int = 0, $gep_int3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $expanded2 = 16360;
 $gep_int3 = 16360;
 $gep = (($gep_int3) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt9exceptionD2Ev($1|0);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt9exceptionD2Ev($1|0);
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var $expanded = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = 16384;
 $expanded = $gep_int;
 STACKTOP = sp;return $expanded|0;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded1 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int4 = 0, $gep_int5 = 0, $gep_int7 = 0;
 var $gep_int9 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $info = sp;
 $gep_int = $this;
 $1 = $gep_int;
 $gep_int2 = $thrown_type;
 $2 = $gep_int2;
 $3 = ($1|0)==($2|0);
 
 if ($3) {
  $$1 = 1;
  
  STACKTOP = sp;return $$1|0;
 }
 $4 = ($thrown_type|0)==(0);
 
 if ($4) {
  $$1 = 0;
  
  STACKTOP = sp;return $$1|0;
 }
 $5 = $thrown_type;
 $expanded = 16496;
 $expanded1 = 16552;
 $6 = ___dynamic_cast($5,$expanded,$expanded1,0)|0;
 $7 = $6;
 $8 = ($6|0)==(0);
 
 if ($8) {
  $$1 = 0;
  
  STACKTOP = sp;return $$1|0;
 }
 $9 = $info;
 
 dest=$9+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
 $gep_int3 = $info;
 $10 = $gep_int3;
 HEAP32[$10>>2] = $7;
 $gep_int4 = $info;
 $gep = (($gep_int4) + 8)|0;
 $11 = $gep;
 HEAP32[$11>>2] = $this;
 $gep_int5 = $info;
 $gep6 = (($gep_int5) + 12)|0;
 $12 = $gep6;
 HEAP32[$12>>2] = -1;
 $gep_int7 = $info;
 $gep8 = (($gep_int7) + 48)|0;
 $13 = $gep8;
 HEAP32[$13>>2] = 1;
 $14 = $6;
 $15 = HEAP32[$6>>2]|0;
 $gep_int9 = $15;
 $gep10 = (($gep_int9) + 28)|0;
 $16 = $gep10;
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$17 & 15]($7,$info,$18,1);
 $gep_int11 = $info;
 $gep12 = (($gep_int11) + 24)|0;
 $19 = $gep12;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 
 if (!($21)) {
  $$1 = 0;
  
  STACKTOP = sp;return $$1|0;
 }
 $gep_int13 = $info;
 $gep14 = (($gep_int13) + 16)|0;
 $22 = $gep14;
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$adjustedPtr>>2] = $23;
 
 $$1 = 1;
 
 STACKTOP = sp;return $$1|0;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep12 = 0;
 var $gep14 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $info;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($this|0);
 
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $gep_int1 = $info;
 $gep2 = (($gep_int1) + 16)|0;
 $4 = $gep2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 
 if ($6) {
  HEAP32[$4>>2] = $adjustedPtr;
  $gep_int3 = $info;
  $gep4 = (($gep_int3) + 24)|0;
  $7 = $gep4;
  HEAP32[$7>>2] = $path_below;
  $gep_int5 = $info;
  $gep6 = (($gep_int5) + 36)|0;
  $8 = $gep6;
  HEAP32[$8>>2] = 1;
  
  STACKTOP = sp;return;
 }
 $9 = ($5|0)==($adjustedPtr|0);
 
 if (!($9)) {
  $gep_int9 = $info;
  $gep10 = (($gep_int9) + 36)|0;
  $13 = $gep10;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $gep_int11 = $info;
  $gep12 = (($gep_int11) + 24)|0;
  $16 = $gep12;
  HEAP32[$16>>2] = 2;
  $gep_int13 = $info;
  $gep14 = (($gep_int13) + 54)|0;
  $17 = $gep14;
  HEAP8[$17] = 1;
  
  STACKTOP = sp;return;
 }
 $gep_int7 = $info;
 $gep8 = (($gep_int7) + 24)|0;
 $10 = $gep8;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(2);
 
 if (!($12)) {
  STACKTOP = sp;return;
 }
 HEAP32[$10>>2] = $path_below;
 
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0;
 var $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $gep_int1 = $info;
 $gep = (($gep_int1) + 8)|0;
 $2 = $gep;
 $3 = HEAP32[$2>>2]|0;
 $gep_int2 = $3;
 $4 = $gep_int2;
 $5 = ($1|0)==($4|0);
 
 if (!($5)) {
  $gep_int17 = $this;
  $gep18 = (($gep_int17) + 8)|0;
  $20 = $gep18;
  $21 = HEAP32[$20>>2]|0;
  $22 = $21;
  $23 = HEAP32[$21>>2]|0;
  $gep_int19 = $23;
  $gep20 = (($gep_int19) + 28)|0;
  $24 = $gep20;
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_viiii[$25 & 15]($21,$info,$adjustedPtr,$path_below);
  
  STACKTOP = sp;return;
 }
 $gep_int3 = $info;
 $gep4 = (($gep_int3) + 16)|0;
 $6 = $gep4;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 
 if ($8) {
  HEAP32[$6>>2] = $adjustedPtr;
  $gep_int5 = $info;
  $gep6 = (($gep_int5) + 24)|0;
  $9 = $gep6;
  HEAP32[$9>>2] = $path_below;
  $gep_int7 = $info;
  $gep8 = (($gep_int7) + 36)|0;
  $10 = $gep8;
  HEAP32[$10>>2] = 1;
  
  STACKTOP = sp;return;
 }
 $11 = ($7|0)==($adjustedPtr|0);
 
 if (!($11)) {
  $gep_int11 = $info;
  $gep12 = (($gep_int11) + 36)|0;
  $15 = $gep12;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$15>>2] = $17;
  $gep_int13 = $info;
  $gep14 = (($gep_int13) + 24)|0;
  $18 = $gep14;
  HEAP32[$18>>2] = 2;
  $gep_int15 = $info;
  $gep16 = (($gep_int15) + 54)|0;
  $19 = $gep16;
  HEAP8[$19] = 1;
  
  STACKTOP = sp;return;
 }
 $gep_int9 = $info;
 $gep10 = (($gep_int9) + 24)|0;
 $12 = $gep10;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(2);
 
 if (!($14)) {
  STACKTOP = sp;return;
 }
 HEAP32[$12>>2] = $path_below;
 
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0;
 var $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep4 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep6 = 0, $gep8 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0;
 var $gep_int2 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0, $gep_int28 = 0, $gep_int3 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0;
 var $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $gep_int1 = $info;
 $gep = (($gep_int1) + 8)|0;
 $2 = $gep;
 $3 = HEAP32[$2>>2]|0;
 $gep_int2 = $3;
 $4 = $gep_int2;
 $5 = ($1|0)==($4|0);
 
 if ($5) {
  $gep_int3 = $info;
  $gep4 = (($gep_int3) + 16)|0;
  $6 = $gep4;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  
  if ($8) {
   HEAP32[$6>>2] = $adjustedPtr;
   $gep_int5 = $info;
   $gep6 = (($gep_int5) + 24)|0;
   $9 = $gep6;
   HEAP32[$9>>2] = $path_below;
   $gep_int7 = $info;
   $gep8 = (($gep_int7) + 36)|0;
   $10 = $gep8;
   HEAP32[$10>>2] = 1;
   
   STACKTOP = sp;return;
  }
  $11 = ($7|0)==($adjustedPtr|0);
  
  if (!($11)) {
   $gep_int11 = $info;
   $gep12 = (($gep_int11) + 36)|0;
   $15 = $gep12;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 1)|0;
   HEAP32[$15>>2] = $17;
   $gep_int13 = $info;
   $gep14 = (($gep_int13) + 24)|0;
   $18 = $gep14;
   HEAP32[$18>>2] = 2;
   $gep_int15 = $info;
   $gep16 = (($gep_int15) + 54)|0;
   $19 = $gep16;
   HEAP8[$19] = 1;
   
   STACKTOP = sp;return;
  }
  $gep_int9 = $info;
  $gep10 = (($gep_int9) + 24)|0;
  $12 = $gep10;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(2);
  
  if (!($14)) {
   STACKTOP = sp;return;
  }
  HEAP32[$12>>2] = $path_below;
  
  STACKTOP = sp;return;
 }
 $gep_int17 = $this;
 $gep18 = (($gep_int17) + 12)|0;
 $20 = $gep18;
 $21 = HEAP32[$20>>2]|0;
 $gep_int19 = $this;
 $gep20 = (($gep_int19) + 16)|0;
 $gep_array = $21<<3;
 $gep21 = (($gep20) + ($gep_array))|0;
 $22 = $gep21;
 $gep_int22 = $this;
 $gep23 = (($gep_int22) + 20)|0;
 $23 = $gep23;
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >> 8;
 $26 = $24 & 1;
 $27 = ($26|0)==(0);
 
 if ($27) {
  $offset_to_base$0$i1 = $25;
 } else {
  $28 = $adjustedPtr;
  $29 = HEAP32[$adjustedPtr>>2]|0;
  $gep_int24 = $29;
  $gep25 = (($gep_int24) + ($25))|0;
  $30 = $gep25;
  $31 = $30;
  $32 = HEAP32[$30>>2]|0;
  
  $offset_to_base$0$i1 = $32;
 }
 
 $gep_int26 = $this;
 $gep27 = (($gep_int26) + 16)|0;
 $33 = $gep27;
 $34 = HEAP32[$33>>2]|0;
 $35 = $34;
 $36 = HEAP32[$34>>2]|0;
 $gep_int28 = $36;
 $gep29 = (($gep_int28) + 28)|0;
 $37 = $gep29;
 $38 = HEAP32[$37>>2]|0;
 $gep_int30 = $adjustedPtr;
 $gep31 = (($gep_int30) + ($offset_to_base$0$i1))|0;
 $39 = $gep31;
 $40 = $24 & 2;
 $41 = ($40|0)!=(0);
 $42 = $41 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$38 & 15]($34,$info,$39,$42);
 $43 = ($21|0)>(1);
 
 if (!($43)) {
  STACKTOP = sp;return;
 }
 $gep_int32 = $this;
 $gep33 = (($gep_int32) + 24)|0;
 $44 = $gep33;
 $gep_int34 = $info;
 $gep35 = (($gep_int34) + 54)|0;
 $45 = $gep35;
 $46 = $adjustedPtr;
 
 $p$0 = $44;
 while(1) {
  
  $gep_int36 = $p$0;
  $gep37 = (($gep_int36) + 4)|0;
  $47 = $gep37;
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 >> 8;
  $50 = $48 & 1;
  $51 = ($50|0)==(0);
  
  if ($51) {
   $offset_to_base$0$i = $49;
  } else {
   $52 = HEAP32[$adjustedPtr>>2]|0;
   $gep_int38 = $52;
   $gep39 = (($gep_int38) + ($49))|0;
   $53 = $gep39;
   $54 = $53;
   $55 = HEAP32[$53>>2]|0;
   
   $offset_to_base$0$i = $55;
  }
  
  $gep_int40 = $p$0;
  $56 = $gep_int40;
  $57 = HEAP32[$56>>2]|0;
  $58 = $57;
  $59 = HEAP32[$57>>2]|0;
  $gep_int41 = $59;
  $gep42 = (($gep_int41) + 28)|0;
  $60 = $gep42;
  $61 = HEAP32[$60>>2]|0;
  $gep_int43 = $adjustedPtr;
  $gep44 = (($gep_int43) + ($offset_to_base$0$i))|0;
  $62 = $gep44;
  $63 = $48 & 2;
  $64 = ($63|0)!=(0);
  $65 = $64 ? $path_below : 2;
  FUNCTION_TABLE_viiii[$61 & 15]($57,$info,$62,$65);
  $66 = HEAP8[$45]|0;
  $67 = ($66<<24>>24)==(0);
  
  if (!($67)) {
   label = 16;
   break;
  }
  $gep_int45 = $p$0;
  $gep46 = (($gep_int45) + 8)|0;
  $68 = $gep46;
  $69 = ($68>>>0)<($22>>>0);
  
  if ($69) {
   $p$0 = $68;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0;
 var $gep17 = 0, $gep19 = 0, $gep2 = 0, $gep21 = 0, $gep23 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep4 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0;
 var $gep_int22 = 0, $gep_int24 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int8 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $info = sp;
 $1 = $static_ptr;
 $2 = HEAP32[$static_ptr>>2]|0;
 $gep_int = $2;
 $gep = (($gep_int) + -8)|0;
 $3 = $gep;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $gep_int1 = $static_ptr;
 $gep2 = (($gep_int1) + ($5))|0;
 $6 = $gep2;
 $gep_int3 = $2;
 $gep4 = (($gep_int3) + -4)|0;
 $7 = $gep4;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = $info;
 
 $gep_int5 = $info;
 $11 = $gep_int5;
 HEAP32[$11>>2] = $dst_type;
 $gep_int6 = $info;
 $gep7 = (($gep_int6) + 4)|0;
 $12 = $gep7;
 HEAP32[$12>>2] = $static_ptr;
 $gep_int8 = $info;
 $gep9 = (($gep_int8) + 8)|0;
 $13 = $gep9;
 HEAP32[$13>>2] = $static_type;
 $gep_int10 = $info;
 $gep11 = (($gep_int10) + 12)|0;
 $14 = $gep11;
 HEAP32[$14>>2] = $src2dst_offset;
 $gep_int12 = $info;
 $gep13 = (($gep_int12) + 16)|0;
 $15 = $gep13;
 $gep_int14 = $info;
 $gep15 = (($gep_int14) + 20)|0;
 $16 = $gep15;
 $gep_int16 = $info;
 $gep17 = (($gep_int16) + 24)|0;
 $17 = $gep17;
 $gep_int18 = $info;
 $gep19 = (($gep_int18) + 28)|0;
 $18 = $gep19;
 $gep_int20 = $info;
 $gep21 = (($gep_int20) + 32)|0;
 $19 = $gep21;
 $gep_int22 = $info;
 $gep23 = (($gep_int22) + 40)|0;
 $20 = $gep23;
 $21 = $8;
 $gep_int24 = $dst_type;
 $22 = $gep_int24;
 $23 = ($21|0)==($22|0);
 $24 = $15;
 dest=$24+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;HEAP16[$24+36>>1]=0|0;HEAP8[$24+38|0]=0|0;
 
 if ($23) {
  $gep_int25 = $info;
  $gep26 = (($gep_int25) + 48)|0;
  $25 = $gep26;
  HEAP32[$25>>2] = 1;
  $26 = $8;
  $27 = HEAP32[$8>>2]|0;
  $gep_int27 = $27;
  $gep28 = (($gep_int27) + 20)|0;
  $28 = $gep28;
  $29 = HEAP32[$28>>2]|0;
  FUNCTION_TABLE_viiiiii[$29 & 31]($9,$info,$6,$6,1,0);
  $30 = HEAP32[$17>>2]|0;
  $31 = ($30|0)==(1);
  $$ = $31 ? $6 : 0;
  
  $dst_ptr$0 = $$;
  
  
  STACKTOP = sp;return $dst_ptr$0|0;
 }
 $gep_int29 = $info;
 $gep30 = (($gep_int29) + 36)|0;
 $32 = $gep30;
 $33 = $8;
 $34 = HEAP32[$8>>2]|0;
 $gep_int31 = $34;
 $gep32 = (($gep_int31) + 24)|0;
 $35 = $gep32;
 $36 = HEAP32[$35>>2]|0;
 FUNCTION_TABLE_viiiii[$36 & 3]($9,$info,$6,1,0);
 $37 = HEAP32[$32>>2]|0;
 
 if ((($37|0) == 1)) {
  $45 = HEAP32[$17>>2]|0;
  $46 = ($45|0)==(1);
  
  do {
   if (!($46)) {
    $47 = HEAP32[$20>>2]|0;
    $48 = ($47|0)==(0);
    
    if (!($48)) {
     $dst_ptr$0 = 0;
     
     
     STACKTOP = sp;return $dst_ptr$0|0;
    }
    $49 = HEAP32[$18>>2]|0;
    $50 = ($49|0)==(1);
    
    if (!($50)) {
     $dst_ptr$0 = 0;
     
     
     STACKTOP = sp;return $dst_ptr$0|0;
    }
    $51 = HEAP32[$19>>2]|0;
    $52 = ($51|0)==(1);
    
    if ($52) {
     break;
    } else {
     $dst_ptr$0 = 0;
    }
    
    
    STACKTOP = sp;return $dst_ptr$0|0;
   }
  } while(0);
  $53 = HEAP32[$15>>2]|0;
  
  $dst_ptr$0 = $53;
  
  
  STACKTOP = sp;return $dst_ptr$0|0;
 } else if ((($37|0) == 0)) {
  $38 = HEAP32[$20>>2]|0;
  $39 = ($38|0)==(1);
  
  if (!($39)) {
   $dst_ptr$0 = 0;
   
   
   STACKTOP = sp;return $dst_ptr$0|0;
  }
  $40 = HEAP32[$18>>2]|0;
  $41 = ($40|0)==(1);
  
  if (!($41)) {
   $dst_ptr$0 = 0;
   
   
   STACKTOP = sp;return $dst_ptr$0|0;
  }
  $42 = HEAP32[$19>>2]|0;
  $43 = ($42|0)==(1);
  $44 = HEAP32[$16>>2]|0;
  $$1 = $43 ? $44 : 0;
  
  $dst_ptr$0 = $$1;
  
  
  STACKTOP = sp;return $dst_ptr$0|0;
 } else {
  $dst_ptr$0 = 0;
  
  
  STACKTOP = sp;return $dst_ptr$0|0;
 }
 return 0|0;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;
 var $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $gep = 0, $gep10 = 0, $gep102 = 0, $gep104 = 0, $gep106 = 0, $gep108 = 0, $gep110 = 0, $gep113 = 0, $gep115 = 0, $gep117 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep23 = 0, $gep25 = 0;
 var $gep27 = 0, $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep4 = 0, $gep42 = 0, $gep44 = 0, $gep46 = 0, $gep48 = 0, $gep50 = 0, $gep52 = 0, $gep54 = 0, $gep56 = 0, $gep58 = 0, $gep6 = 0, $gep60 = 0, $gep62 = 0;
 var $gep64 = 0, $gep66 = 0, $gep68 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep76 = 0, $gep78 = 0, $gep80 = 0, $gep82 = 0, $gep85 = 0, $gep87 = 0, $gep89 = 0, $gep91 = 0, $gep93 = 0, $gep95 = 0, $gep97 = 0, $gep99 = 0, $gep_array = 0, $gep_array59 = 0;
 var $gep_int = 0, $gep_int1 = 0, $gep_int100 = 0, $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int11 = 0, $gep_int111 = 0, $gep_int112 = 0, $gep_int114 = 0, $gep_int116 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int24 = 0;
 var $gep_int26 = 0, $gep_int28 = 0, $gep_int3 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int41 = 0, $gep_int43 = 0, $gep_int45 = 0, $gep_int47 = 0, $gep_int49 = 0, $gep_int5 = 0, $gep_int51 = 0, $gep_int53 = 0, $gep_int55 = 0, $gep_int57 = 0, $gep_int61 = 0;
 var $gep_int63 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int7 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int77 = 0, $gep_int79 = 0, $gep_int8 = 0, $gep_int81 = 0, $gep_int83 = 0, $gep_int84 = 0, $gep_int86 = 0, $gep_int88 = 0, $gep_int9 = 0, $gep_int90 = 0, $gep_int92 = 0, $gep_int94 = 0;
 var $gep_int96 = 0, $gep_int98 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $gep_int1 = $info;
 $gep = (($gep_int1) + 8)|0;
 $2 = $gep;
 $3 = HEAP32[$2>>2]|0;
 $gep_int2 = $3;
 $4 = $gep_int2;
 $5 = ($1|0)==($4|0);
 
 if ($5) {
  $gep_int3 = $info;
  $gep4 = (($gep_int3) + 4)|0;
  $6 = $gep4;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==($current_ptr|0);
  
  if (!($8)) {
   STACKTOP = sp;return;
  }
  $gep_int5 = $info;
  $gep6 = (($gep_int5) + 28)|0;
  $9 = $gep6;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(1);
  
  if ($11) {
   STACKTOP = sp;return;
  }
  HEAP32[$9>>2] = $path_below;
  
  STACKTOP = sp;return;
 }
 $gep_int7 = $info;
 $12 = $gep_int7;
 $13 = HEAP32[$12>>2]|0;
 $gep_int8 = $13;
 $14 = $gep_int8;
 $15 = ($1|0)==($14|0);
 
 if ($15) {
  $gep_int9 = $info;
  $gep10 = (($gep_int9) + 16)|0;
  $16 = $gep10;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==($current_ptr|0);
  
  do {
   if (!($18)) {
    $gep_int11 = $info;
    $gep12 = (($gep_int11) + 20)|0;
    $19 = $gep12;
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($current_ptr|0);
    
    if ($21) {
     break;
    }
    $gep_int15 = $info;
    $gep16 = (($gep_int15) + 32)|0;
    $24 = $gep16;
    HEAP32[$24>>2] = $path_below;
    $gep_int17 = $info;
    $gep18 = (($gep_int17) + 44)|0;
    $25 = $gep18;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(4);
    
    if ($27) {
     STACKTOP = sp;return;
    }
    $gep_int19 = $this;
    $gep20 = (($gep_int19) + 12)|0;
    $28 = $gep20;
    $29 = HEAP32[$28>>2]|0;
    $gep_int21 = $this;
    $gep22 = (($gep_int21) + 16)|0;
    $gep_array = $29<<3;
    $gep23 = (($gep22) + ($gep_array))|0;
    $30 = $gep23;
    $31 = ($29|0)>(0);
    
    L19: do {
     if ($31) {
      $gep_int24 = $this;
      $gep25 = (($gep_int24) + 16)|0;
      $32 = $gep25;
      $gep_int26 = $info;
      $gep27 = (($gep_int26) + 52)|0;
      $33 = $gep27;
      $gep_int28 = $info;
      $gep29 = (($gep_int28) + 53)|0;
      $34 = $gep29;
      $gep_int30 = $info;
      $gep31 = (($gep_int30) + 54)|0;
      $35 = $gep31;
      $gep_int32 = $this;
      $gep33 = (($gep_int32) + 8)|0;
      $36 = $gep33;
      $gep_int34 = $info;
      $gep35 = (($gep_int34) + 24)|0;
      $37 = $gep35;
      $38 = $current_ptr;
      
      $does_dst_type_point_to_our_static_type$0$off019 = 0;$is_dst_type_derived_from_static_type$0$off021 = 0;$p$020 = $32;
      L21: while(1) {
       
       
       
       HEAP8[$33] = 0;
       HEAP8[$34] = 0;
       $gep_int36 = $p$020;
       $gep37 = (($gep_int36) + 4)|0;
       $39 = $gep37;
       $40 = HEAP32[$39>>2]|0;
       $41 = $40 >> 8;
       $42 = $40 & 1;
       $43 = ($42|0)==(0);
       
       if ($43) {
        $offset_to_base$0$i13 = $41;
       } else {
        $44 = HEAP32[$current_ptr>>2]|0;
        $gep_int38 = $44;
        $gep39 = (($gep_int38) + ($41))|0;
        $45 = $gep39;
        $46 = $45;
        $47 = HEAP32[$45>>2]|0;
        
        $offset_to_base$0$i13 = $47;
       }
       
       $gep_int40 = $p$020;
       $48 = $gep_int40;
       $49 = HEAP32[$48>>2]|0;
       $50 = $49;
       $51 = HEAP32[$49>>2]|0;
       $gep_int41 = $51;
       $gep42 = (($gep_int41) + 20)|0;
       $52 = $gep42;
       $53 = HEAP32[$52>>2]|0;
       $gep_int43 = $current_ptr;
       $gep44 = (($gep_int43) + ($offset_to_base$0$i13))|0;
       $54 = $gep44;
       $55 = $40 >>> 1;
       $56 = $55 & 1;
       $57 = (2 - ($56))|0;
       FUNCTION_TABLE_viiiiii[$53 & 31]($49,$info,$current_ptr,$54,$57,$use_strcmp);
       $58 = HEAP8[$35]|0;
       $59 = ($58<<24>>24)==(0);
       
       if (!($59)) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021;
        break;
       }
       $60 = HEAP8[$34]|0;
       $61 = ($60<<24>>24)==(0);
       
       do {
        if ($61) {
         $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021;
        } else {
         $62 = HEAP8[$33]|0;
         $63 = ($62<<24>>24)==(0);
         
         if ($63) {
          $69 = HEAP32[$36>>2]|0;
          $70 = $69 & 1;
          $71 = ($70|0)==(0);
          
          if ($71) {
           $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = 1;
           break L21;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = 1;
           break;
          }
         }
         $64 = HEAP32[$37>>2]|0;
         $65 = ($64|0)==(1);
         
         if ($65) {
          label = 27;
          break L19;
         }
         $66 = HEAP32[$36>>2]|0;
         $67 = $66 & 2;
         $68 = ($67|0)==(0);
         
         if ($68) {
          label = 27;
          break L19;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
         }
        }
       } while(0);
       
       
       $gep_int45 = $p$020;
       $gep46 = (($gep_int45) + 8)|0;
       $72 = $gep46;
       $73 = ($72>>>0)<($30>>>0);
       
       if ($73) {
        $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0;$p$020 = $72;
       } else {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
        break;
       }
      }
      
      
      
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0;
       label = 26;
      } else {
       $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0;
       label = 23;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off030 = 0;
      label = 23;
     }
    } while(0);
    do {
     if ((label|0) == 23) {
      
      HEAP32[$19>>2] = $current_ptr;
      $gep_int47 = $info;
      $gep48 = (($gep_int47) + 40)|0;
      $74 = $gep48;
      $75 = HEAP32[$74>>2]|0;
      $76 = (($75) + 1)|0;
      HEAP32[$74>>2] = $76;
      $gep_int49 = $info;
      $gep50 = (($gep_int49) + 36)|0;
      $77 = $gep50;
      $78 = HEAP32[$77>>2]|0;
      $79 = ($78|0)==(1);
      
      if (!($79)) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
       break;
      }
      $gep_int51 = $info;
      $gep52 = (($gep_int51) + 24)|0;
      $80 = $gep52;
      $81 = HEAP32[$80>>2]|0;
      $82 = ($81|0)==(2);
      
      if (!($82)) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
       break;
      }
      $gep_int53 = $info;
      $gep54 = (($gep_int53) + 54)|0;
      $83 = $gep54;
      HEAP8[$83] = 1;
      
      if ($is_dst_type_derived_from_static_type$2$off030) {
       label = 27;
      } else {
       label = 28;
      }
     }
    } while(0);
    if ((label|0) == 26) {
     
     
     if ($is_dst_type_derived_from_static_type$2$off031) {
      label = 27;
     } else {
      label = 28;
     }
    }
    if ((label|0) == 27) {
     HEAP32[$25>>2] = 3;
     
     STACKTOP = sp;return;
    }
    else if ((label|0) == 28) {
     HEAP32[$25>>2] = 4;
     
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $22 = ($path_below|0)==(1);
  
  if (!($22)) {
   STACKTOP = sp;return;
  }
  $gep_int13 = $info;
  $gep14 = (($gep_int13) + 32)|0;
  $23 = $gep14;
  HEAP32[$23>>2] = 1;
  
  STACKTOP = sp;return;
 }
 $gep_int55 = $this;
 $gep56 = (($gep_int55) + 12)|0;
 $84 = $gep56;
 $85 = HEAP32[$84>>2]|0;
 $gep_int57 = $this;
 $gep58 = (($gep_int57) + 16)|0;
 $gep_array59 = $85<<3;
 $gep60 = (($gep58) + ($gep_array59))|0;
 $86 = $gep60;
 $gep_int61 = $this;
 $gep62 = (($gep_int61) + 20)|0;
 $87 = $gep62;
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 >> 8;
 $90 = $88 & 1;
 $91 = ($90|0)==(0);
 
 if ($91) {
  $offset_to_base$0$i14 = $89;
 } else {
  $92 = $current_ptr;
  $93 = HEAP32[$current_ptr>>2]|0;
  $gep_int63 = $93;
  $gep64 = (($gep_int63) + ($89))|0;
  $94 = $gep64;
  $95 = $94;
  $96 = HEAP32[$94>>2]|0;
  
  $offset_to_base$0$i14 = $96;
 }
 
 $gep_int65 = $this;
 $gep66 = (($gep_int65) + 16)|0;
 $97 = $gep66;
 $98 = HEAP32[$97>>2]|0;
 $99 = $98;
 $100 = HEAP32[$98>>2]|0;
 $gep_int67 = $100;
 $gep68 = (($gep_int67) + 24)|0;
 $101 = $gep68;
 $102 = HEAP32[$101>>2]|0;
 $gep_int69 = $current_ptr;
 $gep70 = (($gep_int69) + ($offset_to_base$0$i14))|0;
 $103 = $gep70;
 $104 = $88 & 2;
 $105 = ($104|0)!=(0);
 $106 = $105 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$102 & 3]($98,$info,$103,$106,$use_strcmp);
 $gep_int71 = $this;
 $gep72 = (($gep_int71) + 24)|0;
 $107 = $gep72;
 $108 = ($85|0)>(1);
 
 if (!($108)) {
  STACKTOP = sp;return;
 }
 $gep_int73 = $this;
 $gep74 = (($gep_int73) + 8)|0;
 $109 = $gep74;
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 
 do {
  if ($112) {
   $gep_int75 = $info;
   $gep76 = (($gep_int75) + 36)|0;
   $113 = $gep76;
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114|0)==(1);
   
   if ($115) {
    break;
   }
   $141 = $110 & 1;
   $142 = ($141|0)==(0);
   
   if ($142) {
    $gep_int94 = $info;
    $gep95 = (($gep_int94) + 54)|0;
    $146 = $gep95;
    $147 = $current_ptr;
    
    $p2$2 = $107;
    while(1) {
     
     $175 = HEAP8[$146]|0;
     $176 = ($175<<24>>24)==(0);
     
     if (!($176)) {
      label = 53;
      break;
     }
     $177 = HEAP32[$113>>2]|0;
     $178 = ($177|0)==(1);
     
     if ($178) {
      label = 53;
      break;
     }
     $gep_int107 = $p2$2;
     $gep108 = (($gep_int107) + 4)|0;
     $179 = $gep108;
     $180 = HEAP32[$179>>2]|0;
     $181 = $180 >> 8;
     $182 = $180 & 1;
     $183 = ($182|0)==(0);
     
     if ($183) {
      $offset_to_base$0$i = $181;
     } else {
      $184 = HEAP32[$current_ptr>>2]|0;
      $gep_int109 = $184;
      $gep110 = (($gep_int109) + ($181))|0;
      $185 = $gep110;
      $186 = $185;
      $187 = HEAP32[$185>>2]|0;
      
      $offset_to_base$0$i = $187;
     }
     
     $gep_int111 = $p2$2;
     $188 = $gep_int111;
     $189 = HEAP32[$188>>2]|0;
     $190 = $189;
     $191 = HEAP32[$189>>2]|0;
     $gep_int112 = $191;
     $gep113 = (($gep_int112) + 24)|0;
     $192 = $gep113;
     $193 = HEAP32[$192>>2]|0;
     $gep_int114 = $current_ptr;
     $gep115 = (($gep_int114) + ($offset_to_base$0$i))|0;
     $194 = $gep115;
     $195 = $180 & 2;
     $196 = ($195|0)!=(0);
     $197 = $196 ? $path_below : 2;
     FUNCTION_TABLE_viiiii[$193 & 3]($189,$info,$194,$197,$use_strcmp);
     $gep_int116 = $p2$2;
     $gep117 = (($gep_int116) + 8)|0;
     $198 = $gep117;
     $199 = ($198>>>0)<($86>>>0);
     
     if ($199) {
      $p2$2 = $198;
     } else {
      label = 53;
      break;
     }
    }
    if ((label|0) == 53) {
     STACKTOP = sp;return;
    }
   }
   $gep_int90 = $info;
   $gep91 = (($gep_int90) + 24)|0;
   $143 = $gep91;
   $gep_int92 = $info;
   $gep93 = (($gep_int92) + 54)|0;
   $144 = $gep93;
   $145 = $current_ptr;
   
   $p2$1 = $107;
   while(1) {
    
    $148 = HEAP8[$144]|0;
    $149 = ($148<<24>>24)==(0);
    
    if (!($149)) {
     label = 53;
     break;
    }
    $150 = HEAP32[$113>>2]|0;
    $151 = ($150|0)==(1);
    
    if ($151) {
     $152 = HEAP32[$143>>2]|0;
     $153 = ($152|0)==(1);
     
     if ($153) {
      label = 53;
      break;
     }
    }
    $gep_int96 = $p2$1;
    $gep97 = (($gep_int96) + 4)|0;
    $154 = $gep97;
    $155 = HEAP32[$154>>2]|0;
    $156 = $155 >> 8;
    $157 = $155 & 1;
    $158 = ($157|0)==(0);
    
    if ($158) {
     $offset_to_base$0$i9 = $156;
    } else {
     $159 = HEAP32[$current_ptr>>2]|0;
     $gep_int98 = $159;
     $gep99 = (($gep_int98) + ($156))|0;
     $160 = $gep99;
     $161 = $160;
     $162 = HEAP32[$160>>2]|0;
     
     $offset_to_base$0$i9 = $162;
    }
    
    $gep_int100 = $p2$1;
    $163 = $gep_int100;
    $164 = HEAP32[$163>>2]|0;
    $165 = $164;
    $166 = HEAP32[$164>>2]|0;
    $gep_int101 = $166;
    $gep102 = (($gep_int101) + 24)|0;
    $167 = $gep102;
    $168 = HEAP32[$167>>2]|0;
    $gep_int103 = $current_ptr;
    $gep104 = (($gep_int103) + ($offset_to_base$0$i9))|0;
    $169 = $gep104;
    $170 = $155 & 2;
    $171 = ($170|0)!=(0);
    $172 = $171 ? $path_below : 2;
    FUNCTION_TABLE_viiiii[$168 & 3]($164,$info,$169,$172,$use_strcmp);
    $gep_int105 = $p2$1;
    $gep106 = (($gep_int105) + 8)|0;
    $173 = $gep106;
    $174 = ($173>>>0)<($86>>>0);
    
    if ($174) {
     $p2$1 = $173;
    } else {
     label = 53;
     break;
    }
   }
   if ((label|0) == 53) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $gep_int77 = $info;
 $gep78 = (($gep_int77) + 54)|0;
 $116 = $gep78;
 $117 = $current_ptr;
 
 $p2$0 = $107;
 while(1) {
  
  $118 = HEAP8[$116]|0;
  $119 = ($118<<24>>24)==(0);
  
  if (!($119)) {
   label = 53;
   break;
  }
  $gep_int79 = $p2$0;
  $gep80 = (($gep_int79) + 4)|0;
  $120 = $gep80;
  $121 = HEAP32[$120>>2]|0;
  $122 = $121 >> 8;
  $123 = $121 & 1;
  $124 = ($123|0)==(0);
  
  if ($124) {
   $offset_to_base$0$i11 = $122;
  } else {
   $125 = HEAP32[$current_ptr>>2]|0;
   $gep_int81 = $125;
   $gep82 = (($gep_int81) + ($122))|0;
   $126 = $gep82;
   $127 = $126;
   $128 = HEAP32[$126>>2]|0;
   
   $offset_to_base$0$i11 = $128;
  }
  
  $gep_int83 = $p2$0;
  $129 = $gep_int83;
  $130 = HEAP32[$129>>2]|0;
  $131 = $130;
  $132 = HEAP32[$130>>2]|0;
  $gep_int84 = $132;
  $gep85 = (($gep_int84) + 24)|0;
  $133 = $gep85;
  $134 = HEAP32[$133>>2]|0;
  $gep_int86 = $current_ptr;
  $gep87 = (($gep_int86) + ($offset_to_base$0$i11))|0;
  $135 = $gep87;
  $136 = $121 & 2;
  $137 = ($136|0)!=(0);
  $138 = $137 ? $path_below : 2;
  FUNCTION_TABLE_viiiii[$134 & 3]($130,$info,$135,$138,$use_strcmp);
  $gep_int88 = $p2$0;
  $gep89 = (($gep_int88) + 8)|0;
  $139 = $gep89;
  $140 = ($139>>>0)<($86>>>0);
  
  if ($140) {
   $p2$0 = $139;
  } else {
   label = 53;
   break;
  }
 }
 if ((label|0) == 53) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0;
 var $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep38 = 0, $gep4 = 0, $gep6 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0;
 var $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int37 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int8 = 0, $gep_int9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $gep_int1 = $info;
 $gep = (($gep_int1) + 8)|0;
 $2 = $gep;
 $3 = HEAP32[$2>>2]|0;
 $gep_int2 = $3;
 $4 = $gep_int2;
 $5 = ($1|0)==($4|0);
 
 if ($5) {
  $gep_int3 = $info;
  $gep4 = (($gep_int3) + 4)|0;
  $6 = $gep4;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==($current_ptr|0);
  
  if (!($8)) {
   STACKTOP = sp;return;
  }
  $gep_int5 = $info;
  $gep6 = (($gep_int5) + 28)|0;
  $9 = $gep6;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(1);
  
  if ($11) {
   STACKTOP = sp;return;
  }
  HEAP32[$9>>2] = $path_below;
  
  STACKTOP = sp;return;
 }
 $gep_int7 = $info;
 $12 = $gep_int7;
 $13 = HEAP32[$12>>2]|0;
 $gep_int8 = $13;
 $14 = $gep_int8;
 $15 = ($1|0)==($14|0);
 
 if (!($15)) {
  $gep_int35 = $this;
  $gep36 = (($gep_int35) + 8)|0;
  $49 = $gep36;
  $50 = HEAP32[$49>>2]|0;
  $51 = $50;
  $52 = HEAP32[$50>>2]|0;
  $gep_int37 = $52;
  $gep38 = (($gep_int37) + 24)|0;
  $53 = $gep38;
  $54 = HEAP32[$53>>2]|0;
  FUNCTION_TABLE_viiiii[$54 & 3]($50,$info,$current_ptr,$path_below,$use_strcmp);
  
  STACKTOP = sp;return;
 }
 $gep_int9 = $info;
 $gep10 = (($gep_int9) + 16)|0;
 $16 = $gep10;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==($current_ptr|0);
 
 do {
  if (!($18)) {
   $gep_int11 = $info;
   $gep12 = (($gep_int11) + 20)|0;
   $19 = $gep12;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==($current_ptr|0);
   
   if ($21) {
    break;
   }
   $gep_int15 = $info;
   $gep16 = (($gep_int15) + 32)|0;
   $24 = $gep16;
   HEAP32[$24>>2] = $path_below;
   $gep_int17 = $info;
   $gep18 = (($gep_int17) + 44)|0;
   $25 = $gep18;
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(4);
   
   if ($27) {
    STACKTOP = sp;return;
   }
   $gep_int19 = $info;
   $gep20 = (($gep_int19) + 52)|0;
   $28 = $gep20;
   HEAP8[$28] = 0;
   $gep_int21 = $info;
   $gep22 = (($gep_int21) + 53)|0;
   $29 = $gep22;
   HEAP8[$29] = 0;
   $gep_int23 = $this;
   $gep24 = (($gep_int23) + 8)|0;
   $30 = $gep24;
   $31 = HEAP32[$30>>2]|0;
   $32 = $31;
   $33 = HEAP32[$31>>2]|0;
   $gep_int25 = $33;
   $gep26 = (($gep_int25) + 20)|0;
   $34 = $gep26;
   $35 = HEAP32[$34>>2]|0;
   FUNCTION_TABLE_viiiiii[$35 & 31]($31,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $36 = HEAP8[$29]|0;
   $37 = ($36<<24>>24)==(0);
   
   if ($37) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $38 = HEAP8[$28]|0;
    $not$ = ($38<<24>>24)==(0);
    
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   L23: do {
    if ((label|0) == 13) {
     
     HEAP32[$19>>2] = $current_ptr;
     $gep_int27 = $info;
     $gep28 = (($gep_int27) + 40)|0;
     $39 = $gep28;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($40) + 1)|0;
     HEAP32[$39>>2] = $41;
     $gep_int29 = $info;
     $gep30 = (($gep_int29) + 36)|0;
     $42 = $gep30;
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(1);
     
     do {
      if ($44) {
       $gep_int31 = $info;
       $gep32 = (($gep_int31) + 24)|0;
       $45 = $gep32;
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(2);
       
       if (!($47)) {
        label = 16;
        break;
       }
       $gep_int33 = $info;
       $gep34 = (($gep_int33) + 54)|0;
       $48 = $gep34;
       HEAP8[$48] = 1;
       
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break L23;
       }
      } else {
       label = 16;
      }
     } while(0);
     if ((label|0) == 16) {
      
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$25>>2] = 4;
     
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$25>>2] = 3;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $22 = ($path_below|0)==(1);
 
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $gep_int13 = $info;
 $gep14 = (($gep_int13) + 32)|0;
 $23 = $gep14;
 HEAP32[$23>>2] = 1;
 
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep11 = 0, $gep13 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep2 = 0, $gep21 = 0;
 var $gep23 = 0, $gep4 = 0, $gep7 = 0, $gep9 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int10 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int6 = 0, $gep_int8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $info;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($this|0);
 
 if ($3) {
  $gep_int1 = $info;
  $gep2 = (($gep_int1) + 4)|0;
  $4 = $gep2;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==($current_ptr|0);
  
  if (!($6)) {
   STACKTOP = sp;return;
  }
  $gep_int3 = $info;
  $gep4 = (($gep_int3) + 28)|0;
  $7 = $gep4;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  
  if ($9) {
   STACKTOP = sp;return;
  }
  HEAP32[$7>>2] = $path_below;
  
  STACKTOP = sp;return;
 }
 $gep_int5 = $info;
 $10 = $gep_int5;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==($this|0);
 
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $gep_int6 = $info;
 $gep7 = (($gep_int6) + 16)|0;
 $13 = $gep7;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==($current_ptr|0);
 
 do {
  if (!($15)) {
   $gep_int8 = $info;
   $gep9 = (($gep_int8) + 20)|0;
   $16 = $gep9;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($current_ptr|0);
   
   if ($18) {
    break;
   }
   $gep_int12 = $info;
   $gep13 = (($gep_int12) + 32)|0;
   $21 = $gep13;
   HEAP32[$21>>2] = $path_below;
   HEAP32[$16>>2] = $current_ptr;
   $gep_int14 = $info;
   $gep15 = (($gep_int14) + 40)|0;
   $22 = $gep15;
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   HEAP32[$22>>2] = $24;
   $gep_int16 = $info;
   $gep17 = (($gep_int16) + 36)|0;
   $25 = $gep17;
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(1);
   
   do {
    if ($27) {
     $gep_int18 = $info;
     $gep19 = (($gep_int18) + 24)|0;
     $28 = $gep19;
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(2);
     
     if (!($30)) {
      break;
     }
     $gep_int20 = $info;
     $gep21 = (($gep_int20) + 54)|0;
     $31 = $gep21;
     HEAP8[$31] = 1;
     
    }
   } while(0);
   $gep_int22 = $info;
   $gep23 = (($gep_int22) + 44)|0;
   $32 = $gep23;
   HEAP32[$32>>2] = 4;
   
   STACKTOP = sp;return;
  }
 } while(0);
 $19 = ($path_below|0)==(1);
 
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $gep_int10 = $info;
 $gep11 = (($gep_int10) + 32)|0;
 $20 = $gep11;
 HEAP32[$20>>2] = 1;
 
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep34 = 0, $gep36 = 0, $gep37 = 0, $gep39 = 0, $gep4 = 0;
 var $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep6 = 0, $gep62 = 0, $gep64 = 0, $gep66 = 0, $gep8 = 0, $gep_array = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0;
 var $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int33 = 0, $gep_int35 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int5 = 0;
 var $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0, $gep_int61 = 0, $gep_int63 = 0, $gep_int65 = 0, $gep_int7 = 0, $gep_int9 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $or$cond$i = 0, $or$cond1$i = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $gep_int1 = $info;
 $gep = (($gep_int1) + 8)|0;
 $2 = $gep;
 $3 = HEAP32[$2>>2]|0;
 $gep_int2 = $3;
 $4 = $gep_int2;
 $5 = ($1|0)==($4|0);
 
 if (!($5)) {
  $gep_int29 = $info;
  $gep30 = (($gep_int29) + 52)|0;
  $35 = $gep30;
  $36 = HEAP8[$35]|0;
  $gep_int31 = $info;
  $gep32 = (($gep_int31) + 53)|0;
  $37 = $gep32;
  $38 = HEAP8[$37]|0;
  $gep_int33 = $this;
  $gep34 = (($gep_int33) + 12)|0;
  $39 = $gep34;
  $40 = HEAP32[$39>>2]|0;
  $gep_int35 = $this;
  $gep36 = (($gep_int35) + 16)|0;
  $gep_array = $40<<3;
  $gep37 = (($gep36) + ($gep_array))|0;
  $41 = $gep37;
  HEAP8[$35] = 0;
  HEAP8[$37] = 0;
  $gep_int38 = $this;
  $gep39 = (($gep_int38) + 20)|0;
  $42 = $gep39;
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 >> 8;
  $45 = $43 & 1;
  $46 = ($45|0)==(0);
  
  if ($46) {
   $offset_to_base$0$i1 = $44;
  } else {
   $47 = $current_ptr;
   $48 = HEAP32[$current_ptr>>2]|0;
   $gep_int40 = $48;
   $gep41 = (($gep_int40) + ($44))|0;
   $49 = $gep41;
   $50 = $49;
   $51 = HEAP32[$49>>2]|0;
   
   $offset_to_base$0$i1 = $51;
  }
  
  $gep_int42 = $this;
  $gep43 = (($gep_int42) + 16)|0;
  $52 = $gep43;
  $53 = HEAP32[$52>>2]|0;
  $54 = $53;
  $55 = HEAP32[$53>>2]|0;
  $gep_int44 = $55;
  $gep45 = (($gep_int44) + 20)|0;
  $56 = $gep45;
  $57 = HEAP32[$56>>2]|0;
  $gep_int46 = $current_ptr;
  $gep47 = (($gep_int46) + ($offset_to_base$0$i1))|0;
  $58 = $gep47;
  $59 = $43 & 2;
  $60 = ($59|0)!=(0);
  $61 = $60 ? $path_below : 2;
  FUNCTION_TABLE_viiiiii[$57 & 31]($53,$info,$dst_ptr,$58,$61,$use_strcmp);
  $62 = ($40|0)>(1);
  
  L6: do {
   if ($62) {
    $gep_int48 = $this;
    $gep49 = (($gep_int48) + 24)|0;
    $63 = $gep49;
    $gep_int50 = $info;
    $gep51 = (($gep_int50) + 24)|0;
    $64 = $gep51;
    $gep_int52 = $this;
    $gep53 = (($gep_int52) + 8)|0;
    $65 = $gep53;
    $gep_int54 = $info;
    $gep55 = (($gep_int54) + 54)|0;
    $66 = $gep55;
    $67 = $current_ptr;
    
    $p$0 = $63;
    while(1) {
     
     $68 = HEAP8[$66]|0;
     $69 = ($68<<24>>24)==(0);
     
     if (!($69)) {
      break L6;
     }
     $70 = HEAP8[$35]|0;
     $71 = ($70<<24>>24)==(0);
     
     do {
      if ($71) {
       $77 = HEAP8[$37]|0;
       $78 = ($77<<24>>24)==(0);
       
       if ($78) {
        break;
       }
       $79 = HEAP32[$65>>2]|0;
       $80 = $79 & 1;
       $81 = ($80|0)==(0);
       
       if ($81) {
        break L6;
       }
      } else {
       $72 = HEAP32[$64>>2]|0;
       $73 = ($72|0)==(1);
       
       if ($73) {
        break L6;
       }
       $74 = HEAP32[$65>>2]|0;
       $75 = $74 & 2;
       $76 = ($75|0)==(0);
       
       if ($76) {
        break L6;
       }
      }
     } while(0);
     HEAP8[$35] = 0;
     HEAP8[$37] = 0;
     $gep_int56 = $p$0;
     $gep57 = (($gep_int56) + 4)|0;
     $82 = $gep57;
     $83 = HEAP32[$82>>2]|0;
     $84 = $83 >> 8;
     $85 = $83 & 1;
     $86 = ($85|0)==(0);
     
     if ($86) {
      $offset_to_base$0$i = $84;
     } else {
      $87 = HEAP32[$current_ptr>>2]|0;
      $gep_int58 = $87;
      $gep59 = (($gep_int58) + ($84))|0;
      $88 = $gep59;
      $89 = $88;
      $90 = HEAP32[$88>>2]|0;
      
      $offset_to_base$0$i = $90;
     }
     
     $gep_int60 = $p$0;
     $91 = $gep_int60;
     $92 = HEAP32[$91>>2]|0;
     $93 = $92;
     $94 = HEAP32[$92>>2]|0;
     $gep_int61 = $94;
     $gep62 = (($gep_int61) + 20)|0;
     $95 = $gep62;
     $96 = HEAP32[$95>>2]|0;
     $gep_int63 = $current_ptr;
     $gep64 = (($gep_int63) + ($offset_to_base$0$i))|0;
     $97 = $gep64;
     $98 = $83 & 2;
     $99 = ($98|0)!=(0);
     $100 = $99 ? $path_below : 2;
     FUNCTION_TABLE_viiiiii[$96 & 31]($92,$info,$dst_ptr,$97,$100,$use_strcmp);
     $gep_int65 = $p$0;
     $gep66 = (($gep_int65) + 8)|0;
     $101 = $gep66;
     $102 = ($101>>>0)<($41>>>0);
     
     if ($102) {
      $p$0 = $101;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$35] = $36;
  HEAP8[$37] = $38;
  
  STACKTOP = sp;return;
 }
 $gep_int3 = $info;
 $gep4 = (($gep_int3) + 53)|0;
 $6 = $gep4;
 HEAP8[$6] = 1;
 $gep_int5 = $info;
 $gep6 = (($gep_int5) + 4)|0;
 $7 = $gep6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($current_ptr|0);
 
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $gep_int7 = $info;
 $gep8 = (($gep_int7) + 52)|0;
 $10 = $gep8;
 HEAP8[$10] = 1;
 $gep_int9 = $info;
 $gep10 = (($gep_int9) + 16)|0;
 $11 = $gep10;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 
 if ($13) {
  HEAP32[$11>>2] = $dst_ptr;
  $gep_int11 = $info;
  $gep12 = (($gep_int11) + 24)|0;
  $14 = $gep12;
  HEAP32[$14>>2] = $path_below;
  $gep_int13 = $info;
  $gep14 = (($gep_int13) + 36)|0;
  $15 = $gep14;
  HEAP32[$15>>2] = 1;
  $gep_int15 = $info;
  $gep16 = (($gep_int15) + 48)|0;
  $16 = $gep16;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(1);
  $19 = ($path_below|0)==(1);
  $or$cond$i = $18 & $19;
  
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $gep_int17 = $info;
  $gep18 = (($gep_int17) + 54)|0;
  $20 = $gep18;
  HEAP8[$20] = 1;
  
  STACKTOP = sp;return;
 }
 $21 = ($12|0)==($dst_ptr|0);
 
 if (!($21)) {
  $gep_int25 = $info;
  $gep26 = (($gep_int25) + 36)|0;
  $31 = $gep26;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$31>>2] = $33;
  $gep_int27 = $info;
  $gep28 = (($gep_int27) + 54)|0;
  $34 = $gep28;
  HEAP8[$34] = 1;
  
  STACKTOP = sp;return;
 }
 $gep_int19 = $info;
 $gep20 = (($gep_int19) + 24)|0;
 $22 = $gep20;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(2);
 
 if ($24) {
  HEAP32[$22>>2] = $path_below;
  
  $25 = $path_below;
 } else {
  $25 = $23;
 }
 
 $gep_int21 = $info;
 $gep22 = (($gep_int21) + 48)|0;
 $26 = $gep22;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(1);
 $29 = ($25|0)==(1);
 $or$cond1$i = $28 & $29;
 
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $gep_int23 = $info;
 $gep24 = (($gep_int23) + 54)|0;
 $30 = $gep24;
 HEAP8[$30] = 1;
 
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep20 = 0, $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep28 = 0, $gep30 = 0, $gep32 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0;
 var $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int2 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int27 = 0, $gep_int29 = 0, $gep_int3 = 0, $gep_int31 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 $gep_int1 = $info;
 $gep = (($gep_int1) + 8)|0;
 $2 = $gep;
 $3 = HEAP32[$2>>2]|0;
 $gep_int2 = $3;
 $4 = $gep_int2;
 $5 = ($1|0)==($4|0);
 
 if (!($5)) {
  $gep_int29 = $this;
  $gep30 = (($gep_int29) + 8)|0;
  $35 = $gep30;
  $36 = HEAP32[$35>>2]|0;
  $37 = $36;
  $38 = HEAP32[$36>>2]|0;
  $gep_int31 = $38;
  $gep32 = (($gep_int31) + 20)|0;
  $39 = $gep32;
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_viiiiii[$40 & 31]($36,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  
  STACKTOP = sp;return;
 }
 $gep_int3 = $info;
 $gep4 = (($gep_int3) + 53)|0;
 $6 = $gep4;
 HEAP8[$6] = 1;
 $gep_int5 = $info;
 $gep6 = (($gep_int5) + 4)|0;
 $7 = $gep6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($current_ptr|0);
 
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $gep_int7 = $info;
 $gep8 = (($gep_int7) + 52)|0;
 $10 = $gep8;
 HEAP8[$10] = 1;
 $gep_int9 = $info;
 $gep10 = (($gep_int9) + 16)|0;
 $11 = $gep10;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 
 if ($13) {
  HEAP32[$11>>2] = $dst_ptr;
  $gep_int11 = $info;
  $gep12 = (($gep_int11) + 24)|0;
  $14 = $gep12;
  HEAP32[$14>>2] = $path_below;
  $gep_int13 = $info;
  $gep14 = (($gep_int13) + 36)|0;
  $15 = $gep14;
  HEAP32[$15>>2] = 1;
  $gep_int15 = $info;
  $gep16 = (($gep_int15) + 48)|0;
  $16 = $gep16;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(1);
  $19 = ($path_below|0)==(1);
  $or$cond$i = $18 & $19;
  
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $gep_int17 = $info;
  $gep18 = (($gep_int17) + 54)|0;
  $20 = $gep18;
  HEAP8[$20] = 1;
  
  STACKTOP = sp;return;
 }
 $21 = ($12|0)==($dst_ptr|0);
 
 if (!($21)) {
  $gep_int25 = $info;
  $gep26 = (($gep_int25) + 36)|0;
  $31 = $gep26;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$31>>2] = $33;
  $gep_int27 = $info;
  $gep28 = (($gep_int27) + 54)|0;
  $34 = $gep28;
  HEAP8[$34] = 1;
  
  STACKTOP = sp;return;
 }
 $gep_int19 = $info;
 $gep20 = (($gep_int19) + 24)|0;
 $22 = $gep20;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(2);
 
 if ($24) {
  HEAP32[$22>>2] = $path_below;
  
  $25 = $path_below;
 } else {
  $25 = $23;
 }
 
 $gep_int21 = $info;
 $gep22 = (($gep_int21) + 48)|0;
 $26 = $gep22;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(1);
 $29 = ($25|0)==(1);
 $or$cond1$i = $28 & $29;
 
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $gep_int23 = $info;
 $gep24 = (($gep_int23) + 54)|0;
 $30 = $gep24;
 HEAP8[$30] = 1;
 
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0;
 var $gep22 = 0, $gep24 = 0, $gep26 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int23 = 0, $gep_int25 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0;
 var $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $info;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($this|0);
 
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $gep_int1 = $info;
 $gep2 = (($gep_int1) + 53)|0;
 $4 = $gep2;
 HEAP8[$4] = 1;
 $gep_int3 = $info;
 $gep4 = (($gep_int3) + 4)|0;
 $5 = $gep4;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($current_ptr|0);
 
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $gep_int5 = $info;
 $gep6 = (($gep_int5) + 52)|0;
 $8 = $gep6;
 HEAP8[$8] = 1;
 $gep_int7 = $info;
 $gep8 = (($gep_int7) + 16)|0;
 $9 = $gep8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 
 if ($11) {
  HEAP32[$9>>2] = $dst_ptr;
  $gep_int9 = $info;
  $gep10 = (($gep_int9) + 24)|0;
  $12 = $gep10;
  HEAP32[$12>>2] = $path_below;
  $gep_int11 = $info;
  $gep12 = (($gep_int11) + 36)|0;
  $13 = $gep12;
  HEAP32[$13>>2] = 1;
  $gep_int13 = $info;
  $gep14 = (($gep_int13) + 48)|0;
  $14 = $gep14;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(1);
  $17 = ($path_below|0)==(1);
  $or$cond$i = $16 & $17;
  
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $gep_int15 = $info;
  $gep16 = (($gep_int15) + 54)|0;
  $18 = $gep16;
  HEAP8[$18] = 1;
  
  STACKTOP = sp;return;
 }
 $19 = ($10|0)==($dst_ptr|0);
 
 if (!($19)) {
  $gep_int23 = $info;
  $gep24 = (($gep_int23) + 36)|0;
  $29 = $gep24;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$29>>2] = $31;
  $gep_int25 = $info;
  $gep26 = (($gep_int25) + 54)|0;
  $32 = $gep26;
  HEAP8[$32] = 1;
  
  STACKTOP = sp;return;
 }
 $gep_int17 = $info;
 $gep18 = (($gep_int17) + 24)|0;
 $20 = $gep18;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(2);
 
 if ($22) {
  HEAP32[$20>>2] = $path_below;
  
  $23 = $path_below;
 } else {
  $23 = $21;
 }
 
 $gep_int19 = $info;
 $gep20 = (($gep_int19) + 48)|0;
 $24 = $gep20;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(1);
 $27 = ($23|0)==(1);
 $or$cond1$i = $26 & $27;
 
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $gep_int21 = $info;
 $gep22 = (($gep_int21) + 54)|0;
 $28 = $gep22;
 HEAP8[$28] = 1;
 
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$c$i$i = 0, $$c7$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i24$i = 0, $$pre$i27 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i25$iZ2D = 0, $$pre$phi$i28Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi62$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre61$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0;
 var $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2536 = 0, $$sum$i34 = 0, $$sum$i37 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i26 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum107$i = 0, $$sum108$i = 0;
 var $$sum109$i = 0, $$sum11 = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$pre$i$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum12$i26$i = 0, $$sum120$i = 0, $$sum13$i = 0;
 var $$sum13$i$i = 0, $$sum1314 = 0, $$sum14$i = 0, $$sum14$i$i = 0, $$sum15$i$i = 0, $$sum15$pre$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum19$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0;
 var $$sum2$pre$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$i$i = 0, $$sum27$pre$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i29 = 0, $$sum30$i$i = 0, $$sum31$i$i = 0, $$sum3233$i$i = 0, $$sum34$i$i = 0, $$sum3637$i$i = 0, $$sum3940$i$i = 0, $$sum4 = 0;
 var $$sum4$i = 0, $$sum4$i30 = 0, $$sum41$i$i = 0, $$sum44$i$i = 0, $$sum45$i$i = 0, $$sum46$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum6$i = 0, $$sum67 = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$sum9$pre = 0, $$tsize$1$i = 0, $$v$0$i = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0;
 var $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0;
 var $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0;
 var $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0;
 var $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1115$phi = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
 var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$056$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$phi = 0, $R$0$i$phi = 0, $R$0$i20 = 0, $R$0$i20$phi = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i22 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$phi = 0;
 var $RP$0$i$phi = 0, $RP$0$i19 = 0, $RP$0$i19$phi = 0, $T$0$c$i$i = 0, $T$0$c8$i$i = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$014$i$i = 0, $T$014$i$i$phi = 0, $T$026$i = 0, $T$026$i$phi = 0, $T$055$i$i = 0, $T$055$i$i$phi = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i23 = 0, $expanded = 0, $expanded1 = 0;
 var $expanded10 = 0, $expanded100 = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded104 = 0, $expanded105 = 0, $expanded106 = 0, $expanded107 = 0, $expanded108 = 0, $expanded109 = 0, $expanded11 = 0, $expanded110 = 0, $expanded111 = 0, $expanded112 = 0, $expanded113 = 0, $expanded114 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0;
 var $expanded118 = 0, $expanded119 = 0, $expanded12 = 0, $expanded120 = 0, $expanded121 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded125 = 0, $expanded126 = 0, $expanded127 = 0, $expanded128 = 0, $expanded129 = 0, $expanded13 = 0, $expanded130 = 0, $expanded131 = 0, $expanded132 = 0, $expanded133 = 0, $expanded134 = 0, $expanded135 = 0;
 var $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded139 = 0, $expanded14 = 0, $expanded140 = 0, $expanded141 = 0, $expanded142 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded146 = 0, $expanded147 = 0, $expanded148 = 0, $expanded149 = 0, $expanded15 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded153 = 0;
 var $expanded154 = 0, $expanded155 = 0, $expanded156 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded16 = 0, $expanded160 = 0, $expanded161 = 0, $expanded162 = 0, $expanded163 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded167 = 0, $expanded168 = 0, $expanded169 = 0, $expanded17 = 0, $expanded170 = 0, $expanded171 = 0;
 var $expanded172 = 0, $expanded173 = 0, $expanded174 = 0, $expanded175 = 0, $expanded176 = 0, $expanded177 = 0, $expanded178 = 0, $expanded179 = 0, $expanded18 = 0, $expanded180 = 0, $expanded181 = 0, $expanded182 = 0, $expanded183 = 0, $expanded184 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded188 = 0, $expanded189 = 0, $expanded19 = 0;
 var $expanded190 = 0, $expanded191 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded195 = 0, $expanded196 = 0, $expanded197 = 0, $expanded198 = 0, $expanded199 = 0, $expanded2 = 0, $expanded20 = 0, $expanded200 = 0, $expanded201 = 0, $expanded202 = 0, $expanded203 = 0, $expanded204 = 0, $expanded205 = 0, $expanded206 = 0, $expanded207 = 0;
 var $expanded208 = 0, $expanded209 = 0, $expanded21 = 0, $expanded210 = 0, $expanded211 = 0, $expanded212 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded216 = 0, $expanded217 = 0, $expanded218 = 0, $expanded219 = 0, $expanded22 = 0, $expanded220 = 0, $expanded221 = 0, $expanded222 = 0, $expanded223 = 0, $expanded224 = 0, $expanded225 = 0;
 var $expanded226 = 0, $expanded227 = 0, $expanded228 = 0, $expanded229 = 0, $expanded23 = 0, $expanded230 = 0, $expanded231 = 0, $expanded232 = 0, $expanded233 = 0, $expanded234 = 0, $expanded235 = 0, $expanded236 = 0, $expanded237 = 0, $expanded238 = 0, $expanded239 = 0, $expanded24 = 0, $expanded240 = 0, $expanded241 = 0, $expanded242 = 0, $expanded243 = 0;
 var $expanded244 = 0, $expanded245 = 0, $expanded246 = 0, $expanded247 = 0, $expanded248 = 0, $expanded249 = 0, $expanded25 = 0, $expanded250 = 0, $expanded251 = 0, $expanded252 = 0, $expanded253 = 0, $expanded254 = 0, $expanded255 = 0, $expanded256 = 0, $expanded257 = 0, $expanded258 = 0, $expanded259 = 0, $expanded26 = 0, $expanded260 = 0, $expanded261 = 0;
 var $expanded262 = 0, $expanded263 = 0, $expanded264 = 0, $expanded265 = 0, $expanded266 = 0, $expanded267 = 0, $expanded268 = 0, $expanded269 = 0, $expanded27 = 0, $expanded270 = 0, $expanded271 = 0, $expanded272 = 0, $expanded273 = 0, $expanded274 = 0, $expanded275 = 0, $expanded276 = 0, $expanded277 = 0, $expanded278 = 0, $expanded279 = 0, $expanded28 = 0;
 var $expanded280 = 0, $expanded281 = 0, $expanded282 = 0, $expanded283 = 0, $expanded284 = 0, $expanded285 = 0, $expanded286 = 0, $expanded287 = 0, $expanded288 = 0, $expanded289 = 0, $expanded29 = 0, $expanded290 = 0, $expanded291 = 0, $expanded292 = 0, $expanded293 = 0, $expanded294 = 0, $expanded295 = 0, $expanded296 = 0, $expanded297 = 0, $expanded298 = 0;
 var $expanded299 = 0, $expanded3 = 0, $expanded30 = 0, $expanded300 = 0, $expanded301 = 0, $expanded302 = 0, $expanded303 = 0, $expanded304 = 0, $expanded305 = 0, $expanded306 = 0, $expanded307 = 0, $expanded308 = 0, $expanded309 = 0, $expanded31 = 0, $expanded310 = 0, $expanded311 = 0, $expanded312 = 0, $expanded313 = 0, $expanded314 = 0, $expanded315 = 0;
 var $expanded316 = 0, $expanded317 = 0, $expanded318 = 0, $expanded319 = 0, $expanded32 = 0, $expanded320 = 0, $expanded321 = 0, $expanded322 = 0, $expanded323 = 0, $expanded324 = 0, $expanded325 = 0, $expanded326 = 0, $expanded327 = 0, $expanded328 = 0, $expanded329 = 0, $expanded33 = 0, $expanded330 = 0, $expanded331 = 0, $expanded332 = 0, $expanded333 = 0;
 var $expanded334 = 0, $expanded335 = 0, $expanded336 = 0, $expanded337 = 0, $expanded338 = 0, $expanded339 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0;
 var $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded5 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded58 = 0, $expanded59 = 0, $expanded6 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0;
 var $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded7 = 0, $expanded70 = 0, $expanded71 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded79 = 0, $expanded8 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0;
 var $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, $expanded86 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded9 = 0, $expanded90 = 0, $expanded91 = 0, $expanded92 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded98 = 0, $expanded99 = 0, $gep = 0, $gep1001 = 0;
 var $gep1003 = 0, $gep1005 = 0, $gep1007 = 0, $gep1011 = 0, $gep1013 = 0, $gep1015 = 0, $gep1017 = 0, $gep1019 = 0, $gep1021 = 0, $gep1023 = 0, $gep1025 = 0, $gep1027 = 0, $gep1029 = 0, $gep1031 = 0, $gep1033 = 0, $gep1035 = 0, $gep1037 = 0, $gep1039 = 0, $gep1041 = 0, $gep1043 = 0;
 var $gep1045 = 0, $gep1047 = 0, $gep1049 = 0, $gep1051 = 0, $gep1053 = 0, $gep1055 = 0, $gep1057 = 0, $gep1059 = 0, $gep1061 = 0, $gep1063 = 0, $gep1065 = 0, $gep1067 = 0, $gep1069 = 0, $gep1071 = 0, $gep1073 = 0, $gep1075 = 0, $gep1077 = 0, $gep1080 = 0, $gep1082 = 0, $gep1084 = 0;
 var $gep1086 = 0, $gep1088 = 0, $gep1090 = 0, $gep1092 = 0, $gep1094 = 0, $gep1096 = 0, $gep1098 = 0, $gep1100 = 0, $gep1102 = 0, $gep1104 = 0, $gep1106 = 0, $gep1108 = 0, $gep1110 = 0, $gep1112 = 0, $gep1114 = 0, $gep1116 = 0, $gep1118 = 0, $gep1120 = 0, $gep1122 = 0, $gep1124 = 0;
 var $gep1126 = 0, $gep1128 = 0, $gep1130 = 0, $gep1132 = 0, $gep1134 = 0, $gep1136 = 0, $gep1138 = 0, $gep1142 = 0, $gep1144 = 0, $gep1146 = 0, $gep1148 = 0, $gep1150 = 0, $gep1152 = 0, $gep1154 = 0, $gep1156 = 0, $gep1158 = 0, $gep1160 = 0, $gep1162 = 0, $gep1164 = 0, $gep1166 = 0;
 var $gep1168 = 0, $gep1170 = 0, $gep1172 = 0, $gep1174 = 0, $gep1176 = 0, $gep1178 = 0, $gep1180 = 0, $gep1182 = 0, $gep1184 = 0, $gep1186 = 0, $gep1188 = 0, $gep1190 = 0, $gep1192 = 0, $gep1194 = 0, $gep1196 = 0, $gep1198 = 0, $gep1200 = 0, $gep1202 = 0, $gep1204 = 0, $gep1206 = 0;
 var $gep1208 = 0, $gep1210 = 0, $gep1212 = 0, $gep1214 = 0, $gep1216 = 0, $gep1218 = 0, $gep1220 = 0, $gep341 = 0, $gep343 = 0, $gep345 = 0, $gep347 = 0, $gep350 = 0, $gep352 = 0, $gep354 = 0, $gep356 = 0, $gep358 = 0, $gep360 = 0, $gep362 = 0, $gep364 = 0, $gep366 = 0;
 var $gep368 = 0, $gep371 = 0, $gep373 = 0, $gep375 = 0, $gep377 = 0, $gep379 = 0, $gep381 = 0, $gep383 = 0, $gep385 = 0, $gep387 = 0, $gep389 = 0, $gep393 = 0, $gep395 = 0, $gep397 = 0, $gep399 = 0, $gep401 = 0, $gep403 = 0, $gep405 = 0, $gep407 = 0, $gep409 = 0;
 var $gep411 = 0, $gep413 = 0, $gep415 = 0, $gep417 = 0, $gep419 = 0, $gep421 = 0, $gep423 = 0, $gep425 = 0, $gep427 = 0, $gep429 = 0, $gep431 = 0, $gep433 = 0, $gep435 = 0, $gep437 = 0, $gep439 = 0, $gep441 = 0, $gep443 = 0, $gep445 = 0, $gep447 = 0, $gep449 = 0;
 var $gep451 = 0, $gep453 = 0, $gep455 = 0, $gep457 = 0, $gep459 = 0, $gep461 = 0, $gep463 = 0, $gep465 = 0, $gep467 = 0, $gep469 = 0, $gep471 = 0, $gep473 = 0, $gep475 = 0, $gep477 = 0, $gep479 = 0, $gep481 = 0, $gep483 = 0, $gep485 = 0, $gep487 = 0, $gep489 = 0;
 var $gep491 = 0, $gep493 = 0, $gep495 = 0, $gep497 = 0, $gep499 = 0, $gep501 = 0, $gep505 = 0, $gep507 = 0, $gep509 = 0, $gep511 = 0, $gep513 = 0, $gep515 = 0, $gep517 = 0, $gep519 = 0, $gep521 = 0, $gep523 = 0, $gep525 = 0, $gep527 = 0, $gep529 = 0, $gep531 = 0;
 var $gep533 = 0, $gep535 = 0, $gep537 = 0, $gep539 = 0, $gep541 = 0, $gep543 = 0, $gep545 = 0, $gep547 = 0, $gep549 = 0, $gep551 = 0, $gep553 = 0, $gep555 = 0, $gep557 = 0, $gep559 = 0, $gep561 = 0, $gep563 = 0, $gep565 = 0, $gep567 = 0, $gep569 = 0, $gep571 = 0;
 var $gep573 = 0, $gep575 = 0, $gep577 = 0, $gep579 = 0, $gep581 = 0, $gep583 = 0, $gep585 = 0, $gep587 = 0, $gep589 = 0, $gep591 = 0, $gep593 = 0, $gep595 = 0, $gep597 = 0, $gep599 = 0, $gep601 = 0, $gep603 = 0, $gep605 = 0, $gep607 = 0, $gep609 = 0, $gep611 = 0;
 var $gep613 = 0, $gep615 = 0, $gep617 = 0, $gep619 = 0, $gep621 = 0, $gep623 = 0, $gep627 = 0, $gep629 = 0, $gep631 = 0, $gep633 = 0, $gep635 = 0, $gep637 = 0, $gep639 = 0, $gep641 = 0, $gep643 = 0, $gep645 = 0, $gep647 = 0, $gep649 = 0, $gep651 = 0, $gep653 = 0;
 var $gep655 = 0, $gep657 = 0, $gep659 = 0, $gep661 = 0, $gep663 = 0, $gep665 = 0, $gep667 = 0, $gep669 = 0, $gep671 = 0, $gep673 = 0, $gep675 = 0, $gep677 = 0, $gep679 = 0, $gep681 = 0, $gep683 = 0, $gep685 = 0, $gep687 = 0, $gep689 = 0, $gep691 = 0, $gep693 = 0;
 var $gep695 = 0, $gep697 = 0, $gep699 = 0, $gep701 = 0, $gep703 = 0, $gep705 = 0, $gep707 = 0, $gep709 = 0, $gep711 = 0, $gep713 = 0, $gep715 = 0, $gep717 = 0, $gep719 = 0, $gep721 = 0, $gep723 = 0, $gep725 = 0, $gep727 = 0, $gep729 = 0, $gep731 = 0, $gep733 = 0;
 var $gep736 = 0, $gep738 = 0, $gep740 = 0, $gep742 = 0, $gep744 = 0, $gep746 = 0, $gep749 = 0, $gep751 = 0, $gep753 = 0, $gep755 = 0, $gep757 = 0, $gep759 = 0, $gep762 = 0, $gep764 = 0, $gep766 = 0, $gep768 = 0, $gep770 = 0, $gep772 = 0, $gep774 = 0, $gep776 = 0;
 var $gep778 = 0, $gep780 = 0, $gep782 = 0, $gep784 = 0, $gep786 = 0, $gep788 = 0, $gep790 = 0, $gep792 = 0, $gep794 = 0, $gep796 = 0, $gep798 = 0, $gep800 = 0, $gep802 = 0, $gep804 = 0, $gep807 = 0, $gep809 = 0, $gep811 = 0, $gep813 = 0, $gep815 = 0, $gep817 = 0;
 var $gep819 = 0, $gep821 = 0, $gep823 = 0, $gep825 = 0, $gep827 = 0, $gep829 = 0, $gep831 = 0, $gep833 = 0, $gep835 = 0, $gep837 = 0, $gep840 = 0, $gep842 = 0, $gep844 = 0, $gep846 = 0, $gep848 = 0, $gep850 = 0, $gep852 = 0, $gep854 = 0, $gep856 = 0, $gep858 = 0;
 var $gep860 = 0, $gep862 = 0, $gep864 = 0, $gep866 = 0, $gep868 = 0, $gep870 = 0, $gep872 = 0, $gep875 = 0, $gep877 = 0, $gep879 = 0, $gep881 = 0, $gep883 = 0, $gep885 = 0, $gep887 = 0, $gep889 = 0, $gep891 = 0, $gep893 = 0, $gep895 = 0, $gep897 = 0, $gep899 = 0;
 var $gep901 = 0, $gep903 = 0, $gep905 = 0, $gep907 = 0, $gep909 = 0, $gep911 = 0, $gep913 = 0, $gep915 = 0, $gep917 = 0, $gep919 = 0, $gep921 = 0, $gep923 = 0, $gep925 = 0, $gep927 = 0, $gep931 = 0, $gep933 = 0, $gep935 = 0, $gep937 = 0, $gep939 = 0, $gep941 = 0;
 var $gep943 = 0, $gep945 = 0, $gep947 = 0, $gep949 = 0, $gep951 = 0, $gep953 = 0, $gep955 = 0, $gep957 = 0, $gep959 = 0, $gep961 = 0, $gep963 = 0, $gep965 = 0, $gep967 = 0, $gep969 = 0, $gep971 = 0, $gep973 = 0, $gep975 = 0, $gep977 = 0, $gep979 = 0, $gep981 = 0;
 var $gep983 = 0, $gep985 = 0, $gep987 = 0, $gep989 = 0, $gep991 = 0, $gep993 = 0, $gep995 = 0, $gep997 = 0, $gep999 = 0, $gep_array = 0, $gep_array1006 = 0, $gep_array1012 = 0, $gep_array1016 = 0, $gep_array1028 = 0, $gep_array1052 = 0, $gep_array1137 = 0, $gep_array1143 = 0, $gep_array1147 = 0, $gep_array1159 = 0, $gep_array1183 = 0;
 var $gep_array344 = 0, $gep_array361 = 0, $gep_array365 = 0, $gep_array388 = 0, $gep_array394 = 0, $gep_array398 = 0, $gep_array416 = 0, $gep_array452 = 0, $gep_array500 = 0, $gep_array506 = 0, $gep_array510 = 0, $gep_array530 = 0, $gep_array538 = 0, $gep_array542 = 0, $gep_array578 = 0, $gep_array622 = 0, $gep_array628 = 0, $gep_array632 = 0, $gep_array644 = 0, $gep_array668 = 0;
 var $gep_array812 = 0, $gep_array816 = 0, $gep_array820 = 0, $gep_array922 = 0, $gep_array964 = 0, $gep_int = 0, $gep_int1000 = 0, $gep_int1002 = 0, $gep_int1004 = 0, $gep_int1008 = 0, $gep_int1009 = 0, $gep_int1010 = 0, $gep_int1014 = 0, $gep_int1018 = 0, $gep_int1020 = 0, $gep_int1022 = 0, $gep_int1024 = 0, $gep_int1026 = 0, $gep_int1030 = 0, $gep_int1032 = 0;
 var $gep_int1034 = 0, $gep_int1036 = 0, $gep_int1038 = 0, $gep_int1040 = 0, $gep_int1042 = 0, $gep_int1044 = 0, $gep_int1046 = 0, $gep_int1048 = 0, $gep_int1050 = 0, $gep_int1054 = 0, $gep_int1056 = 0, $gep_int1058 = 0, $gep_int1060 = 0, $gep_int1062 = 0, $gep_int1064 = 0, $gep_int1066 = 0, $gep_int1068 = 0, $gep_int1070 = 0, $gep_int1072 = 0, $gep_int1074 = 0;
 var $gep_int1076 = 0, $gep_int1078 = 0, $gep_int1079 = 0, $gep_int1081 = 0, $gep_int1083 = 0, $gep_int1085 = 0, $gep_int1087 = 0, $gep_int1089 = 0, $gep_int1091 = 0, $gep_int1093 = 0, $gep_int1095 = 0, $gep_int1097 = 0, $gep_int1099 = 0, $gep_int1101 = 0, $gep_int1103 = 0, $gep_int1105 = 0, $gep_int1107 = 0, $gep_int1109 = 0, $gep_int1111 = 0, $gep_int1113 = 0;
 var $gep_int1115 = 0, $gep_int1117 = 0, $gep_int1119 = 0, $gep_int1121 = 0, $gep_int1123 = 0, $gep_int1125 = 0, $gep_int1127 = 0, $gep_int1129 = 0, $gep_int1131 = 0, $gep_int1133 = 0, $gep_int1135 = 0, $gep_int1139 = 0, $gep_int1140 = 0, $gep_int1141 = 0, $gep_int1145 = 0, $gep_int1149 = 0, $gep_int1151 = 0, $gep_int1153 = 0, $gep_int1155 = 0, $gep_int1157 = 0;
 var $gep_int1161 = 0, $gep_int1163 = 0, $gep_int1165 = 0, $gep_int1167 = 0, $gep_int1169 = 0, $gep_int1171 = 0, $gep_int1173 = 0, $gep_int1175 = 0, $gep_int1177 = 0, $gep_int1179 = 0, $gep_int1181 = 0, $gep_int1185 = 0, $gep_int1187 = 0, $gep_int1189 = 0, $gep_int1191 = 0, $gep_int1193 = 0, $gep_int1195 = 0, $gep_int1197 = 0, $gep_int1199 = 0, $gep_int1201 = 0;
 var $gep_int1203 = 0, $gep_int1205 = 0, $gep_int1207 = 0, $gep_int1209 = 0, $gep_int1211 = 0, $gep_int1213 = 0, $gep_int1215 = 0, $gep_int1217 = 0, $gep_int1219 = 0, $gep_int340 = 0, $gep_int342 = 0, $gep_int346 = 0, $gep_int348 = 0, $gep_int349 = 0, $gep_int351 = 0, $gep_int353 = 0, $gep_int355 = 0, $gep_int357 = 0, $gep_int359 = 0, $gep_int363 = 0;
 var $gep_int367 = 0, $gep_int369 = 0, $gep_int370 = 0, $gep_int372 = 0, $gep_int374 = 0, $gep_int376 = 0, $gep_int378 = 0, $gep_int380 = 0, $gep_int382 = 0, $gep_int384 = 0, $gep_int386 = 0, $gep_int390 = 0, $gep_int391 = 0, $gep_int392 = 0, $gep_int396 = 0, $gep_int400 = 0, $gep_int402 = 0, $gep_int404 = 0, $gep_int406 = 0, $gep_int408 = 0;
 var $gep_int410 = 0, $gep_int412 = 0, $gep_int414 = 0, $gep_int418 = 0, $gep_int420 = 0, $gep_int422 = 0, $gep_int424 = 0, $gep_int426 = 0, $gep_int428 = 0, $gep_int430 = 0, $gep_int432 = 0, $gep_int434 = 0, $gep_int436 = 0, $gep_int438 = 0, $gep_int440 = 0, $gep_int442 = 0, $gep_int444 = 0, $gep_int446 = 0, $gep_int448 = 0, $gep_int450 = 0;
 var $gep_int454 = 0, $gep_int456 = 0, $gep_int458 = 0, $gep_int460 = 0, $gep_int462 = 0, $gep_int464 = 0, $gep_int466 = 0, $gep_int468 = 0, $gep_int470 = 0, $gep_int472 = 0, $gep_int474 = 0, $gep_int476 = 0, $gep_int478 = 0, $gep_int480 = 0, $gep_int482 = 0, $gep_int484 = 0, $gep_int486 = 0, $gep_int488 = 0, $gep_int490 = 0, $gep_int492 = 0;
 var $gep_int494 = 0, $gep_int496 = 0, $gep_int498 = 0, $gep_int502 = 0, $gep_int503 = 0, $gep_int504 = 0, $gep_int508 = 0, $gep_int512 = 0, $gep_int514 = 0, $gep_int516 = 0, $gep_int518 = 0, $gep_int520 = 0, $gep_int522 = 0, $gep_int524 = 0, $gep_int526 = 0, $gep_int528 = 0, $gep_int532 = 0, $gep_int534 = 0, $gep_int536 = 0, $gep_int540 = 0;
 var $gep_int544 = 0, $gep_int546 = 0, $gep_int548 = 0, $gep_int550 = 0, $gep_int552 = 0, $gep_int554 = 0, $gep_int556 = 0, $gep_int558 = 0, $gep_int560 = 0, $gep_int562 = 0, $gep_int564 = 0, $gep_int566 = 0, $gep_int568 = 0, $gep_int570 = 0, $gep_int572 = 0, $gep_int574 = 0, $gep_int576 = 0, $gep_int580 = 0, $gep_int582 = 0, $gep_int584 = 0;
 var $gep_int586 = 0, $gep_int588 = 0, $gep_int590 = 0, $gep_int592 = 0, $gep_int594 = 0, $gep_int596 = 0, $gep_int598 = 0, $gep_int600 = 0, $gep_int602 = 0, $gep_int604 = 0, $gep_int606 = 0, $gep_int608 = 0, $gep_int610 = 0, $gep_int612 = 0, $gep_int614 = 0, $gep_int616 = 0, $gep_int618 = 0, $gep_int620 = 0, $gep_int624 = 0, $gep_int625 = 0;
 var $gep_int626 = 0, $gep_int630 = 0, $gep_int634 = 0, $gep_int636 = 0, $gep_int638 = 0, $gep_int640 = 0, $gep_int642 = 0, $gep_int646 = 0, $gep_int648 = 0, $gep_int650 = 0, $gep_int652 = 0, $gep_int654 = 0, $gep_int656 = 0, $gep_int658 = 0, $gep_int660 = 0, $gep_int662 = 0, $gep_int664 = 0, $gep_int666 = 0, $gep_int670 = 0, $gep_int672 = 0;
 var $gep_int674 = 0, $gep_int676 = 0, $gep_int678 = 0, $gep_int680 = 0, $gep_int682 = 0, $gep_int684 = 0, $gep_int686 = 0, $gep_int688 = 0, $gep_int690 = 0, $gep_int692 = 0, $gep_int694 = 0, $gep_int696 = 0, $gep_int698 = 0, $gep_int700 = 0, $gep_int702 = 0, $gep_int704 = 0, $gep_int706 = 0, $gep_int708 = 0, $gep_int710 = 0, $gep_int712 = 0;
 var $gep_int714 = 0, $gep_int716 = 0, $gep_int718 = 0, $gep_int720 = 0, $gep_int722 = 0, $gep_int724 = 0, $gep_int726 = 0, $gep_int728 = 0, $gep_int730 = 0, $gep_int732 = 0, $gep_int734 = 0, $gep_int735 = 0, $gep_int737 = 0, $gep_int739 = 0, $gep_int741 = 0, $gep_int743 = 0, $gep_int745 = 0, $gep_int747 = 0, $gep_int748 = 0, $gep_int750 = 0;
 var $gep_int752 = 0, $gep_int754 = 0, $gep_int756 = 0, $gep_int758 = 0, $gep_int760 = 0, $gep_int761 = 0, $gep_int763 = 0, $gep_int765 = 0, $gep_int767 = 0, $gep_int769 = 0, $gep_int771 = 0, $gep_int773 = 0, $gep_int775 = 0, $gep_int777 = 0, $gep_int779 = 0, $gep_int781 = 0, $gep_int783 = 0, $gep_int785 = 0, $gep_int787 = 0, $gep_int789 = 0;
 var $gep_int791 = 0, $gep_int793 = 0, $gep_int795 = 0, $gep_int797 = 0, $gep_int799 = 0, $gep_int801 = 0, $gep_int803 = 0, $gep_int805 = 0, $gep_int806 = 0, $gep_int808 = 0, $gep_int810 = 0, $gep_int814 = 0, $gep_int818 = 0, $gep_int822 = 0, $gep_int824 = 0, $gep_int826 = 0, $gep_int828 = 0, $gep_int830 = 0, $gep_int832 = 0, $gep_int834 = 0;
 var $gep_int836 = 0, $gep_int838 = 0, $gep_int839 = 0, $gep_int841 = 0, $gep_int843 = 0, $gep_int845 = 0, $gep_int847 = 0, $gep_int849 = 0, $gep_int851 = 0, $gep_int853 = 0, $gep_int855 = 0, $gep_int857 = 0, $gep_int859 = 0, $gep_int861 = 0, $gep_int863 = 0, $gep_int865 = 0, $gep_int867 = 0, $gep_int869 = 0, $gep_int871 = 0, $gep_int873 = 0;
 var $gep_int874 = 0, $gep_int876 = 0, $gep_int878 = 0, $gep_int880 = 0, $gep_int882 = 0, $gep_int884 = 0, $gep_int886 = 0, $gep_int888 = 0, $gep_int890 = 0, $gep_int892 = 0, $gep_int894 = 0, $gep_int896 = 0, $gep_int898 = 0, $gep_int900 = 0, $gep_int902 = 0, $gep_int904 = 0, $gep_int906 = 0, $gep_int908 = 0, $gep_int910 = 0, $gep_int912 = 0;
 var $gep_int914 = 0, $gep_int916 = 0, $gep_int918 = 0, $gep_int920 = 0, $gep_int924 = 0, $gep_int926 = 0, $gep_int928 = 0, $gep_int929 = 0, $gep_int930 = 0, $gep_int932 = 0, $gep_int934 = 0, $gep_int936 = 0, $gep_int938 = 0, $gep_int940 = 0, $gep_int942 = 0, $gep_int944 = 0, $gep_int946 = 0, $gep_int948 = 0, $gep_int950 = 0, $gep_int952 = 0;
 var $gep_int954 = 0, $gep_int956 = 0, $gep_int958 = 0, $gep_int960 = 0, $gep_int962 = 0, $gep_int966 = 0, $gep_int968 = 0, $gep_int970 = 0, $gep_int972 = 0, $gep_int974 = 0, $gep_int976 = 0, $gep_int978 = 0, $gep_int980 = 0, $gep_int982 = 0, $gep_int984 = 0, $gep_int986 = 0, $gep_int988 = 0, $gep_int990 = 0, $gep_int992 = 0, $gep_int994 = 0;
 var $gep_int996 = 0, $gep_int998 = 0, $i$02$i$i = 0, $i$02$i$i$phi = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i31 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond2$i = 0, $or$cond21$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0;
 var $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i17 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rsize$331$i$phi = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0;
 var $t$0$i = 0, $t$0$i16 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $t$230$i$phi = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i18 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, $v$332$i$phi = 0;
 var label = 0, sp = 0, u$318 = 0;
 sp = STACKTOP;
 $1 = ($bytes>>>0)<(245);
 
 do {
  if ($1) {
   $2 = ($bytes>>>0)<(11);
   
   if ($2) {
    $5 = 16;
   } else {
    $3 = (($bytes) + 11)|0;
    $4 = $3 & -8;
    
    $5 = $4;
   }
   
   $6 = $5 >>> 3;
   $expanded1 = 16800;
   $gep_int = 16800;
   $expanded = $gep_int;
   $7 = HEAP32[$expanded>>2]|0;
   $8 = $7 >>> $6;
   $9 = $8 & 3;
   $10 = ($9|0)==(0);
   
   if (!($10)) {
    $11 = $8 & 1;
    $12 = $11 ^ 1;
    $13 = (($12) + ($6))|0;
    $14 = $13 << 1;
    $expanded2 = 16800;
    $gep_int340 = 16800;
    $gep = (($gep_int340) + 40)|0;
    $gep_array = $14<<2;
    $gep341 = (($gep) + ($gep_array))|0;
    $15 = $gep341;
    $16 = $15;
    $$sum11 = (($14) + 2)|0;
    $expanded3 = 16800;
    $gep_int342 = 16800;
    $gep343 = (($gep_int342) + 40)|0;
    $gep_array344 = $$sum11<<2;
    $gep345 = (($gep343) + ($gep_array344))|0;
    $17 = $gep345;
    $18 = HEAP32[$17>>2]|0;
    $gep_int346 = $18;
    $gep347 = (($gep_int346) + 8)|0;
    $19 = $gep347;
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    
    do {
     if ($21) {
      $22 = 1 << $13;
      $23 = $22 ^ -1;
      $24 = $7 & $23;
      $expanded5 = 16800;
      $gep_int348 = 16800;
      $expanded4 = $gep_int348;
      HEAP32[$expanded4>>2] = $24;
      
     } else {
      $25 = $20;
      $expanded7 = 16800;
      $gep_int349 = 16800;
      $gep350 = (($gep_int349) + 16)|0;
      $expanded6 = $gep350;
      $26 = HEAP32[$expanded6>>2]|0;
      $27 = ($25>>>0)<($26>>>0);
      
      if ($27) {
       _abort();
       // unreachable
      }
      $gep_int351 = $20;
      $gep352 = (($gep_int351) + 12)|0;
      $28 = $gep352;
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==($18|0);
      
      if ($30) {
       HEAP32[$28>>2] = $16;
       HEAP32[$17>>2] = $20;
       
       break;
      } else {
       _abort();
       // unreachable
      }
     }
    } while(0);
    $31 = $13 << 3;
    $32 = $31 | 3;
    $gep_int353 = $18;
    $gep354 = (($gep_int353) + 4)|0;
    $33 = $gep354;
    HEAP32[$33>>2] = $32;
    $34 = $18;
    $$sum1314 = $31 | 4;
    $gep_int355 = $18;
    $gep356 = (($gep_int355) + ($$sum1314))|0;
    $35 = $gep356;
    $36 = $35;
    $37 = HEAP32[$35>>2]|0;
    $38 = $37 | 1;
    HEAP32[$35>>2] = $38;
    $39 = $19;
    
    $mem$0 = $39;
    
    STACKTOP = sp;return $mem$0|0;
   }
   $expanded9 = 16800;
   $gep_int357 = 16800;
   $gep358 = (($gep_int357) + 8)|0;
   $expanded8 = $gep358;
   $40 = HEAP32[$expanded8>>2]|0;
   $41 = ($5>>>0)>($40>>>0);
   
   if (!($41)) {
    $nb$0 = $5;
    break;
   }
   $42 = ($8|0)==(0);
   
   if (!($42)) {
    $43 = $8 << $6;
    $44 = 2 << $6;
    $45 = (0 - ($44))|0;
    $46 = $44 | $45;
    $47 = $43 & $46;
    $48 = (0 - ($47))|0;
    $49 = $47 & $48;
    $50 = (($49) + -1)|0;
    $51 = $50 >>> 12;
    $52 = $51 & 16;
    $53 = $50 >>> $52;
    $54 = $53 >>> 5;
    $55 = $54 & 8;
    $56 = $55 | $52;
    $57 = $53 >>> $55;
    $58 = $57 >>> 2;
    $59 = $58 & 4;
    $60 = $56 | $59;
    $61 = $57 >>> $59;
    $62 = $61 >>> 1;
    $63 = $62 & 2;
    $64 = $60 | $63;
    $65 = $61 >>> $63;
    $66 = $65 >>> 1;
    $67 = $66 & 1;
    $68 = $64 | $67;
    $69 = $65 >>> $67;
    $70 = (($68) + ($69))|0;
    $71 = $70 << 1;
    $expanded10 = 16800;
    $gep_int359 = 16800;
    $gep360 = (($gep_int359) + 40)|0;
    $gep_array361 = $71<<2;
    $gep362 = (($gep360) + ($gep_array361))|0;
    $72 = $gep362;
    $73 = $72;
    $$sum4 = (($71) + 2)|0;
    $expanded11 = 16800;
    $gep_int363 = 16800;
    $gep364 = (($gep_int363) + 40)|0;
    $gep_array365 = $$sum4<<2;
    $gep366 = (($gep364) + ($gep_array365))|0;
    $74 = $gep366;
    $75 = HEAP32[$74>>2]|0;
    $gep_int367 = $75;
    $gep368 = (($gep_int367) + 8)|0;
    $76 = $gep368;
    $77 = HEAP32[$76>>2]|0;
    $78 = ($73|0)==($77|0);
    
    do {
     if ($78) {
      $79 = 1 << $70;
      $80 = $79 ^ -1;
      $81 = $7 & $80;
      $expanded13 = 16800;
      $gep_int369 = 16800;
      $expanded12 = $gep_int369;
      HEAP32[$expanded12>>2] = $81;
      
     } else {
      $82 = $77;
      $expanded15 = 16800;
      $gep_int370 = 16800;
      $gep371 = (($gep_int370) + 16)|0;
      $expanded14 = $gep371;
      $83 = HEAP32[$expanded14>>2]|0;
      $84 = ($82>>>0)<($83>>>0);
      
      if ($84) {
       _abort();
       // unreachable
      }
      $gep_int372 = $77;
      $gep373 = (($gep_int372) + 12)|0;
      $85 = $gep373;
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)==($75|0);
      
      if ($87) {
       HEAP32[$85>>2] = $73;
       HEAP32[$74>>2] = $77;
       
       break;
      } else {
       _abort();
       // unreachable
      }
     }
    } while(0);
    $88 = $70 << 3;
    $89 = (($88) - ($5))|0;
    $90 = $5 | 3;
    $gep_int374 = $75;
    $gep375 = (($gep_int374) + 4)|0;
    $91 = $gep375;
    HEAP32[$91>>2] = $90;
    $92 = $75;
    $gep_int376 = $75;
    $gep377 = (($gep_int376) + ($5))|0;
    $93 = $gep377;
    $94 = $93;
    $95 = $89 | 1;
    $$sum67 = $5 | 4;
    $gep_int378 = $75;
    $gep379 = (($gep_int378) + ($$sum67))|0;
    $96 = $gep379;
    $97 = $96;
    HEAP32[$96>>2] = $95;
    $gep_int380 = $75;
    $gep381 = (($gep_int380) + ($88))|0;
    $98 = $gep381;
    $99 = $98;
    HEAP32[$98>>2] = $89;
    $expanded17 = 16800;
    $gep_int382 = 16800;
    $gep383 = (($gep_int382) + 8)|0;
    $expanded16 = $gep383;
    $100 = HEAP32[$expanded16>>2]|0;
    $101 = ($100|0)==(0);
    
    if (!($101)) {
     $expanded19 = 16800;
     $gep_int384 = 16800;
     $gep385 = (($gep_int384) + 20)|0;
     $expanded18 = $gep385;
     $102 = HEAP32[$expanded18>>2]|0;
     $103 = $100 >>> 3;
     $104 = $103 << 1;
     $expanded20 = 16800;
     $gep_int386 = 16800;
     $gep387 = (($gep_int386) + 40)|0;
     $gep_array388 = $104<<2;
     $gep389 = (($gep387) + ($gep_array388))|0;
     $105 = $gep389;
     $106 = $105;
     $expanded22 = 16800;
     $gep_int390 = 16800;
     $expanded21 = $gep_int390;
     $107 = HEAP32[$expanded21>>2]|0;
     $108 = 1 << $103;
     $109 = $107 & $108;
     $110 = ($109|0)==(0);
     
     do {
      if ($110) {
       $111 = $107 | $108;
       $expanded24 = 16800;
       $gep_int391 = 16800;
       $expanded23 = $gep_int391;
       HEAP32[$expanded23>>2] = $111;
       $$sum9$pre = (($104) + 2)|0;
       $expanded25 = 16800;
       $gep_int392 = 16800;
       $gep393 = (($gep_int392) + 40)|0;
       $gep_array394 = $$sum9$pre<<2;
       $gep395 = (($gep393) + ($gep_array394))|0;
       $$pre = $gep395;
       
       $$pre$phiZ2D = $$pre;$F4$0 = $106;
      } else {
       $$sum10 = (($104) + 2)|0;
       $expanded26 = 16800;
       $gep_int396 = 16800;
       $gep397 = (($gep_int396) + 40)|0;
       $gep_array398 = $$sum10<<2;
       $gep399 = (($gep397) + ($gep_array398))|0;
       $112 = $gep399;
       $113 = HEAP32[$112>>2]|0;
       $114 = $113;
       $expanded28 = 16800;
       $gep_int400 = 16800;
       $gep401 = (($gep_int400) + 16)|0;
       $expanded27 = $gep401;
       $115 = HEAP32[$expanded27>>2]|0;
       $116 = ($114>>>0)<($115>>>0);
       
       if (!($116)) {
        $$pre$phiZ2D = $112;$F4$0 = $113;
        break;
       }
       _abort();
       // unreachable
      }
     } while(0);
     
     
     HEAP32[$$pre$phiZ2D>>2] = $102;
     $gep_int402 = $F4$0;
     $gep403 = (($gep_int402) + 12)|0;
     $117 = $gep403;
     HEAP32[$117>>2] = $102;
     $gep_int404 = $102;
     $gep405 = (($gep_int404) + 8)|0;
     $118 = $gep405;
     HEAP32[$118>>2] = $F4$0;
     $gep_int406 = $102;
     $gep407 = (($gep_int406) + 12)|0;
     $119 = $gep407;
     HEAP32[$119>>2] = $106;
     
    }
    $expanded30 = 16800;
    $gep_int408 = 16800;
    $gep409 = (($gep_int408) + 8)|0;
    $expanded29 = $gep409;
    HEAP32[$expanded29>>2] = $89;
    $expanded32 = 16800;
    $gep_int410 = 16800;
    $gep411 = (($gep_int410) + 20)|0;
    $expanded31 = $gep411;
    HEAP32[$expanded31>>2] = $94;
    $120 = $76;
    
    $mem$0 = $120;
    
    STACKTOP = sp;return $mem$0|0;
   }
   $expanded34 = 16800;
   $gep_int412 = 16800;
   $gep413 = (($gep_int412) + 4)|0;
   $expanded33 = $gep413;
   $121 = HEAP32[$expanded33>>2]|0;
   $122 = ($121|0)==(0);
   
   if ($122) {
    $nb$0 = $5;
    break;
   }
   $123 = (0 - ($121))|0;
   $124 = $121 & $123;
   $125 = (($124) + -1)|0;
   $126 = $125 >>> 12;
   $127 = $126 & 16;
   $128 = $125 >>> $127;
   $129 = $128 >>> 5;
   $130 = $129 & 8;
   $131 = $130 | $127;
   $132 = $128 >>> $130;
   $133 = $132 >>> 2;
   $134 = $133 & 4;
   $135 = $131 | $134;
   $136 = $132 >>> $134;
   $137 = $136 >>> 1;
   $138 = $137 & 2;
   $139 = $135 | $138;
   $140 = $136 >>> $138;
   $141 = $140 >>> 1;
   $142 = $141 & 1;
   $143 = $139 | $142;
   $144 = $140 >>> $142;
   $145 = (($143) + ($144))|0;
   $expanded35 = 16800;
   $gep_int414 = 16800;
   $gep415 = (($gep_int414) + 304)|0;
   $gep_array416 = $145<<2;
   $gep417 = (($gep415) + ($gep_array416))|0;
   $146 = $gep417;
   $147 = HEAP32[$146>>2]|0;
   $gep_int418 = $147;
   $gep419 = (($gep_int418) + 4)|0;
   $148 = $gep419;
   $149 = HEAP32[$148>>2]|0;
   $150 = $149 & -8;
   $151 = (($150) - ($5))|0;
   
   $rsize$0$i = $151;$t$0$i = $147;$v$0$i = $147;
   while(1) {
    
    
    
    $gep_int420 = $t$0$i;
    $gep421 = (($gep_int420) + 16)|0;
    $152 = $gep421;
    $153 = HEAP32[$152>>2]|0;
    $154 = ($153|0)==(0);
    
    if ($154) {
     $gep_int422 = $t$0$i;
     $gep423 = (($gep_int422) + 20)|0;
     $155 = $gep423;
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==(0);
     
     if ($157) {
      break;
     } else {
      $158 = $156;
     }
    } else {
     $158 = $153;
    }
    
    $gep_int424 = $158;
    $gep425 = (($gep_int424) + 4)|0;
    $159 = $gep425;
    $160 = HEAP32[$159>>2]|0;
    $161 = $160 & -8;
    $162 = (($161) - ($5))|0;
    $163 = ($162>>>0)<($rsize$0$i>>>0);
    $$rsize$0$i = $163 ? $162 : $rsize$0$i;
    $$v$0$i = $163 ? $158 : $v$0$i;
    
    $rsize$0$i = $$rsize$0$i;$t$0$i = $158;$v$0$i = $$v$0$i;
   }
   $164 = $v$0$i;
   $expanded37 = 16800;
   $gep_int426 = 16800;
   $gep427 = (($gep_int426) + 16)|0;
   $expanded36 = $gep427;
   $165 = HEAP32[$expanded36>>2]|0;
   $166 = ($164>>>0)<($165>>>0);
   
   if ($166) {
    _abort();
    // unreachable
   }
   $gep_int428 = $v$0$i;
   $gep429 = (($gep_int428) + ($5))|0;
   $167 = $gep429;
   $168 = $167;
   $169 = ($164>>>0)<($167>>>0);
   
   if (!($169)) {
    _abort();
    // unreachable
   }
   $gep_int430 = $v$0$i;
   $gep431 = (($gep_int430) + 24)|0;
   $170 = $gep431;
   $171 = HEAP32[$170>>2]|0;
   $gep_int432 = $v$0$i;
   $gep433 = (($gep_int432) + 12)|0;
   $172 = $gep433;
   $173 = HEAP32[$172>>2]|0;
   $174 = ($173|0)==($v$0$i|0);
   
   do {
    if ($174) {
     $gep_int440 = $v$0$i;
     $gep441 = (($gep_int440) + 20)|0;
     $185 = $gep441;
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)==(0);
     
     if ($187) {
      $gep_int442 = $v$0$i;
      $gep443 = (($gep_int442) + 16)|0;
      $188 = $gep443;
      $189 = HEAP32[$188>>2]|0;
      $190 = ($189|0)==(0);
      
      if ($190) {
       $R$1$i = 0;
       break;
      } else {
       $R$0$i = $189;$RP$0$i = $188;
      }
     } else {
      $R$0$i = $186;$RP$0$i = $185;
     }
     while(1) {
      
      
      $gep_int444 = $R$0$i;
      $gep445 = (($gep_int444) + 20)|0;
      $191 = $gep445;
      $192 = HEAP32[$191>>2]|0;
      $193 = ($192|0)==(0);
      
      if (!($193)) {
       $RP$0$i$phi = $191;$R$0$i$phi = $192;$RP$0$i = $RP$0$i$phi;$R$0$i = $R$0$i$phi;
       continue;
      }
      $gep_int446 = $R$0$i;
      $gep447 = (($gep_int446) + 16)|0;
      $194 = $gep447;
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==(0);
      
      if ($196) {
       break;
      } else {
       $R$0$i = $195;$RP$0$i = $194;
      }
     }
     $197 = $RP$0$i;
     $198 = ($197>>>0)<($165>>>0);
     
     if ($198) {
      _abort();
      // unreachable
     } else {
      HEAP32[$RP$0$i>>2] = 0;
      
      $R$1$i = $R$0$i;
      break;
     }
    } else {
     $gep_int434 = $v$0$i;
     $gep435 = (($gep_int434) + 8)|0;
     $175 = $gep435;
     $176 = HEAP32[$175>>2]|0;
     $177 = $176;
     $178 = ($177>>>0)<($165>>>0);
     
     if ($178) {
      _abort();
      // unreachable
     }
     $gep_int436 = $176;
     $gep437 = (($gep_int436) + 12)|0;
     $179 = $gep437;
     $180 = HEAP32[$179>>2]|0;
     $181 = ($180|0)==($v$0$i|0);
     
     if (!($181)) {
      _abort();
      // unreachable
     }
     $gep_int438 = $173;
     $gep439 = (($gep_int438) + 8)|0;
     $182 = $gep439;
     $183 = HEAP32[$182>>2]|0;
     $184 = ($183|0)==($v$0$i|0);
     
     if ($184) {
      HEAP32[$179>>2] = $173;
      HEAP32[$182>>2] = $176;
      
      $R$1$i = $173;
      break;
     } else {
      _abort();
      // unreachable
     }
    }
   } while(0);
   
   $199 = ($171|0)==(0);
   
   L78: do {
    if (!($199)) {
     $gep_int448 = $v$0$i;
     $gep449 = (($gep_int448) + 28)|0;
     $200 = $gep449;
     $201 = HEAP32[$200>>2]|0;
     $expanded38 = 16800;
     $gep_int450 = 16800;
     $gep451 = (($gep_int450) + 304)|0;
     $gep_array452 = $201<<2;
     $gep453 = (($gep451) + ($gep_array452))|0;
     $202 = $gep453;
     $203 = HEAP32[$202>>2]|0;
     $204 = ($v$0$i|0)==($203|0);
     
     do {
      if ($204) {
       HEAP32[$202>>2] = $R$1$i;
       $cond$i = ($R$1$i|0)==(0);
       
       if (!($cond$i)) {
        break;
       }
       $205 = 1 << $201;
       $206 = $205 ^ -1;
       $expanded40 = 16800;
       $gep_int454 = 16800;
       $gep455 = (($gep_int454) + 4)|0;
       $expanded39 = $gep455;
       $207 = HEAP32[$expanded39>>2]|0;
       $208 = $207 & $206;
       $expanded42 = 16800;
       $gep_int456 = 16800;
       $gep457 = (($gep_int456) + 4)|0;
       $expanded41 = $gep457;
       HEAP32[$expanded41>>2] = $208;
       
       break L78;
      } else {
       $209 = $171;
       $expanded44 = 16800;
       $gep_int458 = 16800;
       $gep459 = (($gep_int458) + 16)|0;
       $expanded43 = $gep459;
       $210 = HEAP32[$expanded43>>2]|0;
       $211 = ($209>>>0)<($210>>>0);
       
       if ($211) {
        _abort();
        // unreachable
       }
       $gep_int460 = $171;
       $gep461 = (($gep_int460) + 16)|0;
       $212 = $gep461;
       $213 = HEAP32[$212>>2]|0;
       $214 = ($213|0)==($v$0$i|0);
       
       if ($214) {
        HEAP32[$212>>2] = $R$1$i;
        
       } else {
        $gep_int462 = $171;
        $gep463 = (($gep_int462) + 20)|0;
        $215 = $gep463;
        HEAP32[$215>>2] = $R$1$i;
        
       }
       $216 = ($R$1$i|0)==(0);
       
       if ($216) {
        break L78;
       }
      }
     } while(0);
     $217 = $R$1$i;
     $expanded46 = 16800;
     $gep_int464 = 16800;
     $gep465 = (($gep_int464) + 16)|0;
     $expanded45 = $gep465;
     $218 = HEAP32[$expanded45>>2]|0;
     $219 = ($217>>>0)<($218>>>0);
     
     if ($219) {
      _abort();
      // unreachable
     }
     $gep_int466 = $R$1$i;
     $gep467 = (($gep_int466) + 24)|0;
     $220 = $gep467;
     HEAP32[$220>>2] = $171;
     $gep_int468 = $v$0$i;
     $gep469 = (($gep_int468) + 16)|0;
     $221 = $gep469;
     $222 = HEAP32[$221>>2]|0;
     $223 = ($222|0)==(0);
     
     do {
      if (!($223)) {
       $224 = $222;
       $expanded48 = 16800;
       $gep_int470 = 16800;
       $gep471 = (($gep_int470) + 16)|0;
       $expanded47 = $gep471;
       $225 = HEAP32[$expanded47>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       
       if ($226) {
        _abort();
        // unreachable
       } else {
        $gep_int472 = $R$1$i;
        $gep473 = (($gep_int472) + 16)|0;
        $227 = $gep473;
        HEAP32[$227>>2] = $222;
        $gep_int474 = $222;
        $gep475 = (($gep_int474) + 24)|0;
        $228 = $gep475;
        HEAP32[$228>>2] = $R$1$i;
        
        break;
       }
      }
     } while(0);
     $gep_int476 = $v$0$i;
     $gep477 = (($gep_int476) + 20)|0;
     $229 = $gep477;
     $230 = HEAP32[$229>>2]|0;
     $231 = ($230|0)==(0);
     
     if ($231) {
      break;
     }
     $232 = $230;
     $expanded50 = 16800;
     $gep_int478 = 16800;
     $gep479 = (($gep_int478) + 16)|0;
     $expanded49 = $gep479;
     $233 = HEAP32[$expanded49>>2]|0;
     $234 = ($232>>>0)<($233>>>0);
     
     if ($234) {
      _abort();
      // unreachable
     } else {
      $gep_int480 = $R$1$i;
      $gep481 = (($gep_int480) + 20)|0;
      $235 = $gep481;
      HEAP32[$235>>2] = $230;
      $gep_int482 = $230;
      $gep483 = (($gep_int482) + 24)|0;
      $236 = $gep483;
      HEAP32[$236>>2] = $R$1$i;
      
      break;
     }
    }
   } while(0);
   $237 = ($rsize$0$i>>>0)<(16);
   
   if ($237) {
    $238 = (($rsize$0$i) + ($5))|0;
    $239 = $238 | 3;
    $gep_int484 = $v$0$i;
    $gep485 = (($gep_int484) + 4)|0;
    $240 = $gep485;
    HEAP32[$240>>2] = $239;
    $$sum4$i = (($238) + 4)|0;
    $gep_int486 = $v$0$i;
    $gep487 = (($gep_int486) + ($$sum4$i))|0;
    $241 = $gep487;
    $242 = $241;
    $243 = HEAP32[$241>>2]|0;
    $244 = $243 | 1;
    HEAP32[$241>>2] = $244;
    
   } else {
    $245 = $5 | 3;
    $gep_int488 = $v$0$i;
    $gep489 = (($gep_int488) + 4)|0;
    $246 = $gep489;
    HEAP32[$246>>2] = $245;
    $247 = $rsize$0$i | 1;
    $$sum$i37 = $5 | 4;
    $gep_int490 = $v$0$i;
    $gep491 = (($gep_int490) + ($$sum$i37))|0;
    $248 = $gep491;
    $249 = $248;
    HEAP32[$248>>2] = $247;
    $$sum1$i = (($rsize$0$i) + ($5))|0;
    $gep_int492 = $v$0$i;
    $gep493 = (($gep_int492) + ($$sum1$i))|0;
    $250 = $gep493;
    $251 = $250;
    HEAP32[$250>>2] = $rsize$0$i;
    $expanded52 = 16800;
    $gep_int494 = 16800;
    $gep495 = (($gep_int494) + 8)|0;
    $expanded51 = $gep495;
    $252 = HEAP32[$expanded51>>2]|0;
    $253 = ($252|0)==(0);
    
    if (!($253)) {
     $expanded54 = 16800;
     $gep_int496 = 16800;
     $gep497 = (($gep_int496) + 20)|0;
     $expanded53 = $gep497;
     $254 = HEAP32[$expanded53>>2]|0;
     $255 = $252 >>> 3;
     $256 = $255 << 1;
     $expanded55 = 16800;
     $gep_int498 = 16800;
     $gep499 = (($gep_int498) + 40)|0;
     $gep_array500 = $256<<2;
     $gep501 = (($gep499) + ($gep_array500))|0;
     $257 = $gep501;
     $258 = $257;
     $expanded57 = 16800;
     $gep_int502 = 16800;
     $expanded56 = $gep_int502;
     $259 = HEAP32[$expanded56>>2]|0;
     $260 = 1 << $255;
     $261 = $259 & $260;
     $262 = ($261|0)==(0);
     
     do {
      if ($262) {
       $263 = $259 | $260;
       $expanded59 = 16800;
       $gep_int503 = 16800;
       $expanded58 = $gep_int503;
       HEAP32[$expanded58>>2] = $263;
       $$sum2$pre$i = (($256) + 2)|0;
       $expanded60 = 16800;
       $gep_int504 = 16800;
       $gep505 = (($gep_int504) + 40)|0;
       $gep_array506 = $$sum2$pre$i<<2;
       $gep507 = (($gep505) + ($gep_array506))|0;
       $$pre$i = $gep507;
       
       $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $258;
      } else {
       $$sum3$i = (($256) + 2)|0;
       $expanded61 = 16800;
       $gep_int508 = 16800;
       $gep509 = (($gep_int508) + 40)|0;
       $gep_array510 = $$sum3$i<<2;
       $gep511 = (($gep509) + ($gep_array510))|0;
       $264 = $gep511;
       $265 = HEAP32[$264>>2]|0;
       $266 = $265;
       $expanded63 = 16800;
       $gep_int512 = 16800;
       $gep513 = (($gep_int512) + 16)|0;
       $expanded62 = $gep513;
       $267 = HEAP32[$expanded62>>2]|0;
       $268 = ($266>>>0)<($267>>>0);
       
       if (!($268)) {
        $$pre$phi$iZ2D = $264;$F1$0$i = $265;
        break;
       }
       _abort();
       // unreachable
      }
     } while(0);
     
     
     HEAP32[$$pre$phi$iZ2D>>2] = $254;
     $gep_int514 = $F1$0$i;
     $gep515 = (($gep_int514) + 12)|0;
     $269 = $gep515;
     HEAP32[$269>>2] = $254;
     $gep_int516 = $254;
     $gep517 = (($gep_int516) + 8)|0;
     $270 = $gep517;
     HEAP32[$270>>2] = $F1$0$i;
     $gep_int518 = $254;
     $gep519 = (($gep_int518) + 12)|0;
     $271 = $gep519;
     HEAP32[$271>>2] = $258;
     
    }
    $expanded65 = 16800;
    $gep_int520 = 16800;
    $gep521 = (($gep_int520) + 8)|0;
    $expanded64 = $gep521;
    HEAP32[$expanded64>>2] = $rsize$0$i;
    $expanded67 = 16800;
    $gep_int522 = 16800;
    $gep523 = (($gep_int522) + 20)|0;
    $expanded66 = $gep523;
    HEAP32[$expanded66>>2] = $168;
    
   }
   $gep_int524 = $v$0$i;
   $gep525 = (($gep_int524) + 8)|0;
   $272 = $gep525;
   $273 = $272;
   
   $mem$0 = $273;
   
   STACKTOP = sp;return $mem$0|0;
  } else {
   $274 = ($bytes>>>0)>(4294967231);
   
   if ($274) {
    $nb$0 = -1;
    break;
   }
   $275 = (($bytes) + 11)|0;
   $276 = $275 & -8;
   $expanded69 = 16800;
   $gep_int526 = 16800;
   $gep527 = (($gep_int526) + 4)|0;
   $expanded68 = $gep527;
   $277 = HEAP32[$expanded68>>2]|0;
   $278 = ($277|0)==(0);
   
   if ($278) {
    $nb$0 = $276;
    break;
   }
   $279 = (0 - ($276))|0;
   $280 = $275 >>> 8;
   $281 = ($280|0)==(0);
   
   do {
    if ($281) {
     $idx$0$i = 0;
    } else {
     $282 = ($276>>>0)>(16777215);
     
     if ($282) {
      $idx$0$i = 31;
      break;
     }
     $283 = (($280) + 1048320)|0;
     $284 = $283 >>> 16;
     $285 = $284 & 8;
     $286 = $280 << $285;
     $287 = (($286) + 520192)|0;
     $288 = $287 >>> 16;
     $289 = $288 & 4;
     $290 = $289 | $285;
     $291 = $286 << $289;
     $292 = (($291) + 245760)|0;
     $293 = $292 >>> 16;
     $294 = $293 & 2;
     $295 = $290 | $294;
     $296 = (14 - ($295))|0;
     $297 = $291 << $294;
     $298 = $297 >>> 15;
     $299 = (($296) + ($298))|0;
     $300 = $299 << 1;
     $301 = (($299) + 7)|0;
     $302 = $276 >>> $301;
     $303 = $302 & 1;
     $304 = $303 | $300;
     
     $idx$0$i = $304;
    }
   } while(0);
   
   $expanded70 = 16800;
   $gep_int528 = 16800;
   $gep529 = (($gep_int528) + 304)|0;
   $gep_array530 = $idx$0$i<<2;
   $gep531 = (($gep529) + ($gep_array530))|0;
   $305 = $gep531;
   $306 = HEAP32[$305>>2]|0;
   $307 = ($306|0)==(0);
   
   L126: do {
    if ($307) {
     $rsize$2$i = $279;$t$1$i = 0;$v$2$i = 0;
    } else {
     $308 = ($idx$0$i|0)==(31);
     
     if ($308) {
      $311 = 0;
     } else {
      $309 = $idx$0$i >>> 1;
      $310 = (25 - ($309))|0;
      
      $311 = $310;
     }
     
     $312 = $276 << $311;
     
     $rsize$0$i17 = $279;$rst$0$i = 0;$sizebits$0$i = $312;$t$0$i16 = $306;$v$0$i18 = 0;
     while(1) {
      
      
      
      
      
      $gep_int532 = $t$0$i16;
      $gep533 = (($gep_int532) + 4)|0;
      $313 = $gep533;
      $314 = HEAP32[$313>>2]|0;
      $315 = $314 & -8;
      $316 = (($315) - ($276))|0;
      $317 = ($316>>>0)<($rsize$0$i17>>>0);
      
      if ($317) {
       $318 = ($315|0)==($276|0);
       
       if ($318) {
        $rsize$2$i = $316;$t$1$i = $t$0$i16;$v$2$i = $t$0$i16;
        break L126;
       } else {
        $rsize$1$i = $316;$v$1$i = $t$0$i16;
       }
      } else {
       $rsize$1$i = $rsize$0$i17;$v$1$i = $v$0$i18;
      }
      
      
      $gep_int534 = $t$0$i16;
      $gep535 = (($gep_int534) + 20)|0;
      $319 = $gep535;
      $320 = HEAP32[$319>>2]|0;
      $321 = $sizebits$0$i >>> 31;
      $gep_int536 = $t$0$i16;
      $gep537 = (($gep_int536) + 16)|0;
      $gep_array538 = $321<<2;
      $gep539 = (($gep537) + ($gep_array538))|0;
      $322 = $gep539;
      $323 = HEAP32[$322>>2]|0;
      $324 = ($320|0)==(0);
      $325 = ($320|0)==($323|0);
      $or$cond$i = $324 | $325;
      $rst$1$i = $or$cond$i ? $rst$0$i : $320;
      $326 = ($323|0)==(0);
      $327 = $sizebits$0$i << 1;
      
      if ($326) {
       $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
       break;
      } else {
       $rsize$0$i17 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $327;$t$0$i16 = $323;$v$0$i18 = $v$1$i;
      }
     }
    }
   } while(0);
   
   
   
   $328 = ($t$1$i|0)==(0);
   $329 = ($v$2$i|0)==(0);
   $or$cond21$i = $328 & $329;
   
   if ($or$cond21$i) {
    $330 = 2 << $idx$0$i;
    $331 = (0 - ($330))|0;
    $332 = $330 | $331;
    $333 = $277 & $332;
    $334 = ($333|0)==(0);
    
    if ($334) {
     $nb$0 = $276;
     break;
    }
    $335 = (0 - ($333))|0;
    $336 = $333 & $335;
    $337 = (($336) + -1)|0;
    $338 = $337 >>> 12;
    $339 = $338 & 16;
    $340 = $337 >>> $339;
    $341 = $340 >>> 5;
    $342 = $341 & 8;
    $343 = $342 | $339;
    $344 = $340 >>> $342;
    $345 = $344 >>> 2;
    $346 = $345 & 4;
    $347 = $343 | $346;
    $348 = $344 >>> $346;
    $349 = $348 >>> 1;
    $350 = $349 & 2;
    $351 = $347 | $350;
    $352 = $348 >>> $350;
    $353 = $352 >>> 1;
    $354 = $353 & 1;
    $355 = $351 | $354;
    $356 = $352 >>> $354;
    $357 = (($355) + ($356))|0;
    $expanded71 = 16800;
    $gep_int540 = 16800;
    $gep541 = (($gep_int540) + 304)|0;
    $gep_array542 = $357<<2;
    $gep543 = (($gep541) + ($gep_array542))|0;
    $358 = $gep543;
    $359 = HEAP32[$358>>2]|0;
    
    $t$2$ph$i = $359;
   } else {
    $t$2$ph$i = $t$1$i;
   }
   
   $360 = ($t$2$ph$i|0)==(0);
   
   if ($360) {
    $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
   } else {
    $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
    while(1) {
     
     
     
     $gep_int544 = $t$230$i;
     $gep545 = (($gep_int544) + 4)|0;
     $361 = $gep545;
     $362 = HEAP32[$361>>2]|0;
     $363 = $362 & -8;
     $364 = (($363) - ($276))|0;
     $365 = ($364>>>0)<($rsize$331$i>>>0);
     $$rsize$3$i = $365 ? $364 : $rsize$331$i;
     $t$2$v$3$i = $365 ? $t$230$i : $v$332$i;
     $gep_int546 = $t$230$i;
     $gep547 = (($gep_int546) + 16)|0;
     $366 = $gep547;
     $367 = HEAP32[$366>>2]|0;
     $368 = ($367|0)==(0);
     
     if (!($368)) {
      $v$332$i$phi = $t$2$v$3$i;$t$230$i$phi = $367;$rsize$331$i$phi = $$rsize$3$i;$v$332$i = $v$332$i$phi;$t$230$i = $t$230$i$phi;$rsize$331$i = $rsize$331$i$phi;
      continue;
     }
     $gep_int548 = $t$230$i;
     $gep549 = (($gep_int548) + 20)|0;
     $369 = $gep549;
     $370 = HEAP32[$369>>2]|0;
     $371 = ($370|0)==(0);
     
     if ($371) {
      $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
      break;
     } else {
      $v$332$i$phi = $t$2$v$3$i;$rsize$331$i$phi = $$rsize$3$i;$t$230$i = $370;$v$332$i = $v$332$i$phi;$rsize$331$i = $rsize$331$i$phi;
     }
    }
   }
   
   
   $372 = ($v$3$lcssa$i|0)==(0);
   
   if ($372) {
    $nb$0 = $276;
    break;
   }
   $expanded73 = 16800;
   $gep_int550 = 16800;
   $gep551 = (($gep_int550) + 8)|0;
   $expanded72 = $gep551;
   $373 = HEAP32[$expanded72>>2]|0;
   $374 = (($373) - ($276))|0;
   $375 = ($rsize$3$lcssa$i>>>0)<($374>>>0);
   
   if (!($375)) {
    $nb$0 = $276;
    break;
   }
   $376 = $v$3$lcssa$i;
   $expanded75 = 16800;
   $gep_int552 = 16800;
   $gep553 = (($gep_int552) + 16)|0;
   $expanded74 = $gep553;
   $377 = HEAP32[$expanded74>>2]|0;
   $378 = ($376>>>0)<($377>>>0);
   
   if ($378) {
    _abort();
    // unreachable
   }
   $gep_int554 = $v$3$lcssa$i;
   $gep555 = (($gep_int554) + ($276))|0;
   $379 = $gep555;
   $380 = $379;
   $381 = ($376>>>0)<($379>>>0);
   
   if (!($381)) {
    _abort();
    // unreachable
   }
   $gep_int556 = $v$3$lcssa$i;
   $gep557 = (($gep_int556) + 24)|0;
   $382 = $gep557;
   $383 = HEAP32[$382>>2]|0;
   $gep_int558 = $v$3$lcssa$i;
   $gep559 = (($gep_int558) + 12)|0;
   $384 = $gep559;
   $385 = HEAP32[$384>>2]|0;
   $386 = ($385|0)==($v$3$lcssa$i|0);
   
   do {
    if ($386) {
     $gep_int566 = $v$3$lcssa$i;
     $gep567 = (($gep_int566) + 20)|0;
     $397 = $gep567;
     $398 = HEAP32[$397>>2]|0;
     $399 = ($398|0)==(0);
     
     if ($399) {
      $gep_int568 = $v$3$lcssa$i;
      $gep569 = (($gep_int568) + 16)|0;
      $400 = $gep569;
      $401 = HEAP32[$400>>2]|0;
      $402 = ($401|0)==(0);
      
      if ($402) {
       $R$1$i22 = 0;
       break;
      } else {
       $R$0$i20 = $401;$RP$0$i19 = $400;
      }
     } else {
      $R$0$i20 = $398;$RP$0$i19 = $397;
     }
     while(1) {
      
      
      $gep_int570 = $R$0$i20;
      $gep571 = (($gep_int570) + 20)|0;
      $403 = $gep571;
      $404 = HEAP32[$403>>2]|0;
      $405 = ($404|0)==(0);
      
      if (!($405)) {
       $RP$0$i19$phi = $403;$R$0$i20$phi = $404;$RP$0$i19 = $RP$0$i19$phi;$R$0$i20 = $R$0$i20$phi;
       continue;
      }
      $gep_int572 = $R$0$i20;
      $gep573 = (($gep_int572) + 16)|0;
      $406 = $gep573;
      $407 = HEAP32[$406>>2]|0;
      $408 = ($407|0)==(0);
      
      if ($408) {
       break;
      } else {
       $R$0$i20 = $407;$RP$0$i19 = $406;
      }
     }
     $409 = $RP$0$i19;
     $410 = ($409>>>0)<($377>>>0);
     
     if ($410) {
      _abort();
      // unreachable
     } else {
      HEAP32[$RP$0$i19>>2] = 0;
      
      $R$1$i22 = $R$0$i20;
      break;
     }
    } else {
     $gep_int560 = $v$3$lcssa$i;
     $gep561 = (($gep_int560) + 8)|0;
     $387 = $gep561;
     $388 = HEAP32[$387>>2]|0;
     $389 = $388;
     $390 = ($389>>>0)<($377>>>0);
     
     if ($390) {
      _abort();
      // unreachable
     }
     $gep_int562 = $388;
     $gep563 = (($gep_int562) + 12)|0;
     $391 = $gep563;
     $392 = HEAP32[$391>>2]|0;
     $393 = ($392|0)==($v$3$lcssa$i|0);
     
     if (!($393)) {
      _abort();
      // unreachable
     }
     $gep_int564 = $385;
     $gep565 = (($gep_int564) + 8)|0;
     $394 = $gep565;
     $395 = HEAP32[$394>>2]|0;
     $396 = ($395|0)==($v$3$lcssa$i|0);
     
     if ($396) {
      HEAP32[$391>>2] = $385;
      HEAP32[$394>>2] = $388;
      
      $R$1$i22 = $385;
      break;
     } else {
      _abort();
      // unreachable
     }
    }
   } while(0);
   
   $411 = ($383|0)==(0);
   
   L176: do {
    if (!($411)) {
     $gep_int574 = $v$3$lcssa$i;
     $gep575 = (($gep_int574) + 28)|0;
     $412 = $gep575;
     $413 = HEAP32[$412>>2]|0;
     $expanded76 = 16800;
     $gep_int576 = 16800;
     $gep577 = (($gep_int576) + 304)|0;
     $gep_array578 = $413<<2;
     $gep579 = (($gep577) + ($gep_array578))|0;
     $414 = $gep579;
     $415 = HEAP32[$414>>2]|0;
     $416 = ($v$3$lcssa$i|0)==($415|0);
     
     do {
      if ($416) {
       HEAP32[$414>>2] = $R$1$i22;
       $cond$i23 = ($R$1$i22|0)==(0);
       
       if (!($cond$i23)) {
        break;
       }
       $417 = 1 << $413;
       $418 = $417 ^ -1;
       $expanded78 = 16800;
       $gep_int580 = 16800;
       $gep581 = (($gep_int580) + 4)|0;
       $expanded77 = $gep581;
       $419 = HEAP32[$expanded77>>2]|0;
       $420 = $419 & $418;
       $expanded80 = 16800;
       $gep_int582 = 16800;
       $gep583 = (($gep_int582) + 4)|0;
       $expanded79 = $gep583;
       HEAP32[$expanded79>>2] = $420;
       
       break L176;
      } else {
       $421 = $383;
       $expanded82 = 16800;
       $gep_int584 = 16800;
       $gep585 = (($gep_int584) + 16)|0;
       $expanded81 = $gep585;
       $422 = HEAP32[$expanded81>>2]|0;
       $423 = ($421>>>0)<($422>>>0);
       
       if ($423) {
        _abort();
        // unreachable
       }
       $gep_int586 = $383;
       $gep587 = (($gep_int586) + 16)|0;
       $424 = $gep587;
       $425 = HEAP32[$424>>2]|0;
       $426 = ($425|0)==($v$3$lcssa$i|0);
       
       if ($426) {
        HEAP32[$424>>2] = $R$1$i22;
        
       } else {
        $gep_int588 = $383;
        $gep589 = (($gep_int588) + 20)|0;
        $427 = $gep589;
        HEAP32[$427>>2] = $R$1$i22;
        
       }
       $428 = ($R$1$i22|0)==(0);
       
       if ($428) {
        break L176;
       }
      }
     } while(0);
     $429 = $R$1$i22;
     $expanded84 = 16800;
     $gep_int590 = 16800;
     $gep591 = (($gep_int590) + 16)|0;
     $expanded83 = $gep591;
     $430 = HEAP32[$expanded83>>2]|0;
     $431 = ($429>>>0)<($430>>>0);
     
     if ($431) {
      _abort();
      // unreachable
     }
     $gep_int592 = $R$1$i22;
     $gep593 = (($gep_int592) + 24)|0;
     $432 = $gep593;
     HEAP32[$432>>2] = $383;
     $gep_int594 = $v$3$lcssa$i;
     $gep595 = (($gep_int594) + 16)|0;
     $433 = $gep595;
     $434 = HEAP32[$433>>2]|0;
     $435 = ($434|0)==(0);
     
     do {
      if (!($435)) {
       $436 = $434;
       $expanded86 = 16800;
       $gep_int596 = 16800;
       $gep597 = (($gep_int596) + 16)|0;
       $expanded85 = $gep597;
       $437 = HEAP32[$expanded85>>2]|0;
       $438 = ($436>>>0)<($437>>>0);
       
       if ($438) {
        _abort();
        // unreachable
       } else {
        $gep_int598 = $R$1$i22;
        $gep599 = (($gep_int598) + 16)|0;
        $439 = $gep599;
        HEAP32[$439>>2] = $434;
        $gep_int600 = $434;
        $gep601 = (($gep_int600) + 24)|0;
        $440 = $gep601;
        HEAP32[$440>>2] = $R$1$i22;
        
        break;
       }
      }
     } while(0);
     $gep_int602 = $v$3$lcssa$i;
     $gep603 = (($gep_int602) + 20)|0;
     $441 = $gep603;
     $442 = HEAP32[$441>>2]|0;
     $443 = ($442|0)==(0);
     
     if ($443) {
      break;
     }
     $444 = $442;
     $expanded88 = 16800;
     $gep_int604 = 16800;
     $gep605 = (($gep_int604) + 16)|0;
     $expanded87 = $gep605;
     $445 = HEAP32[$expanded87>>2]|0;
     $446 = ($444>>>0)<($445>>>0);
     
     if ($446) {
      _abort();
      // unreachable
     } else {
      $gep_int606 = $R$1$i22;
      $gep607 = (($gep_int606) + 20)|0;
      $447 = $gep607;
      HEAP32[$447>>2] = $442;
      $gep_int608 = $442;
      $gep609 = (($gep_int608) + 24)|0;
      $448 = $gep609;
      HEAP32[$448>>2] = $R$1$i22;
      
      break;
     }
    }
   } while(0);
   $449 = ($rsize$3$lcssa$i>>>0)<(16);
   
   L204: do {
    if ($449) {
     $450 = (($rsize$3$lcssa$i) + ($276))|0;
     $451 = $450 | 3;
     $gep_int610 = $v$3$lcssa$i;
     $gep611 = (($gep_int610) + 4)|0;
     $452 = $gep611;
     HEAP32[$452>>2] = $451;
     $$sum19$i = (($450) + 4)|0;
     $gep_int612 = $v$3$lcssa$i;
     $gep613 = (($gep_int612) + ($$sum19$i))|0;
     $453 = $gep613;
     $454 = $453;
     $455 = HEAP32[$453>>2]|0;
     $456 = $455 | 1;
     HEAP32[$453>>2] = $456;
     
    } else {
     $457 = $276 | 3;
     $gep_int614 = $v$3$lcssa$i;
     $gep615 = (($gep_int614) + 4)|0;
     $458 = $gep615;
     HEAP32[$458>>2] = $457;
     $459 = $rsize$3$lcssa$i | 1;
     $$sum$i2536 = $276 | 4;
     $gep_int616 = $v$3$lcssa$i;
     $gep617 = (($gep_int616) + ($$sum$i2536))|0;
     $460 = $gep617;
     $461 = $460;
     HEAP32[$460>>2] = $459;
     $$sum1$i26 = (($rsize$3$lcssa$i) + ($276))|0;
     $gep_int618 = $v$3$lcssa$i;
     $gep619 = (($gep_int618) + ($$sum1$i26))|0;
     $462 = $gep619;
     $463 = $462;
     HEAP32[$462>>2] = $rsize$3$lcssa$i;
     $464 = $rsize$3$lcssa$i >>> 3;
     $465 = ($rsize$3$lcssa$i>>>0)<(256);
     
     if ($465) {
      $466 = $464 << 1;
      $expanded89 = 16800;
      $gep_int620 = 16800;
      $gep621 = (($gep_int620) + 40)|0;
      $gep_array622 = $466<<2;
      $gep623 = (($gep621) + ($gep_array622))|0;
      $467 = $gep623;
      $468 = $467;
      $expanded91 = 16800;
      $gep_int624 = 16800;
      $expanded90 = $gep_int624;
      $469 = HEAP32[$expanded90>>2]|0;
      $470 = 1 << $464;
      $471 = $469 & $470;
      $472 = ($471|0)==(0);
      
      do {
       if ($472) {
        $473 = $469 | $470;
        $expanded93 = 16800;
        $gep_int625 = 16800;
        $expanded92 = $gep_int625;
        HEAP32[$expanded92>>2] = $473;
        $$sum15$pre$i = (($466) + 2)|0;
        $expanded94 = 16800;
        $gep_int626 = 16800;
        $gep627 = (($gep_int626) + 40)|0;
        $gep_array628 = $$sum15$pre$i<<2;
        $gep629 = (($gep627) + ($gep_array628))|0;
        $$pre$i27 = $gep629;
        
        $$pre$phi$i28Z2D = $$pre$i27;$F5$0$i = $468;
       } else {
        $$sum18$i = (($466) + 2)|0;
        $expanded95 = 16800;
        $gep_int630 = 16800;
        $gep631 = (($gep_int630) + 40)|0;
        $gep_array632 = $$sum18$i<<2;
        $gep633 = (($gep631) + ($gep_array632))|0;
        $474 = $gep633;
        $475 = HEAP32[$474>>2]|0;
        $476 = $475;
        $expanded97 = 16800;
        $gep_int634 = 16800;
        $gep635 = (($gep_int634) + 16)|0;
        $expanded96 = $gep635;
        $477 = HEAP32[$expanded96>>2]|0;
        $478 = ($476>>>0)<($477>>>0);
        
        if (!($478)) {
         $$pre$phi$i28Z2D = $474;$F5$0$i = $475;
         break;
        }
        _abort();
        // unreachable
       }
      } while(0);
      
      
      HEAP32[$$pre$phi$i28Z2D>>2] = $380;
      $gep_int636 = $F5$0$i;
      $gep637 = (($gep_int636) + 12)|0;
      $479 = $gep637;
      HEAP32[$479>>2] = $380;
      $$sum16$i = (($276) + 8)|0;
      $gep_int638 = $v$3$lcssa$i;
      $gep639 = (($gep_int638) + ($$sum16$i))|0;
      $480 = $gep639;
      $481 = $480;
      HEAP32[$480>>2] = $F5$0$i;
      $$sum17$i = (($276) + 12)|0;
      $gep_int640 = $v$3$lcssa$i;
      $gep641 = (($gep_int640) + ($$sum17$i))|0;
      $482 = $gep641;
      $483 = $482;
      HEAP32[$482>>2] = $468;
      
      break;
     }
     $484 = $379;
     $485 = $rsize$3$lcssa$i >>> 8;
     $486 = ($485|0)==(0);
     
     do {
      if ($486) {
       $I7$0$i = 0;
      } else {
       $487 = ($rsize$3$lcssa$i>>>0)>(16777215);
       
       if ($487) {
        $I7$0$i = 31;
        break;
       }
       $488 = (($485) + 1048320)|0;
       $489 = $488 >>> 16;
       $490 = $489 & 8;
       $491 = $485 << $490;
       $492 = (($491) + 520192)|0;
       $493 = $492 >>> 16;
       $494 = $493 & 4;
       $495 = $494 | $490;
       $496 = $491 << $494;
       $497 = (($496) + 245760)|0;
       $498 = $497 >>> 16;
       $499 = $498 & 2;
       $500 = $495 | $499;
       $501 = (14 - ($500))|0;
       $502 = $496 << $499;
       $503 = $502 >>> 15;
       $504 = (($501) + ($503))|0;
       $505 = $504 << 1;
       $506 = (($504) + 7)|0;
       $507 = $rsize$3$lcssa$i >>> $506;
       $508 = $507 & 1;
       $509 = $508 | $505;
       
       $I7$0$i = $509;
      }
     } while(0);
     
     $expanded98 = 16800;
     $gep_int642 = 16800;
     $gep643 = (($gep_int642) + 304)|0;
     $gep_array644 = $I7$0$i<<2;
     $gep645 = (($gep643) + ($gep_array644))|0;
     $510 = $gep645;
     $$sum2$i = (($276) + 28)|0;
     $gep_int646 = $v$3$lcssa$i;
     $gep647 = (($gep_int646) + ($$sum2$i))|0;
     $511 = $gep647;
     $512 = $511;
     HEAP32[$511>>2] = $I7$0$i;
     $$sum3$i29 = (($276) + 16)|0;
     $gep_int648 = $v$3$lcssa$i;
     $gep649 = (($gep_int648) + ($$sum3$i29))|0;
     $513 = $gep649;
     $$sum4$i30 = (($276) + 20)|0;
     $gep_int650 = $v$3$lcssa$i;
     $gep651 = (($gep_int650) + ($$sum4$i30))|0;
     $514 = $gep651;
     $515 = $514;
     HEAP32[$514>>2] = 0;
     $516 = $513;
     HEAP32[$513>>2] = 0;
     $expanded100 = 16800;
     $gep_int652 = 16800;
     $gep653 = (($gep_int652) + 4)|0;
     $expanded99 = $gep653;
     $517 = HEAP32[$expanded99>>2]|0;
     $518 = 1 << $I7$0$i;
     $519 = $517 & $518;
     $520 = ($519|0)==(0);
     
     if ($520) {
      $521 = $517 | $518;
      $expanded102 = 16800;
      $gep_int654 = 16800;
      $gep655 = (($gep_int654) + 4)|0;
      $expanded101 = $gep655;
      HEAP32[$expanded101>>2] = $521;
      HEAP32[$510>>2] = $484;
      $522 = $510;
      $$sum5$i = (($276) + 24)|0;
      $gep_int656 = $v$3$lcssa$i;
      $gep657 = (($gep_int656) + ($$sum5$i))|0;
      $523 = $gep657;
      $524 = $523;
      HEAP32[$523>>2] = $522;
      $$sum6$i = (($276) + 12)|0;
      $gep_int658 = $v$3$lcssa$i;
      $gep659 = (($gep_int658) + ($$sum6$i))|0;
      $525 = $gep659;
      $526 = $525;
      HEAP32[$525>>2] = $484;
      $$sum7$i = (($276) + 8)|0;
      $gep_int660 = $v$3$lcssa$i;
      $gep661 = (($gep_int660) + ($$sum7$i))|0;
      $527 = $gep661;
      $528 = $527;
      HEAP32[$527>>2] = $484;
      
      break;
     }
     $529 = HEAP32[$510>>2]|0;
     $530 = ($I7$0$i|0)==(31);
     
     if ($530) {
      $533 = 0;
     } else {
      $531 = $I7$0$i >>> 1;
      $532 = (25 - ($531))|0;
      
      $533 = $532;
     }
     
     $gep_int662 = $529;
     $gep663 = (($gep_int662) + 4)|0;
     $534 = $gep663;
     $535 = HEAP32[$534>>2]|0;
     $536 = $535 & -8;
     $537 = ($536|0)==($rsize$3$lcssa$i|0);
     
     L225: do {
      if ($537) {
       $T$0$lcssa$i = $529;
      } else {
       $538 = $rsize$3$lcssa$i << $533;
       
       $K12$027$i = $538;$T$026$i = $529;
       while(1) {
        
        
        $544 = $K12$027$i >>> 31;
        $gep_int666 = $T$026$i;
        $gep667 = (($gep_int666) + 16)|0;
        $gep_array668 = $544<<2;
        $gep669 = (($gep667) + ($gep_array668))|0;
        $545 = $gep669;
        $546 = HEAP32[$545>>2]|0;
        $547 = ($546|0)==(0);
        
        if ($547) {
         break;
        }
        $539 = $K12$027$i << 1;
        $gep_int664 = $546;
        $gep665 = (($gep_int664) + 4)|0;
        $540 = $gep665;
        $541 = HEAP32[$540>>2]|0;
        $542 = $541 & -8;
        $543 = ($542|0)==($rsize$3$lcssa$i|0);
        
        if ($543) {
         $T$0$lcssa$i = $546;
         break L225;
        } else {
         $T$026$i$phi = $546;$K12$027$i = $539;$T$026$i = $T$026$i$phi;
        }
       }
       $548 = $545;
       $expanded104 = 16800;
       $gep_int670 = 16800;
       $gep671 = (($gep_int670) + 16)|0;
       $expanded103 = $gep671;
       $549 = HEAP32[$expanded103>>2]|0;
       $550 = ($548>>>0)<($549>>>0);
       
       if ($550) {
        _abort();
        // unreachable
       } else {
        HEAP32[$545>>2] = $484;
        $$sum12$i = (($276) + 24)|0;
        $gep_int672 = $v$3$lcssa$i;
        $gep673 = (($gep_int672) + ($$sum12$i))|0;
        $551 = $gep673;
        $552 = $551;
        HEAP32[$551>>2] = $T$026$i;
        $$sum13$i = (($276) + 12)|0;
        $gep_int674 = $v$3$lcssa$i;
        $gep675 = (($gep_int674) + ($$sum13$i))|0;
        $553 = $gep675;
        $554 = $553;
        HEAP32[$553>>2] = $484;
        $$sum14$i = (($276) + 8)|0;
        $gep_int676 = $v$3$lcssa$i;
        $gep677 = (($gep_int676) + ($$sum14$i))|0;
        $555 = $gep677;
        $556 = $555;
        HEAP32[$555>>2] = $484;
        
        break L204;
       }
      }
     } while(0);
     
     $gep_int678 = $T$0$lcssa$i;
     $gep679 = (($gep_int678) + 8)|0;
     $557 = $gep679;
     $558 = HEAP32[$557>>2]|0;
     $559 = $T$0$lcssa$i;
     $expanded106 = 16800;
     $gep_int680 = 16800;
     $gep681 = (($gep_int680) + 16)|0;
     $expanded105 = $gep681;
     $560 = HEAP32[$expanded105>>2]|0;
     $561 = ($559>>>0)<($560>>>0);
     
     if ($561) {
      _abort();
      // unreachable
     }
     $562 = $558;
     $563 = ($562>>>0)<($560>>>0);
     
     if ($563) {
      _abort();
      // unreachable
     } else {
      $gep_int682 = $558;
      $gep683 = (($gep_int682) + 12)|0;
      $564 = $gep683;
      HEAP32[$564>>2] = $484;
      HEAP32[$557>>2] = $484;
      $$sum9$i = (($276) + 8)|0;
      $gep_int684 = $v$3$lcssa$i;
      $gep685 = (($gep_int684) + ($$sum9$i))|0;
      $565 = $gep685;
      $566 = $565;
      HEAP32[$565>>2] = $558;
      $$sum10$i = (($276) + 12)|0;
      $gep_int686 = $v$3$lcssa$i;
      $gep687 = (($gep_int686) + ($$sum10$i))|0;
      $567 = $gep687;
      $568 = $567;
      HEAP32[$567>>2] = $T$0$lcssa$i;
      $$sum11$i = (($276) + 24)|0;
      $gep_int688 = $v$3$lcssa$i;
      $gep689 = (($gep_int688) + ($$sum11$i))|0;
      $569 = $gep689;
      $570 = $569;
      HEAP32[$569>>2] = 0;
      
      break;
     }
    }
   } while(0);
   $gep_int690 = $v$3$lcssa$i;
   $gep691 = (($gep_int690) + 8)|0;
   $571 = $gep691;
   $572 = $571;
   
   $mem$0 = $572;
   
   STACKTOP = sp;return $mem$0|0;
  }
 } while(0);
 
 $expanded108 = 16800;
 $gep_int692 = 16800;
 $gep693 = (($gep_int692) + 8)|0;
 $expanded107 = $gep693;
 $573 = HEAP32[$expanded107>>2]|0;
 $574 = ($nb$0>>>0)>($573>>>0);
 
 if (!($574)) {
  $575 = (($573) - ($nb$0))|0;
  $expanded110 = 16800;
  $gep_int694 = 16800;
  $gep695 = (($gep_int694) + 20)|0;
  $expanded109 = $gep695;
  $576 = HEAP32[$expanded109>>2]|0;
  $577 = ($575>>>0)>(15);
  
  if ($577) {
   $578 = $576;
   $gep_int696 = $576;
   $gep697 = (($gep_int696) + ($nb$0))|0;
   $579 = $gep697;
   $580 = $579;
   $expanded112 = 16800;
   $gep_int698 = 16800;
   $gep699 = (($gep_int698) + 20)|0;
   $expanded111 = $gep699;
   HEAP32[$expanded111>>2] = $580;
   $expanded114 = 16800;
   $gep_int700 = 16800;
   $gep701 = (($gep_int700) + 8)|0;
   $expanded113 = $gep701;
   HEAP32[$expanded113>>2] = $575;
   $581 = $575 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $gep_int702 = $576;
   $gep703 = (($gep_int702) + ($$sum2))|0;
   $582 = $gep703;
   $583 = $582;
   HEAP32[$582>>2] = $581;
   $gep_int704 = $576;
   $gep705 = (($gep_int704) + ($573))|0;
   $584 = $gep705;
   $585 = $584;
   HEAP32[$584>>2] = $575;
   $586 = $nb$0 | 3;
   $gep_int706 = $576;
   $gep707 = (($gep_int706) + 4)|0;
   $587 = $gep707;
   HEAP32[$587>>2] = $586;
   
  } else {
   $expanded116 = 16800;
   $gep_int708 = 16800;
   $gep709 = (($gep_int708) + 8)|0;
   $expanded115 = $gep709;
   HEAP32[$expanded115>>2] = 0;
   $expanded118 = 16800;
   $gep_int710 = 16800;
   $gep711 = (($gep_int710) + 20)|0;
   $expanded117 = $gep711;
   HEAP32[$expanded117>>2] = 0;
   $588 = $573 | 3;
   $gep_int712 = $576;
   $gep713 = (($gep_int712) + 4)|0;
   $589 = $gep713;
   HEAP32[$589>>2] = $588;
   $590 = $576;
   $$sum1 = (($573) + 4)|0;
   $gep_int714 = $576;
   $gep715 = (($gep_int714) + ($$sum1))|0;
   $591 = $gep715;
   $592 = $591;
   $593 = HEAP32[$591>>2]|0;
   $594 = $593 | 1;
   HEAP32[$591>>2] = $594;
   
  }
  $gep_int716 = $576;
  $gep717 = (($gep_int716) + 8)|0;
  $595 = $gep717;
  $596 = $595;
  
  $mem$0 = $596;
  
  STACKTOP = sp;return $mem$0|0;
 }
 $expanded120 = 16800;
 $gep_int718 = 16800;
 $gep719 = (($gep_int718) + 12)|0;
 $expanded119 = $gep719;
 $597 = HEAP32[$expanded119>>2]|0;
 $598 = ($nb$0>>>0)<($597>>>0);
 
 if ($598) {
  $599 = (($597) - ($nb$0))|0;
  $expanded122 = 16800;
  $gep_int720 = 16800;
  $gep721 = (($gep_int720) + 12)|0;
  $expanded121 = $gep721;
  HEAP32[$expanded121>>2] = $599;
  $expanded124 = 16800;
  $gep_int722 = 16800;
  $gep723 = (($gep_int722) + 24)|0;
  $expanded123 = $gep723;
  $600 = HEAP32[$expanded123>>2]|0;
  $601 = $600;
  $gep_int724 = $600;
  $gep725 = (($gep_int724) + ($nb$0))|0;
  $602 = $gep725;
  $603 = $602;
  $expanded126 = 16800;
  $gep_int726 = 16800;
  $gep727 = (($gep_int726) + 24)|0;
  $expanded125 = $gep727;
  HEAP32[$expanded125>>2] = $603;
  $604 = $599 | 1;
  $$sum = (($nb$0) + 4)|0;
  $gep_int728 = $600;
  $gep729 = (($gep_int728) + ($$sum))|0;
  $605 = $gep729;
  $606 = $605;
  HEAP32[$605>>2] = $604;
  $607 = $nb$0 | 3;
  $gep_int730 = $600;
  $gep731 = (($gep_int730) + 4)|0;
  $608 = $gep731;
  HEAP32[$608>>2] = $607;
  $gep_int732 = $600;
  $gep733 = (($gep_int732) + 8)|0;
  $609 = $gep733;
  $610 = $609;
  
  $mem$0 = $610;
  
  STACKTOP = sp;return $mem$0|0;
 }
 $expanded128 = 17272;
 $gep_int734 = 17272;
 $expanded127 = $gep_int734;
 $611 = HEAP32[$expanded127>>2]|0;
 $612 = ($611|0)==(0);
 
 do {
  if ($612) {
   $613 = _sysconf(30)|0;
   $614 = (($613) + -1)|0;
   $615 = $614 & $613;
   $616 = ($615|0)==(0);
   
   if ($616) {
    $expanded130 = 17272;
    $gep_int735 = 17272;
    $gep736 = (($gep_int735) + 8)|0;
    $expanded129 = $gep736;
    HEAP32[$expanded129>>2] = $613;
    $expanded132 = 17272;
    $gep_int737 = 17272;
    $gep738 = (($gep_int737) + 4)|0;
    $expanded131 = $gep738;
    HEAP32[$expanded131>>2] = $613;
    $expanded134 = 17272;
    $gep_int739 = 17272;
    $gep740 = (($gep_int739) + 12)|0;
    $expanded133 = $gep740;
    HEAP32[$expanded133>>2] = -1;
    $expanded136 = 17272;
    $gep_int741 = 17272;
    $gep742 = (($gep_int741) + 16)|0;
    $expanded135 = $gep742;
    HEAP32[$expanded135>>2] = -1;
    $expanded138 = 17272;
    $gep_int743 = 17272;
    $gep744 = (($gep_int743) + 20)|0;
    $expanded137 = $gep744;
    HEAP32[$expanded137>>2] = 0;
    $expanded140 = 16800;
    $gep_int745 = 16800;
    $gep746 = (($gep_int745) + 444)|0;
    $expanded139 = $gep746;
    HEAP32[$expanded139>>2] = 0;
    $617 = _time(0)|0;
    $618 = $617 & -16;
    $619 = $618 ^ 1431655768;
    $expanded142 = 17272;
    $gep_int747 = 17272;
    $expanded141 = $gep_int747;
    HEAP32[$expanded141>>2] = $619;
    
    break;
   } else {
    _abort();
    // unreachable
   }
  }
 } while(0);
 $620 = (($nb$0) + 48)|0;
 $expanded144 = 17272;
 $gep_int748 = 17272;
 $gep749 = (($gep_int748) + 8)|0;
 $expanded143 = $gep749;
 $621 = HEAP32[$expanded143>>2]|0;
 $622 = (($nb$0) + 47)|0;
 $623 = (($621) + ($622))|0;
 $624 = (0 - ($621))|0;
 $625 = $623 & $624;
 $626 = ($625>>>0)>($nb$0>>>0);
 
 if (!($626)) {
  $mem$0 = 0;
  
  STACKTOP = sp;return $mem$0|0;
 }
 $expanded146 = 16800;
 $gep_int750 = 16800;
 $gep751 = (($gep_int750) + 440)|0;
 $expanded145 = $gep751;
 $627 = HEAP32[$expanded145>>2]|0;
 $628 = ($627|0)==(0);
 
 do {
  if (!($628)) {
   $expanded148 = 16800;
   $gep_int752 = 16800;
   $gep753 = (($gep_int752) + 432)|0;
   $expanded147 = $gep753;
   $629 = HEAP32[$expanded147>>2]|0;
   $630 = (($629) + ($625))|0;
   $631 = ($630>>>0)<=($629>>>0);
   $632 = ($630>>>0)>($627>>>0);
   $or$cond1$i = $631 | $632;
   
   if ($or$cond1$i) {
    $mem$0 = 0;
   } else {
    break;
   }
   
   STACKTOP = sp;return $mem$0|0;
  }
 } while(0);
 $expanded150 = 16800;
 $gep_int754 = 16800;
 $gep755 = (($gep_int754) + 444)|0;
 $expanded149 = $gep755;
 $633 = HEAP32[$expanded149>>2]|0;
 $634 = $633 & 4;
 $635 = ($634|0)==(0);
 
 L269: do {
  if ($635) {
   $expanded152 = 16800;
   $gep_int756 = 16800;
   $gep757 = (($gep_int756) + 24)|0;
   $expanded151 = $gep757;
   $636 = HEAP32[$expanded151>>2]|0;
   $637 = ($636|0)==(0);
   
   L271: do {
    if ($637) {
     label = 182;
    } else {
     $638 = $636;
     $expanded154 = 16800;
     $gep_int758 = 16800;
     $gep759 = (($gep_int758) + 448)|0;
     $expanded153 = $gep759;
     
     $sp$0$i$i = $expanded153;
     while(1) {
      
      $gep_int760 = $sp$0$i$i;
      $639 = $gep_int760;
      $640 = HEAP32[$639>>2]|0;
      $641 = ($640>>>0)>($638>>>0);
      
      if (!($641)) {
       $gep_int761 = $sp$0$i$i;
       $gep762 = (($gep_int761) + 4)|0;
       $642 = $gep762;
       $643 = HEAP32[$642>>2]|0;
       $gep_int763 = $640;
       $gep764 = (($gep_int763) + ($643))|0;
       $644 = $gep764;
       $645 = ($644>>>0)>($638>>>0);
       
       if ($645) {
        break;
       }
      }
      $gep_int765 = $sp$0$i$i;
      $gep766 = (($gep_int765) + 8)|0;
      $646 = $gep766;
      $647 = HEAP32[$646>>2]|0;
      $648 = ($647|0)==(0);
      
      if ($648) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $647;
      }
     }
     $649 = ($sp$0$i$i|0)==(0);
     
     if ($649) {
      label = 182;
      break;
     }
     $expanded164 = 16800;
     $gep_int773 = 16800;
     $gep774 = (($gep_int773) + 12)|0;
     $expanded163 = $gep774;
     $672 = HEAP32[$expanded163>>2]|0;
     $673 = (($623) - ($672))|0;
     $674 = $673 & $624;
     $675 = ($674>>>0)<(2147483647);
     
     if (!($675)) {
      $tsize$0323841$i = 0;
      break;
     }
     $676 = _sbrk($674|0)|0;
     $677 = HEAP32[$639>>2]|0;
     $678 = HEAP32[$642>>2]|0;
     $gep_int775 = $677;
     $gep776 = (($gep_int775) + ($678))|0;
     $679 = $gep776;
     $680 = ($676|0)==($679|0);
     $$3$i = $680 ? $674 : 0;
     $expanded165 = -1;
     $$4$i = $680 ? $676 : $expanded165;
     
     $br$0$i = $676;$ssize$1$i = $674;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
     label = 191;
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $650 = _sbrk(0)|0;
     $expanded155 = -1;
     $651 = ($650|0)==($expanded155|0);
     
     if ($651) {
      $tsize$0323841$i = 0;
      break;
     }
     $652 = $650;
     $expanded157 = 17272;
     $gep_int767 = 17272;
     $gep768 = (($gep_int767) + 4)|0;
     $expanded156 = $gep768;
     $653 = HEAP32[$expanded156>>2]|0;
     $654 = (($653) + -1)|0;
     $655 = $654 & $652;
     $656 = ($655|0)==(0);
     
     if ($656) {
      $ssize$0$i = $625;
     } else {
      $657 = (($654) + ($652))|0;
      $658 = (0 - ($653))|0;
      $659 = $657 & $658;
      $660 = (($625) - ($652))|0;
      $661 = (($660) + ($659))|0;
      
      $ssize$0$i = $661;
     }
     
     $expanded159 = 16800;
     $gep_int769 = 16800;
     $gep770 = (($gep_int769) + 432)|0;
     $expanded158 = $gep770;
     $662 = HEAP32[$expanded158>>2]|0;
     $663 = (($662) + ($ssize$0$i))|0;
     $664 = ($ssize$0$i>>>0)>($nb$0>>>0);
     $665 = ($ssize$0$i>>>0)<(2147483647);
     $or$cond$i31 = $664 & $665;
     
     if (!($or$cond$i31)) {
      $tsize$0323841$i = 0;
      break;
     }
     $expanded161 = 16800;
     $gep_int771 = 16800;
     $gep772 = (($gep_int771) + 440)|0;
     $expanded160 = $gep772;
     $666 = HEAP32[$expanded160>>2]|0;
     $667 = ($666|0)==(0);
     
     if (!($667)) {
      $668 = ($663>>>0)<=($662>>>0);
      $669 = ($663>>>0)>($666>>>0);
      $or$cond2$i = $668 | $669;
      
      if ($or$cond2$i) {
       $tsize$0323841$i = 0;
       break;
      }
     }
     $670 = _sbrk($ssize$0$i|0)|0;
     $671 = ($670|0)==($650|0);
     $ssize$0$$i = $671 ? $ssize$0$i : 0;
     $expanded162 = -1;
     $$$i = $671 ? $650 : $expanded162;
     
     $br$0$i = $670;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
     label = 191;
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     
     
     
     
     $681 = (0 - ($ssize$1$i))|0;
     $expanded166 = -1;
     $682 = ($tbase$0$i|0)==($expanded166|0);
     
     if (!($682)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $expanded167 = -1;
     $683 = ($br$0$i|0)!=($expanded167|0);
     $684 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $683 & $684;
     $685 = ($ssize$1$i>>>0)<($620>>>0);
     $or$cond6$i = $or$cond5$i & $685;
     
     do {
      if ($or$cond6$i) {
       $expanded169 = 17272;
       $gep_int777 = 17272;
       $gep778 = (($gep_int777) + 8)|0;
       $expanded168 = $gep778;
       $686 = HEAP32[$expanded168>>2]|0;
       $687 = (($622) - ($ssize$1$i))|0;
       $688 = (($687) + ($686))|0;
       $689 = (0 - ($686))|0;
       $690 = $688 & $689;
       $691 = ($690>>>0)<(2147483647);
       
       if (!($691)) {
        $ssize$2$i = $ssize$1$i;
        break;
       }
       $692 = _sbrk($690|0)|0;
       $expanded170 = -1;
       $693 = ($692|0)==($expanded170|0);
       
       if ($693) {
        u$318 = _sbrk($681|0)|0;
        
        $tsize$0323841$i = $tsize$0$i;
        break L291;
       } else {
        $694 = (($690) + ($ssize$1$i))|0;
        
        $ssize$2$i = $694;
        break;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     
     $expanded171 = -1;
     $695 = ($br$0$i|0)==($expanded171|0);
     
     if ($695) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   
   $expanded173 = 16800;
   $gep_int779 = 16800;
   $gep780 = (($gep_int779) + 444)|0;
   $expanded172 = $gep780;
   $696 = HEAP32[$expanded172>>2]|0;
   $697 = $696 | 4;
   $expanded175 = 16800;
   $gep_int781 = 16800;
   $gep782 = (($gep_int781) + 444)|0;
   $expanded174 = $gep782;
   HEAP32[$expanded174>>2] = $697;
   
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 do {
  if ((label|0) == 199) {
   
   $698 = ($625>>>0)<(2147483647);
   
   if (!($698)) {
    break;
   }
   $699 = _sbrk($625|0)|0;
   $700 = _sbrk(0)|0;
   $expanded176 = -1;
   $notlhs$i = ($699|0)!=($expanded176|0);
   $expanded177 = -1;
   $notrhs$i = ($700|0)!=($expanded177|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $701 = ($699>>>0)<($700>>>0);
   $or$cond9$i = $or$cond8$not$i & $701;
   
   if (!($or$cond9$i)) {
    break;
   }
   $702 = $700;
   $703 = $699;
   $704 = (($702) - ($703))|0;
   $705 = (($nb$0) + 40)|0;
   $706 = ($704>>>0)>($705>>>0);
   $$tsize$1$i = $706 ? $704 : $tsize$1$i;
   
   if ($706) {
    $tbase$247$i = $699;$tsize$246$i = $$tsize$1$i;
    label = 202;
   }
  }
 } while(0);
 do {
  if ((label|0) == 202) {
   
   
   $expanded179 = 16800;
   $gep_int783 = 16800;
   $gep784 = (($gep_int783) + 432)|0;
   $expanded178 = $gep784;
   $707 = HEAP32[$expanded178>>2]|0;
   $708 = (($707) + ($tsize$246$i))|0;
   $expanded181 = 16800;
   $gep_int785 = 16800;
   $gep786 = (($gep_int785) + 432)|0;
   $expanded180 = $gep786;
   HEAP32[$expanded180>>2] = $708;
   $expanded183 = 16800;
   $gep_int787 = 16800;
   $gep788 = (($gep_int787) + 436)|0;
   $expanded182 = $gep788;
   $709 = HEAP32[$expanded182>>2]|0;
   $710 = ($708>>>0)>($709>>>0);
   
   if ($710) {
    $expanded185 = 16800;
    $gep_int789 = 16800;
    $gep790 = (($gep_int789) + 436)|0;
    $expanded184 = $gep790;
    HEAP32[$expanded184>>2] = $708;
    
   }
   $expanded187 = 16800;
   $gep_int791 = 16800;
   $gep792 = (($gep_int791) + 24)|0;
   $expanded186 = $gep792;
   $711 = HEAP32[$expanded186>>2]|0;
   $712 = ($711|0)==(0);
   $expanded216 = 16800;
   $gep_int793 = 16800;
   $gep794 = (($gep_int793) + 448)|0;
   $expanded215 = $gep794;
   
   L311: do {
    if ($712) {
     $expanded189 = 16800;
     $gep_int795 = 16800;
     $gep796 = (($gep_int795) + 16)|0;
     $expanded188 = $gep796;
     $713 = HEAP32[$expanded188>>2]|0;
     $714 = ($713|0)==(0);
     $715 = ($tbase$247$i>>>0)<($713>>>0);
     $or$cond10$i = $714 | $715;
     
     if ($or$cond10$i) {
      $expanded191 = 16800;
      $gep_int797 = 16800;
      $gep798 = (($gep_int797) + 16)|0;
      $expanded190 = $gep798;
      HEAP32[$expanded190>>2] = $tbase$247$i;
      
     }
     $expanded193 = 16800;
     $gep_int799 = 16800;
     $gep800 = (($gep_int799) + 448)|0;
     $expanded192 = $gep800;
     HEAP32[$expanded192>>2] = $tbase$247$i;
     $expanded195 = 16800;
     $gep_int801 = 16800;
     $gep802 = (($gep_int801) + 452)|0;
     $expanded194 = $gep802;
     HEAP32[$expanded194>>2] = $tsize$246$i;
     $expanded197 = 16800;
     $gep_int803 = 16800;
     $gep804 = (($gep_int803) + 460)|0;
     $expanded196 = $gep804;
     HEAP32[$expanded196>>2] = 0;
     $expanded199 = 17272;
     $gep_int805 = 17272;
     $expanded198 = $gep_int805;
     $716 = HEAP32[$expanded198>>2]|0;
     $expanded201 = 16800;
     $gep_int806 = 16800;
     $gep807 = (($gep_int806) + 36)|0;
     $expanded200 = $gep807;
     HEAP32[$expanded200>>2] = $716;
     $expanded203 = 16800;
     $gep_int808 = 16800;
     $gep809 = (($gep_int808) + 32)|0;
     $expanded202 = $gep809;
     HEAP32[$expanded202>>2] = -1;
     
     $i$02$i$i = 0;
     while(1) {
      
      $717 = $i$02$i$i << 1;
      $expanded204 = 16800;
      $gep_int810 = 16800;
      $gep811 = (($gep_int810) + 40)|0;
      $gep_array812 = $717<<2;
      $gep813 = (($gep811) + ($gep_array812))|0;
      $718 = $gep813;
      $719 = $718;
      $$sum$i$i = (($717) + 3)|0;
      $expanded205 = 16800;
      $gep_int814 = 16800;
      $gep815 = (($gep_int814) + 40)|0;
      $gep_array816 = $$sum$i$i<<2;
      $gep817 = (($gep815) + ($gep_array816))|0;
      $720 = $gep817;
      HEAP32[$720>>2] = $719;
      $$sum1$i$i = (($717) + 2)|0;
      $expanded206 = 16800;
      $gep_int818 = 16800;
      $gep819 = (($gep_int818) + 40)|0;
      $gep_array820 = $$sum1$i$i<<2;
      $gep821 = (($gep819) + ($gep_array820))|0;
      $721 = $gep821;
      HEAP32[$721>>2] = $719;
      $722 = (($i$02$i$i) + 1)|0;
      $723 = ($722>>>0)<(32);
      
      if ($723) {
       $i$02$i$i$phi = $722;$i$02$i$i = $i$02$i$i$phi;
      } else {
       break;
      }
     }
     $724 = (($tsize$246$i) + -40)|0;
     $gep_int822 = $tbase$247$i;
     $gep823 = (($gep_int822) + 8)|0;
     $725 = $gep823;
     $726 = $725;
     $727 = $726 & 7;
     $728 = ($727|0)==(0);
     
     if ($728) {
      $731 = 0;
     } else {
      $729 = (0 - ($726))|0;
      $730 = $729 & 7;
      
      $731 = $730;
     }
     
     $gep_int824 = $tbase$247$i;
     $gep825 = (($gep_int824) + ($731))|0;
     $732 = $gep825;
     $733 = $732;
     $734 = (($724) - ($731))|0;
     $expanded208 = 16800;
     $gep_int826 = 16800;
     $gep827 = (($gep_int826) + 24)|0;
     $expanded207 = $gep827;
     HEAP32[$expanded207>>2] = $733;
     $expanded210 = 16800;
     $gep_int828 = 16800;
     $gep829 = (($gep_int828) + 12)|0;
     $expanded209 = $gep829;
     HEAP32[$expanded209>>2] = $734;
     $735 = $734 | 1;
     $$sum$i14$i = (($731) + 4)|0;
     $gep_int830 = $tbase$247$i;
     $gep831 = (($gep_int830) + ($$sum$i14$i))|0;
     $736 = $gep831;
     $737 = $736;
     HEAP32[$736>>2] = $735;
     $$sum2$i$i = (($tsize$246$i) + -36)|0;
     $gep_int832 = $tbase$247$i;
     $gep833 = (($gep_int832) + ($$sum2$i$i))|0;
     $738 = $gep833;
     $739 = $738;
     HEAP32[$738>>2] = 40;
     $expanded212 = 17272;
     $gep_int834 = 17272;
     $gep835 = (($gep_int834) + 16)|0;
     $expanded211 = $gep835;
     $740 = HEAP32[$expanded211>>2]|0;
     $expanded214 = 16800;
     $gep_int836 = 16800;
     $gep837 = (($gep_int836) + 28)|0;
     $expanded213 = $gep837;
     HEAP32[$expanded213>>2] = $740;
     
    } else {
     $sp$075$i = $expanded215;
     while(1) {
      
      $gep_int838 = $sp$075$i;
      $741 = $gep_int838;
      $742 = HEAP32[$741>>2]|0;
      $gep_int839 = $sp$075$i;
      $gep840 = (($gep_int839) + 4)|0;
      $743 = $gep840;
      $744 = HEAP32[$743>>2]|0;
      $gep_int841 = $742;
      $gep842 = (($gep_int841) + ($744))|0;
      $745 = $gep842;
      $746 = ($tbase$247$i|0)==($745|0);
      
      if ($746) {
       label = 214;
       break;
      }
      $gep_int843 = $sp$075$i;
      $gep844 = (($gep_int843) + 8)|0;
      $747 = $gep844;
      $748 = HEAP32[$747>>2]|0;
      $749 = ($748|0)==(0);
      
      if ($749) {
       break;
      } else {
       $sp$075$i = $748;
      }
     }
     do {
      if ((label|0) == 214) {
       $gep_int845 = $sp$075$i;
       $gep846 = (($gep_int845) + 12)|0;
       $750 = $gep846;
       $751 = HEAP32[$750>>2]|0;
       $752 = $751 & 8;
       $753 = ($752|0)==(0);
       
       if (!($753)) {
        break;
       }
       $754 = $711;
       $755 = ($754>>>0)>=($742>>>0);
       $756 = ($754>>>0)<($tbase$247$i>>>0);
       $or$cond49$i = $755 & $756;
       
       if (!($or$cond49$i)) {
        break;
       }
       $757 = (($744) + ($tsize$246$i))|0;
       HEAP32[$743>>2] = $757;
       $expanded218 = 16800;
       $gep_int847 = 16800;
       $gep848 = (($gep_int847) + 12)|0;
       $expanded217 = $gep848;
       $758 = HEAP32[$expanded217>>2]|0;
       $759 = (($758) + ($tsize$246$i))|0;
       $gep_int849 = $711;
       $gep850 = (($gep_int849) + 8)|0;
       $760 = $gep850;
       $761 = $760;
       $762 = $761 & 7;
       $763 = ($762|0)==(0);
       
       if ($763) {
        $766 = 0;
       } else {
        $764 = (0 - ($761))|0;
        $765 = $764 & 7;
        
        $766 = $765;
       }
       
       $gep_int851 = $711;
       $gep852 = (($gep_int851) + ($766))|0;
       $767 = $gep852;
       $768 = $767;
       $769 = (($759) - ($766))|0;
       $expanded220 = 16800;
       $gep_int853 = 16800;
       $gep854 = (($gep_int853) + 24)|0;
       $expanded219 = $gep854;
       HEAP32[$expanded219>>2] = $768;
       $expanded222 = 16800;
       $gep_int855 = 16800;
       $gep856 = (($gep_int855) + 12)|0;
       $expanded221 = $gep856;
       HEAP32[$expanded221>>2] = $769;
       $770 = $769 | 1;
       $$sum$i18$i = (($766) + 4)|0;
       $gep_int857 = $711;
       $gep858 = (($gep_int857) + ($$sum$i18$i))|0;
       $771 = $gep858;
       $772 = $771;
       HEAP32[$771>>2] = $770;
       $$sum2$i19$i = (($759) + 4)|0;
       $gep_int859 = $711;
       $gep860 = (($gep_int859) + ($$sum2$i19$i))|0;
       $773 = $gep860;
       $774 = $773;
       HEAP32[$773>>2] = 40;
       $expanded224 = 17272;
       $gep_int861 = 17272;
       $gep862 = (($gep_int861) + 16)|0;
       $expanded223 = $gep862;
       $775 = HEAP32[$expanded223>>2]|0;
       $expanded226 = 16800;
       $gep_int863 = 16800;
       $gep864 = (($gep_int863) + 28)|0;
       $expanded225 = $gep864;
       HEAP32[$expanded225>>2] = $775;
       
       break L311;
      }
     } while(0);
     $expanded228 = 16800;
     $gep_int865 = 16800;
     $gep866 = (($gep_int865) + 16)|0;
     $expanded227 = $gep866;
     $776 = HEAP32[$expanded227>>2]|0;
     $777 = ($tbase$247$i>>>0)<($776>>>0);
     
     if ($777) {
      $expanded230 = 16800;
      $gep_int867 = 16800;
      $gep868 = (($gep_int867) + 16)|0;
      $expanded229 = $gep868;
      HEAP32[$expanded229>>2] = $tbase$247$i;
      
     }
     $gep_int869 = $tbase$247$i;
     $gep870 = (($gep_int869) + ($tsize$246$i))|0;
     $778 = $gep870;
     $expanded232 = 16800;
     $gep_int871 = 16800;
     $gep872 = (($gep_int871) + 448)|0;
     $expanded231 = $gep872;
     
     $sp$168$i = $expanded231;
     while(1) {
      
      $gep_int873 = $sp$168$i;
      $779 = $gep_int873;
      $780 = HEAP32[$779>>2]|0;
      $781 = ($780|0)==($778|0);
      
      if ($781) {
       label = 224;
       break;
      }
      $gep_int874 = $sp$168$i;
      $gep875 = (($gep_int874) + 8)|0;
      $782 = $gep875;
      $783 = HEAP32[$782>>2]|0;
      $784 = ($783|0)==(0);
      
      if ($784) {
       break;
      } else {
       $sp$168$i = $783;
      }
     }
     do {
      if ((label|0) == 224) {
       $gep_int876 = $sp$168$i;
       $gep877 = (($gep_int876) + 12)|0;
       $785 = $gep877;
       $786 = HEAP32[$785>>2]|0;
       $787 = $786 & 8;
       $788 = ($787|0)==(0);
       
       if (!($788)) {
        break;
       }
       HEAP32[$779>>2] = $tbase$247$i;
       $gep_int878 = $sp$168$i;
       $gep879 = (($gep_int878) + 4)|0;
       $789 = $gep879;
       $790 = HEAP32[$789>>2]|0;
       $791 = (($790) + ($tsize$246$i))|0;
       HEAP32[$789>>2] = $791;
       $gep_int880 = $tbase$247$i;
       $gep881 = (($gep_int880) + 8)|0;
       $792 = $gep881;
       $793 = $792;
       $794 = $793 & 7;
       $795 = ($794|0)==(0);
       
       if ($795) {
        $798 = 0;
       } else {
        $796 = (0 - ($793))|0;
        $797 = $796 & 7;
        
        $798 = $797;
       }
       
       $gep_int882 = $tbase$247$i;
       $gep883 = (($gep_int882) + ($798))|0;
       $799 = $gep883;
       $$sum107$i = (($tsize$246$i) + 8)|0;
       $gep_int884 = $tbase$247$i;
       $gep885 = (($gep_int884) + ($$sum107$i))|0;
       $800 = $gep885;
       $801 = $800;
       $802 = $801 & 7;
       $803 = ($802|0)==(0);
       
       if ($803) {
        $806 = 0;
       } else {
        $804 = (0 - ($801))|0;
        $805 = $804 & 7;
        
        $806 = $805;
       }
       
       $$sum108$i = (($806) + ($tsize$246$i))|0;
       $gep_int886 = $tbase$247$i;
       $gep887 = (($gep_int886) + ($$sum108$i))|0;
       $807 = $gep887;
       $808 = $807;
       $809 = $807;
       $810 = $799;
       $811 = (($809) - ($810))|0;
       $$sum$i21$i = (($798) + ($nb$0))|0;
       $gep_int888 = $tbase$247$i;
       $gep889 = (($gep_int888) + ($$sum$i21$i))|0;
       $812 = $gep889;
       $813 = $812;
       $814 = (($811) - ($nb$0))|0;
       $815 = $nb$0 | 3;
       $$sum1$i22$i = (($798) + 4)|0;
       $gep_int890 = $tbase$247$i;
       $gep891 = (($gep_int890) + ($$sum1$i22$i))|0;
       $816 = $gep891;
       $817 = $816;
       HEAP32[$816>>2] = $815;
       $expanded234 = 16800;
       $gep_int892 = 16800;
       $gep893 = (($gep_int892) + 24)|0;
       $expanded233 = $gep893;
       $818 = HEAP32[$expanded233>>2]|0;
       $819 = ($808|0)==($818|0);
       
       L348: do {
        if ($819) {
         $expanded236 = 16800;
         $gep_int894 = 16800;
         $gep895 = (($gep_int894) + 12)|0;
         $expanded235 = $gep895;
         $820 = HEAP32[$expanded235>>2]|0;
         $821 = (($820) + ($814))|0;
         $expanded238 = 16800;
         $gep_int896 = 16800;
         $gep897 = (($gep_int896) + 12)|0;
         $expanded237 = $gep897;
         HEAP32[$expanded237>>2] = $821;
         $expanded240 = 16800;
         $gep_int898 = 16800;
         $gep899 = (($gep_int898) + 24)|0;
         $expanded239 = $gep899;
         HEAP32[$expanded239>>2] = $813;
         $822 = $821 | 1;
         $$sum46$i$i = (($$sum$i21$i) + 4)|0;
         $gep_int900 = $tbase$247$i;
         $gep901 = (($gep_int900) + ($$sum46$i$i))|0;
         $823 = $gep901;
         $824 = $823;
         HEAP32[$823>>2] = $822;
         
        } else {
         $expanded242 = 16800;
         $gep_int902 = 16800;
         $gep903 = (($gep_int902) + 20)|0;
         $expanded241 = $gep903;
         $825 = HEAP32[$expanded241>>2]|0;
         $826 = ($808|0)==($825|0);
         
         if ($826) {
          $expanded244 = 16800;
          $gep_int904 = 16800;
          $gep905 = (($gep_int904) + 8)|0;
          $expanded243 = $gep905;
          $827 = HEAP32[$expanded243>>2]|0;
          $828 = (($827) + ($814))|0;
          $expanded246 = 16800;
          $gep_int906 = 16800;
          $gep907 = (($gep_int906) + 8)|0;
          $expanded245 = $gep907;
          HEAP32[$expanded245>>2] = $828;
          $expanded248 = 16800;
          $gep_int908 = 16800;
          $gep909 = (($gep_int908) + 20)|0;
          $expanded247 = $gep909;
          HEAP32[$expanded247>>2] = $813;
          $829 = $828 | 1;
          $$sum44$i$i = (($$sum$i21$i) + 4)|0;
          $gep_int910 = $tbase$247$i;
          $gep911 = (($gep_int910) + ($$sum44$i$i))|0;
          $830 = $gep911;
          $831 = $830;
          HEAP32[$830>>2] = $829;
          $$sum45$i$i = (($828) + ($$sum$i21$i))|0;
          $gep_int912 = $tbase$247$i;
          $gep913 = (($gep_int912) + ($$sum45$i$i))|0;
          $832 = $gep913;
          $833 = $832;
          HEAP32[$832>>2] = $828;
          
          break;
         }
         $$sum2$i23$i = (($tsize$246$i) + 4)|0;
         $$sum109$i = (($$sum2$i23$i) + ($806))|0;
         $gep_int914 = $tbase$247$i;
         $gep915 = (($gep_int914) + ($$sum109$i))|0;
         $834 = $gep915;
         $835 = $834;
         $836 = HEAP32[$834>>2]|0;
         $837 = $836 & 3;
         $838 = ($837|0)==(1);
         
         if ($838) {
          $839 = $836 & -8;
          $840 = $836 >>> 3;
          $841 = ($836>>>0)<(256);
          
          L356: do {
           if ($841) {
            $$sum3940$i$i = $806 | 8;
            $$sum119$i = (($$sum3940$i$i) + ($tsize$246$i))|0;
            $gep_int916 = $tbase$247$i;
            $gep917 = (($gep_int916) + ($$sum119$i))|0;
            $842 = $gep917;
            $843 = $842;
            $844 = HEAP32[$842>>2]|0;
            $$sum41$i$i = (($tsize$246$i) + 12)|0;
            $$sum120$i = (($$sum41$i$i) + ($806))|0;
            $gep_int918 = $tbase$247$i;
            $gep919 = (($gep_int918) + ($$sum120$i))|0;
            $845 = $gep919;
            $846 = $845;
            $847 = HEAP32[$845>>2]|0;
            $848 = $840 << 1;
            $expanded249 = 16800;
            $gep_int920 = 16800;
            $gep921 = (($gep_int920) + 40)|0;
            $gep_array922 = $848<<2;
            $gep923 = (($gep921) + ($gep_array922))|0;
            $849 = $gep923;
            $850 = $849;
            $851 = ($844|0)==($850|0);
            
            do {
             if (!($851)) {
              $852 = $844;
              $expanded251 = 16800;
              $gep_int924 = 16800;
              $gep925 = (($gep_int924) + 16)|0;
              $expanded250 = $gep925;
              $853 = HEAP32[$expanded250>>2]|0;
              $854 = ($852>>>0)<($853>>>0);
              
              if ($854) {
               _abort();
               // unreachable
              }
              $gep_int926 = $844;
              $gep927 = (($gep_int926) + 12)|0;
              $855 = $gep927;
              $856 = HEAP32[$855>>2]|0;
              $857 = ($856|0)==($808|0);
              
              if ($857) {
               break;
              }
              _abort();
              // unreachable
             }
            } while(0);
            $858 = ($847|0)==($844|0);
            
            if ($858) {
             $859 = 1 << $840;
             $860 = $859 ^ -1;
             $expanded253 = 16800;
             $gep_int928 = 16800;
             $expanded252 = $gep_int928;
             $861 = HEAP32[$expanded252>>2]|0;
             $862 = $861 & $860;
             $expanded255 = 16800;
             $gep_int929 = 16800;
             $expanded254 = $gep_int929;
             HEAP32[$expanded254>>2] = $862;
             
             break;
            }
            $863 = ($847|0)==($850|0);
            
            do {
             if ($863) {
              $gep_int930 = $847;
              $gep931 = (($gep_int930) + 8)|0;
              $$pre61$i$i = $gep931;
              
              $$pre$phi62$i$iZ2D = $$pre61$i$i;
             } else {
              $864 = $847;
              $expanded257 = 16800;
              $gep_int932 = 16800;
              $gep933 = (($gep_int932) + 16)|0;
              $expanded256 = $gep933;
              $865 = HEAP32[$expanded256>>2]|0;
              $866 = ($864>>>0)<($865>>>0);
              
              if ($866) {
               _abort();
               // unreachable
              }
              $gep_int934 = $847;
              $gep935 = (($gep_int934) + 8)|0;
              $867 = $gep935;
              $868 = HEAP32[$867>>2]|0;
              $869 = ($868|0)==($808|0);
              
              if ($869) {
               $$pre$phi62$i$iZ2D = $867;
               break;
              }
              _abort();
              // unreachable
             }
            } while(0);
            
            $gep_int936 = $844;
            $gep937 = (($gep_int936) + 12)|0;
            $870 = $gep937;
            HEAP32[$870>>2] = $847;
            HEAP32[$$pre$phi62$i$iZ2D>>2] = $844;
            
           } else {
            $871 = $807;
            $$sum34$i$i = $806 | 24;
            $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
            $gep_int938 = $tbase$247$i;
            $gep939 = (($gep_int938) + ($$sum110$i))|0;
            $872 = $gep939;
            $873 = $872;
            $874 = HEAP32[$872>>2]|0;
            $$sum5$i$i = (($tsize$246$i) + 12)|0;
            $$sum111$i = (($$sum5$i$i) + ($806))|0;
            $gep_int940 = $tbase$247$i;
            $gep941 = (($gep_int940) + ($$sum111$i))|0;
            $875 = $gep941;
            $876 = $875;
            $877 = HEAP32[$875>>2]|0;
            $878 = ($877|0)==($871|0);
            
            do {
             if ($878) {
              $$sum67$i$i = $806 | 16;
              $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
              $gep_int950 = $tbase$247$i;
              $gep951 = (($gep_int950) + ($$sum117$i))|0;
              $891 = $gep951;
              $892 = $891;
              $893 = HEAP32[$891>>2]|0;
              $894 = ($893|0)==(0);
              
              if ($894) {
               $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
               $gep_int952 = $tbase$247$i;
               $gep953 = (($gep_int952) + ($$sum118$i))|0;
               $895 = $gep953;
               $896 = $895;
               $897 = HEAP32[$895>>2]|0;
               $898 = ($897|0)==(0);
               
               if ($898) {
                $R$1$i$i = 0;
                break;
               } else {
                $R$0$i$i = $897;$RP$0$i$i = $896;
               }
              } else {
               $R$0$i$i = $893;$RP$0$i$i = $892;
              }
              while(1) {
               
               
               $gep_int954 = $R$0$i$i;
               $gep955 = (($gep_int954) + 20)|0;
               $899 = $gep955;
               $900 = HEAP32[$899>>2]|0;
               $901 = ($900|0)==(0);
               
               if (!($901)) {
                $RP$0$i$i$phi = $899;$R$0$i$i$phi = $900;$RP$0$i$i = $RP$0$i$i$phi;$R$0$i$i = $R$0$i$i$phi;
                continue;
               }
               $gep_int956 = $R$0$i$i;
               $gep957 = (($gep_int956) + 16)|0;
               $902 = $gep957;
               $903 = HEAP32[$902>>2]|0;
               $904 = ($903|0)==(0);
               
               if ($904) {
                break;
               } else {
                $R$0$i$i = $903;$RP$0$i$i = $902;
               }
              }
              $905 = $RP$0$i$i;
              $expanded261 = 16800;
              $gep_int958 = 16800;
              $gep959 = (($gep_int958) + 16)|0;
              $expanded260 = $gep959;
              $906 = HEAP32[$expanded260>>2]|0;
              $907 = ($905>>>0)<($906>>>0);
              
              if ($907) {
               _abort();
               // unreachable
              } else {
               HEAP32[$RP$0$i$i>>2] = 0;
               
               $R$1$i$i = $R$0$i$i;
               break;
              }
             } else {
              $$sum3637$i$i = $806 | 8;
              $$sum112$i = (($$sum3637$i$i) + ($tsize$246$i))|0;
              $gep_int942 = $tbase$247$i;
              $gep943 = (($gep_int942) + ($$sum112$i))|0;
              $879 = $gep943;
              $880 = $879;
              $881 = HEAP32[$879>>2]|0;
              $882 = $881;
              $expanded259 = 16800;
              $gep_int944 = 16800;
              $gep945 = (($gep_int944) + 16)|0;
              $expanded258 = $gep945;
              $883 = HEAP32[$expanded258>>2]|0;
              $884 = ($882>>>0)<($883>>>0);
              
              if ($884) {
               _abort();
               // unreachable
              }
              $gep_int946 = $881;
              $gep947 = (($gep_int946) + 12)|0;
              $885 = $gep947;
              $886 = HEAP32[$885>>2]|0;
              $887 = ($886|0)==($871|0);
              
              if (!($887)) {
               _abort();
               // unreachable
              }
              $gep_int948 = $877;
              $gep949 = (($gep_int948) + 8)|0;
              $888 = $gep949;
              $889 = HEAP32[$888>>2]|0;
              $890 = ($889|0)==($871|0);
              
              if ($890) {
               HEAP32[$885>>2] = $877;
               HEAP32[$888>>2] = $881;
               
               $R$1$i$i = $877;
               break;
              } else {
               _abort();
               // unreachable
              }
             }
            } while(0);
            
            $908 = ($874|0)==(0);
            
            if ($908) {
             break;
            }
            $$sum31$i$i = (($tsize$246$i) + 28)|0;
            $$sum113$i = (($$sum31$i$i) + ($806))|0;
            $gep_int960 = $tbase$247$i;
            $gep961 = (($gep_int960) + ($$sum113$i))|0;
            $909 = $gep961;
            $910 = $909;
            $911 = HEAP32[$909>>2]|0;
            $expanded262 = 16800;
            $gep_int962 = 16800;
            $gep963 = (($gep_int962) + 304)|0;
            $gep_array964 = $911<<2;
            $gep965 = (($gep963) + ($gep_array964))|0;
            $912 = $gep965;
            $913 = HEAP32[$912>>2]|0;
            $914 = ($871|0)==($913|0);
            
            do {
             if ($914) {
              HEAP32[$912>>2] = $R$1$i$i;
              $cond$i$i = ($R$1$i$i|0)==(0);
              
              if (!($cond$i$i)) {
               break;
              }
              $915 = 1 << $911;
              $916 = $915 ^ -1;
              $expanded264 = 16800;
              $gep_int966 = 16800;
              $gep967 = (($gep_int966) + 4)|0;
              $expanded263 = $gep967;
              $917 = HEAP32[$expanded263>>2]|0;
              $918 = $917 & $916;
              $expanded266 = 16800;
              $gep_int968 = 16800;
              $gep969 = (($gep_int968) + 4)|0;
              $expanded265 = $gep969;
              HEAP32[$expanded265>>2] = $918;
              
              break L356;
             } else {
              $919 = $874;
              $expanded268 = 16800;
              $gep_int970 = 16800;
              $gep971 = (($gep_int970) + 16)|0;
              $expanded267 = $gep971;
              $920 = HEAP32[$expanded267>>2]|0;
              $921 = ($919>>>0)<($920>>>0);
              
              if ($921) {
               _abort();
               // unreachable
              }
              $gep_int972 = $874;
              $gep973 = (($gep_int972) + 16)|0;
              $922 = $gep973;
              $923 = HEAP32[$922>>2]|0;
              $924 = ($923|0)==($871|0);
              
              if ($924) {
               HEAP32[$922>>2] = $R$1$i$i;
               
              } else {
               $gep_int974 = $874;
               $gep975 = (($gep_int974) + 20)|0;
               $925 = $gep975;
               HEAP32[$925>>2] = $R$1$i$i;
               
              }
              $926 = ($R$1$i$i|0)==(0);
              
              if ($926) {
               break L356;
              }
             }
            } while(0);
            $927 = $R$1$i$i;
            $expanded270 = 16800;
            $gep_int976 = 16800;
            $gep977 = (($gep_int976) + 16)|0;
            $expanded269 = $gep977;
            $928 = HEAP32[$expanded269>>2]|0;
            $929 = ($927>>>0)<($928>>>0);
            
            if ($929) {
             _abort();
             // unreachable
            }
            $gep_int978 = $R$1$i$i;
            $gep979 = (($gep_int978) + 24)|0;
            $930 = $gep979;
            HEAP32[$930>>2] = $874;
            $$sum3233$i$i = $806 | 16;
            $$sum114$i = (($$sum3233$i$i) + ($tsize$246$i))|0;
            $gep_int980 = $tbase$247$i;
            $gep981 = (($gep_int980) + ($$sum114$i))|0;
            $931 = $gep981;
            $932 = $931;
            $933 = HEAP32[$931>>2]|0;
            $934 = ($933|0)==(0);
            
            do {
             if (!($934)) {
              $935 = $933;
              $expanded272 = 16800;
              $gep_int982 = 16800;
              $gep983 = (($gep_int982) + 16)|0;
              $expanded271 = $gep983;
              $936 = HEAP32[$expanded271>>2]|0;
              $937 = ($935>>>0)<($936>>>0);
              
              if ($937) {
               _abort();
               // unreachable
              } else {
               $gep_int984 = $R$1$i$i;
               $gep985 = (($gep_int984) + 16)|0;
               $938 = $gep985;
               HEAP32[$938>>2] = $933;
               $gep_int986 = $933;
               $gep987 = (($gep_int986) + 24)|0;
               $939 = $gep987;
               HEAP32[$939>>2] = $R$1$i$i;
               
               break;
              }
             }
            } while(0);
            $$sum115$i = (($$sum2$i23$i) + ($$sum3233$i$i))|0;
            $gep_int988 = $tbase$247$i;
            $gep989 = (($gep_int988) + ($$sum115$i))|0;
            $940 = $gep989;
            $941 = $940;
            $942 = HEAP32[$940>>2]|0;
            $943 = ($942|0)==(0);
            
            if ($943) {
             break;
            }
            $944 = $942;
            $expanded274 = 16800;
            $gep_int990 = 16800;
            $gep991 = (($gep_int990) + 16)|0;
            $expanded273 = $gep991;
            $945 = HEAP32[$expanded273>>2]|0;
            $946 = ($944>>>0)<($945>>>0);
            
            if ($946) {
             _abort();
             // unreachable
            } else {
             $gep_int992 = $R$1$i$i;
             $gep993 = (($gep_int992) + 20)|0;
             $947 = $gep993;
             HEAP32[$947>>2] = $942;
             $gep_int994 = $942;
             $gep995 = (($gep_int994) + 24)|0;
             $948 = $gep995;
             HEAP32[$948>>2] = $R$1$i$i;
             
             break;
            }
           }
          } while(0);
          $$sum9$i$i = $839 | $806;
          $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
          $gep_int996 = $tbase$247$i;
          $gep997 = (($gep_int996) + ($$sum116$i))|0;
          $949 = $gep997;
          $950 = $949;
          $951 = (($839) + ($814))|0;
          
          $oldfirst$0$i$i = $950;$qsize$0$i$i = $951;
         } else {
          $oldfirst$0$i$i = $808;$qsize$0$i$i = $814;
         }
         
         
         $gep_int998 = $oldfirst$0$i$i;
         $gep999 = (($gep_int998) + 4)|0;
         $952 = $gep999;
         $953 = HEAP32[$952>>2]|0;
         $954 = $953 & -2;
         HEAP32[$952>>2] = $954;
         $955 = $qsize$0$i$i | 1;
         $$sum10$i$i = (($$sum$i21$i) + 4)|0;
         $gep_int1000 = $tbase$247$i;
         $gep1001 = (($gep_int1000) + ($$sum10$i$i))|0;
         $956 = $gep1001;
         $957 = $956;
         HEAP32[$956>>2] = $955;
         $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
         $gep_int1002 = $tbase$247$i;
         $gep1003 = (($gep_int1002) + ($$sum11$i$i))|0;
         $958 = $gep1003;
         $959 = $958;
         HEAP32[$958>>2] = $qsize$0$i$i;
         $960 = $qsize$0$i$i >>> 3;
         $961 = ($qsize$0$i$i>>>0)<(256);
         
         if ($961) {
          $962 = $960 << 1;
          $expanded275 = 16800;
          $gep_int1004 = 16800;
          $gep1005 = (($gep_int1004) + 40)|0;
          $gep_array1006 = $962<<2;
          $gep1007 = (($gep1005) + ($gep_array1006))|0;
          $963 = $gep1007;
          $964 = $963;
          $expanded277 = 16800;
          $gep_int1008 = 16800;
          $expanded276 = $gep_int1008;
          $965 = HEAP32[$expanded276>>2]|0;
          $966 = 1 << $960;
          $967 = $965 & $966;
          $968 = ($967|0)==(0);
          
          do {
           if ($968) {
            $969 = $965 | $966;
            $expanded279 = 16800;
            $gep_int1009 = 16800;
            $expanded278 = $gep_int1009;
            HEAP32[$expanded278>>2] = $969;
            $$sum27$pre$i$i = (($962) + 2)|0;
            $expanded280 = 16800;
            $gep_int1010 = 16800;
            $gep1011 = (($gep_int1010) + 40)|0;
            $gep_array1012 = $$sum27$pre$i$i<<2;
            $gep1013 = (($gep1011) + ($gep_array1012))|0;
            $$pre$i24$i = $gep1013;
            
            $$pre$phi$i25$iZ2D = $$pre$i24$i;$F4$0$i$i = $964;
           } else {
            $$sum30$i$i = (($962) + 2)|0;
            $expanded281 = 16800;
            $gep_int1014 = 16800;
            $gep1015 = (($gep_int1014) + 40)|0;
            $gep_array1016 = $$sum30$i$i<<2;
            $gep1017 = (($gep1015) + ($gep_array1016))|0;
            $970 = $gep1017;
            $971 = HEAP32[$970>>2]|0;
            $972 = $971;
            $expanded283 = 16800;
            $gep_int1018 = 16800;
            $gep1019 = (($gep_int1018) + 16)|0;
            $expanded282 = $gep1019;
            $973 = HEAP32[$expanded282>>2]|0;
            $974 = ($972>>>0)<($973>>>0);
            
            if (!($974)) {
             $$pre$phi$i25$iZ2D = $970;$F4$0$i$i = $971;
             break;
            }
            _abort();
            // unreachable
           }
          } while(0);
          
          
          HEAP32[$$pre$phi$i25$iZ2D>>2] = $813;
          $gep_int1020 = $F4$0$i$i;
          $gep1021 = (($gep_int1020) + 12)|0;
          $975 = $gep1021;
          HEAP32[$975>>2] = $813;
          $$sum28$i$i = (($$sum$i21$i) + 8)|0;
          $gep_int1022 = $tbase$247$i;
          $gep1023 = (($gep_int1022) + ($$sum28$i$i))|0;
          $976 = $gep1023;
          $977 = $976;
          HEAP32[$976>>2] = $F4$0$i$i;
          $$sum29$i$i = (($$sum$i21$i) + 12)|0;
          $gep_int1024 = $tbase$247$i;
          $gep1025 = (($gep_int1024) + ($$sum29$i$i))|0;
          $978 = $gep1025;
          $979 = $978;
          HEAP32[$978>>2] = $964;
          
          break;
         }
         $980 = $812;
         $981 = $qsize$0$i$i >>> 8;
         $982 = ($981|0)==(0);
         
         do {
          if ($982) {
           $I7$0$i$i = 0;
          } else {
           $983 = ($qsize$0$i$i>>>0)>(16777215);
           
           if ($983) {
            $I7$0$i$i = 31;
            break;
           }
           $984 = (($981) + 1048320)|0;
           $985 = $984 >>> 16;
           $986 = $985 & 8;
           $987 = $981 << $986;
           $988 = (($987) + 520192)|0;
           $989 = $988 >>> 16;
           $990 = $989 & 4;
           $991 = $990 | $986;
           $992 = $987 << $990;
           $993 = (($992) + 245760)|0;
           $994 = $993 >>> 16;
           $995 = $994 & 2;
           $996 = $991 | $995;
           $997 = (14 - ($996))|0;
           $998 = $992 << $995;
           $999 = $998 >>> 15;
           $1000 = (($997) + ($999))|0;
           $1001 = $1000 << 1;
           $1002 = (($1000) + 7)|0;
           $1003 = $qsize$0$i$i >>> $1002;
           $1004 = $1003 & 1;
           $1005 = $1004 | $1001;
           
           $I7$0$i$i = $1005;
          }
         } while(0);
         
         $expanded284 = 16800;
         $gep_int1026 = 16800;
         $gep1027 = (($gep_int1026) + 304)|0;
         $gep_array1028 = $I7$0$i$i<<2;
         $gep1029 = (($gep1027) + ($gep_array1028))|0;
         $1006 = $gep1029;
         $$sum12$i26$i = (($$sum$i21$i) + 28)|0;
         $gep_int1030 = $tbase$247$i;
         $gep1031 = (($gep_int1030) + ($$sum12$i26$i))|0;
         $1007 = $gep1031;
         $1008 = $1007;
         HEAP32[$1007>>2] = $I7$0$i$i;
         $$sum13$i$i = (($$sum$i21$i) + 16)|0;
         $gep_int1032 = $tbase$247$i;
         $gep1033 = (($gep_int1032) + ($$sum13$i$i))|0;
         $1009 = $gep1033;
         $$sum14$i$i = (($$sum$i21$i) + 20)|0;
         $gep_int1034 = $tbase$247$i;
         $gep1035 = (($gep_int1034) + ($$sum14$i$i))|0;
         $1010 = $gep1035;
         $1011 = $1010;
         HEAP32[$1010>>2] = 0;
         $1012 = $1009;
         HEAP32[$1009>>2] = 0;
         $expanded286 = 16800;
         $gep_int1036 = 16800;
         $gep1037 = (($gep_int1036) + 4)|0;
         $expanded285 = $gep1037;
         $1013 = HEAP32[$expanded285>>2]|0;
         $1014 = 1 << $I7$0$i$i;
         $1015 = $1013 & $1014;
         $1016 = ($1015|0)==(0);
         
         if ($1016) {
          $1017 = $1013 | $1014;
          $expanded288 = 16800;
          $gep_int1038 = 16800;
          $gep1039 = (($gep_int1038) + 4)|0;
          $expanded287 = $gep1039;
          HEAP32[$expanded287>>2] = $1017;
          HEAP32[$1006>>2] = $980;
          $1018 = $1006;
          $$sum15$i$i = (($$sum$i21$i) + 24)|0;
          $gep_int1040 = $tbase$247$i;
          $gep1041 = (($gep_int1040) + ($$sum15$i$i))|0;
          $1019 = $gep1041;
          $1020 = $1019;
          HEAP32[$1019>>2] = $1018;
          $$sum16$i$i = (($$sum$i21$i) + 12)|0;
          $gep_int1042 = $tbase$247$i;
          $gep1043 = (($gep_int1042) + ($$sum16$i$i))|0;
          $1021 = $gep1043;
          $1022 = $1021;
          HEAP32[$1021>>2] = $980;
          $$sum17$i$i = (($$sum$i21$i) + 8)|0;
          $gep_int1044 = $tbase$247$i;
          $gep1045 = (($gep_int1044) + ($$sum17$i$i))|0;
          $1023 = $gep1045;
          $1024 = $1023;
          HEAP32[$1023>>2] = $980;
          
          break;
         }
         $1025 = HEAP32[$1006>>2]|0;
         $1026 = ($I7$0$i$i|0)==(31);
         
         if ($1026) {
          $1029 = 0;
         } else {
          $1027 = $I7$0$i$i >>> 1;
          $1028 = (25 - ($1027))|0;
          
          $1029 = $1028;
         }
         
         $gep_int1046 = $1025;
         $gep1047 = (($gep_int1046) + 4)|0;
         $1030 = $gep1047;
         $1031 = HEAP32[$1030>>2]|0;
         $1032 = $1031 & -8;
         $1033 = ($1032|0)==($qsize$0$i$i|0);
         
         L445: do {
          if ($1033) {
           $T$0$lcssa$i28$i = $1025;
          } else {
           $1034 = $qsize$0$i$i << $1029;
           
           $K8$056$i$i = $1034;$T$055$i$i = $1025;
           while(1) {
            
            
            $1040 = $K8$056$i$i >>> 31;
            $gep_int1050 = $T$055$i$i;
            $gep1051 = (($gep_int1050) + 16)|0;
            $gep_array1052 = $1040<<2;
            $gep1053 = (($gep1051) + ($gep_array1052))|0;
            $1041 = $gep1053;
            $1042 = HEAP32[$1041>>2]|0;
            $1043 = ($1042|0)==(0);
            
            if ($1043) {
             break;
            }
            $1035 = $K8$056$i$i << 1;
            $gep_int1048 = $1042;
            $gep1049 = (($gep_int1048) + 4)|0;
            $1036 = $gep1049;
            $1037 = HEAP32[$1036>>2]|0;
            $1038 = $1037 & -8;
            $1039 = ($1038|0)==($qsize$0$i$i|0);
            
            if ($1039) {
             $T$0$lcssa$i28$i = $1042;
             break L445;
            } else {
             $T$055$i$i$phi = $1042;$K8$056$i$i = $1035;$T$055$i$i = $T$055$i$i$phi;
            }
           }
           $1044 = $1041;
           $expanded290 = 16800;
           $gep_int1054 = 16800;
           $gep1055 = (($gep_int1054) + 16)|0;
           $expanded289 = $gep1055;
           $1045 = HEAP32[$expanded289>>2]|0;
           $1046 = ($1044>>>0)<($1045>>>0);
           
           if ($1046) {
            _abort();
            // unreachable
           } else {
            HEAP32[$1041>>2] = $980;
            $$sum24$i$i = (($$sum$i21$i) + 24)|0;
            $gep_int1056 = $tbase$247$i;
            $gep1057 = (($gep_int1056) + ($$sum24$i$i))|0;
            $1047 = $gep1057;
            $1048 = $1047;
            HEAP32[$1047>>2] = $T$055$i$i;
            $$sum25$i$i = (($$sum$i21$i) + 12)|0;
            $gep_int1058 = $tbase$247$i;
            $gep1059 = (($gep_int1058) + ($$sum25$i$i))|0;
            $1049 = $gep1059;
            $1050 = $1049;
            HEAP32[$1049>>2] = $980;
            $$sum26$i$i = (($$sum$i21$i) + 8)|0;
            $gep_int1060 = $tbase$247$i;
            $gep1061 = (($gep_int1060) + ($$sum26$i$i))|0;
            $1051 = $gep1061;
            $1052 = $1051;
            HEAP32[$1051>>2] = $980;
            
            break L348;
           }
          }
         } while(0);
         
         $gep_int1062 = $T$0$lcssa$i28$i;
         $gep1063 = (($gep_int1062) + 8)|0;
         $1053 = $gep1063;
         $1054 = HEAP32[$1053>>2]|0;
         $1055 = $T$0$lcssa$i28$i;
         $expanded292 = 16800;
         $gep_int1064 = 16800;
         $gep1065 = (($gep_int1064) + 16)|0;
         $expanded291 = $gep1065;
         $1056 = HEAP32[$expanded291>>2]|0;
         $1057 = ($1055>>>0)<($1056>>>0);
         
         if ($1057) {
          _abort();
          // unreachable
         }
         $1058 = $1054;
         $1059 = ($1058>>>0)<($1056>>>0);
         
         if ($1059) {
          _abort();
          // unreachable
         } else {
          $gep_int1066 = $1054;
          $gep1067 = (($gep_int1066) + 12)|0;
          $1060 = $gep1067;
          HEAP32[$1060>>2] = $980;
          HEAP32[$1053>>2] = $980;
          $$sum21$i$i = (($$sum$i21$i) + 8)|0;
          $gep_int1068 = $tbase$247$i;
          $gep1069 = (($gep_int1068) + ($$sum21$i$i))|0;
          $1061 = $gep1069;
          $1062 = $1061;
          HEAP32[$1061>>2] = $1054;
          $$sum22$i$i = (($$sum$i21$i) + 12)|0;
          $gep_int1070 = $tbase$247$i;
          $gep1071 = (($gep_int1070) + ($$sum22$i$i))|0;
          $1063 = $gep1071;
          $1064 = $1063;
          HEAP32[$1063>>2] = $T$0$lcssa$i28$i;
          $$sum23$i$i = (($$sum$i21$i) + 24)|0;
          $gep_int1072 = $tbase$247$i;
          $gep1073 = (($gep_int1072) + ($$sum23$i$i))|0;
          $1065 = $gep1073;
          $1066 = $1065;
          HEAP32[$1065>>2] = 0;
          
          break;
         }
        }
       } while(0);
       $$sum1819$i$i = $798 | 8;
       $gep_int1074 = $tbase$247$i;
       $gep1075 = (($gep_int1074) + ($$sum1819$i$i))|0;
       $1067 = $gep1075;
       
       $mem$0 = $1067;
       
       STACKTOP = sp;return $mem$0|0;
      }
     } while(0);
     $1068 = $711;
     $expanded294 = 16800;
     $gep_int1076 = 16800;
     $gep1077 = (($gep_int1076) + 448)|0;
     $expanded293 = $gep1077;
     
     $sp$0$i$i$i = $expanded293;
     while(1) {
      
      $gep_int1078 = $sp$0$i$i$i;
      $1069 = $gep_int1078;
      $1070 = HEAP32[$1069>>2]|0;
      $1071 = ($1070>>>0)>($1068>>>0);
      
      if (!($1071)) {
       $gep_int1079 = $sp$0$i$i$i;
       $gep1080 = (($gep_int1079) + 4)|0;
       $1072 = $gep1080;
       $1073 = HEAP32[$1072>>2]|0;
       $gep_int1081 = $1070;
       $gep1082 = (($gep_int1081) + ($1073))|0;
       $1074 = $gep1082;
       $1075 = ($1074>>>0)>($1068>>>0);
       
       if ($1075) {
        break;
       }
      }
      $gep_int1083 = $sp$0$i$i$i;
      $gep1084 = (($gep_int1083) + 8)|0;
      $1076 = $gep1084;
      $1077 = HEAP32[$1076>>2]|0;
      
      $sp$0$i$i$i = $1077;
     }
     $$sum$i15$i = (($1073) + -47)|0;
     $$sum1$i16$i = (($1073) + -39)|0;
     $gep_int1085 = $1070;
     $gep1086 = (($gep_int1085) + ($$sum1$i16$i))|0;
     $1078 = $gep1086;
     $1079 = $1078;
     $1080 = $1079 & 7;
     $1081 = ($1080|0)==(0);
     
     if ($1081) {
      $1084 = 0;
     } else {
      $1082 = (0 - ($1079))|0;
      $1083 = $1082 & 7;
      
      $1084 = $1083;
     }
     
     $$sum2$i17$i = (($$sum$i15$i) + ($1084))|0;
     $gep_int1087 = $1070;
     $gep1088 = (($gep_int1087) + ($$sum2$i17$i))|0;
     $1085 = $gep1088;
     $gep_int1089 = $711;
     $gep1090 = (($gep_int1089) + 16)|0;
     $1086 = $gep1090;
     $1087 = $1086;
     $1088 = ($1085>>>0)<($1087>>>0);
     $1089 = $1088 ? $1068 : $1085;
     $gep_int1091 = $1089;
     $gep1092 = (($gep_int1091) + 8)|0;
     $1090 = $gep1092;
     $1091 = $1090;
     $1092 = (($tsize$246$i) + -40)|0;
     $gep_int1093 = $tbase$247$i;
     $gep1094 = (($gep_int1093) + 8)|0;
     $1093 = $gep1094;
     $1094 = $1093;
     $1095 = $1094 & 7;
     $1096 = ($1095|0)==(0);
     
     if ($1096) {
      $1099 = 0;
     } else {
      $1097 = (0 - ($1094))|0;
      $1098 = $1097 & 7;
      
      $1099 = $1098;
     }
     
     $gep_int1095 = $tbase$247$i;
     $gep1096 = (($gep_int1095) + ($1099))|0;
     $1100 = $gep1096;
     $1101 = $1100;
     $1102 = (($1092) - ($1099))|0;
     $expanded296 = 16800;
     $gep_int1097 = 16800;
     $gep1098 = (($gep_int1097) + 24)|0;
     $expanded295 = $gep1098;
     HEAP32[$expanded295>>2] = $1101;
     $expanded298 = 16800;
     $gep_int1099 = 16800;
     $gep1100 = (($gep_int1099) + 12)|0;
     $expanded297 = $gep1100;
     HEAP32[$expanded297>>2] = $1102;
     $1103 = $1102 | 1;
     $$sum$i$i$i = (($1099) + 4)|0;
     $gep_int1101 = $tbase$247$i;
     $gep1102 = (($gep_int1101) + ($$sum$i$i$i))|0;
     $1104 = $gep1102;
     $1105 = $1104;
     HEAP32[$1104>>2] = $1103;
     $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
     $gep_int1103 = $tbase$247$i;
     $gep1104 = (($gep_int1103) + ($$sum2$i$i$i))|0;
     $1106 = $gep1104;
     $1107 = $1106;
     HEAP32[$1106>>2] = 40;
     $expanded300 = 17272;
     $gep_int1105 = 17272;
     $gep1106 = (($gep_int1105) + 16)|0;
     $expanded299 = $gep1106;
     $1108 = HEAP32[$expanded299>>2]|0;
     $expanded302 = 16800;
     $gep_int1107 = 16800;
     $gep1108 = (($gep_int1107) + 28)|0;
     $expanded301 = $gep1108;
     HEAP32[$expanded301>>2] = $1108;
     $gep_int1109 = $1089;
     $gep1110 = (($gep_int1109) + 4)|0;
     $1109 = $gep1110;
     $1110 = $1109;
     HEAP32[$1109>>2] = 27;
     $expanded305 = 16800;
     $gep_int1111 = 16800;
     $gep1112 = (($gep_int1111) + 448)|0;
     $expanded304 = $gep1112;
     $expanded303 = $expanded304;
     ;HEAP32[$1090+0>>2]=HEAP32[$expanded303+0>>2]|0;HEAP32[$1090+4>>2]=HEAP32[$expanded303+4>>2]|0;HEAP32[$1090+8>>2]=HEAP32[$expanded303+8>>2]|0;HEAP32[$1090+12>>2]=HEAP32[$expanded303+12>>2]|0;
     $expanded307 = 16800;
     $gep_int1113 = 16800;
     $gep1114 = (($gep_int1113) + 448)|0;
     $expanded306 = $gep1114;
     HEAP32[$expanded306>>2] = $tbase$247$i;
     $expanded309 = 16800;
     $gep_int1115 = 16800;
     $gep1116 = (($gep_int1115) + 452)|0;
     $expanded308 = $gep1116;
     HEAP32[$expanded308>>2] = $tsize$246$i;
     $expanded311 = 16800;
     $gep_int1117 = 16800;
     $gep1118 = (($gep_int1117) + 460)|0;
     $expanded310 = $gep1118;
     HEAP32[$expanded310>>2] = 0;
     $expanded313 = 16800;
     $gep_int1119 = 16800;
     $gep1120 = (($gep_int1119) + 456)|0;
     $expanded312 = $gep1120;
     HEAP32[$expanded312>>2] = $1091;
     $gep_int1121 = $1089;
     $gep1122 = (($gep_int1121) + 28)|0;
     $1111 = $gep1122;
     $1112 = $1111;
     HEAP32[$1111>>2] = 7;
     $gep_int1123 = $1089;
     $gep1124 = (($gep_int1123) + 32)|0;
     $1113 = $gep1124;
     $1114 = ($1113>>>0)<($1074>>>0);
     
     if ($1114) {
      $1115 = $1112;
      while(1) {
       
       $gep_int1125 = $1115;
       $gep1126 = (($gep_int1125) + 4)|0;
       $1116 = $gep1126;
       HEAP32[$1116>>2] = 7;
       $gep_int1127 = $1115;
       $gep1128 = (($gep_int1127) + 8)|0;
       $1117 = $gep1128;
       $1118 = $1117;
       $1119 = ($1118>>>0)<($1074>>>0);
       
       if ($1119) {
        $1115$phi = $1116;$1115 = $1115$phi;
       } else {
        break;
       }
      }
     }
     $1120 = ($1089|0)==($1068|0);
     
     if ($1120) {
      break;
     }
     $1121 = $1089;
     $1122 = $711;
     $1123 = (($1121) - ($1122))|0;
     $gep_int1129 = $711;
     $gep1130 = (($gep_int1129) + ($1123))|0;
     $1124 = $gep1130;
     $$sum3$i$i = (($1123) + 4)|0;
     $gep_int1131 = $711;
     $gep1132 = (($gep_int1131) + ($$sum3$i$i))|0;
     $1125 = $gep1132;
     $1126 = $1125;
     $1127 = HEAP32[$1125>>2]|0;
     $1128 = $1127 & -2;
     HEAP32[$1125>>2] = $1128;
     $1129 = $1123 | 1;
     $gep_int1133 = $711;
     $gep1134 = (($gep_int1133) + 4)|0;
     $1130 = $gep1134;
     HEAP32[$1130>>2] = $1129;
     $1131 = $1124;
     HEAP32[$1124>>2] = $1123;
     $1132 = $1123 >>> 3;
     $1133 = ($1123>>>0)<(256);
     
     if ($1133) {
      $1134 = $1132 << 1;
      $expanded314 = 16800;
      $gep_int1135 = 16800;
      $gep1136 = (($gep_int1135) + 40)|0;
      $gep_array1137 = $1134<<2;
      $gep1138 = (($gep1136) + ($gep_array1137))|0;
      $1135 = $gep1138;
      $1136 = $1135;
      $expanded316 = 16800;
      $gep_int1139 = 16800;
      $expanded315 = $gep_int1139;
      $1137 = HEAP32[$expanded315>>2]|0;
      $1138 = 1 << $1132;
      $1139 = $1137 & $1138;
      $1140 = ($1139|0)==(0);
      
      do {
       if ($1140) {
        $1141 = $1137 | $1138;
        $expanded318 = 16800;
        $gep_int1140 = 16800;
        $expanded317 = $gep_int1140;
        HEAP32[$expanded317>>2] = $1141;
        $$sum11$pre$i$i = (($1134) + 2)|0;
        $expanded319 = 16800;
        $gep_int1141 = 16800;
        $gep1142 = (($gep_int1141) + 40)|0;
        $gep_array1143 = $$sum11$pre$i$i<<2;
        $gep1144 = (($gep1142) + ($gep_array1143))|0;
        $$pre$i$i = $gep1144;
        
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $1136;
       } else {
        $$sum12$i$i = (($1134) + 2)|0;
        $expanded320 = 16800;
        $gep_int1145 = 16800;
        $gep1146 = (($gep_int1145) + 40)|0;
        $gep_array1147 = $$sum12$i$i<<2;
        $gep1148 = (($gep1146) + ($gep_array1147))|0;
        $1142 = $gep1148;
        $1143 = HEAP32[$1142>>2]|0;
        $1144 = $1143;
        $expanded322 = 16800;
        $gep_int1149 = 16800;
        $gep1150 = (($gep_int1149) + 16)|0;
        $expanded321 = $gep1150;
        $1145 = HEAP32[$expanded321>>2]|0;
        $1146 = ($1144>>>0)<($1145>>>0);
        
        if (!($1146)) {
         $$pre$phi$i$iZ2D = $1142;$F$0$i$i = $1143;
         break;
        }
        _abort();
        // unreachable
       }
      } while(0);
      
      
      HEAP32[$$pre$phi$i$iZ2D>>2] = $711;
      $gep_int1151 = $F$0$i$i;
      $gep1152 = (($gep_int1151) + 12)|0;
      $1147 = $gep1152;
      HEAP32[$1147>>2] = $711;
      $gep_int1153 = $711;
      $gep1154 = (($gep_int1153) + 8)|0;
      $1148 = $gep1154;
      HEAP32[$1148>>2] = $F$0$i$i;
      $gep_int1155 = $711;
      $gep1156 = (($gep_int1155) + 12)|0;
      $1149 = $gep1156;
      HEAP32[$1149>>2] = $1136;
      
      break;
     }
     $1150 = $711;
     $1151 = $1123 >>> 8;
     $1152 = ($1151|0)==(0);
     
     do {
      if ($1152) {
       $I1$0$i$i = 0;
      } else {
       $1153 = ($1123>>>0)>(16777215);
       
       if ($1153) {
        $I1$0$i$i = 31;
        break;
       }
       $1154 = (($1151) + 1048320)|0;
       $1155 = $1154 >>> 16;
       $1156 = $1155 & 8;
       $1157 = $1151 << $1156;
       $1158 = (($1157) + 520192)|0;
       $1159 = $1158 >>> 16;
       $1160 = $1159 & 4;
       $1161 = $1160 | $1156;
       $1162 = $1157 << $1160;
       $1163 = (($1162) + 245760)|0;
       $1164 = $1163 >>> 16;
       $1165 = $1164 & 2;
       $1166 = $1161 | $1165;
       $1167 = (14 - ($1166))|0;
       $1168 = $1162 << $1165;
       $1169 = $1168 >>> 15;
       $1170 = (($1167) + ($1169))|0;
       $1171 = $1170 << 1;
       $1172 = (($1170) + 7)|0;
       $1173 = $1123 >>> $1172;
       $1174 = $1173 & 1;
       $1175 = $1174 | $1171;
       
       $I1$0$i$i = $1175;
      }
     } while(0);
     
     $expanded323 = 16800;
     $gep_int1157 = 16800;
     $gep1158 = (($gep_int1157) + 304)|0;
     $gep_array1159 = $I1$0$i$i<<2;
     $gep1160 = (($gep1158) + ($gep_array1159))|0;
     $1176 = $gep1160;
     $gep_int1161 = $711;
     $gep1162 = (($gep_int1161) + 28)|0;
     $1177 = $gep1162;
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1177>>2] = $I1$0$c$i$i;
     $gep_int1163 = $711;
     $gep1164 = (($gep_int1163) + 20)|0;
     $1178 = $gep1164;
     HEAP32[$1178>>2] = 0;
     $gep_int1165 = $711;
     $gep1166 = (($gep_int1165) + 16)|0;
     $1179 = $gep1166;
     HEAP32[$1179>>2] = 0;
     $expanded325 = 16800;
     $gep_int1167 = 16800;
     $gep1168 = (($gep_int1167) + 4)|0;
     $expanded324 = $gep1168;
     $1180 = HEAP32[$expanded324>>2]|0;
     $1181 = 1 << $I1$0$i$i;
     $1182 = $1180 & $1181;
     $1183 = ($1182|0)==(0);
     
     if ($1183) {
      $1184 = $1180 | $1181;
      $expanded327 = 16800;
      $gep_int1169 = 16800;
      $gep1170 = (($gep_int1169) + 4)|0;
      $expanded326 = $gep1170;
      HEAP32[$expanded326>>2] = $1184;
      HEAP32[$1176>>2] = $1150;
      $gep_int1171 = $711;
      $gep1172 = (($gep_int1171) + 24)|0;
      $1185 = $gep1172;
      $$c$i$i = $1176;
      HEAP32[$1185>>2] = $$c$i$i;
      $gep_int1173 = $711;
      $gep1174 = (($gep_int1173) + 12)|0;
      $1186 = $gep1174;
      HEAP32[$1186>>2] = $711;
      $gep_int1175 = $711;
      $gep1176 = (($gep_int1175) + 8)|0;
      $1187 = $gep1176;
      HEAP32[$1187>>2] = $711;
      
      break;
     }
     $1188 = HEAP32[$1176>>2]|0;
     $1189 = ($I1$0$i$i|0)==(31);
     
     if ($1189) {
      $1192 = 0;
     } else {
      $1190 = $I1$0$i$i >>> 1;
      $1191 = (25 - ($1190))|0;
      
      $1192 = $1191;
     }
     
     $gep_int1177 = $1188;
     $gep1178 = (($gep_int1177) + 4)|0;
     $1193 = $gep1178;
     $1194 = HEAP32[$1193>>2]|0;
     $1195 = $1194 & -8;
     $1196 = ($1195|0)==($1123|0);
     
     L499: do {
      if ($1196) {
       $T$0$lcssa$i$i = $1188;
      } else {
       $1197 = $1123 << $1192;
       
       $K2$015$i$i = $1197;$T$014$i$i = $1188;
       while(1) {
        
        
        $1203 = $K2$015$i$i >>> 31;
        $gep_int1181 = $T$014$i$i;
        $gep1182 = (($gep_int1181) + 16)|0;
        $gep_array1183 = $1203<<2;
        $gep1184 = (($gep1182) + ($gep_array1183))|0;
        $1204 = $gep1184;
        $1205 = HEAP32[$1204>>2]|0;
        $1206 = ($1205|0)==(0);
        
        if ($1206) {
         break;
        }
        $1198 = $K2$015$i$i << 1;
        $gep_int1179 = $1205;
        $gep1180 = (($gep_int1179) + 4)|0;
        $1199 = $gep1180;
        $1200 = HEAP32[$1199>>2]|0;
        $1201 = $1200 & -8;
        $1202 = ($1201|0)==($1123|0);
        
        if ($1202) {
         $T$0$lcssa$i$i = $1205;
         break L499;
        } else {
         $T$014$i$i$phi = $1205;$K2$015$i$i = $1198;$T$014$i$i = $T$014$i$i$phi;
        }
       }
       $1207 = $1204;
       $expanded329 = 16800;
       $gep_int1185 = 16800;
       $gep1186 = (($gep_int1185) + 16)|0;
       $expanded328 = $gep1186;
       $1208 = HEAP32[$expanded328>>2]|0;
       $1209 = ($1207>>>0)<($1208>>>0);
       
       if ($1209) {
        _abort();
        // unreachable
       } else {
        HEAP32[$1204>>2] = $1150;
        $gep_int1187 = $711;
        $gep1188 = (($gep_int1187) + 24)|0;
        $1210 = $gep1188;
        $T$0$c8$i$i = $T$014$i$i;
        HEAP32[$1210>>2] = $T$0$c8$i$i;
        $gep_int1189 = $711;
        $gep1190 = (($gep_int1189) + 12)|0;
        $1211 = $gep1190;
        HEAP32[$1211>>2] = $711;
        $gep_int1191 = $711;
        $gep1192 = (($gep_int1191) + 8)|0;
        $1212 = $gep1192;
        HEAP32[$1212>>2] = $711;
        
        break L311;
       }
      }
     } while(0);
     
     $gep_int1193 = $T$0$lcssa$i$i;
     $gep1194 = (($gep_int1193) + 8)|0;
     $1213 = $gep1194;
     $1214 = HEAP32[$1213>>2]|0;
     $1215 = $T$0$lcssa$i$i;
     $expanded331 = 16800;
     $gep_int1195 = 16800;
     $gep1196 = (($gep_int1195) + 16)|0;
     $expanded330 = $gep1196;
     $1216 = HEAP32[$expanded330>>2]|0;
     $1217 = ($1215>>>0)<($1216>>>0);
     
     if ($1217) {
      _abort();
      // unreachable
     }
     $1218 = $1214;
     $1219 = ($1218>>>0)<($1216>>>0);
     
     if ($1219) {
      _abort();
      // unreachable
     } else {
      $gep_int1197 = $1214;
      $gep1198 = (($gep_int1197) + 12)|0;
      $1220 = $gep1198;
      HEAP32[$1220>>2] = $1150;
      HEAP32[$1213>>2] = $1150;
      $gep_int1199 = $711;
      $gep1200 = (($gep_int1199) + 8)|0;
      $1221 = $gep1200;
      $$c7$i$i = $1214;
      HEAP32[$1221>>2] = $$c7$i$i;
      $gep_int1201 = $711;
      $gep1202 = (($gep_int1201) + 12)|0;
      $1222 = $gep1202;
      $T$0$c$i$i = $T$0$lcssa$i$i;
      HEAP32[$1222>>2] = $T$0$c$i$i;
      $gep_int1203 = $711;
      $gep1204 = (($gep_int1203) + 24)|0;
      $1223 = $gep1204;
      HEAP32[$1223>>2] = 0;
      
      break;
     }
    }
   } while(0);
   $expanded333 = 16800;
   $gep_int1205 = 16800;
   $gep1206 = (($gep_int1205) + 12)|0;
   $expanded332 = $gep1206;
   $1224 = HEAP32[$expanded332>>2]|0;
   $1225 = ($1224>>>0)>($nb$0>>>0);
   
   if (!($1225)) {
    break;
   }
   $1226 = (($1224) - ($nb$0))|0;
   $expanded335 = 16800;
   $gep_int1207 = 16800;
   $gep1208 = (($gep_int1207) + 12)|0;
   $expanded334 = $gep1208;
   HEAP32[$expanded334>>2] = $1226;
   $expanded337 = 16800;
   $gep_int1209 = 16800;
   $gep1210 = (($gep_int1209) + 24)|0;
   $expanded336 = $gep1210;
   $1227 = HEAP32[$expanded336>>2]|0;
   $1228 = $1227;
   $gep_int1211 = $1227;
   $gep1212 = (($gep_int1211) + ($nb$0))|0;
   $1229 = $gep1212;
   $1230 = $1229;
   $expanded339 = 16800;
   $gep_int1213 = 16800;
   $gep1214 = (($gep_int1213) + 24)|0;
   $expanded338 = $gep1214;
   HEAP32[$expanded338>>2] = $1230;
   $1231 = $1226 | 1;
   $$sum$i34 = (($nb$0) + 4)|0;
   $gep_int1215 = $1227;
   $gep1216 = (($gep_int1215) + ($$sum$i34))|0;
   $1232 = $gep1216;
   $1233 = $1232;
   HEAP32[$1232>>2] = $1231;
   $1234 = $nb$0 | 3;
   $gep_int1217 = $1227;
   $gep1218 = (($gep_int1217) + 4)|0;
   $1235 = $gep1218;
   HEAP32[$1235>>2] = $1234;
   $gep_int1219 = $1227;
   $gep1220 = (($gep_int1219) + 8)|0;
   $1236 = $gep1220;
   $1237 = $1236;
   
   $mem$0 = $1237;
   
   STACKTOP = sp;return $mem$0|0;
  }
 } while(0);
 $1238 = ___errno_location()|0;
 HEAP32[$1238>>2] = 12;
 
 $mem$0 = 0;
 
 STACKTOP = sp;return $mem$0|0;
}
function _free($mem) {
 $mem = $mem|0;
 var $$c = 0, $$c15 = 0, $$pre = 0, $$pre$phi83Z2D = 0, $$pre$phi85Z2D = 0, $$pre$phiZ2D = 0, $$pre82 = 0, $$pre84 = 0, $$sum = 0, $$sum10 = 0, $$sum19$pre = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2829 = 0, $$sum3 = 0, $$sum34 = 0, $$sum35 = 0, $$sum37 = 0;
 var $$sum38 = 0, $$sum39 = 0, $$sum4 = 0, $$sum40 = 0, $$sum41 = 0, $$sum42 = 0, $$sum43 = 0, $$sum44 = 0, $$sum47 = 0, $$sum48 = 0, $$sum6 = 0, $$sum78 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$072 = 0;
 var $R$0 = 0, $R$0$phi = 0, $R$1 = 0, $R7$0 = 0, $R7$0$phi = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$phi = 0, $RP9$0 = 0, $RP9$0$phi = 0, $T$0$c = 0, $T$0$c16 = 0, $T$0$lcssa = 0, $T$071 = 0, $T$071$phi = 0, $cond = 0, $cond69 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0;
 var $expanded100 = 0, $expanded101 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0;
 var $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0;
 var $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded5 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded58 = 0, $expanded59 = 0, $expanded6 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0;
 var $expanded64 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded7 = 0, $expanded70 = 0, $expanded71 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded79 = 0, $expanded8 = 0, $expanded80 = 0, $expanded81 = 0;
 var $expanded82 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, $expanded86 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded9 = 0, $expanded90 = 0, $expanded91 = 0, $expanded92 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded98 = 0, $expanded99 = 0, $gep = 0;
 var $gep103 = 0, $gep105 = 0, $gep107 = 0, $gep109 = 0, $gep111 = 0, $gep113 = 0, $gep115 = 0, $gep117 = 0, $gep118 = 0, $gep120 = 0, $gep124 = 0, $gep126 = 0, $gep128 = 0, $gep130 = 0, $gep132 = 0, $gep134 = 0, $gep136 = 0, $gep138 = 0, $gep140 = 0, $gep142 = 0;
 var $gep144 = 0, $gep146 = 0, $gep148 = 0, $gep150 = 0, $gep152 = 0, $gep154 = 0, $gep156 = 0, $gep158 = 0, $gep160 = 0, $gep162 = 0, $gep164 = 0, $gep166 = 0, $gep168 = 0, $gep170 = 0, $gep172 = 0, $gep174 = 0, $gep176 = 0, $gep178 = 0, $gep180 = 0, $gep182 = 0;
 var $gep184 = 0, $gep186 = 0, $gep188 = 0, $gep190 = 0, $gep192 = 0, $gep194 = 0, $gep196 = 0, $gep198 = 0, $gep200 = 0, $gep202 = 0, $gep204 = 0, $gep206 = 0, $gep208 = 0, $gep210 = 0, $gep212 = 0, $gep214 = 0, $gep216 = 0, $gep218 = 0, $gep220 = 0, $gep222 = 0;
 var $gep224 = 0, $gep226 = 0, $gep228 = 0, $gep230 = 0, $gep234 = 0, $gep236 = 0, $gep238 = 0, $gep240 = 0, $gep242 = 0, $gep244 = 0, $gep246 = 0, $gep248 = 0, $gep250 = 0, $gep252 = 0, $gep254 = 0, $gep256 = 0, $gep258 = 0, $gep260 = 0, $gep262 = 0, $gep264 = 0;
 var $gep266 = 0, $gep268 = 0, $gep270 = 0, $gep272 = 0, $gep274 = 0, $gep276 = 0, $gep278 = 0, $gep280 = 0, $gep282 = 0, $gep284 = 0, $gep286 = 0, $gep288 = 0, $gep290 = 0, $gep292 = 0, $gep294 = 0, $gep296 = 0, $gep298 = 0, $gep300 = 0, $gep302 = 0, $gep304 = 0;
 var $gep306 = 0, $gep308 = 0, $gep310 = 0, $gep312 = 0, $gep314 = 0, $gep318 = 0, $gep320 = 0, $gep322 = 0, $gep324 = 0, $gep326 = 0, $gep328 = 0, $gep330 = 0, $gep332 = 0, $gep334 = 0, $gep336 = 0, $gep338 = 0, $gep340 = 0, $gep342 = 0, $gep344 = 0, $gep346 = 0;
 var $gep348 = 0, $gep350 = 0, $gep352 = 0, $gep354 = 0, $gep356 = 0, $gep358 = 0, $gep360 = 0, $gep362 = 0, $gep364 = 0, $gep366 = 0, $gep368 = 0, $gep370 = 0, $gep372 = 0, $gep374 = 0, $gep376 = 0, $gep378 = 0, $gep380 = 0, $gep382 = 0, $gep384 = 0, $gep386 = 0;
 var $gep388 = 0, $gep390 = 0, $gep_array = 0, $gep_array151 = 0, $gep_array225 = 0, $gep_array267 = 0, $gep_array313 = 0, $gep_array319 = 0, $gep_array323 = 0, $gep_array335 = 0, $gep_array359 = 0, $gep_int = 0, $gep_int102 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int112 = 0, $gep_int114 = 0, $gep_int116 = 0;
 var $gep_int119 = 0, $gep_int121 = 0, $gep_int122 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int127 = 0, $gep_int129 = 0, $gep_int131 = 0, $gep_int133 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int139 = 0, $gep_int141 = 0, $gep_int143 = 0, $gep_int145 = 0, $gep_int147 = 0, $gep_int149 = 0, $gep_int153 = 0, $gep_int155 = 0, $gep_int157 = 0;
 var $gep_int159 = 0, $gep_int161 = 0, $gep_int163 = 0, $gep_int165 = 0, $gep_int167 = 0, $gep_int169 = 0, $gep_int171 = 0, $gep_int173 = 0, $gep_int175 = 0, $gep_int177 = 0, $gep_int179 = 0, $gep_int181 = 0, $gep_int183 = 0, $gep_int185 = 0, $gep_int187 = 0, $gep_int189 = 0, $gep_int191 = 0, $gep_int193 = 0, $gep_int195 = 0, $gep_int197 = 0;
 var $gep_int199 = 0, $gep_int201 = 0, $gep_int203 = 0, $gep_int205 = 0, $gep_int207 = 0, $gep_int209 = 0, $gep_int211 = 0, $gep_int213 = 0, $gep_int215 = 0, $gep_int217 = 0, $gep_int219 = 0, $gep_int221 = 0, $gep_int223 = 0, $gep_int227 = 0, $gep_int229 = 0, $gep_int231 = 0, $gep_int232 = 0, $gep_int233 = 0, $gep_int235 = 0, $gep_int237 = 0;
 var $gep_int239 = 0, $gep_int241 = 0, $gep_int243 = 0, $gep_int245 = 0, $gep_int247 = 0, $gep_int249 = 0, $gep_int251 = 0, $gep_int253 = 0, $gep_int255 = 0, $gep_int257 = 0, $gep_int259 = 0, $gep_int261 = 0, $gep_int263 = 0, $gep_int265 = 0, $gep_int269 = 0, $gep_int271 = 0, $gep_int273 = 0, $gep_int275 = 0, $gep_int277 = 0, $gep_int279 = 0;
 var $gep_int281 = 0, $gep_int283 = 0, $gep_int285 = 0, $gep_int287 = 0, $gep_int289 = 0, $gep_int291 = 0, $gep_int293 = 0, $gep_int295 = 0, $gep_int297 = 0, $gep_int299 = 0, $gep_int301 = 0, $gep_int303 = 0, $gep_int305 = 0, $gep_int307 = 0, $gep_int309 = 0, $gep_int311 = 0, $gep_int315 = 0, $gep_int316 = 0, $gep_int317 = 0, $gep_int321 = 0;
 var $gep_int325 = 0, $gep_int327 = 0, $gep_int329 = 0, $gep_int331 = 0, $gep_int333 = 0, $gep_int337 = 0, $gep_int339 = 0, $gep_int341 = 0, $gep_int343 = 0, $gep_int345 = 0, $gep_int347 = 0, $gep_int349 = 0, $gep_int351 = 0, $gep_int353 = 0, $gep_int355 = 0, $gep_int357 = 0, $gep_int361 = 0, $gep_int363 = 0, $gep_int365 = 0, $gep_int367 = 0;
 var $gep_int369 = 0, $gep_int371 = 0, $gep_int373 = 0, $gep_int375 = 0, $gep_int377 = 0, $gep_int379 = 0, $gep_int381 = 0, $gep_int383 = 0, $gep_int385 = 0, $gep_int387 = 0, $gep_int389 = 0, $p$0 = 0, $phitmp = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sp$0$in$i$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($mem|0)==(0);
 
 if ($1) {
  STACKTOP = sp;return;
 }
 $gep_int = $mem;
 $gep = (($gep_int) + -8)|0;
 $2 = $gep;
 $3 = $2;
 $expanded1 = 16800;
 $gep_int102 = 16800;
 $gep103 = (($gep_int102) + 16)|0;
 $expanded = $gep103;
 $4 = HEAP32[$expanded>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 
 if ($5) {
  _abort();
  // unreachable
 }
 $gep_int104 = $mem;
 $gep105 = (($gep_int104) + -4)|0;
 $6 = $gep105;
 $7 = $6;
 $8 = HEAP32[$6>>2]|0;
 $9 = $8 & 3;
 $10 = ($9|0)==(1);
 
 if ($10) {
  _abort();
  // unreachable
 }
 $11 = $8 & -8;
 $$sum = (($11) + -8)|0;
 $gep_int106 = $mem;
 $gep107 = (($gep_int106) + ($$sum))|0;
 $12 = $gep107;
 $13 = $12;
 $14 = $8 & 1;
 $15 = ($14|0)==(0);
 
 L10: do {
  if ($15) {
   $16 = $2;
   $17 = HEAP32[$2>>2]|0;
   $18 = ($9|0)==(0);
   
   if ($18) {
    STACKTOP = sp;return;
   }
   $$sum3 = (-8 - ($17))|0;
   $gep_int108 = $mem;
   $gep109 = (($gep_int108) + ($$sum3))|0;
   $19 = $gep109;
   $20 = $19;
   $21 = (($17) + ($11))|0;
   $22 = ($19>>>0)<($4>>>0);
   
   if ($22) {
    _abort();
    // unreachable
   }
   $expanded3 = 16800;
   $gep_int110 = 16800;
   $gep111 = (($gep_int110) + 20)|0;
   $expanded2 = $gep111;
   $23 = HEAP32[$expanded2>>2]|0;
   $24 = ($20|0)==($23|0);
   
   if ($24) {
    $$sum4 = (($11) + -4)|0;
    $gep_int183 = $mem;
    $gep184 = (($gep_int183) + ($$sum4))|0;
    $130 = $gep184;
    $131 = $130;
    $132 = HEAP32[$130>>2]|0;
    $133 = $132 & 3;
    $134 = ($133|0)==(3);
    
    if (!($134)) {
     $p$0 = $20;$psize$0 = $21;
     break;
    }
    $expanded23 = 16800;
    $gep_int185 = 16800;
    $gep186 = (($gep_int185) + 8)|0;
    $expanded22 = $gep186;
    HEAP32[$expanded22>>2] = $21;
    $135 = HEAP32[$130>>2]|0;
    $136 = $135 & -2;
    HEAP32[$130>>2] = $136;
    $137 = $21 | 1;
    $$sum35 = (($$sum3) + 4)|0;
    $gep_int187 = $mem;
    $gep188 = (($gep_int187) + ($$sum35))|0;
    $138 = $gep188;
    $139 = $138;
    HEAP32[$138>>2] = $137;
    $140 = $12;
    HEAP32[$12>>2] = $21;
    
    STACKTOP = sp;return;
   }
   $25 = $17 >>> 3;
   $26 = ($17>>>0)<(256);
   
   if ($26) {
    $$sum47 = (($$sum3) + 8)|0;
    $gep_int112 = $mem;
    $gep113 = (($gep_int112) + ($$sum47))|0;
    $27 = $gep113;
    $28 = $27;
    $29 = HEAP32[$27>>2]|0;
    $$sum48 = (($$sum3) + 12)|0;
    $gep_int114 = $mem;
    $gep115 = (($gep_int114) + ($$sum48))|0;
    $30 = $gep115;
    $31 = $30;
    $32 = HEAP32[$30>>2]|0;
    $33 = $25 << 1;
    $expanded4 = 16800;
    $gep_int116 = 16800;
    $gep117 = (($gep_int116) + 40)|0;
    $gep_array = $33<<2;
    $gep118 = (($gep117) + ($gep_array))|0;
    $34 = $gep118;
    $35 = $34;
    $36 = ($29|0)==($35|0);
    
    do {
     if (!($36)) {
      $37 = $29;
      $38 = ($37>>>0)<($4>>>0);
      
      if ($38) {
       _abort();
       // unreachable
      }
      $gep_int119 = $29;
      $gep120 = (($gep_int119) + 12)|0;
      $39 = $gep120;
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==($20|0);
      
      if ($41) {
       break;
      }
      _abort();
      // unreachable
     }
    } while(0);
    $42 = ($32|0)==($29|0);
    
    if ($42) {
     $43 = 1 << $25;
     $44 = $43 ^ -1;
     $expanded6 = 16800;
     $gep_int121 = 16800;
     $expanded5 = $gep_int121;
     $45 = HEAP32[$expanded5>>2]|0;
     $46 = $45 & $44;
     $expanded8 = 16800;
     $gep_int122 = 16800;
     $expanded7 = $gep_int122;
     HEAP32[$expanded7>>2] = $46;
     
     $p$0 = $20;$psize$0 = $21;
     break;
    }
    $47 = ($32|0)==($35|0);
    
    do {
     if ($47) {
      $gep_int123 = $32;
      $gep124 = (($gep_int123) + 8)|0;
      $$pre84 = $gep124;
      
      $$pre$phi85Z2D = $$pre84;
     } else {
      $48 = $32;
      $49 = ($48>>>0)<($4>>>0);
      
      if ($49) {
       _abort();
       // unreachable
      }
      $gep_int125 = $32;
      $gep126 = (($gep_int125) + 8)|0;
      $50 = $gep126;
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==($20|0);
      
      if ($52) {
       $$pre$phi85Z2D = $50;
       break;
      }
      _abort();
      // unreachable
     }
    } while(0);
    
    $gep_int127 = $29;
    $gep128 = (($gep_int127) + 12)|0;
    $53 = $gep128;
    HEAP32[$53>>2] = $32;
    HEAP32[$$pre$phi85Z2D>>2] = $29;
    
    $p$0 = $20;$psize$0 = $21;
    break;
   }
   $54 = $19;
   $$sum37 = (($$sum3) + 24)|0;
   $gep_int129 = $mem;
   $gep130 = (($gep_int129) + ($$sum37))|0;
   $55 = $gep130;
   $56 = $55;
   $57 = HEAP32[$55>>2]|0;
   $$sum38 = (($$sum3) + 12)|0;
   $gep_int131 = $mem;
   $gep132 = (($gep_int131) + ($$sum38))|0;
   $58 = $gep132;
   $59 = $58;
   $60 = HEAP32[$58>>2]|0;
   $61 = ($60|0)==($54|0);
   
   do {
    if ($61) {
     $$sum40 = (($$sum3) + 20)|0;
     $gep_int139 = $mem;
     $gep140 = (($gep_int139) + ($$sum40))|0;
     $73 = $gep140;
     $74 = $73;
     $75 = HEAP32[$73>>2]|0;
     $76 = ($75|0)==(0);
     
     if ($76) {
      $$sum39 = (($$sum3) + 16)|0;
      $gep_int141 = $mem;
      $gep142 = (($gep_int141) + ($$sum39))|0;
      $77 = $gep142;
      $78 = $77;
      $79 = HEAP32[$77>>2]|0;
      $80 = ($79|0)==(0);
      
      if ($80) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $79;$RP$0 = $78;
      }
     } else {
      $R$0 = $75;$RP$0 = $74;
     }
     while(1) {
      
      
      $gep_int143 = $R$0;
      $gep144 = (($gep_int143) + 20)|0;
      $81 = $gep144;
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)==(0);
      
      if (!($83)) {
       $RP$0$phi = $81;$R$0$phi = $82;$RP$0 = $RP$0$phi;$R$0 = $R$0$phi;
       continue;
      }
      $gep_int145 = $R$0;
      $gep146 = (($gep_int145) + 16)|0;
      $84 = $gep146;
      $85 = HEAP32[$84>>2]|0;
      $86 = ($85|0)==(0);
      
      if ($86) {
       break;
      } else {
       $R$0 = $85;$RP$0 = $84;
      }
     }
     $87 = $RP$0;
     $88 = ($87>>>0)<($4>>>0);
     
     if ($88) {
      _abort();
      // unreachable
     } else {
      HEAP32[$RP$0>>2] = 0;
      
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum44 = (($$sum3) + 8)|0;
     $gep_int133 = $mem;
     $gep134 = (($gep_int133) + ($$sum44))|0;
     $62 = $gep134;
     $63 = $62;
     $64 = HEAP32[$62>>2]|0;
     $65 = $64;
     $66 = ($65>>>0)<($4>>>0);
     
     if ($66) {
      _abort();
      // unreachable
     }
     $gep_int135 = $64;
     $gep136 = (($gep_int135) + 12)|0;
     $67 = $gep136;
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==($54|0);
     
     if (!($69)) {
      _abort();
      // unreachable
     }
     $gep_int137 = $60;
     $gep138 = (($gep_int137) + 8)|0;
     $70 = $gep138;
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)==($54|0);
     
     if ($72) {
      HEAP32[$67>>2] = $60;
      HEAP32[$70>>2] = $64;
      
      $R$1 = $60;
      break;
     } else {
      _abort();
      // unreachable
     }
    }
   } while(0);
   
   $89 = ($57|0)==(0);
   
   if ($89) {
    $p$0 = $20;$psize$0 = $21;
    break;
   }
   $$sum41 = (($$sum3) + 28)|0;
   $gep_int147 = $mem;
   $gep148 = (($gep_int147) + ($$sum41))|0;
   $90 = $gep148;
   $91 = $90;
   $92 = HEAP32[$90>>2]|0;
   $expanded9 = 16800;
   $gep_int149 = 16800;
   $gep150 = (($gep_int149) + 304)|0;
   $gep_array151 = $92<<2;
   $gep152 = (($gep150) + ($gep_array151))|0;
   $93 = $gep152;
   $94 = HEAP32[$93>>2]|0;
   $95 = ($54|0)==($94|0);
   
   do {
    if ($95) {
     HEAP32[$93>>2] = $R$1;
     $cond = ($R$1|0)==(0);
     
     if (!($cond)) {
      break;
     }
     $96 = 1 << $92;
     $97 = $96 ^ -1;
     $expanded11 = 16800;
     $gep_int153 = 16800;
     $gep154 = (($gep_int153) + 4)|0;
     $expanded10 = $gep154;
     $98 = HEAP32[$expanded10>>2]|0;
     $99 = $98 & $97;
     $expanded13 = 16800;
     $gep_int155 = 16800;
     $gep156 = (($gep_int155) + 4)|0;
     $expanded12 = $gep156;
     HEAP32[$expanded12>>2] = $99;
     
     $p$0 = $20;$psize$0 = $21;
     break L10;
    } else {
     $100 = $57;
     $expanded15 = 16800;
     $gep_int157 = 16800;
     $gep158 = (($gep_int157) + 16)|0;
     $expanded14 = $gep158;
     $101 = HEAP32[$expanded14>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     
     if ($102) {
      _abort();
      // unreachable
     }
     $gep_int159 = $57;
     $gep160 = (($gep_int159) + 16)|0;
     $103 = $gep160;
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($54|0);
     
     if ($105) {
      HEAP32[$103>>2] = $R$1;
      
     } else {
      $gep_int161 = $57;
      $gep162 = (($gep_int161) + 20)|0;
      $106 = $gep162;
      HEAP32[$106>>2] = $R$1;
      
     }
     $107 = ($R$1|0)==(0);
     
     if ($107) {
      $p$0 = $20;$psize$0 = $21;
      break L10;
     }
    }
   } while(0);
   $108 = $R$1;
   $expanded17 = 16800;
   $gep_int163 = 16800;
   $gep164 = (($gep_int163) + 16)|0;
   $expanded16 = $gep164;
   $109 = HEAP32[$expanded16>>2]|0;
   $110 = ($108>>>0)<($109>>>0);
   
   if ($110) {
    _abort();
    // unreachable
   }
   $gep_int165 = $R$1;
   $gep166 = (($gep_int165) + 24)|0;
   $111 = $gep166;
   HEAP32[$111>>2] = $57;
   $$sum42 = (($$sum3) + 16)|0;
   $gep_int167 = $mem;
   $gep168 = (($gep_int167) + ($$sum42))|0;
   $112 = $gep168;
   $113 = $112;
   $114 = HEAP32[$112>>2]|0;
   $115 = ($114|0)==(0);
   
   do {
    if (!($115)) {
     $116 = $114;
     $expanded19 = 16800;
     $gep_int169 = 16800;
     $gep170 = (($gep_int169) + 16)|0;
     $expanded18 = $gep170;
     $117 = HEAP32[$expanded18>>2]|0;
     $118 = ($116>>>0)<($117>>>0);
     
     if ($118) {
      _abort();
      // unreachable
     } else {
      $gep_int171 = $R$1;
      $gep172 = (($gep_int171) + 16)|0;
      $119 = $gep172;
      HEAP32[$119>>2] = $114;
      $gep_int173 = $114;
      $gep174 = (($gep_int173) + 24)|0;
      $120 = $gep174;
      HEAP32[$120>>2] = $R$1;
      
      break;
     }
    }
   } while(0);
   $$sum43 = (($$sum3) + 20)|0;
   $gep_int175 = $mem;
   $gep176 = (($gep_int175) + ($$sum43))|0;
   $121 = $gep176;
   $122 = $121;
   $123 = HEAP32[$121>>2]|0;
   $124 = ($123|0)==(0);
   
   if ($124) {
    $p$0 = $20;$psize$0 = $21;
    break;
   }
   $125 = $123;
   $expanded21 = 16800;
   $gep_int177 = 16800;
   $gep178 = (($gep_int177) + 16)|0;
   $expanded20 = $gep178;
   $126 = HEAP32[$expanded20>>2]|0;
   $127 = ($125>>>0)<($126>>>0);
   
   if ($127) {
    _abort();
    // unreachable
   } else {
    $gep_int179 = $R$1;
    $gep180 = (($gep_int179) + 20)|0;
    $128 = $gep180;
    HEAP32[$128>>2] = $123;
    $gep_int181 = $123;
    $gep182 = (($gep_int181) + 24)|0;
    $129 = $gep182;
    HEAP32[$129>>2] = $R$1;
    
    $p$0 = $20;$psize$0 = $21;
    break;
   }
  } else {
   $p$0 = $3;$psize$0 = $11;
  }
 } while(0);
 
 
 $141 = $p$0;
 $142 = ($141>>>0)<($12>>>0);
 
 if (!($142)) {
  _abort();
  // unreachable
 }
 $$sum34 = (($11) + -4)|0;
 $gep_int189 = $mem;
 $gep190 = (($gep_int189) + ($$sum34))|0;
 $143 = $gep190;
 $144 = $143;
 $145 = HEAP32[$143>>2]|0;
 $146 = $145 & 1;
 $phitmp = ($146|0)==(0);
 
 if ($phitmp) {
  _abort();
  // unreachable
 }
 $147 = $145 & 2;
 $148 = ($147|0)==(0);
 
 do {
  if ($148) {
   $expanded25 = 16800;
   $gep_int191 = 16800;
   $gep192 = (($gep_int191) + 24)|0;
   $expanded24 = $gep192;
   $149 = HEAP32[$expanded24>>2]|0;
   $150 = ($13|0)==($149|0);
   
   if ($150) {
    $expanded27 = 16800;
    $gep_int193 = 16800;
    $gep194 = (($gep_int193) + 12)|0;
    $expanded26 = $gep194;
    $151 = HEAP32[$expanded26>>2]|0;
    $152 = (($151) + ($psize$0))|0;
    $expanded29 = 16800;
    $gep_int195 = 16800;
    $gep196 = (($gep_int195) + 12)|0;
    $expanded28 = $gep196;
    HEAP32[$expanded28>>2] = $152;
    $expanded31 = 16800;
    $gep_int197 = 16800;
    $gep198 = (($gep_int197) + 24)|0;
    $expanded30 = $gep198;
    HEAP32[$expanded30>>2] = $p$0;
    $153 = $152 | 1;
    $gep_int199 = $p$0;
    $gep200 = (($gep_int199) + 4)|0;
    $154 = $gep200;
    HEAP32[$154>>2] = $153;
    $expanded33 = 16800;
    $gep_int201 = 16800;
    $gep202 = (($gep_int201) + 20)|0;
    $expanded32 = $gep202;
    $155 = HEAP32[$expanded32>>2]|0;
    $156 = ($p$0|0)==($155|0);
    
    if (!($156)) {
     STACKTOP = sp;return;
    }
    $expanded35 = 16800;
    $gep_int203 = 16800;
    $gep204 = (($gep_int203) + 20)|0;
    $expanded34 = $gep204;
    HEAP32[$expanded34>>2] = 0;
    $expanded37 = 16800;
    $gep_int205 = 16800;
    $gep206 = (($gep_int205) + 8)|0;
    $expanded36 = $gep206;
    HEAP32[$expanded36>>2] = 0;
    
    STACKTOP = sp;return;
   }
   $expanded39 = 16800;
   $gep_int207 = 16800;
   $gep208 = (($gep_int207) + 20)|0;
   $expanded38 = $gep208;
   $157 = HEAP32[$expanded38>>2]|0;
   $158 = ($13|0)==($157|0);
   
   if ($158) {
    $expanded41 = 16800;
    $gep_int209 = 16800;
    $gep210 = (($gep_int209) + 8)|0;
    $expanded40 = $gep210;
    $159 = HEAP32[$expanded40>>2]|0;
    $160 = (($159) + ($psize$0))|0;
    $expanded43 = 16800;
    $gep_int211 = 16800;
    $gep212 = (($gep_int211) + 8)|0;
    $expanded42 = $gep212;
    HEAP32[$expanded42>>2] = $160;
    $expanded45 = 16800;
    $gep_int213 = 16800;
    $gep214 = (($gep_int213) + 20)|0;
    $expanded44 = $gep214;
    HEAP32[$expanded44>>2] = $p$0;
    $161 = $160 | 1;
    $gep_int215 = $p$0;
    $gep216 = (($gep_int215) + 4)|0;
    $162 = $gep216;
    HEAP32[$162>>2] = $161;
    $gep_int217 = $p$0;
    $gep218 = (($gep_int217) + ($160))|0;
    $163 = $gep218;
    $164 = $163;
    HEAP32[$163>>2] = $160;
    
    STACKTOP = sp;return;
   }
   $165 = $145 & -8;
   $166 = (($165) + ($psize$0))|0;
   $167 = $145 >>> 3;
   $168 = ($145>>>0)<(256);
   
   L112: do {
    if ($168) {
     $gep_int219 = $mem;
     $gep220 = (($gep_int219) + ($11))|0;
     $169 = $gep220;
     $170 = $169;
     $171 = HEAP32[$169>>2]|0;
     $$sum2829 = $11 | 4;
     $gep_int221 = $mem;
     $gep222 = (($gep_int221) + ($$sum2829))|0;
     $172 = $gep222;
     $173 = $172;
     $174 = HEAP32[$172>>2]|0;
     $175 = $167 << 1;
     $expanded46 = 16800;
     $gep_int223 = 16800;
     $gep224 = (($gep_int223) + 40)|0;
     $gep_array225 = $175<<2;
     $gep226 = (($gep224) + ($gep_array225))|0;
     $176 = $gep226;
     $177 = $176;
     $178 = ($171|0)==($177|0);
     
     do {
      if (!($178)) {
       $179 = $171;
       $expanded48 = 16800;
       $gep_int227 = 16800;
       $gep228 = (($gep_int227) + 16)|0;
       $expanded47 = $gep228;
       $180 = HEAP32[$expanded47>>2]|0;
       $181 = ($179>>>0)<($180>>>0);
       
       if ($181) {
        _abort();
        // unreachable
       }
       $gep_int229 = $171;
       $gep230 = (($gep_int229) + 12)|0;
       $182 = $gep230;
       $183 = HEAP32[$182>>2]|0;
       $184 = ($183|0)==($13|0);
       
       if ($184) {
        break;
       }
       _abort();
       // unreachable
      }
     } while(0);
     $185 = ($174|0)==($171|0);
     
     if ($185) {
      $186 = 1 << $167;
      $187 = $186 ^ -1;
      $expanded50 = 16800;
      $gep_int231 = 16800;
      $expanded49 = $gep_int231;
      $188 = HEAP32[$expanded49>>2]|0;
      $189 = $188 & $187;
      $expanded52 = 16800;
      $gep_int232 = 16800;
      $expanded51 = $gep_int232;
      HEAP32[$expanded51>>2] = $189;
      
      break;
     }
     $190 = ($174|0)==($177|0);
     
     do {
      if ($190) {
       $gep_int233 = $174;
       $gep234 = (($gep_int233) + 8)|0;
       $$pre82 = $gep234;
       
       $$pre$phi83Z2D = $$pre82;
      } else {
       $191 = $174;
       $expanded54 = 16800;
       $gep_int235 = 16800;
       $gep236 = (($gep_int235) + 16)|0;
       $expanded53 = $gep236;
       $192 = HEAP32[$expanded53>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       
       if ($193) {
        _abort();
        // unreachable
       }
       $gep_int237 = $174;
       $gep238 = (($gep_int237) + 8)|0;
       $194 = $gep238;
       $195 = HEAP32[$194>>2]|0;
       $196 = ($195|0)==($13|0);
       
       if ($196) {
        $$pre$phi83Z2D = $194;
        break;
       }
       _abort();
       // unreachable
      }
     } while(0);
     
     $gep_int239 = $171;
     $gep240 = (($gep_int239) + 12)|0;
     $197 = $gep240;
     HEAP32[$197>>2] = $174;
     HEAP32[$$pre$phi83Z2D>>2] = $171;
     
    } else {
     $198 = $12;
     $$sum6 = (($11) + 16)|0;
     $gep_int241 = $mem;
     $gep242 = (($gep_int241) + ($$sum6))|0;
     $199 = $gep242;
     $200 = $199;
     $201 = HEAP32[$199>>2]|0;
     $$sum78 = $11 | 4;
     $gep_int243 = $mem;
     $gep244 = (($gep_int243) + ($$sum78))|0;
     $202 = $gep244;
     $203 = $202;
     $204 = HEAP32[$202>>2]|0;
     $205 = ($204|0)==($198|0);
     
     do {
      if ($205) {
       $$sum10 = (($11) + 12)|0;
       $gep_int253 = $mem;
       $gep254 = (($gep_int253) + ($$sum10))|0;
       $218 = $gep254;
       $219 = $218;
       $220 = HEAP32[$218>>2]|0;
       $221 = ($220|0)==(0);
       
       if ($221) {
        $$sum9 = (($11) + 8)|0;
        $gep_int255 = $mem;
        $gep256 = (($gep_int255) + ($$sum9))|0;
        $222 = $gep256;
        $223 = $222;
        $224 = HEAP32[$222>>2]|0;
        $225 = ($224|0)==(0);
        
        if ($225) {
         $R7$1 = 0;
         break;
        } else {
         $R7$0 = $224;$RP9$0 = $223;
        }
       } else {
        $R7$0 = $220;$RP9$0 = $219;
       }
       while(1) {
        
        
        $gep_int257 = $R7$0;
        $gep258 = (($gep_int257) + 20)|0;
        $226 = $gep258;
        $227 = HEAP32[$226>>2]|0;
        $228 = ($227|0)==(0);
        
        if (!($228)) {
         $RP9$0$phi = $226;$R7$0$phi = $227;$RP9$0 = $RP9$0$phi;$R7$0 = $R7$0$phi;
         continue;
        }
        $gep_int259 = $R7$0;
        $gep260 = (($gep_int259) + 16)|0;
        $229 = $gep260;
        $230 = HEAP32[$229>>2]|0;
        $231 = ($230|0)==(0);
        
        if ($231) {
         break;
        } else {
         $R7$0 = $230;$RP9$0 = $229;
        }
       }
       $232 = $RP9$0;
       $expanded58 = 16800;
       $gep_int261 = 16800;
       $gep262 = (($gep_int261) + 16)|0;
       $expanded57 = $gep262;
       $233 = HEAP32[$expanded57>>2]|0;
       $234 = ($232>>>0)<($233>>>0);
       
       if ($234) {
        _abort();
        // unreachable
       } else {
        HEAP32[$RP9$0>>2] = 0;
        
        $R7$1 = $R7$0;
        break;
       }
      } else {
       $gep_int245 = $mem;
       $gep246 = (($gep_int245) + ($11))|0;
       $206 = $gep246;
       $207 = $206;
       $208 = HEAP32[$206>>2]|0;
       $209 = $208;
       $expanded56 = 16800;
       $gep_int247 = 16800;
       $gep248 = (($gep_int247) + 16)|0;
       $expanded55 = $gep248;
       $210 = HEAP32[$expanded55>>2]|0;
       $211 = ($209>>>0)<($210>>>0);
       
       if ($211) {
        _abort();
        // unreachable
       }
       $gep_int249 = $208;
       $gep250 = (($gep_int249) + 12)|0;
       $212 = $gep250;
       $213 = HEAP32[$212>>2]|0;
       $214 = ($213|0)==($198|0);
       
       if (!($214)) {
        _abort();
        // unreachable
       }
       $gep_int251 = $204;
       $gep252 = (($gep_int251) + 8)|0;
       $215 = $gep252;
       $216 = HEAP32[$215>>2]|0;
       $217 = ($216|0)==($198|0);
       
       if ($217) {
        HEAP32[$212>>2] = $204;
        HEAP32[$215>>2] = $208;
        
        $R7$1 = $204;
        break;
       } else {
        _abort();
        // unreachable
       }
      }
     } while(0);
     
     $235 = ($201|0)==(0);
     
     if ($235) {
      break;
     }
     $$sum21 = (($11) + 20)|0;
     $gep_int263 = $mem;
     $gep264 = (($gep_int263) + ($$sum21))|0;
     $236 = $gep264;
     $237 = $236;
     $238 = HEAP32[$236>>2]|0;
     $expanded59 = 16800;
     $gep_int265 = 16800;
     $gep266 = (($gep_int265) + 304)|0;
     $gep_array267 = $238<<2;
     $gep268 = (($gep266) + ($gep_array267))|0;
     $239 = $gep268;
     $240 = HEAP32[$239>>2]|0;
     $241 = ($198|0)==($240|0);
     
     do {
      if ($241) {
       HEAP32[$239>>2] = $R7$1;
       $cond69 = ($R7$1|0)==(0);
       
       if (!($cond69)) {
        break;
       }
       $242 = 1 << $238;
       $243 = $242 ^ -1;
       $expanded61 = 16800;
       $gep_int269 = 16800;
       $gep270 = (($gep_int269) + 4)|0;
       $expanded60 = $gep270;
       $244 = HEAP32[$expanded60>>2]|0;
       $245 = $244 & $243;
       $expanded63 = 16800;
       $gep_int271 = 16800;
       $gep272 = (($gep_int271) + 4)|0;
       $expanded62 = $gep272;
       HEAP32[$expanded62>>2] = $245;
       
       break L112;
      } else {
       $246 = $201;
       $expanded65 = 16800;
       $gep_int273 = 16800;
       $gep274 = (($gep_int273) + 16)|0;
       $expanded64 = $gep274;
       $247 = HEAP32[$expanded64>>2]|0;
       $248 = ($246>>>0)<($247>>>0);
       
       if ($248) {
        _abort();
        // unreachable
       }
       $gep_int275 = $201;
       $gep276 = (($gep_int275) + 16)|0;
       $249 = $gep276;
       $250 = HEAP32[$249>>2]|0;
       $251 = ($250|0)==($198|0);
       
       if ($251) {
        HEAP32[$249>>2] = $R7$1;
        
       } else {
        $gep_int277 = $201;
        $gep278 = (($gep_int277) + 20)|0;
        $252 = $gep278;
        HEAP32[$252>>2] = $R7$1;
        
       }
       $253 = ($R7$1|0)==(0);
       
       if ($253) {
        break L112;
       }
      }
     } while(0);
     $254 = $R7$1;
     $expanded67 = 16800;
     $gep_int279 = 16800;
     $gep280 = (($gep_int279) + 16)|0;
     $expanded66 = $gep280;
     $255 = HEAP32[$expanded66>>2]|0;
     $256 = ($254>>>0)<($255>>>0);
     
     if ($256) {
      _abort();
      // unreachable
     }
     $gep_int281 = $R7$1;
     $gep282 = (($gep_int281) + 24)|0;
     $257 = $gep282;
     HEAP32[$257>>2] = $201;
     $$sum22 = (($11) + 8)|0;
     $gep_int283 = $mem;
     $gep284 = (($gep_int283) + ($$sum22))|0;
     $258 = $gep284;
     $259 = $258;
     $260 = HEAP32[$258>>2]|0;
     $261 = ($260|0)==(0);
     
     do {
      if (!($261)) {
       $262 = $260;
       $expanded69 = 16800;
       $gep_int285 = 16800;
       $gep286 = (($gep_int285) + 16)|0;
       $expanded68 = $gep286;
       $263 = HEAP32[$expanded68>>2]|0;
       $264 = ($262>>>0)<($263>>>0);
       
       if ($264) {
        _abort();
        // unreachable
       } else {
        $gep_int287 = $R7$1;
        $gep288 = (($gep_int287) + 16)|0;
        $265 = $gep288;
        HEAP32[$265>>2] = $260;
        $gep_int289 = $260;
        $gep290 = (($gep_int289) + 24)|0;
        $266 = $gep290;
        HEAP32[$266>>2] = $R7$1;
        
        break;
       }
      }
     } while(0);
     $$sum23 = (($11) + 12)|0;
     $gep_int291 = $mem;
     $gep292 = (($gep_int291) + ($$sum23))|0;
     $267 = $gep292;
     $268 = $267;
     $269 = HEAP32[$267>>2]|0;
     $270 = ($269|0)==(0);
     
     if ($270) {
      break;
     }
     $271 = $269;
     $expanded71 = 16800;
     $gep_int293 = 16800;
     $gep294 = (($gep_int293) + 16)|0;
     $expanded70 = $gep294;
     $272 = HEAP32[$expanded70>>2]|0;
     $273 = ($271>>>0)<($272>>>0);
     
     if ($273) {
      _abort();
      // unreachable
     } else {
      $gep_int295 = $R7$1;
      $gep296 = (($gep_int295) + 20)|0;
      $274 = $gep296;
      HEAP32[$274>>2] = $269;
      $gep_int297 = $269;
      $gep298 = (($gep_int297) + 24)|0;
      $275 = $gep298;
      HEAP32[$275>>2] = $R7$1;
      
      break;
     }
    }
   } while(0);
   $276 = $166 | 1;
   $gep_int299 = $p$0;
   $gep300 = (($gep_int299) + 4)|0;
   $277 = $gep300;
   HEAP32[$277>>2] = $276;
   $gep_int301 = $p$0;
   $gep302 = (($gep_int301) + ($166))|0;
   $278 = $gep302;
   $279 = $278;
   HEAP32[$278>>2] = $166;
   $expanded73 = 16800;
   $gep_int303 = 16800;
   $gep304 = (($gep_int303) + 20)|0;
   $expanded72 = $gep304;
   $280 = HEAP32[$expanded72>>2]|0;
   $281 = ($p$0|0)==($280|0);
   
   if (!($281)) {
    $psize$1 = $166;
    break;
   }
   $expanded75 = 16800;
   $gep_int305 = 16800;
   $gep306 = (($gep_int305) + 8)|0;
   $expanded74 = $gep306;
   HEAP32[$expanded74>>2] = $166;
   
   STACKTOP = sp;return;
  } else {
   $282 = $145 & -2;
   HEAP32[$143>>2] = $282;
   $283 = $psize$0 | 1;
   $gep_int307 = $p$0;
   $gep308 = (($gep_int307) + 4)|0;
   $284 = $gep308;
   HEAP32[$284>>2] = $283;
   $gep_int309 = $p$0;
   $gep310 = (($gep_int309) + ($psize$0))|0;
   $285 = $gep310;
   $286 = $285;
   HEAP32[$285>>2] = $psize$0;
   
   $psize$1 = $psize$0;
  }
 } while(0);
 
 $287 = $psize$1 >>> 3;
 $288 = ($psize$1>>>0)<(256);
 
 if ($288) {
  $289 = $287 << 1;
  $expanded76 = 16800;
  $gep_int311 = 16800;
  $gep312 = (($gep_int311) + 40)|0;
  $gep_array313 = $289<<2;
  $gep314 = (($gep312) + ($gep_array313))|0;
  $290 = $gep314;
  $291 = $290;
  $expanded78 = 16800;
  $gep_int315 = 16800;
  $expanded77 = $gep_int315;
  $292 = HEAP32[$expanded77>>2]|0;
  $293 = 1 << $287;
  $294 = $292 & $293;
  $295 = ($294|0)==(0);
  
  do {
   if ($295) {
    $296 = $292 | $293;
    $expanded80 = 16800;
    $gep_int316 = 16800;
    $expanded79 = $gep_int316;
    HEAP32[$expanded79>>2] = $296;
    $$sum19$pre = (($289) + 2)|0;
    $expanded81 = 16800;
    $gep_int317 = 16800;
    $gep318 = (($gep_int317) + 40)|0;
    $gep_array319 = $$sum19$pre<<2;
    $gep320 = (($gep318) + ($gep_array319))|0;
    $$pre = $gep320;
    
    $$pre$phiZ2D = $$pre;$F16$0 = $291;
   } else {
    $$sum20 = (($289) + 2)|0;
    $expanded82 = 16800;
    $gep_int321 = 16800;
    $gep322 = (($gep_int321) + 40)|0;
    $gep_array323 = $$sum20<<2;
    $gep324 = (($gep322) + ($gep_array323))|0;
    $297 = $gep324;
    $298 = HEAP32[$297>>2]|0;
    $299 = $298;
    $expanded84 = 16800;
    $gep_int325 = 16800;
    $gep326 = (($gep_int325) + 16)|0;
    $expanded83 = $gep326;
    $300 = HEAP32[$expanded83>>2]|0;
    $301 = ($299>>>0)<($300>>>0);
    
    if (!($301)) {
     $$pre$phiZ2D = $297;$F16$0 = $298;
     break;
    }
    _abort();
    // unreachable
   }
  } while(0);
  
  
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $gep_int327 = $F16$0;
  $gep328 = (($gep_int327) + 12)|0;
  $302 = $gep328;
  HEAP32[$302>>2] = $p$0;
  $gep_int329 = $p$0;
  $gep330 = (($gep_int329) + 8)|0;
  $303 = $gep330;
  HEAP32[$303>>2] = $F16$0;
  $gep_int331 = $p$0;
  $gep332 = (($gep_int331) + 12)|0;
  $304 = $gep332;
  HEAP32[$304>>2] = $291;
  
  STACKTOP = sp;return;
 }
 $305 = $p$0;
 $306 = $psize$1 >>> 8;
 $307 = ($306|0)==(0);
 
 do {
  if ($307) {
   $I18$0 = 0;
  } else {
   $308 = ($psize$1>>>0)>(16777215);
   
   if ($308) {
    $I18$0 = 31;
    break;
   }
   $309 = (($306) + 1048320)|0;
   $310 = $309 >>> 16;
   $311 = $310 & 8;
   $312 = $306 << $311;
   $313 = (($312) + 520192)|0;
   $314 = $313 >>> 16;
   $315 = $314 & 4;
   $316 = $315 | $311;
   $317 = $312 << $315;
   $318 = (($317) + 245760)|0;
   $319 = $318 >>> 16;
   $320 = $319 & 2;
   $321 = $316 | $320;
   $322 = (14 - ($321))|0;
   $323 = $317 << $320;
   $324 = $323 >>> 15;
   $325 = (($322) + ($324))|0;
   $326 = $325 << 1;
   $327 = (($325) + 7)|0;
   $328 = $psize$1 >>> $327;
   $329 = $328 & 1;
   $330 = $329 | $326;
   
   $I18$0 = $330;
  }
 } while(0);
 
 $expanded85 = 16800;
 $gep_int333 = 16800;
 $gep334 = (($gep_int333) + 304)|0;
 $gep_array335 = $I18$0<<2;
 $gep336 = (($gep334) + ($gep_array335))|0;
 $331 = $gep336;
 $gep_int337 = $p$0;
 $gep338 = (($gep_int337) + 28)|0;
 $332 = $gep338;
 $I18$0$c = $I18$0;
 HEAP32[$332>>2] = $I18$0$c;
 $gep_int339 = $p$0;
 $gep340 = (($gep_int339) + 20)|0;
 $333 = $gep340;
 HEAP32[$333>>2] = 0;
 $gep_int341 = $p$0;
 $gep342 = (($gep_int341) + 16)|0;
 $334 = $gep342;
 HEAP32[$334>>2] = 0;
 $expanded87 = 16800;
 $gep_int343 = 16800;
 $gep344 = (($gep_int343) + 4)|0;
 $expanded86 = $gep344;
 $335 = HEAP32[$expanded86>>2]|0;
 $336 = 1 << $I18$0;
 $337 = $335 & $336;
 $338 = ($337|0)==(0);
 
 L199: do {
  if ($338) {
   $339 = $335 | $336;
   $expanded89 = 16800;
   $gep_int345 = 16800;
   $gep346 = (($gep_int345) + 4)|0;
   $expanded88 = $gep346;
   HEAP32[$expanded88>>2] = $339;
   HEAP32[$331>>2] = $305;
   $gep_int347 = $p$0;
   $gep348 = (($gep_int347) + 24)|0;
   $340 = $gep348;
   $$c = $331;
   HEAP32[$340>>2] = $$c;
   $gep_int349 = $p$0;
   $gep350 = (($gep_int349) + 12)|0;
   $341 = $gep350;
   HEAP32[$341>>2] = $p$0;
   $gep_int351 = $p$0;
   $gep352 = (($gep_int351) + 8)|0;
   $342 = $gep352;
   HEAP32[$342>>2] = $p$0;
   
  } else {
   $343 = HEAP32[$331>>2]|0;
   $344 = ($I18$0|0)==(31);
   
   if ($344) {
    $347 = 0;
   } else {
    $345 = $I18$0 >>> 1;
    $346 = (25 - ($345))|0;
    
    $347 = $346;
   }
   
   $gep_int353 = $343;
   $gep354 = (($gep_int353) + 4)|0;
   $348 = $gep354;
   $349 = HEAP32[$348>>2]|0;
   $350 = $349 & -8;
   $351 = ($350|0)==($psize$1|0);
   
   L204: do {
    if ($351) {
     $T$0$lcssa = $343;
    } else {
     $352 = $psize$1 << $347;
     
     $K19$072 = $352;$T$071 = $343;
     while(1) {
      
      
      $358 = $K19$072 >>> 31;
      $gep_int357 = $T$071;
      $gep358 = (($gep_int357) + 16)|0;
      $gep_array359 = $358<<2;
      $gep360 = (($gep358) + ($gep_array359))|0;
      $359 = $gep360;
      $360 = HEAP32[$359>>2]|0;
      $361 = ($360|0)==(0);
      
      if ($361) {
       break;
      }
      $353 = $K19$072 << 1;
      $gep_int355 = $360;
      $gep356 = (($gep_int355) + 4)|0;
      $354 = $gep356;
      $355 = HEAP32[$354>>2]|0;
      $356 = $355 & -8;
      $357 = ($356|0)==($psize$1|0);
      
      if ($357) {
       $T$0$lcssa = $360;
       break L204;
      } else {
       $T$071$phi = $360;$K19$072 = $353;$T$071 = $T$071$phi;
      }
     }
     $362 = $359;
     $expanded91 = 16800;
     $gep_int361 = 16800;
     $gep362 = (($gep_int361) + 16)|0;
     $expanded90 = $gep362;
     $363 = HEAP32[$expanded90>>2]|0;
     $364 = ($362>>>0)<($363>>>0);
     
     if ($364) {
      _abort();
      // unreachable
     } else {
      HEAP32[$359>>2] = $305;
      $gep_int363 = $p$0;
      $gep364 = (($gep_int363) + 24)|0;
      $365 = $gep364;
      $T$0$c16 = $T$071;
      HEAP32[$365>>2] = $T$0$c16;
      $gep_int365 = $p$0;
      $gep366 = (($gep_int365) + 12)|0;
      $366 = $gep366;
      HEAP32[$366>>2] = $p$0;
      $gep_int367 = $p$0;
      $gep368 = (($gep_int367) + 8)|0;
      $367 = $gep368;
      HEAP32[$367>>2] = $p$0;
      
      break L199;
     }
    }
   } while(0);
   
   $gep_int369 = $T$0$lcssa;
   $gep370 = (($gep_int369) + 8)|0;
   $368 = $gep370;
   $369 = HEAP32[$368>>2]|0;
   $370 = $T$0$lcssa;
   $expanded93 = 16800;
   $gep_int371 = 16800;
   $gep372 = (($gep_int371) + 16)|0;
   $expanded92 = $gep372;
   $371 = HEAP32[$expanded92>>2]|0;
   $372 = ($370>>>0)<($371>>>0);
   
   if ($372) {
    _abort();
    // unreachable
   }
   $373 = $369;
   $374 = ($373>>>0)<($371>>>0);
   
   if ($374) {
    _abort();
    // unreachable
   } else {
    $gep_int373 = $369;
    $gep374 = (($gep_int373) + 12)|0;
    $375 = $gep374;
    HEAP32[$375>>2] = $305;
    HEAP32[$368>>2] = $305;
    $gep_int375 = $p$0;
    $gep376 = (($gep_int375) + 8)|0;
    $376 = $gep376;
    $$c15 = $369;
    HEAP32[$376>>2] = $$c15;
    $gep_int377 = $p$0;
    $gep378 = (($gep_int377) + 12)|0;
    $377 = $gep378;
    $T$0$c = $T$0$lcssa;
    HEAP32[$377>>2] = $T$0$c;
    $gep_int379 = $p$0;
    $gep380 = (($gep_int379) + 24)|0;
    $378 = $gep380;
    HEAP32[$378>>2] = 0;
    
    break;
   }
  }
 } while(0);
 $expanded95 = 16800;
 $gep_int381 = 16800;
 $gep382 = (($gep_int381) + 32)|0;
 $expanded94 = $gep382;
 $379 = HEAP32[$expanded94>>2]|0;
 $380 = (($379) + -1)|0;
 $expanded97 = 16800;
 $gep_int383 = 16800;
 $gep384 = (($gep_int383) + 32)|0;
 $expanded96 = $gep384;
 HEAP32[$expanded96>>2] = $380;
 $381 = ($380|0)==(0);
 $expanded99 = 16800;
 $gep_int385 = 16800;
 $gep386 = (($gep_int385) + 456)|0;
 $expanded98 = $gep386;
 
 if ($381) {
  $sp$0$in$i = $expanded98;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $382 = ($sp$0$i|0)==(0);
  $gep_int387 = $sp$0$i;
  $gep388 = (($gep_int387) + 8)|0;
  $383 = $gep388;
  
  if ($382) {
   break;
  } else {
   $sp$0$in$i$phi = $383;$sp$0$in$i = $sp$0$in$i$phi;
  }
 }
 $expanded101 = 16800;
 $gep_int389 = 16800;
 $gep390 = (($gep_int389) + 32)|0;
 $expanded100 = $gep390;
 HEAP32[$expanded100>>2] = -1;
 
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep2 = 0, $gep4 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($oldmem|0)==(0);
 
 if ($1) {
  $2 = _malloc($bytes)|0;
  
  $mem$0 = $2;
  
  STACKTOP = sp;return $mem$0|0;
 }
 $3 = ($bytes>>>0)>(4294967231);
 
 if ($3) {
  $4 = ___errno_location()|0;
  HEAP32[$4>>2] = 12;
  
  $mem$0 = 0;
  
  STACKTOP = sp;return $mem$0|0;
 }
 $5 = ($bytes>>>0)<(11);
 
 if ($5) {
  $8 = 16;
 } else {
  $6 = (($bytes) + 11)|0;
  $7 = $6 & -8;
  
  $8 = $7;
 }
 
 $gep_int = $oldmem;
 $gep = (($gep_int) + -8)|0;
 $9 = $gep;
 $10 = $9;
 $11 = _try_realloc_chunk($10,$8)|0;
 $12 = ($11|0)==(0);
 
 if (!($12)) {
  $gep_int1 = $11;
  $gep2 = (($gep_int1) + 8)|0;
  $13 = $gep2;
  $14 = $13;
  
  $mem$0 = $14;
  
  STACKTOP = sp;return $mem$0|0;
 }
 $15 = _malloc($bytes)|0;
 $16 = ($15|0)==(0);
 
 if ($16) {
  $mem$0 = 0;
  
  STACKTOP = sp;return $mem$0|0;
 }
 $gep_int3 = $oldmem;
 $gep4 = (($gep_int3) + -4)|0;
 $17 = $gep4;
 $18 = $17;
 $19 = HEAP32[$17>>2]|0;
 $20 = $19 & -8;
 $21 = $19 & 3;
 $22 = ($21|0)==(0);
 $23 = $22 ? 8 : 4;
 $24 = (($20) - ($23))|0;
 $25 = ($24>>>0)<($bytes>>>0);
 $26 = $25 ? $24 : $bytes;
 _memcpy($15|0,$oldmem|0,$26|0)|0;
 _free($oldmem);
 
 $mem$0 = $15;
 
 STACKTOP = sp;return $mem$0|0;
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum17 = 0, $$sum18 = 0, $$sum2 = 0, $$sum23 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum3334 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$phi = 0, $R$1 = 0, $RP$0 = 0, $RP$0$phi = 0, $cond = 0, $expanded = 0, $expanded1 = 0;
 var $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0;
 var $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep104 = 0;
 var $gep106 = 0, $gep108 = 0, $gep110 = 0, $gep112 = 0, $gep114 = 0, $gep116 = 0, $gep118 = 0, $gep120 = 0, $gep122 = 0, $gep124 = 0, $gep126 = 0, $gep128 = 0, $gep130 = 0, $gep132 = 0, $gep134 = 0, $gep136 = 0, $gep138 = 0, $gep140 = 0, $gep142 = 0, $gep144 = 0;
 var $gep146 = 0, $gep148 = 0, $gep150 = 0, $gep152 = 0, $gep154 = 0, $gep156 = 0, $gep158 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0;
 var $gep65 = 0, $gep67 = 0, $gep69 = 0, $gep71 = 0, $gep73 = 0, $gep75 = 0, $gep77 = 0, $gep79 = 0, $gep81 = 0, $gep83 = 0, $gep85 = 0, $gep86 = 0, $gep88 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep98 = 0, $gep_array = 0, $gep_array119 = 0, $gep_int = 0;
 var $gep_int101 = 0, $gep_int103 = 0, $gep_int105 = 0, $gep_int107 = 0, $gep_int109 = 0, $gep_int111 = 0, $gep_int113 = 0, $gep_int115 = 0, $gep_int117 = 0, $gep_int121 = 0, $gep_int123 = 0, $gep_int125 = 0, $gep_int127 = 0, $gep_int129 = 0, $gep_int131 = 0, $gep_int133 = 0, $gep_int135 = 0, $gep_int137 = 0, $gep_int139 = 0, $gep_int141 = 0;
 var $gep_int143 = 0, $gep_int145 = 0, $gep_int147 = 0, $gep_int149 = 0, $gep_int151 = 0, $gep_int153 = 0, $gep_int155 = 0, $gep_int157 = 0, $gep_int38 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int60 = 0;
 var $gep_int62 = 0, $gep_int64 = 0, $gep_int66 = 0, $gep_int68 = 0, $gep_int70 = 0, $gep_int72 = 0, $gep_int74 = 0, $gep_int76 = 0, $gep_int78 = 0, $gep_int80 = 0, $gep_int82 = 0, $gep_int84 = 0, $gep_int87 = 0, $gep_int89 = 0, $gep_int90 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int99 = 0;
 var $newp$0 = 0, $or$cond = 0, $phitmp = 0, $storemerge = 0, $storemerge27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $p;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & -8;
 $4 = $p;
 $gep_int38 = $p;
 $gep39 = (($gep_int38) + ($3))|0;
 $5 = $gep39;
 $6 = $5;
 $expanded1 = 16800;
 $gep_int40 = 16800;
 $gep41 = (($gep_int40) + 16)|0;
 $expanded = $gep41;
 $7 = HEAP32[$expanded>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 
 if ($8) {
  _abort();
  // unreachable
 }
 $9 = $2 & 3;
 $10 = ($9|0)!=(1);
 $11 = ($4>>>0)<($5>>>0);
 $or$cond = $10 & $11;
 
 if (!($or$cond)) {
  _abort();
  // unreachable
 }
 $$sum3334 = $3 | 4;
 $gep_int42 = $p;
 $gep43 = (($gep_int42) + ($$sum3334))|0;
 $12 = $gep43;
 $13 = $12;
 $14 = HEAP32[$12>>2]|0;
 $15 = $14 & 1;
 $phitmp = ($15|0)==(0);
 
 if ($phitmp) {
  _abort();
  // unreachable
 }
 $16 = ($9|0)==(0);
 
 if ($16) {
  $17 = ($nb>>>0)<(256);
  
  if ($17) {
   $newp$0 = 0;
   
   STACKTOP = sp;return $newp$0|0;
  }
  $18 = (($nb) + 4)|0;
  $19 = ($3>>>0)<($18>>>0);
  
  do {
   if (!($19)) {
    $20 = (($3) - ($nb))|0;
    $expanded3 = 17272;
    $gep_int44 = 17272;
    $gep45 = (($gep_int44) + 8)|0;
    $expanded2 = $gep45;
    $21 = HEAP32[$expanded2>>2]|0;
    $22 = $21 << 1;
    $23 = ($20>>>0)>($22>>>0);
    
    if ($23) {
     break;
    } else {
     $newp$0 = $p;
    }
    
    STACKTOP = sp;return $newp$0|0;
   }
  } while(0);
  
  $newp$0 = 0;
  
  STACKTOP = sp;return $newp$0|0;
 }
 $24 = ($3>>>0)<($nb>>>0);
 
 if (!($24)) {
  $25 = (($3) - ($nb))|0;
  $26 = ($25>>>0)>(15);
  
  if (!($26)) {
   $newp$0 = $p;
   
   STACKTOP = sp;return $newp$0|0;
  }
  $gep_int46 = $p;
  $gep47 = (($gep_int46) + ($nb))|0;
  $27 = $gep47;
  $28 = $27;
  $29 = $2 & 1;
  $30 = $29 | $nb;
  $31 = $30 | 2;
  HEAP32[$1>>2] = $31;
  $$sum29 = (($nb) + 4)|0;
  $gep_int48 = $p;
  $gep49 = (($gep_int48) + ($$sum29))|0;
  $32 = $gep49;
  $33 = $32;
  $34 = $25 | 3;
  HEAP32[$32>>2] = $34;
  $35 = HEAP32[$12>>2]|0;
  $36 = $35 | 1;
  HEAP32[$12>>2] = $36;
  _dispose_chunk($28,$25);
  
  $newp$0 = $p;
  
  STACKTOP = sp;return $newp$0|0;
 }
 $expanded5 = 16800;
 $gep_int50 = 16800;
 $gep51 = (($gep_int50) + 24)|0;
 $expanded4 = $gep51;
 $37 = HEAP32[$expanded4>>2]|0;
 $38 = ($6|0)==($37|0);
 
 if ($38) {
  $expanded7 = 16800;
  $gep_int52 = 16800;
  $gep53 = (($gep_int52) + 12)|0;
  $expanded6 = $gep53;
  $39 = HEAP32[$expanded6>>2]|0;
  $40 = (($39) + ($3))|0;
  $41 = ($40>>>0)>($nb>>>0);
  
  if (!($41)) {
   $newp$0 = 0;
   
   STACKTOP = sp;return $newp$0|0;
  }
  $42 = (($40) - ($nb))|0;
  $gep_int54 = $p;
  $gep55 = (($gep_int54) + ($nb))|0;
  $43 = $gep55;
  $44 = $43;
  $45 = $2 & 1;
  $46 = $45 | $nb;
  $47 = $46 | 2;
  HEAP32[$1>>2] = $47;
  $$sum28 = (($nb) + 4)|0;
  $gep_int56 = $p;
  $gep57 = (($gep_int56) + ($$sum28))|0;
  $48 = $gep57;
  $49 = $48;
  $50 = $42 | 1;
  HEAP32[$48>>2] = $50;
  $expanded9 = 16800;
  $gep_int58 = 16800;
  $gep59 = (($gep_int58) + 24)|0;
  $expanded8 = $gep59;
  HEAP32[$expanded8>>2] = $44;
  $expanded11 = 16800;
  $gep_int60 = 16800;
  $gep61 = (($gep_int60) + 12)|0;
  $expanded10 = $gep61;
  HEAP32[$expanded10>>2] = $42;
  
  $newp$0 = $p;
  
  STACKTOP = sp;return $newp$0|0;
 }
 $expanded13 = 16800;
 $gep_int62 = 16800;
 $gep63 = (($gep_int62) + 20)|0;
 $expanded12 = $gep63;
 $51 = HEAP32[$expanded12>>2]|0;
 $52 = ($6|0)==($51|0);
 
 if ($52) {
  $expanded15 = 16800;
  $gep_int64 = 16800;
  $gep65 = (($gep_int64) + 8)|0;
  $expanded14 = $gep65;
  $53 = HEAP32[$expanded14>>2]|0;
  $54 = (($53) + ($3))|0;
  $55 = ($54>>>0)<($nb>>>0);
  
  if ($55) {
   $newp$0 = 0;
   
   STACKTOP = sp;return $newp$0|0;
  }
  $56 = (($54) - ($nb))|0;
  $57 = ($56>>>0)>(15);
  
  if ($57) {
   $gep_int66 = $p;
   $gep67 = (($gep_int66) + ($nb))|0;
   $58 = $gep67;
   $59 = $58;
   $gep_int68 = $p;
   $gep69 = (($gep_int68) + ($54))|0;
   $60 = $gep69;
   $61 = $2 & 1;
   $62 = $61 | $nb;
   $63 = $62 | 2;
   HEAP32[$1>>2] = $63;
   $$sum25 = (($nb) + 4)|0;
   $gep_int70 = $p;
   $gep71 = (($gep_int70) + ($$sum25))|0;
   $64 = $gep71;
   $65 = $64;
   $66 = $56 | 1;
   HEAP32[$64>>2] = $66;
   $67 = $60;
   HEAP32[$60>>2] = $56;
   $$sum26 = (($54) + 4)|0;
   $gep_int72 = $p;
   $gep73 = (($gep_int72) + ($$sum26))|0;
   $68 = $gep73;
   $69 = $68;
   $70 = HEAP32[$68>>2]|0;
   $71 = $70 & -2;
   HEAP32[$68>>2] = $71;
   
   $storemerge = $59;$storemerge27 = $56;
  } else {
   $72 = $2 & 1;
   $73 = $72 | $54;
   $74 = $73 | 2;
   HEAP32[$1>>2] = $74;
   $$sum23 = (($54) + 4)|0;
   $gep_int74 = $p;
   $gep75 = (($gep_int74) + ($$sum23))|0;
   $75 = $gep75;
   $76 = $75;
   $77 = HEAP32[$75>>2]|0;
   $78 = $77 | 1;
   HEAP32[$75>>2] = $78;
   
   $storemerge = 0;$storemerge27 = 0;
  }
  
  
  $expanded17 = 16800;
  $gep_int76 = 16800;
  $gep77 = (($gep_int76) + 8)|0;
  $expanded16 = $gep77;
  HEAP32[$expanded16>>2] = $storemerge27;
  $expanded19 = 16800;
  $gep_int78 = 16800;
  $gep79 = (($gep_int78) + 20)|0;
  $expanded18 = $gep79;
  HEAP32[$expanded18>>2] = $storemerge;
  
  $newp$0 = $p;
  
  STACKTOP = sp;return $newp$0|0;
 }
 $79 = $14 & 2;
 $80 = ($79|0)==(0);
 
 if (!($80)) {
  $newp$0 = 0;
  
  STACKTOP = sp;return $newp$0|0;
 }
 $81 = $14 & -8;
 $82 = (($81) + ($3))|0;
 $83 = ($82>>>0)<($nb>>>0);
 
 if ($83) {
  $newp$0 = 0;
  
  STACKTOP = sp;return $newp$0|0;
 }
 $84 = (($82) - ($nb))|0;
 $85 = $14 >>> 3;
 $86 = ($14>>>0)<(256);
 
 L52: do {
  if ($86) {
   $$sum17 = (($3) + 8)|0;
   $gep_int80 = $p;
   $gep81 = (($gep_int80) + ($$sum17))|0;
   $87 = $gep81;
   $88 = $87;
   $89 = HEAP32[$87>>2]|0;
   $$sum18 = (($3) + 12)|0;
   $gep_int82 = $p;
   $gep83 = (($gep_int82) + ($$sum18))|0;
   $90 = $gep83;
   $91 = $90;
   $92 = HEAP32[$90>>2]|0;
   $93 = $85 << 1;
   $expanded20 = 16800;
   $gep_int84 = 16800;
   $gep85 = (($gep_int84) + 40)|0;
   $gep_array = $93<<2;
   $gep86 = (($gep85) + ($gep_array))|0;
   $94 = $gep86;
   $95 = $94;
   $96 = ($89|0)==($95|0);
   
   do {
    if (!($96)) {
     $97 = $89;
     $98 = ($97>>>0)<($7>>>0);
     
     if ($98) {
      _abort();
      // unreachable
     }
     $gep_int87 = $89;
     $gep88 = (($gep_int87) + 12)|0;
     $99 = $gep88;
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)==($6|0);
     
     if ($101) {
      break;
     }
     _abort();
     // unreachable
    }
   } while(0);
   $102 = ($92|0)==($89|0);
   
   if ($102) {
    $103 = 1 << $85;
    $104 = $103 ^ -1;
    $expanded22 = 16800;
    $gep_int89 = 16800;
    $expanded21 = $gep_int89;
    $105 = HEAP32[$expanded21>>2]|0;
    $106 = $105 & $104;
    $expanded24 = 16800;
    $gep_int90 = 16800;
    $expanded23 = $gep_int90;
    HEAP32[$expanded23>>2] = $106;
    
    break;
   }
   $107 = ($92|0)==($95|0);
   
   do {
    if ($107) {
     $gep_int91 = $92;
     $gep92 = (($gep_int91) + 8)|0;
     $$pre = $gep92;
     
     $$pre$phiZ2D = $$pre;
    } else {
     $108 = $92;
     $109 = ($108>>>0)<($7>>>0);
     
     if ($109) {
      _abort();
      // unreachable
     }
     $gep_int93 = $92;
     $gep94 = (($gep_int93) + 8)|0;
     $110 = $gep94;
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==($6|0);
     
     if ($112) {
      $$pre$phiZ2D = $110;
      break;
     }
     _abort();
     // unreachable
    }
   } while(0);
   
   $gep_int95 = $89;
   $gep96 = (($gep_int95) + 12)|0;
   $113 = $gep96;
   HEAP32[$113>>2] = $92;
   HEAP32[$$pre$phiZ2D>>2] = $89;
   
  } else {
   $114 = $5;
   $$sum = (($3) + 24)|0;
   $gep_int97 = $p;
   $gep98 = (($gep_int97) + ($$sum))|0;
   $115 = $gep98;
   $116 = $115;
   $117 = HEAP32[$115>>2]|0;
   $$sum2 = (($3) + 12)|0;
   $gep_int99 = $p;
   $gep100 = (($gep_int99) + ($$sum2))|0;
   $118 = $gep100;
   $119 = $118;
   $120 = HEAP32[$118>>2]|0;
   $121 = ($120|0)==($114|0);
   
   do {
    if ($121) {
     $$sum4 = (($3) + 20)|0;
     $gep_int107 = $p;
     $gep108 = (($gep_int107) + ($$sum4))|0;
     $133 = $gep108;
     $134 = $133;
     $135 = HEAP32[$133>>2]|0;
     $136 = ($135|0)==(0);
     
     if ($136) {
      $$sum3 = (($3) + 16)|0;
      $gep_int109 = $p;
      $gep110 = (($gep_int109) + ($$sum3))|0;
      $137 = $gep110;
      $138 = $137;
      $139 = HEAP32[$137>>2]|0;
      $140 = ($139|0)==(0);
      
      if ($140) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $139;$RP$0 = $138;
      }
     } else {
      $R$0 = $135;$RP$0 = $134;
     }
     while(1) {
      
      
      $gep_int111 = $R$0;
      $gep112 = (($gep_int111) + 20)|0;
      $141 = $gep112;
      $142 = HEAP32[$141>>2]|0;
      $143 = ($142|0)==(0);
      
      if (!($143)) {
       $RP$0$phi = $141;$R$0$phi = $142;$RP$0 = $RP$0$phi;$R$0 = $R$0$phi;
       continue;
      }
      $gep_int113 = $R$0;
      $gep114 = (($gep_int113) + 16)|0;
      $144 = $gep114;
      $145 = HEAP32[$144>>2]|0;
      $146 = ($145|0)==(0);
      
      if ($146) {
       break;
      } else {
       $R$0 = $145;$RP$0 = $144;
      }
     }
     $147 = $RP$0;
     $148 = ($147>>>0)<($7>>>0);
     
     if ($148) {
      _abort();
      // unreachable
     } else {
      HEAP32[$RP$0>>2] = 0;
      
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($3) + 8)|0;
     $gep_int101 = $p;
     $gep102 = (($gep_int101) + ($$sum14))|0;
     $122 = $gep102;
     $123 = $122;
     $124 = HEAP32[$122>>2]|0;
     $125 = $124;
     $126 = ($125>>>0)<($7>>>0);
     
     if ($126) {
      _abort();
      // unreachable
     }
     $gep_int103 = $124;
     $gep104 = (($gep_int103) + 12)|0;
     $127 = $gep104;
     $128 = HEAP32[$127>>2]|0;
     $129 = ($128|0)==($114|0);
     
     if (!($129)) {
      _abort();
      // unreachable
     }
     $gep_int105 = $120;
     $gep106 = (($gep_int105) + 8)|0;
     $130 = $gep106;
     $131 = HEAP32[$130>>2]|0;
     $132 = ($131|0)==($114|0);
     
     if ($132) {
      HEAP32[$127>>2] = $120;
      HEAP32[$130>>2] = $124;
      
      $R$1 = $120;
      break;
     } else {
      _abort();
      // unreachable
     }
    }
   } while(0);
   
   $149 = ($117|0)==(0);
   
   if ($149) {
    break;
   }
   $$sum11 = (($3) + 28)|0;
   $gep_int115 = $p;
   $gep116 = (($gep_int115) + ($$sum11))|0;
   $150 = $gep116;
   $151 = $150;
   $152 = HEAP32[$150>>2]|0;
   $expanded25 = 16800;
   $gep_int117 = 16800;
   $gep118 = (($gep_int117) + 304)|0;
   $gep_array119 = $152<<2;
   $gep120 = (($gep118) + ($gep_array119))|0;
   $153 = $gep120;
   $154 = HEAP32[$153>>2]|0;
   $155 = ($114|0)==($154|0);
   
   do {
    if ($155) {
     HEAP32[$153>>2] = $R$1;
     $cond = ($R$1|0)==(0);
     
     if (!($cond)) {
      break;
     }
     $156 = 1 << $152;
     $157 = $156 ^ -1;
     $expanded27 = 16800;
     $gep_int121 = 16800;
     $gep122 = (($gep_int121) + 4)|0;
     $expanded26 = $gep122;
     $158 = HEAP32[$expanded26>>2]|0;
     $159 = $158 & $157;
     $expanded29 = 16800;
     $gep_int123 = 16800;
     $gep124 = (($gep_int123) + 4)|0;
     $expanded28 = $gep124;
     HEAP32[$expanded28>>2] = $159;
     
     break L52;
    } else {
     $160 = $117;
     $expanded31 = 16800;
     $gep_int125 = 16800;
     $gep126 = (($gep_int125) + 16)|0;
     $expanded30 = $gep126;
     $161 = HEAP32[$expanded30>>2]|0;
     $162 = ($160>>>0)<($161>>>0);
     
     if ($162) {
      _abort();
      // unreachable
     }
     $gep_int127 = $117;
     $gep128 = (($gep_int127) + 16)|0;
     $163 = $gep128;
     $164 = HEAP32[$163>>2]|0;
     $165 = ($164|0)==($114|0);
     
     if ($165) {
      HEAP32[$163>>2] = $R$1;
      
     } else {
      $gep_int129 = $117;
      $gep130 = (($gep_int129) + 20)|0;
      $166 = $gep130;
      HEAP32[$166>>2] = $R$1;
      
     }
     $167 = ($R$1|0)==(0);
     
     if ($167) {
      break L52;
     }
    }
   } while(0);
   $168 = $R$1;
   $expanded33 = 16800;
   $gep_int131 = 16800;
   $gep132 = (($gep_int131) + 16)|0;
   $expanded32 = $gep132;
   $169 = HEAP32[$expanded32>>2]|0;
   $170 = ($168>>>0)<($169>>>0);
   
   if ($170) {
    _abort();
    // unreachable
   }
   $gep_int133 = $R$1;
   $gep134 = (($gep_int133) + 24)|0;
   $171 = $gep134;
   HEAP32[$171>>2] = $117;
   $$sum12 = (($3) + 16)|0;
   $gep_int135 = $p;
   $gep136 = (($gep_int135) + ($$sum12))|0;
   $172 = $gep136;
   $173 = $172;
   $174 = HEAP32[$172>>2]|0;
   $175 = ($174|0)==(0);
   
   do {
    if (!($175)) {
     $176 = $174;
     $expanded35 = 16800;
     $gep_int137 = 16800;
     $gep138 = (($gep_int137) + 16)|0;
     $expanded34 = $gep138;
     $177 = HEAP32[$expanded34>>2]|0;
     $178 = ($176>>>0)<($177>>>0);
     
     if ($178) {
      _abort();
      // unreachable
     } else {
      $gep_int139 = $R$1;
      $gep140 = (($gep_int139) + 16)|0;
      $179 = $gep140;
      HEAP32[$179>>2] = $174;
      $gep_int141 = $174;
      $gep142 = (($gep_int141) + 24)|0;
      $180 = $gep142;
      HEAP32[$180>>2] = $R$1;
      
      break;
     }
    }
   } while(0);
   $$sum13 = (($3) + 20)|0;
   $gep_int143 = $p;
   $gep144 = (($gep_int143) + ($$sum13))|0;
   $181 = $gep144;
   $182 = $181;
   $183 = HEAP32[$181>>2]|0;
   $184 = ($183|0)==(0);
   
   if ($184) {
    break;
   }
   $185 = $183;
   $expanded37 = 16800;
   $gep_int145 = 16800;
   $gep146 = (($gep_int145) + 16)|0;
   $expanded36 = $gep146;
   $186 = HEAP32[$expanded36>>2]|0;
   $187 = ($185>>>0)<($186>>>0);
   
   if ($187) {
    _abort();
    // unreachable
   } else {
    $gep_int147 = $R$1;
    $gep148 = (($gep_int147) + 20)|0;
    $188 = $gep148;
    HEAP32[$188>>2] = $183;
    $gep_int149 = $183;
    $gep150 = (($gep_int149) + 24)|0;
    $189 = $gep150;
    HEAP32[$189>>2] = $R$1;
    
    break;
   }
  }
 } while(0);
 $190 = ($84>>>0)<(16);
 
 if ($190) {
  $191 = HEAP32[$1>>2]|0;
  $192 = $191 & 1;
  $193 = $82 | $192;
  $194 = $193 | 2;
  HEAP32[$1>>2] = $194;
  $$sum910 = $82 | 4;
  $gep_int151 = $p;
  $gep152 = (($gep_int151) + ($$sum910))|0;
  $195 = $gep152;
  $196 = $195;
  $197 = HEAP32[$195>>2]|0;
  $198 = $197 | 1;
  HEAP32[$195>>2] = $198;
  
  $newp$0 = $p;
  
  STACKTOP = sp;return $newp$0|0;
 } else {
  $gep_int153 = $p;
  $gep154 = (($gep_int153) + ($nb))|0;
  $199 = $gep154;
  $200 = $199;
  $201 = HEAP32[$1>>2]|0;
  $202 = $201 & 1;
  $203 = $202 | $nb;
  $204 = $203 | 2;
  HEAP32[$1>>2] = $204;
  $$sum5 = (($nb) + 4)|0;
  $gep_int155 = $p;
  $gep156 = (($gep_int155) + ($$sum5))|0;
  $205 = $gep156;
  $206 = $205;
  $207 = $84 | 3;
  HEAP32[$205>>2] = $207;
  $$sum78 = $82 | 4;
  $gep_int157 = $p;
  $gep158 = (($gep_int157) + ($$sum78))|0;
  $208 = $gep158;
  $209 = $208;
  $210 = HEAP32[$208>>2]|0;
  $211 = $210 | 1;
  HEAP32[$208>>2] = $211;
  _dispose_chunk($200,$84);
  
  $newp$0 = $p;
  
  STACKTOP = sp;return $newp$0|0;
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$c = 0, $$c9 = 0, $$pre = 0, $$pre$phi70Z2D = 0, $$pre$phi72Z2D = 0, $$pre$phiZ2D = 0, $$pre69 = 0, $$pre71 = 0, $$sum = 0, $$sum1 = 0, $$sum13$pre = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum21 = 0, $$sum24 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum35 = 0, $$sum36 = 0, $$sum4 = 0, $$sum5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$056 = 0, $R$0 = 0, $R$0$phi = 0, $R$1 = 0, $R7$0 = 0, $R7$0$phi = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$phi = 0, $RP9$0 = 0;
 var $RP9$0$phi = 0, $T$0$c = 0, $T$0$c10 = 0, $T$0$lcssa = 0, $T$055 = 0, $T$055$phi = 0, $cond = 0, $cond53 = 0, $expanded = 0, $expanded1 = 0, $expanded10 = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded18 = 0, $expanded19 = 0;
 var $expanded2 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded3 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded37 = 0;
 var $expanded38 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded5 = 0, $expanded50 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0;
 var $expanded56 = 0, $expanded57 = 0, $expanded58 = 0, $expanded59 = 0, $expanded6 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded7 = 0, $expanded70 = 0, $expanded71 = 0, $expanded72 = 0, $expanded73 = 0;
 var $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded79 = 0, $expanded8 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, $expanded86 = 0, $expanded87 = 0, $expanded9 = 0, $gep = 0, $gep100 = 0, $gep102 = 0, $gep103 = 0;
 var $gep105 = 0, $gep109 = 0, $gep111 = 0, $gep113 = 0, $gep115 = 0, $gep117 = 0, $gep119 = 0, $gep121 = 0, $gep123 = 0, $gep125 = 0, $gep127 = 0, $gep129 = 0, $gep131 = 0, $gep133 = 0, $gep135 = 0, $gep137 = 0, $gep139 = 0, $gep141 = 0, $gep143 = 0, $gep145 = 0;
 var $gep147 = 0, $gep149 = 0, $gep151 = 0, $gep153 = 0, $gep155 = 0, $gep157 = 0, $gep159 = 0, $gep161 = 0, $gep163 = 0, $gep165 = 0, $gep167 = 0, $gep169 = 0, $gep171 = 0, $gep173 = 0, $gep175 = 0, $gep177 = 0, $gep179 = 0, $gep181 = 0, $gep183 = 0, $gep185 = 0;
 var $gep187 = 0, $gep189 = 0, $gep191 = 0, $gep193 = 0, $gep195 = 0, $gep197 = 0, $gep199 = 0, $gep201 = 0, $gep203 = 0, $gep205 = 0, $gep207 = 0, $gep209 = 0, $gep211 = 0, $gep213 = 0, $gep215 = 0, $gep219 = 0, $gep221 = 0, $gep223 = 0, $gep225 = 0, $gep227 = 0;
 var $gep229 = 0, $gep231 = 0, $gep233 = 0, $gep235 = 0, $gep237 = 0, $gep239 = 0, $gep241 = 0, $gep243 = 0, $gep245 = 0, $gep247 = 0, $gep249 = 0, $gep251 = 0, $gep253 = 0, $gep255 = 0, $gep257 = 0, $gep259 = 0, $gep261 = 0, $gep263 = 0, $gep265 = 0, $gep267 = 0;
 var $gep269 = 0, $gep271 = 0, $gep273 = 0, $gep275 = 0, $gep277 = 0, $gep279 = 0, $gep281 = 0, $gep283 = 0, $gep285 = 0, $gep287 = 0, $gep289 = 0, $gep291 = 0, $gep293 = 0, $gep297 = 0, $gep299 = 0, $gep301 = 0, $gep303 = 0, $gep305 = 0, $gep307 = 0, $gep309 = 0;
 var $gep311 = 0, $gep313 = 0, $gep315 = 0, $gep317 = 0, $gep319 = 0, $gep321 = 0, $gep323 = 0, $gep325 = 0, $gep327 = 0, $gep329 = 0, $gep331 = 0, $gep333 = 0, $gep335 = 0, $gep337 = 0, $gep339 = 0, $gep341 = 0, $gep343 = 0, $gep345 = 0, $gep347 = 0, $gep349 = 0;
 var $gep351 = 0, $gep353 = 0, $gep355 = 0, $gep357 = 0, $gep359 = 0, $gep89 = 0, $gep92 = 0, $gep94 = 0, $gep96 = 0, $gep98 = 0, $gep_array = 0, $gep_array136 = 0, $gep_array212 = 0, $gep_array246 = 0, $gep_array292 = 0, $gep_array298 = 0, $gep_array302 = 0, $gep_array314 = 0, $gep_array338 = 0, $gep_int = 0;
 var $gep_int101 = 0, $gep_int104 = 0, $gep_int106 = 0, $gep_int107 = 0, $gep_int108 = 0, $gep_int110 = 0, $gep_int112 = 0, $gep_int114 = 0, $gep_int116 = 0, $gep_int118 = 0, $gep_int120 = 0, $gep_int122 = 0, $gep_int124 = 0, $gep_int126 = 0, $gep_int128 = 0, $gep_int130 = 0, $gep_int132 = 0, $gep_int134 = 0, $gep_int138 = 0, $gep_int140 = 0;
 var $gep_int142 = 0, $gep_int144 = 0, $gep_int146 = 0, $gep_int148 = 0, $gep_int150 = 0, $gep_int152 = 0, $gep_int154 = 0, $gep_int156 = 0, $gep_int158 = 0, $gep_int160 = 0, $gep_int162 = 0, $gep_int164 = 0, $gep_int166 = 0, $gep_int168 = 0, $gep_int170 = 0, $gep_int172 = 0, $gep_int174 = 0, $gep_int176 = 0, $gep_int178 = 0, $gep_int180 = 0;
 var $gep_int182 = 0, $gep_int184 = 0, $gep_int186 = 0, $gep_int188 = 0, $gep_int190 = 0, $gep_int192 = 0, $gep_int194 = 0, $gep_int196 = 0, $gep_int198 = 0, $gep_int200 = 0, $gep_int202 = 0, $gep_int204 = 0, $gep_int206 = 0, $gep_int208 = 0, $gep_int210 = 0, $gep_int214 = 0, $gep_int216 = 0, $gep_int217 = 0, $gep_int218 = 0, $gep_int220 = 0;
 var $gep_int222 = 0, $gep_int224 = 0, $gep_int226 = 0, $gep_int228 = 0, $gep_int230 = 0, $gep_int232 = 0, $gep_int234 = 0, $gep_int236 = 0, $gep_int238 = 0, $gep_int240 = 0, $gep_int242 = 0, $gep_int244 = 0, $gep_int248 = 0, $gep_int250 = 0, $gep_int252 = 0, $gep_int254 = 0, $gep_int256 = 0, $gep_int258 = 0, $gep_int260 = 0, $gep_int262 = 0;
 var $gep_int264 = 0, $gep_int266 = 0, $gep_int268 = 0, $gep_int270 = 0, $gep_int272 = 0, $gep_int274 = 0, $gep_int276 = 0, $gep_int278 = 0, $gep_int280 = 0, $gep_int282 = 0, $gep_int284 = 0, $gep_int286 = 0, $gep_int288 = 0, $gep_int290 = 0, $gep_int294 = 0, $gep_int295 = 0, $gep_int296 = 0, $gep_int300 = 0, $gep_int304 = 0, $gep_int306 = 0;
 var $gep_int308 = 0, $gep_int310 = 0, $gep_int312 = 0, $gep_int316 = 0, $gep_int318 = 0, $gep_int320 = 0, $gep_int322 = 0, $gep_int324 = 0, $gep_int326 = 0, $gep_int328 = 0, $gep_int330 = 0, $gep_int332 = 0, $gep_int334 = 0, $gep_int336 = 0, $gep_int340 = 0, $gep_int342 = 0, $gep_int344 = 0, $gep_int346 = 0, $gep_int348 = 0, $gep_int350 = 0;
 var $gep_int352 = 0, $gep_int354 = 0, $gep_int356 = 0, $gep_int358 = 0, $gep_int88 = 0, $gep_int90 = 0, $gep_int91 = 0, $gep_int93 = 0, $gep_int95 = 0, $gep_int97 = 0, $gep_int99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $p;
 $gep_int = $p;
 $gep = (($gep_int) + ($psize))|0;
 $2 = $gep;
 $3 = $2;
 $gep_int88 = $p;
 $gep89 = (($gep_int88) + 4)|0;
 $4 = $gep89;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 
 L1: do {
  if ($7) {
   $gep_int90 = $p;
   $8 = $gep_int90;
   $9 = HEAP32[$8>>2]|0;
   $10 = $5 & 3;
   $11 = ($10|0)==(0);
   
   if ($11) {
    STACKTOP = sp;return;
   }
   $12 = (0 - ($9))|0;
   $gep_int91 = $p;
   $gep92 = (($gep_int91) + ($12))|0;
   $13 = $gep92;
   $14 = $13;
   $15 = (($9) + ($psize))|0;
   $expanded1 = 16800;
   $gep_int93 = 16800;
   $gep94 = (($gep_int93) + 16)|0;
   $expanded = $gep94;
   $16 = HEAP32[$expanded>>2]|0;
   $17 = ($13>>>0)<($16>>>0);
   
   if ($17) {
    _abort();
    // unreachable
   }
   $expanded3 = 16800;
   $gep_int95 = 16800;
   $gep96 = (($gep_int95) + 20)|0;
   $expanded2 = $gep96;
   $18 = HEAP32[$expanded2>>2]|0;
   $19 = ($14|0)==($18|0);
   
   if ($19) {
    $$sum = (($psize) + 4)|0;
    $gep_int168 = $p;
    $gep169 = (($gep_int168) + ($$sum))|0;
    $125 = $gep169;
    $126 = $125;
    $127 = HEAP32[$125>>2]|0;
    $128 = $127 & 3;
    $129 = ($128|0)==(3);
    
    if (!($129)) {
     $$0 = $14;$$02 = $15;
     break;
    }
    $expanded23 = 16800;
    $gep_int170 = 16800;
    $gep171 = (($gep_int170) + 8)|0;
    $expanded22 = $gep171;
    HEAP32[$expanded22>>2] = $15;
    $130 = HEAP32[$125>>2]|0;
    $131 = $130 & -2;
    HEAP32[$125>>2] = $131;
    $132 = $15 | 1;
    $$sum24 = (4 - ($9))|0;
    $gep_int172 = $p;
    $gep173 = (($gep_int172) + ($$sum24))|0;
    $133 = $gep173;
    $134 = $133;
    HEAP32[$133>>2] = $132;
    $135 = $2;
    HEAP32[$2>>2] = $15;
    
    STACKTOP = sp;return;
   }
   $20 = $9 >>> 3;
   $21 = ($9>>>0)<(256);
   
   if ($21) {
    $$sum35 = (8 - ($9))|0;
    $gep_int97 = $p;
    $gep98 = (($gep_int97) + ($$sum35))|0;
    $22 = $gep98;
    $23 = $22;
    $24 = HEAP32[$22>>2]|0;
    $$sum36 = (12 - ($9))|0;
    $gep_int99 = $p;
    $gep100 = (($gep_int99) + ($$sum36))|0;
    $25 = $gep100;
    $26 = $25;
    $27 = HEAP32[$25>>2]|0;
    $28 = $20 << 1;
    $expanded4 = 16800;
    $gep_int101 = 16800;
    $gep102 = (($gep_int101) + 40)|0;
    $gep_array = $28<<2;
    $gep103 = (($gep102) + ($gep_array))|0;
    $29 = $gep103;
    $30 = $29;
    $31 = ($24|0)==($30|0);
    
    do {
     if (!($31)) {
      $32 = $24;
      $33 = ($32>>>0)<($16>>>0);
      
      if ($33) {
       _abort();
       // unreachable
      }
      $gep_int104 = $24;
      $gep105 = (($gep_int104) + 12)|0;
      $34 = $gep105;
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==($14|0);
      
      if ($36) {
       break;
      }
      _abort();
      // unreachable
     }
    } while(0);
    $37 = ($27|0)==($24|0);
    
    if ($37) {
     $38 = 1 << $20;
     $39 = $38 ^ -1;
     $expanded6 = 16800;
     $gep_int106 = 16800;
     $expanded5 = $gep_int106;
     $40 = HEAP32[$expanded5>>2]|0;
     $41 = $40 & $39;
     $expanded8 = 16800;
     $gep_int107 = 16800;
     $expanded7 = $gep_int107;
     HEAP32[$expanded7>>2] = $41;
     
     $$0 = $14;$$02 = $15;
     break;
    }
    $42 = ($27|0)==($30|0);
    
    do {
     if ($42) {
      $gep_int108 = $27;
      $gep109 = (($gep_int108) + 8)|0;
      $$pre71 = $gep109;
      
      $$pre$phi72Z2D = $$pre71;
     } else {
      $43 = $27;
      $44 = ($43>>>0)<($16>>>0);
      
      if ($44) {
       _abort();
       // unreachable
      }
      $gep_int110 = $27;
      $gep111 = (($gep_int110) + 8)|0;
      $45 = $gep111;
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==($14|0);
      
      if ($47) {
       $$pre$phi72Z2D = $45;
       break;
      }
      _abort();
      // unreachable
     }
    } while(0);
    
    $gep_int112 = $24;
    $gep113 = (($gep_int112) + 12)|0;
    $48 = $gep113;
    HEAP32[$48>>2] = $27;
    HEAP32[$$pre$phi72Z2D>>2] = $24;
    
    $$0 = $14;$$02 = $15;
    break;
   }
   $49 = $13;
   $$sum26 = (24 - ($9))|0;
   $gep_int114 = $p;
   $gep115 = (($gep_int114) + ($$sum26))|0;
   $50 = $gep115;
   $51 = $50;
   $52 = HEAP32[$50>>2]|0;
   $$sum27 = (12 - ($9))|0;
   $gep_int116 = $p;
   $gep117 = (($gep_int116) + ($$sum27))|0;
   $53 = $gep117;
   $54 = $53;
   $55 = HEAP32[$53>>2]|0;
   $56 = ($55|0)==($49|0);
   
   do {
    if ($56) {
     $$sum28 = (16 - ($9))|0;
     $$sum29 = (($$sum28) + 4)|0;
     $gep_int124 = $p;
     $gep125 = (($gep_int124) + ($$sum29))|0;
     $68 = $gep125;
     $69 = $68;
     $70 = HEAP32[$68>>2]|0;
     $71 = ($70|0)==(0);
     
     if ($71) {
      $gep_int126 = $p;
      $gep127 = (($gep_int126) + ($$sum28))|0;
      $72 = $gep127;
      $73 = $72;
      $74 = HEAP32[$72>>2]|0;
      $75 = ($74|0)==(0);
      
      if ($75) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $74;$RP$0 = $73;
      }
     } else {
      $R$0 = $70;$RP$0 = $69;
     }
     while(1) {
      
      
      $gep_int128 = $R$0;
      $gep129 = (($gep_int128) + 20)|0;
      $76 = $gep129;
      $77 = HEAP32[$76>>2]|0;
      $78 = ($77|0)==(0);
      
      if (!($78)) {
       $RP$0$phi = $76;$R$0$phi = $77;$RP$0 = $RP$0$phi;$R$0 = $R$0$phi;
       continue;
      }
      $gep_int130 = $R$0;
      $gep131 = (($gep_int130) + 16)|0;
      $79 = $gep131;
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)==(0);
      
      if ($81) {
       break;
      } else {
       $R$0 = $80;$RP$0 = $79;
      }
     }
     $82 = $RP$0;
     $83 = ($82>>>0)<($16>>>0);
     
     if ($83) {
      _abort();
      // unreachable
     } else {
      HEAP32[$RP$0>>2] = 0;
      
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum33 = (8 - ($9))|0;
     $gep_int118 = $p;
     $gep119 = (($gep_int118) + ($$sum33))|0;
     $57 = $gep119;
     $58 = $57;
     $59 = HEAP32[$57>>2]|0;
     $60 = $59;
     $61 = ($60>>>0)<($16>>>0);
     
     if ($61) {
      _abort();
      // unreachable
     }
     $gep_int120 = $59;
     $gep121 = (($gep_int120) + 12)|0;
     $62 = $gep121;
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)==($49|0);
     
     if (!($64)) {
      _abort();
      // unreachable
     }
     $gep_int122 = $55;
     $gep123 = (($gep_int122) + 8)|0;
     $65 = $gep123;
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)==($49|0);
     
     if ($67) {
      HEAP32[$62>>2] = $55;
      HEAP32[$65>>2] = $59;
      
      $R$1 = $55;
      break;
     } else {
      _abort();
      // unreachable
     }
    }
   } while(0);
   
   $84 = ($52|0)==(0);
   
   if ($84) {
    $$0 = $14;$$02 = $15;
    break;
   }
   $$sum30 = (28 - ($9))|0;
   $gep_int132 = $p;
   $gep133 = (($gep_int132) + ($$sum30))|0;
   $85 = $gep133;
   $86 = $85;
   $87 = HEAP32[$85>>2]|0;
   $expanded9 = 16800;
   $gep_int134 = 16800;
   $gep135 = (($gep_int134) + 304)|0;
   $gep_array136 = $87<<2;
   $gep137 = (($gep135) + ($gep_array136))|0;
   $88 = $gep137;
   $89 = HEAP32[$88>>2]|0;
   $90 = ($49|0)==($89|0);
   
   do {
    if ($90) {
     HEAP32[$88>>2] = $R$1;
     $cond = ($R$1|0)==(0);
     
     if (!($cond)) {
      break;
     }
     $91 = 1 << $87;
     $92 = $91 ^ -1;
     $expanded11 = 16800;
     $gep_int138 = 16800;
     $gep139 = (($gep_int138) + 4)|0;
     $expanded10 = $gep139;
     $93 = HEAP32[$expanded10>>2]|0;
     $94 = $93 & $92;
     $expanded13 = 16800;
     $gep_int140 = 16800;
     $gep141 = (($gep_int140) + 4)|0;
     $expanded12 = $gep141;
     HEAP32[$expanded12>>2] = $94;
     
     $$0 = $14;$$02 = $15;
     break L1;
    } else {
     $95 = $52;
     $expanded15 = 16800;
     $gep_int142 = 16800;
     $gep143 = (($gep_int142) + 16)|0;
     $expanded14 = $gep143;
     $96 = HEAP32[$expanded14>>2]|0;
     $97 = ($95>>>0)<($96>>>0);
     
     if ($97) {
      _abort();
      // unreachable
     }
     $gep_int144 = $52;
     $gep145 = (($gep_int144) + 16)|0;
     $98 = $gep145;
     $99 = HEAP32[$98>>2]|0;
     $100 = ($99|0)==($49|0);
     
     if ($100) {
      HEAP32[$98>>2] = $R$1;
      
     } else {
      $gep_int146 = $52;
      $gep147 = (($gep_int146) + 20)|0;
      $101 = $gep147;
      HEAP32[$101>>2] = $R$1;
      
     }
     $102 = ($R$1|0)==(0);
     
     if ($102) {
      $$0 = $14;$$02 = $15;
      break L1;
     }
    }
   } while(0);
   $103 = $R$1;
   $expanded17 = 16800;
   $gep_int148 = 16800;
   $gep149 = (($gep_int148) + 16)|0;
   $expanded16 = $gep149;
   $104 = HEAP32[$expanded16>>2]|0;
   $105 = ($103>>>0)<($104>>>0);
   
   if ($105) {
    _abort();
    // unreachable
   }
   $gep_int150 = $R$1;
   $gep151 = (($gep_int150) + 24)|0;
   $106 = $gep151;
   HEAP32[$106>>2] = $52;
   $$sum31 = (16 - ($9))|0;
   $gep_int152 = $p;
   $gep153 = (($gep_int152) + ($$sum31))|0;
   $107 = $gep153;
   $108 = $107;
   $109 = HEAP32[$107>>2]|0;
   $110 = ($109|0)==(0);
   
   do {
    if (!($110)) {
     $111 = $109;
     $expanded19 = 16800;
     $gep_int154 = 16800;
     $gep155 = (($gep_int154) + 16)|0;
     $expanded18 = $gep155;
     $112 = HEAP32[$expanded18>>2]|0;
     $113 = ($111>>>0)<($112>>>0);
     
     if ($113) {
      _abort();
      // unreachable
     } else {
      $gep_int156 = $R$1;
      $gep157 = (($gep_int156) + 16)|0;
      $114 = $gep157;
      HEAP32[$114>>2] = $109;
      $gep_int158 = $109;
      $gep159 = (($gep_int158) + 24)|0;
      $115 = $gep159;
      HEAP32[$115>>2] = $R$1;
      
      break;
     }
    }
   } while(0);
   $$sum32 = (($$sum31) + 4)|0;
   $gep_int160 = $p;
   $gep161 = (($gep_int160) + ($$sum32))|0;
   $116 = $gep161;
   $117 = $116;
   $118 = HEAP32[$116>>2]|0;
   $119 = ($118|0)==(0);
   
   if ($119) {
    $$0 = $14;$$02 = $15;
    break;
   }
   $120 = $118;
   $expanded21 = 16800;
   $gep_int162 = 16800;
   $gep163 = (($gep_int162) + 16)|0;
   $expanded20 = $gep163;
   $121 = HEAP32[$expanded20>>2]|0;
   $122 = ($120>>>0)<($121>>>0);
   
   if ($122) {
    _abort();
    // unreachable
   } else {
    $gep_int164 = $R$1;
    $gep165 = (($gep_int164) + 20)|0;
    $123 = $gep165;
    HEAP32[$123>>2] = $118;
    $gep_int166 = $118;
    $gep167 = (($gep_int166) + 24)|0;
    $124 = $gep167;
    HEAP32[$124>>2] = $R$1;
    
    $$0 = $14;$$02 = $15;
    break;
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 
 
 $expanded25 = 16800;
 $gep_int174 = 16800;
 $gep175 = (($gep_int174) + 16)|0;
 $expanded24 = $gep175;
 $136 = HEAP32[$expanded24>>2]|0;
 $137 = ($2>>>0)<($136>>>0);
 
 if ($137) {
  _abort();
  // unreachable
 }
 $$sum1 = (($psize) + 4)|0;
 $gep_int176 = $p;
 $gep177 = (($gep_int176) + ($$sum1))|0;
 $138 = $gep177;
 $139 = $138;
 $140 = HEAP32[$138>>2]|0;
 $141 = $140 & 2;
 $142 = ($141|0)==(0);
 
 do {
  if ($142) {
   $expanded27 = 16800;
   $gep_int178 = 16800;
   $gep179 = (($gep_int178) + 24)|0;
   $expanded26 = $gep179;
   $143 = HEAP32[$expanded26>>2]|0;
   $144 = ($3|0)==($143|0);
   
   if ($144) {
    $expanded29 = 16800;
    $gep_int180 = 16800;
    $gep181 = (($gep_int180) + 12)|0;
    $expanded28 = $gep181;
    $145 = HEAP32[$expanded28>>2]|0;
    $146 = (($145) + ($$02))|0;
    $expanded31 = 16800;
    $gep_int182 = 16800;
    $gep183 = (($gep_int182) + 12)|0;
    $expanded30 = $gep183;
    HEAP32[$expanded30>>2] = $146;
    $expanded33 = 16800;
    $gep_int184 = 16800;
    $gep185 = (($gep_int184) + 24)|0;
    $expanded32 = $gep185;
    HEAP32[$expanded32>>2] = $$0;
    $147 = $146 | 1;
    $gep_int186 = $$0;
    $gep187 = (($gep_int186) + 4)|0;
    $148 = $gep187;
    HEAP32[$148>>2] = $147;
    $expanded35 = 16800;
    $gep_int188 = 16800;
    $gep189 = (($gep_int188) + 20)|0;
    $expanded34 = $gep189;
    $149 = HEAP32[$expanded34>>2]|0;
    $150 = ($$0|0)==($149|0);
    
    if (!($150)) {
     STACKTOP = sp;return;
    }
    $expanded37 = 16800;
    $gep_int190 = 16800;
    $gep191 = (($gep_int190) + 20)|0;
    $expanded36 = $gep191;
    HEAP32[$expanded36>>2] = 0;
    $expanded39 = 16800;
    $gep_int192 = 16800;
    $gep193 = (($gep_int192) + 8)|0;
    $expanded38 = $gep193;
    HEAP32[$expanded38>>2] = 0;
    
    STACKTOP = sp;return;
   }
   $expanded41 = 16800;
   $gep_int194 = 16800;
   $gep195 = (($gep_int194) + 20)|0;
   $expanded40 = $gep195;
   $151 = HEAP32[$expanded40>>2]|0;
   $152 = ($3|0)==($151|0);
   
   if ($152) {
    $expanded43 = 16800;
    $gep_int196 = 16800;
    $gep197 = (($gep_int196) + 8)|0;
    $expanded42 = $gep197;
    $153 = HEAP32[$expanded42>>2]|0;
    $154 = (($153) + ($$02))|0;
    $expanded45 = 16800;
    $gep_int198 = 16800;
    $gep199 = (($gep_int198) + 8)|0;
    $expanded44 = $gep199;
    HEAP32[$expanded44>>2] = $154;
    $expanded47 = 16800;
    $gep_int200 = 16800;
    $gep201 = (($gep_int200) + 20)|0;
    $expanded46 = $gep201;
    HEAP32[$expanded46>>2] = $$0;
    $155 = $154 | 1;
    $gep_int202 = $$0;
    $gep203 = (($gep_int202) + 4)|0;
    $156 = $gep203;
    HEAP32[$156>>2] = $155;
    $157 = $$0;
    $gep_int204 = $$0;
    $gep205 = (($gep_int204) + ($154))|0;
    $158 = $gep205;
    $159 = $158;
    HEAP32[$158>>2] = $154;
    
    STACKTOP = sp;return;
   }
   $160 = $140 & -8;
   $161 = (($160) + ($$02))|0;
   $162 = $140 >>> 3;
   $163 = ($140>>>0)<(256);
   
   L100: do {
    if ($163) {
     $$sum20 = (($psize) + 8)|0;
     $gep_int206 = $p;
     $gep207 = (($gep_int206) + ($$sum20))|0;
     $164 = $gep207;
     $165 = $164;
     $166 = HEAP32[$164>>2]|0;
     $$sum21 = (($psize) + 12)|0;
     $gep_int208 = $p;
     $gep209 = (($gep_int208) + ($$sum21))|0;
     $167 = $gep209;
     $168 = $167;
     $169 = HEAP32[$167>>2]|0;
     $170 = $162 << 1;
     $expanded48 = 16800;
     $gep_int210 = 16800;
     $gep211 = (($gep_int210) + 40)|0;
     $gep_array212 = $170<<2;
     $gep213 = (($gep211) + ($gep_array212))|0;
     $171 = $gep213;
     $172 = $171;
     $173 = ($166|0)==($172|0);
     
     do {
      if (!($173)) {
       $174 = $166;
       $175 = ($174>>>0)<($136>>>0);
       
       if ($175) {
        _abort();
        // unreachable
       }
       $gep_int214 = $166;
       $gep215 = (($gep_int214) + 12)|0;
       $176 = $gep215;
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==($3|0);
       
       if ($178) {
        break;
       }
       _abort();
       // unreachable
      }
     } while(0);
     $179 = ($169|0)==($166|0);
     
     if ($179) {
      $180 = 1 << $162;
      $181 = $180 ^ -1;
      $expanded50 = 16800;
      $gep_int216 = 16800;
      $expanded49 = $gep_int216;
      $182 = HEAP32[$expanded49>>2]|0;
      $183 = $182 & $181;
      $expanded52 = 16800;
      $gep_int217 = 16800;
      $expanded51 = $gep_int217;
      HEAP32[$expanded51>>2] = $183;
      
      break;
     }
     $184 = ($169|0)==($172|0);
     
     do {
      if ($184) {
       $gep_int218 = $169;
       $gep219 = (($gep_int218) + 8)|0;
       $$pre69 = $gep219;
       
       $$pre$phi70Z2D = $$pre69;
      } else {
       $185 = $169;
       $186 = ($185>>>0)<($136>>>0);
       
       if ($186) {
        _abort();
        // unreachable
       }
       $gep_int220 = $169;
       $gep221 = (($gep_int220) + 8)|0;
       $187 = $gep221;
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==($3|0);
       
       if ($189) {
        $$pre$phi70Z2D = $187;
        break;
       }
       _abort();
       // unreachable
      }
     } while(0);
     
     $gep_int222 = $166;
     $gep223 = (($gep_int222) + 12)|0;
     $190 = $gep223;
     HEAP32[$190>>2] = $169;
     HEAP32[$$pre$phi70Z2D>>2] = $166;
     
    } else {
     $191 = $2;
     $$sum2 = (($psize) + 24)|0;
     $gep_int224 = $p;
     $gep225 = (($gep_int224) + ($$sum2))|0;
     $192 = $gep225;
     $193 = $192;
     $194 = HEAP32[$192>>2]|0;
     $$sum3 = (($psize) + 12)|0;
     $gep_int226 = $p;
     $gep227 = (($gep_int226) + ($$sum3))|0;
     $195 = $gep227;
     $196 = $195;
     $197 = HEAP32[$195>>2]|0;
     $198 = ($197|0)==($191|0);
     
     do {
      if ($198) {
       $$sum5 = (($psize) + 20)|0;
       $gep_int234 = $p;
       $gep235 = (($gep_int234) + ($$sum5))|0;
       $210 = $gep235;
       $211 = $210;
       $212 = HEAP32[$210>>2]|0;
       $213 = ($212|0)==(0);
       
       if ($213) {
        $$sum4 = (($psize) + 16)|0;
        $gep_int236 = $p;
        $gep237 = (($gep_int236) + ($$sum4))|0;
        $214 = $gep237;
        $215 = $214;
        $216 = HEAP32[$214>>2]|0;
        $217 = ($216|0)==(0);
        
        if ($217) {
         $R7$1 = 0;
         break;
        } else {
         $R7$0 = $216;$RP9$0 = $215;
        }
       } else {
        $R7$0 = $212;$RP9$0 = $211;
       }
       while(1) {
        
        
        $gep_int238 = $R7$0;
        $gep239 = (($gep_int238) + 20)|0;
        $218 = $gep239;
        $219 = HEAP32[$218>>2]|0;
        $220 = ($219|0)==(0);
        
        if (!($220)) {
         $RP9$0$phi = $218;$R7$0$phi = $219;$RP9$0 = $RP9$0$phi;$R7$0 = $R7$0$phi;
         continue;
        }
        $gep_int240 = $R7$0;
        $gep241 = (($gep_int240) + 16)|0;
        $221 = $gep241;
        $222 = HEAP32[$221>>2]|0;
        $223 = ($222|0)==(0);
        
        if ($223) {
         break;
        } else {
         $R7$0 = $222;$RP9$0 = $221;
        }
       }
       $224 = $RP9$0;
       $225 = ($224>>>0)<($136>>>0);
       
       if ($225) {
        _abort();
        // unreachable
       } else {
        HEAP32[$RP9$0>>2] = 0;
        
        $R7$1 = $R7$0;
        break;
       }
      } else {
       $$sum18 = (($psize) + 8)|0;
       $gep_int228 = $p;
       $gep229 = (($gep_int228) + ($$sum18))|0;
       $199 = $gep229;
       $200 = $199;
       $201 = HEAP32[$199>>2]|0;
       $202 = $201;
       $203 = ($202>>>0)<($136>>>0);
       
       if ($203) {
        _abort();
        // unreachable
       }
       $gep_int230 = $201;
       $gep231 = (($gep_int230) + 12)|0;
       $204 = $gep231;
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==($191|0);
       
       if (!($206)) {
        _abort();
        // unreachable
       }
       $gep_int232 = $197;
       $gep233 = (($gep_int232) + 8)|0;
       $207 = $gep233;
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==($191|0);
       
       if ($209) {
        HEAP32[$204>>2] = $197;
        HEAP32[$207>>2] = $201;
        
        $R7$1 = $197;
        break;
       } else {
        _abort();
        // unreachable
       }
      }
     } while(0);
     
     $226 = ($194|0)==(0);
     
     if ($226) {
      break;
     }
     $$sum15 = (($psize) + 28)|0;
     $gep_int242 = $p;
     $gep243 = (($gep_int242) + ($$sum15))|0;
     $227 = $gep243;
     $228 = $227;
     $229 = HEAP32[$227>>2]|0;
     $expanded53 = 16800;
     $gep_int244 = 16800;
     $gep245 = (($gep_int244) + 304)|0;
     $gep_array246 = $229<<2;
     $gep247 = (($gep245) + ($gep_array246))|0;
     $230 = $gep247;
     $231 = HEAP32[$230>>2]|0;
     $232 = ($191|0)==($231|0);
     
     do {
      if ($232) {
       HEAP32[$230>>2] = $R7$1;
       $cond53 = ($R7$1|0)==(0);
       
       if (!($cond53)) {
        break;
       }
       $233 = 1 << $229;
       $234 = $233 ^ -1;
       $expanded55 = 16800;
       $gep_int248 = 16800;
       $gep249 = (($gep_int248) + 4)|0;
       $expanded54 = $gep249;
       $235 = HEAP32[$expanded54>>2]|0;
       $236 = $235 & $234;
       $expanded57 = 16800;
       $gep_int250 = 16800;
       $gep251 = (($gep_int250) + 4)|0;
       $expanded56 = $gep251;
       HEAP32[$expanded56>>2] = $236;
       
       break L100;
      } else {
       $237 = $194;
       $expanded59 = 16800;
       $gep_int252 = 16800;
       $gep253 = (($gep_int252) + 16)|0;
       $expanded58 = $gep253;
       $238 = HEAP32[$expanded58>>2]|0;
       $239 = ($237>>>0)<($238>>>0);
       
       if ($239) {
        _abort();
        // unreachable
       }
       $gep_int254 = $194;
       $gep255 = (($gep_int254) + 16)|0;
       $240 = $gep255;
       $241 = HEAP32[$240>>2]|0;
       $242 = ($241|0)==($191|0);
       
       if ($242) {
        HEAP32[$240>>2] = $R7$1;
        
       } else {
        $gep_int256 = $194;
        $gep257 = (($gep_int256) + 20)|0;
        $243 = $gep257;
        HEAP32[$243>>2] = $R7$1;
        
       }
       $244 = ($R7$1|0)==(0);
       
       if ($244) {
        break L100;
       }
      }
     } while(0);
     $245 = $R7$1;
     $expanded61 = 16800;
     $gep_int258 = 16800;
     $gep259 = (($gep_int258) + 16)|0;
     $expanded60 = $gep259;
     $246 = HEAP32[$expanded60>>2]|0;
     $247 = ($245>>>0)<($246>>>0);
     
     if ($247) {
      _abort();
      // unreachable
     }
     $gep_int260 = $R7$1;
     $gep261 = (($gep_int260) + 24)|0;
     $248 = $gep261;
     HEAP32[$248>>2] = $194;
     $$sum16 = (($psize) + 16)|0;
     $gep_int262 = $p;
     $gep263 = (($gep_int262) + ($$sum16))|0;
     $249 = $gep263;
     $250 = $249;
     $251 = HEAP32[$249>>2]|0;
     $252 = ($251|0)==(0);
     
     do {
      if (!($252)) {
       $253 = $251;
       $expanded63 = 16800;
       $gep_int264 = 16800;
       $gep265 = (($gep_int264) + 16)|0;
       $expanded62 = $gep265;
       $254 = HEAP32[$expanded62>>2]|0;
       $255 = ($253>>>0)<($254>>>0);
       
       if ($255) {
        _abort();
        // unreachable
       } else {
        $gep_int266 = $R7$1;
        $gep267 = (($gep_int266) + 16)|0;
        $256 = $gep267;
        HEAP32[$256>>2] = $251;
        $gep_int268 = $251;
        $gep269 = (($gep_int268) + 24)|0;
        $257 = $gep269;
        HEAP32[$257>>2] = $R7$1;
        
        break;
       }
      }
     } while(0);
     $$sum17 = (($psize) + 20)|0;
     $gep_int270 = $p;
     $gep271 = (($gep_int270) + ($$sum17))|0;
     $258 = $gep271;
     $259 = $258;
     $260 = HEAP32[$258>>2]|0;
     $261 = ($260|0)==(0);
     
     if ($261) {
      break;
     }
     $262 = $260;
     $expanded65 = 16800;
     $gep_int272 = 16800;
     $gep273 = (($gep_int272) + 16)|0;
     $expanded64 = $gep273;
     $263 = HEAP32[$expanded64>>2]|0;
     $264 = ($262>>>0)<($263>>>0);
     
     if ($264) {
      _abort();
      // unreachable
     } else {
      $gep_int274 = $R7$1;
      $gep275 = (($gep_int274) + 20)|0;
      $265 = $gep275;
      HEAP32[$265>>2] = $260;
      $gep_int276 = $260;
      $gep277 = (($gep_int276) + 24)|0;
      $266 = $gep277;
      HEAP32[$266>>2] = $R7$1;
      
      break;
     }
    }
   } while(0);
   $267 = $161 | 1;
   $gep_int278 = $$0;
   $gep279 = (($gep_int278) + 4)|0;
   $268 = $gep279;
   HEAP32[$268>>2] = $267;
   $269 = $$0;
   $gep_int280 = $$0;
   $gep281 = (($gep_int280) + ($161))|0;
   $270 = $gep281;
   $271 = $270;
   HEAP32[$270>>2] = $161;
   $expanded67 = 16800;
   $gep_int282 = 16800;
   $gep283 = (($gep_int282) + 20)|0;
   $expanded66 = $gep283;
   $272 = HEAP32[$expanded66>>2]|0;
   $273 = ($$0|0)==($272|0);
   
   if (!($273)) {
    $$1 = $161;
    break;
   }
   $expanded69 = 16800;
   $gep_int284 = 16800;
   $gep285 = (($gep_int284) + 8)|0;
   $expanded68 = $gep285;
   HEAP32[$expanded68>>2] = $161;
   
   STACKTOP = sp;return;
  } else {
   $274 = $140 & -2;
   HEAP32[$138>>2] = $274;
   $275 = $$02 | 1;
   $gep_int286 = $$0;
   $gep287 = (($gep_int286) + 4)|0;
   $276 = $gep287;
   HEAP32[$276>>2] = $275;
   $277 = $$0;
   $gep_int288 = $$0;
   $gep289 = (($gep_int288) + ($$02))|0;
   $278 = $gep289;
   $279 = $278;
   HEAP32[$278>>2] = $$02;
   
   $$1 = $$02;
  }
 } while(0);
 
 $280 = $$1 >>> 3;
 $281 = ($$1>>>0)<(256);
 
 if ($281) {
  $282 = $280 << 1;
  $expanded70 = 16800;
  $gep_int290 = 16800;
  $gep291 = (($gep_int290) + 40)|0;
  $gep_array292 = $282<<2;
  $gep293 = (($gep291) + ($gep_array292))|0;
  $283 = $gep293;
  $284 = $283;
  $expanded72 = 16800;
  $gep_int294 = 16800;
  $expanded71 = $gep_int294;
  $285 = HEAP32[$expanded71>>2]|0;
  $286 = 1 << $280;
  $287 = $285 & $286;
  $288 = ($287|0)==(0);
  
  do {
   if ($288) {
    $289 = $285 | $286;
    $expanded74 = 16800;
    $gep_int295 = 16800;
    $expanded73 = $gep_int295;
    HEAP32[$expanded73>>2] = $289;
    $$sum13$pre = (($282) + 2)|0;
    $expanded75 = 16800;
    $gep_int296 = 16800;
    $gep297 = (($gep_int296) + 40)|0;
    $gep_array298 = $$sum13$pre<<2;
    $gep299 = (($gep297) + ($gep_array298))|0;
    $$pre = $gep299;
    
    $$pre$phiZ2D = $$pre;$F16$0 = $284;
   } else {
    $$sum14 = (($282) + 2)|0;
    $expanded76 = 16800;
    $gep_int300 = 16800;
    $gep301 = (($gep_int300) + 40)|0;
    $gep_array302 = $$sum14<<2;
    $gep303 = (($gep301) + ($gep_array302))|0;
    $290 = $gep303;
    $291 = HEAP32[$290>>2]|0;
    $292 = $291;
    $expanded78 = 16800;
    $gep_int304 = 16800;
    $gep305 = (($gep_int304) + 16)|0;
    $expanded77 = $gep305;
    $293 = HEAP32[$expanded77>>2]|0;
    $294 = ($292>>>0)<($293>>>0);
    
    if (!($294)) {
     $$pre$phiZ2D = $290;$F16$0 = $291;
     break;
    }
    _abort();
    // unreachable
   }
  } while(0);
  
  
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $gep_int306 = $F16$0;
  $gep307 = (($gep_int306) + 12)|0;
  $295 = $gep307;
  HEAP32[$295>>2] = $$0;
  $gep_int308 = $$0;
  $gep309 = (($gep_int308) + 8)|0;
  $296 = $gep309;
  HEAP32[$296>>2] = $F16$0;
  $gep_int310 = $$0;
  $gep311 = (($gep_int310) + 12)|0;
  $297 = $gep311;
  HEAP32[$297>>2] = $284;
  
  STACKTOP = sp;return;
 }
 $298 = $$0;
 $299 = $$1 >>> 8;
 $300 = ($299|0)==(0);
 
 do {
  if ($300) {
   $I19$0 = 0;
  } else {
   $301 = ($$1>>>0)>(16777215);
   
   if ($301) {
    $I19$0 = 31;
    break;
   }
   $302 = (($299) + 1048320)|0;
   $303 = $302 >>> 16;
   $304 = $303 & 8;
   $305 = $299 << $304;
   $306 = (($305) + 520192)|0;
   $307 = $306 >>> 16;
   $308 = $307 & 4;
   $309 = $308 | $304;
   $310 = $305 << $308;
   $311 = (($310) + 245760)|0;
   $312 = $311 >>> 16;
   $313 = $312 & 2;
   $314 = $309 | $313;
   $315 = (14 - ($314))|0;
   $316 = $310 << $313;
   $317 = $316 >>> 15;
   $318 = (($315) + ($317))|0;
   $319 = $318 << 1;
   $320 = (($318) + 7)|0;
   $321 = $$1 >>> $320;
   $322 = $321 & 1;
   $323 = $322 | $319;
   
   $I19$0 = $323;
  }
 } while(0);
 
 $expanded79 = 16800;
 $gep_int312 = 16800;
 $gep313 = (($gep_int312) + 304)|0;
 $gep_array314 = $I19$0<<2;
 $gep315 = (($gep313) + ($gep_array314))|0;
 $324 = $gep315;
 $gep_int316 = $$0;
 $gep317 = (($gep_int316) + 28)|0;
 $325 = $gep317;
 $I19$0$c = $I19$0;
 HEAP32[$325>>2] = $I19$0$c;
 $gep_int318 = $$0;
 $gep319 = (($gep_int318) + 20)|0;
 $326 = $gep319;
 HEAP32[$326>>2] = 0;
 $gep_int320 = $$0;
 $gep321 = (($gep_int320) + 16)|0;
 $327 = $gep321;
 HEAP32[$327>>2] = 0;
 $expanded81 = 16800;
 $gep_int322 = 16800;
 $gep323 = (($gep_int322) + 4)|0;
 $expanded80 = $gep323;
 $328 = HEAP32[$expanded80>>2]|0;
 $329 = 1 << $I19$0;
 $330 = $328 & $329;
 $331 = ($330|0)==(0);
 
 if ($331) {
  $332 = $328 | $329;
  $expanded83 = 16800;
  $gep_int324 = 16800;
  $gep325 = (($gep_int324) + 4)|0;
  $expanded82 = $gep325;
  HEAP32[$expanded82>>2] = $332;
  HEAP32[$324>>2] = $298;
  $gep_int326 = $$0;
  $gep327 = (($gep_int326) + 24)|0;
  $333 = $gep327;
  $$c = $324;
  HEAP32[$333>>2] = $$c;
  $gep_int328 = $$0;
  $gep329 = (($gep_int328) + 12)|0;
  $334 = $gep329;
  HEAP32[$334>>2] = $$0;
  $gep_int330 = $$0;
  $gep331 = (($gep_int330) + 8)|0;
  $335 = $gep331;
  HEAP32[$335>>2] = $$0;
  
  STACKTOP = sp;return;
 }
 $336 = HEAP32[$324>>2]|0;
 $337 = ($I19$0|0)==(31);
 
 if ($337) {
  $340 = 0;
 } else {
  $338 = $I19$0 >>> 1;
  $339 = (25 - ($338))|0;
  
  $340 = $339;
 }
 
 $gep_int332 = $336;
 $gep333 = (($gep_int332) + 4)|0;
 $341 = $gep333;
 $342 = HEAP32[$341>>2]|0;
 $343 = $342 & -8;
 $344 = ($343|0)==($$1|0);
 
 L194: do {
  if ($344) {
   $T$0$lcssa = $336;
  } else {
   $345 = $$1 << $340;
   
   $K20$056 = $345;$T$055 = $336;
   while(1) {
    
    
    $351 = $K20$056 >>> 31;
    $gep_int336 = $T$055;
    $gep337 = (($gep_int336) + 16)|0;
    $gep_array338 = $351<<2;
    $gep339 = (($gep337) + ($gep_array338))|0;
    $352 = $gep339;
    $353 = HEAP32[$352>>2]|0;
    $354 = ($353|0)==(0);
    
    if ($354) {
     break;
    }
    $346 = $K20$056 << 1;
    $gep_int334 = $353;
    $gep335 = (($gep_int334) + 4)|0;
    $347 = $gep335;
    $348 = HEAP32[$347>>2]|0;
    $349 = $348 & -8;
    $350 = ($349|0)==($$1|0);
    
    if ($350) {
     $T$0$lcssa = $353;
     break L194;
    } else {
     $T$055$phi = $353;$K20$056 = $346;$T$055 = $T$055$phi;
    }
   }
   $355 = $352;
   $expanded85 = 16800;
   $gep_int340 = 16800;
   $gep341 = (($gep_int340) + 16)|0;
   $expanded84 = $gep341;
   $356 = HEAP32[$expanded84>>2]|0;
   $357 = ($355>>>0)<($356>>>0);
   
   if ($357) {
    _abort();
    // unreachable
   }
   HEAP32[$352>>2] = $298;
   $gep_int342 = $$0;
   $gep343 = (($gep_int342) + 24)|0;
   $358 = $gep343;
   $T$0$c10 = $T$055;
   HEAP32[$358>>2] = $T$0$c10;
   $gep_int344 = $$0;
   $gep345 = (($gep_int344) + 12)|0;
   $359 = $gep345;
   HEAP32[$359>>2] = $$0;
   $gep_int346 = $$0;
   $gep347 = (($gep_int346) + 8)|0;
   $360 = $gep347;
   HEAP32[$360>>2] = $$0;
   
   STACKTOP = sp;return;
  }
 } while(0);
 
 $gep_int348 = $T$0$lcssa;
 $gep349 = (($gep_int348) + 8)|0;
 $361 = $gep349;
 $362 = HEAP32[$361>>2]|0;
 $363 = $T$0$lcssa;
 $expanded87 = 16800;
 $gep_int350 = 16800;
 $gep351 = (($gep_int350) + 16)|0;
 $expanded86 = $gep351;
 $364 = HEAP32[$expanded86>>2]|0;
 $365 = ($363>>>0)<($364>>>0);
 
 if ($365) {
  _abort();
  // unreachable
 }
 $366 = $362;
 $367 = ($366>>>0)<($364>>>0);
 
 if ($367) {
  _abort();
  // unreachable
 }
 $gep_int352 = $362;
 $gep353 = (($gep_int352) + 12)|0;
 $368 = $gep353;
 HEAP32[$368>>2] = $298;
 HEAP32[$361>>2] = $298;
 $gep_int354 = $$0;
 $gep355 = (($gep_int354) + 8)|0;
 $369 = $gep355;
 $$c9 = $362;
 HEAP32[$369>>2] = $$c9;
 $gep_int356 = $$0;
 $gep357 = (($gep_int356) + 12)|0;
 $370 = $gep357;
 $T$0$c = $T$0$lcssa;
 HEAP32[$370>>2] = $T$0$c;
 $gep_int358 = $$0;
 $gep359 = (($gep_int358) + 24)|0;
 $371 = $gep359;
 HEAP32[$371>>2] = 0;
 
 STACKTOP = sp;return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$size = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $expanded10 = 0;
 var $expanded11 = 0, $expanded12 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $expanded9 = 0, $gep = 0, $gep_int = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($size|0)==(0);
 $$size = $1 ? 1 : $size;
 
 while(1) {
  $2 = _malloc($$size)|0;
  $3 = ($2|0)==(0);
  
  if (!($3)) {
   label = 10;
   break;
  }
  $expanded = 17296;
  $4 = HEAP32[17296>>2]|0;HEAP32[17296>>2] = (($4+0)|0);
  $5 = ($4|0)==(0);
  
  if ($5) {
   label = 9;
   break;
  }
  $6 = $4;
  __THREW__ = 0;
  invoke_v($6|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  
  if ($8) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $expanded6 = 69;
   $9 = ___cxa_find_matching_catch(-1,-1,17360)|0;
   $10 = tempRet0;
   
   $lpad$phi$index = $9;$lpad$phi$index2 = $10;
  }
  else if ((label|0) == 9) {
   $14 = ___cxa_allocate_exception(4)|0;
   $15 = $14;
   $expanded10 = 17304;
   $gep_int = 17304;
   $gep = (($gep_int) + 8)|0;
   $expanded9 = $gep;
   $expanded8 = $expanded9;
   HEAP32[$14>>2] = $expanded8;
   __THREW__ = 0;
   $expanded11 = 17360;
   $expanded12 = 127;
   invoke_viii(5,$14|0,$expanded11|0,$expanded12|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   
   if ($17) {
    $expanded7 = 69;
    $11 = ___cxa_find_matching_catch(-1,-1,17360)|0;
    $12 = tempRet0;
    
    $lpad$phi$index = $11;$lpad$phi$index2 = $12;
    break;
   } else {
    // unreachable
   }
  }
  else if ((label|0) == 10) {
   STACKTOP = sp;return $2|0;
  }
 } while(0);
 
 
 $13 = ($lpad$phi$index2|0)<(0);
 
 if ($13) {
  ___cxa_call_unexpected($lpad$phi$index|0);
  // unreachable
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $expanded = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $1 = invoke_ii(70,$size|0)|0;
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 
 if (!($3)) {
  STACKTOP = sp;return $1|0;
 }
 $expanded = 69;
 $4 = ___cxa_find_matching_catch(-1,-1,17360)|0;
 $5 = tempRet0;
 $6 = ($5|0)<(0);
 
 if ($6) {
  ___cxa_call_unexpected($4|0);
  // unreachable
 } else {
  ___resumeException($4|0);
  // unreachable
 }
 return 0|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($ptr|0)==(0);
 
 if (!($1)) {
  _free($ptr);
  
 }
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt9exceptionD2Ev($1|0);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $this;
 $1 = $gep_int;
 __ZNSt9exceptionD2Ev($1|0);
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var $expanded = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = 17328;
 $expanded = $gep_int;
 STACKTOP = sp;return $expanded|0;
}
function __ZSt17__throw_bad_allocv() {
 var $1 = 0, $2 = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $expanded4 = 0, $gep = 0, $gep_int = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___cxa_allocate_exception(4)|0;
 $2 = $1;
 $expanded2 = 17304;
 $gep_int = 17304;
 $gep = (($gep_int) + 8)|0;
 $expanded1 = $gep;
 $expanded = $expanded1;
 HEAP32[$1>>2] = $expanded;
 $expanded3 = 17360;
 $expanded4 = 127;
 ___cxa_throw($1|0,$expanded3|0,$expanded4|0);
 // unreachable
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$in$phi = 0, $$k$0$i = 0, $$lcssa43$i = 0;
 var $$lnz$0$i = 0, $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $225$phi = 0, $226 = 0, $226$phi = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0;
 var $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0.0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $481$phi = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0.0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0;
 var $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0.0, $662 = 0.0;
 var $663 = 0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0;
 var $681 = 0.0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0, $691 = 0, $692 = 0.0, $693 = 0, $694 = 0.0, $695 = 0.0, $696 = 0.0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0, $703 = 0, $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0.0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0.0;
 var $717 = 0, $718 = 0, $719 = 0.0, $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0.0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0;
 var $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$427$i$phi = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0;
 var $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry$063$i$phi = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $carry3$030$i$phi = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0;
 var $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $expanded = 0, $expanded1 = 0, $expanded2 = 0, $expanded3 = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gep = 0, $gep101 = 0, $gep104 = 0, $gep107 = 0;
 var $gep11 = 0, $gep110 = 0, $gep113 = 0, $gep116 = 0, $gep119 = 0, $gep122 = 0, $gep125 = 0, $gep128 = 0, $gep13 = 0, $gep131 = 0, $gep134 = 0, $gep137 = 0, $gep140 = 0, $gep15 = 0, $gep17 = 0, $gep19 = 0, $gep21 = 0, $gep23 = 0, $gep25 = 0, $gep27 = 0;
 var $gep29 = 0, $gep31 = 0, $gep33 = 0, $gep35 = 0, $gep37 = 0, $gep39 = 0, $gep41 = 0, $gep43 = 0, $gep45 = 0, $gep47 = 0, $gep49 = 0, $gep5 = 0, $gep51 = 0, $gep53 = 0, $gep55 = 0, $gep57 = 0, $gep59 = 0, $gep61 = 0, $gep63 = 0, $gep66 = 0;
 var $gep68 = 0, $gep7 = 0, $gep70 = 0, $gep72 = 0, $gep74 = 0, $gep77 = 0, $gep80 = 0, $gep83 = 0, $gep86 = 0, $gep89 = 0, $gep9 = 0, $gep92 = 0, $gep95 = 0, $gep98 = 0, $gep_array = 0, $gep_array100 = 0, $gep_array103 = 0, $gep_array106 = 0, $gep_array109 = 0, $gep_array112 = 0;
 var $gep_array115 = 0, $gep_array118 = 0, $gep_array121 = 0, $gep_array124 = 0, $gep_array127 = 0, $gep_array130 = 0, $gep_array133 = 0, $gep_array136 = 0, $gep_array139 = 0, $gep_array76 = 0, $gep_array79 = 0, $gep_array82 = 0, $gep_array85 = 0, $gep_array88 = 0, $gep_array91 = 0, $gep_array94 = 0, $gep_array97 = 0, $gep_int = 0, $gep_int10 = 0, $gep_int102 = 0;
 var $gep_int105 = 0, $gep_int108 = 0, $gep_int111 = 0, $gep_int114 = 0, $gep_int117 = 0, $gep_int12 = 0, $gep_int120 = 0, $gep_int123 = 0, $gep_int126 = 0, $gep_int129 = 0, $gep_int132 = 0, $gep_int135 = 0, $gep_int138 = 0, $gep_int14 = 0, $gep_int16 = 0, $gep_int18 = 0, $gep_int20 = 0, $gep_int22 = 0, $gep_int24 = 0, $gep_int26 = 0;
 var $gep_int28 = 0, $gep_int30 = 0, $gep_int32 = 0, $gep_int34 = 0, $gep_int36 = 0, $gep_int38 = 0, $gep_int4 = 0, $gep_int40 = 0, $gep_int42 = 0, $gep_int44 = 0, $gep_int46 = 0, $gep_int48 = 0, $gep_int50 = 0, $gep_int52 = 0, $gep_int54 = 0, $gep_int56 = 0, $gep_int58 = 0, $gep_int6 = 0, $gep_int60 = 0, $gep_int62 = 0;
 var $gep_int64 = 0, $gep_int65 = 0, $gep_int67 = 0, $gep_int69 = 0, $gep_int71 = 0, $gep_int73 = 0, $gep_int75 = 0, $gep_int78 = 0, $gep_int8 = 0, $gep_int81 = 0, $gep_int84 = 0, $gep_int87 = 0, $gep_int90 = 0, $gep_int93 = 0, $gep_int96 = 0, $gep_int99 = 0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0;
 var $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$166$phi = 0;
 var $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $j$371$i$phi = 0, $k$0$lcssa$i = 0, $k$084$i = 0, $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$462$i$phi = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0;
 var $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $k$628$i$phi = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0;
 var $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0, $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$426$i$phi = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0;
 var $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$313$i$phi = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0;
 var $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$phi = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 var u$264 = 0, u$265 = 0, u$275 = 0, u$276 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 
 if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 2)) {
  
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.000000e+00;
  
  STACKTOP = sp;return +$$0;
 }
 
 
 $gep_int = $f;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $gep_int4 = $f;
 $gep5 = (($gep_int4) + 100)|0;
 $2 = $gep5;
 
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  
  if ($5) {
   $gep_int6 = $3;
   $gep7 = (($gep_int6) + 1)|0;
   $6 = $gep7;
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3]|0;
   $8 = $7&255;
   
   $10 = $8;
  } else {
   $9 = ___shgetc($f)|0;
   
   $10 = $9;
  }
  
  $11 = _isspace($10|0)|0;
  $12 = ($11|0)==(0);
  
  if ($12) {
   break;
  }
 }
 $13 = ($10|0)==(45);
 
 do {
  if ((($10|0) == 43) | (($10|0) == 45)) {
   $14 = $13&1;
   $15 = $14 << 1;
   $16 = (1 - ($15))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = HEAP32[$2>>2]|0;
   $19 = ($17>>>0)<($18>>>0);
   
   if ($19) {
    $gep_int8 = $17;
    $gep9 = (($gep_int8) + 1)|0;
    $20 = $gep9;
    HEAP32[$1>>2] = $20;
    $21 = HEAP8[$17]|0;
    $22 = $21&255;
    
    $c$0 = $22;$sign$0 = $16;
    break;
   } else {
    $23 = ___shgetc($f)|0;
    
    $c$0 = $23;$sign$0 = $16;
    break;
   }
  } else {
   $c$0 = $10;$sign$0 = 1;
  }
 } while(0);
 
 
 
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  
  
  $24 = $c$169 | 32;
  $gep_int10 = 17376;
  $gep11 = (($gep_int10) + ($i$068))|0;
  $25 = $gep11;
  $26 = HEAP8[$25]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($24|0)==($27|0);
  
  if (!($28)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $29 = ($i$068>>>0)<(7);
  
  do {
   if ($29) {
    $30 = HEAP32[$1>>2]|0;
    $31 = HEAP32[$2>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    
    if ($32) {
     $gep_int12 = $30;
     $gep13 = (($gep_int12) + 1)|0;
     $33 = $gep13;
     HEAP32[$1>>2] = $33;
     $34 = HEAP8[$30]|0;
     $35 = $34&255;
     
     $c$2 = $35;
     break;
    } else {
     $36 = ___shgetc($f)|0;
     
     $c$2 = $36;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  
  $37 = (($i$068) + 1)|0;
  $38 = ($37>>>0)<(8);
  
  if ($38) {
   $c$169 = $c$2;$i$068 = $37;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $37;
   break;
  }
 }
 
 
 
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $39 = ($i$0$lcssa>>>0)<(4);
   $40 = ($pok|0)==(0);
   $or$cond = $39 | $40;
   
   if (!($or$cond)) {
    $41 = ($i$0$lcssa|0)==(8);
    
    if ($41) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $53 = ($i$0$lcssa|0)==(0);
   
   L34: do {
    if ($53) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      
      
      $54 = $c$364 | 32;
      $gep_int18 = 17392;
      $gep19 = (($gep_int18) + ($i$263))|0;
      $55 = $gep19;
      $56 = HEAP8[$55]|0;
      $57 = $56 << 24 >> 24;
      $58 = ($54|0)==($57|0);
      
      if (!($58)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $59 = ($i$263>>>0)<(2);
      
      do {
       if ($59) {
        $60 = HEAP32[$1>>2]|0;
        $61 = HEAP32[$2>>2]|0;
        $62 = ($60>>>0)<($61>>>0);
        
        if ($62) {
         $gep_int20 = $60;
         $gep21 = (($gep_int20) + 1)|0;
         $63 = $gep21;
         HEAP32[$1>>2] = $63;
         $64 = HEAP8[$60]|0;
         $65 = $64&255;
         
         $c$4 = $65;
         break;
        } else {
         $66 = ___shgetc($f)|0;
         
         $c$4 = $66;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      
      $67 = (($i$263) + 1)|0;
      $68 = ($67>>>0)<(3);
      
      if ($68) {
       $c$364 = $c$4;$i$263 = $67;
      } else {
       $c$5 = $c$4;$i$3 = $67;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   
   
   
   if ((($i$3|0) == 0)) {
    $114 = ($c$5|0)==(48);
    
    do {
     if ($114) {
      $115 = HEAP32[$1>>2]|0;
      $116 = HEAP32[$2>>2]|0;
      $117 = ($115>>>0)<($116>>>0);
      
      if ($117) {
       $gep_int34 = $115;
       $gep35 = (($gep_int34) + 1)|0;
       $118 = $gep35;
       HEAP32[$1>>2] = $118;
       $119 = HEAP8[$115]|0;
       $120 = $119&255;
       
       $122 = $120;
      } else {
       $121 = ___shgetc($f)|0;
       
       $122 = $121;
      }
      
      $123 = $122 | 32;
      $124 = ($123|0)==(120);
      
      if (!($124)) {
       $326 = HEAP32[$2>>2]|0;
       $327 = ($326|0)==(0);
       
       if ($327) {
        $c$6 = 48;
        break;
       }
       $328 = HEAP32[$1>>2]|0;
       $gep_int56 = $328;
       $gep57 = (($gep_int56) + -1)|0;
       $329 = $gep57;
       HEAP32[$1>>2] = $329;
       
       $c$6 = 48;
       break;
      }
      $125 = HEAP32[$1>>2]|0;
      $126 = HEAP32[$2>>2]|0;
      $127 = ($125>>>0)<($126>>>0);
      
      if ($127) {
       $gep_int36 = $125;
       $gep37 = (($gep_int36) + 1)|0;
       $128 = $gep37;
       HEAP32[$1>>2] = $128;
       $129 = HEAP8[$125]|0;
       $130 = $129&255;
       
       $c$0$i = $130;$gotdig$0$i = 0;
      } else {
       $131 = ___shgetc($f)|0;
       
       $c$0$i = $131;$gotdig$0$i = 0;
      }
      while(1) {
       
       
       
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $160 = 0;$161 = 0;$162 = 0;$163 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.000000e+00;$x$0$i = 0;$y$0$i = 0.000000e+00;
        break;
       }
       $132 = HEAP32[$1>>2]|0;
       $133 = HEAP32[$2>>2]|0;
       $134 = ($132>>>0)<($133>>>0);
       
       if ($134) {
        $gep_int38 = $132;
        $gep39 = (($gep_int38) + 1)|0;
        $135 = $gep39;
        HEAP32[$1>>2] = $135;
        $136 = HEAP8[$132]|0;
        $137 = $136&255;
        
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       } else {
        $138 = ___shgetc($f)|0;
        
        $c$0$i = $138;$gotdig$0$i = 1;
        continue;
       }
      }
      L66: do {
       if ((label|0) == 70) {
        $139 = HEAP32[$1>>2]|0;
        $140 = HEAP32[$2>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        
        if ($141) {
         $gep_int40 = $139;
         $gep41 = (($gep_int40) + 1)|0;
         $142 = $gep41;
         HEAP32[$1>>2] = $142;
         $143 = HEAP8[$139]|0;
         $144 = $143&255;
         
         $c$1$ph$i = $144;
        } else {
         $145 = ___shgetc($f)|0;
         
         $c$1$ph$i = $145;
        }
        
        $146 = ($c$1$ph$i|0)==(48);
        
        if ($146) {
         $147 = -1;$148 = -1;
        } else {
         $160 = 0;$161 = 0;$162 = 0;$163 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.000000e+00;$x$0$i = 0;$y$0$i = 0.000000e+00;
         break;
        }
        while(1) {
         
         
         $149 = HEAP32[$1>>2]|0;
         $150 = HEAP32[$2>>2]|0;
         $151 = ($149>>>0)<($150>>>0);
         
         if ($151) {
          $gep_int42 = $149;
          $gep43 = (($gep_int42) + 1)|0;
          $152 = $gep43;
          HEAP32[$1>>2] = $152;
          $153 = HEAP8[$149]|0;
          $154 = $153&255;
          
          $156 = $154;
         } else {
          $155 = ___shgetc($f)|0;
          
          $156 = $155;
         }
         
         $157 = ($156|0)==(48);
         
         if (!($157)) {
          $160 = $147;$161 = $148;$162 = 0;$163 = 0;$c$2$i = $156;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.000000e+00;$x$0$i = 0;$y$0$i = 0.000000e+00;
          break L66;
         }
         $158 = _i64Add($147|0,$148|0,-1,-1)|0;
         $159 = tempRet0;
         
         $147 = $158;$148 = $159;
        }
       }
      } while(0);
      L79: while(1) {
       
       
       
       
       
       
       
       
       
       
       
       $164 = (($c$2$i) + -48)|0;
       $165 = ($164>>>0)<(10);
       
       do {
        if ($165) {
         $d$0$i = $164;
         label = 84;
        } else {
         $166 = $c$2$i | 32;
         $167 = (($166) + -97)|0;
         $168 = ($167>>>0)<(6);
         $169 = ($c$2$i|0)==(46);
         $or$cond$i = $168 | $169;
         
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L79;
         }
         
         if ($169) {
          $170 = ($gotrad$0$i|0)==(0);
          
          if ($170) {
           $195 = $162;$196 = $163;$197 = $162;$198 = $163;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L79;
          }
         } else {
          $171 = ($c$2$i|0)>(57);
          $172 = (($166) + -87)|0;
          $$38$i = $171 ? $172 : $164;
          
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        
        $173 = ($163|0)<(0);
        $174 = ($163|0)==(0);
        $175 = ($162>>>0)<(8);
        $176 = $174 & $175;
        $177 = $173 | $176;
        
        do {
         if ($177) {
          $178 = $x$0$i << 4;
          $179 = (($d$0$i) + ($178))|0;
          
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $179;$y$1$i = $y$0$i;
         } else {
          $180 = ($163|0)<(0);
          $181 = ($163|0)==(0);
          $182 = ($162>>>0)<(14);
          $183 = $181 & $182;
          $184 = $180 | $183;
          
          if ($184) {
           $185 = +($d$0$i|0);
           $186 = $scale$0$i * 6.250000e-02;
           $187 = $186 * $185;
           $188 = $y$0$i + $187;
           
           $gottail$1$i = $gottail$0$i;$scale$1$i = $186;$x$1$i = $x$0$i;$y$1$i = $188;
           break;
          }
          $189 = ($d$0$i|0)!=(0);
          $190 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $189 & $190;
          
          if (!($or$cond3$i)) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
           break;
          }
          $191 = $scale$0$i * 5.000000e-01;
          $192 = $y$0$i + $191;
          
          $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $192;
         }
        } while(0);
        
        
        
        
        $193 = _i64Add($162|0,$163|0,1,0)|0;
        $194 = tempRet0;
        
        $195 = $160;$196 = $161;$197 = $193;$198 = $194;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       
       
       
       
       
       
       
       
       
       
       $199 = HEAP32[$1>>2]|0;
       $200 = HEAP32[$2>>2]|0;
       $201 = ($199>>>0)<($200>>>0);
       
       if ($201) {
        $gep_int44 = $199;
        $gep45 = (($gep_int44) + 1)|0;
        $202 = $gep45;
        HEAP32[$1>>2] = $202;
        $203 = HEAP8[$199]|0;
        $204 = $203&255;
        
        $160 = $195;$161 = $196;$162 = $197;$163 = $198;$c$2$i = $204;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $205 = ___shgetc($f)|0;
        
        $160 = $195;$161 = $196;$162 = $197;$163 = $198;$c$2$i = $205;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      
      $206 = ($gotdig$2$i|0)==(0);
      
      if ($206) {
       $207 = HEAP32[$2>>2]|0;
       $208 = ($207|0)==(0);
       
       if (!($208)) {
        $209 = HEAP32[$1>>2]|0;
        $gep_int46 = $209;
        $gep47 = (($gep_int46) + -1)|0;
        $210 = $gep47;
        HEAP32[$1>>2] = $210;
        
       }
       
       do {
        if ($40) {
         ___shlim($f,0);
         
        } else {
         
         if ($208) {
          break;
         }
         $211 = HEAP32[$1>>2]|0;
         $gep_int48 = $211;
         $gep49 = (($gep_int48) + -1)|0;
         $212 = $gep49;
         HEAP32[$1>>2] = $212;
         $213 = ($gotrad$0$i|0)==(0);
         
         if ($213) {
          break;
         }
         $gep_int50 = $211;
         $gep51 = (($gep_int50) + -2)|0;
         $214 = $gep51;
         HEAP32[$1>>2] = $214;
         
        }
       } while(0);
       $215 = +($sign$0|0);
       $216 = $215 * 0.000000e+00;
       
       $$0 = $216;
       
       STACKTOP = sp;return +$$0;
      }
      $217 = ($gotrad$0$i|0)==(0);
      $218 = $217 ? $162 : $160;
      $219 = $217 ? $163 : $161;
      $220 = ($163|0)<(0);
      $221 = ($163|0)==(0);
      $222 = ($162>>>0)<(8);
      $223 = $221 & $222;
      $224 = $220 | $223;
      
      if ($224) {
       $225 = $162;$226 = $163;$x$313$i = $x$0$i;
       while(1) {
        
        
        
        $227 = $x$313$i << 4;
        $228 = _i64Add($225|0,$226|0,1,0)|0;
        $229 = tempRet0;
        $230 = ($229|0)<(0);
        $231 = ($229|0)==(0);
        $232 = ($228>>>0)<(8);
        $233 = $231 & $232;
        $234 = $230 | $233;
        
        if ($234) {
         $x$313$i$phi = $227;$226$phi = $229;$225$phi = $228;$x$313$i = $x$313$i$phi;$226 = $226$phi;$225 = $225$phi;
        } else {
         $x$3$lcssa$i = $227;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      
      $235 = $c$2$lcssa$i | 32;
      $236 = ($235|0)==(112);
      
      do {
       if ($236) {
        $237 = _scanexp($f,$pok)|0;
        $238 = tempRet0;
        $239 = ($237|0)==(0);
        $240 = ($238|0)==(-2147483648);
        $241 = $239 & $240;
        
        if (!($241)) {
         $250 = $237;$251 = $238;
         break;
        }
        
        if ($40) {
         ___shlim($f,0);
         
         $$0 = 0.000000e+00;
         
         STACKTOP = sp;return +$$0;
        } else {
         $242 = HEAP32[$2>>2]|0;
         $243 = ($242|0)==(0);
         
         if ($243) {
          $250 = 0;$251 = 0;
          break;
         }
         $244 = HEAP32[$1>>2]|0;
         $gep_int52 = $244;
         $gep53 = (($gep_int52) + -1)|0;
         $245 = $gep53;
         HEAP32[$1>>2] = $245;
         
         $250 = 0;$251 = 0;
         break;
        }
       } else {
        $246 = HEAP32[$2>>2]|0;
        $247 = ($246|0)==(0);
        
        if ($247) {
         $250 = 0;$251 = 0;
         break;
        }
        $248 = HEAP32[$1>>2]|0;
        $gep_int54 = $248;
        $gep55 = (($gep_int54) + -1)|0;
        $249 = $gep55;
        HEAP32[$1>>2] = $249;
        
        $250 = 0;$251 = 0;
       }
      } while(0);
      
      
      $252 = _bitshift64Shl($218|0,$219|0,2)|0;
      $253 = tempRet0;
      $254 = _i64Add($252|0,$253|0,-32,-1)|0;
      $255 = tempRet0;
      $256 = _i64Add($254|0,$255|0,$250|0,$251|0)|0;
      $257 = tempRet0;
      $258 = ($x$3$lcssa$i|0)==(0);
      
      if ($258) {
       $259 = +($sign$0|0);
       $260 = $259 * 0.000000e+00;
       
       $$0 = $260;
       
       STACKTOP = sp;return +$$0;
      }
      $261 = (0 - ($emin$0$ph))|0;
      $262 = ($257|0)>(0);
      $263 = ($257|0)==(0);
      $264 = ($256>>>0)>($261>>>0);
      $265 = $263 & $264;
      $266 = $262 | $265;
      
      if ($266) {
       $267 = ___errno_location()|0;
       HEAP32[$267>>2] = 34;
       $268 = +($sign$0|0);
       $269 = $268 * 1.79769313486231570814527423732e+308;
       $270 = $269 * 1.79769313486231570814527423732e+308;
       
       $$0 = $270;
       
       STACKTOP = sp;return +$$0;
      }
      $271 = (($emin$0$ph) + -106)|0;
      $272 = ($271|0)<(0);
      $273 = $272 << 31 >> 31;
      $274 = ($257|0)<($273|0);
      $275 = ($257|0)==($273|0);
      $276 = ($256>>>0)<($271>>>0);
      $277 = $275 & $276;
      $278 = $274 | $277;
      
      if ($278) {
       $280 = ___errno_location()|0;
       HEAP32[$280>>2] = 34;
       $281 = +($sign$0|0);
       $282 = $281 * 1.28822975391942666164540730067e-231;
       $283 = $282 * 1.28822975391942666164540730067e-231;
       
       $$0 = $283;
       
       STACKTOP = sp;return +$$0;
      }
      $279 = ($x$3$lcssa$i|0)>(-1);
      
      if ($279) {
       $284 = $256;$285 = $257;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        
        
        
        
        $286 = !($y$39$i >= 5.000000e-01);
        $287 = $x$48$i << 1;
        
        if ($286) {
         $$pn$i = $y$39$i;$x$5$i = $287;
        } else {
         $288 = $287 | 1;
         $289 = $y$39$i + -1.000000e+00;
         
         $$pn$i = $289;$x$5$i = $288;
        }
        
        
        $y$4$i = $y$39$i + $$pn$i;
        $290 = _i64Add($284|0,$285|0,-1,-1)|0;
        $291 = tempRet0;
        $292 = ($x$5$i|0)>(-1);
        
        if ($292) {
         $284 = $290;$285 = $291;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $293 = $290;$294 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $293 = $256;$294 = $257;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      
      
      
      
      $295 = ($emin$0$ph|0)<(0);
      $296 = $295 << 31 >> 31;
      $297 = _i64Subtract(32,0,$emin$0$ph|0,$296|0)|0;
      $298 = tempRet0;
      $299 = _i64Add($293|0,$294|0,$297|0,$298|0)|0;
      $300 = tempRet0;
      $301 = (0)>($300|0);
      $302 = (0)==($300|0);
      $303 = ($bits$0$ph>>>0)>($299>>>0);
      $304 = $302 & $303;
      $305 = $301 | $304;
      
      if ($305) {
       $306 = ($299|0)<(0);
       $$$i = $306 ? 0 : $299;
       
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      
      $307 = ($$02$i|0)<(53);
      
      do {
       if ($307) {
        $308 = (84 - ($$02$i))|0;
        $309 = +_scalbn(1.000000e+00,$308);
        $310 = +($sign$0|0);
        $311 = +_copysign(+$309,+$310);
        $312 = ($$02$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.000000e+00;
        $or$cond4$i = $312 & $313;
        
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $310;$bias$07$i = $311;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $316 = $314 ^ 1;
        $$x$4$i = (($316) + ($x$4$lcssa$i))|0;
        $$y$3$i = $315 ? 0.000000e+00 : $y$3$lcssa$i;
        
        $$pre$phi$iZ2D = $310;$bias$07$i = $311;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = +($sign$0|0);
        
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.000000e+00;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      
      
      
      
      $317 = +($x$6$i>>>0);
      $318 = $$pre$phi$iZ2D * $317;
      $319 = $bias$07$i + $318;
      $320 = $$pre$phi$iZ2D * $y$5$i;
      $321 = $320 + $319;
      $322 = $321 - $bias$07$i;
      $323 = $322 != 0.000000e+00;
      
      if (!($323)) {
       $324 = ___errno_location()|0;
       HEAP32[$324>>2] = 34;
       
      }
      $325 = +_scalbnl($322,$293);
      
      $$0 = $325;
      
      STACKTOP = sp;return +$$0;
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    
    $330 = $x$i;
    
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $331 = (0 - ($sum$i))|0;
    
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     
     
     
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$359 = 0;$360 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $332 = HEAP32[$1>>2]|0;
     $333 = HEAP32[$2>>2]|0;
     $334 = ($332>>>0)<($333>>>0);
     
     if ($334) {
      $gep_int58 = $332;
      $gep59 = (($gep_int58) + 1)|0;
      $335 = $gep59;
      HEAP32[$1>>2] = $335;
      $336 = HEAP8[$332]|0;
      $337 = $336&255;
      
      $$08$i = $337;$gotdig$0$i9 = 1;
      continue;
     } else {
      $338 = ___shgetc($f)|0;
      
      $$08$i = $338;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L168: do {
     if ((label|0) == 139) {
      $339 = HEAP32[$1>>2]|0;
      $340 = HEAP32[$2>>2]|0;
      $341 = ($339>>>0)<($340>>>0);
      
      if ($341) {
       $gep_int60 = $339;
       $gep61 = (($gep_int60) + 1)|0;
       $342 = $gep61;
       HEAP32[$1>>2] = $342;
       $343 = HEAP8[$339]|0;
       $344 = $343&255;
       
       $$1$ph$i = $344;
      } else {
       $345 = ___shgetc($f)|0;
       
       $$1$ph$i = $345;
      }
      
      $346 = ($$1$ph$i|0)==(48);
      
      if ($346) {
       $347 = -1;$348 = -1;
      } else {
       $$2$i = $$1$ph$i;$359 = 0;$360 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
       break;
      }
      while(1) {
       
       
       $349 = HEAP32[$1>>2]|0;
       $350 = HEAP32[$2>>2]|0;
       $351 = ($349>>>0)<($350>>>0);
       
       if ($351) {
        $gep_int62 = $349;
        $gep63 = (($gep_int62) + 1)|0;
        $352 = $gep63;
        HEAP32[$1>>2] = $352;
        $353 = HEAP8[$349]|0;
        $354 = $353&255;
        
        $$1$be$i = $354;
       } else {
        $355 = ___shgetc($f)|0;
        
        $$1$be$i = $355;
       }
       
       $356 = ($$1$be$i|0)==(48);
       
       if (!($356)) {
        $$2$i = $$1$be$i;$359 = $347;$360 = $348;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
        break L168;
       }
       $357 = _i64Add($347|0,$348|0,-1,-1)|0;
       $358 = tempRet0;
       
       $347 = $357;$348 = $358;
      }
     }
    } while(0);
    
    
    
    
    
    $gep_int64 = $x$i;
    $361 = $gep_int64;
    HEAP32[$361>>2] = 0;
    $362 = (($$2$i) + -48)|0;
    $363 = ($362>>>0)<(10);
    $364 = ($$2$i|0)==(46);
    $or$cond789$i = $363 | $364;
    
    L182: do {
     if ($or$cond789$i) {
      $gep_int65 = $x$i;
      $gep66 = (($gep_int65) + 496)|0;
      $365 = $gep66;
      
      $$397$i = $$2$i;$366 = $364;$367 = $362;$368 = 0;$369 = 0;$370 = $359;$371 = $360;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       
       
       
       
       
       
       
       
       
       
       
       
       
       do {
        if ($366) {
         $cond$i = ($gotrad$194$i|0)==(0);
         
         if ($cond$i) {
          $387 = $368;$388 = $369;$389 = $368;$390 = $369;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$408 = $368;$409 = $369;$410 = $370;$411 = $371;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L182;
         }
        } else {
         $372 = ($k$095$i|0)<(125);
         $373 = _i64Add($368|0,$369|0,1,0)|0;
         $374 = tempRet0;
         $375 = ($$397$i|0)!=(48);
         
         if (!($372)) {
          
          if (!($375)) {
           $387 = $370;$388 = $371;$389 = $373;$390 = $374;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $385 = HEAP32[$365>>2]|0;
          $386 = $385 | 1;
          HEAP32[$365>>2] = $386;
          
          $387 = $370;$388 = $371;$389 = $373;$390 = $374;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $375 ? $373 : $lnz$092$i;
         $376 = ($j$096$i|0)==(0);
         $gep_int67 = $x$i;
         $gep_array = $k$095$i<<2;
         $gep68 = (($gep_int67) + ($gep_array))|0;
         $377 = $gep68;
         
         if ($376) {
          $storemerge$i = $367;
         } else {
          $378 = HEAP32[$377>>2]|0;
          $379 = ($378*10)|0;
          $380 = (($$397$i) + -48)|0;
          $381 = (($380) + ($379))|0;
          
          $storemerge$i = $381;
         }
         
         HEAP32[$377>>2] = $storemerge$i;
         $382 = (($j$096$i) + 1)|0;
         $383 = ($382|0)==(9);
         $384 = $383&1;
         $$k$0$i = (($384) + ($k$095$i))|0;
         $$10$i = $383 ? 0 : $382;
         
         $387 = $370;$388 = $371;$389 = $373;$390 = $374;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       
       
       
       
       
       
       
       
       
       $391 = HEAP32[$1>>2]|0;
       $392 = HEAP32[$2>>2]|0;
       $393 = ($391>>>0)<($392>>>0);
       
       if ($393) {
        $gep_int69 = $391;
        $gep70 = (($gep_int69) + 1)|0;
        $394 = $gep70;
        HEAP32[$1>>2] = $394;
        $395 = HEAP8[$391]|0;
        $396 = $395&255;
        
        $$3$be$i = $396;
       } else {
        $397 = ___shgetc($f)|0;
        
        $$3$be$i = $397;
       }
       
       $398 = (($$3$be$i) + -48)|0;
       $399 = ($398>>>0)<(10);
       $400 = ($$3$be$i|0)==(46);
       $or$cond7$i = $399 | $400;
       
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$366 = $400;$367 = $398;$368 = $389;$369 = $390;$370 = $387;$371 = $388;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$401 = $389;$402 = $390;$403 = $387;$404 = $388;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$401 = 0;$402 = 0;$403 = $359;$404 = $360;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     
     
     
     
     
     
     
     
     
     
     $405 = ($gotrad$1$lcssa$i|0)==(0);
     $406 = $405 ? $401 : $403;
     $407 = $405 ? $402 : $404;
     
     $$388$i = $$3$lcssa$i;$408 = $401;$409 = $402;$410 = $406;$411 = $407;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    
    
    
    
    
    
    
    
    
    $412 = ($gotdig$381$i|0)!=(0);
    
    do {
     if ($412) {
      $413 = $$388$i | 32;
      $414 = ($413|0)==(101);
      
      if (!($414)) {
       label = 171;
       break;
      }
      $415 = _scanexp($f,$pok)|0;
      $416 = tempRet0;
      $417 = ($415|0)==(0);
      $418 = ($416|0)==(-2147483648);
      $419 = $417 & $418;
      
      do {
       if ($419) {
        
        if ($40) {
         ___shlim($f,0);
         
         $$0 = 0.000000e+00;
         
         STACKTOP = sp;return +$$0;
        } else {
         $420 = HEAP32[$2>>2]|0;
         $421 = ($420|0)==(0);
         
         if ($421) {
          $424 = 0;$425 = 0;
          break;
         }
         $422 = HEAP32[$1>>2]|0;
         $gep_int71 = $422;
         $gep72 = (($gep_int71) + -1)|0;
         $423 = $gep72;
         HEAP32[$1>>2] = $423;
         
         $424 = 0;$425 = 0;
         break;
        }
       } else {
        $424 = $415;$425 = $416;
       }
      } while(0);
      
      
      $426 = _i64Add($424|0,$425|0,$410|0,$411|0)|0;
      $427 = tempRet0;
      
      $433 = $426;$434 = $427;
     } else {
      label = 171;
     }
    } while(0);
    do {
     if ((label|0) == 171) {
      $428 = ($$388$i|0)>(-1);
      
      if (!($428)) {
       $433 = $410;$434 = $411;
       break;
      }
      $429 = HEAP32[$2>>2]|0;
      $430 = ($429|0)==(0);
      
      if ($430) {
       $433 = $410;$434 = $411;
       break;
      }
      $431 = HEAP32[$1>>2]|0;
      $gep_int73 = $431;
      $gep74 = (($gep_int73) + -1)|0;
      $432 = $gep74;
      HEAP32[$1>>2] = $432;
      
      $433 = $410;$434 = $411;
     }
    } while(0);
    
    
    
    if (!($412)) {
     $435 = ___errno_location()|0;
     HEAP32[$435>>2] = 22;
     ___shlim($f,0);
     
     $$0 = 0.000000e+00;
     
     STACKTOP = sp;return +$$0;
    }
    $436 = HEAP32[$361>>2]|0;
    $437 = ($436|0)==(0);
    
    if ($437) {
     $438 = +($sign$0|0);
     $439 = $438 * 0.000000e+00;
     
     $$0 = $439;
     
     STACKTOP = sp;return +$$0;
    }
    $440 = ($433|0)==($408|0);
    $441 = ($434|0)==($409|0);
    $442 = $440 & $441;
    $443 = ($409|0)<(0);
    $444 = ($409|0)==(0);
    $445 = ($408>>>0)<(10);
    $446 = $444 & $445;
    $447 = $443 | $446;
    $or$cond$i15 = $442 & $447;
    
    do {
     if ($or$cond$i15) {
      $448 = ($bits$0$ph>>>0)>(30);
      
      if (!($448)) {
       $449 = $436 >>> $bits$0$ph;
       $450 = ($449|0)==(0);
       
       if (!($450)) {
        break;
       }
      }
      $451 = +($sign$0|0);
      $452 = +($436>>>0);
      $453 = $451 * $452;
      
      $$0 = $453;
      
      STACKTOP = sp;return +$$0;
     }
    } while(0);
    $454 = (($emin$0$ph|0) / -2)&-1;
    $455 = ($454|0)<(0);
    $456 = $455 << 31 >> 31;
    $457 = ($434|0)>($456|0);
    $458 = ($434|0)==($456|0);
    $459 = ($433>>>0)>($454>>>0);
    $460 = $458 & $459;
    $461 = $457 | $460;
    
    if ($461) {
     $462 = ___errno_location()|0;
     HEAP32[$462>>2] = 34;
     $463 = +($sign$0|0);
     $464 = $463 * 1.79769313486231570814527423732e+308;
     $465 = $464 * 1.79769313486231570814527423732e+308;
     
     $$0 = $465;
     
     STACKTOP = sp;return +$$0;
    }
    $466 = (($emin$0$ph) + -106)|0;
    $467 = ($466|0)<(0);
    $468 = $467 << 31 >> 31;
    $469 = ($434|0)<($468|0);
    $470 = ($434|0)==($468|0);
    $471 = ($433>>>0)<($466>>>0);
    $472 = $470 & $471;
    $473 = $469 | $472;
    
    if ($473) {
     $474 = ___errno_location()|0;
     HEAP32[$474>>2] = 34;
     $475 = +($sign$0|0);
     $476 = $475 * 1.28822975391942666164540730067e-231;
     $477 = $476 * 1.28822975391942666164540730067e-231;
     
     $$0 = $477;
     
     STACKTOP = sp;return +$$0;
    }
    $478 = ($j$086$i|0)==(0);
    
    if ($478) {
     $k$3$i = $k$084$i;
    } else {
     $479 = ($j$086$i|0)<(9);
     
     if ($479) {
      $gep_int75 = $x$i;
      $gep_array76 = $k$084$i<<2;
      $gep77 = (($gep_int75) + ($gep_array76))|0;
      $480 = $gep77;
      $$promoted$i = HEAP32[$480>>2]|0;
      
      $481 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       
       
       $482 = ($481*10)|0;
       $483 = (($j$371$i) + 1)|0;
       $484 = ($483|0)<(9);
       
       if ($484) {
        $j$371$i$phi = $483;$481$phi = $482;$j$371$i = $j$371$i$phi;$481 = $481$phi;
       } else {
        break;
       }
      }
      HEAP32[$480>>2] = $482;
      
     }
     $485 = (($k$084$i) + 1)|0;
     
     $k$3$i = $485;
    }
    
    $486 = ($lnz$079$i|0)<(9);
    
    do {
     if ($486) {
      $487 = ($lnz$079$i|0)<=($433|0);
      $488 = ($433|0)<(18);
      $or$cond3$i16 = $487 & $488;
      
      if (!($or$cond3$i16)) {
       break;
      }
      $489 = ($433|0)==(9);
      
      if ($489) {
       $490 = +($sign$0|0);
       $491 = HEAP32[$361>>2]|0;
       $492 = +($491>>>0);
       $493 = $490 * $492;
       
       $$0 = $493;
       
       STACKTOP = sp;return +$$0;
      }
      $494 = ($433|0)<(9);
      
      if ($494) {
       $495 = +($sign$0|0);
       $496 = HEAP32[$361>>2]|0;
       $497 = +($496>>>0);
       $498 = $495 * $497;
       $499 = (8 - ($433))|0;
       $expanded = 17408;
       $gep_int78 = 17408;
       $gep_array79 = $499<<2;
       $gep80 = (($gep_int78) + ($gep_array79))|0;
       $500 = $gep80;
       $501 = HEAP32[$500>>2]|0;
       $502 = +($501|0);
       $503 = $498 / $502;
       
       $$0 = $503;
       
       STACKTOP = sp;return +$$0;
      }
      $504 = Math_imul($433, -3)|0;
      $$neg20$i = (($bits$0$ph) + 27)|0;
      $505 = (($$neg20$i) + ($504))|0;
      $506 = ($505|0)>(30);
      $$pre$i17 = HEAP32[$361>>2]|0;
      
      if (!($506)) {
       $507 = $$pre$i17 >>> $505;
       $508 = ($507|0)==(0);
       
       if (!($508)) {
        break;
       }
      }
      $509 = +($sign$0|0);
      $510 = +($$pre$i17>>>0);
      $511 = $509 * $510;
      $512 = (($433) + -10)|0;
      $expanded1 = 17408;
      $gep_int81 = 17408;
      $gep_array82 = $512<<2;
      $gep83 = (($gep_int81) + ($gep_array82))|0;
      $513 = $gep83;
      $514 = HEAP32[$513>>2]|0;
      $515 = +($514|0);
      $516 = $511 * $515;
      
      $$0 = $516;
      
      STACKTOP = sp;return +$$0;
     }
    } while(0);
    $517 = (($433|0) % 9)&-1;
    $518 = ($517|0)==(0);
    
    if ($518) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $433;$z$1$ph39$i = $k$3$i;
    } else {
     $519 = ($433|0)>(-1);
     $520 = (($517) + 9)|0;
     $521 = $519 ? $517 : $520;
     $522 = (8 - ($521))|0;
     $expanded2 = 17408;
     $gep_int84 = 17408;
     $gep_array85 = $522<<2;
     $gep86 = (($gep_int84) + ($gep_array85))|0;
     $523 = $gep86;
     $524 = HEAP32[$523>>2]|0;
     $525 = ($k$3$i|0)==(0);
     
     do {
      if ($525) {
       $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $433;$z$0$i = 0;
      } else {
       $526 = (1000000000 / ($524|0))&-1;
       
       $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $433;
       while(1) {
        
        
        
        
        $gep_int87 = $x$i;
        $gep_array88 = $k$462$i<<2;
        $gep89 = (($gep_int87) + ($gep_array88))|0;
        $527 = $gep89;
        $528 = HEAP32[$527>>2]|0;
        $529 = (($528>>>0) % ($524>>>0))&-1;
        $530 = (($528>>>0) / ($524>>>0))&-1;
        $531 = (($530) + ($carry$063$i))|0;
        HEAP32[$527>>2] = $531;
        $532 = Math_imul($529, $526)|0;
        $533 = ($k$462$i|0)==($a$061$i|0);
        $534 = ($531|0)==(0);
        $or$cond11$i = $533 & $534;
        $535 = (($k$462$i) + 1)|0;
        
        if ($or$cond11$i) {
         $536 = $535 & 127;
         $537 = (($rp$060$i) + -9)|0;
         
         $a$1$i = $536;$rp$1$i18 = $537;
        } else {
         $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
        }
        
        
        $538 = ($535|0)==($k$3$i|0);
        
        if ($538) {
         break;
        } else {
         $k$462$i$phi = $535;$carry$063$i$phi = $532;$a$061$i = $a$1$i;$rp$060$i = $rp$1$i18;$k$462$i = $k$462$i$phi;$carry$063$i = $carry$063$i$phi;
        }
       }
       $539 = ($532|0)==(0);
       
       if ($539) {
        $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
        break;
       }
       $540 = (($k$3$i) + 1)|0;
       $gep_int90 = $x$i;
       $gep_array91 = $k$3$i<<2;
       $gep92 = (($gep_int90) + ($gep_array91))|0;
       $541 = $gep92;
       HEAP32[$541>>2] = $532;
       
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $540;
      }
     } while(0);
     
     
     
     $542 = (9 - ($521))|0;
     $543 = (($542) + ($rp$0$lcssa162$i))|0;
     
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $543;$z$1$ph39$i = $z$0$i;
    }
    L280: while(1) {
     
     
     
     
     $544 = ($rp$2$ph38$i|0)<(18);
     $gep_int93 = $x$i;
     $gep_array94 = $a$2$ph40$i<<2;
     $gep95 = (($gep_int93) + ($gep_array94))|0;
     $545 = $gep95;
     
     if ($544) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       
       
       $547 = (($z$1$us$i) + 127)|0;
       
       $carry1$0$us$i = 0;$k$5$in$us$i = $547;$z$2$us$i = $z$1$us$i;
       while(1) {
        
        
        
        $k$5$us$i = $k$5$in$us$i & 127;
        $gep_int96 = $x$i;
        $gep_array97 = $k$5$us$i<<2;
        $gep98 = (($gep_int96) + ($gep_array97))|0;
        $548 = $gep98;
        $549 = HEAP32[$548>>2]|0;
        $550 = _bitshift64Shl($549|0,0,29)|0;
        $551 = tempRet0;
        $552 = _i64Add($550|0,$551|0,$carry1$0$us$i|0,0)|0;
        $553 = tempRet0;
        $554 = ($553>>>0)>(0);
        $555 = ($553|0)==(0);
        $556 = ($552>>>0)>(1000000000);
        $557 = $555 & $556;
        $558 = $554 | $557;
        
        if ($558) {
         $559 = ___udivdi3($552|0,$553|0,1000000000,0)|0;
         u$264 = tempRet0;
         $560 = ___uremdi3($552|0,$553|0,1000000000,0)|0;
         u$265 = tempRet0;
         
         $$sink$off0$us$i = $560;$carry1$1$us$i = $559;
        } else {
         $$sink$off0$us$i = $552;$carry1$1$us$i = 0;
        }
        
        
        HEAP32[$548>>2] = $$sink$off0$us$i;
        $561 = (($z$2$us$i) + 127)|0;
        $562 = $561 & 127;
        $563 = ($k$5$us$i|0)!=($562|0);
        $564 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $563 | $564;
        
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $565 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $565 ? $k$5$us$i : $z$2$us$i;
         
         $z$3$us$i = $k$5$z$2$us$i;
        }
        
        $566 = (($k$5$us$i) + -1)|0;
        
        if ($564) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $566;$z$2$us$i = $z$3$us$i;
        }
       }
       $567 = (($e2$0$us$i) + -29)|0;
       $568 = ($carry1$1$us$i|0)==(0);
       
       if ($568) {
        $e2$0$us$i = $567;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $567;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $546 = ($rp$2$ph38$i|0)==(18);
      
      if ($546) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       
       
       $569 = HEAP32[$545>>2]|0;
       $570 = ($569>>>0)<(9007199);
       
       if (!($570)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L280;
       }
       $571 = (($z$1$us45$i) + 127)|0;
       
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $571;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        
        
        
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $gep_int99 = $x$i;
        $gep_array100 = $k$5$us50$i<<2;
        $gep101 = (($gep_int99) + ($gep_array100))|0;
        $572 = $gep101;
        $573 = HEAP32[$572>>2]|0;
        $574 = _bitshift64Shl($573|0,0,29)|0;
        $575 = tempRet0;
        $576 = _i64Add($574|0,$575|0,$carry1$0$us49$i|0,0)|0;
        $577 = tempRet0;
        $578 = ($577>>>0)>(0);
        $579 = ($577|0)==(0);
        $580 = ($576>>>0)>(1000000000);
        $581 = $579 & $580;
        $582 = $578 | $581;
        
        if ($582) {
         $583 = ___udivdi3($576|0,$577|0,1000000000,0)|0;
         u$275 = tempRet0;
         $584 = ___uremdi3($576|0,$577|0,1000000000,0)|0;
         u$276 = tempRet0;
         
         $$sink$off0$us53$i = $584;$carry1$1$us54$i = $583;
        } else {
         $$sink$off0$us53$i = $576;$carry1$1$us54$i = 0;
        }
        
        
        HEAP32[$572>>2] = $$sink$off0$us53$i;
        $585 = (($z$2$us47$i) + 127)|0;
        $586 = $585 & 127;
        $587 = ($k$5$us50$i|0)!=($586|0);
        $588 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $587 | $588;
        
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $589 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $589 ? $k$5$us50$i : $z$2$us47$i;
         
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        
        $590 = (($k$5$us50$i) + -1)|0;
        
        if ($588) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $590;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $591 = (($e2$0$us44$i) + -29)|0;
       $592 = ($carry1$1$us54$i|0)==(0);
       
       if ($592) {
        $e2$0$us44$i = $591;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $591;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     
     
     
     $593 = (($rp$2$ph38$i) + 9)|0;
     $594 = (($a$2$ph40$i) + 127)|0;
     $595 = $594 & 127;
     $596 = ($595|0)==($z$3$lcssa$lcssa$i|0);
     
     if ($596) {
      $597 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $598 = $597 & 127;
      $gep_int102 = $x$i;
      $gep_array103 = $598<<2;
      $gep104 = (($gep_int102) + ($gep_array103))|0;
      $599 = $gep104;
      $600 = HEAP32[$599>>2]|0;
      $601 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $602 = $601 & 127;
      $gep_int105 = $x$i;
      $gep_array106 = $602<<2;
      $gep107 = (($gep_int105) + ($gep_array106))|0;
      $603 = $gep107;
      $604 = HEAP32[$603>>2]|0;
      $605 = $604 | $600;
      HEAP32[$603>>2] = $605;
      
      $z$4$i = $598;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     
     $gep_int108 = $x$i;
     $gep_array109 = $595<<2;
     $gep110 = (($gep_int108) + ($gep_array109))|0;
     $606 = $gep110;
     HEAP32[$606>>2] = $carry1$1$lcssa$lcssa$i;
     
     $a$2$ph40$i = $595;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $593;$z$1$ph39$i = $z$4$i;
    }
    L311: while(1) {
     
     
     
     
     $641 = (($z$5$ph$i) + 1)|0;
     $642 = $641 & 127;
     $643 = (($z$5$ph$i) + 127)|0;
     $644 = $643 & 127;
     $gep_int123 = $x$i;
     $gep_array124 = $644<<2;
     $gep125 = (($gep_int123) + ($gep_array124))|0;
     $645 = $gep125;
     
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      
      
      
      $646 = ($rp$3$i$ph|0)==(18);
      $647 = ($rp$3$i$ph|0)>(27);
      $$14$i = $647 ? 9 : 1;
      
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       
       
       
       $i$025$i = 0;
       while(1) {
        
        $608 = (($i$025$i) + ($a$3$i))|0;
        $609 = $608 & 127;
        $610 = ($609|0)==($z$5$ph$i|0);
        
        if ($610) {
         $i$1$i = 2;
         break;
        }
        $gep_int111 = $x$i;
        $gep_array112 = $609<<2;
        $gep113 = (($gep_int111) + ($gep_array112))|0;
        $611 = $gep113;
        $612 = HEAP32[$611>>2]|0;
        $expanded3 = 17400;
        $gep_int114 = 17400;
        $gep_array115 = $i$025$i<<2;
        $gep116 = (($gep_int114) + ($gep_array115))|0;
        $613 = $gep116;
        $614 = HEAP32[$613>>2]|0;
        $615 = ($612>>>0)<($614>>>0);
        
        if ($615) {
         $i$1$i = 2;
         break;
        }
        $616 = ($612>>>0)>($614>>>0);
        $617 = (($i$025$i) + 1)|0;
        
        if ($616) {
         $i$1$i = $i$025$i;
         break;
        }
        $607 = ($617|0)<(2);
        
        if ($607) {
         $i$025$i = $617;
        } else {
         $i$1$i = $617;
         break;
        }
       }
       
       $618 = ($i$1$i|0)==(2);
       $or$cond13$i = $618 & $646;
       
       if ($or$cond13$i) {
        break L311;
       }
       $621 = (($$14$i) + ($e2$1$i))|0;
       $622 = ($a$3$i|0)==($z$5$ph$i|0);
       
       if ($622) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $621;
       } else {
        break;
       }
      }
      $623 = 1 << $$14$i;
      $624 = (($623) + -1)|0;
      $625 = 1000000000 >>> $$14$i;
      
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       
       
       
       
       $gep_int117 = $x$i;
       $gep_array118 = $k$628$i<<2;
       $gep119 = (($gep_int117) + ($gep_array118))|0;
       $626 = $gep119;
       $627 = HEAP32[$626>>2]|0;
       $628 = $627 & $624;
       $629 = $627 >>> $$14$i;
       $630 = (($629) + ($carry3$030$i))|0;
       HEAP32[$626>>2] = $630;
       $631 = Math_imul($628, $625)|0;
       $632 = ($k$628$i|0)==($a$427$i|0);
       $633 = ($630|0)==(0);
       $or$cond15$i = $632 & $633;
       $634 = (($k$628$i) + 1)|0;
       $635 = $634 & 127;
       $636 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $636 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $635 : $a$427$i;
       $637 = ($635|0)==($z$5$ph$i|0);
       
       if ($637) {
        break;
       } else {
        $rp$426$i$phi = $rp$5$i;$k$628$i$phi = $635;$carry3$030$i$phi = $631;$a$427$i$phi = $a$5$i;$rp$426$i = $rp$426$i$phi;$k$628$i = $k$628$i$phi;$carry3$030$i = $carry3$030$i$phi;$a$427$i = $a$427$i$phi;
       }
      }
      $638 = ($631|0)==(0);
      
      if ($638) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $621;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $639 = ($642|0)==($a$5$i|0);
      
      if (!($639)) {
       break;
      }
      $648 = HEAP32[$645>>2]|0;
      $649 = $648 | 1;
      HEAP32[$645>>2] = $649;
      
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $621;$rp$3$i$ph = $rp$5$i;
     }
     $gep_int120 = $x$i;
     $gep_array121 = $z$5$ph$i<<2;
     $gep122 = (($gep_int120) + ($gep_array121))|0;
     $640 = $gep122;
     HEAP32[$640>>2] = $631;
     
     $z$5$ph$i$phi = $642;$a$3$ph$i = $a$5$i;$e2$1$ph$i = $621;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $z$5$ph$i$phi;
    }
    $619 = $a$3$i & 127;
    $620 = ($619|0)==($z$5$ph$i|0);
    
    if ($620) {
     $650 = (($642) + -1)|0;
     $gep_int126 = $x$i;
     $gep_array127 = $650<<2;
     $gep128 = (($gep_int126) + ($gep_array127))|0;
     $651 = $gep128;
     HEAP32[$651>>2] = 0;
     
     $z$7$i = $642;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    
    $gep_int129 = $x$i;
    $gep_array130 = $619<<2;
    $gep131 = (($gep_int129) + ($gep_array130))|0;
    $652 = $gep131;
    $653 = HEAP32[$652>>2]|0;
    $654 = +($653>>>0);
    $655 = (($a$3$i) + 1)|0;
    $656 = $655 & 127;
    $657 = ($656|0)==($z$7$i|0);
    
    if ($657) {
     $712 = (($z$7$i) + 1)|0;
     $713 = $712 & 127;
     $714 = (($713) + -1)|0;
     $gep_int135 = $x$i;
     $gep_array136 = $714<<2;
     $gep137 = (($gep_int135) + ($gep_array136))|0;
     $715 = $gep137;
     HEAP32[$715>>2] = 0;
     
     $z$7$1$i = $713;
    } else {
     $z$7$1$i = $z$7$i;
    }
    
    $716 = $654 * 1.000000e+09;
    $gep_int138 = $x$i;
    $gep_array139 = $656<<2;
    $gep140 = (($gep_int138) + ($gep_array139))|0;
    $717 = $gep140;
    $718 = HEAP32[$717>>2]|0;
    $719 = +($718>>>0);
    $720 = $716 + $719;
    $721 = +($sign$0|0);
    $722 = $721 * $720;
    $723 = (($e2$1$i) + 53)|0;
    $724 = (($723) - ($emin$0$ph))|0;
    $725 = ($724|0)<($bits$0$ph|0);
    
    if ($725) {
     $658 = ($724|0)<(0);
     $$$i22 = $658 ? 0 : $724;
     
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    
    
    $659 = ($$09$i|0)<(53);
    
    if ($659) {
     $660 = (105 - ($$09$i))|0;
     $661 = +_scalbn(1.000000e+00,$660);
     $662 = +_copysign(+$661,+$722);
     $663 = (53 - ($$09$i))|0;
     $664 = +_scalbn(1.000000e+00,$663);
     $665 = +_fmod(+$722,+$664);
     $666 = $722 - $665;
     $667 = $662 + $666;
     
     $bias$0$i = $662;$frac$0$i = $665;$y$1$i23 = $667;
    } else {
     $bias$0$i = 0.000000e+00;$frac$0$i = 0.000000e+00;$y$1$i23 = $722;
    }
    
    
    
    $668 = (($a$3$i) + 2)|0;
    $669 = $668 & 127;
    $670 = ($669|0)==($z$7$1$i|0);
    
    do {
     if ($670) {
      $frac$2$i = $frac$0$i;
     } else {
      $gep_int132 = $x$i;
      $gep_array133 = $669<<2;
      $gep134 = (($gep_int132) + ($gep_array133))|0;
      $671 = $gep134;
      $672 = HEAP32[$671>>2]|0;
      $673 = ($672>>>0)<(500000000);
      
      do {
       if ($673) {
        $674 = ($672|0)==(0);
        
        if ($674) {
         $675 = (($a$3$i) + 3)|0;
         $676 = $675 & 127;
         $677 = ($676|0)==($z$7$1$i|0);
         
         if ($677) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $678 = $721 * 2.500000e-01;
        $679 = $678 + $frac$0$i;
        
        $frac$1$i = $679;
       } else {
        $680 = ($672>>>0)>(500000000);
        
        if ($680) {
         $681 = $721 * 7.500000e-01;
         $682 = $681 + $frac$0$i;
         
         $frac$1$i = $682;
         break;
        }
        $683 = (($a$3$i) + 3)|0;
        $684 = $683 & 127;
        $685 = ($684|0)==($z$7$1$i|0);
        
        if ($685) {
         $686 = $721 * 5.000000e-01;
         $687 = $686 + $frac$0$i;
         
         $frac$1$i = $687;
         break;
        } else {
         $688 = $721 * 7.500000e-01;
         $689 = $688 + $frac$0$i;
         
         $frac$1$i = $689;
         break;
        }
       }
      } while(0);
      
      $690 = (53 - ($$09$i))|0;
      $691 = ($690|0)>(1);
      
      if (!($691)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $692 = +_fmod(+$frac$1$i,1.000000e+00);
      $693 = $692 != 0.000000e+00;
      
      if ($693) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $694 = $frac$1$i + 1.000000e+00;
      
      $frac$2$i = $694;
     }
    } while(0);
    
    $695 = $y$1$i23 + $frac$2$i;
    $696 = $695 - $bias$0$i;
    $697 = $723 & 2147483647;
    $698 = (-2 - ($sum$i))|0;
    $699 = ($697|0)>($698|0);
    
    do {
     if ($699) {
      $700 = +Math_abs(+$696);
      $701 = !($700 >= 9007199254740992.0);
      
      if ($701) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $696;
      } else {
       $702 = ($denormal$0$i|0)!=(0);
       $703 = ($$09$i|0)==($724|0);
       $or$cond16$i = $702 & $703;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $704 = $696 * 5.000000e-01;
       $705 = (($e2$1$i) + 1)|0;
       
       $denormal$2$i = $denormal$1$i;$e2$2$i = $705;$y$2$i24 = $704;
      }
      
      
      
      $706 = (($e2$2$i) + 50)|0;
      $707 = ($706|0)>($331|0);
      
      if (!($707)) {
       $708 = ($denormal$2$i|0)!=(0);
       $709 = $frac$2$i != 0.000000e+00;
       $or$cond17$i = $708 & $709;
       
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $710 = ___errno_location()|0;
      HEAP32[$710>>2] = 34;
      
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $696;
     }
    } while(0);
    
    
    $711 = +_scalbnl($y$3$i,$e2$3$i);
    
    $$0 = $711;
    
    STACKTOP = sp;return +$$0;
   } else if ((($i$3|0) == 3)) {
    $69 = HEAP32[$1>>2]|0;
    $70 = HEAP32[$2>>2]|0;
    $71 = ($69>>>0)<($70>>>0);
    
    if ($71) {
     $gep_int22 = $69;
     $gep23 = (($gep_int22) + 1)|0;
     $72 = $gep23;
     HEAP32[$1>>2] = $72;
     $73 = HEAP8[$69]|0;
     $74 = $73&255;
     
     $76 = $74;
    } else {
     $75 = ___shgetc($f)|0;
     
     $76 = $75;
    }
    
    $77 = ($76|0)==(40);
    
    if ($77) {
     $i$4 = 1;
    } else {
     $78 = HEAP32[$2>>2]|0;
     $79 = ($78|0)==(0);
     
     if ($79) {
      $$0 = +nan;
      
      STACKTOP = sp;return +$$0;
     }
     $80 = HEAP32[$1>>2]|0;
     $gep_int24 = $80;
     $gep25 = (($gep_int24) + -1)|0;
     $81 = $gep25;
     HEAP32[$1>>2] = $81;
     
     $$0 = +nan;
     
     STACKTOP = sp;return +$$0;
    }
    while(1) {
     
     $82 = HEAP32[$1>>2]|0;
     $83 = HEAP32[$2>>2]|0;
     $84 = ($82>>>0)<($83>>>0);
     
     if ($84) {
      $gep_int26 = $82;
      $gep27 = (($gep_int26) + 1)|0;
      $85 = $gep27;
      HEAP32[$1>>2] = $85;
      $86 = HEAP8[$82]|0;
      $87 = $86&255;
      
      $89 = $87;
     } else {
      $88 = ___shgetc($f)|0;
      
      $89 = $88;
     }
     
     $90 = (($89) + -48)|0;
     $91 = ($90>>>0)<(10);
     $92 = (($89) + -65)|0;
     $93 = ($92>>>0)<(26);
     $or$cond8 = $91 | $93;
     
     if (!($or$cond8)) {
      $94 = (($89) + -97)|0;
      $95 = ($94>>>0)<(26);
      $96 = ($89|0)==(95);
      $or$cond5 = $95 | $96;
      
      if (!($or$cond5)) {
       break;
      }
     }
     $108 = (($i$4) + 1)|0;
     
     $i$4 = $108;
    }
    $97 = ($89|0)==(41);
    
    if ($97) {
     $$0 = +nan;
     
     STACKTOP = sp;return +$$0;
    }
    $98 = HEAP32[$2>>2]|0;
    $99 = ($98|0)==(0);
    
    if (!($99)) {
     $100 = HEAP32[$1>>2]|0;
     $gep_int28 = $100;
     $gep29 = (($gep_int28) + -1)|0;
     $101 = $gep29;
     HEAP32[$1>>2] = $101;
     
    }
    
    if ($40) {
     $103 = ___errno_location()|0;
     HEAP32[$103>>2] = 22;
     ___shlim($f,0);
     
     $$0 = 0.000000e+00;
     
     STACKTOP = sp;return +$$0;
    }
    $102 = ($i$4|0)==(0);
    $brmerge107 = $102 | $99;
    
    if ($brmerge107) {
     $$0 = +nan;
     
     STACKTOP = sp;return +$$0;
    } else {
     $$in = $i$4;
    }
    while(1) {
     
     $104 = (($$in) + -1)|0;
     $105 = HEAP32[$1>>2]|0;
     $gep_int30 = $105;
     $gep31 = (($gep_int30) + -1)|0;
     $106 = $gep31;
     HEAP32[$1>>2] = $106;
     $107 = ($104|0)==(0);
     
     if ($107) {
      $$0 = +nan;
      break;
     } else {
      $$in$phi = $104;$$in = $$in$phi;
     }
    }
    
    STACKTOP = sp;return +$$0;
   } else {
    $109 = HEAP32[$2>>2]|0;
    $110 = ($109|0)==(0);
    
    if (!($110)) {
     $111 = HEAP32[$1>>2]|0;
     $gep_int32 = $111;
     $gep33 = (($gep_int32) + -1)|0;
     $112 = $gep33;
     HEAP32[$1>>2] = $112;
     
    }
    $113 = ___errno_location()|0;
    HEAP32[$113>>2] = 22;
    ___shlim($f,0);
    
    $$0 = 0.000000e+00;
    
    STACKTOP = sp;return +$$0;
   }
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   $42 = HEAP32[$2>>2]|0;
   $43 = ($42|0)==(0);
   
   if (!($43)) {
    $44 = HEAP32[$1>>2]|0;
    $gep_int14 = $44;
    $gep15 = (($gep_int14) + -1)|0;
    $45 = $gep15;
    HEAP32[$1>>2] = $45;
    
   }
   $notlhs = ($pok|0)==(0);
   $notrhs = ($i$0$lcssa>>>0)<(4);
   $or$cond106$not = $notrhs | $notlhs;
   $brmerge = $or$cond106$not | $43;
   
   if ($brmerge) {
    break;
   } else {
    $i$166 = $i$0$lcssa;
   }
   while(1) {
    
    $46 = HEAP32[$1>>2]|0;
    $gep_int16 = $46;
    $gep17 = (($gep_int16) + -1)|0;
    $47 = $gep17;
    HEAP32[$1>>2] = $47;
    $48 = (($i$166) + -1)|0;
    $49 = ($48>>>0)>(3);
    
    if ($49) {
     $i$166$phi = $48;$i$166 = $i$166$phi;
    } else {
     break;
    }
   }
  }
 } while(0);
 $50 = +($sign$0|0);
 $51 = $50 * +inf;
 $52 = $51;
 
 $$0 = $52;
 
 STACKTOP = sp;return +$$0;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $54$phi = 0, $55 = 0, $55$phi = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $c$0 = 0, $c$1$be = 0, $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0;
 var $gep_int13 = 0, $gep_int15 = 0, $gep_int17 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $f;
 $gep = (($gep_int) + 4)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $gep_int1 = $f;
 $gep2 = (($gep_int1) + 100)|0;
 $3 = $gep2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 
 if ($5) {
  $gep_int3 = $2;
  $gep4 = (($gep_int3) + 1)|0;
  $6 = $gep4;
  HEAP32[$1>>2] = $6;
  $7 = HEAP8[$2]|0;
  $8 = $7&255;
  
  $10 = $8;
 } else {
  $9 = ___shgetc($f)|0;
  
  $10 = $9;
 }
 
 $11 = ($10|0)==(45);
 
 do {
  if ((($10|0) == 43) | (($10|0) == 45)) {
   $12 = $11&1;
   $13 = HEAP32[$1>>2]|0;
   $14 = HEAP32[$3>>2]|0;
   $15 = ($13>>>0)<($14>>>0);
   
   if ($15) {
    $gep_int5 = $13;
    $gep6 = (($gep_int5) + 1)|0;
    $16 = $gep6;
    HEAP32[$1>>2] = $16;
    $17 = HEAP8[$13]|0;
    $18 = $17&255;
    
    $20 = $18;
   } else {
    $19 = ___shgetc($f)|0;
    
    $20 = $19;
   }
   
   $21 = (($20) + -48)|0;
   $22 = ($21>>>0)<(10);
   $23 = ($pok|0)==(0);
   $or$cond = $22 | $23;
   
   if ($or$cond) {
    $c$0 = $20;$neg$0 = $12;
    break;
   }
   $24 = HEAP32[$3>>2]|0;
   $25 = ($24|0)==(0);
   
   if ($25) {
    $c$0 = $20;$neg$0 = $12;
    break;
   }
   $26 = HEAP32[$1>>2]|0;
   $gep_int7 = $26;
   $gep8 = (($gep_int7) + -1)|0;
   $27 = $gep8;
   HEAP32[$1>>2] = $27;
   
   $c$0 = $20;$neg$0 = $12;
  } else {
   $c$0 = $10;$neg$0 = 0;
  }
 } while(0);
 
 
 $28 = (($c$0) + -48)|0;
 $29 = ($28>>>0)>(9);
 
 if ($29) {
  $30 = HEAP32[$3>>2]|0;
  $31 = ($30|0)==(0);
  
  if ($31) {
   $96 = 0;$97 = -2147483648;
   
   
   tempRet0 = $97;
   STACKTOP = sp;return $96|0;
  }
  $32 = HEAP32[$1>>2]|0;
  $gep_int9 = $32;
  $gep10 = (($gep_int9) + -1)|0;
  $33 = $gep10;
  HEAP32[$1>>2] = $33;
  
  $96 = 0;$97 = -2147483648;
  
  
  tempRet0 = $97;
  STACKTOP = sp;return $96|0;
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  
  
  $34 = (($c$18) + -48)|0;
  $35 = (($34) + ($x$09))|0;
  $36 = HEAP32[$1>>2]|0;
  $37 = HEAP32[$3>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  
  if ($38) {
   $gep_int11 = $36;
   $gep12 = (($gep_int11) + 1)|0;
   $39 = $gep12;
   HEAP32[$1>>2] = $39;
   $40 = HEAP8[$36]|0;
   $41 = $40&255;
   
   $c$1$be = $41;
  } else {
   $42 = ___shgetc($f)|0;
   
   $c$1$be = $42;
  }
  
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  
  if (!($$)) {
   break;
  }
  $phitmp16 = ($35*10)|0;
  
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $46 = ($35|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be) + -48)|0;
 $49 = ($48>>>0)<(10);
 
 if ($49) {
  $54 = $35;$55 = $47;$c$23 = $c$1$be;
  while(1) {
   
   
   
   $56 = ___muldi3($54|0,$55|0,10,0)|0;
   $57 = tempRet0;
   $58 = ($c$23|0)<(0);
   $59 = $58 << 31 >> 31;
   $60 = _i64Add($c$23|0,$59|0,-48,-1)|0;
   $61 = tempRet0;
   $62 = _i64Add($60|0,$61|0,$56|0,$57|0)|0;
   $63 = tempRet0;
   $64 = HEAP32[$1>>2]|0;
   $65 = HEAP32[$3>>2]|0;
   $66 = ($64>>>0)<($65>>>0);
   
   if ($66) {
    $gep_int13 = $64;
    $gep14 = (($gep_int13) + 1)|0;
    $67 = $gep14;
    HEAP32[$1>>2] = $67;
    $68 = HEAP8[$64]|0;
    $69 = $68&255;
    
    $c$2$be = $69;
   } else {
    $70 = ___shgetc($f)|0;
    
    $c$2$be = $70;
   }
   
   $71 = (($c$2$be) + -48)|0;
   $72 = ($71>>>0)<(10);
   $73 = ($63|0)<(21474836);
   $74 = ($63|0)==(21474836);
   $75 = ($62>>>0)<(2061584302);
   $76 = $74 & $75;
   $77 = $73 | $76;
   $or$cond2 = $72 & $77;
   
   if ($or$cond2) {
    $55$phi = $63;$54$phi = $62;$c$23 = $c$2$be;$55 = $55$phi;$54 = $54$phi;
   } else {
    $50 = $62;$51 = $63;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $50 = $35;$51 = $47;$c$2$lcssa = $c$1$be;
 }
 
 
 
 $52 = (($c$2$lcssa) + -48)|0;
 $53 = ($52>>>0)<(10);
 
 if ($53) {
  while(1) {
   $78 = HEAP32[$1>>2]|0;
   $79 = HEAP32[$3>>2]|0;
   $80 = ($78>>>0)<($79>>>0);
   
   if ($80) {
    $gep_int15 = $78;
    $gep16 = (($gep_int15) + 1)|0;
    $81 = $gep16;
    HEAP32[$1>>2] = $81;
    $82 = HEAP8[$78]|0;
    $83 = $82&255;
    
    $c$3$be = $83;
   } else {
    $84 = ___shgetc($f)|0;
    
    $c$3$be = $84;
   }
   
   $85 = (($c$3$be) + -48)|0;
   $86 = ($85>>>0)<(10);
   
   if (!($86)) {
    break;
   }
  }
 }
 $87 = HEAP32[$3>>2]|0;
 $88 = ($87|0)==(0);
 
 if (!($88)) {
  $89 = HEAP32[$1>>2]|0;
  $gep_int17 = $89;
  $gep18 = (($gep_int17) + -1)|0;
  $90 = $gep18;
  HEAP32[$1>>2] = $90;
  
 }
 $91 = ($neg$0|0)!=(0);
 $92 = _i64Subtract(0,0,$50|0,$51|0)|0;
 $93 = tempRet0;
 $94 = $91 ? $92 : $50;
 $95 = $91 ? $93 : $51;
 
 $96 = $94;$97 = $95;
 
 
 tempRet0 = $97;
 STACKTOP = sp;return $96|0;
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0;
 var $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $f;
 $gep = (($gep_int) + 104)|0;
 $1 = $gep;
 HEAP32[$1>>2] = $lim;
 $gep_int1 = $f;
 $gep2 = (($gep_int1) + 8)|0;
 $2 = $gep2;
 $3 = HEAP32[$2>>2]|0;
 $gep_int3 = $f;
 $gep4 = (($gep_int3) + 4)|0;
 $4 = $gep4;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $gep_int5 = $f;
 $gep6 = (($gep_int5) + 108)|0;
 $9 = $gep6;
 HEAP32[$9>>2] = $8;
 $10 = ($lim|0)!=(0);
 $11 = ($8|0)>($lim|0);
 $or$cond = $10 & $11;
 
 if ($or$cond) {
  $gep_int7 = $5;
  $gep8 = (($gep_int7) + ($lim))|0;
  $12 = $gep8;
  $gep_int9 = $f;
  $gep10 = (($gep_int9) + 100)|0;
  $13 = $gep10;
  HEAP32[$13>>2] = $12;
  
  STACKTOP = sp;return;
 } else {
  $gep_int11 = $f;
  $gep12 = (($gep_int11) + 100)|0;
  $14 = $gep12;
  HEAP32[$14>>2] = $3;
  
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $expanded = 0, $gep = 0, $gep10 = 0, $gep12 = 0, $gep14 = 0, $gep16 = 0, $gep18 = 0, $gep2 = 0, $gep20 = 0, $gep22 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int13 = 0, $gep_int15 = 0;
 var $gep_int17 = 0, $gep_int19 = 0, $gep_int21 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $gep_int = $f;
 $gep = (($gep_int) + 104)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 
 if ($3) {
  label = 3;
 } else {
  $gep_int1 = $f;
  $gep2 = (($gep_int1) + 108)|0;
  $4 = $gep2;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  
  if ($6) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $expanded = 97;
   $7 = ___uflow($f)|0;
   $8 = ($7|0)<(0);
   
   if ($8) {
    break;
   }
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $gep_int5 = $f;
   $gep6 = (($gep_int5) + 8)|0;
   $$phi$trans$insert = $gep6;
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   
   do {
    if ($11) {
     label = 8;
    } else {
     $gep_int7 = $f;
     $gep8 = (($gep_int7) + 4)|0;
     $12 = $gep8;
     $13 = HEAP32[$12>>2]|0;
     $14 = $$pre;
     $15 = $13;
     $16 = (($14) - ($15))|0;
     $gep_int9 = $f;
     $gep10 = (($gep_int9) + 108)|0;
     $17 = $gep10;
     $18 = HEAP32[$17>>2]|0;
     $19 = (($10) - ($18))|0;
     $20 = (($19) + -1)|0;
     $21 = ($16|0)>($20|0);
     
     if (!($21)) {
      label = 8;
      break;
     }
     $gep_int11 = $13;
     $gep12 = (($gep_int11) + ($20))|0;
     $22 = $gep12;
     $gep_int13 = $f;
     $gep14 = (($gep_int13) + 100)|0;
     $23 = $gep14;
     HEAP32[$23>>2] = $22;
     
    }
   } while(0);
   if ((label|0) == 8) {
    $gep_int15 = $f;
    $gep16 = (($gep_int15) + 100)|0;
    $24 = $gep16;
    HEAP32[$24>>2] = $$pre;
    
   }
   $25 = ($$pre|0)==(0);
   $gep_int17 = $f;
   $gep18 = (($gep_int17) + 4)|0;
   $$phi$trans$insert2 = $gep18;
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   
   if (!($25)) {
    $26 = $$pre;
    $27 = $$pre3;
    $gep_int19 = $f;
    $gep20 = (($gep_int19) + 108)|0;
    $28 = $gep20;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($26) + 1)|0;
    $31 = (($30) - ($27))|0;
    $32 = (($31) + ($29))|0;
    HEAP32[$28>>2] = $32;
    
   }
   $gep_int21 = $$pre3;
   $gep22 = (($gep_int21) + -1)|0;
   $33 = $gep22;
   $34 = HEAP8[$33]|0;
   $35 = $34&255;
   $36 = ($35|0)==($7|0);
   
   if ($36) {
    $$0 = $7;
    
    STACKTOP = sp;return $$0|0;
   }
   $37 = $7&255;
   HEAP8[$33] = $37;
   
   $$0 = $7;
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $gep_int3 = $f;
 $gep4 = (($gep_int3) + 100)|0;
 $9 = $gep4;
 HEAP32[$9>>2] = 0;
 
 $$0 = -1;
 
 STACKTOP = sp;return $$0|0;
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($n|0)>(1023);
 
 do {
  if ($1) {
   $2 = $x * 8.98846567431157953864652595395e+307;
   $3 = (($n) + -1023)|0;
   $4 = ($3|0)>(1023);
   
   if (!($4)) {
    $$0 = $3;$y$0 = $2;
    break;
   }
   $5 = $2 * 8.98846567431157953864652595395e+307;
   $6 = (($n) + -2046)|0;
   $7 = ($6|0)>(1023);
   $$ = $7 ? 1023 : $6;
   
   $$0 = $$;$y$0 = $5;
  } else {
   $8 = ($n|0)<(-1022);
   
   if (!($8)) {
    $$0 = $n;$y$0 = $x;
    break;
   }
   $9 = $x * 1.28822975391942666164540730067e-231;
   $10 = (($n) + 1022)|0;
   $11 = ($10|0)<(-1022);
   
   if (!($11)) {
    $$0 = $10;$y$0 = $9;
    break;
   }
   $12 = $9 * 1.28822975391942666164540730067e-231;
   $13 = (($n) + 2044)|0;
   $14 = ($13|0)<(-1022);
   $$1 = $14 ? -1022 : $13;
   
   $$0 = $$1;$y$0 = $12;
  }
 } while(0);
 
 
 $15 = (($$0) + 1023)|0;
 $16 = _bitshift64Shl($15|0,0,52)|0;
 $17 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $16;HEAP32[tempDoublePtr+4>>2] = $17;$18 = +HEAPF64[tempDoublePtr>>3];
 $19 = $y$0 * $18;
 STACKTOP = sp;return +$19;
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +_scalbn($x,$n);
 STACKTOP = sp;return +$1;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gep = 0, $gep10 = 0, $gep13 = 0, $gep15 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int11 = 0, $gep_int12 = 0, $gep_int14 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0;
 var $gep_int9 = 0, label = 0, sp = 0, u$2 = 0;
 sp = STACKTOP;
 $gep_int = $f;
 $gep = (($gep_int) + 74)|0;
 $1 = $gep;
 $2 = HEAP8[$1]|0;
 $3 = (($2) + -1)<<24>>24;
 $4 = $3 | $2;
 HEAP8[$1] = $4;
 $gep_int1 = $f;
 $gep2 = (($gep_int1) + 20)|0;
 $5 = $gep2;
 $6 = HEAP32[$5>>2]|0;
 $gep_int3 = $f;
 $gep4 = (($gep_int3) + 44)|0;
 $7 = $gep4;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 
 if ($9) {
  $gep_int5 = $f;
  $gep6 = (($gep_int5) + 36)|0;
  $10 = $gep6;
  $11 = HEAP32[$10>>2]|0;
  u$2 = FUNCTION_TABLE_iiii[$11 & 63]($f,0,0)|0;
  
 }
 $gep_int7 = $f;
 $gep8 = (($gep_int7) + 16)|0;
 $12 = $gep8;
 HEAP32[$12>>2] = 0;
 $gep_int9 = $f;
 $gep10 = (($gep_int9) + 28)|0;
 $13 = $gep10;
 HEAP32[$13>>2] = 0;
 HEAP32[$5>>2] = 0;
 $gep_int11 = $f;
 $14 = $gep_int11;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 
 if ($17) {
  $21 = HEAP32[$7>>2]|0;
  $gep_int12 = $f;
  $gep13 = (($gep_int12) + 8)|0;
  $22 = $gep13;
  HEAP32[$22>>2] = $21;
  $gep_int14 = $f;
  $gep15 = (($gep_int14) + 4)|0;
  $23 = $gep15;
  HEAP32[$23>>2] = $21;
  
  $$0 = 0;
  
  STACKTOP = sp;return $$0|0;
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 
 if ($19) {
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 }
 $20 = $15 | 32;
 HEAP32[$14>>2] = $20;
 
 $$0 = -1;
 
 STACKTOP = sp;return $$0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $gep = 0, $gep2 = 0, $gep_int = 0, $gep_int1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $c = sp;
 $gep_int = $f;
 $gep = (($gep_int) + 8)|0;
 $1 = $gep;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 
 do {
  if ($3) {
   $4 = ___toread($f)|0;
   $5 = ($4|0)==(0);
   
   if ($5) {
    break;
   } else {
    $$0 = -1;
   }
   
   STACKTOP = sp;return $$0|0;
  }
 } while(0);
 $gep_int1 = $f;
 $gep2 = (($gep_int1) + 32)|0;
 $6 = $gep2;
 $7 = HEAP32[$6>>2]|0;
 $8 = FUNCTION_TABLE_iiii[$7 & 63]($f,$c,1)|0;
 $9 = ($8|0)==(1);
 
 if (!($9)) {
  $$0 = -1;
  
  STACKTOP = sp;return $$0|0;
 }
 $10 = HEAP8[$c]|0;
 $11 = $10&255;
 
 $$0 = $11;
 
 STACKTOP = sp;return $$0|0;
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $expanded = 0, $f$i$i = 0;
 var $gep = 0, $gep10 = 0, $gep2 = 0, $gep4 = 0, $gep6 = 0, $gep8 = 0, $gep_int = 0, $gep_int1 = 0, $gep_int3 = 0, $gep_int5 = 0, $gep_int7 = 0, $gep_int9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 $1 = $f$i$i;
 
 dest=$1+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
 $gep_int = $f$i$i;
 $gep = (($gep_int) + 4)|0;
 $2 = $gep;
 HEAP32[$2>>2] = $s;
 $gep_int1 = $f$i$i;
 $gep2 = (($gep_int1) + 8)|0;
 $3 = $gep2;
 $expanded = -1;
 HEAP32[$3>>2] = $expanded;
 $gep_int3 = $f$i$i;
 $gep4 = (($gep_int3) + 44)|0;
 $4 = $gep4;
 HEAP32[$4>>2] = $s;
 $gep_int5 = $f$i$i;
 $gep6 = (($gep_int5) + 76)|0;
 $5 = $gep6;
 HEAP32[$5>>2] = -1;
 ___shlim($f$i$i,0);
 $6 = +___floatscan($f$i$i,2,1);
 $gep_int7 = $f$i$i;
 $gep8 = (($gep_int7) + 108)|0;
 $7 = $gep8;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$3>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($8))|0;
 $15 = ($p|0)==(0);
 
 if ($15) {
  
  STACKTOP = sp;return +$6;
 }
 $16 = ($14|0)==(0);
 
 if ($16) {
  $18 = $s;
 } else {
  $gep_int9 = $s;
  $gep10 = (($gep_int9) + ($14))|0;
  $17 = $gep10;
  
  $18 = $17;
 }
 
 HEAP32[$p>>2] = $18;
 
 
 STACKTOP = sp;return +$6;
}
function runPostSets() {
 HEAP32[14] = __ZTISt9exception;HEAP32[1324] = __ZTISt9exception;HEAP32[1350] = __ZTISt9exception;HEAP32[4112] = __ZTISt9exception;HEAP32[4342] = __ZTISt9exception;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[(dest)]=((HEAP8[(src)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[(ptr)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[(ptr)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[(curr)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _rand_r(seedp) {
    seedp = seedp|0; 
    var val = 0;
    val = ((Math_imul(((HEAP32[((seedp)>>2)])|0), 31010991)|0) + 0x676e6177 ) & 2147483647; // assumes RAND_MAX is in bit mask form (power of 2 minus 1)
    HEAP32[((seedp)>>2)]=val;
    return val|0;
}
function _rand() {
    return _rand_r(___rand_seed)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))|0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))|0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_vddd(index,a1,a2,a3) {
    index = index|0;
    a1=+a1; a2=+a2; a3=+a3;
    FUNCTION_TABLE_vddd[index&3](+a1,+a2,+a3);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&255](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
  }


  function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    return FUNCTION_TABLE_iiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&127](a1|0)|0;
  }


  function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
    return FUNCTION_TABLE_iiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
    FUNCTION_TABLE_viiiiiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
  }


  function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
    FUNCTION_TABLE_viiiiid[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_diii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return +FUNCTION_TABLE_diii[index&3](a1|0,a2|0,a3|0);
  }


  function dynCall_di(index,a1) {
    index = index|0;
    a1=a1|0;
    return +FUNCTION_TABLE_di[index&1](a1|0);
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
    FUNCTION_TABLE_viiiiiid[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
    FUNCTION_TABLE_viiiiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_dii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return +FUNCTION_TABLE_dii[index&1](a1|0,a2|0);
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_d(index) {
    index = index|0;
    
    return +FUNCTION_TABLE_d[index&1]();
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&7]()|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_vdddddd(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=+a1; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
    FUNCTION_TABLE_vdddddd[index&1](+a1,+a2,+a3,+a4,+a5,+a6);
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&15]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0,p1,p2) { p0 = +p0;p1 = +p1;p2 = +p2; nullFunc_vddd(2); }
  function _glColor3f__wrapper(p0,p1,p2) { p0 = +p0;p1 = +p1;p2 = +p2; _glColor3f(+p0,+p1,+p2); }
  function _glVertex3f__wrapper(p0,p1,p2) { p0 = +p0;p1 = +p1;p2 = +p2; _glVertex3f(+p0,+p1,+p2); }
  function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
  function _exit__wrapper(p0) { p0 = p0|0; _exit(p0|0); }
  function _glEnable__wrapper(p0) { p0 = p0|0; _glEnable(p0|0); }
  function _glBegin__wrapper(p0) { p0 = p0|0; _glBegin(p0|0); }
  function _glDisable__wrapper(p0) { p0 = p0|0; _glDisable(p0|0); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
  function _glBindTexture__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glBindTexture(p0|0,p1|0); }
  function _glTexCoord2i__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glTexCoord2i(p0|0,p1|0); }
  function _glVertex2i__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glVertex2i(p0|0,p1|0); }
  function b5(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0; }
  function _clGetKernelWorkGroupInfo__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _clGetKernelWorkGroupInfo(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function _clGetProgramBuildInfo__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _clGetProgramBuildInfo(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function _clCreateBuffer__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _clCreateBuffer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function _clCreateContext__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _clCreateContext(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function b6(p0) { p0 = p0|0; nullFunc_ii(6);return 0; }
  function _atoi__wrapper(p0) { p0 = p0|0; return _atoi(p0|0)|0; }
  function ___gxx_personality_v0__wrapper(p0) { p0 = p0|0; return ___gxx_personality_v0(p0|0)|0; }
  function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
  function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(7);return 0; }
  function b8(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0; }
  function _fprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fprintf(p0|0,p1|0,p2|0)|0; }
  function _fscanf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fscanf(p0|0,p1|0,p2|0)|0; }
  function _sprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _sprintf(p0|0,p1|0,p2|0)|0; }
  function _clCreateKernel__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _clCreateKernel(p0|0,p1|0,p2|0)|0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function _vasprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _vasprintf(p0|0,p1|0,p2|0)|0; }
  function _sscanf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _sscanf(p0|0,p1|0,p2|0)|0; }
  function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(9); }
  function b10(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(10); }
  function b11(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(11); }
  function b12(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(12);return +0; }
  function b13(p0) { p0 = p0|0; nullFunc_di(13);return +0; }
  function b14(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(14); }
  function b15(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(15); }
  function b16(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(16); }
  function _glTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _glTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0); }
  function b17(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(17); }
  function b18(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(18);return 0; }
  function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
  function _isxdigit_l__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _isxdigit_l(p0|0,p1|0)|0; }
  function _isdigit_l__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _isdigit_l(p0|0,p1|0)|0; }
  function b19(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(19);return 0; }
  function _clGetDeviceInfo__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clGetDeviceInfo(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function _clGetEventProfilingInfo__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clGetEventProfilingInfo(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function _clCreateProgramWithSource__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clCreateProgramWithSource(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function _clCreateCommandQueue__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clCreateCommandQueue(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function b20(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_dii(20);return +0; }
  function b21(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(21); }
  function b22() { ; nullFunc_d(22);return +0; }
  function b23() { ; nullFunc_i(23);return 0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b24(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(24);return 0; }
  function _snprintf__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _snprintf(p0|0,p1|0,p2|0,p3|0)|0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b25(p0,p1,p2,p3,p4,p5) { p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_vdddddd(25); }
  function _glOrtho__wrapper(p0,p1,p2,p3,p4,p5) { p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; _glOrtho(+p0,+p1,+p2,+p3,+p4,+p5); }
  function b26(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(26); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b27() { ; nullFunc_v(27); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function _glEnd__wrapper() { ; _glEnd(); }
  function _glPushMatrix__wrapper() { ; _glPushMatrix(); }
  function _glLoadIdentity__wrapper() { ; _glLoadIdentity(); }
  function _glPopMatrix__wrapper() { ; _glPopMatrix(); }
  function _glutSwapBuffers__wrapper() { ; _glutSwapBuffers(); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function b28(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(28);return 0; }
  function b29(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(29); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,__ZNK2cl12CommandQueue20enqueueNDRangeKernelERKNS_6KernelERKNS_7NDRangeES6_S6_PKNS_6vectorINS_5EventELj10EEEPS8_,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb];
  var FUNCTION_TABLE_viiiii = [b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
  var FUNCTION_TABLE_vddd = [b2,_glColor3f__wrapper,_glVertex3f__wrapper,b2];
  var FUNCTION_TABLE_vi = [b3,__ZN2cl5ErrorD1Ev,__ZN2cl5ErrorD0Ev,__ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev
  ,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev
  ,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev
  ,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev
  ,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN2cl7NDRangeD1Ev,_exit__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__16localeD2Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev,__ZN2cl6vectorIP12RenderDeviceLj10EED1Ev,__ZN2cl6vectorINS_6DeviceELj10EEC1Ev,__ZN12RenderConfig11ReInitSceneEv,__ZN2cl6vectorINS_6DeviceELj10EED1Ev,__ZN2cl8PlatformD1Ev,__ZN2cl6vectorINS_8PlatformELj10EED1Ev,__ZN12RenderDeviceD2Ev,__ZN2cl6DeviceD1Ev,__ZN2cl6DeviceC1Ev,__ZN2cl8PlatformC1Ev,__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev,__ZN12RenderDevice12RenderThreadEPS_,_glEnable__wrapper,_glBegin__wrapper,_glDisable__wrapper,__ZN12RenderConfigD2Ev,__ZN2cl5EventC1Ev,__ZN2cl6stringD1Ev,__ZN2cl7ProgramD1Ev,__ZN2cl6vectorINSt3__14pairIPKcjEELj10EED1Ev,__ZN2cl5EventD1Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,__ZN2cl12CommandQueueD1Ev,__ZN2cl6KernelD1Ev,__ZN2cl6BufferD1Ev,__ZN2cl7ContextD1Ev,__ZN12RenderDevice13SetKernelArgsEv,__ZN12RenderDevice13ExecuteKernelEv,__ZN12RenderDevice15ReadPixelBufferEv,__ZN12RenderDevice19FinishExecuteKernelEv,__ZN12RenderDevice6FinishEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZN2cl6size_tILi3EED1Ev,__ZN2cl6MemoryD2Ev,__ZN2cl6detail7WrapperIP10_cl_kernelED2Ev,__ZN2cl6detail7WrapperIP11_cl_programED2Ev,__ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev,__ZN2cl6detail7WrapperIP11_cl_contextED2Ev,__ZNSt3__121__throw_runtime_errorEPKc,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv
  ,_free,_freelocale__wrapper,__ZNSt3__112__do_nothingEPv,___cxx_global_array_dtor120,___cxx_global_array_dtor105,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv
  ,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_,__ZNKSt3__18ios_base6getlocEv,__ZNSt3__18ios_base5clearEj,__ZN12RenderConfig9ReadSceneEPKc,__ZNSt13runtime_errorC2EPKc,__ZN2cl8PlatformC1ERKS0_,__ZN2cl6vectorINS_6DeviceELj10EE9push_backERKS1_,__ZN2cl6vectorIP12RenderDeviceLj10EE9push_backERKS2_,__ZN12RenderConfig20UpdateDeviceWorkloadEb,__ZN12RenderConfig6ReInitEi,__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE,__ZN2cl6vectorINS_8PlatformELj10EE9push_backERKS1_,_glBindTexture__wrapper,_glTexCoord2i__wrapper,_glVertex2i__wrapper,__ZL11PrintStringPvPKc,__Z11reshapeFuncii,__ZN2cl8PlatformC1EP15_cl_platform_id,__ZNSt3__18ios_base4initEPv
  ,__ZN2cl7NDRangeC1Ej,__ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED2Ev,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__ZN2cl6vectorIjLj3EE9push_backERKj,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZNSt11logic_errorC2EPKc,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj,__ZNSt3__16locale5__impC2Ej,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iiiiiii = [b5,_clGetKernelWorkGroupInfo__wrapper,_clGetProgramBuildInfo__wrapper,_clCreateBuffer__wrapper,_clCreateContext__wrapper,b5,b5,b5];
  var FUNCTION_TABLE_ii = [b6,__ZNK2cl5Error4whatEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv
  ,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv
  ,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt8bad_cast4whatEv,__ZNKSt9bad_alloc4whatEv,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,_atoi__wrapper,___gxx_personality_v0__wrapper,__Znwj,_strlen__wrapper,__ZNK2cl5Error3errEv,__ZNK2cl6vectorIP12RenderDeviceLj10EE4sizeEv,__ZN2cl8Platform3getEPNS_6vectorIS0_Lj10EEE,__ZNK2cl6vectorINS_8PlatformELj10EE4sizeEv,__ZNK2cl6vectorINS_6DeviceELj10EE4sizeEv,__ZNK12RenderDevice7GetNameEv,__Znaj,__ZNK12RenderDevice13GetWorkOffsetEv,__ZNK12RenderDevice13GetWorkAmountEv,__ZN2cl6detail7WrapperIP15_cl_platform_idEclEv,__ZNK2cl6string5c_strEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv,_fclose__wrapper,__ZNK2cl6detail7WrapperIP11_cl_contextEclEv,__ZNK2cl6detail7WrapperIP11_cl_programEclEv,__ZNK2cl6vectorINSt3__14pairIPKcjEELj10EE4sizeEv,__ZNK2cl6detail7WrapperIP13_cl_device_idEclEv
  ,__ZNK2cl6vectorINS_6DeviceELj10EE5frontEv,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,_uselocale__wrapper,_wcslen,___uflow,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b7,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b7];
  var FUNCTION_TABLE_iiii = [b8,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_fprintf__wrapper,_fscanf__wrapper,_sprintf__wrapper,__ZN2cl6Kernel6setArgINS_6BufferEEEijT_,_clCreateKernel__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,_newlocale__wrapper,_vasprintf__wrapper,_sscanf__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,_wcrtomb,_mbtowc,_mbrlen,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b9,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b9];
  var FUNCTION_TABLE_viiiiid = [b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b10,b10,b10];
  var FUNCTION_TABLE_viiiiiiii = [b11,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b11];
  var FUNCTION_TABLE_diii = [b12,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj];
  var FUNCTION_TABLE_di = [b13,__ZNK12RenderDevice14GetPerformanceEv];
  var FUNCTION_TABLE_viiiiiii = [b14,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,__ZN12RenderConfigC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEjjbbj,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,__ZN12RenderDeviceC2ERKN2cl6DeviceERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEjP6CameraP6Spherej,__ZN2cl6BufferC1ERKNS_7ContextEyjPvPi,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14];
  var FUNCTION_TABLE_viiiiiid = [b15,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b15];
  var FUNCTION_TABLE_viiiiiiiii = [b16,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,_glTexSubImage2D__wrapper];
  var FUNCTION_TABLE_viiiiiiiiii = [b17,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b17,b17,b17];
  var FUNCTION_TABLE_iii = [b18,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi,__ZNKSt3__16locale9use_facetERNS0_2idE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj,__ZN2cl6vectorINS_8PlatformELj10EEixEi,__ZN2cl6vectorINS_6DeviceELj10EEixEi,__ZNK2cl6Device7getInfoILi4096EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,__ZNK2cl6Device7getInfoILi4098EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi,__ZN2cl6vectorIP12RenderDeviceLj10EEixEi,__ZNK2cl6vectorIP12RenderDeviceLj10EEixEi
  ,_printf__wrapper,__ZNK2cl6Device7getInfoILi4145EEENS_6detail12param_traitsINS2_14cl_device_infoEXT_EE10param_typeEPi,__ZN2cl5EventaSERKS0_,__ZNKSt3__16locale9has_facetERNS0_2idE,__ZN2cl6stringaSERKS0_,__ZN2cl6detailL10errHandlerEiPKc128,_isxdigit_l__wrapper,_isdigit_l__wrapper,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18];
  var FUNCTION_TABLE_iiiiii = [b19,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,_clGetDeviceInfo__wrapper,__ZNK2cl7Program5buildERKNS_6vectorINS_6DeviceELj10EEEPKcPFvP11_cl_programPvESA_,_clGetEventProfilingInfo__wrapper,_clCreateProgramWithSource__wrapper,_clCreateCommandQueue__wrapper,__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz,_wcsnrtombs,_mbsnrtowcs,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19];
  var FUNCTION_TABLE_dii = [b20,__ZNK12RenderConfig12GetPerfIndexEj];
  var FUNCTION_TABLE_viiiiii = [b21,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZN2cl7ContextC1ERKNS_6vectorINS_6DeviceELj10EEEPiPFvPKcPKvjPvESB_S6_,__ZN2cl12CommandQueueC1ERKNS_7ContextERKNS_6DeviceEyPi,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21];
  var FUNCTION_TABLE_d = [b22,__Z13WallClockTimev];
  var FUNCTION_TABLE_i = [b23,___ctype_b_loc__wrapper,__ZNSt3__16locale8__globalEv,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b23,b23,b23];
  var FUNCTION_TABLE_iiiii = [b24,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,__ZNK2cl8Platform10getDevicesEyPNS_6vectorINS_6DeviceELj10EEE,__ZNK2cl6Kernel16getWorkGroupInfoIjEEiRKNS_6DeviceEjPT_,__ZNK2cl7Program12getBuildInfoINS_6stringEEEiRKNS_6DeviceEjPT_,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,_mbsrtowcs,_snprintf__wrapper,_catgets__wrapper,_mbrtowc,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24];
  var FUNCTION_TABLE_vdddddd = [b25,_glOrtho__wrapper];
  var FUNCTION_TABLE_viii = [b26,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEjRKd,___cxa_throw__wrapper,__ZN2cl5ErrorC1EiPKc,__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEjRKd,__Z7keyFunchii,__Z11specialFunciii,__ZN12RenderDevice11ReadSourcesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN2cl6vectorINSt3__14pairIPKcjEELj10EEC1EjRKS5_,__ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEE4openEPKcj,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_19istreambuf_iteratorIcS2_EEEENS_9enable_ifIXaasr19__is_input_iteratorIT_EE5valuentsr21__is_forward_iteratorISA_EE5valueEvE4typeESA_SA_,__ZNK2cl6vectorINSt3__14pairIPKcjEELj10EEixEi,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNSt3__112system_errorC2ENS_10error_codeEPKc,__ZNSt3__111__call_onceERVmPvPFvS2_E,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__16locale5__imp7installEPNS0_5facetEl,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26];
  var FUNCTION_TABLE_v = [b27,__Z7RunGlutv,___cxa_end_catch__wrapper,_glEnd__wrapper,__ZL13PrintCaptionsv,_glPushMatrix__wrapper,_glLoadIdentity__wrapper,__ZL19PrintHelpAndDevicesv,_glPopMatrix__wrapper,_glutSwapBuffers__wrapper,__Z11displayFuncv,__Z8idleFuncv,___cxa_rethrow__wrapper,__ZSt17__throw_bad_allocv,b27,b27];
  var FUNCTION_TABLE_iiiiiiiii = [b28,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b28,b28,b28,b28,b28,b28,b28];
  var FUNCTION_TABLE_viiii = [b29,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__Z8InitGlutiPPcjj,__ZN12RenderConfig11SetUpOpenCLEbbj,__ZN2cl7ProgramC1ERKNS_7ContextERKNS_6vectorINSt3__14pairIPKcjEELj10EEEPi,__ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi,__ZN2cl6KernelC1ERKNS_7ProgramEPKcPi,b29,b29];

  return { _strlen: _strlen, _free: _free, _main: _main, _rand_r: _rand_r, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Shl: _bitshift64Shl, _i64Subtract: _i64Subtract, _rand: _rand, __GLOBAL__I_a: __GLOBAL__I_a, __GLOBAL__I_a20: __GLOBAL__I_a20, __GLOBAL__I_a82: __GLOBAL__I_a82, __GLOBAL__I_a129: __GLOBAL__I_a129, __GLOBAL__I_a244: __GLOBAL__I_a244, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vddd: dynCall_vddd, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_diii: dynCall_diii, dynCall_di: dynCall_di, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_dii: dynCall_dii, dynCall_viiiiii: dynCall_viiiiii, dynCall_d: dynCall_d, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_vdddddd: dynCall_vdddddd, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vddd": nullFunc_vddd, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_di": nullFunc_di, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_dii": nullFunc_dii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_d": nullFunc_d, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_vdddddd": nullFunc_vdddddd, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vddd": invoke_vddd, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_diii": invoke_diii, "invoke_di": invoke_di, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_dii": invoke_dii, "invoke_viiiiii": invoke_viiiiii, "invoke_d": invoke_d, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_vdddddd": invoke_vdddddd, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_fabs": _fabs, "_clReleaseProgram": _clReleaseProgram, "_clGetEventProfilingInfo": _clGetEventProfilingInfo, "_vsscanf": _vsscanf, "__ZSt9terminatev": __ZSt9terminatev, "___cxa_guard_acquire": ___cxa_guard_acquire, "__reallyNegative": __reallyNegative, "_clEnqueueNDRangeKernel": _clEnqueueNDRangeKernel, "_clCreateContext": _clCreateContext, "_glDeleteProgram": _glDeleteProgram, "_clCreateProgramWithSource": _clCreateProgramWithSource, "___ctype_toupper_loc": ___ctype_toupper_loc, "_glBindBuffer": _glBindBuffer, "__addDays": __addDays, "_fsync": _fsync, "_sbrk": _sbrk, "_glBlendFunc": _glBlendFunc, "_glutReshapeWindow": _glutReshapeWindow, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "___cxa_begin_catch": ___cxa_begin_catch, "_glCreateShader": _glCreateShader, "_glutSwapBuffers": _glutSwapBuffers, "__parseInt64": __parseInt64, "_close": _close, "___cxa_throw": ___cxa_throw, "_cos": _cos, "_glTexCoord2i": _glTexCoord2i, "_fileno": _fileno, "_fread": _fread, "_glLoadIdentity": _glLoadIdentity, "_write": _write, "__isLeapYear": __isLeapYear, "_ftell": _ftell, "_glutSpecialFunc": _glutSpecialFunc, "_glShaderSource": _glShaderSource, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_does_inherit": ___cxa_does_inherit, "_strtoll_l": _strtoll_l, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "_glVertexPointer": _glVertexPointer, "_glOrtho": _glOrtho, "_glGetBooleanv": _glGetBooleanv, "_glutPostRedisplay": _glutPostRedisplay, "_llvm_lifetime_end": _llvm_lifetime_end, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glVertexAttribPointer": _glVertexAttribPointer, "_glHint": _glHint, "_uselocale": _uselocale, "_clReleaseKernel": _clReleaseKernel, "_glutDisplayFunc": _glutDisplayFunc, "_glBegin": _glBegin, "___cxa_is_number_type": ___cxa_is_number_type, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_isxdigit_l": _isxdigit_l, "_clGetProgramBuildInfo": _clGetProgramBuildInfo, "___cxa_guard_release": ___cxa_guard_release, "_glutInitDisplayMode": _glutInitDisplayMode, "_strtol": _strtol, "_glViewport": _glViewport, "_sin": _sin, "_fscanf": _fscanf, "___setErrNo": ___setErrNo, "___ctype_tolower_loc": ___ctype_tolower_loc, "_newlocale": _newlocale, "_isdigit_l": _isdigit_l, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_freelocale": _freelocale, "___cxa_call_unexpected": ___cxa_call_unexpected, "_glutReshapeFunc": _glutReshapeFunc, "___cxa_get_exception_ptr": ___cxa_get_exception_ptr, "_glEnable": _glEnable, "_printf": _printf, "_glGenTextures": _glGenTextures, "_clReleaseCommandQueue": _clReleaseCommandQueue, "_glGetIntegerv": _glGetIntegerv, "_glGetString": _glGetString, "_glutMainLoop": _glutMainLoop, "_vasprintf": _vasprintf, "_glPushMatrix": _glPushMatrix, "_glAttachShader": _glAttachShader, "_sprintf": _sprintf, "_vsnprintf": _vsnprintf, "_strtoull_l": _strtoull_l, "_read": _read, "_clSetKernelArg": _clSetKernelArg, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_glDetachShader": _glDetachShader, "_gettimeofday": _gettimeofday, "_glutInitWindowPosition": _glutInitWindowPosition, "_catopen": _catopen, "_exit": _exit, "___cxa_guard_abort": ___cxa_guard_abort, "_glVertex2i": _glVertex2i, "_clRetainEvent": _clRetainEvent, "_clReleaseEvent": _clReleaseEvent, "_glColor4f": _glColor4f, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "_lseek": _lseek, "___cxa_allocate_exception": ___cxa_allocate_exception, "_atoi": _atoi, "_strtoll": _strtoll, "_glEnableClientState": _glEnableClientState, "_pwrite": _pwrite, "_open": _open, "_glClearColor": _glClearColor, "_glIsEnabled": _glIsEnabled, "_glBindTexture": _glBindTexture, "_snprintf": _snprintf, "_clReleaseMemObject": _clReleaseMemObject, "___cxa_end_catch": ___cxa_end_catch, "_clGetPlatformIDs": _clGetPlatformIDs, "_strtoull": _strtoull, "_glutIdleFunc": _glutIdleFunc, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_clFinish": _clFinish, "_fseek": _fseek, "_send": _send, "_clGetDeviceIDs": _clGetDeviceIDs, "_fclose": _fclose, "__parseInt": __parseInt, "_sqrtf": _sqrtf, "_glActiveTexture": _glActiveTexture, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_glGetFloatv": _glGetFloatv, "_clGetKernelWorkGroupInfo": _clGetKernelWorkGroupInfo, "_clCreateBuffer": _clCreateBuffer, "_glTexCoordPointer": _glTexCoordPointer, "_recv": _recv, "_copysign": _copysign, "_glCompileShader": _glCompileShader, "_sysconf": _sysconf, "__getFloat": __getFloat, "_abort": _abort, "_clBuildProgram": _clBuildProgram, "_glTexImage2D": _glTexImage2D, "_isspace": _isspace, "_fopen": _fopen, "_clCreateKernel": _clCreateKernel, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "_llvm_lifetime_start": _llvm_lifetime_start, "_clReleaseContext": _clReleaseContext, "_glutKeyboardFunc": _glutKeyboardFunc, "___gxx_personality_v0": ___gxx_personality_v0, "_ungetc": _ungetc, "_glTexParameteri": _glTexParameteri, "_clEnqueueWriteBuffer": _clEnqueueWriteBuffer, "_clGetDeviceInfo": _clGetDeviceInfo, "_strftime_l": _strftime_l, "_fprintf": _fprintf, "_sscanf": _sscanf, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_catgets": _catgets, "_glutInitWindowSize": _glutInitWindowSize, "_glColor3f": _glColor3f, "_asprintf": _asprintf, "_glPopMatrix": _glPopMatrix, "_glMatrixMode": _glMatrixMode, "__exit": __exit, "_clWaitForEvents": _clWaitForEvents, "_glBindAttribLocation": _glBindAttribLocation, "__arraySum": __arraySum, "_emscripten_glColor4f": _emscripten_glColor4f, "_glVertex3f": _glVertex3f, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "_glEnd": _glEnd, "_glLinkProgram": _glLinkProgram, "_clCreateCommandQueue": _clCreateCommandQueue, "_fflush": _fflush, "_clEnqueueReadBuffer": _clEnqueueReadBuffer, "___errno_location": ___errno_location, "_fgetc": _fgetc, "_isxdigit": _isxdigit, "__scanString": __scanString, "_glutCreateWindow": _glutCreateWindow, "_glClientActiveTexture": _glClientActiveTexture, "_glutInit": _glutInit, "_glDisable": _glDisable, "_isdigit": _isdigit, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "_clRetainMemObject": _clRetainMemObject, "_strerror_r": _strerror_r, "_glTexSubImage2D": _glTexSubImage2D, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "___rand_seed": ___rand_seed, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "__ZTVSt9exception": __ZTVSt9exception, "___dso_handle": ___dso_handle, "_glutBitmap8By13": _glutBitmap8By13, "_glutBitmap9By15": _glutBitmap9By15, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _rand = Module["_rand"] = asm["_rand"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a20 = Module["__GLOBAL__I_a20"] = asm["__GLOBAL__I_a20"];
var __GLOBAL__I_a82 = Module["__GLOBAL__I_a82"] = asm["__GLOBAL__I_a82"];
var __GLOBAL__I_a129 = Module["__GLOBAL__I_a129"] = asm["__GLOBAL__I_a129"];
var __GLOBAL__I_a244 = Module["__GLOBAL__I_a244"] = asm["__GLOBAL__I_a244"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vddd = Module["dynCall_vddd"] = asm["dynCall_vddd"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_d = Module["dynCall_d"] = asm["dynCall_d"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



