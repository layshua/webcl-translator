
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "MandelbulbGPU" :
                {
                    "pixels" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_pixels_size"
                        },
                    "_wcl_pixels_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "config" :
                        {
                            "index" : 2,
                            "type" : "struct _Wcl3Struct *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_config_size"
                        },
                    "_wcl_config_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "enableAccumulation" :
                        {
                            "index" : 4,
                            "type" : "int"
                        },
                    "sampleX" :
                        {
                            "index" : 5,
                            "type" : "float"
                        },
                    "sampleY" :
                        {
                            "index" : 6,
                            "type" : "float"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((128 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (128/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((480 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (256/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct _WclStruct {
 float x, y, z;
} Vec;

typedef struct _Wcl2Struct {

 Vec orig, target;

 Vec dir, x, y;
} Camera;

typedef struct _Wcl3Struct {
 unsigned int width, height;
 int superSamplingSize;
 int actvateFastRendering;
 int enableShadow;

 unsigned int maxIterations;
 float epsilon;
 float mu[4];
 float light[3];
 Camera camera;
} RenderingConfig;

typedef struct {
    float4 _wcl_shadowHitPoint;
    uint _wcl_steps;
    float4 _wcl_diffuse;
    float4 _wcl_n;
    float4 _wcl_color;
    float4 _wcl_hitPoint;
    float _wcl_dist;
    float _wcl_tmin;
    float _wcl_tmax;
    uint _wcl_2_steps;
    float _wcl_2_dist;
    const __global Camera *_wcl_camera;
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_private_ALIGNMENT))) _WclPrivates;

typedef struct {
    __global float *MandelbulbGPU__pixels_min;
    __global float *MandelbulbGPU__pixels_max;
    const __global RenderingConfig *MandelbulbGPU__config_min;
    const __global RenderingConfig *MandelbulbGPU__config_max;
} _WclGlobalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclPrivates pa;
    __private uint *pn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_private_1_float__Ptr(float *addr, unsigned size, float * min0, float * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(float *, max0)) );
}
float *_wcl_addr_clamp_private_1_float__Ptr(float *addr, unsigned size, float * min0, float * max0, float * asnull)
{
     return _wcl_addr_check_private_1_float__Ptr(addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_private_1_float4__Ptr(float4 *addr, unsigned size, float4 * min0, float4 * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(float4 *, max0)) );
}
float4 *_wcl_addr_clamp_private_1_float4__Ptr(float4 *addr, unsigned size, float4 * min0, float4 * max0, float4 * asnull)
{
     return _wcl_addr_check_private_1_float4__Ptr(addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_private_1_uint__Ptr(uint *addr, unsigned size, uint * min0, uint * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(uint *, max0)) );
}
uint *_wcl_addr_clamp_private_1_uint__Ptr(uint *addr, unsigned size, uint * min0, uint * max0, uint * asnull)
{
     return _wcl_addr_check_private_1_uint__Ptr(addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_global_2__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max1)) );
}
__global float *_wcl_addr_clamp_global_2__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * asnull)
{
     return _wcl_addr_check_global_2__u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1) ? addr : asnull;
}

bool _wcl_addr_check_global_2_const___u_uglobal__Camera__Ptr(const __global Camera *addr, unsigned size, const __global Camera * min0, const __global Camera * max0, const __global Camera * min1, const __global Camera * max1)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(const __global Camera *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(const __global Camera *, max1)) );
}
const __global Camera *_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr(const __global Camera *addr, unsigned size, const __global Camera * min0, const __global Camera * max0, const __global Camera * min1, const __global Camera * max1, const __global Camera * asnull)
{
     return _wcl_addr_check_global_2_const___u_uglobal__Camera__Ptr(addr, size, min0, max0, min1, max1) ? addr : asnull;
}

bool _wcl_addr_check_global_2_const___u_uglobal__RenderingConfig__Ptr(const __global RenderingConfig *addr, unsigned size, const __global RenderingConfig * min0, const __global RenderingConfig * max0, const __global RenderingConfig * min1, const __global RenderingConfig * max1)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(const __global RenderingConfig *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(const __global RenderingConfig *, max1)) );
}
const __global RenderingConfig *_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr(const __global RenderingConfig *addr, unsigned size, const __global RenderingConfig * min0, const __global RenderingConfig * max0, const __global RenderingConfig * min1, const __global RenderingConfig * max1, const __global RenderingConfig * asnull)
{
     return _wcl_addr_check_global_2_const___u_uglobal__RenderingConfig__Ptr(addr, size, min0, max0, min1, max1) ? addr : asnull;
}

bool _wcl_addr_check_global_2_const___u_uglobal__float__Ptr(const __global float *addr, unsigned size, const __global float * min0, const __global float * max0, const __global float * min1, const __global float * max1)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(const __global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(const __global float *, max1)) );
}
const __global float *_wcl_addr_clamp_global_2_const___u_uglobal__float__Ptr(const __global float *addr, unsigned size, const __global float * min0, const __global float * max0, const __global float * min1, const __global float * max1, const __global float * asnull)
{
     return _wcl_addr_check_global_2_const___u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
;

;

;





 float IterateIntersect(_WclProgramAllocations *_wcl_allocs, const float4 z0, const float4 c0, const uint maxIterations) {
 float4 z = z0;
 float4 c = c0;

 float dr = 1.0f;
 float r2 = dot(z, z);
 float r = sqrt(r2);
 for (int n = 0; (n < maxIterations) && (r < 2.f); ++n) {
  const float zo0 = asin(z.z / r);
  const float zi0 = atan2(z.y, z.x);
  float zr = r2 * r2 * r2 * r;
  const float zo = zo0 * 7.f;
  const float zi = zi0 * 7.f;
  const float czo = cos(zo);

  dr = zr * dr * 7.f + 1.f;
  zr *= r;

  z = zr * (float4)(czo * cos(zi), czo * sin(zi), sin(zo), 0.f);
  z += c;

  r2 = dot(z, z);
  r = sqrt(r2);
 }

 return 0.5f * log(r) * r / dr;
}

 float IntersectBulb(_WclProgramAllocations *_wcl_allocs, const float4 eyeRayOrig, const float4 eyeRayDir,
  const float4 c, const uint maxIterations, const float epsilon,
  const float maxDist, float4 *hitPoint, uint *steps) {
 float dist;
 float4 r0 = eyeRayOrig;
 float distDone = 0.f;

 uint s = 0;
 do {
  _wcl_allocs->pa._wcl_2_dist = IterateIntersect(_wcl_allocs, r0, c, maxIterations);
  distDone += _wcl_allocs->pa._wcl_2_dist;

  if (_wcl_allocs->pa._wcl_2_dist <= 0.f)
   break;

  r0 += eyeRayDir * _wcl_allocs->pa._wcl_2_dist;
  s++;
 } while ((_wcl_allocs->pa._wcl_2_dist > epsilon) && (distDone < maxDist));

 (*(_wcl_addr_clamp_private_1_float4__Ptr((hitPoint), 1, (float4 *)&_wcl_allocs->pa, (float4 *)(&_wcl_allocs->pa + 1), (float4 *)_wcl_allocs->pn))) = r0;
 (*(_wcl_addr_clamp_private_1_uint__Ptr((steps), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))) = s;
 return _wcl_allocs->pa._wcl_2_dist;
}



float IntersectFloorSphere(_WclProgramAllocations *_wcl_allocs, const float4 eyeRayOrig, const float4 eyeRayDir) {
 const float4 op = ((float4)(0.f, -1000.f - 2.f, 0.f, 0.f)) - eyeRayOrig;
 const float b = dot(op, eyeRayDir);
 float det = b * b - dot(op, op) + 1000.f * 1000.f;

 if (det < 0.f)
  return -1.f;
 else
  det = sqrt(det);

 float t = b - det;
 if (t > 0.f)
  return t;
 else {

  return -1.f;
 }
}

int IntersectBoundingSphere(_WclProgramAllocations *_wcl_allocs, const float4 eyeRayOrig, const float4 eyeRayDir,
  float *tmin, float*tmax) {
 const float4 op = -eyeRayOrig;
 const float b = dot(op, eyeRayDir);
 float det = b * b - dot(op, op) + 4.f;

 if (det < 0.f)
  return 0;
 else
  det = sqrt(det);

 float t1 = b - det;
 float t2 = b + det;
 if (t1 > 0.f) {
  (*(_wcl_addr_clamp_private_1_float__Ptr((tmin), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = t1;
  (*(_wcl_addr_clamp_private_1_float__Ptr((tmax), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = t2;
  return 1;
 } else {
  if (t2 > 0.f) {

   (*(_wcl_addr_clamp_private_1_float__Ptr((tmin), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.f;
   (*(_wcl_addr_clamp_private_1_float__Ptr((tmax), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = t2;

   return 1;
  } else
   return 0;
 }
}

 float4 NormEstimate(_WclProgramAllocations *_wcl_allocs, const float4 p, const float4 c,
  const float delta, const uint maxIterations) {
 const float4 qP = p;
 const float4 gx1 = qP - (float4)(delta, 0.f, 0.f, 0.f);
 const float4 gx2 = qP + (float4)(delta, 0.f, 0.f, 0.f);
 const float4 gy1 = qP - (float4)(0.f, delta, 0.f, 0.f);
 const float4 gy2 = qP + (float4)(0.f, delta, 0.f, 0.f);
 const float4 gz1 = qP - (float4)(0.f, 0.f, delta, 0.f);
 const float4 gz2 = qP + (float4)(0.f, 0.f, delta, 0.f);

 const float gradX = length(IterateIntersect(_wcl_allocs, gx2, c, maxIterations)) -
  length(IterateIntersect(_wcl_allocs, gx1, c, maxIterations));
 const float gradY = length(IterateIntersect(_wcl_allocs, gy2, c, maxIterations)) -
  length(IterateIntersect(_wcl_allocs, gy1, c, maxIterations));
 const float gradZ = length(IterateIntersect(_wcl_allocs, gz2, c, maxIterations)) -
  length(IterateIntersect(_wcl_allocs, gz1, c, maxIterations));

 const float4 N = normalize((float4)(gradX, gradY, gradZ, 0.f));

 return N;
}

 float4 Phong(_WclProgramAllocations *_wcl_allocs, const float4 light, const float4 eye, const float4 pt,
  const float4 N, const float4 diffuse) {
 const float4 ambient = (float4) (0.05f, 0.05f, 0.05f, 0.f);
 float4 L = normalize(light - pt);
 float NdotL = dot(N, L);
 if (NdotL < 0.f)
  return diffuse * ambient;

 const float specularExponent = 30.f;
 const float specularity = 0.65f;

 float4 E = normalize(eye - pt);
 float4 H = (L + E) * (float)0.5f;

 return diffuse * NdotL +
   specularity * pow(dot(N, H), specularExponent) +
   diffuse * ambient;
}

__kernel void MandelbulbGPU(
 __global float *pixels, ulong _wcl_pixels_size,
 const __global RenderingConfig *config, ulong _wcl_config_size,
 const int enableAccumulation,
 const float sampleX,
 const float sampleY) {
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &pixels[0], &pixels[_wcl_pixels_size],&config[0], &config[_wcl_config_size] },
        0,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.MandelbulbGPU__pixels_min, _wcl_allocs->gl.MandelbulbGPU__pixels_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.MandelbulbGPU__config_min, _wcl_allocs->gl.MandelbulbGPU__config_max, (__global uint*)0));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    const int gid = get_global_id(0);
 const unsigned width = (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).width;
 const unsigned height = (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).height;

 const unsigned int x = gid % width;
 const int y = gid / width;


 if (y >= height)
  return;

 const float epsilon = (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).actvateFastRendering ? ((*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).epsilon * (1.5f / 0.75f)) : (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).epsilon;
 const uint maxIterations = (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).actvateFastRendering ? (max(3u, (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).maxIterations) - 2u) : (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).maxIterations;

 const float4 mu = (float4)((*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).mu[0], (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).mu[1], (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).mu[2], (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).mu[3]);
 const float4 light = (float4)((*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).light[0], (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).light[1], (*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).light[2], 0.f);
 const __global Camera *camera = &(*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).camera;;_wcl_allocs->pa._wcl_camera = camera;





 const float invWidth = 1.f / width;
 const float invHeight = 1.f / height;
 const float kcx = (x + sampleX) * invWidth - .5f;
 const float4 kcx4 = (float4)kcx;
 const float kcy = (y + sampleY) * invHeight - .5f;
 const float4 kcy4 = (float4)kcy;

 const float4 cameraX = (float4)((*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).x.x, (*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).x.y, (*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).x.z, 0.f);
 const float4 cameraY = (float4)((*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).y.x, (*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).y.y, (*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).y.z, 0.f);
 const float4 cameraDir = (float4)((*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).dir.x, (*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).dir.y, (*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).dir.z, 0.f);
 const float4 cameraOrig = (float4)((*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).orig.x, (*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).orig.y, (*(_wcl_addr_clamp_global_2_const___u_uglobal__Camera__Ptr((_wcl_allocs->pa._wcl_camera), 1, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global Camera *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global Camera *)_wcl_allocs->gn))).orig.z, 0.f);

 const float4 eyeRayDir = normalize(cameraX * kcx4 + cameraY * kcy4 + cameraDir);
 const float4 eyeRayOrig = eyeRayDir * (float4)0.1f + cameraOrig;





 int useAO = 1;
 float4 diffuse, n, color;

 float4 hitPoint;
 float dist, tmin, tmax;
 if (IntersectBoundingSphere(_wcl_allocs, eyeRayOrig, eyeRayDir, &_wcl_allocs->pa._wcl_tmin, &_wcl_allocs->pa._wcl_tmax)) {




  uint steps;
  float4 rayOrig = eyeRayOrig + eyeRayDir * (float4)_wcl_allocs->pa._wcl_tmin;
  _wcl_allocs->pa._wcl_dist = IntersectBulb(_wcl_allocs, rayOrig, eyeRayDir, mu, maxIterations,
    epsilon, _wcl_allocs->pa._wcl_tmax - _wcl_allocs->pa._wcl_tmin, &_wcl_allocs->pa._wcl_hitPoint, &_wcl_allocs->pa._wcl_2_steps);

  if (_wcl_allocs->pa._wcl_dist <= epsilon) {

   _wcl_allocs->pa._wcl_diffuse = (float4) (1.f, 0.35f, 0.15f, 0.f);
   _wcl_allocs->pa._wcl_n = NormEstimate(_wcl_allocs, _wcl_allocs->pa._wcl_hitPoint, mu, _wcl_allocs->pa._wcl_dist, maxIterations);
  } else
   _wcl_allocs->pa._wcl_dist = -1.f;
 } else
  _wcl_allocs->pa._wcl_dist = -1.f;





 if (_wcl_allocs->pa._wcl_dist < 0.f) {
  _wcl_allocs->pa._wcl_dist = IntersectFloorSphere(_wcl_allocs, eyeRayOrig, eyeRayDir);

  if (_wcl_allocs->pa._wcl_dist >= 0.f) {

   _wcl_allocs->pa._wcl_hitPoint = eyeRayOrig + eyeRayDir * (float4)_wcl_allocs->pa._wcl_dist;
   _wcl_allocs->pa._wcl_n = _wcl_allocs->pa._wcl_hitPoint - ((float4)(0.f, -1000.f - 2.f, 0.f, 0.f));
   _wcl_allocs->pa._wcl_n = normalize(_wcl_allocs->pa._wcl_n);

   const int ix = (_wcl_allocs->pa._wcl_hitPoint.x > 0.f) ? _wcl_allocs->pa._wcl_hitPoint.x : (1.f - _wcl_allocs->pa._wcl_hitPoint.x);
   const int iz = (_wcl_allocs->pa._wcl_hitPoint.z > 0.f) ? _wcl_allocs->pa._wcl_hitPoint.z : (1.f - _wcl_allocs->pa._wcl_hitPoint.z);
   if ((ix + iz) % 2)
    _wcl_allocs->pa._wcl_diffuse = (float4) (0.75f, 0.75f, 0.75f, 0.f);
   else
    _wcl_allocs->pa._wcl_diffuse = (float4) (0.75f, 0.f, 0.f, 0.f);
   useAO = 0;
  } else {

   _wcl_allocs->pa._wcl_color = (float4)(0.f, 0.1f, 0.3f, 0.f);
  }
 } else {

  _wcl_allocs->pa._wcl_color = (float4)(0.f, 0.1f, 0.3f, 0.f);
 }





 if (_wcl_allocs->pa._wcl_dist >= 0.f) {
  float shadowFactor = 1.f;
  if ((*(_wcl_addr_clamp_global_2_const___u_uglobal__RenderingConfig__Ptr((config), 1, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_min, (const __global RenderingConfig *)_wcl_allocs->gl.MandelbulbGPU__config_max, (const __global RenderingConfig *)_wcl_allocs->gn))).enableShadow) {
   float4 L = normalize(light - _wcl_allocs->pa._wcl_hitPoint);
   float4 rO = _wcl_allocs->pa._wcl_hitPoint + _wcl_allocs->pa._wcl_n * 1e-2f;
   float4 shadowHitPoint;


   if (IntersectBoundingSphere(_wcl_allocs, rO, L, &_wcl_allocs->pa._wcl_tmin, &_wcl_allocs->pa._wcl_tmax)) {
    float shadowDistSet = _wcl_allocs->pa._wcl_tmin;
    uint steps;

    rO = rO + L * (float4)shadowDistSet;
    shadowDistSet = IntersectBulb(_wcl_allocs, rO, L, mu, maxIterations, epsilon,
      _wcl_allocs->pa._wcl_tmax - _wcl_allocs->pa._wcl_tmin, &_wcl_allocs->pa._wcl_shadowHitPoint, &_wcl_allocs->pa._wcl_steps);
    if (shadowDistSet < epsilon) {
     if (useAO) {

      shadowFactor = 0.6f - min(_wcl_allocs->pa._wcl_steps / 255.f, 0.5f);
     } else
      shadowFactor = 0.6f;
    }
   }
  }





  _wcl_allocs->pa._wcl_color = Phong(_wcl_allocs, light, eyeRayOrig, _wcl_allocs->pa._wcl_hitPoint, _wcl_allocs->pa._wcl_n, _wcl_allocs->pa._wcl_diffuse) * shadowFactor;
 }





 int offset = 3 * (x + y * width);
 _wcl_allocs->pa._wcl_color = clamp(_wcl_allocs->pa._wcl_color, (float4)(0.f, 0.f ,0.f, 0.f), (float4)(1.f, 1.f ,1.f, 0.f));
 if (enableAccumulation) {
  (*(_wcl_addr_clamp_global_2__u_uglobal__float__Ptr((pixels)+(offset++), 1, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_max, (__global float *)_wcl_allocs->gn))) += _wcl_allocs->pa._wcl_color.s0;
  (*(_wcl_addr_clamp_global_2__u_uglobal__float__Ptr((pixels)+(offset++), 1, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_max, (__global float *)_wcl_allocs->gn))) += _wcl_allocs->pa._wcl_color.s1;
  (*(_wcl_addr_clamp_global_2__u_uglobal__float__Ptr((pixels)+(offset), 1, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_max, (__global float *)_wcl_allocs->gn))) += _wcl_allocs->pa._wcl_color.s2;
 } else {
  (*(_wcl_addr_clamp_global_2__u_uglobal__float__Ptr((pixels)+(offset++), 1, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_max, (__global float *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_color.s0;
  (*(_wcl_addr_clamp_global_2__u_uglobal__float__Ptr((pixels)+(offset++), 1, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_max, (__global float *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_color.s1;
  (*(_wcl_addr_clamp_global_2__u_uglobal__float__Ptr((pixels)+(offset), 1, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__pixels_max, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_min, (__global float *)_wcl_allocs->gl.MandelbulbGPU__config_max, (__global float *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_color.s2;
 }
}
