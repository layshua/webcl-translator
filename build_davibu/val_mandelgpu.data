
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "mandelGPU" :
                {
                    "pixels" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_pixels_size"
                        },
                    "_wcl_pixels_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "width" :
                        {
                            "index" : 2,
                            "type" : "int"
                        },
                    "height" :
                        {
                            "index" : 3,
                            "type" : "int"
                        },
                    "scale" :
                        {
                            "index" : 4,
                            "type" : "float"
                        },
                    "offsetX" :
                        {
                            "index" : 5,
                            "type" : "float"
                        },
                    "offsetY" :
                        {
                            "index" : 6,
                            "type" : "float"
                        },
                    "maxIterations" :
                        {
                            "index" : 7,
                            "type" : "int"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    __global int *mandelGPU__pixels_min;
    __global int *mandelGPU__pixels_max;
} _WclGlobalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_1__u_uglobal__int__Ptr(__global int *addr, unsigned size, __global int * min0, __global int * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max0)) );
}
__global int *_wcl_addr_clamp_global_1__u_uglobal__int__Ptr(__global int *addr, unsigned size, __global int * min0, __global int * max0, __global int * asnull)
{
     return _wcl_addr_check_global_1__u_uglobal__int__Ptr(addr, size, min0, max0) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
/*
Copyright (c) 2009 David Bucciarelli (davibu@interfree.it)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

 int colormap(_WclProgramAllocations *_wcl_allocs, const int maxIterations, int i) {
 if (i == maxIterations)
  return 0;
 else {
  i = i % 512;
  if (i > 255)
   return 511 - i;
  else
   return i;
 }
}

__kernel void mandelGPU(
  __global int *pixels, ulong _wcl_pixels_size,
  const int width,
  const int height,
  const float scale,
  const float offsetX,
  const float offsetY,
  const int maxIterations
  ) {
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &pixels[0], &pixels[_wcl_pixels_size] },
        0
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.mandelGPU__pixels_min, _wcl_allocs->gl.mandelGPU__pixels_max, (__global uint*)0);
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

 const int gid = get_global_id(0);
 const int gid4 = 4 * gid;
 // Szaq's patch for NVIDIA OpenCL and Windows
 const float4 maxSize = (float4)max(width, height);
 const float4 kx = (scale / 2.f) * width;
 const float4 ky = (scale / 2.f) * height;

 const uint4 tid = (uint4)(gid4, gid4 + 1, gid4 + 2, gid4 +3);
 // Szaq's patch for NVIDIA OpenCL and Windows
 const uint4 width4 = (uint4)width;
 const uint4 screenX = tid % width4;
 const uint4 screenY = tid / width4;

 // Check if we have something to do
 if ((screenY.s0 >= height) ||
   (screenY.s1 >= height) ||
   (screenY.s2 >= height) ||
   (screenY.s3 >= height))
  return;

 const float4 fscreenX = convert_float4(screenX);
 const float4 fscreenY = convert_float4(screenY);

 const float4 x0 = ((fscreenX * ((float4)scale)) - kx) / maxSize + (float4)offsetX;
 const float4 y0 = ((fscreenY * ((float4)scale)) - ky) / maxSize + (float4)offsetY;

 float4 x = x0;
 float4 y = y0;
 float4 x2 = x * x;
 float4 y2 = y * y;

 const float4 two = 2.f;
 int4 iter = 0;
 const int4 maxIterations4 = maxIterations;
 const int4 one = (int4)( 1, 1, 1, 1);
 for (;;) {
  y = ((float4)2.f) * x * y + y0;
  x = x2 - y2 + x0;

  x2 = x * x;
  y2 = y * y;

  const float4 x2y2 = x2 + y2;
  const int4 notEscaped = (x2y2 <= (float4)4.f);
  const int4 notMaxIter = (iter < maxIterations4);

  // It looks like ATI's compiler is bugged and doesn't accept: notEscaped && notMaxIter;
  // And for some unknown reason (notEscaped & notMaxIter) is very very slow
  //const int4 notHaveToExit = (notEscaped & notMaxIter);
  const int4 notHaveToExit = (int4)(notEscaped.s0 & notMaxIter.s0,
     notEscaped.s1 & notMaxIter.s1,
    notEscaped.s2 & notMaxIter.s2,
    notEscaped.s3 & notMaxIter.s3);
  if (!any(notHaveToExit))
   break;

  iter += (one & notHaveToExit);
 }

 const int s0 = colormap(_wcl_allocs, maxIterations, iter.s0);
 const int s1 = colormap(_wcl_allocs, maxIterations, iter.s1);
 const int s2 = colormap(_wcl_allocs, maxIterations, iter.s2);
 const int s3 = colormap(_wcl_allocs, maxIterations, iter.s3);

 (*(_wcl_addr_clamp_global_1__u_uglobal__int__Ptr((pixels)+(gid), 1, (__global int *)_wcl_allocs->gl.mandelGPU__pixels_min, (__global int *)_wcl_allocs->gl.mandelGPU__pixels_max, (__global int *)_wcl_allocs->gn))) = s0 | (s1 << 8) | (s2 << 16) | (s3 << 24);
}
