
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = '../build/osx_trajectories.data';
    var REMOTE_PACKAGE_NAME = (Module['filePackagePrefixURL'] || '') + 'osx_trajectories.data';
    var REMOTE_PACKAGE_SIZE = 5006;
    var PACKAGE_UUID = '6e90c070-572b-4d73-b7c0-ab1df11e02d3';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'Sources', true, true);
Module['FS_createPath']('/Sources', 'Kernel', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 5006, 0, 0).open('GET', '/Sources/Kernel/TrajectoriesKernel.cl');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/Sources/Kernel/TrajectoriesKernel.cl"].onload();
          Module['removeRunDependency']('datafile_../build/osx_trajectories.data');

    };
    Module['addRunDependency']('datafile_../build/osx_trajectories.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 16056;

var _stdout;
var _stdout=_stdout=allocate(1, "i32*", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate(1, "i32*", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate(1, "i32*", ALLOC_STATIC);

/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } });

























































































































































































































































































































var ___dso_handle;
var ___dso_handle=___dso_handle=allocate(1, "i32*", ALLOC_STATIC);


















































































































































var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,136,45,0,0,4,3,0,0,252,2,0,0,168,0,0,0,152,1,0,0,212,0,0,0,110,0,0,0,250,0,0,0,28,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,152,45,0,0,4,3,0,0,230,0,0,0,168,0,0,0,152,1,0,0,212,0,0,0,68,2,0,0,22,1,0,0,174,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;














































































































































































var __ZTISt9exception;
var __ZTISt9exception=__ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);













































































































































































































































































































var __ZN6OpenCL6BufferC1EPKNS_7ProgramE;
var __ZN6OpenCL6BufferD1Ev;
var __ZN6OpenCL4FileD1Ev;
var __ZN6OpenCL6KernelC1EPKNS_7ProgramE;
var __ZN6OpenCL6KernelD1Ev;
var __ZN6OpenCL7ProgramD1Ev;
var __ZN10TrajectoryC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEff;
var __ZN10TrajectoryD1Ev;
var __ZNSt13runtime_errorC1EPKc;
var __ZNSt13runtime_errorD1Ev;
var __ZNSt12length_errorD1Ev;
var __ZNSt3__16localeC1Ev;
var __ZNSt3__16localeC1ERKS0_;
var __ZNSt3__16localeD1Ev;
var __ZNSt8bad_castC1Ev;
var __ZNSt8bad_castD1Ev;
/* memory initializer */ allocate([95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,65,112,114,0,0,0,0,0,77,97,114,0,0,0,0,0,70,101,98,0,0,0,0,0,74,97,110,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,114,43,0,0,0,0,0,0,79,99,116,111,98,101,114,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,70,105,108,101,32,45,32,34,0,0,0,0,0,0,0,65,117,103,117,115,116,0,0,74,117,108,121,0,0,0,0,74,117,110,101,0,0,0,0,77,97,121,0,0,0,0,0,65,112,114,105,108,0,0,0,77,97,114,99,104,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,80,114,111,103,114,97,109,32,45,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,112,108,97,102,111,114,109,32,97,116,116,114,105,98,117,116,101,115,33,0,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,74,97,110,117,97,114,121,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,62,62,32,69,78,68,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,80,114,111,103,114,97,109,32,45,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,97,32,100,101,118,105,99,101,32,103,114,111,117,112,33,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,75,101,114,110,101,108,32,45,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,107,101,114,110,101,108,32,97,114,103,117,109,101,110,116,115,33,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,32,32,32,32,32,32,32,115,112,101,101,100,58,32,124,124,32,118,40,116,41,32,124,124,32,61,32,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,80,114,111,103,114,97,109,32,45,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,97,32,99,111,109,112,117,116,101,32,99,111,110,116,101,120,116,33,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,34,32,105,110,116,111,32,116,104,101,32,109,97,112,33,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,75,101,114,110,101,108,32,45,32,70,97,105,108,101,100,32,116,111,32,118,97,108,105,100,97,116,101,32,116,104,101,32,114,101,102,101,114,101,110,99,101,32,99,111,117,110,116,33,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,80,77,0,0,0,0,0,0,32,32,32,32,86,101,108,111,99,105,116,121,58,32,40,32,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,80,114,111,103,114,97,109,32,45,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,97,32,99,111,109,109,97,110,100,32,113,117,101,117,101,33,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,75,101,114,110,101,108,32,45,32,70,97,105,108,101,100,32,116,111,32,105,110,115,101,114,116,32,116,104,101,32,107,101,114,110,101,108,32,34,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,75,101,114,110,101,108,32,45,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,98,117,102,102,101,114,33,0,0,0,0,0,0,32,41,0,0,0,0,0,0,62,62,32,66,69,71,73,78,0,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,80,114,111,103,114,97,109,32,45,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,112,114,111,103,114,97,109,33,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,75,101,114,110,101,108,32,45,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,97,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,33,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,70,105,108,101,32,45,32,78,85,76,76,32,102,105,108,101,32,110,97,109,101,33,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,75,101,114,110,101,108,32,45,32,70,97,105,108,101,100,32,116,111,32,82,101,97,100,32,102,114,111,109,32,116,104,101,32,100,101,118,105,99,101,33,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,44,32,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,80,114,111,103,114,97,109,32,45,32,70,97,105,108,101,100,32,116,111,32,98,117,105,108,100,32,112,114,111,103,114,97,109,32,101,120,101,99,117,116,97,98,108,101,33,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,75,101,114,110,101,108,32,45,32,73,110,118,97,108,105,100,32,107,101,114,110,101,108,32,110,97,109,101,33,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,34,32,110,111,116,32,111,112,101,110,101,100,33,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,102,97,108,115,101,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,80,114,111,103,114,97,109,32,45,32,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,116,104,101,32,102,105,108,101,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,115,111,117,114,99,101,33,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,116,114,117,101,0,0,0,0,32,32,32,32,80,111,115,105,116,105,111,110,58,32,40,32,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,69,114,114,111,114,32,105,110,32,107,101,114,110,101,108,58,32,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,75,101,114,110,101,108,32,45,32,70,97,105,108,101,100,32,116,111,32,114,101,116,114,105,101,118,101,32,107,101,114,110,101,108,32,119,111,114,107,32,103,114,111,117,112,32,105,110,102,111,33,0,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,34,32,102,105,108,101,32,104,97,115,32,115,105,122,101,32,48,33,0,0,0,0,0,0,84,114,97,106,101,99,116,111,114,121,50,0,0,0,0,0,110,97,110,0,0,0,0,0,67,0,0,0,0,0,0,0,97,43,98,0,0,0,0,0,118,101,99,116,111,114,0,0,119,43,98,0,0,0,0,0,37,46,48,76,102,0,0,0,114,43,98,0,0,0,0,0,62,62,32,32,32,32,32,32,84,105,109,101,58,32,116,32,61,32,0,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,114,98,0,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,37,76,102,0,0,0,0,0,84,104,117,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,97,98,0,0,0,0,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,77,111,110,100,97,121,0,0,83,117,110,100,97,121,0,0,119,98,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,62,62,32,69,82,82,79,82,58,32,79,112,101,110,67,76,32,75,101,114,110,101,108,32,45,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,34,32,102,97,105,108,101,100,32,97,108,108,111,99,97,116,105,110,103,32,109,101,109,111,114,121,32,116,111,32,114,101,97,100,32,116,104,101,32,115,111,117,114,99,101,33,0,0,97,43,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,68,101,99,0,0,0,0,0,78,111,118,0,0,0,0,0,79,99,116,0,0,0,0,0,83,101,112,0,0,0,0,0,65,117,103,0,0,0,0,0,119,43,0,0,0,0,0,0,84,114,97,106,101,99,116,111,114,121,49,0,0,0,0,0,83,111,117,114,99,101,115,47,75,101,114,110,101,108,47,84,114,97,106,101,99,116,111,114,105,101,115,75,101,114,110,101,108,46,99,108,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,104,39,0,0,74,0,0,0,72,1,0,0,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,39,0,0,42,2,0,0,188,1,0,0,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,39,0,0,196,0,0,0,34,3,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,39,0,0,6,1,0,0,18,0,0,0,122,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,39,0,0,6,1,0,0,40,0,0,0,122,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,39,0,0,196,1,0,0,232,0,0,0,126,0,0,0,238,1,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,39,0,0,20,3,0,0,250,1,0,0,126,0,0,0,234,2,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,186,1,0,0,254,1,0,0,126,0,0,0,240,1,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,40,0,0,26,3,0,0,134,1,0,0,126,0,0,0,224,1,0,0,54,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,40,0,0,120,2,0,0,82,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,40,0,0,10,3,0,0,2,1,0,0,126,0,0,0,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,40,0,0,184,1,0,0,54,1,0,0,126,0,0,0,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,96,0,0,0,56,1,0,0,126,0,0,0,176,2,0,0,22,0,0,0,0,2,0,0,30,0,0,0,210,0,0,0,178,2,0,0,238,0,0,0,248,255,255,255,0,41,0,0,122,0,0,0,50,0,0,0,188,0,0,0,84,0,0,0,10,0,0,0,174,0,0,0,206,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,0,0,250,2,0,0,188,2,0,0,126,0,0,0,118,0,0,0,138,0,0,0,210,2,0,0,146,1,0,0,172,0,0,0,16,0,0,0,148,2,0,0,248,255,255,255,40,41,0,0,120,1,0,0,92,2,0,0,152,2,0,0,196,2,0,0,52,2,0,0,252,0,0,0,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,41,0,0,220,0,0,0,4,2,0,0,126,0,0,0,18,1,0,0,236,0,0,0,124,0,0,0,124,1,0,0,208,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,41,0,0,164,0,0,0,182,0,0,0,126,0,0,0,244,0,0,0,248,1,0,0,166,0,0,0,232,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,41,0,0,254,2,0,0,2,0,0,0,126,0,0,0,158,1,0,0,12,3,0,0,72,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,41,0,0,120,0,0,0,142,2,0,0,126,0,0,0,186,2,0,0,218,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,41,0,0,166,2,0,0,66,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,41,0,0,68,0,0,0,132,1,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,41,0,0,14,0,0,0,202,1,0,0,126,0,0,0,108,0,0,0,94,0,0,0,88,0,0,0,92,0,0,0,86,0,0,0,104,0,0,0,102,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,41,0,0,14,1,0,0,38,0,0,0,126,0,0,0,36,2,0,0,40,2,0,0,26,2,0,0,38,2,0,0,12,1,0,0,30,2,0,0,28,2,0,0,206,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,42,0,0,98,0,0,0,52,0,0,0,126,0,0,0,104,2,0,0,100,2,0,0,90,2,0,0,94,2,0,0,246,1,0,0,98,2,0,0,88,2,0,0,110,2,0,0,108,2,0,0,106,2,0,0,108,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,42,0,0,142,0,0,0,4,0,0,0,126,0,0,0,246,2,0,0,232,2,0,0,226,2,0,0,228,2,0,0,204,2,0,0,230,2,0,0,224,2,0,0,240,2,0,0,238,2,0,0,236,2,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,42,0,0,208,0,0,0,254,0,0,0,126,0,0,0,104,1,0,0,22,2,0,0,58,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,42,0,0,66,0,0,0,210,1,0,0,126,0,0,0,16,2,0,0,134,2,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,42,0,0,24,0,0,0,244,1,0,0,126,0,0,0,82,0,0,0,234,1,0,0,228,1,0,0,174,2,0,0,78,2,0,0,164,2,0,0,138,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,42,0,0,218,1,0,0,116,1,0,0,126,0,0,0,214,2,0,0,16,3,0,0,46,2,0,0,24,1,0,0,48,0,0,0,50,2,0,0,34,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,42,0,0,218,1,0,0,42,0,0,0,126,0,0,0,4,1,0,0,116,0,0,0,242,0,0,0,70,2,0,0,68,1,0,0,180,1,0,0,242,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,42,0,0,218,1,0,0,32,1,0,0,126,0,0,0,24,2,0,0,204,1,0,0,132,2,0,0,162,0,0,0,148,1,0,0,130,1,0,0,24,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,42,0,0,218,1,0,0,80,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,42,0,0,152,0,0,0,96,1,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,43,0,0,218,1,0,0,224,0,0,0,126,0,0,0,138,1,0,0,194,0,0,0,92,1,0,0,6,3,0,0,198,0,0,0,56,2,0,0,8,2,0,0,62,0,0,0,128,0,0,0,156,2,0,0,42,1,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,43,0,0,32,3,0,0,90,0,0,0,126,0,0,0,156,0,0,0,56,0,0,0,110,1,0,0,144,2,0,0,148,0,0,0,114,1,0,0,190,1,0,0,182,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,43,0,0,186,0,0,0,180,2,0,0,176,1,0,0,64,2,0,0,80,1,0,0,114,2,0,0,124,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,43,0,0,218,1,0,0,234,0,0,0,126,0,0,0,24,2,0,0,204,1,0,0,132,2,0,0,162,0,0,0,148,1,0,0,130,1,0,0,24,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,43,0,0,218,1,0,0,192,1,0,0,126,0,0,0,24,2,0,0,204,1,0,0,132,2,0,0,162,0,0,0,148,1,0,0,130,1,0,0,24,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,43,0,0,100,1,0,0,216,2,0,0,202,0,0,0,156,1,0,0,8,1,0,0,62,2,0,0,10,2,0,0,82,2,0,0,136,2,0,0,154,0,0,0,144,0,0,0,134,0,0,0,28,3,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,43,0,0,20,0,0,0,76,1,0,0,6,2,0,0,198,2,0,0,194,2,0,0,18,2,0,0,20,1,0,0,252,1,0,0,106,1,0,0,34,0,0,0,64,0,0,0,218,2,0,0,86,1,0,0,192,2,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,160,43,0,0,172,1,0,0,216,1,0,0,148,255,255,255,148,255,255,255,160,43,0,0,44,1,0,0,70,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,208,43,0,0,114,0,0,0,128,2,0,0,252,255,255,255,252,255,255,255,208,43,0,0,142,1,0,0,98,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,232,43,0,0,168,2,0,0,220,2,0,0,252,255,255,255,252,255,255,255,232,43,0,0,52,1,0,0,58,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,44,0,0,240,0,0,0,36,3,0,0,248,255,255,255,248,255,255,255,0,44,0,0,220,1,0,0,212,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,24,44,0,0,50,1,0,0,86,2,0,0,248,255,255,255,248,255,255,255,24,44,0,0,126,1,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,44,0,0,146,2,0,0,170,0,0,0,160,1,0,0,168,1,0,0,94,1,0,0,136,0,0,0,16,1,0,0,252,1,0,0,106,1,0,0,32,2,0,0,64,0,0,0,88,1,0,0,86,1,0,0,202,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,44,0,0,76,2,0,0,222,1,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,44,0,0,0,3,0,0,226,1,0,0,190,0,0,0,156,1,0,0,8,1,0,0,62,2,0,0,46,1,0,0,82,2,0,0,136,2,0,0,154,0,0,0,144,0,0,0,134,0,0,0,102,2,0,0,222,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,44,0,0,164,1,0,0,118,2,0,0,62,1,0,0,198,2,0,0,194,2,0,0,18,2,0,0,12,2,0,0,252,1,0,0,106,1,0,0,34,0,0,0,64,0,0,0,218,2,0,0,244,2,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,44,0,0,182,2,0,0,140,1,0,0,126,0,0,0,118,1,0,0,158,2,0,0,60,1,0,0,8,3,0,0,60,0,0,0,34,1,0,0,30,1,0,0,222,0,0,0,112,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,44,0,0,48,1,0,0,150,0,0,0,126,0,0,0,130,2,0,0,12,0,0,0,80,2,0,0,184,2,0,0,200,2,0,0,248,0,0,0,140,2,0,0,212,1,0,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,44,0,0,190,2,0,0,70,1,0,0,126,0,0,0,106,0,0,0,64,1,0,0,76,0,0,0,166,1,0,0,22,3,0,0,214,1,0,0,48,2,0,0,236,1,0,0,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,45,0,0,216,0,0,0,200,1,0,0,126,0,0,0,84,2,0,0,112,2,0,0,26,1,0,0,154,2,0,0,0,1,0,0,204,0,0,0,178,1,0,0,126,2,0,0,116,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,45,0,0,20,2,0,0,36,0,0,0,102,1,0,0,156,1,0,0,8,1,0,0,62,2,0,0,10,2,0,0,82,2,0,0,136,2,0,0,128,1,0,0,230,1,0,0,178,0,0,0,28,3,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,45,0,0,28,0,0,0,170,2,0,0,74,2,0,0,198,2,0,0,194,2,0,0,18,2,0,0,20,1,0,0,252,1,0,0,106,1,0,0,60,2,0,0,132,0,0,0,32,0,0,0,86,1,0,0,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,45,0,0,208,2,0,0,40,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,45,0,0,66,2,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,45,0,0,4,3,0,0,44,2,0,0,168,0,0,0,152,1,0,0,212,0,0,0,72,0,0,0,162,2,0,0,36,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,45,0,0,246,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,60,23,0,0,212,45,0,0,232,45,0,0,80,23,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,54,79,112,101,110,67,76,55,80,114,111,103,114,97,109,69,0,0,0,0,0,0,0,78,54,79,112,101,110,67,76,52,70,105,108,101,69,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,49,48,84,114,97,106,101,99,116,111,114,121,0,0,0,0,0,0,0,0,48,27,0,0,0,0,0,0,64,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,27,0,0,168,39,0,0,0,0,0,0,0,0,0,0,144,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,27,0,0,224,26,0,0,184,27,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,136,44,0,0,0,0,0,0,224,26,0,0,0,28,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,144,44,0,0,0,0,0,0,224,26,0,0,72,28], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([2,0,0,0,232,42,0,0,2,0,0,0,152,44,0,0,0,0,0,0,224,26,0,0,144,28,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,160,44,0,0,0,0,0,0,0,0,0,0,216,28,0,0,176,41,0,0,0,0,0,0,0,0,0,0,8,29,0,0,176,41,0,0,0,0,0,0,224,26,0,0,56,29,0,0,0,0,0,0,1,0,0,0,184,43,0,0,0,0,0,0,224,26,0,0,80,29,0,0,0,0,0,0,1,0,0,0,184,43,0,0,0,0,0,0,224,26,0,0,104,29,0,0,0,0,0,0,1,0,0,0,192,43,0,0,0,0,0,0,224,26,0,0,128,29,0,0,0,0,0,0,1,0,0,0,192,43,0,0,0,0,0,0,224,26,0,0,152,29,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,56,45,0,0,0,8,0,0,224,26,0,0,224,29,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,56,45,0,0,0,8,0,0,224,26,0,0,40,30,0,0,0,0,0,0,3,0,0,0,232,42,0,0,2,0,0,0,184,39,0,0,2,0,0,0,72,43,0,0,0,8,0,0,224,26,0,0,112,30,0,0,0,0,0,0,3,0,0,0,232,42,0,0,2,0,0,0,184,39,0,0,2,0,0,0,80,43,0,0,0,8,0,0,0,0,0,0,184,30,0,0,232,42,0,0,0,0,0,0,0,0,0,0,208,30,0,0,232,42,0,0,0,0,0,0,224,26,0,0,232,30,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,200,43,0,0,2,0,0,0,224,26,0,0,0,31,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,200,43,0,0,2,0,0,0,0,0,0,0,24,31,0,0,0,0,0,0,48,31,0,0,64,44,0,0,0,0,0,0,224,26,0,0,80,31,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,96,40,0,0,0,0,0,0,224,26,0,0,152,31,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,120,40,0,0,0,0,0,0,224,26,0,0,224,31,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,144,40,0,0,0,0,0,0,224,26,0,0,40,32,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,168,40,0,0,0,0,0,0,0,0,0,0,112,32,0,0,232,42,0,0,0,0,0,0,0,0,0,0,136,32,0,0,232,42,0,0,0,0,0,0,224,26,0,0,160,32,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,80,44,0,0,2,0,0,0,224,26,0,0,200,32,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,80,44,0,0,2,0,0,0,224,26,0,0,240,32,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,80,44,0,0,2,0,0,0,224,26,0,0,24,33,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,80,44,0,0,2,0,0,0,0,0,0,0,64,33,0,0,176,43,0,0,0,0,0,0,0,0,0,0,88,33,0,0,232,42,0,0,0,0,0,0,224,26,0,0,112,33,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,48,45,0,0,2,0,0,0,224,26,0,0,136,33,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,48,45,0,0,2,0,0,0,0,0,0,0,160,33,0,0,0,0,0,0,200,33,0,0,0,0,0,0,240,33,0,0,88,44,0,0,0,0,0,0,0,0,0,0,16,34,0,0,200,42,0,0,0,0,0,0,0,0,0,0,56,34,0,0,200,42,0,0,0,0,0,0,0,0,0,0,96,34,0,0,0,0,0,0,152,34,0,0,0,0,0,0,208,34,0,0,0,0,0,0,240,34,0,0,24,44,0,0,0,0,0,0,0,0,0,0,32,35,0,0,0,0,0,0,64,35,0,0,0,0,0,0,96,35,0,0,0,0,0,0,128,35,0,0,224,26,0,0,152,35,0,0,0,0,0,0,1,0,0,0,64,40,0,0,3,244,255,255,224,26,0,0,200,35,0,0,0,0,0,0,1,0,0,0,80,40,0,0,3,244,255,255,224,26,0,0,248,35,0,0,0,0,0,0,1,0,0,0,64,40,0,0,3,244,255,255,224,26,0,0,40,36,0,0,0,0,0,0,1,0,0,0,80,40,0,0,3,244,255,255,0,0,0,0,88,36,0,0,144,43,0,0,0,0,0,0,0,0,0,0,136,36,0,0,136,39,0,0,0,0,0,0,0,0,0,0,160,36,0,0,0,0,0,0,184,36,0,0,152,43,0,0,0,0,0,0,0,0,0,0,208,36,0,0,136,43,0,0,0,0,0,0,0,0,0,0,240,36,0,0,144,43,0,0,0,0,0,0,0,0,0,0,16,37,0,0,0,0,0,0,48,37,0,0,0,0,0,0,80,37,0,0,0,0,0,0,112,37,0,0,224,26,0,0,144,37,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,40,45,0,0,2,0,0,0,224,26,0,0,176,37,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,40,45,0,0,2,0,0,0,224,26,0,0,208,37,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,40,45,0,0,2,0,0,0,224,26,0,0,240,37,0,0,0,0,0,0,2,0,0,0,232,42,0,0,2,0,0,0,40,45,0,0,2,0,0,0,0,0,0,0,16,38,0,0,0,0,0,0,40,38,0,0,0,0,0,0,64,38,0,0,0,0,0,0,88,38,0,0,136,43,0,0,0,0,0,0,0,0,0,0,112,38,0,0,144,43,0,0,0,0,0,0,0,0,0,0,136,38,0,0,112,45,0,0,0,0,0,0,0,0,0,0,160,38,0,0,0,0,0,0,176,38,0,0,152,45,0,0,0,0,0,0,0,0,0,0,216,38,0,0,152,45,0,0,0,0,0,0,0,0,0,0,0,39,0,0,168,45,0,0,0,0,0,0,0,0,0,0,40,39,0,0,96,39,0,0,0,0,0,0,0,0,0,0,80,39,0,0,96,45,0,0,0,0,0,0,108,0,0,0,0,0,0,0,24,44,0,0,50,1,0,0,86,2,0,0,148,255,255,255,148,255,255,255,24,44,0,0,126,1,0,0,140,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10244);
function runPostSets() {

HEAP32[((10080 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((10088 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10096 )>>2)]=__ZTISt9exception;
HEAP32[((10104 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10112 )>>2)]=__ZTISt9exception;
HEAP32[((10120 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10128 )>>2)]=__ZTISt9exception;
HEAP32[((10136 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10152 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10160 )>>2)]=__ZTISt9exception;
HEAP32[((10168 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((10304 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10320 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10576 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10592 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10672 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((10680 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10824 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10840 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10984 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11000 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11080 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11088 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11096 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11112 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11128 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11144 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11152 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11160 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11168 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11184 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11192 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11200 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11208 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11312 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11328 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11344 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11352 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11368 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11384 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11400 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11408 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11416 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11424 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11560 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11568 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11576 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11584 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11600 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11616 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11632 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11640 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11656 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11672 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11688 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11704 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___gxx_personality_v0() {
    }

  
  var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  var _llvm_memcpy_p0i8_p0i8_i64=_memcpy;

  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }


  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;

  
  
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,tempVertexBuffers1:[],tempVertexBufferCounters1:[],tempVertexBuffers2:[],tempVertexBufferCounters2:[],numTempVertexBuffersPerSize:64,tempIndexBuffers:[],tempQuadIndexBuffer:null,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        GL.tempVertexBufferCounters1.length = GL.tempVertexBufferCounters2.length = largestIndex+1;
        GL.tempVertexBuffers1.length = GL.tempVertexBuffers2.length = largestIndex+1;
        GL.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempIndexBuffers[i] = null; // Created on-demand
          GL.tempVertexBufferCounters1[i] = GL.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          GL.tempVertexBuffers1[i] = [];
          GL.tempVertexBuffers2[i] = [];
          var ringbuffer1 = GL.tempVertexBuffers1[i];
          var ringbuffer2 = GL.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          GL.tempQuadIndexBuffer = GLctx.createBuffer();
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, GLctx.STATIC_DRAW);
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.tempVertexBufferCounters1[idx];
        GL.tempVertexBufferCounters1[idx] = (GL.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        var vb = GL.tempVertexBuffers1;
        GL.tempVertexBuffers1 = GL.tempVertexBuffers2;
        GL.tempVertexBuffers2 = vb;
        vb = GL.tempVertexBufferCounters1;
        GL.tempVertexBufferCounters1 = GL.tempVertexBufferCounters2;
        GL.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempVertexBufferCounters1[i] = 0;
        }
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))|0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[(p)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            assert(GL.floatExt, 'Must have OES_texture_float to use float textures');
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            internalFormat = GLctx.RGBA;
            break;
          default:
            throw 'Invalid type (' + type + ')';
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        }
      },initExtensions:function () {
        if (GL.initExtensions.done) return;
        GL.initExtensions.done = true;
  
        if (!Module.useWebGL) return; // an app might link both gl and 2d backends
  
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        GL.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        GL.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        GL.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        GL.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        GL.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        GL.vaoExt = Module.ctx.getExtension('OES_vertex_array_object');
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          for(var i in automaticallyEnabledExtensions) {
            var include = automaticallyEnabledExtensions[i];
            if (ext.indexOf(include) != -1) {
              return true;
            }
          }
          return false;
        }
  
        var extensions = GLctx.getSupportedExtensions();
        for(var e in extensions) {
          var ext = extensions[e].replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};var CL={cl_init:0,cl_extensions:["KHR_GL_SHARING","KHR_fp16","KHR_fp64"],cl_digits:[1,2,3,4,5,6,7,8,9,0],cl_kernels_sig:{},cl_structs_sig:{},cl_pn_type:[],cl_objects:{},cl_objects_map:{},cl_objects_retains:{},cl_objects_mem_callback:{},init:function () {
        if (CL.cl_init == 0) {
          console.log('%c WebCL-Translator V2.0 ! ', 'background: #222; color: #bada55');
          var nodejs = (typeof window === 'undefined');
          if(nodejs) {
            webcl = require('../webcl');
          }
  
          if (webcl == undefined) {
            alert("Unfortunately your system does not support WebCL. " +
            "Make sure that you have WebKit Samsung or Firefox Nokia plugin");
  
            console.error("Unfortunately your system does not support WebCL.\n");
            console.error("Make sure that you have WebKit Samsung or Firefox Nokia plugin\n");  
          } else {
  
            // Add webcl constant for parser
            // Object.defineProperty(webcl, "SAMPLER"      , { value : 0x1300,writable : false });
            // Object.defineProperty(webcl, "IMAGE2D"      , { value : 0x1301,writable : false });
            // Object.defineProperty(webcl, "IMAGE3D"      , { value : 0x1302,writable : false });          
            // Object.defineProperty(webcl, "UNSIGNED_LONG", { value : 0x1304,writable : false });
            // Object.defineProperty(webcl, "LONG"         , { value : 0x1303,writable : false });
            // Object.defineProperty(webcl, "MAP_READ"     , { value : 0x1   ,writable : false });
            // Object.defineProperty(webcl, "MAP_WRITE"    , { value : 0x2   ,writable : false });
  
            for (var i = 0; i < CL.cl_extensions.length; i ++) {
  
              if (webcl.enableExtension(CL.cl_extensions[i])) {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" supported.");
              } else {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" not supported !!!");
              }
            }
            CL.cl_init = 1;
          }
        }
  
        return CL.cl_init;
      },udid:function (obj) {    
        var _id;
  
        if (obj !== undefined) {
  
          if ( obj.hasOwnProperty('udid') ) {
           _id = obj.udid;
  
           if (_id !== undefined) {
             return _id;
           }
          }
        }
  
        var _uuid = [];
  
        _uuid[0] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length-1]; // First digit of udid can't be 0
        for (var i = 1; i < 6; i++) _uuid[i] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length];
  
        _id = _uuid.join('');
  
      
        // /!\ Call udid when you add inside cl_objects if you pass object in parameter
        if (obj !== undefined) {
          Object.defineProperty(obj, "udid", { value : _id,writable : false });
          CL.cl_objects[_id]=obj;
        }
  
        return _id;      
      },cast_long:function (arg_size) {
        var _sizelong = [];
        _sizelong.push(((arg_size & 0xFFFFFFFF00000000) >> 32));
        _sizelong.push((arg_size & 0xFFFFFFFF));
        // var _origin = x << 32 | y;
        return new Int32Array(_sizelong);
      },stringType:function (pn_type) {
        switch(pn_type) {
          case webcl.SIGNED_INT8:
            return 'INT8';
          case webcl.SIGNED_INT16:
            return 'INT16';
          case webcl.SIGNED_INT32:
            return 'INT32';
          case webcl.UNSIGNED_INT8:
            return 'UINT8';
          case webcl.UNSIGNED_INT16:
            return 'UINT16';
          case webcl.UNSIGNED_INT32:
            return 'UINT32';
          case 0x1304 /*webcl.UNSIGNED_LONG*/:
            return 'ULONG';
          case 0x1303 /*webcl.SIGNED_LONG*/:
            return 'LONG';       
          case webcl.FLOAT:
            return 'FLOAT';
          case webcl.LOCAL:
            return '__local';   
          case 0x1300 /*webcl.SAMPLER*/:
            return 'sampler_t';   
          case 0x1301 /*webcl.IMAGE2D*/:
            return 'image2d_t';        
          case 0x1302 /*webcl.IMAGE3D*/:
            return 'image3d_t';            
          default:
            if (typeof(pn_type) == "string") return 'struct';
            return 'UNKNOWN';
        }
      },parseType:function (string) {
        var _value = -1;
      
        // First ulong for the webcl validator
        if ( (string.indexOf("ulong") >= 0 ) || (string.indexOf("unsigned long") >= 0 ) ) {
          // \todo : long ???? 
          _value = 0x1304 /*webcl.UNSIGNED_LONG*/;  
        } else if ( string.indexOf("long") >= 0 ) {
          _value = 0x1303 /*webcl.SIGNED_LONG*/;
        } else if (string.indexOf("float") >= 0 ) {
          _value = webcl.FLOAT;
        } else if ( (string.indexOf("uchar") >= 0 ) || (string.indexOf("unsigned char") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT8;
        } else if ( string.indexOf("char") >= 0 ) {
          _value = webcl.SIGNED_INT8;
        } else if ( (string.indexOf("ushort") >= 0 ) || (string.indexOf("unsigned short") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT16;
        } else if ( string.indexOf("short") >= 0 ) {
          _value = webcl.SIGNED_INT16;                     
        } else if ( (string.indexOf("uint") >= 0 ) || (string.indexOf("unsigned int") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT32;          
        } else if ( ( string.indexOf("int") >= 0 ) || ( string.indexOf("enum") >= 0 ) ) {
          _value = webcl.SIGNED_INT32;
        } else if ( string.indexOf("image3d_t") >= 0 ) {
          _value = 0x1302 /*webcl.IMAGE3D*/;        
        } else if ( string.indexOf("image2d_t") >= 0 ) {
          _value = 0x1301 /*webcl.IMAGE2D*/;
        } else if ( string.indexOf("sampler_t") >= 0 ) {
          _value = 0x1300 /*webcl.SAMPLER*/;
        }
  
        return _value;
      },parseStruct:function (kernel_string,struct_name) {
  
        // Experimental parse of Struct
        // Search kernel function like 'struct_name { }' or '{ } struct_name'
        // --------------------------------------------------------------------------------
        // Step 1 : Search pattern struct_name { }
        // Step 2 : if no result : Search pattern { } struct_name
        // Step 3 : if no result : return
        // Step 4 : split by ; // Num of variable of the structure  : int toto; float tata;
        // Step 5 : split by , // Num of variable for each type     : float toto,tata,titi;
        // Step 6 : Search pattern [num] // Array Variable          : float toto[4];
        // Step 7 : Search type of the line
        // Step 8 : if exist add type else search other struct
        // --------------------------------------------------------------------------------
  
        CL.cl_structs_sig[struct_name] = [];
  
        // First search if is #define
        var _re_define = new RegExp("#[\ ]*define[\ ]*"+struct_name+"[\ ]*[A-Za-z0-9_\s]*");
        var _define = kernel_string.match(_re_define);
  
        if (_define != null && _define.length == 1) {
  
          // Get type of the line
          var _str = _define[0];
          var _type = CL.parseType(_str);
          
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_lastSpace + 1,_str.length - _lastSpace);
  
            CL.parseStruct(kernel_string,_res);
          }
      
          return;
        }
  
        // Second search if is typedef type name;
        var _re_typedef = new RegExp("typedef[\ ]*[A-Za-z0-9_\s]*[\ ]*"+struct_name+"[\ ]*;");
        var _typedef = kernel_string.match(_re_typedef);
  
        if (_typedef != null && _typedef.length == 1) {
  
          // Get type of the line
          var _str = _typedef[0];
          var _type = CL.parseType(_str);
  
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            _str = _str.replace(/^\s+|\s+$/g, ""); // trim
            var _firstSpace = _str.indexOf(" ");
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_firstSpace + 1,_lastSpace - _firstSpace - 1);
            
            CL.parseStruct(kernel_string,_res);
          }
          
          return;
        }
  
        // search pattern : struct_name { } ;
        var _re_before = new RegExp(struct_name+"[\ ]"+"\{([^}]+)\}");
  
        // search pattern : { } struct_name;
        var _re_after = new RegExp("\{([^}]+)\}"+"[\ ]"+struct_name);
  
        var _res = kernel_string.match(_re_before);
        var _contains_struct = "";
        
        if (_res != null && _res.length == 2) {
          _contains_struct = _res[1];
        } else {
          _res = kernel_string.match(_re_after);
          if (_res != null && _res.length == 2) {
              _contains_struct = _res[1];
          } else {
            return;
          }
        }
  
        var _var = _contains_struct.split(";");
        for (var i = 0; i < _var.length-1; i++ ) {
          // Need for unsigned int width, height;
          var _subvar = _var[i].split(","); 
          
          // Get type of the line
          var _type = CL.parseType(_var[i]);
        
          // Need for float mu[4];
          var _arrayNum = 0;
          _res = _var[i].match(/[0-9]+/); 
          if (_res != null) _arrayNum = _res;
        
          if ( _type != -1) {
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name].push(_type);
            }
          } else {
            // Search name of the parameter
            var _struct = _subvar[0].replace(/^\s+|\s+$/g, ""); // trim
            var _name = "";
            var _start = _struct.lastIndexOf(" "); 
            for (var j = _start - 1; j >= 0 ; j--) {
              var _chara = _struct.charAt(j);
              if (_chara == ' ' && _name.length > 0) {
                break;
              } else if (_chara != ' ') {
                _name = _chara + _name;
              }
            }
            
            // If struct is unknow search it
            if (!(_name in CL.cl_structs_sig && CL.cl_structs_sig[_name].length > 0)) {
              CL.parseStruct(kernel_string,_name);
            }
  
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name] = CL.cl_structs_sig[struct_name].concat(CL.cl_structs_sig[_name]);  
            }
          }
        }
      },parseKernel:function (kernel_string) {
  
  
        // Experimental parse of Kernel
        // ----------------------------
        //
        // /!\ The minify kernel could be use by the program but some trouble with line
        // /!\ containing macro #define, for the moment only use the minify kernel for 
        // /!\ parsing __kernel and struct
        //
        // Search kernel function like __kernel ... NAME ( p1 , p2 , p3)  
        // --------------------------------------------------------------------------------
        // Step 1 : Minimize kernel removing all the comment and \r \n \t and multispace
        // Step 2 : Search pattern __kernel ... ( ... )
        // Step 3 : For each kernel
        // Step 3 . 1 : Search Open Brace
        // Step 3 . 2 : Search Kernel Name
        // Step 3 . 3 : Search Kernel Parameter
        // Step 3 . 4 : Grab { name : [ param, ... ] }
        // --------------------------------------------------------------------------------
  
        // Remove all comments ...
        var _mini_kernel_string  = kernel_string.replace(/(?:((["'])(?:(?:\\\\)|\\\2|(?!\\\2)\\|(?!\2).|[\n\r])*\2)|(\/\*(?:(?!\*\/).|[\n\r])*\*\/)|(\/\/[^\n\r]*(?:[\n\r]+|$))|((?:=|:)\s*(?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/)[gimy]?\.(?:exec|test|match|search|replace|split)\()|(\.(?:exec|test|match|search|replace|split)\((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|(<!--(?:(?!-->).)*-->))/g
  , "");
        
        // Remove all char \n \r \t ...
        _mini_kernel_string = _mini_kernel_string.replace(/\n/g, " ");
        _mini_kernel_string = _mini_kernel_string.replace(/\r/g, " ");
  
        // Remove all the multispace
        _mini_kernel_string = _mini_kernel_string.replace(/\s{2,}/g, " ");
  
        // Search pattern : __kernel ... ( ... )
        // var _matches = _mini_kernel_string.match(/__kernel[A-Za-z0-9_\s]+\(([^)]+)\)/g);
        // if (_matches == null) {
        //   console.error("/!\\ Not found kernel !!!");
        //   return;
        // }
  
        // Search kernel (Pattern doesn't work with extra __attribute__)
        var _matches = [];
        var _found = 1;
        var _stringKern = _mini_kernel_string;
        var _security = 10;
  
        // Search all the kernel
        while (_found && _security) {
          // Just in case no more than 10 loop
          _security --;
  
          var _pattern = "__kernel ";
          var _kern = _stringKern.indexOf(_pattern);
  
          if (_kern == -1) {
            _pattern = " kernel ";
            _kern = _stringKern.indexOf(" kernel ");
            if (_kern == -1) { 
              _pattern = "kernel ";
              _kern = _stringKern.indexOf("kernel ");
              if (_kern == -1) {
                _found = 0;
                continue;
              } else if (_kern != 0) {
                console.error("/!\\ Find word 'kernel' but is not a real kernel  .. ("+_kern+")");
                _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
                continue;
              }
            }
          }
  
          _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
   
          var _brace = _stringKern.indexOf("{");
          var _stringKern2 = _stringKern.substr(0,_brace);
          var _braceOpen = _stringKern2.lastIndexOf("(");
          var _braceClose = _stringKern2.lastIndexOf(")");
          var _stringKern3 = _stringKern2.substr(0,_braceOpen).replace(/^\s+|\s+$/g, ""); // trim
          var _space = _stringKern3.lastIndexOf(" ");
  
          _stringKern2 = _stringKern2.substr(_space + 1,_braceClose);
  
          // Add the kernel result like name_kernel(..., ... ,...)
          _matches.push(_stringKern2);
        }
  
        // For each kernel ....
        for (var i = 0; i < _matches.length; i ++) {
          // Search the open Brace
          var _brace = _matches[i].lastIndexOf("(");
  
          // Part before '('
          var _first_part = _matches[i].substr(0,_brace);
          _first_part = _first_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Part after ')'
          var _second_part = _matches[i].substr(_brace+1,_matches[i].length-_brace-2);
          _second_part = _second_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Search name part
          var _name = _first_part.substr(_first_part.lastIndexOf(" ") + 1);
  
          // If name already present reparse it may be is another test with not the same num of parameter ....
          if (_name in CL.cl_kernels_sig) {
            delete CL.cl_kernels_sig[_name]
          }
  
          // Search parameter part
          var _param = [];
  
          var _array = _second_part.split(","); 
          for (var j = 0; j < _array.length; j++) {
            var _type = CL.parseType(_array[j]);
  
            if (_array[j].indexOf("__local") >= 0 ) {
              _param.push(webcl.LOCAL);
  
  
            } else if (_type == -1) {
                         
              _array[j] = _array[j].replace(/^\s+|\s+$/g, "");
              _array[j] = _array[j].replace("*", "");
  
              var _start = _array[j].lastIndexOf(" "); 
              if (_start != -1) {
                var _kernels_struct_name = "";
                // Search Parameter type Name
                for (var k = _start - 1; k >= 0 ; k--) {
  
                  var _chara = _array[j].charAt(k);
                  if (_chara == ' ' && _kernels_struct_name.length > 0) {
                    break;
                  } else if (_chara != ' ') {
                    _kernels_struct_name = _chara + _kernels_struct_name;
                  }
                }             
  
                // Parse struct only if is not already inside the map
                if (!(_kernels_struct_name in CL.cl_structs_sig))
                  CL.parseStruct(_mini_kernel_string, _kernels_struct_name);
              
                // Add the name of the struct inside the map of param kernel
                _param.push(_kernels_struct_name);         
  
              } else {
                _param.push(webcl.FLOAT);
              }
  
  
            } else {
              _param.push(_type);
  
            }
          }        
  
          CL.cl_kernels_sig[_name] = _param;
  
        }
  
        return _mini_kernel_string;
  
      },getImageSizeType:function (image) {
        var _sizeType = 0;
  
        
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _sizeType = 1;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
          case webcl.HALF_FLOAT:
            _sizeType = 2;      
            break;
          case webcl.SIGNED_INT32:
          case webcl.UNSIGNED_INT32:      
          case webcl.FLOAT:
            _sizeType = 4;
            break;
          default:
            console.error("getImageSizeType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _sizeType;
      },getImageFormatType:function (image) {
        var _type = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
            _type = webcl.SIGNED_INT8;
            break;
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _type = webcl.UNSIGNED_INT8;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
            _type = webcl.SIGNED_INT16;
            break;
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
            _type = webcl.UNSIGNED_INT16;
            break;
          case webcl.SIGNED_INT32:
            _type = webcl.SIGNED_INT32;
          case webcl.UNSIGNED_INT32:
            _type = webcl.UNSIGNED_INT32;
            break;        
          case webcl.FLOAT:
            _type = webcl.FLOAT;
            break;
          default:
            console.error("getImageFormatType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _type;
      },getImageSizeOrder:function (image) {
        var _sizeOrder = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelOrder) {
          case webcl.R:
          case webcl.A:
          case webcl.INTENSITY:
          case webcl.LUMINANCE:
            _sizeOrder = 1;
            break;
          case webcl.RG:
          case webcl.RA:
            _sizeOrder = 2;
            break;
          case webcl.RGB:
            _sizeOrder = 3;
            break; 
          case webcl.RGBA:
          case webcl.BGRA:
          case webcl.ARGB:      
            _sizeOrder = 4;
            break;        
          default:
            console.error("getImageFormatType : This channel order is not yet implemented => "+_info.channelOrder);
        }
  
        return _sizeOrder;
      },getHostPtrArray:function (size,type) { 
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( size );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( size >> 1 );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( size >> 2 );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( size );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( size >> 1 );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( size >> 2 );
              break;         
            default:
              _host_ptr = new Float32Array( size >> 2 );
              break;
          }
        } else {
          _host_ptr = new Float32Array( size >> 2 );
        }
  
        return _host_ptr;
      },getCopyPointerToArray:function (ptr,size,type) { 
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;         
            default:
              _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
          
          // console.info("------");
          // _host_ptr = new DataView(new ArrayBuffer(size));
  
          // var _offset = 0;
          // for (var i = 0; i < type.length; i++) {
          //   var _type = type[i][0];
          //   var _num = type[i][1];
          //   switch(_type) {
          //     case webcl.SIGNED_INT8:
          //       _host_ptr.setInt8(_offset,new Int8Array( HEAP8.subarray((ptr+_offset),(ptr+_offset+_num)) ));
          //       console.info("setInt8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.SIGNED_INT16:
          //       _host_ptr.setInt16(_offset,new Int16Array( HEAP16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) ));
          //       console.info("setInt16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.SIGNED_INT32:
          //       _host_ptr.setInt32(_offset,new Int32Array( HEAP32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setInt32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //     case webcl.UNSIGNED_INT8:
          //       _host_ptr.setUint8(_offset,new Uint8Array( HEAPU8.subarray((ptr+_offset),(ptr+_offset+_num)) ));
          //       console.info("setUint8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.UNSIGNED_INT16:
          //       host_ptr.setUint16(_offset,new Uint16Array( HEAPU16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) ));
          //       console.info("setUint16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.UNSIGNED_INT32:
          //       _host_ptr.setUint32(_offset,new Uint32Array( HEAPU32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setUint32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;         
          //     default:
          //       _host_ptr.setFloat32(_offset,new Float32Array( HEAPF32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setFloat32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //   }
          // }
        }
  
        return _host_ptr;
      },getReferencePointerToArray:function (ptr,size,type) {  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = HEAP8.subarray((ptr),(ptr+size));
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = HEAP16.subarray((ptr)>>1,(ptr+size)>>1);
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = HEAP32.subarray((ptr)>>2,(ptr+size)>>2);
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = HEAPU8.subarray((ptr),(ptr+size));
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = HEAPU16.subarray((ptr)>>1,(ptr+size)>>1);
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = HEAPU32.subarray((ptr)>>2,(ptr+size)>>2);
              break;         
            default:
              _host_ptr = HEAPF32.subarray((ptr)>>2,(ptr+size)>>2);
              break;
          }
        } else {
          _host_ptr = HEAPF32.subarray((ptr)>>2,(ptr+size)>>2);
          
          // console.info("------");
          // _host_ptr = new DataView(new ArrayBuffer(size));
  
          // var _offset = 0;
          // for (var i = 0; i < type.length; i++) {
          //   var _type = type[i][0];
          //   var _num = type[i][1];
          //   switch(_type) {
          //     case webcl.SIGNED_INT8:
          //       _host_ptr.setInt8(_offset,HEAP8.subarray((ptr+_offset),(ptr+_offset+_num)) );
          //       console.info("setInt8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.SIGNED_INT16:
          //       _host_ptr.setInt16(_offset,HEAP16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) );
          //       console.info("setInt16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.SIGNED_INT32:
          //       _host_ptr.setInt32(_offset,HEAP32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setInt32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //     case webcl.UNSIGNED_INT8:
          //       _host_ptr.setUint8(_offset,HEAPU8.subarray((ptr+_offset),(ptr+_offset+_num)) );
          //       console.info("setUint8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.UNSIGNED_INT16:
          //       host_ptr.setUint16(_offset,HEAPU16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) );
          //       console.info("setUint16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.UNSIGNED_INT32:
          //       _host_ptr.setUint32(_offset,HEAPU32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setUint32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;         
          //     default:
          //       _host_ptr.setFloat32(_offset,HEAPF32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setFloat32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //   }
          // }
        }
  
        return _host_ptr;
      },catchError:function (e) {
        console.error(e);
        var _error = -1;
  
        if (e instanceof WebCLException) {
          var _str=e.message;
          var _n=_str.lastIndexOf(" ");
          _error = _str.substr(_n+1,_str.length-_n-1);
        }
        
        return _error;
      }};function _clGetMemObjectInfo(memobj,param_name,param_value_size,param_value,param_value_size_ret) {
  
      var _info = null;
  
      try { 
  
        
        if (param_name == 0x1105 /*CL_MEM_REFERENCE_COUNT*/) {
  
          _info = 0;
  
          if (memobj in CL.cl_objects) {
            _info++;
          }
  
          if (memobj in CL.cl_objects_retains) {
            _info+=CL.cl_objects_retains[memobj];
          }
  
        } else if (param_name == 0x1104 /*CL_MEM_MAP_COUNT*/) {
          
          _info = 0;
  
        } else {
          _info = CL.cl_objects[memobj].getInfo(param_name);  
        }
        
  
      } catch (e) {
  
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
      
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_name == 0x1101) /*CL_MEM_FLAGS*/ {
  
          _info = CL.cl_objects[memobj].flags;
  
          if (param_value != 0) (tempI64 = [_info>>>0,(Math_abs(_info) >= 1 ? (_info > 0 ? Math_min(Math_floor((_info)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((_info - +(((~~(_info)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((param_value)>>2)]=tempI64[0],HEAP32[(((param_value)+(4))>>2)]=tempI64[1]);
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=8;
  
        } else {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;  
  
        }
  
      } else if(typeof(_info) == "object") {
  
        if (_info instanceof WebCLImageDescriptor) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=webcl.MEM_OBJECT_IMAGE2D;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info instanceof WebCLBuffer) {
       
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info == null) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        } else {
          console.error("clGetMemObjectInfo : "+typeof(_info)+" not yet implemented");
        }
      } else {
        console.error("clGetMemObjectInfo : "+typeof(_info)+" not yet implemented");
      }
  
      return webcl.SUCCESS;
    }

  function _clEnqueueReadBuffer(command_queue,buffer,blocking_read,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
   
      var _event_wait_list = [];
      var _host_ptr = CL.getReferencePointerToArray(ptr,cb,CL.cl_pn_type);
    
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
  
      try {
  
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],blocking_read,offset,cb,_host_ptr,_event_wait_list,_event);
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],blocking_read,offset,cb,_host_ptr,_event_wait_list);
        } 
      } catch (e) {
        var _error = CL.catchError(e);
          
  
        return _error;
      }
  
      return webcl.SUCCESS;    
    }

  
  function _clEnqueueWriteBuffer(command_queue,buffer,blocking_write,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _event_wait_list = [];
      var _host_ptr = CL.getReferencePointerToArray(ptr,cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
  
      try {
            
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],blocking_write,offset,cb,_host_ptr,_event_wait_list,_event);    
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],blocking_write,offset,cb,_host_ptr,_event_wait_list);    
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
   
  
        return _error;
      }
  
  
      return webcl.SUCCESS;  
    }function _clCreateBuffer(context,flags_i64_1,flags_i64_2,size,host_ptr,cl_errcode_ret) {
      // Assume the flags is i32 
      assert(flags_i64_2 == 0, 'Invalid flags i64');
      
  
      var _id = null;
      var _buffer = null;
  
      // Context must be created
      
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        _flags |= webcl.MEM_READ_WRITE;
      }
  
      var _host_ptr = null;
  
      if ( host_ptr != 0 ) _host_ptr = CL.getCopyPointerToArray(host_ptr,size,CL.cl_pn_type); 
      else if (
        (flags_i64_1 & (1 << 4) /* CL_MEM_ALLOC_HOST_PTR  */) ||
        (flags_i64_1 & (1 << 5) /* CL_MEM_COPY_HOST_PTR   */) ||
        (flags_i64_1 & (1 << 3) /* CL_MEM_USE_HOST_PTR    */)
        ) {
        _host_ptr = CL.getHostPtrArray(size,CL.cl_pn_type);
      } 
  
      try {
  
      
        if (_host_ptr != null) {
          _buffer = CL.cl_objects[context].createBuffer(_flags,size,_host_ptr);
        } else
          _buffer = CL.cl_objects[context].createBuffer(_flags,size);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
        
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      // Add flags property
      Object.defineProperty(_buffer, "flags", { value : flags_i64_1,writable : false });
      _id = CL.udid(_buffer);
    
      // \todo need to be remove when firefox will be support hot_ptr
      /**** **** **** **** **** **** **** ****/
      if (_host_ptr != null) {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
          // Search command
          var commandqueue = null;
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLCommandQueue) {
              commandqueue = CL.cl_objects[obj];
              break;
            }
          }
          
          if (commandqueue != null) {
            _clEnqueueWriteBuffer(obj,_id,true,0,size,host_ptr,0,0,0);
          } else {
            if (cl_errcode_ret != 0) {
              HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
            }
  
            return 0; 
          }
        }
      }
      /**** **** **** **** **** **** **** ****/
  
  
      return _id;
    }

  function _clReleaseMemObject(memobj) {
  
      // If is an object retain don't release it until retains > 0...
      if (memobj in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[memobj] - 1;
  
        CL.cl_objects_retains[memobj] = _retain;
  
        if (_retain >= 0) {
          
          // Call the callback 
          if (memobj in CL.cl_objects_mem_callback) {
            if (CL.cl_objects_mem_callback[memobj].length > 0)
              CL.cl_objects_mem_callback[memobj].pop()();
          }
  
          return webcl.SUCCESS;
        }
      }
  
      try {
  
        // Call the callback 
        if (memobj in CL.cl_objects_mem_callback) {
          if (CL.cl_objects_mem_callback[memobj].length > 0)
            CL.cl_objects_mem_callback[memobj].pop()();
        }
  
        CL.cl_objects[memobj].release();
        delete CL.cl_objects[memobj];  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }


  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }var _fseeko=_fseek;

  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }var _ftello=_ftell;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  function _clEnqueueNDRangeKernel(command_queue,kernel,work_dim,global_work_offset,global_work_size,local_work_size,num_events_in_wait_list,event_wait_list,event) {
  
      var _event = null;
      var _event_wait_list;
      var _local_work_size;
  
      // \todo need to be remove when webkit will be support null
      /**** **** **** **** **** **** **** ****/
      if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
        _event_wait_list = num_events_in_wait_list > 0 ? [] : null;
        _local_work_size = (local_work_size != 0) ? [] : null;
      } else {
        _event_wait_list = [];
        _local_work_size = [];
      }
  
  
      var _global_work_offset = [];
      var _global_work_size = [];
      
  
      for (var i = 0; i < work_dim; i++) {
        _global_work_size.push(HEAP32[(((global_work_size)+(i*4))>>2)]);
  
        if (global_work_offset != 0)
          _global_work_offset.push(HEAP32[(((global_work_offset)+(i*4))>>2)]);
        else
          _global_work_offset.push(0);
  
        if (local_work_size != 0)
          _local_work_size.push(HEAP32[(((local_work_size)+(i*4))>>2)]);
      }
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
         
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
             
      try { 
        
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list,_event);  
         
        if (event != 0) { 
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;    
  
    }

  function _clGetKernelWorkGroupInfo(kernel,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      try {
  
        var _info = CL.cl_objects[kernel].getWorkGroupInfo(CL.cl_objects[device], param_name);
  
        if(typeof(_info) == "number") {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info instanceof Int32Array) {
         
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_info[i];
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
        
        } else {
  
          console.error("clGetKernelWorkGroupInfo: unknow type of info '"+_info+"'")
          
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
        
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _clCreateKernel(program,kernel_name,cl_errcode_ret) {
      
  
      var _id = null;
      var _kernel = null;
      var _name = (kernel_name == 0) ? "" : Pointer_stringify(kernel_name);
  
      // program must be created
      try {
      
  
        _kernel = CL.cl_objects[program].createKernel(_name);
        
        Object.defineProperty(_kernel, "name", { value : _name,writable : false });
        Object.defineProperty(_kernel, "sig", { value : CL.cl_kernels_sig[_name],writable : false });
  
  
        
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_kernel);
  
  
      return _id;
    }

  function _clSetKernelArg(kernel,arg_index,arg_size,arg_value) {
      if (CL.cl_objects[kernel].sig.length < arg_index) {
        return webcl.INVALID_KERNEL;          
      }
  
      var _kernel = CL.cl_objects[kernel];
  
      var _posarg = arg_index;
  
      var _sig = _kernel.sig[_posarg];
      
      try {
  
        // LOCAL ARG
        if (_sig == webcl.LOCAL) {
  
          var _array = new Uint32Array([arg_size]);
  
          _kernel.setArg(_posarg,_array);
  
  
        } else {
  
          var _value = HEAP32[((arg_value)>>2)];
  
          // WEBCL OBJECT ARG
          if (_value in CL.cl_objects) {
  
            _kernel.setArg(_posarg,CL.cl_objects[_value]);
            
            if (! (CL.cl_objects[_value] instanceof WebCLSampler)) {
  
            }
            
          } else {
  
            var _array = CL.getReferencePointerToArray(arg_value,arg_size,[[_sig,1]]);
           
            _kernel.setArg(_posarg,_array);
  
          }
        }
      } catch (e) {
  
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function _clReleaseKernel(kernel) {
  
      // If is an object retain don't release it until retains > 0...
      if (kernel in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[kernel] - 1;
  
        CL.cl_objects_retains[kernel] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
  
      try {
  
        CL.cl_objects[kernel].release();
          
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      delete CL.cl_objects[kernel];
  
  
      return webcl.SUCCESS;
    }

  function _clFlush(command_queue) {
  
  
      try {
          
        CL.cl_objects[command_queue].flush();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _clReleaseProgram(program) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (program in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[program] - 1;
  
        CL.cl_objects_retains[program] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[program].release();
          delete CL.cl_objects[program]; 
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  function _clReleaseCommandQueue(command_queue) {
  
      // If is an object retain don't release it until retains > 0...
      if (command_queue in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[command_queue] - 1;
  
        CL.cl_objects_retains[command_queue] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[command_queue].release();
          delete CL.cl_objects[command_queue];  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _clReleaseContext(context) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (context in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[context] - 1;
  
        CL.cl_objects_retains[context] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[context].release();
          delete CL.cl_objects[context];     
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _clBuildProgram(program,num_devices,device_list,options,pfn_notify,user_data) {
  
      try {
  
        var _devices = [];
        var _option = (options == 0) ? "" : Pointer_stringify(options); 
  
        if (device_list != 0 && num_devices > 0 ) {
          for (var i = 0; i < num_devices ; i++) {
            var _device = HEAP32[(((device_list)+(i*4))>>2)]
              _devices.push(CL.cl_objects[_device]);
          }
        }
  
        // If device_list is NULL value, the program executable is built for all devices associated with program.
        if (_devices.length == 0) {
          _devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_DEVICES); 
        }
  
        var _callback = null
        if (pfn_notify != 0) {
          /**
           * Description
           * @return 
           */
          _callback = function() { 
            console.info("\nCall ( clBuildProgram ) callback function : FUNCTION_TABLE["+pfn_notify+"]("+program+", "+user_data+")");
            FUNCTION_TABLE[pfn_notify](program, user_data) 
          };
        }
  
        
        CL.cl_objects[program].build(_devices,_option,_callback);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;      
  
    }

  function _clGetProgramBuildInfo(program,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      var _info = null;
  
      try { 
  
  
        _info = CL.cl_objects[program].getBuildInfo(CL.cl_objects[device], param_name);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
      
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _clCreateProgramWithSource(context,count,strings,lengths,cl_errcode_ret) {
      
  
      var _id = null;
      var _program = null;
  
      // Context must be created
  
      try {
        
        var _string = "";
  
        for (var i = 0; i < count; i++) {
          if (lengths) {
            var _len = HEAP32[(((lengths)+(i*4))>>2)];
            if (_len < 0) {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);   
            } else {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)], _len);   
            }
          } else {
            _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]); 
          }
        }
  
        CL.parseKernel(_string);
  
  
        _program = CL.cl_objects[context].createProgram(_string);
    
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_program);
  
  
      return _id;
    }

  function _clCreateCommandQueue(context,device,properties_1,properties_2,cl_errcode_ret) {
      // Assume the properties is i32 
      assert(properties_2 == 0, 'Invalid properties i64');
  
  
      var _id = null;
      var _command = null;
  
      // Context must be created
  
      // Context must be created
  
      try { 
  
  
        _command = CL.cl_objects[context].createCommandQueue(CL.cl_objects[device],properties_1);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_command);
  
  
      return _id;
    }

  function _clCreateContext(properties,num_devices,devices,pfn_notify,user_data,cl_errcode_ret) {
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        }
  
        return 0; // NULL Pointer      
      }
      
      var _id = null;
      var _context = null;
  
      try { 
  
        var _platform = null;
        var _devices = [];
        var _glclSharedContext = false;
  
        // Verify the device, theorically on OpenCL there are CL_INVALID_VALUE when devices or num_devices is null,
        // WebCL can work using default device / platform, we check only if parameter are set.
        for (var i = 0; i < num_devices; i++) {
          var _idxDevice = HEAP32[(((devices)+(i*4))>>2)];
            _devices.push(CL.cl_objects[_idxDevice]);
        }
  
        // Verify the property
        var _propertiesCounter = 0;
        var _properties = [];
  
        if (properties != 0) {
          while(1) {
            var _readprop = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
            _properties.push(_readprop);
  
            if (_readprop == 0) break;
  
            switch (_readprop) {
              case webcl.CONTEXT_PLATFORM:
                _propertiesCounter ++;
                var _idxPlatform = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
                _properties.push(_idxPlatform);
  
                  _platform = CL.cl_objects[_idxPlatform];
                break;
  
              // /!\ This part, it's for the CL_GL_Interop
              case (0x200A) /*CL_GLX_DISPLAY_KHR*/:
              case (0x2008) /*CL_GL_CONTEXT_KHR*/:
              case (0x200C) /*CL_CGL_SHAREGROUP_KHR*/:            
                _propertiesCounter ++;
                _glclSharedContext = true;
                
                break;
  
              default:
                if (cl_errcode_ret != 0) {
                  HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_PROPERTY;
                }
  
                return 0; 
            };
  
            _propertiesCounter ++;
          }
        }
  
        if (num_devices > 0) {
          if (_glclSharedContext) {       
  
            _context = webcl.createContext(Module.ctx,_devices); 
            
          } else {
          
            _context = webcl.createContext(_devices);  
  
          }
        } else if (_platform != null) {
          
          if (_glclSharedContext) {
            _context = webcl.createContext(Module.ctx,_platform);  
          } else {
            _context = webcl.createContext(_platform);  
          }
  
        } else {
          // If no device and no platfomr peek the first one
          
          // Search platform
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLPlatform) {
              _platform = CL.cl_objects[obj];
              break;
            }
          }
          if (_platform == null) {
            var _platforms = webcl.getPlatforms();
  
            _platform = _platforms[0];
          
            CL.udid(_platforms[i]);         
          }
  
          if (_glclSharedContext) {
            _context = webcl.createContext(Module.ctx,_platform);  
          } else {
            _context = webcl.createContext(_platform);  
          }    
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_context);
  
      // Add properties array for getInfo
      Object.defineProperty(_context, "properties", { value : _properties,writable : false });
  
  
      return _id;
    }

  function _clGetDeviceIDs(platform,device_type_i64_1,device_type_i64_2,num_entries,devices,num_devices) {
      // Assume the device_type is i32 
      assert(device_type_i64_2 == 0, 'Invalid device_type i64');
  
      
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && devices != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_devices == 0 && devices == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( platform != 0 && !(platform in CL.cl_objects)) {
        return webcl.INVALID_PLATFORM;  
      }
  
      var _device = null;
  
      try {
  
        // If platform is NULL use the first platform found ...
        if (platform == 0) {
          var _platforms = webcl.getPlatforms();
          if (_platforms.length == 0) {
            return webcl.INVALID_PLATFORM;  
          }
  
          // Create a new UDID 
          platform = CL.udid(_platforms[0]);
        } 
  
        var _platform = CL.cl_objects[platform];
  
          
        _devices = _platform.getDevices(device_type_i64_1);
  
      } catch (e) {
  
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_devices != 0) {
        HEAP32[((num_devices)>>2)]=_devices.length /* Num of device */;
      } 
  
      if (devices != 0) {
        for (var i = 0; i < Math.min(num_entries,_devices.length); i++) {
          var _id = CL.udid(_devices[i]);
          HEAP32[(((devices)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
  
    }

  function _clGetPlatformIDs(num_entries,platforms,num_platforms) {
  
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && platforms != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_platforms == 0 && platforms == 0) {
        return webcl.INVALID_VALUE;
      }
  
      var _platforms = null;
  
      try { 
  
        _platforms = webcl.getPlatforms();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_platforms != 0) {
        HEAP32[((num_platforms)>>2)]=_platforms.length /* Num of platforms */;
      } 
  
      if (platforms != 0) {
        for (var i = 0; i < Math.min(num_entries,_platforms.length); i++) {
          var _id = CL.udid(_platforms[i]);
          HEAP32[(((platforms)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
    }

  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x*y > 4294967295,(x*y)>>>0;
    }

  function _pthread_mutex_lock() {}

  function _pthread_mutex_unlock() {}

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _pthread_cond_wait() {
      return 0;
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  var _llvm_memset_p0i8_i64=_memset;

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;

  function __ZNSt9exceptionD2Ev() {}

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _abort() {
      Module['abort']();
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr;
    }

  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___cxa_guard_abort() {}

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }

  function _uselocale(locale) {
      return 0;
    }

  var _llvm_va_start=undefined;

  
  
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _llvm_va_end() {}

  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }


  var _fabs=Math_abs;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodl=_fmod;






  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};
var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZNSt3__16locale2id6__initEv,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt11logic_errorD0Ev,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZN6OpenCL4FileD0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__15ctypeIcED0Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castC2Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZN10TrajectoryC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEff,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNSt3__119__iostream_categoryD1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZN10TrajectoryD0Ev,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv,0,_free,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZN10TrajectoryD2Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNSt3__16localeC2ERKS0_,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZN6OpenCL6BufferC2EPKNS_7ProgramE,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,__ZN6OpenCL4FileD2Ev,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,0,___cxx_global_array_dtor53,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__16locale5__impD0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNSt8bad_castD2Ev,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__16localeD2Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,___cxx_global_array_dtor105,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZN6OpenCL6BufferD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt3__111__stdoutbufIcED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNSt13runtime_errorC2EPKc,0,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,___cxx_global_array_dtor81,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNKSt3__18numpunctIwE12do_falsenameEv,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,_fclose,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__110__stdinbufIwED1Ev,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt8bad_castD2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__114error_category23default_error_conditionEi,0,__ZN6OpenCL4FileD2Ev,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZNSt3__18messagesIcED0Ev,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZN6OpenCL6KernelC2EPKNS_7ProgramE,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,__ZN10TrajectoryD2Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_baseD2Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZNSt3__16localeC2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZN6OpenCL7ProgramD2Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__111__stdoutbufIwE8overflowEj,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,___cxx_global_array_dtor,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,__ZN6OpenCL6KernelD2Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,__ZN6OpenCL7ProgramD2Ev,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,___cxx_global_array_dtor120,0,__ZN6OpenCL7ProgramD0Ev,0];

// EMSCRIPTEN_START_FUNCS

function _main($argc,$argv){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $trajectory=sp;
 var $31=(sp)+(16);
 var $32;
 var $33;
 var $34=(sp)+(32);
 var $35=(sp)+(48);
 var $36;
 $28=0;
 $29=$argc;
 $30=$argv;
 $26=$31;
 $27=3464;
 var $37=$26;
 var $38=$27;
 $24=$37;
 $25=$38;
 var $39=$24;
 var $40=$39;
 var $41=(($39)|0);
 $23=$41;
 var $42=$23;
 $22=$42;
 var $43=$22;
 var $44=$43;
 $21=$44;
 var $45=$21;
 var $46=$45;
 $20=$46;
 var $47=$20;
 var $48=(($45)|0);
 var $49=$25;
 var $50=$25;
 $19=$50;
 var $51=$19;
 var $52=_strlen($51);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($39,$49,$52);
 (function() { try { __THREW__ = 0; return __ZN10TrajectoryC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEff($trajectory,$31,10,0.012500000186264515) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($31);
 $17=$34;
 $18=3448;
 var $54=$17;
 var $55=$18;
 $15=$54;
 $16=$55;
 var $56=$15;
 var $57=$56;
 var $58=(($56)|0);
 $14=$58;
 var $59=$14;
 $13=$59;
 var $60=$13;
 var $61=$60;
 $12=$61;
 var $62=$12;
 var $63=$62;
 $11=$63;
 var $64=$11;
 var $65=(($62)|0);
 var $66=$16;
 var $67=$16;
 $10=$67;
 var $68=$10;
 var $69=(function() { try { __THREW__ = 0; return _strlen($68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($56,$66,$69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=13;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $71=(function() { try { __THREW__ = 0; return __ZN10Trajectory7AcquireERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($trajectory,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=14;break; }
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=13;break; }
 case 7: 
 if($71){label=8;break;}else{label=16;break;}
 case 8: 
 var $75=(function() { try { __THREW__ = 0; return __ZN10Trajectory7ComputeEfff($trajectory,0,100,0.7853981852531433) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=13;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZN10Trajectory3LogEv($trajectory) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 label=16;break;
 case 11: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 var $80=$79$0;
 $32=$80;
 var $81=$79$1;
 $33=$81;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=31;break; }
 case 12: 
 label=30;break;
 case 13: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1); var $84$1 = tempRet0;
 var $85=$84$0;
 $32=$85;
 var $86=$84$1;
 $33=$86;
 label=28;break;
 case 14: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1); var $88$1 = tempRet0;
 var $89=$88$0;
 $32=$89;
 var $90=$88$1;
 $33=$90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=31;break; }
 case 15: 
 label=28;break;
 case 16: 
 $8=$35;
 $9=2592;
 var $93=$8;
 var $94=$9;
 $6=$93;
 $7=$94;
 var $95=$6;
 var $96=$95;
 var $97=(($95)|0);
 $5=$97;
 var $98=$5;
 $4=$98;
 var $99=$4;
 var $100=$99;
 $3=$100;
 var $101=$3;
 var $102=$101;
 $2=$102;
 var $103=$2;
 var $104=(($101)|0);
 var $105=$7;
 var $106=$7;
 $1=$106;
 var $107=$1;
 var $108=(function() { try { __THREW__ = 0; return _strlen($107) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=13;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($95,$105,$108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 18: 
 label=19;break;
 case 19: 
 var $110=(function() { try { __THREW__ = 0; return __ZN10Trajectory7AcquireERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($trajectory,$35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=25;break; }
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=13;break; }
 case 21: 
 if($110){label=22;break;}else{label=27;break;}
 case 22: 
 var $114=(function() { try { __THREW__ = 0; return __ZN10Trajectory7ComputeEfff($trajectory,0,100,1000) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=13;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return __ZN10Trajectory3LogEv($trajectory) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=13;break; }
 case 24: 
 label=27;break;
 case 25: 
 var $118$0 = ___cxa_find_matching_catch(-1, -1); var $118$1 = tempRet0;
 var $119=$118$0;
 $32=$119;
 var $120=$118$1;
 $33=$120;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=31;break; }
 case 26: 
 label=28;break;
 case 27: 
 $28=0;
 $36=1;
 __ZN10TrajectoryD2Ev($trajectory);
 var $123=$28;
 STACKTOP=sp;return $123;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZN10TrajectoryD2Ev($trajectory) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 label=30;break;
 case 30: 
 var $127=$32;
 var $128=$33;
 var $129$0=$127;
 var $129$1=0;
 var $130$0=$129$0;
 var $130$1=$128;
 ___resumeException($130$0)
 case 31: 
 var $132$0 = ___cxa_find_matching_catch(-1, -1,0); var $132$1 = tempRet0;
 var $133=$132$0;
 ___clang_call_terminate($133);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}
Module["_main"] = _main;

function ___clang_call_terminate($0){
 var label=0;


 var $2=___cxa_begin_catch($0);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
}


function __ZN6OpenCL6BufferC2EPKNS_7ProgramE($this,$pProgram){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$pProgram;
 var $3=$1;
 var $4=__Znwj(40);
 var $5=$4;
 var $6=(($3)|0);
 HEAP32[(($6)>>2)]=$5;
 var $7=(($3)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$2;
 var $12=__ZNK6OpenCL7Program10GetContextEv($11);
 var $13=(($3)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14)|0);
 HEAP32[(($15)>>2)]=$12;
 var $16=$2;
 var $17=__ZNK6OpenCL7Program15GetCommandQueueEv($16);
 var $18=(($3)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+4)|0);
 HEAP32[(($20)>>2)]=$17;
 var $21=(($3)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+16)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=(($3)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+8)|0);
 var $$etemp$0$0=1;
 var $$etemp$0$1=0;
 var $st$1$0=(($26)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($26+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $27=(($3)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+28)|0);
 HEAP32[(($29)>>2)]=0;
 var $30=(($3)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+24)|0);
 HEAP32[(($32)>>2)]=0;
 var $33=(($3)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+20)|0);
 HEAP32[(($35)>>2)]=0;
 var $36=(($3)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+32)|0);
 HEAP8[($38)]=1;
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL19OpenCLReleaseBufferPN6OpenCL12BufferStructE($pBuffer){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$pBuffer;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=5;break;}
 case 2: 
 var $5=$1;
 var $6=__ZL25OpenCLReleaseBufferMemoryPN6OpenCL12BufferStructE($5);
 var $7=$1;
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$7;
 __ZdlPv($10);
 label=4;break;
 case 4: 
 $1=0;
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL6BufferD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZL19OpenCLReleaseBufferPN6OpenCL12BufferStructE($4);
 STACKTOP=sp;return;
}


function __ZNK6OpenCL6Buffer9GetBufferEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+20)|0);
 var $6=HEAP32[(($5)>>2)];
 STACKTOP=sp;return $6;
}


function __ZNK6OpenCL6Buffer13GetBufferSizeEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+28)|0);
 var $6=HEAP32[(($5)>>2)];
 STACKTOP=sp;return $6;
}


function __ZNK6OpenCL6Buffer14GetBufferIndexEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+24)|0);
 var $6=HEAP32[(($5)>>2)];
 STACKTOP=sp;return $6;
}


function __ZN6OpenCL6Buffer7AcquireEjj($this,$nBufferIndex,$nBufferSize){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$nBufferIndex;
 $3=$nBufferSize;
 var $4=$1;
 var $5=$2;
 var $6=(($4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+24)|0);
 HEAP32[(($8)>>2)]=$5;
 var $9=$3;
 var $10=__ZL10GetPOTSizej($9);
 var $11=(($4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 HEAP32[(($13)>>2)]=$10;
 var $14=(($4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=__ZL18OpenCLCreateBufferPN6OpenCL12BufferStructEPv($15,0);
 STACKTOP=sp;return $16;
}


function __ZL10GetPOTSizej($nSize){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $nPOTSize;
 var $i;
 var $iMax;
 $1=$nSize;
 var $2=$1;
 $nPOTSize=$2;
 var $3=$nPOTSize;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=7;break;}
 case 2: 
 var $6=$nPOTSize;
 var $7=((($6)-(1))|0);
 $nPOTSize=$7;
 $iMax=32;
 $i=1;
 label=3;break;
 case 3: 
 var $9=$i;
 var $10=$iMax;
 var $11=($9>>>0)<($10>>>0);
 if($11){label=4;break;}else{label=6;break;}
 case 4: 
 var $13=$nPOTSize;
 var $14=$nPOTSize;
 var $15=$i;
 var $16=$14>>>($15>>>0);
 var $17=$13|$16;
 $nPOTSize=$17;
 label=5;break;
 case 5: 
 var $19=$i;
 var $20=$19<<1;
 $i=$20;
 label=3;break;
 case 6: 
 var $22=$nPOTSize;
 var $23=((($22)+(1))|0);
 $nPOTSize=$23;
 label=8;break;
 case 7: 
 $nPOTSize=1;
 label=8;break;
 case 8: 
 var $26=$nPOTSize;
 STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL18OpenCLCreateBufferPN6OpenCL12BufferStructEPv($pBuffer,$pHost){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $bBufferCreated;
 $3=$pBuffer;
 $4=$pHost;
 var $5=$3;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$3;
 var $9=(($8+8)|0);
 var $ld$0$0=(($9)|0);
 var $10$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($9+4)|0);
 var $10$1=HEAP32[(($ld$1$1)>>2)];
 var $11=$3;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$4;
 var $15=$3;
 var $16=(($15+16)|0);
 var $17=_clCreateBuffer($7,$10$0,$10$1,$13,$14,$16);
 var $18=$3;
 var $19=(($18+20)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$3;
 var $21=(($20+20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)!=0;
 if($23){label=2;break;}else{var $30=0;label=3;break;}
 case 2: 
 var $25=$3;
 var $26=(($25+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 var $30=$28;label=3;break;
 case 3: 
 var $30;
 var $31=($30&1);
 $bBufferCreated=$31;
 var $32=$bBufferCreated;
 var $33=(($32)&1);
 if($33){label=5;break;}else{label=4;break;}
 case 4: 
 var $35=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,1480);
 $1=$35;
 $2=8;
 var $36=$1;
 var $37=$2;
 var $38=FUNCTION_TABLE[$37]($36);
 label=5;break;
 case 5: 
 var $40=$bBufferCreated;
 var $41=(($40)&1);
 STACKTOP=sp;return $41;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL6Buffer4ReadEjPv($this,$nBufferSize,$pHost){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$nBufferSize;
 $3=$pHost;
 var $4=$1;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 var $8=$3;
 var $9=__ZL23OpenCLEnqueueReadBufferPN6OpenCL12BufferStructEjPv($6,$7,$8);
 STACKTOP=sp;return $9;
}


function __ZL23OpenCLEnqueueReadBufferPN6OpenCL12BufferStructEjPv($pBuffer,$nBufferSize,$pHost){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $bReadSource;
 $3=$pBuffer;
 $4=$nBufferSize;
 $5=$pHost;
 var $6=$3;
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$3;
 var $10=(($9+20)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$3;
 var $13=(($12+32)|0);
 var $14=HEAP8[($13)];
 var $15=(($14)&1);
 var $16=($15&1);
 var $17=$4;
 var $18=$5;
 var $19=_clEnqueueReadBuffer($8,$11,$16,0,$17,$18,0,0,0);
 var $20=$3;
 var $21=(($20+16)|0);
 HEAP32[(($21)>>2)]=$19;
 var $22=$3;
 var $23=(($22+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 var $26=($25&1);
 $bReadSource=$26;
 var $27=$bReadSource;
 var $28=(($27)&1);
 if($28){label=3;break;}else{label=2;break;}
 case 2: 
 var $30=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,1800);
 $1=$30;
 $2=8;
 var $31=$1;
 var $32=$2;
 var $33=FUNCTION_TABLE[$32]($31);
 label=3;break;
 case 3: 
 var $35=$bReadSource;
 var $36=(($35)&1);
 STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13=sp;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $__s=(sp)+(8);
 var $30;
 var $31;
 var $__len;
 var $32=(sp)+(16);
 var $33=(sp)+(24);
 $28=$__os;
 $29=$__str;
 var $34=$28;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=25;break; }
 case 2: 
 $27=$__s;
 var $36=$27;
 var $37=(($36)|0);
 var $38=HEAP8[($37)];
 var $39=(($38)&1);
 label=3;break;
 case 3: 
 if($39){label=4;break;}else{label=29;break;}
 case 4: 
 var $42=$29;
 $26=$42;
 var $43=$26;
 var $44=(function() { try { __THREW__ = 0; return _strlen($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=26;break; }
 case 5: 
 label=6;break;
 case 6: 
 $__len=$44;
 var $46=$28;
 $24=$32;
 $25=$46;
 var $47=$24;
 var $48=$25;
 $20=$47;
 $21=$48;
 var $49=$20;
 var $50=$49;
 var $51=(($49)|0);
 var $52=$21;
 var $53=$52;
 var $54=HEAP32[(($53)>>2)];
 var $55=((($54)-(12))|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $58=$52;
 var $59=(($58+$57)|0);
 var $60=$59;
 $19=$60;
 var $61=$19;
 var $62=$61;
 $18=$62;
 var $63=$18;
 var $64=(($63+24)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$65;
 HEAP32[(($51)>>2)]=$66;
 var $67=$29;
 var $68=$28;
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=((($70)-(12))|0);
 var $72=$71;
 var $73=HEAP32[(($72)>>2)];
 var $74=$68;
 var $75=(($74+$73)|0);
 var $76=$75;
 $17=$76;
 var $77=$17;
 var $78=(($77+4)|0);
 var $79=HEAP32[(($78)>>2)];
 label=7;break;
 case 7: 
 var $81=$79&176;
 var $82=($81|0)==32;
 if($82){label=8;break;}else{label=9;break;}
 case 8: 
 var $84=$29;
 var $85=$__len;
 var $86=(($84+$85)|0);
 var $90=$86;label=10;break;
 case 9: 
 var $88=$29;
 var $90=$88;label=10;break;
 case 10: 
 var $90;
 var $91=$29;
 var $92=$__len;
 var $93=(($91+$92)|0);
 var $94=$28;
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $97=((($96)-(12))|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 var $100=$94;
 var $101=(($100+$99)|0);
 var $102=$101;
 var $103=$28;
 var $104=$103;
 var $105=HEAP32[(($104)>>2)];
 var $106=((($105)-(12))|0);
 var $107=$106;
 var $108=HEAP32[(($107)>>2)];
 var $109=$103;
 var $110=(($109+$108)|0);
 var $111=$110;
 $16=$111;
 var $112=$16;
 var $113=(($112+76)|0);
 var $114=HEAP32[(($113)>>2)];
 $6=-1;
 $7=$114;
 var $115=$6;
 var $116=$7;
 var $117=($115|0)==($116|0);
 if($117){label=11;break;}else{label=19;break;}
 case 11: 
 $11=$112;
 $12=32;
 var $119=$11;
 var $120=$119;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($13,$120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=26;break; }
 case 12: 
 $10=$13;
 var $121=$10;
 var $122=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($121,15376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=14;break; }
 case 13: 
 var $123=$122;
 var $124=$12;
 $8=$123;
 $9=$124;
 var $125=$8;
 var $126=$125;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+28)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=$9;
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($125,$130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=14;break; }
 case 14: 
 var $133$0 = ___cxa_find_matching_catch(-1, -1,0,0); var $133$1 = tempRet0;
 var $134=$133$0;
 $14=$134;
 var $135=$133$1;
 $15=$135;
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=16;break; }
 case 15: 
 var $137=$14;
 var $138=$15;
 var $139$0=$137;
 var $139$1=0;
 var $140$0=$139$0;
 var $140$1=$138;
 var $eh_lpad_body$1=$140$1;var $eh_lpad_body$0=$140$0;label=27;break;
 case 16: 
 var $142$0 = ___cxa_find_matching_catch(-1, -1,0,0,0); var $142$1 = tempRet0;
 var $143=$142$0;
 ___clang_call_terminate($143);
 throw "Reached an unreachable!";
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=26;break; }
 case 18: 
 var $144=(($131<<24)>>24);
 var $145=(($112+76)|0);
 HEAP32[(($145)>>2)]=$144;
 label=19;break;
 case 19: 
 var $146=(($112+76)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($147)&255);
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($33,$32,$67,$90,$93,$102,$148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=26;break; }
 case 21: 
 $5=$33;
 var $151=$5;
 var $152=(($151)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153|0)==0;
 if($154){label=22;break;}else{label=28;break;}
 case 22: 
 var $156=$28;
 var $157=$156;
 var $158=HEAP32[(($157)>>2)];
 var $159=((($158)-(12))|0);
 var $160=$159;
 var $161=HEAP32[(($160)>>2)];
 var $162=$156;
 var $163=(($162+$161)|0);
 var $164=$163;
 $3=$164;
 $4=5;
 var $165=$3;
 var $166=$165;
 var $167=$4;
 $1=$166;
 $2=$167;
 var $168=$1;
 var $169=(($168+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$2;
 var $172=$170|$171;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($168,$172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=26;break; }
 case 23: 
 label=24;break;
 case 24: 
 label=28;break;
 case 25: 
 var $175$0 = ___cxa_find_matching_catch(-1, -1,0); var $175$1 = tempRet0;
 var $176=$175$0;
 $30=$176;
 var $177=$175$1;
 $31=$177;
 label=32;break;
 case 26: 
 var $179$0 = ___cxa_find_matching_catch(-1, -1,0); var $179$1 = tempRet0;
 var $eh_lpad_body$1=$179$1;var $eh_lpad_body$0=$179$0;label=27;break;
 case 27: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $180=$eh_lpad_body$0;
 $30=$180;
 var $181=$eh_lpad_body$1;
 $31=$181;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=38;break; }
 case 28: 
 label=29;break;
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=25;break; }
 case 30: 
 label=34;break;
 case 31: 
 label=32;break;
 case 32: 
 var $187=$30;
 var $188=___cxa_begin_catch($187);
 var $189=$28;
 var $190=$189;
 var $191=HEAP32[(($190)>>2)];
 var $192=((($191)-(12))|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$189;
 var $196=(($195+$194)|0);
 var $197=$196;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($197) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=35;break; }
 case 33: 
 ___cxa_end_catch();
 label=34;break;
 case 34: 
 var $200=$28;
 STACKTOP=sp;return $200;
 case 35: 
 var $202$0 = ___cxa_find_matching_catch(-1, -1); var $202$1 = tempRet0;
 var $203=$202$0;
 $30=$203;
 var $204=$202$1;
 $31=$204;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=38;break; }
 case 36: 
 label=37;break;
 case 37: 
 var $207=$30;
 var $208=$31;
 var $209$0=$207;
 var $209$1=0;
 var $210$0=$209$0;
 var $210$1=$208;
 ___resumeException($210$0)
 case 38: 
 var $212$0 = ___cxa_find_matching_catch(-1, -1,0); var $212$1 = tempRet0;
 var $213=$212$0;
 ___clang_call_terminate($213);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9;
 $9=$__os;
 var $10=$9;
 var $11=$9;
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=((($13)-(12))|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$11;
 var $18=(($17+$16)|0);
 var $19=$18;
 $4=$19;
 $5=10;
 var $20=$4;
 var $21=$20;
 __ZNKSt3__18ios_base6getlocEv($6,$21);
 $3=$6;
 var $22=$3;
 var $23=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($22,15376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $24=$23;
 var $25=$5;
 $1=$24;
 $2=$25;
 var $26=$1;
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+28)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$2;
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26,$31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=3;break; }
 case 3: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 var $35=$34$0;
 $7=$35;
 var $36=$34$1;
 $8=$36;
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 var $38=$7;
 var $39=$8;
 var $40$0=$38;
 var $40$1=0;
 var $41$0=$40$0;
 var $41$1=$39;
 ___resumeException($41$0)
 case 5: 
 var $43$0 = ___cxa_find_matching_catch(-1, -1,0); var $43$1 = tempRet0;
 var $44=$43$0;
 ___clang_call_terminate($44);
 throw "Reached an unreachable!";
 case 6: 
 __ZNSt3__16localeD2Ev($6);
 var $45=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($10,$32);
 var $46=$9;
 var $47=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($46);
 var $48=$9;
 STACKTOP=sp;return $48;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $__r_i;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62=sp;
 var $__sz;
 var $__ns;
 var $__np;
 var $63=(sp)+(8);
 var $__sp=(sp)+(16);
 var $64;
 var $65;
 var $66=(sp)+(32);
 var $67;
 var $68=(sp)+(40);
 $57=$__ob;
 $58=$__op;
 $59=$__oe;
 $60=$__iob;
 $61=$__fl;
 var $69=(($__s)|0);
 var $70=HEAP32[(($69)>>2)];
 $55=$62;
 $56=-1;
 var $71=$55;
 var $72=$56;
 $53=$71;
 $54=$72;
 var $73=$53;
 var $74=(($73)|0);
 HEAP32[(($74)>>2)]=0;
 $52=$62;
 var $75=$52;
 var $76=($70|0)==0;
 if($76){label=2;break;}else{label=3;break;}
 case 2: 
 var $78=$agg_result;
 var $79=$__s;
 assert(4 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];
 label=30;break;
 case 3: 
 var $81=$59;
 var $82=$57;
 var $83=$81;
 var $84=$82;
 var $85=((($83)-($84))|0);
 $__sz=$85;
 var $86=$60;
 $41=$86;
 var $87=$41;
 var $88=(($87+12)|0);
 var $89=HEAP32[(($88)>>2)];
 $__ns=$89;
 var $90=$__ns;
 var $91=$__sz;
 var $92=($90|0)>($91|0);
 if($92){label=4;break;}else{label=5;break;}
 case 4: 
 var $94=$__sz;
 var $95=$__ns;
 var $96=((($95)-($94))|0);
 $__ns=$96;
 label=6;break;
 case 5: 
 $__ns=0;
 label=6;break;
 case 6: 
 var $99=$58;
 var $100=$57;
 var $101=$99;
 var $102=$100;
 var $103=((($101)-($102))|0);
 $__np=$103;
 var $104=$__np;
 var $105=($104|0)>0;
 if($105){label=7;break;}else{label=10;break;}
 case 7: 
 var $107=(($__s)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$57;
 var $110=$__np;
 $38=$108;
 $39=$109;
 $40=$110;
 var $111=$38;
 var $112=$111;
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113+48)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=$39;
 var $117=$40;
 var $118=FUNCTION_TABLE[$115]($111,$116,$117);
 var $119=$__np;
 var $120=($118|0)!=($119|0);
 if($120){label=8;break;}else{label=9;break;}
 case 8: 
 $36=$63;
 $37=-1;
 var $122=$36;
 var $123=$37;
 $34=$122;
 $35=$123;
 var $124=$34;
 var $125=(($124)|0);
 HEAP32[(($125)>>2)]=0;
 $33=$63;
 var $126=$33;
 var $127=(($__s)|0);
 HEAP32[(($127)>>2)]=0;
 var $128=$agg_result;
 var $129=$__s;
 assert(4 % 1 === 0);HEAP32[(($128)>>2)]=HEAP32[(($129)>>2)];
 label=30;break;
 case 9: 
 label=10;break;
 case 10: 
 var $132=$__ns;
 var $133=($132|0)>0;
 if($133){label=11;break;}else{label=25;break;}
 case 11: 
 var $135=$__ns;
 var $136=$61;
 $22=$__sp;
 $23=$135;
 $24=$136;
 var $137=$22;
 var $138=$23;
 var $139=$24;
 $19=$137;
 $20=$138;
 $21=$139;
 var $140=$19;
 var $141=$140;
 var $142=(($140)|0);
 $18=$142;
 var $143=$18;
 $17=$143;
 var $144=$17;
 var $145=$144;
 $16=$145;
 var $146=$16;
 var $147=$146;
 $15=$147;
 var $148=$15;
 var $149=(($146)|0);
 var $150=$20;
 var $151=$21;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($140,$150,$151);
 var $152=(($__s)|0);
 var $153=HEAP32[(($152)>>2)];
 $14=$__sp;
 var $154=$14;
 $13=$154;
 var $155=$13;
 $12=$155;
 var $156=$12;
 var $157=(($156)|0);
 $11=$157;
 var $158=$11;
 var $159=$158;
 $10=$159;
 var $160=$10;
 var $161=(($160)|0);
 var $162=(($161)|0);
 var $163=$162;
 var $164=(($163)|0);
 var $165=$164;
 var $166=HEAP8[($165)];
 var $167=($166&255);
 var $168=$167&1;
 var $169=($168|0)!=0;
 if($169){label=12;break;}else{label=13;break;}
 case 12: 
 $4=$155;
 var $171=$4;
 var $172=(($171)|0);
 $3=$172;
 var $173=$3;
 var $174=$173;
 $2=$174;
 var $175=$2;
 var $176=(($175)|0);
 var $177=(($176)|0);
 var $178=$177;
 var $179=(($178+8)|0);
 var $180=HEAP32[(($179)>>2)];
 var $194=$180;label=14;break;
 case 13: 
 $9=$155;
 var $182=$9;
 var $183=(($182)|0);
 $8=$183;
 var $184=$8;
 var $185=$184;
 $7=$185;
 var $186=$7;
 var $187=(($186)|0);
 var $188=(($187)|0);
 var $189=$188;
 var $190=(($189+1)|0);
 var $191=(($190)|0);
 $6=$191;
 var $192=$6;
 $5=$192;
 var $193=$5;
 var $194=$193;label=14;break;
 case 14: 
 var $194;
 $1=$194;
 var $195=$1;
 var $196=$__ns;
 $25=$153;
 $26=$195;
 $27=$196;
 var $197=$25;
 var $198=$197;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+48)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$26;
 var $203=$27;
 var $204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($197,$202,$203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 label=16;break;
 case 16: 
 var $206=$__ns;
 var $207=($204|0)!=($206|0);
 if($207){label=17;break;}else{label=21;break;}
 case 17: 
 $30=$66;
 $31=-1;
 var $209=$30;
 var $210=$31;
 $28=$209;
 $29=$210;
 var $211=$28;
 var $212=(($211)|0);
 HEAP32[(($212)>>2)]=0;
 label=18;break;
 case 18: 
 $32=$66;
 var $214=$32;
 label=19;break;
 case 19: 
 var $216=(($__s)|0);
 HEAP32[(($216)>>2)]=0;
 var $217=$agg_result;
 var $218=$__s;
 assert(4 % 1 === 0);HEAP32[(($217)>>2)]=HEAP32[(($218)>>2)];
 $67=1;
 label=22;break;
 case 20: 
 var $220$0 = ___cxa_find_matching_catch(-1, -1); var $220$1 = tempRet0;
 var $221=$220$0;
 $64=$221;
 var $222=$220$1;
 $65=$222;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 21: 
 $67=0;
 label=22;break;
 case 22: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 var $cleanup_dest=$67;
 if(($cleanup_dest|0)==0){ label=23;break;}else if(($cleanup_dest|0)==1){ label=30;break;}else{label=33;break;}
 case 23: 
 label=25;break;
 case 24: 
 label=31;break;
 case 25: 
 var $228=$59;
 var $229=$58;
 var $230=$228;
 var $231=$229;
 var $232=((($230)-($231))|0);
 $__np=$232;
 var $233=$__np;
 var $234=($233|0)>0;
 if($234){label=26;break;}else{label=29;break;}
 case 26: 
 var $236=(($__s)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=$58;
 var $239=$__np;
 $42=$237;
 $43=$238;
 $44=$239;
 var $240=$42;
 var $241=$240;
 var $242=HEAP32[(($241)>>2)];
 var $243=(($242+48)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=$43;
 var $246=$44;
 var $247=FUNCTION_TABLE[$244]($240,$245,$246);
 var $248=$__np;
 var $249=($247|0)!=($248|0);
 if($249){label=27;break;}else{label=28;break;}
 case 27: 
 $47=$68;
 $48=-1;
 var $251=$47;
 var $252=$48;
 $45=$251;
 $46=$252;
 var $253=$45;
 var $254=(($253)|0);
 HEAP32[(($254)>>2)]=0;
 $49=$68;
 var $255=$49;
 var $256=(($__s)|0);
 HEAP32[(($256)>>2)]=0;
 var $257=$agg_result;
 var $258=$__s;
 assert(4 % 1 === 0);HEAP32[(($257)>>2)]=HEAP32[(($258)>>2)];
 label=30;break;
 case 28: 
 label=29;break;
 case 29: 
 var $261=$60;
 $50=$261;
 $51=0;
 var $262=$50;
 var $263=(($262+12)|0);
 var $264=HEAP32[(($263)>>2)];
 $__r_i=$264;
 var $265=$51;
 var $266=(($262+12)|0);
 HEAP32[(($266)>>2)]=$265;
 var $267=$__r_i;
 var $268=$agg_result;
 var $269=$__s;
 assert(4 % 1 === 0);HEAP32[(($268)>>2)]=HEAP32[(($269)>>2)];
 label=30;break;
 case 30: 
 STACKTOP=sp;return;
 case 31: 
 var $272=$64;
 var $273=$65;
 var $274$0=$272;
 var $274$1=0;
 var $275$0=$274$0;
 var $275$1=$273;
 ___resumeException($275$0)
 case 32: 
 var $277$0 = ___cxa_find_matching_catch(-1, -1,0); var $277$1 = tempRet0;
 var $278=$277$0;
 ___clang_call_terminate($278);
 throw "Reached an unreachable!";
 case 33: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZL25OpenCLReleaseBufferMemoryPN6OpenCL12BufferStructE($pBuffer){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $nBufferRefCount=sp;
 var $bValidRefCount;
 $3=$pBuffer;
 HEAP32[(($nBufferRefCount)>>2)]=0;
 var $4=$3;
 var $5=(($4+20)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$nBufferRefCount;
 var $8=_clGetMemObjectInfo($6,4357,4,$7,0);
 var $9=$3;
 var $10=(($9+16)|0);
 HEAP32[(($10)>>2)]=$8;
 var $11=HEAP32[(($nBufferRefCount)>>2)];
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{var $19=0;label=3;break;}
 case 2: 
 var $14=$3;
 var $15=(($14+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 var $19=$17;label=3;break;
 case 3: 
 var $19;
 var $20=($19&1);
 $bValidRefCount=$20;
 var $21=$bValidRefCount;
 var $22=(($21)&1);
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 var $24=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,1120);
 $1=$24;
 $2=8;
 var $25=$1;
 var $26=$2;
 var $27=FUNCTION_TABLE[$26]($25);
 label=6;break;
 case 5: 
 var $29=$3;
 var $30=(($29+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=_clReleaseMemObject($31);
 label=6;break;
 case 6: 
 var $34=$bValidRefCount;
 var $35=(($34)&1);
 STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL4FileC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$rFileName){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$rFileName;
 var $3=$1;
 var $4=$3;
 HEAP32[(($4)>>2)]=6856;
 var $5=$2;
 var $6=__ZL10FileCreateRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($5);
 var $7=(($3+4)|0);
 HEAP32[(($7)>>2)]=$6;
 STACKTOP=sp;return;
}


function __ZL10FileCreateRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($rFileName){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+208)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $pFile;
 var $iFile=sp;
 var $60;
 var $61;
 var $62=(sp)+(192);
 $59=$rFileName;
 $pFile=0;
 var $63=$59;
 $58=$63;
 var $64=$58;
 $57=$64;
 var $65=$57;
 $56=$65;
 var $66=$56;
 var $67=(($66)|0);
 $55=$67;
 var $68=$55;
 var $69=$68;
 $54=$69;
 var $70=$54;
 var $71=(($70)|0);
 var $72=(($71)|0);
 var $73=$72;
 var $74=(($73)|0);
 var $75=$74;
 var $76=HEAP8[($75)];
 var $77=($76&255);
 var $78=$77&1;
 var $79=($78|0)!=0;
 if($79){label=2;break;}else{label=3;break;}
 case 2: 
 $50=$65;
 var $81=$50;
 var $82=(($81)|0);
 $49=$82;
 var $83=$49;
 var $84=$83;
 $48=$84;
 var $85=$48;
 var $86=(($85)|0);
 var $87=(($86)|0);
 var $88=$87;
 var $89=(($88+4)|0);
 var $90=HEAP32[(($89)>>2)];
 var $105=$90;label=4;break;
 case 3: 
 $53=$65;
 var $92=$53;
 var $93=(($92)|0);
 $52=$93;
 var $94=$52;
 var $95=$94;
 $51=$95;
 var $96=$51;
 var $97=(($96)|0);
 var $98=(($97)|0);
 var $99=$98;
 var $100=(($99)|0);
 var $101=$100;
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$103>>1;
 var $105=$104;label=4;break;
 case 4: 
 var $105;
 var $106=($105|0)!=0;
 if($106){label=5;break;}else{label=63;break;}
 case 5: 
 var $108=__Znwj(8);
 var $109=$108;
 $pFile=$109;
 var $110=$pFile;
 var $111=($110|0)!=0;
 if($111){label=6;break;}else{label=62;break;}
 case 6: 
 var $113=$59;
 $47=$113;
 var $114=$47;
 $46=$114;
 var $115=$46;
 $45=$115;
 var $116=$45;
 $44=$116;
 var $117=$44;
 var $118=(($117)|0);
 $43=$118;
 var $119=$43;
 var $120=$119;
 $42=$120;
 var $121=$42;
 var $122=(($121)|0);
 var $123=(($122)|0);
 var $124=$123;
 var $125=(($124)|0);
 var $126=$125;
 var $127=HEAP8[($126)];
 var $128=($127&255);
 var $129=$128&1;
 var $130=($129|0)!=0;
 if($130){label=7;break;}else{label=8;break;}
 case 7: 
 $36=$116;
 var $132=$36;
 var $133=(($132)|0);
 $35=$133;
 var $134=$35;
 var $135=$134;
 $34=$135;
 var $136=$34;
 var $137=(($136)|0);
 var $138=(($137)|0);
 var $139=$138;
 var $140=(($139+8)|0);
 var $141=HEAP32[(($140)>>2)];
 var $155=$141;label=9;break;
 case 8: 
 $41=$116;
 var $143=$41;
 var $144=(($143)|0);
 $40=$144;
 var $145=$40;
 var $146=$145;
 $39=$146;
 var $147=$39;
 var $148=(($147)|0);
 var $149=(($148)|0);
 var $150=$149;
 var $151=(($150+1)|0);
 var $152=(($151)|0);
 $38=$152;
 var $153=$38;
 $37=$153;
 var $154=$37;
 var $155=$154;label=9;break;
 case 9: 
 var $155;
 $33=$155;
 var $156=$33;
 $26=$iFile;
 $27=$156;
 $28=14;
 var $157=$26;
 var $158=$157;
 var $159=(($158+108)|0);
 var $160=$159;
 $25=$160;
 var $161=$25;
 var $162=$161;
 $24=$162;
 var $163=$24;
 var $164=$163;
 HEAP32[(($164)>>2)]=4800;
 var $165=$161;
 HEAP32[(($165)>>2)]=4344;
 var $166=$157;
 HEAP32[(($166)>>2)]=5948;
 var $167=$157;
 var $168=(($167+108)|0);
 var $169=$168;
 HEAP32[(($169)>>2)]=5968;
 var $170=$157;
 var $171=(($157+8)|0);
 var $172=$171;
 $21=$170;
 $22=6948;
 $23=$172;
 var $173=$21;
 var $174=$22;
 var $175=HEAP32[(($174)>>2)];
 var $176=$173;
 HEAP32[(($176)>>2)]=$175;
 var $177=(($174+4)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$173;
 var $180=HEAP32[(($179)>>2)];
 var $181=((($180)-(12))|0);
 var $182=$181;
 var $183=HEAP32[(($182)>>2)];
 var $184=$173;
 var $185=(($184+$183)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=$178;
 var $187=(($173+4)|0);
 HEAP32[(($187)>>2)]=0;
 var $188=$173;
 var $189=HEAP32[(($188)>>2)];
 var $190=((($189)-(12))|0);
 var $191=$190;
 var $192=HEAP32[(($191)>>2)];
 var $193=$173;
 var $194=(($193+$192)|0);
 var $195=$194;
 var $196=$23;
 $19=$195;
 $20=$196;
 var $197=$19;
 var $198=$197;
 var $199=$20;
 var $200=$199;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($198,$200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=15;break; }
 case 10: 
 var $201=(($197+72)|0);
 HEAP32[(($201)>>2)]=0;
 var $202=(($197+76)|0);
 HEAP32[(($202)>>2)]=-1;
 var $203=$157;
 HEAP32[(($203)>>2)]=5948;
 var $204=$157;
 var $205=(($204+108)|0);
 var $206=$205;
 HEAP32[(($206)>>2)]=5968;
 var $207=(($157+8)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($207) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=16;break; }
 case 11: 
 var $209=(($157+8)|0);
 var $210=$27;
 var $211=$28;
 var $212=$211|8;
 var $213=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($209,$210,$212) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=17;break; }
 case 12: 
 var $215=($213|0)==0;
 if($215){label=13;break;}else{label=24;break;}
 case 13: 
 var $217=$157;
 var $218=HEAP32[(($217)>>2)];
 var $219=((($218)-(12))|0);
 var $220=$219;
 var $221=HEAP32[(($220)>>2)];
 var $222=$157;
 var $223=(($222+$221)|0);
 var $224=$223;
 $17=$224;
 $18=4;
 var $225=$17;
 var $226=$225;
 var $227=$18;
 $15=$226;
 $16=$227;
 var $228=$15;
 var $229=(($228+16)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=$16;
 var $232=$230|$231;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($228,$232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=17;break; }
 case 14: 
 label=24;break;
 case 15: 
 var $234$0 = ___cxa_find_matching_catch(-1, -1); var $234$1 = tempRet0;
 var $235=$234$0;
 $29=$235;
 var $236=$234$1;
 $30=$236;
 label=21;break;
 case 16: 
 var $238$0 = ___cxa_find_matching_catch(-1, -1); var $238$1 = tempRet0;
 var $239=$238$0;
 $29=$239;
 var $240=$238$1;
 $30=$240;
 label=19;break;
 case 17: 
 var $242$0 = ___cxa_find_matching_catch(-1, -1); var $242$1 = tempRet0;
 var $243=$242$0;
 $29=$243;
 var $244=$242$1;
 $30=$244;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($207) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=23;break; }
 case 18: 
 label=19;break;
 case 19: 
 var $247=$157;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($247,6948) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=23;break; }
 case 20: 
 label=21;break;
 case 21: 
 var $250=$157;
 var $251=(($250+108)|0);
 var $252=$251;
 (function() { try { __THREW__ = 0; return __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 var $254=$29;
 var $255=$30;
 var $256$0=$254;
 var $256$1=0;
 var $257$0=$256$0;
 var $257$1=$255;
 ___resumeException($257$0)
 case 23: 
 var $259$0 = ___cxa_find_matching_catch(-1, -1,0); var $259$1 = tempRet0;
 var $260=$259$0;
 ___clang_call_terminate($260);
 throw "Reached an unreachable!";
 case 24: 
 $14=$iFile;
 var $261=$14;
 var $262=(($261+8)|0);
 $13=$262;
 var $263=$13;
 var $264=(($263+64)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($265|0)!=0;
 label=25;break;
 case 25: 
 if($266){label=26;break;}else{label=54;break;}
 case 26: 
 var $269=$iFile;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE5tellgEv($62,$269) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=39;break; }
 case 27: 
 $12=$62;
 var $271=$12;
 var $272=(($271+8)|0);
 var $ld$0$0=(($272)|0);
 var $273$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($272+4)|0);
 var $273$1=HEAP32[(($ld$1$1)>>2)];
 label=28;break;
 case 28: 
 var $275$0=$273$0;
 var $275=$275$0;
 var $276=$pFile;
 var $277=(($276+4)|0);
 HEAP32[(($277)>>2)]=$275;
 var $278=$pFile;
 var $279=(($278+4)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=($280|0)!=0;
 if($281){label=29;break;}else{label=47;break;}
 case 29: 
 var $283=$pFile;
 var $284=(($283+4)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(function() { try { __THREW__ = 0; return __Znaj($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=39;break; }
 case 30: 
 var $288=$pFile;
 var $289=(($288)|0);
 HEAP32[(($289)>>2)]=$286;
 var $290=$pFile;
 var $291=(($290)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=($292|0)!=0;
 if($293){label=31;break;}else{label=40;break;}
 case 31: 
 var $295=$iFile;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $296=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE($295,$$etemp$2$0,$$etemp$2$1,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=39;break; }
 case 32: 
 var $298=$iFile;
 var $299=$pFile;
 var $300=(($299)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=$pFile;
 var $303=(($302+4)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE4readEPci($298,$301,$304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=39;break; }
 case 33: 
 $11=$iFile;
 var $307=$11;
 var $308=(($307+8)|0);
 var $309=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($308) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=39;break; }
 case 34: 
 var $310=($309|0)==0;
 if($310){label=35;break;}else{label=37;break;}
 case 35: 
 var $312=$307;
 var $313=HEAP32[(($312)>>2)];
 var $314=((($313)-(12))|0);
 var $315=$314;
 var $316=HEAP32[(($315)>>2)];
 var $317=$307;
 var $318=(($317+$316)|0);
 var $319=$318;
 $9=$319;
 $10=4;
 var $320=$9;
 var $321=$320;
 var $322=$10;
 $7=$321;
 $8=$322;
 var $323=$7;
 var $324=(($323+16)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=$8;
 var $327=$325|$326;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($323,$327) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=39;break; }
 case 36: 
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=46;break;
 case 39: 
 var $330$0 = ___cxa_find_matching_catch(-1, -1); var $330$1 = tempRet0;
 var $331=$330$0;
 $60=$331;
 var $332=$330$1;
 $61=$332;
 (function() { try { __THREW__ = 0; return __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($iFile) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=66;break; }
 case 40: 
 var $334=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=39;break; }
 case 41: 
 var $336=$59;
 var $337=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($334,$336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=39;break; }
 case 42: 
 var $339=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($337,3208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=39;break; }
 case 43: 
 $5=$339;
 $6=8;
 var $341=$5;
 var $342=$6;
 var $343=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$342]($341) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=39;break; }
 case 44: 
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 label=53;break;
 case 47: 
 var $347=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=39;break; }
 case 48: 
 var $349=$59;
 var $350=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($347,$349) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=39;break; }
 case 49: 
 var $352=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($350,2568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=39;break; }
 case 50: 
 $3=$352;
 $4=8;
 var $354=$3;
 var $355=$4;
 var $356=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$355]($354) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=39;break; }
 case 51: 
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=60;break;
 case 54: 
 var $360=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 var $362=$59;
 var $363=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($360,$362) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=39;break; }
 case 56: 
 var $365=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($363,2200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=39;break; }
 case 57: 
 $1=$365;
 $2=8;
 var $367=$1;
 var $368=$2;
 var $369=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$368]($367) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=39;break; }
 case 58: 
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($iFile);
 label=62;break;
 case 61: 
 label=65;break;
 case 62: 
 label=64;break;
 case 63: 
 var $375=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,1688);
 $31=$375;
 $32=8;
 var $376=$31;
 var $377=$32;
 var $378=FUNCTION_TABLE[$377]($376);
 label=64;break;
 case 64: 
 var $380=$pFile;
 STACKTOP=sp;return $380;
 case 65: 
 var $382=$60;
 var $383=$61;
 var $384$0=$382;
 var $384$1=0;
 var $385$0=$384$0;
 var $385$1=$383;
 ___resumeException($385$0)
 case 66: 
 var $387$0 = ___cxa_find_matching_catch(-1, -1,0); var $387$1 = tempRet0;
 var $388=$387$0;
 ___clang_call_terminate($388);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL4FileD0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 (function() { try { __THREW__ = 0; return __ZN6OpenCL4FileD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=$4;
 __ZdlPv($6);
 STACKTOP=sp;return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1); var $8$1 = tempRet0;
 var $9=$8$0;
 $2=$9;
 var $10=$8$1;
 $3=$10;
 var $11=$4;
 __ZdlPv($11);
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=$3;
 var $15$0=$13;
 var $15$1=0;
 var $16$0=$15$0;
 var $16$1=$14;
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL4FileD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=6856;
 var $4=(($2+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZL11FileReleasePN6OpenCL10FileStructE($5);
 STACKTOP=sp;return;
}


function __ZL11FileReleasePN6OpenCL10FileStructE($pFile){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$pFile;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=9;break;}
 case 2: 
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=6;break;}
 case 3: 
 var $10=$1;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 __ZdaPv($12);
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $17=$1;
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=7;break;}
 case 7: 
 var $20=$17;
 __ZdlPv($20);
 label=8;break;
 case 8: 
 $1=0;
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK6OpenCL4File11GetContentsEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 STACKTOP=sp;return $6;
}


function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36=sp;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $__s=(sp)+(8);
 var $95;
 var $96;
 var $__len;
 var $97=(sp)+(16);
 var $98=(sp)+(24);
 $93=$__os;
 $94=$__str;
 var $99=$93;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s,$99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 $92=$__s;
 var $101=$92;
 var $102=(($101)|0);
 var $103=HEAP8[($102)];
 var $104=(($103)&1);
 label=3;break;
 case 3: 
 if($104){label=4;break;}else{label=42;break;}
 case 4: 
 var $107=$94;
 $91=$107;
 var $108=$91;
 $90=$108;
 var $109=$90;
 var $110=(($109)|0);
 $89=$110;
 var $111=$89;
 var $112=$111;
 $88=$112;
 var $113=$88;
 var $114=(($113)|0);
 var $115=(($114)|0);
 var $116=$115;
 var $117=(($116)|0);
 var $118=$117;
 var $119=HEAP8[($118)];
 var $120=($119&255);
 var $121=$120&1;
 var $122=($121|0)!=0;
 if($122){label=5;break;}else{label=6;break;}
 case 5: 
 $84=$108;
 var $124=$84;
 var $125=(($124)|0);
 $83=$125;
 var $126=$83;
 var $127=$126;
 $82=$127;
 var $128=$82;
 var $129=(($128)|0);
 var $130=(($129)|0);
 var $131=$130;
 var $132=(($131+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $148=$133;label=7;break;
 case 6: 
 $87=$108;
 var $135=$87;
 var $136=(($135)|0);
 $86=$136;
 var $137=$86;
 var $138=$137;
 $85=$138;
 var $139=$85;
 var $140=(($139)|0);
 var $141=(($140)|0);
 var $142=$141;
 var $143=(($142)|0);
 var $144=$143;
 var $145=HEAP8[($144)];
 var $146=($145&255);
 var $147=$146>>1;
 var $148=$147;label=7;break;
 case 7: 
 var $148;
 $__len=$148;
 var $149=$93;
 $80=$97;
 $81=$149;
 var $150=$80;
 var $151=$81;
 $76=$150;
 $77=$151;
 var $152=$76;
 var $153=$152;
 var $154=(($152)|0);
 var $155=$77;
 var $156=$155;
 var $157=HEAP32[(($156)>>2)];
 var $158=((($157)-(12))|0);
 var $159=$158;
 var $160=HEAP32[(($159)>>2)];
 var $161=$155;
 var $162=(($161+$160)|0);
 var $163=$162;
 $75=$163;
 var $164=$75;
 var $165=$164;
 $74=$165;
 var $166=$74;
 var $167=(($166+24)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=$168;
 HEAP32[(($154)>>2)]=$169;
 var $170=$94;
 $73=$170;
 var $171=$73;
 $72=$171;
 var $172=$72;
 $71=$172;
 var $173=$71;
 var $174=(($173)|0);
 $70=$174;
 var $175=$70;
 var $176=$175;
 $69=$176;
 var $177=$69;
 var $178=(($177)|0);
 var $179=(($178)|0);
 var $180=$179;
 var $181=(($180)|0);
 var $182=$181;
 var $183=HEAP8[($182)];
 var $184=($183&255);
 var $185=$184&1;
 var $186=($185|0)!=0;
 if($186){label=8;break;}else{label=9;break;}
 case 8: 
 $63=$172;
 var $188=$63;
 var $189=(($188)|0);
 $62=$189;
 var $190=$62;
 var $191=$190;
 $61=$191;
 var $192=$61;
 var $193=(($192)|0);
 var $194=(($193)|0);
 var $195=$194;
 var $196=(($195+8)|0);
 var $197=HEAP32[(($196)>>2)];
 var $211=$197;label=10;break;
 case 9: 
 $68=$172;
 var $199=$68;
 var $200=(($199)|0);
 $67=$200;
 var $201=$67;
 var $202=$201;
 $66=$202;
 var $203=$66;
 var $204=(($203)|0);
 var $205=(($204)|0);
 var $206=$205;
 var $207=(($206+1)|0);
 var $208=(($207)|0);
 $65=$208;
 var $209=$65;
 $64=$209;
 var $210=$64;
 var $211=$210;label=10;break;
 case 10: 
 var $211;
 $60=$211;
 var $212=$60;
 var $213=$93;
 var $214=$213;
 var $215=HEAP32[(($214)>>2)];
 var $216=((($215)-(12))|0);
 var $217=$216;
 var $218=HEAP32[(($217)>>2)];
 var $219=$213;
 var $220=(($219+$218)|0);
 var $221=$220;
 $55=$221;
 var $222=$55;
 var $223=(($222+4)|0);
 var $224=HEAP32[(($223)>>2)];
 label=11;break;
 case 11: 
 var $226=$224&176;
 var $227=($226|0)==32;
 if($227){label=12;break;}else{label=16;break;}
 case 12: 
 var $229=$94;
 $53=$229;
 var $230=$53;
 $52=$230;
 var $231=$52;
 $51=$231;
 var $232=$51;
 var $233=(($232)|0);
 $50=$233;
 var $234=$50;
 var $235=$234;
 $49=$235;
 var $236=$49;
 var $237=(($236)|0);
 var $238=(($237)|0);
 var $239=$238;
 var $240=(($239)|0);
 var $241=$240;
 var $242=HEAP8[($241)];
 var $243=($242&255);
 var $244=$243&1;
 var $245=($244|0)!=0;
 if($245){label=13;break;}else{label=14;break;}
 case 13: 
 $43=$231;
 var $247=$43;
 var $248=(($247)|0);
 $42=$248;
 var $249=$42;
 var $250=$249;
 $41=$250;
 var $251=$41;
 var $252=(($251)|0);
 var $253=(($252)|0);
 var $254=$253;
 var $255=(($254+8)|0);
 var $256=HEAP32[(($255)>>2)];
 var $270=$256;label=15;break;
 case 14: 
 $48=$231;
 var $258=$48;
 var $259=(($258)|0);
 $47=$259;
 var $260=$47;
 var $261=$260;
 $46=$261;
 var $262=$46;
 var $263=(($262)|0);
 var $264=(($263)|0);
 var $265=$264;
 var $266=(($265+1)|0);
 var $267=(($266)|0);
 $45=$267;
 var $268=$45;
 $44=$268;
 var $269=$44;
 var $270=$269;label=15;break;
 case 15: 
 var $270;
 $40=$270;
 var $271=$40;
 var $272=$__len;
 var $273=(($271+$272)|0);
 var $319=$273;label=20;break;
 case 16: 
 var $275=$94;
 $28=$275;
 var $276=$28;
 $27=$276;
 var $277=$27;
 $26=$277;
 var $278=$26;
 var $279=(($278)|0);
 $25=$279;
 var $280=$25;
 var $281=$280;
 $24=$281;
 var $282=$24;
 var $283=(($282)|0);
 var $284=(($283)|0);
 var $285=$284;
 var $286=(($285)|0);
 var $287=$286;
 var $288=HEAP8[($287)];
 var $289=($288&255);
 var $290=$289&1;
 var $291=($290|0)!=0;
 if($291){label=17;break;}else{label=18;break;}
 case 17: 
 $18=$277;
 var $293=$18;
 var $294=(($293)|0);
 $17=$294;
 var $295=$17;
 var $296=$295;
 $16=$296;
 var $297=$16;
 var $298=(($297)|0);
 var $299=(($298)|0);
 var $300=$299;
 var $301=(($300+8)|0);
 var $302=HEAP32[(($301)>>2)];
 var $316=$302;label=19;break;
 case 18: 
 $23=$277;
 var $304=$23;
 var $305=(($304)|0);
 $22=$305;
 var $306=$22;
 var $307=$306;
 $21=$307;
 var $308=$21;
 var $309=(($308)|0);
 var $310=(($309)|0);
 var $311=$310;
 var $312=(($311+1)|0);
 var $313=(($312)|0);
 $20=$313;
 var $314=$20;
 $19=$314;
 var $315=$19;
 var $316=$315;label=19;break;
 case 19: 
 var $316;
 $15=$316;
 var $317=$15;
 var $319=$317;label=20;break;
 case 20: 
 var $319;
 var $320=$94;
 $14=$320;
 var $321=$14;
 $13=$321;
 var $322=$13;
 $12=$322;
 var $323=$12;
 var $324=(($323)|0);
 $11=$324;
 var $325=$11;
 var $326=$325;
 $10=$326;
 var $327=$10;
 var $328=(($327)|0);
 var $329=(($328)|0);
 var $330=$329;
 var $331=(($330)|0);
 var $332=$331;
 var $333=HEAP8[($332)];
 var $334=($333&255);
 var $335=$334&1;
 var $336=($335|0)!=0;
 if($336){label=21;break;}else{label=22;break;}
 case 21: 
 $4=$322;
 var $338=$4;
 var $339=(($338)|0);
 $3=$339;
 var $340=$3;
 var $341=$340;
 $2=$341;
 var $342=$2;
 var $343=(($342)|0);
 var $344=(($343)|0);
 var $345=$344;
 var $346=(($345+8)|0);
 var $347=HEAP32[(($346)>>2)];
 var $361=$347;label=23;break;
 case 22: 
 $9=$322;
 var $349=$9;
 var $350=(($349)|0);
 $8=$350;
 var $351=$8;
 var $352=$351;
 $7=$352;
 var $353=$7;
 var $354=(($353)|0);
 var $355=(($354)|0);
 var $356=$355;
 var $357=(($356+1)|0);
 var $358=(($357)|0);
 $6=$358;
 var $359=$6;
 $5=$359;
 var $360=$5;
 var $361=$360;label=23;break;
 case 23: 
 var $361;
 $1=$361;
 var $362=$1;
 var $363=$__len;
 var $364=(($362+$363)|0);
 var $365=$93;
 var $366=$365;
 var $367=HEAP32[(($366)>>2)];
 var $368=((($367)-(12))|0);
 var $369=$368;
 var $370=HEAP32[(($369)>>2)];
 var $371=$365;
 var $372=(($371+$370)|0);
 var $373=$372;
 var $374=$93;
 var $375=$374;
 var $376=HEAP32[(($375)>>2)];
 var $377=((($376)-(12))|0);
 var $378=$377;
 var $379=HEAP32[(($378)>>2)];
 var $380=$374;
 var $381=(($380+$379)|0);
 var $382=$381;
 $39=$382;
 var $383=$39;
 var $384=(($383+76)|0);
 var $385=HEAP32[(($384)>>2)];
 $29=-1;
 $30=$385;
 var $386=$29;
 var $387=$30;
 var $388=($386|0)==($387|0);
 if($388){label=24;break;}else{label=32;break;}
 case 24: 
 $34=$383;
 $35=32;
 var $390=$34;
 var $391=$390;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($36,$391) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=39;break; }
 case 25: 
 $33=$36;
 var $392=$33;
 var $393=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($392,15376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=27;break; }
 case 26: 
 var $394=$393;
 var $395=$35;
 $31=$394;
 $32=$395;
 var $396=$31;
 var $397=$396;
 var $398=HEAP32[(($397)>>2)];
 var $399=(($398+28)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=$32;
 var $402=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$400]($396,$401) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=27;break; }
 case 27: 
 var $404$0 = ___cxa_find_matching_catch(-1, -1,0,0); var $404$1 = tempRet0;
 var $405=$404$0;
 $37=$405;
 var $406=$404$1;
 $38=$406;
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 var $408=$37;
 var $409=$38;
 var $410$0=$408;
 var $410$1=0;
 var $411$0=$410$0;
 var $411$1=$409;
 var $eh_lpad_body$1=$411$1;var $eh_lpad_body$0=$411$0;label=40;break;
 case 29: 
 var $413$0 = ___cxa_find_matching_catch(-1, -1,0,0,0); var $413$1 = tempRet0;
 var $414=$413$0;
 ___clang_call_terminate($414);
 throw "Reached an unreachable!";
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=39;break; }
 case 31: 
 var $415=(($402<<24)>>24);
 var $416=(($383+76)|0);
 HEAP32[(($416)>>2)]=$415;
 label=32;break;
 case 32: 
 var $417=(($383+76)|0);
 var $418=HEAP32[(($417)>>2)];
 var $419=(($418)&255);
 label=33;break;
 case 33: 
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($98,$97,$212,$319,$364,$373,$419) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=39;break; }
 case 34: 
 $54=$98;
 var $422=$54;
 var $423=(($422)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=($424|0)==0;
 if($425){label=35;break;}else{label=41;break;}
 case 35: 
 var $427=$93;
 var $428=$427;
 var $429=HEAP32[(($428)>>2)];
 var $430=((($429)-(12))|0);
 var $431=$430;
 var $432=HEAP32[(($431)>>2)];
 var $433=$427;
 var $434=(($433+$432)|0);
 var $435=$434;
 $58=$435;
 $59=5;
 var $436=$58;
 var $437=$436;
 var $438=$59;
 $56=$437;
 $57=$438;
 var $439=$56;
 var $440=(($439+16)|0);
 var $441=HEAP32[(($440)>>2)];
 var $442=$57;
 var $443=$441|$442;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($439,$443) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=39;break; }
 case 36: 
 label=37;break;
 case 37: 
 label=41;break;
 case 38: 
 var $446$0 = ___cxa_find_matching_catch(-1, -1,0); var $446$1 = tempRet0;
 var $447=$446$0;
 $95=$447;
 var $448=$446$1;
 $96=$448;
 label=45;break;
 case 39: 
 var $450$0 = ___cxa_find_matching_catch(-1, -1,0); var $450$1 = tempRet0;
 var $eh_lpad_body$1=$450$1;var $eh_lpad_body$0=$450$0;label=40;break;
 case 40: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $451=$eh_lpad_body$0;
 $95=$451;
 var $452=$eh_lpad_body$1;
 $96=$452;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=51;break; }
 case 41: 
 label=42;break;
 case 42: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=38;break; }
 case 43: 
 label=47;break;
 case 44: 
 label=45;break;
 case 45: 
 var $458=$95;
 var $459=___cxa_begin_catch($458);
 var $460=$93;
 var $461=$460;
 var $462=HEAP32[(($461)>>2)];
 var $463=((($462)-(12))|0);
 var $464=$463;
 var $465=HEAP32[(($464)>>2)];
 var $466=$460;
 var $467=(($466+$465)|0);
 var $468=$467;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($468) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=48;break; }
 case 46: 
 ___cxa_end_catch();
 label=47;break;
 case 47: 
 var $471=$93;
 STACKTOP=sp;return $471;
 case 48: 
 var $473$0 = ___cxa_find_matching_catch(-1, -1); var $473$1 = tempRet0;
 var $474=$473$0;
 $95=$474;
 var $475=$473$1;
 $96=$475;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=51;break; }
 case 49: 
 label=50;break;
 case 50: 
 var $478=$95;
 var $479=$96;
 var $480$0=$478;
 var $480$1=0;
 var $481$0=$480$0;
 var $481$1=$479;
 ___resumeException($481$0)
 case 51: 
 var $483$0 = ___cxa_find_matching_catch(-1, -1,0); var $483$1 = tempRet0;
 var $484=$483$0;
 ___clang_call_terminate($484);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($4,6944) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=$4;
 var $7=(($6+108)|0);
 var $8=$7;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($8);
 STACKTOP=sp;return;
 case 3: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;
 var $11=$10$0;
 $2=$11;
 var $12=$10$1;
 $3=$12;
 var $13=$4;
 var $14=(($13+108)|0);
 var $15=$14;
 (function() { try { __THREW__ = 0; return __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $18=$2;
 var $19=$3;
 var $20$0=$18;
 var $20$1=0;
 var $21$0=$20$0;
 var $21$1=$19;
 ___resumeException($21$0)
 case 6: 
 var $23$0 = ___cxa_find_matching_catch(-1, -1,0); var $23$1 = tempRet0;
 var $24=$23$0;
 ___clang_call_terminate($24);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$vtt;
 var $5=$1;
 var $6=$2;
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 HEAP32[(($8)>>2)]=$7;
 var $9=(($6+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5;
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)-(12))|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=$5;
 var $17=(($16+$15)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=$10;
 var $19=(($5+8)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $21=$5;
 var $22=(($6+4)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($21,$22);
 STACKTOP=sp;return;
 case 3: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1); var $24$1 = tempRet0;
 var $25=$24$0;
 $3=$25;
 var $26=$24$1;
 $4=$26;
 var $27=$5;
 var $28=(($6+4)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($27,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $31=$3;
 var $32=$4;
 var $33$0=$31;
 var $33$1=0;
 var $34$0=$33$0;
 var $34$1=$32;
 ___resumeException($34$0)
 case 6: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 var $37=$36$0;
 ___clang_call_terminate($37);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($10);
 STACKTOP=sp;return;
}


function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=$4;
 __ZdlPv($6);
 STACKTOP=sp;return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1); var $8$1 = tempRet0;
 var $9=$8$0;
 $2=$9;
 var $10=$8$1;
 $3=$10;
 var $11=$4;
 __ZdlPv($11);
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=$3;
 var $15$0=$13;
 var $15$1=0;
 var $16$0=$15$0;
 var $16$1=$14;
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($10);
 STACKTOP=sp;return;
}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=$4;
 HEAP32[(($5)>>2)]=6184;
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 label=6;break;
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 $2=$10;
 var $11=$9$1;
 $3=$11;
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=___cxa_begin_catch($13);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=10;break; }
 case 5: 
 label=6;break;
 case 6: 
 var $17=(($4+96)|0);
 var $18=HEAP8[($17)];
 var $19=(($18)&1);
 if($19){label=7;break;}else{label=11;break;}
 case 7: 
 var $21=(($4+32)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=8;break;}
 case 8: 
 __ZdaPv($22);
 label=9;break;
 case 9: 
 label=11;break;
 case 10: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=$27$0;
 $2=$28;
 var $29=$27$1;
 $3=$29;
 var $30=$4;
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 11: 
 var $32=(($4+97)|0);
 var $33=HEAP8[($32)];
 var $34=(($33)&1);
 if($34){label=12;break;}else{label=15;break;}
 case 12: 
 var $36=(($4+56)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=14;break;}else{label=13;break;}
 case 13: 
 __ZdaPv($37);
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $42=$4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($42);
 STACKTOP=sp;return;
 case 16: 
 label=17;break;
 case 17: 
 var $45=$2;
 var $46=$3;
 var $47$0=$45;
 var $47$1=0;
 var $48$0=$47$0;
 var $48$1=$46;
 ___resumeException($48$0)
 case 18: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1,0); var $50$1 = tempRet0;
 var $51=$50$0;
 ___clang_call_terminate($51);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $__tmp_i_i_i1;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $__t_i;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $__tmp_i_i_i;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35=sp;
 var $36=(sp)+(8);
 var $37;
 var $38;
 var $39=(sp)+(16);
 var $40=(sp)+(24);
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46=(sp)+(32);
 var $47=(sp)+(40);
 var $48;
 var $49;
 var $50;
 var $51;
 var $__rt;
 var $__h=(sp)+(48);
 var $52;
 var $53;
 $51=$this;
 var $54=$51;
 $__rt=0;
 var $55=(($54+64)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)!=0;
 if($57){label=2;break;}else{label=20;break;}
 case 2: 
 $__rt=$54;
 var $59=(($54+64)|0);
 var $60=HEAP32[(($59)>>2)];
 $48=$__h;
 $49=$60;
 $50=498;
 var $61=$48;
 var $62=$49;
 var $63=$50;
 $45=$61;
 HEAP32[(($46)>>2)]=$62;
 HEAP32[(($47)>>2)]=$63;
 var $64=$45;
 var $65=(($64)|0);
 $44=$46;
 var $66=$44;
 var $67=HEAP32[(($66)>>2)];
 $30=$47;
 var $68=$30;
 var $69=HEAP32[(($68)>>2)];
 $41=$65;
 $42=$67;
 $43=$69;
 var $70=$41;
 var $71=$42;
 var $72=$43;
 $38=$70;
 HEAP32[(($39)>>2)]=$71;
 HEAP32[(($40)>>2)]=$72;
 var $73=$38;
 var $74=$73;
 $37=$39;
 var $75=$37;
 var $76=HEAP32[(($75)>>2)];
 $31=$40;
 var $77=$31;
 var $78=HEAP32[(($77)>>2)];
 $34=$74;
 HEAP32[(($35)>>2)]=$76;
 HEAP32[(($36)>>2)]=$78;
 var $79=$34;
 var $80=(($79)|0);
 $33=$35;
 var $81=$33;
 var $82=HEAP32[(($81)>>2)];
 HEAP32[(($80)>>2)]=$82;
 var $83=(($79+4)|0);
 $32=$36;
 var $84=$32;
 var $85=HEAP32[(($84)>>2)];
 HEAP32[(($83)>>2)]=$85;
 var $86=$54;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+24)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $92=($90|0)!=0;
 if($92){label=4;break;}else{label=10;break;}
 case 4: 
 $__rt=0;
 label=10;break;
 case 5: 
 var $95$0 = ___cxa_find_matching_catch(-1, -1); var $95$1 = tempRet0;
 var $96=$95$0;
 $52=$96;
 var $97=$95$1;
 $53=$97;
 $29=$__h;
 var $98=$29;
 $28=$98;
 var $99=$28;
 $24=$99;
 $25=0;
 var $100=$24;
 var $101=(($100)|0);
 $23=$101;
 var $102=$23;
 var $103=$102;
 $22=$103;
 var $104=$22;
 var $105=(($104)|0);
 var $106=HEAP32[(($105)>>2)];
 $__tmp_i_i_i=$106;
 var $107=$25;
 var $108=(($100)|0);
 $21=$108;
 var $109=$21;
 var $110=$109;
 $20=$110;
 var $111=$20;
 var $112=(($111)|0);
 HEAP32[(($112)>>2)]=$107;
 var $113=$__tmp_i_i_i;
 var $114=($113|0)!=0;
 if($114){label=6;break;}else{label=9;break;}
 case 6: 
 var $116=(($100)|0);
 $19=$116;
 var $117=$19;
 var $118=$117;
 $18=$118;
 var $119=$18;
 var $120=(($119+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=$__tmp_i_i_i;
 var $123=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 label=9;break;
 case 8: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1,0); var $126$1 = tempRet0;
 var $127=$126$0;
 $26=$127;
 var $128=$126$1;
 $27=$128;
 var $129=$26;
 ___cxa_call_unexpected($129);
 throw "Reached an unreachable!";
 case 9: 
 label=19;break;
 case 10: 
 $17=$__h;
 var $131=$17;
 var $132=(($131)|0);
 $16=$132;
 var $133=$16;
 var $134=$133;
 $15=$134;
 var $135=$15;
 var $136=(($135)|0);
 var $137=HEAP32[(($136)>>2)];
 $__t_i=$137;
 var $138=(($131)|0);
 $14=$138;
 var $139=$14;
 var $140=$139;
 $13=$140;
 var $141=$13;
 var $142=(($141)|0);
 HEAP32[(($142)>>2)]=0;
 var $143=$__t_i;
 var $144=(function() { try { __THREW__ = 0; return _fclose($143) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=5;break; }
 case 11: 
 var $146=($144|0)==0;
 if($146){label=12;break;}else{label=13;break;}
 case 12: 
 var $148=(($54+64)|0);
 HEAP32[(($148)>>2)]=0;
 label=14;break;
 case 13: 
 $__rt=0;
 label=14;break;
 case 14: 
 $12=$__h;
 var $151=$12;
 $11=$151;
 var $152=$11;
 $7=$152;
 $8=0;
 var $153=$7;
 var $154=(($153)|0);
 $6=$154;
 var $155=$6;
 var $156=$155;
 $5=$156;
 var $157=$5;
 var $158=(($157)|0);
 var $159=HEAP32[(($158)>>2)];
 $__tmp_i_i_i1=$159;
 var $160=$8;
 var $161=(($153)|0);
 $4=$161;
 var $162=$4;
 var $163=$162;
 $3=$163;
 var $164=$3;
 var $165=(($164)|0);
 HEAP32[(($165)>>2)]=$160;
 var $166=$__tmp_i_i_i1;
 var $167=($166|0)!=0;
 if($167){label=15;break;}else{label=18;break;}
 case 15: 
 var $169=(($153)|0);
 $2=$169;
 var $170=$2;
 var $171=$170;
 $1=$171;
 var $172=$1;
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$__tmp_i_i_i1;
 var $176=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($175) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 label=18;break;
 case 17: 
 var $179$0 = ___cxa_find_matching_catch(-1, -1); var $179$1 = tempRet0;
 var $180=$179$0;
 $9=$180;
 var $181=$179$1;
 $10=$181;
 var $182=$9;
 ___cxa_call_unexpected($182);
 throw "Reached an unreachable!";
 case 18: 
 label=20;break;
 case 19: 
 label=21;break;
 case 20: 
 var $185=$__rt;
 STACKTOP=sp;return $185;
 case 21: 
 var $187=$52;
 var $188=$53;
 var $189$0=$187;
 var $189$1=0;
 var $190$0=$189$0;
 var $190$1=$188;
 ___resumeException($190$0)
 var $192$0 = ___cxa_find_matching_catch(-1, -1,0); var $192$1 = tempRet0;
 var $193=$192$0;
 ___clang_call_terminate($193);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=$4;
 __ZdlPv($6);
 STACKTOP=sp;return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1); var $8$1 = tempRet0;
 var $9=$8$0;
 $2=$9;
 var $10=$8$1;
 $3=$10;
 var $11=$4;
 __ZdlPv($11);
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=$3;
 var $15$0=$13;
 var $15$1=0;
 var $16$0=$15$0;
 var $16$1=$14;
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $__old_anc;
 $10=$this;
 $11=$__loc;
 var $12=$10;
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($12);
 var $18=$11;
 $9=$18;
 var $19=$9;
 var $20=__ZNKSt3__16locale9use_facetERNS0_2idE($19,15072);
 var $21=$20;
 var $22=(($12+68)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($12+98)|0);
 var $24=HEAP8[($23)];
 var $25=(($24)&1);
 var $26=($25&1);
 $__old_anc=$26;
 var $27=(($12+68)|0);
 var $28=HEAP32[(($27)>>2)];
 $8=$28;
 var $29=$8;
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+28)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=FUNCTION_TABLE[$33]($29);
 var $35=(($12+98)|0);
 var $36=($34&1);
 HEAP8[($35)]=$36;
 var $37=$__old_anc;
 var $38=(($37)&1);
 var $39=($38&1);
 var $40=(($12+98)|0);
 var $41=HEAP8[($40)];
 var $42=(($41)&1);
 var $43=($42&1);
 var $44=($39|0)!=($43|0);
 if($44){label=2;break;}else{label=14;break;}
 case 2: 
 var $46=$12;
 $4=$46;
 $5=0;
 $6=0;
 $7=0;
 var $47=$4;
 var $48=$5;
 var $49=(($47+8)|0);
 HEAP32[(($49)>>2)]=$48;
 var $50=$6;
 var $51=(($47+12)|0);
 HEAP32[(($51)>>2)]=$50;
 var $52=$7;
 var $53=(($47+16)|0);
 HEAP32[(($53)>>2)]=$52;
 var $54=$12;
 $1=$54;
 $2=0;
 $3=0;
 var $55=$1;
 var $56=$2;
 var $57=(($55+24)|0);
 HEAP32[(($57)>>2)]=$56;
 var $58=(($55+20)|0);
 HEAP32[(($58)>>2)]=$56;
 var $59=$3;
 var $60=(($55+28)|0);
 HEAP32[(($60)>>2)]=$59;
 var $61=(($12+98)|0);
 var $62=HEAP8[($61)];
 var $63=(($62)&1);
 if($63){label=3;break;}else{label=8;break;}
 case 3: 
 var $65=(($12+96)|0);
 var $66=HEAP8[($65)];
 var $67=(($66)&1);
 if($67){label=4;break;}else{label=7;break;}
 case 4: 
 var $69=(($12+32)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)==0;
 if($71){label=6;break;}else{label=5;break;}
 case 5: 
 __ZdaPv($70);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $75=(($12+97)|0);
 var $76=HEAP8[($75)];
 var $77=(($76)&1);
 var $78=(($12+96)|0);
 var $79=($77&1);
 HEAP8[($78)]=$79;
 var $80=(($12+60)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($12+52)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($12+56)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($12+32)|0);
 HEAP32[(($85)>>2)]=$84;
 var $86=(($12+60)|0);
 HEAP32[(($86)>>2)]=0;
 var $87=(($12+56)|0);
 HEAP32[(($87)>>2)]=0;
 var $88=(($12+97)|0);
 HEAP8[($88)]=0;
 label=13;break;
 case 8: 
 var $90=(($12+96)|0);
 var $91=HEAP8[($90)];
 var $92=(($91)&1);
 if($92){label=11;break;}else{label=9;break;}
 case 9: 
 var $94=(($12+32)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($12+44)|0);
 var $97=(($96)|0);
 var $98=($95|0)!=($97|0);
 if($98){label=10;break;}else{label=11;break;}
 case 10: 
 var $100=(($12+52)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($12+60)|0);
 HEAP32[(($102)>>2)]=$101;
 var $103=(($12+32)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($12+56)|0);
 HEAP32[(($105)>>2)]=$104;
 var $106=(($12+97)|0);
 HEAP8[($106)]=0;
 var $107=(($12+52)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=__Znaj($108);
 var $110=(($12+32)|0);
 HEAP32[(($110)>>2)]=$109;
 var $111=(($12+96)|0);
 HEAP8[($111)]=1;
 label=12;break;
 case 11: 
 var $113=(($12+52)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(($12+60)|0);
 HEAP32[(($115)>>2)]=$114;
 var $116=(($12+60)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=__Znaj($117);
 var $119=(($12+56)|0);
 HEAP32[(($119)>>2)]=$118;
 var $120=(($12+97)|0);
 HEAP8[($120)]=1;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9=sp;
 var $10;
 var $11;
 var $12=(sp)+(8);
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19=(sp)+(16);
 var $20=(sp)+(24);
 $17=$this;
 $18=$__s;
 HEAP32[(($19)>>2)]=$__n;
 var $21=$17;
 var $22=$21;
 $13=$22;
 $14=0;
 $15=0;
 $16=0;
 var $23=$13;
 var $24=$14;
 var $25=(($23+8)|0);
 HEAP32[(($25)>>2)]=$24;
 var $26=$15;
 var $27=(($23+12)|0);
 HEAP32[(($27)>>2)]=$26;
 var $28=$16;
 var $29=(($23+16)|0);
 HEAP32[(($29)>>2)]=$28;
 var $30=$21;
 $1=$30;
 $2=0;
 $3=0;
 var $31=$1;
 var $32=$2;
 var $33=(($31+24)|0);
 HEAP32[(($33)>>2)]=$32;
 var $34=(($31+20)|0);
 HEAP32[(($34)>>2)]=$32;
 var $35=$3;
 var $36=(($31+28)|0);
 HEAP32[(($36)>>2)]=$35;
 var $37=(($21+96)|0);
 var $38=HEAP8[($37)];
 var $39=(($38)&1);
 if($39){label=2;break;}else{label=5;break;}
 case 2: 
 var $41=(($21+32)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==0;
 if($43){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($42);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $47=(($21+97)|0);
 var $48=HEAP8[($47)];
 var $49=(($48)&1);
 if($49){label=6;break;}else{label=9;break;}
 case 6: 
 var $51=(($21+56)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=8;break;}else{label=7;break;}
 case 7: 
 __ZdaPv($52);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $57=HEAP32[(($19)>>2)];
 var $58=(($21+52)|0);
 HEAP32[(($58)>>2)]=$57;
 var $59=(($21+52)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60>>>0)>8;
 if($61){label=10;break;}else{label=15;break;}
 case 10: 
 var $63=(($21+98)|0);
 var $64=HEAP8[($63)];
 var $65=(($64)&1);
 if($65){label=11;break;}else{label=13;break;}
 case 11: 
 var $67=$18;
 var $68=($67|0)!=0;
 if($68){label=12;break;}else{label=13;break;}
 case 12: 
 var $70=$18;
 var $71=(($21+32)|0);
 HEAP32[(($71)>>2)]=$70;
 var $72=(($21+96)|0);
 HEAP8[($72)]=0;
 label=14;break;
 case 13: 
 var $74=(($21+52)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=__Znaj($75);
 var $77=(($21+32)|0);
 HEAP32[(($77)>>2)]=$76;
 var $78=(($21+96)|0);
 HEAP8[($78)]=1;
 label=14;break;
 case 14: 
 label=16;break;
 case 15: 
 var $81=(($21+44)|0);
 var $82=(($81)|0);
 var $83=(($21+32)|0);
 HEAP32[(($83)>>2)]=$82;
 var $84=(($21+52)|0);
 HEAP32[(($84)>>2)]=8;
 var $85=(($21+96)|0);
 HEAP8[($85)]=0;
 label=16;break;
 case 16: 
 var $87=(($21+98)|0);
 var $88=HEAP8[($87)];
 var $89=(($88)&1);
 if($89){label=25;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($20)>>2)]=8;
 $10=$19;
 $11=$20;
 var $91=$10;
 var $92=$11;
 var $tmp_i=$9;
 var $tmp1_i=$12;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $7=$91;
 $8=$92;
 var $93=$7;
 var $94=$8;
 $4=$9;
 $5=$93;
 $6=$94;
 var $95=$4;
 var $96=$5;
 var $97=HEAP32[(($96)>>2)];
 var $98=$6;
 var $99=HEAP32[(($98)>>2)];
 var $100=($97|0)<($99|0);
 if($100){label=18;break;}else{label=19;break;}
 case 18: 
 var $102=$8;
 var $105=$102;label=20;break;
 case 19: 
 var $104=$7;
 var $105=$104;label=20;break;
 case 20: 
 var $105;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($21+60)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=$18;
 var $109=($108|0)!=0;
 if($109){label=21;break;}else{label=23;break;}
 case 21: 
 var $111=(($21+60)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112>>>0)>=8;
 if($113){label=22;break;}else{label=23;break;}
 case 22: 
 var $115=$18;
 var $116=(($21+56)|0);
 HEAP32[(($116)>>2)]=$115;
 var $117=(($21+97)|0);
 HEAP8[($117)]=0;
 label=24;break;
 case 23: 
 var $119=(($21+60)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=__Znaj($120);
 var $122=(($21+56)|0);
 HEAP32[(($122)>>2)]=$121;
 var $123=(($21+97)|0);
 HEAP8[($123)]=1;
 label=24;break;
 case 24: 
 label=26;break;
 case 25: 
 var $126=(($21+60)|0);
 HEAP32[(($126)>>2)]=0;
 var $127=(($21+56)|0);
 HEAP32[(($127)>>2)]=0;
 var $128=(($21+97)|0);
 HEAP8[($128)]=0;
 label=26;break;
 case 26: 
 var $130=$21;
 STACKTOP=sp;return $130;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$__off$0,$__off$1,$__way,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3=sp;
 var $4;
 var $5=(sp)+(8);
 var $6;
 var $7=(sp)+(16);
 var $8;
 var $9=(sp)+(24);
 var $10;
 var $11=(sp)+(32);
 var $12;
 var $13=(sp)+(40);
 var $14;
 var $15=(sp)+(48);
 var $16;
 var $17=(sp)+(56);
 var $18;
 var $19=(sp)+(64);
 var $20;
 var $21;
 var $22=(sp)+(72);
 var $23;
 var $24;
 var $__width;
 var $__whence;
 var $__r=(sp)+(80);
 var $25=(sp)+(96);
 $21=$this;
 var $st$0$0=(($22)|0);
 HEAP32[(($st$0$0)>>2)]=$__off$0;
 var $st$1$1=(($22+4)|0);
 HEAP32[(($st$1$1)>>2)]=$__off$1;
 $23=$__way;
 $24=$0;
 var $26=$21;
 var $27=(($26+68)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)!=0;
 if($29){label=3;break;}else{label=2;break;}
 case 2: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 __ZNSt8bad_castC2Ev($32);
 ___cxa_throw($31,10104,(378));
 throw "Reached an unreachable!";
 case 3: 
 var $34=(($26+68)|0);
 var $35=HEAP32[(($34)>>2)];
 $20=$35;
 var $36=$20;
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+24)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($36);
 $__width=$41;
 var $42=(($26+64)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){label=7;break;}else{label=4;break;}
 case 4: 
 var $46=$__width;
 var $47=($46|0)<=0;
 if($47){label=5;break;}else{label=6;break;}
 case 5: 
 var $ld$2$0=(($22)|0);
 var $49$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($22+4)|0);
 var $49$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $50=(($49$0|0) != ($$etemp$4$0|0)) | (($49$1|0) != ($$etemp$4$1|0));
 if($50){label=7;break;}else{label=6;break;}
 case 6: 
 var $52=$26;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+24)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=FUNCTION_TABLE[$55]($26);
 var $57=($56|0)!=0;
 if($57){label=7;break;}else{label=8;break;}
 case 7: 
 $18=$agg_result;
 var $$etemp$5$0=-1;
 var $$etemp$5$1=-1;
 var $st$6$0=(($19)|0);
 HEAP32[(($st$6$0)>>2)]=$$etemp$5$0;
 var $st$7$1=(($19+4)|0);
 HEAP32[(($st$7$1)>>2)]=$$etemp$5$1;
 var $59=$18;
 var $ld$8$0=(($19)|0);
 var $60$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($19+4)|0);
 var $60$1=HEAP32[(($ld$9$1)>>2)];
 $16=$59;
 var $st$10$0=(($17)|0);
 HEAP32[(($st$10$0)>>2)]=$60$0;
 var $st$11$1=(($17+4)|0);
 HEAP32[(($st$11$1)>>2)]=$60$1;
 var $61=$16;
 var $62=(($61)|0);
 var $63=$62;
 HEAP32[(($63)>>2)]=0; HEAP32[((($63)+(4))>>2)]=0;
 var $64=(($61+8)|0);
 var $ld$12$0=(($17)|0);
 var $65$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($17+4)|0);
 var $65$1=HEAP32[(($ld$13$1)>>2)];
 var $st$14$0=(($64)|0);
 HEAP32[(($st$14$0)>>2)]=$65$0;
 var $st$15$1=(($64+4)|0);
 HEAP32[(($st$15$1)>>2)]=$65$1;
 label=19;break;
 case 8: 
 var $67=$23;
 if(($67|0)==1){ label=10;break;}else if(($67|0)==2){ label=11;break;}else if(($67|0)==0){ label=9;break;}else{label=12;break;}
 case 9: 
 $__whence=0;
 label=13;break;
 case 10: 
 $__whence=1;
 label=13;break;
 case 11: 
 $__whence=2;
 label=13;break;
 case 12: 
 $4=$agg_result;
 var $$etemp$16$0=-1;
 var $$etemp$16$1=-1;
 var $st$17$0=(($5)|0);
 HEAP32[(($st$17$0)>>2)]=$$etemp$16$0;
 var $st$18$1=(($5+4)|0);
 HEAP32[(($st$18$1)>>2)]=$$etemp$16$1;
 var $72=$4;
 var $ld$19$0=(($5)|0);
 var $73$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($5+4)|0);
 var $73$1=HEAP32[(($ld$20$1)>>2)];
 $2=$72;
 var $st$21$0=(($3)|0);
 HEAP32[(($st$21$0)>>2)]=$73$0;
 var $st$22$1=(($3+4)|0);
 HEAP32[(($st$22$1)>>2)]=$73$1;
 var $74=$2;
 var $75=(($74)|0);
 var $76=$75;
 HEAP32[(($76)>>2)]=0; HEAP32[((($76)+(4))>>2)]=0;
 var $77=(($74+8)|0);
 var $ld$23$0=(($3)|0);
 var $78$0=HEAP32[(($ld$23$0)>>2)];
 var $ld$24$1=(($3+4)|0);
 var $78$1=HEAP32[(($ld$24$1)>>2)];
 var $st$25$0=(($77)|0);
 HEAP32[(($st$25$0)>>2)]=$78$0;
 var $st$26$1=(($77+4)|0);
 HEAP32[(($st$26$1)>>2)]=$78$1;
 label=19;break;
 case 13: 
 var $80=(($26+64)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$__width;
 var $83=($82|0)>0;
 if($83){label=14;break;}else{label=15;break;}
 case 14: 
 var $85=$__width;
 var $86$0=$85;
 var $86$1=((((($85|0)<0))|0)?-1:0);
 var $ld$27$0=(($22)|0);
 var $87$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($22+4)|0);
 var $87$1=HEAP32[(($ld$28$1)>>2)];
 var $88$0=___muldi3($86$0,$86$1,$87$0,$87$1);var $88$1=tempRet0;
 var $91$1=$88$1;var $91$0=$88$0;label=16;break;
 case 15: 
 var $91$1=0;var $91$0=0;label=16;break;
 case 16: 
 var $91$0;
 var $91$1;
 var $92$0=$91$0;
 var $92=$92$0;
 var $93=$__whence;
 var $94=_fseek($81,$92,$93);
 var $95=($94|0)!=0;
 if($95){label=17;break;}else{label=18;break;}
 case 17: 
 $8=$agg_result;
 var $$etemp$29$0=-1;
 var $$etemp$29$1=-1;
 var $st$30$0=(($9)|0);
 HEAP32[(($st$30$0)>>2)]=$$etemp$29$0;
 var $st$31$1=(($9+4)|0);
 HEAP32[(($st$31$1)>>2)]=$$etemp$29$1;
 var $97=$8;
 var $ld$32$0=(($9)|0);
 var $98$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($9+4)|0);
 var $98$1=HEAP32[(($ld$33$1)>>2)];
 $6=$97;
 var $st$34$0=(($7)|0);
 HEAP32[(($st$34$0)>>2)]=$98$0;
 var $st$35$1=(($7+4)|0);
 HEAP32[(($st$35$1)>>2)]=$98$1;
 var $99=$6;
 var $100=(($99)|0);
 var $101=$100;
 HEAP32[(($101)>>2)]=0; HEAP32[((($101)+(4))>>2)]=0;
 var $102=(($99+8)|0);
 var $ld$36$0=(($7)|0);
 var $103$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($7+4)|0);
 var $103$1=HEAP32[(($ld$37$1)>>2)];
 var $st$38$0=(($102)|0);
 HEAP32[(($st$38$0)>>2)]=$103$0;
 var $st$39$1=(($102+4)|0);
 HEAP32[(($st$39$1)>>2)]=$103$1;
 label=19;break;
 case 18: 
 var $105=(($26+64)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=_ftell($106);
 var $108$0=$107;
 var $108$1=((((($107|0)<0))|0)?-1:0);
 $12=$__r;
 var $st$40$0=(($13)|0);
 HEAP32[(($st$40$0)>>2)]=$108$0;
 var $st$41$1=(($13+4)|0);
 HEAP32[(($st$41$1)>>2)]=$108$1;
 var $109=$12;
 var $ld$42$0=(($13)|0);
 var $110$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($13+4)|0);
 var $110$1=HEAP32[(($ld$43$1)>>2)];
 $10=$109;
 var $st$44$0=(($11)|0);
 HEAP32[(($st$44$0)>>2)]=$110$0;
 var $st$45$1=(($11+4)|0);
 HEAP32[(($st$45$1)>>2)]=$110$1;
 var $111=$10;
 var $112=(($111)|0);
 var $113=$112;
 HEAP32[(($113)>>2)]=0; HEAP32[((($113)+(4))>>2)]=0;
 var $114=(($111+8)|0);
 var $ld$46$0=(($11)|0);
 var $115$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($11+4)|0);
 var $115$1=HEAP32[(($ld$47$1)>>2)];
 var $st$48$0=(($114)|0);
 HEAP32[(($st$48$0)>>2)]=$115$0;
 var $st$49$1=(($114+4)|0);
 HEAP32[(($st$49$1)>>2)]=$115$1;
 var $116=(($26+72)|0);
 var $117=$25;
 var $118=$116;
 assert(8 % 1 === 0);HEAP32[(($117)>>2)]=HEAP32[(($118)>>2)];HEAP32[((($117)+(4))>>2)]=HEAP32[((($118)+(4))>>2)];
 var $tmp=$15;
 var $tmp1=$25;
 assert(8 % 1 === 0);(_memcpy($tmp, $tmp1, 8)|0);
 $14=$__r;
 var $119=$14;
 var $120=(($119)|0);
 var $121=$120;
 var $122=$15;
 assert(8 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];
 var $123=$agg_result;
 var $124=$__r;
 assert(16 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];HEAP32[((($123)+(8))>>2)]=HEAP32[((($124)+(8))>>2)];HEAP32[((($123)+(12))>>2)]=HEAP32[((($124)+(12))>>2)];
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$__sp,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__sp; $__sp=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__sp)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($__sp)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($__sp)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($__sp)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6=(sp)+(8);
 var $7;
 var $8;
 var $9=(sp)+(16);
 var $10;
 var $11=(sp)+(24);
 var $12;
 var $13;
 var $14=(sp)+(32);
 $12=$this;
 $13=$0;
 var $15=$12;
 var $16=(($15+64)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=$15;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($15);
 var $25=($24|0)!=0;
 if($25){label=3;break;}else{label=4;break;}
 case 3: 
 $10=$agg_result;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $st$1$0=(($11)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($11+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $27=$10;
 var $ld$3$0=(($11)|0);
 var $28$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($11+4)|0);
 var $28$1=HEAP32[(($ld$4$1)>>2)];
 $8=$27;
 var $st$5$0=(($9)|0);
 HEAP32[(($st$5$0)>>2)]=$28$0;
 var $st$6$1=(($9+4)|0);
 HEAP32[(($st$6$1)>>2)]=$28$1;
 var $29=$8;
 var $30=(($29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=0; HEAP32[((($31)+(4))>>2)]=0;
 var $32=(($29+8)|0);
 var $ld$7$0=(($9)|0);
 var $33$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($9+4)|0);
 var $33$1=HEAP32[(($ld$8$1)>>2)];
 var $st$9$0=(($32)|0);
 HEAP32[(($st$9$0)>>2)]=$33$0;
 var $st$10$1=(($32+4)|0);
 HEAP32[(($st$10$1)>>2)]=$33$1;
 label=7;break;
 case 4: 
 var $35=(($15+64)|0);
 var $36=HEAP32[(($35)>>2)];
 $2=$__sp;
 var $37=$2;
 var $38=(($37+8)|0);
 var $ld$11$0=(($38)|0);
 var $39$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$12$1)>>2)];
 var $40$0=$39$0;
 var $40=$40$0;
 var $41=_fseek($36,$40,0);
 var $42=($41|0)!=0;
 if($42){label=5;break;}else{label=6;break;}
 case 5: 
 $5=$agg_result;
 var $$etemp$13$0=-1;
 var $$etemp$13$1=-1;
 var $st$14$0=(($6)|0);
 HEAP32[(($st$14$0)>>2)]=$$etemp$13$0;
 var $st$15$1=(($6+4)|0);
 HEAP32[(($st$15$1)>>2)]=$$etemp$13$1;
 var $44=$5;
 var $ld$16$0=(($6)|0);
 var $45$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($6+4)|0);
 var $45$1=HEAP32[(($ld$17$1)>>2)];
 $3=$44;
 var $st$18$0=(($4)|0);
 HEAP32[(($st$18$0)>>2)]=$45$0;
 var $st$19$1=(($4+4)|0);
 HEAP32[(($st$19$1)>>2)]=$45$1;
 var $46=$3;
 var $47=(($46)|0);
 var $48=$47;
 HEAP32[(($48)>>2)]=0; HEAP32[((($48)+(4))>>2)]=0;
 var $49=(($46+8)|0);
 var $ld$20$0=(($4)|0);
 var $50$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($4+4)|0);
 var $50$1=HEAP32[(($ld$21$1)>>2)];
 var $st$22$0=(($49)|0);
 HEAP32[(($st$22$0)>>2)]=$50$0;
 var $st$23$1=(($49+4)|0);
 HEAP32[(($st$23$1)>>2)]=$50$1;
 label=7;break;
 case 6: 
 var $52=(($15+72)|0);
 $7=$__sp;
 var $53=$7;
 var $54=(($53)|0);
 var $55=$14;
 var $56=$54;
 assert(8 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];
 var $57=$52;
 var $58=$14;
 assert(8 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];
 var $59=$agg_result;
 var $60=$__sp;
 assert(16 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];HEAP32[((($59)+(12))>>2)]=HEAP32[((($60)+(12))>>2)];
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $__r;
 var $__extbe=sp;
 var $__nmemb;
 var $__c=(sp)+(8);
 var $__state=(sp)+(16);
 var $__update_st;
 var $__width;
 var $__off;
 $27=$this;
 var $28=$27;
 var $29=(($28+64)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=2;break;}else{label=3;break;}
 case 2: 
 $26=0;
 label=36;break;
 case 3: 
 var $34=(($28+68)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)!=0;
 if($36){label=5;break;}else{label=4;break;}
 case 4: 
 var $38=___cxa_allocate_exception(4);
 var $39=$38;
 __ZNSt8bad_castC2Ev($39);
 ___cxa_throw($38,10104,(378));
 throw "Reached an unreachable!";
 case 5: 
 var $41=(($28+92)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42&16;
 var $44=($43|0)!=0;
 if($44){label=6;break;}else{label=20;break;}
 case 6: 
 var $46=$28;
 $25=$46;
 var $47=$25;
 var $48=(($47+24)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$28;
 $15=$50;
 var $51=$15;
 var $52=(($51+20)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($49|0)!=($53|0);
 if($54){label=7;break;}else{label=10;break;}
 case 7: 
 var $56=$28;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+52)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($28,-1);
 var $61=($60|0)==-1;
 if($61){label=8;break;}else{label=9;break;}
 case 8: 
 $26=-1;
 label=36;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $66=(($28+68)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($28+72)|0);
 var $69=(($28+32)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($28+32)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($28+52)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($72+$74)|0);
 $1=$67;
 $2=$68;
 $3=$70;
 $4=$75;
 $5=$__extbe;
 var $76=$1;
 var $77=$76;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+20)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$2;
 var $82=$3;
 var $83=$4;
 var $84=$5;
 var $85=FUNCTION_TABLE[$80]($76,$81,$82,$83,$84);
 $__r=$85;
 var $86=HEAP32[(($__extbe)>>2)];
 var $87=(($28+32)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$86;
 var $90=$88;
 var $91=((($89)-($90))|0);
 $__nmemb=$91;
 var $92=(($28+32)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$__nmemb;
 var $95=(($28+64)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=_fwrite($93,1,$94,$96);
 var $98=$__nmemb;
 var $99=($97|0)!=($98|0);
 if($99){label=12;break;}else{label=13;break;}
 case 12: 
 $26=-1;
 label=36;break;
 case 13: 
 label=14;break;
 case 14: 
 var $103=$__r;
 var $104=($103|0)==1;
 if($104){label=11;break;}else{label=15;break;}
 case 15: 
 var $106=$__r;
 var $107=($106|0)==2;
 if($107){label=16;break;}else{label=17;break;}
 case 16: 
 $26=-1;
 label=36;break;
 case 17: 
 var $110=(($28+64)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=_fflush($111);
 var $113=($112|0)!=0;
 if($113){label=18;break;}else{label=19;break;}
 case 18: 
 $26=-1;
 label=36;break;
 case 19: 
 label=35;break;
 case 20: 
 var $117=(($28+92)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$118&8;
 var $120=($119|0)!=0;
 if($120){label=21;break;}else{label=34;break;}
 case 21: 
 var $122=(($28+80)|0);
 var $123=$__state;
 var $124=$122;
 assert(8 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];
 $__update_st=0;
 var $125=(($28+98)|0);
 var $126=HEAP8[($125)];
 var $127=(($126)&1);
 if($127){label=22;break;}else{label=23;break;}
 case 22: 
 var $129=$28;
 $6=$129;
 var $130=$6;
 var $131=(($130+16)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=$28;
 $7=$133;
 var $134=$7;
 var $135=(($134+12)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=$132;
 var $138=$136;
 var $139=((($137)-($138))|0);
 var $140$0=$139;
 var $140$1=((((($139|0)<0))|0)?-1:0);
 var $st$0$0=(($__c)|0);
 HEAP32[(($st$0$0)>>2)]=$140$0;
 var $st$1$1=(($__c+4)|0);
 HEAP32[(($st$1$1)>>2)]=$140$1;
 label=29;break;
 case 23: 
 var $142=(($28+68)|0);
 var $143=HEAP32[(($142)>>2)];
 $8=$143;
 var $144=$8;
 var $145=$144;
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+24)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=FUNCTION_TABLE[$148]($144);
 $__width=$149;
 var $150=(($28+40)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($28+36)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$151;
 var $155=$153;
 var $156=((($154)-($155))|0);
 var $157$0=$156;
 var $157$1=((((($156|0)<0))|0)?-1:0);
 var $st$2$0=(($__c)|0);
 HEAP32[(($st$2$0)>>2)]=$157$0;
 var $st$3$1=(($__c+4)|0);
 HEAP32[(($st$3$1)>>2)]=$157$1;
 var $158=$__width;
 var $159=($158|0)>0;
 if($159){label=24;break;}else{label=25;break;}
 case 24: 
 var $161=$__width;
 var $162=$28;
 $9=$162;
 var $163=$9;
 var $164=(($163+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=$28;
 $10=$166;
 var $167=$10;
 var $168=(($167+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$165;
 var $171=$169;
 var $172=((($170)-($171))|0);
 var $173=(Math_imul($161,$172)|0);
 var $174$0=$173;
 var $174$1=((((($173|0)<0))|0)?-1:0);
 var $ld$4$0=(($__c)|0);
 var $175$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($__c+4)|0);
 var $175$1=HEAP32[(($ld$5$1)>>2)];
 var $176$0=_i64Add($175$0,$175$1,$174$0,$174$1);var $176$1=tempRet0;
 var $st$6$0=(($__c)|0);
 HEAP32[(($st$6$0)>>2)]=$176$0;
 var $st$7$1=(($__c+4)|0);
 HEAP32[(($st$7$1)>>2)]=$176$1;
 label=28;break;
 case 25: 
 var $178=$28;
 $11=$178;
 var $179=$11;
 var $180=(($179+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=$28;
 $12=$182;
 var $183=$12;
 var $184=(($183+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($181|0)!=($185|0);
 if($186){label=26;break;}else{label=27;break;}
 case 26: 
 var $188=(($28+68)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($28+32)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($28+36)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=$28;
 $13=$194;
 var $195=$13;
 var $196=(($195+12)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=$28;
 $14=$198;
 var $199=$14;
 var $200=(($199+8)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$197;
 var $203=$201;
 var $204=((($202)-($203))|0);
 $16=$189;
 $17=$__state;
 $18=$191;
 $19=$193;
 $20=$204;
 var $205=$16;
 var $206=$205;
 var $207=HEAP32[(($206)>>2)];
 var $208=(($207+32)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=$17;
 var $211=$18;
 var $212=$19;
 var $213=$20;
 var $214=FUNCTION_TABLE[$209]($205,$210,$211,$212,$213);
 $__off=$214;
 var $215=(($28+36)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(($28+32)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$216;
 var $220=$218;
 var $221=((($219)-($220))|0);
 var $222=$__off;
 var $223=((($221)-($222))|0);
 var $224$0=$223;
 var $224$1=((((($223|0)<0))|0)?-1:0);
 var $ld$8$0=(($__c)|0);
 var $225$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($__c+4)|0);
 var $225$1=HEAP32[(($ld$9$1)>>2)];
 var $226$0=_i64Add($225$0,$225$1,$224$0,$224$1);var $226$1=tempRet0;
 var $st$10$0=(($__c)|0);
 HEAP32[(($st$10$0)>>2)]=$226$0;
 var $st$11$1=(($__c+4)|0);
 HEAP32[(($st$11$1)>>2)]=$226$1;
 $__update_st=1;
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $230=(($28+64)|0);
 var $231=HEAP32[(($230)>>2)];
 var $ld$12$0=(($__c)|0);
 var $232$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($__c+4)|0);
 var $232$1=HEAP32[(($ld$13$1)>>2)];
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $233$0=_i64Subtract($$etemp$14$0,$$etemp$14$1,$232$0,$232$1);var $233$1=tempRet0;
 var $234$0=$233$0;
 var $234=$234$0;
 var $235=_fseek($231,$234,1);
 var $236=($235|0)!=0;
 if($236){label=30;break;}else{label=31;break;}
 case 30: 
 $26=-1;
 label=36;break;
 case 31: 
 var $239=$__update_st;
 var $240=(($239)&1);
 if($240){label=32;break;}else{label=33;break;}
 case 32: 
 var $242=(($28+72)|0);
 var $243=$242;
 var $244=$__state;
 assert(8 % 1 === 0);HEAP32[(($243)>>2)]=HEAP32[(($244)>>2)];HEAP32[((($243)+(4))>>2)]=HEAP32[((($244)+(4))>>2)];
 label=33;break;
 case 33: 
 var $246=(($28+32)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($28+40)|0);
 HEAP32[(($248)>>2)]=$247;
 var $249=(($28+36)|0);
 HEAP32[(($249)>>2)]=$247;
 var $250=$28;
 $21=$250;
 $22=0;
 $23=0;
 $24=0;
 var $251=$21;
 var $252=$22;
 var $253=(($251+8)|0);
 HEAP32[(($253)>>2)]=$252;
 var $254=$23;
 var $255=(($251+12)|0);
 HEAP32[(($255)>>2)]=$254;
 var $256=$24;
 var $257=(($251+16)|0);
 HEAP32[(($257)>>2)]=$256;
 var $258=(($28+92)|0);
 HEAP32[(($258)>>2)]=0;
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 $26=0;
 label=36;break;
 case 36: 
 var $262=$26;
 STACKTOP=sp;return $262;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12=sp;
 var $13;
 var $14;
 var $15=(sp)+(8);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37=(sp)+(16);
 var $38;
 var $39;
 var $40=(sp)+(24);
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $__initial;
 var $__1buf=(sp)+(32);
 var $__unget_sz;
 var $76=(sp)+(40);
 var $77=(sp)+(48);
 var $__c;
 var $__nmemb;
 var $__nmemb1;
 var $78=(sp)+(56);
 var $79=(sp)+(64);
 var $__r;
 var $__nr;
 var $__inext=(sp)+(72);
 $75=$this;
 var $80=$75;
 var $81=(($80+64)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)==0;
 if($83){label=2;break;}else{label=3;break;}
 case 2: 
 $74=-1;
 label=37;break;
 case 3: 
 var $86=__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($80);
 var $87=($86&1);
 $__initial=$87;
 var $88=$80;
 $43=$88;
 var $89=$43;
 var $90=(($89+12)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($91|0)==0;
 if($92){label=4;break;}else{label=5;break;}
 case 4: 
 var $94=$80;
 var $95=(($__1buf+1)|0);
 var $96=(($__1buf+1)|0);
 $1=$94;
 $2=$__1buf;
 $3=$95;
 $4=$96;
 var $97=$1;
 var $98=$2;
 var $99=(($97+8)|0);
 HEAP32[(($99)>>2)]=$98;
 var $100=$3;
 var $101=(($97+12)|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=$4;
 var $103=(($97+16)|0);
 HEAP32[(($103)>>2)]=$102;
 label=5;break;
 case 5: 
 var $105=$__initial;
 var $106=(($105)&1);
 if($106){label=6;break;}else{label=7;break;}
 case 6: 
 var $138=0;label=11;break;
 case 7: 
 var $109=$80;
 $5=$109;
 var $110=$5;
 var $111=(($110+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$80;
 $6=$113;
 var $114=$6;
 var $115=(($114+8)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$112;
 var $118=$116;
 var $119=((($117)-($118))|0);
 var $120=(((($119|0))/(2))&-1);
 HEAP32[(($76)>>2)]=$120;
 HEAP32[(($77)>>2)]=4;
 $13=$76;
 $14=$77;
 var $121=$13;
 var $122=$14;
 var $tmp_i2=$12;
 var $tmp1_i3=$15;
 assert(1 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];
 $10=$121;
 $11=$122;
 var $123=$11;
 var $124=$10;
 $7=$12;
 $8=$123;
 $9=$124;
 var $125=$7;
 var $126=$8;
 var $127=HEAP32[(($126)>>2)];
 var $128=$9;
 var $129=HEAP32[(($128)>>2)];
 var $130=($127>>>0)<($129>>>0);
 if($130){label=8;break;}else{label=9;break;}
 case 8: 
 var $132=$11;
 var $135=$132;label=10;break;
 case 9: 
 var $134=$10;
 var $135=$134;label=10;break;
 case 10: 
 var $135;
 var $136=HEAP32[(($135)>>2)];
 var $138=$136;label=11;break;
 case 11: 
 var $138;
 $__unget_sz=$138;
 $__c=-1;
 var $139=$80;
 $16=$139;
 var $140=$16;
 var $141=(($140+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$80;
 $17=$143;
 var $144=$17;
 var $145=(($144+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($142|0)==($146|0);
 if($147){label=12;break;}else{label=33;break;}
 case 12: 
 var $149=$80;
 $18=$149;
 var $150=$18;
 var $151=(($150+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$80;
 $19=$153;
 var $154=$19;
 var $155=(($154+16)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=$__unget_sz;
 var $158=(((-$157))|0);
 var $159=(($156+$158)|0);
 var $160=$__unget_sz;
 var $161=$160;
 _memmove($152,$159,$161,1,0);
 var $162=(($80+98)|0);
 var $163=HEAP8[($162)];
 var $164=(($163)&1);
 if($164){label=13;break;}else{label=16;break;}
 case 13: 
 var $166=$80;
 $20=$166;
 var $167=$20;
 var $168=(($167+16)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$80;
 $21=$170;
 var $171=$21;
 var $172=(($171+8)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=$169;
 var $175=$173;
 var $176=((($174)-($175))|0);
 var $177=$__unget_sz;
 var $178=((($176)-($177))|0);
 $__nmemb=$178;
 var $179=$80;
 $22=$179;
 var $180=$22;
 var $181=(($180+8)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=$__unget_sz;
 var $184=(($182+$183)|0);
 var $185=$__nmemb;
 var $186=(($80+64)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=_fread($184,1,$185,$187);
 $__nmemb=$188;
 var $189=$__nmemb;
 var $190=($189|0)!=0;
 if($190){label=14;break;}else{label=15;break;}
 case 14: 
 var $192=$80;
 var $193=$80;
 $23=$193;
 var $194=$23;
 var $195=(($194+8)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=$80;
 $24=$197;
 var $198=$24;
 var $199=(($198+8)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=$__unget_sz;
 var $202=(($200+$201)|0);
 var $203=$80;
 $25=$203;
 var $204=$25;
 var $205=(($204+8)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=$__unget_sz;
 var $208=(($206+$207)|0);
 var $209=$__nmemb;
 var $210=(($208+$209)|0);
 $26=$192;
 $27=$196;
 $28=$202;
 $29=$210;
 var $211=$26;
 var $212=$27;
 var $213=(($211+8)|0);
 HEAP32[(($213)>>2)]=$212;
 var $214=$28;
 var $215=(($211+12)|0);
 HEAP32[(($215)>>2)]=$214;
 var $216=$29;
 var $217=(($211+16)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=$80;
 $30=$218;
 var $219=$30;
 var $220=(($219+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=HEAP8[($221)];
 $31=$222;
 var $223=$31;
 var $224=($223&255);
 $__c=$224;
 label=15;break;
 case 15: 
 label=32;break;
 case 16: 
 var $227=(($80+32)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($80+36)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(($80+40)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($80+36)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$232;
 var $236=$234;
 var $237=((($235)-($236))|0);
 _memmove($228,$230,$237,1,0);
 var $238=(($80+32)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(($80+40)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(($80+36)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=$241;
 var $245=$243;
 var $246=((($244)-($245))|0);
 var $247=(($239+$246)|0);
 var $248=(($80+36)|0);
 HEAP32[(($248)>>2)]=$247;
 var $249=(($80+32)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($80+32)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=(($80+44)|0);
 var $254=(($253)|0);
 var $255=($252|0)==($254|0);
 if($255){label=17;break;}else{label=18;break;}
 case 17: 
 var $261=8;label=19;break;
 case 18: 
 var $258=(($80+52)|0);
 var $259=HEAP32[(($258)>>2)];
 var $261=$259;label=19;break;
 case 19: 
 var $261;
 var $262=(($250+$261)|0);
 var $263=(($80+40)|0);
 HEAP32[(($263)>>2)]=$262;
 var $264=(($80+60)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=$__unget_sz;
 var $267=((($265)-($266))|0);
 HEAP32[(($78)>>2)]=$267;
 var $268=(($80+40)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=(($80+36)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=$269;
 var $273=$271;
 var $274=((($272)-($273))|0);
 HEAP32[(($79)>>2)]=$274;
 $38=$78;
 $39=$79;
 var $275=$38;
 var $276=$39;
 var $tmp_i=$37;
 var $tmp1_i=$40;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $35=$275;
 $36=$276;
 var $277=$36;
 var $278=$35;
 $32=$37;
 $33=$277;
 $34=$278;
 var $279=$32;
 var $280=$33;
 var $281=HEAP32[(($280)>>2)];
 var $282=$34;
 var $283=HEAP32[(($282)>>2)];
 var $284=($281>>>0)<($283>>>0);
 if($284){label=20;break;}else{label=21;break;}
 case 20: 
 var $286=$36;
 var $289=$286;label=22;break;
 case 21: 
 var $288=$35;
 var $289=$288;label=22;break;
 case 22: 
 var $289;
 var $290=HEAP32[(($289)>>2)];
 $__nmemb1=$290;
 var $291=(($80+80)|0);
 var $292=(($80+72)|0);
 var $293=$291;
 var $294=$292;
 assert(8 % 1 === 0);HEAP32[(($293)>>2)]=HEAP32[(($294)>>2)];HEAP32[((($293)+(4))>>2)]=HEAP32[((($294)+(4))>>2)];
 var $295=(($80+36)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=$__nmemb1;
 var $298=(($80+64)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=_fread($296,1,$297,$299);
 $__nr=$300;
 var $301=$__nr;
 var $302=($301|0)!=0;
 if($302){label=23;break;}else{label=31;break;}
 case 23: 
 var $304=(($80+68)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=($305|0)!=0;
 if($306){label=25;break;}else{label=24;break;}
 case 24: 
 var $308=___cxa_allocate_exception(4);
 var $309=$308;
 __ZNSt8bad_castC2Ev($309);
 ___cxa_throw($308,10104,(378));
 throw "Reached an unreachable!";
 case 25: 
 var $311=(($80+36)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=$__nr;
 var $314=(($312+$313)|0);
 var $315=(($80+40)|0);
 HEAP32[(($315)>>2)]=$314;
 var $316=(($80+68)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=(($80+72)|0);
 var $319=(($80+32)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($80+40)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=(($80+36)|0);
 var $324=$80;
 $41=$324;
 var $325=$41;
 var $326=(($325+8)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=$__unget_sz;
 var $329=(($327+$328)|0);
 var $330=$80;
 $42=$330;
 var $331=$42;
 var $332=(($331+8)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($80+60)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=(($333+$335)|0);
 $44=$317;
 $45=$318;
 $46=$320;
 $47=$322;
 $48=$323;
 $49=$329;
 $50=$336;
 $51=$__inext;
 var $337=$44;
 var $338=$337;
 var $339=HEAP32[(($338)>>2)];
 var $340=(($339+16)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=$45;
 var $343=$46;
 var $344=$47;
 var $345=$48;
 var $346=$49;
 var $347=$50;
 var $348=$51;
 var $349=FUNCTION_TABLE[$341]($337,$342,$343,$344,$345,$346,$347,$348);
 $__r=$349;
 var $350=$__r;
 var $351=($350|0)==3;
 if($351){label=26;break;}else{label=27;break;}
 case 26: 
 var $353=$80;
 var $354=(($80+32)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($80+32)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($80+40)|0);
 var $359=HEAP32[(($358)>>2)];
 $52=$353;
 $53=$355;
 $54=$357;
 $55=$359;
 var $360=$52;
 var $361=$53;
 var $362=(($360+8)|0);
 HEAP32[(($362)>>2)]=$361;
 var $363=$54;
 var $364=(($360+12)|0);
 HEAP32[(($364)>>2)]=$363;
 var $365=$55;
 var $366=(($360+16)|0);
 HEAP32[(($366)>>2)]=$365;
 var $367=$80;
 $56=$367;
 var $368=$56;
 var $369=(($368+12)|0);
 var $370=HEAP32[(($369)>>2)];
 var $371=HEAP8[($370)];
 $57=$371;
 var $372=$57;
 var $373=($372&255);
 $__c=$373;
 label=30;break;
 case 27: 
 var $375=HEAP32[(($__inext)>>2)];
 var $376=$80;
 $58=$376;
 var $377=$58;
 var $378=(($377+8)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=$__unget_sz;
 var $381=(($379+$380)|0);
 var $382=($375|0)!=($381|0);
 if($382){label=28;break;}else{label=29;break;}
 case 28: 
 var $384=$80;
 var $385=$80;
 $59=$385;
 var $386=$59;
 var $387=(($386+8)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=$80;
 $60=$389;
 var $390=$60;
 var $391=(($390+8)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$__unget_sz;
 var $394=(($392+$393)|0);
 var $395=HEAP32[(($__inext)>>2)];
 $61=$384;
 $62=$388;
 $63=$394;
 $64=$395;
 var $396=$61;
 var $397=$62;
 var $398=(($396+8)|0);
 HEAP32[(($398)>>2)]=$397;
 var $399=$63;
 var $400=(($396+12)|0);
 HEAP32[(($400)>>2)]=$399;
 var $401=$64;
 var $402=(($396+16)|0);
 HEAP32[(($402)>>2)]=$401;
 var $403=$80;
 $65=$403;
 var $404=$65;
 var $405=(($404+12)|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=HEAP8[($406)];
 $66=$407;
 var $408=$66;
 var $409=($408&255);
 $__c=$409;
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=34;break;
 case 33: 
 var $415=$80;
 $67=$415;
 var $416=$67;
 var $417=(($416+12)|0);
 var $418=HEAP32[(($417)>>2)];
 var $419=HEAP8[($418)];
 $68=$419;
 var $420=$68;
 var $421=($420&255);
 $__c=$421;
 label=34;break;
 case 34: 
 var $423=$80;
 $69=$423;
 var $424=$69;
 var $425=(($424+8)|0);
 var $426=HEAP32[(($425)>>2)];
 var $427=($426|0)==($__1buf|0);
 if($427){label=35;break;}else{label=36;break;}
 case 35: 
 var $429=$80;
 $70=$429;
 $71=0;
 $72=0;
 $73=0;
 var $430=$70;
 var $431=$71;
 var $432=(($430+8)|0);
 HEAP32[(($432)>>2)]=$431;
 var $433=$72;
 var $434=(($430+12)|0);
 HEAP32[(($434)>>2)]=$433;
 var $435=$73;
 var $436=(($430+16)|0);
 HEAP32[(($436)>>2)]=$435;
 label=36;break;
 case 36: 
 var $438=$__c;
 $74=$438;
 label=37;break;
 case 37: 
 var $440=$74;
 STACKTOP=sp;return $440;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 $19=$this;
 $20=$__c;
 var $21=$19;
 var $22=(($21+64)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)!=0;
 if($24){label=2;break;}else{label=12;break;}
 case 2: 
 var $26=$21;
 $17=$26;
 var $27=$17;
 var $28=(($27+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$21;
 $1=$30;
 var $31=$1;
 var $32=(($31+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($29>>>0)<($33>>>0);
 if($34){label=3;break;}else{label=12;break;}
 case 3: 
 var $36=$20;
 $2=$36;
 $3=-1;
 var $37=$2;
 var $38=$3;
 var $39=($37|0)==($38|0);
 if($39){label=4;break;}else{label=8;break;}
 case 4: 
 var $41=$21;
 $4=$41;
 $5=-1;
 var $42=$4;
 var $43=$5;
 var $44=(($42+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+$43)|0);
 HEAP32[(($44)>>2)]=$46;
 var $47=$20;
 $8=$47;
 var $48=$8;
 $6=$48;
 $7=-1;
 var $49=$6;
 var $50=$7;
 var $51=($49|0)==($50|0);
 if($51){label=5;break;}else{label=6;break;}
 case 5: 
 var $55=0;label=7;break;
 case 6: 
 var $54=$8;
 var $55=$54;label=7;break;
 case 7: 
 var $55;
 $18=$55;
 label=13;break;
 case 8: 
 var $57=(($21+88)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$58&16;
 var $60=($59|0)!=0;
 if($60){label=10;break;}else{label=9;break;}
 case 9: 
 var $62=$20;
 $9=$62;
 var $63=$9;
 var $64=(($63)&255);
 var $65=$21;
 $10=$65;
 var $66=$10;
 var $67=(($66+12)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=((($68)-(1))|0);
 var $70=HEAP8[($69)];
 $11=$64;
 $12=$70;
 var $71=$11;
 var $72=(($71<<24)>>24);
 var $73=$12;
 var $74=(($73<<24)>>24);
 var $75=($72|0)==($74|0);
 if($75){label=10;break;}else{label=11;break;}
 case 10: 
 var $77=$21;
 $13=$77;
 $14=-1;
 var $78=$13;
 var $79=$14;
 var $80=(($78+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+$79)|0);
 HEAP32[(($80)>>2)]=$82;
 var $83=$20;
 $15=$83;
 var $84=$15;
 var $85=(($84)&255);
 var $86=$21;
 $16=$86;
 var $87=$16;
 var $88=(($87+12)|0);
 var $89=HEAP32[(($88)>>2)];
 HEAP8[($89)]=$85;
 var $90=$20;
 $18=$90;
 label=13;break;
 case 11: 
 label=12;break;
 case 12: 
 $18=-1;
 label=13;break;
 case 13: 
 var $94=$18;
 STACKTOP=sp;return $94;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $__1buf=sp;
 var $__pb_save;
 var $__epb_save;
 var $__nmemb;
 var $__extbe=(sp)+(8);
 var $__r;
 var $__e=(sp)+(16);
 var $__nmemb1;
 var $__nmemb2;
 $47=$this;
 $48=$__c;
 var $49=$47;
 var $50=(($49+64)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)==0;
 if($52){label=2;break;}else{label=3;break;}
 case 2: 
 $46=-1;
 label=38;break;
 case 3: 
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($49);
 var $55=$49;
 $19=$55;
 var $56=$19;
 var $57=(($56+20)|0);
 var $58=HEAP32[(($57)>>2)];
 $__pb_save=$58;
 var $59=$49;
 $1=$59;
 var $60=$1;
 var $61=(($60+28)|0);
 var $62=HEAP32[(($61)>>2)];
 $__epb_save=$62;
 var $63=$48;
 $2=$63;
 $3=-1;
 var $64=$2;
 var $65=$3;
 var $66=($64|0)==($65|0);
 if($66){label=7;break;}else{label=4;break;}
 case 4: 
 var $68=$49;
 $4=$68;
 var $69=$4;
 var $70=(($69+24)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($71|0)==0;
 if($72){label=5;break;}else{label=6;break;}
 case 5: 
 var $74=$49;
 var $75=(($__1buf+1)|0);
 $5=$74;
 $6=$__1buf;
 $7=$75;
 var $76=$5;
 var $77=$6;
 var $78=(($76+24)|0);
 HEAP32[(($78)>>2)]=$77;
 var $79=(($76+20)|0);
 HEAP32[(($79)>>2)]=$77;
 var $80=$7;
 var $81=(($76+28)|0);
 HEAP32[(($81)>>2)]=$80;
 label=6;break;
 case 6: 
 var $83=$48;
 $8=$83;
 var $84=$8;
 var $85=(($84)&255);
 var $86=$49;
 $9=$86;
 var $87=$9;
 var $88=(($87+24)|0);
 var $89=HEAP32[(($88)>>2)];
 HEAP8[($89)]=$85;
 var $90=$49;
 $10=$90;
 $11=1;
 var $91=$10;
 var $92=$11;
 var $93=(($91+24)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+$92)|0);
 HEAP32[(($93)>>2)]=$95;
 label=7;break;
 case 7: 
 var $97=$49;
 $12=$97;
 var $98=$12;
 var $99=(($98+24)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=$49;
 $13=$101;
 var $102=$13;
 var $103=(($102+20)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($100|0)!=($104|0);
 if($105){label=8;break;}else{label=34;break;}
 case 8: 
 var $107=(($49+98)|0);
 var $108=HEAP8[($107)];
 var $109=(($108)&1);
 if($109){label=9;break;}else{label=12;break;}
 case 9: 
 var $111=$49;
 $14=$111;
 var $112=$14;
 var $113=(($112+24)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$49;
 $15=$115;
 var $116=$15;
 var $117=(($116+20)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$114;
 var $120=$118;
 var $121=((($119)-($120))|0);
 $__nmemb=$121;
 var $122=$49;
 $16=$122;
 var $123=$16;
 var $124=(($123+20)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$__nmemb;
 var $127=(($49+64)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=_fwrite($125,1,$126,$128);
 var $130=$__nmemb;
 var $131=($129|0)!=($130|0);
 if($131){label=10;break;}else{label=11;break;}
 case 10: 
 $46=-1;
 label=38;break;
 case 11: 
 label=33;break;
 case 12: 
 var $135=(($49+32)|0);
 var $136=HEAP32[(($135)>>2)];
 HEAP32[(($__extbe)>>2)]=$136;
 label=13;break;
 case 13: 
 var $138=(($49+68)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=($139|0)!=0;
 if($140){label=15;break;}else{label=14;break;}
 case 14: 
 var $142=___cxa_allocate_exception(4);
 var $143=$142;
 __ZNSt8bad_castC2Ev($143);
 ___cxa_throw($142,10104,(378));
 throw "Reached an unreachable!";
 case 15: 
 var $145=(($49+68)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($49+72)|0);
 var $148=$49;
 $17=$148;
 var $149=$17;
 var $150=(($149+20)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$49;
 $18=$152;
 var $153=$18;
 var $154=(($153+24)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($49+32)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($49+32)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($49+52)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($159+$161)|0);
 $20=$146;
 $21=$147;
 $22=$151;
 $23=$155;
 $24=$__e;
 $25=$157;
 $26=$162;
 $27=$__extbe;
 var $163=$20;
 var $164=$163;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+12)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=$21;
 var $169=$22;
 var $170=$23;
 var $171=$24;
 var $172=$25;
 var $173=$26;
 var $174=$27;
 var $175=FUNCTION_TABLE[$167]($163,$168,$169,$170,$171,$172,$173,$174);
 $__r=$175;
 var $176=HEAP32[(($__e)>>2)];
 var $177=$49;
 $28=$177;
 var $178=$28;
 var $179=(($178+20)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($176|0)==($180|0);
 if($181){label=16;break;}else{label=17;break;}
 case 16: 
 $46=-1;
 label=38;break;
 case 17: 
 var $184=$__r;
 var $185=($184|0)==3;
 if($185){label=18;break;}else{label=21;break;}
 case 18: 
 var $187=$49;
 $29=$187;
 var $188=$29;
 var $189=(($188+24)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=$49;
 $30=$191;
 var $192=$30;
 var $193=(($192+20)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$190;
 var $196=$194;
 var $197=((($195)-($196))|0);
 $__nmemb1=$197;
 var $198=$49;
 $31=$198;
 var $199=$31;
 var $200=(($199+20)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$__nmemb1;
 var $203=(($49+64)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=_fwrite($201,1,$202,$204);
 var $206=$__nmemb1;
 var $207=($205|0)!=($206|0);
 if($207){label=19;break;}else{label=20;break;}
 case 19: 
 $46=-1;
 label=38;break;
 case 20: 
 label=30;break;
 case 21: 
 var $211=$__r;
 var $212=($211|0)==0;
 if($212){label=23;break;}else{label=22;break;}
 case 22: 
 var $214=$__r;
 var $215=($214|0)==1;
 if($215){label=23;break;}else{label=28;break;}
 case 23: 
 var $217=HEAP32[(($__extbe)>>2)];
 var $218=(($49+32)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=$217;
 var $221=$219;
 var $222=((($220)-($221))|0);
 $__nmemb2=$222;
 var $223=(($49+32)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$__nmemb2;
 var $226=(($49+64)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=_fwrite($224,1,$225,$227);
 var $229=$__nmemb2;
 var $230=($228|0)!=($229|0);
 if($230){label=24;break;}else{label=25;break;}
 case 24: 
 $46=-1;
 label=38;break;
 case 25: 
 var $233=$__r;
 var $234=($233|0)==1;
 if($234){label=26;break;}else{label=27;break;}
 case 26: 
 var $236=$49;
 var $237=HEAP32[(($__e)>>2)];
 var $238=$49;
 $32=$238;
 var $239=$32;
 var $240=(($239+24)|0);
 var $241=HEAP32[(($240)>>2)];
 $33=$236;
 $34=$237;
 $35=$241;
 var $242=$33;
 var $243=$34;
 var $244=(($242+24)|0);
 HEAP32[(($244)>>2)]=$243;
 var $245=(($242+20)|0);
 HEAP32[(($245)>>2)]=$243;
 var $246=$35;
 var $247=(($242+28)|0);
 HEAP32[(($247)>>2)]=$246;
 var $248=$49;
 var $249=$49;
 $36=$249;
 var $250=$36;
 var $251=(($250+28)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=$49;
 $37=$253;
 var $254=$37;
 var $255=(($254+20)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=$252;
 var $258=$256;
 var $259=((($257)-($258))|0);
 $38=$248;
 $39=$259;
 var $260=$38;
 var $261=$39;
 var $262=(($260+24)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($263+$261)|0);
 HEAP32[(($262)>>2)]=$264;
 label=27;break;
 case 27: 
 label=29;break;
 case 28: 
 $46=-1;
 label=38;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $270=$__r;
 var $271=($270|0)==1;
 if($271){label=13;break;}else{label=32;break;}
 case 32: 
 label=33;break;
 case 33: 
 var $274=$49;
 var $275=$__pb_save;
 var $276=$__epb_save;
 $40=$274;
 $41=$275;
 $42=$276;
 var $277=$40;
 var $278=$41;
 var $279=(($277+24)|0);
 HEAP32[(($279)>>2)]=$278;
 var $280=(($277+20)|0);
 HEAP32[(($280)>>2)]=$278;
 var $281=$42;
 var $282=(($277+28)|0);
 HEAP32[(($282)>>2)]=$281;
 label=34;break;
 case 34: 
 var $284=$48;
 $45=$284;
 var $285=$45;
 $43=$285;
 $44=-1;
 var $286=$43;
 var $287=$44;
 var $288=($286|0)==($287|0);
 if($288){label=35;break;}else{label=36;break;}
 case 35: 
 var $292=0;label=37;break;
 case 36: 
 var $291=$45;
 var $292=$291;label=37;break;
 case 37: 
 var $292;
 $46=$292;
 label=38;break;
 case 38: 
 var $294=$46;
 STACKTOP=sp;return $294;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 $14=$this;
 var $15=$14;
 var $16=(($15+92)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&16;
 var $19=($18|0)!=0;
 if($19){label=9;break;}else{label=2;break;}
 case 2: 
 var $21=$15;
 $10=$21;
 $11=0;
 $12=0;
 $13=0;
 var $22=$10;
 var $23=$11;
 var $24=(($22+8)|0);
 HEAP32[(($24)>>2)]=$23;
 var $25=$12;
 var $26=(($22+12)|0);
 HEAP32[(($26)>>2)]=$25;
 var $27=$13;
 var $28=(($22+16)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=(($15+52)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30>>>0)>8;
 if($31){label=3;break;}else{label=7;break;}
 case 3: 
 var $33=(($15+98)|0);
 var $34=HEAP8[($33)];
 var $35=(($34)&1);
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 var $37=$15;
 var $38=(($15+32)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($15+32)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($15+52)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=((($43)-(1))|0);
 var $45=(($41+$44)|0);
 $1=$37;
 $2=$39;
 $3=$45;
 var $46=$1;
 var $47=$2;
 var $48=(($46+24)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=(($46+20)|0);
 HEAP32[(($49)>>2)]=$47;
 var $50=$3;
 var $51=(($46+28)|0);
 HEAP32[(($51)>>2)]=$50;
 label=6;break;
 case 5: 
 var $53=$15;
 var $54=(($15+56)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($15+56)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($15+60)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=((($59)-(1))|0);
 var $61=(($57+$60)|0);
 $4=$53;
 $5=$55;
 $6=$61;
 var $62=$4;
 var $63=$5;
 var $64=(($62+24)|0);
 HEAP32[(($64)>>2)]=$63;
 var $65=(($62+20)|0);
 HEAP32[(($65)>>2)]=$63;
 var $66=$6;
 var $67=(($62+28)|0);
 HEAP32[(($67)>>2)]=$66;
 label=6;break;
 case 6: 
 label=8;break;
 case 7: 
 var $70=$15;
 $7=$70;
 $8=0;
 $9=0;
 var $71=$7;
 var $72=$8;
 var $73=(($71+24)|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=(($71+20)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=$9;
 var $76=(($71+28)|0);
 HEAP32[(($76)>>2)]=$75;
 label=8;break;
 case 8: 
 var $78=(($15+92)|0);
 HEAP32[(($78)>>2)]=16;
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 $13=$this;
 var $14=$13;
 var $15=(($14+92)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&8;
 var $18=($17|0)!=0;
 if($18){label=6;break;}else{label=2;break;}
 case 2: 
 var $20=$14;
 $9=$20;
 $10=0;
 $11=0;
 var $21=$9;
 var $22=$10;
 var $23=(($21+24)|0);
 HEAP32[(($23)>>2)]=$22;
 var $24=(($21+20)|0);
 HEAP32[(($24)>>2)]=$22;
 var $25=$11;
 var $26=(($21+28)|0);
 HEAP32[(($26)>>2)]=$25;
 var $27=(($14+98)|0);
 var $28=HEAP8[($27)];
 var $29=(($28)&1);
 if($29){label=3;break;}else{label=4;break;}
 case 3: 
 var $31=$14;
 var $32=(($14+32)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($14+32)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($14+52)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($35+$37)|0);
 var $39=(($14+32)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($14+52)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($40+$42)|0);
 $1=$31;
 $2=$33;
 $3=$38;
 $4=$43;
 var $44=$1;
 var $45=$2;
 var $46=(($44+8)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=$3;
 var $48=(($44+12)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=$4;
 var $50=(($44+16)|0);
 HEAP32[(($50)>>2)]=$49;
 label=5;break;
 case 4: 
 var $52=$14;
 var $53=(($14+56)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($14+56)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($14+60)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($56+$58)|0);
 var $60=(($14+56)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($14+60)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($61+$63)|0);
 $5=$52;
 $6=$54;
 $7=$59;
 $8=$64;
 var $65=$5;
 var $66=$6;
 var $67=(($65+8)|0);
 HEAP32[(($67)>>2)]=$66;
 var $68=$7;
 var $69=(($65+12)|0);
 HEAP32[(($69)>>2)]=$68;
 var $70=$8;
 var $71=(($65+16)|0);
 HEAP32[(($71)>>2)]=$70;
 label=5;break;
 case 5: 
 var $73=(($14+92)|0);
 HEAP32[(($73)>>2)]=8;
 $12=1;
 label=7;break;
 case 6: 
 $12=0;
 label=7;break;
 case 7: 
 var $76=$12;
 STACKTOP=sp;return $76;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $__rt;
 var $__mdstr;
 $1=$this;
 $2=$__s;
 $3=$__mode;
 var $4=$1;
 $__rt=0;
 var $5=(($4+64)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=26;break;}
 case 2: 
 $__rt=$4;
 var $9=$3;
 var $10=$9&-3;
 switch(($10|0)){case 21:case 5:{ label=10;break;}case 12:{ label=11;break;}case 28:{ label=12;break;}case 60:{ label=13;break;}case 29:case 13:{ label=14;break;}case 16:case 48:{ label=3;break;}case 17:case 1:{ label=4;break;}case 8:{ label=5;break;}case 24:{ label=6;break;}case 56:{ label=7;break;}case 25:case 9:{ label=8;break;}case 20:case 52:{ label=9;break;}default:{label=15;break;}}break;
 case 3: 
 $__mdstr=1088;
 label=16;break;
 case 4: 
 $__mdstr=704;
 label=16;break;
 case 5: 
 $__mdstr=400;
 label=16;break;
 case 6: 
 $__mdstr=168;
 label=16;break;
 case 7: 
 $__mdstr=3440;
 label=16;break;
 case 8: 
 $__mdstr=3256;
 label=16;break;
 case 9: 
 $__mdstr=2880;
 label=16;break;
 case 10: 
 $__mdstr=2776;
 label=16;break;
 case 11: 
 $__mdstr=2704;
 label=16;break;
 case 12: 
 $__mdstr=2656;
 label=16;break;
 case 13: 
 $__mdstr=2640;
 label=16;break;
 case 14: 
 $__mdstr=2624;
 label=16;break;
 case 15: 
 $__rt=0;
 label=16;break;
 case 16: 
 var $25=$__rt;
 var $26=($25|0)!=0;
 if($26){label=17;break;}else{label=25;break;}
 case 17: 
 var $28=$2;
 var $29=$__mdstr;
 var $30=_fopen($28,$29);
 var $31=(($4+64)|0);
 HEAP32[(($31)>>2)]=$30;
 var $32=(($4+64)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)!=0;
 if($34){label=18;break;}else{label=23;break;}
 case 18: 
 var $36=$3;
 var $37=(($4+88)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=$3;
 var $39=$38&2;
 var $40=($39|0)!=0;
 if($40){label=19;break;}else{label=22;break;}
 case 19: 
 var $42=(($4+64)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=_fseek($43,0,2);
 var $45=($44|0)!=0;
 if($45){label=20;break;}else{label=21;break;}
 case 20: 
 var $47=(($4+64)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=_fclose($48);
 var $50=(($4+64)|0);
 HEAP32[(($50)>>2)]=0;
 $__rt=0;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=24;break;
 case 23: 
 $__rt=0;
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $57=$__rt;
 STACKTOP=sp;return $57;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14=sp;
 var $15;
 var $16;
 var $17=(sp)+(8);
 var $18=(sp)+(16);
 $13=$this;
 var $19=$13;
 var $20=$19;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($20);
 var $21=$19;
 HEAP32[(($21)>>2)]=6184;
 var $22=(($19+32)|0);
 HEAP32[(($22)>>2)]=0;
 var $23=(($19+36)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=(($19+40)|0);
 HEAP32[(($24)>>2)]=0;
 var $25=(($19+52)|0);
 HEAP32[(($25)>>2)]=0;
 var $26=(($19+56)|0);
 HEAP32[(($26)>>2)]=0;
 var $27=(($19+60)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=(($19+64)|0);
 HEAP32[(($28)>>2)]=0;
 var $29=(($19+68)|0);
 $11=$14;
 $12=-1;
 var $30=$11;
 var $31=$12;
 $9=$30;
 $10=$31;
 var $32=$9;
 var $33=(($32)|0);
 HEAP32[(($33)>>2)]=0;
 label=2;break;
 case 2: 
 $8=$14;
 var $35=$8;
 label=3;break;
 case 3: 
 HEAP32[(($29)>>2)]=0;
 var $37=(($19+72)|0);
 var $38=$37;
 HEAP32[(($38)>>2)]=0; HEAP32[((($38)+(4))>>2)]=0;
 var $39=(($19+80)|0);
 var $40=$39;
 HEAP32[(($40)>>2)]=0; HEAP32[((($40)+(4))>>2)]=0;
 var $41=(($19+88)|0);
 HEAP32[(($41)>>2)]=0;
 var $42=(($19+92)|0);
 HEAP32[(($42)>>2)]=0;
 var $43=(($19+96)|0);
 HEAP8[($43)]=0;
 var $44=(($19+97)|0);
 HEAP8[($44)]=0;
 var $45=(($19+98)|0);
 HEAP8[($45)]=0;
 var $46=$19;
 $7=$46;
 var $47=$7;
 var $48=(($47+4)|0);
 __ZNSt3__16localeC2ERKS0_($17,$48);
 label=4;break;
 case 4: 
 $4=$17;
 var $50=$4;
 var $51=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9has_facetERNS0_2idE($50,15072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $54=$53$0;
 $5=$54;
 var $55=$53$1;
 $6=$55;
 var $56=$5;
 ___cxa_call_unexpected($56);
 throw "Reached an unreachable!";
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=13;break; }
 case 7: 
 if($51){label=8;break;}else{label=16;break;}
 case 8: 
 var $59=$19;
 $3=$59;
 var $60=$3;
 var $61=(($60+4)|0);
 __ZNSt3__16localeC2ERKS0_($18,$61);
 label=9;break;
 case 9: 
 $2=$18;
 var $63=$2;
 var $64=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($63,15072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $65=$64;
 label=11;break;
 case 11: 
 var $67=(($19+68)|0);
 HEAP32[(($67)>>2)]=$65;
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=13;break; }
 case 12: 
 var $69=(($19+68)|0);
 var $70=HEAP32[(($69)>>2)];
 $1=$70;
 var $71=$1;
 var $72=$71;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($71);
 var $77=(($19+98)|0);
 var $78=($76&1);
 HEAP8[($77)]=$78;
 label=16;break;
 case 13: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $81=$80$0;
 $15=$81;
 var $82=$80$1;
 $16=$82;
 label=18;break;
 case 14: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1); var $84$1 = tempRet0;
 var $85=$84$0;
 $15=$85;
 var $86=$84$1;
 $16=$86;
 (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=21;break; }
 case 15: 
 label=18;break;
 case 16: 
 var $89=$19;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($19,0,4096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=13;break; }
 case 17: 
 STACKTOP=sp;return;
 case 18: 
 var $96=$19;
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=21;break; }
 case 19: 
 label=20;break;
 case 20: 
 var $99=$15;
 var $100=$16;
 var $101$0=$99;
 var $101$1=0;
 var $102$0=$101$0;
 var $102$1=$100;
 ___resumeException($102$0)
 case 21: 
 var $104$0 = ___cxa_find_matching_catch(-1, -1,0); var $104$1 = tempRet0;
 var $105=$104$0;
 ___clang_call_terminate($105);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL12KernelStructC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN6OpenCL12KernelStructC2Ev($2);
 STACKTOP=sp;return;
}


function __ZN6OpenCL6KernelC2EPKNS_7ProgramE($this,$pProgram){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$pProgram;
 var $5=$1;
 var $6=__Znwj(48);
 var $7=$6;
 (function() { try { __THREW__ = 0; return __ZN6OpenCL12KernelStructC1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 var $9=(($5)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=(($5)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=5;break;}
 case 3: 
 var $14=(($5)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=$2;
 var $18=__ZNK6OpenCL7Program11GetDeviceIdEv($17);
 var $19=(($5)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+8)|0);
 HEAP32[(($21)>>2)]=$18;
 var $22=$2;
 var $23=__ZNK6OpenCL7Program15GetCommandQueueEv($22);
 var $24=(($5)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 HEAP32[(($26)>>2)]=$23;
 var $27=$2;
 var $28=__ZNK6OpenCL7Program10GetProgramEv($27);
 var $29=(($5)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+16)|0);
 HEAP32[(($31)>>2)]=$28;
 label=5;break;
 case 4: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 var $34=$33$0;
 $3=$34;
 var $35=$33$1;
 $4=$35;
 __ZdlPv($6);
 label=6;break;
 case 5: 
 STACKTOP=sp;return;
 case 6: 
 var $38=$3;
 var $39=$4;
 var $40$0=$38;
 var $40$1=0;
 var $41$0=$40$0;
 var $41$1=$39;
 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZL19OpenCLKernelReleasePN6OpenCL12KernelStructE($pKernel){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $__i1_i_i1=sp;
 var $23;
 var $24=(sp)+(8);
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36=(sp)+(16);
 var $37;
 var $38;
 var $__i1_i_i=(sp)+(24);
 var $39;
 var $40=(sp)+(32);
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48=(sp)+(40);
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $pKernelMapPos=(sp)+(48);
 var $pKernelMapPosBegin=(sp)+(56);
 var $pKernelMapPosEnd=(sp)+(64);
 var $54;
 var $55;
 $53=$pKernel;
 var $56=$53;
 var $57=($56|0)!=0;
 if($57){label=2;break;}else{label=13;break;}
 case 2: 
 $52=$pKernelMapPos;
 var $59=$52;
 $51=$59;
 var $60=$51;
 var $61=(($60)|0);
 $50=$61;
 var $62=$50;
 $49=$62;
 var $63=$49;
 var $64=$53;
 var $65=(($64+32)|0);
 $47=$65;
 var $66=$47;
 var $67=(($66)|0);
 $46=$67;
 var $68=$46;
 $45=$68;
 var $69=$45;
 var $70=(($69)|0);
 var $71=HEAP32[(($70)>>2)];
 $43=$48;
 $44=$71;
 var $72=$43;
 var $73=$44;
 $41=$72;
 $42=$73;
 var $74=$41;
 var $75=(($74)|0);
 var $76=$42;
 HEAP32[(($75)>>2)]=$76;
 var $tmp_i=$40;
 var $tmp1_i=$48;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $39=$pKernelMapPosBegin;
 var $77=$39;
 var $tmp_i_i=$__i1_i_i;
 var $tmp2_i_i=$40;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $38=$77;
 var $78=$38;
 var $79=(($78)|0);
 var $80=$79;
 var $81=$__i1_i_i;
 assert(4 % 1 === 0);HEAP32[(($80)>>2)]=HEAP32[(($81)>>2)];
 var $82=$53;
 var $83=(($82+32)|0);
 $35=$83;
 var $84=$35;
 var $85=(($84)|0);
 $34=$85;
 var $86=$34;
 $33=$86;
 var $87=$33;
 var $88=(($87+4)|0);
 $32=$88;
 var $89=$32;
 var $90=$89;
 $31=$90;
 var $91=$31;
 var $92=(($91)|0);
 $30=$92;
 var $93=$30;
 $29=$93;
 var $94=$29;
 var $95=$94;
 var $96=$95;
 var $97=$96;
 $27=$36;
 $28=$97;
 var $98=$27;
 var $99=$28;
 $25=$98;
 $26=$99;
 var $100=$25;
 var $101=(($100)|0);
 var $102=$26;
 HEAP32[(($101)>>2)]=$102;
 var $tmp_i2=$24;
 var $tmp1_i3=$36;
 assert(4 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];HEAP8[((($tmp_i2)+(1))|0)]=HEAP8[((($tmp1_i3)+(1))|0)];HEAP8[((($tmp_i2)+(2))|0)]=HEAP8[((($tmp1_i3)+(2))|0)];HEAP8[((($tmp_i2)+(3))|0)]=HEAP8[((($tmp1_i3)+(3))|0)];
 $23=$pKernelMapPosEnd;
 var $103=$23;
 var $tmp_i_i4=$__i1_i_i1;
 var $tmp2_i_i5=$24;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i4)]=HEAP8[($tmp2_i_i5)];HEAP8[((($tmp_i_i4)+(1))|0)]=HEAP8[((($tmp2_i_i5)+(1))|0)];HEAP8[((($tmp_i_i4)+(2))|0)]=HEAP8[((($tmp2_i_i5)+(2))|0)];HEAP8[((($tmp_i_i4)+(3))|0)]=HEAP8[((($tmp2_i_i5)+(3))|0)];
 $22=$103;
 var $104=$22;
 var $105=(($104)|0);
 var $106=$105;
 var $107=$__i1_i_i1;
 assert(4 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];
 var $108=$pKernelMapPos;
 var $109=$pKernelMapPosBegin;
 assert(4 % 1 === 0);HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];
 label=3;break;
 case 3: 
 $19=$pKernelMapPos;
 $20=$pKernelMapPosEnd;
 var $111=$19;
 var $112=(($111)|0);
 var $113=$20;
 var $114=(($113)|0);
 $17=$112;
 $18=$114;
 var $115=$17;
 var $116=$18;
 $15=$115;
 $16=$116;
 var $117=$15;
 var $118=(($117)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$16;
 var $121=(($120)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=($119|0)==($122|0);
 var $124=$123^1;
 if($124){label=4;break;}else{label=8;break;}
 case 4: 
 $12=$pKernelMapPos;
 var $126=$12;
 var $127=(($126)|0);
 $11=$127;
 var $128=$11;
 var $129=(($128)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(($130+16)|0);
 $10=$131;
 var $132=$10;
 $9=$132;
 var $133=$9;
 var $134=$133;
 var $135=$134;
 var $136=(($135)|0);
 $8=$136;
 var $137=$8;
 $7=$137;
 var $138=$7;
 var $139=$138;
 var $140=$139;
 var $141=(($140+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)!=0;
 if($143){label=5;break;}else{label=6;break;}
 case 5: 
 $6=$pKernelMapPos;
 var $145=$6;
 var $146=(($145)|0);
 $5=$146;
 var $147=$5;
 var $148=(($147)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+16)|0);
 $4=$150;
 var $151=$4;
 $3=$151;
 var $152=$3;
 var $153=$152;
 var $154=$153;
 var $155=(($154)|0);
 $2=$155;
 var $156=$2;
 $1=$156;
 var $157=$1;
 var $158=$157;
 var $159=$158;
 var $160=(($159+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=_clReleaseKernel($161);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 $14=$pKernelMapPos;
 var $165=$14;
 var $166=(($165)|0);
 $13=$166;
 var $167=$13;
 var $168=(($167)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$169;
 var $171=__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($170);
 var $172=$171;
 var $173=(($167)|0);
 HEAP32[(($173)>>2)]=$172;
 label=3;break;
 case 8: 
 var $175=$53;
 var $176=(($175+32)|0);
 $21=$176;
 var $177=$21;
 var $178=(($177)|0);
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE5clearEv($178);
 var $179=$53;
 var $180=(($179+20)|0);
 $37=$180;
 var $181=$37;
 var $182=(($181)|0);
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE5clearEv($182);
 var $183=$53;
 var $184=($183|0)==0;
 if($184){label=11;break;}else{label=9;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZN6OpenCL12KernelStructD1Ev($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 var $187=$183;
 __ZdlPv($187);
 label=11;break;
 case 11: 
 label=13;break;
 case 12: 
 var $190$0 = ___cxa_find_matching_catch(-1, -1); var $190$1 = tempRet0;
 var $191=$190$0;
 $54=$191;
 var $192=$190$1;
 $55=$192;
 var $193=$183;
 __ZdlPv($193);
 label=14;break;
 case 13: 
 STACKTOP=sp;return;
 case 14: 
 var $196=$54;
 var $197=$55;
 var $198$0=$196;
 var $198$1=0;
 var $199$0=$198$0;
 var $199$1=$197;
 ___resumeException($199$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL6KernelD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZL19OpenCLKernelReleasePN6OpenCL12KernelStructE($4);
 STACKTOP=sp;return;
}


function __ZN6OpenCL6Kernel16SetWorkDimensionERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($this,$rKernelName,$nWorkDim){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$rKernelName;
 $3=$nWorkDim;
 var $4=$1;
 var $5=$3;
 var $6=(($4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+20)|0);
 var $9=$2;
 var $10=__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEEixERSA_($8,$9);
 HEAP32[(($10)>>2)]=$5;
 STACKTOP=sp;return;
}

// WARNING: content after a branch in a label, line: 7681
// WARNING: content after a branch in a label, line: 7683
// WARNING: content after a branch in a label, line: 7684
// WARNING: content after a branch in a label, line: 7685
// WARNING: content after a branch in a label, line: 7686
// WARNING: content after a branch in a label, line: 7687
// WARNING: content after a branch in a label, line: 7688
// WARNING: content after a branch in a label, line: 7689
// WARNING: content after a branch in a label, line: 7690
// WARNING: content after a branch in a label, line: 7691
// WARNING: content after a branch in a label, line: 7692
// WARNING: content after a branch in a label, line: 7693
// WARNING: content after a branch in a label, line: 7694
// WARNING: content after a branch in a label, line: 7695
// WARNING: content after a branch in a label, line: 7696
// WARNING: content after a branch in a label, line: 7697
// WARNING: content after a branch in a label, line: 7698
// WARNING: content after a branch in a label, line: 7699
// WARNING: content after a branch in a label, line: 7700
// WARNING: content after a branch in a label, line: 7701
// WARNING: content after a branch in a label, line: 7702
// WARNING: content after a branch in a label, line: 7703
// WARNING: content after a branch in a label, line: 7704
// WARNING: content after a branch in a label, line: 7705
// WARNING: content after a branch in a label, line: 7706
// WARNING: content after a branch in a label, line: 7707
// WARNING: content after a branch in a label, line: 7708
// WARNING: content after a branch in a label, line: 7709
// WARNING: content after a branch in a label, line: 7710
// WARNING: content after a branch in a label, line: 7711
// WARNING: content after a branch in a label, line: 7712
// WARNING: content after a branch in a label, line: 7713
// WARNING: content after a branch in a label, line: 7714

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEEixERSA_($this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8=sp;
 var $9;
 var $10;
 var $11=(sp)+(8);
 var $12=(sp)+(16);
 var $13;
 var $14;
 var $15=(sp)+(24);
 var $16;
 var $17;
 var $18=(sp)+(32);
 var $19=(sp)+(40);
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $__tmp_i_i_i18;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44=(sp)+(48);
 var $45;
 var $46;
 var $47=(sp)+(56);
 var $48=(sp)+(64);
 var $49;
 var $50;
 var $51=(sp)+(72);
 var $52;
 var $53;
 var $54=(sp)+(80);
 var $55=(sp)+(88);
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $__tmp_i_i_i10;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $__t_i;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88=(sp)+(96);
 var $89;
 var $90;
 var $91=(sp)+(104);
 var $92=(sp)+(112);
 var $93;
 var $94;
 var $95=(sp)+(120);
 var $96;
 var $97;
 var $98=(sp)+(128);
 var $99=(sp)+(136);
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $__tmp_i_i_i2;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $__t_i_i_i;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131=(sp)+(144);
 var $132=(sp)+(152);
 var $133;
 var $134;
 var $135=(sp)+(160);
 var $136=(sp)+(168);
 var $__t21_i_i_i=(sp)+(176);
 var $137;
 var $138;
 var $139=(sp)+(184);
 var $140;
 var $141;
 var $142=(sp)+(192);
 var $__u1_i=(sp)+(200);
 var $143;
 var $144=(sp)+(208);
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $152;
 var $153;
 var $154;
 var $155;
 var $156;
 var $157=(sp)+(216);
 var $158;
 var $159;
 var $160=(sp)+(224);
 var $161=(sp)+(232);
 var $162;
 var $163;
 var $164=(sp)+(240);
 var $165;
 var $166;
 var $167=(sp)+(248);
 var $168=(sp)+(256);
 var $169;
 var $170;
 var $171;
 var $172;
 var $173;
 var $174;
 var $175;
 var $176;
 var $177;
 var $178;
 var $179;
 var $180;
 var $181;
 var $182;
 var $183;
 var $__tmp_i_i_i;
 var $184;
 var $185;
 var $186;
 var $187;
 var $188;
 var $189;
 var $190;
 var $191;
 var $192;
 var $__parent=(sp)+(264);
 var $__child;
 var $__r;
 var $193=(sp)+(272);
 var $__h=(sp)+(280);
 var $194=(sp)+(296);
 var $195=(sp)+(304);
 var $196;
 var $197;
 $191=$this;
 $192=$__k;
 var $198=$191;
 var $199=$192;
 var $200=__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_($198,$__parent,$199);
 $__child=$200;
 var $201=$__child;
 var $202=HEAP32[(($201)>>2)];
 var $203=$202;
 $__r=$203;
 var $204=$__child;
 var $205=HEAP32[(($204)>>2)];
 $189=$193;
 $190=-1;
 var $206=$189;
 var $207=$190;
 $187=$206;
 $188=$207;
 var $208=$187;
 var $209=(($208)|0);
 HEAP32[(($209)>>2)]=0;
 $186=$193;
 var $210=$186;
 var $211=($205|0)==0;
 if($211){label=2;break;}else{label=49;break;}
 case 2: 
 var $213=$192;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEE25__construct_node_with_keyERSA_($195,$198,$213);
 $149=$195;
 var $214=$149;
 $147=$194;
 $148=$214;
 var $215=$147;
 var $216=$148;
 $145=$215;
 $146=$216;
 var $217=$145;
 var $218=(($217)|0);
 var $219=$146;
 HEAP32[(($218)>>2)]=$219;
 label=3;break;
 case 3: 
 var $tmp=$144;
 var $tmp1=$194;
 assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
 $143=$__h;
 var $221=$143;
 var $tmp_i=$__u1_i;
 var $tmp2_i=$144;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp2_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp2_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp2_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp2_i)+(3))|0)];
 $141=$221;
 var $222=$141;
 var $223=(($222)|0);
 $140=$__u1_i;
 var $224=$140;
 var $225=(($224)|0);
 var $226=HEAP32[(($225)>>2)];
 $121=$226;
 var $227=$121;
 var $228=(($227)|0);
 $120=$228;
 var $229=$120;
 var $230=$229;
 $119=$230;
 var $231=$119;
 var $232=(($231)|0);
 var $233=HEAP32[(($232)>>2)];
 $__t_i_i_i=$233;
 var $234=(($227)|0);
 $118=$234;
 var $235=$118;
 var $236=$235;
 $117=$236;
 var $237=$117;
 var $238=(($237)|0);
 HEAP32[(($238)>>2)]=0;
 var $239=$__t_i_i_i;
 $122=$__u1_i;
 var $240=$122;
 var $241=(($240)|0);
 var $242=HEAP32[(($241)>>2)];
 $125=$242;
 var $243=$125;
 var $244=(($243)|0);
 $124=$244;
 var $245=$124;
 var $246=$245;
 $123=$246;
 var $247=$123;
 var $248=(($247+4)|0);
 $126=$248;
 var $249=$126;
 var $250=$142;
 var $251=$249;
 assert(8 % 1 === 0);HEAP32[(($250)>>2)]=HEAP32[(($251)>>2)];HEAP32[((($250)+(4))>>2)]=HEAP32[((($251)+(4))>>2)];
 var $tmp_i_i=$139;
 var $tmp1_i_i=$142;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp1_i_i, 8)|0);
 $137=$223;
 $138=$239;
 var $252=$137;
 var $253=$138;
 var $tmp_i_i_i=$__t21_i_i_i;
 var $tmp2_i_i_i=$139;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp2_i_i_i, 8)|0);
 $134=$252;
 HEAP32[(($135)>>2)]=$253;
 var $254=$134;
 var $255=$254;
 $133=$135;
 var $256=$133;
 var $257=HEAP32[(($256)>>2)];
 $127=$__t21_i_i_i;
 var $258=$127;
 var $259=$136;
 var $260=$258;
 assert(8 % 1 === 0);HEAP32[(($259)>>2)]=HEAP32[(($260)>>2)];HEAP32[((($259)+(4))>>2)]=HEAP32[((($260)+(4))>>2)];
 var $tmp_i_i_i_i=$132;
 var $tmp1_i_i_i_i=$136;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp1_i_i_i_i, 8)|0);
 $130=$255;
 HEAP32[(($131)>>2)]=$257;
 var $261=$130;
 var $262=(($261)|0);
 $129=$131;
 var $263=$129;
 var $264=HEAP32[(($263)>>2)];
 HEAP32[(($262)>>2)]=$264;
 var $265=(($261+4)|0);
 $128=$132;
 var $266=$128;
 var $267=$265;
 var $268=$266;
 assert(8 % 1 === 0);HEAP32[(($267)>>2)]=HEAP32[(($268)>>2)];HEAP32[((($267)+(4))>>2)]=HEAP32[((($268)+(4))>>2)];
 label=4;break;
 case 4: 
 $116=$195;
 var $270=$116;
 $115=$270;
 var $271=$115;
 $113=$271;
 $114=0;
 var $272=$113;
 var $273=(($272)|0);
 $112=$273;
 var $274=$112;
 var $275=$274;
 $111=$275;
 var $276=$111;
 var $277=(($276)|0);
 var $278=HEAP32[(($277)>>2)];
 $__tmp_i_i_i2=$278;
 var $279=$114;
 var $280=(($272)|0);
 $84=$280;
 var $281=$84;
 var $282=$281;
 $83=$282;
 var $283=$83;
 var $284=(($283)|0);
 HEAP32[(($284)>>2)]=$279;
 var $285=$__tmp_i_i_i2;
 var $286=($285|0)!=0;
 if($286){label=5;break;}else{label=14;break;}
 case 5: 
 var $288=(($272)|0);
 $82=$288;
 var $289=$82;
 var $290=$289;
 $81=$290;
 var $291=$81;
 var $292=(($291+4)|0);
 var $293=$__tmp_i_i_i2;
 $107=$292;
 $108=$293;
 var $294=$107;
 var $295=(($294+5)|0);
 var $296=HEAP8[($295)];
 var $297=(($296)&1);
 if($297){label=6;break;}else{label=8;break;}
 case 6: 
 var $299=(($294)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=$108;
 var $302=(($301+16)|0);
 var $303=(($302)|0);
 var $304=(($303+12)|0);
 $106=$304;
 var $305=$106;
 var $306=$305;
 var $307=$306;
 $96=$300;
 $97=$307;
 var $308=$99;
 var $309=$96;
 var $310=$97;
 var $tmp_i_i_i_i_i3=$95;
 var $tmp1_i_i_i_i_i4=$98;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i3)]=HEAP8[($tmp1_i_i_i_i_i4)];
 $93=$309;
 $94=$310;
 var $311=$94;
 label=8;break;
 case 7: 
 var $313$0 = ___cxa_find_matching_catch(-1, -1); var $313$1 = tempRet0;
 var $314=$313$0;
 $109=$314;
 var $315=$313$1;
 $110=$315;
 var $316=$109;
 ___cxa_call_unexpected($316);
 throw "Reached an unreachable!";
 case 8: 
 var $318=(($294+4)|0);
 var $319=HEAP8[($318)];
 var $320=(($319)&1);
 if($320){label=9;break;}else{label=11;break;}
 case 9: 
 var $322=(($294)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=$108;
 var $325=(($324+16)|0);
 var $326=(($325)|0);
 var $327=(($326)|0);
 $85=$327;
 var $328=$85;
 var $329=$328;
 var $330=$329;
 $89=$323;
 $90=$330;
 var $331=$92;
 var $332=$89;
 var $333=$90;
 var $tmp_i1_i_i_i_i5=$88;
 var $tmp1_i2_i_i_i_i6=$91;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i5)]=HEAP8[($tmp1_i2_i_i_i_i6)];
 $86=$332;
 $87=$333;
 var $334=$87;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($334) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=7;break; }
 case 10: 
 label=11;break;
 case 11: 
 var $336=$108;
 var $337=($336|0)!=0;
 if($337){label=12;break;}else{label=13;break;}
 case 12: 
 var $339=(($294)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=$108;
 $103=$340;
 $104=$341;
 $105=1;
 var $342=$103;
 var $343=$104;
 var $344=$105;
 $100=$342;
 $101=$343;
 $102=$344;
 var $345=$100;
 var $346=$101;
 var $347=$346;
 __ZdlPv($347);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $348=(($198)|0);
 var $349=HEAP32[(($__parent)>>2)];
 var $350=$__child;
 $80=$__h;
 var $351=$80;
 var $352=(($351)|0);
 $79=$352;
 var $353=$79;
 var $354=$353;
 $78=$354;
 var $355=$78;
 var $356=(($355)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=$357;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSI_SI_($348,$349,$350,$358) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=37;break; }
 case 15: 
 $77=$__h;
 var $360=$77;
 var $361=(($360)|0);
 $76=$361;
 var $362=$76;
 var $363=$362;
 $75=$363;
 var $364=$75;
 var $365=(($364)|0);
 var $366=HEAP32[(($365)>>2)];
 $__t_i=$366;
 var $367=(($360)|0);
 $74=$367;
 var $368=$74;
 var $369=$368;
 $73=$369;
 var $370=$73;
 var $371=(($370)|0);
 HEAP32[(($371)>>2)]=0;
 var $372=$__t_i;
 $__r=$372;
 $72=$__h;
 var $373=$72;
 $71=$373;
 var $374=$71;
 $69=$374;
 $70=0;
 var $375=$69;
 var $376=(($375)|0);
 $68=$376;
 var $377=$68;
 var $378=$377;
 $67=$378;
 var $379=$67;
 var $380=(($379)|0);
 var $381=HEAP32[(($380)>>2)];
 $__tmp_i_i_i10=$381;
 var $382=$70;
 var $383=(($375)|0);
 $40=$383;
 var $384=$40;
 var $385=$384;
 $39=$385;
 var $386=$39;
 var $387=(($386)|0);
 HEAP32[(($387)>>2)]=$382;
 var $388=$__tmp_i_i_i10;
 var $389=($388|0)!=0;
 if($389){label=16;break;}else{label=25;break;}
 case 16: 
 var $391=(($375)|0);
 $38=$391;
 var $392=$38;
 var $393=$392;
 $37=$393;
 var $394=$37;
 var $395=(($394+4)|0);
 var $396=$__tmp_i_i_i10;
 $63=$395;
 $64=$396;
 var $397=$63;
 var $398=(($397+5)|0);
 var $399=HEAP8[($398)];
 var $400=(($399)&1);
 if($400){label=17;break;}else{label=19;break;}
 case 17: 
 var $402=(($397)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=$64;
 var $405=(($404+16)|0);
 var $406=(($405)|0);
 var $407=(($406+12)|0);
 $62=$407;
 var $408=$62;
 var $409=$408;
 var $410=$409;
 $52=$403;
 $53=$410;
 var $411=$55;
 var $412=$52;
 var $413=$53;
 var $tmp_i_i_i_i_i11=$51;
 var $tmp1_i_i_i_i_i12=$54;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i11)]=HEAP8[($tmp1_i_i_i_i_i12)];
 $49=$412;
 $50=$413;
 var $414=$50;
 label=19;break;
 case 18: 
 var $416$0 = ___cxa_find_matching_catch(-1, -1); var $416$1 = tempRet0;
 var $417=$416$0;
 $65=$417;
 var $418=$416$1;
 $66=$418;
 var $419=$65;
 ___cxa_call_unexpected($419);
 throw "Reached an unreachable!";
 case 19: 
 var $421=(($397+4)|0);
 var $422=HEAP8[($421)];
 var $423=(($422)&1);
 if($423){label=20;break;}else{label=22;break;}
 case 20: 
 var $425=(($397)|0);
 var $426=HEAP32[(($425)>>2)];
 var $427=$64;
 var $428=(($427+16)|0);
 var $429=(($428)|0);
 var $430=(($429)|0);
 $41=$430;
 var $431=$41;
 var $432=$431;
 var $433=$432;
 $45=$426;
 $46=$433;
 var $434=$48;
 var $435=$45;
 var $436=$46;
 var $tmp_i1_i_i_i_i13=$44;
 var $tmp1_i2_i_i_i_i14=$47;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i13)]=HEAP8[($tmp1_i2_i_i_i_i14)];
 $42=$435;
 $43=$436;
 var $437=$43;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($437) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=18;break; }
 case 21: 
 label=22;break;
 case 22: 
 var $439=$64;
 var $440=($439|0)!=0;
 if($440){label=23;break;}else{label=24;break;}
 case 23: 
 var $442=(($397)|0);
 var $443=HEAP32[(($442)>>2)];
 var $444=$64;
 $59=$443;
 $60=$444;
 $61=1;
 var $445=$59;
 var $446=$60;
 var $447=$61;
 $56=$445;
 $57=$446;
 $58=$447;
 var $448=$56;
 var $449=$57;
 var $450=$449;
 __ZdlPv($450);
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=49;break;
 case 26: 
 var $473=(($457)|0);
 $2=$473;
 var $474=$2;
 var $475=$474;
 $1=$475;
 var $476=$1;
 var $477=(($476+4)|0);
 var $478=$__tmp_i_i_i18;
 $27=$477;
 $28=$478;
 var $479=$27;
 var $480=(($479+5)|0);
 var $481=HEAP8[($480)];
 var $482=(($481)&1);
 if($482){label=27;break;}else{label=29;break;}
 case 27: 
 var $484=(($479)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=$28;
 var $487=(($486+16)|0);
 var $488=(($487)|0);
 var $489=(($488+12)|0);
 $26=$489;
 var $490=$26;
 var $491=$490;
 var $492=$491;
 $16=$485;
 $17=$492;
 var $493=$19;
 var $494=$16;
 var $495=$17;
 var $tmp_i_i_i_i_i19=$15;
 var $tmp1_i_i_i_i_i20=$18;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i19)]=HEAP8[($tmp1_i_i_i_i_i20)];
 $13=$494;
 $14=$495;
 var $496=$14;
 label=29;break;
 case 28: 
 var $498$0 = ___cxa_find_matching_catch(-1, -1,0); var $498$1 = tempRet0;
 var $499=$498$0;
 $29=$499;
 var $500=$498$1;
 $30=$500;
 var $501=$29;
 ___cxa_call_unexpected($501);
 throw "Reached an unreachable!";
 case 29: 
 var $503=(($479+4)|0);
 var $504=HEAP8[($503)];
 var $505=(($504)&1);
 if($505){label=30;break;}else{label=32;break;}
 case 30: 
 var $507=(($479)|0);
 var $508=HEAP32[(($507)>>2)];
 var $509=$28;
 var $510=(($509+16)|0);
 var $511=(($510)|0);
 var $512=(($511)|0);
 $5=$512;
 var $513=$5;
 var $514=$513;
 var $515=$514;
 $9=$508;
 $10=$515;
 var $516=$12;
 var $517=$9;
 var $518=$10;
 var $tmp_i1_i_i_i_i21=$8;
 var $tmp1_i2_i_i_i_i22=$11;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i21)]=HEAP8[($tmp1_i2_i_i_i_i22)];
 $6=$517;
 $7=$518;
 var $519=$7;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($519) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=28;break; }
 case 31: 
 label=32;break;
 case 32: 
 var $521=$28;
 var $522=($521|0)!=0;
 if($522){label=33;break;}else{label=34;break;}
 case 33: 
 var $524=(($479)|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=$28;
 $23=$525;
 $24=$526;
 $25=1;
 var $527=$23;
 var $528=$24;
 var $529=$25;
 $20=$527;
 $21=$528;
 $22=$529;
 var $530=$20;
 var $531=$21;
 var $532=$531;
 __ZdlPv($532);
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 label=50;break;
 case 37: 
 var $535$0 = ___cxa_find_matching_catch(-1, -1); var $535$1 = tempRet0;
 var $536=$535$0;
 $196=$536;
 var $537=$535$1;
 $197=$537;
 $185=$__h;
 var $538=$185;
 $184=$538;
 var $539=$184;
 $182=$539;
 $183=0;
 var $540=$182;
 var $541=(($540)|0);
 $181=$541;
 var $542=$181;
 var $543=$542;
 $180=$543;
 var $544=$180;
 var $545=(($544)|0);
 var $546=HEAP32[(($545)>>2)];
 $__tmp_i_i_i=$546;
 var $547=$183;
 var $548=(($540)|0);
 $153=$548;
 var $549=$153;
 var $550=$549;
 $152=$550;
 var $551=$152;
 var $552=(($551)|0);
 HEAP32[(($552)>>2)]=$547;
 var $553=$__tmp_i_i_i;
 var $554=($553|0)!=0;
 if($554){label=38;break;}else{label=47;break;}
 case 38: 
 var $556=(($540)|0);
 $151=$556;
 var $557=$151;
 var $558=$557;
 $150=$558;
 var $559=$150;
 var $560=(($559+4)|0);
 var $561=$__tmp_i_i_i;
 $176=$560;
 $177=$561;
 var $562=$176;
 var $563=(($562+5)|0);
 var $564=HEAP8[($563)];
 var $565=(($564)&1);
 if($565){label=39;break;}else{label=41;break;}
 case 39: 
 var $567=(($562)|0);
 var $568=HEAP32[(($567)>>2)];
 var $569=$177;
 var $570=(($569+16)|0);
 var $571=(($570)|0);
 var $572=(($571+12)|0);
 $175=$572;
 var $573=$175;
 var $574=$573;
 var $575=$574;
 $165=$568;
 $166=$575;
 var $576=$168;
 var $577=$165;
 var $578=$166;
 var $tmp_i_i_i_i_i=$164;
 var $tmp1_i_i_i_i_i=$167;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $162=$577;
 $163=$578;
 var $579=$163;
 label=41;break;
 case 40: 
 var $581$0 = ___cxa_find_matching_catch(-1, -1,0); var $581$1 = tempRet0;
 var $582=$581$0;
 $178=$582;
 var $583=$581$1;
 $179=$583;
 var $584=$178;
 ___cxa_call_unexpected($584);
 throw "Reached an unreachable!";
 case 41: 
 var $586=(($562+4)|0);
 var $587=HEAP8[($586)];
 var $588=(($587)&1);
 if($588){label=42;break;}else{label=44;break;}
 case 42: 
 var $590=(($562)|0);
 var $591=HEAP32[(($590)>>2)];
 var $592=$177;
 var $593=(($592+16)|0);
 var $594=(($593)|0);
 var $595=(($594)|0);
 $154=$595;
 var $596=$154;
 var $597=$596;
 var $598=$597;
 $158=$591;
 $159=$598;
 var $599=$161;
 var $600=$158;
 var $601=$159;
 var $tmp_i1_i_i_i_i=$157;
 var $tmp1_i2_i_i_i_i=$160;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i)]=HEAP8[($tmp1_i2_i_i_i_i)];
 $155=$600;
 $156=$601;
 var $602=$156;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($602) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=40;break; }
 case 43: 
 label=44;break;
 case 44: 
 var $604=$177;
 var $605=($604|0)!=0;
 if($605){label=45;break;}else{label=46;break;}
 case 45: 
 var $607=(($562)|0);
 var $608=HEAP32[(($607)>>2)];
 var $609=$177;
 $172=$608;
 $173=$609;
 $174=1;
 var $610=$172;
 var $611=$173;
 var $612=$174;
 $169=$610;
 $170=$611;
 $171=$612;
 var $613=$169;
 var $614=$170;
 var $615=$614;
 __ZdlPv($615);
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 label=50;break;
 case 49: 
 var $618=$__r;
 var $619=(($618+16)|0);
 var $620=(($619)|0);
 var $621=(($620+12)|0);
 STACKTOP=sp;return $621;
 case 50: 
 var $623=$196;
 var $624=$197;
 var $625$0=$623;
 var $625$1=0;
 var $626$0=$625$0;
 var $626$1=$624;
 ___resumeException($626$0)
 var $628$0 = ___cxa_find_matching_catch(-1, -1,0); var $628$1 = tempRet0;
 var $629=$628$0;
 ___clang_call_terminate($629);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZL24OpenCLKernelSetParameterPN6OpenCL12KernelStructEjjPKv($pKernel,$nParamIndex,$nParamSize,$pParam){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $bParamSet;
 $9=$pKernel;
 $10=$nParamIndex;
 $11=$nParamSize;
 $12=$pParam;
 var $13=$9;
 var $14=(($13+44)|0);
 $8=$14;
 var $15=$8;
 var $16=(($15)|0);
 $7=$16;
 var $17=$7;
 var $18=(($17)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+16)|0);
 $6=$20;
 var $21=$6;
 $5=$21;
 var $22=$5;
 var $23=$22;
 var $24=$23;
 var $25=(($24)|0);
 $4=$25;
 var $26=$4;
 $3=$26;
 var $27=$3;
 var $28=$27;
 var $29=$28;
 var $30=(($29+12)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$10;
 var $33=$11;
 var $34=$12;
 var $35=_clSetKernelArg($31,$32,$33,$34);
 var $36=$9;
 var $37=(($36+4)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=$9;
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 var $42=($41&1);
 $bParamSet=$42;
 var $43=$bParamSet;
 var $44=(($43)&1);
 if($44){label=3;break;}else{label=2;break;}
 case 2: 
 var $46=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,592);
 $1=$46;
 $2=8;
 var $47=$1;
 var $48=$2;
 var $49=FUNCTION_TABLE[$48]($47);
 label=3;break;
 case 3: 
 var $51=$bParamSet;
 var $52=(($51)&1);
 STACKTOP=sp;return $52;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL6Kernel10BindBufferEPNS_6BufferE($this,$pBuffer){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $nParamIndex;
 var $pParam=sp;
 $1=$this;
 $2=$pBuffer;
 var $3=$1;
 var $4=$2;
 var $5=__ZNK6OpenCL6Buffer14GetBufferIndexEv($4);
 $nParamIndex=$5;
 var $6=$2;
 var $7=__ZNK6OpenCL6Buffer9GetBufferEv($6);
 var $8=$7;
 HEAP32[(($pParam)>>2)]=$8;
 var $9=(($3)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$nParamIndex;
 var $12=$pParam;
 var $13=__ZL24OpenCLKernelSetParameterPN6OpenCL12KernelStructEjjPKv($10,$11,4,$12);
 STACKTOP=sp;return $13;
}


function __ZN6OpenCL6Kernel13BindParameterEjjPKv($this,$nParamIndex,$nParamSize,$pParam){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$nParamIndex;
 $3=$nParamSize;
 $4=$pParam;
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=__ZL24OpenCLKernelSetParameterPN6OpenCL12KernelStructEjjPKv($7,$8,$9,$10);
 STACKTOP=sp;return $11;
}


function __ZN6OpenCL6Kernel7AcquireERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$rKernelName){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$rKernelName;
 var $3=$1;
 var $4=$2;
 var $5=(($3)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=__ZL19OpenCLKernelAcquireRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN6OpenCL12KernelStructE($4,$6);
 STACKTOP=sp;return $7;
}


function __ZL19OpenCLKernelAcquireRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN6OpenCL12KernelStructE($rKernelName,$pKernel){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $__i1_i_i1=sp;
 var $12;
 var $13=(sp)+(8);
 var $14;
 var $15;
 var $16=(sp)+(16);
 var $17;
 var $__i1_i_i=(sp)+(24);
 var $18;
 var $19=(sp)+(32);
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31=(sp)+(40);
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $bKernelAcquired;
 var $pKernelMapIterEnd=(sp)+(48);
 var $47=(sp)+(56);
 $45=$rKernelName;
 $46=$pKernel;
 $bKernelAcquired=0;
 var $48=$45;
 $44=$48;
 var $49=$44;
 $43=$49;
 var $50=$43;
 $42=$50;
 var $51=$42;
 var $52=(($51)|0);
 $41=$52;
 var $53=$41;
 var $54=$53;
 $40=$54;
 var $55=$40;
 var $56=(($55)|0);
 var $57=(($56)|0);
 var $58=$57;
 var $59=(($58)|0);
 var $60=$59;
 var $61=HEAP8[($60)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)!=0;
 if($64){label=2;break;}else{label=3;break;}
 case 2: 
 $36=$50;
 var $66=$36;
 var $67=(($66)|0);
 $35=$67;
 var $68=$35;
 var $69=$68;
 $34=$69;
 var $70=$34;
 var $71=(($70)|0);
 var $72=(($71)|0);
 var $73=$72;
 var $74=(($73+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $90=$75;label=4;break;
 case 3: 
 $39=$50;
 var $77=$39;
 var $78=(($77)|0);
 $38=$78;
 var $79=$38;
 var $80=$79;
 $37=$80;
 var $81=$37;
 var $82=(($81)|0);
 var $83=(($82)|0);
 var $84=$83;
 var $85=(($84)|0);
 var $86=$85;
 var $87=HEAP8[($86)];
 var $88=($87&255);
 var $89=$88>>1;
 var $90=$89;label=4;break;
 case 4: 
 var $90;
 var $91=($90|0)!=0;
 if($91){label=5;break;}else{label=9;break;}
 case 5: 
 var $93=$46;
 var $94=(($93+32)|0);
 $30=$94;
 var $95=$30;
 var $96=(($95)|0);
 $29=$96;
 var $97=$29;
 $28=$97;
 var $98=$28;
 var $99=(($98+4)|0);
 $27=$99;
 var $100=$27;
 var $101=$100;
 $26=$101;
 var $102=$26;
 var $103=(($102)|0);
 $25=$103;
 var $104=$25;
 $24=$104;
 var $105=$24;
 var $106=$105;
 var $107=$106;
 var $108=$107;
 $22=$31;
 $23=$108;
 var $109=$22;
 var $110=$23;
 $20=$109;
 $21=$110;
 var $111=$20;
 var $112=(($111)|0);
 var $113=$21;
 HEAP32[(($112)>>2)]=$113;
 var $tmp_i=$19;
 var $tmp1_i=$31;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $18=$pKernelMapIterEnd;
 var $114=$18;
 var $tmp_i_i=$__i1_i_i;
 var $tmp2_i_i=$19;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $17=$114;
 var $115=$17;
 var $116=(($115)|0);
 var $117=$116;
 var $118=$__i1_i_i;
 assert(4 % 1 === 0);HEAP32[(($117)>>2)]=HEAP32[(($118)>>2)];
 var $119=$46;
 var $120=(($119+44)|0);
 var $121=$46;
 var $122=(($121+32)|0);
 var $123=$45;
 $14=$122;
 $15=$123;
 var $124=$14;
 var $125=(($124)|0);
 var $126=$15;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($16,$125,$126);
 var $tmp_i2=$13;
 var $tmp1_i3=$16;
 assert(4 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];HEAP8[((($tmp_i2)+(1))|0)]=HEAP8[((($tmp1_i3)+(1))|0)];HEAP8[((($tmp_i2)+(2))|0)]=HEAP8[((($tmp1_i3)+(2))|0)];HEAP8[((($tmp_i2)+(3))|0)]=HEAP8[((($tmp1_i3)+(3))|0)];
 $12=$47;
 var $127=$12;
 var $tmp_i_i4=$__i1_i_i1;
 var $tmp2_i_i5=$13;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i4)]=HEAP8[($tmp2_i_i5)];HEAP8[((($tmp_i_i4)+(1))|0)]=HEAP8[((($tmp2_i_i5)+(1))|0)];HEAP8[((($tmp_i_i4)+(2))|0)]=HEAP8[((($tmp2_i_i5)+(2))|0)];HEAP8[((($tmp_i_i4)+(3))|0)]=HEAP8[((($tmp2_i_i5)+(3))|0)];
 $11=$127;
 var $128=$11;
 var $129=(($128)|0);
 var $130=$129;
 var $131=$__i1_i_i1;
 assert(4 % 1 === 0);HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];
 var $132=$120;
 var $133=$47;
 assert(4 % 1 === 0);HEAP32[(($132)>>2)]=HEAP32[(($133)>>2)];
 var $134=$46;
 var $135=(($134+44)|0);
 $9=$135;
 $10=$pKernelMapIterEnd;
 var $136=$9;
 var $137=(($136)|0);
 var $138=$10;
 var $139=(($138)|0);
 $7=$137;
 $8=$139;
 var $140=$7;
 var $141=(($140)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$8;
 var $144=(($143)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($142|0)==($145|0);
 if($146){label=6;break;}else{label=7;break;}
 case 6: 
 var $148=$45;
 var $149=$46;
 var $150=__ZL18OpenCLKernelCreateRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN6OpenCL12KernelStructE($148,$149);
 var $151=($150&1);
 $bKernelAcquired=$151;
 label=8;break;
 case 7: 
 var $153=$46;
 var $154=(($153+44)|0);
 $5=$154;
 $6=$pKernelMapIterEnd;
 var $155=$5;
 var $156=(($155)|0);
 var $157=$6;
 var $158=(($157)|0);
 $3=$156;
 $4=$158;
 var $159=$3;
 var $160=$4;
 $1=$159;
 $2=$160;
 var $161=$1;
 var $162=(($161)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=$2;
 var $165=(($164)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=($163|0)==($166|0);
 var $168=$167^1;
 var $169=($168&1);
 $bKernelAcquired=$169;
 label=8;break;
 case 8: 
 label=10;break;
 case 9: 
 var $172=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,2136);
 $32=$172;
 $33=8;
 var $173=$32;
 var $174=$33;
 var $175=FUNCTION_TABLE[$174]($173);
 label=10;break;
 case 10: 
 var $177=$bKernelAcquired;
 var $178=(($177)&1);
 STACKTOP=sp;return $178;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL6Kernel7ExecuteEPKj($this,$pGlobalWorkSize){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$pGlobalWorkSize;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=__ZL19OpenCLKernelExecutePN6OpenCL12KernelStructEPKjS3_S3_($5,0,$6,0);
 STACKTOP=sp;return $7;
}


function __ZL19OpenCLKernelExecutePN6OpenCL12KernelStructEPKjS3_S3_($pKernel,$pGlobalWorkOffset,$pGlobalWorkSize,$pLocalWorkSize){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $bKernelExeced;
 $1=$pKernel;
 $2=$pGlobalWorkOffset;
 $3=$pGlobalWorkSize;
 $4=$pLocalWorkSize;
 $bKernelExeced=0;
 var $5=$4;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=5;break;}
 case 2: 
 var $8=$1;
 var $9=__ZL28OpenCLKernelGetWorkGroupSizePN6OpenCL12KernelStructE($8);
 var $10=($9&1);
 $bKernelExeced=$10;
 var $11=$bKernelExeced;
 var $12=(($11)&1);
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $14=$1;
 var $15=$2;
 var $16=$3;
 var $17=$1;
 var $18=(($17)|0);
 var $19=__ZL26OpenCLKernelEnqueueNDRangePN6OpenCL12KernelStructEPKjS3_S3_($14,$15,$16,$18);
 var $20=($19&1);
 $bKernelExeced=$20;
 label=4;break;
 case 4: 
 label=6;break;
 case 5: 
 var $23=$1;
 var $24=$2;
 var $25=$3;
 var $26=$4;
 var $27=__ZL26OpenCLKernelEnqueueNDRangePN6OpenCL12KernelStructEPKjS3_S3_($23,$24,$25,$26);
 var $28=($27&1);
 $bKernelExeced=$28;
 label=6;break;
 case 6: 
 var $30=$bKernelExeced;
 var $31=(($30)&1);
 STACKTOP=sp;return $31;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_($this,$__parent,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38=sp;
 var $39;
 var $40;
 var $41=(sp)+(8);
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $__lhs_sz_i_i_i1=(sp)+(16);
 var $__rhs_sz_i_i_i2=(sp)+(24);
 var $__result_i_i_i3;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $122=(sp)+(32);
 var $123;
 var $124;
 var $125=(sp)+(40);
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $__lhs_sz_i_i_i=(sp)+(48);
 var $__rhs_sz_i_i_i=(sp)+(56);
 var $__result_i_i_i;
 var $152;
 var $153;
 var $154;
 var $155;
 var $156;
 var $157;
 var $158;
 var $159;
 var $160;
 var $161;
 var $162;
 var $163;
 var $164;
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $170;
 var $171;
 var $172;
 var $173;
 var $174;
 var $175;
 var $176;
 var $177;
 var $178;
 var $__nd;
 var $179=(sp)+(64);
 var $180=(sp)+(72);
 var $181=(sp)+(80);
 $176=$this;
 $177=$__parent;
 $178=$__k;
 var $182=$176;
 var $183=(($182)|0);
 $174=$183;
 var $184=$174;
 $173=$184;
 var $185=$173;
 var $186=(($185+4)|0);
 $172=$186;
 var $187=$172;
 var $188=$187;
 $171=$188;
 var $189=$171;
 var $190=(($189)|0);
 $170=$190;
 var $191=$170;
 $169=$191;
 var $192=$169;
 var $193=$192;
 var $194=$193;
 var $195=$194;
 var $196=$195;
 var $197=(($196)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=$198;
 $__nd=$199;
 var $200=$__nd;
 $87=$179;
 $88=-1;
 var $201=$87;
 var $202=$88;
 $85=$201;
 $86=$202;
 var $203=$85;
 var $204=(($203)|0);
 HEAP32[(($204)>>2)]=0;
 $84=$179;
 var $205=$84;
 var $206=($200|0)!=0;
 if($206){label=2;break;}else{label=64;break;}
 case 2: 
 label=3;break;
 case 3: 
 var $209=(($182)|0);
 $4=$209;
 var $210=$4;
 var $211=(($210+8)|0);
 $3=$211;
 var $212=$3;
 var $213=$212;
 $2=$213;
 var $214=$2;
 var $215=$214;
 $1=$215;
 var $216=$1;
 var $217=$216;
 var $218=$178;
 var $219=$__nd;
 var $220=(($219+16)|0);
 var $221=(($220)|0);
 var $222=(($221)|0);
 $72=$217;
 $73=$218;
 $74=$222;
 var $223=$72;
 var $224=$73;
 var $225=$74;
 $70=$224;
 $71=$225;
 var $226=$70;
 var $227=$71;
 $66=$226;
 $67=$227;
 var $228=$66;
 $64=$228;
 var $229=$64;
 $63=$229;
 var $230=$63;
 var $231=(($230)|0);
 $62=$231;
 var $232=$62;
 var $233=$232;
 $61=$233;
 var $234=$61;
 var $235=(($234)|0);
 var $236=(($235)|0);
 var $237=$236;
 var $238=(($237)|0);
 var $239=$238;
 var $240=HEAP8[($239)];
 var $241=($240&255);
 var $242=$241&1;
 var $243=($242|0)!=0;
 if($243){label=4;break;}else{label=5;break;}
 case 4: 
 $57=$229;
 var $245=$57;
 var $246=(($245)|0);
 $56=$246;
 var $247=$56;
 var $248=$247;
 $55=$248;
 var $249=$55;
 var $250=(($249)|0);
 var $251=(($250)|0);
 var $252=$251;
 var $253=(($252+4)|0);
 var $254=HEAP32[(($253)>>2)];
 var $269=$254;label=6;break;
 case 5: 
 $60=$229;
 var $256=$60;
 var $257=(($256)|0);
 $59=$257;
 var $258=$59;
 var $259=$258;
 $58=$259;
 var $260=$58;
 var $261=(($260)|0);
 var $262=(($261)|0);
 var $263=$262;
 var $264=(($263)|0);
 var $265=$264;
 var $266=HEAP8[($265)];
 var $267=($266&255);
 var $268=$267>>1;
 var $269=$268;label=6;break;
 case 6: 
 var $269;
 HEAP32[(($__lhs_sz_i_i_i1)>>2)]=$269;
 var $270=$67;
 $51=$270;
 var $271=$51;
 $50=$271;
 var $272=$50;
 var $273=(($272)|0);
 $49=$273;
 var $274=$49;
 var $275=$274;
 $48=$275;
 var $276=$48;
 var $277=(($276)|0);
 var $278=(($277)|0);
 var $279=$278;
 var $280=(($279)|0);
 var $281=$280;
 var $282=HEAP8[($281)];
 var $283=($282&255);
 var $284=$283&1;
 var $285=($284|0)!=0;
 if($285){label=7;break;}else{label=8;break;}
 case 7: 
 $44=$271;
 var $287=$44;
 var $288=(($287)|0);
 $43=$288;
 var $289=$43;
 var $290=$289;
 $42=$290;
 var $291=$42;
 var $292=(($291)|0);
 var $293=(($292)|0);
 var $294=$293;
 var $295=(($294+4)|0);
 var $296=HEAP32[(($295)>>2)];
 var $311=$296;label=9;break;
 case 8: 
 $47=$271;
 var $298=$47;
 var $299=(($298)|0);
 $46=$299;
 var $300=$46;
 var $301=$300;
 $45=$301;
 var $302=$45;
 var $303=(($302)|0);
 var $304=(($303)|0);
 var $305=$304;
 var $306=(($305)|0);
 var $307=$306;
 var $308=HEAP8[($307)];
 var $309=($308&255);
 var $310=$309>>1;
 var $311=$310;label=9;break;
 case 9: 
 var $311;
 HEAP32[(($__rhs_sz_i_i_i2)>>2)]=$311;
 $18=$228;
 var $312=$18;
 $17=$312;
 var $313=$17;
 $16=$313;
 var $314=$16;
 var $315=(($314)|0);
 $15=$315;
 var $316=$15;
 var $317=$316;
 $14=$317;
 var $318=$14;
 var $319=(($318)|0);
 var $320=(($319)|0);
 var $321=$320;
 var $322=(($321)|0);
 var $323=$322;
 var $324=HEAP8[($323)];
 var $325=($324&255);
 var $326=$325&1;
 var $327=($326|0)!=0;
 if($327){label=10;break;}else{label=11;break;}
 case 10: 
 $8=$313;
 var $329=$8;
 var $330=(($329)|0);
 $7=$330;
 var $331=$7;
 var $332=$331;
 $6=$332;
 var $333=$6;
 var $334=(($333)|0);
 var $335=(($334)|0);
 var $336=$335;
 var $337=(($336+8)|0);
 var $338=HEAP32[(($337)>>2)];
 var $352=$338;label=12;break;
 case 11: 
 $13=$313;
 var $340=$13;
 var $341=(($340)|0);
 $12=$341;
 var $342=$12;
 var $343=$342;
 $11=$343;
 var $344=$11;
 var $345=(($344)|0);
 var $346=(($345)|0);
 var $347=$346;
 var $348=(($347+1)|0);
 var $349=(($348)|0);
 $10=$349;
 var $350=$10;
 $9=$350;
 var $351=$9;
 var $352=$351;label=12;break;
 case 12: 
 var $352;
 $5=$352;
 var $353=$5;
 var $354=$67;
 $32=$354;
 var $355=$32;
 $31=$355;
 var $356=$31;
 $30=$356;
 var $357=$30;
 var $358=(($357)|0);
 $29=$358;
 var $359=$29;
 var $360=$359;
 $28=$360;
 var $361=$28;
 var $362=(($361)|0);
 var $363=(($362)|0);
 var $364=$363;
 var $365=(($364)|0);
 var $366=$365;
 var $367=HEAP8[($366)];
 var $368=($367&255);
 var $369=$368&1;
 var $370=($369|0)!=0;
 if($370){label=13;break;}else{label=14;break;}
 case 13: 
 $22=$356;
 var $372=$22;
 var $373=(($372)|0);
 $21=$373;
 var $374=$21;
 var $375=$374;
 $20=$375;
 var $376=$20;
 var $377=(($376)|0);
 var $378=(($377)|0);
 var $379=$378;
 var $380=(($379+8)|0);
 var $381=HEAP32[(($380)>>2)];
 var $395=$381;label=15;break;
 case 14: 
 $27=$356;
 var $383=$27;
 var $384=(($383)|0);
 $26=$384;
 var $385=$26;
 var $386=$385;
 $25=$386;
 var $387=$25;
 var $388=(($387)|0);
 var $389=(($388)|0);
 var $390=$389;
 var $391=(($390+1)|0);
 var $392=(($391)|0);
 $24=$392;
 var $393=$24;
 $23=$393;
 var $394=$23;
 var $395=$394;label=15;break;
 case 15: 
 var $395;
 $19=$395;
 var $396=$19;
 $39=$__lhs_sz_i_i_i1;
 $40=$__rhs_sz_i_i_i2;
 var $397=$39;
 var $398=$40;
 var $tmp_i_i_i_i7=$38;
 var $tmp1_i_i_i_i8=$41;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i7)]=HEAP8[($tmp1_i_i_i_i8)];
 $36=$397;
 $37=$398;
 var $399=$37;
 var $400=$36;
 $33=$38;
 $34=$399;
 $35=$400;
 var $401=$33;
 var $402=$34;
 var $403=HEAP32[(($402)>>2)];
 var $404=$35;
 var $405=HEAP32[(($404)>>2)];
 var $406=($403>>>0)<($405>>>0);
 if($406){label=16;break;}else{label=17;break;}
 case 16: 
 var $408=$37;
 var $411=$408;label=18;break;
 case 17: 
 var $410=$36;
 var $411=$410;label=18;break;
 case 18: 
 var $411;
 var $412=HEAP32[(($411)>>2)];
 $52=$353;
 $53=$396;
 $54=$412;
 var $413=$52;
 var $414=$53;
 var $415=$54;
 var $416=(function() { try { __THREW__ = 0; return _memcmp($413,$414,$415) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=21;break; }
 case 19: 
 $__result_i_i_i3=$416;
 var $417=$__result_i_i_i3;
 var $418=($417|0)!=0;
 if($418){label=20;break;}else{label=22;break;}
 case 20: 
 var $420=$__result_i_i_i3;
 $65=$420;
 label=27;break;
 case 21: 
 var $422$0 = ___cxa_find_matching_catch(-1, -1); var $422$1 = tempRet0;
 var $423=$422$0;
 $68=$423;
 var $424=$422$1;
 $69=$424;
 var $425=$68;
 ___cxa_call_unexpected($425);
 throw "Reached an unreachable!";
 case 22: 
 var $427=HEAP32[(($__lhs_sz_i_i_i1)>>2)];
 var $428=HEAP32[(($__rhs_sz_i_i_i2)>>2)];
 var $429=($427>>>0)<($428>>>0);
 if($429){label=23;break;}else{label=24;break;}
 case 23: 
 $65=-1;
 label=27;break;
 case 24: 
 var $432=HEAP32[(($__lhs_sz_i_i_i1)>>2)];
 var $433=HEAP32[(($__rhs_sz_i_i_i2)>>2)];
 var $434=($432>>>0)>($433>>>0);
 if($434){label=25;break;}else{label=26;break;}
 case 25: 
 $65=1;
 label=27;break;
 case 26: 
 $65=0;
 label=27;break;
 case 27: 
 var $437=$65;
 var $438=($437|0)<0;
 if($438){label=28;break;}else{label=32;break;}
 case 28: 
 var $440=$__nd;
 var $441=$440;
 var $442=(($441)|0);
 var $443=HEAP32[(($442)>>2)];
 $77=$180;
 $78=-1;
 var $444=$77;
 var $445=$78;
 $75=$444;
 $76=$445;
 var $446=$75;
 var $447=(($446)|0);
 HEAP32[(($447)>>2)]=0;
 $79=$180;
 var $448=$79;
 var $449=($443|0)!=0;
 if($449){label=29;break;}else{label=30;break;}
 case 29: 
 var $451=$__nd;
 var $452=$451;
 var $453=(($452)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=$454;
 $__nd=$455;
 label=31;break;
 case 30: 
 var $457=$__nd;
 var $458=$457;
 var $459=$177;
 HEAP32[(($459)>>2)]=$458;
 var $460=$177;
 var $461=HEAP32[(($460)>>2)];
 var $462=$461;
 var $463=(($462)|0);
 $175=$463;
 label=65;break;
 case 31: 
 label=63;break;
 case 32: 
 var $466=(($182)|0);
 $82=$466;
 var $467=$82;
 var $468=(($467+8)|0);
 $81=$468;
 var $469=$81;
 var $470=$469;
 $80=$470;
 var $471=$80;
 var $472=$471;
 $83=$472;
 var $473=$83;
 var $474=$473;
 var $475=$__nd;
 var $476=(($475+16)|0);
 var $477=(($476)|0);
 var $478=(($477)|0);
 var $479=$178;
 $156=$474;
 $157=$478;
 $158=$479;
 var $480=$156;
 var $481=$157;
 var $482=$158;
 $154=$481;
 $155=$482;
 var $483=$154;
 var $484=$155;
 $150=$483;
 $151=$484;
 var $485=$150;
 $148=$485;
 var $486=$148;
 $147=$486;
 var $487=$147;
 var $488=(($487)|0);
 $146=$488;
 var $489=$146;
 var $490=$489;
 $145=$490;
 var $491=$145;
 var $492=(($491)|0);
 var $493=(($492)|0);
 var $494=$493;
 var $495=(($494)|0);
 var $496=$495;
 var $497=HEAP8[($496)];
 var $498=($497&255);
 var $499=$498&1;
 var $500=($499|0)!=0;
 if($500){label=33;break;}else{label=34;break;}
 case 33: 
 $141=$486;
 var $502=$141;
 var $503=(($502)|0);
 $140=$503;
 var $504=$140;
 var $505=$504;
 $139=$505;
 var $506=$139;
 var $507=(($506)|0);
 var $508=(($507)|0);
 var $509=$508;
 var $510=(($509+4)|0);
 var $511=HEAP32[(($510)>>2)];
 var $526=$511;label=35;break;
 case 34: 
 $144=$486;
 var $513=$144;
 var $514=(($513)|0);
 $143=$514;
 var $515=$143;
 var $516=$515;
 $142=$516;
 var $517=$142;
 var $518=(($517)|0);
 var $519=(($518)|0);
 var $520=$519;
 var $521=(($520)|0);
 var $522=$521;
 var $523=HEAP8[($522)];
 var $524=($523&255);
 var $525=$524>>1;
 var $526=$525;label=35;break;
 case 35: 
 var $526;
 HEAP32[(($__lhs_sz_i_i_i)>>2)]=$526;
 var $527=$151;
 $135=$527;
 var $528=$135;
 $134=$528;
 var $529=$134;
 var $530=(($529)|0);
 $133=$530;
 var $531=$133;
 var $532=$531;
 $132=$532;
 var $533=$132;
 var $534=(($533)|0);
 var $535=(($534)|0);
 var $536=$535;
 var $537=(($536)|0);
 var $538=$537;
 var $539=HEAP8[($538)];
 var $540=($539&255);
 var $541=$540&1;
 var $542=($541|0)!=0;
 if($542){label=36;break;}else{label=37;break;}
 case 36: 
 $128=$528;
 var $544=$128;
 var $545=(($544)|0);
 $127=$545;
 var $546=$127;
 var $547=$546;
 $126=$547;
 var $548=$126;
 var $549=(($548)|0);
 var $550=(($549)|0);
 var $551=$550;
 var $552=(($551+4)|0);
 var $553=HEAP32[(($552)>>2)];
 var $568=$553;label=38;break;
 case 37: 
 $131=$528;
 var $555=$131;
 var $556=(($555)|0);
 $130=$556;
 var $557=$130;
 var $558=$557;
 $129=$558;
 var $559=$129;
 var $560=(($559)|0);
 var $561=(($560)|0);
 var $562=$561;
 var $563=(($562)|0);
 var $564=$563;
 var $565=HEAP8[($564)];
 var $566=($565&255);
 var $567=$566>>1;
 var $568=$567;label=38;break;
 case 38: 
 var $568;
 HEAP32[(($__rhs_sz_i_i_i)>>2)]=$568;
 $102=$485;
 var $569=$102;
 $101=$569;
 var $570=$101;
 $100=$570;
 var $571=$100;
 var $572=(($571)|0);
 $99=$572;
 var $573=$99;
 var $574=$573;
 $98=$574;
 var $575=$98;
 var $576=(($575)|0);
 var $577=(($576)|0);
 var $578=$577;
 var $579=(($578)|0);
 var $580=$579;
 var $581=HEAP8[($580)];
 var $582=($581&255);
 var $583=$582&1;
 var $584=($583|0)!=0;
 if($584){label=39;break;}else{label=40;break;}
 case 39: 
 $92=$570;
 var $586=$92;
 var $587=(($586)|0);
 $91=$587;
 var $588=$91;
 var $589=$588;
 $90=$589;
 var $590=$90;
 var $591=(($590)|0);
 var $592=(($591)|0);
 var $593=$592;
 var $594=(($593+8)|0);
 var $595=HEAP32[(($594)>>2)];
 var $609=$595;label=41;break;
 case 40: 
 $97=$570;
 var $597=$97;
 var $598=(($597)|0);
 $96=$598;
 var $599=$96;
 var $600=$599;
 $95=$600;
 var $601=$95;
 var $602=(($601)|0);
 var $603=(($602)|0);
 var $604=$603;
 var $605=(($604+1)|0);
 var $606=(($605)|0);
 $94=$606;
 var $607=$94;
 $93=$607;
 var $608=$93;
 var $609=$608;label=41;break;
 case 41: 
 var $609;
 $89=$609;
 var $610=$89;
 var $611=$151;
 $116=$611;
 var $612=$116;
 $115=$612;
 var $613=$115;
 $114=$613;
 var $614=$114;
 var $615=(($614)|0);
 $113=$615;
 var $616=$113;
 var $617=$616;
 $112=$617;
 var $618=$112;
 var $619=(($618)|0);
 var $620=(($619)|0);
 var $621=$620;
 var $622=(($621)|0);
 var $623=$622;
 var $624=HEAP8[($623)];
 var $625=($624&255);
 var $626=$625&1;
 var $627=($626|0)!=0;
 if($627){label=42;break;}else{label=43;break;}
 case 42: 
 $106=$613;
 var $629=$106;
 var $630=(($629)|0);
 $105=$630;
 var $631=$105;
 var $632=$631;
 $104=$632;
 var $633=$104;
 var $634=(($633)|0);
 var $635=(($634)|0);
 var $636=$635;
 var $637=(($636+8)|0);
 var $638=HEAP32[(($637)>>2)];
 var $652=$638;label=44;break;
 case 43: 
 $111=$613;
 var $640=$111;
 var $641=(($640)|0);
 $110=$641;
 var $642=$110;
 var $643=$642;
 $109=$643;
 var $644=$109;
 var $645=(($644)|0);
 var $646=(($645)|0);
 var $647=$646;
 var $648=(($647+1)|0);
 var $649=(($648)|0);
 $108=$649;
 var $650=$108;
 $107=$650;
 var $651=$107;
 var $652=$651;label=44;break;
 case 44: 
 var $652;
 $103=$652;
 var $653=$103;
 $123=$__lhs_sz_i_i_i;
 $124=$__rhs_sz_i_i_i;
 var $654=$123;
 var $655=$124;
 var $tmp_i_i_i_i=$122;
 var $tmp1_i_i_i_i=$125;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
 $120=$654;
 $121=$655;
 var $656=$121;
 var $657=$120;
 $117=$122;
 $118=$656;
 $119=$657;
 var $658=$117;
 var $659=$118;
 var $660=HEAP32[(($659)>>2)];
 var $661=$119;
 var $662=HEAP32[(($661)>>2)];
 var $663=($660>>>0)<($662>>>0);
 if($663){label=45;break;}else{label=46;break;}
 case 45: 
 var $665=$121;
 var $668=$665;label=47;break;
 case 46: 
 var $667=$120;
 var $668=$667;label=47;break;
 case 47: 
 var $668;
 var $669=HEAP32[(($668)>>2)];
 $136=$610;
 $137=$653;
 $138=$669;
 var $670=$136;
 var $671=$137;
 var $672=$138;
 var $673=(function() { try { __THREW__ = 0; return _memcmp($670,$671,$672) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=50;break; }
 case 48: 
 $__result_i_i_i=$673;
 var $674=$__result_i_i_i;
 var $675=($674|0)!=0;
 if($675){label=49;break;}else{label=51;break;}
 case 49: 
 var $677=$__result_i_i_i;
 $149=$677;
 label=56;break;
 case 50: 
 var $679$0 = ___cxa_find_matching_catch(-1, -1); var $679$1 = tempRet0;
 var $680=$679$0;
 $152=$680;
 var $681=$679$1;
 $153=$681;
 var $682=$152;
 ___cxa_call_unexpected($682);
 throw "Reached an unreachable!";
 case 51: 
 var $684=HEAP32[(($__lhs_sz_i_i_i)>>2)];
 var $685=HEAP32[(($__rhs_sz_i_i_i)>>2)];
 var $686=($684>>>0)<($685>>>0);
 if($686){label=52;break;}else{label=53;break;}
 case 52: 
 $149=-1;
 label=56;break;
 case 53: 
 var $689=HEAP32[(($__lhs_sz_i_i_i)>>2)];
 var $690=HEAP32[(($__rhs_sz_i_i_i)>>2)];
 var $691=($689>>>0)>($690>>>0);
 if($691){label=54;break;}else{label=55;break;}
 case 54: 
 $149=1;
 label=56;break;
 case 55: 
 $149=0;
 label=56;break;
 case 56: 
 var $694=$149;
 var $695=($694|0)<0;
 if($695){label=57;break;}else{label=61;break;}
 case 57: 
 var $697=$__nd;
 var $698=$697;
 var $699=(($698+4)|0);
 var $700=HEAP32[(($699)>>2)];
 $161=$181;
 $162=-1;
 var $701=$161;
 var $702=$162;
 $159=$701;
 $160=$702;
 var $703=$159;
 var $704=(($703)|0);
 HEAP32[(($704)>>2)]=0;
 $163=$181;
 var $705=$163;
 var $706=($700|0)!=0;
 if($706){label=58;break;}else{label=59;break;}
 case 58: 
 var $708=$__nd;
 var $709=$708;
 var $710=(($709+4)|0);
 var $711=HEAP32[(($710)>>2)];
 var $712=$711;
 $__nd=$712;
 label=60;break;
 case 59: 
 var $714=$__nd;
 var $715=$714;
 var $716=$177;
 HEAP32[(($716)>>2)]=$715;
 var $717=$177;
 var $718=HEAP32[(($717)>>2)];
 var $719=(($718+4)|0);
 $175=$719;
 label=65;break;
 case 60: 
 label=62;break;
 case 61: 
 var $722=$__nd;
 var $723=$722;
 var $724=$177;
 HEAP32[(($724)>>2)]=$723;
 var $725=$177;
 $175=$725;
 label=65;break;
 case 62: 
 label=63;break;
 case 63: 
 label=3;break;
 case 64: 
 var $729=(($182)|0);
 $168=$729;
 var $730=$168;
 var $731=(($730+4)|0);
 $167=$731;
 var $732=$167;
 var $733=$732;
 $166=$733;
 var $734=$166;
 var $735=(($734)|0);
 $165=$735;
 var $736=$165;
 $164=$736;
 var $737=$164;
 var $738=$737;
 var $739=$738;
 var $740=$739;
 var $741=$740;
 var $742=$177;
 HEAP32[(($742)>>2)]=$741;
 var $743=$177;
 var $744=HEAP32[(($743)>>2)];
 var $745=$744;
 var $746=(($745)|0);
 $175=$746;
 label=65;break;
 case 65: 
 var $748=$175;
 STACKTOP=sp;return $748;
  default: assert(0, "bad label: " + label);
 }

}

// WARNING: content after a branch in a label, line: 10944
// WARNING: content after a branch in a label, line: 10946
// WARNING: content after a branch in a label, line: 10947
// WARNING: content after a branch in a label, line: 10948
// WARNING: content after a branch in a label, line: 10949
// WARNING: content after a branch in a label, line: 10950
// WARNING: content after a branch in a label, line: 10951
// WARNING: content after a branch in a label, line: 10952
// WARNING: content after a branch in a label, line: 10953
// WARNING: content after a branch in a label, line: 10954
// WARNING: content after a branch in a label, line: 10955
// WARNING: content after a branch in a label, line: 10956
// WARNING: content after a branch in a label, line: 10957
// WARNING: content after a branch in a label, line: 10958
// WARNING: content after a branch in a label, line: 10959
// WARNING: content after a branch in a label, line: 10960
// WARNING: content after a branch in a label, line: 10961
// WARNING: content after a branch in a label, line: 10962
// WARNING: content after a branch in a label, line: 10963
// WARNING: content after a branch in a label, line: 10964
// WARNING: content after a branch in a label, line: 10965
// WARNING: content after a branch in a label, line: 10966
// WARNING: content after a branch in a label, line: 10967
// WARNING: content after a branch in a label, line: 10968
// WARNING: content after a branch in a label, line: 10969
// WARNING: content after a branch in a label, line: 10970
// WARNING: content after a branch in a label, line: 10971
// WARNING: content after a branch in a label, line: 10972
// WARNING: content after a branch in a label, line: 10973
// WARNING: content after a branch in a label, line: 10974
// WARNING: content after a branch in a label, line: 10975
// WARNING: content after a branch in a label, line: 10976
// WARNING: content after a branch in a label, line: 10977

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEE25__construct_node_with_keyERSA_($agg_result,$this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+664)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8=sp;
 var $9;
 var $10;
 var $11=(sp)+(8);
 var $12=(sp)+(16);
 var $13;
 var $14;
 var $15=(sp)+(24);
 var $16;
 var $17;
 var $18=(sp)+(32);
 var $19=(sp)+(40);
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $__tmp_i_i_i36;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $__t_i_i_i;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51=(sp)+(48);
 var $52=(sp)+(56);
 var $53;
 var $54;
 var $55=(sp)+(64);
 var $56=(sp)+(72);
 var $__t21_i_i_i27=(sp)+(80);
 var $57;
 var $58;
 var $59=(sp)+(88);
 var $60;
 var $61;
 var $62=(sp)+(96);
 var $__u1_i=(sp)+(104);
 var $63;
 var $64=(sp)+(112);
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77=(sp)+(120);
 var $78;
 var $79;
 var $80=(sp)+(128);
 var $81=(sp)+(136);
 var $82;
 var $83;
 var $84=(sp)+(144);
 var $85;
 var $86;
 var $87=(sp)+(152);
 var $88=(sp)+(160);
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $__tmp_i_i_i15_i;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $__t_i_i_i4_i;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120=(sp)+(168);
 var $121=(sp)+(176);
 var $122;
 var $123;
 var $124=(sp)+(184);
 var $125=(sp)+(192);
 var $__t21_i_i_i5_i=(sp)+(200);
 var $126;
 var $127;
 var $128=(sp)+(208);
 var $129;
 var $130;
 var $131=(sp)+(216);
 var $__u1_i6_i=(sp)+(224);
 var $132;
 var $133=(sp)+(232);
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146=(sp)+(240);
 var $147;
 var $148;
 var $149=(sp)+(248);
 var $150=(sp)+(256);
 var $151;
 var $152;
 var $153=(sp)+(264);
 var $154;
 var $155;
 var $156=(sp)+(272);
 var $157=(sp)+(280);
 var $158;
 var $159;
 var $160;
 var $161;
 var $162;
 var $163;
 var $164;
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $170;
 var $171;
 var $172;
 var $__tmp_i_i_i_i;
 var $173;
 var $174;
 var $175;
 var $176;
 var $177;
 var $178;
 var $179;
 var $__t_i_i_i_i;
 var $180;
 var $181;
 var $182;
 var $183;
 var $184;
 var $185;
 var $186;
 var $187;
 var $188;
 var $189=(sp)+(288);
 var $190=(sp)+(296);
 var $191;
 var $192;
 var $193=(sp)+(304);
 var $194=(sp)+(312);
 var $__t21_i_i_i_i=(sp)+(320);
 var $195;
 var $196;
 var $197=(sp)+(328);
 var $198;
 var $199;
 var $200=(sp)+(336);
 var $__u1_i_i=(sp)+(344);
 var $201;
 var $202=(sp)+(352);
 var $203;
 var $204;
 var $205;
 var $206;
 var $207;
 var $208=(sp)+(360);
 var $209=(sp)+(368);
 var $210=(sp)+(384);
 var $211;
 var $212;
 var $213;
 var $214;
 var $215;
 var $216;
 var $217;
 var $218;
 var $219;
 var $220;
 var $221;
 var $222;
 var $223;
 var $224;
 var $225=(sp)+(392);
 var $226;
 var $227;
 var $228=(sp)+(400);
 var $229=(sp)+(408);
 var $230;
 var $231;
 var $232=(sp)+(416);
 var $233;
 var $234;
 var $235=(sp)+(424);
 var $236=(sp)+(432);
 var $237;
 var $238;
 var $239;
 var $240;
 var $241;
 var $242;
 var $243;
 var $244;
 var $245;
 var $246;
 var $247;
 var $248;
 var $249;
 var $250;
 var $251;
 var $__tmp_i_i_i10;
 var $252;
 var $253;
 var $254;
 var $255;
 var $256;
 var $257;
 var $258;
 var $259;
 var $260;
 var $261;
 var $262;
 var $263;
 var $264;
 var $265;
 var $266;
 var $267;
 var $268;
 var $269;
 var $270;
 var $271=(sp)+(440);
 var $272;
 var $273;
 var $274=(sp)+(448);
 var $275=(sp)+(456);
 var $276;
 var $277;
 var $278=(sp)+(464);
 var $279;
 var $280;
 var $281=(sp)+(472);
 var $282=(sp)+(480);
 var $283;
 var $284;
 var $285;
 var $286;
 var $287;
 var $288;
 var $289;
 var $290;
 var $291;
 var $292;
 var $293;
 var $294;
 var $295;
 var $296;
 var $297;
 var $__tmp_i_i_i2;
 var $298;
 var $299;
 var $300;
 var $301;
 var $302;
 var $303;
 var $304;
 var $305;
 var $306;
 var $307;
 var $308;
 var $309=(sp)+(488);
 var $310=(sp)+(496);
 var $311;
 var $312;
 var $313=(sp)+(504);
 var $314=(sp)+(512);
 var $__t21_i_i_i=(sp)+(520);
 var $315;
 var $316;
 var $317=(sp)+(528);
 var $318;
 var $319;
 var $320=(sp)+(536);
 var $321=(sp)+(544);
 var $__d1_i=(sp)+(552);
 var $322;
 var $323;
 var $324=(sp)+(560);
 var $325;
 var $326;
 var $327;
 var $328;
 var $329;
 var $330;
 var $331;
 var $332=(sp)+(568);
 var $333;
 var $334;
 var $335=(sp)+(576);
 var $336=(sp)+(584);
 var $337;
 var $338;
 var $339=(sp)+(592);
 var $340;
 var $341;
 var $342=(sp)+(600);
 var $343=(sp)+(608);
 var $344;
 var $345;
 var $346;
 var $347;
 var $348;
 var $349;
 var $350;
 var $351;
 var $352;
 var $353;
 var $354;
 var $355;
 var $356;
 var $357;
 var $358;
 var $__tmp_i_i_i;
 var $359;
 var $360;
 var $361;
 var $362;
 var $363;
 var $364;
 var $365;
 var $366;
 var $367;
 var $368;
 var $369;
 var $370;
 var $371;
 var $372;
 var $373;
 var $374;
 var $__na;
 var $__h=(sp)+(616);
 var $375=(sp)+(632);
 var $376;
 var $377;
 var $378=(sp)+(640);
 var $379=(sp)+(648);
 var $380;
 $373=$this;
 $374=$__k;
 var $381=$373;
 var $382=(($381)|0);
 $372=$382;
 var $383=$372;
 var $384=(($383+4)|0);
 $371=$384;
 var $385=$371;
 var $386=$385;
 $370=$386;
 var $387=$370;
 var $388=$387;
 $__na=$388;
 var $389=$__na;
 $368=$389;
 $369=1;
 var $390=$368;
 var $391=$369;
 $365=$390;
 $366=$391;
 $367=0;
 var $392=$365;
 var $393=$366;
 var $394=($393<<5);
 var $395=__Znwj($394);
 var $396=$395;
 var $397=$__na;
 $363=$375;
 $364=$397;
 var $398=$363;
 var $399=$364;
 $361=$398;
 $362=$399;
 var $400=$361;
 var $401=(($400)|0);
 var $402=$362;
 HEAP32[(($401)>>2)]=$402;
 var $403=(($400+4)|0);
 HEAP8[($403)]=0;
 var $404=(($400+5)|0);
 HEAP8[($404)]=0;
 var $tmp=$324;
 var $tmp1=$375;
 assert(8 % 1 === 0);(_memcpy($tmp, $tmp1, 8)|0);
 $322=$__h;
 $323=$396;
 var $405=$322;
 var $406=$323;
 var $tmp_i=$__d1_i;
 var $tmp2_i=$324;
 assert(8 % 1 === 0);(_memcpy($tmp_i, $tmp2_i, 8)|0);
 $319=$405;
 HEAP32[(($320)>>2)]=$406;
 var $407=$319;
 var $408=(($407)|0);
 $318=$320;
 var $409=$318;
 var $410=HEAP32[(($409)>>2)];
 $304=$__d1_i;
 var $411=$304;
 var $412=$321;
 var $413=$411;
 assert(8 % 1 === 0);HEAP32[(($412)>>2)]=HEAP32[(($413)>>2)];HEAP32[((($412)+(4))>>2)]=HEAP32[((($413)+(4))>>2)];
 var $tmp_i_i=$317;
 var $tmp1_i_i=$321;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp1_i_i, 8)|0);
 $315=$408;
 $316=$410;
 var $414=$315;
 var $415=$316;
 var $tmp_i_i_i=$__t21_i_i_i;
 var $tmp2_i_i_i=$317;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp2_i_i_i, 8)|0);
 $312=$414;
 HEAP32[(($313)>>2)]=$415;
 var $416=$312;
 var $417=$416;
 $311=$313;
 var $418=$311;
 var $419=HEAP32[(($418)>>2)];
 $305=$__t21_i_i_i;
 var $420=$305;
 var $421=$314;
 var $422=$420;
 assert(8 % 1 === 0);HEAP32[(($421)>>2)]=HEAP32[(($422)>>2)];HEAP32[((($421)+(4))>>2)]=HEAP32[((($422)+(4))>>2)];
 var $tmp_i_i_i_i=$310;
 var $tmp1_i_i_i_i=$314;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp1_i_i_i_i, 8)|0);
 $308=$417;
 HEAP32[(($309)>>2)]=$419;
 var $423=$308;
 var $424=(($423)|0);
 $307=$309;
 var $425=$307;
 var $426=HEAP32[(($425)>>2)];
 HEAP32[(($424)>>2)]=$426;
 var $427=(($423+4)|0);
 $306=$310;
 var $428=$306;
 var $429=$427;
 var $430=$428;
 assert(8 % 1 === 0);HEAP32[(($429)>>2)]=HEAP32[(($430)>>2)];HEAP32[((($429)+(4))>>2)]=HEAP32[((($430)+(4))>>2)];
 var $431=$__na;
 $303=$__h;
 var $432=$303;
 var $433=(($432)|0);
 $302=$433;
 var $434=$302;
 var $435=$434;
 $301=$435;
 var $436=$301;
 var $437=(($436)|0);
 var $438=HEAP32[(($437)>>2)];
 var $439=(($438+16)|0);
 var $440=(($439)|0);
 var $441=(($440)|0);
 $300=$441;
 var $442=$300;
 var $443=$442;
 var $444=$443;
 var $445=$374;
 $261=$431;
 $262=$444;
 $263=$445;
 var $446=$262;
 var $447=$446;
 var $448=($447|0)==0;
 if($448){var $452=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $450=$447;
 var $451=$263;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($450,$451) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $452=$450;label=4;break;
 case 4: 
 var $452;
 label=5;break;
 case 5: 
 $260=$__h;
 var $454=$260;
 var $455=(($454)|0);
 $259=$455;
 var $456=$259;
 var $457=$456;
 $258=$457;
 var $458=$258;
 var $459=(($458+4)|0);
 var $460=(($459+4)|0);
 HEAP8[($460)]=1;
 var $461=$__na;
 $257=$__h;
 var $462=$257;
 var $463=(($462)|0);
 $256=$463;
 var $464=$256;
 var $465=$464;
 $255=$465;
 var $466=$255;
 var $467=(($466)|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=(($468+16)|0);
 var $470=(($469)|0);
 var $471=(($470+12)|0);
 $254=$471;
 var $472=$254;
 var $473=$472;
 var $474=$473;
 $216=$461;
 $217=$474;
 var $475=$217;
 var $476=$475;
 var $477=($476|0)==0;
 if($477){var $480=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $479=$476;
 HEAP32[(($479)>>2)]=0;
 var $480=$479;label=7;break;
 case 7: 
 var $480;
 label=8;break;
 case 8: 
 $215=$__h;
 var $482=$215;
 var $483=(($482)|0);
 $214=$483;
 var $484=$214;
 var $485=$484;
 $213=$485;
 var $486=$213;
 var $487=(($486+4)|0);
 var $488=(($487+5)|0);
 HEAP8[($488)]=1;
 $207=$__h;
 var $489=$207;
 $205=$210;
 $206=$489;
 var $490=$205;
 var $491=$206;
 $203=$490;
 $204=$491;
 var $492=$203;
 var $493=(($492)|0);
 var $494=$204;
 HEAP32[(($493)>>2)]=$494;
 var $tmp_i18=$202;
 var $tmp1_i=$210;
 assert(4 % 1 === 0);HEAP8[($tmp_i18)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i18)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i18)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i18)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $201=$209;
 var $495=$201;
 var $tmp_i_i19=$__u1_i_i;
 var $tmp2_i_i=$202;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i19)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i19)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i19)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i19)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $199=$495;
 var $496=$199;
 var $497=(($496)|0);
 $198=$__u1_i_i;
 var $498=$198;
 var $499=(($498)|0);
 var $500=HEAP32[(($499)>>2)];
 $179=$500;
 var $501=$179;
 var $502=(($501)|0);
 $178=$502;
 var $503=$178;
 var $504=$503;
 $177=$504;
 var $505=$177;
 var $506=(($505)|0);
 var $507=HEAP32[(($506)>>2)];
 $__t_i_i_i_i=$507;
 var $508=(($501)|0);
 $176=$508;
 var $509=$176;
 var $510=$509;
 $175=$510;
 var $511=$175;
 var $512=(($511)|0);
 HEAP32[(($512)>>2)]=0;
 var $513=$__t_i_i_i_i;
 $180=$__u1_i_i;
 var $514=$180;
 var $515=(($514)|0);
 var $516=HEAP32[(($515)>>2)];
 $183=$516;
 var $517=$183;
 var $518=(($517)|0);
 $182=$518;
 var $519=$182;
 var $520=$519;
 $181=$520;
 var $521=$181;
 var $522=(($521+4)|0);
 $184=$522;
 var $523=$184;
 var $524=$200;
 var $525=$523;
 assert(8 % 1 === 0);HEAP32[(($524)>>2)]=HEAP32[(($525)>>2)];HEAP32[((($524)+(4))>>2)]=HEAP32[((($525)+(4))>>2)];
 var $tmp_i_i_i20=$197;
 var $tmp1_i_i_i=$200;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i20, $tmp1_i_i_i, 8)|0);
 $195=$497;
 $196=$513;
 var $526=$195;
 var $527=$196;
 var $tmp_i_i_i_i21=$__t21_i_i_i_i;
 var $tmp2_i_i_i_i=$197;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i21, $tmp2_i_i_i_i, 8)|0);
 $192=$526;
 HEAP32[(($193)>>2)]=$527;
 var $528=$192;
 var $529=$528;
 $191=$193;
 var $530=$191;
 var $531=HEAP32[(($530)>>2)];
 $185=$__t21_i_i_i_i;
 var $532=$185;
 var $533=$194;
 var $534=$532;
 assert(8 % 1 === 0);HEAP32[(($533)>>2)]=HEAP32[(($534)>>2)];HEAP32[((($533)+(4))>>2)]=HEAP32[((($534)+(4))>>2)];
 var $tmp_i_i_i_i_i22=$190;
 var $tmp1_i_i_i_i_i23=$194;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i_i22, $tmp1_i_i_i_i_i23, 8)|0);
 $188=$529;
 HEAP32[(($189)>>2)]=$531;
 var $535=$188;
 var $536=(($535)|0);
 $187=$189;
 var $537=$187;
 var $538=HEAP32[(($537)>>2)];
 HEAP32[(($536)>>2)]=$538;
 var $539=(($535+4)|0);
 $186=$190;
 var $540=$186;
 var $541=$539;
 var $542=$540;
 assert(8 % 1 === 0);HEAP32[(($541)>>2)]=HEAP32[(($542)>>2)];HEAP32[((($541)+(4))>>2)]=HEAP32[((($542)+(4))>>2)];
 $138=$209;
 var $543=$138;
 $136=$208;
 $137=$543;
 var $544=$136;
 var $545=$137;
 $134=$544;
 $135=$545;
 var $546=$134;
 var $547=(($546)|0);
 var $548=$135;
 HEAP32[(($547)>>2)]=$548;
 var $tmp2_i24=$133;
 var $tmp3_i=$208;
 assert(4 % 1 === 0);HEAP8[($tmp2_i24)]=HEAP8[($tmp3_i)];HEAP8[((($tmp2_i24)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp2_i24)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp2_i24)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
 $132=$379;
 var $549=$132;
 var $tmp_i7_i=$__u1_i6_i;
 var $tmp2_i8_i=$133;
 assert(4 % 1 === 0);HEAP8[($tmp_i7_i)]=HEAP8[($tmp2_i8_i)];HEAP8[((($tmp_i7_i)+(1))|0)]=HEAP8[((($tmp2_i8_i)+(1))|0)];HEAP8[((($tmp_i7_i)+(2))|0)]=HEAP8[((($tmp2_i8_i)+(2))|0)];HEAP8[((($tmp_i7_i)+(3))|0)]=HEAP8[((($tmp2_i8_i)+(3))|0)];
 $130=$549;
 var $550=$130;
 var $551=(($550)|0);
 $129=$__u1_i6_i;
 var $552=$129;
 var $553=(($552)|0);
 var $554=HEAP32[(($553)>>2)];
 $110=$554;
 var $555=$110;
 var $556=(($555)|0);
 $109=$556;
 var $557=$109;
 var $558=$557;
 $108=$558;
 var $559=$108;
 var $560=(($559)|0);
 var $561=HEAP32[(($560)>>2)];
 $__t_i_i_i4_i=$561;
 var $562=(($555)|0);
 $107=$562;
 var $563=$107;
 var $564=$563;
 $106=$564;
 var $565=$106;
 var $566=(($565)|0);
 HEAP32[(($566)>>2)]=0;
 var $567=$__t_i_i_i4_i;
 $111=$__u1_i6_i;
 var $568=$111;
 var $569=(($568)|0);
 var $570=HEAP32[(($569)>>2)];
 $114=$570;
 var $571=$114;
 var $572=(($571)|0);
 $113=$572;
 var $573=$113;
 var $574=$573;
 $112=$574;
 var $575=$112;
 var $576=(($575+4)|0);
 $115=$576;
 var $577=$115;
 var $578=$131;
 var $579=$577;
 assert(8 % 1 === 0);HEAP32[(($578)>>2)]=HEAP32[(($579)>>2)];HEAP32[((($578)+(4))>>2)]=HEAP32[((($579)+(4))>>2)];
 var $tmp_i_i9_i=$128;
 var $tmp1_i_i10_i=$131;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i9_i, $tmp1_i_i10_i, 8)|0);
 $126=$551;
 $127=$567;
 var $580=$126;
 var $581=$127;
 var $tmp_i_i_i11_i=$__t21_i_i_i5_i;
 var $tmp2_i_i_i12_i=$128;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i11_i, $tmp2_i_i_i12_i, 8)|0);
 $123=$580;
 HEAP32[(($124)>>2)]=$581;
 var $582=$123;
 var $583=$582;
 $122=$124;
 var $584=$122;
 var $585=HEAP32[(($584)>>2)];
 $116=$__t21_i_i_i5_i;
 var $586=$116;
 var $587=$125;
 var $588=$586;
 assert(8 % 1 === 0);HEAP32[(($587)>>2)]=HEAP32[(($588)>>2)];HEAP32[((($587)+(4))>>2)]=HEAP32[((($588)+(4))>>2)];
 var $tmp_i_i_i_i13_i=$121;
 var $tmp1_i_i_i_i14_i=$125;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i13_i, $tmp1_i_i_i_i14_i, 8)|0);
 $119=$583;
 HEAP32[(($120)>>2)]=$585;
 var $589=$119;
 var $590=(($589)|0);
 $118=$120;
 var $591=$118;
 var $592=HEAP32[(($591)>>2)];
 HEAP32[(($590)>>2)]=$592;
 var $593=(($589+4)|0);
 $117=$121;
 var $594=$117;
 var $595=$593;
 var $596=$594;
 assert(8 % 1 === 0);HEAP32[(($595)>>2)]=HEAP32[(($596)>>2)];HEAP32[((($595)+(4))>>2)]=HEAP32[((($596)+(4))>>2)];
 $105=$209;
 var $597=$105;
 $104=$597;
 var $598=$104;
 $102=$598;
 $103=0;
 var $599=$102;
 var $600=(($599)|0);
 $101=$600;
 var $601=$101;
 var $602=$601;
 $100=$602;
 var $603=$100;
 var $604=(($603)|0);
 var $605=HEAP32[(($604)>>2)];
 $__tmp_i_i_i15_i=$605;
 var $606=$103;
 var $607=(($599)|0);
 $73=$607;
 var $608=$73;
 var $609=$608;
 $72=$609;
 var $610=$72;
 var $611=(($610)|0);
 HEAP32[(($611)>>2)]=$606;
 var $612=$__tmp_i_i_i15_i;
 var $613=($612|0)!=0;
 if($613){label=9;break;}else{label=18;break;}
 case 9: 
 var $615=(($599)|0);
 $71=$615;
 var $616=$71;
 var $617=$616;
 $70=$617;
 var $618=$70;
 var $619=(($618+4)|0);
 var $620=$__tmp_i_i_i15_i;
 $96=$619;
 $97=$620;
 var $621=$96;
 var $622=(($621+5)|0);
 var $623=HEAP8[($622)];
 var $624=(($623)&1);
 if($624){label=10;break;}else{label=12;break;}
 case 10: 
 var $626=(($621)|0);
 var $627=HEAP32[(($626)>>2)];
 var $628=$97;
 var $629=(($628+16)|0);
 var $630=(($629)|0);
 var $631=(($630+12)|0);
 $95=$631;
 var $632=$95;
 var $633=$632;
 var $634=$633;
 $85=$627;
 $86=$634;
 var $635=$88;
 var $636=$85;
 var $637=$86;
 var $tmp_i_i_i_i_i16_i=$84;
 var $tmp1_i_i_i_i_i17_i=$87;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i16_i)]=HEAP8[($tmp1_i_i_i_i_i17_i)];
 $82=$636;
 $83=$637;
 var $638=$83;
 label=12;break;
 case 11: 
 var $640$0 = ___cxa_find_matching_catch(-1, -1); var $640$1 = tempRet0;
 var $641=$640$0;
 $98=$641;
 var $642=$640$1;
 $99=$642;
 var $643=$98;
 ___cxa_call_unexpected($643);
 throw "Reached an unreachable!";
 case 12: 
 var $645=(($621+4)|0);
 var $646=HEAP8[($645)];
 var $647=(($646)&1);
 if($647){label=13;break;}else{label=15;break;}
 case 13: 
 var $649=(($621)|0);
 var $650=HEAP32[(($649)>>2)];
 var $651=$97;
 var $652=(($651+16)|0);
 var $653=(($652)|0);
 var $654=(($653)|0);
 $74=$654;
 var $655=$74;
 var $656=$655;
 var $657=$656;
 $78=$650;
 $79=$657;
 var $658=$81;
 var $659=$78;
 var $660=$79;
 var $tmp_i1_i_i_i_i18_i=$77;
 var $tmp1_i2_i_i_i_i19_i=$80;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i18_i)]=HEAP8[($tmp1_i2_i_i_i_i19_i)];
 $75=$659;
 $76=$660;
 var $661=$76;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($661) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=11;break; }
 case 14: 
 label=15;break;
 case 15: 
 var $663=$97;
 var $664=($663|0)!=0;
 if($664){label=16;break;}else{label=17;break;}
 case 16: 
 var $666=(($621)|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=$97;
 $92=$667;
 $93=$668;
 $94=1;
 var $669=$92;
 var $670=$93;
 var $671=$94;
 $89=$669;
 $90=$670;
 $91=$671;
 var $672=$89;
 var $673=$90;
 var $674=$673;
 __ZdlPv($674);
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 $69=$379;
 var $676=$69;
 $67=$378;
 $68=$676;
 var $677=$67;
 var $678=$68;
 $65=$677;
 $66=$678;
 var $679=$65;
 var $680=(($679)|0);
 var $681=$66;
 HEAP32[(($680)>>2)]=$681;
 label=20;break;
 case 20: 
 var $tmp25=$64;
 var $tmp26=$378;
 assert(4 % 1 === 0);HEAP8[($tmp25)]=HEAP8[($tmp26)];HEAP8[((($tmp25)+(1))|0)]=HEAP8[((($tmp26)+(1))|0)];HEAP8[((($tmp25)+(2))|0)]=HEAP8[((($tmp26)+(2))|0)];HEAP8[((($tmp25)+(3))|0)]=HEAP8[((($tmp26)+(3))|0)];
 $63=$agg_result;
 var $683=$63;
 var $tmp_i28=$__u1_i;
 var $tmp2_i29=$64;
 assert(4 % 1 === 0);HEAP8[($tmp_i28)]=HEAP8[($tmp2_i29)];HEAP8[((($tmp_i28)+(1))|0)]=HEAP8[((($tmp2_i29)+(1))|0)];HEAP8[((($tmp_i28)+(2))|0)]=HEAP8[((($tmp2_i29)+(2))|0)];HEAP8[((($tmp_i28)+(3))|0)]=HEAP8[((($tmp2_i29)+(3))|0)];
 $61=$683;
 var $684=$61;
 var $685=(($684)|0);
 $60=$__u1_i;
 var $686=$60;
 var $687=(($686)|0);
 var $688=HEAP32[(($687)>>2)];
 $41=$688;
 var $689=$41;
 var $690=(($689)|0);
 $40=$690;
 var $691=$40;
 var $692=$691;
 $39=$692;
 var $693=$39;
 var $694=(($693)|0);
 var $695=HEAP32[(($694)>>2)];
 $__t_i_i_i=$695;
 var $696=(($689)|0);
 $38=$696;
 var $697=$38;
 var $698=$697;
 $37=$698;
 var $699=$37;
 var $700=(($699)|0);
 HEAP32[(($700)>>2)]=0;
 var $701=$__t_i_i_i;
 $42=$__u1_i;
 var $702=$42;
 var $703=(($702)|0);
 var $704=HEAP32[(($703)>>2)];
 $45=$704;
 var $705=$45;
 var $706=(($705)|0);
 $44=$706;
 var $707=$44;
 var $708=$707;
 $43=$708;
 var $709=$43;
 var $710=(($709+4)|0);
 $46=$710;
 var $711=$46;
 var $712=$62;
 var $713=$711;
 assert(8 % 1 === 0);HEAP32[(($712)>>2)]=HEAP32[(($713)>>2)];HEAP32[((($712)+(4))>>2)]=HEAP32[((($713)+(4))>>2)];
 var $tmp_i_i30=$59;
 var $tmp1_i_i31=$62;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i30, $tmp1_i_i31, 8)|0);
 $57=$685;
 $58=$701;
 var $714=$57;
 var $715=$58;
 var $tmp_i_i_i32=$__t21_i_i_i27;
 var $tmp2_i_i_i33=$59;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i32, $tmp2_i_i_i33, 8)|0);
 $54=$714;
 HEAP32[(($55)>>2)]=$715;
 var $716=$54;
 var $717=$716;
 $53=$55;
 var $718=$53;
 var $719=HEAP32[(($718)>>2)];
 $47=$__t21_i_i_i27;
 var $720=$47;
 var $721=$56;
 var $722=$720;
 assert(8 % 1 === 0);HEAP32[(($721)>>2)]=HEAP32[(($722)>>2)];HEAP32[((($721)+(4))>>2)]=HEAP32[((($722)+(4))>>2)];
 var $tmp_i_i_i_i34=$52;
 var $tmp1_i_i_i_i35=$56;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i34, $tmp1_i_i_i_i35, 8)|0);
 $50=$717;
 HEAP32[(($51)>>2)]=$719;
 var $723=$50;
 var $724=(($723)|0);
 $49=$51;
 var $725=$49;
 var $726=HEAP32[(($725)>>2)];
 HEAP32[(($724)>>2)]=$726;
 var $727=(($723+4)|0);
 $48=$52;
 var $728=$48;
 var $729=$727;
 var $730=$728;
 assert(8 % 1 === 0);HEAP32[(($729)>>2)]=HEAP32[(($730)>>2)];HEAP32[((($729)+(4))>>2)]=HEAP32[((($730)+(4))>>2)];
 label=21;break;
 case 21: 
 $36=$379;
 var $732=$36;
 $35=$732;
 var $733=$35;
 $33=$733;
 $34=0;
 var $734=$33;
 var $735=(($734)|0);
 $32=$735;
 var $736=$32;
 var $737=$736;
 $31=$737;
 var $738=$31;
 var $739=(($738)|0);
 var $740=HEAP32[(($739)>>2)];
 $__tmp_i_i_i36=$740;
 var $741=$34;
 var $742=(($734)|0);
 $4=$742;
 var $743=$4;
 var $744=$743;
 $3=$744;
 var $745=$3;
 var $746=(($745)|0);
 HEAP32[(($746)>>2)]=$741;
 var $747=$__tmp_i_i_i36;
 var $748=($747|0)!=0;
 if($748){label=22;break;}else{label=31;break;}
 case 22: 
 var $750=(($734)|0);
 $2=$750;
 var $751=$2;
 var $752=$751;
 $1=$752;
 var $753=$1;
 var $754=(($753+4)|0);
 var $755=$__tmp_i_i_i36;
 $27=$754;
 $28=$755;
 var $756=$27;
 var $757=(($756+5)|0);
 var $758=HEAP8[($757)];
 var $759=(($758)&1);
 if($759){label=23;break;}else{label=25;break;}
 case 23: 
 var $761=(($756)|0);
 var $762=HEAP32[(($761)>>2)];
 var $763=$28;
 var $764=(($763+16)|0);
 var $765=(($764)|0);
 var $766=(($765+12)|0);
 $26=$766;
 var $767=$26;
 var $768=$767;
 var $769=$768;
 $16=$762;
 $17=$769;
 var $770=$19;
 var $771=$16;
 var $772=$17;
 var $tmp_i_i_i_i_i37=$15;
 var $tmp1_i_i_i_i_i38=$18;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i37)]=HEAP8[($tmp1_i_i_i_i_i38)];
 $13=$771;
 $14=$772;
 var $773=$14;
 label=25;break;
 case 24: 
 var $775$0 = ___cxa_find_matching_catch(-1, -1); var $775$1 = tempRet0;
 var $776=$775$0;
 $29=$776;
 var $777=$775$1;
 $30=$777;
 var $778=$29;
 ___cxa_call_unexpected($778);
 throw "Reached an unreachable!";
 case 25: 
 var $780=(($756+4)|0);
 var $781=HEAP8[($780)];
 var $782=(($781)&1);
 if($782){label=26;break;}else{label=28;break;}
 case 26: 
 var $784=(($756)|0);
 var $785=HEAP32[(($784)>>2)];
 var $786=$28;
 var $787=(($786+16)|0);
 var $788=(($787)|0);
 var $789=(($788)|0);
 $5=$789;
 var $790=$5;
 var $791=$790;
 var $792=$791;
 $9=$785;
 $10=$792;
 var $793=$12;
 var $794=$9;
 var $795=$10;
 var $tmp_i1_i_i_i_i39=$8;
 var $tmp1_i2_i_i_i_i40=$11;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i39)]=HEAP8[($tmp1_i2_i_i_i_i40)];
 $6=$794;
 $7=$795;
 var $796=$7;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($796) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=24;break; }
 case 27: 
 label=28;break;
 case 28: 
 var $798=$28;
 var $799=($798|0)!=0;
 if($799){label=29;break;}else{label=30;break;}
 case 29: 
 var $801=(($756)|0);
 var $802=HEAP32[(($801)>>2)];
 var $803=$28;
 $23=$802;
 $24=$803;
 $25=1;
 var $804=$23;
 var $805=$24;
 var $806=$25;
 $20=$804;
 $21=$805;
 $22=$806;
 var $807=$20;
 var $808=$21;
 var $809=$808;
 __ZdlPv($809);
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 $380=1;
 $253=$__h;
 var $811=$253;
 $252=$811;
 var $812=$252;
 $250=$812;
 $251=0;
 var $813=$250;
 var $814=(($813)|0);
 $249=$814;
 var $815=$249;
 var $816=$815;
 $248=$816;
 var $817=$248;
 var $818=(($817)|0);
 var $819=HEAP32[(($818)>>2)];
 $__tmp_i_i_i10=$819;
 var $820=$251;
 var $821=(($813)|0);
 $221=$821;
 var $822=$221;
 var $823=$822;
 $220=$823;
 var $824=$220;
 var $825=(($824)|0);
 HEAP32[(($825)>>2)]=$820;
 var $826=$__tmp_i_i_i10;
 var $827=($826|0)!=0;
 if($827){label=33;break;}else{label=42;break;}
 case 33: 
 var $829=(($813)|0);
 $219=$829;
 var $830=$219;
 var $831=$830;
 $218=$831;
 var $832=$218;
 var $833=(($832+4)|0);
 var $834=$__tmp_i_i_i10;
 $244=$833;
 $245=$834;
 var $835=$244;
 var $836=(($835+5)|0);
 var $837=HEAP8[($836)];
 var $838=(($837)&1);
 if($838){label=34;break;}else{label=36;break;}
 case 34: 
 var $840=(($835)|0);
 var $841=HEAP32[(($840)>>2)];
 var $842=$245;
 var $843=(($842+16)|0);
 var $844=(($843)|0);
 var $845=(($844+12)|0);
 $243=$845;
 var $846=$243;
 var $847=$846;
 var $848=$847;
 $233=$841;
 $234=$848;
 var $849=$236;
 var $850=$233;
 var $851=$234;
 var $tmp_i_i_i_i_i11=$232;
 var $tmp1_i_i_i_i_i12=$235;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i11)]=HEAP8[($tmp1_i_i_i_i_i12)];
 $230=$850;
 $231=$851;
 var $852=$231;
 label=36;break;
 case 35: 
 var $854$0 = ___cxa_find_matching_catch(-1, -1); var $854$1 = tempRet0;
 var $855=$854$0;
 $246=$855;
 var $856=$854$1;
 $247=$856;
 var $857=$246;
 ___cxa_call_unexpected($857);
 throw "Reached an unreachable!";
 case 36: 
 var $859=(($835+4)|0);
 var $860=HEAP8[($859)];
 var $861=(($860)&1);
 if($861){label=37;break;}else{label=39;break;}
 case 37: 
 var $863=(($835)|0);
 var $864=HEAP32[(($863)>>2)];
 var $865=$245;
 var $866=(($865+16)|0);
 var $867=(($866)|0);
 var $868=(($867)|0);
 $222=$868;
 var $869=$222;
 var $870=$869;
 var $871=$870;
 $226=$864;
 $227=$871;
 var $872=$229;
 var $873=$226;
 var $874=$227;
 var $tmp_i1_i_i_i_i13=$225;
 var $tmp1_i2_i_i_i_i14=$228;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i13)]=HEAP8[($tmp1_i2_i_i_i_i14)];
 $223=$873;
 $224=$874;
 var $875=$224;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($875) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=35;break; }
 case 38: 
 label=39;break;
 case 39: 
 var $877=$245;
 var $878=($877|0)!=0;
 if($878){label=40;break;}else{label=41;break;}
 case 40: 
 var $880=(($835)|0);
 var $881=HEAP32[(($880)>>2)];
 var $882=$245;
 $240=$881;
 $241=$882;
 $242=1;
 var $883=$240;
 var $884=$241;
 var $885=$242;
 $237=$883;
 $238=$884;
 $239=$885;
 var $886=$237;
 var $887=$238;
 var $888=$887;
 __ZdlPv($888);
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 STACKTOP=sp;return;
 case 43: 
 var $890$0 = ___cxa_find_matching_catch(-1, -1); var $890$1 = tempRet0;
 var $891=$890$0;
 $376=$891;
 var $892=$890$1;
 $377=$892;
 label=55;break;
 case 44: 
 var $915=(($899)|0);
 $265=$915;
 var $916=$265;
 var $917=$916;
 $264=$917;
 var $918=$264;
 var $919=(($918+4)|0);
 var $920=$__tmp_i_i_i2;
 $290=$919;
 $291=$920;
 var $921=$290;
 var $922=(($921+5)|0);
 var $923=HEAP8[($922)];
 var $924=(($923)&1);
 if($924){label=45;break;}else{label=47;break;}
 case 45: 
 var $926=(($921)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=$291;
 var $929=(($928+16)|0);
 var $930=(($929)|0);
 var $931=(($930+12)|0);
 $289=$931;
 var $932=$289;
 var $933=$932;
 var $934=$933;
 $279=$927;
 $280=$934;
 var $935=$282;
 var $936=$279;
 var $937=$280;
 var $tmp_i_i_i_i_i3=$278;
 var $tmp1_i_i_i_i_i4=$281;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i3)]=HEAP8[($tmp1_i_i_i_i_i4)];
 $276=$936;
 $277=$937;
 var $938=$277;
 label=47;break;
 case 46: 
 var $940$0 = ___cxa_find_matching_catch(-1, -1,0); var $940$1 = tempRet0;
 var $941=$940$0;
 $292=$941;
 var $942=$940$1;
 $293=$942;
 var $943=$292;
 ___cxa_call_unexpected($943);
 throw "Reached an unreachable!";
 case 47: 
 var $945=(($921+4)|0);
 var $946=HEAP8[($945)];
 var $947=(($946)&1);
 if($947){label=48;break;}else{label=50;break;}
 case 48: 
 var $949=(($921)|0);
 var $950=HEAP32[(($949)>>2)];
 var $951=$291;
 var $952=(($951+16)|0);
 var $953=(($952)|0);
 var $954=(($953)|0);
 $268=$954;
 var $955=$268;
 var $956=$955;
 var $957=$956;
 $272=$950;
 $273=$957;
 var $958=$275;
 var $959=$272;
 var $960=$273;
 var $tmp_i1_i_i_i_i5=$271;
 var $tmp1_i2_i_i_i_i6=$274;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i5)]=HEAP8[($tmp1_i2_i_i_i_i6)];
 $269=$959;
 $270=$960;
 var $961=$270;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($961) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=46;break; }
 case 49: 
 label=50;break;
 case 50: 
 var $963=$291;
 var $964=($963|0)!=0;
 if($964){label=51;break;}else{label=52;break;}
 case 51: 
 var $966=(($921)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=$291;
 $286=$967;
 $287=$968;
 $288=1;
 var $969=$286;
 var $970=$287;
 var $971=$288;
 $283=$969;
 $284=$970;
 $285=$971;
 var $972=$283;
 var $973=$284;
 var $974=$973;
 __ZdlPv($974);
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 $360=$__h;
 var $977=$360;
 $359=$977;
 var $978=$359;
 $357=$978;
 $358=0;
 var $979=$357;
 var $980=(($979)|0);
 $356=$980;
 var $981=$356;
 var $982=$981;
 $355=$982;
 var $983=$355;
 var $984=(($983)|0);
 var $985=HEAP32[(($984)>>2)];
 $__tmp_i_i_i=$985;
 var $986=$358;
 var $987=(($979)|0);
 $328=$987;
 var $988=$328;
 var $989=$988;
 $327=$989;
 var $990=$327;
 var $991=(($990)|0);
 HEAP32[(($991)>>2)]=$986;
 var $992=$__tmp_i_i_i;
 var $993=($992|0)!=0;
 if($993){label=56;break;}else{label=65;break;}
 case 56: 
 var $995=(($979)|0);
 $326=$995;
 var $996=$326;
 var $997=$996;
 $325=$997;
 var $998=$325;
 var $999=(($998+4)|0);
 var $1000=$__tmp_i_i_i;
 $351=$999;
 $352=$1000;
 var $1001=$351;
 var $1002=(($1001+5)|0);
 var $1003=HEAP8[($1002)];
 var $1004=(($1003)&1);
 if($1004){label=57;break;}else{label=59;break;}
 case 57: 
 var $1006=(($1001)|0);
 var $1007=HEAP32[(($1006)>>2)];
 var $1008=$352;
 var $1009=(($1008+16)|0);
 var $1010=(($1009)|0);
 var $1011=(($1010+12)|0);
 $350=$1011;
 var $1012=$350;
 var $1013=$1012;
 var $1014=$1013;
 $340=$1007;
 $341=$1014;
 var $1015=$343;
 var $1016=$340;
 var $1017=$341;
 var $tmp_i_i_i_i_i=$339;
 var $tmp1_i_i_i_i_i=$342;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $337=$1016;
 $338=$1017;
 var $1018=$338;
 label=59;break;
 case 58: 
 var $1020$0 = ___cxa_find_matching_catch(-1, -1,0); var $1020$1 = tempRet0;
 var $1021=$1020$0;
 $353=$1021;
 var $1022=$1020$1;
 $354=$1022;
 var $1023=$353;
 ___cxa_call_unexpected($1023);
 throw "Reached an unreachable!";
 case 59: 
 var $1025=(($1001+4)|0);
 var $1026=HEAP8[($1025)];
 var $1027=(($1026)&1);
 if($1027){label=60;break;}else{label=62;break;}
 case 60: 
 var $1029=(($1001)|0);
 var $1030=HEAP32[(($1029)>>2)];
 var $1031=$352;
 var $1032=(($1031+16)|0);
 var $1033=(($1032)|0);
 var $1034=(($1033)|0);
 $329=$1034;
 var $1035=$329;
 var $1036=$1035;
 var $1037=$1036;
 $333=$1030;
 $334=$1037;
 var $1038=$336;
 var $1039=$333;
 var $1040=$334;
 var $tmp_i1_i_i_i_i=$332;
 var $tmp1_i2_i_i_i_i=$335;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i)]=HEAP8[($tmp1_i2_i_i_i_i)];
 $330=$1039;
 $331=$1040;
 var $1041=$331;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1041) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=58;break; }
 case 61: 
 label=62;break;
 case 62: 
 var $1043=$352;
 var $1044=($1043|0)!=0;
 if($1044){label=63;break;}else{label=64;break;}
 case 63: 
 var $1046=(($1001)|0);
 var $1047=HEAP32[(($1046)>>2)];
 var $1048=$352;
 $347=$1047;
 $348=$1048;
 $349=1;
 var $1049=$347;
 var $1050=$348;
 var $1051=$349;
 $344=$1049;
 $345=$1050;
 $346=$1051;
 var $1052=$344;
 var $1053=$345;
 var $1054=$1053;
 __ZdlPv($1054);
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 var $1057=$376;
 var $1058=$377;
 var $1059$0=$1057;
 var $1059$1=0;
 var $1060$0=$1059$0;
 var $1060$1=$1058;
 ___resumeException($1060$0)
 var $1062$0 = ___cxa_find_matching_catch(-1, -1,0); var $1062$1 = tempRet0;
 var $1063=$1062$0;
 ___clang_call_terminate($1063);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

// WARNING: content after a branch in a label, line: 11539
// WARNING: content after a branch in a label, line: 11541
// WARNING: content after a branch in a label, line: 11542
// WARNING: content after a branch in a label, line: 11543
// WARNING: content after a branch in a label, line: 11544
// WARNING: content after a branch in a label, line: 11545
// WARNING: content after a branch in a label, line: 11764
// WARNING: content after a branch in a label, line: 11766
// WARNING: content after a branch in a label, line: 11767
// WARNING: content after a branch in a label, line: 11768
// WARNING: content after a branch in a label, line: 11769
// WARNING: content after a branch in a label, line: 11770
// WARNING: content after a branch in a label, line: 11886
// WARNING: content after a branch in a label, line: 11888
// WARNING: content after a branch in a label, line: 11889
// WARNING: content after a branch in a label, line: 11890
// WARNING: content after a branch in a label, line: 11891
// WARNING: content after a branch in a label, line: 11892

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSI_SI_($this,$__parent,$__child,$__new_node){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31=sp;
 var $32=(sp)+(8);
 var $33=(sp)+(16);
 $27=$this;
 $28=$__parent;
 $29=$__child;
 $30=$__new_node;
 var $34=$27;
 $25=$31;
 $26=-1;
 var $35=$25;
 var $36=$26;
 $23=$35;
 $24=$36;
 var $37=$23;
 var $38=(($37)|0);
 HEAP32[(($38)>>2)]=0;
 $19=$31;
 var $39=$19;
 var $40=$30;
 var $41=$40;
 var $42=(($41)|0);
 HEAP32[(($42)>>2)]=0;
 $3=$32;
 $4=-1;
 var $43=$3;
 var $44=$4;
 $1=$43;
 $2=$44;
 var $45=$1;
 var $46=(($45)|0);
 HEAP32[(($46)>>2)]=0;
 $5=$32;
 var $47=$5;
 var $48=$30;
 var $49=(($48+4)|0);
 HEAP32[(($49)>>2)]=0;
 var $50=$28;
 var $51=$30;
 var $52=(($51+8)|0);
 HEAP32[(($52)>>2)]=$50;
 var $53=$30;
 var $54=$29;
 HEAP32[(($54)>>2)]=$53;
 $6=$34;
 var $55=$6;
 var $56=(($55)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57;
 var $59=(($58)|0);
 var $60=HEAP32[(($59)>>2)];
 $9=$33;
 $10=-1;
 var $61=$9;
 var $62=$10;
 $7=$61;
 $8=$62;
 var $63=$7;
 var $64=(($63)|0);
 HEAP32[(($64)>>2)]=0;
 $11=$33;
 var $65=$11;
 var $66=($60|0)!=0;
 if($66){label=2;break;}else{label=3;break;}
 case 2: 
 $12=$34;
 var $68=$12;
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=$70;
 var $72=(($71)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$73;
 $13=$34;
 var $75=$13;
 var $76=(($75)|0);
 HEAP32[(($76)>>2)]=$74;
 label=3;break;
 case 3: 
 $18=$34;
 var $78=$18;
 var $79=(($78+4)|0);
 $17=$79;
 var $80=$17;
 var $81=$80;
 $16=$81;
 var $82=$16;
 var $83=(($82)|0);
 $15=$83;
 var $84=$15;
 $14=$84;
 var $85=$14;
 var $86=$85;
 var $87=$86;
 var $88=$87;
 var $89=$88;
 var $90=(($89)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$29;
 var $93=HEAP32[(($92)>>2)];
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($91,$93);
 $22=$34;
 var $94=$22;
 var $95=(($94+8)|0);
 $21=$95;
 var $96=$21;
 var $97=$96;
 $20=$97;
 var $98=$20;
 var $99=(($98)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=((($100)+(1))|0);
 HEAP32[(($99)>>2)]=$101;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $__y;
 var $16=sp;
 var $17;
 var $18;
 var $__y1;
 var $19=(sp)+(8);
 $14=$__root;
 $15=$__x;
 var $20=$15;
 var $21=$14;
 var $22=($20|0)==($21|0);
 var $23=$15;
 var $24=(($23+12)|0);
 var $25=($22&1);
 HEAP8[($24)]=$25;
 label=2;break;
 case 2: 
 var $27=$15;
 var $28=$14;
 var $29=($27|0)!=($28|0);
 if($29){label=3;break;}else{var $39=0;label=4;break;}
 case 3: 
 var $31=$15;
 var $32=(($31+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+12)|0);
 var $35=HEAP8[($34)];
 var $36=(($35)&1);
 var $37=$36^1;
 var $39=$37;label=4;break;
 case 4: 
 var $39;
 if($39){label=5;break;}else{label=26;break;}
 case 5: 
 var $41=$15;
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 $13=$43;
 var $44=$13;
 var $45=$13;
 var $46=(($45+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=(($48)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($44|0)==($50|0);
 if($51){label=6;break;}else{label=16;break;}
 case 6: 
 var $53=$15;
 var $54=(($53+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+4)|0);
 var $59=HEAP32[(($58)>>2)];
 $__y=$59;
 var $60=$__y;
 $11=$16;
 $12=-1;
 var $61=$11;
 var $62=$12;
 $9=$61;
 $10=$62;
 var $63=$9;
 var $64=(($63)|0);
 HEAP32[(($64)>>2)]=0;
 label=7;break;
 case 7: 
 $8=$16;
 var $66=$8;
 label=8;break;
 case 8: 
 var $68=($60|0)!=0;
 if($68){label=9;break;}else{label=12;break;}
 case 9: 
 var $70=$__y;
 var $71=(($70+12)|0);
 var $72=HEAP8[($71)];
 var $73=(($72)&1);
 if($73){label=12;break;}else{label=10;break;}
 case 10: 
 var $75=$15;
 var $76=(($75+8)|0);
 var $77=HEAP32[(($76)>>2)];
 $15=$77;
 var $78=$15;
 var $79=(($78+12)|0);
 HEAP8[($79)]=1;
 var $80=$15;
 var $81=(($80+8)|0);
 var $82=HEAP32[(($81)>>2)];
 $15=$82;
 var $83=$15;
 var $84=$14;
 var $85=($83|0)==($84|0);
 var $86=$15;
 var $87=(($86+12)|0);
 var $88=($85&1);
 HEAP8[($87)]=$88;
 var $89=$__y;
 var $90=(($89+12)|0);
 HEAP8[($90)]=1;
 label=15;break;
 case 11: 
 var $96=$17;
 ___cxa_call_unexpected($96);
 throw "Reached an unreachable!";
 case 12: 
 var $98=$15;
 $1=$98;
 var $99=$1;
 var $100=$1;
 var $101=(($100+8)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=$102;
 var $104=(($103)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($99|0)==($105|0);
 if($106){label=14;break;}else{label=13;break;}
 case 13: 
 var $108=$15;
 var $109=(($108+8)|0);
 var $110=HEAP32[(($109)>>2)];
 $15=$110;
 var $111=$15;
 __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($111);
 label=14;break;
 case 14: 
 var $113=$15;
 var $114=(($113+8)|0);
 var $115=HEAP32[(($114)>>2)];
 $15=$115;
 var $116=$15;
 var $117=(($116+12)|0);
 HEAP8[($117)]=1;
 var $118=$15;
 var $119=(($118+8)|0);
 var $120=HEAP32[(($119)>>2)];
 $15=$120;
 var $121=$15;
 var $122=(($121+12)|0);
 HEAP8[($122)]=0;
 var $123=$15;
 __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($123);
 label=26;break;
 case 15: 
 label=25;break;
 case 16: 
 var $126=$15;
 var $127=(($126+8)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+8)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$130;
 var $132=(($131)|0);
 var $133=HEAP32[(($132)>>2)];
 $__y1=$133;
 var $134=$__y1;
 $4=$19;
 $5=-1;
 var $135=$4;
 var $136=$5;
 $2=$135;
 $3=$136;
 var $137=$2;
 var $138=(($137)|0);
 HEAP32[(($138)>>2)]=0;
 label=17;break;
 case 17: 
 $6=$19;
 var $140=$6;
 label=18;break;
 case 18: 
 var $142=($134|0)!=0;
 if($142){label=19;break;}else{label=21;break;}
 case 19: 
 var $144=$__y1;
 var $145=(($144+12)|0);
 var $146=HEAP8[($145)];
 var $147=(($146)&1);
 if($147){label=21;break;}else{label=20;break;}
 case 20: 
 var $149=$15;
 var $150=(($149+8)|0);
 var $151=HEAP32[(($150)>>2)];
 $15=$151;
 var $152=$15;
 var $153=(($152+12)|0);
 HEAP8[($153)]=1;
 var $154=$15;
 var $155=(($154+8)|0);
 var $156=HEAP32[(($155)>>2)];
 $15=$156;
 var $157=$15;
 var $158=$14;
 var $159=($157|0)==($158|0);
 var $160=$15;
 var $161=(($160+12)|0);
 var $162=($159&1);
 HEAP8[($161)]=$162;
 var $163=$__y1;
 var $164=(($163+12)|0);
 HEAP8[($164)]=1;
 label=24;break;
 case 21: 
 var $166=$15;
 $7=$166;
 var $167=$7;
 var $168=$7;
 var $169=(($168+8)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$170;
 var $172=(($171)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($167|0)==($173|0);
 if($174){label=22;break;}else{label=23;break;}
 case 22: 
 var $176=$15;
 var $177=(($176+8)|0);
 var $178=HEAP32[(($177)>>2)];
 $15=$178;
 var $179=$15;
 __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($179);
 label=23;break;
 case 23: 
 var $181=$15;
 var $182=(($181+8)|0);
 var $183=HEAP32[(($182)>>2)];
 $15=$183;
 var $184=$15;
 var $185=(($184+12)|0);
 HEAP8[($185)]=1;
 var $186=$15;
 var $187=(($186+8)|0);
 var $188=HEAP32[(($187)>>2)];
 $15=$188;
 var $189=$15;
 var $190=(($189+12)|0);
 HEAP8[($190)]=0;
 var $191=$15;
 __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($191);
 label=26;break;
 case 24: 
 label=25;break;
 case 25: 
 label=2;break;
 case 26: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $__y;
 var $8=sp;
 var $9;
 var $10;
 $7=$__x;
 var $11=$7;
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 $__y=$13;
 var $14=$__y;
 var $15=$14;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$7;
 var $19=(($18+4)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$7;
 var $21=(($20+4)|0);
 var $22=HEAP32[(($21)>>2)];
 $5=$8;
 $6=-1;
 var $23=$5;
 var $24=$6;
 $3=$23;
 $4=$24;
 var $25=$3;
 var $26=(($25)|0);
 HEAP32[(($26)>>2)]=0;
 label=2;break;
 case 2: 
 $1=$8;
 var $28=$1;
 label=3;break;
 case 3: 
 var $30=($22|0)!=0;
 if($30){label=4;break;}else{label=6;break;}
 case 4: 
 var $32=$7;
 var $33=$7;
 var $34=(($33+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+8)|0);
 HEAP32[(($36)>>2)]=$32;
 label=6;break;
 case 5: 
 var $42=$9;
 ___cxa_call_unexpected($42);
 throw "Reached an unreachable!";
 case 6: 
 var $44=$7;
 var $45=(($44+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$__y;
 var $48=(($47+8)|0);
 HEAP32[(($48)>>2)]=$46;
 var $49=$7;
 $2=$49;
 var $50=$2;
 var $51=$2;
 var $52=(($51+8)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=$53;
 var $55=(($54)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($50|0)==($56|0);
 if($57){label=7;break;}else{label=8;break;}
 case 7: 
 var $59=$__y;
 var $60=$7;
 var $61=(($60+8)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$62;
 var $64=(($63)|0);
 HEAP32[(($64)>>2)]=$59;
 label=9;break;
 case 8: 
 var $66=$__y;
 var $67=$7;
 var $68=(($67+8)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+4)|0);
 HEAP32[(($70)>>2)]=$66;
 label=9;break;
 case 9: 
 var $72=$7;
 var $73=$__y;
 var $74=$73;
 var $75=(($74)|0);
 HEAP32[(($75)>>2)]=$72;
 var $76=$__y;
 var $77=$7;
 var $78=(($77+8)|0);
 HEAP32[(($78)>>2)]=$76;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $__y;
 var $8=sp;
 var $9;
 var $10;
 $7=$__x;
 var $11=$7;
 var $12=$11;
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 $__y=$14;
 var $15=$__y;
 var $16=(($15+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$7;
 var $19=$18;
 var $20=(($19)|0);
 HEAP32[(($20)>>2)]=$17;
 var $21=$7;
 var $22=$21;
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 $5=$8;
 $6=-1;
 var $25=$5;
 var $26=$6;
 $3=$25;
 $4=$26;
 var $27=$3;
 var $28=(($27)|0);
 HEAP32[(($28)>>2)]=0;
 label=2;break;
 case 2: 
 $1=$8;
 var $30=$1;
 label=3;break;
 case 3: 
 var $32=($24|0)!=0;
 if($32){label=4;break;}else{label=6;break;}
 case 4: 
 var $34=$7;
 var $35=$7;
 var $36=$35;
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+8)|0);
 HEAP32[(($39)>>2)]=$34;
 label=6;break;
 case 5: 
 var $45=$9;
 ___cxa_call_unexpected($45);
 throw "Reached an unreachable!";
 case 6: 
 var $47=$7;
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$__y;
 var $51=(($50+8)|0);
 HEAP32[(($51)>>2)]=$49;
 var $52=$7;
 $2=$52;
 var $53=$2;
 var $54=$2;
 var $55=(($54+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$56;
 var $58=(($57)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($53|0)==($59|0);
 if($60){label=7;break;}else{label=8;break;}
 case 7: 
 var $62=$__y;
 var $63=$7;
 var $64=(($63+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$65;
 var $67=(($66)|0);
 HEAP32[(($67)>>2)]=$62;
 label=9;break;
 case 8: 
 var $69=$__y;
 var $70=$7;
 var $71=(($70+8)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+4)|0);
 HEAP32[(($73)>>2)]=$69;
 label=9;break;
 case 9: 
 var $75=$7;
 var $76=$__y;
 var $77=(($76+4)|0);
 HEAP32[(($77)>>2)]=$75;
 var $78=$__y;
 var $79=$7;
 var $80=(($79+8)|0);
 HEAP32[(($80)>>2)]=$78;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL28OpenCLKernelGetWorkGroupSizePN6OpenCL12KernelStructE($pKernel){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $bGotKernelWGS;
 $9=$pKernel;
 var $10=$9;
 var $11=(($10+44)|0);
 $8=$11;
 var $12=$8;
 var $13=(($12)|0);
 $7=$13;
 var $14=$7;
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+16)|0);
 $6=$17;
 var $18=$6;
 $5=$18;
 var $19=$5;
 var $20=$19;
 var $21=$20;
 var $22=(($21)|0);
 $4=$22;
 var $23=$4;
 $3=$23;
 var $24=$3;
 var $25=$24;
 var $26=$25;
 var $27=(($26+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$9;
 var $30=(($29+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$9;
 var $33=(($32)|0);
 var $34=$33;
 var $35=_clGetKernelWorkGroupInfo($28,$31,4528,4,$34,0);
 var $36=$9;
 var $37=(($36+4)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=$9;
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 var $42=($41&1);
 $bGotKernelWGS=$42;
 var $43=$bGotKernelWGS;
 var $44=(($43)&1);
 if($44){label=3;break;}else{label=2;break;}
 case 2: 
 var $46=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,2480);
 $1=$46;
 $2=8;
 var $47=$1;
 var $48=$2;
 var $49=FUNCTION_TABLE[$48]($47);
 label=3;break;
 case 3: 
 var $51=$bGotKernelWGS;
 var $52=(($51)&1);
 STACKTOP=sp;return $52;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL26OpenCLKernelEnqueueNDRangePN6OpenCL12KernelStructEPKjS3_S3_($pKernel,$pGlobalWorkOffset,$pGlobalWorkSize,$pLocalWorkSize){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $nWorkDim;
 var $bEnqueued;
 $15=$pKernel;
 $16=$pGlobalWorkOffset;
 $17=$pGlobalWorkSize;
 $18=$pLocalWorkSize;
 var $19=$15;
 var $20=(($19+20)|0);
 var $21=$15;
 var $22=(($21+44)|0);
 $14=$22;
 var $23=$14;
 var $24=(($23)|0);
 $13=$24;
 var $25=$13;
 var $26=(($25)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+16)|0);
 $12=$28;
 var $29=$12;
 $11=$29;
 var $30=$11;
 var $31=$30;
 var $32=$31;
 var $33=(($32)|0);
 $10=$33;
 var $34=$10;
 $9=$34;
 var $35=$9;
 var $36=$35;
 var $37=$36;
 var $38=(($37)|0);
 var $39=__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEEixERSA_($20,$38);
 var $40=HEAP32[(($39)>>2)];
 $nWorkDim=$40;
 var $41=$15;
 var $42=(($41+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$15;
 var $45=(($44+44)|0);
 $6=$45;
 var $46=$6;
 var $47=(($46)|0);
 $5=$47;
 var $48=$5;
 var $49=(($48)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+16)|0);
 $4=$51;
 var $52=$4;
 $3=$52;
 var $53=$3;
 var $54=$53;
 var $55=$54;
 var $56=(($55)|0);
 $2=$56;
 var $57=$2;
 $1=$57;
 var $58=$1;
 var $59=$58;
 var $60=$59;
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$nWorkDim;
 var $64=$16;
 var $65=$17;
 var $66=$18;
 var $67=_clEnqueueNDRangeKernel($43,$62,$63,$64,$65,$66,0,0,0);
 var $68=$15;
 var $69=(($68+4)|0);
 HEAP32[(($69)>>2)]=$67;
 var $70=$15;
 var $71=(($70+4)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($72|0)==0;
 var $74=($73&1);
 $bEnqueued=$74;
 var $75=$bEnqueued;
 var $76=(($75)&1);
 if($76){label=3;break;}else{label=2;break;}
 case 2: 
 var $78=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,2904);
 $7=$78;
 $8=8;
 var $79=$7;
 var $80=$8;
 var $81=FUNCTION_TABLE[$80]($79);
 label=3;break;
 case 3: 
 var $83=$bEnqueued;
 var $84=(($83)&1);
 STACKTOP=sp;return $84;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL18OpenCLKernelCreateRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN6OpenCL12KernelStructE($rKernelName,$pKernel){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $__i1_i_i2=sp;
 var $8;
 var $9=(sp)+(8);
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21=(sp)+(16);
 var $22;
 var $__i1_i_i=(sp)+(24);
 var $23;
 var $24=(sp)+(32);
 var $25;
 var $26;
 var $27=(sp)+(40);
 var $28;
 var $__i1_i_i_i_i=(sp)+(48);
 var $29;
 var $30=(sp)+(56);
 var $31;
 var $32;
 var $33=(sp)+(64);
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42=(sp)+(72);
 var $43=(sp)+(80);
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56=(sp)+(96);
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $pKernelName;
 var $pKernelMem;
 var $bCreatedKernel;
 var $76=(sp)+(104);
 var $77=(sp)+(120);
 var $78=(sp)+(136);
 var $79;
 var $80;
 var $81=(sp)+(152);
 var $82=(sp)+(160);
 var $83=(sp)+(168);
 $74=$rKernelName;
 $75=$pKernel;
 var $84=$74;
 $73=$84;
 var $85=$73;
 $72=$85;
 var $86=$72;
 $71=$86;
 var $87=$71;
 $70=$87;
 var $88=$70;
 var $89=(($88)|0);
 $69=$89;
 var $90=$69;
 var $91=$90;
 $68=$91;
 var $92=$68;
 var $93=(($92)|0);
 var $94=(($93)|0);
 var $95=$94;
 var $96=(($95)|0);
 var $97=$96;
 var $98=HEAP8[($97)];
 var $99=($98&255);
 var $100=$99&1;
 var $101=($100|0)!=0;
 if($101){label=2;break;}else{label=3;break;}
 case 2: 
 $62=$87;
 var $103=$62;
 var $104=(($103)|0);
 $61=$104;
 var $105=$61;
 var $106=$105;
 $60=$106;
 var $107=$60;
 var $108=(($107)|0);
 var $109=(($108)|0);
 var $110=$109;
 var $111=(($110+8)|0);
 var $112=HEAP32[(($111)>>2)];
 var $126=$112;label=4;break;
 case 3: 
 $67=$87;
 var $114=$67;
 var $115=(($114)|0);
 $66=$115;
 var $116=$66;
 var $117=$116;
 $65=$117;
 var $118=$65;
 var $119=(($118)|0);
 var $120=(($119)|0);
 var $121=$120;
 var $122=(($121+1)|0);
 var $123=(($122)|0);
 $64=$123;
 var $124=$64;
 $63=$124;
 var $125=$63;
 var $126=$125;label=4;break;
 case 4: 
 var $126;
 $59=$126;
 var $127=$59;
 $pKernelName=$127;
 var $128=$75;
 var $129=(($128+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$pKernelName;
 var $132=$75;
 var $133=(($132+4)|0);
 var $134=_clCreateKernel($130,$131,$133);
 $pKernelMem=$134;
 var $135=$pKernelMem;
 var $136=($135|0)!=0;
 if($136){label=5;break;}else{var $143=0;label=6;break;}
 case 5: 
 var $138=$75;
 var $139=(($138+4)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==0;
 var $143=$141;label=6;break;
 case 6: 
 var $143;
 var $144=($143&1);
 $bCreatedKernel=$144;
 var $145=$bCreatedKernel;
 var $146=(($145)&1);
 if($146){label=8;break;}else{label=7;break;}
 case 7: 
 var $148=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,1624);
 $57=$148;
 $58=8;
 var $149=$57;
 var $150=$58;
 var $151=FUNCTION_TABLE[$150]($149);
 label=33;break;
 case 8: 
 var $153=$75;
 var $154=(($153+32)|0);
 var $155=$74;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($78,$155);
 var $156=$pKernelMem;
 HEAP32[(($56)>>2)]=$156;
 $53=$77;
 $54=$78;
 $55=$56;
 var $157=$53;
 var $158=$55;
 var $159=$54;
 $50=$157;
 $51=$159;
 $52=$158;
 var $160=$50;
 var $161=(($160)|0);
 var $162=$51;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($161,$162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $163=(($160+12)|0);
 var $164=$52;
 var $165=HEAP32[(($164)>>2)];
 HEAP32[(($163)>>2)]=$165;
 label=10;break;
 case 10: 
 $48=$76;
 $49=$77;
 var $167=$48;
 var $168=$49;
 $46=$167;
 $47=$168;
 var $169=$46;
 var $170=(($169)|0);
 var $171=$47;
 var $172=(($171)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($170,$172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=24;break; }
 case 11: 
 var $173=(($169+12)|0);
 var $174=$47;
 var $175=(($174+12)|0);
 var $176=HEAP32[(($175)>>2)];
 HEAP32[(($173)>>2)]=$176;
 label=12;break;
 case 12: 
 $40=$154;
 $41=$76;
 var $178=$40;
 var $179=(($178)|0);
 var $180=$41;
 $38=$43;
 $39=$180;
 var $181=$38;
 var $182=$39;
 $36=$181;
 $37=$182;
 var $183=$36;
 var $184=(($183)|0);
 var $185=$37;
 (function() { try { __THREW__ = 0; return __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEC1ERKSA_($184,$185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=25;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE15__insert_uniqueERKSA_($42,$179,$43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 $34=$81;
 $35=$42;
 var $187=$34;
 var $188=$35;
 $31=$187;
 $32=$188;
 var $189=$31;
 var $190=(($189)|0);
 var $191=$32;
 var $192=(($191)|0);
 var $193=$33;
 var $194=$192;
 assert(4 % 1 === 0);HEAP32[(($193)>>2)]=HEAP32[(($194)>>2)];
 var $tmp_i_i_i=$30;
 var $tmp1_i_i_i=$33;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];HEAP8[((($tmp_i_i_i)+(1))|0)]=HEAP8[((($tmp1_i_i_i)+(1))|0)];HEAP8[((($tmp_i_i_i)+(2))|0)]=HEAP8[((($tmp1_i_i_i)+(2))|0)];HEAP8[((($tmp_i_i_i)+(3))|0)]=HEAP8[((($tmp1_i_i_i)+(3))|0)];
 $29=$190;
 var $195=$29;
 var $tmp_i_i_i_i=$__i1_i_i_i_i;
 var $tmp2_i_i_i_i=$30;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp2_i_i_i_i)];HEAP8[((($tmp_i_i_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i_i_i)+(1))|0)];HEAP8[((($tmp_i_i_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i_i_i)+(2))|0)];HEAP8[((($tmp_i_i_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i_i_i)+(3))|0)];
 $28=$195;
 var $196=$28;
 var $197=(($196)|0);
 var $198=$197;
 var $199=$__i1_i_i_i_i;
 assert(4 % 1 === 0);HEAP32[(($198)>>2)]=HEAP32[(($199)>>2)];
 var $200=(($189+4)|0);
 var $201=$32;
 var $202=(($201+4)|0);
 var $203=HEAP8[($202)];
 var $204=(($203)&1);
 var $205=($204&1);
 HEAP8[($200)]=$205;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=25;break; }
 case 15: 
 var $207$0 = ___cxa_find_matching_catch(-1, -1); var $207$1 = tempRet0;
 var $208=$207$0;
 $44=$208;
 var $209=$207$1;
 $45=$209;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $211=$44;
 var $212=$45;
 var $213$0=$211;
 var $213$1=0;
 var $214$0=$213$0;
 var $214$1=$212;
 var $eh_lpad_body$1=$214$1;var $eh_lpad_body$0=$214$0;label=26;break;
 case 17: 
 var $216$0 = ___cxa_find_matching_catch(-1, -1,0); var $216$1 = tempRet0;
 var $217=$216$0;
 ___clang_call_terminate($217);
 throw "Reached an unreachable!";
 case 18: 
 label=19;break;
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=24;break; }
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=23;break; }
 case 21: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($78);
 var $221=$75;
 var $222=(($221+44)|0);
 var $223=$75;
 var $224=(($223+32)|0);
 var $225=$74;
 $25=$224;
 $26=$225;
 var $226=$25;
 var $227=(($226)|0);
 var $228=$26;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($27,$227,$228);
 var $tmp_i=$24;
 var $tmp1_i=$27;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $23=$82;
 var $229=$23;
 var $tmp_i_i=$__i1_i_i;
 var $tmp2_i_i=$24;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $22=$229;
 var $230=$22;
 var $231=(($230)|0);
 var $232=$231;
 var $233=$__i1_i_i;
 assert(4 % 1 === 0);HEAP32[(($232)>>2)]=HEAP32[(($233)>>2)];
 var $234=$222;
 var $235=$82;
 assert(4 % 1 === 0);HEAP32[(($234)>>2)]=HEAP32[(($235)>>2)];
 var $236=$75;
 var $237=(($236+44)|0);
 var $238=$75;
 var $239=(($238+32)|0);
 $20=$239;
 var $240=$20;
 var $241=(($240)|0);
 $19=$241;
 var $242=$19;
 $18=$242;
 var $243=$18;
 var $244=(($243+4)|0);
 $17=$244;
 var $245=$17;
 var $246=$245;
 $16=$246;
 var $247=$16;
 var $248=(($247)|0);
 $15=$248;
 var $249=$15;
 $14=$249;
 var $250=$14;
 var $251=$250;
 var $252=$251;
 var $253=$252;
 $12=$21;
 $13=$253;
 var $254=$12;
 var $255=$13;
 $10=$254;
 $11=$255;
 var $256=$10;
 var $257=(($256)|0);
 var $258=$11;
 HEAP32[(($257)>>2)]=$258;
 var $tmp_i3=$9;
 var $tmp1_i4=$21;
 assert(4 % 1 === 0);HEAP8[($tmp_i3)]=HEAP8[($tmp1_i4)];HEAP8[((($tmp_i3)+(1))|0)]=HEAP8[((($tmp1_i4)+(1))|0)];HEAP8[((($tmp_i3)+(2))|0)]=HEAP8[((($tmp1_i4)+(2))|0)];HEAP8[((($tmp_i3)+(3))|0)]=HEAP8[((($tmp1_i4)+(3))|0)];
 $8=$83;
 var $259=$8;
 var $tmp_i_i5=$__i1_i_i2;
 var $tmp2_i_i6=$9;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i5)]=HEAP8[($tmp2_i_i6)];HEAP8[((($tmp_i_i5)+(1))|0)]=HEAP8[((($tmp2_i_i6)+(1))|0)];HEAP8[((($tmp_i_i5)+(2))|0)]=HEAP8[((($tmp2_i_i6)+(2))|0)];HEAP8[((($tmp_i_i5)+(3))|0)]=HEAP8[((($tmp2_i_i6)+(3))|0)];
 $7=$259;
 var $260=$7;
 var $261=(($260)|0);
 var $262=$261;
 var $263=$__i1_i_i2;
 assert(4 % 1 === 0);HEAP32[(($262)>>2)]=HEAP32[(($263)>>2)];
 $5=$237;
 $6=$83;
 var $264=$5;
 var $265=(($264)|0);
 var $266=$6;
 var $267=(($266)|0);
 $3=$265;
 $4=$267;
 var $268=$3;
 var $269=(($268)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=$4;
 var $272=(($271)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($270|0)==($273|0);
 if($274){label=22;break;}else{label=32;break;}
 case 22: 
 var $276=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,1392);
 var $277=$74;
 var $278=__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($276,$277);
 var $279=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($278,1048);
 $1=$279;
 $2=8;
 var $280=$1;
 var $281=$2;
 var $282=FUNCTION_TABLE[$281]($280);
 label=32;break;
 case 23: 
 var $284$0 = ___cxa_find_matching_catch(-1, -1); var $284$1 = tempRet0;
 var $285=$284$0;
 $79=$285;
 var $286=$284$1;
 $80=$286;
 label=30;break;
 case 24: 
 var $288$0 = ___cxa_find_matching_catch(-1, -1); var $288$1 = tempRet0;
 var $289=$288$0;
 $79=$289;
 var $290=$288$1;
 $80=$290;
 label=28;break;
 case 25: 
 var $292$0 = ___cxa_find_matching_catch(-1, -1); var $292$1 = tempRet0;
 var $eh_lpad_body$1=$292$1;var $eh_lpad_body$0=$292$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $293=$eh_lpad_body$0;
 $79=$293;
 var $294=$eh_lpad_body$1;
 $80=$294;
 (function() { try { __THREW__ = 0; return __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=35;break; }
 case 27: 
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 label=30;break;
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=35;break; }
 case 31: 
 label=34;break;
 case 32: 
 label=33;break;
 case 33: 
 var $302=$bCreatedKernel;
 var $303=(($302)&1);
 STACKTOP=sp;return $303;
 case 34: 
 var $305=$79;
 var $306=$80;
 var $307$0=$305;
 var $307$1=0;
 var $308$0=$307$0;
 var $308$1=$306;
 ___resumeException($308$0)
 case 35: 
 var $310$0 = ___cxa_find_matching_catch(-1, -1,0); var $310$1 = tempRet0;
 var $311=$310$0;
 ___clang_call_terminate($311);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP=sp;return;
}

// WARNING: content after a branch in a label, line: 13276
// WARNING: content after a branch in a label, line: 13278
// WARNING: content after a branch in a label, line: 13279
// WARNING: content after a branch in a label, line: 13280
// WARNING: content after a branch in a label, line: 13281
// WARNING: content after a branch in a label, line: 13282
// WARNING: content after a branch in a label, line: 13283
// WARNING: content after a branch in a label, line: 13284
// WARNING: content after a branch in a label, line: 13285
// WARNING: content after a branch in a label, line: 13286
// WARNING: content after a branch in a label, line: 13287
// WARNING: content after a branch in a label, line: 13288
// WARNING: content after a branch in a label, line: 13289
// WARNING: content after a branch in a label, line: 13290
// WARNING: content after a branch in a label, line: 13291
// WARNING: content after a branch in a label, line: 13292
// WARNING: content after a branch in a label, line: 13293
// WARNING: content after a branch in a label, line: 13294
// WARNING: content after a branch in a label, line: 13295
// WARNING: content after a branch in a label, line: 13296
// WARNING: content after a branch in a label, line: 13297
// WARNING: content after a branch in a label, line: 13298
// WARNING: content after a branch in a label, line: 13299
// WARNING: content after a branch in a label, line: 13300
// WARNING: content after a branch in a label, line: 13301
// WARNING: content after a branch in a label, line: 13302
// WARNING: content after a branch in a label, line: 13303
// WARNING: content after a branch in a label, line: 13304
// WARNING: content after a branch in a label, line: 13305
// WARNING: content after a branch in a label, line: 13306
// WARNING: content after a branch in a label, line: 13307
// WARNING: content after a branch in a label, line: 13308
// WARNING: content after a branch in a label, line: 13309

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE15__insert_uniqueERKSA_($agg_result,$this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 var $8;
 var $9;
 var $10=(sp)+(8);
 var $11=(sp)+(16);
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $__tmp_i_i_i14;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35=(sp)+(24);
 var $36;
 var $37;
 var $38=(sp)+(32);
 var $39=(sp)+(40);
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $__tmp_i_i_i8;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $__t_i;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71=(sp)+(48);
 var $72;
 var $73;
 var $74=(sp)+(56);
 var $75=(sp)+(64);
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $__tmp_i_i_i2;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $__t_i_i_i;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107=(sp)+(72);
 var $108=(sp)+(80);
 var $109;
 var $110;
 var $111=(sp)+(88);
 var $112=(sp)+(96);
 var $__t21_i_i_i=(sp)+(104);
 var $113;
 var $114;
 var $115=(sp)+(112);
 var $116;
 var $117;
 var $118=(sp)+(120);
 var $__u1_i=(sp)+(128);
 var $119;
 var $120=(sp)+(136);
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132=(sp)+(144);
 var $133;
 var $134;
 var $135=(sp)+(152);
 var $136=(sp)+(160);
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $__tmp_i_i_i;
 var $152;
 var $153;
 var $154;
 var $155;
 var $156;
 var $157;
 var $158;
 var $159;
 var $160;
 var $161;
 var $162;
 var $163;
 var $164;
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $170;
 var $__parent=(sp)+(168);
 var $__child;
 var $__r;
 var $__inserted=(sp)+(176);
 var $171=(sp)+(184);
 var $__h=(sp)+(192);
 var $172=(sp)+(208);
 var $173=(sp)+(216);
 var $174;
 var $175;
 var $176=(sp)+(232);
 $169=$this;
 $170=$__v;
 var $177=$169;
 var $178=$170;
 var $179=__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalISA_EERPNS_16__tree_node_baseIPvEESM_RKT_($177,$__parent,$178);
 $__child=$179;
 var $180=$__child;
 var $181=HEAP32[(($180)>>2)];
 var $182=$181;
 $__r=$182;
 HEAP8[($__inserted)]=0;
 var $183=$__child;
 var $184=HEAP32[(($183)>>2)];
 $167=$171;
 $168=-1;
 var $185=$167;
 var $186=$168;
 $165=$185;
 $166=$186;
 var $187=$165;
 var $188=(($187)|0);
 HEAP32[(($188)>>2)]=0;
 $164=$171;
 var $189=$164;
 var $190=($184|0)==0;
 if($190){label=2;break;}else{label=41;break;}
 case 2: 
 var $192=$170;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__construct_nodeERKSA_($173,$177,$192);
 $125=$173;
 var $193=$125;
 $123=$172;
 $124=$193;
 var $194=$123;
 var $195=$124;
 $121=$194;
 $122=$195;
 var $196=$121;
 var $197=(($196)|0);
 var $198=$122;
 HEAP32[(($197)>>2)]=$198;
 label=3;break;
 case 3: 
 var $tmp=$120;
 var $tmp1=$172;
 assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
 $119=$__h;
 var $200=$119;
 var $tmp_i=$__u1_i;
 var $tmp2_i=$120;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp2_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp2_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp2_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp2_i)+(3))|0)];
 $117=$200;
 var $201=$117;
 var $202=(($201)|0);
 $116=$__u1_i;
 var $203=$116;
 var $204=(($203)|0);
 var $205=HEAP32[(($204)>>2)];
 $97=$205;
 var $206=$97;
 var $207=(($206)|0);
 $96=$207;
 var $208=$96;
 var $209=$208;
 $95=$209;
 var $210=$95;
 var $211=(($210)|0);
 var $212=HEAP32[(($211)>>2)];
 $__t_i_i_i=$212;
 var $213=(($206)|0);
 $94=$213;
 var $214=$94;
 var $215=$214;
 $93=$215;
 var $216=$93;
 var $217=(($216)|0);
 HEAP32[(($217)>>2)]=0;
 var $218=$__t_i_i_i;
 $98=$__u1_i;
 var $219=$98;
 var $220=(($219)|0);
 var $221=HEAP32[(($220)>>2)];
 $101=$221;
 var $222=$101;
 var $223=(($222)|0);
 $100=$223;
 var $224=$100;
 var $225=$224;
 $99=$225;
 var $226=$99;
 var $227=(($226+4)|0);
 $102=$227;
 var $228=$102;
 var $229=$118;
 var $230=$228;
 assert(8 % 1 === 0);HEAP32[(($229)>>2)]=HEAP32[(($230)>>2)];HEAP32[((($229)+(4))>>2)]=HEAP32[((($230)+(4))>>2)];
 var $tmp_i_i=$115;
 var $tmp1_i_i=$118;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp1_i_i, 8)|0);
 $113=$202;
 $114=$218;
 var $231=$113;
 var $232=$114;
 var $tmp_i_i_i=$__t21_i_i_i;
 var $tmp2_i_i_i=$115;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp2_i_i_i, 8)|0);
 $110=$231;
 HEAP32[(($111)>>2)]=$232;
 var $233=$110;
 var $234=$233;
 $109=$111;
 var $235=$109;
 var $236=HEAP32[(($235)>>2)];
 $103=$__t21_i_i_i;
 var $237=$103;
 var $238=$112;
 var $239=$237;
 assert(8 % 1 === 0);HEAP32[(($238)>>2)]=HEAP32[(($239)>>2)];HEAP32[((($238)+(4))>>2)]=HEAP32[((($239)+(4))>>2)];
 var $tmp_i_i_i_i=$108;
 var $tmp1_i_i_i_i=$112;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp1_i_i_i_i, 8)|0);
 $106=$234;
 HEAP32[(($107)>>2)]=$236;
 var $240=$106;
 var $241=(($240)|0);
 $105=$107;
 var $242=$105;
 var $243=HEAP32[(($242)>>2)];
 HEAP32[(($241)>>2)]=$243;
 var $244=(($240+4)|0);
 $104=$108;
 var $245=$104;
 var $246=$244;
 var $247=$245;
 assert(8 % 1 === 0);HEAP32[(($246)>>2)]=HEAP32[(($247)>>2)];HEAP32[((($246)+(4))>>2)]=HEAP32[((($247)+(4))>>2)];
 label=4;break;
 case 4: 
 $92=$173;
 var $249=$92;
 $91=$249;
 var $250=$91;
 $89=$250;
 $90=0;
 var $251=$89;
 var $252=(($251)|0);
 $88=$252;
 var $253=$88;
 var $254=$253;
 $87=$254;
 var $255=$87;
 var $256=(($255)|0);
 var $257=HEAP32[(($256)>>2)];
 $__tmp_i_i_i2=$257;
 var $258=$90;
 var $259=(($251)|0);
 $68=$259;
 var $260=$68;
 var $261=$260;
 $67=$261;
 var $262=$67;
 var $263=(($262)|0);
 HEAP32[(($263)>>2)]=$258;
 var $264=$__tmp_i_i_i2;
 var $265=($264|0)!=0;
 if($265){label=5;break;}else{label=12;break;}
 case 5: 
 var $267=(($251)|0);
 $66=$267;
 var $268=$66;
 var $269=$268;
 $65=$269;
 var $270=$65;
 var $271=(($270+4)|0);
 var $272=$__tmp_i_i_i2;
 $83=$271;
 $84=$272;
 var $273=$83;
 var $274=(($273+4)|0);
 var $275=HEAP8[($274)];
 var $276=(($275)&1);
 if($276){label=6;break;}else{label=9;break;}
 case 6: 
 var $278=(($273)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=$84;
 var $281=(($280+16)|0);
 $82=$281;
 var $282=$82;
 var $283=$282;
 var $284=$283;
 $72=$279;
 $73=$284;
 var $285=$75;
 var $286=$72;
 var $287=$73;
 var $tmp_i_i_i_i_i3=$71;
 var $tmp1_i_i_i_i_i4=$74;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i3)]=HEAP8[($tmp1_i_i_i_i_i4)];
 $69=$286;
 $70=$287;
 var $288=$70;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 label=9;break;
 case 8: 
 var $290$0 = ___cxa_find_matching_catch(-1, -1); var $290$1 = tempRet0;
 var $291=$290$0;
 $85=$291;
 var $292=$290$1;
 $86=$292;
 var $293=$85;
 ___cxa_call_unexpected($293);
 throw "Reached an unreachable!";
 case 9: 
 var $295=$84;
 var $296=($295|0)!=0;
 if($296){label=10;break;}else{label=11;break;}
 case 10: 
 var $298=(($273)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=$84;
 $79=$299;
 $80=$300;
 $81=1;
 var $301=$79;
 var $302=$80;
 var $303=$81;
 $76=$301;
 $77=$302;
 $78=$303;
 var $304=$76;
 var $305=$77;
 var $306=$305;
 __ZdlPv($306);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $307=HEAP32[(($__parent)>>2)];
 var $308=$__child;
 $64=$__h;
 var $309=$64;
 var $310=(($309)|0);
 $63=$310;
 var $311=$63;
 var $312=$311;
 $62=$312;
 var $313=$62;
 var $314=(($313)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=$315;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSK_SK_($177,$307,$308,$316) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=31;break; }
 case 13: 
 $61=$__h;
 var $318=$61;
 var $319=(($318)|0);
 $60=$319;
 var $320=$60;
 var $321=$320;
 $59=$321;
 var $322=$59;
 var $323=(($322)|0);
 var $324=HEAP32[(($323)>>2)];
 $__t_i=$324;
 var $325=(($318)|0);
 $58=$325;
 var $326=$58;
 var $327=$326;
 $57=$327;
 var $328=$57;
 var $329=(($328)|0);
 HEAP32[(($329)>>2)]=0;
 var $330=$__t_i;
 $__r=$330;
 HEAP8[($__inserted)]=1;
 $56=$__h;
 var $331=$56;
 $55=$331;
 var $332=$55;
 $53=$332;
 $54=0;
 var $333=$53;
 var $334=(($333)|0);
 $52=$334;
 var $335=$52;
 var $336=$335;
 $51=$336;
 var $337=$51;
 var $338=(($337)|0);
 var $339=HEAP32[(($338)>>2)];
 $__tmp_i_i_i8=$339;
 var $340=$54;
 var $341=(($333)|0);
 $32=$341;
 var $342=$32;
 var $343=$342;
 $31=$343;
 var $344=$31;
 var $345=(($344)|0);
 HEAP32[(($345)>>2)]=$340;
 var $346=$__tmp_i_i_i8;
 var $347=($346|0)!=0;
 if($347){label=14;break;}else{label=21;break;}
 case 14: 
 var $349=(($333)|0);
 $30=$349;
 var $350=$30;
 var $351=$350;
 $29=$351;
 var $352=$29;
 var $353=(($352+4)|0);
 var $354=$__tmp_i_i_i8;
 $47=$353;
 $48=$354;
 var $355=$47;
 var $356=(($355+4)|0);
 var $357=HEAP8[($356)];
 var $358=(($357)&1);
 if($358){label=15;break;}else{label=18;break;}
 case 15: 
 var $360=(($355)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=$48;
 var $363=(($362+16)|0);
 $46=$363;
 var $364=$46;
 var $365=$364;
 var $366=$365;
 $36=$361;
 $37=$366;
 var $367=$39;
 var $368=$36;
 var $369=$37;
 var $tmp_i_i_i_i_i9=$35;
 var $tmp1_i_i_i_i_i10=$38;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i9)]=HEAP8[($tmp1_i_i_i_i_i10)];
 $33=$368;
 $34=$369;
 var $370=$34;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($370) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 label=18;break;
 case 17: 
 var $372$0 = ___cxa_find_matching_catch(-1, -1); var $372$1 = tempRet0;
 var $373=$372$0;
 $49=$373;
 var $374=$372$1;
 $50=$374;
 var $375=$49;
 ___cxa_call_unexpected($375);
 throw "Reached an unreachable!";
 case 18: 
 var $377=$48;
 var $378=($377|0)!=0;
 if($378){label=19;break;}else{label=20;break;}
 case 19: 
 var $380=(($355)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=$48;
 $43=$381;
 $44=$382;
 $45=1;
 var $383=$43;
 var $384=$44;
 var $385=$45;
 $40=$383;
 $41=$384;
 $42=$385;
 var $386=$40;
 var $387=$41;
 var $388=$387;
 __ZdlPv($388);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=41;break;
 case 22: 
 var $411=(($395)|0);
 $2=$411;
 var $412=$2;
 var $413=$412;
 $1=$413;
 var $414=$1;
 var $415=(($414+4)|0);
 var $416=$__tmp_i_i_i14;
 $19=$415;
 $20=$416;
 var $417=$19;
 var $418=(($417+4)|0);
 var $419=HEAP8[($418)];
 var $420=(($419)&1);
 if($420){label=23;break;}else{label=26;break;}
 case 23: 
 var $422=(($417)|0);
 var $423=HEAP32[(($422)>>2)];
 var $424=$20;
 var $425=(($424+16)|0);
 $18=$425;
 var $426=$18;
 var $427=$426;
 var $428=$427;
 $8=$423;
 $9=$428;
 var $429=$11;
 var $430=$8;
 var $431=$9;
 var $tmp_i_i_i_i_i15=$7;
 var $tmp1_i_i_i_i_i16=$10;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i15)]=HEAP8[($tmp1_i_i_i_i_i16)];
 $5=$430;
 $6=$431;
 var $432=$6;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 label=26;break;
 case 25: 
 var $434$0 = ___cxa_find_matching_catch(-1, -1,0); var $434$1 = tempRet0;
 var $435=$434$0;
 $21=$435;
 var $436=$434$1;
 $22=$436;
 var $437=$21;
 ___cxa_call_unexpected($437);
 throw "Reached an unreachable!";
 case 26: 
 var $439=$20;
 var $440=($439|0)!=0;
 if($440){label=27;break;}else{label=28;break;}
 case 27: 
 var $442=(($417)|0);
 var $443=HEAP32[(($442)>>2)];
 var $444=$20;
 $15=$443;
 $16=$444;
 $17=1;
 var $445=$15;
 var $446=$16;
 var $447=$17;
 $12=$445;
 $13=$446;
 $14=$447;
 var $448=$12;
 var $449=$13;
 var $450=$449;
 __ZdlPv($450);
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=42;break;
 case 31: 
 var $453$0 = ___cxa_find_matching_catch(-1, -1); var $453$1 = tempRet0;
 var $454=$453$0;
 $174=$454;
 var $455=$453$1;
 $175=$455;
 $153=$__h;
 var $456=$153;
 $152=$456;
 var $457=$152;
 $150=$457;
 $151=0;
 var $458=$150;
 var $459=(($458)|0);
 $149=$459;
 var $460=$149;
 var $461=$460;
 $148=$461;
 var $462=$148;
 var $463=(($462)|0);
 var $464=HEAP32[(($463)>>2)];
 $__tmp_i_i_i=$464;
 var $465=$151;
 var $466=(($458)|0);
 $129=$466;
 var $467=$129;
 var $468=$467;
 $128=$468;
 var $469=$128;
 var $470=(($469)|0);
 HEAP32[(($470)>>2)]=$465;
 var $471=$__tmp_i_i_i;
 var $472=($471|0)!=0;
 if($472){label=32;break;}else{label=39;break;}
 case 32: 
 var $474=(($458)|0);
 $127=$474;
 var $475=$127;
 var $476=$475;
 $126=$476;
 var $477=$126;
 var $478=(($477+4)|0);
 var $479=$__tmp_i_i_i;
 $144=$478;
 $145=$479;
 var $480=$144;
 var $481=(($480+4)|0);
 var $482=HEAP8[($481)];
 var $483=(($482)&1);
 if($483){label=33;break;}else{label=36;break;}
 case 33: 
 var $485=(($480)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=$145;
 var $488=(($487+16)|0);
 $143=$488;
 var $489=$143;
 var $490=$489;
 var $491=$490;
 $133=$486;
 $134=$491;
 var $492=$136;
 var $493=$133;
 var $494=$134;
 var $tmp_i_i_i_i_i=$132;
 var $tmp1_i_i_i_i_i=$135;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $130=$493;
 $131=$494;
 var $495=$131;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($495) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=35;break; }
 case 34: 
 label=36;break;
 case 35: 
 var $497$0 = ___cxa_find_matching_catch(-1, -1,0); var $497$1 = tempRet0;
 var $498=$497$0;
 $146=$498;
 var $499=$497$1;
 $147=$499;
 var $500=$146;
 ___cxa_call_unexpected($500);
 throw "Reached an unreachable!";
 case 36: 
 var $502=$145;
 var $503=($502|0)!=0;
 if($503){label=37;break;}else{label=38;break;}
 case 37: 
 var $505=(($480)|0);
 var $506=HEAP32[(($505)>>2)];
 var $507=$145;
 $140=$506;
 $141=$507;
 $142=1;
 var $508=$140;
 var $509=$141;
 var $510=$142;
 $137=$508;
 $138=$509;
 $139=$510;
 var $511=$137;
 var $512=$138;
 var $513=$512;
 __ZdlPv($513);
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=42;break;
 case 41: 
 var $516=$__r;
 $156=$176;
 $157=$516;
 var $517=$156;
 var $518=$157;
 $154=$517;
 $155=$518;
 var $519=$154;
 var $520=(($519)|0);
 var $521=$155;
 HEAP32[(($520)>>2)]=$521;
 $161=$agg_result;
 $162=$176;
 $163=$__inserted;
 var $522=$161;
 var $523=$163;
 var $524=$162;
 $158=$522;
 $159=$524;
 $160=$523;
 var $525=$158;
 var $526=(($525)|0);
 var $527=$159;
 var $528=$526;
 var $529=$527;
 assert(4 % 1 === 0);HEAP32[(($528)>>2)]=HEAP32[(($529)>>2)];
 var $530=(($525+4)|0);
 var $531=$160;
 var $532=HEAP8[($531)];
 var $533=(($532)&1);
 var $534=($533&1);
 HEAP8[($530)]=$534;
 STACKTOP=sp;return;
 case 42: 
 var $536=$174;
 var $537=$175;
 var $538$0=$536;
 var $538$1=0;
 var $539$0=$538$0;
 var $539$1=$537;
 ___resumeException($539$0)
 var $541$0 = ___cxa_find_matching_catch(-1, -1,0); var $541$1 = tempRet0;
 var $542=$541$0;
 ___clang_call_terminate($542);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEC1ERKSA_($this,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$3;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEC2ERKSA_($4,$5);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEC2ERKSA_($this,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=(($4)|0);
 var $6=$3;
 var $7=(($6)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($5,$7);
 var $8=(($4+12)|0);
 var $9=$3;
 var $10=(($9+12)|0);
 var $11=HEAP32[(($10)>>2)];
 HEAP32[(($8)>>2)]=$11;
 STACKTOP=sp;return;
}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalISA_EERPNS_16__tree_node_baseIPvEESM_RKT_($this,$__parent,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37=sp;
 var $38;
 var $39;
 var $40=(sp)+(8);
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $__lhs_sz_i_i_i_i1=(sp)+(16);
 var $__rhs_sz_i_i_i_i2=(sp)+(24);
 var $__result_i_i_i_i3;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $122;
 var $123=(sp)+(32);
 var $124;
 var $125;
 var $126=(sp)+(40);
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $152;
 var $__lhs_sz_i_i_i_i=(sp)+(48);
 var $__rhs_sz_i_i_i_i=(sp)+(56);
 var $__result_i_i_i_i;
 var $153;
 var $154;
 var $155;
 var $156;
 var $157;
 var $158;
 var $159;
 var $160;
 var $161;
 var $162;
 var $163;
 var $164;
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $170;
 var $171;
 var $172;
 var $173;
 var $174;
 var $175;
 var $176;
 var $177;
 var $178;
 var $179;
 var $180;
 var $181;
 var $182;
 var $__nd;
 var $183=(sp)+(64);
 var $184=(sp)+(72);
 var $185=(sp)+(80);
 $180=$this;
 $181=$__parent;
 $182=$__v;
 var $186=$180;
 $178=$186;
 var $187=$178;
 $177=$187;
 var $188=$177;
 var $189=(($188+4)|0);
 $176=$189;
 var $190=$176;
 var $191=$190;
 $175=$191;
 var $192=$175;
 var $193=(($192)|0);
 $174=$193;
 var $194=$174;
 $173=$194;
 var $195=$173;
 var $196=$195;
 var $197=$196;
 var $198=$197;
 var $199=$198;
 var $200=(($199)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$201;
 $__nd=$202;
 var $203=$__nd;
 $88=$183;
 $89=-1;
 var $204=$88;
 var $205=$89;
 $86=$204;
 $87=$205;
 var $206=$86;
 var $207=(($206)|0);
 HEAP32[(($207)>>2)]=0;
 $85=$183;
 var $208=$85;
 var $209=($203|0)!=0;
 if($209){label=2;break;}else{label=64;break;}
 case 2: 
 label=3;break;
 case 3: 
 $3=$186;
 var $212=$3;
 var $213=(($212+8)|0);
 $2=$213;
 var $214=$2;
 var $215=$214;
 $1=$215;
 var $216=$1;
 var $217=$216;
 var $218=$182;
 var $219=$__nd;
 var $220=(($219+16)|0);
 $74=$217;
 $75=$218;
 $76=$220;
 var $221=$74;
 var $222=$221;
 var $223=$75;
 var $224=(($223)|0);
 var $225=(($224)|0);
 var $226=$76;
 var $227=(($226)|0);
 var $228=(($227)|0);
 $71=$222;
 $72=$225;
 $73=$228;
 var $229=$71;
 var $230=$72;
 var $231=$73;
 $69=$230;
 $70=$231;
 var $232=$69;
 var $233=$70;
 $65=$232;
 $66=$233;
 var $234=$65;
 $63=$234;
 var $235=$63;
 $62=$235;
 var $236=$62;
 var $237=(($236)|0);
 $61=$237;
 var $238=$61;
 var $239=$238;
 $60=$239;
 var $240=$60;
 var $241=(($240)|0);
 var $242=(($241)|0);
 var $243=$242;
 var $244=(($243)|0);
 var $245=$244;
 var $246=HEAP8[($245)];
 var $247=($246&255);
 var $248=$247&1;
 var $249=($248|0)!=0;
 if($249){label=4;break;}else{label=5;break;}
 case 4: 
 $56=$235;
 var $251=$56;
 var $252=(($251)|0);
 $55=$252;
 var $253=$55;
 var $254=$253;
 $54=$254;
 var $255=$54;
 var $256=(($255)|0);
 var $257=(($256)|0);
 var $258=$257;
 var $259=(($258+4)|0);
 var $260=HEAP32[(($259)>>2)];
 var $275=$260;label=6;break;
 case 5: 
 $59=$235;
 var $262=$59;
 var $263=(($262)|0);
 $58=$263;
 var $264=$58;
 var $265=$264;
 $57=$265;
 var $266=$57;
 var $267=(($266)|0);
 var $268=(($267)|0);
 var $269=$268;
 var $270=(($269)|0);
 var $271=$270;
 var $272=HEAP8[($271)];
 var $273=($272&255);
 var $274=$273>>1;
 var $275=$274;label=6;break;
 case 6: 
 var $275;
 HEAP32[(($__lhs_sz_i_i_i_i1)>>2)]=$275;
 var $276=$66;
 $50=$276;
 var $277=$50;
 $49=$277;
 var $278=$49;
 var $279=(($278)|0);
 $48=$279;
 var $280=$48;
 var $281=$280;
 $47=$281;
 var $282=$47;
 var $283=(($282)|0);
 var $284=(($283)|0);
 var $285=$284;
 var $286=(($285)|0);
 var $287=$286;
 var $288=HEAP8[($287)];
 var $289=($288&255);
 var $290=$289&1;
 var $291=($290|0)!=0;
 if($291){label=7;break;}else{label=8;break;}
 case 7: 
 $43=$277;
 var $293=$43;
 var $294=(($293)|0);
 $42=$294;
 var $295=$42;
 var $296=$295;
 $41=$296;
 var $297=$41;
 var $298=(($297)|0);
 var $299=(($298)|0);
 var $300=$299;
 var $301=(($300+4)|0);
 var $302=HEAP32[(($301)>>2)];
 var $317=$302;label=9;break;
 case 8: 
 $46=$277;
 var $304=$46;
 var $305=(($304)|0);
 $45=$305;
 var $306=$45;
 var $307=$306;
 $44=$307;
 var $308=$44;
 var $309=(($308)|0);
 var $310=(($309)|0);
 var $311=$310;
 var $312=(($311)|0);
 var $313=$312;
 var $314=HEAP8[($313)];
 var $315=($314&255);
 var $316=$315>>1;
 var $317=$316;label=9;break;
 case 9: 
 var $317;
 HEAP32[(($__rhs_sz_i_i_i_i2)>>2)]=$317;
 $17=$234;
 var $318=$17;
 $16=$318;
 var $319=$16;
 $15=$319;
 var $320=$15;
 var $321=(($320)|0);
 $14=$321;
 var $322=$14;
 var $323=$322;
 $13=$323;
 var $324=$13;
 var $325=(($324)|0);
 var $326=(($325)|0);
 var $327=$326;
 var $328=(($327)|0);
 var $329=$328;
 var $330=HEAP8[($329)];
 var $331=($330&255);
 var $332=$331&1;
 var $333=($332|0)!=0;
 if($333){label=10;break;}else{label=11;break;}
 case 10: 
 $7=$319;
 var $335=$7;
 var $336=(($335)|0);
 $6=$336;
 var $337=$6;
 var $338=$337;
 $5=$338;
 var $339=$5;
 var $340=(($339)|0);
 var $341=(($340)|0);
 var $342=$341;
 var $343=(($342+8)|0);
 var $344=HEAP32[(($343)>>2)];
 var $358=$344;label=12;break;
 case 11: 
 $12=$319;
 var $346=$12;
 var $347=(($346)|0);
 $11=$347;
 var $348=$11;
 var $349=$348;
 $10=$349;
 var $350=$10;
 var $351=(($350)|0);
 var $352=(($351)|0);
 var $353=$352;
 var $354=(($353+1)|0);
 var $355=(($354)|0);
 $9=$355;
 var $356=$9;
 $8=$356;
 var $357=$8;
 var $358=$357;label=12;break;
 case 12: 
 var $358;
 $4=$358;
 var $359=$4;
 var $360=$66;
 $31=$360;
 var $361=$31;
 $30=$361;
 var $362=$30;
 $29=$362;
 var $363=$29;
 var $364=(($363)|0);
 $28=$364;
 var $365=$28;
 var $366=$365;
 $27=$366;
 var $367=$27;
 var $368=(($367)|0);
 var $369=(($368)|0);
 var $370=$369;
 var $371=(($370)|0);
 var $372=$371;
 var $373=HEAP8[($372)];
 var $374=($373&255);
 var $375=$374&1;
 var $376=($375|0)!=0;
 if($376){label=13;break;}else{label=14;break;}
 case 13: 
 $21=$362;
 var $378=$21;
 var $379=(($378)|0);
 $20=$379;
 var $380=$20;
 var $381=$380;
 $19=$381;
 var $382=$19;
 var $383=(($382)|0);
 var $384=(($383)|0);
 var $385=$384;
 var $386=(($385+8)|0);
 var $387=HEAP32[(($386)>>2)];
 var $401=$387;label=15;break;
 case 14: 
 $26=$362;
 var $389=$26;
 var $390=(($389)|0);
 $25=$390;
 var $391=$25;
 var $392=$391;
 $24=$392;
 var $393=$24;
 var $394=(($393)|0);
 var $395=(($394)|0);
 var $396=$395;
 var $397=(($396+1)|0);
 var $398=(($397)|0);
 $23=$398;
 var $399=$23;
 $22=$399;
 var $400=$22;
 var $401=$400;label=15;break;
 case 15: 
 var $401;
 $18=$401;
 var $402=$18;
 $38=$__lhs_sz_i_i_i_i1;
 $39=$__rhs_sz_i_i_i_i2;
 var $403=$38;
 var $404=$39;
 var $tmp_i_i_i_i_i7=$37;
 var $tmp1_i_i_i_i_i8=$40;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i7)]=HEAP8[($tmp1_i_i_i_i_i8)];
 $35=$403;
 $36=$404;
 var $405=$36;
 var $406=$35;
 $32=$37;
 $33=$405;
 $34=$406;
 var $407=$32;
 var $408=$33;
 var $409=HEAP32[(($408)>>2)];
 var $410=$34;
 var $411=HEAP32[(($410)>>2)];
 var $412=($409>>>0)<($411>>>0);
 if($412){label=16;break;}else{label=17;break;}
 case 16: 
 var $414=$36;
 var $417=$414;label=18;break;
 case 17: 
 var $416=$35;
 var $417=$416;label=18;break;
 case 18: 
 var $417;
 var $418=HEAP32[(($417)>>2)];
 $51=$359;
 $52=$402;
 $53=$418;
 var $419=$51;
 var $420=$52;
 var $421=$53;
 var $422=(function() { try { __THREW__ = 0; return _memcmp($419,$420,$421) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=21;break; }
 case 19: 
 $__result_i_i_i_i3=$422;
 var $423=$__result_i_i_i_i3;
 var $424=($423|0)!=0;
 if($424){label=20;break;}else{label=22;break;}
 case 20: 
 var $426=$__result_i_i_i_i3;
 $64=$426;
 label=27;break;
 case 21: 
 var $428$0 = ___cxa_find_matching_catch(-1, -1); var $428$1 = tempRet0;
 var $429=$428$0;
 $67=$429;
 var $430=$428$1;
 $68=$430;
 var $431=$67;
 ___cxa_call_unexpected($431);
 throw "Reached an unreachable!";
 case 22: 
 var $433=HEAP32[(($__lhs_sz_i_i_i_i1)>>2)];
 var $434=HEAP32[(($__rhs_sz_i_i_i_i2)>>2)];
 var $435=($433>>>0)<($434>>>0);
 if($435){label=23;break;}else{label=24;break;}
 case 23: 
 $64=-1;
 label=27;break;
 case 24: 
 var $438=HEAP32[(($__lhs_sz_i_i_i_i1)>>2)];
 var $439=HEAP32[(($__rhs_sz_i_i_i_i2)>>2)];
 var $440=($438>>>0)>($439>>>0);
 if($440){label=25;break;}else{label=26;break;}
 case 25: 
 $64=1;
 label=27;break;
 case 26: 
 $64=0;
 label=27;break;
 case 27: 
 var $443=$64;
 var $444=($443|0)<0;
 if($444){label=28;break;}else{label=32;break;}
 case 28: 
 var $446=$__nd;
 var $447=$446;
 var $448=(($447)|0);
 var $449=HEAP32[(($448)>>2)];
 $79=$184;
 $80=-1;
 var $450=$79;
 var $451=$80;
 $77=$450;
 $78=$451;
 var $452=$77;
 var $453=(($452)|0);
 HEAP32[(($453)>>2)]=0;
 $81=$184;
 var $454=$81;
 var $455=($449|0)!=0;
 if($455){label=29;break;}else{label=30;break;}
 case 29: 
 var $457=$__nd;
 var $458=$457;
 var $459=(($458)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=$460;
 $__nd=$461;
 label=31;break;
 case 30: 
 var $463=$__nd;
 var $464=$463;
 var $465=$181;
 HEAP32[(($465)>>2)]=$464;
 var $466=$181;
 var $467=HEAP32[(($466)>>2)];
 var $468=$467;
 var $469=(($468)|0);
 $179=$469;
 label=65;break;
 case 31: 
 label=63;break;
 case 32: 
 $84=$186;
 var $472=$84;
 var $473=(($472+8)|0);
 $83=$473;
 var $474=$83;
 var $475=$474;
 $82=$475;
 var $476=$82;
 var $477=$476;
 var $478=$__nd;
 var $479=(($478+16)|0);
 var $480=$182;
 $160=$477;
 $161=$479;
 $162=$480;
 var $481=$160;
 var $482=$481;
 var $483=$161;
 var $484=(($483)|0);
 var $485=(($484)|0);
 var $486=$162;
 var $487=(($486)|0);
 var $488=(($487)|0);
 $157=$482;
 $158=$485;
 $159=$488;
 var $489=$157;
 var $490=$158;
 var $491=$159;
 $155=$490;
 $156=$491;
 var $492=$155;
 var $493=$156;
 $151=$492;
 $152=$493;
 var $494=$151;
 $149=$494;
 var $495=$149;
 $148=$495;
 var $496=$148;
 var $497=(($496)|0);
 $147=$497;
 var $498=$147;
 var $499=$498;
 $146=$499;
 var $500=$146;
 var $501=(($500)|0);
 var $502=(($501)|0);
 var $503=$502;
 var $504=(($503)|0);
 var $505=$504;
 var $506=HEAP8[($505)];
 var $507=($506&255);
 var $508=$507&1;
 var $509=($508|0)!=0;
 if($509){label=33;break;}else{label=34;break;}
 case 33: 
 $142=$495;
 var $511=$142;
 var $512=(($511)|0);
 $141=$512;
 var $513=$141;
 var $514=$513;
 $140=$514;
 var $515=$140;
 var $516=(($515)|0);
 var $517=(($516)|0);
 var $518=$517;
 var $519=(($518+4)|0);
 var $520=HEAP32[(($519)>>2)];
 var $535=$520;label=35;break;
 case 34: 
 $145=$495;
 var $522=$145;
 var $523=(($522)|0);
 $144=$523;
 var $524=$144;
 var $525=$524;
 $143=$525;
 var $526=$143;
 var $527=(($526)|0);
 var $528=(($527)|0);
 var $529=$528;
 var $530=(($529)|0);
 var $531=$530;
 var $532=HEAP8[($531)];
 var $533=($532&255);
 var $534=$533>>1;
 var $535=$534;label=35;break;
 case 35: 
 var $535;
 HEAP32[(($__lhs_sz_i_i_i_i)>>2)]=$535;
 var $536=$152;
 $136=$536;
 var $537=$136;
 $135=$537;
 var $538=$135;
 var $539=(($538)|0);
 $134=$539;
 var $540=$134;
 var $541=$540;
 $133=$541;
 var $542=$133;
 var $543=(($542)|0);
 var $544=(($543)|0);
 var $545=$544;
 var $546=(($545)|0);
 var $547=$546;
 var $548=HEAP8[($547)];
 var $549=($548&255);
 var $550=$549&1;
 var $551=($550|0)!=0;
 if($551){label=36;break;}else{label=37;break;}
 case 36: 
 $129=$537;
 var $553=$129;
 var $554=(($553)|0);
 $128=$554;
 var $555=$128;
 var $556=$555;
 $127=$556;
 var $557=$127;
 var $558=(($557)|0);
 var $559=(($558)|0);
 var $560=$559;
 var $561=(($560+4)|0);
 var $562=HEAP32[(($561)>>2)];
 var $577=$562;label=38;break;
 case 37: 
 $132=$537;
 var $564=$132;
 var $565=(($564)|0);
 $131=$565;
 var $566=$131;
 var $567=$566;
 $130=$567;
 var $568=$130;
 var $569=(($568)|0);
 var $570=(($569)|0);
 var $571=$570;
 var $572=(($571)|0);
 var $573=$572;
 var $574=HEAP8[($573)];
 var $575=($574&255);
 var $576=$575>>1;
 var $577=$576;label=38;break;
 case 38: 
 var $577;
 HEAP32[(($__rhs_sz_i_i_i_i)>>2)]=$577;
 $103=$494;
 var $578=$103;
 $102=$578;
 var $579=$102;
 $101=$579;
 var $580=$101;
 var $581=(($580)|0);
 $100=$581;
 var $582=$100;
 var $583=$582;
 $99=$583;
 var $584=$99;
 var $585=(($584)|0);
 var $586=(($585)|0);
 var $587=$586;
 var $588=(($587)|0);
 var $589=$588;
 var $590=HEAP8[($589)];
 var $591=($590&255);
 var $592=$591&1;
 var $593=($592|0)!=0;
 if($593){label=39;break;}else{label=40;break;}
 case 39: 
 $93=$579;
 var $595=$93;
 var $596=(($595)|0);
 $92=$596;
 var $597=$92;
 var $598=$597;
 $91=$598;
 var $599=$91;
 var $600=(($599)|0);
 var $601=(($600)|0);
 var $602=$601;
 var $603=(($602+8)|0);
 var $604=HEAP32[(($603)>>2)];
 var $618=$604;label=41;break;
 case 40: 
 $98=$579;
 var $606=$98;
 var $607=(($606)|0);
 $97=$607;
 var $608=$97;
 var $609=$608;
 $96=$609;
 var $610=$96;
 var $611=(($610)|0);
 var $612=(($611)|0);
 var $613=$612;
 var $614=(($613+1)|0);
 var $615=(($614)|0);
 $95=$615;
 var $616=$95;
 $94=$616;
 var $617=$94;
 var $618=$617;label=41;break;
 case 41: 
 var $618;
 $90=$618;
 var $619=$90;
 var $620=$152;
 $117=$620;
 var $621=$117;
 $116=$621;
 var $622=$116;
 $115=$622;
 var $623=$115;
 var $624=(($623)|0);
 $114=$624;
 var $625=$114;
 var $626=$625;
 $113=$626;
 var $627=$113;
 var $628=(($627)|0);
 var $629=(($628)|0);
 var $630=$629;
 var $631=(($630)|0);
 var $632=$631;
 var $633=HEAP8[($632)];
 var $634=($633&255);
 var $635=$634&1;
 var $636=($635|0)!=0;
 if($636){label=42;break;}else{label=43;break;}
 case 42: 
 $107=$622;
 var $638=$107;
 var $639=(($638)|0);
 $106=$639;
 var $640=$106;
 var $641=$640;
 $105=$641;
 var $642=$105;
 var $643=(($642)|0);
 var $644=(($643)|0);
 var $645=$644;
 var $646=(($645+8)|0);
 var $647=HEAP32[(($646)>>2)];
 var $661=$647;label=44;break;
 case 43: 
 $112=$622;
 var $649=$112;
 var $650=(($649)|0);
 $111=$650;
 var $651=$111;
 var $652=$651;
 $110=$652;
 var $653=$110;
 var $654=(($653)|0);
 var $655=(($654)|0);
 var $656=$655;
 var $657=(($656+1)|0);
 var $658=(($657)|0);
 $109=$658;
 var $659=$109;
 $108=$659;
 var $660=$108;
 var $661=$660;label=44;break;
 case 44: 
 var $661;
 $104=$661;
 var $662=$104;
 $124=$__lhs_sz_i_i_i_i;
 $125=$__rhs_sz_i_i_i_i;
 var $663=$124;
 var $664=$125;
 var $tmp_i_i_i_i_i=$123;
 var $tmp1_i_i_i_i_i=$126;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $121=$663;
 $122=$664;
 var $665=$122;
 var $666=$121;
 $118=$123;
 $119=$665;
 $120=$666;
 var $667=$118;
 var $668=$119;
 var $669=HEAP32[(($668)>>2)];
 var $670=$120;
 var $671=HEAP32[(($670)>>2)];
 var $672=($669>>>0)<($671>>>0);
 if($672){label=45;break;}else{label=46;break;}
 case 45: 
 var $674=$122;
 var $677=$674;label=47;break;
 case 46: 
 var $676=$121;
 var $677=$676;label=47;break;
 case 47: 
 var $677;
 var $678=HEAP32[(($677)>>2)];
 $137=$619;
 $138=$662;
 $139=$678;
 var $679=$137;
 var $680=$138;
 var $681=$139;
 var $682=(function() { try { __THREW__ = 0; return _memcmp($679,$680,$681) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=50;break; }
 case 48: 
 $__result_i_i_i_i=$682;
 var $683=$__result_i_i_i_i;
 var $684=($683|0)!=0;
 if($684){label=49;break;}else{label=51;break;}
 case 49: 
 var $686=$__result_i_i_i_i;
 $150=$686;
 label=56;break;
 case 50: 
 var $688$0 = ___cxa_find_matching_catch(-1, -1); var $688$1 = tempRet0;
 var $689=$688$0;
 $153=$689;
 var $690=$688$1;
 $154=$690;
 var $691=$153;
 ___cxa_call_unexpected($691);
 throw "Reached an unreachable!";
 case 51: 
 var $693=HEAP32[(($__lhs_sz_i_i_i_i)>>2)];
 var $694=HEAP32[(($__rhs_sz_i_i_i_i)>>2)];
 var $695=($693>>>0)<($694>>>0);
 if($695){label=52;break;}else{label=53;break;}
 case 52: 
 $150=-1;
 label=56;break;
 case 53: 
 var $698=HEAP32[(($__lhs_sz_i_i_i_i)>>2)];
 var $699=HEAP32[(($__rhs_sz_i_i_i_i)>>2)];
 var $700=($698>>>0)>($699>>>0);
 if($700){label=54;break;}else{label=55;break;}
 case 54: 
 $150=1;
 label=56;break;
 case 55: 
 $150=0;
 label=56;break;
 case 56: 
 var $703=$150;
 var $704=($703|0)<0;
 if($704){label=57;break;}else{label=61;break;}
 case 57: 
 var $706=$__nd;
 var $707=$706;
 var $708=(($707+4)|0);
 var $709=HEAP32[(($708)>>2)];
 $165=$185;
 $166=-1;
 var $710=$165;
 var $711=$166;
 $163=$710;
 $164=$711;
 var $712=$163;
 var $713=(($712)|0);
 HEAP32[(($713)>>2)]=0;
 $167=$185;
 var $714=$167;
 var $715=($709|0)!=0;
 if($715){label=58;break;}else{label=59;break;}
 case 58: 
 var $717=$__nd;
 var $718=$717;
 var $719=(($718+4)|0);
 var $720=HEAP32[(($719)>>2)];
 var $721=$720;
 $__nd=$721;
 label=60;break;
 case 59: 
 var $723=$__nd;
 var $724=$723;
 var $725=$181;
 HEAP32[(($725)>>2)]=$724;
 var $726=$181;
 var $727=HEAP32[(($726)>>2)];
 var $728=(($727+4)|0);
 $179=$728;
 label=65;break;
 case 60: 
 label=62;break;
 case 61: 
 var $731=$__nd;
 var $732=$731;
 var $733=$181;
 HEAP32[(($733)>>2)]=$732;
 var $734=$181;
 $179=$734;
 label=65;break;
 case 62: 
 label=63;break;
 case 63: 
 label=3;break;
 case 64: 
 $172=$186;
 var $738=$172;
 var $739=(($738+4)|0);
 $171=$739;
 var $740=$171;
 var $741=$740;
 $170=$741;
 var $742=$170;
 var $743=(($742)|0);
 $169=$743;
 var $744=$169;
 $168=$744;
 var $745=$168;
 var $746=$745;
 var $747=$746;
 var $748=$747;
 var $749=$748;
 var $750=$181;
 HEAP32[(($750)>>2)]=$749;
 var $751=$181;
 var $752=HEAP32[(($751)>>2)];
 var $753=$752;
 var $754=(($753)|0);
 $179=$754;
 label=65;break;
 case 65: 
 var $756=$179;
 STACKTOP=sp;return $756;
  default: assert(0, "bad label: " + label);
 }

}

// WARNING: content after a branch in a label, line: 15896
// WARNING: content after a branch in a label, line: 15898
// WARNING: content after a branch in a label, line: 15899
// WARNING: content after a branch in a label, line: 15900
// WARNING: content after a branch in a label, line: 15901
// WARNING: content after a branch in a label, line: 15902
// WARNING: content after a branch in a label, line: 15903
// WARNING: content after a branch in a label, line: 15904
// WARNING: content after a branch in a label, line: 15905
// WARNING: content after a branch in a label, line: 15906
// WARNING: content after a branch in a label, line: 15907
// WARNING: content after a branch in a label, line: 15908
// WARNING: content after a branch in a label, line: 15909
// WARNING: content after a branch in a label, line: 15910
// WARNING: content after a branch in a label, line: 15911
// WARNING: content after a branch in a label, line: 15912
// WARNING: content after a branch in a label, line: 15913
// WARNING: content after a branch in a label, line: 15914
// WARNING: content after a branch in a label, line: 15915
// WARNING: content after a branch in a label, line: 15916
// WARNING: content after a branch in a label, line: 15917
// WARNING: content after a branch in a label, line: 15918
// WARNING: content after a branch in a label, line: 15919
// WARNING: content after a branch in a label, line: 15920
// WARNING: content after a branch in a label, line: 15921
// WARNING: content after a branch in a label, line: 15922
// WARNING: content after a branch in a label, line: 15923
// WARNING: content after a branch in a label, line: 15924
// WARNING: content after a branch in a label, line: 15925
// WARNING: content after a branch in a label, line: 15926
// WARNING: content after a branch in a label, line: 15927
// WARNING: content after a branch in a label, line: 15928
// WARNING: content after a branch in a label, line: 15929

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__construct_nodeERKSA_($agg_result,$this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+520)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 var $8;
 var $9;
 var $10=(sp)+(8);
 var $11=(sp)+(16);
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $__tmp_i_i_i32;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35=(sp)+(24);
 var $36;
 var $37;
 var $38=(sp)+(32);
 var $39=(sp)+(40);
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $__tmp_i_i_i26;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $__t_i_i_i;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71=(sp)+(48);
 var $72=(sp)+(56);
 var $73;
 var $74;
 var $75=(sp)+(64);
 var $76=(sp)+(72);
 var $__t21_i_i_i17=(sp)+(80);
 var $77;
 var $78;
 var $79=(sp)+(88);
 var $80;
 var $81;
 var $82=(sp)+(96);
 var $__u1_i=(sp)+(104);
 var $83;
 var $84=(sp)+(112);
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96=(sp)+(120);
 var $97;
 var $98;
 var $99=(sp)+(128);
 var $100=(sp)+(136);
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $__tmp_i_i_i15_i;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $122;
 var $__t_i_i_i4_i;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132=(sp)+(144);
 var $133=(sp)+(152);
 var $134;
 var $135;
 var $136=(sp)+(160);
 var $137=(sp)+(168);
 var $__t21_i_i_i5_i=(sp)+(176);
 var $138;
 var $139;
 var $140=(sp)+(184);
 var $141;
 var $142;
 var $143=(sp)+(192);
 var $__u1_i6_i=(sp)+(200);
 var $144;
 var $145=(sp)+(208);
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $152;
 var $153;
 var $154;
 var $155;
 var $156;
 var $157=(sp)+(216);
 var $158;
 var $159;
 var $160=(sp)+(224);
 var $161=(sp)+(232);
 var $162;
 var $163;
 var $164;
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $170;
 var $171;
 var $172;
 var $173;
 var $174;
 var $175;
 var $176;
 var $__tmp_i_i_i_i;
 var $177;
 var $178;
 var $179;
 var $180;
 var $181;
 var $182;
 var $183;
 var $__t_i_i_i_i;
 var $184;
 var $185;
 var $186;
 var $187;
 var $188;
 var $189;
 var $190;
 var $191;
 var $192;
 var $193=(sp)+(240);
 var $194=(sp)+(248);
 var $195;
 var $196;
 var $197=(sp)+(256);
 var $198=(sp)+(264);
 var $__t21_i_i_i_i=(sp)+(272);
 var $199;
 var $200;
 var $201=(sp)+(280);
 var $202;
 var $203;
 var $204=(sp)+(288);
 var $__u1_i_i=(sp)+(296);
 var $205;
 var $206=(sp)+(304);
 var $207;
 var $208;
 var $209;
 var $210;
 var $211;
 var $212=(sp)+(312);
 var $213=(sp)+(320);
 var $214=(sp)+(336);
 var $215;
 var $216;
 var $217;
 var $218;
 var $219;
 var $220;
 var $221;
 var $222;
 var $223;
 var $224;
 var $225;
 var $226;
 var $227;
 var $228;
 var $229=(sp)+(344);
 var $230;
 var $231;
 var $232=(sp)+(352);
 var $233=(sp)+(360);
 var $234;
 var $235;
 var $236;
 var $237;
 var $238;
 var $239;
 var $240;
 var $241;
 var $242;
 var $243;
 var $244;
 var $245;
 var $246;
 var $247;
 var $248;
 var $__tmp_i_i_i2;
 var $249;
 var $250;
 var $251;
 var $252;
 var $253;
 var $254;
 var $255;
 var $256;
 var $257;
 var $258;
 var $259;
 var $260=(sp)+(368);
 var $261=(sp)+(376);
 var $262;
 var $263;
 var $264=(sp)+(384);
 var $265=(sp)+(392);
 var $__t21_i_i_i=(sp)+(400);
 var $266;
 var $267;
 var $268=(sp)+(408);
 var $269;
 var $270;
 var $271=(sp)+(416);
 var $272=(sp)+(424);
 var $__d1_i=(sp)+(432);
 var $273;
 var $274;
 var $275=(sp)+(440);
 var $276;
 var $277;
 var $278;
 var $279;
 var $280;
 var $281;
 var $282=(sp)+(448);
 var $283;
 var $284;
 var $285=(sp)+(456);
 var $286=(sp)+(464);
 var $287;
 var $288;
 var $289;
 var $290;
 var $291;
 var $292;
 var $293;
 var $294;
 var $295;
 var $296;
 var $297;
 var $298;
 var $299;
 var $300;
 var $301;
 var $__tmp_i_i_i;
 var $302;
 var $303;
 var $304;
 var $305;
 var $306;
 var $307;
 var $308;
 var $309;
 var $310;
 var $311;
 var $312;
 var $313;
 var $314;
 var $315;
 var $316;
 var $317;
 var $__na;
 var $__h=(sp)+(472);
 var $318=(sp)+(488);
 var $319;
 var $320;
 var $321=(sp)+(496);
 var $322=(sp)+(504);
 var $323;
 $316=$this;
 $317=$__v;
 var $324=$316;
 $315=$324;
 var $325=$315;
 var $326=(($325+4)|0);
 $314=$326;
 var $327=$314;
 var $328=$327;
 $313=$328;
 var $329=$313;
 var $330=$329;
 $__na=$330;
 var $331=$__na;
 $311=$331;
 $312=1;
 var $332=$311;
 var $333=$312;
 $308=$332;
 $309=$333;
 $310=0;
 var $334=$308;
 var $335=$309;
 var $336=($335<<5);
 var $337=__Znwj($336);
 var $338=$337;
 var $339=$__na;
 $306=$318;
 $307=$339;
 var $340=$306;
 var $341=$307;
 $304=$340;
 $305=$341;
 var $342=$304;
 var $343=(($342)|0);
 var $344=$305;
 HEAP32[(($343)>>2)]=$344;
 var $345=(($342+4)|0);
 HEAP8[($345)]=0;
 var $tmp=$275;
 var $tmp1=$318;
 assert(8 % 1 === 0);(_memcpy($tmp, $tmp1, 8)|0);
 $273=$__h;
 $274=$338;
 var $346=$273;
 var $347=$274;
 var $tmp_i=$__d1_i;
 var $tmp2_i=$275;
 assert(8 % 1 === 0);(_memcpy($tmp_i, $tmp2_i, 8)|0);
 $270=$346;
 HEAP32[(($271)>>2)]=$347;
 var $348=$270;
 var $349=(($348)|0);
 $269=$271;
 var $350=$269;
 var $351=HEAP32[(($350)>>2)];
 $255=$__d1_i;
 var $352=$255;
 var $353=$272;
 var $354=$352;
 assert(8 % 1 === 0);HEAP32[(($353)>>2)]=HEAP32[(($354)>>2)];HEAP32[((($353)+(4))>>2)]=HEAP32[((($354)+(4))>>2)];
 var $tmp_i_i=$268;
 var $tmp1_i_i=$272;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp1_i_i, 8)|0);
 $266=$349;
 $267=$351;
 var $355=$266;
 var $356=$267;
 var $tmp_i_i_i=$__t21_i_i_i;
 var $tmp2_i_i_i=$268;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp2_i_i_i, 8)|0);
 $263=$355;
 HEAP32[(($264)>>2)]=$356;
 var $357=$263;
 var $358=$357;
 $262=$264;
 var $359=$262;
 var $360=HEAP32[(($359)>>2)];
 $256=$__t21_i_i_i;
 var $361=$256;
 var $362=$265;
 var $363=$361;
 assert(8 % 1 === 0);HEAP32[(($362)>>2)]=HEAP32[(($363)>>2)];HEAP32[((($362)+(4))>>2)]=HEAP32[((($363)+(4))>>2)];
 var $tmp_i_i_i_i=$261;
 var $tmp1_i_i_i_i=$265;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp1_i_i_i_i, 8)|0);
 $259=$358;
 HEAP32[(($260)>>2)]=$360;
 var $364=$259;
 var $365=(($364)|0);
 $258=$260;
 var $366=$258;
 var $367=HEAP32[(($366)>>2)];
 HEAP32[(($365)>>2)]=$367;
 var $368=(($364+4)|0);
 $257=$261;
 var $369=$257;
 var $370=$368;
 var $371=$369;
 assert(8 % 1 === 0);HEAP32[(($370)>>2)]=HEAP32[(($371)>>2)];HEAP32[((($370)+(4))>>2)]=HEAP32[((($371)+(4))>>2)];
 var $372=$__na;
 $254=$__h;
 var $373=$254;
 var $374=(($373)|0);
 $253=$374;
 var $375=$253;
 var $376=$375;
 $252=$376;
 var $377=$252;
 var $378=(($377)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=(($379+16)|0);
 $251=$380;
 var $381=$251;
 var $382=$381;
 var $383=$382;
 var $384=$317;
 $220=$372;
 $221=$383;
 $222=$384;
 var $385=$221;
 var $386=$385;
 var $387=($386|0)==0;
 if($387){var $391=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $389=$386;
 var $390=$222;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEC1ERKS9_($389,$390) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=34;break; }
 case 3: 
 var $391=$389;label=4;break;
 case 4: 
 var $391;
 label=5;break;
 case 5: 
 $219=$__h;
 var $393=$219;
 var $394=(($393)|0);
 $218=$394;
 var $395=$218;
 var $396=$395;
 $217=$396;
 var $397=$217;
 var $398=(($397+4)|0);
 var $399=(($398+4)|0);
 HEAP8[($399)]=1;
 $211=$__h;
 var $400=$211;
 $209=$214;
 $210=$400;
 var $401=$209;
 var $402=$210;
 $207=$401;
 $208=$402;
 var $403=$207;
 var $404=(($403)|0);
 var $405=$208;
 HEAP32[(($404)>>2)]=$405;
 var $tmp_i8=$206;
 var $tmp1_i=$214;
 assert(4 % 1 === 0);HEAP8[($tmp_i8)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i8)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i8)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i8)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $205=$213;
 var $406=$205;
 var $tmp_i_i9=$__u1_i_i;
 var $tmp2_i_i=$206;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i9)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i9)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i9)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i9)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $203=$406;
 var $407=$203;
 var $408=(($407)|0);
 $202=$__u1_i_i;
 var $409=$202;
 var $410=(($409)|0);
 var $411=HEAP32[(($410)>>2)];
 $183=$411;
 var $412=$183;
 var $413=(($412)|0);
 $182=$413;
 var $414=$182;
 var $415=$414;
 $181=$415;
 var $416=$181;
 var $417=(($416)|0);
 var $418=HEAP32[(($417)>>2)];
 $__t_i_i_i_i=$418;
 var $419=(($412)|0);
 $180=$419;
 var $420=$180;
 var $421=$420;
 $179=$421;
 var $422=$179;
 var $423=(($422)|0);
 HEAP32[(($423)>>2)]=0;
 var $424=$__t_i_i_i_i;
 $184=$__u1_i_i;
 var $425=$184;
 var $426=(($425)|0);
 var $427=HEAP32[(($426)>>2)];
 $187=$427;
 var $428=$187;
 var $429=(($428)|0);
 $186=$429;
 var $430=$186;
 var $431=$430;
 $185=$431;
 var $432=$185;
 var $433=(($432+4)|0);
 $188=$433;
 var $434=$188;
 var $435=$204;
 var $436=$434;
 assert(8 % 1 === 0);HEAP32[(($435)>>2)]=HEAP32[(($436)>>2)];HEAP32[((($435)+(4))>>2)]=HEAP32[((($436)+(4))>>2)];
 var $tmp_i_i_i10=$201;
 var $tmp1_i_i_i=$204;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i10, $tmp1_i_i_i, 8)|0);
 $199=$408;
 $200=$424;
 var $437=$199;
 var $438=$200;
 var $tmp_i_i_i_i11=$__t21_i_i_i_i;
 var $tmp2_i_i_i_i=$201;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i11, $tmp2_i_i_i_i, 8)|0);
 $196=$437;
 HEAP32[(($197)>>2)]=$438;
 var $439=$196;
 var $440=$439;
 $195=$197;
 var $441=$195;
 var $442=HEAP32[(($441)>>2)];
 $189=$__t21_i_i_i_i;
 var $443=$189;
 var $444=$198;
 var $445=$443;
 assert(8 % 1 === 0);HEAP32[(($444)>>2)]=HEAP32[(($445)>>2)];HEAP32[((($444)+(4))>>2)]=HEAP32[((($445)+(4))>>2)];
 var $tmp_i_i_i_i_i12=$194;
 var $tmp1_i_i_i_i_i13=$198;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i_i12, $tmp1_i_i_i_i_i13, 8)|0);
 $192=$440;
 HEAP32[(($193)>>2)]=$442;
 var $446=$192;
 var $447=(($446)|0);
 $191=$193;
 var $448=$191;
 var $449=HEAP32[(($448)>>2)];
 HEAP32[(($447)>>2)]=$449;
 var $450=(($446+4)|0);
 $190=$194;
 var $451=$190;
 var $452=$450;
 var $453=$451;
 assert(8 % 1 === 0);HEAP32[(($452)>>2)]=HEAP32[(($453)>>2)];HEAP32[((($452)+(4))>>2)]=HEAP32[((($453)+(4))>>2)];
 $150=$213;
 var $454=$150;
 $148=$212;
 $149=$454;
 var $455=$148;
 var $456=$149;
 $146=$455;
 $147=$456;
 var $457=$146;
 var $458=(($457)|0);
 var $459=$147;
 HEAP32[(($458)>>2)]=$459;
 var $tmp2_i14=$145;
 var $tmp3_i=$212;
 assert(4 % 1 === 0);HEAP8[($tmp2_i14)]=HEAP8[($tmp3_i)];HEAP8[((($tmp2_i14)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp2_i14)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp2_i14)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
 $144=$322;
 var $460=$144;
 var $tmp_i7_i=$__u1_i6_i;
 var $tmp2_i8_i=$145;
 assert(4 % 1 === 0);HEAP8[($tmp_i7_i)]=HEAP8[($tmp2_i8_i)];HEAP8[((($tmp_i7_i)+(1))|0)]=HEAP8[((($tmp2_i8_i)+(1))|0)];HEAP8[((($tmp_i7_i)+(2))|0)]=HEAP8[((($tmp2_i8_i)+(2))|0)];HEAP8[((($tmp_i7_i)+(3))|0)]=HEAP8[((($tmp2_i8_i)+(3))|0)];
 $142=$460;
 var $461=$142;
 var $462=(($461)|0);
 $141=$__u1_i6_i;
 var $463=$141;
 var $464=(($463)|0);
 var $465=HEAP32[(($464)>>2)];
 $122=$465;
 var $466=$122;
 var $467=(($466)|0);
 $121=$467;
 var $468=$121;
 var $469=$468;
 $120=$469;
 var $470=$120;
 var $471=(($470)|0);
 var $472=HEAP32[(($471)>>2)];
 $__t_i_i_i4_i=$472;
 var $473=(($466)|0);
 $119=$473;
 var $474=$119;
 var $475=$474;
 $118=$475;
 var $476=$118;
 var $477=(($476)|0);
 HEAP32[(($477)>>2)]=0;
 var $478=$__t_i_i_i4_i;
 $123=$__u1_i6_i;
 var $479=$123;
 var $480=(($479)|0);
 var $481=HEAP32[(($480)>>2)];
 $126=$481;
 var $482=$126;
 var $483=(($482)|0);
 $125=$483;
 var $484=$125;
 var $485=$484;
 $124=$485;
 var $486=$124;
 var $487=(($486+4)|0);
 $127=$487;
 var $488=$127;
 var $489=$143;
 var $490=$488;
 assert(8 % 1 === 0);HEAP32[(($489)>>2)]=HEAP32[(($490)>>2)];HEAP32[((($489)+(4))>>2)]=HEAP32[((($490)+(4))>>2)];
 var $tmp_i_i9_i=$140;
 var $tmp1_i_i10_i=$143;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i9_i, $tmp1_i_i10_i, 8)|0);
 $138=$462;
 $139=$478;
 var $491=$138;
 var $492=$139;
 var $tmp_i_i_i11_i=$__t21_i_i_i5_i;
 var $tmp2_i_i_i12_i=$140;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i11_i, $tmp2_i_i_i12_i, 8)|0);
 $135=$491;
 HEAP32[(($136)>>2)]=$492;
 var $493=$135;
 var $494=$493;
 $134=$136;
 var $495=$134;
 var $496=HEAP32[(($495)>>2)];
 $128=$__t21_i_i_i5_i;
 var $497=$128;
 var $498=$137;
 var $499=$497;
 assert(8 % 1 === 0);HEAP32[(($498)>>2)]=HEAP32[(($499)>>2)];HEAP32[((($498)+(4))>>2)]=HEAP32[((($499)+(4))>>2)];
 var $tmp_i_i_i_i13_i=$133;
 var $tmp1_i_i_i_i14_i=$137;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i13_i, $tmp1_i_i_i_i14_i, 8)|0);
 $131=$494;
 HEAP32[(($132)>>2)]=$496;
 var $500=$131;
 var $501=(($500)|0);
 $130=$132;
 var $502=$130;
 var $503=HEAP32[(($502)>>2)];
 HEAP32[(($501)>>2)]=$503;
 var $504=(($500+4)|0);
 $129=$133;
 var $505=$129;
 var $506=$504;
 var $507=$505;
 assert(8 % 1 === 0);HEAP32[(($506)>>2)]=HEAP32[(($507)>>2)];HEAP32[((($506)+(4))>>2)]=HEAP32[((($507)+(4))>>2)];
 $117=$213;
 var $508=$117;
 $116=$508;
 var $509=$116;
 $114=$509;
 $115=0;
 var $510=$114;
 var $511=(($510)|0);
 $113=$511;
 var $512=$113;
 var $513=$512;
 $112=$513;
 var $514=$112;
 var $515=(($514)|0);
 var $516=HEAP32[(($515)>>2)];
 $__tmp_i_i_i15_i=$516;
 var $517=$115;
 var $518=(($510)|0);
 $93=$518;
 var $519=$93;
 var $520=$519;
 $92=$520;
 var $521=$92;
 var $522=(($521)|0);
 HEAP32[(($522)>>2)]=$517;
 var $523=$__tmp_i_i_i15_i;
 var $524=($523|0)!=0;
 if($524){label=6;break;}else{label=13;break;}
 case 6: 
 var $526=(($510)|0);
 $91=$526;
 var $527=$91;
 var $528=$527;
 $90=$528;
 var $529=$90;
 var $530=(($529+4)|0);
 var $531=$__tmp_i_i_i15_i;
 $108=$530;
 $109=$531;
 var $532=$108;
 var $533=(($532+4)|0);
 var $534=HEAP8[($533)];
 var $535=(($534)&1);
 if($535){label=7;break;}else{label=10;break;}
 case 7: 
 var $537=(($532)|0);
 var $538=HEAP32[(($537)>>2)];
 var $539=$109;
 var $540=(($539+16)|0);
 $107=$540;
 var $541=$107;
 var $542=$541;
 var $543=$542;
 $97=$538;
 $98=$543;
 var $544=$100;
 var $545=$97;
 var $546=$98;
 var $tmp_i_i_i_i_i16_i=$96;
 var $tmp1_i_i_i_i_i17_i=$99;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i16_i)]=HEAP8[($tmp1_i_i_i_i_i17_i)];
 $94=$545;
 $95=$546;
 var $547=$95;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($547) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 label=10;break;
 case 9: 
 var $549$0 = ___cxa_find_matching_catch(-1, -1); var $549$1 = tempRet0;
 var $550=$549$0;
 $110=$550;
 var $551=$549$1;
 $111=$551;
 var $552=$110;
 ___cxa_call_unexpected($552);
 throw "Reached an unreachable!";
 case 10: 
 var $554=$109;
 var $555=($554|0)!=0;
 if($555){label=11;break;}else{label=12;break;}
 case 11: 
 var $557=(($532)|0);
 var $558=HEAP32[(($557)>>2)];
 var $559=$109;
 $104=$558;
 $105=$559;
 $106=1;
 var $560=$104;
 var $561=$105;
 var $562=$106;
 $101=$560;
 $102=$561;
 $103=$562;
 var $563=$101;
 var $564=$102;
 var $565=$564;
 __ZdlPv($565);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 $89=$322;
 var $567=$89;
 $87=$321;
 $88=$567;
 var $568=$87;
 var $569=$88;
 $85=$568;
 $86=$569;
 var $570=$85;
 var $571=(($570)|0);
 var $572=$86;
 HEAP32[(($571)>>2)]=$572;
 label=15;break;
 case 15: 
 var $tmp15=$84;
 var $tmp16=$321;
 assert(4 % 1 === 0);HEAP8[($tmp15)]=HEAP8[($tmp16)];HEAP8[((($tmp15)+(1))|0)]=HEAP8[((($tmp16)+(1))|0)];HEAP8[((($tmp15)+(2))|0)]=HEAP8[((($tmp16)+(2))|0)];HEAP8[((($tmp15)+(3))|0)]=HEAP8[((($tmp16)+(3))|0)];
 $83=$agg_result;
 var $574=$83;
 var $tmp_i18=$__u1_i;
 var $tmp2_i19=$84;
 assert(4 % 1 === 0);HEAP8[($tmp_i18)]=HEAP8[($tmp2_i19)];HEAP8[((($tmp_i18)+(1))|0)]=HEAP8[((($tmp2_i19)+(1))|0)];HEAP8[((($tmp_i18)+(2))|0)]=HEAP8[((($tmp2_i19)+(2))|0)];HEAP8[((($tmp_i18)+(3))|0)]=HEAP8[((($tmp2_i19)+(3))|0)];
 $81=$574;
 var $575=$81;
 var $576=(($575)|0);
 $80=$__u1_i;
 var $577=$80;
 var $578=(($577)|0);
 var $579=HEAP32[(($578)>>2)];
 $61=$579;
 var $580=$61;
 var $581=(($580)|0);
 $60=$581;
 var $582=$60;
 var $583=$582;
 $59=$583;
 var $584=$59;
 var $585=(($584)|0);
 var $586=HEAP32[(($585)>>2)];
 $__t_i_i_i=$586;
 var $587=(($580)|0);
 $58=$587;
 var $588=$58;
 var $589=$588;
 $57=$589;
 var $590=$57;
 var $591=(($590)|0);
 HEAP32[(($591)>>2)]=0;
 var $592=$__t_i_i_i;
 $62=$__u1_i;
 var $593=$62;
 var $594=(($593)|0);
 var $595=HEAP32[(($594)>>2)];
 $65=$595;
 var $596=$65;
 var $597=(($596)|0);
 $64=$597;
 var $598=$64;
 var $599=$598;
 $63=$599;
 var $600=$63;
 var $601=(($600+4)|0);
 $66=$601;
 var $602=$66;
 var $603=$82;
 var $604=$602;
 assert(8 % 1 === 0);HEAP32[(($603)>>2)]=HEAP32[(($604)>>2)];HEAP32[((($603)+(4))>>2)]=HEAP32[((($604)+(4))>>2)];
 var $tmp_i_i20=$79;
 var $tmp1_i_i21=$82;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i20, $tmp1_i_i21, 8)|0);
 $77=$576;
 $78=$592;
 var $605=$77;
 var $606=$78;
 var $tmp_i_i_i22=$__t21_i_i_i17;
 var $tmp2_i_i_i23=$79;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i22, $tmp2_i_i_i23, 8)|0);
 $74=$605;
 HEAP32[(($75)>>2)]=$606;
 var $607=$74;
 var $608=$607;
 $73=$75;
 var $609=$73;
 var $610=HEAP32[(($609)>>2)];
 $67=$__t21_i_i_i17;
 var $611=$67;
 var $612=$76;
 var $613=$611;
 assert(8 % 1 === 0);HEAP32[(($612)>>2)]=HEAP32[(($613)>>2)];HEAP32[((($612)+(4))>>2)]=HEAP32[((($613)+(4))>>2)];
 var $tmp_i_i_i_i24=$72;
 var $tmp1_i_i_i_i25=$76;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i24, $tmp1_i_i_i_i25, 8)|0);
 $70=$608;
 HEAP32[(($71)>>2)]=$610;
 var $614=$70;
 var $615=(($614)|0);
 $69=$71;
 var $616=$69;
 var $617=HEAP32[(($616)>>2)];
 HEAP32[(($615)>>2)]=$617;
 var $618=(($614+4)|0);
 $68=$72;
 var $619=$68;
 var $620=$618;
 var $621=$619;
 assert(8 % 1 === 0);HEAP32[(($620)>>2)]=HEAP32[(($621)>>2)];HEAP32[((($620)+(4))>>2)]=HEAP32[((($621)+(4))>>2)];
 label=16;break;
 case 16: 
 $56=$322;
 var $623=$56;
 $55=$623;
 var $624=$55;
 $53=$624;
 $54=0;
 var $625=$53;
 var $626=(($625)|0);
 $52=$626;
 var $627=$52;
 var $628=$627;
 $51=$628;
 var $629=$51;
 var $630=(($629)|0);
 var $631=HEAP32[(($630)>>2)];
 $__tmp_i_i_i26=$631;
 var $632=$54;
 var $633=(($625)|0);
 $32=$633;
 var $634=$32;
 var $635=$634;
 $31=$635;
 var $636=$31;
 var $637=(($636)|0);
 HEAP32[(($637)>>2)]=$632;
 var $638=$__tmp_i_i_i26;
 var $639=($638|0)!=0;
 if($639){label=17;break;}else{label=24;break;}
 case 17: 
 var $641=(($625)|0);
 $30=$641;
 var $642=$30;
 var $643=$642;
 $29=$643;
 var $644=$29;
 var $645=(($644+4)|0);
 var $646=$__tmp_i_i_i26;
 $47=$645;
 $48=$646;
 var $647=$47;
 var $648=(($647+4)|0);
 var $649=HEAP8[($648)];
 var $650=(($649)&1);
 if($650){label=18;break;}else{label=21;break;}
 case 18: 
 var $652=(($647)|0);
 var $653=HEAP32[(($652)>>2)];
 var $654=$48;
 var $655=(($654+16)|0);
 $46=$655;
 var $656=$46;
 var $657=$656;
 var $658=$657;
 $36=$653;
 $37=$658;
 var $659=$39;
 var $660=$36;
 var $661=$37;
 var $tmp_i_i_i_i_i27=$35;
 var $tmp1_i_i_i_i_i28=$38;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i27)]=HEAP8[($tmp1_i_i_i_i_i28)];
 $33=$660;
 $34=$661;
 var $662=$34;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($662) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=20;break; }
 case 19: 
 label=21;break;
 case 20: 
 var $664$0 = ___cxa_find_matching_catch(-1, -1); var $664$1 = tempRet0;
 var $665=$664$0;
 $49=$665;
 var $666=$664$1;
 $50=$666;
 var $667=$49;
 ___cxa_call_unexpected($667);
 throw "Reached an unreachable!";
 case 21: 
 var $669=$48;
 var $670=($669|0)!=0;
 if($670){label=22;break;}else{label=23;break;}
 case 22: 
 var $672=(($647)|0);
 var $673=HEAP32[(($672)>>2)];
 var $674=$48;
 $43=$673;
 $44=$674;
 $45=1;
 var $675=$43;
 var $676=$44;
 var $677=$45;
 $40=$675;
 $41=$676;
 $42=$677;
 var $678=$40;
 var $679=$41;
 var $680=$679;
 __ZdlPv($680);
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 $323=1;
 $28=$__h;
 var $682=$28;
 $27=$682;
 var $683=$27;
 $25=$683;
 $26=0;
 var $684=$25;
 var $685=(($684)|0);
 $24=$685;
 var $686=$24;
 var $687=$686;
 $23=$687;
 var $688=$23;
 var $689=(($688)|0);
 var $690=HEAP32[(($689)>>2)];
 $__tmp_i_i_i32=$690;
 var $691=$26;
 var $692=(($684)|0);
 $4=$692;
 var $693=$4;
 var $694=$693;
 $3=$694;
 var $695=$3;
 var $696=(($695)|0);
 HEAP32[(($696)>>2)]=$691;
 var $697=$__tmp_i_i_i32;
 var $698=($697|0)!=0;
 if($698){label=26;break;}else{label=33;break;}
 case 26: 
 var $700=(($684)|0);
 $2=$700;
 var $701=$2;
 var $702=$701;
 $1=$702;
 var $703=$1;
 var $704=(($703+4)|0);
 var $705=$__tmp_i_i_i32;
 $19=$704;
 $20=$705;
 var $706=$19;
 var $707=(($706+4)|0);
 var $708=HEAP8[($707)];
 var $709=(($708)&1);
 if($709){label=27;break;}else{label=30;break;}
 case 27: 
 var $711=(($706)|0);
 var $712=HEAP32[(($711)>>2)];
 var $713=$20;
 var $714=(($713+16)|0);
 $18=$714;
 var $715=$18;
 var $716=$715;
 var $717=$716;
 $8=$712;
 $9=$717;
 var $718=$11;
 var $719=$8;
 var $720=$9;
 var $tmp_i_i_i_i_i33=$7;
 var $tmp1_i_i_i_i_i34=$10;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i33)]=HEAP8[($tmp1_i_i_i_i_i34)];
 $5=$719;
 $6=$720;
 var $721=$6;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($721) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 label=30;break;
 case 29: 
 var $723$0 = ___cxa_find_matching_catch(-1, -1); var $723$1 = tempRet0;
 var $724=$723$0;
 $21=$724;
 var $725=$723$1;
 $22=$725;
 var $726=$21;
 ___cxa_call_unexpected($726);
 throw "Reached an unreachable!";
 case 30: 
 var $728=$20;
 var $729=($728|0)!=0;
 if($729){label=31;break;}else{label=32;break;}
 case 31: 
 var $731=(($706)|0);
 var $732=HEAP32[(($731)>>2)];
 var $733=$20;
 $15=$732;
 $16=$733;
 $17=1;
 var $734=$15;
 var $735=$16;
 var $736=$17;
 $12=$734;
 $13=$735;
 $14=$736;
 var $737=$12;
 var $738=$13;
 var $739=$738;
 __ZdlPv($739);
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 STACKTOP=sp;return;
 case 34: 
 var $741$0 = ___cxa_find_matching_catch(-1, -1); var $741$1 = tempRet0;
 var $742=$741$0;
 $319=$742;
 var $743=$741$1;
 $320=$743;
 label=44;break;
 case 35: 
 var $766=(($750)|0);
 $224=$766;
 var $767=$224;
 var $768=$767;
 $223=$768;
 var $769=$223;
 var $770=(($769+4)|0);
 var $771=$__tmp_i_i_i2;
 $241=$770;
 $242=$771;
 var $772=$241;
 var $773=(($772+4)|0);
 var $774=HEAP8[($773)];
 var $775=(($774)&1);
 if($775){label=36;break;}else{label=39;break;}
 case 36: 
 var $777=(($772)|0);
 var $778=HEAP32[(($777)>>2)];
 var $779=$242;
 var $780=(($779+16)|0);
 $240=$780;
 var $781=$240;
 var $782=$781;
 var $783=$782;
 $230=$778;
 $231=$783;
 var $784=$233;
 var $785=$230;
 var $786=$231;
 var $tmp_i_i_i_i_i3=$229;
 var $tmp1_i_i_i_i_i4=$232;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i3)]=HEAP8[($tmp1_i_i_i_i_i4)];
 $227=$785;
 $228=$786;
 var $787=$228;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($787) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=38;break; }
 case 37: 
 label=39;break;
 case 38: 
 var $789$0 = ___cxa_find_matching_catch(-1, -1,0); var $789$1 = tempRet0;
 var $790=$789$0;
 $243=$790;
 var $791=$789$1;
 $244=$791;
 var $792=$243;
 ___cxa_call_unexpected($792);
 throw "Reached an unreachable!";
 case 39: 
 var $794=$242;
 var $795=($794|0)!=0;
 if($795){label=40;break;}else{label=41;break;}
 case 40: 
 var $797=(($772)|0);
 var $798=HEAP32[(($797)>>2)];
 var $799=$242;
 $237=$798;
 $238=$799;
 $239=1;
 var $800=$237;
 var $801=$238;
 var $802=$239;
 $234=$800;
 $235=$801;
 $236=$802;
 var $803=$234;
 var $804=$235;
 var $805=$804;
 __ZdlPv($805);
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 $303=$__h;
 var $808=$303;
 $302=$808;
 var $809=$302;
 $300=$809;
 $301=0;
 var $810=$300;
 var $811=(($810)|0);
 $299=$811;
 var $812=$299;
 var $813=$812;
 $298=$813;
 var $814=$298;
 var $815=(($814)|0);
 var $816=HEAP32[(($815)>>2)];
 $__tmp_i_i_i=$816;
 var $817=$301;
 var $818=(($810)|0);
 $279=$818;
 var $819=$279;
 var $820=$819;
 $278=$820;
 var $821=$278;
 var $822=(($821)|0);
 HEAP32[(($822)>>2)]=$817;
 var $823=$__tmp_i_i_i;
 var $824=($823|0)!=0;
 if($824){label=45;break;}else{label=52;break;}
 case 45: 
 var $826=(($810)|0);
 $277=$826;
 var $827=$277;
 var $828=$827;
 $276=$828;
 var $829=$276;
 var $830=(($829+4)|0);
 var $831=$__tmp_i_i_i;
 $294=$830;
 $295=$831;
 var $832=$294;
 var $833=(($832+4)|0);
 var $834=HEAP8[($833)];
 var $835=(($834)&1);
 if($835){label=46;break;}else{label=49;break;}
 case 46: 
 var $837=(($832)|0);
 var $838=HEAP32[(($837)>>2)];
 var $839=$295;
 var $840=(($839+16)|0);
 $293=$840;
 var $841=$293;
 var $842=$841;
 var $843=$842;
 $283=$838;
 $284=$843;
 var $844=$286;
 var $845=$283;
 var $846=$284;
 var $tmp_i_i_i_i_i=$282;
 var $tmp1_i_i_i_i_i=$285;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $280=$845;
 $281=$846;
 var $847=$281;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($847) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=48;break; }
 case 47: 
 label=49;break;
 case 48: 
 var $849$0 = ___cxa_find_matching_catch(-1, -1,0); var $849$1 = tempRet0;
 var $850=$849$0;
 $296=$850;
 var $851=$849$1;
 $297=$851;
 var $852=$296;
 ___cxa_call_unexpected($852);
 throw "Reached an unreachable!";
 case 49: 
 var $854=$295;
 var $855=($854|0)!=0;
 if($855){label=50;break;}else{label=51;break;}
 case 50: 
 var $857=(($832)|0);
 var $858=HEAP32[(($857)>>2)];
 var $859=$295;
 $290=$858;
 $291=$859;
 $292=1;
 var $860=$290;
 var $861=$291;
 var $862=$292;
 $287=$860;
 $288=$861;
 $289=$862;
 var $863=$287;
 var $864=$288;
 var $865=$864;
 __ZdlPv($865);
 label=51;break;
 case 51: 
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 var $868=$319;
 var $869=$320;
 var $870$0=$868;
 var $870$1=0;
 var $871$0=$870$0;
 var $871$1=$869;
 ___resumeException($871$0)
 var $873$0 = ___cxa_find_matching_catch(-1, -1,0); var $873$1 = tempRet0;
 var $874=$873$0;
 ___clang_call_terminate($874);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSK_SK_($this,$__parent,$__child,$__new_node){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31=sp;
 var $32=(sp)+(8);
 var $33=(sp)+(16);
 $27=$this;
 $28=$__parent;
 $29=$__child;
 $30=$__new_node;
 var $34=$27;
 $25=$31;
 $26=-1;
 var $35=$25;
 var $36=$26;
 $23=$35;
 $24=$36;
 var $37=$23;
 var $38=(($37)|0);
 HEAP32[(($38)>>2)]=0;
 $19=$31;
 var $39=$19;
 var $40=$30;
 var $41=$40;
 var $42=(($41)|0);
 HEAP32[(($42)>>2)]=0;
 $3=$32;
 $4=-1;
 var $43=$3;
 var $44=$4;
 $1=$43;
 $2=$44;
 var $45=$1;
 var $46=(($45)|0);
 HEAP32[(($46)>>2)]=0;
 $5=$32;
 var $47=$5;
 var $48=$30;
 var $49=(($48+4)|0);
 HEAP32[(($49)>>2)]=0;
 var $50=$28;
 var $51=$30;
 var $52=(($51+8)|0);
 HEAP32[(($52)>>2)]=$50;
 var $53=$30;
 var $54=$29;
 HEAP32[(($54)>>2)]=$53;
 $6=$34;
 var $55=$6;
 var $56=(($55)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57;
 var $59=(($58)|0);
 var $60=HEAP32[(($59)>>2)];
 $9=$33;
 $10=-1;
 var $61=$9;
 var $62=$10;
 $7=$61;
 $8=$62;
 var $63=$7;
 var $64=(($63)|0);
 HEAP32[(($64)>>2)]=0;
 $11=$33;
 var $65=$11;
 var $66=($60|0)!=0;
 if($66){label=2;break;}else{label=3;break;}
 case 2: 
 $12=$34;
 var $68=$12;
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=$70;
 var $72=(($71)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$73;
 $13=$34;
 var $75=$13;
 var $76=(($75)|0);
 HEAP32[(($76)>>2)]=$74;
 label=3;break;
 case 3: 
 $18=$34;
 var $78=$18;
 var $79=(($78+4)|0);
 $17=$79;
 var $80=$17;
 var $81=$80;
 $16=$81;
 var $82=$16;
 var $83=(($82)|0);
 $15=$83;
 var $84=$15;
 $14=$84;
 var $85=$14;
 var $86=$85;
 var $87=$86;
 var $88=$87;
 var $89=$88;
 var $90=(($89)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$29;
 var $93=HEAP32[(($92)>>2)];
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($91,$93);
 $22=$34;
 var $94=$22;
 var $95=(($94+8)|0);
 $21=$95;
 var $96=$21;
 var $97=$96;
 $20=$97;
 var $98=$20;
 var $99=(($98)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=((($100)+(1))|0);
 HEAP32[(($99)>>2)]=$101;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEC1ERKS9_($this,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$3;
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEC2ERKS9_($4,$5);
 STACKTOP=sp;return;
}


function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEC2ERKS9_($this,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=(($4)|0);
 var $6=$3;
 var $7=(($6)|0);
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEC1ERKSA_($5,$7);
 STACKTOP=sp;return;
}



function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($agg_result,$this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57=sp;
 var $58;
 var $59;
 var $60=(sp)+(8);
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $__lhs_sz_i_i_i_i=(sp)+(16);
 var $__rhs_sz_i_i_i_i=(sp)+(24);
 var $__result_i_i_i_i;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $__p=(sp)+(32);
 var $115=(sp)+(40);
 $113=$this;
 $114=$__v;
 var $116=$113;
 var $117=$114;
 $112=$116;
 var $118=$112;
 $111=$118;
 var $119=$111;
 var $120=(($119+4)|0);
 $110=$120;
 var $121=$110;
 var $122=$121;
 $109=$122;
 var $123=$109;
 var $124=(($123)|0);
 $108=$124;
 var $125=$108;
 $107=$125;
 var $126=$107;
 var $127=$126;
 var $128=$127;
 var $129=$128;
 var $130=$129;
 var $131=(($130)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=$132;
 $23=$116;
 var $134=$23;
 var $135=(($134+4)|0);
 $22=$135;
 var $136=$22;
 var $137=$136;
 $21=$137;
 var $138=$21;
 var $139=(($138)|0);
 $20=$139;
 var $140=$20;
 $19=$140;
 var $141=$19;
 var $142=$141;
 var $143=$142;
 var $144=$143;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE13__lower_boundIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_SM_SM_($__p,$116,$117,$133,$144);
 $18=$116;
 var $145=$18;
 $17=$145;
 var $146=$17;
 var $147=(($146+4)|0);
 $16=$147;
 var $148=$16;
 var $149=$148;
 $15=$149;
 var $150=$15;
 var $151=(($150)|0);
 $14=$151;
 var $152=$14;
 $13=$152;
 var $153=$13;
 var $154=$153;
 var $155=$154;
 var $156=$155;
 $11=$115;
 $12=$156;
 var $157=$11;
 var $158=$12;
 $9=$157;
 $10=$158;
 var $159=$9;
 var $160=(($159)|0);
 var $161=$10;
 HEAP32[(($160)>>2)]=$161;
 $3=$__p;
 $4=$115;
 var $162=$3;
 var $163=$4;
 $1=$162;
 $2=$163;
 var $164=$1;
 var $165=(($164)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=$2;
 var $168=(($167)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=($166|0)==($169|0);
 var $171=$170^1;
 if($171){label=2;break;}else{label=28;break;}
 case 2: 
 $7=$116;
 var $173=$7;
 var $174=(($173+8)|0);
 $6=$174;
 var $175=$6;
 var $176=$175;
 $5=$176;
 var $177=$5;
 var $178=$177;
 var $179=$114;
 $8=$__p;
 var $180=$8;
 var $181=(($180)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182+16)|0);
 $94=$178;
 $95=$179;
 $96=$183;
 var $184=$94;
 var $185=$184;
 var $186=$95;
 var $187=$96;
 var $188=(($187)|0);
 var $189=(($188)|0);
 $91=$185;
 $92=$186;
 $93=$189;
 var $190=$91;
 var $191=$92;
 var $192=$93;
 $89=$191;
 $90=$192;
 var $193=$89;
 var $194=$90;
 $85=$193;
 $86=$194;
 var $195=$85;
 $83=$195;
 var $196=$83;
 $82=$196;
 var $197=$82;
 var $198=(($197)|0);
 $81=$198;
 var $199=$81;
 var $200=$199;
 $80=$200;
 var $201=$80;
 var $202=(($201)|0);
 var $203=(($202)|0);
 var $204=$203;
 var $205=(($204)|0);
 var $206=$205;
 var $207=HEAP8[($206)];
 var $208=($207&255);
 var $209=$208&1;
 var $210=($209|0)!=0;
 if($210){label=3;break;}else{label=4;break;}
 case 3: 
 $76=$196;
 var $212=$76;
 var $213=(($212)|0);
 $75=$213;
 var $214=$75;
 var $215=$214;
 $74=$215;
 var $216=$74;
 var $217=(($216)|0);
 var $218=(($217)|0);
 var $219=$218;
 var $220=(($219+4)|0);
 var $221=HEAP32[(($220)>>2)];
 var $236=$221;label=5;break;
 case 4: 
 $79=$196;
 var $223=$79;
 var $224=(($223)|0);
 $78=$224;
 var $225=$78;
 var $226=$225;
 $77=$226;
 var $227=$77;
 var $228=(($227)|0);
 var $229=(($228)|0);
 var $230=$229;
 var $231=(($230)|0);
 var $232=$231;
 var $233=HEAP8[($232)];
 var $234=($233&255);
 var $235=$234>>1;
 var $236=$235;label=5;break;
 case 5: 
 var $236;
 HEAP32[(($__lhs_sz_i_i_i_i)>>2)]=$236;
 var $237=$86;
 $70=$237;
 var $238=$70;
 $69=$238;
 var $239=$69;
 var $240=(($239)|0);
 $68=$240;
 var $241=$68;
 var $242=$241;
 $67=$242;
 var $243=$67;
 var $244=(($243)|0);
 var $245=(($244)|0);
 var $246=$245;
 var $247=(($246)|0);
 var $248=$247;
 var $249=HEAP8[($248)];
 var $250=($249&255);
 var $251=$250&1;
 var $252=($251|0)!=0;
 if($252){label=6;break;}else{label=7;break;}
 case 6: 
 $63=$238;
 var $254=$63;
 var $255=(($254)|0);
 $62=$255;
 var $256=$62;
 var $257=$256;
 $61=$257;
 var $258=$61;
 var $259=(($258)|0);
 var $260=(($259)|0);
 var $261=$260;
 var $262=(($261+4)|0);
 var $263=HEAP32[(($262)>>2)];
 var $278=$263;label=8;break;
 case 7: 
 $66=$238;
 var $265=$66;
 var $266=(($265)|0);
 $65=$266;
 var $267=$65;
 var $268=$267;
 $64=$268;
 var $269=$64;
 var $270=(($269)|0);
 var $271=(($270)|0);
 var $272=$271;
 var $273=(($272)|0);
 var $274=$273;
 var $275=HEAP8[($274)];
 var $276=($275&255);
 var $277=$276>>1;
 var $278=$277;label=8;break;
 case 8: 
 var $278;
 HEAP32[(($__rhs_sz_i_i_i_i)>>2)]=$278;
 $37=$195;
 var $279=$37;
 $36=$279;
 var $280=$36;
 $35=$280;
 var $281=$35;
 var $282=(($281)|0);
 $34=$282;
 var $283=$34;
 var $284=$283;
 $33=$284;
 var $285=$33;
 var $286=(($285)|0);
 var $287=(($286)|0);
 var $288=$287;
 var $289=(($288)|0);
 var $290=$289;
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=$292&1;
 var $294=($293|0)!=0;
 if($294){label=9;break;}else{label=10;break;}
 case 9: 
 $27=$280;
 var $296=$27;
 var $297=(($296)|0);
 $26=$297;
 var $298=$26;
 var $299=$298;
 $25=$299;
 var $300=$25;
 var $301=(($300)|0);
 var $302=(($301)|0);
 var $303=$302;
 var $304=(($303+8)|0);
 var $305=HEAP32[(($304)>>2)];
 var $319=$305;label=11;break;
 case 10: 
 $32=$280;
 var $307=$32;
 var $308=(($307)|0);
 $31=$308;
 var $309=$31;
 var $310=$309;
 $30=$310;
 var $311=$30;
 var $312=(($311)|0);
 var $313=(($312)|0);
 var $314=$313;
 var $315=(($314+1)|0);
 var $316=(($315)|0);
 $29=$316;
 var $317=$29;
 $28=$317;
 var $318=$28;
 var $319=$318;label=11;break;
 case 11: 
 var $319;
 $24=$319;
 var $320=$24;
 var $321=$86;
 $51=$321;
 var $322=$51;
 $50=$322;
 var $323=$50;
 $49=$323;
 var $324=$49;
 var $325=(($324)|0);
 $48=$325;
 var $326=$48;
 var $327=$326;
 $47=$327;
 var $328=$47;
 var $329=(($328)|0);
 var $330=(($329)|0);
 var $331=$330;
 var $332=(($331)|0);
 var $333=$332;
 var $334=HEAP8[($333)];
 var $335=($334&255);
 var $336=$335&1;
 var $337=($336|0)!=0;
 if($337){label=12;break;}else{label=13;break;}
 case 12: 
 $41=$323;
 var $339=$41;
 var $340=(($339)|0);
 $40=$340;
 var $341=$40;
 var $342=$341;
 $39=$342;
 var $343=$39;
 var $344=(($343)|0);
 var $345=(($344)|0);
 var $346=$345;
 var $347=(($346+8)|0);
 var $348=HEAP32[(($347)>>2)];
 var $362=$348;label=14;break;
 case 13: 
 $46=$323;
 var $350=$46;
 var $351=(($350)|0);
 $45=$351;
 var $352=$45;
 var $353=$352;
 $44=$353;
 var $354=$44;
 var $355=(($354)|0);
 var $356=(($355)|0);
 var $357=$356;
 var $358=(($357+1)|0);
 var $359=(($358)|0);
 $43=$359;
 var $360=$43;
 $42=$360;
 var $361=$42;
 var $362=$361;label=14;break;
 case 14: 
 var $362;
 $38=$362;
 var $363=$38;
 $58=$__lhs_sz_i_i_i_i;
 $59=$__rhs_sz_i_i_i_i;
 var $364=$58;
 var $365=$59;
 var $tmp_i_i_i_i_i=$57;
 var $tmp1_i_i_i_i_i=$60;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $55=$364;
 $56=$365;
 var $366=$56;
 var $367=$55;
 $52=$57;
 $53=$366;
 $54=$367;
 var $368=$52;
 var $369=$53;
 var $370=HEAP32[(($369)>>2)];
 var $371=$54;
 var $372=HEAP32[(($371)>>2)];
 var $373=($370>>>0)<($372>>>0);
 if($373){label=15;break;}else{label=16;break;}
 case 15: 
 var $375=$56;
 var $378=$375;label=17;break;
 case 16: 
 var $377=$55;
 var $378=$377;label=17;break;
 case 17: 
 var $378;
 var $379=HEAP32[(($378)>>2)];
 $71=$320;
 $72=$363;
 $73=$379;
 var $380=$71;
 var $381=$72;
 var $382=$73;
 var $383=(function() { try { __THREW__ = 0; return _memcmp($380,$381,$382) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 $__result_i_i_i_i=$383;
 var $384=$__result_i_i_i_i;
 var $385=($384|0)!=0;
 if($385){label=19;break;}else{label=21;break;}
 case 19: 
 var $387=$__result_i_i_i_i;
 $84=$387;
 label=26;break;
 case 20: 
 var $389$0 = ___cxa_find_matching_catch(-1, -1); var $389$1 = tempRet0;
 var $390=$389$0;
 $87=$390;
 var $391=$389$1;
 $88=$391;
 var $392=$87;
 ___cxa_call_unexpected($392);
 throw "Reached an unreachable!";
 case 21: 
 var $394=HEAP32[(($__lhs_sz_i_i_i_i)>>2)];
 var $395=HEAP32[(($__rhs_sz_i_i_i_i)>>2)];
 var $396=($394>>>0)<($395>>>0);
 if($396){label=22;break;}else{label=23;break;}
 case 22: 
 $84=-1;
 label=26;break;
 case 23: 
 var $399=HEAP32[(($__lhs_sz_i_i_i_i)>>2)];
 var $400=HEAP32[(($__rhs_sz_i_i_i_i)>>2)];
 var $401=($399>>>0)>($400>>>0);
 if($401){label=24;break;}else{label=25;break;}
 case 24: 
 $84=1;
 label=26;break;
 case 25: 
 $84=0;
 label=26;break;
 case 26: 
 var $404=$84;
 var $405=($404|0)<0;
 if($405){label=28;break;}else{label=27;break;}
 case 27: 
 var $407=$agg_result;
 var $408=$__p;
 assert(4 % 1 === 0);HEAP32[(($407)>>2)]=HEAP32[(($408)>>2)];
 label=29;break;
 case 28: 
 $106=$116;
 var $410=$106;
 $105=$410;
 var $411=$105;
 var $412=(($411+4)|0);
 $104=$412;
 var $413=$104;
 var $414=$413;
 $103=$414;
 var $415=$103;
 var $416=(($415)|0);
 $102=$416;
 var $417=$102;
 $101=$417;
 var $418=$101;
 var $419=$418;
 var $420=$419;
 var $421=$420;
 $99=$agg_result;
 $100=$421;
 var $422=$99;
 var $423=$100;
 $97=$422;
 $98=$423;
 var $424=$97;
 var $425=(($424)|0);
 var $426=$98;
 HEAP32[(($425)>>2)]=$426;
 label=29;break;
 case 29: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE13__lower_boundIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_SM_SM_($agg_result,$this,$__v,$__root,$__result){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38=sp;
 var $39;
 var $40;
 var $41=(sp)+(8);
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $__lhs_sz_i_i_i_i=(sp)+(16);
 var $__rhs_sz_i_i_i_i=(sp)+(24);
 var $__result_i_i_i_i;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90=(sp)+(32);
 $86=$this;
 $87=$__v;
 $88=$__root;
 $89=$__result;
 var $91=$86;
 label=2;break;
 case 2: 
 var $93=$88;
 $84=$90;
 $85=-1;
 var $94=$84;
 var $95=$85;
 $82=$94;
 $83=$95;
 var $96=$82;
 var $97=(($96)|0);
 HEAP32[(($97)>>2)]=0;
 $4=$90;
 var $98=$4;
 var $99=($93|0)!=0;
 if($99){label=3;break;}else{label=31;break;}
 case 3: 
 $3=$91;
 var $101=$3;
 var $102=(($101+8)|0);
 $2=$102;
 var $103=$2;
 var $104=$103;
 $1=$104;
 var $105=$1;
 var $106=$105;
 var $107=$88;
 var $108=(($107+16)|0);
 var $109=$87;
 $75=$106;
 $76=$108;
 $77=$109;
 var $110=$75;
 var $111=$110;
 var $112=$76;
 var $113=(($112)|0);
 var $114=(($113)|0);
 var $115=$77;
 $72=$111;
 $73=$114;
 $74=$115;
 var $116=$72;
 var $117=$73;
 var $118=$74;
 $70=$117;
 $71=$118;
 var $119=$70;
 var $120=$71;
 $66=$119;
 $67=$120;
 var $121=$66;
 $64=$121;
 var $122=$64;
 $63=$122;
 var $123=$63;
 var $124=(($123)|0);
 $62=$124;
 var $125=$62;
 var $126=$125;
 $61=$126;
 var $127=$61;
 var $128=(($127)|0);
 var $129=(($128)|0);
 var $130=$129;
 var $131=(($130)|0);
 var $132=$131;
 var $133=HEAP8[($132)];
 var $134=($133&255);
 var $135=$134&1;
 var $136=($135|0)!=0;
 if($136){label=4;break;}else{label=5;break;}
 case 4: 
 $57=$122;
 var $138=$57;
 var $139=(($138)|0);
 $56=$139;
 var $140=$56;
 var $141=$140;
 $55=$141;
 var $142=$55;
 var $143=(($142)|0);
 var $144=(($143)|0);
 var $145=$144;
 var $146=(($145+4)|0);
 var $147=HEAP32[(($146)>>2)];
 var $162=$147;label=6;break;
 case 5: 
 $60=$122;
 var $149=$60;
 var $150=(($149)|0);
 $59=$150;
 var $151=$59;
 var $152=$151;
 $58=$152;
 var $153=$58;
 var $154=(($153)|0);
 var $155=(($154)|0);
 var $156=$155;
 var $157=(($156)|0);
 var $158=$157;
 var $159=HEAP8[($158)];
 var $160=($159&255);
 var $161=$160>>1;
 var $162=$161;label=6;break;
 case 6: 
 var $162;
 HEAP32[(($__lhs_sz_i_i_i_i)>>2)]=$162;
 var $163=$67;
 $51=$163;
 var $164=$51;
 $50=$164;
 var $165=$50;
 var $166=(($165)|0);
 $49=$166;
 var $167=$49;
 var $168=$167;
 $48=$168;
 var $169=$48;
 var $170=(($169)|0);
 var $171=(($170)|0);
 var $172=$171;
 var $173=(($172)|0);
 var $174=$173;
 var $175=HEAP8[($174)];
 var $176=($175&255);
 var $177=$176&1;
 var $178=($177|0)!=0;
 if($178){label=7;break;}else{label=8;break;}
 case 7: 
 $44=$164;
 var $180=$44;
 var $181=(($180)|0);
 $43=$181;
 var $182=$43;
 var $183=$182;
 $42=$183;
 var $184=$42;
 var $185=(($184)|0);
 var $186=(($185)|0);
 var $187=$186;
 var $188=(($187+4)|0);
 var $189=HEAP32[(($188)>>2)];
 var $204=$189;label=9;break;
 case 8: 
 $47=$164;
 var $191=$47;
 var $192=(($191)|0);
 $46=$192;
 var $193=$46;
 var $194=$193;
 $45=$194;
 var $195=$45;
 var $196=(($195)|0);
 var $197=(($196)|0);
 var $198=$197;
 var $199=(($198)|0);
 var $200=$199;
 var $201=HEAP8[($200)];
 var $202=($201&255);
 var $203=$202>>1;
 var $204=$203;label=9;break;
 case 9: 
 var $204;
 HEAP32[(($__rhs_sz_i_i_i_i)>>2)]=$204;
 $18=$121;
 var $205=$18;
 $17=$205;
 var $206=$17;
 $16=$206;
 var $207=$16;
 var $208=(($207)|0);
 $15=$208;
 var $209=$15;
 var $210=$209;
 $14=$210;
 var $211=$14;
 var $212=(($211)|0);
 var $213=(($212)|0);
 var $214=$213;
 var $215=(($214)|0);
 var $216=$215;
 var $217=HEAP8[($216)];
 var $218=($217&255);
 var $219=$218&1;
 var $220=($219|0)!=0;
 if($220){label=10;break;}else{label=11;break;}
 case 10: 
 $8=$206;
 var $222=$8;
 var $223=(($222)|0);
 $7=$223;
 var $224=$7;
 var $225=$224;
 $6=$225;
 var $226=$6;
 var $227=(($226)|0);
 var $228=(($227)|0);
 var $229=$228;
 var $230=(($229+8)|0);
 var $231=HEAP32[(($230)>>2)];
 var $245=$231;label=12;break;
 case 11: 
 $13=$206;
 var $233=$13;
 var $234=(($233)|0);
 $12=$234;
 var $235=$12;
 var $236=$235;
 $11=$236;
 var $237=$11;
 var $238=(($237)|0);
 var $239=(($238)|0);
 var $240=$239;
 var $241=(($240+1)|0);
 var $242=(($241)|0);
 $10=$242;
 var $243=$10;
 $9=$243;
 var $244=$9;
 var $245=$244;label=12;break;
 case 12: 
 var $245;
 $5=$245;
 var $246=$5;
 var $247=$67;
 $32=$247;
 var $248=$32;
 $31=$248;
 var $249=$31;
 $30=$249;
 var $250=$30;
 var $251=(($250)|0);
 $29=$251;
 var $252=$29;
 var $253=$252;
 $28=$253;
 var $254=$28;
 var $255=(($254)|0);
 var $256=(($255)|0);
 var $257=$256;
 var $258=(($257)|0);
 var $259=$258;
 var $260=HEAP8[($259)];
 var $261=($260&255);
 var $262=$261&1;
 var $263=($262|0)!=0;
 if($263){label=13;break;}else{label=14;break;}
 case 13: 
 $22=$249;
 var $265=$22;
 var $266=(($265)|0);
 $21=$266;
 var $267=$21;
 var $268=$267;
 $20=$268;
 var $269=$20;
 var $270=(($269)|0);
 var $271=(($270)|0);
 var $272=$271;
 var $273=(($272+8)|0);
 var $274=HEAP32[(($273)>>2)];
 var $288=$274;label=15;break;
 case 14: 
 $27=$249;
 var $276=$27;
 var $277=(($276)|0);
 $26=$277;
 var $278=$26;
 var $279=$278;
 $25=$279;
 var $280=$25;
 var $281=(($280)|0);
 var $282=(($281)|0);
 var $283=$282;
 var $284=(($283+1)|0);
 var $285=(($284)|0);
 $24=$285;
 var $286=$24;
 $23=$286;
 var $287=$23;
 var $288=$287;label=15;break;
 case 15: 
 var $288;
 $19=$288;
 var $289=$19;
 $39=$__lhs_sz_i_i_i_i;
 $40=$__rhs_sz_i_i_i_i;
 var $290=$39;
 var $291=$40;
 var $tmp_i_i_i_i_i=$38;
 var $tmp1_i_i_i_i_i=$41;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $36=$290;
 $37=$291;
 var $292=$37;
 var $293=$36;
 $33=$38;
 $34=$292;
 $35=$293;
 var $294=$33;
 var $295=$34;
 var $296=HEAP32[(($295)>>2)];
 var $297=$35;
 var $298=HEAP32[(($297)>>2)];
 var $299=($296>>>0)<($298>>>0);
 if($299){label=16;break;}else{label=17;break;}
 case 16: 
 var $301=$37;
 var $304=$301;label=18;break;
 case 17: 
 var $303=$36;
 var $304=$303;label=18;break;
 case 18: 
 var $304;
 var $305=HEAP32[(($304)>>2)];
 $52=$246;
 $53=$289;
 $54=$305;
 var $306=$52;
 var $307=$53;
 var $308=$54;
 var $309=(function() { try { __THREW__ = 0; return _memcmp($306,$307,$308) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=21;break; }
 case 19: 
 $__result_i_i_i_i=$309;
 var $310=$__result_i_i_i_i;
 var $311=($310|0)!=0;
 if($311){label=20;break;}else{label=22;break;}
 case 20: 
 var $313=$__result_i_i_i_i;
 $65=$313;
 label=27;break;
 case 21: 
 var $315$0 = ___cxa_find_matching_catch(-1, -1); var $315$1 = tempRet0;
 var $316=$315$0;
 $68=$316;
 var $317=$315$1;
 $69=$317;
 var $318=$68;
 ___cxa_call_unexpected($318);
 throw "Reached an unreachable!";
 case 22: 
 var $320=HEAP32[(($__lhs_sz_i_i_i_i)>>2)];
 var $321=HEAP32[(($__rhs_sz_i_i_i_i)>>2)];
 var $322=($320>>>0)<($321>>>0);
 if($322){label=23;break;}else{label=24;break;}
 case 23: 
 $65=-1;
 label=27;break;
 case 24: 
 var $325=HEAP32[(($__lhs_sz_i_i_i_i)>>2)];
 var $326=HEAP32[(($__rhs_sz_i_i_i_i)>>2)];
 var $327=($325>>>0)>($326>>>0);
 if($327){label=25;break;}else{label=26;break;}
 case 25: 
 $65=1;
 label=27;break;
 case 26: 
 $65=0;
 label=27;break;
 case 27: 
 var $330=$65;
 var $331=($330|0)<0;
 if($331){label=29;break;}else{label=28;break;}
 case 28: 
 var $333=$88;
 $89=$333;
 var $334=$88;
 var $335=$334;
 var $336=(($335)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=$337;
 $88=$338;
 label=30;break;
 case 29: 
 var $340=$88;
 var $341=$340;
 var $342=(($341+4)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=$343;
 $88=$344;
 label=30;break;
 case 30: 
 label=2;break;
 case 31: 
 var $347=$89;
 $80=$agg_result;
 $81=$347;
 var $348=$80;
 var $349=$81;
 $78=$348;
 $79=$349;
 var $350=$78;
 var $351=(($350)|0);
 var $352=$79;
 HEAP32[(($351)>>2)]=$352;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL12KernelStructD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN6OpenCL12KernelStructD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN6OpenCL12KernelStructD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=(($4+32)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED1Ev($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $7=(($4+20)|0);
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($7);
 STACKTOP=sp;return;
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 var $10=$9$0;
 $2=$10;
 var $11=$9$1;
 $3=$11;
 var $12=(($4+20)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $15=$2;
 var $16=$3;
 var $17$0=$15;
 var $17$1=0;
 var $18$0=$17$0;
 var $18$1=$16;
 ___resumeException($18$0)
 case 6: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 var $21=$20$0;
 ___clang_call_terminate($21);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $7=$this;
 var $8=$7;
 $6=$8;
 var $9=$6;
 $5=$9;
 var $10=$5;
 var $11=(($10+4)|0);
 $4=$11;
 var $12=$4;
 var $13=$12;
 $3=$13;
 var $14=$3;
 var $15=(($14)|0);
 $2=$15;
 var $16=$2;
 $1=$16;
 var $17=$1;
 var $18=$17;
 var $19=$18;
 var $20=$19;
 var $21=$20;
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($8,$24);
 STACKTOP=sp;return;
}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($this,$__nd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 var $8;
 var $9;
 var $10=(sp)+(8);
 var $11=(sp)+(16);
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25=(sp)+(24);
 var $26;
 var $27;
 var $__na;
 $23=$this;
 $24=$__nd;
 var $28=$23;
 var $29=$24;
 $21=$25;
 $22=-1;
 var $30=$21;
 var $31=$22;
 $19=$30;
 $20=$31;
 var $32=$19;
 var $33=(($32)|0);
 HEAP32[(($33)>>2)]=0;
 label=2;break;
 case 2: 
 $18=$25;
 var $35=$18;
 label=3;break;
 case 3: 
 var $37=($29|0)!=0;
 if($37){label=4;break;}else{label=9;break;}
 case 4: 
 var $39=$24;
 var $40=$39;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($28,$43);
 var $44=$24;
 var $45=$44;
 var $46=(($45+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($28,$48);
 $4=$28;
 var $49=$4;
 var $50=(($49+4)|0);
 $3=$50;
 var $51=$3;
 var $52=$51;
 $2=$52;
 var $53=$2;
 var $54=$53;
 $__na=$54;
 var $55=$__na;
 var $56=$24;
 var $57=(($56+16)|0);
 $1=$57;
 var $58=$1;
 var $59=$58;
 var $60=$59;
 $8=$55;
 $9=$60;
 var $61=$11;
 var $62=$8;
 var $63=$9;
 var $tmp_i=$7;
 var $tmp1_i=$10;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $5=$62;
 $6=$63;
 var $64=$6;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 label=6;break;
 case 6: 
 var $66=$__na;
 var $67=$24;
 $15=$66;
 $16=$67;
 $17=1;
 var $68=$15;
 var $69=$16;
 var $70=$17;
 $12=$68;
 $13=$69;
 $14=$70;
 var $71=$12;
 var $72=$13;
 var $73=$72;
 __ZdlPv($73);
 label=9;break;
 case 7: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 var $76=$75$0;
 $26=$76;
 var $77=$75$1;
 $27=$77;
 label=8;break;
 case 8: 
 var $79=$26;
 ___cxa_call_unexpected($79);
 throw "Reached an unreachable!";
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $7=$this;
 var $8=$7;
 $6=$8;
 var $9=$6;
 $5=$9;
 var $10=$5;
 var $11=(($10+4)|0);
 $4=$11;
 var $12=$4;
 var $13=$12;
 $3=$13;
 var $14=$3;
 var $15=(($14)|0);
 $2=$15;
 var $16=$2;
 $1=$16;
 var $17=$1;
 var $18=$17;
 var $19=$18;
 var $20=$19;
 var $21=$20;
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($8,$24);
 STACKTOP=sp;return;
}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this,$__nd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 var $8;
 var $9;
 var $10=(sp)+(8);
 var $11=(sp)+(16);
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25=(sp)+(24);
 var $26;
 var $27;
 var $__na;
 $23=$this;
 $24=$__nd;
 var $28=$23;
 var $29=$24;
 $21=$25;
 $22=-1;
 var $30=$21;
 var $31=$22;
 $19=$30;
 $20=$31;
 var $32=$19;
 var $33=(($32)|0);
 HEAP32[(($33)>>2)]=0;
 label=2;break;
 case 2: 
 $18=$25;
 var $35=$18;
 label=3;break;
 case 3: 
 var $37=($29|0)!=0;
 if($37){label=4;break;}else{label=9;break;}
 case 4: 
 var $39=$24;
 var $40=$39;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($28,$43);
 var $44=$24;
 var $45=$44;
 var $46=(($45+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($28,$48);
 $4=$28;
 var $49=$4;
 var $50=(($49+4)|0);
 $3=$50;
 var $51=$3;
 var $52=$51;
 $2=$52;
 var $53=$2;
 var $54=$53;
 $__na=$54;
 var $55=$__na;
 var $56=$24;
 var $57=(($56+16)|0);
 $1=$57;
 var $58=$1;
 var $59=$58;
 var $60=$59;
 $8=$55;
 $9=$60;
 var $61=$11;
 var $62=$8;
 var $63=$9;
 var $tmp_i=$7;
 var $tmp1_i=$10;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $5=$62;
 $6=$63;
 var $64=$6;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelED1Ev($64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 label=6;break;
 case 6: 
 var $66=$__na;
 var $67=$24;
 $15=$66;
 $16=$67;
 $17=1;
 var $68=$15;
 var $69=$16;
 var $70=$17;
 $12=$68;
 $13=$69;
 $14=$70;
 var $71=$12;
 var $72=$13;
 var $73=$72;
 __ZdlPv($73);
 label=9;break;
 case 7: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 var $76=$75$0;
 $26=$76;
 var $77=$75$1;
 $27=$77;
 label=8;break;
 case 8: 
 var $79=$26;
 ___cxa_call_unexpected($79);
 throw "Reached an unreachable!";
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

// WARNING: content after a branch in a label, line: 1740
// WARNING: content after a branch in a label, line: 1742
// WARNING: content after a branch in a label, line: 1743
// WARNING: content after a branch in a label, line: 1744
// WARNING: content after a branch in a label, line: 1745
// WARNING: content after a branch in a label, line: 1746
// WARNING: content after a branch in a label, line: 1876
// WARNING: content after a branch in a label, line: 1878
// WARNING: content after a branch in a label, line: 1879
// WARNING: content after a branch in a label, line: 1880
// WARNING: content after a branch in a label, line: 1881
// WARNING: content after a branch in a label, line: 1882
// WARNING: content after a branch in a label, line: 1973
// WARNING: content after a branch in a label, line: 1975
// WARNING: content after a branch in a label, line: 1976
// WARNING: content after a branch in a label, line: 1977
// WARNING: content after a branch in a label, line: 1978
// WARNING: content after a branch in a label, line: 1979

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE5clearEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27=sp;
 var $28;
 var $29;
 $26=$this;
 var $30=$26;
 $25=$30;
 var $31=$25;
 $24=$31;
 var $32=$24;
 var $33=(($32+4)|0);
 $23=$33;
 var $34=$23;
 var $35=$34;
 $22=$35;
 var $36=$22;
 var $37=(($36)|0);
 $21=$37;
 var $38=$21;
 $20=$38;
 var $39=$20;
 var $40=$39;
 var $41=$40;
 var $42=$41;
 var $43=$42;
 var $44=(($43)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$45;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($30,$46);
 $3=$30;
 var $47=$3;
 var $48=(($47+8)|0);
 $2=$48;
 var $49=$2;
 var $50=$49;
 $1=$50;
 var $51=$1;
 var $52=(($51)|0);
 HEAP32[(($52)>>2)]=0;
 $8=$30;
 var $53=$8;
 var $54=(($53+4)|0);
 $7=$54;
 var $55=$7;
 var $56=$55;
 $6=$56;
 var $57=$6;
 var $58=(($57)|0);
 $5=$58;
 var $59=$5;
 $4=$59;
 var $60=$4;
 var $61=$60;
 var $62=$61;
 var $63=$62;
 $9=$30;
 var $64=$9;
 var $65=(($64)|0);
 HEAP32[(($65)>>2)]=$63;
 $12=$27;
 $13=-1;
 var $66=$12;
 var $67=$13;
 $10=$66;
 $11=$67;
 var $68=$10;
 var $69=(($68)|0);
 HEAP32[(($69)>>2)]=0;
 label=2;break;
 case 2: 
 $14=$27;
 var $71=$14;
 label=3;break;
 case 3: 
 $19=$30;
 var $73=$19;
 var $74=(($73+4)|0);
 $18=$74;
 var $75=$18;
 var $76=$75;
 $17=$76;
 var $77=$17;
 var $78=(($77)|0);
 $16=$78;
 var $79=$16;
 $15=$79;
 var $80=$15;
 var $81=$80;
 var $82=$81;
 var $83=$82;
 var $84=$83;
 var $85=(($84)|0);
 HEAP32[(($85)>>2)]=0;
 STACKTOP=sp;return;
 case 4: 
 var $91=$28;
 ___cxa_call_unexpected($91);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE5clearEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27=sp;
 var $28;
 var $29;
 $26=$this;
 var $30=$26;
 $25=$30;
 var $31=$25;
 $24=$31;
 var $32=$24;
 var $33=(($32+4)|0);
 $23=$33;
 var $34=$23;
 var $35=$34;
 $22=$35;
 var $36=$22;
 var $37=(($36)|0);
 $21=$37;
 var $38=$21;
 $20=$38;
 var $39=$20;
 var $40=$39;
 var $41=$40;
 var $42=$41;
 var $43=$42;
 var $44=(($43)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$45;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($30,$46);
 $3=$30;
 var $47=$3;
 var $48=(($47+8)|0);
 $2=$48;
 var $49=$2;
 var $50=$49;
 $1=$50;
 var $51=$1;
 var $52=(($51)|0);
 HEAP32[(($52)>>2)]=0;
 $8=$30;
 var $53=$8;
 var $54=(($53+4)|0);
 $7=$54;
 var $55=$7;
 var $56=$55;
 $6=$56;
 var $57=$6;
 var $58=(($57)|0);
 $5=$58;
 var $59=$5;
 $4=$59;
 var $60=$4;
 var $61=$60;
 var $62=$61;
 var $63=$62;
 $9=$30;
 var $64=$9;
 var $65=(($64)|0);
 HEAP32[(($65)>>2)]=$63;
 $12=$27;
 $13=-1;
 var $66=$12;
 var $67=$13;
 $10=$66;
 $11=$67;
 var $68=$10;
 var $69=(($68)|0);
 HEAP32[(($69)>>2)]=0;
 label=2;break;
 case 2: 
 $14=$27;
 var $71=$14;
 label=3;break;
 case 3: 
 $19=$30;
 var $73=$19;
 var $74=(($73+4)|0);
 $18=$74;
 var $75=$18;
 var $76=$75;
 $17=$76;
 var $77=$17;
 var $78=(($77)|0);
 $16=$78;
 var $79=$16;
 $15=$79;
 var $80=$15;
 var $81=$80;
 var $82=$81;
 var $83=$82;
 var $84=$83;
 var $85=(($84)|0);
 HEAP32[(($85)>>2)]=0;
 STACKTOP=sp;return;
 case 4: 
 var $91=$28;
 ___cxa_call_unexpected($91);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8=sp;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=(sp)+(8);
 var $19;
 var $20;
 $17=$__x;
 var $21=$17;
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 $14=$18;
 $15=-1;
 var $24=$14;
 var $25=$15;
 $12=$24;
 $13=$25;
 var $26=$12;
 var $27=(($26)|0);
 HEAP32[(($27)>>2)]=0;
 label=2;break;
 case 2: 
 $1=$18;
 var $29=$1;
 label=3;break;
 case 3: 
 var $31=($23|0)!=0;
 if($31){label=4;break;}else{label=9;break;}
 case 4: 
 var $33=$17;
 var $34=(($33+4)|0);
 var $35=HEAP32[(($34)>>2)];
 $7=$35;
 label=5;break;
 case 5: 
 var $37=$7;
 var $38=$37;
 var $39=(($38)|0);
 var $40=HEAP32[(($39)>>2)];
 $5=$8;
 $6=-1;
 var $41=$5;
 var $42=$6;
 $3=$41;
 $4=$42;
 var $43=$3;
 var $44=(($43)|0);
 HEAP32[(($44)>>2)]=0;
 $2=$8;
 var $45=$2;
 var $46=($40|0)!=0;
 if($46){label=6;break;}else{label=7;break;}
 case 6: 
 var $48=$7;
 var $49=$48;
 var $50=(($49)|0);
 var $51=HEAP32[(($50)>>2)];
 $7=$51;
 label=5;break;
 case 7: 
 var $52=$7;
 $16=$52;
 label=13;break;
 case 8: 
 var $58=$19;
 ___cxa_call_unexpected($58);
 throw "Reached an unreachable!";
 case 9: 
 label=10;break;
 case 10: 
 var $61=$17;
 $11=$61;
 var $62=$11;
 var $63=$11;
 var $64=(($63+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$65;
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($62|0)==($68|0);
 var $70=$69^1;
 if($70){label=11;break;}else{label=12;break;}
 case 11: 
 var $72=$17;
 var $73=(($72+8)|0);
 var $74=HEAP32[(($73)>>2)];
 $17=$74;
 label=10;break;
 case 12: 
 var $76=$17;
 var $77=(($76+8)|0);
 var $78=HEAP32[(($77)>>2)];
 $16=$78;
 label=13;break;
 case 13: 
 var $80=$16;
 STACKTOP=sp;return $80;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL12KernelStructC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $c1_i_i_i1=sp;
 var $6;
 var $7=(sp)+(8);
 var $8;
 var $9;
 var $10=(sp)+(16);
 var $11=(sp)+(24);
 var $12;
 var $13;
 var $14;
 var $c1_i_i_i=(sp)+(32);
 var $15;
 var $16=(sp)+(40);
 var $17;
 var $18;
 var $19=(sp)+(48);
 var $20=(sp)+(56);
 var $21;
 var $22;
 var $23;
 var $24=(sp)+(64);
 var $25=(sp)+(72);
 var $26;
 var $27;
 $23=$this;
 var $28=$23;
 var $29=(($28+20)|0);
 $21=$29;
 $22=$24;
 var $30=$21;
 var $31=$22;
 $17=$30;
 $18=$31;
 var $32=$17;
 var $33=(($32)|0);
 var $34=$18;
 var $tmp_i_i=$16;
 var $tmp1_i_i=$20;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $15=$19;
 var $35=$15;
 var $tmp_i_i_i=$c1_i_i_i;
 var $tmp2_i_i_i=$16;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp2_i_i_i)];
 $14=$35;
 var $36=$14;
 var $37=$36;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC1ERKSC_($33,$19);
 var $38=(($28+32)|0);
 $12=$38;
 $13=$25;
 var $39=$12;
 var $40=$13;
 $8=$39;
 $9=$40;
 var $41=$8;
 var $42=(($41)|0);
 var $43=$9;
 var $tmp_i_i2=$7;
 var $tmp1_i_i3=$11;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i2)]=HEAP8[($tmp1_i_i3)];
 $6=$10;
 var $44=$6;
 var $tmp_i_i_i4=$c1_i_i_i1;
 var $tmp2_i_i_i5=$7;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i4)]=HEAP8[($tmp2_i_i_i5)];
 $5=$44;
 var $45=$5;
 var $46=$45;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC1ERKSE_($42,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 label=3;break;
 case 3: 
 var $48=(($28+44)|0);
 $4=$48;
 var $49=$4;
 $3=$49;
 var $50=$3;
 var $51=(($50)|0);
 $2=$51;
 var $52=$2;
 $1=$52;
 var $53=$1;
 STACKTOP=sp;return;
 case 4: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=$55$0;
 $26=$56;
 var $57=$55$1;
 $27=$57;
 (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4lessIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 label=6;break;
 case 6: 
 var $60=$26;
 var $61=$27;
 var $62$0=$60;
 var $62$1=0;
 var $63$0=$62$0;
 var $63$1=$61;
 ___resumeException($63$0)
 case 7: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1,0); var $65$1 = tempRet0;
 var $66=$65$0;
 ___clang_call_terminate($66);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC1ERKSE_($this,$__comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$__comp;
 var $3=$1;
 var $4=$2;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($3,$4);
 STACKTOP=sp;return;
}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_cl_kernelEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($this,$__comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6=(sp)+(8);
 var $7;
 var $8;
 var $9=(sp)+(16);
 var $10=(sp)+(24);
 var $__t21_i=(sp)+(32);
 var $11;
 var $12;
 var $13=(sp)+(40);
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28=(sp)+(48);
 $26=$this;
 $27=$__comp;
 var $29=$26;
 var $30=(($29+4)|0);
 $25=$30;
 var $31=$25;
 $24=$31;
 var $32=$24;
 var $33=$32;
 $23=$33;
 var $34=$23;
 var $35=$34;
 $22=$35;
 var $36=$22;
 var $37=(($34)|0);
 $21=$37;
 var $38=$21;
 $20=$38;
 var $39=$20;
 var $40=(($39)|0);
 HEAP32[(($40)>>2)]=0;
 var $41=(($29+8)|0);
 var $42=$27;
 var $tmp=$13;
 var $tmp1=$28;
 assert(1 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];
 $11=$41;
 $12=0;
 var $43=$11;
 var $44=$12;
 var $tmp_i=$__t21_i;
 var $tmp2_i=$13;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp2_i)];
 $8=$43;
 HEAP32[(($9)>>2)]=$44;
 var $45=$8;
 var $46=$45;
 $7=$9;
 var $47=$7;
 var $48=HEAP32[(($47)>>2)];
 $1=$__t21_i;
 var $49=$1;
 var $tmp_i_i=$6;
 var $tmp1_i_i=$10;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $4=$46;
 HEAP32[(($5)>>2)]=$48;
 var $50=$4;
 var $51=$50;
 $3=$6;
 var $52=$3;
 var $53=(($50)|0);
 $2=$5;
 var $54=$2;
 var $55=HEAP32[(($54)>>2)];
 HEAP32[(($53)>>2)]=$55;
 $18=$29;
 var $56=$18;
 var $57=(($56+4)|0);
 $17=$57;
 var $58=$17;
 var $59=$58;
 $16=$59;
 var $60=$16;
 var $61=(($60)|0);
 $15=$61;
 var $62=$15;
 $14=$62;
 var $63=$14;
 var $64=$63;
 var $65=$64;
 var $66=$65;
 $19=$29;
 var $67=$19;
 var $68=(($67)|0);
 HEAP32[(($68)>>2)]=$66;
 STACKTOP=sp;return;
}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC1ERKSC_($this,$__comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$__comp;
 var $3=$1;
 var $4=$2;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC2ERKSC_($3,$4);
 STACKTOP=sp;return;
}


function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC2ERKSC_($this,$__comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6=(sp)+(8);
 var $7;
 var $8;
 var $9=(sp)+(16);
 var $10=(sp)+(24);
 var $__t21_i=(sp)+(32);
 var $11;
 var $12;
 var $13=(sp)+(40);
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28=(sp)+(48);
 $26=$this;
 $27=$__comp;
 var $29=$26;
 var $30=(($29+4)|0);
 $25=$30;
 var $31=$25;
 $24=$31;
 var $32=$24;
 var $33=$32;
 $23=$33;
 var $34=$23;
 var $35=$34;
 $22=$35;
 var $36=$22;
 var $37=(($34)|0);
 $21=$37;
 var $38=$21;
 $20=$38;
 var $39=$20;
 var $40=(($39)|0);
 HEAP32[(($40)>>2)]=0;
 var $41=(($29+8)|0);
 var $42=$27;
 var $tmp=$13;
 var $tmp1=$28;
 assert(1 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];
 $11=$41;
 $12=0;
 var $43=$11;
 var $44=$12;
 var $tmp_i=$__t21_i;
 var $tmp2_i=$13;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp2_i)];
 $8=$43;
 HEAP32[(($9)>>2)]=$44;
 var $45=$8;
 var $46=$45;
 $7=$9;
 var $47=$7;
 var $48=HEAP32[(($47)>>2)];
 $1=$__t21_i;
 var $49=$1;
 var $tmp_i_i=$6;
 var $tmp1_i_i=$10;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $4=$46;
 HEAP32[(($5)>>2)]=$48;
 var $50=$4;
 var $51=$50;
 $3=$6;
 var $52=$3;
 var $53=(($50)|0);
 $2=$5;
 var $54=$2;
 var $55=HEAP32[(($54)>>2)];
 HEAP32[(($53)>>2)]=$55;
 $18=$29;
 var $56=$18;
 var $57=(($56+4)|0);
 $17=$57;
 var $58=$17;
 var $59=$58;
 $16=$59;
 var $60=$16;
 var $61=(($60)|0);
 $15=$61;
 var $62=$15;
 $14=$62;
 var $63=$14;
 var $64=$63;
 var $65=$64;
 var $66=$65;
 $19=$29;
 var $67=$19;
 var $68=(($67)|0);
 HEAP32[(($68)>>2)]=$66;
 STACKTOP=sp;return;
}


function __ZN6OpenCL7ProgramC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$rFileName){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$rFileName;
 var $5=$1;
 var $6=$5;
 var $7=$2;
 __ZN6OpenCL4FileC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($6,$7);
 var $8=$5;
 HEAP32[(($8)>>2)]=6832;
 var $9=(function() { try { __THREW__ = 0; return __Znwj(80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $11=$9;
 var $12=(($5+8)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=(($5+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=6;break;}
 case 3: 
 var $17=(($5+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+32)|0);
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;
 var $st$1$0=(($19)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($19+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $20=(($5+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+12)|0);
 HEAP32[(($22)>>2)]=1;
 var $23=(($5+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+16)|0);
 HEAP32[(($25)>>2)]=1;
 var $26=(($5+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+24)|0);
 HEAP32[(($28)>>2)]=1;
 var $29=(($5+8)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+20)|0);
 HEAP32[(($31)>>2)]=1;
 var $32=(($5+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+56)|0);
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($34)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($34+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $35=(($5+8)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+44)|0);
 HEAP32[(($37)>>2)]=0;
 var $38=(($5+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+40)|0);
 HEAP32[(($40)>>2)]=0;
 var $41=(($5+8)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+48)|0);
 HEAP32[(($43)>>2)]=0;
 var $44=(($5+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+64)|0);
 HEAP32[(($46)>>2)]=0;
 var $47=(($5+8)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+68)|0);
 HEAP32[(($49)>>2)]=0;
 var $50=(($5+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+72)|0);
 HEAP32[(($52)>>2)]=0;
 var $53=(($5+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54)|0);
 HEAP32[(($55)>>2)]=0;
 var $56=$5;
 var $57=(function() { try { __THREW__ = 0; return __ZNK6OpenCL4File11GetContentsEv($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 var $59=(($5+8)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+4)|0);
 HEAP32[(($61)>>2)]=$57;
 label=6;break;
 case 5: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $64=$63$0;
 $3=$64;
 var $65=$63$1;
 $4=$65;
 var $66=$5;
 (function() { try { __THREW__ = 0; return __ZN6OpenCL4FileD2Ev($66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=9;break; }
 case 6: 
 STACKTOP=sp;return;
 case 7: 
 label=8;break;
 case 8: 
 var $70=$3;
 var $71=$4;
 var $72$0=$70;
 var $72$1=0;
 var $73$0=$72$0;
 var $73$1=$71;
 ___resumeException($73$0)
 case 9: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1,0); var $75$1 = tempRet0;
 var $76=$75$0;
 ___clang_call_terminate($76);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZL19OpenCLProgramCreatePN6OpenCL13ProgramStructE($pProgram){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bFlagIsValid;
 $3=$pProgram;
 $bFlagIsValid=0;
 var $4=$3;
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=13;break;}
 case 2: 
 var $9=$3;
 var $10=__ZL20OpenCLGetPlatformIDsPN6OpenCL13ProgramStructE($9);
 if($10){label=3;break;}else{label=12;break;}
 case 3: 
 var $12=$3;
 var $13=__ZL18OpenCLGetDeviceIDsPN6OpenCL13ProgramStructE($12);
 if($13){label=4;break;}else{label=11;break;}
 case 4: 
 var $15=$3;
 var $16=__ZL19OpenCLCreateContextPN6OpenCL13ProgramStructE($15);
 if($16){label=5;break;}else{label=10;break;}
 case 5: 
 var $18=$3;
 var $19=__ZL24OpenCLCommandQueueCreatePN6OpenCL13ProgramStructE($18);
 if($19){label=6;break;}else{label=9;break;}
 case 6: 
 var $21=$3;
 var $22=__ZL29OpenCLProgramCreateWithSourcePN6OpenCL13ProgramStructE($21);
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 var $24=$3;
 var $25=__ZL18OpenCLProgramBuildPN6OpenCL13ProgramStructE($24);
 var $26=($25&1);
 $bFlagIsValid=$26;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=14;break;
 case 13: 
 var $33=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,2312);
 $1=$33;
 $2=8;
 var $34=$1;
 var $35=$2;
 var $36=FUNCTION_TABLE[$35]($34);
 label=14;break;
 case 14: 
 var $38=$bFlagIsValid;
 var $39=(($38)&1);
 STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL20OpenCLProgramReleasePN6OpenCL13ProgramStructE($pProgram){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$pProgram;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=11;break;}
 case 2: 
 var $5=$1;
 var $6=(($5+72)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=$1;
 var $11=(($10+72)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=_clReleaseProgram($12);
 label=4;break;
 case 4: 
 var $15=$1;
 var $16=(($15+68)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)!=0;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=$1;
 var $21=(($20+68)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=_clReleaseCommandQueue($22);
 label=6;break;
 case 6: 
 var $25=$1;
 var $26=(($25+64)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)!=0;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 var $30=$1;
 var $31=(($30+64)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=_clReleaseContext($32);
 label=8;break;
 case 8: 
 var $35=$1;
 var $36=($35|0)==0;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $38=$35;
 __ZdlPv($38);
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL7ProgramD0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 (function() { try { __THREW__ = 0; return __ZN6OpenCL7ProgramD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=$4;
 __ZdlPv($6);
 STACKTOP=sp;return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1); var $8$1 = tempRet0;
 var $9=$8$0;
 $2=$9;
 var $10=$8$1;
 $3=$10;
 var $11=$4;
 __ZdlPv($11);
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=$3;
 var $15$0=$13;
 var $15$1=0;
 var $16$0=$15$0;
 var $16$1=$14;
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6OpenCL7ProgramD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=$4;
 HEAP32[(($5)>>2)]=6832;
 var $6=(($4+8)|0);
 var $7=HEAP32[(($6)>>2)];
 (function() { try { __THREW__ = 0; return __ZL20OpenCLProgramReleasePN6OpenCL13ProgramStructE($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $9=$4;
 __ZN6OpenCL4FileD2Ev($9);
 STACKTOP=sp;return;
 case 3: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $12=$11$0;
 $2=$12;
 var $13=$11$1;
 $3=$13;
 var $14=$4;
 (function() { try { __THREW__ = 0; return __ZN6OpenCL4FileD2Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $17=$2;
 var $18=$3;
 var $19$0=$17;
 var $19$1=0;
 var $20$0=$19$0;
 var $20$1=$18;
 ___resumeException($20$0)
 case 6: 
 var $22$0 = ___cxa_find_matching_catch(-1, -1,0); var $22$1 = tempRet0;
 var $23=$22$0;
 ___clang_call_terminate($23);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK6OpenCL7Program11GetDeviceIdEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+44)|0);
 var $6=HEAP32[(($5)>>2)];
 STACKTOP=sp;return $6;
}


function __ZNK6OpenCL7Program10GetProgramEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+72)|0);
 var $6=HEAP32[(($5)>>2)];
 STACKTOP=sp;return $6;
}


function __ZNK6OpenCL7Program10GetContextEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+64)|0);
 var $6=HEAP32[(($5)>>2)];
 STACKTOP=sp;return $6;
}


function __ZNK6OpenCL7Program15GetCommandQueueEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+68)|0);
 var $6=HEAP32[(($5)>>2)];
 STACKTOP=sp;return $6;
}


function __ZN6OpenCL7Program7AcquireEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZL19OpenCLProgramCreatePN6OpenCL13ProgramStructE($4);
 STACKTOP=sp;return $5;
}


function __ZN6OpenCL7Program5FlushEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZL23OpenCLCommandQueueFlushPN6OpenCL13ProgramStructE($4);
 STACKTOP=sp;return;
}


function __ZL23OpenCLCommandQueueFlushPN6OpenCL13ProgramStructE($pProgram){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$pProgram;
 var $2=$1;
 var $3=(($2+68)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_clFlush($4);
 STACKTOP=sp;return;
}


function __ZL20OpenCLGetPlatformIDsPN6OpenCL13ProgramStructE($pProgram){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bGetPlatformIDs;
 $3=$pProgram;
 var $4=$3;
 var $5=(($4+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$3;
 var $8=(($7+40)|0);
 var $9=$3;
 var $10=(($9+24)|0);
 var $11=_clGetPlatformIDs($6,$8,$10);
 var $12=$3;
 var $13=(($12+8)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=$3;
 var $15=(($14+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 var $18=($17&1);
 $bGetPlatformIDs=$18;
 var $19=$bGetPlatformIDs;
 var $20=(($19)&1);
 if($20){label=3;break;}else{label=2;break;}
 case 2: 
 var $22=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,280);
 $1=$22;
 $2=8;
 var $23=$1;
 var $24=$2;
 var $25=FUNCTION_TABLE[$24]($23);
 label=3;break;
 case 3: 
 var $27=$bGetPlatformIDs;
 var $28=(($27)&1);
 STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL18OpenCLGetDeviceIDsPN6OpenCL13ProgramStructE($pProgram){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bGetDeviceIDs;
 $3=$pProgram;
 var $4=$3;
 var $5=(($4+40)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$3;
 var $8=(($7+32)|0);
 var $ld$0$0=(($8)|0);
 var $9$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $9$1=HEAP32[(($ld$1$1)>>2)];
 var $10=$3;
 var $11=(($10+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$3;
 var $14=(($13+44)|0);
 var $15=$3;
 var $16=(($15+16)|0);
 var $17=_clGetDeviceIDs($6,$9$0,$9$1,$12,$14,$16);
 var $18=$3;
 var $19=(($18+8)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$3;
 var $21=(($20+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 var $24=($23&1);
 $bGetDeviceIDs=$24;
 var $25=$bGetDeviceIDs;
 var $26=(($25)&1);
 if($26){label=3;break;}else{label=2;break;}
 case 2: 
 var $28=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,512);
 $1=$28;
 $2=8;
 var $29=$1;
 var $30=$2;
 var $31=FUNCTION_TABLE[$30]($29);
 label=3;break;
 case 3: 
 var $33=$bGetDeviceIDs;
 var $34=(($33)&1);
 STACKTOP=sp;return $34;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL19OpenCLCreateContextPN6OpenCL13ProgramStructE($pProgram){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bCreatedContext;
 $3=$pProgram;
 var $4=$3;
 var $5=(($4+48)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$3;
 var $8=(($7+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$3;
 var $11=(($10+44)|0);
 var $12=$3;
 var $13=(($12+8)|0);
 var $14=_clCreateContext($6,$9,$11,0,0,$13);
 var $15=$3;
 var $16=(($15+64)|0);
 HEAP32[(($16)>>2)]=$14;
 var $17=$3;
 var $18=(($17+64)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)!=0;
 if($20){label=2;break;}else{var $27=0;label=3;break;}
 case 2: 
 var $22=$3;
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 var $27=$25;label=3;break;
 case 3: 
 var $27;
 var $28=($27&1);
 $bCreatedContext=$28;
 var $29=$bCreatedContext;
 var $30=(($29)&1);
 if($30){label=5;break;}else{label=4;break;}
 case 4: 
 var $32=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,960);
 $1=$32;
 $2=8;
 var $33=$1;
 var $34=$2;
 var $35=FUNCTION_TABLE[$34]($33);
 label=5;break;
 case 5: 
 var $37=$bCreatedContext;
 var $38=(($37)&1);
 STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL24OpenCLCommandQueueCreatePN6OpenCL13ProgramStructE($pProgram){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bCreatedCmdQueue;
 $3=$pProgram;
 var $4=$3;
 var $5=(($4+64)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$3;
 var $8=(($7+44)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$3;
 var $11=(($10+56)|0);
 var $ld$0$0=(($11)|0);
 var $12$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($11+4)|0);
 var $12$1=HEAP32[(($ld$1$1)>>2)];
 var $13=$3;
 var $14=(($13+8)|0);
 var $15=_clCreateCommandQueue($6,$9,$12$0,$12$1,$14);
 var $16=$3;
 var $17=(($16+68)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=$3;
 var $19=(($18+68)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)!=0;
 if($21){label=2;break;}else{var $28=0;label=3;break;}
 case 2: 
 var $23=$3;
 var $24=(($23+8)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 var $28=$26;label=3;break;
 case 3: 
 var $28;
 var $29=($28&1);
 $bCreatedCmdQueue=$29;
 var $30=$bCreatedCmdQueue;
 var $31=(($30)&1);
 if($31){label=5;break;}else{label=4;break;}
 case 4: 
 var $33=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,1328);
 $1=$33;
 $2=8;
 var $34=$1;
 var $35=$2;
 var $36=FUNCTION_TABLE[$35]($34);
 label=5;break;
 case 5: 
 var $38=$bCreatedCmdQueue;
 var $39=(($38)&1);
 STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL29OpenCLProgramCreateWithSourcePN6OpenCL13ProgramStructE($pProgram){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bCreatedProgram;
 $3=$pProgram;
 var $4=$3;
 var $5=(($4+64)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$3;
 var $8=(($7+20)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$3;
 var $11=(($10+4)|0);
 var $12=$3;
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$3;
 var $16=(($15+8)|0);
 var $17=_clCreateProgramWithSource($6,$9,$11,$14,$16);
 var $18=$3;
 var $19=(($18+72)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$3;
 var $21=(($20+72)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)!=0;
 if($23){label=2;break;}else{var $30=0;label=3;break;}
 case 2: 
 var $25=$3;
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 var $30=$28;label=3;break;
 case 3: 
 var $30;
 var $31=($30&1);
 $bCreatedProgram=$31;
 var $32=$bCreatedProgram;
 var $33=(($32)&1);
 if($33){label=5;break;}else{label=4;break;}
 case 4: 
 var $35=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,1560);
 $1=$35;
 $2=8;
 var $36=$1;
 var $37=$2;
 var $38=FUNCTION_TABLE[$37]($36);
 label=5;break;
 case 5: 
 var $40=$bCreatedProgram;
 var $41=(($40)&1);
 STACKTOP=sp;return $41;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL18OpenCLProgramBuildPN6OpenCL13ProgramStructE($pProgram){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16384)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $bProgramBuilt;
 var $buildLog=sp;
 $5=$pProgram;
 var $6=$5;
 var $7=(($6+72)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_clBuildProgram($8,0,0,0,0,0);
 var $10=$5;
 var $11=(($10+8)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$5;
 var $13=(($12+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 var $16=($15&1);
 $bProgramBuilt=$16;
 var $17=$bProgramBuilt;
 var $18=(($17)&1);
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=$5;
 var $21=(($20+72)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$5;
 var $24=(($23+44)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($buildLog)|0);
 var $27=_clGetProgramBuildInfo($22,$25,4483,16384,$26,0);
 var $28=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,2456);
 $3=$28;
 $4=8;
 var $29=$3;
 var $30=$4;
 var $31=FUNCTION_TABLE[$30]($29);
 var $32=(($buildLog)|0);
 var $33=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,$32);
 var $34=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15648,2032);
 $1=$34;
 $2=8;
 var $35=$1;
 var $36=$2;
 var $37=FUNCTION_TABLE[$36]($35);
 label=3;break;
 case 3: 
 var $39=$bProgramBuilt;
 var $40=(($39)&1);
 STACKTOP=sp;return $40;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10TrajectoryC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEff($this,$rProgramSource,$nTimeMax,$nTimeDelta){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 $1=$this;
 $2=$rProgramSource;
 $3=$nTimeMax;
 $4=$nTimeDelta;
 var $7=$1;
 var $8=$7;
 var $9=$2;
 __ZN6OpenCL7ProgramC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($8,$9);
 var $10=$7;
 HEAP32[(($10)>>2)]=6928;
 var $11=$7;
 var $12=$3;
 var $13=$4;
 var $14=(function() { try { __THREW__ = 0; return __ZL16TrajectoryCreatePN6OpenCL7ProgramEff($11,$12,$13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $16=(($7+12)|0);
 HEAP32[(($16)>>2)]=$14;
 STACKTOP=sp;return;
 case 3: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $19=$18$0;
 $5=$19;
 var $20=$18$1;
 $6=$20;
 var $21=$7;
 (function() { try { __THREW__ = 0; return __ZN6OpenCL7ProgramD2Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $24=$5;
 var $25=$6;
 var $26$0=$24;
 var $26$1=0;
 var $27$0=$26$0;
 var $27$1=$25;
 ___resumeException($27$0)
 case 6: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1,0); var $29$1 = tempRet0;
 var $30=$29$0;
 ___clang_call_terminate($30);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZL16TrajectoryCreatePN6OpenCL7ProgramEff($pProgram,$nTimeMax,$nTimeDelta){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $pTrajectory;
 $1=$pProgram;
 $2=$nTimeMax;
 $3=$nTimeDelta;
 var $4=__Znwj(76);
 var $5=$4;
 $pTrajectory=$5;
 var $6=$pTrajectory;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=$2;
 var $10=$pTrajectory;
 var $11=(($10+12)|0);
 HEAPF32[(($11)>>2)]=$9;
 var $12=$pTrajectory;
 var $13=(($12+16)|0);
 var $14=(($13)|0);
 HEAPF32[(($14)>>2)]=0;
 var $15=$3;
 var $16=$pTrajectory;
 var $17=(($16+16)|0);
 var $18=(($17+4)|0);
 HEAPF32[(($18)>>2)]=$15;
 var $19=$pTrajectory;
 var $20=(($19+16)|0);
 var $21=(($20+8)|0);
 HEAPF32[(($21)>>2)]=0;
 var $22=$pTrajectory;
 var $23=(($22+16)|0);
 var $24=(($23+12)|0);
 HEAPF32[(($24)>>2)]=0;
 var $25=$1;
 var $26=__ZN6OpenCL7Program7AcquireEv($25);
 if($26){label=3;break;}else{label=4;break;}
 case 3: 
 var $28=$1;
 var $29=$pTrajectory;
 var $30=__ZL23TrajectoryKernelsCreatePN6OpenCL7ProgramEP16TrajectoryStruct($28,$29);
 var $31=$1;
 var $32=$pTrajectory;
 var $33=__ZL23TrajectoryBuffersCreatePN6OpenCL7ProgramEP16TrajectoryStruct($31,$32);
 var $34=$pTrajectory;
 var $35=__ZL22TrajectoryArraysCreateP16TrajectoryStruct($34);
 var $36=$pTrajectory;
 __ZL27TrajectorySetGlobalWorkSizeP16TrajectoryStruct($36);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $39=$pTrajectory;
 STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10TrajectoryD0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 (function() { try { __THREW__ = 0; return __ZN10TrajectoryD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=$4;
 __ZdlPv($6);
 STACKTOP=sp;return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1); var $8$1 = tempRet0;
 var $9=$8$0;
 $2=$9;
 var $10=$8$1;
 $3=$10;
 var $11=$4;
 __ZdlPv($11);
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=$3;
 var $15$0=$13;
 var $15$1=0;
 var $16$0=$15$0;
 var $16$1=$14;
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10TrajectoryD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=$4;
 HEAP32[(($5)>>2)]=6928;
 var $6=(($4+12)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(function() { try { __THREW__ = 0; return __ZL17TrajectoryReleaseP16TrajectoryStruct($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $10=$4;
 __ZN6OpenCL7ProgramD2Ev($10);
 STACKTOP=sp;return;
 case 3: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=$12$0;
 $2=$13;
 var $14=$12$1;
 $3=$14;
 var $15=$4;
 (function() { try { __THREW__ = 0; return __ZN6OpenCL7ProgramD2Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $18=$2;
 var $19=$3;
 var $20$0=$18;
 var $20$1=0;
 var $21$0=$20$0;
 var $21$1=$19;
 ___resumeException($21$0)
 case 6: 
 var $23$0 = ___cxa_find_matching_catch(-1, -1,0); var $23$1 = tempRet0;
 var $24=$23$0;
 ___clang_call_terminate($24);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZL17TrajectoryReleaseP16TrajectoryStruct($pTrajectory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $2;
 var $3;
 $1=$pTrajectory;
 var $4=$1;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=25;break;}
 case 2: 
 $i=0;
 label=3;break;
 case 3: 
 var $8=$i;
 var $9=($8>>>0)<5;
 if($9){label=4;break;}else{label=16;break;}
 case 4: 
 var $11=$i;
 var $12=$1;
 var $13=(($12+32)|0);
 var $14=(($13+($11<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=8;break;}
 case 5: 
 var $18=$i;
 var $19=$1;
 var $20=(($19+32)|0);
 var $21=(($20+($18<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=6;break;}
 case 6: 
 var $25=$22;
 __ZdaPv($25);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $28=$i;
 var $29=$1;
 var $30=(($29+52)|0);
 var $31=(($30+($28<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)!=0;
 if($33){label=9;break;}else{label=14;break;}
 case 9: 
 var $35=$i;
 var $36=$1;
 var $37=(($36+52)|0);
 var $38=(($37+($35<<2))|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==0;
 if($40){label=12;break;}else{label=10;break;}
 case 10: 
 (function() { try { __THREW__ = 0; return __ZN6OpenCL6BufferD2Ev($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $43=$39;
 __ZdlPv($43);
 label=12;break;
 case 12: 
 label=14;break;
 case 13: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1); var $46$1 = tempRet0;
 var $47=$46$0;
 $2=$47;
 var $48=$46$1;
 $3=$48;
 var $49=$39;
 __ZdlPv($49);
 label=26;break;
 case 14: 
 label=15;break;
 case 15: 
 var $52=$i;
 var $53=((($52)+(1))|0);
 $i=$53;
 label=3;break;
 case 16: 
 var $55=$1;
 var $56=(($55+72)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)!=0;
 if($58){label=17;break;}else{label=22;break;}
 case 17: 
 var $60=$1;
 var $61=(($60+72)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){label=20;break;}else{label=18;break;}
 case 18: 
 (function() { try { __THREW__ = 0; return __ZN6OpenCL6KernelD2Ev($62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=21;break; }
 case 19: 
 var $66=$62;
 __ZdlPv($66);
 label=20;break;
 case 20: 
 label=22;break;
 case 21: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1); var $69$1 = tempRet0;
 var $70=$69$0;
 $2=$70;
 var $71=$69$1;
 $3=$71;
 var $72=$62;
 __ZdlPv($72);
 label=26;break;
 case 22: 
 var $74=$1;
 var $75=($74|0)==0;
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=$74;
 __ZdlPv($77);
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 STACKTOP=sp;return 1;
 case 26: 
 var $81=$2;
 var $82=$3;
 var $83$0=$81;
 var $83$1=0;
 var $84$0=$83$0;
 var $84$1=$82;
 ___resumeException($84$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10Trajectory7AcquireERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$rkernelName){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $bFlagIsValid;
 $1=$this;
 $2=$rkernelName;
 var $3=$1;
 $bFlagIsValid=0;
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+72)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 __ZN6OpenCL6Kernel16SetWorkDimensionERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($7,$8,1);
 var $9=(($3+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+72)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$2;
 var $14=__ZN6OpenCL6Kernel7AcquireERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($12,$13);
 var $15=($14&1);
 $bFlagIsValid=$15;
 var $16=$bFlagIsValid;
 var $17=(($16)&1);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=(($3+12)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=__ZL21TrajectoryBindBuffersP16TrajectoryStruct($20);
 var $22=($21&1);
 $bFlagIsValid=$22;
 label=3;break;
 case 3: 
 var $24=$bFlagIsValid;
 var $25=(($24)&1);
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL21TrajectoryBindBuffersP16TrajectoryStruct($pTrajectory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $bBuffersBound;
 var $nBufferIndex;
 $1=$pTrajectory;
 $bBuffersBound=1;
 $nBufferIndex=0;
 label=2;break;
 case 2: 
 var $3=$bBuffersBound;
 var $4=(($3)&1);
 if($4){label=3;break;}else{var $9=0;label=4;break;}
 case 3: 
 var $6=$nBufferIndex;
 var $7=($6>>>0)<5;
 var $9=$7;label=4;break;
 case 4: 
 var $9;
 if($9){label=5;break;}else{label=8;break;}
 case 5: 
 var $11=$bBuffersBound;
 var $12=(($11)&1);
 if($12){label=6;break;}else{var $24=0;label=7;break;}
 case 6: 
 var $14=$1;
 var $15=(($14+72)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$nBufferIndex;
 var $18=$1;
 var $19=(($18+52)|0);
 var $20=(($19+($17<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=__ZN6OpenCL6Kernel10BindBufferEPNS_6BufferE($16,$21);
 var $24=$22;label=7;break;
 case 7: 
 var $24;
 var $25=($24&1);
 $bBuffersBound=$25;
 var $26=$nBufferIndex;
 var $27=((($26)+(1))|0);
 $nBufferIndex=$27;
 label=2;break;
 case 8: 
 var $29=$bBuffersBound;
 var $30=(($29)&1);
 STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10Trajectory7ComputeEfff($this,$nInitialTime,$nInitialSpeed,$nInitialParam){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $computed;
 $1=$this;
 $2=$nInitialTime;
 $3=$nInitialSpeed;
 $4=$nInitialParam;
 var $5=$1;
 $computed=0;
 var $6=$2;
 var $7=(($5+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+16)|0);
 var $10=(($9)|0);
 HEAPF32[(($10)>>2)]=$6;
 var $11=$3;
 var $12=(($5+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=(($14+8)|0);
 HEAPF32[(($15)>>2)]=$11;
 var $16=$4;
 var $17=(($5+12)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+16)|0);
 var $20=(($19+12)|0);
 HEAPF32[(($20)>>2)]=$16;
 var $21=(($5+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=__ZL24TrajectoryBindParametersP16TrajectoryStruct($22);
 if($23){label=2;break;}else{label=5;break;}
 case 2: 
 var $25=(($5+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=__ZL23TrajectoryExecuteKernelP16TrajectoryStruct($26);
 if($27){label=3;break;}else{label=4;break;}
 case 3: 
 var $29=$5;
 __ZN6OpenCL7Program5FlushEv($29);
 var $30=(($5+12)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=__ZL21TrajectoryReadBuffersP16TrajectoryStruct($31);
 var $33=($32&1);
 $computed=$33;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $36=$computed;
 var $37=(($36)&1);
 STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL24TrajectoryBindParametersP16TrajectoryStruct($pTrajectory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $bParametersBound;
 var $nParamIndex;
 $1=$pTrajectory;
 $bParametersBound=1;
 $nParamIndex=0;
 label=2;break;
 case 2: 
 var $3=$bParametersBound;
 var $4=(($3)&1);
 if($4){label=3;break;}else{var $9=0;label=4;break;}
 case 3: 
 var $6=$nParamIndex;
 var $7=($6>>>0)<4;
 var $9=$7;label=4;break;
 case 4: 
 var $9;
 if($9){label=5;break;}else{label=8;break;}
 case 5: 
 var $11=$bParametersBound;
 var $12=(($11)&1);
 if($12){label=6;break;}else{var $26=0;label=7;break;}
 case 6: 
 var $14=$1;
 var $15=(($14+72)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$nParamIndex;
 var $18=((($17)+(5))|0);
 var $19=$nParamIndex;
 var $20=$1;
 var $21=(($20+16)|0);
 var $22=(($21+($19<<2))|0);
 var $23=$22;
 var $24=__ZN6OpenCL6Kernel13BindParameterEjjPKv($16,$18,4,$23);
 var $26=$24;label=7;break;
 case 7: 
 var $26;
 var $27=($26&1);
 $bParametersBound=$27;
 var $28=$nParamIndex;
 var $29=((($28)+(1))|0);
 $nParamIndex=$29;
 label=2;break;
 case 8: 
 var $31=$bParametersBound;
 var $32=(($31)&1);
 STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL23TrajectoryExecuteKernelP16TrajectoryStruct($pTrajectory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$pTrajectory;
 var $2=$1;
 var $3=(($2+72)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5+8)|0);
 var $7=__ZN6OpenCL6Kernel7ExecuteEPKj($4,$6);
 STACKTOP=sp;return $7;
}


function __ZL21TrajectoryReadBuffersP16TrajectoryStruct($pTrajectory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $bReadBuffers;
 var $nBufferIndex;
 $1=$pTrajectory;
 $bReadBuffers=1;
 $nBufferIndex=0;
 label=2;break;
 case 2: 
 var $3=$bReadBuffers;
 var $4=(($3)&1);
 if($4){label=3;break;}else{var $9=0;label=4;break;}
 case 3: 
 var $6=$nBufferIndex;
 var $7=($6>>>0)<5;
 var $9=$7;label=4;break;
 case 4: 
 var $9;
 if($9){label=5;break;}else{label=8;break;}
 case 5: 
 var $11=$bReadBuffers;
 var $12=(($11)&1);
 if($12){label=6;break;}else{var $30=0;label=7;break;}
 case 6: 
 var $14=$nBufferIndex;
 var $15=$1;
 var $16=(($15+52)|0);
 var $17=(($16+($14<<2))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$1;
 var $20=(($19)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$nBufferIndex;
 var $23=$1;
 var $24=(($23+32)|0);
 var $25=(($24+($22<<2))|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$26;
 var $28=__ZN6OpenCL6Buffer4ReadEjPv($18,$21,$27);
 var $30=$28;label=7;break;
 case 7: 
 var $30;
 var $31=($30&1);
 $bReadBuffers=$31;
 var $32=$nBufferIndex;
 var $33=((($32)+(1))|0);
 $nBufferIndex=$33;
 label=2;break;
 case 8: 
 var $35=$bReadBuffers;
 var $36=(($35)&1);
 STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10Trajectory3LogEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZL13TrajectoryLogP16TrajectoryStruct($4);
 STACKTOP=sp;return;
}


function __ZL13TrajectoryLogP16TrajectoryStruct($pTrajectory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $i;
 var $t;
 $13=$pTrajectory;
 $t=0;
 var $14=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15472,1544);
 $11=$14;
 $12=8;
 var $15=$11;
 var $16=$12;
 var $17=FUNCTION_TABLE[$16]($15);
 $i=0;
 label=2;break;
 case 2: 
 var $19=$i;
 var $20=$13;
 var $21=(($20+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($19>>>0)<($22>>>0);
 if($23){label=3;break;}else{label=5;break;}
 case 3: 
 var $25=$i;
 var $26=($25>>>0);
 var $27=$13;
 var $28=(($27+16)|0);
 var $29=(($28+4)|0);
 var $30=HEAPF32[(($29)>>2)];
 var $31=($26)*($30);
 $t=$31;
 var $32=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15472,2664);
 var $33=$t;
 var $34=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf($32,$33);
 $9=$34;
 $10=8;
 var $35=$9;
 var $36=$10;
 var $37=FUNCTION_TABLE[$36]($35);
 var $38=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15472,2424);
 var $39=$i;
 var $40=$13;
 var $41=(($40+32)|0);
 var $42=(($41)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+($39<<2))|0);
 var $45=HEAPF32[(($44)>>2)];
 var $46=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf($38,$45);
 var $47=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($46,1984);
 var $48=$i;
 var $49=$13;
 var $50=(($49+32)|0);
 var $51=(($50+4)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+($48<<2))|0);
 var $54=HEAPF32[(($53)>>2)];
 var $55=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf($47,$54);
 var $56=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($55,1536);
 $7=$56;
 $8=8;
 var $57=$7;
 var $58=$8;
 var $59=FUNCTION_TABLE[$58]($57);
 var $60=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15472,1296);
 var $61=$i;
 var $62=$13;
 var $63=(($62+32)|0);
 var $64=(($63+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+($61<<2))|0);
 var $67=HEAPF32[(($66)>>2)];
 var $68=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf($60,$67);
 var $69=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($68,1984);
 var $70=$i;
 var $71=$13;
 var $72=(($71+32)|0);
 var $73=(($72+12)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+($70<<2))|0);
 var $76=HEAPF32[(($75)>>2)];
 var $77=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf($69,$76);
 var $78=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($77,1536);
 $5=$78;
 $6=8;
 var $79=$5;
 var $80=$6;
 var $81=FUNCTION_TABLE[$80]($79);
 var $82=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15472,880);
 var $83=$i;
 var $84=$13;
 var $85=(($84+32)|0);
 var $86=(($85+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+($83<<2))|0);
 var $89=HEAPF32[(($88)>>2)];
 var $90=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf($82,$89);
 $3=$90;
 $4=8;
 var $91=$3;
 var $92=$4;
 var $93=FUNCTION_TABLE[$92]($91);
 label=4;break;
 case 4: 
 var $95=$i;
 var $96=((($95)+(1))|0);
 $i=$96;
 label=2;break;
 case 5: 
 var $98=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(15472,472);
 $1=$98;
 $2=8;
 var $99=$1;
 var $100=$2;
 var $101=FUNCTION_TABLE[$100]($99);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL23TrajectoryKernelsCreatePN6OpenCL7ProgramEP16TrajectoryStruct($pProgram,$pTrajectory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$pProgram;
 $2=$pTrajectory;
 var $5=__Znwj(4);
 var $6=$5;
 var $7=$1;
 (function() { try { __THREW__ = 0; return __ZN6OpenCL6KernelC2EPKNS_7ProgramE($6,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $9=$2;
 var $10=(($9+72)|0);
 HEAP32[(($10)>>2)]=$6;
 var $11=$2;
 var $12=(($11+72)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)!=0;
 STACKTOP=sp;return $14;
 case 3: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1); var $16$1 = tempRet0;
 var $17=$16$0;
 $3=$17;
 var $18=$16$1;
 $4=$18;
 __ZdlPv($5);
 label=4;break;
 case 4: 
 var $20=$3;
 var $21=$4;
 var $22$0=$20;
 var $22$1=0;
 var $23$0=$22$0;
 var $23$1=$21;
 ___resumeException($23$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZL23TrajectoryBuffersCreatePN6OpenCL7ProgramEP16TrajectoryStruct($pProgram,$pTrajectory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $bBuffersCreated;
 var $nBufferIndex;
 var $3;
 var $4;
 $1=$pProgram;
 $2=$pTrajectory;
 $bBuffersCreated=1;
 $nBufferIndex=0;
 var $5=$2;
 var $6=(($5+12)|0);
 var $7=HEAPF32[(($6)>>2)];
 var $8=$2;
 var $9=(($8+16)|0);
 var $10=(($9+4)|0);
 var $11=HEAPF32[(($10)>>2)];
 var $12=($7)/($11);
 var $13=($12>=0 ? Math_floor($12) : Math_ceil($12));
 var $14=$2;
 var $15=(($14+4)|0);
 HEAP32[(($15)>>2)]=$13;
 var $16=$2;
 var $17=(($16+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18<<2);
 var $20=$2;
 var $21=(($20)|0);
 HEAP32[(($21)>>2)]=$19;
 label=2;break;
 case 2: 
 var $23=$bBuffersCreated;
 var $24=(($23)&1);
 if($24){label=3;break;}else{var $29=0;label=4;break;}
 case 3: 
 var $26=$nBufferIndex;
 var $27=($26>>>0)<5;
 var $29=$27;label=4;break;
 case 4: 
 var $29;
 if($29){label=5;break;}else{label=12;break;}
 case 5: 
 var $31=__Znwj(4);
 var $32=$31;
 var $33=$1;
 (function() { try { __THREW__ = 0; return __ZN6OpenCL6BufferC2EPKNS_7ProgramE($32,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 var $35=$nBufferIndex;
 var $36=$2;
 var $37=(($36+52)|0);
 var $38=(($37+($35<<2))|0);
 HEAP32[(($38)>>2)]=$32;
 var $39=$nBufferIndex;
 var $40=$2;
 var $41=(($40+52)|0);
 var $42=(($41+($39<<2))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)!=0;
 var $45=($44&1);
 $bBuffersCreated=$45;
 var $46=$bBuffersCreated;
 var $47=(($46)&1);
 if($47){label=7;break;}else{label=11;break;}
 case 7: 
 var $49=$bBuffersCreated;
 var $50=(($49)&1);
 if($50){label=8;break;}else{var $63=0;label=9;break;}
 case 8: 
 var $52=$nBufferIndex;
 var $53=$2;
 var $54=(($53+52)|0);
 var $55=(($54+($52<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$nBufferIndex;
 var $58=$2;
 var $59=(($58)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=__ZN6OpenCL6Buffer7AcquireEjj($56,$57,$60);
 var $63=$61;label=9;break;
 case 9: 
 var $63;
 var $64=($63&1);
 $bBuffersCreated=$64;
 label=11;break;
 case 10: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=$66$0;
 $3=$67;
 var $68=$66$1;
 $4=$68;
 __ZdlPv($31);
 label=13;break;
 case 11: 
 var $70=$nBufferIndex;
 var $71=((($70)+(1))|0);
 $nBufferIndex=$71;
 label=2;break;
 case 12: 
 var $73=$bBuffersCreated;
 var $74=(($73)&1);
 STACKTOP=sp;return $74;
 case 13: 
 var $76=$3;
 var $77=$4;
 var $78$0=$76;
 var $78$1=0;
 var $79$0=$78$0;
 var $79$1=$77;
 ___resumeException($79$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZL22TrajectoryArraysCreateP16TrajectoryStruct($pTrajectory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $bArrayCreated;
 var $nArrayIndex;
 var $nArrayCount;
 $1=$pTrajectory;
 $bArrayCreated=1;
 $nArrayIndex=0;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 $nArrayCount=$4;
 label=2;break;
 case 2: 
 var $6=$bArrayCreated;
 var $7=(($6)&1);
 if($7){label=3;break;}else{var $12=0;label=4;break;}
 case 3: 
 var $9=$nArrayIndex;
 var $10=($9>>>0)<5;
 var $12=$10;label=4;break;
 case 4: 
 var $12;
 if($12){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=$nArrayCount;
 var $15$0=_llvm_umul_with_overflow_i32($14,4);
 var $15$1=tempRet0;
 var $16=$15$1;
 var $17=$15$0;
 var $18=($16?-1:$17);
 var $19=__Znaj($18);
 var $20=$19;
 var $21=$nArrayIndex;
 var $22=$1;
 var $23=(($22+32)|0);
 var $24=(($23+($21<<2))|0);
 HEAP32[(($24)>>2)]=$20;
 var $25=$nArrayIndex;
 var $26=$1;
 var $27=(($26+32)|0);
 var $28=(($27+($25<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)!=0;
 var $31=($30&1);
 $bArrayCreated=$31;
 var $32=$bArrayCreated;
 var $33=(($32)&1);
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=$nArrayIndex;
 var $36=$1;
 var $37=(($36+32)|0);
 var $38=(($37+($35<<2))|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$39;
 var $41=$1;
 var $42=(($41)|0);
 var $43=HEAP32[(($42)>>2)];
 _memset($40, 0, $43)|0;
 label=7;break;
 case 7: 
 var $45=$nArrayIndex;
 var $46=((($45)+(1))|0);
 $nArrayIndex=$46;
 label=2;break;
 case 8: 
 var $48=$bArrayCreated;
 var $49=(($48)&1);
 STACKTOP=sp;return $49;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL27TrajectorySetGlobalWorkSizeP16TrajectoryStruct($pTrajectory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $nBufferSize;
 var $nBufferCount;
 $1=$pTrajectory;
 var $2=$1;
 var $3=(($2+52)|0);
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=__ZNK6OpenCL6Buffer13GetBufferSizeEv($5);
 $nBufferSize=$6;
 var $7=$nBufferSize;
 var $8=(((($7>>>0))/(4))&-1);
 $nBufferCount=$8;
 var $9=$nBufferCount;
 var $10=$1;
 var $11=(($10+8)|0);
 HEAP32[(($11)>>2)]=$9;
 STACKTOP=sp;return;
}


function __ZNSt3__18ios_base4InitC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(sp)+(24);
 var $5=HEAP32[((_stdin)>>2)];
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(14744,$5,14872);
 HEAP32[((15736)>>2)]=6140;
 HEAP32[((15744)>>2)]=6160;
 HEAP32[((15740)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(15744,14744) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=2;break; }
 case 2: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1); var $7$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(15744);
 ___resumeException($7$0)
 case 3: 
 HEAP32[((15816)>>2)]=0;
 HEAP32[((15820)>>2)]=-1;
 var $8=HEAP32[((_stdout)>>2)];
 var $9=$4;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 HEAP32[((14648)>>2)]=5872;
 __ZNSt3__16localeC2Ev(14652);
 HEAP32[((14656)>>2)]=0; HEAP32[((14660)>>2)]=0; HEAP32[((14664)>>2)]=0; HEAP32[((14668)>>2)]=0; HEAP32[((14672)>>2)]=0; HEAP32[((14676)>>2)]=0;
 HEAP32[((14648)>>2)]=6360;
 HEAP32[((14680)>>2)]=$8;
 __ZNSt3__16localeC2ERKS0_($4,14652);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($4,15072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 __ZNSt3__16localeD2Ev($4);
 HEAP32[((14648)>>2)]=5872;
 __ZNSt3__16localeD2Ev(14652);
 ___resumeException($12$0)
 case 5: 
 var $13=$10;
 __ZNSt3__16localeD2Ev($4);
 HEAP32[((14684)>>2)]=$13;
 HEAP32[((14688)>>2)]=14880;
 var $14=$10;
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=FUNCTION_TABLE[$17]($13);
 var $19=($18&1);
 HEAP8[(14692)]=$19;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP32[((15472)>>2)]=6044;
 HEAP32[((15476)>>2)]=6064;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(15476,14648) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=6;break; }
 case 6: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(15476);
 ___resumeException($21$0)
 case 7: 
 HEAP32[((15548)>>2)]=0;
 HEAP32[((15552)>>2)]=-1;
 var $22=HEAP32[((_stderr)>>2)];
 var $23=$3;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 HEAP32[((14696)>>2)]=5872;
 __ZNSt3__16localeC2Ev(14700);
 HEAP32[((14704)>>2)]=0; HEAP32[((14708)>>2)]=0; HEAP32[((14712)>>2)]=0; HEAP32[((14716)>>2)]=0; HEAP32[((14720)>>2)]=0; HEAP32[((14724)>>2)]=0;
 HEAP32[((14696)>>2)]=6360;
 HEAP32[((14728)>>2)]=$22;
 __ZNSt3__16localeC2ERKS0_($3,14700);
 var $24=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($3,15072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 __ZNSt3__16localeD2Ev($3);
 HEAP32[((14696)>>2)]=5872;
 __ZNSt3__16localeD2Ev(14700);
 ___resumeException($26$0)
 case 9: 
 var $27=$24;
 __ZNSt3__16localeD2Ev($3);
 HEAP32[((14732)>>2)]=$27;
 HEAP32[((14736)>>2)]=14888;
 var $28=$24;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+28)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($27);
 var $33=($32&1);
 HEAP8[(14740)]=$33;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 HEAP32[((15648)>>2)]=6044;
 HEAP32[((15652)>>2)]=6064;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(15652,14696) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=10;break; }
 case 10: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(15652);
 ___resumeException($35$0)
 case 11: 
 HEAP32[((15724)>>2)]=0;
 HEAP32[((15728)>>2)]=-1;
 var $36=HEAP32[((15648)>>2)];
 var $37=((($36)-(12))|0);
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $_sum=((($39)+(24))|0);
 var $40=((15648+$_sum)|0);
 var $41=$40;
 var $42=HEAP32[(($41)>>2)];
 HEAP32[((15560)>>2)]=6044;
 HEAP32[((15564)>>2)]=6064;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(15564,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1); var $44$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(15564);
 ___resumeException($44$0)
 case 13: 
 HEAP32[((15636)>>2)]=0;
 HEAP32[((15640)>>2)]=-1;
 var $45=HEAP32[((15736)>>2)];
 var $46=((($45)-(12))|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $_sum7=((($48)+(72))|0);
 var $49=((15736+$_sum7)|0);
 var $50=$49;
 HEAP32[(($50)>>2)]=15472;
 var $51=HEAP32[((15648)>>2)];
 var $52=((($51)-(12))|0);
 var $53=$52;
 var $54=HEAP32[(($53)>>2)];
 var $_sum8=((($54)+(4))|0);
 var $55=((15648+$_sum8)|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $58=$57|8192;
 HEAP32[(($56)>>2)]=$58;
 var $59=HEAP32[((15648)>>2)];
 var $60=((($59)-(12))|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $_sum9=((($62)+(72))|0);
 var $63=((15648+$_sum9)|0);
 var $64=$63;
 HEAP32[(($64)>>2)]=15472;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(14592,$5,14896);
 HEAP32[((15384)>>2)]=6092;
 HEAP32[((15392)>>2)]=6112;
 HEAP32[((15388)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(15392,14592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(15392);
 ___resumeException($66$0)
 case 15: 
 HEAP32[((15464)>>2)]=0;
 HEAP32[((15468)>>2)]=-1;
 var $67=$2;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 HEAP32[((14496)>>2)]=5800;
 __ZNSt3__16localeC2Ev(14500);
 HEAP32[((14504)>>2)]=0; HEAP32[((14508)>>2)]=0; HEAP32[((14512)>>2)]=0; HEAP32[((14516)>>2)]=0; HEAP32[((14520)>>2)]=0; HEAP32[((14524)>>2)]=0;
 HEAP32[((14496)>>2)]=6288;
 HEAP32[((14528)>>2)]=$8;
 __ZNSt3__16localeC2ERKS0_($2,14500);
 var $68=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2,15064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1); var $70$1 = tempRet0;
 __ZNSt3__16localeD2Ev($2);
 HEAP32[((14496)>>2)]=5800;
 __ZNSt3__16localeD2Ev(14500);
 ___resumeException($70$0)
 case 17: 
 var $71=$68;
 __ZNSt3__16localeD2Ev($2);
 HEAP32[((14532)>>2)]=$71;
 HEAP32[((14536)>>2)]=14904;
 var $72=$68;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($71);
 var $77=($76&1);
 HEAP8[(14540)]=$77;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 HEAP32[((15104)>>2)]=5996;
 HEAP32[((15108)>>2)]=6016;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(15108,14496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(15108);
 ___resumeException($79$0)
 case 19: 
 HEAP32[((15180)>>2)]=0;
 HEAP32[((15184)>>2)]=-1;
 var $80=$1;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 HEAP32[((14544)>>2)]=5800;
 __ZNSt3__16localeC2Ev(14548);
 HEAP32[((14552)>>2)]=0; HEAP32[((14556)>>2)]=0; HEAP32[((14560)>>2)]=0; HEAP32[((14564)>>2)]=0; HEAP32[((14568)>>2)]=0; HEAP32[((14572)>>2)]=0;
 HEAP32[((14544)>>2)]=6288;
 HEAP32[((14576)>>2)]=$22;
 __ZNSt3__16localeC2ERKS0_($1,14548);
 var $81=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,15064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=20;break; }
 case 20: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1); var $83$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[((14544)>>2)]=5800;
 __ZNSt3__16localeD2Ev(14548);
 ___resumeException($83$0)
 case 21: 
 var $84=$81;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[((14580)>>2)]=$84;
 HEAP32[((14584)>>2)]=14912;
 var $85=$81;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+28)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($84);
 var $90=($89&1);
 HEAP8[(14588)]=$90;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 HEAP32[((15280)>>2)]=5996;
 HEAP32[((15284)>>2)]=6016;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(15284,14544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(15284);
 ___resumeException($92$0)
 case 23: 
 HEAP32[((15356)>>2)]=0;
 HEAP32[((15360)>>2)]=-1;
 var $93=HEAP32[((15280)>>2)];
 var $94=((($93)-(12))|0);
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $_sum10=((($96)+(24))|0);
 var $97=((15280+$_sum10)|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 HEAP32[((15192)>>2)]=5996;
 HEAP32[((15196)>>2)]=6016;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(15196,$99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $101$0 = ___cxa_find_matching_catch(-1, -1); var $101$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(15196);
 ___resumeException($101$0)
 case 25: 
 HEAP32[((15268)>>2)]=0;
 HEAP32[((15272)>>2)]=-1;
 var $102=HEAP32[((15384)>>2)];
 var $103=((($102)-(12))|0);
 var $104=$103;
 var $105=HEAP32[(($104)>>2)];
 var $_sum11=((($105)+(72))|0);
 var $106=((15384+$_sum11)|0);
 var $107=$106;
 HEAP32[(($107)>>2)]=15104;
 var $108=HEAP32[((15280)>>2)];
 var $109=((($108)-(12))|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $_sum12=((($111)+(4))|0);
 var $112=((15280+$_sum12)|0);
 var $113=$112;
 var $114=HEAP32[(($113)>>2)];
 var $115=$114|8192;
 HEAP32[(($113)>>2)]=$115;
 var $116=HEAP32[((15280)>>2)];
 var $117=((($116)-(12))|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $_sum13=((($119)+(72))|0);
 var $120=((15280+$_sum13)|0);
 var $121=$120;
 HEAP32[(($121)>>2)]=15104;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base4InitD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(15472) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $3=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(15560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(15104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(15192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 return;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5800;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__111__stdoutbufIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5800;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;


 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,15064);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}


function __ZNSt3__111__stdoutbufIwE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 var $5=($__n|0)>0;
 if($5){var $_012=$__s;var $__i_03=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $7=$__s;
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($7,4,$__n,$9);
 var $_0=$10;label=6;break;
 case 4: 
 var $__i_03;
 var $_012;
 var $11=HEAP32[(($4)>>2)];
 var $12=(($11+52)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=HEAP32[(($_012)>>2)];
 var $15=FUNCTION_TABLE[$13]($this,$14);
 var $16=($15|0)==-1;
 if($16){var $_0=$__i_03;label=6;break;}else{label=5;break;}
 case 5: 
 var $18=((($__i_03)+(1))|0);
 var $19=(($_012+4)|0);
 var $20=($18|0)<($__n|0);
 if($20){var $_012=$19;var $__i_03=$18;label=4;break;}else{var $_0=$18;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 HEAP32[(($__1buf)>>2)]=$__c;
 var $3=(($this+44)|0);
 var $4=HEAP8[($3)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=$__1buf;
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($7,4,1,$9);
 var $11=($10|0)==1;
 if($11){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $13=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$13;
 var $14=(($__1buf+4)|0);
 var $15=(($this+36)|0);
 var $16=(($this+40)|0);
 var $17=(($__extbuf+8)|0);
 var $18=$__extbuf;
 var $19=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $21=HEAP32[(($15)>>2)];
 var $22=HEAP32[(($16)>>2)];
 var $23=$21;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($21,$22,$pbase_0,$14,$__e,$13,$17,$__extbe);
 var $28=HEAP32[(($__e)>>2)];
 var $29=($28|0)==($pbase_0|0);
 if($29){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $31=($27|0)==3;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 var $33=$pbase_0;
 var $34=HEAP32[(($19)>>2)];
 var $35=_fwrite($33,1,1,$34);
 var $36=($35|0)==1;
 if($36){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $38=($27|0)==1;
 var $39=($27>>>0)<2;
 if($39){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $41=HEAP32[(($__extbe)>>2)];
 var $42=$41;
 var $43=((($42)-($18))|0);
 var $44=HEAP32[(($19)>>2)];
 var $45=_fwrite($13,1,$43,$44);
 var $46=($45|0)==($43|0);
 if($46){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $48=HEAP32[(($__e)>>2)];
 var $_pbase_0=($38?$48:$pbase_0);
 if($38){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $___c_i=($1?0:$__c);
 var $_0=$___c_i;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=5800;
 var $3=(($this+4)|0);
 __ZNSt3__16localeC2Ev($3);
 var $4=(($this+8)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0;
 HEAP32[(($2)>>2)]=6688;
 var $6=(($this+32)|0);
 HEAP32[(($6)>>2)]=$__fp;
 var $7=(($this+40)|0);
 HEAP32[(($7)>>2)]=$__st;
 var $8=(($this+48)|0);
 HEAP32[(($8)>>2)]=-1;
 var $9=(($this+52)|0);
 HEAP8[($9)]=0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,15064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $11=$10;
 var $12=(($this+36)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=$10;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($11);
 var $18=(($this+44)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=HEAP32[(($12)>>2)];
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($19);
 var $25=(($this+53)|0);
 var $26=($24&1);
 HEAP8[($25)]=$26;
 var $27=HEAP32[(($18)>>2)];
 var $28=($27|0)>8;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($1);
 STACKTOP=sp;return;
 case 5: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($2)>>2)]=5800;
 __ZNSt3__16localeD2Ev($3);
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5800;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__110__stdinbufIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5800;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,15064);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(64);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE9underflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,0);
 return $1;
}


function __ZNSt3__110__stdinbufIwE5uflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,1);
 return $1;
}


function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=(($3<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($4){var $_01=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $7=(($this+48)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=-1;
 var $10=($9&1);
 HEAP8[($2)]=$10;
 var $_01=$8;label=11;break;
 case 4: 
 var $12=(($this+48)|0);
 if($4){label=5;break;}else{label=10;break;}
 case 5: 
 var $14=HEAP32[(($12)>>2)];
 HEAP32[(($__ci)>>2)]=$14;
 var $15=(($this+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($this+40)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($__ci+4)|0);
 var $20=(($__extbuf)|0);
 var $21=(($__extbuf+8)|0);
 var $22=$16;
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=FUNCTION_TABLE[$25]($16,$18,$__ci,$19,$__inxt,$20,$21,$__enxt);
 if(($26|0)==2|($26|0)==1){ var $_01=-1;label=11;break;}else if(($26|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $28=HEAP32[(($12)>>2)];
 var $29=(($28)&255);
 HEAP8[($20)]=$29;
 var $30=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$30;
 label=7;break;
 case 7: 
 var $31=(($this+32)|0);
 label=8;break;
 case 8: 
 var $32=HEAP32[(($__enxt)>>2)];
 var $33=($32>>>0)>($20>>>0);
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 var $35=((($32)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$35;
 var $36=HEAP8[($35)];
 var $37=(($36<<24)>>24);
 var $38=HEAP32[(($31)>>2)];
 var $39=_ungetc($37,$38);
 var $40=($39|0)==-1;
 if($40){var $_01=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($12)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_01=$__c;label=11;break;
 case 11: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+48)|0);
 var $6=HEAP32[(($5)>>2)];
 if($__consume){label=3;break;}else{var $_0=$6;label=22;break;}
 case 3: 
 HEAP32[(($5)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$6;label=22;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $12=($11?$10:1);
 var $13=($12|0)>0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=(($this+32)|0);
 var $__i_09=0;label=6;break;
 case 6: 
 var $__i_09;
 var $16=HEAP32[(($14)>>2)];
 var $17=_fgetc($16);
 var $18=($17|0)==-1;
 if($18){var $_0=-1;label=22;break;}else{label=7;break;}
 case 7: 
 var $20=(($17)&255);
 var $21=(($__extbuf+$__i_09)|0);
 HEAP8[($21)]=$20;
 var $22=((($__i_09)+(1))|0);
 var $23=($22|0)<($12|0);
 if($23){var $__i_09=$22;label=6;break;}else{label=8;break;}
 case 8: 
 var $24=(($this+53)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+4)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$12;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 var $35=(($34<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$35;
 var $__nread_2=$12;label=16;break;
 case 11: 
 var $__nread_0;
 var $37=HEAP32[(($27)>>2)];
 var $38=$37;
 var $ld$0$0=(($38)|0);
 var $39$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$1$1)>>2)];
 var $40=HEAP32[(($28)>>2)];
 var $41=(($__extbuf+$__nread_0)|0);
 var $42=$40;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($40,$37,$29,$41,$__enxt,$__1buf,$30,$__inxt);
 if(($46|0)==1){ label=12;break;}else if(($46|0)==3){ label=14;break;}else if(($46|0)==2){ var $_0=-1;label=22;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $48=HEAP32[(($27)>>2)];
 var $49=$48;
 var $st$2$0=(($49)|0);
 HEAP32[(($st$2$0)>>2)]=$39$0;
 var $st$3$1=(($49+4)|0);
 HEAP32[(($st$3$1)>>2)]=$39$1;
 var $50=($__nread_0|0)==8;
 if($50){var $_0=-1;label=22;break;}else{label=13;break;}
 case 13: 
 var $52=HEAP32[(($31)>>2)];
 var $53=_fgetc($52);
 var $54=($53|0)==-1;
 if($54){var $_0=-1;label=22;break;}else{label=15;break;}
 case 14: 
 var $56=HEAP8[($29)];
 var $57=(($56<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$57;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $59=(($53)&255);
 HEAP8[($41)]=$59;
 var $60=((($__nread_0)+(1))|0);
 var $__nread_0=$60;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $61=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $63=($__i2_0|0)>0;
 if($63){label=19;break;}else{label=21;break;}
 case 19: 
 var $65=((($__i2_0)-(1))|0);
 var $66=(($__extbuf+$65)|0);
 var $67=HEAP8[($66)];
 var $68=(($67<<24)>>24);
 var $69=HEAP32[(($61)>>2)];
 var $70=_ungetc($68,$69);
 var $71=($70|0)==-1;
 if($71){var $_0=-1;label=22;break;}else{var $__i2_0=$65;label=18;break;}
 case 20: 
 var $73=HEAP32[(($__1buf)>>2)];
 var $74=(($this+48)|0);
 HEAP32[(($74)>>2)]=$73;
 var $_0=$73;label=22;break;
 case 21: 
 var $_pre=HEAP32[(($__1buf)>>2)];
 var $_0=$_pre;label=22;break;
 case 22: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5872;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__111__stdoutbufIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5872;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;


 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,15072);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}


function __ZNSt3__111__stdoutbufIcE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 var $5=($__n|0)>0;
 if($5){var $_012=$__s;var $__i_03=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $7=(($this+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_fwrite($__s,1,$__n,$8);
 var $_0=$9;label=6;break;
 case 4: 
 var $__i_03;
 var $_012;
 var $10=HEAP32[(($4)>>2)];
 var $11=(($10+52)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=HEAP8[($_012)];
 var $14=($13&255);
 var $15=FUNCTION_TABLE[$12]($this,$14);
 var $16=($15|0)==-1;
 if($16){var $_0=$__i_03;label=6;break;}else{label=5;break;}
 case 5: 
 var $18=((($__i_03)+(1))|0);
 var $19=(($_012+1)|0);
 var $20=($18|0)<($__n|0);
 if($20){var $_012=$19;var $__i_03=$18;label=4;break;}else{var $_0=$18;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=(($__c)&255);
 HEAP8[($__1buf)]=$3;
 var $4=(($this+44)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($__1buf,1,1,$9);
 var $11=($10|0)==1;
 if($11){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $13=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$13;
 var $14=(($__1buf+1)|0);
 var $15=(($this+36)|0);
 var $16=(($this+40)|0);
 var $17=(($__extbuf+8)|0);
 var $18=$__extbuf;
 var $19=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $21=HEAP32[(($15)>>2)];
 var $22=HEAP32[(($16)>>2)];
 var $23=$21;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($21,$22,$pbase_0,$14,$__e,$13,$17,$__extbe);
 var $28=HEAP32[(($__e)>>2)];
 var $29=($28|0)==($pbase_0|0);
 if($29){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $31=($27|0)==3;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 var $33=HEAP32[(($19)>>2)];
 var $34=_fwrite($pbase_0,1,1,$33);
 var $35=($34|0)==1;
 if($35){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $37=($27|0)==1;
 var $38=($27>>>0)<2;
 if($38){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $40=HEAP32[(($__extbe)>>2)];
 var $41=$40;
 var $42=((($41)-($18))|0);
 var $43=HEAP32[(($19)>>2)];
 var $44=_fwrite($13,1,$42,$43);
 var $45=($44|0)==($42|0);
 if($45){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $47=HEAP32[(($__e)>>2)];
 var $_pbase_0=($37?$47:$pbase_0);
 if($37){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $___c_i=($1?0:$__c);
 var $_0=$___c_i;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=5872;
 var $3=(($this+4)|0);
 __ZNSt3__16localeC2Ev($3);
 var $4=(($this+8)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0;
 HEAP32[(($2)>>2)]=6760;
 var $6=(($this+32)|0);
 HEAP32[(($6)>>2)]=$__fp;
 var $7=(($this+40)|0);
 HEAP32[(($7)>>2)]=$__st;
 var $8=(($this+48)|0);
 HEAP32[(($8)>>2)]=-1;
 var $9=(($this+52)|0);
 HEAP8[($9)]=0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,15072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $11=$10;
 var $12=(($this+36)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=$10;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($11);
 var $18=(($this+44)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=HEAP32[(($12)>>2)];
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($19);
 var $25=(($this+53)|0);
 var $26=($24&1);
 HEAP8[($25)]=$26;
 var $27=HEAP32[(($18)>>2)];
 var $28=($27|0)>8;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($1);
 STACKTOP=sp;return;
 case 5: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($2)>>2)]=5872;
 __ZNSt3__16localeD2Ev($3);
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5872;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__110__stdinbufIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5872;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,15072);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(64);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE9underflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,0);
 return $1;
}


function __ZNSt3__110__stdinbufIcE5uflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,1);
 return $1;
}


function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=(($3<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($4){var $_01=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $7=(($this+48)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=-1;
 var $10=($9&1);
 HEAP8[($2)]=$10;
 var $_01=$8;label=11;break;
 case 4: 
 var $12=(($this+48)|0);
 if($4){label=5;break;}else{label=10;break;}
 case 5: 
 var $14=HEAP32[(($12)>>2)];
 var $15=(($14)&255);
 HEAP8[($__ci)]=$15;
 var $16=(($this+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+40)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($__ci+1)|0);
 var $21=(($__extbuf)|0);
 var $22=(($__extbuf+8)|0);
 var $23=$17;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($17,$19,$__ci,$20,$__inxt,$21,$22,$__enxt);
 if(($27|0)==2|($27|0)==1){ var $_01=-1;label=11;break;}else if(($27|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $29=HEAP32[(($12)>>2)];
 var $30=(($29)&255);
 HEAP8[($21)]=$30;
 var $31=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$31;
 label=7;break;
 case 7: 
 var $32=(($this+32)|0);
 label=8;break;
 case 8: 
 var $33=HEAP32[(($__enxt)>>2)];
 var $34=($33>>>0)>($21>>>0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=((($33)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$36;
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=HEAP32[(($32)>>2)];
 var $40=_ungetc($38,$39);
 var $41=($40|0)==-1;
 if($41){var $_01=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($12)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_01=$__c;label=11;break;
 case 11: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+48)|0);
 var $6=HEAP32[(($5)>>2)];
 if($__consume){label=3;break;}else{var $_0=$6;label=23;break;}
 case 3: 
 HEAP32[(($5)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$6;label=23;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $12=($11?$10:1);
 var $13=($12|0)>0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=(($this+32)|0);
 var $__i_09=0;label=6;break;
 case 6: 
 var $__i_09;
 var $16=HEAP32[(($14)>>2)];
 var $17=_fgetc($16);
 var $18=($17|0)==-1;
 if($18){var $_0=-1;label=23;break;}else{label=7;break;}
 case 7: 
 var $20=(($17)&255);
 var $21=(($__extbuf+$__i_09)|0);
 HEAP8[($21)]=$20;
 var $22=((($__i_09)+(1))|0);
 var $23=($22|0)<($12|0);
 if($23){var $__i_09=$22;label=6;break;}else{label=8;break;}
 case 8: 
 var $24=(($this+53)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+1)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$12;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 HEAP8[($__1buf)]=$34;
 var $__nread_2=$12;label=16;break;
 case 11: 
 var $__nread_0;
 var $36=HEAP32[(($27)>>2)];
 var $37=$36;
 var $ld$0$0=(($37)|0);
 var $38$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$1$1)>>2)];
 var $39=HEAP32[(($28)>>2)];
 var $40=(($__extbuf+$__nread_0)|0);
 var $41=$39;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=FUNCTION_TABLE[$44]($39,$36,$29,$40,$__enxt,$__1buf,$30,$__inxt);
 if(($45|0)==1){ label=12;break;}else if(($45|0)==3){ label=14;break;}else if(($45|0)==2){ var $_0=-1;label=23;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $47=HEAP32[(($27)>>2)];
 var $48=$47;
 var $st$2$0=(($48)|0);
 HEAP32[(($st$2$0)>>2)]=$38$0;
 var $st$3$1=(($48+4)|0);
 HEAP32[(($st$3$1)>>2)]=$38$1;
 var $49=($__nread_0|0)==8;
 if($49){var $_0=-1;label=23;break;}else{label=13;break;}
 case 13: 
 var $51=HEAP32[(($31)>>2)];
 var $52=_fgetc($51);
 var $53=($52|0)==-1;
 if($53){var $_0=-1;label=23;break;}else{label=15;break;}
 case 14: 
 var $55=HEAP8[($29)];
 HEAP8[($__1buf)]=$55;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $57=(($52)&255);
 HEAP8[($40)]=$57;
 var $58=((($__nread_0)+(1))|0);
 var $__nread_0=$58;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $59=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $61=($__i2_0|0)>0;
 if($61){label=19;break;}else{label=21;break;}
 case 19: 
 var $63=((($__i2_0)-(1))|0);
 var $64=(($__extbuf+$63)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=HEAP32[(($59)>>2)];
 var $68=_ungetc($66,$67);
 var $69=($68|0)==-1;
 if($69){var $_0=-1;label=23;break;}else{var $__i2_0=$63;label=18;break;}
 case 20: 
 var $71=HEAP8[($__1buf)];
 var $72=($71&255);
 var $73=(($this+48)|0);
 HEAP32[(($73)>>2)]=$72;
 var $75=$71;label=22;break;
 case 21: 
 var $_pre=HEAP8[($__1buf)];
 var $75=$_pre;label=22;break;
 case 22: 
 var $75;
 var $76=($75&255);
 var $_0=$76;label=23;break;
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __GLOBAL__I_a(){
 var label=0;


 __ZNSt3__18ios_base4InitC2Ev(0);
 var $1=_atexit((392),15824,___dso_handle);
 return;
}


function __ZNSt3__114__shared_countD2Ev($this){
 var label=0;


 return;
}


function __ZNSt3__114__shared_count12__add_sharedEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+1,tempValue);
 return;
}


function __ZNSt3__114__shared_count16__release_sharedEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
 var $3=($2|0)==0;
 if($3){label=2;break;}else{var $_0=0;label=3;break;}
 case 2: 
 var $5=$this;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+8)|0);
 var $8=HEAP32[(($7)>>2)];
 FUNCTION_TABLE[$8]($this);
 var $_0=1;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorC2EPKc($this,$msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4152;
 var $2=_strlen($msg);
 var $3=((($2)+(13))|0);
 var $4=(function() { try { __THREW__ = 0; return __Znaj($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=(($this+4)|0);
 var $7=((($2)+(1))|0);
 var $8=$4;
 var $9=(($4+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$2;
 HEAP32[(($8)>>2)]=$2;
 var $11=(($4+12)|0);
 HEAP32[(($6)>>2)]=$11;
 var $12=(($4+8)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 assert($7 % 1 === 0);(_memcpy($11, $msg, $7)|0);
 return;
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=(($this)|0);

 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4152;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4152;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt11logic_error4whatEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}


function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=4088;
 var $3=(($this+4)|0);
 var $4=$msg;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($msg+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $14=$10;label=4;break;
 case 3: 
 var $12=$msg;
 var $13=(($12+1)|0);
 var $14=$13;label=4;break;
 case 4: 
 var $14;
 var $15=_strlen($14);
 var $16=((($15)+(13))|0);
 var $17=(function() { try { __THREW__ = 0; return __Znaj($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 var $19=((($15)+(1))|0);
 var $20=$17;
 var $21=(($17+4)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=$15;
 HEAP32[(($20)>>2)]=$15;
 var $23=(($17+12)|0);
 HEAP32[(($3)>>2)]=$23;
 var $24=(($17+8)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=0;
 assert($19 % 1 === 0);(_memcpy($23, $14, $19)|0);
 return;
 case 6: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;

 ___resumeException($27$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorC2EPKc($this,$msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4088;
 var $2=_strlen($msg);
 var $3=((($2)+(13))|0);
 var $4=(function() { try { __THREW__ = 0; return __Znaj($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=(($this+4)|0);
 var $7=((($2)+(1))|0);
 var $8=$4;
 var $9=(($4+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$2;
 HEAP32[(($8)>>2)]=$2;
 var $11=(($4+12)|0);
 HEAP32[(($6)>>2)]=$11;
 var $12=(($4+8)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 assert($7 % 1 === 0);(_memcpy($11, $msg, $7)|0);
 return;
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=(($this)|0);

 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4088;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4088;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt13runtime_error4whatEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}


function __ZNSt12length_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4152;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114error_categoryD2Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__114error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;


 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$ev;
 var $2=(($agg_result+4)|0);
 HEAP32[(($2)>>2)]=$this;
 return;
}


function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 FUNCTION_TABLE[$5]($1,$this,$code);
 var $6=(($1+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($condition+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=2;break;}else{var $17=0;label=3;break;}
 case 2: 
 var $12=(($1)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($condition)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $17=$16;label=3;break;
 case 3: 
 var $17;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($code+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{var $9=0;label=3;break;}
 case 2: 
 var $5=(($code)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($condition|0);
 var $9=$7;label=3;break;
 case 3: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__112__do_message7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strerror($ev);
 var $2=_strlen($1);
 var $3=($2>>>0)>4294967279;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $6=($2>>>0)<11;
 if($6){label=4;break;}else{label=5;break;}
 case 4: 
 var $8=$2<<1;
 var $9=(($8)&255);
 var $10=$agg_result;
 HEAP8[($10)]=$9;
 var $11=$agg_result;
 var $12=(($11+1)|0);
 var $__p_0_i_i_i=$12;label=6;break;
 case 5: 
 var $13=((($2)+(16))|0);
 var $14=$13&-16;
 var $15=__Znwj($14);
 var $16=(($agg_result+8)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=$14|1;
 var $18=(($agg_result)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($agg_result+4)|0);
 HEAP32[(($19)>>2)]=$2;
 var $__p_0_i_i_i=$15;label=6;break;
 case 6: 
 var $__p_0_i_i_i;
 assert($2 % 1 === 0);(_memcpy($__p_0_i_i_i, $1, $2)|0);
 var $20=(($__p_0_i_i_i+$2)|0);
 HEAP8[($20)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($ec)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre2=$what_arg;
 if($4){label=16;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP8[($_pre2)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($what_arg+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=5;break;
 case 4: 
 var $13=($6&255);
 var $14=$13>>>1;
 var $15=$14;label=5;break;
 case 5: 
 var $15;
 var $16=($15|0)==0;
 if($16){var $20=$3;label=7;break;}else{label=6;break;}
 case 6: 
 var $18=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,2448,2);
 var $_pre=HEAP32[(($2)>>2)];
 var $20=$_pre;label=7;break;
 case 7: 
 var $20;
 var $21=(($ec+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+24)|0);
 var $26=HEAP32[(($25)>>2)];
 FUNCTION_TABLE[$26]($1,$22,$20);
 var $27=$1;
 var $28=HEAP8[($27)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=9;break;}else{label=8;break;}
 case 8: 
 var $32=(($1+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($1+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $42=$35;var $41=$33;label=10;break;
 case 9: 
 var $37=$1;
 var $38=(($37+1)|0);
 var $39=($28&255);
 var $40=$39>>>1;
 var $42=$40;var $41=$38;label=10;break;
 case 10: 
 var $41;
 var $42;
 var $43=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,$41,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $44=HEAP8[($27)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=16;break;}else{label=12;break;}
 case 12: 
 var $48=(($1+8)|0);
 var $49=HEAP32[(($48)>>2)];
 __ZdlPv($49);
 label=16;break;
 case 13: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=HEAP8[($27)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=15;break;}else{label=14;break;}
 case 14: 
 var $56=(($1+8)|0);
 var $57=HEAP32[(($56)>>2)];
 __ZdlPv($57);
 label=15;break;
 case 15: 
 ___resumeException($51$0)
 case 16: 
 var $58=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($_pre2)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($_pre2)+(4))>>2)];HEAP32[((($58)+(8))>>2)]=HEAP32[((($_pre2)+(8))>>2)];
 HEAP32[(($_pre2)>>2)]=0; HEAP32[((($_pre2)+(4))>>2)]=0; HEAP32[((($_pre2)+(8))>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ec; $ec=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ec)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ec)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=_strlen($what_arg);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $7=($3>>>0)<11;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$3<<1;
 var $10=(($9)&255);
 var $11=$2;
 HEAP8[($11)]=$10;
 var $12=$2;
 var $13=(($12+1)|0);
 var $__p_0_i_i_i=$13;label=6;break;
 case 5: 
 var $14=((($3)+(16))|0);
 var $15=$14&-16;
 var $16=__Znwj($15);
 var $17=(($2+8)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=$15|1;
 var $19=(($2)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=(($2+4)|0);
 HEAP32[(($20)>>2)]=$3;
 var $__p_0_i_i_i=$16;label=6;break;
 case 6: 
 var $__p_0_i_i_i;
 assert($3 % 1 === 0);(_memcpy($__p_0_i_i_i, $what_arg, $3)|0);
 var $21=(($__p_0_i_i_i+$3)|0);
 HEAP8[($21)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1,$ec,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=13;break; }
 case 7: 
 var $23=(($this)|0);
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($23,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=14;break; }
 case 8: 
 var $25=$1;
 var $26=HEAP8[($25)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 var $30=(($1+8)|0);
 var $31=HEAP32[(($30)>>2)];
 __ZdlPv($31);
 label=10;break;
 case 10: 
 var $32=$2;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($2+8)|0);
 var $38=HEAP32[(($37)>>2)];
 __ZdlPv($38);
 label=12;break;
 case 12: 
 var $39=(($this)|0);
 HEAP32[(($39)>>2)]=6256;
 var $40=(($this+8)|0);
 var $41=$ec;
 var $42=$40;
 var $ld$0$0=(($41)|0);
 var $43$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($41+4)|0);
 var $43$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($42)|0);
 HEAP32[(($st$2$0)>>2)]=$43$0;
 var $st$3$1=(($42+4)|0);
 HEAP32[(($st$3$1)>>2)]=$43$1;
 STACKTOP=sp;return;
 case 13: 
 var $45$0 = ___cxa_find_matching_catch(-1, -1); var $45$1 = tempRet0;
 var $46=$45$0;
 var $47=$45$1;
 var $_0=$47;var $_01=$46;label=16;break;
 case 14: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 var $50=$49$0;
 var $51=$49$1;
 var $52=$1;
 var $53=HEAP8[($52)];
 var $54=$53&1;
 var $55=(($54<<24)>>24)==0;
 if($55){var $_0=$51;var $_01=$50;label=16;break;}else{label=15;break;}
 case 15: 
 var $57=(($1+8)|0);
 var $58=HEAP32[(($57)>>2)];
 __ZdlPv($58);
 var $_0=$51;var $_01=$50;label=16;break;
 case 16: 
 var $_01;
 var $_0;
 var $59=$2;
 var $60=HEAP8[($59)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=18;break;}else{label=17;break;}
 case 17: 
 var $64=(($2+8)|0);
 var $65=HEAP32[(($64)>>2)];
 __ZdlPv($65);
 label=18;break;
 case 18: 
 var $66$0=$_01;
 var $66$1=0;
 var $67$0=$66$0;
 var $67$1=$_0;
 ___resumeException($67$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__112system_errorD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 return;
}


function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=HEAP32[(($flag)>>2)];
 var $3=($2|0)==1;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_pthread_cond_wait(14824,14800);
 var $5=HEAP32[(($flag)>>2)];
 var $6=($5|0)==1;
 if($6){label=2;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP32[(($flag)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=14;break;}
 case 4: 
 HEAP32[(($flag)>>2)]=1;
 var $10=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(14800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$func]($arg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $13=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(14800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=9;break; }
 case 7: 
 HEAP32[(($flag)>>2)]=-1;
 var $15=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(14800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 var $17=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(14824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 9: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $20=$19$0;
 var $21=___cxa_begin_catch($20);
 var $22=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(14800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 HEAP32[(($flag)>>2)]=0;
 var $24=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(14800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $26=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(14824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=13;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 13: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 14: 
 var $31;
 label=15;break;
 case 15: 
 return;
 case 16: 
 ___resumeException($29$0)
 case 17: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1,0); var $35$1 = tempRet0;
 var $36=$35$0;
 ___clang_call_terminate($36);
 throw "Reached an unreachable!";
 case 18: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2,360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $4=$1;
 HEAP32[(($4)>>2)]=4120;
 ___cxa_throw($1,10136,(78));
 throw "Reached an unreachable!";
 case 3: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($6$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__str;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$this;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 label=9;break;
 case 3: 
 var $8=(($__str+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($__str+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11>>>0)>4294967279;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 5: 
 var $15=($11>>>0)<11;
 if($15){label=6;break;}else{label=7;break;}
 case 6: 
 var $17=$11<<1;
 var $18=(($17)&255);
 var $19=$this;
 HEAP8[($19)]=$18;
 var $20=$this;
 var $21=(($20+1)|0);
 var $__p_0_i_i=$21;label=8;break;
 case 7: 
 var $22=((($11)+(16))|0);
 var $23=$22&-16;
 var $24=__Znwj($23);
 var $25=(($this+8)|0);
 HEAP32[(($25)>>2)]=$24;
 var $26=$23|1;
 var $27=(($this)|0);
 HEAP32[(($27)>>2)]=$26;
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$11;
 var $__p_0_i_i=$24;label=8;break;
 case 8: 
 var $__p_0_i_i;
 assert($11 % 1 === 0);(_memcpy($__p_0_i_i, $9, $11)|0);
 var $29=(($__p_0_i_i+$11)|0);
 HEAP8[($29)]=0;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=$this;
 var $10=(($9+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__sz)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__sz;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 assert($__sz % 1 === 0);(_memcpy($__p_0, $__s, $__sz)|0);
 var $19=(($__p_0+$__sz)|0);
 HEAP8[($19)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=$this;
 var $10=(($9+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__n)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__n;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 _memset($__p_0, $__c, $__n)|0;
 var $19=(($__p_0+$__n)|0);
 HEAP8[($19)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 __ZdlPv($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($__s);
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $12=10;var $11=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2;
 var $phitmp_i_i=((($9)-(1))|0);
 var $10=(($8)&255);
 var $12=$phitmp_i_i;var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12;
 var $13=($12>>>0)<($1>>>0);
 var $14=$11&1;
 var $15=(($14<<24)>>24)==0;
 if($13){label=10;break;}else{label=4;break;}
 case 4: 
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 var $18=(($this+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $23=$19;label=7;break;
 case 6: 
 var $21=$this;
 var $22=(($21+1)|0);
 var $23=$22;label=7;break;
 case 7: 
 var $23;
 _memmove($23,$__s,$1,1,0);
 var $24=(($23+$1)|0);
 HEAP8[($24)]=0;
 var $25=HEAP8[($2)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=9;break;}else{label=8;break;}
 case 8: 
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$1;
 label=14;break;
 case 9: 
 var $31=$1<<1;
 var $32=(($31)&255);
 HEAP8[($2)]=$32;
 label=14;break;
 case 10: 
 if($15){label=12;break;}else{label=11;break;}
 case 11: 
 var $35=(($this+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $40=$36;label=13;break;
 case 12: 
 var $38=($11&255);
 var $39=$38>>>1;
 var $40=$39;label=13;break;
 case 13: 
 var $40;
 var $41=((($1)-($12))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$12,$41,$40,0,$40,$1,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 var $14=((($__n)-($11))|0);
 var $15=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$14,$__c);
 label=9;break;
 case 6: 
 if($4){label=8;break;}else{label=7;break;}
 case 7: 
 var $18=(($this+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+$__n)|0);
 HEAP8[($20)]=0;
 var $21=(($this+4)|0);
 HEAP32[(($21)>>2)]=$__n;
 label=9;break;
 case 8: 
 var $23=$this;
 var $24=(($23+1+$__n)|0);
 HEAP8[($24)]=0;
 var $25=$__n<<1;
 var $26=(($25)&255);
 HEAP8[($1)]=$26;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n|0)==0;
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){var $13=10;var $12=$4;label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9&-2;
 var $phitmp_i=((($10)-(1))|0);
 var $11=(($9)&255);
 var $13=$phitmp_i;var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13;
 var $14=$12&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $22=$18;label=7;break;
 case 6: 
 var $20=($12&255);
 var $21=$20>>>1;
 var $22=$21;label=7;break;
 case 7: 
 var $22;
 var $23=((($13)-($22))|0);
 var $24=($23>>>0)<($__n>>>0);
 if($24){label=8;break;}else{var $29=$12;label=9;break;}
 case 8: 
 var $26=((($__n)-($13))|0);
 var $27=((($26)+($22))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$13,$27,$22,$22,0,0);
 var $_pre=HEAP8[($3)];
 var $29=$_pre;label=9;break;
 case 9: 
 var $29;
 var $30=$29&1;
 var $31=(($30<<24)>>24)==0;
 if($31){label=11;break;}else{label=10;break;}
 case 10: 
 var $33=(($this+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $38=$34;label=12;break;
 case 11: 
 var $36=$this;
 var $37=(($36+1)|0);
 var $38=$37;label=12;break;
 case 12: 
 var $38;
 var $39=(($38+$22)|0);
 _memset($39, $__c, $__n)|0;
 var $40=((($22)+($__n))|0);
 var $41=HEAP8[($3)];
 var $42=$41&1;
 var $43=(($42<<24)>>24)==0;
 if($43){label=14;break;}else{label=13;break;}
 case 13: 
 var $45=(($this+4)|0);
 HEAP32[(($45)>>2)]=$40;
 label=15;break;
 case 14: 
 var $47=$40<<1;
 var $48=(($47)&255);
 HEAP8[($3)]=$48;
 label=15;break;
 case 15: 
 var $49=(($38+$40)|0);
 HEAP8[($49)]=0;
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=$this;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){var $14=10;var $13=$5;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $phitmp_i=((($11)-(1))|0);
 var $12=(($10)&255);
 var $14=$phitmp_i;var $13=$12;label=5;break;
 case 5: 
 var $13;
 var $14;
 var $15=$13&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=7;break;}else{label=6;break;}
 case 6: 
 var $18=(($this+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $23=$19;label=8;break;
 case 7: 
 var $21=($13&255);
 var $22=$21>>>1;
 var $23=$22;label=8;break;
 case 8: 
 var $23;
 var $24=($23>>>0)>($__res_arg>>>0);
 var $25=($24?$23:$__res_arg);
 var $26=($25>>>0)<11;
 if($26){var $30=10;label=10;break;}else{label=9;break;}
 case 9: 
 var $28=((($25)+(16))|0);
 var $29=$28&-16;
 var $phitmp_i2=((($29)-(1))|0);
 var $30=$phitmp_i2;label=10;break;
 case 10: 
 var $30;
 var $31=($30|0)==($14|0);
 if($31){label=28;break;}else{label=11;break;}
 case 11: 
 var $33=($30|0)==10;
 if($33){label=12;break;}else{label=13;break;}
 case 12: 
 var $35=$this;
 var $36=(($35+1)|0);
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $__new_data_1=$36;var $__p_0=$38;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=20;break;
 case 13: 
 var $40=($30>>>0)>($14>>>0);
 var $41=((($30)+(1))|0);
 if($40){label=14;break;}else{label=15;break;}
 case 14: 
 var $43=__Znwj($41);
 var $__new_data_0=$43;label=17;break;
 case 15: 
 var $45=(function() { try { __THREW__ = 0; return __Znwj($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0=$45;label=17;break; } else { label=16;break; }
 case 16: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1,0); var $47$1 = tempRet0;
 var $48=$47$0;
 var $49=___cxa_begin_catch($48);
 ___cxa_end_catch();
 label=28;break;
 case 17: 
 var $__new_data_0;
 var $50=$13&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=19;break;}else{label=18;break;}
 case 18: 
 var $53=(($this+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $__new_data_1=$__new_data_0;var $__p_0=$54;var $__was_long_0_off0=1;var $__now_long_0_off0=1;label=20;break;
 case 19: 
 var $56=$this;
 var $57=(($56+1)|0);
 var $__new_data_1=$__new_data_0;var $__p_0=$57;var $__was_long_0_off0=0;var $__now_long_0_off0=1;label=20;break;
 case 20: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $58=$13&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=22;break;}else{label=21;break;}
 case 21: 
 var $61=(($this+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $66=$62;label=23;break;
 case 22: 
 var $64=($13&255);
 var $65=$64>>>1;
 var $66=$65;label=23;break;
 case 23: 
 var $66;
 var $67=((($66)+(1))|0);
 assert($67 % 1 === 0);(_memcpy($__new_data_1, $__p_0, $67)|0);
 if($__was_long_0_off0){label=24;break;}else{label=25;break;}
 case 24: 
 __ZdlPv($__p_0);
 label=25;break;
 case 25: 
 if($__now_long_0_off0){label=26;break;}else{label=27;break;}
 case 26: 
 var $71=((($30)+(1))|0);
 var $72=$71|1;
 var $73=(($this)|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=(($this+4)|0);
 HEAP32[(($74)>>2)]=$23;
 var $75=(($this+8)|0);
 HEAP32[(($75)>>2)]=$__new_data_1;
 label=28;break;
 case 27: 
 var $77=$23<<1;
 var $78=(($77)&255);
 HEAP8[($4)]=$78;
 label=28;break;
 case 28: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=10;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $__sz_0=$14;var $__cap_0=$12;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $16=($__sz_0|0)==($__cap_0|0);
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $18=HEAP8[($1)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=7;break;}else{label=8;break;}
 case 6: 
 if($4){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=$this;
 var $24=(($23+1)|0);
 var $25=$__sz_0<<1;
 var $26=((($25)+(2))|0);
 var $27=(($26)&255);
 HEAP8[($1)]=$27;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$24;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $29=(($this+8)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($__sz_0)+(1))|0);
 var $32=(($this+4)|0);
 HEAP32[(($32)>>2)]=$31;
 var $_pn=$30;var $__p_0_sum_pre_phi=$31;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+$__sz_0)|0);
 HEAP8[($__p_0)]=$__c;
 var $34=(($_pn+$__p_0_sum_pre_phi)|0);
 HEAP8[($34)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=10;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=$10&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $20=$16;label=6;break;
 case 5: 
 var $18=($10&255);
 var $19=$18>>>1;
 var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21=((($11)-($20))|0);
 var $22=($21>>>0)<($__n>>>0);
 if($22){label=15;break;}else{label=7;break;}
 case 7: 
 var $24=($__n|0)==0;
 if($24){label=16;break;}else{label=8;break;}
 case 8: 
 var $26=$10&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=10;break;}else{label=9;break;}
 case 9: 
 var $29=(($this+8)|0);
 var $30=HEAP32[(($29)>>2)];
 var $34=$30;label=11;break;
 case 10: 
 var $32=$this;
 var $33=(($32+1)|0);
 var $34=$33;label=11;break;
 case 11: 
 var $34;
 var $35=(($34+$20)|0);
 assert($__n % 1 === 0);(_memcpy($35, $__s, $__n)|0);
 var $36=((($20)+($__n))|0);
 var $37=HEAP8[($1)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=13;break;}else{label=12;break;}
 case 12: 
 var $41=(($this+4)|0);
 HEAP32[(($41)>>2)]=$36;
 label=14;break;
 case 13: 
 var $43=$36<<1;
 var $44=(($43)&255);
 HEAP8[($1)]=$44;
 label=14;break;
 case 14: 
 var $45=(($34+$36)|0);
 HEAP8[($45)]=0;
 label=16;break;
 case 15: 
 var $47=((($__n)-($11))|0);
 var $48=((($47)+($20))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$11,$48,$20,$20,0,$__n,$__s);
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-18)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $26=-17;label=9;break;}
 case 7: 
 var $18=((($__delta_cap)+($__old_cap))|0);
 var $19=$__old_cap<<1;
 var $20=($18>>>0)<($19>>>0);
 var $21=($20?$19:$18);
 var $22=($21>>>0)<11;
 if($22){var $26=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=((($21)+(16))|0);
 var $25=$24&-16;
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=__Znwj($26);
 var $28=($__n_copy|0)==0;
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($27, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $31=($__n_add|0)==0;
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=(($27+$__n_copy)|0);
 assert($__n_add % 1 === 0);(_memcpy($33, $__p_new_stuff, $__n_add)|0);
 label=13;break;
 case 13: 
 var $35=((($__old_sz)-($__n_del))|0);
 var $36=($35|0)==($__n_copy|0);
 if($36){label=15;break;}else{label=14;break;}
 case 14: 
 var $38=((($35)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $39=(($27+$_sum)|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $40=(($15+$_sum1)|0);
 assert($38 % 1 === 0);(_memcpy($39, $40, $38)|0);
 label=15;break;
 case 15: 
 var $42=($__old_cap|0)==10;
 if($42){label=17;break;}else{label=16;break;}
 case 16: 
 __ZdlPv($15);
 label=17;break;
 case 17: 
 var $45=(($this+8)|0);
 HEAP32[(($45)>>2)]=$27;
 var $46=$26|1;
 var $47=(($this)|0);
 HEAP32[(($47)>>2)]=$46;
 var $48=((($35)+($__n_add))|0);
 var $49=(($this+4)|0);
 HEAP32[(($49)>>2)]=$48;
 var $50=(($27+$48)|0);
 HEAP8[($50)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-17)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $26=-17;label=9;break;}
 case 7: 
 var $18=((($__delta_cap)+($__old_cap))|0);
 var $19=$__old_cap<<1;
 var $20=($18>>>0)<($19>>>0);
 var $21=($20?$19:$18);
 var $22=($21>>>0)<11;
 if($22){var $26=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=((($21)+(16))|0);
 var $25=$24&-16;
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=__Znwj($26);
 var $28=($__n_copy|0)==0;
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($27, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $31=((($__old_sz)-($__n_del))|0);
 var $32=($31|0)==($__n_copy|0);
 if($32){label=13;break;}else{label=12;break;}
 case 12: 
 var $34=((($31)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $35=(($27+$_sum)|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $36=(($15+$_sum1)|0);
 assert($34 % 1 === 0);(_memcpy($35, $36, $34)|0);
 label=13;break;
 case 13: 
 var $38=($__old_cap|0)==10;
 if($38){label=15;break;}else{label=14;break;}
 case 14: 
 __ZdlPv($15);
 label=15;break;
 case 15: 
 var $41=(($this+8)|0);
 HEAP32[(($41)>>2)]=$27;
 var $42=$26|1;
 var $43=(($this)|0);
 HEAP32[(($43)>>2)]=$42;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__sz)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__sz;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=_wmemcpy($__p_0,$__s,$__sz);
 var $21=(($__p_0+($__sz<<2))|0);
 HEAP32[(($21)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__n)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__n;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=_wmemset($__p_0,$__c,$__n);
 var $21=(($__p_0+($__n<<2))|0);
 HEAP32[(($21)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZdlPv($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s){
 var label=0;


 var $1=_wcslen($__s);
 var $2=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$1);
 return $2;
}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=1;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 var $13=$10&1;
 var $14=(($13<<24)>>24)==0;
 if($12){label=10;break;}else{label=4;break;}
 case 4: 
 if($14){label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $21=$18;label=7;break;
 case 6: 
 var $20=(($this+4)|0);
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=_wmemmove($21,$__s,$__n);
 var $23=(($21+($__n<<2))|0);
 HEAP32[(($23)>>2)]=0;
 var $24=HEAP8[($1)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$__n;
 label=14;break;
 case 9: 
 var $30=$__n<<1;
 var $31=(($30)&255);
 HEAP8[($1)]=$31;
 label=14;break;
 case 10: 
 if($14){label=12;break;}else{label=11;break;}
 case 11: 
 var $34=(($this+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $39=$35;label=13;break;
 case 12: 
 var $37=($10&255);
 var $38=$37>>>1;
 var $39=$38;label=13;break;
 case 13: 
 var $39;
 var $40=((($__n)-($11))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$11,$40,$39,0,$39,$__n,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=$this;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){var $14=1;var $13=$5;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $phitmp_i=((($11)-(1))|0);
 var $12=(($10)&255);
 var $14=$phitmp_i;var $13=$12;label=5;break;
 case 5: 
 var $13;
 var $14;
 var $15=$13&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=7;break;}else{label=6;break;}
 case 6: 
 var $18=(($this+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $23=$19;label=8;break;
 case 7: 
 var $21=($13&255);
 var $22=$21>>>1;
 var $23=$22;label=8;break;
 case 8: 
 var $23;
 var $24=($23>>>0)>($__res_arg>>>0);
 var $25=($24?$23:$__res_arg);
 var $26=($25>>>0)<2;
 if($26){var $30=1;label=10;break;}else{label=9;break;}
 case 9: 
 var $28=((($25)+(4))|0);
 var $29=$28&-4;
 var $phitmp_i2=((($29)-(1))|0);
 var $30=$phitmp_i2;label=10;break;
 case 10: 
 var $30;
 var $31=($30|0)==($14|0);
 if($31){label=28;break;}else{label=11;break;}
 case 11: 
 var $33=($30|0)==1;
 if($33){label=12;break;}else{label=13;break;}
 case 12: 
 var $35=(($this+4)|0);
 var $36=(($this+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $__new_data_1=$35;var $__p_0=$37;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=20;break;
 case 13: 
 var $39=($30>>>0)>($14>>>0);
 var $40=$30<<2;
 var $41=((($40)+(4))|0);
 if($39){label=14;break;}else{label=15;break;}
 case 14: 
 var $43=__Znwj($41);
 var $_sink=$43;label=17;break;
 case 15: 
 var $45=(function() { try { __THREW__ = 0; return __Znwj($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_sink=$45;label=17;break; } else { label=16;break; }
 case 16: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1,0); var $47$1 = tempRet0;
 var $48=$47$0;
 var $49=___cxa_begin_catch($48);
 ___cxa_end_catch();
 label=28;break;
 case 17: 
 var $_sink;
 var $50=$_sink;
 var $51=$13&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=19;break;}else{label=18;break;}
 case 18: 
 var $54=(($this+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $__new_data_1=$50;var $__p_0=$55;var $__was_long_0_off0=1;var $__now_long_0_off0=1;label=20;break;
 case 19: 
 var $57=(($this+4)|0);
 var $__new_data_1=$50;var $__p_0=$57;var $__was_long_0_off0=0;var $__now_long_0_off0=1;label=20;break;
 case 20: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $58=$13&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=22;break;}else{label=21;break;}
 case 21: 
 var $61=(($this+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $66=$62;label=23;break;
 case 22: 
 var $64=($13&255);
 var $65=$64>>>1;
 var $66=$65;label=23;break;
 case 23: 
 var $66;
 var $67=((($66)+(1))|0);
 var $68=_wmemcpy($__new_data_1,$__p_0,$67);
 if($__was_long_0_off0){label=24;break;}else{label=25;break;}
 case 24: 
 var $70=$__p_0;
 __ZdlPv($70);
 label=25;break;
 case 25: 
 if($__now_long_0_off0){label=26;break;}else{label=27;break;}
 case 26: 
 var $73=((($30)+(1))|0);
 var $74=$73|1;
 var $75=(($this)|0);
 HEAP32[(($75)>>2)]=$74;
 var $76=(($this+4)|0);
 HEAP32[(($76)>>2)]=$23;
 var $77=(($this+8)|0);
 HEAP32[(($77)>>2)]=$__new_data_1;
 label=28;break;
 case 27: 
 var $79=$23<<1;
 var $80=(($79)&255);
 HEAP8[($4)]=$80;
 label=28;break;
 case 28: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=1;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $__sz_0=$14;var $__cap_0=$12;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $16=($__sz_0|0)==($__cap_0|0);
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $18=HEAP8[($1)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=7;break;}else{label=8;break;}
 case 6: 
 if($4){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($this+4)|0);
 var $24=$__sz_0<<1;
 var $25=((($24)+(2))|0);
 var $26=(($25)&255);
 HEAP8[($1)]=$26;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$23;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $28=(($this+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=((($__sz_0)+(1))|0);
 var $31=(($this+4)|0);
 HEAP32[(($31)>>2)]=$30;
 var $_pn=$29;var $__p_0_sum_pre_phi=$30;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+($__sz_0<<2))|0);
 HEAP32[(($__p_0)>>2)]=$__c;
 var $33=(($_pn+($__p_0_sum_pre_phi<<2))|0);
 HEAP32[(($33)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741806)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870887;
 if($15){label=7;break;}else{var $25=1073741807;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $20=($19?$18:$17);
 var $21=($20>>>0)<2;
 if($21){var $25=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $23=((($20)+(4))|0);
 var $24=$23&-4;
 var $25=$24;label=9;break;
 case 9: 
 var $25;
 var $26=$25<<2;
 var $27=__Znwj($26);
 var $28=$27;
 var $29=($__n_copy|0)==0;
 if($29){label=11;break;}else{label=10;break;}
 case 10: 
 var $31=_wmemcpy($28,$14,$__n_copy);
 label=11;break;
 case 11: 
 var $33=($__n_add|0)==0;
 if($33){label=13;break;}else{label=12;break;}
 case 12: 
 var $35=(($28+($__n_copy<<2))|0);
 var $36=_wmemcpy($35,$__p_new_stuff,$__n_add);
 label=13;break;
 case 13: 
 var $38=((($__old_sz)-($__n_del))|0);
 var $39=($38|0)==($__n_copy|0);
 if($39){label=15;break;}else{label=14;break;}
 case 14: 
 var $41=((($38)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $42=(($28+($_sum<<2))|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $43=(($14+($_sum1<<2))|0);
 var $44=_wmemcpy($42,$43,$41);
 label=15;break;
 case 15: 
 var $46=($__old_cap|0)==1;
 if($46){label=17;break;}else{label=16;break;}
 case 16: 
 var $48=$14;
 __ZdlPv($48);
 label=17;break;
 case 17: 
 var $50=(($this+8)|0);
 HEAP32[(($50)>>2)]=$28;
 var $51=$25|1;
 var $52=(($this)|0);
 HEAP32[(($52)>>2)]=$51;
 var $53=((($38)+($__n_add))|0);
 var $54=(($this+4)|0);
 HEAP32[(($54)>>2)]=$53;
 var $55=(($28+($53<<2))|0);
 HEAP32[(($55)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741807)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870887;
 if($15){label=7;break;}else{var $25=1073741807;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $20=($19?$18:$17);
 var $21=($20>>>0)<2;
 if($21){var $25=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $23=((($20)+(4))|0);
 var $24=$23&-4;
 var $25=$24;label=9;break;
 case 9: 
 var $25;
 var $26=$25<<2;
 var $27=__Znwj($26);
 var $28=$27;
 var $29=($__n_copy|0)==0;
 if($29){label=11;break;}else{label=10;break;}
 case 10: 
 var $31=_wmemcpy($28,$14,$__n_copy);
 label=11;break;
 case 11: 
 var $33=((($__old_sz)-($__n_del))|0);
 var $34=($33|0)==($__n_copy|0);
 if($34){label=13;break;}else{label=12;break;}
 case 12: 
 var $36=((($33)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $37=(($28+($_sum<<2))|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $38=(($14+($_sum1<<2))|0);
 var $39=_wmemcpy($37,$38,$36);
 label=13;break;
 case 13: 
 var $41=($__old_cap|0)==1;
 if($41){label=15;break;}else{label=14;break;}
 case 14: 
 var $43=$14;
 __ZdlPv($43);
 label=15;break;
 case 15: 
 var $45=(($this+8)|0);
 HEAP32[(($45)>>2)]=$28;
 var $46=$25|1;
 var $47=(($this)|0);
 HEAP32[(($47)>>2)]=$46;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base5clearEj($this,$state){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+24)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+16)|0);
 HEAP32[(($6)>>2)]=$state;
 label=4;break;
 case 3: 
 var $8=$state|1;
 var $9=(($this+16)|0);
 HEAP32[(($9)>>2)]=$8;
 label=4;break;
 case 4: 
 var $11=($4&1);
 var $12=$11|$state;
 var $13=(($this+20)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12&$14;
 var $16=($15|0)==0;
 if($16){label=11;break;}else{label=5;break;}
 case 5: 
 var $18=___cxa_allocate_exception(16);
 var $19=HEAP8[(15944)];
 var $20=(($19<<24)>>24)==0;
 if($20){label=6;break;}else{label=8;break;}
 case 6: 
 var $22=___cxa_guard_acquire(15944);
 var $23=($22|0)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[((13840)>>2)]=5640;
 var $25=_atexit((186),13840,___dso_handle);

 label=8;break;
 case 8: 
 var $26=$1;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $tmpcast_i=$1;
 var $27=$18;
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;
 var $$etemp$5$0=32;
 var $$etemp$5$1=0;
 var $$etemp$6=13840;
 var $$etemp$4$0=$$etemp$6;
 var $$etemp$4$1=0;
 var $$etemp$2$0=_bitshift64Shl($$etemp$4$0,$$etemp$4$1,$$etemp$5$0);var $$etemp$2$1=tempRet0;
 var $$etemp$1$0=$$etemp$2$0|$$etemp$3$0;
 var $$etemp$1$1=$$etemp$2$1|$$etemp$3$1;
 var $st$7$0=(($1)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$1$0;
 var $st$8$1=(($1+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$1$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($27,$tmpcast_i,2552) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $29=$18;
 HEAP32[(($29)>>2)]=4824;
 var $$etemp$9$0=8;
 var $$etemp$9$1=0;

 ___cxa_throw($18,10680,(68));
 throw "Reached an unreachable!";
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 ___cxa_free_exception($18);
 ___resumeException($31$0)
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_baseD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4800;
 var $2=(($this+40)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre=(($this+32)|0);
 var $_pre1=(($this+36)|0);
 if($4){label=4;break;}else{var $i_01_i=$3;label=2;break;}
 case 2: 
 var $i_01_i;
 var $5=((($i_01_i)-(1))|0);
 var $6=HEAP32[(($_pre)>>2)];
 var $7=(($6+($5<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($_pre1)>>2)];
 var $10=(($9+($5<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8](0,$this,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $12=($5|0)==0;
 if($12){label=4;break;}else{var $i_01_i=$5;label=2;break;}
 case 4: 
 var $13=(($this+28)|0);
 var $14=$13;
 __ZNSt3__16localeD2Ev($14);
 var $15=HEAP32[(($_pre)>>2)];
 var $16=$15;
 _free($16);
 var $17=HEAP32[(($_pre1)>>2)];
 var $18=$17;
 _free($18);
 var $19=(($this+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 _free($21);
 var $22=(($this+60)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 _free($24);
 return;
 case 5: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1,0); var $26$1 = tempRet0;
 var $27=$26$0;
 ___clang_call_terminate($27);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZNKSt3__18ios_base6getlocEv($agg_result,$this){
 var label=0;


 var $1=(($this+28)|0);
 var $2=$1;
 __ZNSt3__16localeC2ERKS0_($agg_result,$2);
 return;
}


function __ZNSt3__18ios_base4initEPv($this,$sb){
 var label=0;


 var $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=$sb;
 var $not_=($sb|0)==0;
 var $2=($not_&1);
 var $3=(($this+16)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($this+20)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+4)|0);
 HEAP32[(($5)>>2)]=4098;
 var $6=(($this+12)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this+8)|0);
 HEAP32[(($7)>>2)]=6;
 var $8=(($this+32)|0);
 var $9=(($this+28)|0);
 var $10=$9;
 var $11=$8;
 _memset($11, 0, 40)|0;
 __ZNSt3__16localeC2Ev($10);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5872;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5872;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5872;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5872;
 var $2=(($this+4)|0);
 __ZNSt3__16localeC2Ev($2);
 var $3=(($this+8)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1){
 var label=0;


 return $this;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $storemerge=$11;label=7;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($16)&255);
 var $storemerge=$19;label=7;break;
 case 7: 
 var $storemerge;
 HEAP8[($_01)]=$storemerge;
 var $21=((($__i_02)+(1))|0);
 var $22=(($_01+1)|0);
 var $23=($21|0)<($__n|0);
 if($23){var $_01=$22;var $__i_02=$21;label=3;break;}else{var $__i_0_lcssa=$21;label=8;break;}
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+1)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP8[($9)];
 var $12=($11&255);
 var $_0=$12;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP8[($_02)];
 var $11=(($6+1)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP8[($6)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP8[($_02)];
 var $17=($16&255);
 var $18=FUNCTION_TABLE[$15]($this,$17);
 var $19=($18|0)==-1;
 if($19){var $__i_0_lcssa=$__i_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($_02+1)|0);
 var $22=((($__i_01)+(1))|0);
 var $23=($22|0)<($__n|0);
 if($23){var $__i_01=$22;var $_02=$21;label=3;break;}else{var $__i_0_lcssa=$22;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5800;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5800;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1){
 var label=0;


 return $this;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+4)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($6)>>2)];
 var $storemerge=$11;label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=8;break;}else{var $storemerge=$16;label=6;break;}
 case 6: 
 var $storemerge;
 HEAP32[(($_01)>>2)]=$storemerge;
 var $19=((($__i_02)+(1))|0);
 var $20=($19|0)<($__n|0);
 if($20){label=7;break;}else{var $__i_0_lcssa=$19;label=8;break;}
 case 7: 
 var $21=(($_01+4)|0);
 var $_01=$21;var $__i_02=$19;label=3;break;
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+4)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP32[(($9)>>2)];
 var $_0=$11;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP32[(($_02)>>2)];
 var $11=(($6+4)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP32[(($6)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP32[(($_02)>>2)];
 var $17=FUNCTION_TABLE[$15]($this,$16);
 var $18=($17|0)==-1;
 if($18){var $__i_0_lcssa=$__i_01;label=8;break;}else{label=6;break;}
 case 6: 
 var $20=((($__i_01)+(1))|0);
 var $21=($20|0)<($__n|0);
 if($21){label=7;break;}else{var $__i_0_lcssa=$20;label=8;break;}
 case 7: 
 var $22=(($_02+4)|0);
 var $__i_01=$20;var $_02=$22;label=3;break;
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt){
 var label=0;


 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=15;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum5=((($5)+(16))|0);
 var $14=(($6+$_sum5)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=16;break;}
 case 3: 
 var $_sum10=((($5)+(72))|0);
 var $19=(($6+$_sum10)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){var $_pre12=$5;label=6;break;}else{label=4;break;}
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $_pre_pre=HEAP32[(($1)>>2)];
 var $_phi_trans_insert_phi_trans_insert=((($_pre_pre)-(12))|0);
 var $_phi_trans_insert11_phi_trans_insert=$_phi_trans_insert_phi_trans_insert;
 var $_pre12_pre=HEAP32[(($_phi_trans_insert11_phi_trans_insert)>>2)];
 var $_pre12=$_pre12_pre;label=6;break;
 case 6: 
 var $_pre12;
 HEAP8[($12)]=1;
 var $_sum6=((($_pre12)+(24))|0);
 var $26=(($6+$_sum6)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+24)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $35=($34|0)==-1;
 if($35){label=8;break;}else{label=16;break;}
 case 8: 
 var $37=HEAP32[(($1)>>2)];
 var $38=((($37)-(12))|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($6+$40)|0);
 var $42=$41;
 var $_sum9=((($40)+(16))|0);
 var $43=(($6+$_sum9)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=$45|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($42,$46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=10;break; }
 case 9: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1,0); var $48$1 = tempRet0;
 var $49=$48$0;
 var $_0=$49;label=11;break;
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 var $52=$51$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$52;label=11;break;
 case 11: 
 var $_0;
 var $54=___cxa_begin_catch($_0);
 var $55=HEAP32[(($1)>>2)];
 var $56=((($55)-(12))|0);
 var $57=$56;
 var $58=HEAP32[(($57)>>2)];
 var $_sum7=((($58)+(16))|0);
 var $59=(($6+$_sum7)|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $62=$61|1;
 HEAP32[(($60)>>2)]=$62;
 var $_sum8=((($58)+(20))|0);
 var $63=(($6+$_sum8)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65&1;
 var $67=($66|0)==0;
 if($67){label=14;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 ___cxa_end_catch();
 label=15;break;
 case 15: 
 STACKTOP=sp;return $this;
 case 16: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=15;break;
 case 17: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=19;break; }
 case 18: 
 ___resumeException($71$0)
 case 19: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1,0); var $74$1 = tempRet0;
 var $75=$74$0;
 ___clang_call_terminate($75);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2|1;
 HEAP32[(($1)>>2)]=$3;
 var $4=(($this+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 ___cxa_rethrow();
 throw "Reached an unreachable!";
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE4readEPci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=$this;
 var $_sum_i=((($6)+(16))|0);
 var $8=(($7+$_sum_i)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=2;break;}else{label=5;break;}
 case 2: 
 var $_sum13_i=((($6)+(72))|0);
 var $13=(($7+$_sum13_i)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $27=$6;label=7;break;}else{label=3;break;}
 case 3: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 var $_pre=HEAP32[(($2)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert10=$_phi_trans_insert;
 var $_pre11=HEAP32[(($_phi_trans_insert10)>>2)];
 var $27=$_pre11;label=7;break;
 case 5: 
 var $20=(($7+$6)|0);
 var $21=$20;
 var $22=$10|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($21,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $23=HEAP32[(($2)>>2)];
 var $24=((($23)-(12))|0);
 var $25=$24;
 var $26=HEAP32[(($25)>>2)];
 var $_pn=$26;label=16;break;
 case 7: 
 var $27;
 var $_sum16_i=((($27)+(16))|0);
 var $28=(($7+$_sum16_i)|0);
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=8;break;}else{var $_pn=$27;label=16;break;}
 case 8: 
 var $_sum8=((($27)+(24))|0);
 var $33=(($7+$_sum8)|0);
 var $34=$33;
 var $35=HEAP32[(($34)>>2)];
 var $36=$35;
 var $37=$35;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+32)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($36,$__s,$__n) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=11;break; }
 case 9: 
 HEAP32[(($1)>>2)]=$41;
 var $42=($41|0)==($__n|0);
 if($42){label=15;break;}else{label=10;break;}
 case 10: 
 var $44=HEAP32[(($2)>>2)];
 var $45=((($44)-(12))|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($7+$47)|0);
 var $49=$48;
 var $_sum9=((($47)+(16))|0);
 var $50=(($7+$_sum9)|0);
 var $51=$50;
 var $52=HEAP32[(($51)>>2)];
 var $53=$52|6;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($49,$53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=11;break; }
 case 11: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1,0); var $55$1 = tempRet0;
 var $56=$55$0;
 var $57=___cxa_begin_catch($56);
 var $58=HEAP32[(($2)>>2)];
 var $59=((($58)-(12))|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $_sum=((($61)+(16))|0);
 var $62=(($7+$_sum)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $65=$64|1;
 HEAP32[(($63)>>2)]=$65;
 var $_sum7=((($61)+(20))|0);
 var $66=(($7+$_sum7)|0);
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=$68&1;
 var $70=($69|0)==0;
 if($70){label=14;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 ___cxa_end_catch();
 label=15;break;
 case 15: 
 return $this;
 case 16: 
 var $_pn;
 var $_in=(($7+$_pn)|0);
 var $73=$_in;
 var $_in_sum=((($_pn)+(16))|0);
 var $74=(($7+$_in_sum)|0);
 var $75=$74;
 var $76=HEAP32[(($75)>>2)];
 var $77=$76|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($73,$77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=11;break; }
 case 17: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=19;break; }
 case 18: 
 ___resumeException($79$0)
 case 19: 
 var $82$0 = ___cxa_find_matching_catch(-1, -1,0); var $82$1 = tempRet0;
 var $83=$82$0;
 ___clang_call_terminate($83);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE5tellgEv($agg_result,$this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($2)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($2+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($3)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($3+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $4=$this;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=$this;
 var $_sum_i=((($8)+(16))|0);
 var $10=(($9+$_sum_i)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=2;break;}else{label=5;break;}
 case 2: 
 var $_sum13_i=((($8)+(72))|0);
 var $15=(($9+$_sum13_i)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==0;
 if($18){var $25=$8;label=6;break;}else{label=3;break;}
 case 3: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=9;break; }
 case 4: 
 var $_pre=HEAP32[(($4)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert6=$_phi_trans_insert;
 var $_pre7=HEAP32[(($_phi_trans_insert6)>>2)];
 var $25=$_pre7;label=6;break;
 case 5: 
 var $22=(($9+$8)|0);
 var $23=$22;
 var $24=$12|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($23,$24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=9;break; }
 case 6: 
 var $25;
 var $_sum16_i=((($25)+(16))|0);
 var $26=(($9+$_sum16_i)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=7;break;}else{label=13;break;}
 case 7: 
 var $_sum5=((($25)+(24))|0);
 var $31=(($9+$_sum5)|0);
 var $32=$31;
 var $33=HEAP32[(($32)>>2)];
 var $34=$33;
 var $35=$33;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+16)|0);
 var $38=HEAP32[(($37)>>2)];
 var $$etemp$6$0=0;
 var $$etemp$6$1=0;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$38]($1,$34,$$etemp$6$0,$$etemp$6$1,1,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 var $39=$agg_result;
 var $40=$1;
 assert(16 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];HEAP32[((($39)+(12))>>2)]=HEAP32[((($40)+(12))>>2)];
 label=13;break;
 case 9: 
 var $42$0 = ___cxa_find_matching_catch(-1, -1,0); var $42$1 = tempRet0;
 var $43=$42$0;
 var $44=___cxa_begin_catch($43);
 var $45=HEAP32[(($4)>>2)];
 var $46=((($45)-(12))|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $_sum=((($48)+(16))|0);
 var $49=(($9+$_sum)|0);
 var $50=$49;
 var $51=HEAP32[(($50)>>2)];
 var $52=$51|1;
 HEAP32[(($50)>>2)]=$52;
 var $_sum4=((($48)+(20))|0);
 var $53=(($9+$_sum4)|0);
 var $54=$53;
 var $55=HEAP32[(($54)>>2)];
 var $56=$55&1;
 var $57=($56|0)==0;
 if($57){label=12;break;}else{label=10;break;}
 case 10: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 ___cxa_end_catch();
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
 case 14: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=16;break; }
 case 15: 
 ___resumeException($60$0)
 case 16: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE($this,$__off$0,$__off$1,$__dir){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=$this;
 var $_sum_i=((($6)+(16))|0);
 var $8=(($7+$_sum_i)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=2;break;}else{label=5;break;}
 case 2: 
 var $_sum13_i=((($6)+(72))|0);
 var $13=(($7+$_sum13_i)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $23=$6;label=6;break;}else{label=3;break;}
 case 3: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=10;break; }
 case 4: 
 var $_pre=HEAP32[(($2)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert8=$_phi_trans_insert;
 var $_pre9=HEAP32[(($_phi_trans_insert8)>>2)];
 var $23=$_pre9;label=6;break;
 case 5: 
 var $20=(($7+$6)|0);
 var $21=$20;
 var $22=$10|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($21,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=10;break; }
 case 6: 
 var $23;
 var $_sum16_i=((($23)+(16))|0);
 var $24=(($7+$_sum16_i)|0);
 var $25=$24;
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==0;
 if($27){label=7;break;}else{label=14;break;}
 case 7: 
 var $_sum6=((($23)+(24))|0);
 var $29=(($7+$_sum6)|0);
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=$31;
 var $33=$31;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+16)|0);
 var $36=HEAP32[(($35)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($1,$32,$__off$0,$__off$1,$__dir,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 var $38=(($1+8)|0);
 var $ld$0$0=(($38)|0);
 var $39$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=-1;
 var $$etemp$2$1=-1;
 var $40=(($39$0|0) == ($$etemp$2$0|0)) & (($39$1|0) == ($$etemp$2$1|0));
 if($40){label=9;break;}else{label=14;break;}
 case 9: 
 var $42=HEAP32[(($2)>>2)];
 var $43=((($42)-(12))|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($7+$45)|0);
 var $47=$46;
 var $_sum7=((($45)+(16))|0);
 var $48=(($7+$_sum7)|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$50|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($47,$51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=10;break; }
 case 10: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1,0); var $53$1 = tempRet0;
 var $54=$53$0;
 var $55=___cxa_begin_catch($54);
 var $56=HEAP32[(($2)>>2)];
 var $57=((($56)-(12))|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $_sum=((($59)+(16))|0);
 var $60=(($7+$_sum)|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $63=$62|1;
 HEAP32[(($61)>>2)]=$63;
 var $_sum5=((($59)+(20))|0);
 var $64=(($7+$_sum5)|0);
 var $65=$64;
 var $66=HEAP32[(($65)>>2)];
 var $67=$66&1;
 var $68=($67|0)==0;
 if($68){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return $this;
 case 15: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 ___resumeException($71$0)
 case 17: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1,0); var $74$1 = tempRet0;
 var $75=$74$0;
 ___clang_call_terminate($75);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=15;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum5=((($5)+(16))|0);
 var $14=(($6+$_sum5)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=16;break;}
 case 3: 
 var $_sum10=((($5)+(72))|0);
 var $19=(($6+$_sum10)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){var $_pre12=$5;label=6;break;}else{label=4;break;}
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $_pre_pre=HEAP32[(($1)>>2)];
 var $_phi_trans_insert_phi_trans_insert=((($_pre_pre)-(12))|0);
 var $_phi_trans_insert11_phi_trans_insert=$_phi_trans_insert_phi_trans_insert;
 var $_pre12_pre=HEAP32[(($_phi_trans_insert11_phi_trans_insert)>>2)];
 var $_pre12=$_pre12_pre;label=6;break;
 case 6: 
 var $_pre12;
 HEAP8[($12)]=1;
 var $_sum6=((($_pre12)+(24))|0);
 var $26=(($6+$_sum6)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+24)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $35=($34|0)==-1;
 if($35){label=8;break;}else{label=16;break;}
 case 8: 
 var $37=HEAP32[(($1)>>2)];
 var $38=((($37)-(12))|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($6+$40)|0);
 var $42=$41;
 var $_sum9=((($40)+(16))|0);
 var $43=(($6+$_sum9)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=$45|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($42,$46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=10;break; }
 case 9: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1,0); var $48$1 = tempRet0;
 var $49=$48$0;
 var $_0=$49;label=11;break;
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 var $52=$51$0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 var $_0=$52;label=11;break;
 case 11: 
 var $_0;
 var $54=___cxa_begin_catch($_0);
 var $55=HEAP32[(($1)>>2)];
 var $56=((($55)-(12))|0);
 var $57=$56;
 var $58=HEAP32[(($57)>>2)];
 var $_sum7=((($58)+(16))|0);
 var $59=(($6+$_sum7)|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $62=$61|1;
 HEAP32[(($60)>>2)]=$62;
 var $_sum8=((($58)+(20))|0);
 var $63=(($6+$_sum8)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65&1;
 var $67=($66|0)==0;
 if($67){label=14;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 ___cxa_end_catch();
 label=15;break;
 case 15: 
 STACKTOP=sp;return $this;
 case 16: 
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 label=15;break;
 case 17: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=19;break; }
 case 18: 
 ___resumeException($71$0)
 case 19: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1,0); var $74$1 = tempRet0;
 var $75=$74$0;
 ___clang_call_terminate($75);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP8[($1)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=$__os;
 var $3=$__os;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$__os;
 var $_sum=((($7)+(16))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=5;break;}
 case 2: 
 var $_sum1=((($7)+(72))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 var $19=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($16);
 label=4;break;
 case 4: 
 HEAP8[($1)]=1;
 label=5;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this){
 var label=0;


 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $__s=(sp)+(16);
 var $3=(sp)+(24);
 var $4=(sp)+(32);
 var $5=(($__s)|0);
 HEAP8[($5)]=0;
 var $6=(($__s+4)|0);
 HEAP32[(($6)>>2)]=$this;
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)-(12))|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$this;
 var $_sum_i=((($11)+(16))|0);
 var $13=(($12+$_sum_i)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){label=2;break;}else{label=18;break;}
 case 2: 
 var $_sum1_i=((($11)+(72))|0);
 var $18=(($12+$_sum1_i)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){var $_pre13=$11;label=5;break;}else{label=3;break;}
 case 3: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=14;break; }
 case 4: 
 var $_pre_pre=HEAP32[(($7)>>2)];
 var $_phi_trans_insert_phi_trans_insert=((($_pre_pre)-(12))|0);
 var $_phi_trans_insert12_phi_trans_insert=$_phi_trans_insert_phi_trans_insert;
 var $_pre13_pre=HEAP32[(($_phi_trans_insert12_phi_trans_insert)>>2)];
 var $_pre13=$_pre13_pre;label=5;break;
 case 5: 
 var $_pre13;
 HEAP8[($5)]=1;
 var $_sum=((($_pre13)+(28))|0);
 var $25=(($12+$_sum)|0);
 var $26=$25;
 __ZNSt3__16localeC2ERKS0_($3,$26);
 var $27=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($3,15024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 var $29=$27;
 __ZNSt3__16localeD2Ev($3);
 var $30=HEAP32[(($7)>>2)];
 var $31=((($30)-(12))|0);
 var $32=$31;
 var $33=HEAP32[(($32)>>2)];
 var $_sum_i_i=((($33)+(24))|0);
 var $34=(($12+$_sum_i_i)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=(($12+$33)|0);
 var $_sum9=((($33)+(76))|0);
 var $39=(($12+$_sum9)|0);
 var $40=$39;
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==-1;
 var $extract_t1_i=(($41)&255);
 if($42){label=7;break;}else{var $_off0_i=$extract_t1_i;label=11;break;}
 case 7: 
 var $44=$2;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $_sum11=((($33)+(28))|0);
 var $45=(($12+$_sum11)|0);
 var $46=$45;
 __ZNSt3__16localeC2ERKS0_($2,$46);
 var $47=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2,15376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 var $49=$47;
 var $50=$47;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+28)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($49,32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1,0); var $56$1 = tempRet0;
 __ZNSt3__16localeD2Ev($2);
 var $eh_lpad_body$1=$56$1;var $eh_lpad_body$0=$56$0;label=16;break;
 case 10: 
 __ZNSt3__16localeD2Ev($2);
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $57=(($54<<24)>>24);
 HEAP32[(($40)>>2)]=$57;
 var $_off0_i=$54;label=11;break;
 case 11: 
 var $_off0_i;
 var $58=$38;
 var $59=$__n;
 var $60=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $61=$27;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+32)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($1)|0);
 HEAP32[(($65)>>2)]=$37;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($4,$29,$1,$58,$_off0_i,$59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $67=(($4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==0;
 if($69){label=13;break;}else{label=18;break;}
 case 13: 
 var $71=HEAP32[(($7)>>2)];
 var $72=((($71)-(12))|0);
 var $73=$72;
 var $74=HEAP32[(($73)>>2)];
 var $75=(($12+$74)|0);
 var $76=$75;
 var $_sum10=((($74)+(16))|0);
 var $77=(($12+$_sum10)|0);
 var $78=$77;
 var $79=HEAP32[(($78)>>2)];
 var $80=$79|5;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($76,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=15;break; }
 case 14: 
 var $82$0 = ___cxa_find_matching_catch(-1, -1,0); var $82$1 = tempRet0;
 var $83=$82$0;
 var $_1=$83;label=20;break;
 case 15: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1,0); var $85$1 = tempRet0;
 var $eh_lpad_body$1=$85$1;var $eh_lpad_body$0=$85$0;label=16;break;
 case 16: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $86=$eh_lpad_body$0;
 var $_0=$86;label=19;break;
 case 17: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1,0); var $88$1 = tempRet0;
 var $89=$88$0;
 __ZNSt3__16localeD2Ev($3);
 var $_0=$89;label=19;break;
 case 18: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=24;break;
 case 19: 
 var $_0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_1=$_0;label=20;break;
 case 20: 
 var $_1;
 var $92=___cxa_begin_catch($_1);
 var $93=HEAP32[(($7)>>2)];
 var $94=((($93)-(12))|0);
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $_sum7=((($96)+(16))|0);
 var $97=(($12+$_sum7)|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 var $100=$99|1;
 HEAP32[(($98)>>2)]=$100;
 var $_sum8=((($96)+(20))|0);
 var $101=(($12+$_sum8)|0);
 var $102=$101;
 var $103=HEAP32[(($102)>>2)];
 var $104=$103&1;
 var $105=($104|0)==0;
 if($105){label=23;break;}else{label=21;break;}
 case 21: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=25;break; }
 case 22: 
 throw "Reached an unreachable!";
 case 23: 
 ___cxa_end_catch();
 label=24;break;
 case 24: 
 STACKTOP=sp;return $this;
 case 25: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1); var $109$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=27;break; }
 case 26: 
 ___resumeException($109$0)
 case 27: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1,0); var $112$1 = tempRet0;
 var $113=$112$0;
 ___clang_call_terminate($113);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=(($__s)|0);
 HEAP8[($1)]=0;
 var $2=(($__s+4)|0);
 HEAP32[(($2)>>2)]=$this;
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$this;
 var $_sum_i=((($7)+(16))|0);
 var $9=(($8+$_sum_i)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=19;break;}
 case 2: 
 var $_sum1_i=((($7)+(72))|0);
 var $14=(($8+$_sum1_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){var $_pre=$4;var $_pre7=$7;label=5;break;}else{label=3;break;}
 case 3: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=12;break; }
 case 4: 
 var $_pre_pre=HEAP32[(($3)>>2)];
 var $_phi_trans_insert_phi_trans_insert=((($_pre_pre)-(12))|0);
 var $_phi_trans_insert6_phi_trans_insert=$_phi_trans_insert_phi_trans_insert;
 var $_pre7_pre=HEAP32[(($_phi_trans_insert6_phi_trans_insert)>>2)];
 var $_pre=$_pre_pre;var $_pre7=$_pre7_pre;label=5;break;
 case 5: 
 var $_pre7;
 var $_pre;
 HEAP8[($1)]=1;
 var $_sum_i_i=((($_pre7)+(24))|0);
 var $21=(($8+$_sum_i_i)|0);
 var $22=$21;
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 var $25=($23|0)==0;
 if($25){var $42=$_pre;label=11;break;}else{label=6;break;}
 case 6: 
 var $27=(($23+24)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($23+28)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=($29|0)==($32|0);
 if($33){label=8;break;}else{label=7;break;}
 case 7: 
 var $34=(($29+1)|0);
 HEAP32[(($28)>>2)]=$34;
 HEAP8[($29)]=$__c;
 label=19;break;
 case 8: 
 var $35=$23;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+52)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($__c&255);
 var $40=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$38]($24,$39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=13;break; }
 case 9: 
 var $41=($40|0)==-1;
 if($41){label=10;break;}else{label=19;break;}
 case 10: 
 var $_pre8=HEAP32[(($3)>>2)];
 var $42=$_pre8;label=11;break;
 case 11: 
 var $42;
 var $43=((($42)-(12))|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($8+$45)|0);
 var $47=$46;
 var $_sum=((($45)+(16))|0);
 var $48=(($8+$_sum)|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$50|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($47,$51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=13;break; }
 case 12: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1,0); var $53$1 = tempRet0;
 var $54=$53$0;
 var $_0=$54;label=14;break;
 case 13: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1,0); var $56$1 = tempRet0;
 var $57=$56$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$57;label=14;break;
 case 14: 
 var $_0;
 var $59=___cxa_begin_catch($_0);
 var $60=HEAP32[(($3)>>2)];
 var $61=((($60)-(12))|0);
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $_sum4=((($63)+(16))|0);
 var $64=(($8+$_sum4)|0);
 var $65=$64;
 var $66=HEAP32[(($65)>>2)];
 var $67=$66|1;
 HEAP32[(($65)>>2)]=$67;
 var $_sum5=((($63)+(20))|0);
 var $68=(($8+$_sum5)|0);
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=$70&1;
 var $72=($71|0)==0;
 if($72){label=17;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=20;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 ___cxa_end_catch();
 label=18;break;
 case 18: 
 STACKTOP=sp;return $this;
 case 19: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=18;break;
 case 20: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=22;break; }
 case 21: 
 ___resumeException($76$0)
 case 22: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1,0); var $79$1 = tempRet0;
 var $80=$79$0;
 ___clang_call_terminate($80);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__119__iostream_category4nameEv($this){
 var label=0;


 return 2712;
}


function __ZNKSt3__119__iostream_category7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)==1;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=(($this)|0);
 __ZNKSt3__112__do_message7messageEi($agg_result,$3,$ev);
 label=4;break;
 case 3: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,3040,35);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__iostream_categoryD1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 return;
}


function __ZNSt3__18ios_base7failureD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18ios_base7failureD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 return;
}


function __ZNSt3__18ios_baseD0Ev($this){
 var label=0;


 __ZNSt3__18ios_baseD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}


function __ZNSt3__119__iostream_categoryD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17collateIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17collateIcED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNSt3__16locale5facetD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[($_024)];
 var $5=HEAP8[($_015)];
 var $6=(($4<<24)>>24)<(($5<<24)>>24);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=(($5<<24)>>24)<(($4<<24)>>24);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+1)|0);
 var $11=(($_015+1)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result,$this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($6);
 label=3;break;
 case 3: 
 var $8=($3>>>0)<11;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$3<<1;
 var $11=(($10)&255);
 var $12=$agg_result;
 HEAP8[($12)]=$11;
 var $13=$agg_result;
 var $14=(($13+1)|0);
 var $__p_0_ph_i_i_i=$14;label=6;break;
 case 5: 
 var $15=((($3)+(16))|0);
 var $16=$15&-16;
 var $17=__Znwj($16);
 var $18=(($agg_result+8)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=$16|1;
 var $20=(($agg_result)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=(($agg_result+4)|0);
 HEAP32[(($21)>>2)]=$3;
 var $__p_0_ph_i_i_i=$17;label=6;break;
 case 6: 
 var $__p_0_ph_i_i_i;
 var $22=($__lo|0)==($__hi|0);
 if($22){var $__p_0_lcssa_i_i_i=$__p_0_ph_i_i_i;label=9;break;}else{var $__p_01_i_i_i=$__p_0_ph_i_i_i;var $_02_i_i_i=$__lo;label=7;break;}
 case 7: 
 var $_02_i_i_i;
 var $__p_01_i_i_i;
 var $23=HEAP8[($_02_i_i_i)];
 HEAP8[($__p_01_i_i_i)]=$23;
 var $24=(($_02_i_i_i+1)|0);
 var $25=(($__p_01_i_i_i+1)|0);
 var $26=($24|0)==($__hi|0);
 if($26){label=8;break;}else{var $__p_01_i_i_i=$25;var $_02_i_i_i=$24;label=7;break;}
 case 8: 
 var $27=(((-$1))|0);
 var $scevgep_i_i_i=(($__hi+$27)|0);
 var $scevgep3_i_i_i=$scevgep_i_i_i;
 var $scevgep4_i_i_i=(($__p_0_ph_i_i_i+$scevgep3_i_i_i)|0);
 var $__p_0_lcssa_i_i_i=$scevgep4_i_i_i;label=9;break;
 case 9: 
 var $__p_0_lcssa_i_i_i;
 HEAP8[($__p_0_lcssa_i_i_i)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP8[($__p_01)];
 var $4=(($3<<24)>>24);
 var $5=((($4)+($2))|0);
 var $6=$5&-268435456;
 var $7=$6>>>24;
 var $8=$7|$6;
 var $9=$8^$5;
 var $10=(($__p_01+1)|0);
 var $11=($10|0)==($__hi|0);
 if($11){var $__h_0_lcssa=$9;label=3;break;}else{var $__p_01=$10;var $__h_02=$9;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17collateIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17collateIwED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_024)>>2)];
 var $5=HEAP32[(($_015)>>2)];
 var $6=($4|0)<($5|0);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=($5|0)<($4|0);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+4)|0);
 var $11=(($_015+4)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result,$this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=$3>>2;
 var $5=($4>>>0)>1073741807;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($7);
 label=3;break;
 case 3: 
 var $9=($4>>>0)<2;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 var $11=$3>>>1;
 var $12=(($11)&255);
 var $13=$agg_result;
 HEAP8[($13)]=$12;
 var $14=(($agg_result+4)|0);
 var $__p_0_ph_i_i_i=$14;label=6;break;
 case 5: 
 var $15=((($4)+(4))|0);
 var $16=$15&-4;
 var $17=$16<<2;
 var $18=__Znwj($17);
 var $19=$18;
 var $20=(($agg_result+8)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=$16|1;
 var $22=(($agg_result)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($agg_result+4)|0);
 HEAP32[(($23)>>2)]=$4;
 var $__p_0_ph_i_i_i=$19;label=6;break;
 case 6: 
 var $__p_0_ph_i_i_i;
 var $24=($__lo|0)==($__hi|0);
 if($24){var $__p_0_lcssa_i_i_i=$__p_0_ph_i_i_i;label=10;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i_i_i=((($__hi)-(4))|0);
 var $scevgep3_i_i_i=$scevgep_i_i_i;
 var $25=(((-$1))|0);
 var $uglygep_i_i_i=(($scevgep3_i_i_i+$25)|0);
 var $__p_01_i_i_i=$__p_0_ph_i_i_i;var $_02_i_i_i=$__lo;label=8;break;
 case 8: 
 var $_02_i_i_i;
 var $__p_01_i_i_i;
 var $27=HEAP32[(($_02_i_i_i)>>2)];
 HEAP32[(($__p_01_i_i_i)>>2)]=$27;
 var $28=(($_02_i_i_i+4)|0);
 var $29=(($__p_01_i_i_i+4)|0);
 var $30=($28|0)==($__hi|0);
 if($30){label=9;break;}else{var $__p_01_i_i_i=$29;var $_02_i_i_i=$28;label=8;break;}
 case 9: 
 var $uglygep4_i_i_i=$uglygep_i_i_i;
 var $31=$uglygep4_i_i_i>>>2;
 var $32=((($31)+(1))|0);
 var $scevgep5_i_i_i=(($__p_0_ph_i_i_i+($32<<2))|0);
 var $__p_0_lcssa_i_i_i=$scevgep5_i_i_i;label=10;break;
 case 10: 
 var $__p_0_lcssa_i_i_i;
 HEAP32[(($__p_0_lcssa_i_i_i)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP32[(($__p_01)>>2)];
 var $4=((($3)+($2))|0);
 var $5=$4&-268435456;
 var $6=$5>>>24;
 var $7=$6|$5;
 var $8=$7^$4;
 var $9=(($__p_01+4)|0);
 var $10=($9|0)==($__hi|0);
 if($10){var $__h_0_lcssa=$8;label=3;break;}else{var $__p_01=$9;var $__h_02=$8;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i4=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $__names=(sp)+(80);
 var $6=(sp)+(104);
 var $7=(($__iob+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $12=$this;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($__b)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($3)|0);
 HEAP32[(($21)>>2)]=$20;
 FUNCTION_TABLE[$15]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $22=(($1)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($16)>>2)]=$23;
 var $24=HEAP32[(($__lv)>>2)];
 if(($24|0)==0){ label=3;break;}else if(($24|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$23;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 var $31=(($4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $34=HEAP32[((15376)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $37=(($__p_i_i_i_i)|0);
 HEAP32[(($37)>>2)]=15376;
 var $38=(($__p_i_i_i_i+4)|0);
 HEAP32[(($38)>>2)]=(26);
 var $39=(($__p_i_i_i_i+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$33,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $40=HEAP32[((15380)>>2)];
 var $41=((($40)-(1))|0);
 var $42=(($32+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($32+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=10;break;}else{label=11;break;}
 case 10: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=11;break;}else{label=13;break;}
 case 11: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $57=$52;
 var $58=HEAP32[(($31)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 __ZNKSt3__18ios_base6getlocEv($5,$__iob);
 var $61=(($5)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$__p_i_i_i_i4;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $64=HEAP32[((14992)>>2)];
 var $65=($64|0)==-1;
 if($65){label=15;break;}else{label=14;break;}
 case 14: 
 var $67=(($__p_i_i_i_i4)|0);
 HEAP32[(($67)>>2)]=14992;
 var $68=(($__p_i_i_i_i4+4)|0);
 HEAP32[(($68)>>2)]=(26);
 var $69=(($__p_i_i_i_i4+8)|0);
 HEAP32[(($69)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14992,$63,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $70=HEAP32[((14996)>>2)];
 var $71=((($70)-(1))|0);
 var $72=(($62+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($62+8)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$73;
 var $77=$75;
 var $78=((($76)-($77))|0);
 var $79=$78>>2;
 var $80=($79>>>0)>($71>>>0);
 if($80){label=16;break;}else{label=17;break;}
 case 16: 
 var $81=(($75+($71<<2))|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)==0;
 if($83){label=17;break;}else{label=19;break;}
 case 17: 
 var $84=___cxa_allocate_exception(4);
 var $85=$84;
 __ZNSt8bad_castC2Ev($85);
 (function() { try { __THREW__ = 0; return ___cxa_throw($84,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $87=$82;
 var $88=HEAP32[(($61)>>2)];
 var $89=(($88)|0);
 var $90=__ZNSt3__114__shared_count16__release_sharedEv($89);
 var $91=(($__names)|0);
 var $92=$82;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+24)|0);
 var $95=HEAP32[(($94)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($91,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $_02=$91;label=25;break; }
 case 20: 
 var $96=(($__names+12)|0);
 var $97=HEAP32[(($92)>>2)];
 var $98=(($97+28)|0);
 var $99=HEAP32[(($98)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]($96,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $_02=$96;label=25;break; }
 case 21: 
 var $100=(($__e)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($6)|0);
 HEAP32[(($102)>>2)]=$101;
 var $103=(($__names+24)|0);
 var $104=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$91,$103,$57,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $105=($104|0)==($91|0);
 var $106=($105&1);
 HEAP8[($__v)]=$106;
 var $107=(($__b)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($agg_result)|0);
 HEAP32[(($109)>>2)]=$108;
 var $110=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($110);
 var $111=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($111);
 label=28;break;
 case 23: 
 var $113$0 = ___cxa_find_matching_catch(-1, -1); var $113$1 = tempRet0;
 var $114=$113$0;
 var $115=$113$1;
 var $116=HEAP32[(($31)>>2)];
 var $117=(($116)|0);
 var $118=__ZNSt3__114__shared_count16__release_sharedEv($117);
 var $_0=$114;var $_01=$115;label=29;break;
 case 24: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1); var $120$1 = tempRet0;
 var $121=$120$0;
 var $122=$120$1;
 var $123=HEAP32[(($61)>>2)];
 var $124=(($123)|0);
 var $125=__ZNSt3__114__shared_count16__release_sharedEv($124);
 var $_0=$121;var $_01=$122;label=29;break;
 case 25: 
 var $_02;
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $130=($91|0)==($_02|0);
 if($130){var $_0=$128;var $_01=$129;label=29;break;}else{var $131=$_02;label=26;break;}
 case 26: 
 var $131;
 var $132=((($131)-(12))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($132);
 var $133=($132|0)==($91|0);
 if($133){var $_0=$128;var $_01=$129;label=29;break;}else{var $131=$132;label=26;break;}
 case 27: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($136);
 var $137=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($137);
 var $138=$134$1;
 var $_0=$135;var $_01=$138;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $_01;
 var $_0;
 var $140$0=$_0;
 var $140$1=0;
 var $141$0=$140$0;
 var $141$1=$_01;
 ___resumeException($141$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $18=0;label=12;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $18=$8;label=12;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $18=0;label=12;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $17$1=$11$1;var $17$0=$11$0;label=11;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit51$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit51$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit51$1;var $lpad_phi$0=$lpad_nonloopexit51$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $12=($18|0)==0;
 if($12){var $17$1=$lpad_phi$1;var $17$0=$lpad_phi$0;label=11;break;}else{label=9;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return _free($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $17$1=$lpad_phi$1;var $17$0=$lpad_phi$0;label=11;break; } else { label=10;break; }
 case 10: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 var $16=$15$0;
 ___clang_call_terminate($16);
 throw "Reached an unreachable!";
 case 11: 
 var $17$0;
 var $17$1;
 ___resumeException($17$0)
 case 12: 
 var $18;
 var $__status_0;
 var $19=($__kb|0)==($__ke|0);
 if($19){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=13;break;}else{var $__n_might_match_061=$4;var $__n_does_match_062=0;var $__st_063=$__status_0;var $__ky_064=$__kb;label=14;break;}
 case 13: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=21;break;
 case 14: 
 var $__ky_064;
 var $__st_063;
 var $__n_does_match_062;
 var $__n_might_match_061;
 var $23=$__ky_064;
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=16;break;}else{label=15;break;}
 case 15: 
 var $28=(($__ky_064+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $33=$29;label=17;break;
 case 16: 
 var $31=($24&255);
 var $32=$31>>>1;
 var $33=$32;label=17;break;
 case 17: 
 var $33;
 var $34=($33|0)==0;
 if($34){label=19;break;}else{label=18;break;}
 case 18: 
 HEAP8[($__st_063)]=1;
 var $__n_does_match_1=$__n_does_match_062;var $__n_might_match_1=$__n_might_match_061;label=20;break;
 case 19: 
 HEAP8[($__st_063)]=2;
 var $37=((($__n_might_match_061)-(1))|0);
 var $38=((($__n_does_match_062)+(1))|0);
 var $__n_does_match_1=$38;var $__n_might_match_1=$37;label=20;break;
 case 20: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $40=(($__ky_064+12)|0);
 var $41=(($__st_063+1)|0);
 var $42=($40|0)==($__ke|0);
 if($42){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=13;break;}else{var $__n_might_match_061=$__n_might_match_1;var $__n_does_match_062=$__n_does_match_1;var $__st_063=$41;var $__ky_064=$40;label=14;break;}
 case 21: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $43=HEAP32[(($20)>>2)];
 var $44=($43|0)==0;
 if($44){var $58=0;label=27;break;}else{label=22;break;}
 case 22: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=23;break;}else{var $58=$43;label=27;break;}
 case 23: 
 var $51=$43;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+36)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=6;break; }
 case 24: 
 var $56=($55|0)==-1;
 if($56){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre_i_i_i=HEAP32[(($20)>>2)];
 var $58=$_pre_i_i_i;label=27;break;
 case 26: 
 HEAP32[(($20)>>2)]=0;
 var $58=0;label=27;break;
 case 27: 
 var $58;
 var $59=($58|0)==0;
 var $60=HEAP32[(($21)>>2)];
 var $61=($60|0)==0;
 if($61){var $_pre_i2_i_i16=0;label=32;break;}else{label=28;break;}
 case 28: 
 var $63=(($60+12)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($60+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($64|0)==($66|0);
 if($67){label=29;break;}else{var $_pre_i2_i_i16=$60;label=32;break;}
 case 29: 
 var $68=$60;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+36)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=6;break; }
 case 30: 
 var $73=($72|0)==-1;
 if($73){label=31;break;}else{var $_pre_i2_i_i16=$60;label=32;break;}
 case 31: 
 HEAP32[(($21)>>2)]=0;
 var $_pre_i2_i_i16=0;label=32;break;
 case 32: 
 var $_pre_i2_i_i16;
 var $75=($_pre_i2_i_i16|0)==0;
 var $tmp_i_i=$59^$75;
 var $76=($__n_might_match_2|0)!=0;
 var $_=$tmp_i_i&$76;
 var $77=HEAP32[(($20)>>2)];
 if($_){label=33;break;}else{label=80;break;}
 case 33: 
 var $79=(($77+12)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($77+16)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($80|0)==($82|0);
 if($83){label=34;break;}else{label=36;break;}
 case 34: 
 var $85=$77;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$88]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=6;break; }
 case 35: 
 var $extract_t_i=(($89)&255);
 var $_0_i_off0_i=$extract_t_i;label=37;break;
 case 36: 
 var $91=HEAP8[($80)];
 var $_0_i_off0_i=$91;label=37;break;
 case 37: 
 var $_0_i_off0_i;
 if($__case_sensitive){var $__c_0=$_0_i_off0_i;label=39;break;}else{label=38;break;}
 case 38: 
 var $93=HEAP32[(($22)>>2)];
 var $94=(($93+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($__ct,$_0_i_off0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$96;label=39;break; } else { label=6;break; }
 case 39: 
 var $__c_0;
 var $_pre=((($__indx_0)+(1))|0);
 if($19){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_2;var $__n_might_match_2=$__n_might_match_2;label=21;break;}else{label=40;break;}
 case 40: 
 if($__case_sensitive){var $__n_might_match_331_us=$__n_might_match_2;var $__n_does_match_332_us=$__n_does_match_2;var $__st_133_us=$__status_0;var $__consume_0_off035_us=0;var $__ky1_036_us=$__kb;label=41;break;}else{var $__n_might_match_331=$__n_might_match_2;var $__n_does_match_332=$__n_does_match_2;var $__st_133=$__status_0;var $__consume_0_off035=0;var $__ky1_036=$__kb;label=54;break;}
 case 41: 
 var $__ky1_036_us;
 var $__consume_0_off035_us;
 var $__st_133_us;
 var $__n_does_match_332_us;
 var $__n_might_match_331_us;
 var $97=HEAP8[($__st_133_us)];
 var $98=(($97<<24)>>24)==1;
 if($98){label=42;break;}else{var $__consume_1_off0_us=$__consume_0_off035_us;var $__n_does_match_4_us=$__n_does_match_332_us;var $__n_might_match_4_us=$__n_might_match_331_us;label=52;break;}
 case 42: 
 var $100=$__ky1_036_us;
 var $101=HEAP8[($100)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=44;break;}else{label=43;break;}
 case 43: 
 var $105=(($__ky1_036_us+8)|0);
 var $106=HEAP32[(($105)>>2)];
 var $110=$106;label=45;break;
 case 44: 
 var $108=$__ky1_036_us;
 var $109=(($108+1)|0);
 var $110=$109;label=45;break;
 case 45: 
 var $110;
 var $111=(($110+$__indx_0)|0);
 var $112=HEAP8[($111)];
 var $113=(($__c_0<<24)>>24)==(($112<<24)>>24);
 if($113){label=47;break;}else{label=46;break;}
 case 46: 
 HEAP8[($__st_133_us)]=0;
 var $115=((($__n_might_match_331_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off035_us;var $__n_does_match_4_us=$__n_does_match_332_us;var $__n_might_match_4_us=$115;label=52;break;
 case 47: 
 if($103){label=49;break;}else{label=48;break;}
 case 48: 
 var $118=(($__ky1_036_us+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $123=$119;label=50;break;
 case 49: 
 var $121=($101&255);
 var $122=$121>>>1;
 var $123=$122;label=50;break;
 case 50: 
 var $123;
 var $124=($123|0)==($_pre|0);
 if($124){label=51;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_332_us;var $__n_might_match_4_us=$__n_might_match_331_us;label=52;break;}
 case 51: 
 HEAP8[($__st_133_us)]=2;
 var $126=((($__n_might_match_331_us)-(1))|0);
 var $127=((($__n_does_match_332_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$127;var $__n_might_match_4_us=$126;label=52;break;
 case 52: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $129=(($__ky1_036_us+12)|0);
 var $130=($129|0)==($__ke|0);
 if($130){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=68;break;}else{label=53;break;}
 case 53: 
 var $131=(($__st_133_us+1)|0);
 var $__n_might_match_331_us=$__n_might_match_4_us;var $__n_does_match_332_us=$__n_does_match_4_us;var $__st_133_us=$131;var $__consume_0_off035_us=$__consume_1_off0_us;var $__ky1_036_us=$129;label=41;break;
 case 54: 
 var $__ky1_036;
 var $__consume_0_off035;
 var $__st_133;
 var $__n_does_match_332;
 var $__n_might_match_331;
 var $132=HEAP8[($__st_133)];
 var $133=(($132<<24)>>24)==1;
 if($133){label=55;break;}else{var $__consume_1_off0=$__consume_0_off035;var $__n_does_match_4=$__n_does_match_332;var $__n_might_match_4=$__n_might_match_331;label=66;break;}
 case 55: 
 var $135=$__ky1_036;
 var $136=HEAP8[($135)];
 var $137=$136&1;
 var $138=(($137<<24)>>24)==0;
 if($138){label=57;break;}else{label=56;break;}
 case 56: 
 var $140=(($__ky1_036+8)|0);
 var $141=HEAP32[(($140)>>2)];
 var $146=$141;label=58;break;
 case 57: 
 var $143=$__ky1_036;
 var $144=(($143+1)|0);
 var $146=$144;label=58;break;
 case 58: 
 var $146;
 var $147=(($146+$__indx_0)|0);
 var $148=HEAP8[($147)];
 var $149=HEAP32[(($22)>>2)];
 var $150=(($149+12)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$151]($__ct,$148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=5;break; }
 case 59: 
 var $153=(($__c_0<<24)>>24)==(($152<<24)>>24);
 if($153){label=60;break;}else{label=65;break;}
 case 60: 
 var $155=HEAP8[($135)];
 var $156=$155&1;
 var $157=(($156<<24)>>24)==0;
 if($157){label=62;break;}else{label=61;break;}
 case 61: 
 var $159=(($__ky1_036+4)|0);
 var $160=HEAP32[(($159)>>2)];
 var $164=$160;label=63;break;
 case 62: 
 var $162=($155&255);
 var $163=$162>>>1;
 var $164=$163;label=63;break;
 case 63: 
 var $164;
 var $165=($164|0)==($_pre|0);
 if($165){label=64;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_332;var $__n_might_match_4=$__n_might_match_331;label=66;break;}
 case 64: 
 HEAP8[($__st_133)]=2;
 var $167=((($__n_might_match_331)-(1))|0);
 var $168=((($__n_does_match_332)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$168;var $__n_might_match_4=$167;label=66;break;
 case 65: 
 HEAP8[($__st_133)]=0;
 var $170=((($__n_might_match_331)-(1))|0);
 var $__consume_1_off0=$__consume_0_off035;var $__n_does_match_4=$__n_does_match_332;var $__n_might_match_4=$170;label=66;break;
 case 66: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $172=(($__ky1_036+12)|0);
 var $173=($172|0)==($__ke|0);
 if($173){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=68;break;}else{label=67;break;}
 case 67: 
 var $174=(($__st_133+1)|0);
 var $__n_might_match_331=$__n_might_match_4;var $__n_does_match_332=$__n_does_match_4;var $__st_133=$174;var $__consume_0_off035=$__consume_1_off0;var $__ky1_036=$172;label=54;break;
 case 68: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=69;break;}else{var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}
 case 69: 
 var $176=HEAP32[(($20)>>2)];
 var $177=(($176+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($176+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=70;break;}else{label=71;break;}
 case 70: 
 var $183=$176;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+40)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=6;break; }
 case 71: 
 var $189=(($178+1)|0);
 HEAP32[(($177)>>2)]=$189;
 label=72;break;
 case 72: 
 var $190=((($__n_might_match_3_lcssa)+($__n_does_match_3_lcssa))|0);
 var $_not=($190>>>0)<2;
 if($_not){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}else{var $__n_does_match_545=$__n_does_match_3_lcssa;var $__st_246=$__status_0;var $__ky2_047=$__kb;label=73;break;}
 case 73: 
 var $__ky2_047;
 var $__st_246;
 var $__n_does_match_545;
 var $191=HEAP8[($__st_246)];
 var $192=(($191<<24)>>24)==2;
 if($192){label=74;break;}else{var $__n_does_match_6=$__n_does_match_545;label=79;break;}
 case 74: 
 var $194=$__ky2_047;
 var $195=HEAP8[($194)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=76;break;}else{label=75;break;}
 case 75: 
 var $199=(($__ky2_047+4)|0);
 var $200=HEAP32[(($199)>>2)];
 var $204=$200;label=77;break;
 case 76: 
 var $202=($195&255);
 var $203=$202>>>1;
 var $204=$203;label=77;break;
 case 77: 
 var $204;
 var $205=($204|0)==($_pre|0);
 if($205){var $__n_does_match_6=$__n_does_match_545;label=79;break;}else{label=78;break;}
 case 78: 
 HEAP8[($__st_246)]=0;
 var $207=((($__n_does_match_545)-(1))|0);
 var $__n_does_match_6=$207;label=79;break;
 case 79: 
 var $__n_does_match_6;
 var $209=(($__ky2_047+12)|0);
 var $210=(($__st_246+1)|0);
 var $211=($209|0)==($__ke|0);
 if($211){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_6;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}else{var $__n_does_match_545=$__n_does_match_6;var $__st_246=$210;var $__ky2_047=$209;label=73;break;}
 case 80: 
 var $213=($77|0)==0;
 if($213){var $227=0;label=86;break;}else{label=81;break;}
 case 81: 
 var $215=(($77+12)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(($77+16)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=($216|0)==($218|0);
 if($219){label=82;break;}else{var $227=$77;label=86;break;}
 case 82: 
 var $220=$77;
 var $221=HEAP32[(($220)>>2)];
 var $222=(($221+36)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$223]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=7;break; }
 case 83: 
 var $225=($224|0)==-1;
 if($225){label=85;break;}else{label=84;break;}
 case 84: 
 var $_pre_i_i_i12=HEAP32[(($20)>>2)];
 var $227=$_pre_i_i_i12;label=86;break;
 case 85: 
 HEAP32[(($20)>>2)]=0;
 var $227=0;label=86;break;
 case 86: 
 var $227;
 var $228=($227|0)==0;
 if($75){label=92;break;}else{label=87;break;}
 case 87: 
 var $230=(($_pre_i2_i_i16+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($_pre_i2_i_i16+16)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=($231|0)==($233|0);
 if($234){label=89;break;}else{label=88;break;}
 case 88: 
 if($228){label=95;break;}else{label=94;break;}
 case 89: 
 var $235=$_pre_i2_i_i16;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+36)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$238]($_pre_i2_i_i16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=7;break; }
 case 90: 
 var $240=($239|0)==-1;
 if($240){label=91;break;}else{label=93;break;}
 case 91: 
 HEAP32[(($21)>>2)]=0;
 label=92;break;
 case 92: 
 if($228){label=94;break;}else{label=95;break;}
 case 93: 
 if($228){label=95;break;}else{label=94;break;}
 case 94: 
 var $243=HEAP32[(($__err)>>2)];
 var $244=$243|2;
 HEAP32[(($__err)>>2)]=$244;
 label=95;break;
 case 95: 
 if($19){label=99;break;}else{label=96;break;}
 case 96: 
 var $245=HEAP8[($__status_0)];
 var $246=(($245<<24)>>24)==2;
 if($246){var $_024=$__kb;label=100;break;}else{var $_02680=$__kb;var $__st_32581=$__status_0;label=98;break;}
 case 97: 
 var $247=HEAP8[($251)];
 var $248=(($247<<24)>>24)==2;
 if($248){var $_024=$249;label=100;break;}else{var $_02680=$249;var $__st_32581=$251;label=98;break;}
 case 98: 
 var $__st_32581;
 var $_02680;
 var $249=(($_02680+12)|0);
 var $250=($249|0)==($__ke|0);
 var $251=(($__st_32581+1)|0);
 if($250){label=99;break;}else{label=97;break;}
 case 99: 
 var $252=HEAP32[(($__err)>>2)];
 var $253=$252|4;
 HEAP32[(($__err)>>2)]=$253;
 var $_024=$__ke;label=100;break;
 case 100: 
 var $_024;
 var $254=($18|0)==0;
 if($254){label=103;break;}else{label=101;break;}
 case 101: 
 (function() { try { __THREW__ = 0; return _free($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=102;break; }
 case 102: 
 var $257$0 = ___cxa_find_matching_catch(-1, -1,0); var $257$1 = tempRet0;
 var $258=$257$0;
 ___clang_call_terminate($258);
 throw "Reached an unreachable!";
 case 103: 
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_024;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__a_end=(sp)+(72);
 var $__g=(sp)+(80);
 var $__g_end=(sp)+(240);
 var $__dc=(sp)+(248);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre30=$__buf;
 var $_pre31=(($_pre30+1)|0);
 var $17=$13;var $_pre_phi32=$_pre31;var $_pre_phi34=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre33=(($__buf+8)|0);
 var $17=$16;var $_pre_phi32=$16;var $_pre_phi34=$_pre33;label=9;break;
 case 9: 
 var $_pre_phi34;
 var $_pre_phi32;
 var $17;
 HEAP32[(($__a_end)>>2)]=$17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $_pre_i_i_i4=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i4;
 var $__a_0;
 var $25=($_pre_i_i_i4|0)==0;
 if($25){var $39=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $27=(($_pre_i_i_i4+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($_pre_i_i_i4+16)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($28|0)==($30|0);
 if($31){label=12;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 12: 
 var $32=$_pre_i_i_i4;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($_pre_i_i_i4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $37=($36|0)==-1;
 if($37){label=14;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $39=0;label=15;break;
 case 15: 
 var $39;
 var $40=($39|0)==0;
 var $41=HEAP32[(($21)>>2)];
 var $42=($41|0)==0;
 if($42){label=21;break;}else{label=16;break;}
 case 16: 
 var $44=(($41+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($41+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=18;break;}else{label=17;break;}
 case 17: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 18: 
 var $49=$41;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $54=($53|0)==-1;
 if($54){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($40){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=48;break;}else{var $57=0;label=23;break;}
 case 22: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 23: 
 var $57;
 var $58=HEAP32[(($__a_end)>>2)];
 var $59=$58;
 var $60=$__a_0;
 var $61=((($59)-($60))|0);
 var $62=HEAP8[($this2_i_i_i)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=25;break;}else{label=24;break;}
 case 24: 
 var $66=HEAP32[(($23)>>2)];
 var $70=$66;label=26;break;
 case 25: 
 var $68=($62&255);
 var $69=$68>>>1;
 var $70=$69;label=26;break;
 case 26: 
 var $70;
 var $71=($61|0)==($70|0);
 if($71){label=27;break;}else{var $__a_1=$__a_0;label=40;break;}
 case 27: 
 if($64){label=29;break;}else{label=28;break;}
 case 28: 
 var $74=HEAP32[(($23)>>2)];
 var $81=$74;var $80=$74;label=30;break;
 case 29: 
 var $76=($62&255);
 var $77=$76>>>1;
 var $78=($62&255);
 var $79=$78>>>1;
 var $81=$79;var $80=$77;label=30;break;
 case 30: 
 var $80;
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$82,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $83=HEAP8[($this2_i_i_i)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $87=HEAP32[(($22)>>2)];
 var $88=$87&-2;
 var $phitmp_i19=((($88)-(1))|0);
 var $89=$phitmp_i19;label=33;break;
 case 33: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32;label=36;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[(($_pre_phi34)>>2)];
 var $95=$94;label=36;break;
 case 36: 
 var $95;
 var $96=(($95+$80)|0);
 HEAP32[(($__a_end)>>2)]=$96;
 var $__a_1=$95;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $__a_1;
 var $98=(($39+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($39+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=41;break;}else{label=43;break;}
 case 41: 
 var $104=$39;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+36)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($108)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $110=HEAP8[($99)];
 var $_0_i_off0_i=$110;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $112=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$7);
 var $113=($112|0)==0;
 if($113){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$57;label=48;break;}
 case 45: 
 var $115=HEAP32[(($98)>>2)];
 var $116=HEAP32[(($100)>>2)];
 var $117=($115|0)==($116|0);
 if($117){label=46;break;}else{label=47;break;}
 case 46: 
 var $119=$39;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+40)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break; } else { label=37;break; }
 case 47: 
 var $125=(($115+1)|0);
 HEAP32[(($98)>>2)]=$125;
 var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break;
 case 48: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $127=$__grouping;
 var $128=HEAP8[($127)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=50;break;}else{label=49;break;}
 case 49: 
 var $132=(($__grouping+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $137=$133;label=51;break;
 case 50: 
 var $135=($128&255);
 var $136=$135>>>1;
 var $137=$136;label=51;break;
 case 51: 
 var $137;
 var $138=($137|0)==0;
 if($138){label=54;break;}else{label=52;break;}
 case 52: 
 var $140=HEAP32[(($__g_end)>>2)];
 var $141=$140;
 var $142=$__g;
 var $143=((($141)-($142))|0);
 var $144=($143|0)<160;
 if($144){label=53;break;}else{label=54;break;}
 case 53: 
 var $146=HEAP32[(($__dc)>>2)];
 var $147=(($140+4)|0);
 HEAP32[(($__g_end)>>2)]=$147;
 HEAP32[(($140)>>2)]=$146;
 label=54;break;
 case 54: 
 var $148=HEAP32[(($__a_end)>>2)];
 var $149=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$148,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=38;break; }
 case 55: 
 HEAP32[(($__v)>>2)]=$149;
 var $151=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$151,$__err);
 var $152=($39|0)==0;
 if($152){var $166=0;label=60;break;}else{label=56;break;}
 case 56: 
 var $154=(($39+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($39+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=57;break;}else{var $166=$39;label=60;break;}
 case 57: 
 var $159=$39;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+36)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=38;break; }
 case 58: 
 var $164=($163|0)==-1;
 if($164){label=59;break;}else{var $166=$39;label=60;break;}
 case 59: 
 HEAP32[(($20)>>2)]=0;
 var $166=0;label=60;break;
 case 60: 
 var $166;
 var $167=($166|0)==0;
 var $168=($_pre_i2_i_i|0)==0;
 if($168){label=66;break;}else{label=61;break;}
 case 61: 
 var $170=(($_pre_i2_i_i+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($_pre_i2_i_i+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=63;break;}else{label=62;break;}
 case 62: 
 if($167){label=69;break;}else{label=68;break;}
 case 63: 
 var $175=$_pre_i2_i_i;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+36)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$178]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=38;break; }
 case 64: 
 var $180=($179|0)==-1;
 if($180){label=65;break;}else{label=67;break;}
 case 65: 
 HEAP32[(($21)>>2)]=0;
 label=66;break;
 case 66: 
 if($167){label=68;break;}else{label=69;break;}
 case 67: 
 var $182=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$167^$182;
 if($tmp_i_i){label=69;break;}else{label=68;break;}
 case 68: 
 var $184=HEAP32[(($__err)>>2)];
 var $185=$184|2;
 HEAP32[(($__err)>>2)]=$185;
 label=69;break;
 case 69: 
 var $187=(($agg_result)|0);
 HEAP32[(($187)>>2)]=$166;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__a_end=(sp)+(72);
 var $__g=(sp)+(80);
 var $__g_end=(sp)+(240);
 var $__dc=(sp)+(248);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre30=$__buf;
 var $_pre31=(($_pre30+1)|0);
 var $17=$13;var $_pre_phi32=$_pre31;var $_pre_phi34=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre33=(($__buf+8)|0);
 var $17=$16;var $_pre_phi32=$16;var $_pre_phi34=$_pre33;label=9;break;
 case 9: 
 var $_pre_phi34;
 var $_pre_phi32;
 var $17;
 HEAP32[(($__a_end)>>2)]=$17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $_pre_i_i_i4=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i4;
 var $__a_0;
 var $25=($_pre_i_i_i4|0)==0;
 if($25){var $39=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $27=(($_pre_i_i_i4+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($_pre_i_i_i4+16)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($28|0)==($30|0);
 if($31){label=12;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 12: 
 var $32=$_pre_i_i_i4;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($_pre_i_i_i4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $37=($36|0)==-1;
 if($37){label=14;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $39=0;label=15;break;
 case 15: 
 var $39;
 var $40=($39|0)==0;
 var $41=HEAP32[(($21)>>2)];
 var $42=($41|0)==0;
 if($42){label=21;break;}else{label=16;break;}
 case 16: 
 var $44=(($41+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($41+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=18;break;}else{label=17;break;}
 case 17: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 18: 
 var $49=$41;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $54=($53|0)==-1;
 if($54){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($40){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=48;break;}else{var $57=0;label=23;break;}
 case 22: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 23: 
 var $57;
 var $58=HEAP32[(($__a_end)>>2)];
 var $59=$58;
 var $60=$__a_0;
 var $61=((($59)-($60))|0);
 var $62=HEAP8[($this2_i_i_i)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=25;break;}else{label=24;break;}
 case 24: 
 var $66=HEAP32[(($23)>>2)];
 var $70=$66;label=26;break;
 case 25: 
 var $68=($62&255);
 var $69=$68>>>1;
 var $70=$69;label=26;break;
 case 26: 
 var $70;
 var $71=($61|0)==($70|0);
 if($71){label=27;break;}else{var $__a_1=$__a_0;label=40;break;}
 case 27: 
 if($64){label=29;break;}else{label=28;break;}
 case 28: 
 var $74=HEAP32[(($23)>>2)];
 var $81=$74;var $80=$74;label=30;break;
 case 29: 
 var $76=($62&255);
 var $77=$76>>>1;
 var $78=($62&255);
 var $79=$78>>>1;
 var $81=$79;var $80=$77;label=30;break;
 case 30: 
 var $80;
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$82,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $83=HEAP8[($this2_i_i_i)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $87=HEAP32[(($22)>>2)];
 var $88=$87&-2;
 var $phitmp_i19=((($88)-(1))|0);
 var $89=$phitmp_i19;label=33;break;
 case 33: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32;label=36;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[(($_pre_phi34)>>2)];
 var $95=$94;label=36;break;
 case 36: 
 var $95;
 var $96=(($95+$80)|0);
 HEAP32[(($__a_end)>>2)]=$96;
 var $__a_1=$95;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $__a_1;
 var $98=(($39+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($39+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=41;break;}else{label=43;break;}
 case 41: 
 var $104=$39;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+36)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($108)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $110=HEAP8[($99)];
 var $_0_i_off0_i=$110;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $112=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$7);
 var $113=($112|0)==0;
 if($113){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$57;label=48;break;}
 case 45: 
 var $115=HEAP32[(($98)>>2)];
 var $116=HEAP32[(($100)>>2)];
 var $117=($115|0)==($116|0);
 if($117){label=46;break;}else{label=47;break;}
 case 46: 
 var $119=$39;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+40)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break; } else { label=37;break; }
 case 47: 
 var $125=(($115+1)|0);
 HEAP32[(($98)>>2)]=$125;
 var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break;
 case 48: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $127=$__grouping;
 var $128=HEAP8[($127)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=50;break;}else{label=49;break;}
 case 49: 
 var $132=(($__grouping+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $137=$133;label=51;break;
 case 50: 
 var $135=($128&255);
 var $136=$135>>>1;
 var $137=$136;label=51;break;
 case 51: 
 var $137;
 var $138=($137|0)==0;
 if($138){label=54;break;}else{label=52;break;}
 case 52: 
 var $140=HEAP32[(($__g_end)>>2)];
 var $141=$140;
 var $142=$__g;
 var $143=((($141)-($142))|0);
 var $144=($143|0)<160;
 if($144){label=53;break;}else{label=54;break;}
 case 53: 
 var $146=HEAP32[(($__dc)>>2)];
 var $147=(($140+4)|0);
 HEAP32[(($__g_end)>>2)]=$147;
 HEAP32[(($140)>>2)]=$146;
 label=54;break;
 case 54: 
 var $148=HEAP32[(($__a_end)>>2)];
 var $149$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$148,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $149$0=$149$r;var $149$1=tempRet0;if (!__THREW__) { label=55;break; } else { label=38;break; }
 case 55: 
 var $st$1$0=(($__v)|0);
 HEAP32[(($st$1$0)>>2)]=$149$0;
 var $st$2$1=(($__v+4)|0);
 HEAP32[(($st$2$1)>>2)]=$149$1;
 var $151=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$151,$__err);
 var $152=($39|0)==0;
 if($152){var $166=0;label=60;break;}else{label=56;break;}
 case 56: 
 var $154=(($39+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($39+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=57;break;}else{var $166=$39;label=60;break;}
 case 57: 
 var $159=$39;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+36)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=38;break; }
 case 58: 
 var $164=($163|0)==-1;
 if($164){label=59;break;}else{var $166=$39;label=60;break;}
 case 59: 
 HEAP32[(($20)>>2)]=0;
 var $166=0;label=60;break;
 case 60: 
 var $166;
 var $167=($166|0)==0;
 var $168=($_pre_i2_i_i|0)==0;
 if($168){label=66;break;}else{label=61;break;}
 case 61: 
 var $170=(($_pre_i2_i_i+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($_pre_i2_i_i+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=63;break;}else{label=62;break;}
 case 62: 
 if($167){label=69;break;}else{label=68;break;}
 case 63: 
 var $175=$_pre_i2_i_i;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+36)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$178]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=38;break; }
 case 64: 
 var $180=($179|0)==-1;
 if($180){label=65;break;}else{label=67;break;}
 case 65: 
 HEAP32[(($21)>>2)]=0;
 label=66;break;
 case 66: 
 if($167){label=68;break;}else{label=69;break;}
 case 67: 
 var $182=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$167^$182;
 if($tmp_i_i){label=69;break;}else{label=68;break;}
 case 68: 
 var $184=HEAP32[(($__err)>>2)];
 var $185=$184|2;
 HEAP32[(($__err)>>2)]=$185;
 label=69;break;
 case 69: 
 var $187=(($agg_result)|0);
 HEAP32[(($187)>>2)]=$166;
 var $$etemp$3$0=160;
 var $$etemp$3$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__a_end=(sp)+(72);
 var $__g=(sp)+(80);
 var $__g_end=(sp)+(240);
 var $__dc=(sp)+(248);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre30=$__buf;
 var $_pre31=(($_pre30+1)|0);
 var $17=$13;var $_pre_phi32=$_pre31;var $_pre_phi34=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre33=(($__buf+8)|0);
 var $17=$16;var $_pre_phi32=$16;var $_pre_phi34=$_pre33;label=9;break;
 case 9: 
 var $_pre_phi34;
 var $_pre_phi32;
 var $17;
 HEAP32[(($__a_end)>>2)]=$17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $_pre_i_i_i4=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i4;
 var $__a_0;
 var $25=($_pre_i_i_i4|0)==0;
 if($25){var $39=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $27=(($_pre_i_i_i4+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($_pre_i_i_i4+16)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($28|0)==($30|0);
 if($31){label=12;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 12: 
 var $32=$_pre_i_i_i4;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($_pre_i_i_i4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $37=($36|0)==-1;
 if($37){label=14;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $39=0;label=15;break;
 case 15: 
 var $39;
 var $40=($39|0)==0;
 var $41=HEAP32[(($21)>>2)];
 var $42=($41|0)==0;
 if($42){label=21;break;}else{label=16;break;}
 case 16: 
 var $44=(($41+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($41+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=18;break;}else{label=17;break;}
 case 17: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 18: 
 var $49=$41;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $54=($53|0)==-1;
 if($54){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($40){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=48;break;}else{var $57=0;label=23;break;}
 case 22: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 23: 
 var $57;
 var $58=HEAP32[(($__a_end)>>2)];
 var $59=$58;
 var $60=$__a_0;
 var $61=((($59)-($60))|0);
 var $62=HEAP8[($this2_i_i_i)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=25;break;}else{label=24;break;}
 case 24: 
 var $66=HEAP32[(($23)>>2)];
 var $70=$66;label=26;break;
 case 25: 
 var $68=($62&255);
 var $69=$68>>>1;
 var $70=$69;label=26;break;
 case 26: 
 var $70;
 var $71=($61|0)==($70|0);
 if($71){label=27;break;}else{var $__a_1=$__a_0;label=40;break;}
 case 27: 
 if($64){label=29;break;}else{label=28;break;}
 case 28: 
 var $74=HEAP32[(($23)>>2)];
 var $81=$74;var $80=$74;label=30;break;
 case 29: 
 var $76=($62&255);
 var $77=$76>>>1;
 var $78=($62&255);
 var $79=$78>>>1;
 var $81=$79;var $80=$77;label=30;break;
 case 30: 
 var $80;
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$82,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $83=HEAP8[($this2_i_i_i)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $87=HEAP32[(($22)>>2)];
 var $88=$87&-2;
 var $phitmp_i19=((($88)-(1))|0);
 var $89=$phitmp_i19;label=33;break;
 case 33: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32;label=36;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[(($_pre_phi34)>>2)];
 var $95=$94;label=36;break;
 case 36: 
 var $95;
 var $96=(($95+$80)|0);
 HEAP32[(($__a_end)>>2)]=$96;
 var $__a_1=$95;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $__a_1;
 var $98=(($39+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($39+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=41;break;}else{label=43;break;}
 case 41: 
 var $104=$39;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+36)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($108)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $110=HEAP8[($99)];
 var $_0_i_off0_i=$110;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $112=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$7);
 var $113=($112|0)==0;
 if($113){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$57;label=48;break;}
 case 45: 
 var $115=HEAP32[(($98)>>2)];
 var $116=HEAP32[(($100)>>2)];
 var $117=($115|0)==($116|0);
 if($117){label=46;break;}else{label=47;break;}
 case 46: 
 var $119=$39;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+40)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break; } else { label=37;break; }
 case 47: 
 var $125=(($115+1)|0);
 HEAP32[(($98)>>2)]=$125;
 var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break;
 case 48: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $127=$__grouping;
 var $128=HEAP8[($127)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=50;break;}else{label=49;break;}
 case 49: 
 var $132=(($__grouping+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $137=$133;label=51;break;
 case 50: 
 var $135=($128&255);
 var $136=$135>>>1;
 var $137=$136;label=51;break;
 case 51: 
 var $137;
 var $138=($137|0)==0;
 if($138){label=54;break;}else{label=52;break;}
 case 52: 
 var $140=HEAP32[(($__g_end)>>2)];
 var $141=$140;
 var $142=$__g;
 var $143=((($141)-($142))|0);
 var $144=($143|0)<160;
 if($144){label=53;break;}else{label=54;break;}
 case 53: 
 var $146=HEAP32[(($__dc)>>2)];
 var $147=(($140+4)|0);
 HEAP32[(($__g_end)>>2)]=$147;
 HEAP32[(($140)>>2)]=$146;
 label=54;break;
 case 54: 
 var $148=HEAP32[(($__a_end)>>2)];
 var $149=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$148,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=38;break; }
 case 55: 
 HEAP16[(($__v)>>1)]=$149;
 var $151=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$151,$__err);
 var $152=($39|0)==0;
 if($152){var $166=0;label=60;break;}else{label=56;break;}
 case 56: 
 var $154=(($39+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($39+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=57;break;}else{var $166=$39;label=60;break;}
 case 57: 
 var $159=$39;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+36)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=38;break; }
 case 58: 
 var $164=($163|0)==-1;
 if($164){label=59;break;}else{var $166=$39;label=60;break;}
 case 59: 
 HEAP32[(($20)>>2)]=0;
 var $166=0;label=60;break;
 case 60: 
 var $166;
 var $167=($166|0)==0;
 var $168=($_pre_i2_i_i|0)==0;
 if($168){label=66;break;}else{label=61;break;}
 case 61: 
 var $170=(($_pre_i2_i_i+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($_pre_i2_i_i+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=63;break;}else{label=62;break;}
 case 62: 
 if($167){label=69;break;}else{label=68;break;}
 case 63: 
 var $175=$_pre_i2_i_i;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+36)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$178]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=38;break; }
 case 64: 
 var $180=($179|0)==-1;
 if($180){label=65;break;}else{label=67;break;}
 case 65: 
 HEAP32[(($21)>>2)]=0;
 label=66;break;
 case 66: 
 if($167){label=68;break;}else{label=69;break;}
 case 67: 
 var $182=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$167^$182;
 if($tmp_i_i){label=69;break;}else{label=68;break;}
 case 68: 
 var $184=HEAP32[(($__err)>>2)];
 var $185=$184|2;
 HEAP32[(($__err)>>2)]=$185;
 label=69;break;
 case 69: 
 var $187=(($agg_result)|0);
 HEAP32[(($187)>>2)]=$166;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__a_end=(sp)+(72);
 var $__g=(sp)+(80);
 var $__g_end=(sp)+(240);
 var $__dc=(sp)+(248);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre30=$__buf;
 var $_pre31=(($_pre30+1)|0);
 var $17=$13;var $_pre_phi32=$_pre31;var $_pre_phi34=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre33=(($__buf+8)|0);
 var $17=$16;var $_pre_phi32=$16;var $_pre_phi34=$_pre33;label=9;break;
 case 9: 
 var $_pre_phi34;
 var $_pre_phi32;
 var $17;
 HEAP32[(($__a_end)>>2)]=$17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $_pre_i_i_i4=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i4;
 var $__a_0;
 var $25=($_pre_i_i_i4|0)==0;
 if($25){var $39=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $27=(($_pre_i_i_i4+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($_pre_i_i_i4+16)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($28|0)==($30|0);
 if($31){label=12;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 12: 
 var $32=$_pre_i_i_i4;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($_pre_i_i_i4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $37=($36|0)==-1;
 if($37){label=14;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $39=0;label=15;break;
 case 15: 
 var $39;
 var $40=($39|0)==0;
 var $41=HEAP32[(($21)>>2)];
 var $42=($41|0)==0;
 if($42){label=21;break;}else{label=16;break;}
 case 16: 
 var $44=(($41+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($41+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=18;break;}else{label=17;break;}
 case 17: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 18: 
 var $49=$41;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $54=($53|0)==-1;
 if($54){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($40){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=48;break;}else{var $57=0;label=23;break;}
 case 22: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 23: 
 var $57;
 var $58=HEAP32[(($__a_end)>>2)];
 var $59=$58;
 var $60=$__a_0;
 var $61=((($59)-($60))|0);
 var $62=HEAP8[($this2_i_i_i)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=25;break;}else{label=24;break;}
 case 24: 
 var $66=HEAP32[(($23)>>2)];
 var $70=$66;label=26;break;
 case 25: 
 var $68=($62&255);
 var $69=$68>>>1;
 var $70=$69;label=26;break;
 case 26: 
 var $70;
 var $71=($61|0)==($70|0);
 if($71){label=27;break;}else{var $__a_1=$__a_0;label=40;break;}
 case 27: 
 if($64){label=29;break;}else{label=28;break;}
 case 28: 
 var $74=HEAP32[(($23)>>2)];
 var $81=$74;var $80=$74;label=30;break;
 case 29: 
 var $76=($62&255);
 var $77=$76>>>1;
 var $78=($62&255);
 var $79=$78>>>1;
 var $81=$79;var $80=$77;label=30;break;
 case 30: 
 var $80;
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$82,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $83=HEAP8[($this2_i_i_i)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $87=HEAP32[(($22)>>2)];
 var $88=$87&-2;
 var $phitmp_i19=((($88)-(1))|0);
 var $89=$phitmp_i19;label=33;break;
 case 33: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32;label=36;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[(($_pre_phi34)>>2)];
 var $95=$94;label=36;break;
 case 36: 
 var $95;
 var $96=(($95+$80)|0);
 HEAP32[(($__a_end)>>2)]=$96;
 var $__a_1=$95;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $__a_1;
 var $98=(($39+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($39+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=41;break;}else{label=43;break;}
 case 41: 
 var $104=$39;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+36)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($108)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $110=HEAP8[($99)];
 var $_0_i_off0_i=$110;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $112=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$7);
 var $113=($112|0)==0;
 if($113){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$57;label=48;break;}
 case 45: 
 var $115=HEAP32[(($98)>>2)];
 var $116=HEAP32[(($100)>>2)];
 var $117=($115|0)==($116|0);
 if($117){label=46;break;}else{label=47;break;}
 case 46: 
 var $119=$39;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+40)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break; } else { label=37;break; }
 case 47: 
 var $125=(($115+1)|0);
 HEAP32[(($98)>>2)]=$125;
 var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break;
 case 48: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $127=$__grouping;
 var $128=HEAP8[($127)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=50;break;}else{label=49;break;}
 case 49: 
 var $132=(($__grouping+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $137=$133;label=51;break;
 case 50: 
 var $135=($128&255);
 var $136=$135>>>1;
 var $137=$136;label=51;break;
 case 51: 
 var $137;
 var $138=($137|0)==0;
 if($138){label=54;break;}else{label=52;break;}
 case 52: 
 var $140=HEAP32[(($__g_end)>>2)];
 var $141=$140;
 var $142=$__g;
 var $143=((($141)-($142))|0);
 var $144=($143|0)<160;
 if($144){label=53;break;}else{label=54;break;}
 case 53: 
 var $146=HEAP32[(($__dc)>>2)];
 var $147=(($140+4)|0);
 HEAP32[(($__g_end)>>2)]=$147;
 HEAP32[(($140)>>2)]=$146;
 label=54;break;
 case 54: 
 var $148=HEAP32[(($__a_end)>>2)];
 var $149=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$148,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=38;break; }
 case 55: 
 HEAP32[(($__v)>>2)]=$149;
 var $151=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$151,$__err);
 var $152=($39|0)==0;
 if($152){var $166=0;label=60;break;}else{label=56;break;}
 case 56: 
 var $154=(($39+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($39+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=57;break;}else{var $166=$39;label=60;break;}
 case 57: 
 var $159=$39;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+36)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=38;break; }
 case 58: 
 var $164=($163|0)==-1;
 if($164){label=59;break;}else{var $166=$39;label=60;break;}
 case 59: 
 HEAP32[(($20)>>2)]=0;
 var $166=0;label=60;break;
 case 60: 
 var $166;
 var $167=($166|0)==0;
 var $168=($_pre_i2_i_i|0)==0;
 if($168){label=66;break;}else{label=61;break;}
 case 61: 
 var $170=(($_pre_i2_i_i+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($_pre_i2_i_i+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=63;break;}else{label=62;break;}
 case 62: 
 if($167){label=69;break;}else{label=68;break;}
 case 63: 
 var $175=$_pre_i2_i_i;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+36)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$178]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=38;break; }
 case 64: 
 var $180=($179|0)==-1;
 if($180){label=65;break;}else{label=67;break;}
 case 65: 
 HEAP32[(($21)>>2)]=0;
 label=66;break;
 case 66: 
 if($167){label=68;break;}else{label=69;break;}
 case 67: 
 var $182=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$167^$182;
 if($tmp_i_i){label=69;break;}else{label=68;break;}
 case 68: 
 var $184=HEAP32[(($__err)>>2)];
 var $185=$184|2;
 HEAP32[(($__err)>>2)]=$185;
 label=69;break;
 case 69: 
 var $187=(($agg_result)|0);
 HEAP32[(($187)>>2)]=$166;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__a_end=(sp)+(72);
 var $__g=(sp)+(80);
 var $__g_end=(sp)+(240);
 var $__dc=(sp)+(248);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre30=$__buf;
 var $_pre31=(($_pre30+1)|0);
 var $17=$13;var $_pre_phi32=$_pre31;var $_pre_phi34=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre33=(($__buf+8)|0);
 var $17=$16;var $_pre_phi32=$16;var $_pre_phi34=$_pre33;label=9;break;
 case 9: 
 var $_pre_phi34;
 var $_pre_phi32;
 var $17;
 HEAP32[(($__a_end)>>2)]=$17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $_pre_i_i_i4=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i4;
 var $__a_0;
 var $25=($_pre_i_i_i4|0)==0;
 if($25){var $39=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $27=(($_pre_i_i_i4+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($_pre_i_i_i4+16)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($28|0)==($30|0);
 if($31){label=12;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 12: 
 var $32=$_pre_i_i_i4;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($_pre_i_i_i4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $37=($36|0)==-1;
 if($37){label=14;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $39=0;label=15;break;
 case 15: 
 var $39;
 var $40=($39|0)==0;
 var $41=HEAP32[(($21)>>2)];
 var $42=($41|0)==0;
 if($42){label=21;break;}else{label=16;break;}
 case 16: 
 var $44=(($41+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($41+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=18;break;}else{label=17;break;}
 case 17: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 18: 
 var $49=$41;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $54=($53|0)==-1;
 if($54){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($40){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=48;break;}else{var $57=0;label=23;break;}
 case 22: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 23: 
 var $57;
 var $58=HEAP32[(($__a_end)>>2)];
 var $59=$58;
 var $60=$__a_0;
 var $61=((($59)-($60))|0);
 var $62=HEAP8[($this2_i_i_i)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=25;break;}else{label=24;break;}
 case 24: 
 var $66=HEAP32[(($23)>>2)];
 var $70=$66;label=26;break;
 case 25: 
 var $68=($62&255);
 var $69=$68>>>1;
 var $70=$69;label=26;break;
 case 26: 
 var $70;
 var $71=($61|0)==($70|0);
 if($71){label=27;break;}else{var $__a_1=$__a_0;label=40;break;}
 case 27: 
 if($64){label=29;break;}else{label=28;break;}
 case 28: 
 var $74=HEAP32[(($23)>>2)];
 var $81=$74;var $80=$74;label=30;break;
 case 29: 
 var $76=($62&255);
 var $77=$76>>>1;
 var $78=($62&255);
 var $79=$78>>>1;
 var $81=$79;var $80=$77;label=30;break;
 case 30: 
 var $80;
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$82,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $83=HEAP8[($this2_i_i_i)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $87=HEAP32[(($22)>>2)];
 var $88=$87&-2;
 var $phitmp_i19=((($88)-(1))|0);
 var $89=$phitmp_i19;label=33;break;
 case 33: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32;label=36;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[(($_pre_phi34)>>2)];
 var $95=$94;label=36;break;
 case 36: 
 var $95;
 var $96=(($95+$80)|0);
 HEAP32[(($__a_end)>>2)]=$96;
 var $__a_1=$95;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $__a_1;
 var $98=(($39+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($39+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=41;break;}else{label=43;break;}
 case 41: 
 var $104=$39;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+36)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($108)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $110=HEAP8[($99)];
 var $_0_i_off0_i=$110;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $112=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$7);
 var $113=($112|0)==0;
 if($113){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$57;label=48;break;}
 case 45: 
 var $115=HEAP32[(($98)>>2)];
 var $116=HEAP32[(($100)>>2)];
 var $117=($115|0)==($116|0);
 if($117){label=46;break;}else{label=47;break;}
 case 46: 
 var $119=$39;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+40)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break; } else { label=37;break; }
 case 47: 
 var $125=(($115+1)|0);
 HEAP32[(($98)>>2)]=$125;
 var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break;
 case 48: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $127=$__grouping;
 var $128=HEAP8[($127)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=50;break;}else{label=49;break;}
 case 49: 
 var $132=(($__grouping+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $137=$133;label=51;break;
 case 50: 
 var $135=($128&255);
 var $136=$135>>>1;
 var $137=$136;label=51;break;
 case 51: 
 var $137;
 var $138=($137|0)==0;
 if($138){label=54;break;}else{label=52;break;}
 case 52: 
 var $140=HEAP32[(($__g_end)>>2)];
 var $141=$140;
 var $142=$__g;
 var $143=((($141)-($142))|0);
 var $144=($143|0)<160;
 if($144){label=53;break;}else{label=54;break;}
 case 53: 
 var $146=HEAP32[(($__dc)>>2)];
 var $147=(($140+4)|0);
 HEAP32[(($__g_end)>>2)]=$147;
 HEAP32[(($140)>>2)]=$146;
 label=54;break;
 case 54: 
 var $148=HEAP32[(($__a_end)>>2)];
 var $149=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$148,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=38;break; }
 case 55: 
 HEAP32[(($__v)>>2)]=$149;
 var $151=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$151,$__err);
 var $152=($39|0)==0;
 if($152){var $166=0;label=60;break;}else{label=56;break;}
 case 56: 
 var $154=(($39+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($39+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=57;break;}else{var $166=$39;label=60;break;}
 case 57: 
 var $159=$39;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+36)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=38;break; }
 case 58: 
 var $164=($163|0)==-1;
 if($164){label=59;break;}else{var $166=$39;label=60;break;}
 case 59: 
 HEAP32[(($20)>>2)]=0;
 var $166=0;label=60;break;
 case 60: 
 var $166;
 var $167=($166|0)==0;
 var $168=($_pre_i2_i_i|0)==0;
 if($168){label=66;break;}else{label=61;break;}
 case 61: 
 var $170=(($_pre_i2_i_i+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($_pre_i2_i_i+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=63;break;}else{label=62;break;}
 case 62: 
 if($167){label=69;break;}else{label=68;break;}
 case 63: 
 var $175=$_pre_i2_i_i;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+36)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$178]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=38;break; }
 case 64: 
 var $180=($179|0)==-1;
 if($180){label=65;break;}else{label=67;break;}
 case 65: 
 HEAP32[(($21)>>2)]=0;
 label=66;break;
 case 66: 
 if($167){label=68;break;}else{label=69;break;}
 case 67: 
 var $182=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$167^$182;
 if($tmp_i_i){label=69;break;}else{label=68;break;}
 case 68: 
 var $184=HEAP32[(($__err)>>2)];
 var $185=$184|2;
 HEAP32[(($__err)>>2)]=$185;
 label=69;break;
 case 69: 
 var $187=(($agg_result)|0);
 HEAP32[(($187)>>2)]=$166;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__a_end=(sp)+(72);
 var $__g=(sp)+(80);
 var $__g_end=(sp)+(240);
 var $__dc=(sp)+(248);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre30=$__buf;
 var $_pre31=(($_pre30+1)|0);
 var $17=$13;var $_pre_phi32=$_pre31;var $_pre_phi34=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre33=(($__buf+8)|0);
 var $17=$16;var $_pre_phi32=$16;var $_pre_phi34=$_pre33;label=9;break;
 case 9: 
 var $_pre_phi34;
 var $_pre_phi32;
 var $17;
 HEAP32[(($__a_end)>>2)]=$17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $_pre_i_i_i4=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i4;
 var $__a_0;
 var $25=($_pre_i_i_i4|0)==0;
 if($25){var $39=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $27=(($_pre_i_i_i4+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($_pre_i_i_i4+16)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($28|0)==($30|0);
 if($31){label=12;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 12: 
 var $32=$_pre_i_i_i4;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($_pre_i_i_i4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $37=($36|0)==-1;
 if($37){label=14;break;}else{var $39=$_pre_i_i_i4;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $39=0;label=15;break;
 case 15: 
 var $39;
 var $40=($39|0)==0;
 var $41=HEAP32[(($21)>>2)];
 var $42=($41|0)==0;
 if($42){label=21;break;}else{label=16;break;}
 case 16: 
 var $44=(($41+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($41+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=18;break;}else{label=17;break;}
 case 17: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 18: 
 var $49=$41;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $54=($53|0)==-1;
 if($54){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($40){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=48;break;}else{var $57=0;label=23;break;}
 case 22: 
 if($40){var $57=$41;label=23;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$41;label=48;break;}
 case 23: 
 var $57;
 var $58=HEAP32[(($__a_end)>>2)];
 var $59=$58;
 var $60=$__a_0;
 var $61=((($59)-($60))|0);
 var $62=HEAP8[($this2_i_i_i)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=25;break;}else{label=24;break;}
 case 24: 
 var $66=HEAP32[(($23)>>2)];
 var $70=$66;label=26;break;
 case 25: 
 var $68=($62&255);
 var $69=$68>>>1;
 var $70=$69;label=26;break;
 case 26: 
 var $70;
 var $71=($61|0)==($70|0);
 if($71){label=27;break;}else{var $__a_1=$__a_0;label=40;break;}
 case 27: 
 if($64){label=29;break;}else{label=28;break;}
 case 28: 
 var $74=HEAP32[(($23)>>2)];
 var $81=$74;var $80=$74;label=30;break;
 case 29: 
 var $76=($62&255);
 var $77=$76>>>1;
 var $78=($62&255);
 var $79=$78>>>1;
 var $81=$79;var $80=$77;label=30;break;
 case 30: 
 var $80;
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$82,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $83=HEAP8[($this2_i_i_i)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $87=HEAP32[(($22)>>2)];
 var $88=$87&-2;
 var $phitmp_i19=((($88)-(1))|0);
 var $89=$phitmp_i19;label=33;break;
 case 33: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32;label=36;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[(($_pre_phi34)>>2)];
 var $95=$94;label=36;break;
 case 36: 
 var $95;
 var $96=(($95+$80)|0);
 HEAP32[(($__a_end)>>2)]=$96;
 var $__a_1=$95;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $__a_1;
 var $98=(($39+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($39+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=41;break;}else{label=43;break;}
 case 41: 
 var $104=$39;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+36)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($108)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $110=HEAP8[($99)];
 var $_0_i_off0_i=$110;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $112=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$7);
 var $113=($112|0)==0;
 if($113){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$57;label=48;break;}
 case 45: 
 var $115=HEAP32[(($98)>>2)];
 var $116=HEAP32[(($100)>>2)];
 var $117=($115|0)==($116|0);
 if($117){label=46;break;}else{label=47;break;}
 case 46: 
 var $119=$39;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+40)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break; } else { label=37;break; }
 case 47: 
 var $125=(($115+1)|0);
 HEAP32[(($98)>>2)]=$125;
 var $__a_0=$__a_1;var $_pre_i_i_i4=$39;label=10;break;
 case 48: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $127=$__grouping;
 var $128=HEAP8[($127)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=50;break;}else{label=49;break;}
 case 49: 
 var $132=(($__grouping+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $137=$133;label=51;break;
 case 50: 
 var $135=($128&255);
 var $136=$135>>>1;
 var $137=$136;label=51;break;
 case 51: 
 var $137;
 var $138=($137|0)==0;
 if($138){label=54;break;}else{label=52;break;}
 case 52: 
 var $140=HEAP32[(($__g_end)>>2)];
 var $141=$140;
 var $142=$__g;
 var $143=((($141)-($142))|0);
 var $144=($143|0)<160;
 if($144){label=53;break;}else{label=54;break;}
 case 53: 
 var $146=HEAP32[(($__dc)>>2)];
 var $147=(($140+4)|0);
 HEAP32[(($__g_end)>>2)]=$147;
 HEAP32[(($140)>>2)]=$146;
 label=54;break;
 case 54: 
 var $148=HEAP32[(($__a_end)>>2)];
 var $149$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$148,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $149$0=$149$r;var $149$1=tempRet0;if (!__THREW__) { label=55;break; } else { label=38;break; }
 case 55: 
 var $st$1$0=(($__v)|0);
 HEAP32[(($st$1$0)>>2)]=$149$0;
 var $st$2$1=(($__v+4)|0);
 HEAP32[(($st$2$1)>>2)]=$149$1;
 var $151=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$151,$__err);
 var $152=($39|0)==0;
 if($152){var $166=0;label=60;break;}else{label=56;break;}
 case 56: 
 var $154=(($39+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($39+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=57;break;}else{var $166=$39;label=60;break;}
 case 57: 
 var $159=$39;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+36)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=38;break; }
 case 58: 
 var $164=($163|0)==-1;
 if($164){label=59;break;}else{var $166=$39;label=60;break;}
 case 59: 
 HEAP32[(($20)>>2)]=0;
 var $166=0;label=60;break;
 case 60: 
 var $166;
 var $167=($166|0)==0;
 var $168=($_pre_i2_i_i|0)==0;
 if($168){label=66;break;}else{label=61;break;}
 case 61: 
 var $170=(($_pre_i2_i_i+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($_pre_i2_i_i+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=63;break;}else{label=62;break;}
 case 62: 
 if($167){label=69;break;}else{label=68;break;}
 case 63: 
 var $175=$_pre_i2_i_i;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+36)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$178]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=38;break; }
 case 64: 
 var $180=($179|0)==-1;
 if($180){label=65;break;}else{label=67;break;}
 case 65: 
 HEAP32[(($21)>>2)]=0;
 label=66;break;
 case 66: 
 if($167){label=68;break;}else{label=69;break;}
 case 67: 
 var $182=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$167^$182;
 if($tmp_i_i){label=69;break;}else{label=68;break;}
 case 68: 
 var $184=HEAP32[(($__err)>>2)];
 var $185=$184|2;
 HEAP32[(($__err)>>2)]=$185;
 label=69;break;
 case 69: 
 var $187=(($agg_result)|0);
 HEAP32[(($187)>>2)]=$166;
 var $$etemp$3$0=160;
 var $$etemp$3$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $__a_end=(sp)+(80);
 var $__g=(sp)+(88);
 var $__g_end=(sp)+(248);
 var $__dc=(sp)+(256);
 var $__in_units=(sp)+(264);
 var $__exp=(sp)+(272);
 var $0=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$0,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=34;break; }
 case 2: 
 var $1=HEAP8[($this2_i_i_i)];
 var $2=$1&1;
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=3;break;}
 case 3: 
 var $5=(($__buf+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $_pre31=$__buf;
 var $_pre32=(($_pre31+1)|0);
 var $10=$6;var $_pre_phi33=$_pre32;var $_pre_phi35=$5;label=5;break;
 case 4: 
 var $8=$__buf;
 var $9=(($8+1)|0);
 var $_pre34=(($__buf+8)|0);
 var $10=$9;var $_pre_phi33=$9;var $_pre_phi35=$_pre34;label=5;break;
 case 5: 
 var $_pre_phi35;
 var $_pre_phi33;
 var $10;
 HEAP32[(($__a_end)>>2)]=$10;
 var $11=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$10;var $_pre_i_i_i4=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i4;
 var $__a_0;
 var $19=($_pre_i_i_i4|0)==0;
 if($19){var $33=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $21=(($_pre_i_i_i4+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($_pre_i_i_i4+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($22|0)==($24|0);
 if($25){label=8;break;}else{var $33=$_pre_i_i_i4;label=11;break;}
 case 8: 
 var $26=$_pre_i_i_i4;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($_pre_i_i_i4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=33;break; }
 case 9: 
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{var $33=$_pre_i_i_i4;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $33=0;label=11;break;
 case 11: 
 var $33;
 var $34=($33|0)==0;
 var $35=HEAP32[(($14)>>2)];
 var $36=($35|0)==0;
 if($36){label=17;break;}else{label=12;break;}
 case 12: 
 var $38=(($35+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($35+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=14;break;}else{label=13;break;}
 case 13: 
 if($34){var $51=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 14: 
 var $43=$35;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+36)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=33;break; }
 case 15: 
 var $48=($47|0)==-1;
 if($48){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($34){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=44;break;}else{var $51=0;label=19;break;}
 case 18: 
 if($34){var $51=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 19: 
 var $51;
 var $52=HEAP32[(($__a_end)>>2)];
 var $53=$52;
 var $54=$__a_0;
 var $55=((($53)-($54))|0);
 var $56=HEAP8[($this2_i_i_i)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=21;break;}else{label=20;break;}
 case 20: 
 var $60=HEAP32[(($16)>>2)];
 var $64=$60;label=22;break;
 case 21: 
 var $62=($56&255);
 var $63=$62>>>1;
 var $64=$63;label=22;break;
 case 22: 
 var $64;
 var $65=($55|0)==($64|0);
 if($65){label=23;break;}else{var $__a_1=$__a_0;label=36;break;}
 case 23: 
 if($58){label=25;break;}else{label=24;break;}
 case 24: 
 var $68=HEAP32[(($16)>>2)];
 var $75=$68;var $74=$68;label=26;break;
 case 25: 
 var $70=($56&255);
 var $71=$70>>>1;
 var $72=($56&255);
 var $73=$72>>>1;
 var $75=$73;var $74=$71;label=26;break;
 case 26: 
 var $74;
 var $75;
 var $76=$75<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$76,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $77=HEAP8[($this2_i_i_i)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){var $83=10;label=29;break;}else{label=28;break;}
 case 28: 
 var $81=HEAP32[(($15)>>2)];
 var $82=$81&-2;
 var $phitmp_i19=((($82)-(1))|0);
 var $83=$phitmp_i19;label=29;break;
 case 29: 
 var $83;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=33;break; }
 case 30: 
 var $84=HEAP8[($this2_i_i_i)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $89=$_pre_phi33;label=32;break;}else{label=31;break;}
 case 31: 
 var $88=HEAP32[(($_pre_phi35)>>2)];
 var $89=$88;label=32;break;
 case 32: 
 var $89;
 var $90=(($89+$74)|0);
 HEAP32[(($__a_end)>>2)]=$90;
 var $__a_1=$89;label=36;break;
 case 33: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=35;break;
 case 34: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=35;break;
 case 35: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 36: 
 var $__a_1;
 var $92=(($33+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($33+16)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($93|0)==($95|0);
 if($96){label=37;break;}else{label=39;break;}
 case 37: 
 var $98=$33;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+36)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$101]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 38: 
 var $extract_t_i=(($102)&255);
 var $_0_i_off0_i=$extract_t_i;label=40;break;
 case 39: 
 var $104=HEAP8[($93)];
 var $_0_i_off0_i=$104;label=40;break;
 case 40: 
 var $_0_i_off0_i;
 var $106=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$0);
 var $107=($106|0)==0;
 if($107){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$51;label=44;break;}
 case 41: 
 var $109=HEAP32[(($92)>>2)];
 var $110=HEAP32[(($94)>>2)];
 var $111=($109|0)==($110|0);
 if($111){label=42;break;}else{label=43;break;}
 case 42: 
 var $113=$33;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+40)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i4=$33;label=6;break; } else { label=33;break; }
 case 43: 
 var $119=(($109+1)|0);
 HEAP32[(($92)>>2)]=$119;
 var $__a_0=$__a_1;var $_pre_i_i_i4=$33;label=6;break;
 case 44: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $121=$__grouping;
 var $122=HEAP8[($121)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=46;break;}else{label=45;break;}
 case 45: 
 var $126=(($__grouping+4)|0);
 var $127=HEAP32[(($126)>>2)];
 var $131=$127;label=47;break;
 case 46: 
 var $129=($122&255);
 var $130=$129>>>1;
 var $131=$130;label=47;break;
 case 47: 
 var $131;
 var $132=($131|0)==0;
 if($132){label=51;break;}else{label=48;break;}
 case 48: 
 var $134=HEAP8[($__in_units)];
 var $135=(($134<<24)>>24)==0;
 if($135){label=51;break;}else{label=49;break;}
 case 49: 
 var $137=HEAP32[(($__g_end)>>2)];
 var $138=$137;
 var $139=$__g;
 var $140=((($138)-($139))|0);
 var $141=($140|0)<160;
 if($141){label=50;break;}else{label=51;break;}
 case 50: 
 var $143=HEAP32[(($__dc)>>2)];
 var $144=(($137+4)|0);
 HEAP32[(($__g_end)>>2)]=$144;
 HEAP32[(($137)>>2)]=$143;
 label=51;break;
 case 51: 
 var $145=HEAP32[(($__a_end)>>2)];
 var $146=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$145,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=34;break; }
 case 52: 
 HEAPF32[(($__v)>>2)]=$146;
 var $148=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$148,$__err);
 var $149=($33|0)==0;
 if($149){var $163=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $151=(($33+12)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($33+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($152|0)==($154|0);
 if($155){label=54;break;}else{var $163=$33;label=57;break;}
 case 54: 
 var $156=$33;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+36)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=34;break; }
 case 55: 
 var $161=($160|0)==-1;
 if($161){label=56;break;}else{var $163=$33;label=57;break;}
 case 56: 
 HEAP32[(($13)>>2)]=0;
 var $163=0;label=57;break;
 case 57: 
 var $163;
 var $164=($163|0)==0;
 var $165=($_pre_i2_i_i|0)==0;
 if($165){label=63;break;}else{label=58;break;}
 case 58: 
 var $167=(($_pre_i2_i_i+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($_pre_i2_i_i+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=60;break;}else{label=59;break;}
 case 59: 
 if($164){label=66;break;}else{label=65;break;}
 case 60: 
 var $172=$_pre_i2_i_i;
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+36)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$175]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=34;break; }
 case 61: 
 var $177=($176|0)==-1;
 if($177){label=62;break;}else{label=64;break;}
 case 62: 
 HEAP32[(($14)>>2)]=0;
 label=63;break;
 case 63: 
 if($164){label=65;break;}else{label=66;break;}
 case 64: 
 var $179=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$164^$179;
 if($tmp_i_i){label=66;break;}else{label=65;break;}
 case 65: 
 var $181=HEAP32[(($__err)>>2)];
 var $182=$181|2;
 HEAP32[(($__err)>>2)]=$182;
 label=66;break;
 case 66: 
 var $184=(($agg_result)|0);
 HEAP32[(($184)>>2)]=$163;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $__a_end=(sp)+(80);
 var $__g=(sp)+(88);
 var $__g_end=(sp)+(248);
 var $__dc=(sp)+(256);
 var $__in_units=(sp)+(264);
 var $__exp=(sp)+(272);
 var $0=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$0,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=34;break; }
 case 2: 
 var $1=HEAP8[($this2_i_i_i)];
 var $2=$1&1;
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=3;break;}
 case 3: 
 var $5=(($__buf+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $_pre31=$__buf;
 var $_pre32=(($_pre31+1)|0);
 var $10=$6;var $_pre_phi33=$_pre32;var $_pre_phi35=$5;label=5;break;
 case 4: 
 var $8=$__buf;
 var $9=(($8+1)|0);
 var $_pre34=(($__buf+8)|0);
 var $10=$9;var $_pre_phi33=$9;var $_pre_phi35=$_pre34;label=5;break;
 case 5: 
 var $_pre_phi35;
 var $_pre_phi33;
 var $10;
 HEAP32[(($__a_end)>>2)]=$10;
 var $11=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$10;var $_pre_i_i_i4=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i4;
 var $__a_0;
 var $19=($_pre_i_i_i4|0)==0;
 if($19){var $33=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $21=(($_pre_i_i_i4+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($_pre_i_i_i4+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($22|0)==($24|0);
 if($25){label=8;break;}else{var $33=$_pre_i_i_i4;label=11;break;}
 case 8: 
 var $26=$_pre_i_i_i4;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($_pre_i_i_i4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=33;break; }
 case 9: 
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{var $33=$_pre_i_i_i4;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $33=0;label=11;break;
 case 11: 
 var $33;
 var $34=($33|0)==0;
 var $35=HEAP32[(($14)>>2)];
 var $36=($35|0)==0;
 if($36){label=17;break;}else{label=12;break;}
 case 12: 
 var $38=(($35+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($35+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=14;break;}else{label=13;break;}
 case 13: 
 if($34){var $51=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 14: 
 var $43=$35;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+36)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=33;break; }
 case 15: 
 var $48=($47|0)==-1;
 if($48){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($34){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=44;break;}else{var $51=0;label=19;break;}
 case 18: 
 if($34){var $51=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 19: 
 var $51;
 var $52=HEAP32[(($__a_end)>>2)];
 var $53=$52;
 var $54=$__a_0;
 var $55=((($53)-($54))|0);
 var $56=HEAP8[($this2_i_i_i)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=21;break;}else{label=20;break;}
 case 20: 
 var $60=HEAP32[(($16)>>2)];
 var $64=$60;label=22;break;
 case 21: 
 var $62=($56&255);
 var $63=$62>>>1;
 var $64=$63;label=22;break;
 case 22: 
 var $64;
 var $65=($55|0)==($64|0);
 if($65){label=23;break;}else{var $__a_1=$__a_0;label=36;break;}
 case 23: 
 if($58){label=25;break;}else{label=24;break;}
 case 24: 
 var $68=HEAP32[(($16)>>2)];
 var $75=$68;var $74=$68;label=26;break;
 case 25: 
 var $70=($56&255);
 var $71=$70>>>1;
 var $72=($56&255);
 var $73=$72>>>1;
 var $75=$73;var $74=$71;label=26;break;
 case 26: 
 var $74;
 var $75;
 var $76=$75<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$76,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $77=HEAP8[($this2_i_i_i)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){var $83=10;label=29;break;}else{label=28;break;}
 case 28: 
 var $81=HEAP32[(($15)>>2)];
 var $82=$81&-2;
 var $phitmp_i19=((($82)-(1))|0);
 var $83=$phitmp_i19;label=29;break;
 case 29: 
 var $83;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=33;break; }
 case 30: 
 var $84=HEAP8[($this2_i_i_i)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $89=$_pre_phi33;label=32;break;}else{label=31;break;}
 case 31: 
 var $88=HEAP32[(($_pre_phi35)>>2)];
 var $89=$88;label=32;break;
 case 32: 
 var $89;
 var $90=(($89+$74)|0);
 HEAP32[(($__a_end)>>2)]=$90;
 var $__a_1=$89;label=36;break;
 case 33: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=35;break;
 case 34: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=35;break;
 case 35: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 36: 
 var $__a_1;
 var $92=(($33+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($33+16)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($93|0)==($95|0);
 if($96){label=37;break;}else{label=39;break;}
 case 37: 
 var $98=$33;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+36)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$101]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 38: 
 var $extract_t_i=(($102)&255);
 var $_0_i_off0_i=$extract_t_i;label=40;break;
 case 39: 
 var $104=HEAP8[($93)];
 var $_0_i_off0_i=$104;label=40;break;
 case 40: 
 var $_0_i_off0_i;
 var $106=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$0);
 var $107=($106|0)==0;
 if($107){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$51;label=44;break;}
 case 41: 
 var $109=HEAP32[(($92)>>2)];
 var $110=HEAP32[(($94)>>2)];
 var $111=($109|0)==($110|0);
 if($111){label=42;break;}else{label=43;break;}
 case 42: 
 var $113=$33;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+40)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i4=$33;label=6;break; } else { label=33;break; }
 case 43: 
 var $119=(($109+1)|0);
 HEAP32[(($92)>>2)]=$119;
 var $__a_0=$__a_1;var $_pre_i_i_i4=$33;label=6;break;
 case 44: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $121=$__grouping;
 var $122=HEAP8[($121)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=46;break;}else{label=45;break;}
 case 45: 
 var $126=(($__grouping+4)|0);
 var $127=HEAP32[(($126)>>2)];
 var $131=$127;label=47;break;
 case 46: 
 var $129=($122&255);
 var $130=$129>>>1;
 var $131=$130;label=47;break;
 case 47: 
 var $131;
 var $132=($131|0)==0;
 if($132){label=51;break;}else{label=48;break;}
 case 48: 
 var $134=HEAP8[($__in_units)];
 var $135=(($134<<24)>>24)==0;
 if($135){label=51;break;}else{label=49;break;}
 case 49: 
 var $137=HEAP32[(($__g_end)>>2)];
 var $138=$137;
 var $139=$__g;
 var $140=((($138)-($139))|0);
 var $141=($140|0)<160;
 if($141){label=50;break;}else{label=51;break;}
 case 50: 
 var $143=HEAP32[(($__dc)>>2)];
 var $144=(($137+4)|0);
 HEAP32[(($__g_end)>>2)]=$144;
 HEAP32[(($137)>>2)]=$143;
 label=51;break;
 case 51: 
 var $145=HEAP32[(($__a_end)>>2)];
 var $146=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$145,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=34;break; }
 case 52: 
 HEAPF64[(($__v)>>3)]=$146;
 var $148=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$148,$__err);
 var $149=($33|0)==0;
 if($149){var $163=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $151=(($33+12)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($33+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($152|0)==($154|0);
 if($155){label=54;break;}else{var $163=$33;label=57;break;}
 case 54: 
 var $156=$33;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+36)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=34;break; }
 case 55: 
 var $161=($160|0)==-1;
 if($161){label=56;break;}else{var $163=$33;label=57;break;}
 case 56: 
 HEAP32[(($13)>>2)]=0;
 var $163=0;label=57;break;
 case 57: 
 var $163;
 var $164=($163|0)==0;
 var $165=($_pre_i2_i_i|0)==0;
 if($165){label=63;break;}else{label=58;break;}
 case 58: 
 var $167=(($_pre_i2_i_i+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($_pre_i2_i_i+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=60;break;}else{label=59;break;}
 case 59: 
 if($164){label=66;break;}else{label=65;break;}
 case 60: 
 var $172=$_pre_i2_i_i;
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+36)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$175]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=34;break; }
 case 61: 
 var $177=($176|0)==-1;
 if($177){label=62;break;}else{label=64;break;}
 case 62: 
 HEAP32[(($14)>>2)]=0;
 label=63;break;
 case 63: 
 if($164){label=65;break;}else{label=66;break;}
 case 64: 
 var $179=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$164^$179;
 if($tmp_i_i){label=66;break;}else{label=65;break;}
 case 65: 
 var $181=HEAP32[(($__err)>>2)];
 var $182=$181|2;
 HEAP32[(($__err)>>2)]=$182;
 label=66;break;
 case 66: 
 var $184=(($agg_result)|0);
 HEAP32[(($184)>>2)]=$163;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $__a_end=(sp)+(80);
 var $__g=(sp)+(88);
 var $__g_end=(sp)+(248);
 var $__dc=(sp)+(256);
 var $__in_units=(sp)+(264);
 var $__exp=(sp)+(272);
 var $0=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$0,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=34;break; }
 case 2: 
 var $1=HEAP8[($this2_i_i_i)];
 var $2=$1&1;
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=3;break;}
 case 3: 
 var $5=(($__buf+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $_pre31=$__buf;
 var $_pre32=(($_pre31+1)|0);
 var $10=$6;var $_pre_phi33=$_pre32;var $_pre_phi35=$5;label=5;break;
 case 4: 
 var $8=$__buf;
 var $9=(($8+1)|0);
 var $_pre34=(($__buf+8)|0);
 var $10=$9;var $_pre_phi33=$9;var $_pre_phi35=$_pre34;label=5;break;
 case 5: 
 var $_pre_phi35;
 var $_pre_phi33;
 var $10;
 HEAP32[(($__a_end)>>2)]=$10;
 var $11=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$10;var $_pre_i_i_i4=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i4;
 var $__a_0;
 var $19=($_pre_i_i_i4|0)==0;
 if($19){var $33=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $21=(($_pre_i_i_i4+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($_pre_i_i_i4+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($22|0)==($24|0);
 if($25){label=8;break;}else{var $33=$_pre_i_i_i4;label=11;break;}
 case 8: 
 var $26=$_pre_i_i_i4;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($_pre_i_i_i4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=33;break; }
 case 9: 
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{var $33=$_pre_i_i_i4;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $33=0;label=11;break;
 case 11: 
 var $33;
 var $34=($33|0)==0;
 var $35=HEAP32[(($14)>>2)];
 var $36=($35|0)==0;
 if($36){label=17;break;}else{label=12;break;}
 case 12: 
 var $38=(($35+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($35+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=14;break;}else{label=13;break;}
 case 13: 
 if($34){var $51=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 14: 
 var $43=$35;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+36)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=33;break; }
 case 15: 
 var $48=($47|0)==-1;
 if($48){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($34){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=44;break;}else{var $51=0;label=19;break;}
 case 18: 
 if($34){var $51=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 19: 
 var $51;
 var $52=HEAP32[(($__a_end)>>2)];
 var $53=$52;
 var $54=$__a_0;
 var $55=((($53)-($54))|0);
 var $56=HEAP8[($this2_i_i_i)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=21;break;}else{label=20;break;}
 case 20: 
 var $60=HEAP32[(($16)>>2)];
 var $64=$60;label=22;break;
 case 21: 
 var $62=($56&255);
 var $63=$62>>>1;
 var $64=$63;label=22;break;
 case 22: 
 var $64;
 var $65=($55|0)==($64|0);
 if($65){label=23;break;}else{var $__a_1=$__a_0;label=36;break;}
 case 23: 
 if($58){label=25;break;}else{label=24;break;}
 case 24: 
 var $68=HEAP32[(($16)>>2)];
 var $75=$68;var $74=$68;label=26;break;
 case 25: 
 var $70=($56&255);
 var $71=$70>>>1;
 var $72=($56&255);
 var $73=$72>>>1;
 var $75=$73;var $74=$71;label=26;break;
 case 26: 
 var $74;
 var $75;
 var $76=$75<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$76,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $77=HEAP8[($this2_i_i_i)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){var $83=10;label=29;break;}else{label=28;break;}
 case 28: 
 var $81=HEAP32[(($15)>>2)];
 var $82=$81&-2;
 var $phitmp_i19=((($82)-(1))|0);
 var $83=$phitmp_i19;label=29;break;
 case 29: 
 var $83;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=33;break; }
 case 30: 
 var $84=HEAP8[($this2_i_i_i)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $89=$_pre_phi33;label=32;break;}else{label=31;break;}
 case 31: 
 var $88=HEAP32[(($_pre_phi35)>>2)];
 var $89=$88;label=32;break;
 case 32: 
 var $89;
 var $90=(($89+$74)|0);
 HEAP32[(($__a_end)>>2)]=$90;
 var $__a_1=$89;label=36;break;
 case 33: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=35;break;
 case 34: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=35;break;
 case 35: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 36: 
 var $__a_1;
 var $92=(($33+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($33+16)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($93|0)==($95|0);
 if($96){label=37;break;}else{label=39;break;}
 case 37: 
 var $98=$33;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+36)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$101]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 38: 
 var $extract_t_i=(($102)&255);
 var $_0_i_off0_i=$extract_t_i;label=40;break;
 case 39: 
 var $104=HEAP8[($93)];
 var $_0_i_off0_i=$104;label=40;break;
 case 40: 
 var $_0_i_off0_i;
 var $106=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$0);
 var $107=($106|0)==0;
 if($107){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$51;label=44;break;}
 case 41: 
 var $109=HEAP32[(($92)>>2)];
 var $110=HEAP32[(($94)>>2)];
 var $111=($109|0)==($110|0);
 if($111){label=42;break;}else{label=43;break;}
 case 42: 
 var $113=$33;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+40)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i4=$33;label=6;break; } else { label=33;break; }
 case 43: 
 var $119=(($109+1)|0);
 HEAP32[(($92)>>2)]=$119;
 var $__a_0=$__a_1;var $_pre_i_i_i4=$33;label=6;break;
 case 44: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $121=$__grouping;
 var $122=HEAP8[($121)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=46;break;}else{label=45;break;}
 case 45: 
 var $126=(($__grouping+4)|0);
 var $127=HEAP32[(($126)>>2)];
 var $131=$127;label=47;break;
 case 46: 
 var $129=($122&255);
 var $130=$129>>>1;
 var $131=$130;label=47;break;
 case 47: 
 var $131;
 var $132=($131|0)==0;
 if($132){label=51;break;}else{label=48;break;}
 case 48: 
 var $134=HEAP8[($__in_units)];
 var $135=(($134<<24)>>24)==0;
 if($135){label=51;break;}else{label=49;break;}
 case 49: 
 var $137=HEAP32[(($__g_end)>>2)];
 var $138=$137;
 var $139=$__g;
 var $140=((($138)-($139))|0);
 var $141=($140|0)<160;
 if($141){label=50;break;}else{label=51;break;}
 case 50: 
 var $143=HEAP32[(($__dc)>>2)];
 var $144=(($137+4)|0);
 HEAP32[(($__g_end)>>2)]=$144;
 HEAP32[(($137)>>2)]=$143;
 label=51;break;
 case 51: 
 var $145=HEAP32[(($__a_end)>>2)];
 var $146=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$145,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=34;break; }
 case 52: 
 HEAPF64[(($__v)>>3)]=$146;
 var $148=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$148,$__err);
 var $149=($33|0)==0;
 if($149){var $163=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $151=(($33+12)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($33+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($152|0)==($154|0);
 if($155){label=54;break;}else{var $163=$33;label=57;break;}
 case 54: 
 var $156=$33;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+36)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=34;break; }
 case 55: 
 var $161=($160|0)==-1;
 if($161){label=56;break;}else{var $163=$33;label=57;break;}
 case 56: 
 HEAP32[(($13)>>2)]=0;
 var $163=0;label=57;break;
 case 57: 
 var $163;
 var $164=($163|0)==0;
 var $165=($_pre_i2_i_i|0)==0;
 if($165){label=63;break;}else{label=58;break;}
 case 58: 
 var $167=(($_pre_i2_i_i+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($_pre_i2_i_i+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=60;break;}else{label=59;break;}
 case 59: 
 if($164){label=66;break;}else{label=65;break;}
 case 60: 
 var $172=$_pre_i2_i_i;
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+36)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$175]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=34;break; }
 case 61: 
 var $177=($176|0)==-1;
 if($177){label=62;break;}else{label=64;break;}
 case 62: 
 HEAP32[(($14)>>2)]=0;
 label=63;break;
 case 63: 
 if($164){label=65;break;}else{label=66;break;}
 case 64: 
 var $179=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$164^$179;
 if($tmp_i_i){label=66;break;}else{label=65;break;}
 case 65: 
 var $181=HEAP32[(($__err)>>2)];
 var $182=$181|2;
 HEAP32[(($__err)>>2)]=$182;
 label=66;break;
 case 66: 
 var $184=(($agg_result)|0);
 HEAP32[(($184)>>2)]=$163;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(48);
 var $1=(sp)+(64);
 var $__buf=(sp)+(72);
 var $__a_end=(sp)+(88);
 var $__g=(sp)+(96);
 var $__g_end=(sp)+(256);
 var $__dc=(sp)+(264);
 var $this2_i_i_i=$__grouping;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=41;break; }
 case 2: 
 var $3=(($1)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((15376)>>2)];
 var $7=($6|0)==-1;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=15376;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$5,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=42;break; }
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((15380)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=6;break;}else{label=8;break;}
 case 6: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=42;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $29=$24;
 var $30=(($__atoms)|0);
 var $31=$24;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($29,11760,11786,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=42;break; }
 case 9: 
 var $36=HEAP32[(($3)>>2)];
 var $37=(($36)|0);
 var $38=__ZNSt3__114__shared_count16__release_sharedEv($37);
 var $this2_i_i_i6=$__buf;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=44;break; }
 case 10: 
 var $39=HEAP8[($this2_i_i_i6)];
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($__buf+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $48=$44;var $_pre_phi35=$_pre34;var $_pre_phi37=$43;label=13;break;
 case 12: 
 var $46=$__buf;
 var $47=(($46+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $48=$47;var $_pre_phi35=$47;var $_pre_phi37=$_pre36;label=13;break;
 case 13: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $48;
 HEAP32[(($__a_end)>>2)]=$48;
 var $49=$__g;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 var $50=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$50;
 HEAP32[(($__dc)>>2)]=0;
 var $51=(($__b)|0);
 var $52=(($__e)|0);
 var $53=(($__buf)|0);
 var $54=(($__buf+4)|0);
 var $_pre=HEAP32[(($51)>>2)];
 var $__a_0=$48;var $_pre_i_i_i9=$_pre;label=14;break;
 case 14: 
 var $_pre_i_i_i9;
 var $__a_0;
 var $55=($_pre_i_i_i9|0)==0;
 if($55){var $69=0;label=19;break;}else{label=15;break;}
 case 15: 
 var $57=(($_pre_i_i_i9+12)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($_pre_i_i_i9+16)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($58|0)==($60|0);
 if($61){label=16;break;}else{var $69=$_pre_i_i_i9;label=19;break;}
 case 16: 
 var $62=$_pre_i_i_i9;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+36)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($_pre_i_i_i9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=43;break; }
 case 17: 
 var $67=($66|0)==-1;
 if($67){label=18;break;}else{var $69=$_pre_i_i_i9;label=19;break;}
 case 18: 
 HEAP32[(($51)>>2)]=0;
 var $69=0;label=19;break;
 case 19: 
 var $69;
 var $70=($69|0)==0;
 var $71=HEAP32[(($52)>>2)];
 var $72=($71|0)==0;
 if($72){label=25;break;}else{label=20;break;}
 case 20: 
 var $74=(($71+12)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($71+16)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($75|0)==($77|0);
 if($78){label=22;break;}else{label=21;break;}
 case 21: 
 if($70){label=27;break;}else{var $__a_2=$__a_0;label=54;break;}
 case 22: 
 var $79=$71;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+36)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=43;break; }
 case 23: 
 var $84=($83|0)==-1;
 if($84){label=24;break;}else{label=26;break;}
 case 24: 
 HEAP32[(($52)>>2)]=0;
 label=25;break;
 case 25: 
 if($70){var $__a_2=$__a_0;label=54;break;}else{label=27;break;}
 case 26: 
 if($70){label=27;break;}else{var $__a_2=$__a_0;label=54;break;}
 case 27: 
 var $87=HEAP32[(($__a_end)>>2)];
 var $88=$87;
 var $89=$__a_0;
 var $90=((($88)-($89))|0);
 var $91=HEAP8[($this2_i_i_i6)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){label=29;break;}else{label=28;break;}
 case 28: 
 var $95=HEAP32[(($54)>>2)];
 var $99=$95;label=30;break;
 case 29: 
 var $97=($91&255);
 var $98=$97>>>1;
 var $99=$98;label=30;break;
 case 30: 
 var $99;
 var $100=($90|0)==($99|0);
 if($100){label=31;break;}else{var $__a_1=$__a_0;label=46;break;}
 case 31: 
 if($93){label=33;break;}else{label=32;break;}
 case 32: 
 var $103=HEAP32[(($54)>>2)];
 var $110=$103;var $109=$103;label=34;break;
 case 33: 
 var $105=($91&255);
 var $106=$105>>>1;
 var $107=($91&255);
 var $108=$107>>>1;
 var $110=$108;var $109=$106;label=34;break;
 case 34: 
 var $109;
 var $110;
 var $111=$110<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$111,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=43;break; }
 case 35: 
 var $112=HEAP8[($this2_i_i_i6)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($114){var $118=10;label=37;break;}else{label=36;break;}
 case 36: 
 var $116=HEAP32[(($53)>>2)];
 var $117=$116&-2;
 var $phitmp_i22=((($117)-(1))|0);
 var $118=$phitmp_i22;label=37;break;
 case 37: 
 var $118;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$118,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=43;break; }
 case 38: 
 var $119=HEAP8[($this2_i_i_i6)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 if($121){var $124=$_pre_phi35;label=40;break;}else{label=39;break;}
 case 39: 
 var $123=HEAP32[(($_pre_phi37)>>2)];
 var $124=$123;label=40;break;
 case 40: 
 var $124;
 var $125=(($124+$109)|0);
 HEAP32[(($__a_end)>>2)]=$125;
 var $__a_1=$124;label=46;break;
 case 41: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $_0=$128;var $_01=$129;label=77;break;
 case 42: 
 var $131$0 = ___cxa_find_matching_catch(-1, -1); var $131$1 = tempRet0;
 var $132=$131$0;
 var $133=$131$1;
 var $134=HEAP32[(($3)>>2)];
 var $135=(($134)|0);
 var $136=__ZNSt3__114__shared_count16__release_sharedEv($135);
 var $_0=$132;var $_01=$133;label=77;break;
 case 43: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=45;break;
 case 44: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=45;break;
 case 45: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $137=$eh_lpad_body$0;
 var $138=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $_0=$137;var $_01=$138;label=77;break;
 case 46: 
 var $__a_1;
 var $139=(($69+12)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(($69+16)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=($140|0)==($142|0);
 if($143){label=47;break;}else{label=49;break;}
 case 47: 
 var $145=$69;
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+36)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$148]($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=43;break; }
 case 48: 
 var $extract_t_i=(($149)&255);
 var $_0_i_off0_i=$extract_t_i;label=50;break;
 case 49: 
 var $151=HEAP8[($140)];
 var $_0_i_off0_i=$151;label=50;break;
 case 50: 
 var $_0_i_off0_i;
 var $153=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i,16,$__a_1,$__a_end,$__dc,0,$__grouping,$50,$__g_end,$30);
 var $154=($153|0)==0;
 if($154){label=51;break;}else{var $__a_2=$__a_1;label=54;break;}
 case 51: 
 var $156=HEAP32[(($139)>>2)];
 var $157=HEAP32[(($141)>>2)];
 var $158=($156|0)==($157|0);
 if($158){label=52;break;}else{label=53;break;}
 case 52: 
 var $160=$69;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+40)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i9=$69;label=14;break; } else { label=43;break; }
 case 53: 
 var $166=(($156+1)|0);
 HEAP32[(($139)>>2)]=$166;
 var $__a_0=$__a_1;var $_pre_i_i_i9=$69;label=14;break;
 case 54: 
 var $__a_2;
 var $168=(($__a_2+3)|0);
 HEAP8[($168)]=0;
 var $169=HEAP8[(15936)];
 var $170=(($169<<24)>>24)==0;
 if($170){label=55;break;}else{label=59;break;}
 case 55: 
 var $172=___cxa_guard_acquire(15936);
 var $173=($172|0)==0;
 if($173){label=59;break;}else{label=56;break;}
 case 56: 
 var $175=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=58;break; }
 case 57: 
 HEAP32[((13832)>>2)]=$175;

 label=59;break;
 case 58: 
 var $178$0 = ___cxa_find_matching_catch(-1, -1); var $178$1 = tempRet0;

 var $eh_lpad_body$1=$178$1;var $eh_lpad_body$0=$178$0;label=45;break;
 case 59: 
 var $180=HEAP32[((13832)>>2)];
 var $181=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$180,2296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=60;break; } else { label=44;break; }
 case 60: 
 var $183=($181|0)==1;
 if($183){label=62;break;}else{label=61;break;}
 case 61: 
 HEAP32[(($__err)>>2)]=4;
 label=62;break;
 case 62: 
 var $186=HEAP32[(($51)>>2)];
 var $187=($186|0)==0;
 if($187){var $201=0;label=67;break;}else{label=63;break;}
 case 63: 
 var $189=(($186+12)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(($186+16)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=($190|0)==($192|0);
 if($193){label=64;break;}else{var $201=$186;label=67;break;}
 case 64: 
 var $194=$186;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+36)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($186) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=44;break; }
 case 65: 
 var $199=($198|0)==-1;
 if($199){label=66;break;}else{var $201=$186;label=67;break;}
 case 66: 
 HEAP32[(($51)>>2)]=0;
 var $201=0;label=67;break;
 case 67: 
 var $201;
 var $202=($201|0)==0;
 var $203=HEAP32[(($52)>>2)];
 var $204=($203|0)==0;
 if($204){label=73;break;}else{label=68;break;}
 case 68: 
 var $206=(($203+12)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=(($203+16)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($207|0)==($209|0);
 if($210){label=70;break;}else{label=69;break;}
 case 69: 
 if($202){label=76;break;}else{label=75;break;}
 case 70: 
 var $211=$203;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=44;break; }
 case 71: 
 var $216=($215|0)==-1;
 if($216){label=72;break;}else{label=74;break;}
 case 72: 
 HEAP32[(($52)>>2)]=0;
 label=73;break;
 case 73: 
 if($202){label=75;break;}else{label=76;break;}
 case 74: 
 var $218=($203|0)==0;
 var $tmp_i_i=$202^$218;
 if($tmp_i_i){label=76;break;}else{label=75;break;}
 case 75: 
 var $220=HEAP32[(($__err)>>2)];
 var $221=$220|2;
 HEAP32[(($__err)>>2)]=$221;
 label=76;break;
 case 76: 
 var $223=(($agg_result)|0);
 HEAP32[(($223)>>2)]=$201;
 var $$etemp$3$0=160;
 var $$etemp$3$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
 case 77: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $225$0=$_0;
 var $225$1=0;
 var $226$0=$225$0;
 var $226$1=$_01;
 ___resumeException($226$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+24)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==(($__ct<<24)>>24);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+25)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)==(($__ct<<24)>>24);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($__grouping+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $25=$21;label=8;break;
 case 7: 
 var $23=($16&255);
 var $24=$23>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_0=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 11: 
 var $38=(($__atoms+26)|0);
 var $_01_i=$__atoms;label=13;break;
 case 12: 
 var $40=($44|0)==($38|0);
 if($40){var $_0_lcssa_i=$38;label=14;break;}else{var $_01_i=$44;label=13;break;}
 case 13: 
 var $_01_i;
 var $42=HEAP8[($_01_i)];
 var $43=(($42<<24)>>24)==(($__ct<<24)>>24);
 var $44=(($_01_i+1)|0);
 if($43){var $_0_lcssa_i=$_01_i;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa_i;
 var $45=$_0_lcssa_i;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=($47|0)>23;
 if($48){var $_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $51=($47|0)<($__base|0);
 if($51){label=22;break;}else{var $_0=-1;label=23;break;}
 case 17: 
 var $53=($47|0)<22;
 if($53){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $56=$1;
 var $57=$__a;
 var $58=((($56)-($57))|0);
 var $59=($58|0)<3;
 if($59){label=20;break;}else{var $_0=-1;label=23;break;}
 case 20: 
 var $61=((($1)-(1))|0);
 var $62=HEAP8[($61)];
 var $63=(($62<<24)>>24)==48;
 if($63){label=21;break;}else{var $_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $65=((11760+$47)|0);
 var $66=HEAP8[($65)];
 var $67=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$67;
 HEAP8[($1)]=$66;
 var $_0=0;label=23;break;
 case 22: 
 var $69=((11760+$47)|0);
 var $70=HEAP8[($69)];
 var $71=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$71;
 HEAP8[($1)]=$70;
 var $72=HEAP32[(($__dc)>>2)];
 var $73=((($72)+(1))|0);
 HEAP32[(($__dc)>>2)]=$73;
 var $_0=0;label=23;break;
 case 23: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsscanf($__s,$__format,$1);

 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 ___clang_call_terminate($10);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i4=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $__names=(sp)+(80);
 var $6=(sp)+(104);
 var $7=(($__iob+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $12=$this;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($__b)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($3)|0);
 HEAP32[(($21)>>2)]=$20;
 FUNCTION_TABLE[$15]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $22=(($1)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($16)>>2)]=$23;
 var $24=HEAP32[(($__lv)>>2)];
 if(($24|0)==0){ label=3;break;}else if(($24|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$23;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 var $31=(($4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $34=HEAP32[((15368)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $37=(($__p_i_i_i_i)|0);
 HEAP32[(($37)>>2)]=15368;
 var $38=(($__p_i_i_i_i+4)|0);
 HEAP32[(($38)>>2)]=(26);
 var $39=(($__p_i_i_i_i+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$33,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $40=HEAP32[((15372)>>2)];
 var $41=((($40)-(1))|0);
 var $42=(($32+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($32+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=10;break;}else{label=11;break;}
 case 10: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=11;break;}else{label=13;break;}
 case 11: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $57=$52;
 var $58=HEAP32[(($31)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 __ZNKSt3__18ios_base6getlocEv($5,$__iob);
 var $61=(($5)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$__p_i_i_i_i4;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $64=HEAP32[((14984)>>2)];
 var $65=($64|0)==-1;
 if($65){label=15;break;}else{label=14;break;}
 case 14: 
 var $67=(($__p_i_i_i_i4)|0);
 HEAP32[(($67)>>2)]=14984;
 var $68=(($__p_i_i_i_i4+4)|0);
 HEAP32[(($68)>>2)]=(26);
 var $69=(($__p_i_i_i_i4+8)|0);
 HEAP32[(($69)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14984,$63,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $70=HEAP32[((14988)>>2)];
 var $71=((($70)-(1))|0);
 var $72=(($62+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($62+8)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$73;
 var $77=$75;
 var $78=((($76)-($77))|0);
 var $79=$78>>2;
 var $80=($79>>>0)>($71>>>0);
 if($80){label=16;break;}else{label=17;break;}
 case 16: 
 var $81=(($75+($71<<2))|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)==0;
 if($83){label=17;break;}else{label=19;break;}
 case 17: 
 var $84=___cxa_allocate_exception(4);
 var $85=$84;
 __ZNSt8bad_castC2Ev($85);
 (function() { try { __THREW__ = 0; return ___cxa_throw($84,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $87=$82;
 var $88=HEAP32[(($61)>>2)];
 var $89=(($88)|0);
 var $90=__ZNSt3__114__shared_count16__release_sharedEv($89);
 var $91=(($__names)|0);
 var $92=$82;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+24)|0);
 var $95=HEAP32[(($94)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($91,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $_02=$91;label=25;break; }
 case 20: 
 var $96=(($__names+12)|0);
 var $97=HEAP32[(($92)>>2)];
 var $98=(($97+28)|0);
 var $99=HEAP32[(($98)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]($96,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $_02=$96;label=25;break; }
 case 21: 
 var $100=(($__e)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($6)|0);
 HEAP32[(($102)>>2)]=$101;
 var $103=(($__names+24)|0);
 var $104=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$91,$103,$57,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $105=($104|0)==($91|0);
 var $106=($105&1);
 HEAP8[($__v)]=$106;
 var $107=(($__b)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($agg_result)|0);
 HEAP32[(($109)>>2)]=$108;
 var $110=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($110);
 var $111=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($111);
 label=28;break;
 case 23: 
 var $113$0 = ___cxa_find_matching_catch(-1, -1); var $113$1 = tempRet0;
 var $114=$113$0;
 var $115=$113$1;
 var $116=HEAP32[(($31)>>2)];
 var $117=(($116)|0);
 var $118=__ZNSt3__114__shared_count16__release_sharedEv($117);
 var $_0=$114;var $_01=$115;label=29;break;
 case 24: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1); var $120$1 = tempRet0;
 var $121=$120$0;
 var $122=$120$1;
 var $123=HEAP32[(($61)>>2)];
 var $124=(($123)|0);
 var $125=__ZNSt3__114__shared_count16__release_sharedEv($124);
 var $_0=$121;var $_01=$122;label=29;break;
 case 25: 
 var $_02;
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $130=($91|0)==($_02|0);
 if($130){var $_0=$128;var $_01=$129;label=29;break;}else{var $131=$_02;label=26;break;}
 case 26: 
 var $131;
 var $132=((($131)-(12))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($132);
 var $133=($132|0)==($91|0);
 if($133){var $_0=$128;var $_01=$129;label=29;break;}else{var $131=$132;label=26;break;}
 case 27: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($136);
 var $137=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($137);
 var $138=$134$1;
 var $_0=$135;var $_01=$138;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $_01;
 var $_0;
 var $140$0=$_0;
 var $140$1=0;
 var $141$0=$140$0;
 var $141$1=$_01;
 ___resumeException($141$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $18=0;label=12;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $18=$8;label=12;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $18=0;label=12;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $17$1=$11$1;var $17$0=$11$0;label=11;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit55$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit55$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit55$1;var $lpad_phi$0=$lpad_nonloopexit55$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $12=($18|0)==0;
 if($12){var $17$1=$lpad_phi$1;var $17$0=$lpad_phi$0;label=11;break;}else{label=9;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return _free($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $17$1=$lpad_phi$1;var $17$0=$lpad_phi$0;label=11;break; } else { label=10;break; }
 case 10: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 var $16=$15$0;
 ___clang_call_terminate($16);
 throw "Reached an unreachable!";
 case 11: 
 var $17$0;
 var $17$1;
 ___resumeException($17$0)
 case 12: 
 var $18;
 var $__status_0;
 var $19=($__kb|0)==($__ke|0);
 if($19){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=13;break;}else{var $__n_might_match_065=$4;var $__n_does_match_066=0;var $__st_067=$__status_0;var $__ky_068=$__kb;label=14;break;}
 case 13: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=21;break;
 case 14: 
 var $__ky_068;
 var $__st_067;
 var $__n_does_match_066;
 var $__n_might_match_065;
 var $23=$__ky_068;
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=16;break;}else{label=15;break;}
 case 15: 
 var $28=(($__ky_068+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $33=$29;label=17;break;
 case 16: 
 var $31=($24&255);
 var $32=$31>>>1;
 var $33=$32;label=17;break;
 case 17: 
 var $33;
 var $34=($33|0)==0;
 if($34){label=19;break;}else{label=18;break;}
 case 18: 
 HEAP8[($__st_067)]=1;
 var $__n_does_match_1=$__n_does_match_066;var $__n_might_match_1=$__n_might_match_065;label=20;break;
 case 19: 
 HEAP8[($__st_067)]=2;
 var $37=((($__n_might_match_065)-(1))|0);
 var $38=((($__n_does_match_066)+(1))|0);
 var $__n_does_match_1=$38;var $__n_might_match_1=$37;label=20;break;
 case 20: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $40=(($__ky_068+12)|0);
 var $41=(($__st_067+1)|0);
 var $42=($40|0)==($__ke|0);
 if($42){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=13;break;}else{var $__n_might_match_065=$__n_might_match_1;var $__n_does_match_066=$__n_does_match_1;var $__st_067=$41;var $__ky_068=$40;label=14;break;}
 case 21: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $43=HEAP32[(($20)>>2)];
 var $44=($43|0)==0;
 if($44){var $61=1;label=28;break;}else{label=22;break;}
 case 22: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=23;break;}else{label=24;break;}
 case 23: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$56;label=25;break; } else { label=6;break; }
 case 24: 
 var $58=HEAP32[(($47)>>2)];
 var $_0_i_i_i_i=$58;label=25;break;
 case 25: 
 var $_0_i_i_i_i;
 var $59=($_0_i_i_i_i|0)==-1;
 if($59){label=27;break;}else{label=26;break;}
 case 26: 
 var $_pre_i_i_i=HEAP32[(($20)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $61=$phitmp_i_i_i;label=28;break;
 case 27: 
 HEAP32[(($20)>>2)]=0;
 var $61=1;label=28;break;
 case 28: 
 var $61;
 var $62=HEAP32[(($21)>>2)];
 var $63=($62|0)==0;
 if($63){var $80=1;var $_pre_i3_i_i19=0;label=34;break;}else{label=29;break;}
 case 29: 
 var $65=(($62+12)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($62+16)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($66|0)==($68|0);
 if($69){label=30;break;}else{label=31;break;}
 case 30: 
 var $71=$62;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+36)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$74]($62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$75;label=32;break; } else { label=6;break; }
 case 31: 
 var $77=HEAP32[(($66)>>2)];
 var $_0_i_i1_i_i=$77;label=32;break;
 case 32: 
 var $_0_i_i1_i_i;
 var $78=($_0_i_i1_i_i|0)==-1;
 if($78){label=33;break;}else{var $80=0;var $_pre_i3_i_i19=$62;label=34;break;}
 case 33: 
 HEAP32[(($21)>>2)]=0;
 var $80=1;var $_pre_i3_i_i19=0;label=34;break;
 case 34: 
 var $_pre_i3_i_i19;
 var $80;
 var $tmp_i_i=$61^$80;
 var $81=($__n_might_match_2|0)!=0;
 var $_=$tmp_i_i&$81;
 var $82=HEAP32[(($20)>>2)];
 if($_){label=35;break;}else{label=81;break;}
 case 35: 
 var $84=(($82+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($82+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=36;break;}else{label=37;break;}
 case 36: 
 var $90=$82;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$94;label=38;break; } else { label=6;break; }
 case 37: 
 var $96=HEAP32[(($85)>>2)];
 var $_0_i_i=$96;label=38;break;
 case 38: 
 var $_0_i_i;
 if($__case_sensitive){var $__c_0=$_0_i_i;label=40;break;}else{label=39;break;}
 case 39: 
 var $98=HEAP32[(($22)>>2)];
 var $99=(($98+28)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($__ct,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$101;label=40;break; } else { label=6;break; }
 case 40: 
 var $__c_0;
 var $_pre=((($__indx_0)+(1))|0);
 if($19){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_2;var $__n_might_match_2=$__n_might_match_2;label=21;break;}else{label=41;break;}
 case 41: 
 if($__case_sensitive){var $__n_might_match_335_us=$__n_might_match_2;var $__n_does_match_336_us=$__n_does_match_2;var $__st_137_us=$__status_0;var $__consume_0_off039_us=0;var $__ky1_040_us=$__kb;label=42;break;}else{var $__n_might_match_335=$__n_might_match_2;var $__n_does_match_336=$__n_does_match_2;var $__st_137=$__status_0;var $__consume_0_off039=0;var $__ky1_040=$__kb;label=55;break;}
 case 42: 
 var $__ky1_040_us;
 var $__consume_0_off039_us;
 var $__st_137_us;
 var $__n_does_match_336_us;
 var $__n_might_match_335_us;
 var $102=HEAP8[($__st_137_us)];
 var $103=(($102<<24)>>24)==1;
 if($103){label=43;break;}else{var $__consume_1_off0_us=$__consume_0_off039_us;var $__n_does_match_4_us=$__n_does_match_336_us;var $__n_might_match_4_us=$__n_might_match_335_us;label=53;break;}
 case 43: 
 var $105=$__ky1_040_us;
 var $106=HEAP8[($105)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=45;break;}else{label=44;break;}
 case 44: 
 var $110=(($__ky1_040_us+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $114=$111;label=46;break;
 case 45: 
 var $113=(($__ky1_040_us+4)|0);
 var $114=$113;label=46;break;
 case 46: 
 var $114;
 var $115=(($114+($__indx_0<<2))|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($__c_0|0)==($116|0);
 if($117){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP8[($__st_137_us)]=0;
 var $119=((($__n_might_match_335_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off039_us;var $__n_does_match_4_us=$__n_does_match_336_us;var $__n_might_match_4_us=$119;label=53;break;
 case 48: 
 if($108){label=50;break;}else{label=49;break;}
 case 49: 
 var $122=(($__ky1_040_us+4)|0);
 var $123=HEAP32[(($122)>>2)];
 var $127=$123;label=51;break;
 case 50: 
 var $125=($106&255);
 var $126=$125>>>1;
 var $127=$126;label=51;break;
 case 51: 
 var $127;
 var $128=($127|0)==($_pre|0);
 if($128){label=52;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_336_us;var $__n_might_match_4_us=$__n_might_match_335_us;label=53;break;}
 case 52: 
 HEAP8[($__st_137_us)]=2;
 var $130=((($__n_might_match_335_us)-(1))|0);
 var $131=((($__n_does_match_336_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$131;var $__n_might_match_4_us=$130;label=53;break;
 case 53: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $133=(($__ky1_040_us+12)|0);
 var $134=($133|0)==($__ke|0);
 if($134){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=69;break;}else{label=54;break;}
 case 54: 
 var $135=(($__st_137_us+1)|0);
 var $__n_might_match_335_us=$__n_might_match_4_us;var $__n_does_match_336_us=$__n_does_match_4_us;var $__st_137_us=$135;var $__consume_0_off039_us=$__consume_1_off0_us;var $__ky1_040_us=$133;label=42;break;
 case 55: 
 var $__ky1_040;
 var $__consume_0_off039;
 var $__st_137;
 var $__n_does_match_336;
 var $__n_might_match_335;
 var $136=HEAP8[($__st_137)];
 var $137=(($136<<24)>>24)==1;
 if($137){label=56;break;}else{var $__consume_1_off0=$__consume_0_off039;var $__n_does_match_4=$__n_does_match_336;var $__n_might_match_4=$__n_might_match_335;label=67;break;}
 case 56: 
 var $139=$__ky1_040;
 var $140=HEAP8[($139)];
 var $141=$140&1;
 var $142=(($141<<24)>>24)==0;
 if($142){label=58;break;}else{label=57;break;}
 case 57: 
 var $144=(($__ky1_040+8)|0);
 var $145=HEAP32[(($144)>>2)];
 var $149=$145;label=59;break;
 case 58: 
 var $147=(($__ky1_040+4)|0);
 var $149=$147;label=59;break;
 case 59: 
 var $149;
 var $150=(($149+($__indx_0<<2))|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=HEAP32[(($22)>>2)];
 var $153=(($152+28)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$154]($__ct,$151) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=5;break; }
 case 60: 
 var $156=($__c_0|0)==($155|0);
 if($156){label=61;break;}else{label=66;break;}
 case 61: 
 var $158=HEAP8[($139)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=63;break;}else{label=62;break;}
 case 62: 
 var $162=(($__ky1_040+4)|0);
 var $163=HEAP32[(($162)>>2)];
 var $167=$163;label=64;break;
 case 63: 
 var $165=($158&255);
 var $166=$165>>>1;
 var $167=$166;label=64;break;
 case 64: 
 var $167;
 var $168=($167|0)==($_pre|0);
 if($168){label=65;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_336;var $__n_might_match_4=$__n_might_match_335;label=67;break;}
 case 65: 
 HEAP8[($__st_137)]=2;
 var $170=((($__n_might_match_335)-(1))|0);
 var $171=((($__n_does_match_336)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$171;var $__n_might_match_4=$170;label=67;break;
 case 66: 
 HEAP8[($__st_137)]=0;
 var $173=((($__n_might_match_335)-(1))|0);
 var $__consume_1_off0=$__consume_0_off039;var $__n_does_match_4=$__n_does_match_336;var $__n_might_match_4=$173;label=67;break;
 case 67: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $175=(($__ky1_040+12)|0);
 var $176=($175|0)==($__ke|0);
 if($176){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=69;break;}else{label=68;break;}
 case 68: 
 var $177=(($__st_137+1)|0);
 var $__n_might_match_335=$__n_might_match_4;var $__n_does_match_336=$__n_does_match_4;var $__st_137=$177;var $__consume_0_off039=$__consume_1_off0;var $__ky1_040=$175;label=55;break;
 case 69: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=70;break;}else{var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}
 case 70: 
 var $179=HEAP32[(($20)>>2)];
 var $180=(($179+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($179+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=71;break;}else{label=72;break;}
 case 71: 
 var $186=$179;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+40)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=6;break; }
 case 72: 
 var $192=(($181+4)|0);
 HEAP32[(($180)>>2)]=$192;
 label=73;break;
 case 73: 
 var $193=((($__n_might_match_3_lcssa)+($__n_does_match_3_lcssa))|0);
 var $_not=($193>>>0)<2;
 if($_not){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}else{var $__n_does_match_549=$__n_does_match_3_lcssa;var $__st_250=$__status_0;var $__ky2_051=$__kb;label=74;break;}
 case 74: 
 var $__ky2_051;
 var $__st_250;
 var $__n_does_match_549;
 var $194=HEAP8[($__st_250)];
 var $195=(($194<<24)>>24)==2;
 if($195){label=75;break;}else{var $__n_does_match_6=$__n_does_match_549;label=80;break;}
 case 75: 
 var $197=$__ky2_051;
 var $198=HEAP8[($197)];
 var $199=$198&1;
 var $200=(($199<<24)>>24)==0;
 if($200){label=77;break;}else{label=76;break;}
 case 76: 
 var $202=(($__ky2_051+4)|0);
 var $203=HEAP32[(($202)>>2)];
 var $207=$203;label=78;break;
 case 77: 
 var $205=($198&255);
 var $206=$205>>>1;
 var $207=$206;label=78;break;
 case 78: 
 var $207;
 var $208=($207|0)==($_pre|0);
 if($208){var $__n_does_match_6=$__n_does_match_549;label=80;break;}else{label=79;break;}
 case 79: 
 HEAP8[($__st_250)]=0;
 var $210=((($__n_does_match_549)-(1))|0);
 var $__n_does_match_6=$210;label=80;break;
 case 80: 
 var $__n_does_match_6;
 var $212=(($__ky2_051+12)|0);
 var $213=(($__st_250+1)|0);
 var $214=($212|0)==($__ke|0);
 if($214){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_6;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}else{var $__n_does_match_549=$__n_does_match_6;var $__st_250=$213;var $__ky2_051=$212;label=74;break;}
 case 81: 
 var $216=($82|0)==0;
 if($216){var $233=1;label=88;break;}else{label=82;break;}
 case 82: 
 var $218=(($82+12)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(($82+16)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($219|0)==($221|0);
 if($222){label=83;break;}else{label=84;break;}
 case 83: 
 var $224=$82;
 var $225=HEAP32[(($224)>>2)];
 var $226=(($225+36)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$227]($82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i11=$228;label=85;break; } else { label=7;break; }
 case 84: 
 var $230=HEAP32[(($219)>>2)];
 var $_0_i_i_i_i11=$230;label=85;break;
 case 85: 
 var $_0_i_i_i_i11;
 var $231=($_0_i_i_i_i11|0)==-1;
 if($231){label=87;break;}else{label=86;break;}
 case 86: 
 var $_pre_i_i_i13=HEAP32[(($20)>>2)];
 var $phitmp_i_i_i14=($_pre_i_i_i13|0)==0;
 var $233=$phitmp_i_i_i14;label=88;break;
 case 87: 
 HEAP32[(($20)>>2)]=0;
 var $233=1;label=88;break;
 case 88: 
 var $233;
 var $234=($_pre_i3_i_i19|0)==0;
 if($234){label=94;break;}else{label=89;break;}
 case 89: 
 var $236=(($_pre_i3_i_i19+12)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($_pre_i3_i_i19+16)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=($237|0)==($239|0);
 if($240){label=90;break;}else{label=91;break;}
 case 90: 
 var $242=$_pre_i3_i_i19;
 var $243=HEAP32[(($242)>>2)];
 var $244=(($243+36)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$245]($_pre_i3_i_i19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i17=$246;label=92;break; } else { label=7;break; }
 case 91: 
 var $248=HEAP32[(($237)>>2)];
 var $_0_i_i1_i_i17=$248;label=92;break;
 case 92: 
 var $_0_i_i1_i_i17;
 var $249=($_0_i_i1_i_i17|0)==-1;
 if($249){label=93;break;}else{label=95;break;}
 case 93: 
 HEAP32[(($21)>>2)]=0;
 label=94;break;
 case 94: 
 if($233){label=96;break;}else{label=97;break;}
 case 95: 
 if($233){label=97;break;}else{label=96;break;}
 case 96: 
 var $252=HEAP32[(($__err)>>2)];
 var $253=$252|2;
 HEAP32[(($__err)>>2)]=$253;
 label=97;break;
 case 97: 
 if($19){label=101;break;}else{label=98;break;}
 case 98: 
 var $254=HEAP8[($__status_0)];
 var $255=(($254<<24)>>24)==2;
 if($255){var $_028=$__kb;label=102;break;}else{var $_03082=$__kb;var $__st_32983=$__status_0;label=100;break;}
 case 99: 
 var $256=HEAP8[($260)];
 var $257=(($256<<24)>>24)==2;
 if($257){var $_028=$258;label=102;break;}else{var $_03082=$258;var $__st_32983=$260;label=100;break;}
 case 100: 
 var $__st_32983;
 var $_03082;
 var $258=(($_03082+12)|0);
 var $259=($258|0)==($__ke|0);
 var $260=(($__st_32983+1)|0);
 if($259){label=101;break;}else{label=99;break;}
 case 101: 
 var $261=HEAP32[(($__err)>>2)];
 var $262=$261|4;
 HEAP32[(($__err)>>2)]=$262;
 var $_028=$__ke;label=102;break;
 case 102: 
 var $_028;
 var $263=($18|0)==0;
 if($263){label=105;break;}else{label=103;break;}
 case 103: 
 (function() { try { __THREW__ = 0; return _free($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=104;break; }
 case 104: 
 var $266$0 = ___cxa_find_matching_catch(-1, -1,0); var $266$1 = tempRet0;
 var $267=$266$0;
 ___clang_call_terminate($267);
 throw "Reached an unreachable!";
 case 105: 
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_028;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}



function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre32=$__buf;
 var $_pre33=(($_pre32+1)|0);
 var $18=$14;var $_pre_phi34=$_pre33;var $_pre_phi36=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre35=(($__buf+8)|0);
 var $18=$17;var $_pre_phi34=$17;var $_pre_phi36=$_pre35;label=9;break;
 case 9: 
 var $_pre_phi36;
 var $_pre_phi34;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $26=($_pre_i_i_i5|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i5+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i5+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i5;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i3=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i3;
 var $41=($_0_i_i_i_i3|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i5;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i9=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i9;
 var $61=($_0_i_i1_i_i9|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $64=0;label=24;break;}
 case 23: 
 if($44){var $64=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $64;
 var $65=HEAP32[(($__a_end)>>2)];
 var $66=$65;
 var $67=$__a_0;
 var $68=((($66)-($67))|0);
 var $69=HEAP8[($this2_i_i_i)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=26;break;}else{label=25;break;}
 case 25: 
 var $73=HEAP32[(($24)>>2)];
 var $77=$73;label=27;break;
 case 26: 
 var $75=($69&255);
 var $76=$75>>>1;
 var $77=$76;label=27;break;
 case 27: 
 var $77;
 var $78=($68|0)==($77|0);
 if($78){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($71){label=30;break;}else{label=29;break;}
 case 29: 
 var $81=HEAP32[(($24)>>2)];
 var $88=$81;var $87=$81;label=31;break;
 case 30: 
 var $83=($69&255);
 var $84=$83>>>1;
 var $85=($69&255);
 var $86=$85>>>1;
 var $88=$86;var $87=$84;label=31;break;
 case 31: 
 var $87;
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($23)>>2)];
 var $95=$94&-2;
 var $phitmp_i23=((($95)-(1))|0);
 var $96=$phitmp_i23;label=34;break;
 case 34: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$96,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $97=HEAP8[($this2_i_i_i)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi34;label=37;break;}else{label=36;break;}
 case 36: 
 var $101=HEAP32[(($_pre_phi36)>>2)];
 var $102=$101;label=37;break;
 case 37: 
 var $102;
 var $103=(($102+$87)|0);
 HEAP32[(($__a_end)>>2)]=$103;
 var $__a_1=$102;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $105=(($43+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($43+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=42;break;}else{label=43;break;}
 case 42: 
 var $111=$43;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$115;label=44;break; } else { label=38;break; }
 case 43: 
 var $117=HEAP32[(($106)>>2)];
 var $_0_i_i=$117;label=44;break;
 case 44: 
 var $_0_i_i;
 var $119=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $120=($119|0)==0;
 if($120){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$64;label=48;break;}
 case 45: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=46;break;}else{label=47;break;}
 case 46: 
 var $126=$43;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $132=(($122+4)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=50;break;}else{label=49;break;}
 case 49: 
 var $139=(($__grouping+4)|0);
 var $140=HEAP32[(($139)>>2)];
 var $144=$140;label=51;break;
 case 50: 
 var $142=($135&255);
 var $143=$142>>>1;
 var $144=$143;label=51;break;
 case 51: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=54;break;}else{label=52;break;}
 case 52: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=53;break;}else{label=54;break;}
 case 53: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=54;break;
 case 54: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$20,$158,$__err);
 var $159=($43|0)==0;
 if($159){var $177=1;var $176=0;label=61;break;}else{label=56;break;}
 case 56: 
 var $161=(($43+12)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($43+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($162|0)==($164|0);
 if($165){label=57;break;}else{label=58;break;}
 case 57: 
 var $167=$43;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$171;label=59;break; } else { label=39;break; }
 case 58: 
 var $173=HEAP32[(($162)>>2)];
 var $_0_i_i_i_i=$173;label=59;break;
 case 59: 
 var $_0_i_i_i_i;
 var $174=($_0_i_i_i_i|0)==-1;
 if($174){label=60;break;}else{var $177=0;var $176=$43;label=61;break;}
 case 60: 
 HEAP32[(($21)>>2)]=0;
 var $177=1;var $176=0;label=61;break;
 case 61: 
 var $176;
 var $177;
 var $178=($_pre_i3_i_i|0)==0;
 if($178){label=67;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i3_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i3_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=63;break;}else{label=64;break;}
 case 63: 
 var $186=$_pre_i3_i_i;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$190;label=65;break; } else { label=39;break; }
 case 64: 
 var $192=HEAP32[(($181)>>2)];
 var $_0_i_i1_i_i=$192;label=65;break;
 case 65: 
 var $_0_i_i1_i_i;
 var $193=($_0_i_i1_i_i|0)==-1;
 if($193){label=66;break;}else{label=68;break;}
 case 66: 
 HEAP32[(($22)>>2)]=0;
 label=67;break;
 case 67: 
 if($177){label=69;break;}else{label=70;break;}
 case 68: 
 if($177){label=70;break;}else{label=69;break;}
 case 69: 
 var $196=HEAP32[(($__err)>>2)];
 var $197=$196|2;
 HEAP32[(($__err)>>2)]=$197;
 label=70;break;
 case 70: 
 var $199=(($agg_result)|0);
 HEAP32[(($199)>>2)]=$176;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=104;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre32=$__buf;
 var $_pre33=(($_pre32+1)|0);
 var $18=$14;var $_pre_phi34=$_pre33;var $_pre_phi36=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre35=(($__buf+8)|0);
 var $18=$17;var $_pre_phi34=$17;var $_pre_phi36=$_pre35;label=9;break;
 case 9: 
 var $_pre_phi36;
 var $_pre_phi34;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $26=($_pre_i_i_i5|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i5+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i5+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i5;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i3=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i3;
 var $41=($_0_i_i_i_i3|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i5;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i9=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i9;
 var $61=($_0_i_i1_i_i9|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $64=0;label=24;break;}
 case 23: 
 if($44){var $64=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $64;
 var $65=HEAP32[(($__a_end)>>2)];
 var $66=$65;
 var $67=$__a_0;
 var $68=((($66)-($67))|0);
 var $69=HEAP8[($this2_i_i_i)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=26;break;}else{label=25;break;}
 case 25: 
 var $73=HEAP32[(($24)>>2)];
 var $77=$73;label=27;break;
 case 26: 
 var $75=($69&255);
 var $76=$75>>>1;
 var $77=$76;label=27;break;
 case 27: 
 var $77;
 var $78=($68|0)==($77|0);
 if($78){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($71){label=30;break;}else{label=29;break;}
 case 29: 
 var $81=HEAP32[(($24)>>2)];
 var $88=$81;var $87=$81;label=31;break;
 case 30: 
 var $83=($69&255);
 var $84=$83>>>1;
 var $85=($69&255);
 var $86=$85>>>1;
 var $88=$86;var $87=$84;label=31;break;
 case 31: 
 var $87;
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($23)>>2)];
 var $95=$94&-2;
 var $phitmp_i23=((($95)-(1))|0);
 var $96=$phitmp_i23;label=34;break;
 case 34: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$96,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $97=HEAP8[($this2_i_i_i)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi34;label=37;break;}else{label=36;break;}
 case 36: 
 var $101=HEAP32[(($_pre_phi36)>>2)];
 var $102=$101;label=37;break;
 case 37: 
 var $102;
 var $103=(($102+$87)|0);
 HEAP32[(($__a_end)>>2)]=$103;
 var $__a_1=$102;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $105=(($43+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($43+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=42;break;}else{label=43;break;}
 case 42: 
 var $111=$43;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$115;label=44;break; } else { label=38;break; }
 case 43: 
 var $117=HEAP32[(($106)>>2)];
 var $_0_i_i=$117;label=44;break;
 case 44: 
 var $_0_i_i;
 var $119=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $120=($119|0)==0;
 if($120){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$64;label=48;break;}
 case 45: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=46;break;}else{label=47;break;}
 case 46: 
 var $126=$43;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $132=(($122+4)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=50;break;}else{label=49;break;}
 case 49: 
 var $139=(($__grouping+4)|0);
 var $140=HEAP32[(($139)>>2)];
 var $144=$140;label=51;break;
 case 50: 
 var $142=($135&255);
 var $143=$142>>>1;
 var $144=$143;label=51;break;
 case 51: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=54;break;}else{label=52;break;}
 case 52: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=53;break;}else{label=54;break;}
 case 53: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=54;break;
 case 54: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $156$0=$156$r;var $156$1=tempRet0;if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 var $st$2$0=(($__v)|0);
 HEAP32[(($st$2$0)>>2)]=$156$0;
 var $st$3$1=(($__v+4)|0);
 HEAP32[(($st$3$1)>>2)]=$156$1;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$20,$158,$__err);
 var $159=($43|0)==0;
 if($159){var $177=1;var $176=0;label=61;break;}else{label=56;break;}
 case 56: 
 var $161=(($43+12)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($43+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($162|0)==($164|0);
 if($165){label=57;break;}else{label=58;break;}
 case 57: 
 var $167=$43;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$171;label=59;break; } else { label=39;break; }
 case 58: 
 var $173=HEAP32[(($162)>>2)];
 var $_0_i_i_i_i=$173;label=59;break;
 case 59: 
 var $_0_i_i_i_i;
 var $174=($_0_i_i_i_i|0)==-1;
 if($174){label=60;break;}else{var $177=0;var $176=$43;label=61;break;}
 case 60: 
 HEAP32[(($21)>>2)]=0;
 var $177=1;var $176=0;label=61;break;
 case 61: 
 var $176;
 var $177;
 var $178=($_pre_i3_i_i|0)==0;
 if($178){label=67;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i3_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i3_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=63;break;}else{label=64;break;}
 case 63: 
 var $186=$_pre_i3_i_i;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$190;label=65;break; } else { label=39;break; }
 case 64: 
 var $192=HEAP32[(($181)>>2)];
 var $_0_i_i1_i_i=$192;label=65;break;
 case 65: 
 var $_0_i_i1_i_i;
 var $193=($_0_i_i1_i_i|0)==-1;
 if($193){label=66;break;}else{label=68;break;}
 case 66: 
 HEAP32[(($22)>>2)]=0;
 label=67;break;
 case 67: 
 if($177){label=69;break;}else{label=70;break;}
 case 68: 
 if($177){label=70;break;}else{label=69;break;}
 case 69: 
 var $196=HEAP32[(($__err)>>2)];
 var $197=$196|2;
 HEAP32[(($__err)>>2)]=$197;
 label=70;break;
 case 70: 
 var $199=(($agg_result)|0);
 HEAP32[(($199)>>2)]=$176;
 var $$etemp$4$0=160;
 var $$etemp$4$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$5$0=104;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre32=$__buf;
 var $_pre33=(($_pre32+1)|0);
 var $18=$14;var $_pre_phi34=$_pre33;var $_pre_phi36=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre35=(($__buf+8)|0);
 var $18=$17;var $_pre_phi34=$17;var $_pre_phi36=$_pre35;label=9;break;
 case 9: 
 var $_pre_phi36;
 var $_pre_phi34;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $26=($_pre_i_i_i5|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i5+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i5+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i5;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i3=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i3;
 var $41=($_0_i_i_i_i3|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i5;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i9=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i9;
 var $61=($_0_i_i1_i_i9|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $64=0;label=24;break;}
 case 23: 
 if($44){var $64=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $64;
 var $65=HEAP32[(($__a_end)>>2)];
 var $66=$65;
 var $67=$__a_0;
 var $68=((($66)-($67))|0);
 var $69=HEAP8[($this2_i_i_i)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=26;break;}else{label=25;break;}
 case 25: 
 var $73=HEAP32[(($24)>>2)];
 var $77=$73;label=27;break;
 case 26: 
 var $75=($69&255);
 var $76=$75>>>1;
 var $77=$76;label=27;break;
 case 27: 
 var $77;
 var $78=($68|0)==($77|0);
 if($78){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($71){label=30;break;}else{label=29;break;}
 case 29: 
 var $81=HEAP32[(($24)>>2)];
 var $88=$81;var $87=$81;label=31;break;
 case 30: 
 var $83=($69&255);
 var $84=$83>>>1;
 var $85=($69&255);
 var $86=$85>>>1;
 var $88=$86;var $87=$84;label=31;break;
 case 31: 
 var $87;
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($23)>>2)];
 var $95=$94&-2;
 var $phitmp_i23=((($95)-(1))|0);
 var $96=$phitmp_i23;label=34;break;
 case 34: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$96,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $97=HEAP8[($this2_i_i_i)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi34;label=37;break;}else{label=36;break;}
 case 36: 
 var $101=HEAP32[(($_pre_phi36)>>2)];
 var $102=$101;label=37;break;
 case 37: 
 var $102;
 var $103=(($102+$87)|0);
 HEAP32[(($__a_end)>>2)]=$103;
 var $__a_1=$102;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $105=(($43+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($43+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=42;break;}else{label=43;break;}
 case 42: 
 var $111=$43;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$115;label=44;break; } else { label=38;break; }
 case 43: 
 var $117=HEAP32[(($106)>>2)];
 var $_0_i_i=$117;label=44;break;
 case 44: 
 var $_0_i_i;
 var $119=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $120=($119|0)==0;
 if($120){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$64;label=48;break;}
 case 45: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=46;break;}else{label=47;break;}
 case 46: 
 var $126=$43;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $132=(($122+4)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=50;break;}else{label=49;break;}
 case 49: 
 var $139=(($__grouping+4)|0);
 var $140=HEAP32[(($139)>>2)];
 var $144=$140;label=51;break;
 case 50: 
 var $142=($135&255);
 var $143=$142>>>1;
 var $144=$143;label=51;break;
 case 51: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=54;break;}else{label=52;break;}
 case 52: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=53;break;}else{label=54;break;}
 case 53: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=54;break;
 case 54: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 HEAP16[(($__v)>>1)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$20,$158,$__err);
 var $159=($43|0)==0;
 if($159){var $177=1;var $176=0;label=61;break;}else{label=56;break;}
 case 56: 
 var $161=(($43+12)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($43+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($162|0)==($164|0);
 if($165){label=57;break;}else{label=58;break;}
 case 57: 
 var $167=$43;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$171;label=59;break; } else { label=39;break; }
 case 58: 
 var $173=HEAP32[(($162)>>2)];
 var $_0_i_i_i_i=$173;label=59;break;
 case 59: 
 var $_0_i_i_i_i;
 var $174=($_0_i_i_i_i|0)==-1;
 if($174){label=60;break;}else{var $177=0;var $176=$43;label=61;break;}
 case 60: 
 HEAP32[(($21)>>2)]=0;
 var $177=1;var $176=0;label=61;break;
 case 61: 
 var $176;
 var $177;
 var $178=($_pre_i3_i_i|0)==0;
 if($178){label=67;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i3_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i3_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=63;break;}else{label=64;break;}
 case 63: 
 var $186=$_pre_i3_i_i;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$190;label=65;break; } else { label=39;break; }
 case 64: 
 var $192=HEAP32[(($181)>>2)];
 var $_0_i_i1_i_i=$192;label=65;break;
 case 65: 
 var $_0_i_i1_i_i;
 var $193=($_0_i_i1_i_i|0)==-1;
 if($193){label=66;break;}else{label=68;break;}
 case 66: 
 HEAP32[(($22)>>2)]=0;
 label=67;break;
 case 67: 
 if($177){label=69;break;}else{label=70;break;}
 case 68: 
 if($177){label=70;break;}else{label=69;break;}
 case 69: 
 var $196=HEAP32[(($__err)>>2)];
 var $197=$196|2;
 HEAP32[(($__err)>>2)]=$197;
 label=70;break;
 case 70: 
 var $199=(($agg_result)|0);
 HEAP32[(($199)>>2)]=$176;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=104;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre32=$__buf;
 var $_pre33=(($_pre32+1)|0);
 var $18=$14;var $_pre_phi34=$_pre33;var $_pre_phi36=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre35=(($__buf+8)|0);
 var $18=$17;var $_pre_phi34=$17;var $_pre_phi36=$_pre35;label=9;break;
 case 9: 
 var $_pre_phi36;
 var $_pre_phi34;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $26=($_pre_i_i_i5|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i5+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i5+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i5;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i3=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i3;
 var $41=($_0_i_i_i_i3|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i5;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i9=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i9;
 var $61=($_0_i_i1_i_i9|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $64=0;label=24;break;}
 case 23: 
 if($44){var $64=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $64;
 var $65=HEAP32[(($__a_end)>>2)];
 var $66=$65;
 var $67=$__a_0;
 var $68=((($66)-($67))|0);
 var $69=HEAP8[($this2_i_i_i)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=26;break;}else{label=25;break;}
 case 25: 
 var $73=HEAP32[(($24)>>2)];
 var $77=$73;label=27;break;
 case 26: 
 var $75=($69&255);
 var $76=$75>>>1;
 var $77=$76;label=27;break;
 case 27: 
 var $77;
 var $78=($68|0)==($77|0);
 if($78){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($71){label=30;break;}else{label=29;break;}
 case 29: 
 var $81=HEAP32[(($24)>>2)];
 var $88=$81;var $87=$81;label=31;break;
 case 30: 
 var $83=($69&255);
 var $84=$83>>>1;
 var $85=($69&255);
 var $86=$85>>>1;
 var $88=$86;var $87=$84;label=31;break;
 case 31: 
 var $87;
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($23)>>2)];
 var $95=$94&-2;
 var $phitmp_i23=((($95)-(1))|0);
 var $96=$phitmp_i23;label=34;break;
 case 34: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$96,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $97=HEAP8[($this2_i_i_i)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi34;label=37;break;}else{label=36;break;}
 case 36: 
 var $101=HEAP32[(($_pre_phi36)>>2)];
 var $102=$101;label=37;break;
 case 37: 
 var $102;
 var $103=(($102+$87)|0);
 HEAP32[(($__a_end)>>2)]=$103;
 var $__a_1=$102;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $105=(($43+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($43+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=42;break;}else{label=43;break;}
 case 42: 
 var $111=$43;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$115;label=44;break; } else { label=38;break; }
 case 43: 
 var $117=HEAP32[(($106)>>2)];
 var $_0_i_i=$117;label=44;break;
 case 44: 
 var $_0_i_i;
 var $119=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $120=($119|0)==0;
 if($120){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$64;label=48;break;}
 case 45: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=46;break;}else{label=47;break;}
 case 46: 
 var $126=$43;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $132=(($122+4)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=50;break;}else{label=49;break;}
 case 49: 
 var $139=(($__grouping+4)|0);
 var $140=HEAP32[(($139)>>2)];
 var $144=$140;label=51;break;
 case 50: 
 var $142=($135&255);
 var $143=$142>>>1;
 var $144=$143;label=51;break;
 case 51: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=54;break;}else{label=52;break;}
 case 52: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=53;break;}else{label=54;break;}
 case 53: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=54;break;
 case 54: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$20,$158,$__err);
 var $159=($43|0)==0;
 if($159){var $177=1;var $176=0;label=61;break;}else{label=56;break;}
 case 56: 
 var $161=(($43+12)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($43+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($162|0)==($164|0);
 if($165){label=57;break;}else{label=58;break;}
 case 57: 
 var $167=$43;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$171;label=59;break; } else { label=39;break; }
 case 58: 
 var $173=HEAP32[(($162)>>2)];
 var $_0_i_i_i_i=$173;label=59;break;
 case 59: 
 var $_0_i_i_i_i;
 var $174=($_0_i_i_i_i|0)==-1;
 if($174){label=60;break;}else{var $177=0;var $176=$43;label=61;break;}
 case 60: 
 HEAP32[(($21)>>2)]=0;
 var $177=1;var $176=0;label=61;break;
 case 61: 
 var $176;
 var $177;
 var $178=($_pre_i3_i_i|0)==0;
 if($178){label=67;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i3_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i3_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=63;break;}else{label=64;break;}
 case 63: 
 var $186=$_pre_i3_i_i;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$190;label=65;break; } else { label=39;break; }
 case 64: 
 var $192=HEAP32[(($181)>>2)];
 var $_0_i_i1_i_i=$192;label=65;break;
 case 65: 
 var $_0_i_i1_i_i;
 var $193=($_0_i_i1_i_i|0)==-1;
 if($193){label=66;break;}else{label=68;break;}
 case 66: 
 HEAP32[(($22)>>2)]=0;
 label=67;break;
 case 67: 
 if($177){label=69;break;}else{label=70;break;}
 case 68: 
 if($177){label=70;break;}else{label=69;break;}
 case 69: 
 var $196=HEAP32[(($__err)>>2)];
 var $197=$196|2;
 HEAP32[(($__err)>>2)]=$197;
 label=70;break;
 case 70: 
 var $199=(($agg_result)|0);
 HEAP32[(($199)>>2)]=$176;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=104;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre32=$__buf;
 var $_pre33=(($_pre32+1)|0);
 var $18=$14;var $_pre_phi34=$_pre33;var $_pre_phi36=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre35=(($__buf+8)|0);
 var $18=$17;var $_pre_phi34=$17;var $_pre_phi36=$_pre35;label=9;break;
 case 9: 
 var $_pre_phi36;
 var $_pre_phi34;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $26=($_pre_i_i_i5|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i5+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i5+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i5;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i3=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i3;
 var $41=($_0_i_i_i_i3|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i5;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i9=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i9;
 var $61=($_0_i_i1_i_i9|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $64=0;label=24;break;}
 case 23: 
 if($44){var $64=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $64;
 var $65=HEAP32[(($__a_end)>>2)];
 var $66=$65;
 var $67=$__a_0;
 var $68=((($66)-($67))|0);
 var $69=HEAP8[($this2_i_i_i)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=26;break;}else{label=25;break;}
 case 25: 
 var $73=HEAP32[(($24)>>2)];
 var $77=$73;label=27;break;
 case 26: 
 var $75=($69&255);
 var $76=$75>>>1;
 var $77=$76;label=27;break;
 case 27: 
 var $77;
 var $78=($68|0)==($77|0);
 if($78){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($71){label=30;break;}else{label=29;break;}
 case 29: 
 var $81=HEAP32[(($24)>>2)];
 var $88=$81;var $87=$81;label=31;break;
 case 30: 
 var $83=($69&255);
 var $84=$83>>>1;
 var $85=($69&255);
 var $86=$85>>>1;
 var $88=$86;var $87=$84;label=31;break;
 case 31: 
 var $87;
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($23)>>2)];
 var $95=$94&-2;
 var $phitmp_i23=((($95)-(1))|0);
 var $96=$phitmp_i23;label=34;break;
 case 34: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$96,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $97=HEAP8[($this2_i_i_i)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi34;label=37;break;}else{label=36;break;}
 case 36: 
 var $101=HEAP32[(($_pre_phi36)>>2)];
 var $102=$101;label=37;break;
 case 37: 
 var $102;
 var $103=(($102+$87)|0);
 HEAP32[(($__a_end)>>2)]=$103;
 var $__a_1=$102;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $105=(($43+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($43+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=42;break;}else{label=43;break;}
 case 42: 
 var $111=$43;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$115;label=44;break; } else { label=38;break; }
 case 43: 
 var $117=HEAP32[(($106)>>2)];
 var $_0_i_i=$117;label=44;break;
 case 44: 
 var $_0_i_i;
 var $119=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $120=($119|0)==0;
 if($120){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$64;label=48;break;}
 case 45: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=46;break;}else{label=47;break;}
 case 46: 
 var $126=$43;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $132=(($122+4)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=50;break;}else{label=49;break;}
 case 49: 
 var $139=(($__grouping+4)|0);
 var $140=HEAP32[(($139)>>2)];
 var $144=$140;label=51;break;
 case 50: 
 var $142=($135&255);
 var $143=$142>>>1;
 var $144=$143;label=51;break;
 case 51: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=54;break;}else{label=52;break;}
 case 52: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=53;break;}else{label=54;break;}
 case 53: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=54;break;
 case 54: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$20,$158,$__err);
 var $159=($43|0)==0;
 if($159){var $177=1;var $176=0;label=61;break;}else{label=56;break;}
 case 56: 
 var $161=(($43+12)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($43+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($162|0)==($164|0);
 if($165){label=57;break;}else{label=58;break;}
 case 57: 
 var $167=$43;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$171;label=59;break; } else { label=39;break; }
 case 58: 
 var $173=HEAP32[(($162)>>2)];
 var $_0_i_i_i_i=$173;label=59;break;
 case 59: 
 var $_0_i_i_i_i;
 var $174=($_0_i_i_i_i|0)==-1;
 if($174){label=60;break;}else{var $177=0;var $176=$43;label=61;break;}
 case 60: 
 HEAP32[(($21)>>2)]=0;
 var $177=1;var $176=0;label=61;break;
 case 61: 
 var $176;
 var $177;
 var $178=($_pre_i3_i_i|0)==0;
 if($178){label=67;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i3_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i3_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=63;break;}else{label=64;break;}
 case 63: 
 var $186=$_pre_i3_i_i;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$190;label=65;break; } else { label=39;break; }
 case 64: 
 var $192=HEAP32[(($181)>>2)];
 var $_0_i_i1_i_i=$192;label=65;break;
 case 65: 
 var $_0_i_i1_i_i;
 var $193=($_0_i_i1_i_i|0)==-1;
 if($193){label=66;break;}else{label=68;break;}
 case 66: 
 HEAP32[(($22)>>2)]=0;
 label=67;break;
 case 67: 
 if($177){label=69;break;}else{label=70;break;}
 case 68: 
 if($177){label=70;break;}else{label=69;break;}
 case 69: 
 var $196=HEAP32[(($__err)>>2)];
 var $197=$196|2;
 HEAP32[(($__err)>>2)]=$197;
 label=70;break;
 case 70: 
 var $199=(($agg_result)|0);
 HEAP32[(($199)>>2)]=$176;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=104;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre32=$__buf;
 var $_pre33=(($_pre32+1)|0);
 var $18=$14;var $_pre_phi34=$_pre33;var $_pre_phi36=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre35=(($__buf+8)|0);
 var $18=$17;var $_pre_phi34=$17;var $_pre_phi36=$_pre35;label=9;break;
 case 9: 
 var $_pre_phi36;
 var $_pre_phi34;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $26=($_pre_i_i_i5|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i5+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i5+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i5;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i3=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i3;
 var $41=($_0_i_i_i_i3|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i5;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i9=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i9;
 var $61=($_0_i_i1_i_i9|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $64=0;label=24;break;}
 case 23: 
 if($44){var $64=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $64;
 var $65=HEAP32[(($__a_end)>>2)];
 var $66=$65;
 var $67=$__a_0;
 var $68=((($66)-($67))|0);
 var $69=HEAP8[($this2_i_i_i)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=26;break;}else{label=25;break;}
 case 25: 
 var $73=HEAP32[(($24)>>2)];
 var $77=$73;label=27;break;
 case 26: 
 var $75=($69&255);
 var $76=$75>>>1;
 var $77=$76;label=27;break;
 case 27: 
 var $77;
 var $78=($68|0)==($77|0);
 if($78){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($71){label=30;break;}else{label=29;break;}
 case 29: 
 var $81=HEAP32[(($24)>>2)];
 var $88=$81;var $87=$81;label=31;break;
 case 30: 
 var $83=($69&255);
 var $84=$83>>>1;
 var $85=($69&255);
 var $86=$85>>>1;
 var $88=$86;var $87=$84;label=31;break;
 case 31: 
 var $87;
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$89,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $90=HEAP8[($this2_i_i_i)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($23)>>2)];
 var $95=$94&-2;
 var $phitmp_i23=((($95)-(1))|0);
 var $96=$phitmp_i23;label=34;break;
 case 34: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$96,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $97=HEAP8[($this2_i_i_i)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi34;label=37;break;}else{label=36;break;}
 case 36: 
 var $101=HEAP32[(($_pre_phi36)>>2)];
 var $102=$101;label=37;break;
 case 37: 
 var $102;
 var $103=(($102+$87)|0);
 HEAP32[(($__a_end)>>2)]=$103;
 var $__a_1=$102;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $105=(($43+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($43+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=42;break;}else{label=43;break;}
 case 42: 
 var $111=$43;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$115;label=44;break; } else { label=38;break; }
 case 43: 
 var $117=HEAP32[(($106)>>2)];
 var $_0_i_i=$117;label=44;break;
 case 44: 
 var $_0_i_i;
 var $119=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $120=($119|0)==0;
 if($120){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$64;label=48;break;}
 case 45: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=46;break;}else{label=47;break;}
 case 46: 
 var $126=$43;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $132=(($122+4)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=50;break;}else{label=49;break;}
 case 49: 
 var $139=(($__grouping+4)|0);
 var $140=HEAP32[(($139)>>2)];
 var $144=$140;label=51;break;
 case 50: 
 var $142=($135&255);
 var $143=$142>>>1;
 var $144=$143;label=51;break;
 case 51: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=54;break;}else{label=52;break;}
 case 52: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=53;break;}else{label=54;break;}
 case 53: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=54;break;
 case 54: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $156$0=$156$r;var $156$1=tempRet0;if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 var $st$2$0=(($__v)|0);
 HEAP32[(($st$2$0)>>2)]=$156$0;
 var $st$3$1=(($__v+4)|0);
 HEAP32[(($st$3$1)>>2)]=$156$1;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$20,$158,$__err);
 var $159=($43|0)==0;
 if($159){var $177=1;var $176=0;label=61;break;}else{label=56;break;}
 case 56: 
 var $161=(($43+12)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($43+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($162|0)==($164|0);
 if($165){label=57;break;}else{label=58;break;}
 case 57: 
 var $167=$43;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$171;label=59;break; } else { label=39;break; }
 case 58: 
 var $173=HEAP32[(($162)>>2)];
 var $_0_i_i_i_i=$173;label=59;break;
 case 59: 
 var $_0_i_i_i_i;
 var $174=($_0_i_i_i_i|0)==-1;
 if($174){label=60;break;}else{var $177=0;var $176=$43;label=61;break;}
 case 60: 
 HEAP32[(($21)>>2)]=0;
 var $177=1;var $176=0;label=61;break;
 case 61: 
 var $176;
 var $177;
 var $178=($_pre_i3_i_i|0)==0;
 if($178){label=67;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i3_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i3_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=63;break;}else{label=64;break;}
 case 63: 
 var $186=$_pre_i3_i_i;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$190;label=65;break; } else { label=39;break; }
 case 64: 
 var $192=HEAP32[(($181)>>2)];
 var $_0_i_i1_i_i=$192;label=65;break;
 case 65: 
 var $_0_i_i1_i_i;
 var $193=($_0_i_i1_i_i|0)==-1;
 if($193){label=66;break;}else{label=68;break;}
 case 66: 
 HEAP32[(($22)>>2)]=0;
 label=67;break;
 case 67: 
 if($177){label=69;break;}else{label=70;break;}
 case 68: 
 if($177){label=70;break;}else{label=69;break;}
 case 69: 
 var $196=HEAP32[(($__err)>>2)];
 var $197=$196|2;
 HEAP32[(($__err)>>2)]=$197;
 label=70;break;
 case 70: 
 var $199=(($agg_result)|0);
 HEAP32[(($199)>>2)]=$176;
 var $$etemp$4$0=160;
 var $$etemp$4$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$5$0=104;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $__a_end=(sp)+(176);
 var $__g=(sp)+(184);
 var $__g_end=(sp)+(344);
 var $__dc=(sp)+(352);
 var $__in_units=(sp)+(360);
 var $__exp=(sp)+(368);
 var $0=$__atoms;
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;

 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=35;break; }
 case 2: 
 var $2=HEAP8[($this2_i_i_i)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=(($__buf+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $11=$7;var $_pre_phi35=$_pre34;var $_pre_phi37=$6;label=5;break;
 case 4: 
 var $9=$__buf;
 var $10=(($9+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $11=$10;var $_pre_phi35=$10;var $_pre_phi37=$_pre36;label=5;break;
 case 5: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $13=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$13;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $14=(($__b)|0);
 var $15=(($__e)|0);
 var $16=(($__buf)|0);
 var $17=(($__buf+4)|0);
 var $18=HEAP32[(($__decimal_point)>>2)];
 var $19=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($14)>>2)];
 var $__a_0=$11;var $_pre_i_i_i5=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $20=($_pre_i_i_i5|0)==0;
 if($20){var $38=1;var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($_pre_i_i_i5+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($_pre_i_i_i5+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$_pre_i_i_i5;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3=$32;label=10;break; } else { label=34;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0_i_i_i_i3=$34;label=10;break;
 case 10: 
 var $_0_i_i_i_i3;
 var $35=($_0_i_i_i_i3|0)==-1;
 if($35){label=11;break;}else{var $38=0;var $37=$_pre_i_i_i5;label=12;break;}
 case 11: 
 HEAP32[(($14)>>2)]=0;
 var $38=1;var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9=$52;label=16;break; } else { label=34;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0_i_i1_i_i9=$54;label=16;break;
 case 16: 
 var $_0_i_i1_i_i9;
 var $55=($_0_i_i1_i_i9|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($15)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=44;break;}else{var $58=0;label=20;break;}
 case 19: 
 if($38){var $58=$39;label=20;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$39;label=44;break;}
 case 20: 
 var $58;
 var $59=HEAP32[(($__a_end)>>2)];
 var $60=$59;
 var $61=$__a_0;
 var $62=((($60)-($61))|0);
 var $63=HEAP8[($this2_i_i_i)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=22;break;}else{label=21;break;}
 case 21: 
 var $67=HEAP32[(($17)>>2)];
 var $71=$67;label=23;break;
 case 22: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=23;break;
 case 23: 
 var $71;
 var $72=($62|0)==($71|0);
 if($72){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($65){label=26;break;}else{label=25;break;}
 case 25: 
 var $75=HEAP32[(($17)>>2)];
 var $82=$75;var $81=$75;label=27;break;
 case 26: 
 var $77=($63&255);
 var $78=$77>>>1;
 var $79=($63&255);
 var $80=$79>>>1;
 var $82=$80;var $81=$78;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($this2_i_i_i)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($16)>>2)];
 var $89=$88&-2;
 var $phitmp_i23=((($89)-(1))|0);
 var $90=$phitmp_i23;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($this2_i_i_i)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi35;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi37)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($37+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($37+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=39;break;}
 case 38: 
 var $105=$37;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$109;label=40;break; } else { label=34;break; }
 case 39: 
 var $111=HEAP32[(($100)>>2)];
 var $_0_i_i=$111;label=40;break;
 case 40: 
 var $_0_i_i;
 var $113=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i,$__in_units,$__exp,$__a_1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1);
 var $114=($113|0)==0;
 if($114){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$58;label=44;break;}
 case 41: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=42;break;}else{label=43;break;}
 case 42: 
 var $120=$37;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$37;label=6;break; } else { label=34;break; }
 case 43: 
 var $126=(($116+4)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$37;label=6;break;
 case 44: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=$129&1;
 var $131=(($130<<24)>>24)==0;
 if($131){label=46;break;}else{label=45;break;}
 case 45: 
 var $133=(($__grouping+4)|0);
 var $134=HEAP32[(($133)>>2)];
 var $138=$134;label=47;break;
 case 46: 
 var $136=($129&255);
 var $137=$136>>>1;
 var $138=$137;label=47;break;
 case 47: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=51;break;}else{label=48;break;}
 case 48: 
 var $141=HEAP8[($__in_units)];
 var $142=(($141<<24)>>24)==0;
 if($142){label=51;break;}else{label=49;break;}
 case 49: 
 var $144=HEAP32[(($__g_end)>>2)];
 var $145=$144;
 var $146=$__g;
 var $147=((($145)-($146))|0);
 var $148=($147|0)<160;
 if($148){label=50;break;}else{label=51;break;}
 case 50: 
 var $150=HEAP32[(($__dc)>>2)];
 var $151=(($144+4)|0);
 HEAP32[(($__g_end)>>2)]=$151;
 HEAP32[(($144)>>2)]=$150;
 label=51;break;
 case 51: 
 var $152=HEAP32[(($__a_end)>>2)];
 var $153=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$152,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAPF32[(($__v)>>2)]=$153;
 var $155=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$13,$155,$__err);
 var $156=($37|0)==0;
 if($156){var $174=1;var $173=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=54;break;}else{label=55;break;}
 case 54: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$168;label=56;break; } else { label=35;break; }
 case 55: 
 var $170=HEAP32[(($159)>>2)];
 var $_0_i_i_i_i=$170;label=56;break;
 case 56: 
 var $_0_i_i_i_i;
 var $171=($_0_i_i_i_i|0)==-1;
 if($171){label=57;break;}else{var $174=0;var $173=$37;label=58;break;}
 case 57: 
 HEAP32[(($14)>>2)]=0;
 var $174=1;var $173=0;label=58;break;
 case 58: 
 var $173;
 var $174;
 var $175=($_pre_i3_i_i|0)==0;
 if($175){label=64;break;}else{label=59;break;}
 case 59: 
 var $177=(($_pre_i3_i_i+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($_pre_i3_i_i+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=60;break;}else{label=61;break;}
 case 60: 
 var $183=$_pre_i3_i_i;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$187;label=62;break; } else { label=35;break; }
 case 61: 
 var $189=HEAP32[(($178)>>2)];
 var $_0_i_i1_i_i=$189;label=62;break;
 case 62: 
 var $_0_i_i1_i_i;
 var $190=($_0_i_i1_i_i|0)==-1;
 if($190){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($15)>>2)]=0;
 label=64;break;
 case 64: 
 if($174){label=66;break;}else{label=67;break;}
 case 65: 
 if($174){label=67;break;}else{label=66;break;}
 case 66: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=67;break;
 case 67: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=128;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $__a_end=(sp)+(176);
 var $__g=(sp)+(184);
 var $__g_end=(sp)+(344);
 var $__dc=(sp)+(352);
 var $__in_units=(sp)+(360);
 var $__exp=(sp)+(368);
 var $0=$__atoms;
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;

 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=35;break; }
 case 2: 
 var $2=HEAP8[($this2_i_i_i)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=(($__buf+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $11=$7;var $_pre_phi35=$_pre34;var $_pre_phi37=$6;label=5;break;
 case 4: 
 var $9=$__buf;
 var $10=(($9+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $11=$10;var $_pre_phi35=$10;var $_pre_phi37=$_pre36;label=5;break;
 case 5: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $13=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$13;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $14=(($__b)|0);
 var $15=(($__e)|0);
 var $16=(($__buf)|0);
 var $17=(($__buf+4)|0);
 var $18=HEAP32[(($__decimal_point)>>2)];
 var $19=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($14)>>2)];
 var $__a_0=$11;var $_pre_i_i_i5=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $20=($_pre_i_i_i5|0)==0;
 if($20){var $38=1;var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($_pre_i_i_i5+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($_pre_i_i_i5+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$_pre_i_i_i5;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3=$32;label=10;break; } else { label=34;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0_i_i_i_i3=$34;label=10;break;
 case 10: 
 var $_0_i_i_i_i3;
 var $35=($_0_i_i_i_i3|0)==-1;
 if($35){label=11;break;}else{var $38=0;var $37=$_pre_i_i_i5;label=12;break;}
 case 11: 
 HEAP32[(($14)>>2)]=0;
 var $38=1;var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9=$52;label=16;break; } else { label=34;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0_i_i1_i_i9=$54;label=16;break;
 case 16: 
 var $_0_i_i1_i_i9;
 var $55=($_0_i_i1_i_i9|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($15)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=44;break;}else{var $58=0;label=20;break;}
 case 19: 
 if($38){var $58=$39;label=20;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$39;label=44;break;}
 case 20: 
 var $58;
 var $59=HEAP32[(($__a_end)>>2)];
 var $60=$59;
 var $61=$__a_0;
 var $62=((($60)-($61))|0);
 var $63=HEAP8[($this2_i_i_i)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=22;break;}else{label=21;break;}
 case 21: 
 var $67=HEAP32[(($17)>>2)];
 var $71=$67;label=23;break;
 case 22: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=23;break;
 case 23: 
 var $71;
 var $72=($62|0)==($71|0);
 if($72){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($65){label=26;break;}else{label=25;break;}
 case 25: 
 var $75=HEAP32[(($17)>>2)];
 var $82=$75;var $81=$75;label=27;break;
 case 26: 
 var $77=($63&255);
 var $78=$77>>>1;
 var $79=($63&255);
 var $80=$79>>>1;
 var $82=$80;var $81=$78;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($this2_i_i_i)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($16)>>2)];
 var $89=$88&-2;
 var $phitmp_i23=((($89)-(1))|0);
 var $90=$phitmp_i23;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($this2_i_i_i)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi35;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi37)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($37+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($37+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=39;break;}
 case 38: 
 var $105=$37;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$109;label=40;break; } else { label=34;break; }
 case 39: 
 var $111=HEAP32[(($100)>>2)];
 var $_0_i_i=$111;label=40;break;
 case 40: 
 var $_0_i_i;
 var $113=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i,$__in_units,$__exp,$__a_1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1);
 var $114=($113|0)==0;
 if($114){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$58;label=44;break;}
 case 41: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=42;break;}else{label=43;break;}
 case 42: 
 var $120=$37;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$37;label=6;break; } else { label=34;break; }
 case 43: 
 var $126=(($116+4)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$37;label=6;break;
 case 44: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=$129&1;
 var $131=(($130<<24)>>24)==0;
 if($131){label=46;break;}else{label=45;break;}
 case 45: 
 var $133=(($__grouping+4)|0);
 var $134=HEAP32[(($133)>>2)];
 var $138=$134;label=47;break;
 case 46: 
 var $136=($129&255);
 var $137=$136>>>1;
 var $138=$137;label=47;break;
 case 47: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=51;break;}else{label=48;break;}
 case 48: 
 var $141=HEAP8[($__in_units)];
 var $142=(($141<<24)>>24)==0;
 if($142){label=51;break;}else{label=49;break;}
 case 49: 
 var $144=HEAP32[(($__g_end)>>2)];
 var $145=$144;
 var $146=$__g;
 var $147=((($145)-($146))|0);
 var $148=($147|0)<160;
 if($148){label=50;break;}else{label=51;break;}
 case 50: 
 var $150=HEAP32[(($__dc)>>2)];
 var $151=(($144+4)|0);
 HEAP32[(($__g_end)>>2)]=$151;
 HEAP32[(($144)>>2)]=$150;
 label=51;break;
 case 51: 
 var $152=HEAP32[(($__a_end)>>2)];
 var $153=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$152,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAPF64[(($__v)>>3)]=$153;
 var $155=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$13,$155,$__err);
 var $156=($37|0)==0;
 if($156){var $174=1;var $173=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=54;break;}else{label=55;break;}
 case 54: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$168;label=56;break; } else { label=35;break; }
 case 55: 
 var $170=HEAP32[(($159)>>2)];
 var $_0_i_i_i_i=$170;label=56;break;
 case 56: 
 var $_0_i_i_i_i;
 var $171=($_0_i_i_i_i|0)==-1;
 if($171){label=57;break;}else{var $174=0;var $173=$37;label=58;break;}
 case 57: 
 HEAP32[(($14)>>2)]=0;
 var $174=1;var $173=0;label=58;break;
 case 58: 
 var $173;
 var $174;
 var $175=($_pre_i3_i_i|0)==0;
 if($175){label=64;break;}else{label=59;break;}
 case 59: 
 var $177=(($_pre_i3_i_i+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($_pre_i3_i_i+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=60;break;}else{label=61;break;}
 case 60: 
 var $183=$_pre_i3_i_i;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$187;label=62;break; } else { label=35;break; }
 case 61: 
 var $189=HEAP32[(($178)>>2)];
 var $_0_i_i1_i_i=$189;label=62;break;
 case 62: 
 var $_0_i_i1_i_i;
 var $190=($_0_i_i1_i_i|0)==-1;
 if($190){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($15)>>2)]=0;
 label=64;break;
 case 64: 
 if($174){label=66;break;}else{label=67;break;}
 case 65: 
 if($174){label=67;break;}else{label=66;break;}
 case 66: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=67;break;
 case 67: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=128;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $__a_end=(sp)+(176);
 var $__g=(sp)+(184);
 var $__g_end=(sp)+(344);
 var $__dc=(sp)+(352);
 var $__in_units=(sp)+(360);
 var $__exp=(sp)+(368);
 var $0=$__atoms;
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;

 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=35;break; }
 case 2: 
 var $2=HEAP8[($this2_i_i_i)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=(($__buf+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $11=$7;var $_pre_phi35=$_pre34;var $_pre_phi37=$6;label=5;break;
 case 4: 
 var $9=$__buf;
 var $10=(($9+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $11=$10;var $_pre_phi35=$10;var $_pre_phi37=$_pre36;label=5;break;
 case 5: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $13=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$13;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $14=(($__b)|0);
 var $15=(($__e)|0);
 var $16=(($__buf)|0);
 var $17=(($__buf+4)|0);
 var $18=HEAP32[(($__decimal_point)>>2)];
 var $19=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($14)>>2)];
 var $__a_0=$11;var $_pre_i_i_i5=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $20=($_pre_i_i_i5|0)==0;
 if($20){var $38=1;var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($_pre_i_i_i5+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($_pre_i_i_i5+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$_pre_i_i_i5;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3=$32;label=10;break; } else { label=34;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0_i_i_i_i3=$34;label=10;break;
 case 10: 
 var $_0_i_i_i_i3;
 var $35=($_0_i_i_i_i3|0)==-1;
 if($35){label=11;break;}else{var $38=0;var $37=$_pre_i_i_i5;label=12;break;}
 case 11: 
 HEAP32[(($14)>>2)]=0;
 var $38=1;var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9=$52;label=16;break; } else { label=34;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0_i_i1_i_i9=$54;label=16;break;
 case 16: 
 var $_0_i_i1_i_i9;
 var $55=($_0_i_i1_i_i9|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($15)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=44;break;}else{var $58=0;label=20;break;}
 case 19: 
 if($38){var $58=$39;label=20;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$39;label=44;break;}
 case 20: 
 var $58;
 var $59=HEAP32[(($__a_end)>>2)];
 var $60=$59;
 var $61=$__a_0;
 var $62=((($60)-($61))|0);
 var $63=HEAP8[($this2_i_i_i)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=22;break;}else{label=21;break;}
 case 21: 
 var $67=HEAP32[(($17)>>2)];
 var $71=$67;label=23;break;
 case 22: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=23;break;
 case 23: 
 var $71;
 var $72=($62|0)==($71|0);
 if($72){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($65){label=26;break;}else{label=25;break;}
 case 25: 
 var $75=HEAP32[(($17)>>2)];
 var $82=$75;var $81=$75;label=27;break;
 case 26: 
 var $77=($63&255);
 var $78=$77>>>1;
 var $79=($63&255);
 var $80=$79>>>1;
 var $82=$80;var $81=$78;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($this2_i_i_i)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($16)>>2)];
 var $89=$88&-2;
 var $phitmp_i23=((($89)-(1))|0);
 var $90=$phitmp_i23;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($this2_i_i_i)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi35;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi37)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($37+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($37+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=39;break;}
 case 38: 
 var $105=$37;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$109;label=40;break; } else { label=34;break; }
 case 39: 
 var $111=HEAP32[(($100)>>2)];
 var $_0_i_i=$111;label=40;break;
 case 40: 
 var $_0_i_i;
 var $113=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i,$__in_units,$__exp,$__a_1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1);
 var $114=($113|0)==0;
 if($114){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$58;label=44;break;}
 case 41: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=42;break;}else{label=43;break;}
 case 42: 
 var $120=$37;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$37;label=6;break; } else { label=34;break; }
 case 43: 
 var $126=(($116+4)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$37;label=6;break;
 case 44: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=$129&1;
 var $131=(($130<<24)>>24)==0;
 if($131){label=46;break;}else{label=45;break;}
 case 45: 
 var $133=(($__grouping+4)|0);
 var $134=HEAP32[(($133)>>2)];
 var $138=$134;label=47;break;
 case 46: 
 var $136=($129&255);
 var $137=$136>>>1;
 var $138=$137;label=47;break;
 case 47: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=51;break;}else{label=48;break;}
 case 48: 
 var $141=HEAP8[($__in_units)];
 var $142=(($141<<24)>>24)==0;
 if($142){label=51;break;}else{label=49;break;}
 case 49: 
 var $144=HEAP32[(($__g_end)>>2)];
 var $145=$144;
 var $146=$__g;
 var $147=((($145)-($146))|0);
 var $148=($147|0)<160;
 if($148){label=50;break;}else{label=51;break;}
 case 50: 
 var $150=HEAP32[(($__dc)>>2)];
 var $151=(($144+4)|0);
 HEAP32[(($__g_end)>>2)]=$151;
 HEAP32[(($144)>>2)]=$150;
 label=51;break;
 case 51: 
 var $152=HEAP32[(($__a_end)>>2)];
 var $153=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$152,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAPF64[(($__v)>>3)]=$153;
 var $155=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$13,$155,$__err);
 var $156=($37|0)==0;
 if($156){var $174=1;var $173=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=54;break;}else{label=55;break;}
 case 54: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$168;label=56;break; } else { label=35;break; }
 case 55: 
 var $170=HEAP32[(($159)>>2)];
 var $_0_i_i_i_i=$170;label=56;break;
 case 56: 
 var $_0_i_i_i_i;
 var $171=($_0_i_i_i_i|0)==-1;
 if($171){label=57;break;}else{var $174=0;var $173=$37;label=58;break;}
 case 57: 
 HEAP32[(($14)>>2)]=0;
 var $174=1;var $173=0;label=58;break;
 case 58: 
 var $173;
 var $174;
 var $175=($_pre_i3_i_i|0)==0;
 if($175){label=64;break;}else{label=59;break;}
 case 59: 
 var $177=(($_pre_i3_i_i+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($_pre_i3_i_i+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=60;break;}else{label=61;break;}
 case 60: 
 var $183=$_pre_i3_i_i;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$187;label=62;break; } else { label=35;break; }
 case 61: 
 var $189=HEAP32[(($178)>>2)];
 var $_0_i_i1_i_i=$189;label=62;break;
 case 62: 
 var $_0_i_i1_i_i;
 var $190=($_0_i_i1_i_i|0)==-1;
 if($190){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($15)>>2)]=0;
 label=64;break;
 case 64: 
 if($174){label=66;break;}else{label=67;break;}
 case 65: 
 if($174){label=67;break;}else{label=66;break;}
 case 66: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=67;break;
 case 67: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=128;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+344)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(120);
 var $1=(sp)+(136);
 var $__buf=(sp)+(144);
 var $__a_end=(sp)+(160);
 var $__g=(sp)+(168);
 var $__g_end=(sp)+(328);
 var $__dc=(sp)+(336);
 var $2=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $this2_i_i_i=$__grouping;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=42;break; }
 case 2: 
 var $4=(($1)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=HEAP32[((15368)>>2)];
 var $8=($7|0)==-1;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=15368;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(26);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$6,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=43;break; }
 case 4: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $13=HEAP32[((15372)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($5+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($5+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=8;break;}
 case 6: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=43;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $30=$25;
 var $31=(($__atoms)|0);
 var $32=$25;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($30,11760,11786,$31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=43;break; }
 case 9: 
 var $37=HEAP32[(($4)>>2)];
 var $38=(($37)|0);
 var $39=__ZNSt3__114__shared_count16__release_sharedEv($38);
 var $this2_i_i_i6=$__buf;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=45;break; }
 case 10: 
 var $40=HEAP8[($this2_i_i_i6)];
 var $41=$40&1;
 var $42=(($41<<24)>>24)==0;
 if($42){label=12;break;}else{label=11;break;}
 case 11: 
 var $44=(($__buf+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $_pre35=$__buf;
 var $_pre36=(($_pre35+1)|0);
 var $49=$45;var $_pre_phi37=$_pre36;var $_pre_phi39=$44;label=13;break;
 case 12: 
 var $47=$__buf;
 var $48=(($47+1)|0);
 var $_pre38=(($__buf+8)|0);
 var $49=$48;var $_pre_phi37=$48;var $_pre_phi39=$_pre38;label=13;break;
 case 13: 
 var $_pre_phi39;
 var $_pre_phi37;
 var $49;
 HEAP32[(($__a_end)>>2)]=$49;
 var $50=$__g;
 var $$etemp$3$0=160;
 var $$etemp$3$1=0;

 var $51=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$51;
 HEAP32[(($__dc)>>2)]=0;
 var $52=(($__b)|0);
 var $53=(($__e)|0);
 var $54=(($__buf)|0);
 var $55=(($__buf+4)|0);
 var $_pre=HEAP32[(($52)>>2)];
 var $__a_0=$49;var $_pre_i_i_i10=$_pre;label=14;break;
 case 14: 
 var $_pre_i_i_i10;
 var $__a_0;
 var $56=($_pre_i_i_i10|0)==0;
 if($56){var $74=1;var $73=0;label=20;break;}else{label=15;break;}
 case 15: 
 var $58=(($_pre_i_i_i10+12)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($_pre_i_i_i10+16)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($59|0)==($61|0);
 if($62){label=16;break;}else{label=17;break;}
 case 16: 
 var $64=$_pre_i_i_i10;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+36)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($_pre_i_i_i10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i8=$68;label=18;break; } else { label=44;break; }
 case 17: 
 var $70=HEAP32[(($59)>>2)];
 var $_0_i_i_i_i8=$70;label=18;break;
 case 18: 
 var $_0_i_i_i_i8;
 var $71=($_0_i_i_i_i8|0)==-1;
 if($71){label=19;break;}else{var $74=0;var $73=$_pre_i_i_i10;label=20;break;}
 case 19: 
 HEAP32[(($52)>>2)]=0;
 var $74=1;var $73=0;label=20;break;
 case 20: 
 var $73;
 var $74;
 var $75=HEAP32[(($53)>>2)];
 var $76=($75|0)==0;
 if($76){label=26;break;}else{label=21;break;}
 case 21: 
 var $78=(($75+12)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($75+16)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($79|0)==($81|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 var $84=$75;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+36)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i14=$88;label=24;break; } else { label=44;break; }
 case 23: 
 var $90=HEAP32[(($79)>>2)];
 var $_0_i_i1_i_i14=$90;label=24;break;
 case 24: 
 var $_0_i_i1_i_i14;
 var $91=($_0_i_i1_i_i14|0)==-1;
 if($91){label=25;break;}else{label=27;break;}
 case 25: 
 HEAP32[(($53)>>2)]=0;
 label=26;break;
 case 26: 
 if($74){var $__a_2=$__a_0;label=54;break;}else{label=28;break;}
 case 27: 
 if($74){label=28;break;}else{var $__a_2=$__a_0;label=54;break;}
 case 28: 
 var $94=HEAP32[(($__a_end)>>2)];
 var $95=$94;
 var $96=$__a_0;
 var $97=((($95)-($96))|0);
 var $98=HEAP8[($this2_i_i_i6)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=30;break;}else{label=29;break;}
 case 29: 
 var $102=HEAP32[(($55)>>2)];
 var $106=$102;label=31;break;
 case 30: 
 var $104=($98&255);
 var $105=$104>>>1;
 var $106=$105;label=31;break;
 case 31: 
 var $106;
 var $107=($97|0)==($106|0);
 if($107){label=32;break;}else{var $__a_1=$__a_0;label=47;break;}
 case 32: 
 if($100){label=34;break;}else{label=33;break;}
 case 33: 
 var $110=HEAP32[(($55)>>2)];
 var $117=$110;var $116=$110;label=35;break;
 case 34: 
 var $112=($98&255);
 var $113=$112>>>1;
 var $114=($98&255);
 var $115=$114>>>1;
 var $117=$115;var $116=$113;label=35;break;
 case 35: 
 var $116;
 var $117;
 var $118=$117<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$118,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=44;break; }
 case 36: 
 var $119=HEAP8[($this2_i_i_i6)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 if($121){var $125=10;label=38;break;}else{label=37;break;}
 case 37: 
 var $123=HEAP32[(($54)>>2)];
 var $124=$123&-2;
 var $phitmp_i26=((($124)-(1))|0);
 var $125=$phitmp_i26;label=38;break;
 case 38: 
 var $125;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$125,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=44;break; }
 case 39: 
 var $126=HEAP8[($this2_i_i_i6)];
 var $127=$126&1;
 var $128=(($127<<24)>>24)==0;
 if($128){var $131=$_pre_phi37;label=41;break;}else{label=40;break;}
 case 40: 
 var $130=HEAP32[(($_pre_phi39)>>2)];
 var $131=$130;label=41;break;
 case 41: 
 var $131;
 var $132=(($131+$116)|0);
 HEAP32[(($__a_end)>>2)]=$132;
 var $__a_1=$131;label=47;break;
 case 42: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=$134$1;
 var $_0=$135;var $_01=$136;label=78;break;
 case 43: 
 var $138$0 = ___cxa_find_matching_catch(-1, -1); var $138$1 = tempRet0;
 var $139=$138$0;
 var $140=$138$1;
 var $141=HEAP32[(($4)>>2)];
 var $142=(($141)|0);
 var $143=__ZNSt3__114__shared_count16__release_sharedEv($142);
 var $_0=$139;var $_01=$140;label=78;break;
 case 44: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=46;break;
 case 45: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=46;break;
 case 46: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $144=$eh_lpad_body$0;
 var $145=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $_0=$144;var $_01=$145;label=78;break;
 case 47: 
 var $__a_1;
 var $146=(($73+12)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($73+16)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=($147|0)==($149|0);
 if($150){label=48;break;}else{label=49;break;}
 case 48: 
 var $152=$73;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+36)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$155]($73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$156;label=50;break; } else { label=44;break; }
 case 49: 
 var $158=HEAP32[(($147)>>2)];
 var $_0_i_i=$158;label=50;break;
 case 50: 
 var $_0_i_i;
 var $160=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,16,$__a_1,$__a_end,$__dc,0,$__grouping,$51,$__g_end,$31);
 var $161=($160|0)==0;
 if($161){label=51;break;}else{var $__a_2=$__a_1;label=54;break;}
 case 51: 
 var $163=HEAP32[(($146)>>2)];
 var $164=HEAP32[(($148)>>2)];
 var $165=($163|0)==($164|0);
 if($165){label=52;break;}else{label=53;break;}
 case 52: 
 var $167=$73;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+40)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i10=$73;label=14;break; } else { label=44;break; }
 case 53: 
 var $173=(($163+4)|0);
 HEAP32[(($146)>>2)]=$173;
 var $__a_0=$__a_1;var $_pre_i_i_i10=$73;label=14;break;
 case 54: 
 var $__a_2;
 var $175=(($__a_2+3)|0);
 HEAP8[($175)]=0;
 var $176=HEAP8[(15936)];
 var $177=(($176<<24)>>24)==0;
 if($177){label=55;break;}else{label=59;break;}
 case 55: 
 var $179=___cxa_guard_acquire(15936);
 var $180=($179|0)==0;
 if($180){label=59;break;}else{label=56;break;}
 case 56: 
 var $182=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=58;break; }
 case 57: 
 HEAP32[((13832)>>2)]=$182;

 label=59;break;
 case 58: 
 var $185$0 = ___cxa_find_matching_catch(-1, -1); var $185$1 = tempRet0;

 var $eh_lpad_body$1=$185$1;var $eh_lpad_body$0=$185$0;label=46;break;
 case 59: 
 var $187=HEAP32[((13832)>>2)];
 var $188=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$187,2296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=60;break; } else { label=45;break; }
 case 60: 
 var $190=($188|0)==1;
 if($190){label=62;break;}else{label=61;break;}
 case 61: 
 HEAP32[(($__err)>>2)]=4;
 label=62;break;
 case 62: 
 var $193=HEAP32[(($52)>>2)];
 var $194=($193|0)==0;
 if($194){var $212=1;var $211=0;label=68;break;}else{label=63;break;}
 case 63: 
 var $196=(($193+12)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(($193+16)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=($197|0)==($199|0);
 if($200){label=64;break;}else{label=65;break;}
 case 64: 
 var $202=$193;
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203+36)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$205]($193) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$206;label=66;break; } else { label=45;break; }
 case 65: 
 var $208=HEAP32[(($197)>>2)];
 var $_0_i_i_i_i=$208;label=66;break;
 case 66: 
 var $_0_i_i_i_i;
 var $209=($_0_i_i_i_i|0)==-1;
 if($209){label=67;break;}else{var $212=0;var $211=$193;label=68;break;}
 case 67: 
 HEAP32[(($52)>>2)]=0;
 var $212=1;var $211=0;label=68;break;
 case 68: 
 var $211;
 var $212;
 var $213=HEAP32[(($53)>>2)];
 var $214=($213|0)==0;
 if($214){label=74;break;}else{label=69;break;}
 case 69: 
 var $216=(($213+12)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(($213+16)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($217|0)==($219|0);
 if($220){label=70;break;}else{label=71;break;}
 case 70: 
 var $222=$213;
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+36)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$225]($213) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$226;label=72;break; } else { label=45;break; }
 case 71: 
 var $228=HEAP32[(($217)>>2)];
 var $_0_i_i1_i_i=$228;label=72;break;
 case 72: 
 var $_0_i_i1_i_i;
 var $229=($_0_i_i1_i_i|0)==-1;
 if($229){label=73;break;}else{label=75;break;}
 case 73: 
 HEAP32[(($53)>>2)]=0;
 label=74;break;
 case 74: 
 if($212){label=76;break;}else{label=77;break;}
 case 75: 
 if($212){label=77;break;}else{label=76;break;}
 case 76: 
 var $232=HEAP32[(($__err)>>2)];
 var $233=$232|2;
 HEAP32[(($__err)>>2)]=$233;
 label=77;break;
 case 77: 
 var $235=(($agg_result)|0);
 HEAP32[(($235)>>2)]=$211;
 var $$etemp$4$0=160;
 var $$etemp$4$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$5$0=104;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
 case 78: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $237$0=$_0;
 var $237$1=0;
 var $238$0=$237$0;
 var $238$1=$_01;
 ___resumeException($238$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+96)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==($__ct|0);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+100)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($__ct|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($__grouping+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $25=$21;label=8;break;
 case 7: 
 var $23=($16&255);
 var $24=$23>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=($__ct|0)==($__thousands_sep|0);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_0=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 11: 
 var $38=(($__atoms+104)|0);
 var $_01_i=$__atoms;label=13;break;
 case 12: 
 var $40=($44|0)==($38|0);
 if($40){var $_0_lcssa_i=$38;label=14;break;}else{var $_01_i=$44;label=13;break;}
 case 13: 
 var $_01_i;
 var $42=HEAP32[(($_01_i)>>2)];
 var $43=($42|0)==($__ct|0);
 var $44=(($_01_i+4)|0);
 if($43){var $_0_lcssa_i=$_01_i;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa_i;
 var $45=$_0_lcssa_i;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=$47>>2;
 var $49=($47|0)>92;
 if($49){var $_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $52=($48|0)<($__base|0);
 if($52){label=22;break;}else{var $_0=-1;label=23;break;}
 case 17: 
 var $54=($47|0)<88;
 if($54){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $57=$1;
 var $58=$__a;
 var $59=((($57)-($58))|0);
 var $60=($59|0)<3;
 if($60){label=20;break;}else{var $_0=-1;label=23;break;}
 case 20: 
 var $62=((($1)-(1))|0);
 var $63=HEAP8[($62)];
 var $64=(($63<<24)>>24)==48;
 if($64){label=21;break;}else{var $_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $66=((11760+$48)|0);
 var $67=HEAP8[($66)];
 var $68=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$68;
 HEAP8[($1)]=$67;
 var $_0=0;label=23;break;
 case 22: 
 var $70=((11760+$48)|0);
 var $71=HEAP8[($70)];
 var $72=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$72;
 HEAP8[($1)]=$71;
 var $73=HEAP32[(($__dc)>>2)];
 var $74=((($73)+(1))|0);
 HEAP32[(($__dc)>>2)]=$74;
 var $_0=0;label=23;break;
 case 23: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((15376)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=15376;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$3,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((15380)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$22;
 var $28=$22;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+32)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($27,11760,11786,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $33=HEAP32[(($1)>>2)];
 var $34=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $35=HEAP32[((14992)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $38=(($__p_i_i_i_i3)|0);
 HEAP32[(($38)>>2)]=14992;
 var $39=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($39)>>2)]=(26);
 var $40=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($40)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14992,$34,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $41=HEAP32[((14996)>>2)];
 var $42=((($41)-(1))|0);
 var $43=(($33+12)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($33+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$44;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=$49>>2;
 var $51=($50>>>0)>($42>>>0);
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $52=(($46+($42<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){label=12;break;}else{label=14;break;}
 case 12: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 __ZNSt8bad_castC2Ev($56);
 (function() { try { __THREW__ = 0; return ___cxa_throw($55,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $58=$53;
 var $59=$53;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+16)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP8[($__thousands_sep)]=$63;
 var $64=$53;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+20)|0);
 var $67=HEAP32[(($66)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($agg_result,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $68=HEAP32[(($1)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 STACKTOP=sp;return;
 case 17: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1); var $72$1 = tempRet0;
 var $73=HEAP32[(($1)>>2)];
 var $74=(($73)|0);
 var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
 ___resumeException($72$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((15376)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=15376;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$3,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((15380)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$22;
 var $28=$22;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+32)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($27,11760,11792,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $33=HEAP32[(($1)>>2)];
 var $34=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $35=HEAP32[((14992)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $38=(($__p_i_i_i_i3)|0);
 HEAP32[(($38)>>2)]=14992;
 var $39=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($39)>>2)]=(26);
 var $40=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($40)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14992,$34,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $41=HEAP32[((14996)>>2)];
 var $42=((($41)-(1))|0);
 var $43=(($33+12)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($33+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$44;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=$49>>2;
 var $51=($50>>>0)>($42>>>0);
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $52=(($46+($42<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){label=12;break;}else{label=14;break;}
 case 12: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 __ZNSt8bad_castC2Ev($56);
 (function() { try { __THREW__ = 0; return ___cxa_throw($55,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $58=$53;
 var $59=$53;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP8[($__decimal_point)]=$63;
 var $64=HEAP32[(($59)>>2)];
 var $65=(($64+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$66]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP8[($__thousands_sep)]=$67;
 var $68=$53;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+20)|0);
 var $71=HEAP32[(($70)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($agg_result,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $72=HEAP32[(($1)>>2)];
 var $73=(($72)|0);
 var $74=__ZNSt3__114__shared_count16__release_sharedEv($73);
 STACKTOP=sp;return;
 case 18: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=HEAP32[(($1)>>2)];
 var $78=(($77)|0);
 var $79=__ZNSt3__114__shared_count16__release_sharedEv($78);
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__ct<<24)>>24)==(($__decimal_point<<24)>>24);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $6=HEAP32[(($__a_end)>>2)];
 var $7=(($6+1)|0);
 HEAP32[(($__a_end)>>2)]=$7;
 HEAP8[($6)]=46;
 var $8=$__grouping;
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($__grouping+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=6;break;
 case 5: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=6;break;
 case 6: 
 var $18;
 var $19=($18|0)==0;
 if($19){var $_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $21=HEAP32[(($__g_end)>>2)];
 var $22=$21;
 var $23=$__g;
 var $24=((($22)-($23))|0);
 var $25=($24|0)<160;
 if($25){label=8;break;}else{var $_0=0;label=36;break;}
 case 8: 
 var $27=HEAP32[(($__dc)>>2)];
 var $28=(($21+4)|0);
 HEAP32[(($__g_end)>>2)]=$28;
 HEAP32[(($21)>>2)]=$27;
 var $_0=0;label=36;break;
 case 9: 
 var $30=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 if($30){label=10;break;}else{label=17;break;}
 case 10: 
 var $32=$__grouping;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $42=$38;label=13;break;
 case 12: 
 var $40=($33&255);
 var $41=$40>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=14;break;}
 case 14: 
 var $45=HEAP8[($__in_units)];
 var $46=(($45<<24)>>24)==0;
 if($46){var $_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP32[(($__g_end)>>2)];
 var $49=$48;
 var $50=$__g;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<160;
 if($52){label=16;break;}else{var $_0=0;label=36;break;}
 case 16: 
 var $54=HEAP32[(($__dc)>>2)];
 var $55=(($48+4)|0);
 HEAP32[(($__g_end)>>2)]=$55;
 HEAP32[(($48)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=36;break;
 case 17: 
 var $57=(($__atoms+32)|0);
 var $_01_i=$__atoms;label=19;break;
 case 18: 
 var $59=($63|0)==($57|0);
 if($59){var $_0_lcssa_i=$57;label=20;break;}else{var $_01_i=$63;label=19;break;}
 case 19: 
 var $_01_i;
 var $61=HEAP8[($_01_i)];
 var $62=(($61<<24)>>24)==(($__ct<<24)>>24);
 var $63=(($_01_i+1)|0);
 if($62){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $64=$_0_lcssa_i;
 var $65=$__atoms;
 var $66=((($64)-($65))|0);
 var $67=($66|0)>31;
 if($67){var $_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $69=((11760+$66)|0);
 var $70=HEAP8[($69)];
 if(($66|0)==25|($66|0)==24){ label=22;break;}else if(($66|0)==22|($66|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $72=HEAP32[(($__a_end)>>2)];
 var $73=($72|0)==($__a|0);
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=((($72)-(1))|0);
 var $76=HEAP8[($75)];
 var $77=($76&255);
 var $78=$77&95;
 var $79=HEAP8[($__exp)];
 var $80=($79&255);
 var $81=$80&127;
 var $82=($78|0)==($81|0);
 if($82){label=24;break;}else{var $_0=-1;label=36;break;}
 case 24: 
 var $84=(($72+1)|0);
 HEAP32[(($__a_end)>>2)]=$84;
 HEAP8[($72)]=$70;
 var $_0=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 var $85=HEAP32[(($__a_end)>>2)];
 var $86=(($85+1)|0);
 HEAP32[(($__a_end)>>2)]=$86;
 HEAP8[($85)]=$70;
 var $_0=0;label=36;break;
 case 26: 
 var $88=($70&255);
 var $89=$88&95;
 var $90=HEAP8[($__exp)];
 var $91=(($90<<24)>>24);
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=34;break;}
 case 27: 
 var $94=$90|-128;
 HEAP8[($__exp)]=$94;
 var $95=HEAP8[($__in_units)];
 var $96=(($95<<24)>>24)==0;
 if($96){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $98=$__grouping;
 var $99=HEAP8[($98)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($__grouping+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=31;break;
 case 30: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=31;break;
 case 31: 
 var $108;
 var $109=($108|0)==0;
 if($109){label=34;break;}else{label=32;break;}
 case 32: 
 var $111=HEAP32[(($__g_end)>>2)];
 var $112=$111;
 var $113=$__g;
 var $114=((($112)-($113))|0);
 var $115=($114|0)<160;
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=HEAP32[(($__dc)>>2)];
 var $118=(($111+4)|0);
 HEAP32[(($__g_end)>>2)]=$118;
 HEAP32[(($111)>>2)]=$117;
 label=34;break;
 case 34: 
 var $120=HEAP32[(($__a_end)>>2)];
 var $121=(($120+1)|0);
 HEAP32[(($__a_end)>>2)]=$121;
 HEAP8[($120)]=$70;
 var $122=($66|0)>21;
 if($122){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $124=HEAP32[(($__dc)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($__dc)>>2)]=$125;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((15368)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=15368;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$3,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((15372)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$22;
 var $28=$22;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+48)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($27,11760,11786,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $33=HEAP32[(($1)>>2)];
 var $34=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $35=HEAP32[((14984)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $38=(($__p_i_i_i_i3)|0);
 HEAP32[(($38)>>2)]=14984;
 var $39=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($39)>>2)]=(26);
 var $40=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($40)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14984,$34,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $41=HEAP32[((14988)>>2)];
 var $42=((($41)-(1))|0);
 var $43=(($33+12)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($33+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$44;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=$49>>2;
 var $51=($50>>>0)>($42>>>0);
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $52=(($46+($42<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){label=12;break;}else{label=14;break;}
 case 12: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 __ZNSt8bad_castC2Ev($56);
 (function() { try { __THREW__ = 0; return ___cxa_throw($55,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $58=$53;
 var $59=$53;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+16)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP32[(($__thousands_sep)>>2)]=$63;
 var $64=$53;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+20)|0);
 var $67=HEAP32[(($66)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($agg_result,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $68=HEAP32[(($1)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 STACKTOP=sp;return;
 case 17: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1); var $72$1 = tempRet0;
 var $73=HEAP32[(($1)>>2)];
 var $74=(($73)|0);
 var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
 ___resumeException($72$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((15368)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=15368;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$3,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((15372)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$22;
 var $28=$22;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+48)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($27,11760,11792,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $33=HEAP32[(($1)>>2)];
 var $34=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $35=HEAP32[((14984)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $38=(($__p_i_i_i_i3)|0);
 HEAP32[(($38)>>2)]=14984;
 var $39=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($39)>>2)]=(26);
 var $40=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($40)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14984,$34,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $41=HEAP32[((14988)>>2)];
 var $42=((($41)-(1))|0);
 var $43=(($33+12)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($33+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$44;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=$49>>2;
 var $51=($50>>>0)>($42>>>0);
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $52=(($46+($42<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){label=12;break;}else{label=14;break;}
 case 12: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 __ZNSt8bad_castC2Ev($56);
 (function() { try { __THREW__ = 0; return ___cxa_throw($55,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $58=$53;
 var $59=$53;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP32[(($__decimal_point)>>2)]=$63;
 var $64=HEAP32[(($59)>>2)];
 var $65=(($64+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$66]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP32[(($__thousands_sep)>>2)]=$67;
 var $68=$53;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+20)|0);
 var $71=HEAP32[(($70)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($agg_result,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $72=HEAP32[(($1)>>2)];
 var $73=(($72)|0);
 var $74=__ZNSt3__114__shared_count16__release_sharedEv($73);
 STACKTOP=sp;return;
 case 18: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=HEAP32[(($1)>>2)];
 var $78=(($77)|0);
 var $79=__ZNSt3__114__shared_count16__release_sharedEv($78);
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__ct|0)==($__decimal_point|0);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $6=HEAP32[(($__a_end)>>2)];
 var $7=(($6+1)|0);
 HEAP32[(($__a_end)>>2)]=$7;
 HEAP8[($6)]=46;
 var $8=$__grouping;
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($__grouping+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=6;break;
 case 5: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=6;break;
 case 6: 
 var $18;
 var $19=($18|0)==0;
 if($19){var $_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $21=HEAP32[(($__g_end)>>2)];
 var $22=$21;
 var $23=$__g;
 var $24=((($22)-($23))|0);
 var $25=($24|0)<160;
 if($25){label=8;break;}else{var $_0=0;label=36;break;}
 case 8: 
 var $27=HEAP32[(($__dc)>>2)];
 var $28=(($21+4)|0);
 HEAP32[(($__g_end)>>2)]=$28;
 HEAP32[(($21)>>2)]=$27;
 var $_0=0;label=36;break;
 case 9: 
 var $30=($__ct|0)==($__thousands_sep|0);
 if($30){label=10;break;}else{label=17;break;}
 case 10: 
 var $32=$__grouping;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $42=$38;label=13;break;
 case 12: 
 var $40=($33&255);
 var $41=$40>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=14;break;}
 case 14: 
 var $45=HEAP8[($__in_units)];
 var $46=(($45<<24)>>24)==0;
 if($46){var $_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP32[(($__g_end)>>2)];
 var $49=$48;
 var $50=$__g;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<160;
 if($52){label=16;break;}else{var $_0=0;label=36;break;}
 case 16: 
 var $54=HEAP32[(($__dc)>>2)];
 var $55=(($48+4)|0);
 HEAP32[(($__g_end)>>2)]=$55;
 HEAP32[(($48)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=36;break;
 case 17: 
 var $57=(($__atoms+128)|0);
 var $_01_i=$__atoms;label=19;break;
 case 18: 
 var $59=($63|0)==($57|0);
 if($59){var $_0_lcssa_i=$57;label=20;break;}else{var $_01_i=$63;label=19;break;}
 case 19: 
 var $_01_i;
 var $61=HEAP32[(($_01_i)>>2)];
 var $62=($61|0)==($__ct|0);
 var $63=(($_01_i+4)|0);
 if($62){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $64=$_0_lcssa_i;
 var $65=$__atoms;
 var $66=((($64)-($65))|0);
 var $67=$66>>2;
 var $68=($66|0)>124;
 if($68){var $_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $70=((11760+$67)|0);
 var $71=HEAP8[($70)];
 if(($67|0)==25|($67|0)==24){ label=22;break;}else if(($67|0)==22|($67|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $73=HEAP32[(($__a_end)>>2)];
 var $74=($73|0)==($__a|0);
 if($74){label=24;break;}else{label=23;break;}
 case 23: 
 var $76=((($73)-(1))|0);
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=$78&95;
 var $80=HEAP8[($__exp)];
 var $81=($80&255);
 var $82=$81&127;
 var $83=($79|0)==($82|0);
 if($83){label=24;break;}else{var $_0=-1;label=36;break;}
 case 24: 
 var $85=(($73+1)|0);
 HEAP32[(($__a_end)>>2)]=$85;
 HEAP8[($73)]=$71;
 var $_0=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 label=34;break;
 case 26: 
 var $88=($71&255);
 var $89=$88&95;
 var $90=HEAP8[($__exp)];
 var $91=(($90<<24)>>24);
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=34;break;}
 case 27: 
 var $94=$90|-128;
 HEAP8[($__exp)]=$94;
 var $95=HEAP8[($__in_units)];
 var $96=(($95<<24)>>24)==0;
 if($96){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $98=$__grouping;
 var $99=HEAP8[($98)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($__grouping+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=31;break;
 case 30: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=31;break;
 case 31: 
 var $108;
 var $109=($108|0)==0;
 if($109){label=34;break;}else{label=32;break;}
 case 32: 
 var $111=HEAP32[(($__g_end)>>2)];
 var $112=$111;
 var $113=$__g;
 var $114=((($112)-($113))|0);
 var $115=($114|0)<160;
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=HEAP32[(($__dc)>>2)];
 var $118=(($111+4)|0);
 HEAP32[(($__g_end)>>2)]=$118;
 HEAP32[(($111)>>2)]=$117;
 label=34;break;
 case 34: 
 var $120=HEAP32[(($__a_end)>>2)];
 var $121=(($120+1)|0);
 HEAP32[(($__a_end)>>2)]=$121;
 HEAP8[($120)]=$71;
 var $122=($66|0)>84;
 if($122){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $124=HEAP32[(($__dc)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($__dc)>>2)]=$125;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $__nm=(sp)+(32);
 var $3=(($__iob+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__s)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($1)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=($__v&1);
 FUNCTION_TABLE[$11]($agg_result,$this,$1,$__iob,$__fl,$15);
 label=30;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $17=(($2)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $20=HEAP32[((14992)>>2)];
 var $21=($20|0)==-1;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($__p_i_i_i_i)|0);
 HEAP32[(($23)>>2)]=14992;
 var $24=(($__p_i_i_i_i+4)|0);
 HEAP32[(($24)>>2)]=(26);
 var $25=(($__p_i_i_i_i+8)|0);
 HEAP32[(($25)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14992,$19,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=27;break; }
 case 5: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $26=HEAP32[((14996)>>2)];
 var $27=((($26)-(1))|0);
 var $28=(($18+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($18+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=7;break;}else{label=9;break;}
 case 7: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 __ZNSt8bad_castC2Ev($41);
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=27;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $43=$38;
 var $44=HEAP32[(($17)>>2)];
 var $45=(($44)|0);
 var $46=__ZNSt3__114__shared_count16__release_sharedEv($45);
 var $47=$38;
 var $48=HEAP32[(($47)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $50=(($48+24)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($__nm,$43);
 label=12;break;
 case 11: 
 var $53=(($48+28)|0);
 var $54=HEAP32[(($53)>>2)];
 FUNCTION_TABLE[$54]($__nm,$43);
 label=12;break;
 case 12: 
 var $56=$__nm;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=14;break;}else{label=13;break;}
 case 13: 
 var $61=(($__nm+8)|0);
 var $62=HEAP32[(($61)>>2)];
 var $_pre4=$__nm;
 var $_pre5=(($_pre4+1)|0);
 var $_ph=$62;var $_pre_phi6=$_pre5;var $_pre_phi8=$61;label=15;break;
 case 14: 
 var $64=$__nm;
 var $65=(($64+1)|0);
 var $_pre7=(($__nm+8)|0);
 var $_ph=$65;var $_pre_phi6=$65;var $_pre_phi8=$_pre7;label=15;break;
 case 15: 
 var $_pre_phi8;
 var $_pre_phi6;
 var $_ph;
 var $66=(($__s)|0);
 var $67=(($__nm+4)|0);
 var $69=$_ph;var $68=$57;label=16;break;
 case 16: 
 var $68;
 var $69;
 var $70=$68&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=18;break;}else{label=17;break;}
 case 17: 
 var $73=HEAP32[(($_pre_phi8)>>2)];
 var $74=HEAP32[(($67)>>2)];
 var $79=$74;var $78=$73;label=19;break;
 case 18: 
 var $76=($68&255);
 var $77=$76>>>1;
 var $79=$77;var $78=$_pre_phi6;label=19;break;
 case 19: 
 var $78;
 var $79;
 var $80=(($78+$79)|0);
 var $81=($69|0)==($80|0);
 if($81){label=29;break;}else{label=20;break;}
 case 20: 
 var $83=HEAP8[($69)];
 var $84=HEAP32[(($66)>>2)];
 var $85=($84|0)==0;
 if($85){label=26;break;}else{label=21;break;}
 case 21: 
 var $87=(($84+24)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($84+28)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($88|0)==($90|0);
 if($91){label=23;break;}else{label=22;break;}
 case 22: 
 var $92=(($88+1)|0);
 HEAP32[(($87)>>2)]=$92;
 HEAP8[($88)]=$83;
 label=26;break;
 case 23: 
 var $93=$84;
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+52)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($83&255);
 var $98=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($84,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=28;break; }
 case 24: 
 var $99=($98|0)==-1;
 if($99){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($66)>>2)]=0;
 label=26;break;
 case 26: 
 var $101=(($69+1)|0);
 var $_pre=HEAP8[($56)];
 var $69=$101;var $68=$_pre;label=16;break;
 case 27: 
 var $103$0 = ___cxa_find_matching_catch(-1, -1); var $103$1 = tempRet0;
 var $104=$103$0;
 var $105=$103$1;
 var $106=HEAP32[(($17)>>2)];
 var $107=(($106)|0);
 var $108=__ZNSt3__114__shared_count16__release_sharedEv($107);
 var $_0=$104;var $_01=$105;label=31;break;
 case 28: 
 var $110$0 = ___cxa_find_matching_catch(-1, -1); var $110$1 = tempRet0;
 var $111=$110$0;
 var $112=$110$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 var $_0=$111;var $_01=$112;label=31;break;
 case 29: 
 var $114=HEAP32[(($66)>>2)];
 var $115=(($agg_result)|0);
 HEAP32[(($115)>>2)]=$114;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 label=30;break;
 case 30: 
 STACKTOP=sp;return;
 case 31: 
 var $_01;
 var $_0;
 var $118$0=$_0;
 var $118$1=0;
 var $119$0=$118$0;
 var $119$1=$_01;
 ___resumeException($119$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(sp)+(72);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4000)];HEAP8[((($3)+(1))|0)]=HEAP8[(4001)];HEAP8[((($3)+(2))|0)]=HEAP8[(4002)];HEAP8[((($3)+(3))|0)]=HEAP8[(4003)];HEAP8[((($3)+(4))|0)]=HEAP8[(4004)];HEAP8[((($3)+(5))|0)]=HEAP8[(4005)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(15936)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(15936);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((13832)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((13832)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i1,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsnprintf($__s,$__n,$__format,$1);

 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 ___clang_call_terminate($10);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((15376)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=15376;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$3,266);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((15380)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,10104,(378));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((14992)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=14992;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(26);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14992,$28,266);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((14996)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,10104,(378));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 var $56=$__grouping;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=13;break;}else{label=12;break;}
 case 12: 
 var $61=(($__grouping+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $66=$62;label=14;break;
 case 13: 
 var $64=($57&255);
 var $65=$64>>>1;
 var $66=$65;label=14;break;
 case 14: 
 var $66;
 var $67=($66|0)==0;
 if($67){label=15;break;}else{label=20;break;}
 case 15: 
 var $69=$22;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+32)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($26,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $74=$__ne;
 var $75=$__nb;
 var $76=((($74)-($75))|0);
 var $77=(($__ob+$76)|0);
 HEAP32[(($__oe)>>2)]=$77;
 label=46;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $80=HEAP8[($__nb)];
 if((($80<<24)>>24)==45|(($80<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $82=$22;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+28)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($26,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $87=(($__nb+1)|0);
 var $88=HEAP32[(($__oe)>>2)];
 var $89=(($88+1)|0);
 HEAP32[(($__oe)>>2)]=$89;
 HEAP8[($88)]=$86;
 var $__nf_0=$87;label=23;break;
 case 23: 
 var $__nf_0;
 var $91=$__ne;
 var $92=$__nf_0;
 var $93=((($91)-($92))|0);
 var $94=($93|0)>1;
 if($94){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $96=HEAP8[($__nf_0)];
 var $97=(($96<<24)>>24)==48;
 if($97){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $99=(($__nf_0+1)|0);
 var $100=HEAP8[($99)];
 if((($100<<24)>>24)==120|(($100<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $102=$22;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+28)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$105]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $107=HEAP32[(($__oe)>>2)];
 var $108=(($107+1)|0);
 HEAP32[(($__oe)>>2)]=$108;
 HEAP8[($107)]=$106;
 var $109=HEAP8[($99)];
 var $110=HEAP32[(($102)>>2)];
 var $111=(($110+28)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($26,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $114=(($__nf_0+2)|0);
 var $115=HEAP32[(($__oe)>>2)];
 var $116=(($115+1)|0);
 HEAP32[(($__oe)>>2)]=$116;
 HEAP8[($115)]=$113;
 var $__nf_1=$114;label=29;break;
 case 29: 
 var $__nf_1;
 var $118=($__nf_1|0)==($__ne|0);
 if($118){label=32;break;}else{label=30;break;}
 case 30: 
 var $119=((($__ne)-(1))|0);
 var $120=($119>>>0)>($__nf_1>>>0);
 if($120){var $_012_i_i=$__nf_1;var $121=$119;label=31;break;}else{label=32;break;}
 case 31: 
 var $121;
 var $_012_i_i;
 var $122=HEAP8[($_012_i_i)];
 var $123=HEAP8[($121)];
 HEAP8[($_012_i_i)]=$123;
 HEAP8[($121)]=$122;
 var $124=(($_012_i_i+1)|0);
 var $125=((($121)-(1))|0);
 var $126=($124>>>0)<($125>>>0);
 if($126){var $_012_i_i=$124;var $121=$125;label=31;break;}else{label=32;break;}
 case 32: 
 var $127=$47;
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$130]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $132=($__nf_1>>>0)<($__ne>>>0);
 if($132){label=34;break;}else{label=43;break;}
 case 34: 
 var $133=$__grouping;
 var $134=(($133+1)|0);
 var $135=$22;
 var $136=(($__grouping+4)|0);
 var $137=(($__grouping+8)|0);
 var $__dc_013=0;var $__dg_014=0;var $__p_015=$__nf_1;label=35;break;
 case 35: 
 var $__p_015;
 var $__dg_014;
 var $__dc_013;
 var $138=HEAP8[($56)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 var $141=HEAP32[(($137)>>2)];
 var $_=($140?$134:$141);
 var $142=(($_+$__dg_014)|0);
 var $143=HEAP8[($142)];
 var $144=(($143<<24)>>24)==0;
 if($144){var $__dg_1=$__dg_014;var $__dc_1=$__dc_013;label=41;break;}else{label=36;break;}
 case 36: 
 var $145=HEAP32[(($137)>>2)];
 var $_16=($140?$134:$145);
 var $146=(($_16+$__dg_014)|0);
 var $147=HEAP8[($146)];
 var $148=(($147<<24)>>24);
 var $149=($__dc_013|0)==($148|0);
 if($149){label=37;break;}else{var $__dg_1=$__dg_014;var $__dc_1=$__dc_013;label=41;break;}
 case 37: 
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+1)|0);
 HEAP32[(($__oe)>>2)]=$152;
 HEAP8[($151)]=$131;
 var $153=HEAP8[($56)];
 var $154=$153&1;
 var $155=(($154<<24)>>24)==0;
 if($155){label=39;break;}else{label=38;break;}
 case 38: 
 var $157=HEAP32[(($136)>>2)];
 var $161=$157;label=40;break;
 case 39: 
 var $159=($153&255);
 var $160=$159>>>1;
 var $161=$160;label=40;break;
 case 40: 
 var $161;
 var $162=((($161)-(1))|0);
 var $163=($__dg_014>>>0)<($162>>>0);
 var $164=($163&1);
 var $___dg_0=((($164)+($__dg_014))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=41;break;
 case 41: 
 var $__dc_1;
 var $__dg_1;
 var $166=HEAP8[($__p_015)];
 var $167=HEAP32[(($135)>>2)];
 var $168=(($167+28)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($26,$166) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=17;break; }
 case 42: 
 var $171=HEAP32[(($__oe)>>2)];
 var $172=(($171+1)|0);
 HEAP32[(($__oe)>>2)]=$172;
 HEAP8[($171)]=$170;
 var $173=((($__dc_1)+(1))|0);
 var $174=(($__p_015+1)|0);
 var $175=($174>>>0)<($__ne>>>0);
 if($175){var $__dc_013=$173;var $__dg_014=$__dg_1;var $__p_015=$174;label=35;break;}else{label=43;break;}
 case 43: 
 var $176=$__nf_1;
 var $177=$__nb;
 var $178=((($176)-($177))|0);
 var $179=(($__ob+$178)|0);
 var $180=HEAP32[(($__oe)>>2)];
 var $181=($179|0)==($180|0);
 if($181){label=46;break;}else{label=44;break;}
 case 44: 
 var $182=((($180)-(1))|0);
 var $183=($182>>>0)>($179>>>0);
 if($183){var $_012_i_i10=$179;var $184=$182;label=45;break;}else{label=46;break;}
 case 45: 
 var $184;
 var $_012_i_i10;
 var $185=HEAP8[($_012_i_i10)];
 var $186=HEAP8[($184)];
 HEAP8[($_012_i_i10)]=$186;
 HEAP8[($184)]=$185;
 var $187=(($_012_i_i10+1)|0);
 var $188=((($184)-(1))|0);
 var $189=($187>>>0)<($188>>>0);
 if($189){var $_012_i_i10=$187;var $184=$188;label=45;break;}else{label=46;break;}
 case 46: 
 var $190=($__np|0)==($__ne|0);
 if($190){label=47;break;}else{label=48;break;}
 case 47: 
 var $192=HEAP32[(($__oe)>>2)];
 var $storemerge=$192;label=49;break;
 case 48: 
 var $194=$__np;
 var $195=$__nb;
 var $196=((($194)-($195))|0);
 var $197=(($__ob+$196)|0);
 var $storemerge=$197;label=49;break;
 case 49: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $2=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(15936)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(15936);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((13832)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((13832)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,22,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=(($__o)|0);
 var $$etemp$3$0=41;
 var $$etemp$3$1=0;

 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25,$_0_i1,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 var $$etemp$4$0=41;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(sp)+(72);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4000)];HEAP8[((($3)+(1))|0)]=HEAP8[(4001)];HEAP8[((($3)+(2))|0)]=HEAP8[(4002)];HEAP8[((($3)+(3))|0)]=HEAP8[(4003)];HEAP8[((($3)+(4))|0)]=HEAP8[(4004)];HEAP8[((($3)+(5))|0)]=HEAP8[(4005)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(15936)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(15936);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((13832)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((13832)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i1,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $2=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(15936)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(15936);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((13832)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((13832)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,23,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=(($__o)|0);
 var $$etemp$3$0=43;
 var $$etemp$3$1=0;

 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25,$_0_i1,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 var $$etemp$4$0=43;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($22)]=70;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 9: 
 HEAP8[($22)]=102;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($22)]=69;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 12: 
 HEAP8[($22)]=101;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 13: 
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i12=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i12=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($22)]=71;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 18: 
 HEAP8[($22)]=103;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i12;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(15936)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(15936);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((13832)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((13832)>>2)];
 if($specify_precision_0_off0_ph_i12){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre19=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $103=0;var $102=$_pre19;label=47;break;
 case 29: 
 var $64=HEAP8[(15936)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i12){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(15936);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((13832)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((13832)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1217=$83;var $_118=$82;label=76;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(15936);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((13832)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((13832)>>2)];
 var $95=(($__iob+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$97;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $99=HEAP32[(($__nb)>>2)];
 var $100=($99|0)==0;
 if($100){label=45;break;}else{var $__nc_2=$__nc_1;var $103=$99;var $102=$99;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $103=$_pre;var $102=$_pre;label=47;break;
 case 47: 
 var $102;
 var $103;
 var $__nc_2;
 var $104=(($102+$__nc_2)|0);
 var $105=HEAP32[(($6)>>2)];
 var $106=$105&176;
 if(($106|0)==16){ label=48;break;}else if(($106|0)==32){ var $_0_i7=$104;label=54;break;}else{label=53;break;}
 case 48: 
 var $108=HEAP8[($102)];
 if((($108<<24)>>24)==45|(($108<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $110=(($102+1)|0);
 var $_0_i7=$110;label=54;break;
 case 50: 
 var $112=($__nc_2|0)>1;
 var $113=(($108<<24)>>24)==48;
 var $or_cond_i=$112&$113;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $115=(($102+1)|0);
 var $116=HEAP8[($115)];
 if((($116<<24)>>24)==120|(($116<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $118=(($102+2)|0);
 var $_0_i7=$118;label=54;break;
 case 53: 
 var $_0_i7=$102;label=54;break;
 case 54: 
 var $_0_i7;
 var $120=(($__o)|0);
 var $$etemp$3$0=57;
 var $$etemp$3$1=0;

 var $121=($102|0)==($43|0);
 if($121){var $__ob_0=$120;var $133=0;var $132=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $123=$__nc_2<<1;
 var $124=_malloc($123);
 var $125=($124|0)==0;
 if($125){label=56;break;}else{var $__ob_0=$124;var $133=$124;var $132=$102;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $128=0;label=58;break; }
 case 57: 
 var $_pre20=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $133=0;var $132=$_pre20;label=59;break;
 case 58: 
 var $128;
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $_0=$130;var $_01=$131;var $168=$128;label=70;break;
 case 59: 
 var $132;
 var $133;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $128=$133;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($132,$_0_i7,$104,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=69;break; }
 case 61: 
 var $136=(($1)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137)|0);
 var $139=__ZNSt3__114__shared_count16__release_sharedEv($138);
 var $140=(($__s)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($3)|0);
 HEAP32[(($142)>>2)]=$141;
 var $143=HEAP32[(($__op)>>2)];
 var $144=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$143,$144,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $128=$133;label=58;break; }
 case 62: 
 var $146=(($2)|0);
 var $147=HEAP32[(($146)>>2)];
 HEAP32[(($140)>>2)]=$147;
 var $148=(($agg_result)|0);
 HEAP32[(($148)>>2)]=$147;
 var $149=($133|0)==0;
 if($149){label=65;break;}else{label=63;break;}
 case 63: 
 (function() { try { __THREW__ = 0; return _free($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=64;break; }
 case 64: 
 var $152$0 = ___cxa_find_matching_catch(-1, -1,0); var $152$1 = tempRet0;
 var $153=$152$0;
 ___clang_call_terminate($153);
 throw "Reached an unreachable!";
 case 65: 
 var $$etemp$4$0=57;
 var $$etemp$4$1=0;

 var $154=($103|0)==0;
 if($154){label=68;break;}else{label=66;break;}
 case 66: 
 (function() { try { __THREW__ = 0; return _free($103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=67;break; }
 case 67: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1,0); var $157$1 = tempRet0;
 var $158=$157$0;
 ___clang_call_terminate($158);
 throw "Reached an unreachable!";
 case 68: 
 STACKTOP=sp;return;
 case 69: 
 var $160$0 = ___cxa_find_matching_catch(-1, -1); var $160$1 = tempRet0;
 var $161=$160$0;
 var $162=$160$1;
 var $163=(($1)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=(($164)|0);
 var $166=__ZNSt3__114__shared_count16__release_sharedEv($165);
 var $_0=$161;var $_01=$162;var $168=$133;label=70;break;
 case 70: 
 var $168;
 var $_01;
 var $_0;
 var $169=($168|0)==0;
 if($169){label=73;break;}else{label=71;break;}
 case 71: 
 (function() { try { __THREW__ = 0; return _free($168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=72;break; }
 case 72: 
 var $172$0 = ___cxa_find_matching_catch(-1, -1,0); var $172$1 = tempRet0;
 var $173=$172$0;
 ___clang_call_terminate($173);
 throw "Reached an unreachable!";
 case 73: 
 var $174=($103|0)==0;
 if($174){var $_1217=$_01;var $_118=$_0;label=76;break;}else{label=74;break;}
 case 74: 
 (function() { try { __THREW__ = 0; return _free($103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1217=$_01;var $_118=$_0;label=76;break; } else { label=75;break; }
 case 75: 
 var $177$0 = ___cxa_find_matching_catch(-1, -1,0); var $177$1 = tempRet0;
 var $178=$177$0;
 ___clang_call_terminate($178);
 throw "Reached an unreachable!";
 case 76: 
 var $_118;
 var $_1217;
 var $179$0=$_118;
 var $179$1=0;
 var $180$0=$179$0;
 var $180$1=$_1217;
 ___resumeException($180$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=(function() { try { __THREW__ = 0; return _vasprintf($__s,$__format,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 

 var $6=($3|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 5: 
 STACKTOP=sp;return $4;
 case 6: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $14=($3|0)==0;
 if($14){label=9;break;}else{label=7;break;}
 case 7: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 var $19=$18$0;
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
 case 9: 
 ___resumeException($13$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((15376)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=15376;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$3,266);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((15380)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,10104,(378));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((14992)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=14992;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(26);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14992,$28,266);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((14996)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,10104,(378));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $56=HEAP8[($__nb)];
 if((($56<<24)>>24)==45|(($56<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $58=$22;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+28)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($26,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $63=(($__nb+1)|0);
 var $64=HEAP32[(($__oe)>>2)];
 var $65=(($64+1)|0);
 HEAP32[(($__oe)>>2)]=$65;
 HEAP8[($64)]=$62;
 var $__nf_0=$63;label=20;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit22$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit22$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit22$1;var $eh_lpad_body$0=$lpad_loopexit22$0;label=19;break;
 case 16: 
 var $lpad_loopexit30$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit30$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit30$1;var $eh_lpad_body$0=$lpad_loopexit30$0;label=19;break;
 case 17: 
 var $lpad_loopexit38$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit38$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit38$1;var $eh_lpad_body$0=$lpad_loopexit38$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit39$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit39$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit39$1;var $eh_lpad_body$0=$lpad_nonloopexit39$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $67=$__ne;
 var $68=$__nf_0;
 var $69=((($67)-($68))|0);
 var $70=($69|0)>1;
 if($70){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=($__nf_0>>>0)<($__ne>>>0);
 if($71){var $__ns_134=$__nf_0;label=36;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__nf_0;label=43;break;}
 case 22: 
 var $73=HEAP8[($__nf_0)];
 var $74=(($73<<24)>>24)==48;
 if($74){label=23;break;}else{label=21;break;}
 case 23: 
 var $76=(($__nf_0+1)|0);
 var $77=HEAP8[($76)];
 if((($77<<24)>>24)==120|(($77<<24)>>24)==88){ label=24;break;}else{label=21;break;}
 case 24: 
 var $79=$22;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+28)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $84=HEAP32[(($__oe)>>2)];
 var $85=(($84+1)|0);
 HEAP32[(($__oe)>>2)]=$85;
 HEAP8[($84)]=$83;
 var $86=(($__nf_0+2)|0);
 var $87=HEAP8[($76)];
 var $88=HEAP32[(($79)>>2)];
 var $89=(($88+28)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($26,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=18;break; }
 case 26: 
 var $92=HEAP32[(($__oe)>>2)];
 var $93=(($92+1)|0);
 HEAP32[(($__oe)>>2)]=$93;
 HEAP8[($92)]=$91;
 var $94=($86>>>0)<($__ne>>>0);
 if($94){var $__ns_043=$86;label=28;break;}else{var $__nf_1=$86;var $__ns_2=$86;label=43;break;}
 case 27: 
 var $96=($114>>>0)<($__ne>>>0);
 if($96){var $__ns_043=$114;label=28;break;}else{var $__nf_1=$86;var $__ns_2=$114;label=43;break;}
 case 28: 
 var $__ns_043;
 var $97=HEAP8[($__ns_043)];
 var $98=HEAP8[(15936)];
 var $99=(($98<<24)>>24)==0;
 if($99){label=29;break;}else{label=33;break;}
 case 29: 
 var $101=___cxa_guard_acquire(15936);
 var $102=($101|0)==0;
 if($102){label=33;break;}else{label=30;break;}
 case 30: 
 var $104=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=32;break; }
 case 31: 
 HEAP32[((13832)>>2)]=$104;

 label=33;break;
 case 32: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;

 var $eh_lpad_body$1=$107$1;var $eh_lpad_body$0=$107$0;label=19;break;
 case 33: 
 var $109=HEAP32[((13832)>>2)];
 var $110=(($97<<24)>>24);
 var $111=(function() { try { __THREW__ = 0; return _isxdigit_l($110,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=17;break; }
 case 34: 
 var $113=($111|0)==0;
 var $114=(($__ns_043+1)|0);
 if($113){var $__nf_1=$86;var $__ns_2=$__ns_043;label=43;break;}else{label=27;break;}
 case 35: 
 var $116=($134>>>0)<($__ne>>>0);
 if($116){var $__ns_134=$134;label=36;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$134;label=43;break;}
 case 36: 
 var $__ns_134;
 var $117=HEAP8[($__ns_134)];
 var $118=HEAP8[(15936)];
 var $119=(($118<<24)>>24)==0;
 if($119){label=37;break;}else{label=41;break;}
 case 37: 
 var $121=___cxa_guard_acquire(15936);
 var $122=($121|0)==0;
 if($122){label=41;break;}else{label=38;break;}
 case 38: 
 var $124=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=40;break; }
 case 39: 
 HEAP32[((13832)>>2)]=$124;

 label=41;break;
 case 40: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;

 var $eh_lpad_body$1=$127$1;var $eh_lpad_body$0=$127$0;label=19;break;
 case 41: 
 var $129=HEAP32[((13832)>>2)];
 var $130=(($117<<24)>>24);
 var $131=(function() { try { __THREW__ = 0; return _isdigit_l($130,$129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=16;break; }
 case 42: 
 var $133=($131|0)==0;
 var $134=(($__ns_134+1)|0);
 if($133){var $__nf_1=$__nf_0;var $__ns_2=$__ns_134;label=43;break;}else{label=35;break;}
 case 43: 
 var $__ns_2;
 var $__nf_1;
 var $135=$__grouping;
 var $136=HEAP8[($135)];
 var $137=$136&1;
 var $138=(($137<<24)>>24)==0;
 if($138){label=45;break;}else{label=44;break;}
 case 44: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $145=$141;label=46;break;
 case 45: 
 var $143=($136&255);
 var $144=$143>>>1;
 var $145=$144;label=46;break;
 case 46: 
 var $145;
 var $146=($145|0)==0;
 if($146){label=47;break;}else{label=49;break;}
 case 47: 
 var $148=HEAP32[(($__oe)>>2)];
 var $149=$22;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+32)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$152]($26,$__nf_1,$__ns_2,$148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=18;break; }
 case 48: 
 var $154=$__ns_2;
 var $155=$__nf_1;
 var $156=((($154)-($155))|0);
 var $157=HEAP32[(($__oe)>>2)];
 var $158=(($157+$156)|0);
 HEAP32[(($__oe)>>2)]=$158;
 label=66;break;
 case 49: 
 var $160=($__nf_1|0)==($__ns_2|0);
 if($160){label=52;break;}else{label=50;break;}
 case 50: 
 var $161=((($__ns_2)-(1))|0);
 var $162=($161>>>0)>($__nf_1>>>0);
 if($162){var $_012_i_i=$__nf_1;var $163=$161;label=51;break;}else{label=52;break;}
 case 51: 
 var $163;
 var $_012_i_i;
 var $164=HEAP8[($_012_i_i)];
 var $165=HEAP8[($163)];
 HEAP8[($_012_i_i)]=$165;
 HEAP8[($163)]=$164;
 var $166=(($_012_i_i+1)|0);
 var $167=((($163)-(1))|0);
 var $168=($166>>>0)<($167>>>0);
 if($168){var $_012_i_i=$166;var $163=$167;label=51;break;}else{label=52;break;}
 case 52: 
 var $169=$47;
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+16)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$172]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=18;break; }
 case 53: 
 var $174=($__nf_1>>>0)<($__ns_2>>>0);
 if($174){label=54;break;}else{label=63;break;}
 case 54: 
 var $175=$__grouping;
 var $176=(($175+1)|0);
 var $177=(($__grouping+4)|0);
 var $178=(($__grouping+8)|0);
 var $179=$22;
 var $__dc_025=0;var $__dg_026=0;var $__p_027=$__nf_1;label=55;break;
 case 55: 
 var $__p_027;
 var $__dg_026;
 var $__dc_025;
 var $180=HEAP8[($135)];
 var $181=$180&1;
 var $182=(($181<<24)>>24)==0;
 var $183=HEAP32[(($178)>>2)];
 var $_=($182?$176:$183);
 var $184=(($_+$__dg_026)|0);
 var $185=HEAP8[($184)];
 var $186=(($185<<24)>>24)>0;
 if($186){label=56;break;}else{var $__dg_1=$__dg_026;var $__dc_1=$__dc_025;label=61;break;}
 case 56: 
 var $187=HEAP32[(($178)>>2)];
 var $_58=($182?$176:$187);
 var $188=(($_58+$__dg_026)|0);
 var $189=HEAP8[($188)];
 var $190=(($189<<24)>>24);
 var $191=($__dc_025|0)==($190|0);
 if($191){label=57;break;}else{var $__dg_1=$__dg_026;var $__dc_1=$__dc_025;label=61;break;}
 case 57: 
 var $193=HEAP32[(($__oe)>>2)];
 var $194=(($193+1)|0);
 HEAP32[(($__oe)>>2)]=$194;
 HEAP8[($193)]=$173;
 var $195=HEAP8[($135)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=59;break;}else{label=58;break;}
 case 58: 
 var $199=HEAP32[(($177)>>2)];
 var $203=$199;label=60;break;
 case 59: 
 var $201=($195&255);
 var $202=$201>>>1;
 var $203=$202;label=60;break;
 case 60: 
 var $203;
 var $204=((($203)-(1))|0);
 var $205=($__dg_026>>>0)<($204>>>0);
 var $206=($205&1);
 var $___dg_0=((($206)+($__dg_026))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=61;break;
 case 61: 
 var $__dc_1;
 var $__dg_1;
 var $208=HEAP8[($__p_027)];
 var $209=HEAP32[(($179)>>2)];
 var $210=(($209+28)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$211]($26,$208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=15;break; }
 case 62: 
 var $213=HEAP32[(($__oe)>>2)];
 var $214=(($213+1)|0);
 HEAP32[(($__oe)>>2)]=$214;
 HEAP8[($213)]=$212;
 var $215=((($__dc_1)+(1))|0);
 var $216=(($__p_027+1)|0);
 var $217=($216>>>0)<($__ns_2>>>0);
 if($217){var $__dc_025=$215;var $__dg_026=$__dg_1;var $__p_027=$216;label=55;break;}else{label=63;break;}
 case 63: 
 var $218=$__nf_1;
 var $219=$__nb;
 var $220=((($218)-($219))|0);
 var $221=(($__ob+$220)|0);
 var $222=HEAP32[(($__oe)>>2)];
 var $223=($221|0)==($222|0);
 if($223){label=66;break;}else{label=64;break;}
 case 64: 
 var $224=((($222)-(1))|0);
 var $225=($224>>>0)>($221>>>0);
 if($225){var $_012_i_i13=$221;var $226=$224;label=65;break;}else{label=66;break;}
 case 65: 
 var $226;
 var $_012_i_i13;
 var $227=HEAP8[($_012_i_i13)];
 var $228=HEAP8[($226)];
 HEAP8[($_012_i_i13)]=$228;
 HEAP8[($226)]=$227;
 var $229=(($_012_i_i13+1)|0);
 var $230=((($226)-(1))|0);
 var $231=($229>>>0)<($230>>>0);
 if($231){var $_012_i_i13=$229;var $226=$230;label=65;break;}else{label=66;break;}
 case 66: 
 var $232=($__ns_2>>>0)<($__ne>>>0);
 if($232){label=67;break;}else{var $__nf_3=$__ns_2;label=73;break;}
 case 67: 
 var $233=$22;
 var $__nf_221=$__ns_2;label=68;break;
 case 68: 
 var $__nf_221;
 var $235=HEAP8[($__nf_221)];
 var $236=(($235<<24)>>24)==46;
 if($236){label=69;break;}else{label=71;break;}
 case 69: 
 var $238=$47;
 var $239=HEAP32[(($238)>>2)];
 var $240=(($239+12)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$241]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=18;break; }
 case 70: 
 var $243=HEAP32[(($__oe)>>2)];
 var $244=(($243+1)|0);
 HEAP32[(($__oe)>>2)]=$244;
 HEAP8[($243)]=$242;
 var $245=(($__nf_221+1)|0);
 var $__nf_3=$245;label=73;break;
 case 71: 
 var $247=HEAP32[(($233)>>2)];
 var $248=(($247+28)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$249]($26,$235) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=14;break; }
 case 72: 
 var $251=HEAP32[(($__oe)>>2)];
 var $252=(($251+1)|0);
 HEAP32[(($__oe)>>2)]=$252;
 HEAP8[($251)]=$250;
 var $253=(($__nf_221+1)|0);
 var $254=($253>>>0)<($__ne>>>0);
 if($254){var $__nf_221=$253;label=68;break;}else{var $__nf_3=$253;label=73;break;}
 case 73: 
 var $__nf_3;
 var $255=HEAP32[(($__oe)>>2)];
 var $256=$22;
 var $257=HEAP32[(($256)>>2)];
 var $258=(($257+32)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$259]($26,$__nf_3,$__ne,$255) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=18;break; }
 case 74: 
 var $261=$__nf_3;
 var $262=((($67)-($261))|0);
 var $263=HEAP32[(($__oe)>>2)];
 var $264=(($263+$262)|0);
 HEAP32[(($__oe)>>2)]=$264;
 var $265=($__np|0)==($__ne|0);
 if($265){var $storemerge=$264;label=76;break;}else{label=75;break;}
 case 75: 
 var $267=$__np;
 var $268=$__nb;
 var $269=((($267)-($268))|0);
 var $270=(($__ob+$269)|0);
 var $storemerge=$270;label=76;break;
 case 76: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 HEAP8[($22)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep16=(($_1_i+1)|0);
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep16)]=65;
 var $specify_precision_0_off0_ph_i17=0;label=19;break;
 case 15: 
 HEAP8[($scevgep16)]=97;
 var $specify_precision_0_off0_ph_i17=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i17;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(15936)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(15936);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((13832)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((13832)>>2)];
 if($specify_precision_0_off0_ph_i17){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre14=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $101=0;var $100=$_pre14;label=47;break;
 case 29: 
 var $64=HEAP8[(15936)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i17){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(15936);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((13832)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((13832)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1212=$83;var $_113=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(15936);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((13832)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((13832)>>2)];
 var $95=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$95;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $97=HEAP32[(($__nb)>>2)];
 var $98=($97|0)==0;
 if($98){label=45;break;}else{var $__nc_2=$__nc_1;var $101=$97;var $100=$97;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $101=$_pre;var $100=$_pre;label=47;break;
 case 47: 
 var $100;
 var $101;
 var $__nc_2;
 var $102=(($100+$__nc_2)|0);
 var $103=HEAP32[(($6)>>2)];
 var $104=$103&176;
 if(($104|0)==16){ label=48;break;}else if(($104|0)==32){ var $_0_i7=$102;label=54;break;}else{label=53;break;}
 case 48: 
 var $106=HEAP8[($100)];
 if((($106<<24)>>24)==45|(($106<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $108=(($100+1)|0);
 var $_0_i7=$108;label=54;break;
 case 50: 
 var $110=($__nc_2|0)>1;
 var $111=(($106<<24)>>24)==48;
 var $or_cond_i=$110&$111;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $113=(($100+1)|0);
 var $114=HEAP8[($113)];
 if((($114<<24)>>24)==120|(($114<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $116=(($100+2)|0);
 var $_0_i7=$116;label=54;break;
 case 53: 
 var $_0_i7=$100;label=54;break;
 case 54: 
 var $_0_i7;
 var $118=(($__o)|0);
 var $$etemp$3$0=57;
 var $$etemp$3$1=0;

 var $119=($100|0)==($43|0);
 if($119){var $__ob_0=$118;var $131=0;var $130=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $121=$__nc_2<<1;
 var $122=_malloc($121);
 var $123=($122|0)==0;
 if($123){label=56;break;}else{var $__ob_0=$122;var $131=$122;var $130=$100;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $126=0;label=58;break; }
 case 57: 
 var $_pre15=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $131=0;var $130=$_pre15;label=59;break;
 case 58: 
 var $126;
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $_0=$128;var $_01=$129;var $160=$126;label=68;break;
 case 59: 
 var $130;
 var $131;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $126=$131;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($130,$_0_i7,$102,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $134=(($1)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135)|0);
 var $137=__ZNSt3__114__shared_count16__release_sharedEv($136);
 var $138=(($__s)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($3)|0);
 HEAP32[(($140)>>2)]=$139;
 var $141=HEAP32[(($__op)>>2)];
 var $142=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$141,$142,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $126=$131;label=58;break; }
 case 62: 
 var $144=(($2)|0);
 var $145=HEAP32[(($144)>>2)];
 HEAP32[(($138)>>2)]=$145;
 var $146=(($agg_result)|0);
 HEAP32[(($146)>>2)]=$145;
 var $147=($131|0)==0;
 if($147){label=64;break;}else{label=63;break;}
 case 63: 
 _free($131);
 label=64;break;
 case 64: 
 var $$etemp$4$0=57;
 var $$etemp$4$1=0;

 var $149=($101|0)==0;
 if($149){label=66;break;}else{label=65;break;}
 case 65: 
 _free($101);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $152$0 = ___cxa_find_matching_catch(-1, -1); var $152$1 = tempRet0;
 var $153=$152$0;
 var $154=$152$1;
 var $155=(($1)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156)|0);
 var $158=__ZNSt3__114__shared_count16__release_sharedEv($157);
 var $_0=$153;var $_01=$154;var $160=$131;label=68;break;
 case 68: 
 var $160;
 var $_01;
 var $_0;
 var $161=($160|0)==0;
 if($161){label=70;break;}else{label=69;break;}
 case 69: 
 _free($160);
 label=70;break;
 case 70: 
 var $163=($101|0)==0;
 if($163){var $_1212=$_01;var $_113=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($101);
 var $_1212=$_01;var $_113=$_0;label=72;break;
 case 72: 
 var $_113;
 var $_1212;
 var $165$0=$_113;
 var $165$1=0;
 var $166$0=$165$0;
 var $166$1=$_1212;
 ___resumeException($166$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(sp)+(88);
 var $2=(sp)+(96);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4008)];HEAP8[((($3)+(1))|0)]=HEAP8[(4009)];HEAP8[((($3)+(2))|0)]=HEAP8[(4010)];HEAP8[((($3)+(3))|0)]=HEAP8[(4011)];HEAP8[((($3)+(4))|0)]=HEAP8[(4012)];HEAP8[((($3)+(5))|0)]=HEAP8[(4013)];
 var $4=(($__nar)|0);
 var $5=HEAP8[(15936)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=___cxa_guard_acquire(15936);
 var $9=($8|0)==0;
 if($9){label=6;break;}else{label=3;break;}
 case 3: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((13832)>>2)]=$11;

 label=6;break;
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 6: 
 var $15=HEAP32[((13832)>>2)];
 var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$15,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=(($__nar+$16)|0);
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&176;
 if(($20|0)==32){ var $_0_i=$17;label=13;break;}else if(($20|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $22=HEAP8[($4)];
 if((($22<<24)>>24)==45|(($22<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $24=(($__nar+1)|0);
 var $_0_i=$24;label=13;break;
 case 9: 
 var $26=($16|0)>1;
 var $27=(($22<<24)>>24)==48;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $29=(($__nar+1)|0);
 var $30=HEAP8[($29)];
 if((($30<<24)>>24)==120|(($30<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $32=(($__nar+2)|0);
 var $_0_i=$32;label=13;break;
 case 12: 
 var $_0_i=$4;label=13;break;
 case 13: 
 var $_0_i;
 var $34=(($__o)|0);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;

 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $35=(($1)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $38=HEAP32[((15376)>>2)];
 var $39=($38|0)==-1;
 if($39){label=15;break;}else{label=14;break;}
 case 14: 
 var $41=(($__p_i_i_i_i)|0);
 HEAP32[(($41)>>2)]=15376;
 var $42=(($__p_i_i_i_i+4)|0);
 HEAP32[(($42)>>2)]=(26);
 var $43=(($__p_i_i_i_i+8)|0);
 HEAP32[(($43)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$37,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $44=HEAP32[((15380)>>2)];
 var $45=((($44)-(1))|0);
 var $46=(($36+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($36+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$47;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=$52>>2;
 var $54=($53>>>0)>($45>>>0);
 if($54){label=16;break;}else{label=17;break;}
 case 16: 
 var $55=(($49+($45<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==0;
 if($57){label=17;break;}else{label=19;break;}
 case 17: 
 var $58=___cxa_allocate_exception(4);
 var $59=$58;
 __ZNSt8bad_castC2Ev($59);
 (function() { try { __THREW__ = 0; return ___cxa_throw($58,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $61=$56;
 var $62=HEAP32[(($35)>>2)];
 var $63=(($62)|0);
 var $64=__ZNSt3__114__shared_count16__release_sharedEv($63);
 var $65=$56;
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+32)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=FUNCTION_TABLE[$68]($61,$4,$17,$34);
 var $70=(($__o+$16)|0);
 var $71=($_0_i|0)==($17|0);
 if($71){var $__op_0=$70;label=22;break;}else{label=21;break;}
 case 20: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=HEAP32[(($35)>>2)];
 var $75=(($74)|0);
 var $76=__ZNSt3__114__shared_count16__release_sharedEv($75);
 ___resumeException($73$0)
 case 21: 
 var $78=$__nar;
 var $79=$_0_i;
 var $80=((($79)-($78))|0);
 var $81=(($__o+$80)|0);
 var $__op_0=$81;label=22;break;
 case 22: 
 var $__op_0;
 var $83=(($__s)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($2)|0);
 HEAP32[(($85)>>2)]=$84;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$34,$__op_0,$70,$__iob,$__fl);
 var $$etemp$3$0=37;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $__nm=(sp)+(32);
 var $3=(($__iob+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__s)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($1)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=($__v&1);
 FUNCTION_TABLE[$11]($agg_result,$this,$1,$__iob,$__fl,$15);
 label=30;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $17=(($2)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $20=HEAP32[((14984)>>2)];
 var $21=($20|0)==-1;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($__p_i_i_i_i)|0);
 HEAP32[(($23)>>2)]=14984;
 var $24=(($__p_i_i_i_i+4)|0);
 HEAP32[(($24)>>2)]=(26);
 var $25=(($__p_i_i_i_i+8)|0);
 HEAP32[(($25)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14984,$19,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=27;break; }
 case 5: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $26=HEAP32[((14988)>>2)];
 var $27=((($26)-(1))|0);
 var $28=(($18+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($18+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=7;break;}else{label=9;break;}
 case 7: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 __ZNSt8bad_castC2Ev($41);
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=27;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $43=$38;
 var $44=HEAP32[(($17)>>2)];
 var $45=(($44)|0);
 var $46=__ZNSt3__114__shared_count16__release_sharedEv($45);
 var $47=$38;
 var $48=HEAP32[(($47)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $50=(($48+24)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($__nm,$43);
 label=12;break;
 case 11: 
 var $53=(($48+28)|0);
 var $54=HEAP32[(($53)>>2)];
 FUNCTION_TABLE[$54]($__nm,$43);
 label=12;break;
 case 12: 
 var $56=$__nm;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=14;break;}else{label=13;break;}
 case 13: 
 var $61=(($__nm+8)|0);
 var $62=HEAP32[(($61)>>2)];
 var $_pre4=(($__nm+4)|0);
 var $_ph=$62;var $_pre_phi=$_pre4;var $_pre_phi6=$61;label=15;break;
 case 14: 
 var $64=(($__nm+4)|0);
 var $_pre5=(($__nm+8)|0);
 var $_ph=$64;var $_pre_phi=$64;var $_pre_phi6=$_pre5;label=15;break;
 case 15: 
 var $_pre_phi6;
 var $_pre_phi;
 var $_ph;
 var $65=(($__s)|0);
 var $67=$_ph;var $66=$57;label=16;break;
 case 16: 
 var $66;
 var $67;
 var $68=$66&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=18;break;}else{label=17;break;}
 case 17: 
 var $71=HEAP32[(($_pre_phi6)>>2)];
 var $72=HEAP32[(($_pre_phi)>>2)];
 var $77=$72;var $76=$71;label=19;break;
 case 18: 
 var $74=($66&255);
 var $75=$74>>>1;
 var $77=$75;var $76=$_pre_phi;label=19;break;
 case 19: 
 var $76;
 var $77;
 var $78=(($76+($77<<2))|0);
 var $79=($67|0)==($78|0);
 if($79){label=29;break;}else{label=20;break;}
 case 20: 
 var $81=HEAP32[(($67)>>2)];
 var $82=HEAP32[(($65)>>2)];
 var $83=($82|0)==0;
 if($83){label=26;break;}else{label=21;break;}
 case 21: 
 var $85=(($82+24)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($82+28)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($86|0)==($88|0);
 if($89){label=22;break;}else{label=23;break;}
 case 22: 
 var $91=$82;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+52)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$94]($82,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$95;label=24;break; } else { label=28;break; }
 case 23: 
 var $97=(($86+4)|0);
 HEAP32[(($85)>>2)]=$97;
 HEAP32[(($86)>>2)]=$81;
 var $_0_i_i=$81;label=24;break;
 case 24: 
 var $_0_i_i;
 var $98=($_0_i_i|0)==-1;
 if($98){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($65)>>2)]=0;
 label=26;break;
 case 26: 
 var $100=(($67+4)|0);
 var $_pre=HEAP8[($56)];
 var $67=$100;var $66=$_pre;label=16;break;
 case 27: 
 var $102$0 = ___cxa_find_matching_catch(-1, -1); var $102$1 = tempRet0;
 var $103=$102$0;
 var $104=$102$1;
 var $105=HEAP32[(($17)>>2)];
 var $106=(($105)|0);
 var $107=__ZNSt3__114__shared_count16__release_sharedEv($106);
 var $_0=$103;var $_01=$104;label=31;break;
 case 28: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1); var $109$1 = tempRet0;
 var $110=$109$0;
 var $111=$109$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 var $_0=$110;var $_01=$111;label=31;break;
 case 29: 
 var $113=HEAP32[(($65)>>2)];
 var $114=(($agg_result)|0);
 HEAP32[(($114)>>2)]=$113;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 label=30;break;
 case 30: 
 STACKTOP=sp;return;
 case 31: 
 var $_01;
 var $_0;
 var $117$0=$_0;
 var $117$1=0;
 var $118$0=$117$0;
 var $118$1=$_01;
 ___resumeException($118$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4000)];HEAP8[((($3)+(1))|0)]=HEAP8[(4001)];HEAP8[((($3)+(2))|0)]=HEAP8[(4002)];HEAP8[((($3)+(3))|0)]=HEAP8[(4003)];HEAP8[((($3)+(4))|0)]=HEAP8[(4004)];HEAP8[((($3)+(5))|0)]=HEAP8[(4005)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(15936)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(15936);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((13832)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((13832)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=$__o;
 var $$etemp$0$0=84;
 var $$etemp$0$1=0;

 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i1,$37,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 var $$etemp$1$0=84;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((15368)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=15368;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$3,266);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((15372)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,10104,(378));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((14984)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=14984;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(26);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14984,$28,266);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((14988)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,10104,(378));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 var $56=$__grouping;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=13;break;}else{label=12;break;}
 case 12: 
 var $61=(($__grouping+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $66=$62;label=14;break;
 case 13: 
 var $64=($57&255);
 var $65=$64>>>1;
 var $66=$65;label=14;break;
 case 14: 
 var $66;
 var $67=($66|0)==0;
 if($67){label=15;break;}else{label=20;break;}
 case 15: 
 var $69=$22;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+48)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($26,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $74=$__ne;
 var $75=$__nb;
 var $76=((($74)-($75))|0);
 var $77=(($__ob+($76<<2))|0);
 HEAP32[(($__oe)>>2)]=$77;
 var $190=$77;label=47;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $80=HEAP8[($__nb)];
 if((($80<<24)>>24)==45|(($80<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $82=$22;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+44)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($26,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $87=(($__nb+1)|0);
 var $88=HEAP32[(($__oe)>>2)];
 var $89=(($88+4)|0);
 HEAP32[(($__oe)>>2)]=$89;
 HEAP32[(($88)>>2)]=$86;
 var $__nf_0=$87;label=23;break;
 case 23: 
 var $__nf_0;
 var $91=$__ne;
 var $92=$__nf_0;
 var $93=((($91)-($92))|0);
 var $94=($93|0)>1;
 if($94){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $96=HEAP8[($__nf_0)];
 var $97=(($96<<24)>>24)==48;
 if($97){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $99=(($__nf_0+1)|0);
 var $100=HEAP8[($99)];
 if((($100<<24)>>24)==120|(($100<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $102=$22;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+44)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$105]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $107=HEAP32[(($__oe)>>2)];
 var $108=(($107+4)|0);
 HEAP32[(($__oe)>>2)]=$108;
 HEAP32[(($107)>>2)]=$106;
 var $109=HEAP8[($99)];
 var $110=HEAP32[(($102)>>2)];
 var $111=(($110+44)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($26,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $114=(($__nf_0+2)|0);
 var $115=HEAP32[(($__oe)>>2)];
 var $116=(($115+4)|0);
 HEAP32[(($__oe)>>2)]=$116;
 HEAP32[(($115)>>2)]=$113;
 var $__nf_1=$114;label=29;break;
 case 29: 
 var $__nf_1;
 var $118=($__nf_1|0)==($__ne|0);
 if($118){label=32;break;}else{label=30;break;}
 case 30: 
 var $119=((($__ne)-(1))|0);
 var $120=($119>>>0)>($__nf_1>>>0);
 if($120){var $_012_i_i=$__nf_1;var $121=$119;label=31;break;}else{label=32;break;}
 case 31: 
 var $121;
 var $_012_i_i;
 var $122=HEAP8[($_012_i_i)];
 var $123=HEAP8[($121)];
 HEAP8[($_012_i_i)]=$123;
 HEAP8[($121)]=$122;
 var $124=(($_012_i_i+1)|0);
 var $125=((($121)-(1))|0);
 var $126=($124>>>0)<($125>>>0);
 if($126){var $_012_i_i=$124;var $121=$125;label=31;break;}else{label=32;break;}
 case 32: 
 var $127=$47;
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$130]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $132=($__nf_1>>>0)<($__ne>>>0);
 if($132){label=35;break;}else{label=34;break;}
 case 34: 
 var $_pre=HEAP32[(($__oe)>>2)];
 var $176=$_pre;label=44;break;
 case 35: 
 var $133=$__grouping;
 var $134=(($133+1)|0);
 var $135=$22;
 var $136=(($__grouping+4)|0);
 var $137=(($__grouping+8)|0);
 var $__dc_012=0;var $__dg_013=0;var $__p_014=$__nf_1;label=36;break;
 case 36: 
 var $__p_014;
 var $__dg_013;
 var $__dc_012;
 var $138=HEAP8[($56)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 var $141=HEAP32[(($137)>>2)];
 var $_=($140?$134:$141);
 var $142=(($_+$__dg_013)|0);
 var $143=HEAP8[($142)];
 var $144=(($143<<24)>>24)==0;
 if($144){var $__dg_1=$__dg_013;var $__dc_1=$__dc_012;label=42;break;}else{label=37;break;}
 case 37: 
 var $145=HEAP32[(($137)>>2)];
 var $_15=($140?$134:$145);
 var $146=(($_15+$__dg_013)|0);
 var $147=HEAP8[($146)];
 var $148=(($147<<24)>>24);
 var $149=($__dc_012|0)==($148|0);
 if($149){label=38;break;}else{var $__dg_1=$__dg_013;var $__dc_1=$__dc_012;label=42;break;}
 case 38: 
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+4)|0);
 HEAP32[(($__oe)>>2)]=$152;
 HEAP32[(($151)>>2)]=$131;
 var $153=HEAP8[($56)];
 var $154=$153&1;
 var $155=(($154<<24)>>24)==0;
 if($155){label=40;break;}else{label=39;break;}
 case 39: 
 var $157=HEAP32[(($136)>>2)];
 var $161=$157;label=41;break;
 case 40: 
 var $159=($153&255);
 var $160=$159>>>1;
 var $161=$160;label=41;break;
 case 41: 
 var $161;
 var $162=((($161)-(1))|0);
 var $163=($__dg_013>>>0)<($162>>>0);
 var $164=($163&1);
 var $___dg_0=((($164)+($__dg_013))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=42;break;
 case 42: 
 var $__dc_1;
 var $__dg_1;
 var $166=HEAP8[($__p_014)];
 var $167=HEAP32[(($135)>>2)];
 var $168=(($167+44)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($26,$166) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=17;break; }
 case 43: 
 var $171=HEAP32[(($__oe)>>2)];
 var $172=(($171+4)|0);
 HEAP32[(($__oe)>>2)]=$172;
 HEAP32[(($171)>>2)]=$170;
 var $173=((($__dc_1)+(1))|0);
 var $174=(($__p_014+1)|0);
 var $175=($174>>>0)<($__ne>>>0);
 if($175){var $__dc_012=$173;var $__dg_013=$__dg_1;var $__p_014=$174;label=36;break;}else{var $176=$172;label=44;break;}
 case 44: 
 var $176;
 var $177=$__nf_1;
 var $178=$__nb;
 var $179=((($177)-($178))|0);
 var $180=(($__ob+($179<<2))|0);
 var $181=($180|0)==($176|0);
 if($181){var $190=$176;label=47;break;}else{label=45;break;}
 case 45: 
 var $182=((($176)-(4))|0);
 var $183=($182>>>0)>($180>>>0);
 if($183){var $_012_i_i10=$180;var $184=$182;label=46;break;}else{var $190=$176;label=47;break;}
 case 46: 
 var $184;
 var $_012_i_i10;
 var $185=HEAP32[(($_012_i_i10)>>2)];
 var $186=HEAP32[(($184)>>2)];
 HEAP32[(($_012_i_i10)>>2)]=$186;
 HEAP32[(($184)>>2)]=$185;
 var $187=(($_012_i_i10+4)|0);
 var $188=((($184)-(4))|0);
 var $189=($187>>>0)<($188>>>0);
 if($189){var $_012_i_i10=$187;var $184=$188;label=46;break;}else{var $190=$176;label=47;break;}
 case 47: 
 var $190;
 var $191=($__np|0)==($__ne|0);
 if($191){var $storemerge=$190;label=49;break;}else{label=48;break;}
 case 48: 
 var $193=$__np;
 var $194=$__nb;
 var $195=((($193)-($194))|0);
 var $196=(($__ob+($195<<2))|0);
 var $storemerge=$196;label=49;break;
 case 49: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=(($__s)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=0;
 label=19;break;
 case 3: 
 var $7=$__oe;
 var $8=$__ob;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=(($__iob+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)>($10|0);
 var $14=((($12)-($10))|0);
 var $__ns_0=($13?$14:0);
 var $15=$__op;
 var $16=((($15)-($8))|0);
 var $17=$16>>2;
 var $18=($16|0)>0;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=$2;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+48)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($2,$__ob,$17);
 var $25=($24|0)==($17|0);
 if($25){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $27=(($agg_result)|0);
 HEAP32[(($27)>>2)]=0;
 label=19;break;
 case 6: 
 var $29=($__ns_0|0)>0;
 if($29){label=7;break;}else{label=15;break;}
 case 7: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns_0,$__fl);
 var $31=$__sp;
 var $32=HEAP8[($31)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 var $36=(($__sp+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $40=$37;label=10;break;
 case 9: 
 var $39=(($__sp+4)|0);
 var $40=$39;label=10;break;
 case 10: 
 var $40;
 var $41=$2;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+48)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($2,$40,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $46=($45|0)==($__ns_0|0);
 if($46){label=14;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($1)>>2)]=0;
 var $47=(($agg_result)|0);
 HEAP32[(($47)>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=19;break;
 case 13: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 ___resumeException($49$0)
 case 14: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=15;break;
 case 15: 
 var $52=((($7)-($15))|0);
 var $53=$52>>2;
 var $54=($52|0)>0;
 if($54){label=16;break;}else{label=18;break;}
 case 16: 
 var $56=$2;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+48)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($2,$__op,$53);
 var $61=($60|0)==($53|0);
 if($61){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($1)>>2)]=0;
 var $63=(($agg_result)|0);
 HEAP32[(($63)>>2)]=0;
 label=19;break;
 case 18: 
 HEAP32[(($11)>>2)]=0;
 var $65=(($agg_result)|0);
 HEAP32[(($65)>>2)]=$2;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(200);
 var $__oe=(sp)+(208);
 var $1=(sp)+(216);
 var $2=(sp)+(224);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(15936)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(15936);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((13832)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((13832)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,22,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=$__o;
 var $$etemp$3$0=164;
 var $$etemp$3$1=0;

 var $55=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25,$_0_i1,$38,$55,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $57=(($1)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 var $61=(($__s)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($2)|0);
 HEAP32[(($63)>>2)]=$62;
 var $64=HEAP32[(($__op)>>2)];
 var $65=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$55,$64,$65,$__iob,$__fl);
 var $$etemp$4$0=164;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $67$0 = ___cxa_find_matching_catch(-1, -1); var $67$1 = tempRet0;
 var $68=(($1)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69)|0);
 var $71=__ZNSt3__114__shared_count16__release_sharedEv($70);
 ___resumeException($67$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4000)];HEAP8[((($3)+(1))|0)]=HEAP8[(4001)];HEAP8[((($3)+(2))|0)]=HEAP8[(4002)];HEAP8[((($3)+(3))|0)]=HEAP8[(4003)];HEAP8[((($3)+(4))|0)]=HEAP8[(4004)];HEAP8[((($3)+(5))|0)]=HEAP8[(4005)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(15936)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(15936);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((13832)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((13832)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=$__o;
 var $$etemp$0$0=84;
 var $$etemp$0$1=0;

 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i1,$37,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 var $$etemp$1$0=84;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(208);
 var $__oe=(sp)+(216);
 var $1=(sp)+(224);
 var $2=(sp)+(232);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(15936)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(15936);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((13832)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((13832)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,23,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=$__o;
 var $$etemp$3$0=172;
 var $$etemp$3$1=0;

 var $55=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25,$_0_i1,$38,$55,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $57=(($1)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 var $61=(($__s)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($2)|0);
 HEAP32[(($63)>>2)]=$62;
 var $64=HEAP32[(($__op)>>2)];
 var $65=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$55,$64,$65,$__iob,$__fl);
 var $$etemp$4$0=172;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $67$0 = ___cxa_find_matching_catch(-1, -1); var $67$1 = tempRet0;
 var $68=(($1)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69)|0);
 var $71=__ZNSt3__114__shared_count16__release_sharedEv($70);
 ___resumeException($67$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $3=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($22)]=70;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 9: 
 HEAP8[($22)]=102;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($22)]=69;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 12: 
 HEAP8[($22)]=101;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 13: 
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i10=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i10=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($22)]=71;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 18: 
 HEAP8[($22)]=103;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i10;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(15936)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(15936);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((13832)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((13832)>>2)];
 if($specify_precision_0_off0_ph_i10){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre17=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $103=0;var $102=$_pre17;label=47;break;
 case 29: 
 var $64=HEAP8[(15936)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i10){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(15936);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((13832)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((13832)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1215=$83;var $_116=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(15936);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((13832)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((13832)>>2)];
 var $95=(($__iob+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$97;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $99=HEAP32[(($__nb)>>2)];
 var $100=($99|0)==0;
 if($100){label=45;break;}else{var $__nc_2=$__nc_1;var $103=$99;var $102=$99;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $103=$_pre;var $102=$_pre;label=47;break;
 case 47: 
 var $102;
 var $103;
 var $__nc_2;
 var $104=(($102+$__nc_2)|0);
 var $105=HEAP32[(($6)>>2)];
 var $106=$105&176;
 if(($106|0)==16){ label=48;break;}else if(($106|0)==32){ var $_0_i7=$104;label=54;break;}else{label=53;break;}
 case 48: 
 var $108=HEAP8[($102)];
 if((($108<<24)>>24)==45|(($108<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $110=(($102+1)|0);
 var $_0_i7=$110;label=54;break;
 case 50: 
 var $112=($__nc_2|0)>1;
 var $113=(($108<<24)>>24)==48;
 var $or_cond_i=$112&$113;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $115=(($102+1)|0);
 var $116=HEAP8[($115)];
 if((($116<<24)>>24)==120|(($116<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $118=(($102+2)|0);
 var $_0_i7=$118;label=54;break;
 case 53: 
 var $_0_i7=$102;label=54;break;
 case 54: 
 var $_0_i7;
 var $120=$__o;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $121=(($__o)|0);
 var $122=($102|0)==($43|0);
 if($122){var $__ob_0=$121;var $135=0;var $134=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $124=$__nc_2<<3;
 var $125=_malloc($124);
 var $126=$125;
 var $127=($125|0)==0;
 if($127){label=56;break;}else{var $__ob_0=$126;var $135=$126;var $134=$102;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $130=0;label=58;break; }
 case 57: 
 var $_pre18=HEAP32[(($__nb)>>2)];
 var $__ob_0=$126;var $135=$126;var $134=$_pre18;label=59;break;
 case 58: 
 var $130;
 var $131$0 = ___cxa_find_matching_catch(-1, -1); var $131$1 = tempRet0;
 var $132=$131$0;
 var $133=$131$1;
 var $_0=$132;var $_01=$133;var $165=$130;label=68;break;
 case 59: 
 var $134;
 var $135;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $130=$135;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($134,$_0_i7,$104,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $138=(($1)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139)|0);
 var $141=__ZNSt3__114__shared_count16__release_sharedEv($140);
 var $142=(($__s)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($3)|0);
 HEAP32[(($144)>>2)]=$143;
 var $145=HEAP32[(($__op)>>2)];
 var $146=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$145,$146,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $130=$135;label=58;break; }
 case 62: 
 var $148=(($2)|0);
 var $149=HEAP32[(($148)>>2)];
 HEAP32[(($142)>>2)]=$149;
 var $150=(($agg_result)|0);
 HEAP32[(($150)>>2)]=$149;
 var $151=($135|0)==0;
 if($151){label=64;break;}else{label=63;break;}
 case 63: 
 var $153=$135;
 _free($153);
 label=64;break;
 case 64: 
 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 var $154=($103|0)==0;
 if($154){label=66;break;}else{label=65;break;}
 case 65: 
 _free($103);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1); var $157$1 = tempRet0;
 var $158=$157$0;
 var $159=$157$1;
 var $160=(($1)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161)|0);
 var $163=__ZNSt3__114__shared_count16__release_sharedEv($162);
 var $_0=$158;var $_01=$159;var $165=$135;label=68;break;
 case 68: 
 var $165;
 var $_01;
 var $_0;
 var $166=($165|0)==0;
 if($166){label=70;break;}else{label=69;break;}
 case 69: 
 var $168=$165;
 _free($168);
 label=70;break;
 case 70: 
 var $169=($103|0)==0;
 if($169){var $_1215=$_01;var $_116=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($103);
 var $_1215=$_01;var $_116=$_0;label=72;break;
 case 72: 
 var $_116;
 var $_1215;
 var $171$0=$_116;
 var $171$1=0;
 var $172$0=$171$0;
 var $172$1=$_1215;
 ___resumeException($172$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((15368)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=15368;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$3,266);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((15372)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,10104,(378));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((14984)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=14984;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(26);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14984,$28,266);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((14988)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,10104,(378));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $56=HEAP8[($__nb)];
 if((($56<<24)>>24)==45|(($56<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $58=$22;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+44)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($26,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $63=(($__nb+1)|0);
 var $64=HEAP32[(($__oe)>>2)];
 var $65=(($64+4)|0);
 HEAP32[(($__oe)>>2)]=$65;
 HEAP32[(($64)>>2)]=$62;
 var $__nf_0=$63;label=20;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit21$1;var $eh_lpad_body$0=$lpad_loopexit21$0;label=19;break;
 case 16: 
 var $lpad_loopexit29$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit29$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit29$1;var $eh_lpad_body$0=$lpad_loopexit29$0;label=19;break;
 case 17: 
 var $lpad_loopexit37$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit37$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit37$1;var $eh_lpad_body$0=$lpad_loopexit37$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit38$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit38$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit38$1;var $eh_lpad_body$0=$lpad_nonloopexit38$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $67=$__ne;
 var $68=$__nf_0;
 var $69=((($67)-($68))|0);
 var $70=($69|0)>1;
 if($70){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=($__nf_0>>>0)<($__ne>>>0);
 if($71){var $__ns_133=$__nf_0;label=36;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__nf_0;label=43;break;}
 case 22: 
 var $73=HEAP8[($__nf_0)];
 var $74=(($73<<24)>>24)==48;
 if($74){label=23;break;}else{label=21;break;}
 case 23: 
 var $76=(($__nf_0+1)|0);
 var $77=HEAP8[($76)];
 if((($77<<24)>>24)==120|(($77<<24)>>24)==88){ label=24;break;}else{label=21;break;}
 case 24: 
 var $79=$22;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+44)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $84=HEAP32[(($__oe)>>2)];
 var $85=(($84+4)|0);
 HEAP32[(($__oe)>>2)]=$85;
 HEAP32[(($84)>>2)]=$83;
 var $86=(($__nf_0+2)|0);
 var $87=HEAP8[($76)];
 var $88=HEAP32[(($79)>>2)];
 var $89=(($88+44)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($26,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=18;break; }
 case 26: 
 var $92=HEAP32[(($__oe)>>2)];
 var $93=(($92+4)|0);
 HEAP32[(($__oe)>>2)]=$93;
 HEAP32[(($92)>>2)]=$91;
 var $94=($86>>>0)<($__ne>>>0);
 if($94){var $__ns_042=$86;label=28;break;}else{var $__nf_1=$86;var $__ns_2=$86;label=43;break;}
 case 27: 
 var $96=($114>>>0)<($__ne>>>0);
 if($96){var $__ns_042=$114;label=28;break;}else{var $__nf_1=$86;var $__ns_2=$114;label=43;break;}
 case 28: 
 var $__ns_042;
 var $97=HEAP8[($__ns_042)];
 var $98=HEAP8[(15936)];
 var $99=(($98<<24)>>24)==0;
 if($99){label=29;break;}else{label=33;break;}
 case 29: 
 var $101=___cxa_guard_acquire(15936);
 var $102=($101|0)==0;
 if($102){label=33;break;}else{label=30;break;}
 case 30: 
 var $104=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=32;break; }
 case 31: 
 HEAP32[((13832)>>2)]=$104;

 label=33;break;
 case 32: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;

 var $eh_lpad_body$1=$107$1;var $eh_lpad_body$0=$107$0;label=19;break;
 case 33: 
 var $109=HEAP32[((13832)>>2)];
 var $110=(($97<<24)>>24);
 var $111=(function() { try { __THREW__ = 0; return _isxdigit_l($110,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=17;break; }
 case 34: 
 var $113=($111|0)==0;
 var $114=(($__ns_042+1)|0);
 if($113){var $__nf_1=$86;var $__ns_2=$__ns_042;label=43;break;}else{label=27;break;}
 case 35: 
 var $116=($134>>>0)<($__ne>>>0);
 if($116){var $__ns_133=$134;label=36;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$134;label=43;break;}
 case 36: 
 var $__ns_133;
 var $117=HEAP8[($__ns_133)];
 var $118=HEAP8[(15936)];
 var $119=(($118<<24)>>24)==0;
 if($119){label=37;break;}else{label=41;break;}
 case 37: 
 var $121=___cxa_guard_acquire(15936);
 var $122=($121|0)==0;
 if($122){label=41;break;}else{label=38;break;}
 case 38: 
 var $124=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=40;break; }
 case 39: 
 HEAP32[((13832)>>2)]=$124;

 label=41;break;
 case 40: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;

 var $eh_lpad_body$1=$127$1;var $eh_lpad_body$0=$127$0;label=19;break;
 case 41: 
 var $129=HEAP32[((13832)>>2)];
 var $130=(($117<<24)>>24);
 var $131=(function() { try { __THREW__ = 0; return _isdigit_l($130,$129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=16;break; }
 case 42: 
 var $133=($131|0)==0;
 var $134=(($__ns_133+1)|0);
 if($133){var $__nf_1=$__nf_0;var $__ns_2=$__ns_133;label=43;break;}else{label=35;break;}
 case 43: 
 var $__ns_2;
 var $__nf_1;
 var $135=$__grouping;
 var $136=HEAP8[($135)];
 var $137=$136&1;
 var $138=(($137<<24)>>24)==0;
 if($138){label=45;break;}else{label=44;break;}
 case 44: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $145=$141;label=46;break;
 case 45: 
 var $143=($136&255);
 var $144=$143>>>1;
 var $145=$144;label=46;break;
 case 46: 
 var $145;
 var $146=($145|0)==0;
 if($146){label=47;break;}else{label=49;break;}
 case 47: 
 var $148=HEAP32[(($__oe)>>2)];
 var $149=$22;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+48)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$152]($26,$__nf_1,$__ns_2,$148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=18;break; }
 case 48: 
 var $154=$__ns_2;
 var $155=$__nf_1;
 var $156=((($154)-($155))|0);
 var $157=HEAP32[(($__oe)>>2)];
 var $158=(($157+($156<<2))|0);
 HEAP32[(($__oe)>>2)]=$158;
 var $232=$158;label=67;break;
 case 49: 
 var $160=($__nf_1|0)==($__ns_2|0);
 if($160){label=52;break;}else{label=50;break;}
 case 50: 
 var $161=((($__ns_2)-(1))|0);
 var $162=($161>>>0)>($__nf_1>>>0);
 if($162){var $_012_i_i=$__nf_1;var $163=$161;label=51;break;}else{label=52;break;}
 case 51: 
 var $163;
 var $_012_i_i;
 var $164=HEAP8[($_012_i_i)];
 var $165=HEAP8[($163)];
 HEAP8[($_012_i_i)]=$165;
 HEAP8[($163)]=$164;
 var $166=(($_012_i_i+1)|0);
 var $167=((($163)-(1))|0);
 var $168=($166>>>0)<($167>>>0);
 if($168){var $_012_i_i=$166;var $163=$167;label=51;break;}else{label=52;break;}
 case 52: 
 var $169=$47;
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+16)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$172]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=18;break; }
 case 53: 
 var $174=($__nf_1>>>0)<($__ns_2>>>0);
 if($174){label=55;break;}else{label=54;break;}
 case 54: 
 var $_pre=HEAP32[(($__oe)>>2)];
 var $218=$_pre;label=64;break;
 case 55: 
 var $175=$__grouping;
 var $176=(($175+1)|0);
 var $177=(($__grouping+4)|0);
 var $178=(($__grouping+8)|0);
 var $179=$22;
 var $__dc_024=0;var $__dg_025=0;var $__p_026=$__nf_1;label=56;break;
 case 56: 
 var $__p_026;
 var $__dg_025;
 var $__dc_024;
 var $180=HEAP8[($135)];
 var $181=$180&1;
 var $182=(($181<<24)>>24)==0;
 var $183=HEAP32[(($178)>>2)];
 var $_=($182?$176:$183);
 var $184=(($_+$__dg_025)|0);
 var $185=HEAP8[($184)];
 var $186=(($185<<24)>>24)>0;
 if($186){label=57;break;}else{var $__dg_1=$__dg_025;var $__dc_1=$__dc_024;label=62;break;}
 case 57: 
 var $187=HEAP32[(($178)>>2)];
 var $_57=($182?$176:$187);
 var $188=(($_57+$__dg_025)|0);
 var $189=HEAP8[($188)];
 var $190=(($189<<24)>>24);
 var $191=($__dc_024|0)==($190|0);
 if($191){label=58;break;}else{var $__dg_1=$__dg_025;var $__dc_1=$__dc_024;label=62;break;}
 case 58: 
 var $193=HEAP32[(($__oe)>>2)];
 var $194=(($193+4)|0);
 HEAP32[(($__oe)>>2)]=$194;
 HEAP32[(($193)>>2)]=$173;
 var $195=HEAP8[($135)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=60;break;}else{label=59;break;}
 case 59: 
 var $199=HEAP32[(($177)>>2)];
 var $203=$199;label=61;break;
 case 60: 
 var $201=($195&255);
 var $202=$201>>>1;
 var $203=$202;label=61;break;
 case 61: 
 var $203;
 var $204=((($203)-(1))|0);
 var $205=($__dg_025>>>0)<($204>>>0);
 var $206=($205&1);
 var $___dg_0=((($206)+($__dg_025))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=62;break;
 case 62: 
 var $__dc_1;
 var $__dg_1;
 var $208=HEAP8[($__p_026)];
 var $209=HEAP32[(($179)>>2)];
 var $210=(($209+44)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$211]($26,$208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=15;break; }
 case 63: 
 var $213=HEAP32[(($__oe)>>2)];
 var $214=(($213+4)|0);
 HEAP32[(($__oe)>>2)]=$214;
 HEAP32[(($213)>>2)]=$212;
 var $215=((($__dc_1)+(1))|0);
 var $216=(($__p_026+1)|0);
 var $217=($216>>>0)<($__ns_2>>>0);
 if($217){var $__dc_024=$215;var $__dg_025=$__dg_1;var $__p_026=$216;label=56;break;}else{var $218=$214;label=64;break;}
 case 64: 
 var $218;
 var $219=$__nf_1;
 var $220=$__nb;
 var $221=((($219)-($220))|0);
 var $222=(($__ob+($221<<2))|0);
 var $223=($222|0)==($218|0);
 if($223){var $232=$218;label=67;break;}else{label=65;break;}
 case 65: 
 var $224=((($218)-(4))|0);
 var $225=($224>>>0)>($222>>>0);
 if($225){var $_012_i_i13=$222;var $226=$224;label=66;break;}else{var $232=$218;label=67;break;}
 case 66: 
 var $226;
 var $_012_i_i13;
 var $227=HEAP32[(($_012_i_i13)>>2)];
 var $228=HEAP32[(($226)>>2)];
 HEAP32[(($_012_i_i13)>>2)]=$228;
 HEAP32[(($226)>>2)]=$227;
 var $229=(($_012_i_i13+4)|0);
 var $230=((($226)-(4))|0);
 var $231=($229>>>0)<($230>>>0);
 if($231){var $_012_i_i13=$229;var $226=$230;label=66;break;}else{var $232=$218;label=67;break;}
 case 67: 
 var $232;
 var $233=($__ns_2>>>0)<($__ne>>>0);
 if($233){label=68;break;}else{var $__nf_3=$__ns_2;var $256=$232;label=74;break;}
 case 68: 
 var $234=$22;
 var $__nf_220=$__ns_2;label=69;break;
 case 69: 
 var $__nf_220;
 var $236=HEAP8[($__nf_220)];
 var $237=(($236<<24)>>24)==46;
 if($237){label=70;break;}else{label=72;break;}
 case 70: 
 var $239=$47;
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$242]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=18;break; }
 case 71: 
 var $244=HEAP32[(($__oe)>>2)];
 var $245=(($244+4)|0);
 HEAP32[(($__oe)>>2)]=$245;
 HEAP32[(($244)>>2)]=$243;
 var $246=(($__nf_220+1)|0);
 var $__nf_3=$246;var $256=$245;label=74;break;
 case 72: 
 var $248=HEAP32[(($234)>>2)];
 var $249=(($248+44)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$250]($26,$236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=14;break; }
 case 73: 
 var $252=HEAP32[(($__oe)>>2)];
 var $253=(($252+4)|0);
 HEAP32[(($__oe)>>2)]=$253;
 HEAP32[(($252)>>2)]=$251;
 var $254=(($__nf_220+1)|0);
 var $255=($254>>>0)<($__ne>>>0);
 if($255){var $__nf_220=$254;label=69;break;}else{var $__nf_3=$254;var $256=$253;label=74;break;}
 case 74: 
 var $256;
 var $__nf_3;
 var $257=$22;
 var $258=HEAP32[(($257)>>2)];
 var $259=(($258+48)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$260]($26,$__nf_3,$__ne,$256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=18;break; }
 case 75: 
 var $262=$__nf_3;
 var $263=((($67)-($262))|0);
 var $264=HEAP32[(($__oe)>>2)];
 var $265=(($264+($263<<2))|0);
 HEAP32[(($__oe)>>2)]=$265;
 var $266=($__np|0)==($__ne|0);
 if($266){var $storemerge=$265;label=77;break;}else{label=76;break;}
 case 76: 
 var $268=$__np;
 var $269=$__nb;
 var $270=((($268)-($269))|0);
 var $271=(($__ob+($270<<2))|0);
 var $storemerge=$271;label=77;break;
 case 77: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $3=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 HEAP8[($22)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep14=(($_1_i+1)|0);
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep14)]=65;
 var $specify_precision_0_off0_ph_i15=0;label=19;break;
 case 15: 
 HEAP8[($scevgep14)]=97;
 var $specify_precision_0_off0_ph_i15=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i15;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(15936)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(15936);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((13832)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((13832)>>2)];
 if($specify_precision_0_off0_ph_i15){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre12=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $101=0;var $100=$_pre12;label=47;break;
 case 29: 
 var $64=HEAP8[(15936)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i15){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(15936);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((13832)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((13832)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1210=$83;var $_111=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(15936);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((13832)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((13832)>>2)];
 var $95=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$95;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $97=HEAP32[(($__nb)>>2)];
 var $98=($97|0)==0;
 if($98){label=45;break;}else{var $__nc_2=$__nc_1;var $101=$97;var $100=$97;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $101=$_pre;var $100=$_pre;label=47;break;
 case 47: 
 var $100;
 var $101;
 var $__nc_2;
 var $102=(($100+$__nc_2)|0);
 var $103=HEAP32[(($6)>>2)];
 var $104=$103&176;
 if(($104|0)==16){ label=48;break;}else if(($104|0)==32){ var $_0_i7=$102;label=54;break;}else{label=53;break;}
 case 48: 
 var $106=HEAP8[($100)];
 if((($106<<24)>>24)==45|(($106<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $108=(($100+1)|0);
 var $_0_i7=$108;label=54;break;
 case 50: 
 var $110=($__nc_2|0)>1;
 var $111=(($106<<24)>>24)==48;
 var $or_cond_i=$110&$111;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $113=(($100+1)|0);
 var $114=HEAP8[($113)];
 if((($114<<24)>>24)==120|(($114<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $116=(($100+2)|0);
 var $_0_i7=$116;label=54;break;
 case 53: 
 var $_0_i7=$100;label=54;break;
 case 54: 
 var $_0_i7;
 var $118=$__o;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $119=(($__o)|0);
 var $120=($100|0)==($43|0);
 if($120){var $__ob_0=$119;var $133=0;var $132=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $122=$__nc_2<<3;
 var $123=_malloc($122);
 var $124=$123;
 var $125=($123|0)==0;
 if($125){label=56;break;}else{var $__ob_0=$124;var $133=$124;var $132=$100;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $128=0;label=58;break; }
 case 57: 
 var $_pre13=HEAP32[(($__nb)>>2)];
 var $__ob_0=$124;var $133=$124;var $132=$_pre13;label=59;break;
 case 58: 
 var $128;
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $_0=$130;var $_01=$131;var $163=$128;label=68;break;
 case 59: 
 var $132;
 var $133;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $128=$133;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($132,$_0_i7,$102,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $136=(($1)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137)|0);
 var $139=__ZNSt3__114__shared_count16__release_sharedEv($138);
 var $140=(($__s)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($3)|0);
 HEAP32[(($142)>>2)]=$141;
 var $143=HEAP32[(($__op)>>2)];
 var $144=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$143,$144,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $128=$133;label=58;break; }
 case 62: 
 var $146=(($2)|0);
 var $147=HEAP32[(($146)>>2)];
 HEAP32[(($140)>>2)]=$147;
 var $148=(($agg_result)|0);
 HEAP32[(($148)>>2)]=$147;
 var $149=($133|0)==0;
 if($149){label=64;break;}else{label=63;break;}
 case 63: 
 var $151=$133;
 _free($151);
 label=64;break;
 case 64: 
 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 var $152=($101|0)==0;
 if($152){label=66;break;}else{label=65;break;}
 case 65: 
 _free($101);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $155$0 = ___cxa_find_matching_catch(-1, -1); var $155$1 = tempRet0;
 var $156=$155$0;
 var $157=$155$1;
 var $158=(($1)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159)|0);
 var $161=__ZNSt3__114__shared_count16__release_sharedEv($160);
 var $_0=$156;var $_01=$157;var $163=$133;label=68;break;
 case 68: 
 var $163;
 var $_01;
 var $_0;
 var $164=($163|0)==0;
 if($164){label=70;break;}else{label=69;break;}
 case 69: 
 var $166=$163;
 _free($166);
 label=70;break;
 case 70: 
 var $167=($101|0)==0;
 if($167){var $_1210=$_01;var $_111=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($101);
 var $_1210=$_01;var $_111=$_0;label=72;break;
 case 72: 
 var $_111;
 var $_1210;
 var $169$0=$_111;
 var $169$1=0;
 var $170$0=$169$0;
 var $170$1=$_1210;
 ___resumeException($170$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(sp)+(200);
 var $2=(sp)+(208);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4008)];HEAP8[((($3)+(1))|0)]=HEAP8[(4009)];HEAP8[((($3)+(2))|0)]=HEAP8[(4010)];HEAP8[((($3)+(3))|0)]=HEAP8[(4011)];HEAP8[((($3)+(4))|0)]=HEAP8[(4012)];HEAP8[((($3)+(5))|0)]=HEAP8[(4013)];
 var $4=(($__nar)|0);
 var $5=HEAP8[(15936)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=___cxa_guard_acquire(15936);
 var $9=($8|0)==0;
 if($9){label=6;break;}else{label=3;break;}
 case 3: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((13832)>>2)]=$11;

 label=6;break;
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 6: 
 var $15=HEAP32[((13832)>>2)];
 var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$15,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=(($__nar+$16)|0);
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&176;
 if(($20|0)==32){ var $_0_i=$17;label=13;break;}else if(($20|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $22=HEAP8[($4)];
 if((($22<<24)>>24)==45|(($22<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $24=(($__nar+1)|0);
 var $_0_i=$24;label=13;break;
 case 9: 
 var $26=($16|0)>1;
 var $27=(($22<<24)>>24)==48;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $29=(($__nar+1)|0);
 var $30=HEAP8[($29)];
 if((($30<<24)>>24)==120|(($30<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $32=(($__nar+2)|0);
 var $_0_i=$32;label=13;break;
 case 12: 
 var $_0_i=$4;label=13;break;
 case 13: 
 var $_0_i;
 var $34=$__o;
 var $$etemp$0$0=148;
 var $$etemp$0$1=0;

 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $35=(($1)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $38=HEAP32[((15368)>>2)];
 var $39=($38|0)==-1;
 if($39){label=15;break;}else{label=14;break;}
 case 14: 
 var $41=(($__p_i_i_i_i)|0);
 HEAP32[(($41)>>2)]=15368;
 var $42=(($__p_i_i_i_i+4)|0);
 HEAP32[(($42)>>2)]=(26);
 var $43=(($__p_i_i_i_i+8)|0);
 HEAP32[(($43)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$37,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $44=HEAP32[((15372)>>2)];
 var $45=((($44)-(1))|0);
 var $46=(($36+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($36+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$47;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=$52>>2;
 var $54=($53>>>0)>($45>>>0);
 if($54){label=16;break;}else{label=17;break;}
 case 16: 
 var $55=(($49+($45<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==0;
 if($57){label=17;break;}else{label=19;break;}
 case 17: 
 var $58=___cxa_allocate_exception(4);
 var $59=$58;
 __ZNSt8bad_castC2Ev($59);
 (function() { try { __THREW__ = 0; return ___cxa_throw($58,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $61=$56;
 var $62=HEAP32[(($35)>>2)];
 var $63=(($62)|0);
 var $64=__ZNSt3__114__shared_count16__release_sharedEv($63);
 var $65=(($__o)|0);
 var $66=$56;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+48)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=FUNCTION_TABLE[$69]($61,$4,$17,$65);
 var $71=(($__o+($16<<2))|0);
 var $72=($_0_i|0)==($17|0);
 if($72){var $__op_0=$71;label=22;break;}else{label=21;break;}
 case 20: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $75=HEAP32[(($35)>>2)];
 var $76=(($75)|0);
 var $77=__ZNSt3__114__shared_count16__release_sharedEv($76);
 ___resumeException($74$0)
 case 21: 
 var $79=$__nar;
 var $80=$_0_i;
 var $81=((($80)-($79))|0);
 var $82=(($__o+($81<<2))|0);
 var $__op_0=$82;label=22;break;
 case 22: 
 var $__op_0;
 var $84=(($__s)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($2)|0);
 HEAP32[(($86)>>2)]=$85;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$65,$__op_0,$71,$__iob,$__fl);
 var $$etemp$3$0=148;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $5=(($1)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $8=HEAP32[((15376)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__p_i_i_i_i)|0);
 HEAP32[(($11)>>2)]=15376;
 var $12=(($__p_i_i_i_i+4)|0);
 HEAP32[(($12)>>2)]=(26);
 var $13=(($__p_i_i_i_i+8)|0);
 HEAP32[(($13)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$7,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=22;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=HEAP32[((15380)>>2)];
 var $15=((($14)-(1))|0);
 var $16=(($6+12)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$17;
 var $21=$19;
 var $22=((($20)-($21))|0);
 var $23=$22>>2;
 var $24=($23>>>0)>($15>>>0);
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=(($19+($15<<2))|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==0;
 if($27){label=5;break;}else{label=7;break;}
 case 5: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 __ZNSt8bad_castC2Ev($29);
 (function() { try { __THREW__ = 0; return ___cxa_throw($28,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=22;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $31=$26;
 var $32=HEAP32[(($5)>>2)];
 var $33=(($32)|0);
 var $34=__ZNSt3__114__shared_count16__release_sharedEv($33);
 HEAP32[(($__err)>>2)]=0;
 var $35=($__fmtb|0)==($__fmte|0);
 var $_phi_trans_insert_pre_pre=(($__b)|0);
 if($35){label=67;break;}else{label=8;break;}
 case 8: 
 var $36=(($__e)|0);
 var $37=$26;
 var $38=(($26+8)|0);
 var $39=$38;
 var $40=$26;
 var $41=$this;
 var $42=(($3)|0);
 var $43=(($4)|0);
 var $44=(($2)|0);
 var $_0_ph39=$__fmtb;var $_pre40=0;label=9;break;
 case 9: 
 var $_pre40;
 var $_0_ph39;
 var $46=$_pre40;label=10;break;
 case 10: 
 var $46;
 var $47=($46|0)==0;
 if($47){label=11;break;}else{label=67;break;}
 case 11: 
 var $49=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $50=($49|0)==0;
 if($50){var $64=0;label=15;break;}else{label=12;break;}
 case 12: 
 var $52=(($49+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($49+16)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($53|0)==($55|0);
 if($56){label=13;break;}else{var $64=$49;label=15;break;}
 case 13: 
 var $57=$49;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+36)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=FUNCTION_TABLE[$60]($49);
 var $62=($61|0)==-1;
 if($62){label=14;break;}else{var $64=$49;label=15;break;}
 case 14: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $64=0;label=15;break;
 case 15: 
 var $64;
 var $65=($64|0)==0;
 var $66=HEAP32[(($36)>>2)];
 var $67=($66|0)==0;
 if($67){label=20;break;}else{label=16;break;}
 case 16: 
 var $69=(($66+12)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($66+16)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($70|0)==($72|0);
 if($73){label=17;break;}else{label=19;break;}
 case 17: 
 var $74=$66;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+36)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=FUNCTION_TABLE[$77]($66);
 var $79=($78|0)==-1;
 if($79){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($36)>>2)]=0;
 label=20;break;
 case 19: 
 if($65){var $88=$66;label=23;break;}else{label=21;break;}
 case 20: 
 if($65){label=21;break;}else{var $88=0;label=23;break;}
 case 21: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$64;label=68;break;
 case 22: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1); var $83$1 = tempRet0;
 var $84=HEAP32[(($5)>>2)];
 var $85=(($84)|0);
 var $86=__ZNSt3__114__shared_count16__release_sharedEv($85);
 ___resumeException($83$0)
 case 23: 
 var $88;
 var $89=HEAP8[($_0_ph39)];
 var $90=HEAP32[(($37)>>2)];
 var $91=(($90+36)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=FUNCTION_TABLE[$92]($31,$89,0);
 var $94=(($93<<24)>>24)==37;
 if($94){label=24;break;}else{label=33;break;}
 case 24: 
 var $96=(($_0_ph39+1)|0);
 var $97=($96|0)==($__fmte|0);
 if($97){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$64;label=68;break;
 case 26: 
 var $100=HEAP8[($96)];
 var $101=HEAP32[(($37)>>2)];
 var $102=(($101+36)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=FUNCTION_TABLE[$103]($31,$100,0);
 if((($104<<24)>>24)==69|(($104<<24)>>24)==48){ label=27;break;}else{var $__opt_0=0;var $__cmd_0=$104;var $_1=$96;label=30;break;}
 case 27: 
 var $106=(($_0_ph39+2)|0);
 var $107=($106|0)==($__fmte|0);
 if($107){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$64;label=68;break;
 case 29: 
 var $110=HEAP8[($106)];
 var $111=HEAP32[(($37)>>2)];
 var $112=(($111+36)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=FUNCTION_TABLE[$113]($31,$110,0);
 var $__opt_0=$104;var $__cmd_0=$114;var $_1=$106;label=30;break;
 case 30: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $116=HEAP32[(($41)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 HEAP32[(($42)>>2)]=$64;
 HEAP32[(($43)>>2)]=$88;
 FUNCTION_TABLE[$118]($2,$this,$3,$4,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $119=HEAP32[(($44)>>2)];
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$119;
 var $120=(($_1+1)|0);
 var $_0_ph_be=$120;label=31;break;
 case 31: 
 var $_0_ph_be;
 var $121=($_0_ph_be|0)==($__fmte|0);
 if($121){label=67;break;}else{label=32;break;}
 case 32: 
 var $_pre40_pre=HEAP32[(($__err)>>2)];
 var $_0_ph39=$_0_ph_be;var $_pre40=$_pre40_pre;label=9;break;
 case 33: 
 var $123=HEAP8[($_0_ph39)];
 var $isascii1_i=(($123<<24)>>24)>-1;
 if($isascii1_i){label=34;break;}else{label=58;break;}
 case 34: 
 var $124=(($123<<24)>>24);
 var $125=HEAP32[(($39)>>2)];
 var $126=(($125+($124<<1))|0);
 var $127=HEAP16[(($126)>>1)];
 var $128=$127&8192;
 var $129=(($128<<16)>>16)==0;
 if($129){label=58;break;}else{var $_0_pn=$_0_ph39;label=35;break;}
 case 35: 
 var $_0_pn;
 var $_2=(($_0_pn+1)|0);
 var $130=($_2|0)==($__fmte|0);
 if($130){var $_2_lcssa=$__fmte;label=38;break;}else{label=36;break;}
 case 36: 
 var $132=HEAP8[($_2)];
 var $isascii1_i4=(($132<<24)>>24)>-1;
 if($isascii1_i4){label=37;break;}else{var $_2_lcssa=$_2;label=38;break;}
 case 37: 
 var $133=(($132<<24)>>24);
 var $134=(($125+($133<<1))|0);
 var $135=HEAP16[(($134)>>1)];
 var $136=$135&8192;
 var $137=(($136<<16)>>16)==0;
 if($137){var $_2_lcssa=$_2;label=38;break;}else{var $_0_pn=$_2;label=35;break;}
 case 38: 
 var $_2_lcssa;
 var $_pre_i_i_i7=$64;var $138=$88;var $_pre_i2_i_i11=$88;label=39;break;
 case 39: 
 var $_pre_i2_i_i11;
 var $138;
 var $_pre_i_i_i7;
 var $139=($_pre_i_i_i7|0)==0;
 if($139){var $153=0;label=43;break;}else{label=40;break;}
 case 40: 
 var $141=(($_pre_i_i_i7+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($_pre_i_i_i7+16)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){label=41;break;}else{var $153=$_pre_i_i_i7;label=43;break;}
 case 41: 
 var $146=$_pre_i_i_i7;
 var $147=HEAP32[(($146)>>2)];
 var $148=(($147+36)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=FUNCTION_TABLE[$149]($_pre_i_i_i7);
 var $151=($150|0)==-1;
 if($151){label=42;break;}else{var $153=$_pre_i_i_i7;label=43;break;}
 case 42: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $153=0;label=43;break;
 case 43: 
 var $153;
 var $154=($153|0)==0;
 var $155=($138|0)==0;
 if($155){var $_pre_i2_i_i1142=$_pre_i2_i_i11;label=48;break;}else{label=44;break;}
 case 44: 
 var $157=(($138+12)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($138+16)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($158|0)==($160|0);
 if($161){label=46;break;}else{label=45;break;}
 case 45: 
 if($154){var $170=$138;var $_pre_i2_i_i1141=$_pre_i2_i_i11;label=50;break;}else{var $_0_ph_be=$_2_lcssa;label=31;break;}
 case 46: 
 var $162=$138;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=FUNCTION_TABLE[$165]($138);
 var $167=($166|0)==-1;
 if($167){label=47;break;}else{label=49;break;}
 case 47: 
 HEAP32[(($36)>>2)]=0;
 var $_pre_i2_i_i1142=0;label=48;break;
 case 48: 
 var $_pre_i2_i_i1142;
 if($154){var $_0_ph_be=$_2_lcssa;label=31;break;}else{var $170=0;var $_pre_i2_i_i1141=$_pre_i2_i_i1142;label=50;break;}
 case 49: 
 var $169=($_pre_i2_i_i11|0)==0;
 var $tmp_i_i13=$154^$169;
 if($tmp_i_i13){var $170=$_pre_i2_i_i11;var $_pre_i2_i_i1141=$_pre_i2_i_i11;label=50;break;}else{var $_0_ph_be=$_2_lcssa;label=31;break;}
 case 50: 
 var $_pre_i2_i_i1141;
 var $170;
 var $171=(($153+12)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($153+16)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=($172|0)==($174|0);
 if($175){label=51;break;}else{label=52;break;}
 case 51: 
 var $177=$153;
 var $178=HEAP32[(($177)>>2)];
 var $179=(($178+36)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=FUNCTION_TABLE[$180]($153);
 var $extract_t_i=(($181)&255);
 var $_0_i_off0_i=$extract_t_i;label=53;break;
 case 52: 
 var $183=HEAP8[($172)];
 var $_0_i_off0_i=$183;label=53;break;
 case 53: 
 var $_0_i_off0_i;
 var $isascii1_i14=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i14){label=54;break;}else{var $_0_ph_be=$_2_lcssa;label=31;break;}
 case 54: 
 var $184=(($_0_i_off0_i<<24)>>24);
 var $185=HEAP32[(($39)>>2)];
 var $186=(($185+($184<<1))|0);
 var $187=HEAP16[(($186)>>1)];
 var $188=$187&8192;
 var $189=(($188<<16)>>16)==0;
 if($189){var $_0_ph_be=$_2_lcssa;label=31;break;}else{label=55;break;}
 case 55: 
 var $191=HEAP32[(($171)>>2)];
 var $192=HEAP32[(($173)>>2)];
 var $193=($191|0)==($192|0);
 if($193){label=56;break;}else{label=57;break;}
 case 56: 
 var $195=$153;
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+40)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=FUNCTION_TABLE[$198]($153);
 var $_pre_i_i_i7=$153;var $138=$170;var $_pre_i2_i_i11=$_pre_i2_i_i1141;label=39;break;
 case 57: 
 var $201=(($191+1)|0);
 HEAP32[(($171)>>2)]=$201;
 var $_pre_i_i_i7=$153;var $138=$170;var $_pre_i2_i_i11=$_pre_i2_i_i1141;label=39;break;
 case 58: 
 var $202=(($64+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(($64+16)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=($203|0)==($205|0);
 if($206){label=59;break;}else{label=60;break;}
 case 59: 
 var $208=$64;
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+36)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=FUNCTION_TABLE[$211]($64);
 var $extract_t_i16=(($212)&255);
 var $_0_i_off0_i17=$extract_t_i16;label=61;break;
 case 60: 
 var $214=HEAP8[($203)];
 var $_0_i_off0_i17=$214;label=61;break;
 case 61: 
 var $_0_i_off0_i17;
 var $215=HEAP32[(($40)>>2)];
 var $216=(($215+12)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=FUNCTION_TABLE[$217]($31,$_0_i_off0_i17);
 var $219=HEAP8[($_0_ph39)];
 var $220=HEAP32[(($40)>>2)];
 var $221=(($220+12)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=FUNCTION_TABLE[$222]($31,$219);
 var $224=(($218<<24)>>24)==(($223<<24)>>24);
 if($224){label=62;break;}else{label=66;break;}
 case 62: 
 var $226=HEAP32[(($202)>>2)];
 var $227=HEAP32[(($204)>>2)];
 var $228=($226|0)==($227|0);
 if($228){label=63;break;}else{label=64;break;}
 case 63: 
 var $230=$64;
 var $231=HEAP32[(($230)>>2)];
 var $232=(($231+40)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=FUNCTION_TABLE[$233]($64);
 label=65;break;
 case 64: 
 var $236=(($226+1)|0);
 HEAP32[(($202)>>2)]=$236;
 label=65;break;
 case 65: 
 var $237=(($_0_ph39+1)|0);
 var $_0_ph_be=$237;label=31;break;
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 var $46=4;label=10;break;
 case 67: 
 var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $_pre_i_i_i21=$_pre;label=68;break;
 case 68: 
 var $_pre_i_i_i21;
 var $238=(($__b)|0);
 var $239=($_pre_i_i_i21|0)==0;
 if($239){var $253=0;label=72;break;}else{label=69;break;}
 case 69: 
 var $241=(($_pre_i_i_i21+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($_pre_i_i_i21+16)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=($242|0)==($244|0);
 if($245){label=70;break;}else{var $253=$_pre_i_i_i21;label=72;break;}
 case 70: 
 var $246=$_pre_i_i_i21;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+36)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=FUNCTION_TABLE[$249]($_pre_i_i_i21);
 var $251=($250|0)==-1;
 if($251){label=71;break;}else{var $253=$_pre_i_i_i21;label=72;break;}
 case 71: 
 HEAP32[(($238)>>2)]=0;
 var $253=0;label=72;break;
 case 72: 
 var $253;
 var $254=($253|0)==0;
 var $255=(($__e)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=($256|0)==0;
 if($257){label=77;break;}else{label=73;break;}
 case 73: 
 var $259=(($256+12)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(($256+16)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=($260|0)==($262|0);
 if($263){label=74;break;}else{label=76;break;}
 case 74: 
 var $264=$256;
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+36)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=FUNCTION_TABLE[$267]($256);
 var $269=($268|0)==-1;
 if($269){label=75;break;}else{label=76;break;}
 case 75: 
 HEAP32[(($255)>>2)]=0;
 label=77;break;
 case 76: 
 if($254){label=79;break;}else{label=78;break;}
 case 77: 
 if($254){label=78;break;}else{label=79;break;}
 case 78: 
 var $272=HEAP32[(($__err)>>2)];
 var $273=$272|2;
 HEAP32[(($__err)>>2)]=$273;
 label=79;break;
 case 79: 
 var $275=(($agg_result)|0);
 HEAP32[(($275)>>2)]=$253;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,3992,4000);
 STACKTOP=sp;return;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($this+8)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($3);
 var $9=(($__b)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($__e)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$8;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($8+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $33=$23;var $32=$21;var $31=$21;label=4;break;
 case 3: 
 var $25=$8;
 var $26=(($25+1)|0);
 var $27=$8;
 var $28=(($27+1)|0);
 var $29=($16&255);
 var $30=$29>>>1;
 var $33=$30;var $32=$26;var $31=$28;label=4;break;
 case 4: 
 var $31;
 var $32;
 var $33;
 var $34=(($31+$33)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,$32,$34);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((15376)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=15376;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$5,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((15380)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $36=(($this+8)|0);
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=HEAP32[(($38)>>2)];
 var $40=FUNCTION_TABLE[$39]($36);
 var $41=(($1)|0);
 HEAP32[(($41)>>2)]=$34;
 var $42=(($40+168)|0);
 var $43=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$40,$42,$29,$__err,0);
 var $44=$43;
 var $45=$40;
 var $46=((($44)-($45))|0);
 var $47=($46|0)<168;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=(($__tm+24)|0);
 var $50=(((($46|0))/(12))&-1);
 var $51=(((($50|0))%(7))&-1);
 HEAP32[(($49)>>2)]=$51;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $52=(($__b)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$53;
 STACKTOP=sp;return;
 case 10: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=HEAP32[(($3)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 ___resumeException($56$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((15376)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=15376;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$5,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((15380)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $36=(($this+8)|0);
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($36);
 var $42=(($1)|0);
 HEAP32[(($42)>>2)]=$34;
 var $43=(($41+288)|0);
 var $44=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$41,$43,$29,$__err,0);
 var $45=$44;
 var $46=$41;
 var $47=((($45)-($46))|0);
 var $48=($47|0)<288;
 if($48){label=8;break;}else{label=9;break;}
 case 8: 
 var $50=(($__tm+16)|0);
 var $51=(((($47|0))/(12))&-1);
 var $52=(((($51|0))%(12))&-1);
 HEAP32[(($50)>>2)]=$52;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $53=(($__b)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($agg_result)|0);
 HEAP32[(($55)>>2)]=$54;
 STACKTOP=sp;return;
 case 10: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=HEAP32[(($3)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 ___resumeException($57$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((15376)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=15376;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$5,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((15380)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__tm+20)|0);
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$1,$__err,$29,4);
 var $39=HEAP32[(($__err)>>2)];
 var $40=$39&4;
 var $41=($40|0)==0;
 if($41){label=8;break;}else{label=12;break;}
 case 8: 
 var $43=($38|0)<69;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 var $45=((($38)+(2000))|0);
 var $__t_0_i=$45;label=11;break;
 case 10: 
 var $_off_i=((($38)-(69))|0);
 var $47=($_off_i>>>0)<31;
 var $48=((($38)+(1900))|0);
 var $__i=($47?$48:$38);
 var $__t_0_i=$__i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $50=((($__t_0_i)-(1900))|0);
 HEAP32[(($33)>>2)]=$50;
 label=12;break;
 case 12: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $51=(($__b)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($agg_result)|0);
 HEAP32[(($53)>>2)]=$52;
 STACKTOP=sp;return;
 case 13: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=HEAP32[(($3)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 ___resumeException($55$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 var $11=(sp)+(72);
 var $12=(sp)+(80);
 var $13=(sp)+(88);
 var $__p_i_i_i_i=(sp)+(96);
 var $14=(sp)+(112);
 var $15=(sp)+(120);
 var $16=(sp)+(128);
 var $17=(sp)+(136);
 var $18=(sp)+(144);
 var $19=(sp)+(152);
 var $20=(sp)+(160);
 var $21=(sp)+(168);
 var $22=(sp)+(176);
 var $23=(sp)+(184);
 var $24=(sp)+(192);
 var $25=(sp)+(200);
 var $26=(sp)+(208);
 var $27=(sp)+(216);
 var $28=(sp)+(224);
 var $29=(sp)+(232);
 var $30=(sp)+(240);
 var $31=(sp)+(248);
 var $32=(sp)+(256);
 var $33=(sp)+(264);
 var $34=(sp)+(272);
 var $35=(sp)+(280);
 var $36=(sp)+(288);
 var $37=(sp)+(296);
 var $38=(sp)+(304);
 var $39=(sp)+(312);
 var $40=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 var $41=(($14)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $44=HEAP32[((15376)>>2)];
 var $45=($44|0)==-1;
 if($45){label=3;break;}else{label=2;break;}
 case 2: 
 var $47=(($__p_i_i_i_i)|0);
 HEAP32[(($47)>>2)]=15376;
 var $48=(($__p_i_i_i_i+4)|0);
 HEAP32[(($48)>>2)]=(26);
 var $49=(($__p_i_i_i_i+8)|0);
 HEAP32[(($49)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$43,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $50=HEAP32[((15380)>>2)];
 var $51=((($50)-(1))|0);
 var $52=(($42+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($42+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$53;
 var $57=$55;
 var $58=((($56)-($57))|0);
 var $59=$58>>2;
 var $60=($59>>>0)>($51>>>0);
 if($60){label=4;break;}else{label=5;break;}
 case 4: 
 var $61=(($55+($51<<2))|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){label=5;break;}else{label=7;break;}
 case 5: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 __ZNSt8bad_castC2Ev($65);
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $67=$62;
 var $68=HEAP32[(($41)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 var $71=(($__fmt<<24)>>24);
 switch(($71|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=17;break;}case 68:{ label=21;break;}case 70:{ label=22;break;}case 72:{ label=23;break;}case 73:{ label=26;break;}case 106:{ label=30;break;}case 109:{ label=33;break;}case 77:{ label=36;break;}case 110:case 116:{ label=39;break;}case 112:{ label=40;break;}case 114:{ label=41;break;}case 82:{ label=42;break;}case 83:{ label=43;break;}case 84:{ label=46;break;}case 119:{ label=47;break;}case 120:{ label=50;break;}case 88:{ label=51;break;}case 121:{ label=55;break;}case 89:{ label=60;break;}case 37:{ label=62;break;}case 97:case 65:{ label=9;break;}default:{label=63;break;}}break;
 case 8: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=HEAP32[(($41)>>2)];
 var $75=(($74)|0);
 var $76=__ZNSt3__114__shared_count16__release_sharedEv($75);
 ___resumeException($73$0)
 case 9: 
 var $78=(($__e)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$13;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $81=(($this+8)|0);
 var $82=$81;
 var $83=HEAP32[(($82)>>2)];
 var $84=HEAP32[(($83)>>2)];
 var $85=FUNCTION_TABLE[$84]($81);
 var $86=(($13)|0);
 HEAP32[(($86)>>2)]=$79;
 var $87=(($85+168)|0);
 var $88=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$13,$85,$87,$67,$__err,0);
 var $89=$88;
 var $90=$85;
 var $91=((($89)-($90))|0);
 var $92=($91|0)<168;
 if($92){label=10;break;}else{label=64;break;}
 case 10: 
 var $94=(($__tm+24)|0);
 var $95=(((($91|0))/(12))&-1);
 var $96=(((($95|0))%(7))&-1);
 HEAP32[(($94)>>2)]=$96;
 label=64;break;
 case 11: 
 var $98=(($__e)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$12;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $101=(($this+8)|0);
 var $102=$101;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+4)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($101);
 var $107=(($12)|0);
 HEAP32[(($107)>>2)]=$99;
 var $108=(($106+288)|0);
 var $109=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$12,$106,$108,$67,$__err,0);
 var $110=$109;
 var $111=$106;
 var $112=((($110)-($111))|0);
 var $113=($112|0)<288;
 if($113){label=12;break;}else{label=64;break;}
 case 12: 
 var $115=(($__tm+16)|0);
 var $116=(((($112|0))/(12))&-1);
 var $117=(((($116|0))%(12))&-1);
 HEAP32[(($115)>>2)]=$117;
 label=64;break;
 case 13: 
 var $119=(($this+8)|0);
 var $120=$119;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=FUNCTION_TABLE[$123]($119);
 var $125=(($__b)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($16)|0);
 HEAP32[(($127)>>2)]=$126;
 var $128=(($__e)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($17)|0);
 HEAP32[(($130)>>2)]=$129;
 var $131=$124;
 var $132=HEAP8[($131)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 if($134){label=15;break;}else{label=14;break;}
 case 14: 
 var $136=(($124+8)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($124+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $149=$139;var $148=$137;var $147=$137;label=16;break;
 case 15: 
 var $141=$124;
 var $142=(($141+1)|0);
 var $143=$124;
 var $144=(($143+1)|0);
 var $145=($132&255);
 var $146=$145>>>1;
 var $149=$146;var $148=$142;var $147=$144;label=16;break;
 case 16: 
 var $147;
 var $148;
 var $149;
 var $150=(($147+$149)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($15,$this,$16,$17,$__iob,$__err,$__tm,$148,$150);
 var $151=(($15)|0);
 var $152=HEAP32[(($151)>>2)];
 HEAP32[(($125)>>2)]=$152;
 label=64;break;
 case 17: 
 var $154=(($__tm+12)|0);
 var $155=(($__e)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=$11;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $158=(($11)|0);
 HEAP32[(($158)>>2)]=$156;
 var $159=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$11,$__err,$67,2);
 var $160=HEAP32[(($__err)>>2)];
 var $161=$160&4;
 var $162=($161|0)==0;
 if($162){label=18;break;}else{label=20;break;}
 case 18: 
 var $_off_i=((($159)-(1))|0);
 var $164=($_off_i>>>0)<31;
 if($164){label=19;break;}else{label=20;break;}
 case 19: 
 HEAP32[(($154)>>2)]=$159;
 label=64;break;
 case 20: 
 var $167=$160|4;
 HEAP32[(($__err)>>2)]=$167;
 label=64;break;
 case 21: 
 var $169=(($__b)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(($19)|0);
 HEAP32[(($171)>>2)]=$170;
 var $172=(($__e)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($20)|0);
 HEAP32[(($174)>>2)]=$173;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($18,$this,$19,$20,$__iob,$__err,$__tm,3984,3992);
 var $175=(($18)|0);
 var $176=HEAP32[(($175)>>2)];
 HEAP32[(($169)>>2)]=$176;
 label=64;break;
 case 22: 
 var $178=(($__b)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($22)|0);
 HEAP32[(($180)>>2)]=$179;
 var $181=(($__e)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($23)|0);
 HEAP32[(($183)>>2)]=$182;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$22,$23,$__iob,$__err,$__tm,3976,3984);
 var $184=(($21)|0);
 var $185=HEAP32[(($184)>>2)];
 HEAP32[(($178)>>2)]=$185;
 label=64;break;
 case 23: 
 var $187=(($__e)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=$10;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $190=(($10)|0);
 HEAP32[(($190)>>2)]=$188;
 var $191=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$10,$__err,$67,2);
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192&4;
 var $194=($193|0)==0;
 var $195=($191|0)<24;
 var $or_cond_i=$194&$195;
 if($or_cond_i){label=24;break;}else{label=25;break;}
 case 24: 
 var $197=(($__tm+8)|0);
 HEAP32[(($197)>>2)]=$191;
 label=64;break;
 case 25: 
 var $199=$192|4;
 HEAP32[(($__err)>>2)]=$199;
 label=64;break;
 case 26: 
 var $201=(($__tm+8)|0);
 var $202=(($__e)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=$9;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $205=(($9)|0);
 HEAP32[(($205)>>2)]=$203;
 var $206=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$9,$__err,$67,2);
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207&4;
 var $209=($208|0)==0;
 if($209){label=27;break;}else{label=29;break;}
 case 27: 
 var $_off_i12=((($206)-(1))|0);
 var $211=($_off_i12>>>0)<12;
 if($211){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($201)>>2)]=$206;
 label=64;break;
 case 29: 
 var $214=$207|4;
 HEAP32[(($__err)>>2)]=$214;
 label=64;break;
 case 30: 
 var $216=(($__e)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=$8;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $219=(($8)|0);
 HEAP32[(($219)>>2)]=$217;
 var $220=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$8,$__err,$67,3);
 var $221=HEAP32[(($__err)>>2)];
 var $222=$221&4;
 var $223=($222|0)==0;
 var $224=($220|0)<366;
 var $or_cond_i15=$223&$224;
 if($or_cond_i15){label=31;break;}else{label=32;break;}
 case 31: 
 var $226=(($__tm+28)|0);
 HEAP32[(($226)>>2)]=$220;
 label=64;break;
 case 32: 
 var $228=$221|4;
 HEAP32[(($__err)>>2)]=$228;
 label=64;break;
 case 33: 
 var $230=(($__e)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=$7;
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $233=(($7)|0);
 HEAP32[(($233)>>2)]=$231;
 var $234=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$7,$__err,$67,2);
 var $235=HEAP32[(($__err)>>2)];
 var $236=$235&4;
 var $237=($236|0)==0;
 var $238=($234|0)<13;
 var $or_cond_i18=$237&$238;
 if($or_cond_i18){label=34;break;}else{label=35;break;}
 case 34: 
 var $240=(($__tm+16)|0);
 var $241=((($234)-(1))|0);
 HEAP32[(($240)>>2)]=$241;
 label=64;break;
 case 35: 
 var $243=$235|4;
 HEAP32[(($__err)>>2)]=$243;
 label=64;break;
 case 36: 
 var $245=(($__e)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=$6;
 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $248=(($6)|0);
 HEAP32[(($248)>>2)]=$246;
 var $249=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$6,$__err,$67,2);
 var $250=HEAP32[(($__err)>>2)];
 var $251=$250&4;
 var $252=($251|0)==0;
 var $253=($249|0)<60;
 var $or_cond_i21=$252&$253;
 if($or_cond_i21){label=37;break;}else{label=38;break;}
 case 37: 
 var $255=(($__tm+4)|0);
 HEAP32[(($255)>>2)]=$249;
 label=64;break;
 case 38: 
 var $257=$250|4;
 HEAP32[(($__err)>>2)]=$257;
 label=64;break;
 case 39: 
 var $259=(($__e)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(($24)|0);
 HEAP32[(($261)>>2)]=$260;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$24,$__err,$67);
 label=64;break;
 case 40: 
 var $263=(($__tm+8)|0);
 var $264=(($__e)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($25)|0);
 HEAP32[(($266)>>2)]=$265;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$263,$__b,$25,$__err,$67);
 label=64;break;
 case 41: 
 var $268=(($__b)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=(($27)|0);
 HEAP32[(($270)>>2)]=$269;
 var $271=(($__e)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=(($28)|0);
 HEAP32[(($273)>>2)]=$272;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($26,$this,$27,$28,$__iob,$__err,$__tm,3960,3971);
 var $274=(($26)|0);
 var $275=HEAP32[(($274)>>2)];
 HEAP32[(($268)>>2)]=$275;
 label=64;break;
 case 42: 
 var $277=(($__b)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=(($30)|0);
 HEAP32[(($279)>>2)]=$278;
 var $280=(($__e)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(($31)|0);
 HEAP32[(($282)>>2)]=$281;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($29,$this,$30,$31,$__iob,$__err,$__tm,3952,3957);
 var $283=(($29)|0);
 var $284=HEAP32[(($283)>>2)];
 HEAP32[(($277)>>2)]=$284;
 label=64;break;
 case 43: 
 var $286=(($__e)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=$5;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $289=(($5)|0);
 HEAP32[(($289)>>2)]=$287;
 var $290=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$5,$__err,$67,2);
 var $291=HEAP32[(($__err)>>2)];
 var $292=$291&4;
 var $293=($292|0)==0;
 var $294=($290|0)<61;
 var $or_cond_i24=$293&$294;
 if($or_cond_i24){label=44;break;}else{label=45;break;}
 case 44: 
 var $296=(($__tm)|0);
 HEAP32[(($296)>>2)]=$290;
 label=64;break;
 case 45: 
 var $298=$291|4;
 HEAP32[(($__err)>>2)]=$298;
 label=64;break;
 case 46: 
 var $300=(($__b)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($33)|0);
 HEAP32[(($302)>>2)]=$301;
 var $303=(($__e)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=(($34)|0);
 HEAP32[(($305)>>2)]=$304;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($32,$this,$33,$34,$__iob,$__err,$__tm,3944,3952);
 var $306=(($32)|0);
 var $307=HEAP32[(($306)>>2)];
 HEAP32[(($300)>>2)]=$307;
 label=64;break;
 case 47: 
 var $309=(($__e)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=$4;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $312=(($4)|0);
 HEAP32[(($312)>>2)]=$310;
 var $313=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$4,$__err,$67,1);
 var $314=HEAP32[(($__err)>>2)];
 var $315=$314&4;
 var $316=($315|0)==0;
 var $317=($313|0)<7;
 var $or_cond_i27=$316&$317;
 if($or_cond_i27){label=48;break;}else{label=49;break;}
 case 48: 
 var $319=(($__tm+24)|0);
 HEAP32[(($319)>>2)]=$313;
 label=64;break;
 case 49: 
 var $321=$314|4;
 HEAP32[(($__err)>>2)]=$321;
 label=64;break;
 case 50: 
 var $323=$this;
 var $324=HEAP32[(($323)>>2)];
 var $325=(($324+20)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=(($__b)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(($35)|0);
 HEAP32[(($329)>>2)]=$328;
 var $330=(($__e)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=(($36)|0);
 HEAP32[(($332)>>2)]=$331;
 FUNCTION_TABLE[$326]($agg_result,$this,$35,$36,$__iob,$__err,$__tm);
 label=65;break;
 case 51: 
 var $334=(($this+8)|0);
 var $335=$334;
 var $336=HEAP32[(($335)>>2)];
 var $337=(($336+24)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=FUNCTION_TABLE[$338]($334);
 var $340=(($__b)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=(($38)|0);
 HEAP32[(($342)>>2)]=$341;
 var $343=(($__e)|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=(($39)|0);
 HEAP32[(($345)>>2)]=$344;
 var $346=$339;
 var $347=HEAP8[($346)];
 var $348=$347&1;
 var $349=(($348<<24)>>24)==0;
 if($349){label=53;break;}else{label=52;break;}
 case 52: 
 var $351=(($339+8)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=(($339+4)|0);
 var $354=HEAP32[(($353)>>2)];
 var $364=$354;var $363=$352;var $362=$352;label=54;break;
 case 53: 
 var $356=$339;
 var $357=(($356+1)|0);
 var $358=$339;
 var $359=(($358+1)|0);
 var $360=($347&255);
 var $361=$360>>>1;
 var $364=$361;var $363=$357;var $362=$359;label=54;break;
 case 54: 
 var $362;
 var $363;
 var $364;
 var $365=(($362+$364)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($37,$this,$38,$39,$__iob,$__err,$__tm,$363,$365);
 var $366=(($37)|0);
 var $367=HEAP32[(($366)>>2)];
 HEAP32[(($340)>>2)]=$367;
 label=64;break;
 case 55: 
 var $369=(($__tm+20)|0);
 var $370=(($__e)|0);
 var $371=HEAP32[(($370)>>2)];
 var $372=$3;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $373=(($3)|0);
 HEAP32[(($373)>>2)]=$371;
 var $374=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$3,$__err,$67,4);
 var $375=HEAP32[(($__err)>>2)];
 var $376=$375&4;
 var $377=($376|0)==0;
 if($377){label=56;break;}else{label=64;break;}
 case 56: 
 var $379=($374|0)<69;
 if($379){label=57;break;}else{label=58;break;}
 case 57: 
 var $381=((($374)+(2000))|0);
 var $__t_0_i=$381;label=59;break;
 case 58: 
 var $_off_i33=((($374)-(69))|0);
 var $383=($_off_i33>>>0)<31;
 var $384=((($374)+(1900))|0);
 var $__i=($383?$384:$374);
 var $__t_0_i=$__i;label=59;break;
 case 59: 
 var $__t_0_i;
 var $386=((($__t_0_i)-(1900))|0);
 HEAP32[(($369)>>2)]=$386;
 label=64;break;
 case 60: 
 var $388=(($__e)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=$2;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $391=(($2)|0);
 HEAP32[(($391)>>2)]=$389;
 var $392=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$2,$__err,$67,4);
 var $393=HEAP32[(($__err)>>2)];
 var $394=$393&4;
 var $395=($394|0)==0;
 if($395){label=61;break;}else{label=64;break;}
 case 61: 
 var $397=(($__tm+20)|0);
 var $398=((($392)-(1900))|0);
 HEAP32[(($397)>>2)]=$398;
 label=64;break;
 case 62: 
 var $400=(($__e)|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=(($40)|0);
 HEAP32[(($402)>>2)]=$401;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$40,$__err,$67);
 label=64;break;
 case 63: 
 var $404=HEAP32[(($__err)>>2)];
 var $405=$404|4;
 HEAP32[(($__err)>>2)]=$405;
 label=64;break;
 case 64: 
 var $406=(($__b)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=(($agg_result)|0);
 HEAP32[(($408)>>2)]=$407;
 label=65;break;
 case 65: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=(($__e)|0);
 var $3=(($__ct+8)|0);
 label=2;break;
 case 2: 
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 if($5){var $19=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=4;break;}else{var $19=$4;label=7;break;}
 case 4: 
 var $12=$4;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($4);
 var $17=($16|0)==-1;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $19=$_pre_i_i_i;label=7;break;
 case 6: 
 HEAP32[(($1)>>2)]=0;
 var $19=0;label=7;break;
 case 7: 
 var $19;
 var $20=($19|0)==0;
 var $21=HEAP32[(($2)>>2)];
 var $22=($21|0)==0;
 if($22){label=12;break;}else{label=8;break;}
 case 8: 
 var $24=(($21+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($21+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($25|0)==($27|0);
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 if($20){var $36=$21;label=14;break;}else{var $_pre_i2_i_i6=$21;label=22;break;}
 case 10: 
 var $29=$21;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($21);
 var $34=($33|0)==-1;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 HEAP32[(($2)>>2)]=0;
 label=12;break;
 case 12: 
 if($20){var $_pre_i2_i_i6=0;label=22;break;}else{var $36=0;label=14;break;}
 case 13: 
 if($20){var $36=$21;label=14;break;}else{var $_pre_i2_i_i6=$21;label=22;break;}
 case 14: 
 var $36;
 var $37=HEAP32[(($1)>>2)];
 var $38=(($37+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($37+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=15;break;}else{label=16;break;}
 case 15: 
 var $44=$37;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+36)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=FUNCTION_TABLE[$47]($37);
 var $extract_t_i=(($48)&255);
 var $_0_i_off0_i=$extract_t_i;label=17;break;
 case 16: 
 var $50=HEAP8[($39)];
 var $_0_i_off0_i=$50;label=17;break;
 case 17: 
 var $_0_i_off0_i;
 var $isascii1_i=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i){label=18;break;}else{var $_pre_i2_i_i6=$36;label=22;break;}
 case 18: 
 var $51=(($_0_i_off0_i<<24)>>24);
 var $52=HEAP32[(($3)>>2)];
 var $53=(($52+($51<<1))|0);
 var $54=HEAP16[(($53)>>1)];
 var $55=$54&8192;
 var $56=(($55<<16)>>16)==0;
 if($56){var $_pre_i2_i_i6=$36;label=22;break;}else{label=19;break;}
 case 19: 
 var $58=HEAP32[(($1)>>2)];
 var $59=(($58+12)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($58+16)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($60|0)==($62|0);
 if($63){label=20;break;}else{label=21;break;}
 case 20: 
 var $65=$58;
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+40)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=FUNCTION_TABLE[$68]($58);
 label=2;break;
 case 21: 
 var $71=(($60+1)|0);
 HEAP32[(($59)>>2)]=$71;
 label=2;break;
 case 22: 
 var $_pre_i2_i_i6;
 var $72=HEAP32[(($1)>>2)];
 var $73=($72|0)==0;
 if($73){var $87=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $75=(($72+12)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($72+16)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($76|0)==($78|0);
 if($79){label=24;break;}else{var $87=$72;label=27;break;}
 case 24: 
 var $80=$72;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+36)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=FUNCTION_TABLE[$83]($72);
 var $85=($84|0)==-1;
 if($85){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre_i_i_i2=HEAP32[(($1)>>2)];
 var $87=$_pre_i_i_i2;label=27;break;
 case 26: 
 HEAP32[(($1)>>2)]=0;
 var $87=0;label=27;break;
 case 27: 
 var $87;
 var $88=($87|0)==0;
 var $89=($_pre_i2_i_i6|0)==0;
 if($89){label=32;break;}else{label=28;break;}
 case 28: 
 var $91=(($_pre_i2_i_i6+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($_pre_i2_i_i6+16)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=($92|0)==($94|0);
 if($95){label=29;break;}else{label=31;break;}
 case 29: 
 var $96=$_pre_i2_i_i6;
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=FUNCTION_TABLE[$99]($_pre_i2_i_i6);
 var $101=($100|0)==-1;
 if($101){label=30;break;}else{label=31;break;}
 case 30: 
 HEAP32[(($2)>>2)]=0;
 label=32;break;
 case 31: 
 if($88){label=34;break;}else{label=33;break;}
 case 32: 
 if($88){label=33;break;}else{label=34;break;}
 case 33: 
 var $104=HEAP32[(($__err)>>2)];
 var $105=$104|2;
 HEAP32[(($__err)>>2)]=$105;
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+8)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=FUNCTION_TABLE[$6]($2);
 var $8=$7;
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 var $13=(($7+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=4;break;
 case 3: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 var $19=(($7+12)|0);
 var $20=$19;
 var $21=HEAP8[($20)];
 var $22=$21&1;
 var $23=(($22<<24)>>24)==0;
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 var $25=(($7+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $30=$26;label=7;break;
 case 6: 
 var $28=($21&255);
 var $29=$28>>>1;
 var $30=$29;label=7;break;
 case 7: 
 var $30;
 var $31=(((-$30))|0);
 var $32=($18|0)==($31|0);
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=HEAP32[(($__err)>>2)];
 var $35=$34|4;
 HEAP32[(($__err)>>2)]=$35;
 label=15;break;
 case 9: 
 var $37=(($__e)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($1)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($7+24)|0);
 var $41=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$7,$40,$__ct,$__err,0);
 var $42=$41;
 var $43=$7;
 var $44=((($42)-($43))|0);
 var $45=($41|0)==($7|0);
 if($45){label=10;break;}else{label=12;break;}
 case 10: 
 var $47=HEAP32[(($__h)>>2)];
 var $48=($47|0)==12;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($__h)>>2)]=0;
 label=15;break;
 case 12: 
 var $51=($44|0)==12;
 if($51){label=13;break;}else{label=15;break;}
 case 13: 
 var $53=HEAP32[(($__h)>>2)];
 var $54=($53|0)<12;
 if($54){label=14;break;}else{label=15;break;}
 case 14: 
 var $56=((($53)+(12))|0);
 HEAP32[(($__h)>>2)]=$56;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $17=$_pre_i_i_i;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=(($20+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $28=$20;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($20);
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($19)>>2)]=0;
 label=11;break;
 case 10: 
 if($18){var $_pre_i2_i_i611=$20;label=13;break;}else{label=12;break;}
 case 11: 
 if($18){label=12;break;}else{var $_pre_i2_i_i611=0;label=13;break;}
 case 12: 
 var $36=HEAP32[(($__err)>>2)];
 var $37=$36|6;
 HEAP32[(($__err)>>2)]=$37;
 label=33;break;
 case 13: 
 var $_pre_i2_i_i611;
 var $39=HEAP32[(($1)>>2)];
 var $40=(($39+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($39+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=$39;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=FUNCTION_TABLE[$49]($39);
 var $extract_t_i=(($50)&255);
 var $_0_i_off0_i=$extract_t_i;label=16;break;
 case 15: 
 var $52=HEAP8[($41)];
 var $_0_i_off0_i=$52;label=16;break;
 case 16: 
 var $_0_i_off0_i;
 var $53=$__ct;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($__ct,$_0_i_off0_i,0);
 var $58=(($57<<24)>>24)==37;
 if($58){label=18;break;}else{label=17;break;}
 case 17: 
 var $60=HEAP32[(($__err)>>2)];
 var $61=$60|4;
 HEAP32[(($__err)>>2)]=$61;
 label=33;break;
 case 18: 
 var $63=HEAP32[(($1)>>2)];
 var $64=(($63+12)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($63+16)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($65|0)==($67|0);
 if($68){label=19;break;}else{label=20;break;}
 case 19: 
 var $70=$63;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+40)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=FUNCTION_TABLE[$73]($63);
 label=21;break;
 case 20: 
 var $76=(($65+1)|0);
 HEAP32[(($64)>>2)]=$76;
 label=21;break;
 case 21: 
 var $77=HEAP32[(($1)>>2)];
 var $78=($77|0)==0;
 if($78){var $92=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $80=(($77+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($77+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=23;break;}else{var $92=$77;label=26;break;}
 case 23: 
 var $85=$77;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($77);
 var $90=($89|0)==-1;
 if($90){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre_i_i_i2=HEAP32[(($1)>>2)];
 var $92=$_pre_i_i_i2;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $92=0;label=26;break;
 case 26: 
 var $92;
 var $93=($92|0)==0;
 var $94=($_pre_i2_i_i611|0)==0;
 if($94){label=31;break;}else{label=27;break;}
 case 27: 
 var $96=(($_pre_i2_i_i611+12)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($_pre_i2_i_i611+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($97|0)==($99|0);
 if($100){label=28;break;}else{label=30;break;}
 case 28: 
 var $101=$_pre_i2_i_i611;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+36)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=FUNCTION_TABLE[$104]($_pre_i2_i_i611);
 var $106=($105|0)==-1;
 if($106){label=29;break;}else{label=30;break;}
 case 29: 
 HEAP32[(($19)>>2)]=0;
 label=31;break;
 case 30: 
 if($93){label=33;break;}else{label=32;break;}
 case 31: 
 if($93){label=32;break;}else{label=33;break;}
 case 32: 
 var $109=HEAP32[(($__err)>>2)];
 var $110=$109|2;
 HEAP32[(($__err)>>2)]=$110;
 label=33;break;
 case 33: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $17=$_pre_i_i_i;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=(($20+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $28=$20;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($20);
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($19)>>2)]=0;
 label=11;break;
 case 10: 
 if($18){var $39=$20;label=13;break;}else{label=12;break;}
 case 11: 
 if($18){label=12;break;}else{var $39=0;label=13;break;}
 case 12: 
 var $36=HEAP32[(($__err)>>2)];
 var $37=$36|6;
 HEAP32[(($__err)>>2)]=$37;
 var $_01=0;label=52;break;
 case 13: 
 var $39;
 var $40=HEAP32[(($1)>>2)];
 var $41=(($40+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($40+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($42|0)==($44|0);
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=$40;
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+36)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=FUNCTION_TABLE[$50]($40);
 var $extract_t_i=(($51)&255);
 var $_0_i_off0_i=$extract_t_i;label=16;break;
 case 15: 
 var $53=HEAP8[($42)];
 var $_0_i_off0_i=$53;label=16;break;
 case 16: 
 var $_0_i_off0_i;
 var $isascii1_i=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i){label=17;break;}else{label=18;break;}
 case 17: 
 var $54=(($_0_i_off0_i<<24)>>24);
 var $55=(($__ct+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+($54<<1))|0);
 var $58=HEAP16[(($57)>>1)];
 var $59=$58&2048;
 var $60=(($59<<16)>>16)==0;
 if($60){label=18;break;}else{label=19;break;}
 case 18: 
 var $61=HEAP32[(($__err)>>2)];
 var $62=$61|4;
 HEAP32[(($__err)>>2)]=$62;
 var $_01=0;label=52;break;
 case 19: 
 var $64=$__ct;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+36)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=FUNCTION_TABLE[$67]($__ct,$_0_i_off0_i,0);
 var $69=(($68<<24)>>24);
 var $70=HEAP32[(($1)>>2)];
 var $71=(($70+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($70+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=20;break;}else{label=21;break;}
 case 20: 
 var $77=$70;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+40)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($70);
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$39;var $_pre_i2_i_i7=$39;label=22;break;
 case 21: 
 var $83=(($72+1)|0);
 HEAP32[(($71)>>2)]=$83;
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$39;var $_pre_i2_i_i7=$39;label=22;break;
 case 22: 
 var $_pre_i2_i_i7;
 var $84;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $85=HEAP32[(($1)>>2)];
 var $86=($85|0)==0;
 if($86){var $100=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $88=(($85+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($85+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=24;break;}else{var $100=$85;label=27;break;}
 case 24: 
 var $93=$85;
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+36)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=FUNCTION_TABLE[$96]($85);
 var $98=($97|0)==-1;
 if($98){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre_i_i_i3=HEAP32[(($1)>>2)];
 var $100=$_pre_i_i_i3;label=27;break;
 case 26: 
 HEAP32[(($1)>>2)]=0;
 var $100=0;label=27;break;
 case 27: 
 var $100;
 var $101=($100|0)==0;
 var $102=($84|0)==0;
 if($102){var $116=0;var $_pre_i2_i_i21=$_pre_i2_i_i7;label=31;break;}else{label=28;break;}
 case 28: 
 var $104=(($84+12)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($84+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($105|0)==($107|0);
 if($108){label=29;break;}else{var $116=$84;var $_pre_i2_i_i21=$_pre_i2_i_i7;label=31;break;}
 case 29: 
 var $109=$84;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=FUNCTION_TABLE[$112]($84);
 var $114=($113|0)==-1;
 if($114){label=30;break;}else{var $116=$_pre_i2_i_i7;var $_pre_i2_i_i21=$_pre_i2_i_i7;label=31;break;}
 case 30: 
 HEAP32[(($19)>>2)]=0;
 var $116=0;var $_pre_i2_i_i21=0;label=31;break;
 case 31: 
 var $_pre_i2_i_i21;
 var $116;
 var $117=($116|0)==0;
 var $tmp_i_i9=$101^$117;
 var $118=($_0|0)>0;
 var $_=$tmp_i_i9&$118;
 var $119=HEAP32[(($1)>>2)];
 if($_){label=32;break;}else{label=40;break;}
 case 32: 
 var $121=(($119+12)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(($119+16)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=($122|0)==($124|0);
 if($125){label=33;break;}else{label=34;break;}
 case 33: 
 var $127=$119;
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+36)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=FUNCTION_TABLE[$130]($119);
 var $extract_t_i10=(($131)&255);
 var $_0_i_off0_i11=$extract_t_i10;label=35;break;
 case 34: 
 var $133=HEAP8[($122)];
 var $_0_i_off0_i11=$133;label=35;break;
 case 35: 
 var $_0_i_off0_i11;
 var $isascii1_i13=(($_0_i_off0_i11<<24)>>24)>-1;
 if($isascii1_i13){label=36;break;}else{var $_01=$__r_0;label=52;break;}
 case 36: 
 var $134=(($_0_i_off0_i11<<24)>>24);
 var $135=HEAP32[(($55)>>2)];
 var $136=(($135+($134<<1))|0);
 var $137=HEAP16[(($136)>>1)];
 var $138=$137&2048;
 var $139=(($138<<16)>>16)==0;
 if($139){var $_01=$__r_0;label=52;break;}else{label=37;break;}
 case 37: 
 var $141=((($__r_0)*(10))&-1);
 var $142=HEAP32[(($64)>>2)];
 var $143=(($142+36)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=FUNCTION_TABLE[$144]($__ct,$_0_i_off0_i11,0);
 var $146=(($145<<24)>>24);
 var $147=((($146)+($141))|0);
 var $148=HEAP32[(($1)>>2)];
 var $149=(($148+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($148+16)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($150|0)==($152|0);
 if($153){label=38;break;}else{label=39;break;}
 case 38: 
 var $155=$148;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+40)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=FUNCTION_TABLE[$158]($148);
 var $__r_0_in=$147;var $_0_in=$_0;var $84=$116;var $_pre_i2_i_i7=$_pre_i2_i_i21;label=22;break;
 case 39: 
 var $161=(($150+1)|0);
 HEAP32[(($149)>>2)]=$161;
 var $__r_0_in=$147;var $_0_in=$_0;var $84=$116;var $_pre_i2_i_i7=$_pre_i2_i_i21;label=22;break;
 case 40: 
 var $163=($119|0)==0;
 if($163){var $177=0;label=45;break;}else{label=41;break;}
 case 41: 
 var $165=(($119+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($119+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=42;break;}else{var $177=$119;label=45;break;}
 case 42: 
 var $170=$119;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=FUNCTION_TABLE[$173]($119);
 var $175=($174|0)==-1;
 if($175){label=44;break;}else{label=43;break;}
 case 43: 
 var $_pre_i_i_i17=HEAP32[(($1)>>2)];
 var $177=$_pre_i_i_i17;label=45;break;
 case 44: 
 HEAP32[(($1)>>2)]=0;
 var $177=0;label=45;break;
 case 45: 
 var $177;
 var $178=($177|0)==0;
 var $179=($_pre_i2_i_i21|0)==0;
 if($179){label=50;break;}else{label=46;break;}
 case 46: 
 var $181=(($_pre_i2_i_i21+12)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($_pre_i2_i_i21+16)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($182|0)==($184|0);
 if($185){label=47;break;}else{label=49;break;}
 case 47: 
 var $186=$_pre_i2_i_i21;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=FUNCTION_TABLE[$189]($_pre_i2_i_i21);
 var $191=($190|0)==-1;
 if($191){label=48;break;}else{label=49;break;}
 case 48: 
 HEAP32[(($19)>>2)]=0;
 label=50;break;
 case 49: 
 if($178){var $_01=$__r_0;label=52;break;}else{label=51;break;}
 case 50: 
 if($178){label=51;break;}else{var $_01=$__r_0;label=52;break;}
 case 51: 
 var $194=HEAP32[(($__err)>>2)];
 var $195=$194|2;
 HEAP32[(($__err)>>2)]=$195;
 var $_01=$__r_0;label=52;break;
 case 52: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $5=(($1)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $8=HEAP32[((15368)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__p_i_i_i_i)|0);
 HEAP32[(($11)>>2)]=15368;
 var $12=(($__p_i_i_i_i+4)|0);
 HEAP32[(($12)>>2)]=(26);
 var $13=(($__p_i_i_i_i+8)|0);
 HEAP32[(($13)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$7,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=26;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=HEAP32[((15372)>>2)];
 var $15=((($14)-(1))|0);
 var $16=(($6+12)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$17;
 var $21=$19;
 var $22=((($20)-($21))|0);
 var $23=$22>>2;
 var $24=($23>>>0)>($15>>>0);
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=(($19+($15<<2))|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==0;
 if($27){label=5;break;}else{label=7;break;}
 case 5: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 __ZNSt8bad_castC2Ev($29);
 (function() { try { __THREW__ = 0; return ___cxa_throw($28,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=26;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $31=$26;
 var $32=HEAP32[(($5)>>2)];
 var $33=(($32)|0);
 var $34=__ZNSt3__114__shared_count16__release_sharedEv($33);
 HEAP32[(($__err)>>2)]=0;
 var $35=($__fmtb|0)==($__fmte|0);
 var $_phi_trans_insert_pre_pre=(($__b)|0);
 if($35){label=71;break;}else{label=8;break;}
 case 8: 
 var $36=(($__e)|0);
 var $37=$26;
 var $38=$26;
 var $39=$26;
 var $40=$this;
 var $41=(($3)|0);
 var $42=(($4)|0);
 var $43=(($2)|0);
 var $_0_ph43=$__fmtb;var $_pre44=0;label=9;break;
 case 9: 
 var $_pre44;
 var $_0_ph43;
 var $45=$_pre44;label=10;break;
 case 10: 
 var $45;
 var $46=($45|0)==0;
 if($46){label=11;break;}else{label=71;break;}
 case 11: 
 var $48=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $49=($48|0)==0;
 if($49){var $67=1;var $66=0;label=17;break;}else{label=12;break;}
 case 12: 
 var $51=(($48+12)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($48+16)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($52|0)==($54|0);
 if($55){label=13;break;}else{label=14;break;}
 case 13: 
 var $57=$48;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+36)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=FUNCTION_TABLE[$60]($48);
 var $_0_i_i_i_i=$61;label=15;break;
 case 14: 
 var $63=HEAP32[(($52)>>2)];
 var $_0_i_i_i_i=$63;label=15;break;
 case 15: 
 var $_0_i_i_i_i;
 var $64=($_0_i_i_i_i|0)==-1;
 if($64){label=16;break;}else{var $67=0;var $66=$48;label=17;break;}
 case 16: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $67=1;var $66=0;label=17;break;
 case 17: 
 var $66;
 var $67;
 var $68=HEAP32[(($36)>>2)];
 var $69=($68|0)==0;
 if($69){label=23;break;}else{label=18;break;}
 case 18: 
 var $71=(($68+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($68+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=19;break;}else{label=20;break;}
 case 19: 
 var $77=$68;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+36)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($68);
 var $_0_i_i1_i_i=$81;label=21;break;
 case 20: 
 var $83=HEAP32[(($72)>>2)];
 var $_0_i_i1_i_i=$83;label=21;break;
 case 21: 
 var $_0_i_i1_i_i;
 var $84=($_0_i_i1_i_i|0)==-1;
 if($84){label=22;break;}else{label=24;break;}
 case 22: 
 HEAP32[(($36)>>2)]=0;
 label=23;break;
 case 23: 
 if($67){label=25;break;}else{var $93=0;label=27;break;}
 case 24: 
 if($67){var $93=$68;label=27;break;}else{label=25;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$66;label=72;break;
 case 26: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1); var $88$1 = tempRet0;
 var $89=HEAP32[(($5)>>2)];
 var $90=(($89)|0);
 var $91=__ZNSt3__114__shared_count16__release_sharedEv($90);
 ___resumeException($88$0)
 case 27: 
 var $93;
 var $94=HEAP32[(($_0_ph43)>>2)];
 var $95=HEAP32[(($37)>>2)];
 var $96=(($95+52)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($31,$94,0);
 var $99=(($98<<24)>>24)==37;
 if($99){label=28;break;}else{label=37;break;}
 case 28: 
 var $101=(($_0_ph43+4)|0);
 var $102=($101|0)==($__fmte|0);
 if($102){label=29;break;}else{label=30;break;}
 case 29: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$66;label=72;break;
 case 30: 
 var $105=HEAP32[(($101)>>2)];
 var $106=HEAP32[(($37)>>2)];
 var $107=(($106+52)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($31,$105,0);
 if((($109<<24)>>24)==69|(($109<<24)>>24)==48){ label=31;break;}else{var $__opt_0=0;var $__cmd_0=$109;var $_1=$101;label=34;break;}
 case 31: 
 var $111=(($_0_ph43+8)|0);
 var $112=($111|0)==($__fmte|0);
 if($112){label=32;break;}else{label=33;break;}
 case 32: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$66;label=72;break;
 case 33: 
 var $115=HEAP32[(($111)>>2)];
 var $116=HEAP32[(($37)>>2)];
 var $117=(($116+52)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=FUNCTION_TABLE[$118]($31,$115,0);
 var $__opt_0=$109;var $__cmd_0=$119;var $_1=$111;label=34;break;
 case 34: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $121=HEAP32[(($40)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 HEAP32[(($41)>>2)]=$66;
 HEAP32[(($42)>>2)]=$93;
 FUNCTION_TABLE[$123]($2,$this,$3,$4,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $124=HEAP32[(($43)>>2)];
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$124;
 var $125=(($_1+4)|0);
 var $_0_ph_be=$125;label=35;break;
 case 35: 
 var $_0_ph_be;
 var $126=($_0_ph_be|0)==($__fmte|0);
 if($126){label=71;break;}else{label=36;break;}
 case 36: 
 var $_pre44_pre=HEAP32[(($__err)>>2)];
 var $_0_ph43=$_0_ph_be;var $_pre44=$_pre44_pre;label=9;break;
 case 37: 
 var $128=HEAP32[(($_0_ph43)>>2)];
 var $129=HEAP32[(($38)>>2)];
 var $130=(($129+12)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=FUNCTION_TABLE[$131]($31,8192,$128);
 if($132){var $_0_pn=$_0_ph43;label=38;break;}else{label=62;break;}
 case 38: 
 var $_0_pn;
 var $_2=(($_0_pn+4)|0);
 var $133=($_2|0)==($__fmte|0);
 if($133){var $_2_lcssa=$__fmte;label=40;break;}else{label=39;break;}
 case 39: 
 var $135=HEAP32[(($_2)>>2)];
 var $136=HEAP32[(($38)>>2)];
 var $137=(($136+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=FUNCTION_TABLE[$138]($31,8192,$135);
 if($139){var $_0_pn=$_2;label=38;break;}else{var $_2_lcssa=$_2;label=40;break;}
 case 40: 
 var $_2_lcssa;
 var $_pre_i_i_i6=$66;var $140=$93;var $_pre_i3_i_i12=$93;label=41;break;
 case 41: 
 var $_pre_i3_i_i12;
 var $140;
 var $_pre_i_i_i6;
 var $141=($_pre_i_i_i6|0)==0;
 if($141){var $159=1;var $158=0;label=47;break;}else{label=42;break;}
 case 42: 
 var $143=(($_pre_i_i_i6+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($_pre_i_i_i6+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($144|0)==($146|0);
 if($147){label=43;break;}else{label=44;break;}
 case 43: 
 var $149=$_pre_i_i_i6;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+36)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=FUNCTION_TABLE[$152]($_pre_i_i_i6);
 var $_0_i_i_i_i4=$153;label=45;break;
 case 44: 
 var $155=HEAP32[(($144)>>2)];
 var $_0_i_i_i_i4=$155;label=45;break;
 case 45: 
 var $_0_i_i_i_i4;
 var $156=($_0_i_i_i_i4|0)==-1;
 if($156){label=46;break;}else{var $159=0;var $158=$_pre_i_i_i6;label=47;break;}
 case 46: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $159=1;var $158=0;label=47;break;
 case 47: 
 var $158;
 var $159;
 var $160=($140|0)==0;
 if($160){var $_pre_i3_i_i1246=$_pre_i3_i_i12;label=53;break;}else{label=48;break;}
 case 48: 
 var $162=(($140+12)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($140+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($163|0)==($165|0);
 if($166){label=49;break;}else{label=50;break;}
 case 49: 
 var $168=$140;
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+36)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=FUNCTION_TABLE[$171]($140);
 var $_0_i_i1_i_i10=$172;label=51;break;
 case 50: 
 var $174=HEAP32[(($163)>>2)];
 var $_0_i_i1_i_i10=$174;label=51;break;
 case 51: 
 var $_0_i_i1_i_i10;
 var $175=($_0_i_i1_i_i10|0)==-1;
 if($175){label=52;break;}else{label=54;break;}
 case 52: 
 HEAP32[(($36)>>2)]=0;
 var $_pre_i3_i_i1246=0;label=53;break;
 case 53: 
 var $_pre_i3_i_i1246;
 if($159){var $_0_ph_be=$_2_lcssa;label=35;break;}else{var $177=0;var $_pre_i3_i_i1245=$_pre_i3_i_i1246;label=55;break;}
 case 54: 
 var $phitmp_i4_i_i13=($_pre_i3_i_i12|0)==0;
 var $tmp_i_i15=$159^$phitmp_i4_i_i13;
 if($tmp_i_i15){var $177=$_pre_i3_i_i12;var $_pre_i3_i_i1245=$_pre_i3_i_i12;label=55;break;}else{var $_0_ph_be=$_2_lcssa;label=35;break;}
 case 55: 
 var $_pre_i3_i_i1245;
 var $177;
 var $178=(($158+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($158+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=56;break;}else{label=57;break;}
 case 56: 
 var $184=$158;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=FUNCTION_TABLE[$187]($158);
 var $_0_i_i=$188;label=58;break;
 case 57: 
 var $190=HEAP32[(($179)>>2)];
 var $_0_i_i=$190;label=58;break;
 case 58: 
 var $_0_i_i;
 var $191=HEAP32[(($38)>>2)];
 var $192=(($191+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=FUNCTION_TABLE[$193]($31,8192,$_0_i_i);
 if($194){label=59;break;}else{var $_0_ph_be=$_2_lcssa;label=35;break;}
 case 59: 
 var $196=HEAP32[(($178)>>2)];
 var $197=HEAP32[(($180)>>2)];
 var $198=($196|0)==($197|0);
 if($198){label=60;break;}else{label=61;break;}
 case 60: 
 var $200=$158;
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+40)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=FUNCTION_TABLE[$203]($158);
 var $_pre_i_i_i6=$158;var $140=$177;var $_pre_i3_i_i12=$_pre_i3_i_i1245;label=41;break;
 case 61: 
 var $206=(($196+4)|0);
 HEAP32[(($178)>>2)]=$206;
 var $_pre_i_i_i6=$158;var $140=$177;var $_pre_i3_i_i12=$_pre_i3_i_i1245;label=41;break;
 case 62: 
 var $208=(($66+12)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($66+16)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=($209|0)==($211|0);
 if($212){label=63;break;}else{label=64;break;}
 case 63: 
 var $214=$66;
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215+36)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=FUNCTION_TABLE[$217]($66);
 var $_0_i_i16=$218;label=65;break;
 case 64: 
 var $220=HEAP32[(($209)>>2)];
 var $_0_i_i16=$220;label=65;break;
 case 65: 
 var $_0_i_i16;
 var $221=HEAP32[(($39)>>2)];
 var $222=(($221+28)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=FUNCTION_TABLE[$223]($31,$_0_i_i16);
 var $225=HEAP32[(($_0_ph43)>>2)];
 var $226=HEAP32[(($39)>>2)];
 var $227=(($226+28)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=FUNCTION_TABLE[$228]($31,$225);
 var $230=($224|0)==($229|0);
 if($230){label=66;break;}else{label=70;break;}
 case 66: 
 var $232=HEAP32[(($208)>>2)];
 var $233=HEAP32[(($210)>>2)];
 var $234=($232|0)==($233|0);
 if($234){label=67;break;}else{label=68;break;}
 case 67: 
 var $236=$66;
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+40)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=FUNCTION_TABLE[$239]($66);
 label=69;break;
 case 68: 
 var $242=(($232+4)|0);
 HEAP32[(($208)>>2)]=$242;
 label=69;break;
 case 69: 
 var $243=(($_0_ph43+4)|0);
 var $_0_ph_be=$243;label=35;break;
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 var $45=4;label=10;break;
 case 71: 
 var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $_pre_i_i_i21=$_pre;label=72;break;
 case 72: 
 var $_pre_i_i_i21;
 var $244=(($__b)|0);
 var $245=($_pre_i_i_i21|0)==0;
 if($245){var $263=1;var $262=0;label=78;break;}else{label=73;break;}
 case 73: 
 var $247=(($_pre_i_i_i21+12)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($_pre_i_i_i21+16)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($248|0)==($250|0);
 if($251){label=74;break;}else{label=75;break;}
 case 74: 
 var $253=$_pre_i_i_i21;
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254+36)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=FUNCTION_TABLE[$256]($_pre_i_i_i21);
 var $_0_i_i_i_i19=$257;label=76;break;
 case 75: 
 var $259=HEAP32[(($248)>>2)];
 var $_0_i_i_i_i19=$259;label=76;break;
 case 76: 
 var $_0_i_i_i_i19;
 var $260=($_0_i_i_i_i19|0)==-1;
 if($260){label=77;break;}else{var $263=0;var $262=$_pre_i_i_i21;label=78;break;}
 case 77: 
 HEAP32[(($244)>>2)]=0;
 var $263=1;var $262=0;label=78;break;
 case 78: 
 var $262;
 var $263;
 var $264=(($__e)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($265|0)==0;
 if($266){label=84;break;}else{label=79;break;}
 case 79: 
 var $268=(($265+12)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=(($265+16)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=($269|0)==($271|0);
 if($272){label=80;break;}else{label=81;break;}
 case 80: 
 var $274=$265;
 var $275=HEAP32[(($274)>>2)];
 var $276=(($275+36)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=FUNCTION_TABLE[$277]($265);
 var $_0_i_i1_i_i25=$278;label=82;break;
 case 81: 
 var $280=HEAP32[(($269)>>2)];
 var $_0_i_i1_i_i25=$280;label=82;break;
 case 82: 
 var $_0_i_i1_i_i25;
 var $281=($_0_i_i1_i_i25|0)==-1;
 if($281){label=83;break;}else{label=85;break;}
 case 83: 
 HEAP32[(($264)>>2)]=0;
 label=84;break;
 case 84: 
 if($263){label=86;break;}else{label=87;break;}
 case 85: 
 if($263){label=87;break;}else{label=86;break;}
 case 86: 
 var $284=HEAP32[(($__err)>>2)];
 var $285=$284|2;
 HEAP32[(($__err)>>2)]=$285;
 label=87;break;
 case 87: 
 var $287=(($agg_result)|0);
 HEAP32[(($287)>>2)]=$262;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,3912,3944);
 STACKTOP=sp;return;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($this+8)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($3);
 var $9=(($__b)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($__e)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$8;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($8+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $31=$23;var $30=$21;var $29=$21;label=4;break;
 case 3: 
 var $25=(($8+4)|0);
 var $26=(($8+4)|0);
 var $27=($16&255);
 var $28=$27>>>1;
 var $31=$28;var $30=$25;var $29=$26;label=4;break;
 case 4: 
 var $29;
 var $30;
 var $31;
 var $32=(($29+($31<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,$30,$32);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((15368)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=15368;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$5,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((15372)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $36=(($this+8)|0);
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=HEAP32[(($38)>>2)];
 var $40=FUNCTION_TABLE[$39]($36);
 var $41=(($1)|0);
 HEAP32[(($41)>>2)]=$34;
 var $42=(($40+168)|0);
 var $43=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$40,$42,$29,$__err,0);
 var $44=$43;
 var $45=$40;
 var $46=((($44)-($45))|0);
 var $47=($46|0)<168;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=(($__tm+24)|0);
 var $50=(((($46|0))/(12))&-1);
 var $51=(((($50|0))%(7))&-1);
 HEAP32[(($49)>>2)]=$51;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $52=(($__b)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$53;
 STACKTOP=sp;return;
 case 10: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=HEAP32[(($3)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 ___resumeException($56$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((15368)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=15368;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$5,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((15372)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $36=(($this+8)|0);
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($36);
 var $42=(($1)|0);
 HEAP32[(($42)>>2)]=$34;
 var $43=(($41+288)|0);
 var $44=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$41,$43,$29,$__err,0);
 var $45=$44;
 var $46=$41;
 var $47=((($45)-($46))|0);
 var $48=($47|0)<288;
 if($48){label=8;break;}else{label=9;break;}
 case 8: 
 var $50=(($__tm+16)|0);
 var $51=(((($47|0))/(12))&-1);
 var $52=(((($51|0))%(12))&-1);
 HEAP32[(($50)>>2)]=$52;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $53=(($__b)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($agg_result)|0);
 HEAP32[(($55)>>2)]=$54;
 STACKTOP=sp;return;
 case 10: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=HEAP32[(($3)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 ___resumeException($57$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((15368)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=15368;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$5,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((15372)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__tm+20)|0);
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$1,$__err,$29,4);
 var $39=HEAP32[(($__err)>>2)];
 var $40=$39&4;
 var $41=($40|0)==0;
 if($41){label=8;break;}else{label=12;break;}
 case 8: 
 var $43=($38|0)<69;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 var $45=((($38)+(2000))|0);
 var $__t_0_i=$45;label=11;break;
 case 10: 
 var $_off_i=((($38)-(69))|0);
 var $47=($_off_i>>>0)<31;
 var $48=((($38)+(1900))|0);
 var $__i=($47?$48:$38);
 var $__t_0_i=$__i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $50=((($__t_0_i)-(1900))|0);
 HEAP32[(($33)>>2)]=$50;
 label=12;break;
 case 12: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $51=(($__b)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($agg_result)|0);
 HEAP32[(($53)>>2)]=$52;
 STACKTOP=sp;return;
 case 13: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=HEAP32[(($3)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 ___resumeException($55$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 var $11=(sp)+(72);
 var $12=(sp)+(80);
 var $13=(sp)+(88);
 var $__p_i_i_i_i=(sp)+(96);
 var $14=(sp)+(112);
 var $15=(sp)+(120);
 var $16=(sp)+(128);
 var $17=(sp)+(136);
 var $18=(sp)+(144);
 var $19=(sp)+(152);
 var $20=(sp)+(160);
 var $21=(sp)+(168);
 var $22=(sp)+(176);
 var $23=(sp)+(184);
 var $24=(sp)+(192);
 var $25=(sp)+(200);
 var $26=(sp)+(208);
 var $27=(sp)+(216);
 var $28=(sp)+(224);
 var $29=(sp)+(232);
 var $30=(sp)+(240);
 var $31=(sp)+(248);
 var $32=(sp)+(256);
 var $33=(sp)+(264);
 var $34=(sp)+(272);
 var $35=(sp)+(280);
 var $36=(sp)+(288);
 var $37=(sp)+(296);
 var $38=(sp)+(304);
 var $39=(sp)+(312);
 var $40=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 var $41=(($14)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $44=HEAP32[((15368)>>2)];
 var $45=($44|0)==-1;
 if($45){label=3;break;}else{label=2;break;}
 case 2: 
 var $47=(($__p_i_i_i_i)|0);
 HEAP32[(($47)>>2)]=15368;
 var $48=(($__p_i_i_i_i+4)|0);
 HEAP32[(($48)>>2)]=(26);
 var $49=(($__p_i_i_i_i+8)|0);
 HEAP32[(($49)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$43,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $50=HEAP32[((15372)>>2)];
 var $51=((($50)-(1))|0);
 var $52=(($42+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($42+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$53;
 var $57=$55;
 var $58=((($56)-($57))|0);
 var $59=$58>>2;
 var $60=($59>>>0)>($51>>>0);
 if($60){label=4;break;}else{label=5;break;}
 case 4: 
 var $61=(($55+($51<<2))|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){label=5;break;}else{label=7;break;}
 case 5: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 __ZNSt8bad_castC2Ev($65);
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $67=$62;
 var $68=HEAP32[(($41)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 var $71=(($__fmt<<24)>>24);
 switch(($71|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=17;break;}case 68:{ label=21;break;}case 70:{ label=22;break;}case 72:{ label=23;break;}case 73:{ label=26;break;}case 106:{ label=30;break;}case 109:{ label=33;break;}case 77:{ label=36;break;}case 110:case 116:{ label=39;break;}case 112:{ label=40;break;}case 114:{ label=41;break;}case 82:{ label=42;break;}case 83:{ label=43;break;}case 84:{ label=46;break;}case 119:{ label=47;break;}case 120:{ label=50;break;}case 88:{ label=51;break;}case 121:{ label=55;break;}case 89:{ label=60;break;}case 37:{ label=62;break;}case 97:case 65:{ label=9;break;}default:{label=63;break;}}break;
 case 8: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=HEAP32[(($41)>>2)];
 var $75=(($74)|0);
 var $76=__ZNSt3__114__shared_count16__release_sharedEv($75);
 ___resumeException($73$0)
 case 9: 
 var $78=(($__e)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$13;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $81=(($this+8)|0);
 var $82=$81;
 var $83=HEAP32[(($82)>>2)];
 var $84=HEAP32[(($83)>>2)];
 var $85=FUNCTION_TABLE[$84]($81);
 var $86=(($13)|0);
 HEAP32[(($86)>>2)]=$79;
 var $87=(($85+168)|0);
 var $88=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$13,$85,$87,$67,$__err,0);
 var $89=$88;
 var $90=$85;
 var $91=((($89)-($90))|0);
 var $92=($91|0)<168;
 if($92){label=10;break;}else{label=64;break;}
 case 10: 
 var $94=(($__tm+24)|0);
 var $95=(((($91|0))/(12))&-1);
 var $96=(((($95|0))%(7))&-1);
 HEAP32[(($94)>>2)]=$96;
 label=64;break;
 case 11: 
 var $98=(($__e)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$12;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $101=(($this+8)|0);
 var $102=$101;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+4)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($101);
 var $107=(($12)|0);
 HEAP32[(($107)>>2)]=$99;
 var $108=(($106+288)|0);
 var $109=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$12,$106,$108,$67,$__err,0);
 var $110=$109;
 var $111=$106;
 var $112=((($110)-($111))|0);
 var $113=($112|0)<288;
 if($113){label=12;break;}else{label=64;break;}
 case 12: 
 var $115=(($__tm+16)|0);
 var $116=(((($112|0))/(12))&-1);
 var $117=(((($116|0))%(12))&-1);
 HEAP32[(($115)>>2)]=$117;
 label=64;break;
 case 13: 
 var $119=(($this+8)|0);
 var $120=$119;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=FUNCTION_TABLE[$123]($119);
 var $125=(($__b)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($16)|0);
 HEAP32[(($127)>>2)]=$126;
 var $128=(($__e)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($17)|0);
 HEAP32[(($130)>>2)]=$129;
 var $131=$124;
 var $132=HEAP8[($131)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 if($134){label=15;break;}else{label=14;break;}
 case 14: 
 var $136=(($124+8)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($124+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $147=$139;var $146=$137;var $145=$137;label=16;break;
 case 15: 
 var $141=(($124+4)|0);
 var $142=(($124+4)|0);
 var $143=($132&255);
 var $144=$143>>>1;
 var $147=$144;var $146=$141;var $145=$142;label=16;break;
 case 16: 
 var $145;
 var $146;
 var $147;
 var $148=(($145+($147<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($15,$this,$16,$17,$__iob,$__err,$__tm,$146,$148);
 var $149=(($15)|0);
 var $150=HEAP32[(($149)>>2)];
 HEAP32[(($125)>>2)]=$150;
 label=64;break;
 case 17: 
 var $152=(($__tm+12)|0);
 var $153=(($__e)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=$11;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $156=(($11)|0);
 HEAP32[(($156)>>2)]=$154;
 var $157=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$11,$__err,$67,2);
 var $158=HEAP32[(($__err)>>2)];
 var $159=$158&4;
 var $160=($159|0)==0;
 if($160){label=18;break;}else{label=20;break;}
 case 18: 
 var $_off_i=((($157)-(1))|0);
 var $162=($_off_i>>>0)<31;
 if($162){label=19;break;}else{label=20;break;}
 case 19: 
 HEAP32[(($152)>>2)]=$157;
 label=64;break;
 case 20: 
 var $165=$158|4;
 HEAP32[(($__err)>>2)]=$165;
 label=64;break;
 case 21: 
 var $167=(($__b)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($19)|0);
 HEAP32[(($169)>>2)]=$168;
 var $170=(($__e)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($20)|0);
 HEAP32[(($172)>>2)]=$171;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($18,$this,$19,$20,$__iob,$__err,$__tm,3880,3912);
 var $173=(($18)|0);
 var $174=HEAP32[(($173)>>2)];
 HEAP32[(($167)>>2)]=$174;
 label=64;break;
 case 22: 
 var $176=(($__b)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($22)|0);
 HEAP32[(($178)>>2)]=$177;
 var $179=(($__e)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($23)|0);
 HEAP32[(($181)>>2)]=$180;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$22,$23,$__iob,$__err,$__tm,3744,3776);
 var $182=(($21)|0);
 var $183=HEAP32[(($182)>>2)];
 HEAP32[(($176)>>2)]=$183;
 label=64;break;
 case 23: 
 var $185=(($__e)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=$10;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $188=(($10)|0);
 HEAP32[(($188)>>2)]=$186;
 var $189=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$10,$__err,$67,2);
 var $190=HEAP32[(($__err)>>2)];
 var $191=$190&4;
 var $192=($191|0)==0;
 var $193=($189|0)<24;
 var $or_cond_i=$192&$193;
 if($or_cond_i){label=24;break;}else{label=25;break;}
 case 24: 
 var $195=(($__tm+8)|0);
 HEAP32[(($195)>>2)]=$189;
 label=64;break;
 case 25: 
 var $197=$190|4;
 HEAP32[(($__err)>>2)]=$197;
 label=64;break;
 case 26: 
 var $199=(($__tm+8)|0);
 var $200=(($__e)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$9;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $203=(($9)|0);
 HEAP32[(($203)>>2)]=$201;
 var $204=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$9,$__err,$67,2);
 var $205=HEAP32[(($__err)>>2)];
 var $206=$205&4;
 var $207=($206|0)==0;
 if($207){label=27;break;}else{label=29;break;}
 case 27: 
 var $_off_i12=((($204)-(1))|0);
 var $209=($_off_i12>>>0)<12;
 if($209){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($199)>>2)]=$204;
 label=64;break;
 case 29: 
 var $212=$205|4;
 HEAP32[(($__err)>>2)]=$212;
 label=64;break;
 case 30: 
 var $214=(($__e)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=$8;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $217=(($8)|0);
 HEAP32[(($217)>>2)]=$215;
 var $218=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$8,$__err,$67,3);
 var $219=HEAP32[(($__err)>>2)];
 var $220=$219&4;
 var $221=($220|0)==0;
 var $222=($218|0)<366;
 var $or_cond_i15=$221&$222;
 if($or_cond_i15){label=31;break;}else{label=32;break;}
 case 31: 
 var $224=(($__tm+28)|0);
 HEAP32[(($224)>>2)]=$218;
 label=64;break;
 case 32: 
 var $226=$219|4;
 HEAP32[(($__err)>>2)]=$226;
 label=64;break;
 case 33: 
 var $228=(($__e)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=$7;
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $231=(($7)|0);
 HEAP32[(($231)>>2)]=$229;
 var $232=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$7,$__err,$67,2);
 var $233=HEAP32[(($__err)>>2)];
 var $234=$233&4;
 var $235=($234|0)==0;
 var $236=($232|0)<13;
 var $or_cond_i18=$235&$236;
 if($or_cond_i18){label=34;break;}else{label=35;break;}
 case 34: 
 var $238=(($__tm+16)|0);
 var $239=((($232)-(1))|0);
 HEAP32[(($238)>>2)]=$239;
 label=64;break;
 case 35: 
 var $241=$233|4;
 HEAP32[(($__err)>>2)]=$241;
 label=64;break;
 case 36: 
 var $243=(($__e)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=$6;
 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $246=(($6)|0);
 HEAP32[(($246)>>2)]=$244;
 var $247=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$6,$__err,$67,2);
 var $248=HEAP32[(($__err)>>2)];
 var $249=$248&4;
 var $250=($249|0)==0;
 var $251=($247|0)<60;
 var $or_cond_i21=$250&$251;
 if($or_cond_i21){label=37;break;}else{label=38;break;}
 case 37: 
 var $253=(($__tm+4)|0);
 HEAP32[(($253)>>2)]=$247;
 label=64;break;
 case 38: 
 var $255=$248|4;
 HEAP32[(($__err)>>2)]=$255;
 label=64;break;
 case 39: 
 var $257=(($__e)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=(($24)|0);
 HEAP32[(($259)>>2)]=$258;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$24,$__err,$67);
 label=64;break;
 case 40: 
 var $261=(($__tm+8)|0);
 var $262=(($__e)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($25)|0);
 HEAP32[(($264)>>2)]=$263;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$261,$__b,$25,$__err,$67);
 label=64;break;
 case 41: 
 var $266=(($__b)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($27)|0);
 HEAP32[(($268)>>2)]=$267;
 var $269=(($__e)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(($28)|0);
 HEAP32[(($271)>>2)]=$270;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($26,$this,$27,$28,$__iob,$__err,$__tm,3832,3876);
 var $272=(($26)|0);
 var $273=HEAP32[(($272)>>2)];
 HEAP32[(($266)>>2)]=$273;
 label=64;break;
 case 42: 
 var $275=(($__b)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(($30)|0);
 HEAP32[(($277)>>2)]=$276;
 var $278=(($__e)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($31)|0);
 HEAP32[(($280)>>2)]=$279;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($29,$this,$30,$31,$__iob,$__err,$__tm,3808,3828);
 var $281=(($29)|0);
 var $282=HEAP32[(($281)>>2)];
 HEAP32[(($275)>>2)]=$282;
 label=64;break;
 case 43: 
 var $284=(($__e)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=$5;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $287=(($5)|0);
 HEAP32[(($287)>>2)]=$285;
 var $288=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$5,$__err,$67,2);
 var $289=HEAP32[(($__err)>>2)];
 var $290=$289&4;
 var $291=($290|0)==0;
 var $292=($288|0)<61;
 var $or_cond_i24=$291&$292;
 if($or_cond_i24){label=44;break;}else{label=45;break;}
 case 44: 
 var $294=(($__tm)|0);
 HEAP32[(($294)>>2)]=$288;
 label=64;break;
 case 45: 
 var $296=$289|4;
 HEAP32[(($__err)>>2)]=$296;
 label=64;break;
 case 46: 
 var $298=(($__b)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($33)|0);
 HEAP32[(($300)>>2)]=$299;
 var $301=(($__e)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($34)|0);
 HEAP32[(($303)>>2)]=$302;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($32,$this,$33,$34,$__iob,$__err,$__tm,3776,3808);
 var $304=(($32)|0);
 var $305=HEAP32[(($304)>>2)];
 HEAP32[(($298)>>2)]=$305;
 label=64;break;
 case 47: 
 var $307=(($__e)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=$4;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $310=(($4)|0);
 HEAP32[(($310)>>2)]=$308;
 var $311=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$4,$__err,$67,1);
 var $312=HEAP32[(($__err)>>2)];
 var $313=$312&4;
 var $314=($313|0)==0;
 var $315=($311|0)<7;
 var $or_cond_i27=$314&$315;
 if($or_cond_i27){label=48;break;}else{label=49;break;}
 case 48: 
 var $317=(($__tm+24)|0);
 HEAP32[(($317)>>2)]=$311;
 label=64;break;
 case 49: 
 var $319=$312|4;
 HEAP32[(($__err)>>2)]=$319;
 label=64;break;
 case 50: 
 var $321=$this;
 var $322=HEAP32[(($321)>>2)];
 var $323=(($322+20)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=(($__b)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=(($35)|0);
 HEAP32[(($327)>>2)]=$326;
 var $328=(($__e)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($36)|0);
 HEAP32[(($330)>>2)]=$329;
 FUNCTION_TABLE[$324]($agg_result,$this,$35,$36,$__iob,$__err,$__tm);
 label=65;break;
 case 51: 
 var $332=(($this+8)|0);
 var $333=$332;
 var $334=HEAP32[(($333)>>2)];
 var $335=(($334+24)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=FUNCTION_TABLE[$336]($332);
 var $338=(($__b)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(($38)|0);
 HEAP32[(($340)>>2)]=$339;
 var $341=(($__e)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=(($39)|0);
 HEAP32[(($343)>>2)]=$342;
 var $344=$337;
 var $345=HEAP8[($344)];
 var $346=$345&1;
 var $347=(($346<<24)>>24)==0;
 if($347){label=53;break;}else{label=52;break;}
 case 52: 
 var $349=(($337+8)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=(($337+4)|0);
 var $352=HEAP32[(($351)>>2)];
 var $360=$352;var $359=$350;var $358=$350;label=54;break;
 case 53: 
 var $354=(($337+4)|0);
 var $355=(($337+4)|0);
 var $356=($345&255);
 var $357=$356>>>1;
 var $360=$357;var $359=$354;var $358=$355;label=54;break;
 case 54: 
 var $358;
 var $359;
 var $360;
 var $361=(($358+($360<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($37,$this,$38,$39,$__iob,$__err,$__tm,$359,$361);
 var $362=(($37)|0);
 var $363=HEAP32[(($362)>>2)];
 HEAP32[(($338)>>2)]=$363;
 label=64;break;
 case 55: 
 var $365=(($__tm+20)|0);
 var $366=(($__e)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=$3;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $369=(($3)|0);
 HEAP32[(($369)>>2)]=$367;
 var $370=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$3,$__err,$67,4);
 var $371=HEAP32[(($__err)>>2)];
 var $372=$371&4;
 var $373=($372|0)==0;
 if($373){label=56;break;}else{label=64;break;}
 case 56: 
 var $375=($370|0)<69;
 if($375){label=57;break;}else{label=58;break;}
 case 57: 
 var $377=((($370)+(2000))|0);
 var $__t_0_i=$377;label=59;break;
 case 58: 
 var $_off_i33=((($370)-(69))|0);
 var $379=($_off_i33>>>0)<31;
 var $380=((($370)+(1900))|0);
 var $__i=($379?$380:$370);
 var $__t_0_i=$__i;label=59;break;
 case 59: 
 var $__t_0_i;
 var $382=((($__t_0_i)-(1900))|0);
 HEAP32[(($365)>>2)]=$382;
 label=64;break;
 case 60: 
 var $384=(($__e)|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=$2;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $387=(($2)|0);
 HEAP32[(($387)>>2)]=$385;
 var $388=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$2,$__err,$67,4);
 var $389=HEAP32[(($__err)>>2)];
 var $390=$389&4;
 var $391=($390|0)==0;
 if($391){label=61;break;}else{label=64;break;}
 case 61: 
 var $393=(($__tm+20)|0);
 var $394=((($388)-(1900))|0);
 HEAP32[(($393)>>2)]=$394;
 label=64;break;
 case 62: 
 var $396=(($__e)|0);
 var $397=HEAP32[(($396)>>2)];
 var $398=(($40)|0);
 HEAP32[(($398)>>2)]=$397;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$40,$__err,$67);
 label=64;break;
 case 63: 
 var $400=HEAP32[(($__err)>>2)];
 var $401=$400|4;
 HEAP32[(($__err)>>2)]=$401;
 label=64;break;
 case 64: 
 var $402=(($__b)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=(($agg_result)|0);
 HEAP32[(($404)>>2)]=$403;
 label=65;break;
 case 65: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}



function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=(($__e)|0);
 var $3=$__ct;
 label=2;break;
 case 2: 
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 if($5){var $22=1;label=9;break;}else{label=3;break;}
 case 3: 
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$4;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($4);
 var $_0_i_i_i_i=$17;label=6;break;
 case 5: 
 var $19=HEAP32[(($8)>>2)];
 var $_0_i_i_i_i=$19;label=6;break;
 case 6: 
 var $_0_i_i_i_i;
 var $20=($_0_i_i_i_i|0)==-1;
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $22=$phitmp_i_i_i;label=9;break;
 case 8: 
 HEAP32[(($1)>>2)]=0;
 var $22=1;label=9;break;
 case 9: 
 var $22;
 var $23=HEAP32[(($2)>>2)];
 var $24=($23|0)==0;
 if($24){label=15;break;}else{label=10;break;}
 case 10: 
 var $26=(($23+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($23+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($27|0)==($29|0);
 if($30){label=11;break;}else{label=12;break;}
 case 11: 
 var $32=$23;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=FUNCTION_TABLE[$35]($23);
 var $_0_i_i1_i_i=$36;label=13;break;
 case 12: 
 var $38=HEAP32[(($27)>>2)];
 var $_0_i_i1_i_i=$38;label=13;break;
 case 13: 
 var $_0_i_i1_i_i;
 var $39=($_0_i_i1_i_i|0)==-1;
 if($39){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($2)>>2)]=0;
 label=15;break;
 case 15: 
 if($22){var $_pre_i3_i_i9=0;label=24;break;}else{var $41=0;label=17;break;}
 case 16: 
 if($22){var $41=$23;label=17;break;}else{var $_pre_i3_i_i9=$23;label=24;break;}
 case 17: 
 var $41;
 var $42=HEAP32[(($1)>>2)];
 var $43=(($42+12)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($42+16)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($44|0)==($46|0);
 if($47){label=18;break;}else{label=19;break;}
 case 18: 
 var $49=$42;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=FUNCTION_TABLE[$52]($42);
 var $_0_i_i=$53;label=20;break;
 case 19: 
 var $55=HEAP32[(($44)>>2)];
 var $_0_i_i=$55;label=20;break;
 case 20: 
 var $_0_i_i;
 var $56=HEAP32[(($3)>>2)];
 var $57=(($56+12)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=FUNCTION_TABLE[$58]($__ct,8192,$_0_i_i);
 if($59){label=21;break;}else{var $_pre_i3_i_i9=$41;label=24;break;}
 case 21: 
 var $61=HEAP32[(($1)>>2)];
 var $62=(($61+12)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($61+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($63|0)==($65|0);
 if($66){label=22;break;}else{label=23;break;}
 case 22: 
 var $68=$61;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+40)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=FUNCTION_TABLE[$71]($61);
 label=2;break;
 case 23: 
 var $74=(($63+4)|0);
 HEAP32[(($62)>>2)]=$74;
 label=2;break;
 case 24: 
 var $_pre_i3_i_i9;
 var $75=HEAP32[(($1)>>2)];
 var $76=($75|0)==0;
 if($76){var $93=1;label=31;break;}else{label=25;break;}
 case 25: 
 var $78=(($75+12)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($75+16)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($79|0)==($81|0);
 if($82){label=26;break;}else{label=27;break;}
 case 26: 
 var $84=$75;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+36)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($75);
 var $_0_i_i_i_i1=$88;label=28;break;
 case 27: 
 var $90=HEAP32[(($79)>>2)];
 var $_0_i_i_i_i1=$90;label=28;break;
 case 28: 
 var $_0_i_i_i_i1;
 var $91=($_0_i_i_i_i1|0)==-1;
 if($91){label=30;break;}else{label=29;break;}
 case 29: 
 var $_pre_i_i_i3=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i4=($_pre_i_i_i3|0)==0;
 var $93=$phitmp_i_i_i4;label=31;break;
 case 30: 
 HEAP32[(($1)>>2)]=0;
 var $93=1;label=31;break;
 case 31: 
 var $93;
 var $94=($_pre_i3_i_i9|0)==0;
 if($94){label=37;break;}else{label=32;break;}
 case 32: 
 var $96=(($_pre_i3_i_i9+12)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($_pre_i3_i_i9+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($97|0)==($99|0);
 if($100){label=33;break;}else{label=34;break;}
 case 33: 
 var $102=$_pre_i3_i_i9;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+36)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($_pre_i3_i_i9);
 var $_0_i_i1_i_i7=$106;label=35;break;
 case 34: 
 var $108=HEAP32[(($97)>>2)];
 var $_0_i_i1_i_i7=$108;label=35;break;
 case 35: 
 var $_0_i_i1_i_i7;
 var $109=($_0_i_i1_i_i7|0)==-1;
 if($109){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($2)>>2)]=0;
 label=37;break;
 case 37: 
 if($93){label=39;break;}else{label=40;break;}
 case 38: 
 if($93){label=40;break;}else{label=39;break;}
 case 39: 
 var $112=HEAP32[(($__err)>>2)];
 var $113=$112|2;
 HEAP32[(($__err)>>2)]=$113;
 label=40;break;
 case 40: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+8)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=FUNCTION_TABLE[$6]($2);
 var $8=$7;
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 var $13=(($7+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=4;break;
 case 3: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 var $19=(($7+12)|0);
 var $20=$19;
 var $21=HEAP8[($20)];
 var $22=$21&1;
 var $23=(($22<<24)>>24)==0;
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 var $25=(($7+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $30=$26;label=7;break;
 case 6: 
 var $28=($21&255);
 var $29=$28>>>1;
 var $30=$29;label=7;break;
 case 7: 
 var $30;
 var $31=(((-$30))|0);
 var $32=($18|0)==($31|0);
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=HEAP32[(($__err)>>2)];
 var $35=$34|4;
 HEAP32[(($__err)>>2)]=$35;
 label=15;break;
 case 9: 
 var $37=(($__e)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($1)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($7+24)|0);
 var $41=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$7,$40,$__ct,$__err,0);
 var $42=$41;
 var $43=$7;
 var $44=((($42)-($43))|0);
 var $45=($41|0)==($7|0);
 if($45){label=10;break;}else{label=12;break;}
 case 10: 
 var $47=HEAP32[(($__h)>>2)];
 var $48=($47|0)==12;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($__h)>>2)]=0;
 label=15;break;
 case 12: 
 var $51=($44|0)==12;
 if($51){label=13;break;}else{label=15;break;}
 case 13: 
 var $53=HEAP32[(($__h)>>2)];
 var $54=($53|0)<12;
 if($54){label=14;break;}else{label=15;break;}
 case 14: 
 var $56=((($53)+(12))|0);
 HEAP32[(($__h)>>2)]=$56;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_0_i_i_i_i=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_0_i_i_i_i=$17;label=5;break;
 case 5: 
 var $_0_i_i_i_i;
 var $18=($_0_i_i_i_i|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $20=$phitmp_i_i_i;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=(($22+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($22+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=$22;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+36)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($22);
 var $_0_i_i1_i_i=$35;label=12;break;
 case 11: 
 var $37=HEAP32[(($26)>>2)];
 var $_0_i_i1_i_i=$37;label=12;break;
 case 12: 
 var $_0_i_i1_i_i;
 var $38=($_0_i_i1_i_i|0)==-1;
 if($38){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($21)>>2)]=0;
 label=14;break;
 case 14: 
 if($20){label=16;break;}else{var $_pre_i3_i_i915=0;label=17;break;}
 case 15: 
 if($20){var $_pre_i3_i_i915=$22;label=17;break;}else{label=16;break;}
 case 16: 
 var $41=HEAP32[(($__err)>>2)];
 var $42=$41|6;
 HEAP32[(($__err)>>2)]=$42;
 label=41;break;
 case 17: 
 var $_pre_i3_i_i915;
 var $44=HEAP32[(($1)>>2)];
 var $45=(($44+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($44+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($46|0)==($48|0);
 if($49){label=18;break;}else{label=19;break;}
 case 18: 
 var $51=$44;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+36)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=FUNCTION_TABLE[$54]($44);
 var $_0_i_i=$55;label=20;break;
 case 19: 
 var $57=HEAP32[(($46)>>2)];
 var $_0_i_i=$57;label=20;break;
 case 20: 
 var $_0_i_i;
 var $58=$__ct;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+52)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=FUNCTION_TABLE[$61]($__ct,$_0_i_i,0);
 var $63=(($62<<24)>>24)==37;
 if($63){label=22;break;}else{label=21;break;}
 case 21: 
 var $65=HEAP32[(($__err)>>2)];
 var $66=$65|4;
 HEAP32[(($__err)>>2)]=$66;
 label=41;break;
 case 22: 
 var $68=HEAP32[(($1)>>2)];
 var $69=(($68+12)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($68+16)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($70|0)==($72|0);
 if($73){label=23;break;}else{label=24;break;}
 case 23: 
 var $75=$68;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+40)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=FUNCTION_TABLE[$78]($68);
 label=25;break;
 case 24: 
 var $81=(($70+4)|0);
 HEAP32[(($69)>>2)]=$81;
 label=25;break;
 case 25: 
 var $82=HEAP32[(($1)>>2)];
 var $83=($82|0)==0;
 if($83){var $100=1;label=32;break;}else{label=26;break;}
 case 26: 
 var $85=(($82+12)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($82+16)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($86|0)==($88|0);
 if($89){label=27;break;}else{label=28;break;}
 case 27: 
 var $91=$82;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+36)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=FUNCTION_TABLE[$94]($82);
 var $_0_i_i_i_i1=$95;label=29;break;
 case 28: 
 var $97=HEAP32[(($86)>>2)];
 var $_0_i_i_i_i1=$97;label=29;break;
 case 29: 
 var $_0_i_i_i_i1;
 var $98=($_0_i_i_i_i1|0)==-1;
 if($98){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre_i_i_i3=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i4=($_pre_i_i_i3|0)==0;
 var $100=$phitmp_i_i_i4;label=32;break;
 case 31: 
 HEAP32[(($1)>>2)]=0;
 var $100=1;label=32;break;
 case 32: 
 var $100;
 var $101=($_pre_i3_i_i915|0)==0;
 if($101){label=38;break;}else{label=33;break;}
 case 33: 
 var $103=(($_pre_i3_i_i915+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($_pre_i3_i_i915+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=34;break;}else{label=35;break;}
 case 34: 
 var $109=$_pre_i3_i_i915;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=FUNCTION_TABLE[$112]($_pre_i3_i_i915);
 var $_0_i_i1_i_i7=$113;label=36;break;
 case 35: 
 var $115=HEAP32[(($104)>>2)];
 var $_0_i_i1_i_i7=$115;label=36;break;
 case 36: 
 var $_0_i_i1_i_i7;
 var $116=($_0_i_i1_i_i7|0)==-1;
 if($116){label=37;break;}else{label=39;break;}
 case 37: 
 HEAP32[(($21)>>2)]=0;
 label=38;break;
 case 38: 
 if($100){label=40;break;}else{label=41;break;}
 case 39: 
 if($100){label=41;break;}else{label=40;break;}
 case 40: 
 var $119=HEAP32[(($__err)>>2)];
 var $120=$119|2;
 HEAP32[(($__err)>>2)]=$120;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_0_i_i_i_i=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_0_i_i_i_i=$17;label=5;break;
 case 5: 
 var $_0_i_i_i_i;
 var $18=($_0_i_i_i_i|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $20=$phitmp_i_i_i;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=(($22+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($22+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=$22;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+36)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($22);
 var $_0_i_i1_i_i=$35;label=12;break;
 case 11: 
 var $37=HEAP32[(($26)>>2)];
 var $_0_i_i1_i_i=$37;label=12;break;
 case 12: 
 var $_0_i_i1_i_i;
 var $38=($_0_i_i1_i_i|0)==-1;
 if($38){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($21)>>2)]=0;
 label=14;break;
 case 14: 
 if($20){label=16;break;}else{var $44=0;label=17;break;}
 case 15: 
 if($20){var $44=$22;label=17;break;}else{label=16;break;}
 case 16: 
 var $41=HEAP32[(($__err)>>2)];
 var $42=$41|6;
 HEAP32[(($__err)>>2)]=$42;
 var $_01=0;label=63;break;
 case 17: 
 var $44;
 var $45=HEAP32[(($1)>>2)];
 var $46=(($45+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($45+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=19;break;}
 case 18: 
 var $52=$45;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=FUNCTION_TABLE[$55]($45);
 var $_0_i_i=$56;label=20;break;
 case 19: 
 var $58=HEAP32[(($47)>>2)];
 var $_0_i_i=$58;label=20;break;
 case 20: 
 var $_0_i_i;
 var $59=$__ct;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=FUNCTION_TABLE[$62]($__ct,2048,$_0_i_i);
 if($63){label=22;break;}else{label=21;break;}
 case 21: 
 var $65=HEAP32[(($__err)>>2)];
 var $66=$65|4;
 HEAP32[(($__err)>>2)]=$66;
 var $_01=0;label=63;break;
 case 22: 
 var $68=$__ct;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+52)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=FUNCTION_TABLE[$71]($__ct,$_0_i_i,0);
 var $73=(($72<<24)>>24);
 var $74=HEAP32[(($1)>>2)];
 var $75=(($74+12)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($74+16)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($76|0)==($78|0);
 if($79){label=23;break;}else{label=24;break;}
 case 23: 
 var $81=$74;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+40)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=FUNCTION_TABLE[$84]($74);
 var $__r_0_in=$73;var $_0_in=$__n;var $88=$44;var $_pre_i3_i_i10=$44;label=25;break;
 case 24: 
 var $87=(($76+4)|0);
 HEAP32[(($75)>>2)]=$87;
 var $__r_0_in=$73;var $_0_in=$__n;var $88=$44;var $_pre_i3_i_i10=$44;label=25;break;
 case 25: 
 var $_pre_i3_i_i10;
 var $88;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $89=HEAP32[(($1)>>2)];
 var $90=($89|0)==0;
 if($90){var $107=1;label=32;break;}else{label=26;break;}
 case 26: 
 var $92=(($89+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($89+16)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($93|0)==($95|0);
 if($96){label=27;break;}else{label=28;break;}
 case 27: 
 var $98=$89;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+36)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=FUNCTION_TABLE[$101]($89);
 var $_0_i_i_i_i2=$102;label=29;break;
 case 28: 
 var $104=HEAP32[(($93)>>2)];
 var $_0_i_i_i_i2=$104;label=29;break;
 case 29: 
 var $_0_i_i_i_i2;
 var $105=($_0_i_i_i_i2|0)==-1;
 if($105){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre_i_i_i4=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i5=($_pre_i_i_i4|0)==0;
 var $107=$phitmp_i_i_i5;label=32;break;
 case 31: 
 HEAP32[(($1)>>2)]=0;
 var $107=1;label=32;break;
 case 32: 
 var $107;
 var $108=($88|0)==0;
 if($108){var $126=1;var $125=0;var $_pre_i3_i_i25=$_pre_i3_i_i10;label=39;break;}else{label=33;break;}
 case 33: 
 var $110=(($88+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($88+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=34;break;}else{label=35;break;}
 case 34: 
 var $116=$88;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=FUNCTION_TABLE[$119]($88);
 var $_0_i_i1_i_i8=$120;label=36;break;
 case 35: 
 var $122=HEAP32[(($111)>>2)];
 var $_0_i_i1_i_i8=$122;label=36;break;
 case 36: 
 var $_0_i_i1_i_i8;
 var $123=($_0_i_i1_i_i8|0)==-1;
 if($123){label=38;break;}else{label=37;break;}
 case 37: 
 var $phitmp_i4_i_i11=($_pre_i3_i_i10|0)==0;
 var $126=$phitmp_i4_i_i11;var $125=$_pre_i3_i_i10;var $_pre_i3_i_i25=$_pre_i3_i_i10;label=39;break;
 case 38: 
 HEAP32[(($21)>>2)]=0;
 var $126=1;var $125=0;var $_pre_i3_i_i25=0;label=39;break;
 case 39: 
 var $_pre_i3_i_i25;
 var $125;
 var $126;
 var $tmp_i_i13=$107^$126;
 var $127=($_0|0)>0;
 var $_=$tmp_i_i13&$127;
 var $128=HEAP32[(($1)>>2)];
 if($_){label=40;break;}else{label=47;break;}
 case 40: 
 var $130=(($128+12)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($128+16)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=($131|0)==($133|0);
 if($134){label=41;break;}else{label=42;break;}
 case 41: 
 var $136=$128;
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137+36)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=FUNCTION_TABLE[$139]($128);
 var $_0_i_i14=$140;label=43;break;
 case 42: 
 var $142=HEAP32[(($131)>>2)];
 var $_0_i_i14=$142;label=43;break;
 case 43: 
 var $_0_i_i14;
 var $143=HEAP32[(($59)>>2)];
 var $144=(($143+12)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=FUNCTION_TABLE[$145]($__ct,2048,$_0_i_i14);
 if($146){label=44;break;}else{var $_01=$__r_0;label=63;break;}
 case 44: 
 var $148=((($__r_0)*(10))&-1);
 var $149=HEAP32[(($68)>>2)];
 var $150=(($149+52)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=FUNCTION_TABLE[$151]($__ct,$_0_i_i14,0);
 var $153=(($152<<24)>>24);
 var $154=((($153)+($148))|0);
 var $155=HEAP32[(($1)>>2)];
 var $156=(($155+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($155+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=45;break;}else{label=46;break;}
 case 45: 
 var $162=$155;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+40)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=FUNCTION_TABLE[$165]($155);
 var $__r_0_in=$154;var $_0_in=$_0;var $88=$125;var $_pre_i3_i_i10=$_pre_i3_i_i25;label=25;break;
 case 46: 
 var $168=(($157+4)|0);
 HEAP32[(($156)>>2)]=$168;
 var $__r_0_in=$154;var $_0_in=$_0;var $88=$125;var $_pre_i3_i_i10=$_pre_i3_i_i25;label=25;break;
 case 47: 
 var $170=($128|0)==0;
 if($170){var $187=1;label=54;break;}else{label=48;break;}
 case 48: 
 var $172=(($128+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($128+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=49;break;}else{label=50;break;}
 case 49: 
 var $178=$128;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=FUNCTION_TABLE[$181]($128);
 var $_0_i_i_i_i17=$182;label=51;break;
 case 50: 
 var $184=HEAP32[(($173)>>2)];
 var $_0_i_i_i_i17=$184;label=51;break;
 case 51: 
 var $_0_i_i_i_i17;
 var $185=($_0_i_i_i_i17|0)==-1;
 if($185){label=53;break;}else{label=52;break;}
 case 52: 
 var $_pre_i_i_i19=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i20=($_pre_i_i_i19|0)==0;
 var $187=$phitmp_i_i_i20;label=54;break;
 case 53: 
 HEAP32[(($1)>>2)]=0;
 var $187=1;label=54;break;
 case 54: 
 var $187;
 var $188=($_pre_i3_i_i25|0)==0;
 if($188){label=60;break;}else{label=55;break;}
 case 55: 
 var $190=(($_pre_i3_i_i25+12)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($_pre_i3_i_i25+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($191|0)==($193|0);
 if($194){label=56;break;}else{label=57;break;}
 case 56: 
 var $196=$_pre_i3_i_i25;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=FUNCTION_TABLE[$199]($_pre_i3_i_i25);
 var $_0_i_i1_i_i23=$200;label=58;break;
 case 57: 
 var $202=HEAP32[(($191)>>2)];
 var $_0_i_i1_i_i23=$202;label=58;break;
 case 58: 
 var $_0_i_i1_i_i23;
 var $203=($_0_i_i1_i_i23|0)==-1;
 if($203){label=59;break;}else{label=61;break;}
 case 59: 
 HEAP32[(($21)>>2)]=0;
 label=60;break;
 case 60: 
 if($187){label=62;break;}else{var $_01=$__r_0;label=63;break;}
 case 61: 
 if($187){var $_01=$__r_0;label=63;break;}else{label=62;break;}
 case 62: 
 var $206=HEAP32[(($__err)>>2)];
 var $207=$206|2;
 HEAP32[(($__err)>>2)]=$207;
 var $_01=$__r_0;label=63;break;
 case 63: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(15936)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(15936);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((13832)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body_i_i_i$1=$12$1;var $eh_lpad_body_i_i_i$0=$12$0;label=9;break;
 case 6: 
 var $14=HEAP32[((13832)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $eh_lpad_body_i_i_i$1=$19$1;var $eh_lpad_body_i_i_i$0=$19$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i_i_i$0;
 var $eh_lpad_body_i_i_i$1;
 var $20=$eh_lpad_body_i_i_i$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 10: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 var $22=$this;
 __ZdlPv($22);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(15936)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(15936);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((13832)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body_i_i$1=$12$1;var $eh_lpad_body_i_i$0=$12$0;label=9;break;
 case 6: 
 var $14=HEAP32[((13832)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$19$1;var $eh_lpad_body_i_i$0=$19$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $20=$eh_lpad_body_i_i$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 10: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $3=(($__nar)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $4=(($fmt_i)|0);
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP8[($4)]=37;
 var $5=(($fmt_i+1)|0);
 HEAP8[($5)]=$__fmt;
 var $6=(($fmt_i+2)|0);
 HEAP8[($6)]=$__mod;
 var $7=(($fmt_i+3)|0);
 HEAP8[($7)]=0;
 var $8=(($__mod<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($5)]=$__mod;
 HEAP8[($6)]=$__fmt;
 label=3;break;
 case 3: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=_strftime_l($3,100,$4,$__tm,$11);
 var $13=(($__nar+$12)|0);
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $14=(($__s)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($12|0)==0;
 if($16){var $39=$15;label=9;break;}else{var $_01_i_i=$3;var $18=$15;var $17=$15;label=4;break;}
 case 4: 
 var $17;
 var $18;
 var $_01_i_i;
 var $19=HEAP8[($_01_i_i)];
 var $20=($18|0)==0;
 if($20){var $36=0;var $35=$17;label=8;break;}else{label=5;break;}
 case 5: 
 var $22=(($18+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($18+28)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=7;break;}else{label=6;break;}
 case 6: 
 var $27=(($23+1)|0);
 HEAP32[(($22)>>2)]=$27;
 HEAP8[($23)]=$19;
 var $36=$18;var $35=$17;label=8;break;
 case 7: 
 var $28=$18;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+52)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($19&255);
 var $33=FUNCTION_TABLE[$31]($18,$32);
 var $34=($33|0)==-1;
 var $__i=($34?0:$17);
 var $_7_i=($34?0:$18);
 var $36=$_7_i;var $35=$__i;label=8;break;
 case 8: 
 var $35;
 var $36;
 var $37=(($_01_i_i+1)|0);
 var $38=($37|0)==($13|0);
 if($38){var $39=$35;label=9;break;}else{var $_01_i_i=$37;var $18=$36;var $17=$35;label=4;break;}
 case 9: 
 var $39;
 var $40=(($agg_result)|0);
 HEAP32[(($40)>>2)]=$39;
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(15936)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(15936);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((13832)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body_i_i_i$1=$12$1;var $eh_lpad_body_i_i_i$0=$12$0;label=9;break;
 case 6: 
 var $14=HEAP32[((13832)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $eh_lpad_body_i_i_i$1=$19$1;var $eh_lpad_body_i_i_i$0=$19$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i_i_i$0;
 var $eh_lpad_body_i_i_i$1;
 var $20=$eh_lpad_body_i_i_i$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 10: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 var $22=$this;
 __ZdlPv($22);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(15936)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(15936);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((13832)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body_i_i$1=$12$1;var $eh_lpad_body_i_i$0=$12$0;label=9;break;
 case 6: 
 var $14=HEAP32[((13832)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$19$1;var $eh_lpad_body_i_i$0=$19$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $20=$eh_lpad_body_i_i$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 10: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__nar=sp;
 var $__ne=(sp)+(400);
 var $3=$__nar;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $4=(($__nar)|0);
 var $5=(($__nar+400)|0);
 HEAP32[(($__ne)>>2)]=$5;
 var $6=(($this+8)|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($6,$4,$__ne,$__tm,$__fmt,$__mod);
 var $7=HEAP32[(($__ne)>>2)];
 var $8=(($__s)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($4|0)==($7|0);
 if($10){var $34=$9;label=8;break;}else{var $_01_i_i=$4;var $12=$9;var $11=$9;label=2;break;}
 case 2: 
 var $11;
 var $12;
 var $_01_i_i;
 var $13=HEAP32[(($_01_i_i)>>2)];
 var $14=($12|0)==0;
 if($14){var $31=0;var $30=$11;label=7;break;}else{label=3;break;}
 case 3: 
 var $16=(($12+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($12+28)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($17|0)==($19|0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$12;
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+52)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=FUNCTION_TABLE[$25]($12,$13);
 var $_0_i_i_i_i=$26;label=6;break;
 case 5: 
 var $28=(($17+4)|0);
 HEAP32[(($16)>>2)]=$28;
 HEAP32[(($17)>>2)]=$13;
 var $_0_i_i_i_i=$13;label=6;break;
 case 6: 
 var $_0_i_i_i_i;
 var $29=($_0_i_i_i_i|0)==-1;
 var $__i=($29?0:$11);
 var $_7_i=($29?0:$12);
 var $31=$_7_i;var $30=$__i;label=7;break;
 case 7: 
 var $30;
 var $31;
 var $32=(($_01_i_i+4)|0);
 var $33=($32|0)==($7|0);
 if($33){var $34=$30;label=8;break;}else{var $_01_i_i=$32;var $12=$31;var $11=$30;label=2;break;}
 case 8: 
 var $34;
 var $35=(($agg_result)|0);
 HEAP32[(($35)>>2)]=$34;
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $mb=(sp)+(112);
 var $tmpcast=$mb;
 var $__nb=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__nar)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $2=(($fmt_i)|0);
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP8[($2)]=37;
 var $3=(($fmt_i+1)|0);
 HEAP8[($3)]=$__fmt;
 var $4=(($fmt_i+2)|0);
 HEAP8[($4)]=$__mod;
 var $5=(($fmt_i+3)|0);
 HEAP8[($5)]=0;
 var $6=(($__mod<<24)>>24)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($3)]=$__mod;
 HEAP8[($4)]=$__fmt;
 label=3;break;
 case 3: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_strftime_l($1,100,$2,$__tm,$9);
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($mb)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($mb+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 HEAP32[(($__nb)>>2)]=$1;
 var $11=HEAP32[(($__we)>>2)];
 var $12=$11;
 var $13=$__wb;
 var $14=((($12)-($13))|0);
 var $15=$14>>2;
 var $16=HEAP32[(($8)>>2)];
 var $17=_uselocale($16);
 var $18=(function() { try { __THREW__ = 0; return _mbsrtowcs($__wb,$__nb,$15,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $20=($17|0)==0;
 if($20){label=11;break;}else{label=5;break;}
 case 5: 
 var $22=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1,0); var $24$1 = tempRet0;
 var $25=$24$0;
 ___clang_call_terminate($25);
 throw "Reached an unreachable!";
 case 7: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=($17|0)==0;
 if($28){label=10;break;}else{label=8;break;}
 case 8: 
 var $30=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1,0); var $32$1 = tempRet0;
 var $33=$32$0;
 ___clang_call_terminate($33);
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($27$0)
 case 11: 
 var $34=($18|0)==-1;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 __ZNSt3__121__throw_runtime_errorEPKc(1728);
 throw "Reached an unreachable!";
 case 13: 
 var $37=(($__wb+($18<<2))|0);
 HEAP32[(($__we)>>2)]=$37;
 var $$etemp$6$0=100;
 var $$etemp$6$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110moneypunctIcLb0EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIcLb0EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIcLb1EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIcLb1EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIwLb0EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIwLb0EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIwLb1EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIwLb1EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $1=(sp)+(152);
 var $__atoms=(sp)+(160);
 var $__nbuf=(sp)+(176);
 var $2=(($__wbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=450;
 var $5=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((15376)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($__p_i_i_i_i)|0);
 HEAP32[(($13)>>2)]=15376;
 var $14=(($__p_i_i_i_i+4)|0);
 HEAP32[(($14)>>2)]=(26);
 var $15=(($__p_i_i_i_i+8)|0);
 HEAP32[(($15)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$9,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $16=HEAP32[((15380)>>2)];
 var $17=((($16)-(1))|0);
 var $18=(($8+12)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$19;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($17>>>0);
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($21+($17<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 __ZNSt8bad_castC2Ev($31);
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $33=$28;
 HEAP8[($__neg)]=0;
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($1)|0);
 HEAP32[(($36)>>2)]=$35;
 var $37=(($__iob+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$1,$__intl,$__loc,$38,$__err,$__neg,$33,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($39){label=10;break;}else{label=34;break;}
 case 10: 
 var $42=(($__atoms)|0);
 var $43=$28;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+32)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($33,3728,3738,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $48=(($__nbuf)|0);
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 var $49=HEAP32[(($__wn)>>2)];
 var $50=HEAP32[(($3)>>2)];
 var $51=$49;
 var $52=$50;
 var $53=((($51)-($52))|0);
 var $54=($53|0)>98;
 if($54){label=12;break;}else{var $__nc_0=$48;var $75=0;label=19;break;}
 case 12: 
 var $55=((($53)+(2))|0);
 var $56=_malloc($55);
 var $57=($56|0)==0;
 if($57){label=13;break;}else{var $__nc_0=$56;var $75=$56;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $75=0;label=19;break; } else { var $67=0;label=16;break; }
 case 14: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=$59$1;
 HEAP32[(($3)>>2)]=0;
 var $165=$2;var $_1215=$61;var $_117=$60;var $164=450;label=54;break;
 case 15: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $64=$63$0;
 var $65=$63$1;
 var $_0=$64;var $_01=$65;label=52;break;
 case 16: 
 var $67;
 var $68$0 = ___cxa_find_matching_catch(-1, -1); var $68$1 = tempRet0;
 var $eh_lpad_body$1=$68$1;var $eh_lpad_body$0=$68$0;var $69=$67;label=17;break;
 case 17: 
 var $69;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $70=$eh_lpad_body$0;
 var $71=$eh_lpad_body$1;
 var $72=($69|0)==0;
 if($72){var $_0=$70;var $_01=$71;label=52;break;}else{label=18;break;}
 case 18: 
 _free($69);
 var $_0=$70;var $_01=$71;label=52;break;
 case 19: 
 var $75;
 var $__nc_0;
 var $76=HEAP8[($__neg)];
 var $77=(($76<<24)>>24)==0;
 if($77){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $79=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$79;label=21;break;
 case 21: 
 var $__nc_1;
 var $81=($50>>>0)<($49>>>0);
 if($81){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $82=(($__atoms+10)|0);
 var $83=$__atoms;
 var $__nc_211=$__nc_1;var $__w_012=$50;label=23;break;
 case 23: 
 var $__w_012;
 var $__nc_211;
 var $85=HEAP8[($__w_012)];
 var $_01_i=$42;label=25;break;
 case 24: 
 var $87=($91|0)==($82|0);
 if($87){var $_0_lcssa_i=$82;label=26;break;}else{var $_01_i=$91;label=25;break;}
 case 25: 
 var $_01_i;
 var $89=HEAP8[($_01_i)];
 var $90=(($89<<24)>>24)==(($85<<24)>>24);
 var $91=(($_01_i+1)|0);
 if($90){var $_0_lcssa_i=$_01_i;label=26;break;}else{label=24;break;}
 case 26: 
 var $_0_lcssa_i;
 var $92=$_0_lcssa_i;
 var $93=((($92)-($83))|0);
 var $94=((3728+$93)|0);
 var $95=HEAP8[($94)];
 HEAP8[($__nc_211)]=$95;
 var $96=(($__w_012+1)|0);
 var $97=(($__nc_211+1)|0);
 var $98=HEAP32[(($__wn)>>2)];
 var $99=($96>>>0)<($98>>>0);
 if($99){var $__nc_211=$97;var $__w_012=$96;label=23;break;}else{var $__nc_2_lcssa=$97;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $100=_sscanf($48,2744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $101=($100|0)==1;
 if($101){label=32;break;}else{label=28;break;}
 case 28: 
 var $103=___cxa_allocate_exception(8);
 var $104=$103;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($104,2688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,10120,(44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $67=$75;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;
 ___cxa_free_exception($103);
 var $eh_lpad_body$1=$107$1;var $eh_lpad_body$0=$107$0;var $69=$75;label=17;break;
 case 32: 
 var $109=($75|0)==0;
 if($109){label=34;break;}else{label=33;break;}
 case 33: 
 _free($75);
 label=34;break;
 case 34: 
 var $111=(($__b)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112|0)==0;
 if($113){var $127=0;label=39;break;}else{label=35;break;}
 case 35: 
 var $115=(($112+12)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($112+16)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=($116|0)==($118|0);
 if($119){label=36;break;}else{var $127=$112;label=39;break;}
 case 36: 
 var $120=$112;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=15;break; }
 case 37: 
 var $125=($124|0)==-1;
 if($125){label=38;break;}else{var $127=$112;label=39;break;}
 case 38: 
 HEAP32[(($111)>>2)]=0;
 var $127=0;label=39;break;
 case 39: 
 var $127;
 var $128=($127|0)==0;
 var $129=HEAP32[(($34)>>2)];
 var $130=($129|0)==0;
 if($130){label=45;break;}else{label=40;break;}
 case 40: 
 var $132=(($129+12)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($129+16)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($133|0)==($135|0);
 if($136){label=42;break;}else{label=41;break;}
 case 41: 
 if($128){label=48;break;}else{label=47;break;}
 case 42: 
 var $137=$129;
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138+36)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$140]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=15;break; }
 case 43: 
 var $142=($141|0)==-1;
 if($142){label=44;break;}else{label=46;break;}
 case 44: 
 HEAP32[(($34)>>2)]=0;
 label=45;break;
 case 45: 
 if($128){label=47;break;}else{label=48;break;}
 case 46: 
 if($128){label=48;break;}else{label=47;break;}
 case 47: 
 var $145=HEAP32[(($__err)>>2)];
 var $146=$145|2;
 HEAP32[(($__err)>>2)]=$146;
 label=48;break;
 case 48: 
 var $148=(($agg_result)|0);
 HEAP32[(($148)>>2)]=$127;
 var $149=HEAP32[(($7)>>2)];
 var $150=(($149)|0);
 var $151=__ZNSt3__114__shared_count16__release_sharedEv($150);
 var $152=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $153=($152|0)==0;
 if($153){label=51;break;}else{label=49;break;}
 case 49: 
 var $155=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$155]($152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=50;break; }
 case 50: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1,0); var $157$1 = tempRet0;
 var $158=$157$0;
 ___clang_call_terminate($158);
 throw "Reached an unreachable!";
 case 51: 
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 52: 
 var $_01;
 var $_0;
 var $159=HEAP32[(($7)>>2)];
 var $160=(($159)|0);
 var $161=__ZNSt3__114__shared_count16__release_sharedEv($160);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $162=($_pre|0)==0;
 if($162){var $_1216=$_01;var $_118=$_0;label=56;break;}else{label=53;break;}
 case 53: 
 var $_pre20=HEAP32[(($4)>>2)];
 var $165=$_pre;var $_1215=$_01;var $_117=$_0;var $164=$_pre20;label=54;break;
 case 54: 
 var $164;
 var $_117;
 var $_1215;
 var $165;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$164]($165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1216=$_1215;var $_118=$_117;label=56;break; } else { label=55;break; }
 case 55: 
 var $167$0 = ___cxa_find_matching_catch(-1, -1,0); var $167$1 = tempRet0;
 var $168=$167$0;
 ___clang_call_terminate($168);
 throw "Reached an unreachable!";
 case 56: 
 var $_118;
 var $_1216;
 var $169$0=$_118;
 var $169$1=0;
 var $170$0=$169$0;
 var $170$1=$_1216;
 ___resumeException($170$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__do_nothingEPv($0){
 var label=0;


 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__gbuf=sp;
 var $__pat=(sp)+(400);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__gbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $2=(($__gbuf)|0);
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i9=$__sym;
 HEAP32[(($this2_i_i_i9)>>2)]=0; HEAP32[((($this2_i_i_i9)+(4))>>2)]=0; HEAP32[((($this2_i_i_i9)+(8))>>2)]=0;
 var $this2_i_i_i10=$__psn;
 HEAP32[(($this2_i_i_i10)>>2)]=0; HEAP32[((($this2_i_i_i10)+(4))>>2)]=0; HEAP32[((($this2_i_i_i10)+(8))>>2)]=0;
 var $this2_i_i_i12=$__nsn;
 HEAP32[(($this2_i_i_i12)>>2)]=0; HEAP32[((($this2_i_i_i12)+(4))>>2)]=0; HEAP32[((($this2_i_i_i12)+(8))>>2)]=0;
 var $this2_i_i_i15=$__spaces;
 HEAP32[(($this2_i_i_i15)>>2)]=0; HEAP32[((($this2_i_i_i15)+(4))>>2)]=0; HEAP32[((($this2_i_i_i15)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=24;break; }
 case 2: 
 var $4=(($__gbuf+400)|0);
 var $5=(($__wb)|0);
 var $6=HEAP32[(($5)>>2)];
 HEAP32[(($__wn)>>2)]=$6;
 var $7=(($__b)|0);
 var $8=(($__e)|0);
 var $9=$__pat;
 var $10=(($__ct+8)|0);
 var $11=$__nsn;
 var $12=(($11+1)|0);
 var $13=(($__nsn+4)|0);
 var $14=(($__nsn+8)|0);
 var $15=$__psn;
 var $16=(($15+1)|0);
 var $17=(($__psn+4)|0);
 var $18=(($__psn+8)|0);
 var $19=$__flags&512;
 var $20=($19|0)!=0;
 var $21=$__sym;
 var $22=(($21+1)|0);
 var $23=(($__sym+8)|0);
 var $24=(($__sym+4)|0);
 var $25=$__spaces;
 var $26=(($25+1)|0);
 var $27=(($__spaces+8)|0);
 var $28=(($__spaces+4)|0);
 var $29=(($9+3)|0);
 var $30=(($__wb+4)|0);
 var $31=(($__grp+4)|0);
 var $35=$__we;var $free214358=450;var $34=$2;var $33=$2;var $32=$4;var $__p_0362=0;var $__trailing_sign_0364=0;label=3;break;
 case 3: 
 var $__trailing_sign_0364;
 var $__p_0362;
 var $32;
 var $33;
 var $34;
 var $free214358;
 var $35;
 var $36=HEAP32[(($7)>>2)];
 var $37=($36|0)==0;
 if($37){var $51=0;label=9;break;}else{label=4;break;}
 case 4: 
 var $39=(($36+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($36+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($40|0)==($42|0);
 if($43){label=5;break;}else{var $51=$36;label=9;break;}
 case 5: 
 var $44=$36;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+36)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 6: 
 var $49=($48|0)==-1;
 if($49){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre_i_i_i19=HEAP32[(($7)>>2)];
 var $51=$_pre_i_i_i19;label=9;break;
 case 8: 
 HEAP32[(($7)>>2)]=0;
 var $51=0;label=9;break;
 case 9: 
 var $51;
 var $52=($51|0)==0;
 var $53=HEAP32[(($8)>>2)];
 var $54=($53|0)==0;
 if($54){label=15;break;}else{label=10;break;}
 case 10: 
 var $56=(($53+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($53+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($57|0)==($59|0);
 if($60){label=12;break;}else{label=11;break;}
 case 11: 
 if($52){var $70=$53;label=17;break;}else{var $free214_lcssa=$free214358;var $_lcssa302=$34;var $_lcssa318=$33;var $__trailing_sign_0_lcssa=$__trailing_sign_0364;label=310;break;}
 case 12: 
 var $61=$53;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+36)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 13: 
 var $66=($65|0)==-1;
 if($66){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($8)>>2)]=0;
 label=15;break;
 case 15: 
 if($52){var $free214_lcssa=$free214358;var $_lcssa302=$34;var $_lcssa318=$33;var $__trailing_sign_0_lcssa=$__trailing_sign_0364;label=310;break;}else{var $70=0;label=17;break;}
 case 16: 
 if($52){var $70=$53;label=17;break;}else{var $free214_lcssa=$free214358;var $_lcssa302=$34;var $_lcssa318=$33;var $__trailing_sign_0_lcssa=$__trailing_sign_0364;label=310;break;}
 case 17: 
 var $70;
 var $71=(($9+$__p_0362)|0);
 var $72=HEAP8[($71)];
 var $73=(($72<<24)>>24);
 switch(($73|0)){case 2:{ label=137;break;}case 4:{ var $__ng_0=0;var $586=$32;var $585=$33;var $584=$34;var $free213=$free214358;var $583=$35;label=190;break;}case 1:{ label=29;break;}case 0:{ label=42;break;}case 3:{ label=68;break;}default:{var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}}break;
 case 18: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $74=$_lcssa302;var $free218=$free214_lcssa;label=25;break;
 case 19: 
 var $free218_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit245$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit245$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit245$1;var $lpad_phi$0=$lpad_loopexit245$0;var $74=$_ph_ph;var $free218=$free218_ph_ph;label=25;break;
 case 20: 
 var $lpad_loopexit267$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit267$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit267$1;var $lpad_phi$0=$lpad_loopexit267$0;var $74=$758;var $free218=$free216;label=25;break;
 case 21: 
 var $lpad_loopexit274$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit274$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit274$1;var $lpad_phi$0=$lpad_loopexit274$0;var $74=$34;var $free218=$free214358;label=25;break;
 case 22: 
 var $lpad_loopexit280$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit280$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit280$1;var $lpad_phi$0=$lpad_loopexit280$0;var $74=$34;var $free218=$free214358;label=25;break;
 case 23: 
 var $free218_ph_ph243_ph_ph_ph_ph;
 var $_ph_ph244_ph_ph_ph_ph;
 var $lpad_loopexit282$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit282$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit282$1;var $lpad_phi$0=$lpad_loopexit282$0;var $74=$_ph_ph244_ph_ph_ph_ph;var $free218=$free218_ph_ph243_ph_ph_ph_ph;label=25;break;
 case 24: 
 var $lpad_nonloopexit283$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit283$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit283$1;var $lpad_phi$0=$lpad_nonloopexit283$0;var $74=$2;var $free218=450;label=25;break;
 case 25: 
 var $free218;
 var $74;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $75=($74|0)==0;
 if($75){label=28;break;}else{label=26;break;}
 case 26: 
 var $77=$74;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free218]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=27;break; }
 case 27: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1,0); var $79$1 = tempRet0;
 var $80=$79$0;
 ___clang_call_terminate($80);
 throw "Reached an unreachable!";
 case 28: 
 ___resumeException($lpad_phi$0)
 case 29: 
 var $cond=($__p_0362|0)==3;
 if($cond){var $free214_lcssa=$free214358;var $_lcssa302=$34;var $_lcssa318=$33;var $__trailing_sign_0_lcssa=$__trailing_sign_0364;label=310;break;}else{label=30;break;}
 case 30: 
 var $83=HEAP32[(($7)>>2)];
 var $84=(($83+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($83+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=31;break;}else{label=33;break;}
 case 31: 
 var $90=$83;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 32: 
 var $extract_t_i29=(($94)&255);
 var $_0_i_off0_i30=$extract_t_i29;label=34;break;
 case 33: 
 var $96=HEAP8[($85)];
 var $_0_i_off0_i30=$96;label=34;break;
 case 34: 
 var $_0_i_off0_i30;
 var $isascii1_i=(($_0_i_off0_i30<<24)>>24)>-1;
 if($isascii1_i){label=35;break;}else{label=41;break;}
 case 35: 
 var $97=(($_0_i_off0_i30<<24)>>24);
 var $98=HEAP32[(($10)>>2)];
 var $99=(($98+($97<<1))|0);
 var $100=HEAP16[(($99)>>1)];
 var $101=$100&8192;
 var $102=(($101<<16)>>16)==0;
 if($102){label=41;break;}else{label=36;break;}
 case 36: 
 var $104=HEAP32[(($7)>>2)];
 var $105=(($104+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($104+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=37;break;}else{label=39;break;}
 case 37: 
 var $111=$104;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+40)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 38: 
 var $extract_t_i33=(($115)&255);
 var $_0_i_off0_i34=$extract_t_i33;label=40;break;
 case 39: 
 var $117=(($106+1)|0);
 HEAP32[(($105)>>2)]=$117;
 var $118=HEAP8[($106)];
 var $_0_i_off0_i34=$118;label=40;break;
 case 40: 
 var $_0_i_off0_i34;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0_i_off0_i34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 41: 
 var $119=HEAP32[(($__err)>>2)];
 var $120=$119|4;
 HEAP32[(($__err)>>2)]=$120;
 var $_0=0;var $1062=$34;var $free220=$free214358;label=344;break;
 case 42: 
 var $122=($__p_0362|0)==3;
 if($122){var $free214_lcssa=$free214358;var $_lcssa302=$34;var $_lcssa318=$33;var $__trailing_sign_0_lcssa=$__trailing_sign_0364;label=310;break;}else{var $123=$70;var $_pre_i2_i_i41=$70;label=43;break;}
 case 43: 
 var $_pre_i2_i_i41;
 var $123;
 var $124=HEAP32[(($7)>>2)];
 var $125=($124|0)==0;
 if($125){var $139=0;label=49;break;}else{label=44;break;}
 case 44: 
 var $127=(($124+12)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($124+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($128|0)==($130|0);
 if($131){label=45;break;}else{var $139=$124;label=49;break;}
 case 45: 
 var $132=$124;
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+36)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$135]($124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=22;break; }
 case 46: 
 var $137=($136|0)==-1;
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $_pre_i_i_i37=HEAP32[(($7)>>2)];
 var $139=$_pre_i_i_i37;label=49;break;
 case 48: 
 HEAP32[(($7)>>2)]=0;
 var $139=0;label=49;break;
 case 49: 
 var $139;
 var $140=($139|0)==0;
 var $141=($123|0)==0;
 if($141){var $_pre_i2_i_i41433=$_pre_i2_i_i41;label=55;break;}else{label=50;break;}
 case 50: 
 var $143=(($123+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($123+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($144|0)==($146|0);
 if($147){label=52;break;}else{label=51;break;}
 case 51: 
 if($140){var $157=$123;var $_pre_i2_i_i41435=$_pre_i2_i_i41;label=57;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}
 case 52: 
 var $148=$123;
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+36)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$151]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=22;break; }
 case 53: 
 var $153=($152|0)==-1;
 if($153){label=54;break;}else{label=56;break;}
 case 54: 
 HEAP32[(($8)>>2)]=0;
 var $_pre_i2_i_i41433=0;label=55;break;
 case 55: 
 var $_pre_i2_i_i41433;
 if($140){var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}else{var $157=0;var $_pre_i2_i_i41435=$_pre_i2_i_i41433;label=57;break;}
 case 56: 
 var $156=($_pre_i2_i_i41|0)==0;
 var $tmp_i_i43=$140^$156;
 if($tmp_i_i43){var $157=$_pre_i2_i_i41;var $_pre_i2_i_i41435=$_pre_i2_i_i41;label=57;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}
 case 57: 
 var $_pre_i2_i_i41435;
 var $157;
 var $158=HEAP32[(($7)>>2)];
 var $159=(($158+12)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(($158+16)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=($160|0)==($162|0);
 if($163){label=58;break;}else{label=60;break;}
 case 58: 
 var $165=$158;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+36)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$168]($158) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=22;break; }
 case 59: 
 var $extract_t_i47=(($169)&255);
 var $_0_i_off0_i48=$extract_t_i47;label=61;break;
 case 60: 
 var $171=HEAP8[($160)];
 var $_0_i_off0_i48=$171;label=61;break;
 case 61: 
 var $_0_i_off0_i48;
 var $isascii1_i51=(($_0_i_off0_i48<<24)>>24)>-1;
 if($isascii1_i51){label=62;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}
 case 62: 
 var $172=(($_0_i_off0_i48<<24)>>24);
 var $173=HEAP32[(($10)>>2)];
 var $174=(($173+($172<<1))|0);
 var $175=HEAP16[(($174)>>1)];
 var $176=$175&8192;
 var $177=(($176<<16)>>16)==0;
 if($177){var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}else{label=63;break;}
 case 63: 
 var $179=HEAP32[(($7)>>2)];
 var $180=(($179+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($179+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=66;break;}
 case 64: 
 var $186=$179;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+40)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=22;break; }
 case 65: 
 var $extract_t_i53=(($190)&255);
 var $_0_i_off0_i54=$extract_t_i53;label=67;break;
 case 66: 
 var $192=(($181+1)|0);
 HEAP32[(($180)>>2)]=$192;
 var $193=HEAP8[($181)];
 var $_0_i_off0_i54=$193;label=67;break;
 case 67: 
 var $_0_i_off0_i54;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0_i_off0_i54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $123=$157;var $_pre_i2_i_i41=$_pre_i2_i_i41435;label=43;break; } else { label=22;break; }
 case 68: 
 var $195=HEAP8[($this2_i_i_i10)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=70;break;}else{label=69;break;}
 case 69: 
 var $199=HEAP32[(($17)>>2)];
 var $203=$199;label=71;break;
 case 70: 
 var $201=($195&255);
 var $202=$201>>>1;
 var $203=$202;label=71;break;
 case 71: 
 var $203;
 var $204=HEAP8[($this2_i_i_i12)];
 var $205=$204&1;
 var $206=(($205<<24)>>24)==0;
 if($206){label=73;break;}else{label=72;break;}
 case 72: 
 var $208=HEAP32[(($13)>>2)];
 var $212=$208;label=74;break;
 case 73: 
 var $210=($204&255);
 var $211=$210>>>1;
 var $212=$211;label=74;break;
 case 74: 
 var $212;
 var $213=(((-$212))|0);
 var $214=($203|0)==($213|0);
 if($214){var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}else{label=75;break;}
 case 75: 
 if($197){label=77;break;}else{label=76;break;}
 case 76: 
 var $217=HEAP32[(($17)>>2)];
 var $221=$217;label=78;break;
 case 77: 
 var $219=($195&255);
 var $220=$219>>>1;
 var $221=$220;label=78;break;
 case 78: 
 var $221;
 var $222=($221|0)==0;
 if($222){label=83;break;}else{label=79;break;}
 case 79: 
 if($206){label=81;break;}else{label=80;break;}
 case 80: 
 var $225=HEAP32[(($13)>>2)];
 var $229=$225;label=82;break;
 case 81: 
 var $227=($204&255);
 var $228=$227>>>1;
 var $229=$228;label=82;break;
 case 82: 
 var $229;
 var $230=($229|0)==0;
 if($230){label=83;break;}else{label=112;break;}
 case 83: 
 if($197){label=85;break;}else{label=84;break;}
 case 84: 
 var $233=HEAP32[(($17)>>2)];
 var $237=$233;label=86;break;
 case 85: 
 var $235=($195&255);
 var $236=$235>>>1;
 var $237=$236;label=86;break;
 case 86: 
 var $237;
 var $238=($237|0)==0;
 var $239=HEAP32[(($7)>>2)];
 var $240=(($239+12)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(($239+16)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=($241|0)==($243|0);
 if($238){label=100;break;}else{label=87;break;}
 case 87: 
 if($244){label=88;break;}else{label=90;break;}
 case 88: 
 var $247=$239;
 var $248=HEAP32[(($247)>>2)];
 var $249=(($248+36)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$250]($239) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 89: 
 var $extract_t_i73=(($251)&255);
 var $_pre436=HEAP8[($this2_i_i_i10)];
 var $_0_i_off0_i74=$extract_t_i73;var $254=$_pre436;label=91;break;
 case 90: 
 var $253=HEAP8[($241)];
 var $_0_i_off0_i74=$253;var $254=$195;label=91;break;
 case 91: 
 var $254;
 var $_0_i_off0_i74;
 var $255=$254&1;
 var $256=(($255<<24)>>24)==0;
 var $257=HEAP32[(($18)>>2)];
 var $_=($256?$16:$257);
 var $258=HEAP8[($_)];
 var $259=(($_0_i_off0_i74<<24)>>24)==(($258<<24)>>24);
 if($259){label=92;break;}else{label=99;break;}
 case 92: 
 var $261=HEAP32[(($7)>>2)];
 var $262=(($261+12)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($261+16)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($263|0)==($265|0);
 if($266){label=93;break;}else{label=94;break;}
 case 93: 
 var $268=$261;
 var $269=HEAP32[(($268)>>2)];
 var $270=(($269+40)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$271]($261) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 94: 
 var $274=(($263+1)|0);
 HEAP32[(($262)>>2)]=$274;
 label=95;break;
 case 95: 
 var $275=HEAP8[($this2_i_i_i10)];
 var $276=$275&1;
 var $277=(($276<<24)>>24)==0;
 if($277){label=97;break;}else{label=96;break;}
 case 96: 
 var $279=HEAP32[(($17)>>2)];
 var $283=$279;label=98;break;
 case 97: 
 var $281=($275&255);
 var $282=$281>>>1;
 var $283=$282;label=98;break;
 case 98: 
 var $283;
 var $284=($283>>>0)>1;
 var $__psn___trailing_sign_0=($284?$__psn:$__trailing_sign_0364);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;
 case 99: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;
 case 100: 
 if($244){label=101;break;}else{label=103;break;}
 case 101: 
 var $288=$239;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+36)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($239) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 102: 
 var $extract_t_i91=(($292)&255);
 var $_pre=HEAP8[($this2_i_i_i12)];
 var $_0_i_off0_i92=$extract_t_i91;var $295=$_pre;label=104;break;
 case 103: 
 var $294=HEAP8[($241)];
 var $_0_i_off0_i92=$294;var $295=$204;label=104;break;
 case 104: 
 var $295;
 var $_0_i_off0_i92;
 var $296=$295&1;
 var $297=(($296<<24)>>24)==0;
 var $298=HEAP32[(($14)>>2)];
 var $_463=($297?$12:$298);
 var $299=HEAP8[($_463)];
 var $300=(($_0_i_off0_i92<<24)>>24)==(($299<<24)>>24);
 if($300){label=105;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}
 case 105: 
 var $302=HEAP32[(($7)>>2)];
 var $303=(($302+12)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=(($302+16)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=($304|0)==($306|0);
 if($307){label=106;break;}else{label=107;break;}
 case 106: 
 var $309=$302;
 var $310=HEAP32[(($309)>>2)];
 var $311=(($310+40)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$312]($302) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 107: 
 var $315=(($304+1)|0);
 HEAP32[(($303)>>2)]=$315;
 label=108;break;
 case 108: 
 HEAP8[($__neg)]=1;
 var $316=HEAP8[($this2_i_i_i12)];
 var $317=$316&1;
 var $318=(($317<<24)>>24)==0;
 if($318){label=110;break;}else{label=109;break;}
 case 109: 
 var $320=HEAP32[(($13)>>2)];
 var $324=$320;label=111;break;
 case 110: 
 var $322=($316&255);
 var $323=$322>>>1;
 var $324=$323;label=111;break;
 case 111: 
 var $324;
 var $325=($324>>>0)>1;
 var $__nsn___trailing_sign_0=($325?$__nsn:$__trailing_sign_0364);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;
 case 112: 
 var $327=HEAP32[(($7)>>2)];
 var $328=(($327+12)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($327+16)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=($329|0)==($331|0);
 if($332){label=113;break;}else{label=115;break;}
 case 113: 
 var $334=$327;
 var $335=HEAP32[(($334)>>2)];
 var $336=(($335+36)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$337]($327) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=114;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 114: 
 var $extract_t_i105=(($338)&255);
 var $_pre437=HEAP8[($this2_i_i_i10)];
 var $_pre575=HEAP32[(($7)>>2)];
 var $_phi_trans_insert=(($_pre575+12)|0);
 var $_pre576=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert577=(($_pre575+16)|0);
 var $_pre578=HEAP32[(($_phi_trans_insert577)>>2)];
 var $_0_i_off0_i106=$extract_t_i105;var $344=$_pre437;var $343=$_pre575;var $342=$_pre576;var $341=$_pre578;label=116;break;
 case 115: 
 var $340=HEAP8[($329)];
 var $_0_i_off0_i106=$340;var $344=$195;var $343=$327;var $342=$329;var $341=$331;label=116;break;
 case 116: 
 var $341;
 var $342;
 var $343;
 var $344;
 var $_0_i_off0_i106;
 var $345=$344&1;
 var $346=(($345<<24)>>24)==0;
 var $347=HEAP32[(($18)>>2)];
 var $_464=($346?$16:$347);
 var $348=HEAP8[($_464)];
 var $349=(($_0_i_off0_i106<<24)>>24)==(($348<<24)>>24);
 var $350=(($343+12)|0);
 var $351=($342|0)==($341|0);
 if($349){label=117;break;}else{label=124;break;}
 case 117: 
 if($351){label=118;break;}else{label=119;break;}
 case 118: 
 var $354=$343;
 var $355=HEAP32[(($354)>>2)];
 var $356=(($355+40)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$357]($343) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=120;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 119: 
 var $360=(($342+1)|0);
 HEAP32[(($350)>>2)]=$360;
 label=120;break;
 case 120: 
 var $361=HEAP8[($this2_i_i_i10)];
 var $362=$361&1;
 var $363=(($362<<24)>>24)==0;
 if($363){label=122;break;}else{label=121;break;}
 case 121: 
 var $365=HEAP32[(($17)>>2)];
 var $369=$365;label=123;break;
 case 122: 
 var $367=($361&255);
 var $368=$367>>>1;
 var $369=$368;label=123;break;
 case 123: 
 var $369;
 var $370=($369>>>0)>1;
 var $__psn___trailing_sign_05=($370?$__psn:$__trailing_sign_0364);
 var $__trailing_sign_1=$__psn___trailing_sign_05;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;
 case 124: 
 if($351){label=125;break;}else{label=127;break;}
 case 125: 
 var $373=$343;
 var $374=HEAP32[(($373)>>2)];
 var $375=(($374+36)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$376]($343) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=126;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 126: 
 var $extract_t_i124=(($377)&255);
 var $_0_i_off0_i125=$extract_t_i124;label=128;break;
 case 127: 
 var $379=HEAP8[($342)];
 var $_0_i_off0_i125=$379;label=128;break;
 case 128: 
 var $_0_i_off0_i125;
 var $380=HEAP8[($this2_i_i_i12)];
 var $381=$380&1;
 var $382=(($381<<24)>>24)==0;
 var $383=HEAP32[(($14)>>2)];
 var $_465=($382?$12:$383);
 var $384=HEAP8[($_465)];
 var $385=(($_0_i_off0_i125<<24)>>24)==(($384<<24)>>24);
 if($385){label=129;break;}else{label=136;break;}
 case 129: 
 var $387=HEAP32[(($7)>>2)];
 var $388=(($387+12)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=(($387+16)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=($389|0)==($391|0);
 if($392){label=130;break;}else{label=131;break;}
 case 130: 
 var $394=$387;
 var $395=HEAP32[(($394)>>2)];
 var $396=(($395+40)|0);
 var $397=HEAP32[(($396)>>2)];
 var $398=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$397]($387) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { var $_ph_ph244_ph_ph_ph_ph=$34;var $free218_ph_ph243_ph_ph_ph_ph=$free214358;label=23;break; }
 case 131: 
 var $400=(($389+1)|0);
 HEAP32[(($388)>>2)]=$400;
 label=132;break;
 case 132: 
 HEAP8[($__neg)]=1;
 var $401=HEAP8[($this2_i_i_i12)];
 var $402=$401&1;
 var $403=(($402<<24)>>24)==0;
 if($403){label=134;break;}else{label=133;break;}
 case 133: 
 var $405=HEAP32[(($13)>>2)];
 var $409=$405;label=135;break;
 case 134: 
 var $407=($401&255);
 var $408=$407>>>1;
 var $409=$408;label=135;break;
 case 135: 
 var $409;
 var $410=($409>>>0)>1;
 var $__nsn___trailing_sign_06=($410?$__nsn:$__trailing_sign_0364);
 var $__trailing_sign_1=$__nsn___trailing_sign_06;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;
 case 136: 
 var $412=HEAP32[(($__err)>>2)];
 var $413=$412|4;
 HEAP32[(($__err)>>2)]=$413;
 var $_0=0;var $1062=$34;var $free220=$free214358;label=344;break;
 case 137: 
 var $415=($__trailing_sign_0364|0)!=0;
 var $416=($__p_0362>>>0)<2;
 var $or_cond=$415|$416;
 if($or_cond){label=141;break;}else{label=138;break;}
 case 138: 
 var $418=($__p_0362|0)==2;
 if($418){label=139;break;}else{var $423=0;label=140;break;}
 case 139: 
 var $420=HEAP8[($29)];
 var $421=(($420<<24)>>24)!=0;
 var $423=$421;label=140;break;
 case 140: 
 var $423;
 var $brmerge=$20|$423;
 if($brmerge){label=141;break;}else{var $__trailing_sign_1=0;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}
 case 141: 
 var $424=HEAP8[($this2_i_i_i9)];
 var $425=$424&1;
 var $426=(($425<<24)>>24)==0;
 var $427=HEAP32[(($23)>>2)];
 var $_466=($426?$22:$427);
 var $428=($__p_0362|0)==0;
 if($428){var $486=$_466;var $485=$424;var $484=$70;var $_pre_i2_i_i192=$70;label=157;break;}else{label=142;break;}
 case 142: 
 var $430=((($__p_0362)-(1))|0);
 var $431=(($9+$430)|0);
 var $432=HEAP8[($431)];
 var $switch=($432&255)<2;
 if($switch){label=143;break;}else{var $486=$_466;var $485=$424;var $484=$70;var $_pre_i2_i_i192=$70;label=157;break;}
 case 143: 
 var $433=($424&255);
 var $434=$433>>>1;
 var $435=HEAP32[(($24)>>2)];
 var $_468=($426?$434:$435);
 var $436=(($_466+$_468)|0);
 var $437=$_466;label=144;break;
 case 144: 
 var $437;
 var $438=($437|0)==($436|0);
 if($438){var $_lcssa536=$436;label=147;break;}else{label=145;break;}
 case 145: 
 var $440=HEAP8[($437)];
 var $isascii1_i147=(($440<<24)>>24)>-1;
 if($isascii1_i147){label=146;break;}else{var $_lcssa536=$437;label=147;break;}
 case 146: 
 var $441=(($440<<24)>>24);
 var $442=HEAP32[(($10)>>2)];
 var $443=(($442+($441<<1))|0);
 var $444=HEAP16[(($443)>>1)];
 var $445=$444&8192;
 var $446=(($445<<16)>>16)==0;
 var $447=(($437+1)|0);
 if($446){var $_lcssa536=$437;label=147;break;}else{var $437=$447;label=144;break;}
 case 147: 
 var $_lcssa536;
 var $448=$_lcssa536;
 var $449=$_466;
 var $450=((($448)-($449))|0);
 var $451=HEAP8[($this2_i_i_i15)];
 var $452=$451&1;
 var $453=(($452<<24)>>24)==0;
 if($453){label=149;break;}else{label=148;break;}
 case 148: 
 var $455=HEAP32[(($28)>>2)];
 var $459=$455;label=150;break;
 case 149: 
 var $457=($451&255);
 var $458=$457>>>1;
 var $459=$458;label=150;break;
 case 150: 
 var $459;
 var $460=($450>>>0)>($459>>>0);
 if($460){var $486=$_466;var $485=$424;var $484=$70;var $_pre_i2_i_i192=$70;label=157;break;}else{label=151;break;}
 case 151: 
 if($453){label=153;break;}else{label=152;break;}
 case 152: 
 var $463=HEAP32[(($27)>>2)];
 var $464=HEAP32[(($28)>>2)];
 var $_sum=((($464)-($450))|0);
 var $465=(($463+$_sum)|0);
 var $472=$464;var $471=$463;var $470=$465;label=154;break;
 case 153: 
 var $467=($451&255);
 var $468=$467>>>1;
 var $_sum455=((($468)-($450))|0);
 var $469=(($25+1+$_sum455)|0);
 var $472=$468;var $471=$26;var $470=$469;label=154;break;
 case 154: 
 var $470;
 var $471;
 var $472;
 var $473=(($471+$472)|0);
 var $474=($470|0)==($473|0);
 if($474){var $486=$_lcssa536;var $485=$424;var $484=$70;var $_pre_i2_i_i192=$70;label=157;break;}else{var $476=$470;var $475=$_466;label=155;break;}
 case 155: 
 var $475;
 var $476;
 var $477=HEAP8[($476)];
 var $478=HEAP8[($475)];
 var $479=(($477<<24)>>24)==(($478<<24)>>24);
 if($479){label=156;break;}else{var $486=$_466;var $485=$424;var $484=$70;var $_pre_i2_i_i192=$70;label=157;break;}
 case 156: 
 var $481=(($476+1)|0);
 var $482=(($475+1)|0);
 var $483=($481|0)==($473|0);
 if($483){var $486=$_lcssa536;var $485=$424;var $484=$70;var $_pre_i2_i_i192=$70;label=157;break;}else{var $476=$481;var $475=$482;label=155;break;}
 case 157: 
 var $_pre_i2_i_i192;
 var $484;
 var $485;
 var $486;
 var $487=$485&1;
 var $488=(($487<<24)>>24)==0;
 if($488){label=159;break;}else{label=158;break;}
 case 158: 
 var $490=HEAP32[(($23)>>2)];
 var $491=HEAP32[(($24)>>2)];
 var $496=$491;var $495=$490;label=160;break;
 case 159: 
 var $493=($485&255);
 var $494=$493>>>1;
 var $496=$494;var $495=$22;label=160;break;
 case 160: 
 var $495;
 var $496;
 var $497=(($495+$496)|0);
 var $498=($486|0)==($497|0);
 if($498){label=184;break;}else{label=161;break;}
 case 161: 
 var $500=HEAP32[(($7)>>2)];
 var $501=($500|0)==0;
 if($501){var $515=0;label=167;break;}else{label=162;break;}
 case 162: 
 var $503=(($500+12)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=(($500+16)|0);
 var $506=HEAP32[(($505)>>2)];
 var $507=($504|0)==($506|0);
 if($507){label=163;break;}else{var $515=$500;label=167;break;}
 case 163: 
 var $508=$500;
 var $509=HEAP32[(($508)>>2)];
 var $510=(($509+36)|0);
 var $511=HEAP32[(($510)>>2)];
 var $512=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$511]($500) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=164;break; } else { label=21;break; }
 case 164: 
 var $513=($512|0)==-1;
 if($513){label=166;break;}else{label=165;break;}
 case 165: 
 var $_pre_i_i_i188=HEAP32[(($7)>>2)];
 var $515=$_pre_i_i_i188;label=167;break;
 case 166: 
 HEAP32[(($7)>>2)]=0;
 var $515=0;label=167;break;
 case 167: 
 var $515;
 var $516=($515|0)==0;
 var $517=($484|0)==0;
 if($517){var $_pre_i2_i_i192440=$_pre_i2_i_i192;label=173;break;}else{label=168;break;}
 case 168: 
 var $519=(($484+12)|0);
 var $520=HEAP32[(($519)>>2)];
 var $521=(($484+16)|0);
 var $522=HEAP32[(($521)>>2)];
 var $523=($520|0)==($522|0);
 if($523){label=170;break;}else{label=169;break;}
 case 169: 
 if($516){var $533=$484;var $_pre_i2_i_i192439=$_pre_i2_i_i192;label=175;break;}else{label=184;break;}
 case 170: 
 var $524=$484;
 var $525=HEAP32[(($524)>>2)];
 var $526=(($525+36)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$527]($484) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=171;break; } else { label=21;break; }
 case 171: 
 var $529=($528|0)==-1;
 if($529){label=172;break;}else{label=174;break;}
 case 172: 
 HEAP32[(($8)>>2)]=0;
 var $_pre_i2_i_i192440=0;label=173;break;
 case 173: 
 var $_pre_i2_i_i192440;
 if($516){label=184;break;}else{var $533=0;var $_pre_i2_i_i192439=$_pre_i2_i_i192440;label=175;break;}
 case 174: 
 var $532=($_pre_i2_i_i192|0)==0;
 var $tmp_i_i194=$516^$532;
 if($tmp_i_i194){var $533=$_pre_i2_i_i192;var $_pre_i2_i_i192439=$_pre_i2_i_i192;label=175;break;}else{label=184;break;}
 case 175: 
 var $_pre_i2_i_i192439;
 var $533;
 var $534=HEAP32[(($7)>>2)];
 var $535=(($534+12)|0);
 var $536=HEAP32[(($535)>>2)];
 var $537=(($534+16)|0);
 var $538=HEAP32[(($537)>>2)];
 var $539=($536|0)==($538|0);
 if($539){label=176;break;}else{label=178;break;}
 case 176: 
 var $541=$534;
 var $542=HEAP32[(($541)>>2)];
 var $543=(($542+36)|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$544]($534) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=177;break; } else { label=21;break; }
 case 177: 
 var $extract_t_i183=(($545)&255);
 var $_0_i_off0_i184=$extract_t_i183;label=179;break;
 case 178: 
 var $547=HEAP8[($536)];
 var $_0_i_off0_i184=$547;label=179;break;
 case 179: 
 var $_0_i_off0_i184;
 var $548=HEAP8[($486)];
 var $549=(($_0_i_off0_i184<<24)>>24)==(($548<<24)>>24);
 if($549){label=180;break;}else{label=184;break;}
 case 180: 
 var $551=HEAP32[(($7)>>2)];
 var $552=(($551+12)|0);
 var $553=HEAP32[(($552)>>2)];
 var $554=(($551+16)|0);
 var $555=HEAP32[(($554)>>2)];
 var $556=($553|0)==($555|0);
 if($556){label=181;break;}else{label=182;break;}
 case 181: 
 var $558=$551;
 var $559=HEAP32[(($558)>>2)];
 var $560=(($559+40)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$561]($551) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=183;break; } else { label=21;break; }
 case 182: 
 var $564=(($553+1)|0);
 HEAP32[(($552)>>2)]=$564;
 label=183;break;
 case 183: 
 var $565=(($486+1)|0);
 var $_pre438=HEAP8[($this2_i_i_i9)];
 var $486=$565;var $485=$_pre438;var $484=$533;var $_pre_i2_i_i192=$_pre_i2_i_i192439;label=157;break;
 case 184: 
 if($20){label=185;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}
 case 185: 
 var $567=HEAP8[($this2_i_i_i9)];
 var $568=$567&1;
 var $569=(($568<<24)>>24)==0;
 if($569){label=187;break;}else{label=186;break;}
 case 186: 
 var $571=HEAP32[(($23)>>2)];
 var $572=HEAP32[(($24)>>2)];
 var $577=$572;var $576=$571;label=188;break;
 case 187: 
 var $574=($567&255);
 var $575=$574>>>1;
 var $577=$575;var $576=$22;label=188;break;
 case 188: 
 var $576;
 var $577;
 var $578=(($576+$577)|0);
 var $579=($486|0)==($578|0);
 if($579){var $__trailing_sign_1=$__trailing_sign_0364;var $960=$32;var $959=$33;var $958=$34;var $free215=$free214358;var $957=$35;label=309;break;}else{label=189;break;}
 case 189: 
 var $581=HEAP32[(($__err)>>2)];
 var $582=$581|4;
 HEAP32[(($__err)>>2)]=$582;
 var $_0=0;var $1062=$34;var $free220=$free214358;label=344;break;
 case 190: 
 var $583;
 var $free213;
 var $584;
 var $585;
 var $586;
 var $__ng_0;
 var $587=HEAP32[(($7)>>2)];
 var $588=($587|0)==0;
 if($588){var $602=0;label=196;break;}else{label=191;break;}
 case 191: 
 var $590=(($587+12)|0);
 var $591=HEAP32[(($590)>>2)];
 var $592=(($587+16)|0);
 var $593=HEAP32[(($592)>>2)];
 var $594=($591|0)==($593|0);
 if($594){label=192;break;}else{var $602=$587;label=196;break;}
 case 192: 
 var $595=$587;
 var $596=HEAP32[(($595)>>2)];
 var $597=(($596+36)|0);
 var $598=HEAP32[(($597)>>2)];
 var $599=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$598]($587) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=193;break; } else { var $_ph_ph=$584;var $free218_ph_ph=$free213;label=19;break; }
 case 193: 
 var $600=($599|0)==-1;
 if($600){label=195;break;}else{label=194;break;}
 case 194: 
 var $_pre_i_i_i168=HEAP32[(($7)>>2)];
 var $602=$_pre_i_i_i168;label=196;break;
 case 195: 
 HEAP32[(($7)>>2)]=0;
 var $602=0;label=196;break;
 case 196: 
 var $602;
 var $603=($602|0)==0;
 var $604=HEAP32[(($8)>>2)];
 var $605=($604|0)==0;
 if($605){label=202;break;}else{label=197;break;}
 case 197: 
 var $607=(($604+12)|0);
 var $608=HEAP32[(($607)>>2)];
 var $609=(($604+16)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=($608|0)==($610|0);
 if($611){label=199;break;}else{label=198;break;}
 case 198: 
 if($603){label=204;break;}else{label=236;break;}
 case 199: 
 var $612=$604;
 var $613=HEAP32[(($612)>>2)];
 var $614=(($613+36)|0);
 var $615=HEAP32[(($614)>>2)];
 var $616=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$615]($604) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=200;break; } else { var $_ph_ph=$584;var $free218_ph_ph=$free213;label=19;break; }
 case 200: 
 var $617=($616|0)==-1;
 if($617){label=201;break;}else{label=203;break;}
 case 201: 
 HEAP32[(($8)>>2)]=0;
 label=202;break;
 case 202: 
 if($603){label=236;break;}else{label=204;break;}
 case 203: 
 if($603){label=204;break;}else{label=236;break;}
 case 204: 
 var $620=HEAP32[(($7)>>2)];
 var $621=(($620+12)|0);
 var $622=HEAP32[(($621)>>2)];
 var $623=(($620+16)|0);
 var $624=HEAP32[(($623)>>2)];
 var $625=($622|0)==($624|0);
 if($625){label=205;break;}else{label=207;break;}
 case 205: 
 var $627=$620;
 var $628=HEAP32[(($627)>>2)];
 var $629=(($628+36)|0);
 var $630=HEAP32[(($629)>>2)];
 var $631=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$630]($620) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=206;break; } else { var $_ph_ph=$584;var $free218_ph_ph=$free213;label=19;break; }
 case 206: 
 var $extract_t_i162=(($631)&255);
 var $_0_i_off0_i163=$extract_t_i162;label=208;break;
 case 207: 
 var $633=HEAP8[($622)];
 var $_0_i_off0_i163=$633;label=208;break;
 case 208: 
 var $_0_i_off0_i163;
 var $isascii1_i160=(($_0_i_off0_i163<<24)>>24)>-1;
 if($isascii1_i160){label=209;break;}else{label=221;break;}
 case 209: 
 var $634=(($_0_i_off0_i163<<24)>>24);
 var $635=HEAP32[(($10)>>2)];
 var $636=(($635+($634<<1))|0);
 var $637=HEAP16[(($636)>>1)];
 var $638=$637&2048;
 var $639=(($638<<16)>>16)==0;
 if($639){label=221;break;}else{label=210;break;}
 case 210: 
 var $641=HEAP32[(($__wn)>>2)];
 var $642=($641|0)==($583|0);
 if($642){label=211;break;}else{var $669=$583;var $668=$641;label=220;break;}
 case 211: 
 var $644=HEAP32[(($30)>>2)];
 var $645=($644|0)!=((450)|0);
 var $646=HEAP32[(($5)>>2)];
 var $647=$583;
 var $648=$646;
 var $649=((($647)-($648))|0);
 var $650=($649>>>0)<2147483647;
 var $651=$649<<1;
 var $__i151=($650?$651:-1);
 var $652=($645?$646:0);
 var $653=_realloc($652,$__i151);
 var $654=($653|0)==0;
 if($654){label=212;break;}else{label=213;break;}
 case 212: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=213;break; } else { var $_ph_ph=$584;var $free218_ph_ph=$free213;label=19;break; }
 case 213: 
 if($645){label=214;break;}else{label=215;break;}
 case 214: 
 HEAP32[(($5)>>2)]=$653;
 var $663=$653;label=219;break;
 case 215: 
 var $_pr_i153=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$653;
 var $657=($_pr_i153|0)==0;
 if($657){var $663=$653;label=219;break;}else{label=216;break;}
 case 216: 
 var $659=HEAP32[(($30)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$659]($_pr_i153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=217;break; } else { label=218;break; }
 case 217: 
 var $_pre_i154=HEAP32[(($5)>>2)];
 var $663=$_pre_i154;label=219;break;
 case 218: 
 var $661$0 = ___cxa_find_matching_catch(-1, -1,0); var $661$1 = tempRet0;
 var $662=$661$0;
 ___clang_call_terminate($662);
 throw "Reached an unreachable!";
 case 219: 
 var $663;
 HEAP32[(($30)>>2)]=228;
 var $664=(($663+$649)|0);
 HEAP32[(($__wn)>>2)]=$664;
 var $665=HEAP32[(($5)>>2)];
 var $666=(($665+$__i151)|0);
 var $669=$666;var $668=$664;label=220;break;
 case 220: 
 var $668;
 var $669;
 var $670=(($668+1)|0);
 HEAP32[(($__wn)>>2)]=$670;
 HEAP8[($668)]=$_0_i_off0_i163;
 var $671=((($__ng_0)+(1))|0);
 var $__ng_1=$671;var $715=$586;var $714=$585;var $713=$584;var $free=$free213;var $712=$669;label=233;break;
 case 221: 
 var $672=HEAP8[($this2_i_i_i)];
 var $673=$672&1;
 var $674=(($673<<24)>>24)==0;
 if($674){label=223;break;}else{label=222;break;}
 case 222: 
 var $676=HEAP32[(($31)>>2)];
 var $680=$676;label=224;break;
 case 223: 
 var $678=($672&255);
 var $679=$678>>>1;
 var $680=$679;label=224;break;
 case 224: 
 var $680;
 var $681=($680|0)==0;
 var $682=($__ng_0|0)==0;
 var $or_cond7=$681|$682;
 if($or_cond7){label=236;break;}else{label=225;break;}
 case 225: 
 var $684=HEAP8[($__ts)];
 var $685=(($_0_i_off0_i163<<24)>>24)==(($684<<24)>>24);
 if($685){label=226;break;}else{label=236;break;}
 case 226: 
 var $687=($585|0)==($586|0);
 if($687){label=227;break;}else{var $709=$586;var $708=$585;var $707=$584;var $free212=$free213;label=232;break;}
 case 227: 
 var $689=($free213|0)==((450)|0);
 var $690=$585;
 var $691=$584;
 var $692=((($690)-($691))|0);
 var $693=($692>>>0)<2147483647;
 var $694=$692<<1;
 var $__i139=($693?$694:-1);
 var $695=$692>>2;
 if($689){var $698=0;label=229;break;}else{label=228;break;}
 case 228: 
 var $phitmp_i140=$584;
 var $698=$phitmp_i140;label=229;break;
 case 229: 
 var $698;
 var $699=_realloc($698,$__i139);
 var $700=$699;
 var $701=($699|0)==0;
 if($701){label=230;break;}else{label=231;break;}
 case 230: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=231;break; } else { var $_ph_ph=$584;var $free218_ph_ph=$free213;label=19;break; }
 case 231: 
 var $703=$__i139>>>2;
 var $704=(($700+($695<<2))|0);
 var $705=(($700+($703<<2))|0);
 var $709=$705;var $708=$704;var $707=$700;var $free212=228;label=232;break;
 case 232: 
 var $free212;
 var $707;
 var $708;
 var $709;
 var $710=(($708+4)|0);
 HEAP32[(($708)>>2)]=$__ng_0;
 var $__ng_1=0;var $715=$709;var $714=$710;var $713=$707;var $free=$free212;var $712=$583;label=233;break;
 case 233: 
 var $712;
 var $free;
 var $713;
 var $714;
 var $715;
 var $__ng_1;
 var $716=HEAP32[(($7)>>2)];
 var $717=(($716+12)|0);
 var $718=HEAP32[(($717)>>2)];
 var $719=(($716+16)|0);
 var $720=HEAP32[(($719)>>2)];
 var $721=($718|0)==($720|0);
 if($721){label=234;break;}else{label=235;break;}
 case 234: 
 var $723=$716;
 var $724=HEAP32[(($723)>>2)];
 var $725=(($724+40)|0);
 var $726=HEAP32[(($725)>>2)];
 var $727=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$726]($716) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $586=$715;var $585=$714;var $584=$713;var $free213=$free;var $583=$712;label=190;break; } else { var $_ph_ph=$713;var $free218_ph_ph=$free;label=19;break; }
 case 235: 
 var $729=(($718+1)|0);
 HEAP32[(($717)>>2)]=$729;
 var $__ng_0=$__ng_1;var $586=$715;var $585=$714;var $584=$713;var $free213=$free;var $583=$712;label=190;break;
 case 236: 
 var $731=($584|0)==($585|0);
 var $732=($__ng_0|0)==0;
 var $or_cond8=$731|$732;
 if($or_cond8){var $760=$586;var $759=$585;var $758=$584;var $free216=$free213;label=244;break;}else{label=237;break;}
 case 237: 
 var $734=($585|0)==($586|0);
 if($734){label=238;break;}else{var $756=$586;var $755=$585;var $754=$584;var $free217=$free213;label=243;break;}
 case 238: 
 var $736=($free213|0)==((450)|0);
 var $737=$585;
 var $738=$584;
 var $739=((($737)-($738))|0);
 var $740=($739>>>0)<2147483647;
 var $741=$739<<1;
 var $__i129=($740?$741:-1);
 var $742=$739>>2;
 if($736){var $745=0;label=240;break;}else{label=239;break;}
 case 239: 
 var $phitmp_i=$584;
 var $745=$phitmp_i;label=240;break;
 case 240: 
 var $745;
 var $746=_realloc($745,$__i129);
 var $747=$746;
 var $748=($746|0)==0;
 if($748){label=241;break;}else{label=242;break;}
 case 241: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=242;break; } else { var $_ph_ph244_ph_ph_ph_ph=$584;var $free218_ph_ph243_ph_ph_ph_ph=$free213;label=23;break; }
 case 242: 
 var $750=$__i129>>>2;
 var $751=(($747+($742<<2))|0);
 var $752=(($747+($750<<2))|0);
 var $756=$752;var $755=$751;var $754=$747;var $free217=228;label=243;break;
 case 243: 
 var $free217;
 var $754;
 var $755;
 var $756;
 var $757=(($755+4)|0);
 HEAP32[(($755)>>2)]=$__ng_0;
 var $760=$756;var $759=$757;var $758=$754;var $free216=$free217;label=244;break;
 case 244: 
 var $free216;
 var $758;
 var $759;
 var $760;
 var $761=HEAP32[(($__fd)>>2)];
 var $762=($761|0)>0;
 if($762){label=245;break;}else{var $950=$583;label=307;break;}
 case 245: 
 var $764=HEAP32[(($7)>>2)];
 var $765=($764|0)==0;
 if($765){var $779=0;label=251;break;}else{label=246;break;}
 case 246: 
 var $767=(($764+12)|0);
 var $768=HEAP32[(($767)>>2)];
 var $769=(($764+16)|0);
 var $770=HEAP32[(($769)>>2)];
 var $771=($768|0)==($770|0);
 if($771){label=247;break;}else{var $779=$764;label=251;break;}
 case 247: 
 var $772=$764;
 var $773=HEAP32[(($772)>>2)];
 var $774=(($773+36)|0);
 var $775=HEAP32[(($774)>>2)];
 var $776=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$775]($764) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=248;break; } else { var $_ph_ph244_ph_ph_ph_ph=$758;var $free218_ph_ph243_ph_ph_ph_ph=$free216;label=23;break; }
 case 248: 
 var $777=($776|0)==-1;
 if($777){label=250;break;}else{label=249;break;}
 case 249: 
 var $_pre_i_i_i111=HEAP32[(($7)>>2)];
 var $779=$_pre_i_i_i111;label=251;break;
 case 250: 
 HEAP32[(($7)>>2)]=0;
 var $779=0;label=251;break;
 case 251: 
 var $779;
 var $780=($779|0)==0;
 var $781=HEAP32[(($8)>>2)];
 var $782=($781|0)==0;
 if($782){label=257;break;}else{label=252;break;}
 case 252: 
 var $784=(($781+12)|0);
 var $785=HEAP32[(($784)>>2)];
 var $786=(($781+16)|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=($785|0)==($787|0);
 if($788){label=254;break;}else{label=253;break;}
 case 253: 
 if($780){var $796=$781;label=259;break;}else{label=264;break;}
 case 254: 
 var $789=$781;
 var $790=HEAP32[(($789)>>2)];
 var $791=(($790+36)|0);
 var $792=HEAP32[(($791)>>2)];
 var $793=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$792]($781) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=255;break; } else { var $_ph_ph244_ph_ph_ph_ph=$758;var $free218_ph_ph243_ph_ph_ph_ph=$free216;label=23;break; }
 case 255: 
 var $794=($793|0)==-1;
 if($794){label=256;break;}else{label=258;break;}
 case 256: 
 HEAP32[(($8)>>2)]=0;
 label=257;break;
 case 257: 
 if($780){label=264;break;}else{var $796=0;label=259;break;}
 case 258: 
 if($780){var $796=$781;label=259;break;}else{label=264;break;}
 case 259: 
 var $796;
 var $797=HEAP32[(($7)>>2)];
 var $798=(($797+12)|0);
 var $799=HEAP32[(($798)>>2)];
 var $800=(($797+16)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=($799|0)==($801|0);
 if($802){label=260;break;}else{label=262;break;}
 case 260: 
 var $804=$797;
 var $805=HEAP32[(($804)>>2)];
 var $806=(($805+36)|0);
 var $807=HEAP32[(($806)>>2)];
 var $808=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$807]($797) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=261;break; } else { var $_ph_ph244_ph_ph_ph_ph=$758;var $free218_ph_ph243_ph_ph_ph_ph=$free216;label=23;break; }
 case 261: 
 var $extract_t_i101=(($808)&255);
 var $_0_i_off0_i102=$extract_t_i101;label=263;break;
 case 262: 
 var $810=HEAP8[($799)];
 var $_0_i_off0_i102=$810;label=263;break;
 case 263: 
 var $_0_i_off0_i102;
 var $811=HEAP8[($__dp)];
 var $812=(($_0_i_off0_i102<<24)>>24)==(($811<<24)>>24);
 if($812){label=265;break;}else{label=264;break;}
 case 264: 
 var $814=HEAP32[(($__err)>>2)];
 var $815=$814|4;
 HEAP32[(($__err)>>2)]=$815;
 var $_0=0;var $1062=$758;var $free220=$free216;label=344;break;
 case 265: 
 var $817=HEAP32[(($7)>>2)];
 var $818=(($817+12)|0);
 var $819=HEAP32[(($818)>>2)];
 var $820=(($817+16)|0);
 var $821=HEAP32[(($820)>>2)];
 var $822=($819|0)==($821|0);
 if($822){label=266;break;}else{label=267;break;}
 case 266: 
 var $824=$817;
 var $825=HEAP32[(($824)>>2)];
 var $826=(($825+40)|0);
 var $827=HEAP32[(($826)>>2)];
 var $828=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$827]($817) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $832=$583;var $831=$796;var $_pre_i2_i_i82=$796;label=268;break; } else { var $_ph_ph244_ph_ph_ph_ph=$758;var $free218_ph_ph243_ph_ph_ph_ph=$free216;label=23;break; }
 case 267: 
 var $830=(($819+1)|0);
 HEAP32[(($818)>>2)]=$830;
 var $832=$583;var $831=$796;var $_pre_i2_i_i82=$796;label=268;break;
 case 268: 
 var $_pre_i2_i_i82;
 var $831;
 var $832;
 var $833=HEAP32[(($7)>>2)];
 var $834=($833|0)==0;
 if($834){var $848=0;label=274;break;}else{label=269;break;}
 case 269: 
 var $836=(($833+12)|0);
 var $837=HEAP32[(($836)>>2)];
 var $838=(($833+16)|0);
 var $839=HEAP32[(($838)>>2)];
 var $840=($837|0)==($839|0);
 if($840){label=270;break;}else{var $848=$833;label=274;break;}
 case 270: 
 var $841=$833;
 var $842=HEAP32[(($841)>>2)];
 var $843=(($842+36)|0);
 var $844=HEAP32[(($843)>>2)];
 var $845=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$844]($833) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=271;break; } else { label=20;break; }
 case 271: 
 var $846=($845|0)==-1;
 if($846){label=273;break;}else{label=272;break;}
 case 272: 
 var $_pre_i_i_i78=HEAP32[(($7)>>2)];
 var $848=$_pre_i_i_i78;label=274;break;
 case 273: 
 HEAP32[(($7)>>2)]=0;
 var $848=0;label=274;break;
 case 274: 
 var $848;
 var $849=($848|0)==0;
 var $850=($831|0)==0;
 if($850){var $_pre_i2_i_i82444_ph=$_pre_i2_i_i82;label=280;break;}else{label=275;break;}
 case 275: 
 var $852=(($831+12)|0);
 var $853=HEAP32[(($852)>>2)];
 var $854=(($831+16)|0);
 var $855=HEAP32[(($854)>>2)];
 var $856=($853|0)==($855|0);
 if($856){label=277;break;}else{label=276;break;}
 case 276: 
 if($849){var $_pre_i2_i_i82444459=$_pre_i2_i_i82;var $865=$831;label=282;break;}else{label=288;break;}
 case 277: 
 var $857=$831;
 var $858=HEAP32[(($857)>>2)];
 var $859=(($858+36)|0);
 var $860=HEAP32[(($859)>>2)];
 var $861=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$860]($831) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=278;break; } else { label=20;break; }
 case 278: 
 var $862=($861|0)==-1;
 if($862){label=279;break;}else{label=281;break;}
 case 279: 
 HEAP32[(($8)>>2)]=0;
 var $_pre_i2_i_i82444_ph=0;label=280;break;
 case 280: 
 var $_pre_i2_i_i82444_ph;
 if($849){label=288;break;}else{var $_pre_i2_i_i82444459=$_pre_i2_i_i82444_ph;var $865=0;label=282;break;}
 case 281: 
 var $864=($_pre_i2_i_i82|0)==0;
 var $tmp_i_i84=$849^$864;
 if($tmp_i_i84){var $_pre_i2_i_i82444459=$_pre_i2_i_i82;var $865=$_pre_i2_i_i82;label=282;break;}else{label=288;break;}
 case 282: 
 var $865;
 var $_pre_i2_i_i82444459;
 var $866=HEAP32[(($7)>>2)];
 var $867=(($866+12)|0);
 var $868=HEAP32[(($867)>>2)];
 var $869=(($866+16)|0);
 var $870=HEAP32[(($869)>>2)];
 var $871=($868|0)==($870|0);
 if($871){label=283;break;}else{label=285;break;}
 case 283: 
 var $873=$866;
 var $874=HEAP32[(($873)>>2)];
 var $875=(($874+36)|0);
 var $876=HEAP32[(($875)>>2)];
 var $877=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$876]($866) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=284;break; } else { label=20;break; }
 case 284: 
 var $extract_t_i69=(($877)&255);
 var $_0_i_off0_i70=$extract_t_i69;label=286;break;
 case 285: 
 var $879=HEAP8[($868)];
 var $_0_i_off0_i70=$879;label=286;break;
 case 286: 
 var $_0_i_off0_i70;
 var $isascii1_i67=(($_0_i_off0_i70<<24)>>24)>-1;
 if($isascii1_i67){label=287;break;}else{label=288;break;}
 case 287: 
 var $880=(($_0_i_off0_i70<<24)>>24);
 var $881=HEAP32[(($10)>>2)];
 var $882=(($881+($880<<1))|0);
 var $883=HEAP16[(($882)>>1)];
 var $884=$883&2048;
 var $885=(($884<<16)>>16)==0;
 if($885){label=288;break;}else{label=289;break;}
 case 288: 
 var $886=HEAP32[(($__err)>>2)];
 var $887=$886|4;
 HEAP32[(($__err)>>2)]=$887;
 var $_0=0;var $1062=$758;var $free220=$free216;label=344;break;
 case 289: 
 var $889=HEAP32[(($__wn)>>2)];
 var $890=($889|0)==($832|0);
 if($890){label=290;break;}else{var $916=$832;var $915=$889;label=299;break;}
 case 290: 
 var $892=HEAP32[(($30)>>2)];
 var $893=($892|0)!=((450)|0);
 var $894=HEAP32[(($5)>>2)];
 var $895=$832;
 var $896=$894;
 var $897=((($895)-($896))|0);
 var $898=($897>>>0)<2147483647;
 var $899=$897<<1;
 var $__i=($898?$899:-1);
 var $900=($893?$894:0);
 var $901=_realloc($900,$__i);
 var $902=($901|0)==0;
 if($902){label=291;break;}else{label=292;break;}
 case 291: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=292;break; } else { label=20;break; }
 case 292: 
 if($893){label=293;break;}else{label=294;break;}
 case 293: 
 HEAP32[(($5)>>2)]=$901;
 var $911=$901;label=298;break;
 case 294: 
 var $_pr_i=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$901;
 var $905=($_pr_i|0)==0;
 if($905){var $911=$901;label=298;break;}else{label=295;break;}
 case 295: 
 var $907=HEAP32[(($30)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$907]($_pr_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=296;break; } else { label=297;break; }
 case 296: 
 var $_pre_i=HEAP32[(($5)>>2)];
 var $911=$_pre_i;label=298;break;
 case 297: 
 var $909$0 = ___cxa_find_matching_catch(-1, -1,0); var $909$1 = tempRet0;
 var $910=$909$0;
 ___clang_call_terminate($910);
 throw "Reached an unreachable!";
 case 298: 
 var $911;
 HEAP32[(($30)>>2)]=228;
 var $912=(($911+$897)|0);
 HEAP32[(($__wn)>>2)]=$912;
 var $913=HEAP32[(($5)>>2)];
 var $914=(($913+$__i)|0);
 var $916=$914;var $915=$912;label=299;break;
 case 299: 
 var $915;
 var $916;
 var $917=HEAP32[(($7)>>2)];
 var $918=(($917+12)|0);
 var $919=HEAP32[(($918)>>2)];
 var $920=(($917+16)|0);
 var $921=HEAP32[(($920)>>2)];
 var $922=($919|0)==($921|0);
 if($922){label=300;break;}else{label=302;break;}
 case 300: 
 var $924=$917;
 var $925=HEAP32[(($924)>>2)];
 var $926=(($925+36)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$927]($917) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=301;break; } else { label=20;break; }
 case 301: 
 var $extract_t_i57=(($928)&255);
 var $_pre442=HEAP32[(($__wn)>>2)];
 var $_0_i_off0_i58=$extract_t_i57;var $931=$_pre442;label=303;break;
 case 302: 
 var $930=HEAP8[($919)];
 var $_0_i_off0_i58=$930;var $931=$915;label=303;break;
 case 303: 
 var $931;
 var $_0_i_off0_i58;
 var $932=(($931+1)|0);
 HEAP32[(($__wn)>>2)]=$932;
 HEAP8[($931)]=$_0_i_off0_i58;
 var $933=HEAP32[(($__fd)>>2)];
 var $934=((($933)-(1))|0);
 HEAP32[(($__fd)>>2)]=$934;
 var $935=HEAP32[(($7)>>2)];
 var $936=(($935+12)|0);
 var $937=HEAP32[(($936)>>2)];
 var $938=(($935+16)|0);
 var $939=HEAP32[(($938)>>2)];
 var $940=($937|0)==($939|0);
 if($940){label=304;break;}else{label=306;break;}
 case 304: 
 var $942=$935;
 var $943=HEAP32[(($942)>>2)];
 var $944=(($943+40)|0);
 var $945=HEAP32[(($944)>>2)];
 var $946=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$945]($935) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=305;break; } else { label=20;break; }
 case 305: 
 var $947=($934|0)>0;
 if($947){var $832=$916;var $831=$865;var $_pre_i2_i_i82=$_pre_i2_i_i82444459;label=268;break;}else{var $950=$916;label=307;break;}
 case 306: 
 var $949=(($937+1)|0);
 HEAP32[(($936)>>2)]=$949;
 label=305;break;
 case 307: 
 var $950;
 var $951=HEAP32[(($__wn)>>2)];
 var $952=HEAP32[(($5)>>2)];
 var $953=($951|0)==($952|0);
 if($953){label=308;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $960=$760;var $959=$759;var $958=$758;var $free215=$free216;var $957=$950;label=309;break;}
 case 308: 
 var $955=HEAP32[(($__err)>>2)];
 var $956=$955|4;
 HEAP32[(($__err)>>2)]=$956;
 var $_0=0;var $1062=$758;var $free220=$free216;label=344;break;
 case 309: 
 var $957;
 var $free215;
 var $958;
 var $959;
 var $960;
 var $__trailing_sign_1;
 var $961=((($__p_0362)+(1))|0);
 var $962=($961>>>0)<4;
 if($962){var $35=$957;var $free214358=$free215;var $34=$958;var $33=$959;var $32=$960;var $__p_0362=$961;var $__trailing_sign_0364=$__trailing_sign_1;label=3;break;}else{var $free214_lcssa=$free215;var $_lcssa302=$958;var $_lcssa318=$959;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=310;break;}
 case 310: 
 var $__trailing_sign_0_lcssa;
 var $_lcssa318;
 var $_lcssa302;
 var $free214_lcssa;
 var $963=($__trailing_sign_0_lcssa|0)==0;
 if($963){label=341;break;}else{label=311;break;}
 case 311: 
 var $964=$__trailing_sign_0_lcssa;
 var $965=$__trailing_sign_0_lcssa;
 var $966=(($965+1)|0);
 var $967=(($__trailing_sign_0_lcssa+8)|0);
 var $968=(($__trailing_sign_0_lcssa+4)|0);
 var $__i_0=1;label=312;break;
 case 312: 
 var $__i_0;
 var $969=HEAP8[($964)];
 var $970=$969&1;
 var $971=(($970<<24)>>24)==0;
 if($971){label=314;break;}else{label=313;break;}
 case 313: 
 var $973=HEAP32[(($968)>>2)];
 var $977=$973;label=315;break;
 case 314: 
 var $975=($969&255);
 var $976=$975>>>1;
 var $977=$976;label=315;break;
 case 315: 
 var $977;
 var $978=($__i_0>>>0)<($977>>>0);
 if($978){label=316;break;}else{label=341;break;}
 case 316: 
 var $980=HEAP32[(($7)>>2)];
 var $981=($980|0)==0;
 if($981){var $995=0;label=322;break;}else{label=317;break;}
 case 317: 
 var $983=(($980+12)|0);
 var $984=HEAP32[(($983)>>2)];
 var $985=(($980+16)|0);
 var $986=HEAP32[(($985)>>2)];
 var $987=($984|0)==($986|0);
 if($987){label=318;break;}else{var $995=$980;label=322;break;}
 case 318: 
 var $988=$980;
 var $989=HEAP32[(($988)>>2)];
 var $990=(($989+36)|0);
 var $991=HEAP32[(($990)>>2)];
 var $992=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$991]($980) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=319;break; } else { label=18;break; }
 case 319: 
 var $993=($992|0)==-1;
 if($993){label=321;break;}else{label=320;break;}
 case 320: 
 var $_pre_i_i_i=HEAP32[(($7)>>2)];
 var $995=$_pre_i_i_i;label=322;break;
 case 321: 
 HEAP32[(($7)>>2)]=0;
 var $995=0;label=322;break;
 case 322: 
 var $995;
 var $996=($995|0)==0;
 var $997=HEAP32[(($8)>>2)];
 var $998=($997|0)==0;
 if($998){label=328;break;}else{label=323;break;}
 case 323: 
 var $1000=(($997+12)|0);
 var $1001=HEAP32[(($1000)>>2)];
 var $1002=(($997+16)|0);
 var $1003=HEAP32[(($1002)>>2)];
 var $1004=($1001|0)==($1003|0);
 if($1004){label=325;break;}else{label=324;break;}
 case 324: 
 if($996){label=330;break;}else{label=337;break;}
 case 325: 
 var $1005=$997;
 var $1006=HEAP32[(($1005)>>2)];
 var $1007=(($1006+36)|0);
 var $1008=HEAP32[(($1007)>>2)];
 var $1009=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1008]($997) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=326;break; } else { label=18;break; }
 case 326: 
 var $1010=($1009|0)==-1;
 if($1010){label=327;break;}else{label=329;break;}
 case 327: 
 HEAP32[(($8)>>2)]=0;
 label=328;break;
 case 328: 
 if($996){label=337;break;}else{label=330;break;}
 case 329: 
 if($996){label=330;break;}else{label=337;break;}
 case 330: 
 var $1012=HEAP32[(($7)>>2)];
 var $1013=(($1012+12)|0);
 var $1014=HEAP32[(($1013)>>2)];
 var $1015=(($1012+16)|0);
 var $1016=HEAP32[(($1015)>>2)];
 var $1017=($1014|0)==($1016|0);
 if($1017){label=331;break;}else{label=333;break;}
 case 331: 
 var $1019=$1012;
 var $1020=HEAP32[(($1019)>>2)];
 var $1021=(($1020+36)|0);
 var $1022=HEAP32[(($1021)>>2)];
 var $1023=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1022]($1012) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=332;break; } else { label=18;break; }
 case 332: 
 var $extract_t_i=(($1023)&255);
 var $_0_i_off0_i=$extract_t_i;label=334;break;
 case 333: 
 var $1025=HEAP8[($1014)];
 var $_0_i_off0_i=$1025;label=334;break;
 case 334: 
 var $_0_i_off0_i;
 var $1026=HEAP8[($964)];
 var $1027=$1026&1;
 var $1028=(($1027<<24)>>24)==0;
 if($1028){var $1031=$966;label=336;break;}else{label=335;break;}
 case 335: 
 var $1030=HEAP32[(($967)>>2)];
 var $1031=$1030;label=336;break;
 case 336: 
 var $1031;
 var $1032=(($1031+$__i_0)|0);
 var $1033=HEAP8[($1032)];
 var $1034=(($_0_i_off0_i<<24)>>24)==(($1033<<24)>>24);
 if($1034){label=338;break;}else{label=337;break;}
 case 337: 
 var $1036=HEAP32[(($__err)>>2)];
 var $1037=$1036|4;
 HEAP32[(($__err)>>2)]=$1037;
 var $_0=0;var $1062=$_lcssa302;var $free220=$free214_lcssa;label=344;break;
 case 338: 
 var $1039=((($__i_0)+(1))|0);
 var $1040=HEAP32[(($7)>>2)];
 var $1041=(($1040+12)|0);
 var $1042=HEAP32[(($1041)>>2)];
 var $1043=(($1040+16)|0);
 var $1044=HEAP32[(($1043)>>2)];
 var $1045=($1042|0)==($1044|0);
 if($1045){label=339;break;}else{label=340;break;}
 case 339: 
 var $1047=$1040;
 var $1048=HEAP32[(($1047)>>2)];
 var $1049=(($1048+40)|0);
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1050]($1040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1039;label=312;break; } else { label=18;break; }
 case 340: 
 var $1053=(($1042+1)|0);
 HEAP32[(($1041)>>2)]=$1053;
 var $__i_0=$1039;label=312;break;
 case 341: 
 var $1054=($_lcssa302|0)==($_lcssa318|0);
 if($1054){var $_0=1;var $1062=$_lcssa318;var $free220=$free214_lcssa;label=344;break;}else{label=342;break;}
 case 342: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa302,$_lcssa318,$__et);
 var $1056=HEAP32[(($__et)>>2)];
 var $1057=($1056|0)==0;
 if($1057){var $_0=1;var $1062=$_lcssa302;var $free220=$free214_lcssa;label=344;break;}else{label=343;break;}
 case 343: 
 var $1059=HEAP32[(($__err)>>2)];
 var $1060=$1059|4;
 HEAP32[(($__err)>>2)]=$1060;
 var $_0=0;var $1062=$_lcssa302;var $free220=$free214_lcssa;label=344;break;
 case 344: 
 var $free220;
 var $1062;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $1063=($1062|0)==0;
 if($1063){label=347;break;}else{label=345;break;}
 case 345: 
 var $1065=$1062;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free220]($1065) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=347;break; } else { label=346;break; }
 case 346: 
 var $1067$0 = ___cxa_find_matching_catch(-1, -1,0); var $1067$1 = tempRet0;
 var $1068=$1067$0;
 ___clang_call_terminate($1068);
 throw "Reached an unreachable!";
 case 347: 
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__121__throw_runtime_errorEPKc($msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($2,$msg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 ___cxa_throw($1,10120,(44));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $1=(sp)+(152);
 var $2=(($__wbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=450;
 var $5=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((15376)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($__p_i_i_i_i)|0);
 HEAP32[(($13)>>2)]=15376;
 var $14=(($__p_i_i_i_i+4)|0);
 HEAP32[(($14)>>2)]=(26);
 var $15=(($__p_i_i_i_i+8)|0);
 HEAP32[(($15)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$9,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=40;break; }
 case 4: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $16=HEAP32[((15380)>>2)];
 var $17=((($16)-(1))|0);
 var $18=(($8+12)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$19;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($17>>>0);
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($21+($17<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 __ZNSt8bad_castC2Ev($31);
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=40;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $33=$28;
 HEAP8[($__neg)]=0;
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($1)|0);
 HEAP32[(($36)>>2)]=$35;
 var $37=(($__iob+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$1,$__intl,$__loc,$38,$__err,$__neg,$33,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=40;break; }
 case 9: 
 if($39){label=10;break;}else{label=22;break;}
 case 10: 
 var $42=$__v;
 var $43=HEAP8[($42)];
 var $44=$43&1;
 var $45=(($44<<24)>>24)==0;
 if($45){label=12;break;}else{label=11;break;}
 case 11: 
 var $47=(($__v+8)|0);
 var $48=HEAP32[(($47)>>2)];
 HEAP8[($48)]=0;
 var $49=(($__v+4)|0);
 HEAP32[(($49)>>2)]=0;
 label=13;break;
 case 12: 
 var $51=$__v;
 var $52=(($51+1)|0);
 HEAP8[($52)]=0;
 HEAP8[($42)]=0;
 label=13;break;
 case 13: 
 var $53=HEAP8[($__neg)];
 var $54=(($53<<24)>>24)==0;
 var $_pre14=$28;
 if($54){label=17;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($_pre14)>>2)];
 var $57=(($56+28)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($33,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=40;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=40;break; }
 case 16: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=$60$0;
 var $62=$60$1;
 HEAP32[(($3)>>2)]=0;
 var $134=$2;var $_0117=$62;var $_019=$61;label=41;break;
 case 17: 
 var $63=HEAP32[(($_pre14)>>2)];
 var $64=(($63+28)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($33,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $67=HEAP32[(($3)>>2)];
 var $68=HEAP32[(($__wn)>>2)];
 var $69=((($68)-(1))|0);
 var $70=($67>>>0)<($69>>>0);
 if($70){var $__w_09=$67;label=20;break;}else{var $__w_0_lcssa=$67;label=21;break;}
 case 19: 
 var $72=($75>>>0)<($69>>>0);
 if($72){var $__w_09=$75;label=20;break;}else{var $__w_0_lcssa=$75;label=21;break;}
 case 20: 
 var $__w_09;
 var $73=HEAP8[($__w_09)];
 var $74=(($73<<24)>>24)==(($66<<24)>>24);
 var $75=(($__w_09+1)|0);
 if($74){label=19;break;}else{var $__w_0_lcssa=$__w_09;label=21;break;}
 case 21: 
 var $__w_0_lcssa;
 var $76=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0_lcssa,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=40;break; }
 case 22: 
 var $78=(($__b)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){var $94=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $82=(($79+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($79+16)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($83|0)==($85|0);
 if($86){label=24;break;}else{var $94=$79;label=27;break;}
 case 24: 
 var $87=$79;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=40;break; }
 case 25: 
 var $92=($91|0)==-1;
 if($92){label=26;break;}else{var $94=$79;label=27;break;}
 case 26: 
 HEAP32[(($78)>>2)]=0;
 var $94=0;label=27;break;
 case 27: 
 var $94;
 var $95=($94|0)==0;
 var $96=($35|0)==0;
 if($96){label=33;break;}else{label=28;break;}
 case 28: 
 var $98=(($35+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($35+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=30;break;}else{label=29;break;}
 case 29: 
 if($95){label=36;break;}else{label=35;break;}
 case 30: 
 var $103=$35;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=40;break; }
 case 31: 
 var $108=($107|0)==-1;
 if($108){label=32;break;}else{label=34;break;}
 case 32: 
 HEAP32[(($34)>>2)]=0;
 label=33;break;
 case 33: 
 if($95){label=35;break;}else{label=36;break;}
 case 34: 
 var $110=($35|0)==0;
 var $tmp_i_i=$95^$110;
 if($tmp_i_i){label=36;break;}else{label=35;break;}
 case 35: 
 var $112=HEAP32[(($__err)>>2)];
 var $113=$112|2;
 HEAP32[(($__err)>>2)]=$113;
 label=36;break;
 case 36: 
 var $114=(($agg_result)|0);
 HEAP32[(($114)>>2)]=$94;
 var $115=HEAP32[(($7)>>2)];
 var $116=(($115)|0);
 var $117=__ZNSt3__114__shared_count16__release_sharedEv($116);
 var $118=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $119=($118|0)==0;
 if($119){label=39;break;}else{label=37;break;}
 case 37: 
 var $121=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=38;break; }
 case 38: 
 var $123$0 = ___cxa_find_matching_catch(-1, -1,0); var $123$1 = tempRet0;
 var $124=$123$0;
 ___clang_call_terminate($124);
 throw "Reached an unreachable!";
 case 39: 
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
 case 40: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=$126$1;
 var $129=HEAP32[(($7)>>2)];
 var $130=(($129)|0);
 var $131=__ZNSt3__114__shared_count16__release_sharedEv($130);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $132=($_pre|0)==0;
 if($132){var $_0118=$128;var $_020=$127;label=43;break;}else{var $134=$_pre;var $_0117=$128;var $_019=$127;label=41;break;}
 case 41: 
 var $_019;
 var $_0117;
 var $134;
 var $135=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$135]($134) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0118=$_0117;var $_020=$_019;label=43;break; } else { label=42;break; }
 case 42: 
 var $137$0 = ___cxa_find_matching_catch(-1, -1,0); var $137$1 = tempRet0;
 var $138=$137$0;
 ___clang_call_terminate($138);
 throw "Reached an unreachable!";
 case 43: 
 var $_020;
 var $_0118;
 var $139$0=$_020;
 var $139$1=0;
 var $140$0=$139$0;
 var $140$1=$_0118;
 ___resumeException($140$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$__first;
 var $3=HEAP8[($1)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=($3&255);
 var $7=$6>>>1;
 var $17=10;var $16=$3;var $15=$7;label=4;break;
 case 3: 
 var $9=(($this+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&-2;
 var $phitmp_i=((($13)-(1))|0);
 var $14=(($12)&255);
 var $17=$phitmp_i;var $16=$14;var $15=$10;label=4;break;
 case 4: 
 var $15;
 var $16;
 var $17;
 var $18=$__last;
 var $19=((($18)-($2))|0);
 var $20=($__last|0)==($__first|0);
 if($20){label=15;break;}else{label=5;break;}
 case 5: 
 var $22=((($17)-($15))|0);
 var $23=($22>>>0)<($19>>>0);
 if($23){label=6;break;}else{var $28=$16;label=7;break;}
 case 6: 
 var $25=((($15)+($19))|0);
 var $26=((($25)-($17))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$17,$26,$15,$15,0,0);
 var $_pre=HEAP8[($1)];
 var $28=$_pre;label=7;break;
 case 7: 
 var $28;
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=9;break;}else{label=8;break;}
 case 8: 
 var $32=(($this+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=10;break;
 case 9: 
 var $35=$this;
 var $36=(($35+1)|0);
 var $37=$36;label=10;break;
 case 10: 
 var $37;
 var $38=(($37+$15)|0);
 var $39=((($15)-($2))|0);
 var $scevgep=(($__last+$39)|0);
 var $scevgep3=$scevgep;
 var $_01=$__first;var $__p_02=$38;label=11;break;
 case 11: 
 var $__p_02;
 var $_01;
 var $41=HEAP8[($_01)];
 HEAP8[($__p_02)]=$41;
 var $42=(($__p_02+1)|0);
 var $43=(($_01+1)|0);
 var $44=($43|0)==($__last|0);
 if($44){label=12;break;}else{var $_01=$43;var $__p_02=$42;label=11;break;}
 case 12: 
 var $scevgep4=(($37+$scevgep3)|0);
 HEAP8[($scevgep4)]=0;
 var $46=((($15)+($19))|0);
 var $47=HEAP8[($1)];
 var $48=$47&1;
 var $49=(($48<<24)>>24)==0;
 if($49){label=14;break;}else{label=13;break;}
 case 13: 
 var $51=(($this+4)|0);
 HEAP32[(($51)>>2)]=$46;
 label=15;break;
 case 14: 
 var $53=$46<<1;
 var $54=(($53)&255);
 HEAP8[($1)]=$54;
 label=15;break;
 case 15: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i8=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=(sp)+(56);
 var $4=(sp)+(72);
 var $5=(sp)+(88);
 var $6=(sp)+(104);
 var $7=(sp)+(112);
 var $8=(sp)+(128);
 var $9=(sp)+(144);
 var $10=(sp)+(160);
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast1=$1;
 var $12=(($__loc)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $15=HEAP32[((15848)>>2)];
 var $16=($15|0)==-1;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__p_i_i_i_i)|0);
 HEAP32[(($18)>>2)]=15848;
 var $19=(($__p_i_i_i_i+4)|0);
 HEAP32[(($19)>>2)]=(26);
 var $20=(($__p_i_i_i_i+8)|0);
 HEAP32[(($20)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15848,$14,266);
 label=4;break;
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $21=HEAP32[((15852)>>2)];
 var $22=((($21)-(1))|0);
 var $23=(($13+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($13+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$24;
 var $28=$26;
 var $29=((($27)-($28))|0);
 var $30=$29>>2;
 var $31=($30>>>0)>($22>>>0);
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=(($26+($22<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 __ZNSt8bad_castC2Ev($36);
 ___cxa_throw($35,10104,(378));
 throw "Reached an unreachable!";
 case 7: 
 var $37=$33;
 var $38=$33;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+44)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($tmpcast1,$37);
 var $42=$__pat;
 var $43=HEAP32[(($1)>>2)];
 tempBigInt=$43;HEAP8[($42)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(3))|0)]=tempBigInt&0xff;
 var $44=$33;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+32)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($2,$37);
 var $48=$__nsn;
 var $49=HEAP8[($48)];
 var $50=$49&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=9;break;}else{label=8;break;}
 case 8: 
 var $53=(($__nsn+8)|0);
 var $54=HEAP32[(($53)>>2)];
 HEAP8[($54)]=0;
 var $55=(($__nsn+4)|0);
 HEAP32[(($55)>>2)]=0;
 label=10;break;
 case 9: 
 var $57=$__nsn;
 var $58=(($57+1)|0);
 HEAP8[($58)]=0;
 HEAP8[($48)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1,0); var $60$1 = tempRet0;
 var $61=$60$0;
 ___clang_call_terminate($61);
 throw "Reached an unreachable!";
 case 12: 
 var $62=$2;
 assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($62)+(8))>>2)];
 HEAP32[(($62)>>2)]=0; HEAP32[((($62)+(4))>>2)]=0; HEAP32[((($62)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $63=HEAP32[(($44)>>2)];
 var $64=(($63+28)|0);
 var $65=HEAP32[(($64)>>2)];
 FUNCTION_TABLE[$65]($3,$37);
 var $66=$__psn;
 var $67=HEAP8[($66)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=14;break;}else{label=13;break;}
 case 13: 
 var $71=(($__psn+8)|0);
 var $72=HEAP32[(($71)>>2)];
 HEAP8[($72)]=0;
 var $73=(($__psn+4)|0);
 HEAP32[(($73)>>2)]=0;
 label=15;break;
 case 14: 
 var $75=$__psn;
 var $76=(($75+1)|0);
 HEAP8[($76)]=0;
 HEAP8[($66)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $78$0 = ___cxa_find_matching_catch(-1, -1,0); var $78$1 = tempRet0;
 var $79=$78$0;
 ___clang_call_terminate($79);
 throw "Reached an unreachable!";
 case 17: 
 var $80=$3;
 assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($80)+(8))>>2)];
 HEAP32[(($80)>>2)]=0; HEAP32[((($80)+(4))>>2)]=0; HEAP32[((($80)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 var $81=$33;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+12)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=FUNCTION_TABLE[$84]($37);
 HEAP8[($__dp)]=$85;
 var $86=HEAP32[(($81)>>2)];
 var $87=(($86+16)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($37);
 HEAP8[($__ts)]=$89;
 var $90=HEAP32[(($44)>>2)];
 var $91=(($90+20)|0);
 var $92=HEAP32[(($91)>>2)];
 FUNCTION_TABLE[$92]($4,$37);
 var $93=$__grp;
 var $94=HEAP8[($93)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){label=19;break;}else{label=18;break;}
 case 18: 
 var $98=(($__grp+8)|0);
 var $99=HEAP32[(($98)>>2)];
 HEAP8[($99)]=0;
 var $100=(($__grp+4)|0);
 HEAP32[(($100)>>2)]=0;
 label=20;break;
 case 19: 
 var $102=$__grp;
 var $103=(($102+1)|0);
 HEAP8[($103)]=0;
 HEAP8[($93)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1,0); var $105$1 = tempRet0;
 var $106=$105$0;
 ___clang_call_terminate($106);
 throw "Reached an unreachable!";
 case 22: 
 var $107=$4;
 assert(12 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($93)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];HEAP32[((($93)+(8))>>2)]=HEAP32[((($107)+(8))>>2)];
 HEAP32[(($107)>>2)]=0; HEAP32[((($107)+(4))>>2)]=0; HEAP32[((($107)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 var $108=HEAP32[(($44)>>2)];
 var $109=(($108+24)|0);
 var $110=HEAP32[(($109)>>2)];
 FUNCTION_TABLE[$110]($5,$37);
 var $111=$__sym;
 var $112=HEAP8[($111)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($114){label=24;break;}else{label=23;break;}
 case 23: 
 var $116=(($__sym+8)|0);
 var $117=HEAP32[(($116)>>2)];
 HEAP8[($117)]=0;
 var $118=(($__sym+4)|0);
 HEAP32[(($118)>>2)]=0;
 label=25;break;
 case 24: 
 var $120=$__sym;
 var $121=(($120+1)|0);
 HEAP8[($121)]=0;
 HEAP8[($111)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $123$0 = ___cxa_find_matching_catch(-1, -1,0); var $123$1 = tempRet0;
 var $124=$123$0;
 ___clang_call_terminate($124);
 throw "Reached an unreachable!";
 case 27: 
 var $125=$5;
 assert(12 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($125)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($125)+(4))>>2)];HEAP32[((($111)+(8))>>2)]=HEAP32[((($125)+(8))>>2)];
 HEAP32[(($125)>>2)]=0; HEAP32[((($125)+(4))>>2)]=0; HEAP32[((($125)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 var $126=$33;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+36)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=FUNCTION_TABLE[$129]($37);
 var $storemerge=$130;label=54;break;
 case 28: 
 var $tmpcast=$6;
 var $132=(($__loc)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$__p_i_i_i_i8;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $135=HEAP32[((15856)>>2)];
 var $136=($135|0)==-1;
 if($136){label=30;break;}else{label=29;break;}
 case 29: 
 var $138=(($__p_i_i_i_i8)|0);
 HEAP32[(($138)>>2)]=15856;
 var $139=(($__p_i_i_i_i8+4)|0);
 HEAP32[(($139)>>2)]=(26);
 var $140=(($__p_i_i_i_i8+8)|0);
 HEAP32[(($140)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15856,$134,266);
 label=30;break;
 case 30: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $141=HEAP32[((15860)>>2)];
 var $142=((($141)-(1))|0);
 var $143=(($133+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($133+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$144;
 var $148=$146;
 var $149=((($147)-($148))|0);
 var $150=$149>>2;
 var $151=($150>>>0)>($142>>>0);
 if($151){label=31;break;}else{label=32;break;}
 case 31: 
 var $152=(($146+($142<<2))|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153|0)==0;
 if($154){label=32;break;}else{label=33;break;}
 case 32: 
 var $155=___cxa_allocate_exception(4);
 var $156=$155;
 __ZNSt8bad_castC2Ev($156);
 ___cxa_throw($155,10104,(378));
 throw "Reached an unreachable!";
 case 33: 
 var $157=$153;
 var $158=$153;
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159+44)|0);
 var $161=HEAP32[(($160)>>2)];
 FUNCTION_TABLE[$161]($tmpcast,$157);
 var $162=$__pat;
 var $163=HEAP32[(($6)>>2)];
 tempBigInt=$163;HEAP8[($162)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($162)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($162)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($162)+(3))|0)]=tempBigInt&0xff;
 var $164=$153;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+32)|0);
 var $167=HEAP32[(($166)>>2)];
 FUNCTION_TABLE[$167]($7,$157);
 var $168=$__nsn;
 var $169=HEAP8[($168)];
 var $170=$169&1;
 var $171=(($170<<24)>>24)==0;
 if($171){label=35;break;}else{label=34;break;}
 case 34: 
 var $173=(($__nsn+8)|0);
 var $174=HEAP32[(($173)>>2)];
 HEAP8[($174)]=0;
 var $175=(($__nsn+4)|0);
 HEAP32[(($175)>>2)]=0;
 label=36;break;
 case 35: 
 var $177=$__nsn;
 var $178=(($177+1)|0);
 HEAP8[($178)]=0;
 HEAP8[($168)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $180$0 = ___cxa_find_matching_catch(-1, -1,0); var $180$1 = tempRet0;
 var $181=$180$0;
 ___clang_call_terminate($181);
 throw "Reached an unreachable!";
 case 38: 
 var $182=$7;
 assert(12 % 1 === 0);HEAP32[(($168)>>2)]=HEAP32[(($182)>>2)];HEAP32[((($168)+(4))>>2)]=HEAP32[((($182)+(4))>>2)];HEAP32[((($168)+(8))>>2)]=HEAP32[((($182)+(8))>>2)];
 HEAP32[(($182)>>2)]=0; HEAP32[((($182)+(4))>>2)]=0; HEAP32[((($182)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
 var $183=HEAP32[(($164)>>2)];
 var $184=(($183+28)|0);
 var $185=HEAP32[(($184)>>2)];
 FUNCTION_TABLE[$185]($8,$157);
 var $186=$__psn;
 var $187=HEAP8[($186)];
 var $188=$187&1;
 var $189=(($188<<24)>>24)==0;
 if($189){label=40;break;}else{label=39;break;}
 case 39: 
 var $191=(($__psn+8)|0);
 var $192=HEAP32[(($191)>>2)];
 HEAP8[($192)]=0;
 var $193=(($__psn+4)|0);
 HEAP32[(($193)>>2)]=0;
 label=41;break;
 case 40: 
 var $195=$__psn;
 var $196=(($195+1)|0);
 HEAP8[($196)]=0;
 HEAP8[($186)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $198$0 = ___cxa_find_matching_catch(-1, -1,0); var $198$1 = tempRet0;
 var $199=$198$0;
 ___clang_call_terminate($199);
 throw "Reached an unreachable!";
 case 43: 
 var $200=$8;
 assert(12 % 1 === 0);HEAP32[(($186)>>2)]=HEAP32[(($200)>>2)];HEAP32[((($186)+(4))>>2)]=HEAP32[((($200)+(4))>>2)];HEAP32[((($186)+(8))>>2)]=HEAP32[((($200)+(8))>>2)];
 HEAP32[(($200)>>2)]=0; HEAP32[((($200)+(4))>>2)]=0; HEAP32[((($200)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
 var $201=$153;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+12)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=FUNCTION_TABLE[$204]($157);
 HEAP8[($__dp)]=$205;
 var $206=HEAP32[(($201)>>2)];
 var $207=(($206+16)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=FUNCTION_TABLE[$208]($157);
 HEAP8[($__ts)]=$209;
 var $210=HEAP32[(($164)>>2)];
 var $211=(($210+20)|0);
 var $212=HEAP32[(($211)>>2)];
 FUNCTION_TABLE[$212]($9,$157);
 var $213=$__grp;
 var $214=HEAP8[($213)];
 var $215=$214&1;
 var $216=(($215<<24)>>24)==0;
 if($216){label=45;break;}else{label=44;break;}
 case 44: 
 var $218=(($__grp+8)|0);
 var $219=HEAP32[(($218)>>2)];
 HEAP8[($219)]=0;
 var $220=(($__grp+4)|0);
 HEAP32[(($220)>>2)]=0;
 label=46;break;
 case 45: 
 var $222=$__grp;
 var $223=(($222+1)|0);
 HEAP8[($223)]=0;
 HEAP8[($213)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $225$0 = ___cxa_find_matching_catch(-1, -1,0); var $225$1 = tempRet0;
 var $226=$225$0;
 ___clang_call_terminate($226);
 throw "Reached an unreachable!";
 case 48: 
 var $227=$9;
 assert(12 % 1 === 0);HEAP32[(($213)>>2)]=HEAP32[(($227)>>2)];HEAP32[((($213)+(4))>>2)]=HEAP32[((($227)+(4))>>2)];HEAP32[((($213)+(8))>>2)]=HEAP32[((($227)+(8))>>2)];
 HEAP32[(($227)>>2)]=0; HEAP32[((($227)+(4))>>2)]=0; HEAP32[((($227)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
 var $228=HEAP32[(($164)>>2)];
 var $229=(($228+24)|0);
 var $230=HEAP32[(($229)>>2)];
 FUNCTION_TABLE[$230]($10,$157);
 var $231=$__sym;
 var $232=HEAP8[($231)];
 var $233=$232&1;
 var $234=(($233<<24)>>24)==0;
 if($234){label=50;break;}else{label=49;break;}
 case 49: 
 var $236=(($__sym+8)|0);
 var $237=HEAP32[(($236)>>2)];
 HEAP8[($237)]=0;
 var $238=(($__sym+4)|0);
 HEAP32[(($238)>>2)]=0;
 label=51;break;
 case 50: 
 var $240=$__sym;
 var $241=(($240+1)|0);
 HEAP8[($241)]=0;
 HEAP8[($231)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $243$0 = ___cxa_find_matching_catch(-1, -1,0); var $243$1 = tempRet0;
 var $244=$243$0;
 ___clang_call_terminate($244);
 throw "Reached an unreachable!";
 case 53: 
 var $245=$10;
 assert(12 % 1 === 0);HEAP32[(($231)>>2)]=HEAP32[(($245)>>2)];HEAP32[((($231)+(4))>>2)]=HEAP32[((($245)+(4))>>2)];HEAP32[((($231)+(8))>>2)]=HEAP32[((($245)+(8))>>2)];
 HEAP32[(($245)>>2)]=0; HEAP32[((($245)+(4))>>2)]=0; HEAP32[((($245)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
 var $246=$153;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+36)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=FUNCTION_TABLE[$249]($157);
 var $storemerge=$250;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__grouping;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($__grouping+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=($11|0)==0;
 if($12){label=21;break;}else{label=5;break;}
 case 5: 
 var $14=($__g|0)==($__g_end|0);
 if($14){var $23=$2;label=9;break;}else{label=6;break;}
 case 6: 
 var $15=((($__g_end)-(4))|0);
 var $16=($15>>>0)>($__g>>>0);
 if($16){var $_012_i_i=$__g;var $17=$15;label=7;break;}else{var $23=$2;label=9;break;}
 case 7: 
 var $17;
 var $_012_i_i;
 var $18=HEAP32[(($_012_i_i)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($_012_i_i)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($_012_i_i+4)|0);
 var $21=((($17)-(4))|0);
 var $22=($20>>>0)<($21>>>0);
 if($22){var $_012_i_i=$20;var $17=$21;label=7;break;}else{label=8;break;}
 case 8: 
 var $_pre=HEAP8[($1)];
 var $23=$_pre;label=9;break;
 case 9: 
 var $23;
 var $24=$23&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 var $27=(($__grouping+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($__grouping+4)|0);
 var $30=HEAP32[(($29)>>2)];
 var $37=$30;var $36=$28;label=12;break;
 case 11: 
 var $32=$__grouping;
 var $33=(($32+1)|0);
 var $34=($23&255);
 var $35=$34>>>1;
 var $37=$35;var $36=$33;label=12;break;
 case 12: 
 var $36;
 var $37;
 var $38=((($__g_end)-(4))|0);
 var $39=($38>>>0)>($__g>>>0);
 var $40=HEAP8[($36)];
 var $_not9=(($40<<24)>>24)<1;
 var $41=(($40<<24)>>24)==127;
 var $or_cond210=$_not9|$41;
 if($39){label=13;break;}else{var $_lcssa6=$40;var $or_cond2_lcssa=$or_cond210;label=18;break;}
 case 13: 
 var $42=(($36+$37)|0);
 var $43=$42;
 var $__ig_011=$36;var $__r_012=$__g;var $45=$40;var $or_cond213=$or_cond210;label=14;break;
 case 14: 
 var $or_cond213;
 var $45;
 var $__r_012;
 var $__ig_011;
 if($or_cond213){label=17;break;}else{label=15;break;}
 case 15: 
 var $47=(($45<<24)>>24);
 var $48=HEAP32[(($__r_012)>>2)];
 var $49=($47|0)==($48|0);
 if($49){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 label=21;break;
 case 17: 
 var $52=$__ig_011;
 var $53=((($43)-($52))|0);
 var $54=($53|0)>1;
 var $55=(($__ig_011+1)|0);
 var $___ig_0=($54?$55:$__ig_011);
 var $56=(($__r_012+4)|0);
 var $57=($56>>>0)<($38>>>0);
 var $58=HEAP8[($___ig_0)];
 var $_not=(($58<<24)>>24)<1;
 var $59=(($58<<24)>>24)==127;
 var $or_cond2=$_not|$59;
 if($57){var $__ig_011=$___ig_0;var $__r_012=$56;var $45=$58;var $or_cond213=$or_cond2;label=14;break;}else{var $_lcssa6=$58;var $or_cond2_lcssa=$or_cond2;label=18;break;}
 case 18: 
 var $or_cond2_lcssa;
 var $_lcssa6;
 if($or_cond2_lcssa){label=21;break;}else{label=19;break;}
 case 19: 
 var $61=(($_lcssa6<<24)>>24);
 var $62=HEAP32[(($38)>>2)];
 var $63=($61>>>0)<($62>>>0);
 var $64=($62|0)==0;
 var $or_cond=$63|$64;
 if($or_cond){label=20;break;}else{label=21;break;}
 case 20: 
 HEAP32[(($__err)>>2)]=4;
 label=21;break;
 case 21: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+600)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $1=(sp)+(448);
 var $__atoms=(sp)+(456);
 var $__nbuf=(sp)+(496);
 var $2=$__wbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $3=(($__wbuf)|0);
 var $4=(($__wb)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=(($__wb+4)|0);
 HEAP32[(($5)>>2)]=450;
 var $6=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $8=(($__loc)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=HEAP32[((15368)>>2)];
 var $12=($11|0)==-1;
 if($12){label=4;break;}else{label=3;break;}
 case 3: 
 var $14=(($__p_i_i_i_i)|0);
 HEAP32[(($14)>>2)]=15368;
 var $15=(($__p_i_i_i_i+4)|0);
 HEAP32[(($15)>>2)]=(26);
 var $16=(($__p_i_i_i_i+8)|0);
 HEAP32[(($16)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$10,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $17=HEAP32[((15372)>>2)];
 var $18=((($17)-(1))|0);
 var $19=(($9+12)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($9+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$20;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=$25>>2;
 var $27=($26>>>0)>($18>>>0);
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $28=(($22+($18<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 if($30){label=6;break;}else{label=8;break;}
 case 6: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 __ZNSt8bad_castC2Ev($32);
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $34=$29;
 HEAP8[($__neg)]=0;
 var $35=(($__e)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=(($__iob+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$1,$__intl,$__loc,$39,$__err,$__neg,$34,$__wb,$__wn,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($40){label=10;break;}else{label=34;break;}
 case 10: 
 var $43=$__atoms;
 var $$etemp$3$0=40;
 var $$etemp$3$1=0;

 var $44=(($__atoms)|0);
 var $45=$29;
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+48)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($34,3712,3722,$44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $50=(($__nbuf)|0);
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 var $51=HEAP32[(($__wn)>>2)];
 var $52=HEAP32[(($4)>>2)];
 var $53=$51;
 var $54=$52;
 var $55=((($53)-($54))|0);
 var $56=($55|0)>392;
 if($56){label=12;break;}else{var $__nc_0=$50;var $78=0;label=19;break;}
 case 12: 
 var $57=$55>>2;
 var $58=((($57)+(2))|0);
 var $59=_malloc($58);
 var $60=($59|0)==0;
 if($60){label=13;break;}else{var $__nc_0=$59;var $78=$59;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $78=0;label=19;break; } else { var $70=0;label=16;break; }
 case 14: 
 var $62$0 = ___cxa_find_matching_catch(-1, -1); var $62$1 = tempRet0;
 var $63=$62$0;
 var $64=$62$1;
 HEAP32[(($4)>>2)]=0;
 var $175=$3;var $_1214=$64;var $_116=$63;var $174=450;label=56;break;
 case 15: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=$66$0;
 var $68=$66$1;
 var $_0=$67;var $_01=$68;label=54;break;
 case 16: 
 var $70;
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 var $eh_lpad_body$1=$71$1;var $eh_lpad_body$0=$71$0;var $72=$70;label=17;break;
 case 17: 
 var $72;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $73=$eh_lpad_body$0;
 var $74=$eh_lpad_body$1;
 var $75=($72|0)==0;
 if($75){var $_0=$73;var $_01=$74;label=54;break;}else{label=18;break;}
 case 18: 
 _free($72);
 var $_0=$73;var $_01=$74;label=54;break;
 case 19: 
 var $78;
 var $__nc_0;
 var $79=HEAP8[($__neg)];
 var $80=(($79<<24)>>24)==0;
 if($80){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $82=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$82;label=21;break;
 case 21: 
 var $__nc_1;
 var $84=($52>>>0)<($51>>>0);
 if($84){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $85=(($__atoms+40)|0);
 var $86=$__atoms;
 var $__nc_210=$__nc_1;var $__w_011=$52;label=23;break;
 case 23: 
 var $__w_011;
 var $__nc_210;
 var $88=HEAP32[(($__w_011)>>2)];
 var $_01_i=$44;label=25;break;
 case 24: 
 var $90=($94|0)==($85|0);
 if($90){var $_0_lcssa_i=$85;label=26;break;}else{var $_01_i=$94;label=25;break;}
 case 25: 
 var $_01_i;
 var $92=HEAP32[(($_01_i)>>2)];
 var $93=($92|0)==($88|0);
 var $94=(($_01_i+4)|0);
 if($93){var $_0_lcssa_i=$_01_i;label=26;break;}else{label=24;break;}
 case 26: 
 var $_0_lcssa_i;
 var $95=$_0_lcssa_i;
 var $96=((($95)-($86))|0);
 var $97=$96>>2;
 var $98=((3712+$97)|0);
 var $99=HEAP8[($98)];
 HEAP8[($__nc_210)]=$99;
 var $100=(($__w_011+4)|0);
 var $101=(($__nc_210+1)|0);
 var $102=HEAP32[(($__wn)>>2)];
 var $103=($100>>>0)<($102>>>0);
 if($103){var $__nc_210=$101;var $__w_011=$100;label=23;break;}else{var $__nc_2_lcssa=$101;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $104=_sscanf($50,2744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $105=($104|0)==1;
 if($105){label=32;break;}else{label=28;break;}
 case 28: 
 var $107=___cxa_allocate_exception(8);
 var $108=$107;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($108,2688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($107,10120,(44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $70=$78;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1); var $111$1 = tempRet0;
 ___cxa_free_exception($107);
 var $eh_lpad_body$1=$111$1;var $eh_lpad_body$0=$111$0;var $72=$78;label=17;break;
 case 32: 
 var $113=($78|0)==0;
 if($113){label=34;break;}else{label=33;break;}
 case 33: 
 _free($78);
 label=34;break;
 case 34: 
 var $115=(($__b)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($116|0)==0;
 if($117){var $134=1;label=41;break;}else{label=35;break;}
 case 35: 
 var $119=(($116+12)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(($116+16)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=($120|0)==($122|0);
 if($123){label=36;break;}else{label=37;break;}
 case 36: 
 var $125=$116;
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+36)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$128]($116) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$129;label=38;break; } else { label=15;break; }
 case 37: 
 var $131=HEAP32[(($120)>>2)];
 var $_0_i_i_i_i=$131;label=38;break;
 case 38: 
 var $_0_i_i_i_i;
 var $132=($_0_i_i_i_i|0)==-1;
 if($132){label=40;break;}else{label=39;break;}
 case 39: 
 var $_pre_i_i_i=HEAP32[(($115)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $134=$phitmp_i_i_i;label=41;break;
 case 40: 
 HEAP32[(($115)>>2)]=0;
 var $134=1;label=41;break;
 case 41: 
 var $134;
 var $135=HEAP32[(($35)>>2)];
 var $136=($135|0)==0;
 if($136){label=47;break;}else{label=42;break;}
 case 42: 
 var $138=(($135+12)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($135+16)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($139|0)==($141|0);
 if($142){label=43;break;}else{label=44;break;}
 case 43: 
 var $144=$135;
 var $145=HEAP32[(($144)>>2)];
 var $146=(($145+36)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$147]($135) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$148;label=45;break; } else { label=15;break; }
 case 44: 
 var $150=HEAP32[(($139)>>2)];
 var $_0_i_i1_i_i=$150;label=45;break;
 case 45: 
 var $_0_i_i1_i_i;
 var $151=($_0_i_i1_i_i|0)==-1;
 if($151){label=46;break;}else{label=48;break;}
 case 46: 
 HEAP32[(($35)>>2)]=0;
 label=47;break;
 case 47: 
 if($134){label=49;break;}else{label=50;break;}
 case 48: 
 if($134){label=50;break;}else{label=49;break;}
 case 49: 
 var $154=HEAP32[(($__err)>>2)];
 var $155=$154|2;
 HEAP32[(($__err)>>2)]=$155;
 label=50;break;
 case 50: 
 var $156=HEAP32[(($115)>>2)];
 var $157=(($agg_result)|0);
 HEAP32[(($157)>>2)]=$156;
 var $158=HEAP32[(($8)>>2)];
 var $159=(($158)|0);
 var $160=__ZNSt3__114__shared_count16__release_sharedEv($159);
 var $161=HEAP32[(($4)>>2)];
 HEAP32[(($4)>>2)]=0;
 var $162=($161|0)==0;
 if($162){label=53;break;}else{label=51;break;}
 case 51: 
 var $164=HEAP32[(($5)>>2)];
 var $165=$161;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$164]($165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $167$0 = ___cxa_find_matching_catch(-1, -1,0); var $167$1 = tempRet0;
 var $168=$167$0;
 ___clang_call_terminate($168);
 throw "Reached an unreachable!";
 case 53: 
 var $$etemp$5$0=400;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
 case 54: 
 var $_01;
 var $_0;
 var $169=HEAP32[(($8)>>2)];
 var $170=(($169)|0);
 var $171=__ZNSt3__114__shared_count16__release_sharedEv($170);
 var $_pre=HEAP32[(($4)>>2)];
 HEAP32[(($4)>>2)]=0;
 var $172=($_pre|0)==0;
 if($172){var $_1215=$_01;var $_117=$_0;label=58;break;}else{label=55;break;}
 case 55: 
 var $_pre19=HEAP32[(($5)>>2)];
 var $175=$_pre;var $_1214=$_01;var $_116=$_0;var $174=$_pre19;label=56;break;
 case 56: 
 var $174;
 var $_116;
 var $_1214;
 var $175;
 var $176=$175;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1215=$_1214;var $_117=$_116;label=58;break; } else { label=57;break; }
 case 57: 
 var $178$0 = ___cxa_find_matching_catch(-1, -1,0); var $178$1 = tempRet0;
 var $179=$178$0;
 ___clang_call_terminate($179);
 throw "Reached an unreachable!";
 case 58: 
 var $_117;
 var $_1215;
 var $180$0=$_117;
 var $180$1=0;
 var $181$0=$180$0;
 var $181$1=$_1215;
 ___resumeException($181$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+416)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__gbuf=(sp)+(8);
 var $__pat=(sp)+(408);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($1)>>2)]=$__we;
 var $2=$__gbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $3=(($__gbuf)|0);
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i9=$__sym;
 HEAP32[(($this2_i_i_i9)>>2)]=0; HEAP32[((($this2_i_i_i9)+(4))>>2)]=0; HEAP32[((($this2_i_i_i9)+(8))>>2)]=0;
 var $this2_i_i_i10=$__psn;
 HEAP32[(($this2_i_i_i10)>>2)]=0; HEAP32[((($this2_i_i_i10)+(4))>>2)]=0; HEAP32[((($this2_i_i_i10)+(8))>>2)]=0;
 var $this2_i_i_i12=$__nsn;
 HEAP32[(($this2_i_i_i12)>>2)]=0; HEAP32[((($this2_i_i_i12)+(4))>>2)]=0; HEAP32[((($this2_i_i_i12)+(8))>>2)]=0;
 var $this2_i_i_i15=$__spaces;
 HEAP32[(($this2_i_i_i15)>>2)]=0; HEAP32[((($this2_i_i_i15)+(4))>>2)]=0; HEAP32[((($this2_i_i_i15)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=26;break; }
 case 2: 
 var $5=(($__gbuf+400)|0);
 var $6=(($__wb)|0);
 var $7=HEAP32[(($6)>>2)];
 HEAP32[(($__wn)>>2)]=$7;
 var $8=(($__b)|0);
 var $9=(($__e)|0);
 var $10=$__pat;
 var $11=$__ct;
 var $12=(($__nsn+4)|0);
 var $13=(($__nsn+8)|0);
 var $14=(($__psn+4)|0);
 var $15=(($__psn+8)|0);
 var $16=$__flags&512;
 var $17=($16|0)!=0;
 var $18=(($__sym+4)|0);
 var $19=(($__sym+8)|0);
 var $20=(($__spaces+4)|0);
 var $21=(($__spaces+8)|0);
 var $22=(($10+3)|0);
 var $23=(($__grp+4)|0);
 var $free214336=450;var $26=$3;var $25=$3;var $24=$5;var $__p_0341=0;var $__trailing_sign_0343=0;label=3;break;
 case 3: 
 var $__trailing_sign_0343;
 var $__p_0341;
 var $24;
 var $25;
 var $26;
 var $free214336;
 var $27=HEAP32[(($8)>>2)];
 var $28=($27|0)==0;
 if($28){var $45=1;label=10;break;}else{label=4;break;}
 case 4: 
 var $30=(($27+12)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($27+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($31|0)==($33|0);
 if($34){label=5;break;}else{label=6;break;}
 case 5: 
 var $36=$27;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+36)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]($27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i18=$40;label=7;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 6: 
 var $42=HEAP32[(($31)>>2)];
 var $_0_i_i_i_i18=$42;label=7;break;
 case 7: 
 var $_0_i_i_i_i18;
 var $43=($_0_i_i_i_i18|0)==-1;
 if($43){label=9;break;}else{label=8;break;}
 case 8: 
 var $_pre_i_i_i20=HEAP32[(($8)>>2)];
 var $phitmp_i_i_i21=($_pre_i_i_i20|0)==0;
 var $45=$phitmp_i_i_i21;label=10;break;
 case 9: 
 HEAP32[(($8)>>2)]=0;
 var $45=1;label=10;break;
 case 10: 
 var $45;
 var $46=HEAP32[(($9)>>2)];
 var $47=($46|0)==0;
 if($47){label=16;break;}else{label=11;break;}
 case 11: 
 var $49=(($46+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($46+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=12;break;}else{label=13;break;}
 case 12: 
 var $55=$46;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+36)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i24=$59;label=14;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 13: 
 var $61=HEAP32[(($50)>>2)];
 var $_0_i_i1_i_i24=$61;label=14;break;
 case 14: 
 var $_0_i_i1_i_i24;
 var $62=($_0_i_i1_i_i24|0)==-1;
 if($62){label=15;break;}else{label=17;break;}
 case 15: 
 HEAP32[(($9)>>2)]=0;
 label=16;break;
 case 16: 
 if($45){var $free214_lcssa=$free214336;var $_lcssa285=$26;var $_lcssa300=$25;var $__trailing_sign_0_lcssa=$__trailing_sign_0343;label=302;break;}else{var $66=0;label=18;break;}
 case 17: 
 if($45){var $66=$46;label=18;break;}else{var $free214_lcssa=$free214336;var $_lcssa285=$26;var $_lcssa300=$25;var $__trailing_sign_0_lcssa=$__trailing_sign_0343;label=302;break;}
 case 18: 
 var $66;
 var $67=(($10+$__p_0341)|0);
 var $68=HEAP8[($67)];
 var $69=(($68<<24)>>24);
 switch(($69|0)){case 2:{ label=135;break;}case 4:{ var $__ng_0=0;var $602=$24;var $601=$25;var $600=$26;var $free213=$free214336;label=194;break;}case 1:{ label=31;break;}case 0:{ label=42;break;}case 3:{ label=67;break;}default:{var $__trailing_sign_1=$__trailing_sign_0343;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;}}break;
 case 19: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $70=$_lcssa285;var $free218=$free214_lcssa;label=27;break;
 case 20: 
 var $free218_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit238$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit238$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit238$1;var $lpad_phi$0=$lpad_loopexit238$0;var $70=$_ph_ph;var $free218=$free218_ph_ph;label=27;break;
 case 21: 
 var $lpad_loopexit252$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit252$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit252$1;var $lpad_phi$0=$lpad_loopexit252$0;var $70=$758;var $free218=$free216;label=27;break;
 case 22: 
 var $lpad_loopexit254$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit254$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit254$1;var $lpad_phi$0=$lpad_loopexit254$0;var $70=$26;var $free218=$free214336;label=27;break;
 case 23: 
 var $lpad_loopexit259$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit259$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit259$1;var $lpad_phi$0=$lpad_loopexit259$0;var $70=$26;var $free218=$free214336;label=27;break;
 case 24: 
 var $lpad_loopexit264$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit264$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit264$1;var $lpad_phi$0=$lpad_loopexit264$0;var $70=$26;var $free218=$free214336;label=27;break;
 case 25: 
 var $free218_ph_ph236_ph_ph_ph_ph_ph;
 var $_ph_ph237_ph_ph_ph_ph_ph;
 var $lpad_loopexit267$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit267$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit267$1;var $lpad_phi$0=$lpad_loopexit267$0;var $70=$_ph_ph237_ph_ph_ph_ph_ph;var $free218=$free218_ph_ph236_ph_ph_ph_ph_ph;label=27;break;
 case 26: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $70=$3;var $free218=450;label=27;break;
 case 27: 
 var $free218;
 var $70;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $71=($70|0)==0;
 if($71){label=30;break;}else{label=28;break;}
 case 28: 
 var $73=$70;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free218]($73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1,0); var $75$1 = tempRet0;
 var $76=$75$0;
 ___clang_call_terminate($76);
 throw "Reached an unreachable!";
 case 30: 
 ___resumeException($lpad_phi$0)
 case 31: 
 var $cond=($__p_0341|0)==3;
 if($cond){var $free214_lcssa=$free214336;var $_lcssa285=$26;var $_lcssa300=$25;var $__trailing_sign_0_lcssa=$__trailing_sign_0343;label=302;break;}else{label=32;break;}
 case 32: 
 var $79=HEAP32[(($8)>>2)];
 var $80=(($79+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($79+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=33;break;}else{label=34;break;}
 case 33: 
 var $86=$79;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i33=$90;label=35;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 34: 
 var $92=HEAP32[(($81)>>2)];
 var $_0_i_i33=$92;label=35;break;
 case 35: 
 var $_0_i_i33;
 var $93=HEAP32[(($11)>>2)];
 var $94=(($93+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($__ct,8192,$_0_i_i33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 36: 
 if($96){label=37;break;}else{label=41;break;}
 case 37: 
 var $98=HEAP32[(($8)>>2)];
 var $99=(($98+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($98+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=39;break;}
 case 38: 
 var $105=$98;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+40)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($98) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i37=$109;label=40;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 39: 
 var $111=(($100+4)|0);
 HEAP32[(($99)>>2)]=$111;
 var $112=HEAP32[(($100)>>2)];
 var $_0_i_i37=$112;label=40;break;
 case 40: 
 var $_0_i_i37;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_0_i_i37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 41: 
 var $114=HEAP32[(($__err)>>2)];
 var $115=$114|4;
 HEAP32[(($__err)>>2)]=$115;
 var $_0=0;var $1051=$26;var $free220=$free214336;label=336;break;
 case 42: 
 var $117=($__p_0341|0)==3;
 if($117){var $free214_lcssa=$free214336;var $_lcssa285=$26;var $_lcssa300=$25;var $__trailing_sign_0_lcssa=$__trailing_sign_0343;label=302;break;}else{var $118=$66;var $_pre_i3_i_i47=$66;label=43;break;}
 case 43: 
 var $_pre_i3_i_i47;
 var $118;
 var $119=HEAP32[(($8)>>2)];
 var $120=($119|0)==0;
 if($120){var $137=1;label=50;break;}else{label=44;break;}
 case 44: 
 var $122=(($119+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($119+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($123|0)==($125|0);
 if($126){label=45;break;}else{label=46;break;}
 case 45: 
 var $128=$119;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+36)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i39=$132;label=47;break; } else { label=24;break; }
 case 46: 
 var $134=HEAP32[(($123)>>2)];
 var $_0_i_i_i_i39=$134;label=47;break;
 case 47: 
 var $_0_i_i_i_i39;
 var $135=($_0_i_i_i_i39|0)==-1;
 if($135){label=49;break;}else{label=48;break;}
 case 48: 
 var $_pre_i_i_i41=HEAP32[(($8)>>2)];
 var $phitmp_i_i_i42=($_pre_i_i_i41|0)==0;
 var $137=$phitmp_i_i_i42;label=50;break;
 case 49: 
 HEAP32[(($8)>>2)]=0;
 var $137=1;label=50;break;
 case 50: 
 var $137;
 var $138=($118|0)==0;
 if($138){var $_pre_i3_i_i47396=$_pre_i3_i_i47;label=56;break;}else{label=51;break;}
 case 51: 
 var $140=(($118+12)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($118+16)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($141|0)==($143|0);
 if($144){label=52;break;}else{label=53;break;}
 case 52: 
 var $146=$118;
 var $147=HEAP32[(($146)>>2)];
 var $148=(($147+36)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$149]($118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i45=$150;label=54;break; } else { label=24;break; }
 case 53: 
 var $152=HEAP32[(($141)>>2)];
 var $_0_i_i1_i_i45=$152;label=54;break;
 case 54: 
 var $_0_i_i1_i_i45;
 var $153=($_0_i_i1_i_i45|0)==-1;
 if($153){label=55;break;}else{label=57;break;}
 case 55: 
 HEAP32[(($9)>>2)]=0;
 var $_pre_i3_i_i47396=0;label=56;break;
 case 56: 
 var $_pre_i3_i_i47396;
 if($137){var $__trailing_sign_1=$__trailing_sign_0343;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;}else{var $156=0;var $_pre_i3_i_i47398=$_pre_i3_i_i47396;label=58;break;}
 case 57: 
 var $phitmp_i4_i_i48=($_pre_i3_i_i47|0)==0;
 var $tmp_i_i50=$137^$phitmp_i4_i_i48;
 if($tmp_i_i50){var $156=$_pre_i3_i_i47;var $_pre_i3_i_i47398=$_pre_i3_i_i47;label=58;break;}else{var $__trailing_sign_1=$__trailing_sign_0343;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;}
 case 58: 
 var $_pre_i3_i_i47398;
 var $156;
 var $157=HEAP32[(($8)>>2)];
 var $158=(($157+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($157+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=59;break;}else{label=60;break;}
 case 59: 
 var $164=$157;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($157) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i54=$168;label=61;break; } else { label=24;break; }
 case 60: 
 var $170=HEAP32[(($159)>>2)];
 var $_0_i_i54=$170;label=61;break;
 case 61: 
 var $_0_i_i54;
 var $171=HEAP32[(($11)>>2)];
 var $172=(($171+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($__ct,8192,$_0_i_i54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=24;break; }
 case 62: 
 if($174){label=63;break;}else{var $__trailing_sign_1=$__trailing_sign_0343;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;}
 case 63: 
 var $176=HEAP32[(($8)>>2)];
 var $177=(($176+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($176+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=64;break;}else{label=65;break;}
 case 64: 
 var $183=$176;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+40)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i59=$187;label=66;break; } else { label=24;break; }
 case 65: 
 var $189=(($178+4)|0);
 HEAP32[(($177)>>2)]=$189;
 var $190=HEAP32[(($178)>>2)];
 var $_0_i_i59=$190;label=66;break;
 case 66: 
 var $_0_i_i59;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_0_i_i59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $118=$156;var $_pre_i3_i_i47=$_pre_i3_i_i47398;label=43;break; } else { label=24;break; }
 case 67: 
 var $192=HEAP8[($this2_i_i_i10)];
 var $193=$192&1;
 var $194=(($193<<24)>>24)==0;
 if($194){label=69;break;}else{label=68;break;}
 case 68: 
 var $196=HEAP32[(($14)>>2)];
 var $200=$196;label=70;break;
 case 69: 
 var $198=($192&255);
 var $199=$198>>>1;
 var $200=$199;label=70;break;
 case 70: 
 var $200;
 var $201=HEAP8[($this2_i_i_i12)];
 var $202=$201&1;
 var $203=(($202<<24)>>24)==0;
 if($203){label=72;break;}else{label=71;break;}
 case 71: 
 var $205=HEAP32[(($12)>>2)];
 var $209=$205;label=73;break;
 case 72: 
 var $207=($201&255);
 var $208=$207>>>1;
 var $209=$208;label=73;break;
 case 73: 
 var $209;
 var $210=(((-$209))|0);
 var $211=($200|0)==($210|0);
 if($211){var $__trailing_sign_1=$__trailing_sign_0343;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;}else{label=74;break;}
 case 74: 
 if($194){label=76;break;}else{label=75;break;}
 case 75: 
 var $214=HEAP32[(($14)>>2)];
 var $218=$214;label=77;break;
 case 76: 
 var $216=($192&255);
 var $217=$216>>>1;
 var $218=$217;label=77;break;
 case 77: 
 var $218;
 var $219=($218|0)==0;
 if($219){label=82;break;}else{label=78;break;}
 case 78: 
 if($203){label=80;break;}else{label=79;break;}
 case 79: 
 var $222=HEAP32[(($12)>>2)];
 var $226=$222;label=81;break;
 case 80: 
 var $224=($201&255);
 var $225=$224>>>1;
 var $226=$225;label=81;break;
 case 81: 
 var $226;
 var $227=($226|0)==0;
 if($227){label=82;break;}else{label=111;break;}
 case 82: 
 if($194){label=84;break;}else{label=83;break;}
 case 83: 
 var $230=HEAP32[(($14)>>2)];
 var $234=$230;label=85;break;
 case 84: 
 var $232=($192&255);
 var $233=$232>>>1;
 var $234=$233;label=85;break;
 case 85: 
 var $234;
 var $235=($234|0)==0;
 var $236=HEAP32[(($8)>>2)];
 var $237=(($236+12)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($236+16)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=($238|0)==($240|0);
 if($235){label=99;break;}else{label=86;break;}
 case 86: 
 if($241){label=87;break;}else{label=89;break;}
 case 87: 
 var $244=$236;
 var $245=HEAP32[(($244)>>2)];
 var $246=(($245+36)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$247]($236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 88: 
 var $_pre411=HEAP8[($this2_i_i_i10)];
 var $_0_i_i75=$248;var $251=$_pre411;label=90;break;
 case 89: 
 var $250=HEAP32[(($238)>>2)];
 var $_0_i_i75=$250;var $251=$192;label=90;break;
 case 90: 
 var $251;
 var $_0_i_i75;
 var $252=$251&1;
 var $253=(($252<<24)>>24)==0;
 var $254=HEAP32[(($15)>>2)];
 var $_=($253?$14:$254);
 var $255=HEAP32[(($_)>>2)];
 var $256=($_0_i_i75|0)==($255|0);
 if($256){label=91;break;}else{label=98;break;}
 case 91: 
 var $258=HEAP32[(($8)>>2)];
 var $259=(($258+12)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(($258+16)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=($260|0)==($262|0);
 if($263){label=92;break;}else{label=93;break;}
 case 92: 
 var $265=$258;
 var $266=HEAP32[(($265)>>2)];
 var $267=(($266+40)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$268]($258) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 93: 
 var $271=(($260+4)|0);
 HEAP32[(($259)>>2)]=$271;
 label=94;break;
 case 94: 
 var $272=HEAP8[($this2_i_i_i10)];
 var $273=$272&1;
 var $274=(($273<<24)>>24)==0;
 if($274){label=96;break;}else{label=95;break;}
 case 95: 
 var $276=HEAP32[(($14)>>2)];
 var $280=$276;label=97;break;
 case 96: 
 var $278=($272&255);
 var $279=$278>>>1;
 var $280=$279;label=97;break;
 case 97: 
 var $280;
 var $281=($280>>>0)>1;
 var $__psn___trailing_sign_0=($281?$__psn:$__trailing_sign_0343);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;
 case 98: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_0343;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;
 case 99: 
 if($241){label=100;break;}else{label=102;break;}
 case 100: 
 var $285=$236;
 var $286=HEAP32[(($285)>>2)];
 var $287=(($286+36)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$288]($236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=101;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 101: 
 var $_pre410=HEAP8[($this2_i_i_i12)];
 var $_0_i_i96=$289;var $292=$_pre410;label=103;break;
 case 102: 
 var $291=HEAP32[(($238)>>2)];
 var $_0_i_i96=$291;var $292=$201;label=103;break;
 case 103: 
 var $292;
 var $_0_i_i96;
 var $293=$292&1;
 var $294=(($293<<24)>>24)==0;
 var $295=HEAP32[(($13)>>2)];
 var $_422=($294?$12:$295);
 var $296=HEAP32[(($_422)>>2)];
 var $297=($_0_i_i96|0)==($296|0);
 if($297){label=104;break;}else{var $__trailing_sign_1=$__trailing_sign_0343;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;}
 case 104: 
 var $299=HEAP32[(($8)>>2)];
 var $300=(($299+12)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($299+16)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($301|0)==($303|0);
 if($304){label=105;break;}else{label=106;break;}
 case 105: 
 var $306=$299;
 var $307=HEAP32[(($306)>>2)];
 var $308=(($307+40)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$309]($299) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 106: 
 var $312=(($301+4)|0);
 HEAP32[(($300)>>2)]=$312;
 label=107;break;
 case 107: 
 HEAP8[($__neg)]=1;
 var $313=HEAP8[($this2_i_i_i12)];
 var $314=$313&1;
 var $315=(($314<<24)>>24)==0;
 if($315){label=109;break;}else{label=108;break;}
 case 108: 
 var $317=HEAP32[(($12)>>2)];
 var $321=$317;label=110;break;
 case 109: 
 var $319=($313&255);
 var $320=$319>>>1;
 var $321=$320;label=110;break;
 case 110: 
 var $321;
 var $322=($321>>>0)>1;
 var $__nsn___trailing_sign_0=($322?$__nsn:$__trailing_sign_0343);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;
 case 111: 
 var $324=HEAP32[(($8)>>2)];
 var $325=(($324+12)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=(($324+16)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=($326|0)==($328|0);
 if($329){label=112;break;}else{label=114;break;}
 case 112: 
 var $331=$324;
 var $332=HEAP32[(($331)>>2)];
 var $333=(($332+36)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$334]($324) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 113: 
 var $_pre412=HEAP8[($this2_i_i_i10)];
 var $_0_i_i108=$335;var $338=$_pre412;label=115;break;
 case 114: 
 var $337=HEAP32[(($326)>>2)];
 var $_0_i_i108=$337;var $338=$192;label=115;break;
 case 115: 
 var $338;
 var $_0_i_i108;
 var $339=$338&1;
 var $340=(($339<<24)>>24)==0;
 var $341=HEAP32[(($15)>>2)];
 var $_423=($340?$14:$341);
 var $342=HEAP32[(($_423)>>2)];
 var $343=($_0_i_i108|0)==($342|0);
 var $344=HEAP32[(($8)>>2)];
 var $345=(($344+12)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(($344+16)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=($346|0)==($348|0);
 if($343){label=116;break;}else{label=123;break;}
 case 116: 
 if($349){label=117;break;}else{label=118;break;}
 case 117: 
 var $352=$344;
 var $353=HEAP32[(($352)>>2)];
 var $354=(($353+40)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$355]($344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 118: 
 var $358=(($346+4)|0);
 HEAP32[(($345)>>2)]=$358;
 label=119;break;
 case 119: 
 var $359=HEAP8[($this2_i_i_i10)];
 var $360=$359&1;
 var $361=(($360<<24)>>24)==0;
 if($361){label=121;break;}else{label=120;break;}
 case 120: 
 var $363=HEAP32[(($14)>>2)];
 var $367=$363;label=122;break;
 case 121: 
 var $365=($359&255);
 var $366=$365>>>1;
 var $367=$366;label=122;break;
 case 122: 
 var $367;
 var $368=($367>>>0)>1;
 var $__psn___trailing_sign_05=($368?$__psn:$__trailing_sign_0343);
 var $__trailing_sign_1=$__psn___trailing_sign_05;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;
 case 123: 
 if($349){label=124;break;}else{label=125;break;}
 case 124: 
 var $371=$344;
 var $372=HEAP32[(($371)>>2)];
 var $373=(($372+36)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$374]($344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i130=$375;label=126;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 125: 
 var $377=HEAP32[(($346)>>2)];
 var $_0_i_i130=$377;label=126;break;
 case 126: 
 var $_0_i_i130;
 var $378=HEAP8[($this2_i_i_i12)];
 var $379=$378&1;
 var $380=(($379<<24)>>24)==0;
 var $381=HEAP32[(($13)>>2)];
 var $_424=($380?$12:$381);
 var $382=HEAP32[(($_424)>>2)];
 var $383=($_0_i_i130|0)==($382|0);
 if($383){label=127;break;}else{label=134;break;}
 case 127: 
 var $385=HEAP32[(($8)>>2)];
 var $386=(($385+12)|0);
 var $387=HEAP32[(($386)>>2)];
 var $388=(($385+16)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=($387|0)==($389|0);
 if($390){label=128;break;}else{label=129;break;}
 case 128: 
 var $392=$385;
 var $393=HEAP32[(($392)>>2)];
 var $394=(($393+40)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$395]($385) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=130;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$26;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free214336;label=25;break; }
 case 129: 
 var $398=(($387+4)|0);
 HEAP32[(($386)>>2)]=$398;
 label=130;break;
 case 130: 
 HEAP8[($__neg)]=1;
 var $399=HEAP8[($this2_i_i_i12)];
 var $400=$399&1;
 var $401=(($400<<24)>>24)==0;
 if($401){label=132;break;}else{label=131;break;}
 case 131: 
 var $403=HEAP32[(($12)>>2)];
 var $407=$403;label=133;break;
 case 132: 
 var $405=($399&255);
 var $406=$405>>>1;
 var $407=$406;label=133;break;
 case 133: 
 var $407;
 var $408=($407>>>0)>1;
 var $__nsn___trailing_sign_06=($408?$__nsn:$__trailing_sign_0343);
 var $__trailing_sign_1=$__nsn___trailing_sign_06;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;
 case 134: 
 var $410=HEAP32[(($__err)>>2)];
 var $411=$410|4;
 HEAP32[(($__err)>>2)]=$411;
 var $_0=0;var $1051=$26;var $free220=$free214336;label=336;break;
 case 135: 
 var $413=($__trailing_sign_0343|0)!=0;
 var $414=($__p_0341>>>0)<2;
 var $or_cond=$413|$414;
 if($or_cond){label=139;break;}else{label=136;break;}
 case 136: 
 var $416=($__p_0341|0)==2;
 if($416){label=137;break;}else{var $421=0;label=138;break;}
 case 137: 
 var $418=HEAP8[($22)];
 var $419=(($418<<24)>>24)!=0;
 var $421=$419;label=138;break;
 case 138: 
 var $421;
 var $brmerge=$17|$421;
 if($brmerge){label=139;break;}else{var $__trailing_sign_1=0;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;}
 case 139: 
 var $422=HEAP8[($this2_i_i_i9)];
 var $423=$422&1;
 var $424=(($423<<24)>>24)==0;
 var $425=HEAP32[(($19)>>2)];
 var $_425=($424?$18:$425);
 var $426=($__p_0341|0)==0;
 if($426){var $499=$_425;var $498=$422;var $497=$66;var $_pre_i3_i_i191=$66;label=161;break;}else{label=140;break;}
 case 140: 
 var $428=((($__p_0341)-(1))|0);
 var $429=(($10+$428)|0);
 var $430=HEAP8[($429)];
 var $switch=($430&255)<2;
 if($switch){var $432=$_425;var $431=$422;label=141;break;}else{var $499=$_425;var $498=$422;var $497=$66;var $_pre_i3_i_i191=$66;label=161;break;}
 case 141: 
 var $431;
 var $432;
 var $433=$431&1;
 var $434=(($433<<24)>>24)==0;
 if($434){label=143;break;}else{label=142;break;}
 case 142: 
 var $436=HEAP32[(($19)>>2)];
 var $437=HEAP32[(($18)>>2)];
 var $442=$437;var $441=$436;label=144;break;
 case 143: 
 var $439=($431&255);
 var $440=$439>>>1;
 var $442=$440;var $441=$18;label=144;break;
 case 144: 
 var $441;
 var $442;
 var $443=(($441+($442<<2))|0);
 var $444=($432|0)==($443|0);
 if($444){var $452=$431;label=149;break;}else{label=145;break;}
 case 145: 
 var $446=HEAP32[(($432)>>2)];
 var $447=HEAP32[(($11)>>2)];
 var $448=(($447+12)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$449]($__ct,8192,$446) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=146;break; } else { label=22;break; }
 case 146: 
 if($450){label=147;break;}else{label=148;break;}
 case 147: 
 var $451=(($432+4)|0);
 var $_pre413=HEAP8[($this2_i_i_i9)];
 var $432=$451;var $431=$_pre413;label=141;break;
 case 148: 
 var $_pre414=HEAP8[($this2_i_i_i9)];
 var $452=$_pre414;label=149;break;
 case 149: 
 var $452;
 var $453=$452&1;
 var $454=(($453<<24)>>24)==0;
 var $455=HEAP32[(($19)>>2)];
 var $_426=($454?$18:$455);
 var $456=$432;
 var $457=$_426;
 var $458=((($456)-($457))|0);
 var $459=$458>>2;
 var $460=HEAP8[($this2_i_i_i15)];
 var $461=$460&1;
 var $462=(($461<<24)>>24)==0;
 if($462){label=151;break;}else{label=150;break;}
 case 150: 
 var $464=HEAP32[(($20)>>2)];
 var $468=$464;label=152;break;
 case 151: 
 var $466=($460&255);
 var $467=$466>>>1;
 var $468=$467;label=152;break;
 case 152: 
 var $468;
 var $469=($459>>>0)>($468>>>0);
 if($469){label=160;break;}else{label=153;break;}
 case 153: 
 if($462){label=155;break;}else{label=154;break;}
 case 154: 
 var $472=HEAP32[(($21)>>2)];
 var $473=HEAP32[(($20)>>2)];
 var $_sum=((($473)-($459))|0);
 var $474=(($472+($_sum<<2))|0);
 var $483=$473;var $482=$472;var $481=$474;label=156;break;
 case 155: 
 var $476=($460&255);
 var $477=$476>>>1;
 var $_sum416=((($477)-($459))|0);
 var $478=(($20+($_sum416<<2))|0);
 var $479=($460&255);
 var $480=$479>>>1;
 var $483=$480;var $482=$20;var $481=$478;label=156;break;
 case 156: 
 var $481;
 var $482;
 var $483;
 var $484=(($482+($483<<2))|0);
 var $485=HEAP32[(($19)>>2)];
 var $_427=($454?$18:$485);
 var $486=($481|0)==($484|0);
 if($486){var $499=$432;var $498=$452;var $497=$66;var $_pre_i3_i_i191=$66;label=161;break;}else{var $488=$481;var $487=$_427;label=157;break;}
 case 157: 
 var $487;
 var $488;
 var $489=HEAP32[(($488)>>2)];
 var $490=HEAP32[(($487)>>2)];
 var $491=($489|0)==($490|0);
 if($491){label=158;break;}else{label=160;break;}
 case 158: 
 var $493=(($488+4)|0);
 var $494=($493|0)==($484|0);
 if($494){var $499=$432;var $498=$452;var $497=$66;var $_pre_i3_i_i191=$66;label=161;break;}else{label=159;break;}
 case 159: 
 var $495=(($487+4)|0);
 var $488=$493;var $487=$495;label=157;break;
 case 160: 
 var $496=HEAP32[(($19)>>2)];
 var $_428=($454?$18:$496);
 var $499=$_428;var $498=$452;var $497=$66;var $_pre_i3_i_i191=$66;label=161;break;
 case 161: 
 var $_pre_i3_i_i191;
 var $497;
 var $498;
 var $499;
 var $500=$498&1;
 var $501=(($500<<24)>>24)==0;
 if($501){label=163;break;}else{label=162;break;}
 case 162: 
 var $503=HEAP32[(($19)>>2)];
 var $504=HEAP32[(($18)>>2)];
 var $509=$504;var $508=$503;label=164;break;
 case 163: 
 var $506=($498&255);
 var $507=$506>>>1;
 var $509=$507;var $508=$18;label=164;break;
 case 164: 
 var $508;
 var $509;
 var $510=(($508+($509<<2))|0);
 var $511=($499|0)==($510|0);
 if($511){label=188;break;}else{label=165;break;}
 case 165: 
 var $513=HEAP32[(($8)>>2)];
 var $514=($513|0)==0;
 if($514){var $531=1;label=172;break;}else{label=166;break;}
 case 166: 
 var $516=(($513+12)|0);
 var $517=HEAP32[(($516)>>2)];
 var $518=(($513+16)|0);
 var $519=HEAP32[(($518)>>2)];
 var $520=($517|0)==($519|0);
 if($520){label=167;break;}else{label=168;break;}
 case 167: 
 var $522=$513;
 var $523=HEAP32[(($522)>>2)];
 var $524=(($523+36)|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$525]($513) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i183=$526;label=169;break; } else { label=23;break; }
 case 168: 
 var $528=HEAP32[(($517)>>2)];
 var $_0_i_i_i_i183=$528;label=169;break;
 case 169: 
 var $_0_i_i_i_i183;
 var $529=($_0_i_i_i_i183|0)==-1;
 if($529){label=171;break;}else{label=170;break;}
 case 170: 
 var $_pre_i_i_i185=HEAP32[(($8)>>2)];
 var $phitmp_i_i_i186=($_pre_i_i_i185|0)==0;
 var $531=$phitmp_i_i_i186;label=172;break;
 case 171: 
 HEAP32[(($8)>>2)]=0;
 var $531=1;label=172;break;
 case 172: 
 var $531;
 var $532=($497|0)==0;
 if($532){var $_pre_i3_i_i191400=$_pre_i3_i_i191;label=178;break;}else{label=173;break;}
 case 173: 
 var $534=(($497+12)|0);
 var $535=HEAP32[(($534)>>2)];
 var $536=(($497+16)|0);
 var $537=HEAP32[(($536)>>2)];
 var $538=($535|0)==($537|0);
 if($538){label=174;break;}else{label=175;break;}
 case 174: 
 var $540=$497;
 var $541=HEAP32[(($540)>>2)];
 var $542=(($541+36)|0);
 var $543=HEAP32[(($542)>>2)];
 var $544=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$543]($497) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i189=$544;label=176;break; } else { label=23;break; }
 case 175: 
 var $546=HEAP32[(($535)>>2)];
 var $_0_i_i1_i_i189=$546;label=176;break;
 case 176: 
 var $_0_i_i1_i_i189;
 var $547=($_0_i_i1_i_i189|0)==-1;
 if($547){label=177;break;}else{label=179;break;}
 case 177: 
 HEAP32[(($9)>>2)]=0;
 var $_pre_i3_i_i191400=0;label=178;break;
 case 178: 
 var $_pre_i3_i_i191400;
 if($531){label=188;break;}else{var $550=0;var $_pre_i3_i_i191399=$_pre_i3_i_i191400;label=180;break;}
 case 179: 
 var $phitmp_i4_i_i192=($_pre_i3_i_i191|0)==0;
 var $tmp_i_i194=$531^$phitmp_i4_i_i192;
 if($tmp_i_i194){var $550=$_pre_i3_i_i191;var $_pre_i3_i_i191399=$_pre_i3_i_i191;label=180;break;}else{label=188;break;}
 case 180: 
 var $_pre_i3_i_i191399;
 var $550;
 var $551=HEAP32[(($8)>>2)];
 var $552=(($551+12)|0);
 var $553=HEAP32[(($552)>>2)];
 var $554=(($551+16)|0);
 var $555=HEAP32[(($554)>>2)];
 var $556=($553|0)==($555|0);
 if($556){label=181;break;}else{label=182;break;}
 case 181: 
 var $558=$551;
 var $559=HEAP32[(($558)>>2)];
 var $560=(($559+36)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$561]($551) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i179=$562;label=183;break; } else { label=23;break; }
 case 182: 
 var $564=HEAP32[(($553)>>2)];
 var $_0_i_i179=$564;label=183;break;
 case 183: 
 var $_0_i_i179;
 var $565=HEAP32[(($499)>>2)];
 var $566=($_0_i_i179|0)==($565|0);
 if($566){label=184;break;}else{label=188;break;}
 case 184: 
 var $568=HEAP32[(($8)>>2)];
 var $569=(($568+12)|0);
 var $570=HEAP32[(($569)>>2)];
 var $571=(($568+16)|0);
 var $572=HEAP32[(($571)>>2)];
 var $573=($570|0)==($572|0);
 if($573){label=185;break;}else{label=186;break;}
 case 185: 
 var $575=$568;
 var $576=HEAP32[(($575)>>2)];
 var $577=(($576+40)|0);
 var $578=HEAP32[(($577)>>2)];
 var $579=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$578]($568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=187;break; } else { label=23;break; }
 case 186: 
 var $581=(($570+4)|0);
 HEAP32[(($569)>>2)]=$581;
 label=187;break;
 case 187: 
 var $582=(($499+4)|0);
 var $_pre=HEAP8[($this2_i_i_i9)];
 var $499=$582;var $498=$_pre;var $497=$550;var $_pre_i3_i_i191=$_pre_i3_i_i191399;label=161;break;
 case 188: 
 if($17){label=189;break;}else{var $__trailing_sign_1=$__trailing_sign_0343;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;}
 case 189: 
 var $584=HEAP8[($this2_i_i_i9)];
 var $585=$584&1;
 var $586=(($585<<24)>>24)==0;
 if($586){label=191;break;}else{label=190;break;}
 case 190: 
 var $588=HEAP32[(($19)>>2)];
 var $589=HEAP32[(($18)>>2)];
 var $594=$589;var $593=$588;label=192;break;
 case 191: 
 var $591=($584&255);
 var $592=$591>>>1;
 var $594=$592;var $593=$18;label=192;break;
 case 192: 
 var $593;
 var $594;
 var $595=(($593+($594<<2))|0);
 var $596=($499|0)==($595|0);
 if($596){var $__trailing_sign_1=$__trailing_sign_0343;var $945=$24;var $944=$25;var $943=$26;var $free215=$free214336;label=301;break;}else{label=193;break;}
 case 193: 
 var $598=HEAP32[(($__err)>>2)];
 var $599=$598|4;
 HEAP32[(($__err)>>2)]=$599;
 var $_0=0;var $1051=$26;var $free220=$free214336;label=336;break;
 case 194: 
 var $free213;
 var $600;
 var $601;
 var $602;
 var $__ng_0;
 var $603=HEAP32[(($8)>>2)];
 var $604=($603|0)==0;
 if($604){var $621=1;label=201;break;}else{label=195;break;}
 case 195: 
 var $606=(($603+12)|0);
 var $607=HEAP32[(($606)>>2)];
 var $608=(($603+16)|0);
 var $609=HEAP32[(($608)>>2)];
 var $610=($607|0)==($609|0);
 if($610){label=196;break;}else{label=197;break;}
 case 196: 
 var $612=$603;
 var $613=HEAP32[(($612)>>2)];
 var $614=(($613+36)|0);
 var $615=HEAP32[(($614)>>2)];
 var $616=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$615]($603) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i158=$616;label=198;break; } else { var $_ph_ph=$600;var $free218_ph_ph=$free213;label=20;break; }
 case 197: 
 var $618=HEAP32[(($607)>>2)];
 var $_0_i_i_i_i158=$618;label=198;break;
 case 198: 
 var $_0_i_i_i_i158;
 var $619=($_0_i_i_i_i158|0)==-1;
 if($619){label=200;break;}else{label=199;break;}
 case 199: 
 var $_pre_i_i_i160=HEAP32[(($8)>>2)];
 var $phitmp_i_i_i161=($_pre_i_i_i160|0)==0;
 var $621=$phitmp_i_i_i161;label=201;break;
 case 200: 
 HEAP32[(($8)>>2)]=0;
 var $621=1;label=201;break;
 case 201: 
 var $621;
 var $622=HEAP32[(($9)>>2)];
 var $623=($622|0)==0;
 if($623){label=207;break;}else{label=202;break;}
 case 202: 
 var $625=(($622+12)|0);
 var $626=HEAP32[(($625)>>2)];
 var $627=(($622+16)|0);
 var $628=HEAP32[(($627)>>2)];
 var $629=($626|0)==($628|0);
 if($629){label=203;break;}else{label=204;break;}
 case 203: 
 var $631=$622;
 var $632=HEAP32[(($631)>>2)];
 var $633=(($632+36)|0);
 var $634=HEAP32[(($633)>>2)];
 var $635=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$634]($622) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i164=$635;label=205;break; } else { var $_ph_ph=$600;var $free218_ph_ph=$free213;label=20;break; }
 case 204: 
 var $637=HEAP32[(($626)>>2)];
 var $_0_i_i1_i_i164=$637;label=205;break;
 case 205: 
 var $_0_i_i1_i_i164;
 var $638=($_0_i_i1_i_i164|0)==-1;
 if($638){label=206;break;}else{label=208;break;}
 case 206: 
 HEAP32[(($9)>>2)]=0;
 label=207;break;
 case 207: 
 if($621){label=235;break;}else{label=209;break;}
 case 208: 
 if($621){label=209;break;}else{label=235;break;}
 case 209: 
 var $641=HEAP32[(($8)>>2)];
 var $642=(($641+12)|0);
 var $643=HEAP32[(($642)>>2)];
 var $644=(($641+16)|0);
 var $645=HEAP32[(($644)>>2)];
 var $646=($643|0)==($645|0);
 if($646){label=210;break;}else{label=211;break;}
 case 210: 
 var $648=$641;
 var $649=HEAP32[(($648)>>2)];
 var $650=(($649+36)|0);
 var $651=HEAP32[(($650)>>2)];
 var $652=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$651]($641) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i155=$652;label=212;break; } else { var $_ph_ph=$600;var $free218_ph_ph=$free213;label=20;break; }
 case 211: 
 var $654=HEAP32[(($643)>>2)];
 var $_0_i_i155=$654;label=212;break;
 case 212: 
 var $_0_i_i155;
 var $655=HEAP32[(($11)>>2)];
 var $656=(($655+12)|0);
 var $657=HEAP32[(($656)>>2)];
 var $658=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$657]($__ct,2048,$_0_i_i155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=213;break; } else { var $_ph_ph=$600;var $free218_ph_ph=$free213;label=20;break; }
 case 213: 
 if($658){label=214;break;}else{label=218;break;}
 case 214: 
 var $660=HEAP32[(($__wn)>>2)];
 var $661=HEAP32[(($1)>>2)];
 var $662=($660|0)==($661|0);
 if($662){label=215;break;}else{var $665=$660;label=217;break;}
 case 215: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=216;break; } else { var $_ph_ph=$600;var $free218_ph_ph=$free213;label=20;break; }
 case 216: 
 var $_pre415=HEAP32[(($__wn)>>2)];
 var $665=$_pre415;label=217;break;
 case 217: 
 var $665;
 var $666=(($665+4)|0);
 HEAP32[(($__wn)>>2)]=$666;
 HEAP32[(($665)>>2)]=$_0_i_i155;
 var $667=((($__ng_0)+(1))|0);
 var $__ng_1=$667;var $713=$602;var $712=$601;var $711=$600;var $free=$free213;label=232;break;
 case 218: 
 var $669=HEAP8[($this2_i_i_i)];
 var $670=$669&1;
 var $671=(($670<<24)>>24)==0;
 if($671){label=220;break;}else{label=219;break;}
 case 219: 
 var $673=HEAP32[(($23)>>2)];
 var $677=$673;label=221;break;
 case 220: 
 var $675=($669&255);
 var $676=$675>>>1;
 var $677=$676;label=221;break;
 case 221: 
 var $677;
 var $678=($677|0)==0;
 var $679=($__ng_0|0)==0;
 var $or_cond7=$678|$679;
 if($or_cond7){label=235;break;}else{label=222;break;}
 case 222: 
 var $681=HEAP32[(($__ts)>>2)];
 var $682=($_0_i_i155|0)==($681|0);
 if($682){label=223;break;}else{label=235;break;}
 case 223: 
 var $684=($601|0)==($602|0);
 if($684){label=224;break;}else{var $708=$602;var $707=$601;var $706=$600;var $free212=$free213;label=231;break;}
 case 224: 
 var $686=($free213|0)!=((450)|0);
 var $687=$601;
 var $688=$600;
 var $689=((($687)-($688))|0);
 var $690=($689>>>0)<2147483647;
 var $691=$689<<1;
 var $__i140=($690?$691:-1);
 var $692=$689>>2;
 if($686){label=225;break;}else{var $695=0;label=226;break;}
 case 225: 
 var $phitmp_i141=$600;
 var $695=$phitmp_i141;label=226;break;
 case 226: 
 var $695;
 var $696=_realloc($695,$__i140);
 var $697=$696;
 var $698=($696|0)==0;
 if($698){label=227;break;}else{label=228;break;}
 case 227: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=228;break; } else { var $_ph_ph=$600;var $free218_ph_ph=$free213;label=20;break; }
 case 228: 
 var $700=($600|0)==0;
 var $or_cond233=$686|$700;
 if($or_cond233){label=230;break;}else{label=229;break;}
 case 229: 
 label=230;break;
 case 230: 
 var $702=$__i140>>>2;
 var $703=(($697+($692<<2))|0);
 var $704=(($697+($702<<2))|0);
 var $708=$704;var $707=$703;var $706=$697;var $free212=228;label=231;break;
 case 231: 
 var $free212;
 var $706;
 var $707;
 var $708;
 var $709=(($707+4)|0);
 HEAP32[(($707)>>2)]=$__ng_0;
 var $__ng_1=0;var $713=$708;var $712=$709;var $711=$706;var $free=$free212;label=232;break;
 case 232: 
 var $free;
 var $711;
 var $712;
 var $713;
 var $__ng_1;
 var $714=HEAP32[(($8)>>2)];
 var $715=(($714+12)|0);
 var $716=HEAP32[(($715)>>2)];
 var $717=(($714+16)|0);
 var $718=HEAP32[(($717)>>2)];
 var $719=($716|0)==($718|0);
 if($719){label=233;break;}else{label=234;break;}
 case 233: 
 var $721=$714;
 var $722=HEAP32[(($721)>>2)];
 var $723=(($722+40)|0);
 var $724=HEAP32[(($723)>>2)];
 var $725=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$724]($714) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $602=$713;var $601=$712;var $600=$711;var $free213=$free;label=194;break; } else { var $_ph_ph=$711;var $free218_ph_ph=$free;label=20;break; }
 case 234: 
 var $727=(($716+4)|0);
 HEAP32[(($715)>>2)]=$727;
 var $__ng_0=$__ng_1;var $602=$713;var $601=$712;var $600=$711;var $free213=$free;label=194;break;
 case 235: 
 var $729=($600|0)==($601|0);
 var $730=($__ng_0|0)==0;
 var $or_cond8=$729|$730;
 if($or_cond8){var $760=$602;var $759=$601;var $758=$600;var $free216=$free213;label=245;break;}else{label=236;break;}
 case 236: 
 var $732=($601|0)==($602|0);
 if($732){label=237;break;}else{var $756=$602;var $755=$601;var $754=$600;var $free217=$free213;label=244;break;}
 case 237: 
 var $734=($free213|0)!=((450)|0);
 var $735=$601;
 var $736=$600;
 var $737=((($735)-($736))|0);
 var $738=($737>>>0)<2147483647;
 var $739=$737<<1;
 var $__i=($738?$739:-1);
 var $740=$737>>2;
 if($734){label=238;break;}else{var $743=0;label=239;break;}
 case 238: 
 var $phitmp_i=$600;
 var $743=$phitmp_i;label=239;break;
 case 239: 
 var $743;
 var $744=_realloc($743,$__i);
 var $745=$744;
 var $746=($744|0)==0;
 if($746){label=240;break;}else{label=241;break;}
 case 240: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=241;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$600;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free213;label=25;break; }
 case 241: 
 var $748=($600|0)==0;
 var $or_cond234=$734|$748;
 if($or_cond234){label=243;break;}else{label=242;break;}
 case 242: 
 label=243;break;
 case 243: 
 var $750=$__i>>>2;
 var $751=(($745+($740<<2))|0);
 var $752=(($745+($750<<2))|0);
 var $756=$752;var $755=$751;var $754=$745;var $free217=228;label=244;break;
 case 244: 
 var $free217;
 var $754;
 var $755;
 var $756;
 var $757=(($755+4)|0);
 HEAP32[(($755)>>2)]=$__ng_0;
 var $760=$756;var $759=$757;var $758=$754;var $free216=$free217;label=245;break;
 case 245: 
 var $free216;
 var $758;
 var $759;
 var $760;
 var $761=HEAP32[(($__fd)>>2)];
 var $762=($761|0)>0;
 if($762){label=246;break;}else{label=299;break;}
 case 246: 
 var $764=HEAP32[(($8)>>2)];
 var $765=($764|0)==0;
 if($765){var $782=1;label=253;break;}else{label=247;break;}
 case 247: 
 var $767=(($764+12)|0);
 var $768=HEAP32[(($767)>>2)];
 var $769=(($764+16)|0);
 var $770=HEAP32[(($769)>>2)];
 var $771=($768|0)==($770|0);
 if($771){label=248;break;}else{label=249;break;}
 case 248: 
 var $773=$764;
 var $774=HEAP32[(($773)>>2)];
 var $775=(($774+36)|0);
 var $776=HEAP32[(($775)>>2)];
 var $777=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$776]($764) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i112=$777;label=250;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$758;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free216;label=25;break; }
 case 249: 
 var $779=HEAP32[(($768)>>2)];
 var $_0_i_i_i_i112=$779;label=250;break;
 case 250: 
 var $_0_i_i_i_i112;
 var $780=($_0_i_i_i_i112|0)==-1;
 if($780){label=252;break;}else{label=251;break;}
 case 251: 
 var $_pre_i_i_i114=HEAP32[(($8)>>2)];
 var $phitmp_i_i_i115=($_pre_i_i_i114|0)==0;
 var $782=$phitmp_i_i_i115;label=253;break;
 case 252: 
 HEAP32[(($8)>>2)]=0;
 var $782=1;label=253;break;
 case 253: 
 var $782;
 var $783=HEAP32[(($9)>>2)];
 var $784=($783|0)==0;
 if($784){label=259;break;}else{label=254;break;}
 case 254: 
 var $786=(($783+12)|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=(($783+16)|0);
 var $789=HEAP32[(($788)>>2)];
 var $790=($787|0)==($789|0);
 if($790){label=255;break;}else{label=256;break;}
 case 255: 
 var $792=$783;
 var $793=HEAP32[(($792)>>2)];
 var $794=(($793+36)|0);
 var $795=HEAP32[(($794)>>2)];
 var $796=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$795]($783) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i118=$796;label=257;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$758;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free216;label=25;break; }
 case 256: 
 var $798=HEAP32[(($787)>>2)];
 var $_0_i_i1_i_i118=$798;label=257;break;
 case 257: 
 var $_0_i_i1_i_i118;
 var $799=($_0_i_i1_i_i118|0)==-1;
 if($799){label=258;break;}else{label=260;break;}
 case 258: 
 HEAP32[(($9)>>2)]=0;
 label=259;break;
 case 259: 
 if($782){label=265;break;}else{var $802=0;label=261;break;}
 case 260: 
 if($782){var $802=$783;label=261;break;}else{label=265;break;}
 case 261: 
 var $802;
 var $803=HEAP32[(($8)>>2)];
 var $804=(($803+12)|0);
 var $805=HEAP32[(($804)>>2)];
 var $806=(($803+16)|0);
 var $807=HEAP32[(($806)>>2)];
 var $808=($805|0)==($807|0);
 if($808){label=262;break;}else{label=263;break;}
 case 262: 
 var $810=$803;
 var $811=HEAP32[(($810)>>2)];
 var $812=(($811+36)|0);
 var $813=HEAP32[(($812)>>2)];
 var $814=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$813]($803) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i105=$814;label=264;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$758;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free216;label=25;break; }
 case 263: 
 var $816=HEAP32[(($805)>>2)];
 var $_0_i_i105=$816;label=264;break;
 case 264: 
 var $_0_i_i105;
 var $817=HEAP32[(($__dp)>>2)];
 var $818=($_0_i_i105|0)==($817|0);
 if($818){label=266;break;}else{label=265;break;}
 case 265: 
 var $820=HEAP32[(($__err)>>2)];
 var $821=$820|4;
 HEAP32[(($__err)>>2)]=$821;
 var $_0=0;var $1051=$758;var $free220=$free216;label=336;break;
 case 266: 
 var $823=HEAP32[(($8)>>2)];
 var $824=(($823+12)|0);
 var $825=HEAP32[(($824)>>2)];
 var $826=(($823+16)|0);
 var $827=HEAP32[(($826)>>2)];
 var $828=($825|0)==($827|0);
 if($828){label=267;break;}else{label=268;break;}
 case 267: 
 var $830=$823;
 var $831=HEAP32[(($830)>>2)];
 var $832=(($831+40)|0);
 var $833=HEAP32[(($832)>>2)];
 var $834=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$833]($823) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $838=$802;var $837=$761;var $_pre_i3_i_i86=$802;label=269;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph=$758;var $free218_ph_ph236_ph_ph_ph_ph_ph=$free216;label=25;break; }
 case 268: 
 var $836=(($825+4)|0);
 HEAP32[(($824)>>2)]=$836;
 var $838=$802;var $837=$761;var $_pre_i3_i_i86=$802;label=269;break;
 case 269: 
 var $_pre_i3_i_i86;
 var $837;
 var $838;
 var $839=HEAP32[(($8)>>2)];
 var $840=($839|0)==0;
 if($840){var $857=1;label=276;break;}else{label=270;break;}
 case 270: 
 var $842=(($839+12)|0);
 var $843=HEAP32[(($842)>>2)];
 var $844=(($839+16)|0);
 var $845=HEAP32[(($844)>>2)];
 var $846=($843|0)==($845|0);
 if($846){label=271;break;}else{label=272;break;}
 case 271: 
 var $848=$839;
 var $849=HEAP32[(($848)>>2)];
 var $850=(($849+36)|0);
 var $851=HEAP32[(($850)>>2)];
 var $852=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$851]($839) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i78=$852;label=273;break; } else { label=21;break; }
 case 272: 
 var $854=HEAP32[(($843)>>2)];
 var $_0_i_i_i_i78=$854;label=273;break;
 case 273: 
 var $_0_i_i_i_i78;
 var $855=($_0_i_i_i_i78|0)==-1;
 if($855){label=275;break;}else{label=274;break;}
 case 274: 
 var $_pre_i_i_i80=HEAP32[(($8)>>2)];
 var $phitmp_i_i_i81=($_pre_i_i_i80|0)==0;
 var $857=$phitmp_i_i_i81;label=276;break;
 case 275: 
 HEAP32[(($8)>>2)]=0;
 var $857=1;label=276;break;
 case 276: 
 var $857;
 var $858=($838|0)==0;
 if($858){var $_pre_i3_i_i86403_ph=$_pre_i3_i_i86;label=282;break;}else{label=277;break;}
 case 277: 
 var $860=(($838+12)|0);
 var $861=HEAP32[(($860)>>2)];
 var $862=(($838+16)|0);
 var $863=HEAP32[(($862)>>2)];
 var $864=($861|0)==($863|0);
 if($864){label=278;break;}else{label=279;break;}
 case 278: 
 var $866=$838;
 var $867=HEAP32[(($866)>>2)];
 var $868=(($867+36)|0);
 var $869=HEAP32[(($868)>>2)];
 var $870=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$869]($838) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i84=$870;label=280;break; } else { label=21;break; }
 case 279: 
 var $872=HEAP32[(($861)>>2)];
 var $_0_i_i1_i_i84=$872;label=280;break;
 case 280: 
 var $_0_i_i1_i_i84;
 var $873=($_0_i_i1_i_i84|0)==-1;
 if($873){label=281;break;}else{label=283;break;}
 case 281: 
 HEAP32[(($9)>>2)]=0;
 var $_pre_i3_i_i86403_ph=0;label=282;break;
 case 282: 
 var $_pre_i3_i_i86403_ph;
 if($857){label=289;break;}else{var $_pre_i3_i_i86403420=$_pre_i3_i_i86403_ph;var $877=0;label=284;break;}
 case 283: 
 var $phitmp_i4_i_i87=($_pre_i3_i_i86|0)==0;
 var $tmp_i_i89=$857^$phitmp_i4_i_i87;
 if($tmp_i_i89){var $_pre_i3_i_i86403420=$_pre_i3_i_i86;var $877=$_pre_i3_i_i86;label=284;break;}else{label=289;break;}
 case 284: 
 var $877;
 var $_pre_i3_i_i86403420;
 var $878=HEAP32[(($8)>>2)];
 var $879=(($878+12)|0);
 var $880=HEAP32[(($879)>>2)];
 var $881=(($878+16)|0);
 var $882=HEAP32[(($881)>>2)];
 var $883=($880|0)==($882|0);
 if($883){label=285;break;}else{label=286;break;}
 case 285: 
 var $885=$878;
 var $886=HEAP32[(($885)>>2)];
 var $887=(($886+36)|0);
 var $888=HEAP32[(($887)>>2)];
 var $889=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$888]($878) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i72=$889;label=287;break; } else { label=21;break; }
 case 286: 
 var $891=HEAP32[(($880)>>2)];
 var $_0_i_i72=$891;label=287;break;
 case 287: 
 var $_0_i_i72;
 var $892=HEAP32[(($11)>>2)];
 var $893=(($892+12)|0);
 var $894=HEAP32[(($893)>>2)];
 var $895=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$894]($__ct,2048,$_0_i_i72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=288;break; } else { label=21;break; }
 case 288: 
 if($895){label=290;break;}else{label=289;break;}
 case 289: 
 var $897=HEAP32[(($__err)>>2)];
 var $898=$897|4;
 HEAP32[(($__err)>>2)]=$898;
 var $_0=0;var $1051=$758;var $free220=$free216;label=336;break;
 case 290: 
 var $900=HEAP32[(($__wn)>>2)];
 var $901=HEAP32[(($1)>>2)];
 var $902=($900|0)==($901|0);
 if($902){label=291;break;}else{label=292;break;}
 case 291: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=292;break; } else { label=21;break; }
 case 292: 
 var $905=HEAP32[(($8)>>2)];
 var $906=(($905+12)|0);
 var $907=HEAP32[(($906)>>2)];
 var $908=(($905+16)|0);
 var $909=HEAP32[(($908)>>2)];
 var $910=($907|0)==($909|0);
 if($910){label=293;break;}else{label=294;break;}
 case 293: 
 var $912=$905;
 var $913=HEAP32[(($912)>>2)];
 var $914=(($913+36)|0);
 var $915=HEAP32[(($914)>>2)];
 var $916=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$915]($905) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i64=$916;label=295;break; } else { label=21;break; }
 case 294: 
 var $918=HEAP32[(($907)>>2)];
 var $_0_i_i64=$918;label=295;break;
 case 295: 
 var $_0_i_i64;
 var $919=HEAP32[(($__wn)>>2)];
 var $920=(($919+4)|0);
 HEAP32[(($__wn)>>2)]=$920;
 HEAP32[(($919)>>2)]=$_0_i_i64;
 var $921=((($837)-(1))|0);
 HEAP32[(($__fd)>>2)]=$921;
 var $922=HEAP32[(($8)>>2)];
 var $923=(($922+12)|0);
 var $924=HEAP32[(($923)>>2)];
 var $925=(($922+16)|0);
 var $926=HEAP32[(($925)>>2)];
 var $927=($924|0)==($926|0);
 if($927){label=296;break;}else{label=298;break;}
 case 296: 
 var $929=$922;
 var $930=HEAP32[(($929)>>2)];
 var $931=(($930+40)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$932]($922) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=297;break; } else { label=21;break; }
 case 297: 
 var $934=($921|0)>0;
 if($934){var $838=$877;var $837=$921;var $_pre_i3_i_i86=$_pre_i3_i_i86403420;label=269;break;}else{label=299;break;}
 case 298: 
 var $936=(($924+4)|0);
 HEAP32[(($923)>>2)]=$936;
 label=297;break;
 case 299: 
 var $937=HEAP32[(($__wn)>>2)];
 var $938=HEAP32[(($6)>>2)];
 var $939=($937|0)==($938|0);
 if($939){label=300;break;}else{var $__trailing_sign_1=$__trailing_sign_0343;var $945=$760;var $944=$759;var $943=$758;var $free215=$free216;label=301;break;}
 case 300: 
 var $941=HEAP32[(($__err)>>2)];
 var $942=$941|4;
 HEAP32[(($__err)>>2)]=$942;
 var $_0=0;var $1051=$758;var $free220=$free216;label=336;break;
 case 301: 
 var $free215;
 var $943;
 var $944;
 var $945;
 var $__trailing_sign_1;
 var $946=((($__p_0341)+(1))|0);
 var $947=($946>>>0)<4;
 if($947){var $free214336=$free215;var $26=$943;var $25=$944;var $24=$945;var $__p_0341=$946;var $__trailing_sign_0343=$__trailing_sign_1;label=3;break;}else{var $free214_lcssa=$free215;var $_lcssa285=$943;var $_lcssa300=$944;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=302;break;}
 case 302: 
 var $__trailing_sign_0_lcssa;
 var $_lcssa300;
 var $_lcssa285;
 var $free214_lcssa;
 var $948=($__trailing_sign_0_lcssa|0)==0;
 if($948){label=333;break;}else{label=303;break;}
 case 303: 
 var $949=$__trailing_sign_0_lcssa;
 var $950=(($__trailing_sign_0_lcssa+4)|0);
 var $951=(($__trailing_sign_0_lcssa+8)|0);
 var $__i_0=1;label=304;break;
 case 304: 
 var $__i_0;
 var $952=HEAP8[($949)];
 var $953=$952&1;
 var $954=(($953<<24)>>24)==0;
 if($954){label=306;break;}else{label=305;break;}
 case 305: 
 var $956=HEAP32[(($950)>>2)];
 var $960=$956;label=307;break;
 case 306: 
 var $958=($952&255);
 var $959=$958>>>1;
 var $960=$959;label=307;break;
 case 307: 
 var $960;
 var $961=($__i_0>>>0)<($960>>>0);
 if($961){label=308;break;}else{label=333;break;}
 case 308: 
 var $963=HEAP32[(($8)>>2)];
 var $964=($963|0)==0;
 if($964){var $981=1;label=315;break;}else{label=309;break;}
 case 309: 
 var $966=(($963+12)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=(($963+16)|0);
 var $969=HEAP32[(($968)>>2)];
 var $970=($967|0)==($969|0);
 if($970){label=310;break;}else{label=311;break;}
 case 310: 
 var $972=$963;
 var $973=HEAP32[(($972)>>2)];
 var $974=(($973+36)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$975]($963) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$976;label=312;break; } else { label=19;break; }
 case 311: 
 var $978=HEAP32[(($967)>>2)];
 var $_0_i_i_i_i=$978;label=312;break;
 case 312: 
 var $_0_i_i_i_i;
 var $979=($_0_i_i_i_i|0)==-1;
 if($979){label=314;break;}else{label=313;break;}
 case 313: 
 var $_pre_i_i_i=HEAP32[(($8)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $981=$phitmp_i_i_i;label=315;break;
 case 314: 
 HEAP32[(($8)>>2)]=0;
 var $981=1;label=315;break;
 case 315: 
 var $981;
 var $982=HEAP32[(($9)>>2)];
 var $983=($982|0)==0;
 if($983){label=321;break;}else{label=316;break;}
 case 316: 
 var $985=(($982+12)|0);
 var $986=HEAP32[(($985)>>2)];
 var $987=(($982+16)|0);
 var $988=HEAP32[(($987)>>2)];
 var $989=($986|0)==($988|0);
 if($989){label=317;break;}else{label=318;break;}
 case 317: 
 var $991=$982;
 var $992=HEAP32[(($991)>>2)];
 var $993=(($992+36)|0);
 var $994=HEAP32[(($993)>>2)];
 var $995=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$994]($982) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$995;label=319;break; } else { label=19;break; }
 case 318: 
 var $997=HEAP32[(($986)>>2)];
 var $_0_i_i1_i_i=$997;label=319;break;
 case 319: 
 var $_0_i_i1_i_i;
 var $998=($_0_i_i1_i_i|0)==-1;
 if($998){label=320;break;}else{label=322;break;}
 case 320: 
 HEAP32[(($9)>>2)]=0;
 label=321;break;
 case 321: 
 if($981){label=329;break;}else{label=323;break;}
 case 322: 
 if($981){label=323;break;}else{label=329;break;}
 case 323: 
 var $1001=HEAP32[(($8)>>2)];
 var $1002=(($1001+12)|0);
 var $1003=HEAP32[(($1002)>>2)];
 var $1004=(($1001+16)|0);
 var $1005=HEAP32[(($1004)>>2)];
 var $1006=($1003|0)==($1005|0);
 if($1006){label=324;break;}else{label=325;break;}
 case 324: 
 var $1008=$1001;
 var $1009=HEAP32[(($1008)>>2)];
 var $1010=(($1009+36)|0);
 var $1011=HEAP32[(($1010)>>2)];
 var $1012=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1011]($1001) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$1012;label=326;break; } else { label=19;break; }
 case 325: 
 var $1014=HEAP32[(($1003)>>2)];
 var $_0_i_i=$1014;label=326;break;
 case 326: 
 var $_0_i_i;
 var $1015=HEAP8[($949)];
 var $1016=$1015&1;
 var $1017=(($1016<<24)>>24)==0;
 if($1017){var $1020=$950;label=328;break;}else{label=327;break;}
 case 327: 
 var $1019=HEAP32[(($951)>>2)];
 var $1020=$1019;label=328;break;
 case 328: 
 var $1020;
 var $1021=(($1020+($__i_0<<2))|0);
 var $1022=HEAP32[(($1021)>>2)];
 var $1023=($_0_i_i|0)==($1022|0);
 if($1023){label=330;break;}else{label=329;break;}
 case 329: 
 var $1025=HEAP32[(($__err)>>2)];
 var $1026=$1025|4;
 HEAP32[(($__err)>>2)]=$1026;
 var $_0=0;var $1051=$_lcssa285;var $free220=$free214_lcssa;label=336;break;
 case 330: 
 var $1028=((($__i_0)+(1))|0);
 var $1029=HEAP32[(($8)>>2)];
 var $1030=(($1029+12)|0);
 var $1031=HEAP32[(($1030)>>2)];
 var $1032=(($1029+16)|0);
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=($1031|0)==($1033|0);
 if($1034){label=331;break;}else{label=332;break;}
 case 331: 
 var $1036=$1029;
 var $1037=HEAP32[(($1036)>>2)];
 var $1038=(($1037+40)|0);
 var $1039=HEAP32[(($1038)>>2)];
 var $1040=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1039]($1029) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1028;label=304;break; } else { label=19;break; }
 case 332: 
 var $1042=(($1031+4)|0);
 HEAP32[(($1030)>>2)]=$1042;
 var $__i_0=$1028;label=304;break;
 case 333: 
 var $1043=($_lcssa285|0)==($_lcssa300|0);
 if($1043){var $_0=1;var $1051=$_lcssa300;var $free220=$free214_lcssa;label=336;break;}else{label=334;break;}
 case 334: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa285,$_lcssa300,$__et);
 var $1045=HEAP32[(($__et)>>2)];
 var $1046=($1045|0)==0;
 if($1046){var $_0=1;var $1051=$_lcssa285;var $free220=$free214_lcssa;label=336;break;}else{label=335;break;}
 case 335: 
 var $1048=HEAP32[(($__err)>>2)];
 var $1049=$1048|4;
 HEAP32[(($__err)>>2)]=$1049;
 var $_0=0;var $1051=$_lcssa285;var $free220=$free214_lcssa;label=336;break;
 case 336: 
 var $free220;
 var $1051;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $1052=($1051|0)==0;
 if($1052){label=339;break;}else{label=337;break;}
 case 337: 
 var $1054=$1051;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free220]($1054) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=339;break; } else { label=338;break; }
 case 338: 
 var $1056$0 = ___cxa_find_matching_catch(-1, -1,0); var $1056$1 = tempRet0;
 var $1057=$1056$0;
 ___clang_call_terminate($1057);
 throw "Reached an unreachable!";
 case 339: 
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+456)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $1=(sp)+(448);
 var $2=$__wbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $3=(($__wbuf)|0);
 var $4=(($__wb)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=(($__wb+4)|0);
 HEAP32[(($5)>>2)]=450;
 var $6=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $8=(($__loc)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=HEAP32[((15368)>>2)];
 var $12=($11|0)==-1;
 if($12){label=4;break;}else{label=3;break;}
 case 3: 
 var $14=(($__p_i_i_i_i)|0);
 HEAP32[(($14)>>2)]=15368;
 var $15=(($__p_i_i_i_i+4)|0);
 HEAP32[(($15)>>2)]=(26);
 var $16=(($__p_i_i_i_i+8)|0);
 HEAP32[(($16)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$10,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=42;break; }
 case 4: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $17=HEAP32[((15372)>>2)];
 var $18=((($17)-(1))|0);
 var $19=(($9+12)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($9+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$20;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=$25>>2;
 var $27=($26>>>0)>($18>>>0);
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $28=(($22+($18<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 if($30){label=6;break;}else{label=8;break;}
 case 6: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 __ZNSt8bad_castC2Ev($32);
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=42;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $34=$29;
 HEAP8[($__neg)]=0;
 var $35=(($__e)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=(($__iob+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$1,$__intl,$__loc,$39,$__err,$__neg,$34,$__wb,$__wn,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=42;break; }
 case 9: 
 if($40){label=10;break;}else{label=22;break;}
 case 10: 
 var $43=$__v;
 var $44=HEAP8[($43)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=12;break;}else{label=11;break;}
 case 11: 
 var $48=(($__v+8)|0);
 var $49=HEAP32[(($48)>>2)];
 HEAP32[(($49)>>2)]=0;
 var $50=(($__v+4)|0);
 HEAP32[(($50)>>2)]=0;
 label=13;break;
 case 12: 
 var $52=(($__v+4)|0);
 HEAP32[(($52)>>2)]=0;
 HEAP8[($43)]=0;
 label=13;break;
 case 13: 
 var $53=HEAP8[($__neg)];
 var $54=(($53<<24)>>24)==0;
 var $_pre14=$29;
 if($54){label=17;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($_pre14)>>2)];
 var $57=(($56+44)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($34,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=42;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=42;break; }
 case 16: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=$60$0;
 var $62=$60$1;
 HEAP32[(($4)>>2)]=0;
 var $140=$3;var $_0116=$62;var $_018=$61;label=43;break;
 case 17: 
 var $63=HEAP32[(($_pre14)>>2)];
 var $64=(($63+44)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($34,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=42;break; }
 case 18: 
 var $67=HEAP32[(($4)>>2)];
 var $68=HEAP32[(($__wn)>>2)];
 var $69=((($68)-(4))|0);
 var $70=($67>>>0)<($69>>>0);
 if($70){var $__w_09=$67;label=20;break;}else{var $__w_0_lcssa=$67;label=21;break;}
 case 19: 
 var $72=($75>>>0)<($69>>>0);
 if($72){var $__w_09=$75;label=20;break;}else{var $__w_0_lcssa=$75;label=21;break;}
 case 20: 
 var $__w_09;
 var $73=HEAP32[(($__w_09)>>2)];
 var $74=($73|0)==($66|0);
 var $75=(($__w_09+4)|0);
 if($74){label=19;break;}else{var $__w_0_lcssa=$__w_09;label=21;break;}
 case 21: 
 var $__w_0_lcssa;
 var $76=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0_lcssa,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=42;break; }
 case 22: 
 var $78=(($__b)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){var $97=1;label=29;break;}else{label=23;break;}
 case 23: 
 var $82=(($79+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($79+16)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($83|0)==($85|0);
 if($86){label=24;break;}else{label=25;break;}
 case 24: 
 var $88=$79;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+36)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$92;label=26;break; } else { label=42;break; }
 case 25: 
 var $94=HEAP32[(($83)>>2)];
 var $_0_i_i_i_i=$94;label=26;break;
 case 26: 
 var $_0_i_i_i_i;
 var $95=($_0_i_i_i_i|0)==-1;
 if($95){label=28;break;}else{label=27;break;}
 case 27: 
 var $_pre_i_i_i=HEAP32[(($78)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $97=$phitmp_i_i_i;label=29;break;
 case 28: 
 HEAP32[(($78)>>2)]=0;
 var $97=1;label=29;break;
 case 29: 
 var $97;
 var $98=($36|0)==0;
 if($98){label=35;break;}else{label=30;break;}
 case 30: 
 var $100=(($36+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($36+16)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($101|0)==($103|0);
 if($104){label=31;break;}else{label=32;break;}
 case 31: 
 var $106=$36;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+36)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$109]($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$110;label=33;break; } else { label=42;break; }
 case 32: 
 var $112=HEAP32[(($101)>>2)];
 var $_0_i_i1_i_i=$112;label=33;break;
 case 33: 
 var $_0_i_i1_i_i;
 var $113=($_0_i_i1_i_i|0)==-1;
 if($113){label=34;break;}else{label=36;break;}
 case 34: 
 HEAP32[(($35)>>2)]=0;
 label=35;break;
 case 35: 
 if($97){label=37;break;}else{label=38;break;}
 case 36: 
 if($97){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=HEAP32[(($__err)>>2)];
 var $117=$116|2;
 HEAP32[(($__err)>>2)]=$117;
 label=38;break;
 case 38: 
 var $118=HEAP32[(($78)>>2)];
 var $119=(($agg_result)|0);
 HEAP32[(($119)>>2)]=$118;
 var $120=HEAP32[(($8)>>2)];
 var $121=(($120)|0);
 var $122=__ZNSt3__114__shared_count16__release_sharedEv($121);
 var $123=HEAP32[(($4)>>2)];
 HEAP32[(($4)>>2)]=0;
 var $124=($123|0)==0;
 if($124){label=41;break;}else{label=39;break;}
 case 39: 
 var $126=HEAP32[(($5)>>2)];
 var $127=$123;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$126]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=40;break; }
 case 40: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1,0); var $129$1 = tempRet0;
 var $130=$129$0;
 ___clang_call_terminate($130);
 throw "Reached an unreachable!";
 case 41: 
 var $$etemp$3$0=400;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
 case 42: 
 var $132$0 = ___cxa_find_matching_catch(-1, -1); var $132$1 = tempRet0;
 var $133=$132$0;
 var $134=$132$1;
 var $135=HEAP32[(($8)>>2)];
 var $136=(($135)|0);
 var $137=__ZNSt3__114__shared_count16__release_sharedEv($136);
 var $_pre=HEAP32[(($4)>>2)];
 HEAP32[(($4)>>2)]=0;
 var $138=($_pre|0)==0;
 if($138){var $_0117=$134;var $_019=$133;label=45;break;}else{var $140=$_pre;var $_0116=$134;var $_018=$133;label=43;break;}
 case 43: 
 var $_018;
 var $_0116;
 var $140;
 var $141=HEAP32[(($5)>>2)];
 var $142=$140;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$141]($142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0117=$_0116;var $_019=$_018;label=45;break; } else { label=44;break; }
 case 44: 
 var $144$0 = ___cxa_find_matching_catch(-1, -1,0); var $144$1 = tempRet0;
 var $145=$144$0;
 ___clang_call_terminate($145);
 throw "Reached an unreachable!";
 case 45: 
 var $_019;
 var $_0117;
 var $146$0=$_019;
 var $146$1=0;
 var $147$0=$146$0;
 var $147$1=$_0117;
 ___resumeException($147$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$__first;
 var $3=HEAP8[($1)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=($3&255);
 var $7=$6>>>1;
 var $17=1;var $16=$3;var $15=$7;label=4;break;
 case 3: 
 var $9=(($this+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&-2;
 var $phitmp_i=((($13)-(1))|0);
 var $14=(($12)&255);
 var $17=$phitmp_i;var $16=$14;var $15=$10;label=4;break;
 case 4: 
 var $15;
 var $16;
 var $17;
 var $18=$__last;
 var $19=((($18)-($2))|0);
 var $20=$19>>2;
 var $21=($20|0)==0;
 if($21){label=17;break;}else{label=5;break;}
 case 5: 
 var $23=((($17)-($15))|0);
 var $24=($23>>>0)<($20>>>0);
 if($24){label=6;break;}else{var $29=$16;label=7;break;}
 case 6: 
 var $26=((($15)+($20))|0);
 var $27=((($26)-($17))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$17,$27,$15,$15,0,0);
 var $_pre=HEAP8[($1)];
 var $29=$_pre;label=7;break;
 case 7: 
 var $29;
 var $30=$29&1;
 var $31=(($30<<24)>>24)==0;
 if($31){label=9;break;}else{label=8;break;}
 case 8: 
 var $33=(($this+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $37=$34;label=10;break;
 case 9: 
 var $36=(($this+4)|0);
 var $37=$36;label=10;break;
 case 10: 
 var $37;
 var $38=(($37+($15<<2))|0);
 var $39=($__first|0)==($__last|0);
 if($39){var $__p_0_lcssa=$38;label=14;break;}else{label=11;break;}
 case 11: 
 var $scevgep=((($__last)-(4))|0);
 var $scevgep3=$scevgep;
 var $40=(((-$2))|0);
 var $uglygep=(($scevgep3+$40)|0);
 var $uglygep4=$uglygep;
 var $41=$uglygep4>>>2;
 var $42=((($15)+($41))|0);
 var $43=((($42)+(1))|0);
 var $_01=$__first;var $__p_02=$38;label=12;break;
 case 12: 
 var $__p_02;
 var $_01;
 var $45=HEAP32[(($_01)>>2)];
 HEAP32[(($__p_02)>>2)]=$45;
 var $46=(($__p_02+4)|0);
 var $47=(($_01+4)|0);
 var $48=($47|0)==($__last|0);
 if($48){label=13;break;}else{var $_01=$47;var $__p_02=$46;label=12;break;}
 case 13: 
 var $scevgep5=(($37+($43<<2))|0);
 var $__p_0_lcssa=$scevgep5;label=14;break;
 case 14: 
 var $__p_0_lcssa;
 HEAP32[(($__p_0_lcssa)>>2)]=0;
 var $50=((($15)+($20))|0);
 var $51=HEAP8[($1)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=16;break;}else{label=15;break;}
 case 15: 
 var $55=(($this+4)|0);
 HEAP32[(($55)>>2)]=$50;
 label=17;break;
 case 16: 
 var $57=$50<<1;
 var $58=(($57)&255);
 HEAP8[($1)]=$58;
 label=17;break;
 case 17: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i6=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=(sp)+(56);
 var $4=(sp)+(72);
 var $5=(sp)+(88);
 var $6=(sp)+(104);
 var $7=(sp)+(112);
 var $8=(sp)+(128);
 var $9=(sp)+(144);
 var $10=(sp)+(160);
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast1=$1;
 var $12=(($__loc)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $15=HEAP32[((15832)>>2)];
 var $16=($15|0)==-1;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__p_i_i_i_i)|0);
 HEAP32[(($18)>>2)]=15832;
 var $19=(($__p_i_i_i_i+4)|0);
 HEAP32[(($19)>>2)]=(26);
 var $20=(($__p_i_i_i_i+8)|0);
 HEAP32[(($20)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15832,$14,266);
 label=4;break;
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $21=HEAP32[((15836)>>2)];
 var $22=((($21)-(1))|0);
 var $23=(($13+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($13+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$24;
 var $28=$26;
 var $29=((($27)-($28))|0);
 var $30=$29>>2;
 var $31=($30>>>0)>($22>>>0);
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=(($26+($22<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 __ZNSt8bad_castC2Ev($36);
 ___cxa_throw($35,10104,(378));
 throw "Reached an unreachable!";
 case 7: 
 var $37=$33;
 var $38=$33;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+44)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($tmpcast1,$37);
 var $42=$__pat;
 var $43=HEAP32[(($1)>>2)];
 tempBigInt=$43;HEAP8[($42)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(3))|0)]=tempBigInt&0xff;
 var $44=$33;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+32)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($2,$37);
 var $48=$__nsn;
 var $49=HEAP8[($48)];
 var $50=$49&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=9;break;}else{label=8;break;}
 case 8: 
 var $53=(($__nsn+8)|0);
 var $54=HEAP32[(($53)>>2)];
 HEAP32[(($54)>>2)]=0;
 var $55=(($__nsn+4)|0);
 HEAP32[(($55)>>2)]=0;
 label=10;break;
 case 9: 
 var $57=(($__nsn+4)|0);
 HEAP32[(($57)>>2)]=0;
 HEAP8[($48)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 ___clang_call_terminate($60);
 throw "Reached an unreachable!";
 case 12: 
 var $61=$2;
 assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];
 HEAP32[(($61)>>2)]=0; HEAP32[((($61)+(4))>>2)]=0; HEAP32[((($61)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
 var $62=HEAP32[(($44)>>2)];
 var $63=(($62+28)|0);
 var $64=HEAP32[(($63)>>2)];
 FUNCTION_TABLE[$64]($3,$37);
 var $65=$__psn;
 var $66=HEAP8[($65)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=14;break;}else{label=13;break;}
 case 13: 
 var $70=(($__psn+8)|0);
 var $71=HEAP32[(($70)>>2)];
 HEAP32[(($71)>>2)]=0;
 var $72=(($__psn+4)|0);
 HEAP32[(($72)>>2)]=0;
 label=15;break;
 case 14: 
 var $74=(($__psn+4)|0);
 HEAP32[(($74)>>2)]=0;
 HEAP8[($65)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1,0); var $76$1 = tempRet0;
 var $77=$76$0;
 ___clang_call_terminate($77);
 throw "Reached an unreachable!";
 case 17: 
 var $78=$3;
 assert(12 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($78)+(4))>>2)];HEAP32[((($65)+(8))>>2)]=HEAP32[((($78)+(8))>>2)];
 HEAP32[(($78)>>2)]=0; HEAP32[((($78)+(4))>>2)]=0; HEAP32[((($78)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
 var $79=$33;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+12)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=FUNCTION_TABLE[$82]($37);
 HEAP32[(($__dp)>>2)]=$83;
 var $84=HEAP32[(($79)>>2)];
 var $85=(($84+16)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=FUNCTION_TABLE[$86]($37);
 HEAP32[(($__ts)>>2)]=$87;
 var $88=$33;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+20)|0);
 var $91=HEAP32[(($90)>>2)];
 FUNCTION_TABLE[$91]($4,$37);
 var $92=$__grp;
 var $93=HEAP8[($92)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=19;break;}else{label=18;break;}
 case 18: 
 var $97=(($__grp+8)|0);
 var $98=HEAP32[(($97)>>2)];
 HEAP8[($98)]=0;
 var $99=(($__grp+4)|0);
 HEAP32[(($99)>>2)]=0;
 label=20;break;
 case 19: 
 var $101=$__grp;
 var $102=(($101+1)|0);
 HEAP8[($102)]=0;
 HEAP8[($92)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $104$0 = ___cxa_find_matching_catch(-1, -1,0); var $104$1 = tempRet0;
 var $105=$104$0;
 ___clang_call_terminate($105);
 throw "Reached an unreachable!";
 case 22: 
 var $106=$4;
 assert(12 % 1 === 0);HEAP32[(($92)>>2)]=HEAP32[(($106)>>2)];HEAP32[((($92)+(4))>>2)]=HEAP32[((($106)+(4))>>2)];HEAP32[((($92)+(8))>>2)]=HEAP32[((($106)+(8))>>2)];
 HEAP32[(($106)>>2)]=0; HEAP32[((($106)+(4))>>2)]=0; HEAP32[((($106)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 var $107=HEAP32[(($44)>>2)];
 var $108=(($107+24)|0);
 var $109=HEAP32[(($108)>>2)];
 FUNCTION_TABLE[$109]($5,$37);
 var $110=$__sym;
 var $111=HEAP8[($110)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=24;break;}else{label=23;break;}
 case 23: 
 var $115=(($__sym+8)|0);
 var $116=HEAP32[(($115)>>2)];
 HEAP32[(($116)>>2)]=0;
 var $117=(($__sym+4)|0);
 HEAP32[(($117)>>2)]=0;
 label=25;break;
 case 24: 
 var $119=(($__sym+4)|0);
 HEAP32[(($119)>>2)]=0;
 HEAP8[($110)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $121$0 = ___cxa_find_matching_catch(-1, -1,0); var $121$1 = tempRet0;
 var $122=$121$0;
 ___clang_call_terminate($122);
 throw "Reached an unreachable!";
 case 27: 
 var $123=$5;
 assert(12 % 1 === 0);HEAP32[(($110)>>2)]=HEAP32[(($123)>>2)];HEAP32[((($110)+(4))>>2)]=HEAP32[((($123)+(4))>>2)];HEAP32[((($110)+(8))>>2)]=HEAP32[((($123)+(8))>>2)];
 HEAP32[(($123)>>2)]=0; HEAP32[((($123)+(4))>>2)]=0; HEAP32[((($123)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
 var $124=HEAP32[(($79)>>2)];
 var $125=(($124+36)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=FUNCTION_TABLE[$126]($37);
 var $storemerge=$127;label=54;break;
 case 28: 
 var $tmpcast=$6;
 var $129=(($__loc)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$__p_i_i_i_i6;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $132=HEAP32[((15840)>>2)];
 var $133=($132|0)==-1;
 if($133){label=30;break;}else{label=29;break;}
 case 29: 
 var $135=(($__p_i_i_i_i6)|0);
 HEAP32[(($135)>>2)]=15840;
 var $136=(($__p_i_i_i_i6+4)|0);
 HEAP32[(($136)>>2)]=(26);
 var $137=(($__p_i_i_i_i6+8)|0);
 HEAP32[(($137)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15840,$131,266);
 label=30;break;
 case 30: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $138=HEAP32[((15844)>>2)];
 var $139=((($138)-(1))|0);
 var $140=(($130+12)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($130+8)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$141;
 var $145=$143;
 var $146=((($144)-($145))|0);
 var $147=$146>>2;
 var $148=($147>>>0)>($139>>>0);
 if($148){label=31;break;}else{label=32;break;}
 case 31: 
 var $149=(($143+($139<<2))|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=32;break;}else{label=33;break;}
 case 32: 
 var $152=___cxa_allocate_exception(4);
 var $153=$152;
 __ZNSt8bad_castC2Ev($153);
 ___cxa_throw($152,10104,(378));
 throw "Reached an unreachable!";
 case 33: 
 var $154=$150;
 var $155=$150;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+44)|0);
 var $158=HEAP32[(($157)>>2)];
 FUNCTION_TABLE[$158]($tmpcast,$154);
 var $159=$__pat;
 var $160=HEAP32[(($6)>>2)];
 tempBigInt=$160;HEAP8[($159)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($159)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($159)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($159)+(3))|0)]=tempBigInt&0xff;
 var $161=$150;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+32)|0);
 var $164=HEAP32[(($163)>>2)];
 FUNCTION_TABLE[$164]($7,$154);
 var $165=$__nsn;
 var $166=HEAP8[($165)];
 var $167=$166&1;
 var $168=(($167<<24)>>24)==0;
 if($168){label=35;break;}else{label=34;break;}
 case 34: 
 var $170=(($__nsn+8)|0);
 var $171=HEAP32[(($170)>>2)];
 HEAP32[(($171)>>2)]=0;
 var $172=(($__nsn+4)|0);
 HEAP32[(($172)>>2)]=0;
 label=36;break;
 case 35: 
 var $174=(($__nsn+4)|0);
 HEAP32[(($174)>>2)]=0;
 HEAP8[($165)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $176$0 = ___cxa_find_matching_catch(-1, -1,0); var $176$1 = tempRet0;
 var $177=$176$0;
 ___clang_call_terminate($177);
 throw "Reached an unreachable!";
 case 38: 
 var $178=$7;
 assert(12 % 1 === 0);HEAP32[(($165)>>2)]=HEAP32[(($178)>>2)];HEAP32[((($165)+(4))>>2)]=HEAP32[((($178)+(4))>>2)];HEAP32[((($165)+(8))>>2)]=HEAP32[((($178)+(8))>>2)];
 HEAP32[(($178)>>2)]=0; HEAP32[((($178)+(4))>>2)]=0; HEAP32[((($178)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
 var $179=HEAP32[(($161)>>2)];
 var $180=(($179+28)|0);
 var $181=HEAP32[(($180)>>2)];
 FUNCTION_TABLE[$181]($8,$154);
 var $182=$__psn;
 var $183=HEAP8[($182)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=40;break;}else{label=39;break;}
 case 39: 
 var $187=(($__psn+8)|0);
 var $188=HEAP32[(($187)>>2)];
 HEAP32[(($188)>>2)]=0;
 var $189=(($__psn+4)|0);
 HEAP32[(($189)>>2)]=0;
 label=41;break;
 case 40: 
 var $191=(($__psn+4)|0);
 HEAP32[(($191)>>2)]=0;
 HEAP8[($182)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $193$0 = ___cxa_find_matching_catch(-1, -1,0); var $193$1 = tempRet0;
 var $194=$193$0;
 ___clang_call_terminate($194);
 throw "Reached an unreachable!";
 case 43: 
 var $195=$8;
 assert(12 % 1 === 0);HEAP32[(($182)>>2)]=HEAP32[(($195)>>2)];HEAP32[((($182)+(4))>>2)]=HEAP32[((($195)+(4))>>2)];HEAP32[((($182)+(8))>>2)]=HEAP32[((($195)+(8))>>2)];
 HEAP32[(($195)>>2)]=0; HEAP32[((($195)+(4))>>2)]=0; HEAP32[((($195)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
 var $196=$150;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+12)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=FUNCTION_TABLE[$199]($154);
 HEAP32[(($__dp)>>2)]=$200;
 var $201=HEAP32[(($196)>>2)];
 var $202=(($201+16)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=FUNCTION_TABLE[$203]($154);
 HEAP32[(($__ts)>>2)]=$204;
 var $205=$150;
 var $206=HEAP32[(($205)>>2)];
 var $207=(($206+20)|0);
 var $208=HEAP32[(($207)>>2)];
 FUNCTION_TABLE[$208]($9,$154);
 var $209=$__grp;
 var $210=HEAP8[($209)];
 var $211=$210&1;
 var $212=(($211<<24)>>24)==0;
 if($212){label=45;break;}else{label=44;break;}
 case 44: 
 var $214=(($__grp+8)|0);
 var $215=HEAP32[(($214)>>2)];
 HEAP8[($215)]=0;
 var $216=(($__grp+4)|0);
 HEAP32[(($216)>>2)]=0;
 label=46;break;
 case 45: 
 var $218=$__grp;
 var $219=(($218+1)|0);
 HEAP8[($219)]=0;
 HEAP8[($209)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $221$0 = ___cxa_find_matching_catch(-1, -1,0); var $221$1 = tempRet0;
 var $222=$221$0;
 ___clang_call_terminate($222);
 throw "Reached an unreachable!";
 case 48: 
 var $223=$9;
 assert(12 % 1 === 0);HEAP32[(($209)>>2)]=HEAP32[(($223)>>2)];HEAP32[((($209)+(4))>>2)]=HEAP32[((($223)+(4))>>2)];HEAP32[((($209)+(8))>>2)]=HEAP32[((($223)+(8))>>2)];
 HEAP32[(($223)>>2)]=0; HEAP32[((($223)+(4))>>2)]=0; HEAP32[((($223)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
 var $224=HEAP32[(($161)>>2)];
 var $225=(($224+24)|0);
 var $226=HEAP32[(($225)>>2)];
 FUNCTION_TABLE[$226]($10,$154);
 var $227=$__sym;
 var $228=HEAP8[($227)];
 var $229=$228&1;
 var $230=(($229<<24)>>24)==0;
 if($230){label=50;break;}else{label=49;break;}
 case 49: 
 var $232=(($__sym+8)|0);
 var $233=HEAP32[(($232)>>2)];
 HEAP32[(($233)>>2)]=0;
 var $234=(($__sym+4)|0);
 HEAP32[(($234)>>2)]=0;
 label=51;break;
 case 50: 
 var $236=(($__sym+4)|0);
 HEAP32[(($236)>>2)]=0;
 HEAP8[($227)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $238$0 = ___cxa_find_matching_catch(-1, -1,0); var $238$1 = tempRet0;
 var $239=$238$0;
 ___clang_call_terminate($239);
 throw "Reached an unreachable!";
 case 53: 
 var $240=$10;
 assert(12 % 1 === 0);HEAP32[(($227)>>2)]=HEAP32[(($240)>>2)];HEAP32[((($227)+(4))>>2)]=HEAP32[((($240)+(4))>>2)];HEAP32[((($227)+(8))>>2)]=HEAP32[((($240)+(8))>>2)];
 HEAP32[(($240)>>2)]=0; HEAP32[((($240)+(4))>>2)]=0; HEAP32[((($240)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($10);
 var $241=HEAP32[(($196)>>2)];
 var $242=(($241+36)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=FUNCTION_TABLE[$243]($154);
 var $storemerge=$244;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)!=((450)|0);
 var $4=HEAP32[(($__e)>>2)];
 var $5=(($__b)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($9>>>0)<2147483647;
 var $11=$9<<1;
 var $_=($10?$11:-1);
 var $12=HEAP32[(($__n)>>2)];
 var $13=$12;
 var $14=((($13)-($8))|0);
 var $15=$14>>2;
 if($3){label=2;break;}else{var $18=0;label=3;break;}
 case 2: 
 var $phitmp=$6;
 var $18=$phitmp;label=3;break;
 case 3: 
 var $18;
 var $19=_realloc($18,$_);
 var $20=$19;
 var $21=($19|0)==0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 __ZSt17__throw_bad_allocv();
 label=5;break;
 case 5: 
 if($3){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($5)>>2)]=$20;
 var $32=$20;label=11;break;
 case 7: 
 var $_pr=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$20;
 var $25=($_pr|0)==0;
 if($25){var $32=$20;label=11;break;}else{label=8;break;}
 case 8: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$_pr;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre=HEAP32[(($5)>>2)];
 var $32=$_pre;label=11;break;
 case 10: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 var $31=$30$0;
 ___clang_call_terminate($31);
 throw "Reached an unreachable!";
 case 11: 
 var $32;
 HEAP32[(($1)>>2)]=228;
 var $33=$_>>>2;
 var $34=(($32+($15<<2))|0);
 HEAP32[(($__n)>>2)]=$34;
 var $35=HEAP32[(($5)>>2)];
 var $36=(($35+($33<<2))|0);
 HEAP32[(($__e)>>2)]=$36;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(232);
 var $__pat=(sp)+(240);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__buf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 HEAP32[(($__bb)>>2)]=$2;
 var $3=(($__digits)|0);
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 var $4=_snprintf($2,100,2648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=($4>>>0)>99;
 if($5){label=2;break;}else{var $__db_0=$3;var $__n_0=$4;var $38=0;var $37=0;label=15;break;}
 case 2: 
 var $7=HEAP8[(15936)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=3;break;}else{label=7;break;}
 case 3: 
 var $10=___cxa_guard_acquire(15936);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=4;break;}
 case 4: 
 var $13=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((13832)>>2)]=$13;

 label=7;break;
 case 6: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1); var $16$1 = tempRet0;

 var $eh_lpad_body$1=$16$1;var $eh_lpad_body$0=$16$0;var $29=0;var $28=0;label=12;break;
 case 7: 
 var $18=HEAP32[((13832)>>2)];
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$18,2648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $26=0;var $25=0;label=11;break; }
 case 8: 
 var $21=HEAP32[(($__bb)>>2)];
 var $22=($21|0)==0;
 if($22){label=9;break;}else{var $32=$21;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $26=0;var $25=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $32=$_pre;label=13;break;
 case 11: 
 var $25;
 var $26;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body$1=$27$1;var $eh_lpad_body$0=$27$0;var $29=$26;var $28=$25;label=12;break;
 case 12: 
 var $28;
 var $29;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $30=$eh_lpad_body$0;
 var $31=$eh_lpad_body$1;
 var $_2=$30;var $_23=$31;var $186=$29;var $185=$28;label=60;break;
 case 13: 
 var $32;
 var $33=_malloc($19);
 var $34=($33|0)==0;
 if($34){label=14;break;}else{var $__db_0=$33;var $__n_0=$19;var $38=$33;var $37=$32;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=0;var $__n_0=$19;var $38=0;var $37=$32;label=15;break; } else { var $26=0;var $25=$32;label=11;break; }
 case 15: 
 var $37;
 var $38;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $26=$38;var $25=$37;label=11;break; }
 case 16: 
 var $40=(($__loc)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$__p_i_i_i_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $43=HEAP32[((15376)>>2)];
 var $44=($43|0)==-1;
 if($44){label=18;break;}else{label=17;break;}
 case 17: 
 var $46=(($__p_i_i_i_i)|0);
 HEAP32[(($46)>>2)]=15376;
 var $47=(($__p_i_i_i_i+4)|0);
 HEAP32[(($47)>>2)]=(26);
 var $48=(($__p_i_i_i_i+8)|0);
 HEAP32[(($48)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$42,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=45;break; }
 case 18: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $49=HEAP32[((15380)>>2)];
 var $50=((($49)-(1))|0);
 var $51=(($41+12)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($41+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$52;
 var $56=$54;
 var $57=((($55)-($56))|0);
 var $58=$57>>2;
 var $59=($58>>>0)>($50>>>0);
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 var $60=(($54+($50<<2))|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($61|0)==0;
 if($62){label=20;break;}else{label=22;break;}
 case 20: 
 var $63=___cxa_allocate_exception(4);
 var $64=$63;
 __ZNSt8bad_castC2Ev($64);
 (function() { try { __THREW__ = 0; return ___cxa_throw($63,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=45;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $66=$61;
 var $67=HEAP32[(($__bb)>>2)];
 var $68=(($67+$__n_0)|0);
 var $69=$61;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+32)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($66,$67,$68,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=45;break; }
 case 23: 
 var $74=($__n_0|0)==0;
 if($74){var $80=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $76=HEAP32[(($__bb)>>2)];
 var $77=HEAP8[($76)];
 var $78=(($77<<24)>>24)==45;
 var $80=$78;label=25;break;
 case 25: 
 var $80;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i7=$__sym;
 HEAP32[(($this2_i_i_i7)>>2)]=0; HEAP32[((($this2_i_i_i7)+(4))>>2)]=0; HEAP32[((($this2_i_i_i7)+(8))>>2)]=0;
 var $this2_i_i_i8=$__sn;
 HEAP32[(($this2_i_i_i8)>>2)]=0; HEAP32[((($this2_i_i_i8)+(4))>>2)]=0; HEAP32[((($this2_i_i_i8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$80,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=46;break; }
 case 26: 
 var $82=(($__mbuf)|0);
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 var $83=HEAP32[(($__fd)>>2)];
 var $84=($__n_0|0)>($83|0);
 if($84){label=27;break;}else{label=34;break;}
 case 27: 
 var $86=((($__n_0)-($83))|0);
 var $87=$86<<1;
 var $88=HEAP8[($this2_i_i_i8)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){label=29;break;}else{label=28;break;}
 case 28: 
 var $92=(($__sn+4)|0);
 var $93=HEAP32[(($92)>>2)];
 var $97=$93;label=30;break;
 case 29: 
 var $95=($88&255);
 var $96=$95>>>1;
 var $97=$96;label=30;break;
 case 30: 
 var $97;
 var $98=HEAP8[($this2_i_i_i7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=32;break;}else{label=31;break;}
 case 31: 
 var $102=(($__sym+4)|0);
 var $103=HEAP32[(($102)>>2)];
 var $107=$103;label=33;break;
 case 32: 
 var $105=($98&255);
 var $106=$105>>>1;
 var $107=$106;label=33;break;
 case 33: 
 var $107;
 var $108=$87|1;
 var $109=((($97)+($108))|0);
 var $110=((($109)+($107))|0);
 var $_pn=$110;label=41;break;
 case 34: 
 var $112=HEAP8[($this2_i_i_i8)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($114){label=36;break;}else{label=35;break;}
 case 35: 
 var $116=(($__sn+4)|0);
 var $117=HEAP32[(($116)>>2)];
 var $121=$117;label=37;break;
 case 36: 
 var $119=($112&255);
 var $120=$119>>>1;
 var $121=$120;label=37;break;
 case 37: 
 var $121;
 var $122=HEAP8[($this2_i_i_i7)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=39;break;}else{label=38;break;}
 case 38: 
 var $126=(($__sym+4)|0);
 var $127=HEAP32[(($126)>>2)];
 var $131=$127;label=40;break;
 case 39: 
 var $129=($122&255);
 var $130=$129>>>1;
 var $131=$130;label=40;break;
 case 40: 
 var $131;
 var $132=((($121)+(2))|0);
 var $133=((($132)+($131))|0);
 var $_pn=$133;label=41;break;
 case 41: 
 var $_pn;
 var $135=((($_pn)+($83))|0);
 var $136=($135>>>0)>100;
 if($136){label=42;break;}else{var $__mb_0=$82;var $158=0;label=49;break;}
 case 42: 
 var $137=_malloc($135);
 var $138=($137|0)==0;
 if($138){label=43;break;}else{var $__mb_0=$137;var $158=$137;label=49;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=0;var $158=0;label=49;break; } else { label=44;break; }
 case 44: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $_0=$141;var $_01=$142;label=58;break;
 case 45: 
 var $144$0 = ___cxa_find_matching_catch(-1, -1); var $144$1 = tempRet0;
 var $145=$144$0;
 var $146=$144$1;
 var $_1=$145;var $_12=$146;label=59;break;
 case 46: 
 var $148$0 = ___cxa_find_matching_catch(-1, -1); var $148$1 = tempRet0;
 var $149=$148$0;
 var $150=$148$1;
 var $_0=$149;var $_01=$150;label=58;break;
 case 47: 
 var $152$0 = ___cxa_find_matching_catch(-1, -1); var $152$1 = tempRet0;
 var $153=$152$0;
 var $154=$152$1;
 var $155=($158|0)==0;
 if($155){var $_0=$153;var $_01=$154;label=58;break;}else{label=48;break;}
 case 48: 
 _free($158);
 var $_0=$153;var $_01=$154;label=58;break;
 case 49: 
 var $158;
 var $__mb_0;
 var $159=(($__iob+4)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(($__db_0+$__n_0)|0);
 var $162=HEAP8[($__dp)];
 var $163=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$160,$__db_0,$161,$66,$80,$tmpcast,$162,$163,$__grp,$__sym,$__sn,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=47;break; }
 case 50: 
 var $165=(($__s)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($1)|0);
 HEAP32[(($167)>>2)]=$166;
 var $168=HEAP32[(($__mi)>>2)];
 var $169=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$1,$__mb_0,$168,$169,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=47;break; }
 case 51: 
 var $171=($158|0)==0;
 if($171){label=53;break;}else{label=52;break;}
 case 52: 
 _free($158);
 label=53;break;
 case 53: 
 var $$etemp$5$0=100;
 var $$etemp$5$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $173=HEAP32[(($40)>>2)];
 var $174=(($173)|0);
 var $175=__ZNSt3__114__shared_count16__release_sharedEv($174);
 var $176=($38|0)==0;
 if($176){label=55;break;}else{label=54;break;}
 case 54: 
 _free($38);
 label=55;break;
 case 55: 
 var $178=($37|0)==0;
 if($178){label=57;break;}else{label=56;break;}
 case 56: 
 _free($37);
 label=57;break;
 case 57: 
 var $$etemp$6$0=100;
 var $$etemp$6$1=0;

 var $$etemp$7$0=100;
 var $$etemp$7$1=0;

 STACKTOP=sp;return;
 case 58: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=59;break;
 case 59: 
 var $_12;
 var $_1;
 var $181=HEAP32[(($40)>>2)];
 var $182=(($181)|0);
 var $183=__ZNSt3__114__shared_count16__release_sharedEv($182);
 var $_2=$_1;var $_23=$_12;var $186=$38;var $185=$37;label=60;break;
 case 60: 
 var $185;
 var $186;
 var $_23;
 var $_2;
 var $187=($186|0)==0;
 if($187){label=62;break;}else{label=61;break;}
 case 61: 
 _free($186);
 label=62;break;
 case 62: 
 var $189=($185|0)==0;
 if($189){label=64;break;}else{label=63;break;}
 case 63: 
 _free($185);
 label=64;break;
 case 64: 
 var $191$0=$_2;
 var $191$1=0;
 var $192$0=$191$0;
 var $192$1=$_23;
 ___resumeException($192$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i10=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast3=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast2=$3;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast1=$7;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$9;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=(($__loc)|0);
 var $14=HEAP32[(($13)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $16=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $17=HEAP32[((15848)>>2)];
 var $18=($17|0)==-1;
 if($18){label=4;break;}else{label=3;break;}
 case 3: 
 var $20=(($__p_i_i_i_i)|0);
 HEAP32[(($20)>>2)]=15848;
 var $21=(($__p_i_i_i_i+4)|0);
 HEAP32[(($21)>>2)]=(26);
 var $22=(($__p_i_i_i_i+8)|0);
 HEAP32[(($22)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15848,$16,266);
 label=4;break;
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $23=HEAP32[((15852)>>2)];
 var $24=((($23)-(1))|0);
 var $25=(($14+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($14+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$26;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=$31>>2;
 var $33=($32>>>0)>($24>>>0);
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $34=(($28+($24<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 __ZNSt8bad_castC2Ev($38);
 ___cxa_throw($37,10104,(378));
 throw "Reached an unreachable!";
 case 7: 
 var $39=$35;
 var $40=$35;
 var $41=HEAP32[(($40)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $43=(($41+44)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($tmpcast3,$39);
 var $45=$__pat;
 var $46=HEAP32[(($1)>>2)];
 tempBigInt=$46;HEAP8[($45)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(3))|0)]=tempBigInt&0xff;
 var $47=$35;
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+32)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($2,$39);
 var $51=$__sn;
 var $52=HEAP8[($51)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=10;break;}else{label=9;break;}
 case 9: 
 var $56=(($__sn+8)|0);
 var $57=HEAP32[(($56)>>2)];
 HEAP8[($57)]=0;
 var $58=(($__sn+4)|0);
 HEAP32[(($58)>>2)]=0;
 label=11;break;
 case 10: 
 var $60=$__sn;
 var $61=(($60+1)|0);
 HEAP8[($61)]=0;
 HEAP8[($51)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
 case 13: 
 var $65=$2;
 assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];
 HEAP32[(($65)>>2)]=0; HEAP32[((($65)+(4))>>2)]=0; HEAP32[((($65)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 label=20;break;
 case 14: 
 var $67=(($41+40)|0);
 var $68=HEAP32[(($67)>>2)];
 FUNCTION_TABLE[$68]($tmpcast2,$39);
 var $69=$__pat;
 var $70=HEAP32[(($3)>>2)];
 tempBigInt=$70;HEAP8[($69)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($69)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($69)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($69)+(3))|0)]=tempBigInt&0xff;
 var $71=$35;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+28)|0);
 var $74=HEAP32[(($73)>>2)];
 FUNCTION_TABLE[$74]($4,$39);
 var $75=$__sn;
 var $76=HEAP8[($75)];
 var $77=$76&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=16;break;}else{label=15;break;}
 case 15: 
 var $80=(($__sn+8)|0);
 var $81=HEAP32[(($80)>>2)];
 HEAP8[($81)]=0;
 var $82=(($__sn+4)|0);
 HEAP32[(($82)>>2)]=0;
 label=17;break;
 case 16: 
 var $84=$__sn;
 var $85=(($84+1)|0);
 HEAP8[($85)]=0;
 HEAP8[($75)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $87$0 = ___cxa_find_matching_catch(-1, -1,0); var $87$1 = tempRet0;
 var $88=$87$0;
 ___clang_call_terminate($88);
 throw "Reached an unreachable!";
 case 19: 
 var $89=$4;
 assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($89)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($89)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($89)+(8))>>2)];
 HEAP32[(($89)>>2)]=0; HEAP32[((($89)+(4))>>2)]=0; HEAP32[((($89)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 label=20;break;
 case 20: 
 var $91=$35;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=FUNCTION_TABLE[$94]($39);
 HEAP8[($__dp)]=$95;
 var $96=HEAP32[(($91)>>2)];
 var $97=(($96+16)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=FUNCTION_TABLE[$98]($39);
 HEAP8[($__ts)]=$99;
 var $100=$35;
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+20)|0);
 var $103=HEAP32[(($102)>>2)];
 FUNCTION_TABLE[$103]($5,$39);
 var $104=$__grp;
 var $105=HEAP8[($104)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=22;break;}else{label=21;break;}
 case 21: 
 var $109=(($__grp+8)|0);
 var $110=HEAP32[(($109)>>2)];
 HEAP8[($110)]=0;
 var $111=(($__grp+4)|0);
 HEAP32[(($111)>>2)]=0;
 label=23;break;
 case 22: 
 var $113=$__grp;
 var $114=(($113+1)|0);
 HEAP8[($114)]=0;
 HEAP8[($104)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $116$0 = ___cxa_find_matching_catch(-1, -1,0); var $116$1 = tempRet0;
 var $117=$116$0;
 ___clang_call_terminate($117);
 throw "Reached an unreachable!";
 case 25: 
 var $118=$5;
 assert(12 % 1 === 0);HEAP32[(($104)>>2)]=HEAP32[(($118)>>2)];HEAP32[((($104)+(4))>>2)]=HEAP32[((($118)+(4))>>2)];HEAP32[((($104)+(8))>>2)]=HEAP32[((($118)+(8))>>2)];
 HEAP32[(($118)>>2)]=0; HEAP32[((($118)+(4))>>2)]=0; HEAP32[((($118)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 var $119=HEAP32[(($100)>>2)];
 var $120=(($119+24)|0);
 var $121=HEAP32[(($120)>>2)];
 FUNCTION_TABLE[$121]($6,$39);
 var $122=$__sym;
 var $123=HEAP8[($122)];
 var $124=$123&1;
 var $125=(($124<<24)>>24)==0;
 if($125){label=27;break;}else{label=26;break;}
 case 26: 
 var $127=(($__sym+8)|0);
 var $128=HEAP32[(($127)>>2)];
 HEAP8[($128)]=0;
 var $129=(($__sym+4)|0);
 HEAP32[(($129)>>2)]=0;
 label=28;break;
 case 27: 
 var $131=$__sym;
 var $132=(($131+1)|0);
 HEAP8[($132)]=0;
 HEAP8[($122)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1,0); var $134$1 = tempRet0;
 var $135=$134$0;
 ___clang_call_terminate($135);
 throw "Reached an unreachable!";
 case 30: 
 var $136=$6;
 assert(12 % 1 === 0);HEAP32[(($122)>>2)]=HEAP32[(($136)>>2)];HEAP32[((($122)+(4))>>2)]=HEAP32[((($136)+(4))>>2)];HEAP32[((($122)+(8))>>2)]=HEAP32[((($136)+(8))>>2)];
 HEAP32[(($136)>>2)]=0; HEAP32[((($136)+(4))>>2)]=0; HEAP32[((($136)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 var $137=$35;
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138+36)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=FUNCTION_TABLE[$140]($39);
 var $storemerge=$141;label=60;break;
 case 31: 
 var $143=$__p_i_i_i_i10;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $144=HEAP32[((15856)>>2)];
 var $145=($144|0)==-1;
 if($145){label=33;break;}else{label=32;break;}
 case 32: 
 var $147=(($__p_i_i_i_i10)|0);
 HEAP32[(($147)>>2)]=15856;
 var $148=(($__p_i_i_i_i10+4)|0);
 HEAP32[(($148)>>2)]=(26);
 var $149=(($__p_i_i_i_i10+8)|0);
 HEAP32[(($149)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15856,$143,266);
 label=33;break;
 case 33: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $150=HEAP32[((15860)>>2)];
 var $151=((($150)-(1))|0);
 var $152=(($14+12)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($14+8)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$153;
 var $157=$155;
 var $158=((($156)-($157))|0);
 var $159=$158>>2;
 var $160=($159>>>0)>($151>>>0);
 if($160){label=34;break;}else{label=35;break;}
 case 34: 
 var $161=(($155+($151<<2))|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=($162|0)==0;
 if($163){label=35;break;}else{label=36;break;}
 case 35: 
 var $164=___cxa_allocate_exception(4);
 var $165=$164;
 __ZNSt8bad_castC2Ev($165);
 ___cxa_throw($164,10104,(378));
 throw "Reached an unreachable!";
 case 36: 
 var $166=$162;
 var $167=$162;
 var $168=HEAP32[(($167)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $170=(($168+44)|0);
 var $171=HEAP32[(($170)>>2)];
 FUNCTION_TABLE[$171]($tmpcast1,$166);
 var $172=$__pat;
 var $173=HEAP32[(($7)>>2)];
 tempBigInt=$173;HEAP8[($172)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($172)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($172)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($172)+(3))|0)]=tempBigInt&0xff;
 var $174=$162;
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+32)|0);
 var $177=HEAP32[(($176)>>2)];
 FUNCTION_TABLE[$177]($8,$166);
 var $178=$__sn;
 var $179=HEAP8[($178)];
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=39;break;}else{label=38;break;}
 case 38: 
 var $183=(($__sn+8)|0);
 var $184=HEAP32[(($183)>>2)];
 HEAP8[($184)]=0;
 var $185=(($__sn+4)|0);
 HEAP32[(($185)>>2)]=0;
 label=40;break;
 case 39: 
 var $187=$__sn;
 var $188=(($187+1)|0);
 HEAP8[($188)]=0;
 HEAP8[($178)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $190$0 = ___cxa_find_matching_catch(-1, -1,0); var $190$1 = tempRet0;
 var $191=$190$0;
 ___clang_call_terminate($191);
 throw "Reached an unreachable!";
 case 42: 
 var $192=$8;
 assert(12 % 1 === 0);HEAP32[(($178)>>2)]=HEAP32[(($192)>>2)];HEAP32[((($178)+(4))>>2)]=HEAP32[((($192)+(4))>>2)];HEAP32[((($178)+(8))>>2)]=HEAP32[((($192)+(8))>>2)];
 HEAP32[(($192)>>2)]=0; HEAP32[((($192)+(4))>>2)]=0; HEAP32[((($192)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
 label=49;break;
 case 43: 
 var $194=(($168+40)|0);
 var $195=HEAP32[(($194)>>2)];
 FUNCTION_TABLE[$195]($tmpcast,$166);
 var $196=$__pat;
 var $197=HEAP32[(($9)>>2)];
 tempBigInt=$197;HEAP8[($196)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($196)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($196)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($196)+(3))|0)]=tempBigInt&0xff;
 var $198=$162;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+28)|0);
 var $201=HEAP32[(($200)>>2)];
 FUNCTION_TABLE[$201]($10,$166);
 var $202=$__sn;
 var $203=HEAP8[($202)];
 var $204=$203&1;
 var $205=(($204<<24)>>24)==0;
 if($205){label=45;break;}else{label=44;break;}
 case 44: 
 var $207=(($__sn+8)|0);
 var $208=HEAP32[(($207)>>2)];
 HEAP8[($208)]=0;
 var $209=(($__sn+4)|0);
 HEAP32[(($209)>>2)]=0;
 label=46;break;
 case 45: 
 var $211=$__sn;
 var $212=(($211+1)|0);
 HEAP8[($212)]=0;
 HEAP8[($202)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $214$0 = ___cxa_find_matching_catch(-1, -1,0); var $214$1 = tempRet0;
 var $215=$214$0;
 ___clang_call_terminate($215);
 throw "Reached an unreachable!";
 case 48: 
 var $216=$10;
 assert(12 % 1 === 0);HEAP32[(($202)>>2)]=HEAP32[(($216)>>2)];HEAP32[((($202)+(4))>>2)]=HEAP32[((($216)+(4))>>2)];HEAP32[((($202)+(8))>>2)]=HEAP32[((($216)+(8))>>2)];
 HEAP32[(($216)>>2)]=0; HEAP32[((($216)+(4))>>2)]=0; HEAP32[((($216)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
 label=49;break;
 case 49: 
 var $218=$162;
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=FUNCTION_TABLE[$221]($166);
 HEAP8[($__dp)]=$222;
 var $223=HEAP32[(($218)>>2)];
 var $224=(($223+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=FUNCTION_TABLE[$225]($166);
 HEAP8[($__ts)]=$226;
 var $227=$162;
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228+20)|0);
 var $230=HEAP32[(($229)>>2)];
 FUNCTION_TABLE[$230]($11,$166);
 var $231=$__grp;
 var $232=HEAP8[($231)];
 var $233=$232&1;
 var $234=(($233<<24)>>24)==0;
 if($234){label=51;break;}else{label=50;break;}
 case 50: 
 var $236=(($__grp+8)|0);
 var $237=HEAP32[(($236)>>2)];
 HEAP8[($237)]=0;
 var $238=(($__grp+4)|0);
 HEAP32[(($238)>>2)]=0;
 label=52;break;
 case 51: 
 var $240=$__grp;
 var $241=(($240+1)|0);
 HEAP8[($241)]=0;
 HEAP8[($231)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $243$0 = ___cxa_find_matching_catch(-1, -1,0); var $243$1 = tempRet0;
 var $244=$243$0;
 ___clang_call_terminate($244);
 throw "Reached an unreachable!";
 case 54: 
 var $245=$11;
 assert(12 % 1 === 0);HEAP32[(($231)>>2)]=HEAP32[(($245)>>2)];HEAP32[((($231)+(4))>>2)]=HEAP32[((($245)+(4))>>2)];HEAP32[((($231)+(8))>>2)]=HEAP32[((($245)+(8))>>2)];
 HEAP32[(($245)>>2)]=0; HEAP32[((($245)+(4))>>2)]=0; HEAP32[((($245)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
 var $246=HEAP32[(($227)>>2)];
 var $247=(($246+24)|0);
 var $248=HEAP32[(($247)>>2)];
 FUNCTION_TABLE[$248]($12,$166);
 var $249=$__sym;
 var $250=HEAP8[($249)];
 var $251=$250&1;
 var $252=(($251<<24)>>24)==0;
 if($252){label=56;break;}else{label=55;break;}
 case 55: 
 var $254=(($__sym+8)|0);
 var $255=HEAP32[(($254)>>2)];
 HEAP8[($255)]=0;
 var $256=(($__sym+4)|0);
 HEAP32[(($256)>>2)]=0;
 label=57;break;
 case 56: 
 var $258=$__sym;
 var $259=(($258+1)|0);
 HEAP8[($259)]=0;
 HEAP8[($249)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $261$0 = ___cxa_find_matching_catch(-1, -1,0); var $261$1 = tempRet0;
 var $262=$261$0;
 ___clang_call_terminate($262);
 throw "Reached an unreachable!";
 case 59: 
 var $263=$12;
 assert(12 % 1 === 0);HEAP32[(($249)>>2)]=HEAP32[(($263)>>2)];HEAP32[((($249)+(4))>>2)]=HEAP32[((($263)+(4))>>2)];HEAP32[((($249)+(8))>>2)]=HEAP32[((($263)+(8))>>2)];
 HEAP32[(($263)>>2)]=0; HEAP32[((($263)+(4))>>2)]=0; HEAP32[((($263)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12);
 var $264=$162;
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+36)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=FUNCTION_TABLE[$267]($166);
 var $storemerge=$268;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=$__sn;
 var $4=(($3+1)|0);
 var $5=(($__sn+8)|0);
 var $6=(($__sn+4)|0);
 var $7=$__sym;
 var $8=$__flags&512;
 var $9=($8|0)==0;
 var $10=$__sym;
 var $11=(($10+1)|0);
 var $12=(($__sym+8)|0);
 var $13=(($__sym+4)|0);
 var $14=($__fd|0)>0;
 var $15=$__grp;
 var $16=$__grp;
 var $17=(($16+1)|0);
 var $18=(($__grp+8)|0);
 var $19=(($__grp+4)|0);
 var $20=(($__ct+8)|0);
 var $21=(((-$__fd))|0);
 var $__p_049=0;var $_050=$__db;label=2;break;
 case 2: 
 var $_050;
 var $__p_049;
 var $23=(($__pat+$__p_049)|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 switch(($25|0)){case 2:{ label=12;break;}case 4:{ label=22;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_050;label=60;break;}}break;
 case 3: 
 var $27=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$27;
 var $_2=$_050;label=60;break;
 case 4: 
 var $29=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$29;
 var $30=HEAP32[(($1)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__ct,32);
 var $34=HEAP32[(($__me)>>2)];
 var $35=(($34+1)|0);
 HEAP32[(($__me)>>2)]=$35;
 HEAP8[($34)]=$33;
 var $_2=$_050;label=60;break;
 case 5: 
 var $37=HEAP8[($2)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=7;break;}else{label=6;break;}
 case 6: 
 var $41=HEAP32[(($6)>>2)];
 var $45=$41;label=8;break;
 case 7: 
 var $43=($37&255);
 var $44=$43>>>1;
 var $45=$44;label=8;break;
 case 8: 
 var $45;
 var $46=($45|0)==0;
 if($46){var $_2=$_050;label=60;break;}else{label=9;break;}
 case 9: 
 if($39){var $50=$4;label=11;break;}else{label=10;break;}
 case 10: 
 var $49=HEAP32[(($5)>>2)];
 var $50=$49;label=11;break;
 case 11: 
 var $50;
 var $51=HEAP8[($50)];
 var $52=HEAP32[(($__me)>>2)];
 var $53=(($52+1)|0);
 HEAP32[(($__me)>>2)]=$53;
 HEAP8[($52)]=$51;
 var $_2=$_050;label=60;break;
 case 12: 
 var $55=HEAP8[($7)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=14;break;}else{label=13;break;}
 case 13: 
 var $59=HEAP32[(($13)>>2)];
 var $63=$59;label=15;break;
 case 14: 
 var $61=($55&255);
 var $62=$61>>>1;
 var $63=$62;label=15;break;
 case 15: 
 var $63;
 var $64=($63|0)==0;
 var $brmerge=$64|$9;
 if($brmerge){var $_2=$_050;label=60;break;}else{label=16;break;}
 case 16: 
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 var $67=HEAP32[(($12)>>2)];
 var $68=HEAP32[(($13)>>2)];
 var $74=$68;var $73=$67;var $72=$67;label=19;break;
 case 18: 
 var $70=($55&255);
 var $71=$70>>>1;
 var $74=$71;var $73=$11;var $72=$11;label=19;break;
 case 19: 
 var $72;
 var $73;
 var $74;
 var $75=(($73+$74)|0);
 var $76=HEAP32[(($__me)>>2)];
 var $77=($72|0)==($75|0);
 if($77){var $_0_lcssa_i_i17=$76;label=21;break;}else{var $_01_i_i15=$76;var $78=$72;label=20;break;}
 case 20: 
 var $78;
 var $_01_i_i15;
 var $79=HEAP8[($78)];
 HEAP8[($_01_i_i15)]=$79;
 var $80=(($78+1)|0);
 var $81=(($_01_i_i15+1)|0);
 var $82=($80|0)==($75|0);
 if($82){var $_0_lcssa_i_i17=$81;label=21;break;}else{var $_01_i_i15=$81;var $78=$80;label=20;break;}
 case 21: 
 var $_0_lcssa_i_i17;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i17;
 var $_2=$_050;label=60;break;
 case 22: 
 var $84=HEAP32[(($__me)>>2)];
 var $85=(($_050+1)|0);
 var $__0=($__neg?$85:$_050);
 var $86=($__0>>>0)<($__de>>>0);
 if($86){var $__d_029=$__0;label=24;break;}else{var $__d_0_lcssa=$__0;label=26;break;}
 case 23: 
 var $88=($96>>>0)<($__de>>>0);
 if($88){var $__d_029=$96;label=24;break;}else{var $__d_0_lcssa=$96;label=26;break;}
 case 24: 
 var $__d_029;
 var $89=HEAP8[($__d_029)];
 var $isascii1_i=(($89<<24)>>24)>-1;
 if($isascii1_i){label=25;break;}else{var $__d_0_lcssa=$__d_029;label=26;break;}
 case 25: 
 var $90=(($89<<24)>>24);
 var $91=HEAP32[(($20)>>2)];
 var $92=(($91+($90<<1))|0);
 var $93=HEAP16[(($92)>>1)];
 var $94=$93&2048;
 var $95=(($94<<16)>>16)==0;
 var $96=(($__d_029+1)|0);
 if($95){var $__d_0_lcssa=$__d_029;label=26;break;}else{label=23;break;}
 case 26: 
 var $__d_0_lcssa;
 var $__d_0_lcssa58=$__d_0_lcssa;
 if($14){label=27;break;}else{var $__d_2=$__d_0_lcssa;label=36;break;}
 case 27: 
 var $97=($__d_0_lcssa>>>0)>($__0>>>0);
 if($97){label=28;break;}else{var $__f_0_lcssa72=$__fd;var $__d_1_lcssa74=$__d_0_lcssa;label=32;break;}
 case 28: 
 var $98=(((-$__d_0_lcssa58))|0);
 var $scevgep=(($__0+$98)|0);
 var $scevgep59=$scevgep;
 var $99=($scevgep59>>>0)<($21>>>0);
 var $umax=($99?$21:$scevgep59);
 var $umax60=$umax;
 var $scevgep61=(($umax60+$__fd)|0);
 var $scevgep6162=$scevgep61;
 var $__d_132=$__d_0_lcssa;var $__f_033=$__fd;var $101=$84;label=29;break;
 case 29: 
 var $101;
 var $__f_033;
 var $__d_132;
 var $102=((($__d_132)-(1))|0);
 var $103=HEAP8[($102)];
 var $104=(($101+1)|0);
 HEAP32[(($__me)>>2)]=$104;
 HEAP8[($101)]=$103;
 var $105=((($__f_033)-(1))|0);
 var $106=($102>>>0)>($__0>>>0);
 var $107=($105|0)>0;
 var $or_cond=$106&$107;
 if($or_cond){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_132=$102;var $__f_033=$105;var $101=$_pre;label=29;break;
 case 31: 
 var $scevgep63=(($__d_0_lcssa+$umax)|0);
 if($107){var $__f_0_lcssa72=$scevgep6162;var $__d_1_lcssa74=$scevgep63;label=32;break;}else{var $112=0;var $__f_0_lcssa71=$scevgep6162;var $__d_1_lcssa73=$scevgep63;label=33;break;}
 case 32: 
 var $__d_1_lcssa74;
 var $__f_0_lcssa72;
 var $108=HEAP32[(($1)>>2)];
 var $109=(($108+28)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=FUNCTION_TABLE[$110]($__ct,48);
 var $112=$111;var $__f_0_lcssa71=$__f_0_lcssa72;var $__d_1_lcssa73=$__d_1_lcssa74;label=33;break;
 case 33: 
 var $__d_1_lcssa73;
 var $__f_0_lcssa71;
 var $112;
 var $113=($__f_0_lcssa71|0)>0;
 var $114=HEAP32[(($__me)>>2)];
 var $115=(($114+1)|0);
 HEAP32[(($__me)>>2)]=$115;
 if($113){var $__f_139=$__f_0_lcssa71;var $116=$114;label=34;break;}else{var $_lcssa38=$114;label=35;break;}
 case 34: 
 var $116;
 var $__f_139;
 HEAP8[($116)]=$112;
 var $117=((($__f_139)-(1))|0);
 var $118=($117|0)>0;
 var $119=HEAP32[(($__me)>>2)];
 var $120=(($119+1)|0);
 HEAP32[(($__me)>>2)]=$120;
 if($118){var $__f_139=$117;var $116=$119;label=34;break;}else{var $_lcssa38=$119;label=35;break;}
 case 35: 
 var $_lcssa38;
 HEAP8[($_lcssa38)]=$__dp;
 var $__d_2=$__d_1_lcssa73;label=36;break;
 case 36: 
 var $__d_2;
 var $122=($__d_2|0)==($__0|0);
 if($122){label=37;break;}else{label=38;break;}
 case 37: 
 var $124=HEAP32[(($1)>>2)];
 var $125=(($124+28)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=FUNCTION_TABLE[$126]($__ct,48);
 var $128=HEAP32[(($__me)>>2)];
 var $129=(($128+1)|0);
 HEAP32[(($__me)>>2)]=$129;
 HEAP8[($128)]=$127;
 label=57;break;
 case 38: 
 var $131=HEAP8[($15)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){label=40;break;}else{label=39;break;}
 case 39: 
 var $135=HEAP32[(($19)>>2)];
 var $139=$135;label=41;break;
 case 40: 
 var $137=($131&255);
 var $138=$137>>>1;
 var $139=$138;label=41;break;
 case 41: 
 var $139;
 var $140=($139|0)==0;
 if($140){var $__d_343=$__d_2;var $__ng_044=0;var $__ig_045=0;var $__gl_046=-1;label=45;break;}else{label=42;break;}
 case 42: 
 if($133){var $144=$17;label=44;break;}else{label=43;break;}
 case 43: 
 var $143=HEAP32[(($18)>>2)];
 var $144=$143;label=44;break;
 case 44: 
 var $144;
 var $145=HEAP8[($144)];
 var $146=(($145<<24)>>24);
 var $__d_343=$__d_2;var $__ng_044=0;var $__ig_045=0;var $__gl_046=$146;label=45;break;
 case 45: 
 var $__gl_046;
 var $__ig_045;
 var $__ng_044;
 var $__d_343;
 var $147=($__ng_044|0)==($__gl_046|0);
 if($147){label=46;break;}else{var $__gl_1=$__gl_046;var $__ig_1=$__ig_045;var $__ng_1=$__ng_044;label=56;break;}
 case 46: 
 var $149=HEAP32[(($__me)>>2)];
 var $150=(($149+1)|0);
 HEAP32[(($__me)>>2)]=$150;
 HEAP8[($149)]=$__ts;
 var $151=((($__ig_045)+(1))|0);
 var $152=HEAP8[($15)];
 var $153=$152&1;
 var $154=(($153<<24)>>24)==0;
 if($154){label=48;break;}else{label=47;break;}
 case 47: 
 var $156=HEAP32[(($19)>>2)];
 var $160=$156;label=49;break;
 case 48: 
 var $158=($152&255);
 var $159=$158>>>1;
 var $160=$159;label=49;break;
 case 49: 
 var $160;
 var $161=($151>>>0)<($160>>>0);
 if($161){label=50;break;}else{var $__gl_1=$__gl_046;var $__ig_1=$151;var $__ng_1=0;label=56;break;}
 case 50: 
 if($154){var $165=$17;label=52;break;}else{label=51;break;}
 case 51: 
 var $164=HEAP32[(($18)>>2)];
 var $165=$164;label=52;break;
 case 52: 
 var $165;
 var $166=(($165+$151)|0);
 var $167=HEAP8[($166)];
 var $168=(($167<<24)>>24)==127;
 if($168){var $__gl_1=-1;var $__ig_1=$151;var $__ng_1=0;label=56;break;}else{label=53;break;}
 case 53: 
 if($154){var $172=$17;label=55;break;}else{label=54;break;}
 case 54: 
 var $171=HEAP32[(($18)>>2)];
 var $172=$171;label=55;break;
 case 55: 
 var $172;
 var $173=(($172+$151)|0);
 var $174=HEAP8[($173)];
 var $175=(($174<<24)>>24);
 var $__gl_1=$175;var $__ig_1=$151;var $__ng_1=0;label=56;break;
 case 56: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $176=((($__d_343)-(1))|0);
 var $177=HEAP8[($176)];
 var $178=HEAP32[(($__me)>>2)];
 var $179=(($178+1)|0);
 HEAP32[(($__me)>>2)]=$179;
 HEAP8[($178)]=$177;
 var $180=((($__ng_1)+(1))|0);
 var $181=($176|0)==($__0|0);
 if($181){label=57;break;}else{var $__d_343=$176;var $__ng_044=$180;var $__ig_045=$__ig_1;var $__gl_046=$__gl_1;label=45;break;}
 case 57: 
 var $182=HEAP32[(($__me)>>2)];
 var $183=($84|0)==($182|0);
 if($183){var $_2=$__0;label=60;break;}else{label=58;break;}
 case 58: 
 var $184=((($182)-(1))|0);
 var $185=($184>>>0)>($84>>>0);
 if($185){var $_012_i_i=$84;var $186=$184;label=59;break;}else{var $_2=$__0;label=60;break;}
 case 59: 
 var $186;
 var $_012_i_i;
 var $187=HEAP8[($_012_i_i)];
 var $188=HEAP8[($186)];
 HEAP8[($_012_i_i)]=$188;
 HEAP8[($186)]=$187;
 var $189=(($_012_i_i+1)|0);
 var $190=((($186)-(1))|0);
 var $191=($189>>>0)<($190>>>0);
 if($191){var $_012_i_i=$189;var $186=$190;label=59;break;}else{var $_2=$__0;label=60;break;}
 case 60: 
 var $_2;
 var $192=((($__p_049)+(1))|0);
 var $193=($192>>>0)<4;
 if($193){var $__p_049=$192;var $_050=$_2;label=2;break;}else{label=61;break;}
 case 61: 
 var $195=HEAP8[($2)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=63;break;}else{label=62;break;}
 case 62: 
 var $199=HEAP32[(($6)>>2)];
 var $203=$199;label=64;break;
 case 63: 
 var $201=($195&255);
 var $202=$201>>>1;
 var $203=$202;label=64;break;
 case 64: 
 var $203;
 var $204=($203>>>0)>1;
 if($204){label=65;break;}else{label=71;break;}
 case 65: 
 if($197){label=67;break;}else{label=66;break;}
 case 66: 
 var $207=HEAP32[(($5)>>2)];
 var $208=HEAP32[(($6)>>2)];
 var $213=$208;var $212=$207;var $_pn=$207;label=68;break;
 case 67: 
 var $210=($195&255);
 var $211=$210>>>1;
 var $213=$211;var $212=$4;var $_pn=$4;label=68;break;
 case 68: 
 var $_pn;
 var $212;
 var $213;
 var $214=(($_pn+1)|0);
 var $215=(($212+$213)|0);
 var $216=HEAP32[(($__me)>>2)];
 var $217=($214|0)==($215|0);
 if($217){var $_0_lcssa_i_i=$216;label=70;break;}else{var $_01_i_i=$216;var $218=$214;label=69;break;}
 case 69: 
 var $218;
 var $_01_i_i;
 var $219=HEAP8[($218)];
 HEAP8[($_01_i_i)]=$219;
 var $220=(($218+1)|0);
 var $221=(($_01_i_i+1)|0);
 var $222=($220|0)==($215|0);
 if($222){var $_0_lcssa_i_i=$221;label=70;break;}else{var $_01_i_i=$221;var $218=$220;label=69;break;}
 case 70: 
 var $_0_lcssa_i_i;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i;
 label=71;break;
 case 71: 
 var $224=$__flags&176;
 if(($224|0)==32){ label=72;break;}else if(($224|0)==16){ label=74;break;}else{label=73;break;}
 case 72: 
 var $226=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$226;
 label=74;break;
 case 73: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=74;break;
 case 74: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $2=(($__loc)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $5=HEAP32[((15376)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__p_i_i_i_i)|0);
 HEAP32[(($8)>>2)]=15376;
 var $9=(($__p_i_i_i_i+4)|0);
 HEAP32[(($9)>>2)]=(26);
 var $10=(($__p_i_i_i_i+8)|0);
 HEAP32[(($10)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$4,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=HEAP32[((15380)>>2)];
 var $12=((($11)-(1))|0);
 var $13=(($3+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($3+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14;
 var $18=$16;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>($12>>>0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=(($16+($12<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 __ZNSt8bad_castC2Ev($26);
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$23;
 var $29=$__digits;
 var $30=HEAP8[($29)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 var $34=(($__digits+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $39=$35;label=10;break;
 case 9: 
 var $37=($30&255);
 var $38=$37>>>1;
 var $39=$38;label=10;break;
 case 10: 
 var $39;
 var $40=($39|0)==0;
 if($40){var $57=0;label=16;break;}else{label=11;break;}
 case 11: 
 if($32){label=13;break;}else{label=12;break;}
 case 12: 
 var $43=(($__digits+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $48=$44;label=14;break;
 case 13: 
 var $46=$__digits;
 var $47=(($46+1)|0);
 var $48=$47;label=14;break;
 case 14: 
 var $48;
 var $49=HEAP8[($48)];
 var $50=$23;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+28)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($28,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $55=(($49<<24)>>24)==(($54<<24)>>24);
 var $57=$55;label=16;break;
 case 16: 
 var $57;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i5=$__sym;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 var $this2_i_i_i6=$__sn;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$57,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $59=(($__mbuf)|0);
 var $$etemp$2$0=100;
 var $$etemp$2$1=0;

 var $60=HEAP8[($29)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=19;break;}else{label=18;break;}
 case 18: 
 var $64=(($__digits+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $69=$65;label=20;break;
 case 19: 
 var $67=($60&255);
 var $68=$67>>>1;
 var $69=$68;label=20;break;
 case 20: 
 var $69;
 var $70=HEAP32[(($__fd)>>2)];
 var $71=($69|0)>($70|0);
 if($71){label=21;break;}else{label=31;break;}
 case 21: 
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $74=(($__digits+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $79=$75;label=24;break;
 case 23: 
 var $77=($60&255);
 var $78=$77>>>1;
 var $79=$78;label=24;break;
 case 24: 
 var $79;
 var $80=((($79)-($70))|0);
 var $81=$80<<1;
 var $82=HEAP8[($this2_i_i_i6)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=26;break;}else{label=25;break;}
 case 25: 
 var $86=(($__sn+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $91=$87;label=27;break;
 case 26: 
 var $89=($82&255);
 var $90=$89>>>1;
 var $91=$90;label=27;break;
 case 27: 
 var $91;
 var $92=HEAP8[($this2_i_i_i5)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=29;break;}else{label=28;break;}
 case 28: 
 var $96=(($__sym+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $101=$97;label=30;break;
 case 29: 
 var $99=($92&255);
 var $100=$99>>>1;
 var $101=$100;label=30;break;
 case 30: 
 var $101;
 var $102=$81|1;
 var $103=((($91)+($102))|0);
 var $104=((($103)+($101))|0);
 var $_pn=$104;label=38;break;
 case 31: 
 var $106=HEAP8[($this2_i_i_i6)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=33;break;}else{label=32;break;}
 case 32: 
 var $110=(($__sn+4)|0);
 var $111=HEAP32[(($110)>>2)];
 var $115=$111;label=34;break;
 case 33: 
 var $113=($106&255);
 var $114=$113>>>1;
 var $115=$114;label=34;break;
 case 34: 
 var $115;
 var $116=HEAP8[($this2_i_i_i5)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=36;break;}else{label=35;break;}
 case 35: 
 var $120=(($__sym+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $125=$121;label=37;break;
 case 36: 
 var $123=($116&255);
 var $124=$123>>>1;
 var $125=$124;label=37;break;
 case 37: 
 var $125;
 var $126=((($115)+(2))|0);
 var $127=((($126)+($125))|0);
 var $_pn=$127;label=38;break;
 case 38: 
 var $_pn;
 var $129=((($_pn)+($70))|0);
 var $130=($129>>>0)>100;
 if($130){label=39;break;}else{var $__mb_0=$59;var $153=0;var $152=$60;label=47;break;}
 case 39: 
 var $131=_malloc($129);
 var $132=($131|0)==0;
 if($132){label=40;break;}else{var $__mb_0=$131;var $153=$131;var $152=$60;label=47;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 var $_pre=HEAP8[($29)];
 var $__mb_0=0;var $153=0;var $152=$_pre;label=47;break;
 case 42: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=$134$1;
 var $_0=$135;var $_01=$136;label=55;break;
 case 43: 
 var $138$0 = ___cxa_find_matching_catch(-1, -1); var $138$1 = tempRet0;
 var $139=$138$0;
 var $140=$138$1;
 var $_1=$139;var $_12=$140;label=56;break;
 case 44: 
 var $142$0 = ___cxa_find_matching_catch(-1, -1); var $142$1 = tempRet0;
 var $143=$142$0;
 var $144=$142$1;
 var $_0=$143;var $_01=$144;label=55;break;
 case 45: 
 var $146$0 = ___cxa_find_matching_catch(-1, -1); var $146$1 = tempRet0;
 var $147=$146$0;
 var $148=$146$1;
 var $149=($153|0)==0;
 if($149){var $_0=$147;var $_01=$148;label=55;break;}else{label=46;break;}
 case 46: 
 _free($153);
 var $_0=$147;var $_01=$148;label=55;break;
 case 47: 
 var $152;
 var $153;
 var $__mb_0;
 var $154=(($__iob+4)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$152&1;
 var $157=(($156<<24)>>24)==0;
 if($157){label=49;break;}else{label=48;break;}
 case 48: 
 var $159=(($__digits+8)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(($__digits+4)|0);
 var $162=HEAP32[(($161)>>2)];
 var $169=$162;var $168=$160;label=50;break;
 case 49: 
 var $164=$__digits;
 var $165=(($164+1)|0);
 var $166=($152&255);
 var $167=$166>>>1;
 var $169=$167;var $168=$165;label=50;break;
 case 50: 
 var $168;
 var $169;
 var $170=(($168+$169)|0);
 var $171=HEAP8[($__dp)];
 var $172=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$155,$168,$170,$28,$57,$tmpcast,$171,$172,$__grp,$__sym,$__sn,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=45;break; }
 case 51: 
 var $174=(($__s)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($1)|0);
 HEAP32[(($176)>>2)]=$175;
 var $177=HEAP32[(($__mi)>>2)];
 var $178=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$1,$__mb_0,$177,$178,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=45;break; }
 case 52: 
 var $180=($153|0)==0;
 if($180){label=54;break;}else{label=53;break;}
 case 53: 
 _free($153);
 label=54;break;
 case 54: 
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $182=HEAP32[(($2)>>2)];
 var $183=(($182)|0);
 var $184=__ZNSt3__114__shared_count16__release_sharedEv($183);
 STACKTOP=sp;return;
 case 55: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=56;break;
 case 56: 
 var $_12;
 var $_1;
 var $186=HEAP32[(($2)>>2)];
 var $187=(($186)|0);
 var $188=__ZNSt3__114__shared_count16__release_sharedEv($187);
 var $189$0=$_1;
 var $189$1=0;
 var $190$0=$189$0;
 var $190$1=$_12;
 ___resumeException($190$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+544)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(528);
 var $__pat=(sp)+(536);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__buf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 HEAP32[(($__bb)>>2)]=$2;
 var $3=$__digits;
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 var $4=(($__digits)|0);
 var $5=_snprintf($2,100,2648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=($5>>>0)>99;
 if($6){label=2;break;}else{var $__db_0=$4;var $__n_0=$5;var $41=0;var $40=0;label=15;break;}
 case 2: 
 var $8=HEAP8[(15936)];
 var $9=(($8<<24)>>24)==0;
 if($9){label=3;break;}else{label=7;break;}
 case 3: 
 var $11=___cxa_guard_acquire(15936);
 var $12=($11|0)==0;
 if($12){label=7;break;}else{label=4;break;}
 case 4: 
 var $14=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((13832)>>2)]=$14;

 label=7;break;
 case 6: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;

 var $eh_lpad_body$1=$17$1;var $eh_lpad_body$0=$17$0;var $30=0;var $29=0;label=12;break;
 case 7: 
 var $19=HEAP32[((13832)>>2)];
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$19,2648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $27=0;var $26=0;label=11;break; }
 case 8: 
 var $22=HEAP32[(($__bb)>>2)];
 var $23=($22|0)==0;
 if($23){label=9;break;}else{var $33=$22;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $27=0;var $26=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $33=$_pre;label=13;break;
 case 11: 
 var $26;
 var $27;
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $eh_lpad_body$1=$28$1;var $eh_lpad_body$0=$28$0;var $30=$27;var $29=$26;label=12;break;
 case 12: 
 var $29;
 var $30;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $31=$eh_lpad_body$0;
 var $32=$eh_lpad_body$1;
 var $_2=$31;var $_23=$32;var $195=$30;var $194=$29;label=60;break;
 case 13: 
 var $33;
 var $34=$20<<2;
 var $35=_malloc($34);
 var $36=$35;
 var $37=($35|0)==0;
 if($37){label=14;break;}else{var $__db_0=$36;var $__n_0=$20;var $41=$36;var $40=$33;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=0;var $__n_0=$20;var $41=0;var $40=$33;label=15;break; } else { var $27=0;var $26=$33;label=11;break; }
 case 15: 
 var $40;
 var $41;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $27=$41;var $26=$40;label=11;break; }
 case 16: 
 var $43=(($__loc)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$__p_i_i_i_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $46=HEAP32[((15368)>>2)];
 var $47=($46|0)==-1;
 if($47){label=18;break;}else{label=17;break;}
 case 17: 
 var $49=(($__p_i_i_i_i)|0);
 HEAP32[(($49)>>2)]=15368;
 var $50=(($__p_i_i_i_i+4)|0);
 HEAP32[(($50)>>2)]=(26);
 var $51=(($__p_i_i_i_i+8)|0);
 HEAP32[(($51)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$45,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=45;break; }
 case 18: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $52=HEAP32[((15372)>>2)];
 var $53=((($52)-(1))|0);
 var $54=(($44+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($44+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$55;
 var $59=$57;
 var $60=((($58)-($59))|0);
 var $61=$60>>2;
 var $62=($61>>>0)>($53>>>0);
 if($62){label=19;break;}else{label=20;break;}
 case 19: 
 var $63=(($57+($53<<2))|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)==0;
 if($65){label=20;break;}else{label=22;break;}
 case 20: 
 var $66=___cxa_allocate_exception(4);
 var $67=$66;
 __ZNSt8bad_castC2Ev($67);
 (function() { try { __THREW__ = 0; return ___cxa_throw($66,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=45;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $69=$64;
 var $70=HEAP32[(($__bb)>>2)];
 var $71=(($70+$__n_0)|0);
 var $72=$64;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+48)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($69,$70,$71,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=45;break; }
 case 23: 
 var $77=($__n_0|0)==0;
 if($77){var $83=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $79=HEAP32[(($__bb)>>2)];
 var $80=HEAP8[($79)];
 var $81=(($80<<24)>>24)==45;
 var $83=$81;label=25;break;
 case 25: 
 var $83;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i6=$__sym;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 var $this2_i_i_i7=$__sn;
 HEAP32[(($this2_i_i_i7)>>2)]=0; HEAP32[((($this2_i_i_i7)+(4))>>2)]=0; HEAP32[((($this2_i_i_i7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$83,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=46;break; }
 case 26: 
 var $85=$__mbuf;
 var $$etemp$4$0=400;
 var $$etemp$4$1=0;

 var $86=(($__mbuf)|0);
 var $87=HEAP32[(($__fd)>>2)];
 var $88=($__n_0|0)>($87|0);
 if($88){label=27;break;}else{label=34;break;}
 case 27: 
 var $90=((($__n_0)-($87))|0);
 var $91=$90<<1;
 var $92=HEAP8[($this2_i_i_i7)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=29;break;}else{label=28;break;}
 case 28: 
 var $96=(($__sn+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $101=$97;label=30;break;
 case 29: 
 var $99=($92&255);
 var $100=$99>>>1;
 var $101=$100;label=30;break;
 case 30: 
 var $101;
 var $102=HEAP8[($this2_i_i_i6)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=32;break;}else{label=31;break;}
 case 31: 
 var $106=(($__sym+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $111=$107;label=33;break;
 case 32: 
 var $109=($102&255);
 var $110=$109>>>1;
 var $111=$110;label=33;break;
 case 33: 
 var $111;
 var $112=$91|1;
 var $113=((($101)+($112))|0);
 var $114=((($113)+($111))|0);
 var $_pn=$114;label=41;break;
 case 34: 
 var $116=HEAP8[($this2_i_i_i7)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=36;break;}else{label=35;break;}
 case 35: 
 var $120=(($__sn+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $125=$121;label=37;break;
 case 36: 
 var $123=($116&255);
 var $124=$123>>>1;
 var $125=$124;label=37;break;
 case 37: 
 var $125;
 var $126=HEAP8[($this2_i_i_i6)];
 var $127=$126&1;
 var $128=(($127<<24)>>24)==0;
 if($128){label=39;break;}else{label=38;break;}
 case 38: 
 var $130=(($__sym+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $135=$131;label=40;break;
 case 39: 
 var $133=($126&255);
 var $134=$133>>>1;
 var $135=$134;label=40;break;
 case 40: 
 var $135;
 var $136=((($125)+(2))|0);
 var $137=((($136)+($135))|0);
 var $_pn=$137;label=41;break;
 case 41: 
 var $_pn;
 var $139=((($_pn)+($87))|0);
 var $140=($139>>>0)>100;
 if($140){label=42;break;}else{var $__mb_0=$86;var $165=0;label=49;break;}
 case 42: 
 var $141=$139<<2;
 var $142=_malloc($141);
 var $143=$142;
 var $144=($142|0)==0;
 if($144){label=43;break;}else{var $__mb_0=$143;var $165=$143;label=49;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=0;var $165=0;label=49;break; } else { label=44;break; }
 case 44: 
 var $146$0 = ___cxa_find_matching_catch(-1, -1); var $146$1 = tempRet0;
 var $147=$146$0;
 var $148=$146$1;
 var $_0=$147;var $_01=$148;label=58;break;
 case 45: 
 var $150$0 = ___cxa_find_matching_catch(-1, -1); var $150$1 = tempRet0;
 var $151=$150$0;
 var $152=$150$1;
 var $_1=$151;var $_12=$152;label=59;break;
 case 46: 
 var $154$0 = ___cxa_find_matching_catch(-1, -1); var $154$1 = tempRet0;
 var $155=$154$0;
 var $156=$154$1;
 var $_0=$155;var $_01=$156;label=58;break;
 case 47: 
 var $158$0 = ___cxa_find_matching_catch(-1, -1); var $158$1 = tempRet0;
 var $159=$158$0;
 var $160=$158$1;
 var $161=($165|0)==0;
 if($161){var $_0=$159;var $_01=$160;label=58;break;}else{label=48;break;}
 case 48: 
 var $163=$165;
 _free($163);
 var $_0=$159;var $_01=$160;label=58;break;
 case 49: 
 var $165;
 var $__mb_0;
 var $166=(($__iob+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($__db_0+($__n_0<<2))|0);
 var $169=HEAP32[(($__dp)>>2)];
 var $170=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$167,$__db_0,$168,$69,$83,$tmpcast,$169,$170,$__grp,$__sym,$__sn,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=47;break; }
 case 50: 
 var $172=(($__s)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($1)|0);
 HEAP32[(($174)>>2)]=$173;
 var $175=HEAP32[(($__mi)>>2)];
 var $176=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$1,$__mb_0,$175,$176,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=47;break; }
 case 51: 
 var $178=($165|0)==0;
 if($178){label=53;break;}else{label=52;break;}
 case 52: 
 var $180=$165;
 _free($180);
 label=53;break;
 case 53: 
 var $$etemp$5$0=400;
 var $$etemp$5$1=0;

 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $181=HEAP32[(($43)>>2)];
 var $182=(($181)|0);
 var $183=__ZNSt3__114__shared_count16__release_sharedEv($182);
 var $184=($41|0)==0;
 if($184){label=55;break;}else{label=54;break;}
 case 54: 
 var $186=$41;
 _free($186);
 label=55;break;
 case 55: 
 var $187=($40|0)==0;
 if($187){label=57;break;}else{label=56;break;}
 case 56: 
 _free($40);
 label=57;break;
 case 57: 
 var $$etemp$6$0=400;
 var $$etemp$6$1=0;

 var $$etemp$7$0=100;
 var $$etemp$7$1=0;

 STACKTOP=sp;return;
 case 58: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=59;break;
 case 59: 
 var $_12;
 var $_1;
 var $190=HEAP32[(($43)>>2)];
 var $191=(($190)|0);
 var $192=__ZNSt3__114__shared_count16__release_sharedEv($191);
 var $_2=$_1;var $_23=$_12;var $195=$41;var $194=$40;label=60;break;
 case 60: 
 var $194;
 var $195;
 var $_23;
 var $_2;
 var $196=($195|0)==0;
 if($196){label=62;break;}else{label=61;break;}
 case 61: 
 var $198=$195;
 _free($198);
 label=62;break;
 case 62: 
 var $199=($194|0)==0;
 if($199){label=64;break;}else{label=63;break;}
 case 63: 
 _free($194);
 label=64;break;
 case 64: 
 var $201$0=$_2;
 var $201$1=0;
 var $202$0=$201$0;
 var $202$1=$_23;
 ___resumeException($202$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i8=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast3=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast2=$3;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast1=$7;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$9;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=(($__loc)|0);
 var $14=HEAP32[(($13)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $16=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $17=HEAP32[((15832)>>2)];
 var $18=($17|0)==-1;
 if($18){label=4;break;}else{label=3;break;}
 case 3: 
 var $20=(($__p_i_i_i_i)|0);
 HEAP32[(($20)>>2)]=15832;
 var $21=(($__p_i_i_i_i+4)|0);
 HEAP32[(($21)>>2)]=(26);
 var $22=(($__p_i_i_i_i+8)|0);
 HEAP32[(($22)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15832,$16,266);
 label=4;break;
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $23=HEAP32[((15836)>>2)];
 var $24=((($23)-(1))|0);
 var $25=(($14+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($14+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$26;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=$31>>2;
 var $33=($32>>>0)>($24>>>0);
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $34=(($28+($24<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 __ZNSt8bad_castC2Ev($38);
 ___cxa_throw($37,10104,(378));
 throw "Reached an unreachable!";
 case 7: 
 var $39=$35;
 var $40=$35;
 var $41=HEAP32[(($40)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $43=(($41+44)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($tmpcast3,$39);
 var $45=$__pat;
 var $46=HEAP32[(($1)>>2)];
 tempBigInt=$46;HEAP8[($45)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(3))|0)]=tempBigInt&0xff;
 var $47=$35;
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+32)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($2,$39);
 var $51=$__sn;
 var $52=HEAP8[($51)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=10;break;}else{label=9;break;}
 case 9: 
 var $56=(($__sn+8)|0);
 var $57=HEAP32[(($56)>>2)];
 HEAP32[(($57)>>2)]=0;
 var $58=(($__sn+4)|0);
 HEAP32[(($58)>>2)]=0;
 label=11;break;
 case 10: 
 var $60=(($__sn+4)|0);
 HEAP32[(($60)>>2)]=0;
 HEAP8[($51)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $62$0 = ___cxa_find_matching_catch(-1, -1,0); var $62$1 = tempRet0;
 var $63=$62$0;
 ___clang_call_terminate($63);
 throw "Reached an unreachable!";
 case 13: 
 var $64=$2;
 assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];
 HEAP32[(($64)>>2)]=0; HEAP32[((($64)+(4))>>2)]=0; HEAP32[((($64)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
 label=20;break;
 case 14: 
 var $66=(($41+40)|0);
 var $67=HEAP32[(($66)>>2)];
 FUNCTION_TABLE[$67]($tmpcast2,$39);
 var $68=$__pat;
 var $69=HEAP32[(($3)>>2)];
 tempBigInt=$69;HEAP8[($68)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($68)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($68)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($68)+(3))|0)]=tempBigInt&0xff;
 var $70=$35;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+28)|0);
 var $73=HEAP32[(($72)>>2)];
 FUNCTION_TABLE[$73]($4,$39);
 var $74=$__sn;
 var $75=HEAP8[($74)];
 var $76=$75&1;
 var $77=(($76<<24)>>24)==0;
 if($77){label=16;break;}else{label=15;break;}
 case 15: 
 var $79=(($__sn+8)|0);
 var $80=HEAP32[(($79)>>2)];
 HEAP32[(($80)>>2)]=0;
 var $81=(($__sn+4)|0);
 HEAP32[(($81)>>2)]=0;
 label=17;break;
 case 16: 
 var $83=(($__sn+4)|0);
 HEAP32[(($83)>>2)]=0;
 HEAP8[($74)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1,0); var $85$1 = tempRet0;
 var $86=$85$0;
 ___clang_call_terminate($86);
 throw "Reached an unreachable!";
 case 19: 
 var $87=$4;
 assert(12 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];HEAP32[((($74)+(8))>>2)]=HEAP32[((($87)+(8))>>2)];
 HEAP32[(($87)>>2)]=0; HEAP32[((($87)+(4))>>2)]=0; HEAP32[((($87)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
 label=20;break;
 case 20: 
 var $89=$35;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=FUNCTION_TABLE[$92]($39);
 HEAP32[(($__dp)>>2)]=$93;
 var $94=HEAP32[(($89)>>2)];
 var $95=(($94+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=FUNCTION_TABLE[$96]($39);
 HEAP32[(($__ts)>>2)]=$97;
 var $98=$35;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+20)|0);
 var $101=HEAP32[(($100)>>2)];
 FUNCTION_TABLE[$101]($5,$39);
 var $102=$__grp;
 var $103=HEAP8[($102)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=22;break;}else{label=21;break;}
 case 21: 
 var $107=(($__grp+8)|0);
 var $108=HEAP32[(($107)>>2)];
 HEAP8[($108)]=0;
 var $109=(($__grp+4)|0);
 HEAP32[(($109)>>2)]=0;
 label=23;break;
 case 22: 
 var $111=$__grp;
 var $112=(($111+1)|0);
 HEAP8[($112)]=0;
 HEAP8[($102)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $114$0 = ___cxa_find_matching_catch(-1, -1,0); var $114$1 = tempRet0;
 var $115=$114$0;
 ___clang_call_terminate($115);
 throw "Reached an unreachable!";
 case 25: 
 var $116=$5;
 assert(12 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($116)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($116)+(4))>>2)];HEAP32[((($102)+(8))>>2)]=HEAP32[((($116)+(8))>>2)];
 HEAP32[(($116)>>2)]=0; HEAP32[((($116)+(4))>>2)]=0; HEAP32[((($116)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 var $117=$35;
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118+24)|0);
 var $120=HEAP32[(($119)>>2)];
 FUNCTION_TABLE[$120]($6,$39);
 var $121=$__sym;
 var $122=HEAP8[($121)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=27;break;}else{label=26;break;}
 case 26: 
 var $126=(($__sym+8)|0);
 var $127=HEAP32[(($126)>>2)];
 HEAP32[(($127)>>2)]=0;
 var $128=(($__sym+4)|0);
 HEAP32[(($128)>>2)]=0;
 label=28;break;
 case 27: 
 var $130=(($__sym+4)|0);
 HEAP32[(($130)>>2)]=0;
 HEAP8[($121)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $132$0 = ___cxa_find_matching_catch(-1, -1,0); var $132$1 = tempRet0;
 var $133=$132$0;
 ___clang_call_terminate($133);
 throw "Reached an unreachable!";
 case 30: 
 var $134=$6;
 assert(12 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($134)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($134)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($134)+(8))>>2)];
 HEAP32[(($134)>>2)]=0; HEAP32[((($134)+(4))>>2)]=0; HEAP32[((($134)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
 var $135=HEAP32[(($89)>>2)];
 var $136=(($135+36)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=FUNCTION_TABLE[$137]($39);
 var $storemerge=$138;label=60;break;
 case 31: 
 var $140=$__p_i_i_i_i8;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $141=HEAP32[((15840)>>2)];
 var $142=($141|0)==-1;
 if($142){label=33;break;}else{label=32;break;}
 case 32: 
 var $144=(($__p_i_i_i_i8)|0);
 HEAP32[(($144)>>2)]=15840;
 var $145=(($__p_i_i_i_i8+4)|0);
 HEAP32[(($145)>>2)]=(26);
 var $146=(($__p_i_i_i_i8+8)|0);
 HEAP32[(($146)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(15840,$140,266);
 label=33;break;
 case 33: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $147=HEAP32[((15844)>>2)];
 var $148=((($147)-(1))|0);
 var $149=(($14+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($14+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$150;
 var $154=$152;
 var $155=((($153)-($154))|0);
 var $156=$155>>2;
 var $157=($156>>>0)>($148>>>0);
 if($157){label=34;break;}else{label=35;break;}
 case 34: 
 var $158=(($152+($148<<2))|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($159|0)==0;
 if($160){label=35;break;}else{label=36;break;}
 case 35: 
 var $161=___cxa_allocate_exception(4);
 var $162=$161;
 __ZNSt8bad_castC2Ev($162);
 ___cxa_throw($161,10104,(378));
 throw "Reached an unreachable!";
 case 36: 
 var $163=$159;
 var $164=$159;
 var $165=HEAP32[(($164)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $167=(($165+44)|0);
 var $168=HEAP32[(($167)>>2)];
 FUNCTION_TABLE[$168]($tmpcast1,$163);
 var $169=$__pat;
 var $170=HEAP32[(($7)>>2)];
 tempBigInt=$170;HEAP8[($169)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($169)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($169)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($169)+(3))|0)]=tempBigInt&0xff;
 var $171=$159;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+32)|0);
 var $174=HEAP32[(($173)>>2)];
 FUNCTION_TABLE[$174]($8,$163);
 var $175=$__sn;
 var $176=HEAP8[($175)];
 var $177=$176&1;
 var $178=(($177<<24)>>24)==0;
 if($178){label=39;break;}else{label=38;break;}
 case 38: 
 var $180=(($__sn+8)|0);
 var $181=HEAP32[(($180)>>2)];
 HEAP32[(($181)>>2)]=0;
 var $182=(($__sn+4)|0);
 HEAP32[(($182)>>2)]=0;
 label=40;break;
 case 39: 
 var $184=(($__sn+4)|0);
 HEAP32[(($184)>>2)]=0;
 HEAP8[($175)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $186$0 = ___cxa_find_matching_catch(-1, -1,0); var $186$1 = tempRet0;
 var $187=$186$0;
 ___clang_call_terminate($187);
 throw "Reached an unreachable!";
 case 42: 
 var $188=$8;
 assert(12 % 1 === 0);HEAP32[(($175)>>2)]=HEAP32[(($188)>>2)];HEAP32[((($175)+(4))>>2)]=HEAP32[((($188)+(4))>>2)];HEAP32[((($175)+(8))>>2)]=HEAP32[((($188)+(8))>>2)];
 HEAP32[(($188)>>2)]=0; HEAP32[((($188)+(4))>>2)]=0; HEAP32[((($188)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
 label=49;break;
 case 43: 
 var $190=(($165+40)|0);
 var $191=HEAP32[(($190)>>2)];
 FUNCTION_TABLE[$191]($tmpcast,$163);
 var $192=$__pat;
 var $193=HEAP32[(($9)>>2)];
 tempBigInt=$193;HEAP8[($192)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($192)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($192)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($192)+(3))|0)]=tempBigInt&0xff;
 var $194=$159;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+28)|0);
 var $197=HEAP32[(($196)>>2)];
 FUNCTION_TABLE[$197]($10,$163);
 var $198=$__sn;
 var $199=HEAP8[($198)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=45;break;}else{label=44;break;}
 case 44: 
 var $203=(($__sn+8)|0);
 var $204=HEAP32[(($203)>>2)];
 HEAP32[(($204)>>2)]=0;
 var $205=(($__sn+4)|0);
 HEAP32[(($205)>>2)]=0;
 label=46;break;
 case 45: 
 var $207=(($__sn+4)|0);
 HEAP32[(($207)>>2)]=0;
 HEAP8[($198)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $209$0 = ___cxa_find_matching_catch(-1, -1,0); var $209$1 = tempRet0;
 var $210=$209$0;
 ___clang_call_terminate($210);
 throw "Reached an unreachable!";
 case 48: 
 var $211=$10;
 assert(12 % 1 === 0);HEAP32[(($198)>>2)]=HEAP32[(($211)>>2)];HEAP32[((($198)+(4))>>2)]=HEAP32[((($211)+(4))>>2)];HEAP32[((($198)+(8))>>2)]=HEAP32[((($211)+(8))>>2)];
 HEAP32[(($211)>>2)]=0; HEAP32[((($211)+(4))>>2)]=0; HEAP32[((($211)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($10);
 label=49;break;
 case 49: 
 var $213=$159;
 var $214=HEAP32[(($213)>>2)];
 var $215=(($214+12)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=FUNCTION_TABLE[$216]($163);
 HEAP32[(($__dp)>>2)]=$217;
 var $218=HEAP32[(($213)>>2)];
 var $219=(($218+16)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=FUNCTION_TABLE[$220]($163);
 HEAP32[(($__ts)>>2)]=$221;
 var $222=$159;
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+20)|0);
 var $225=HEAP32[(($224)>>2)];
 FUNCTION_TABLE[$225]($11,$163);
 var $226=$__grp;
 var $227=HEAP8[($226)];
 var $228=$227&1;
 var $229=(($228<<24)>>24)==0;
 if($229){label=51;break;}else{label=50;break;}
 case 50: 
 var $231=(($__grp+8)|0);
 var $232=HEAP32[(($231)>>2)];
 HEAP8[($232)]=0;
 var $233=(($__grp+4)|0);
 HEAP32[(($233)>>2)]=0;
 label=52;break;
 case 51: 
 var $235=$__grp;
 var $236=(($235+1)|0);
 HEAP8[($236)]=0;
 HEAP8[($226)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $238$0 = ___cxa_find_matching_catch(-1, -1,0); var $238$1 = tempRet0;
 var $239=$238$0;
 ___clang_call_terminate($239);
 throw "Reached an unreachable!";
 case 54: 
 var $240=$11;
 assert(12 % 1 === 0);HEAP32[(($226)>>2)]=HEAP32[(($240)>>2)];HEAP32[((($226)+(4))>>2)]=HEAP32[((($240)+(4))>>2)];HEAP32[((($226)+(8))>>2)]=HEAP32[((($240)+(8))>>2)];
 HEAP32[(($240)>>2)]=0; HEAP32[((($240)+(4))>>2)]=0; HEAP32[((($240)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
 var $241=$159;
 var $242=HEAP32[(($241)>>2)];
 var $243=(($242+24)|0);
 var $244=HEAP32[(($243)>>2)];
 FUNCTION_TABLE[$244]($12,$163);
 var $245=$__sym;
 var $246=HEAP8[($245)];
 var $247=$246&1;
 var $248=(($247<<24)>>24)==0;
 if($248){label=56;break;}else{label=55;break;}
 case 55: 
 var $250=(($__sym+8)|0);
 var $251=HEAP32[(($250)>>2)];
 HEAP32[(($251)>>2)]=0;
 var $252=(($__sym+4)|0);
 HEAP32[(($252)>>2)]=0;
 label=57;break;
 case 56: 
 var $254=(($__sym+4)|0);
 HEAP32[(($254)>>2)]=0;
 HEAP8[($245)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $256$0 = ___cxa_find_matching_catch(-1, -1,0); var $256$1 = tempRet0;
 var $257=$256$0;
 ___clang_call_terminate($257);
 throw "Reached an unreachable!";
 case 59: 
 var $258=$12;
 assert(12 % 1 === 0);HEAP32[(($245)>>2)]=HEAP32[(($258)>>2)];HEAP32[((($245)+(4))>>2)]=HEAP32[((($258)+(4))>>2)];HEAP32[((($245)+(8))>>2)]=HEAP32[((($258)+(8))>>2)];
 HEAP32[(($258)>>2)]=0; HEAP32[((($258)+(4))>>2)]=0; HEAP32[((($258)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($12);
 var $259=HEAP32[(($213)>>2)];
 var $260=(($259+36)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=FUNCTION_TABLE[$261]($163);
 var $storemerge=$262;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=(($__sn+4)|0);
 var $4=(($__sn+8)|0);
 var $5=$__sym;
 var $6=$__flags&512;
 var $7=($6|0)==0;
 var $8=(($__sym+4)|0);
 var $9=(($__sym+8)|0);
 var $10=($__fd|0)>0;
 var $11=$__grp;
 var $12=$__grp;
 var $13=(($12+1)|0);
 var $14=(($__grp+8)|0);
 var $15=(($__grp+4)|0);
 var $16=$__ct;
 var $__p_058=0;var $_059=$__db;label=2;break;
 case 2: 
 var $_059;
 var $__p_058;
 var $18=(($__pat+$__p_058)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 switch(($20|0)){case 2:{ label=12;break;}case 4:{ label=25;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_059;label=62;break;}}break;
 case 3: 
 var $22=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$22;
 var $_2=$_059;label=62;break;
 case 4: 
 var $24=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$24;
 var $25=HEAP32[(($1)>>2)];
 var $26=(($25+44)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($__ct,32);
 var $29=HEAP32[(($__me)>>2)];
 var $30=(($29+4)|0);
 HEAP32[(($__me)>>2)]=$30;
 HEAP32[(($29)>>2)]=$28;
 var $_2=$_059;label=62;break;
 case 5: 
 var $32=HEAP8[($2)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=7;break;}else{label=6;break;}
 case 6: 
 var $36=HEAP32[(($3)>>2)];
 var $40=$36;label=8;break;
 case 7: 
 var $38=($32&255);
 var $39=$38>>>1;
 var $40=$39;label=8;break;
 case 8: 
 var $40;
 var $41=($40|0)==0;
 if($41){var $_2=$_059;label=62;break;}else{label=9;break;}
 case 9: 
 if($34){var $45=$3;label=11;break;}else{label=10;break;}
 case 10: 
 var $44=HEAP32[(($4)>>2)];
 var $45=$44;label=11;break;
 case 11: 
 var $45;
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__me)>>2)];
 var $48=(($47+4)|0);
 HEAP32[(($__me)>>2)]=$48;
 HEAP32[(($47)>>2)]=$46;
 var $_2=$_059;label=62;break;
 case 12: 
 var $50=HEAP8[($5)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=14;break;}else{label=13;break;}
 case 13: 
 var $54=HEAP32[(($8)>>2)];
 var $58=$54;label=15;break;
 case 14: 
 var $56=($50&255);
 var $57=$56>>>1;
 var $58=$57;label=15;break;
 case 15: 
 var $58;
 var $59=($58|0)==0;
 var $brmerge=$59|$7;
 if($brmerge){var $_2=$_059;label=62;break;}else{label=16;break;}
 case 16: 
 if($52){label=18;break;}else{label=17;break;}
 case 17: 
 var $62=HEAP32[(($9)>>2)];
 var $63=HEAP32[(($8)>>2)];
 var $69=$63;var $68=$62;var $67=$62;label=19;break;
 case 18: 
 var $65=($50&255);
 var $66=$65>>>1;
 var $69=$66;var $68=$8;var $67=$8;label=19;break;
 case 19: 
 var $67;
 var $68;
 var $69;
 var $70=(($68+($69<<2))|0);
 var $71=HEAP32[(($__me)>>2)];
 var $72=($67|0)==($70|0);
 if($72){var $_0_lcssa_i_i22=$71;label=24;break;}else{label=20;break;}
 case 20: 
 var $_promoted4_i_i13=$67;
 var $_sum33=((($69)-(1))|0);
 var $scevgep_i_i14=(($68+($_sum33<<2))|0);
 var $scevgep3_i_i15=$scevgep_i_i14;
 var $73=(((-$_promoted4_i_i13))|0);
 var $uglygep_i_i16=(($scevgep3_i_i15+$73)|0);
 var $uglygep5_i_i17=$uglygep_i_i16;
 var $74=$uglygep5_i_i17>>>2;
 var $_01_i_i19=$71;var $76=$67;label=21;break;
 case 21: 
 var $76;
 var $_01_i_i19;
 var $77=HEAP32[(($76)>>2)];
 HEAP32[(($_01_i_i19)>>2)]=$77;
 var $78=(($76+4)|0);
 var $79=($78|0)==($70|0);
 if($79){label=23;break;}else{label=22;break;}
 case 22: 
 var $80=(($_01_i_i19+4)|0);
 var $_01_i_i19=$80;var $76=$78;label=21;break;
 case 23: 
 var $81=((($74)+(1))|0);
 var $scevgep6_i_i20=(($71+($81<<2))|0);
 var $_0_lcssa_i_i22=$scevgep6_i_i20;label=24;break;
 case 24: 
 var $_0_lcssa_i_i22;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i22;
 var $_2=$_059;label=62;break;
 case 25: 
 var $83=HEAP32[(($__me)>>2)];
 var $84=(($_059+4)|0);
 var $__0=($__neg?$84:$_059);
 var $85=($__0>>>0)<($__de>>>0);
 if($85){var $__d_034=$__0;label=27;break;}else{var $__d_0_lcssa=$__0;label=28;break;}
 case 26: 
 var $87=($93>>>0)<($__de>>>0);
 if($87){var $__d_034=$93;label=27;break;}else{var $__d_0_lcssa=$93;label=28;break;}
 case 27: 
 var $__d_034;
 var $88=HEAP32[(($__d_034)>>2)];
 var $89=HEAP32[(($16)>>2)];
 var $90=(($89+12)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=FUNCTION_TABLE[$91]($__ct,2048,$88);
 var $93=(($__d_034+4)|0);
 if($92){label=26;break;}else{var $__d_0_lcssa=$__d_034;label=28;break;}
 case 28: 
 var $__d_0_lcssa;
 if($10){label=29;break;}else{var $__d_2=$__d_0_lcssa;label=38;break;}
 case 29: 
 var $94=($__d_0_lcssa>>>0)>($__0>>>0);
 if($94){label=30;break;}else{var $__f_0_lcssa77=$__fd;var $__d_1_lcssa79=$__d_0_lcssa;label=34;break;}
 case 30: 
 var $__me_promoted=HEAP32[(($__me)>>2)];
 var $__d_137=$__d_0_lcssa;var $__f_038=$__fd;var $96=$__me_promoted;label=31;break;
 case 31: 
 var $96;
 var $__f_038;
 var $__d_137;
 var $97=((($__d_137)-(4))|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($96+4)|0);
 HEAP32[(($96)>>2)]=$98;
 var $100=((($__f_038)-(1))|0);
 var $101=($97>>>0)>($__0>>>0);
 var $102=($100|0)>0;
 var $or_cond=$101&$102;
 if($or_cond){var $__d_137=$97;var $__f_038=$100;var $96=$99;label=31;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($__me)>>2)]=$99;
 if($102){var $__f_0_lcssa77=$100;var $__d_1_lcssa79=$97;label=34;break;}else{label=33;break;}
 case 33: 
 var $103=HEAP32[(($__me)>>2)];
 var $104=(($103+4)|0);
 HEAP32[(($__me)>>2)]=$104;
 var $_lcssa44=$103;var $__d_1_lcssa7880=$97;label=37;break;
 case 34: 
 var $__d_1_lcssa79;
 var $__f_0_lcssa77;
 var $105=HEAP32[(($1)>>2)];
 var $106=(($105+44)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=FUNCTION_TABLE[$107]($__ct,48);
 var $109=($__f_0_lcssa77|0)>0;
 var $110=HEAP32[(($__me)>>2)];
 var $111=(($110+4)|0);
 HEAP32[(($__me)>>2)]=$111;
 if($109){var $__f_145=$__f_0_lcssa77;var $113=$110;var $112=$111;label=35;break;}else{var $_lcssa44=$110;var $__d_1_lcssa7880=$__d_1_lcssa79;label=37;break;}
 case 35: 
 var $112;
 var $113;
 var $__f_145;
 HEAP32[(($113)>>2)]=$108;
 var $114=((($__f_145)-(1))|0);
 var $115=($114|0)>0;
 var $116=(($112+4)|0);
 if($115){var $__f_145=$114;var $113=$112;var $112=$116;label=35;break;}else{label=36;break;}
 case 36: 
 var $_sum75=((($__f_0_lcssa77)+(1))|0);
 var $scevgep=(($110+($_sum75<<2))|0);
 var $scevgep70=(($110+($__f_0_lcssa77<<2))|0);
 HEAP32[(($__me)>>2)]=$scevgep;
 var $_lcssa44=$scevgep70;var $__d_1_lcssa7880=$__d_1_lcssa79;label=37;break;
 case 37: 
 var $__d_1_lcssa7880;
 var $_lcssa44;
 HEAP32[(($_lcssa44)>>2)]=$__dp;
 var $__d_2=$__d_1_lcssa7880;label=38;break;
 case 38: 
 var $__d_2;
 var $119=($__d_2|0)==($__0|0);
 if($119){label=39;break;}else{label=40;break;}
 case 39: 
 var $121=HEAP32[(($1)>>2)];
 var $122=(($121+44)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=FUNCTION_TABLE[$123]($__ct,48);
 var $125=HEAP32[(($__me)>>2)];
 var $126=(($125+4)|0);
 HEAP32[(($__me)>>2)]=$126;
 HEAP32[(($125)>>2)]=$124;
 var $179=$126;label=59;break;
 case 40: 
 var $128=HEAP8[($11)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=42;break;}else{label=41;break;}
 case 41: 
 var $132=HEAP32[(($15)>>2)];
 var $136=$132;label=43;break;
 case 42: 
 var $134=($128&255);
 var $135=$134>>>1;
 var $136=$135;label=43;break;
 case 43: 
 var $136;
 var $137=($136|0)==0;
 if($137){var $__d_353=$__d_2;var $__ng_054=0;var $__ig_055=0;var $__gl_056=-1;label=47;break;}else{label=44;break;}
 case 44: 
 if($130){var $141=$13;label=46;break;}else{label=45;break;}
 case 45: 
 var $140=HEAP32[(($14)>>2)];
 var $141=$140;label=46;break;
 case 46: 
 var $141;
 var $142=HEAP8[($141)];
 var $143=(($142<<24)>>24);
 var $__d_353=$__d_2;var $__ng_054=0;var $__ig_055=0;var $__gl_056=$143;label=47;break;
 case 47: 
 var $__gl_056;
 var $__ig_055;
 var $__ng_054;
 var $__d_353;
 var $144=($__ng_054|0)==($__gl_056|0);
 var $145=HEAP32[(($__me)>>2)];
 if($144){label=48;break;}else{var $__gl_1=$__gl_056;var $__ig_1=$__ig_055;var $__ng_1=$__ng_054;var $173=$145;label=58;break;}
 case 48: 
 var $147=(($145+4)|0);
 HEAP32[(($__me)>>2)]=$147;
 HEAP32[(($145)>>2)]=$__ts;
 var $148=((($__ig_055)+(1))|0);
 var $149=HEAP8[($11)];
 var $150=$149&1;
 var $151=(($150<<24)>>24)==0;
 if($151){label=50;break;}else{label=49;break;}
 case 49: 
 var $153=HEAP32[(($15)>>2)];
 var $157=$153;label=51;break;
 case 50: 
 var $155=($149&255);
 var $156=$155>>>1;
 var $157=$156;label=51;break;
 case 51: 
 var $157;
 var $158=($148>>>0)<($157>>>0);
 if($158){label=52;break;}else{var $__gl_1=$__gl_056;var $__ig_1=$148;var $__ng_1=0;var $173=$147;label=58;break;}
 case 52: 
 if($151){var $162=$13;label=54;break;}else{label=53;break;}
 case 53: 
 var $161=HEAP32[(($14)>>2)];
 var $162=$161;label=54;break;
 case 54: 
 var $162;
 var $163=(($162+$148)|0);
 var $164=HEAP8[($163)];
 var $165=(($164<<24)>>24)==127;
 if($165){var $__gl_1=-1;var $__ig_1=$148;var $__ng_1=0;var $173=$147;label=58;break;}else{label=55;break;}
 case 55: 
 if($151){var $169=$13;label=57;break;}else{label=56;break;}
 case 56: 
 var $168=HEAP32[(($14)>>2)];
 var $169=$168;label=57;break;
 case 57: 
 var $169;
 var $170=(($169+$148)|0);
 var $171=HEAP8[($170)];
 var $172=(($171<<24)>>24);
 var $__gl_1=$172;var $__ig_1=$148;var $__ng_1=0;var $173=$147;label=58;break;
 case 58: 
 var $173;
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $174=((($__d_353)-(4))|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($173+4)|0);
 HEAP32[(($__me)>>2)]=$176;
 HEAP32[(($173)>>2)]=$175;
 var $177=((($__ng_1)+(1))|0);
 var $178=($174|0)==($__0|0);
 if($178){var $179=$176;label=59;break;}else{var $__d_353=$174;var $__ng_054=$177;var $__ig_055=$__ig_1;var $__gl_056=$__gl_1;label=47;break;}
 case 59: 
 var $179;
 var $180=($83|0)==($179|0);
 if($180){var $_2=$__0;label=62;break;}else{label=60;break;}
 case 60: 
 var $181=((($179)-(4))|0);
 var $182=($181>>>0)>($83>>>0);
 if($182){var $_012_i_i=$83;var $183=$181;label=61;break;}else{var $_2=$__0;label=62;break;}
 case 61: 
 var $183;
 var $_012_i_i;
 var $184=HEAP32[(($_012_i_i)>>2)];
 var $185=HEAP32[(($183)>>2)];
 HEAP32[(($_012_i_i)>>2)]=$185;
 HEAP32[(($183)>>2)]=$184;
 var $186=(($_012_i_i+4)|0);
 var $187=((($183)-(4))|0);
 var $188=($186>>>0)<($187>>>0);
 if($188){var $_012_i_i=$186;var $183=$187;label=61;break;}else{var $_2=$__0;label=62;break;}
 case 62: 
 var $_2;
 var $189=((($__p_058)+(1))|0);
 var $190=($189>>>0)<4;
 if($190){var $__p_058=$189;var $_059=$_2;label=2;break;}else{label=63;break;}
 case 63: 
 var $192=HEAP8[($2)];
 var $193=$192&1;
 var $194=(($193<<24)>>24)==0;
 if($194){label=65;break;}else{label=64;break;}
 case 64: 
 var $196=HEAP32[(($3)>>2)];
 var $200=$196;label=66;break;
 case 65: 
 var $198=($192&255);
 var $199=$198>>>1;
 var $200=$199;label=66;break;
 case 66: 
 var $200;
 var $201=($200>>>0)>1;
 if($201){label=67;break;}else{label=75;break;}
 case 67: 
 if($194){label=69;break;}else{label=68;break;}
 case 68: 
 var $204=HEAP32[(($4)>>2)];
 var $205=HEAP32[(($3)>>2)];
 var $210=$205;var $209=$204;var $_pn=$204;label=70;break;
 case 69: 
 var $207=($192&255);
 var $208=$207>>>1;
 var $210=$208;var $209=$3;var $_pn=$3;label=70;break;
 case 70: 
 var $_pn;
 var $209;
 var $210;
 var $211=(($_pn+4)|0);
 var $212=(($209+($210<<2))|0);
 var $213=HEAP32[(($__me)>>2)];
 var $214=($211|0)==($212|0);
 if($214){var $_0_lcssa_i_i=$213;label=74;break;}else{label=71;break;}
 case 71: 
 var $_promoted4_i_i=$211;
 var $_sum=((($210)-(1))|0);
 var $scevgep_i_i=(($209+($_sum<<2))|0);
 var $scevgep3_i_i=$scevgep_i_i;
 var $215=(((-$_promoted4_i_i))|0);
 var $uglygep_i_i=(($scevgep3_i_i+$215)|0);
 var $uglygep5_i_i=$uglygep_i_i;
 var $216=$uglygep5_i_i>>>2;
 var $_01_i_i=$213;var $218=$211;label=72;break;
 case 72: 
 var $218;
 var $_01_i_i;
 var $219=HEAP32[(($218)>>2)];
 HEAP32[(($_01_i_i)>>2)]=$219;
 var $220=(($218+4)|0);
 var $221=(($_01_i_i+4)|0);
 var $222=($220|0)==($212|0);
 if($222){label=73;break;}else{var $_01_i_i=$221;var $218=$220;label=72;break;}
 case 73: 
 var $223=((($216)+(1))|0);
 var $scevgep6_i_i=(($213+($223<<2))|0);
 var $_0_lcssa_i_i=$scevgep6_i_i;label=74;break;
 case 74: 
 var $_0_lcssa_i_i;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i;
 label=75;break;
 case 75: 
 var $225=$__flags&176;
 if(($225|0)==32){ label=76;break;}else if(($225|0)==16){ label=78;break;}else{label=77;break;}
 case 76: 
 var $227=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$227;
 label=78;break;
 case 77: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=78;break;
 case 78: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $2=(($__loc)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $5=HEAP32[((15368)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__p_i_i_i_i)|0);
 HEAP32[(($8)>>2)]=15368;
 var $9=(($__p_i_i_i_i+4)|0);
 HEAP32[(($9)>>2)]=(26);
 var $10=(($__p_i_i_i_i+8)|0);
 HEAP32[(($10)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$4,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=HEAP32[((15372)>>2)];
 var $12=((($11)-(1))|0);
 var $13=(($3+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($3+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14;
 var $18=$16;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>($12>>>0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=(($16+($12<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 __ZNSt8bad_castC2Ev($26);
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,10104,(378)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$23;
 var $29=$__digits;
 var $30=HEAP8[($29)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 var $34=(($__digits+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $39=$35;label=10;break;
 case 9: 
 var $37=($30&255);
 var $38=$37>>>1;
 var $39=$38;label=10;break;
 case 10: 
 var $39;
 var $40=($39|0)==0;
 if($40){var $56=0;label=16;break;}else{label=11;break;}
 case 11: 
 if($32){label=13;break;}else{label=12;break;}
 case 12: 
 var $43=(($__digits+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $47=$44;label=14;break;
 case 13: 
 var $46=(($__digits+4)|0);
 var $47=$46;label=14;break;
 case 14: 
 var $47;
 var $48=HEAP32[(($47)>>2)];
 var $49=$23;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+44)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($28,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $54=($48|0)==($53|0);
 var $56=$54;label=16;break;
 case 16: 
 var $56;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i5=$__sym;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 var $this2_i_i_i6=$__sn;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$56,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $58=$__mbuf;
 var $$etemp$2$0=400;
 var $$etemp$2$1=0;

 var $59=(($__mbuf)|0);
 var $60=HEAP8[($29)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=19;break;}else{label=18;break;}
 case 18: 
 var $64=(($__digits+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $69=$65;label=20;break;
 case 19: 
 var $67=($60&255);
 var $68=$67>>>1;
 var $69=$68;label=20;break;
 case 20: 
 var $69;
 var $70=HEAP32[(($__fd)>>2)];
 var $71=($69|0)>($70|0);
 if($71){label=21;break;}else{label=31;break;}
 case 21: 
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $74=(($__digits+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $79=$75;label=24;break;
 case 23: 
 var $77=($60&255);
 var $78=$77>>>1;
 var $79=$78;label=24;break;
 case 24: 
 var $79;
 var $80=((($79)-($70))|0);
 var $81=$80<<1;
 var $82=HEAP8[($this2_i_i_i6)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=26;break;}else{label=25;break;}
 case 25: 
 var $86=(($__sn+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $91=$87;label=27;break;
 case 26: 
 var $89=($82&255);
 var $90=$89>>>1;
 var $91=$90;label=27;break;
 case 27: 
 var $91;
 var $92=HEAP8[($this2_i_i_i5)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=29;break;}else{label=28;break;}
 case 28: 
 var $96=(($__sym+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $101=$97;label=30;break;
 case 29: 
 var $99=($92&255);
 var $100=$99>>>1;
 var $101=$100;label=30;break;
 case 30: 
 var $101;
 var $102=$81|1;
 var $103=((($91)+($102))|0);
 var $104=((($103)+($101))|0);
 var $_pn=$104;label=38;break;
 case 31: 
 var $106=HEAP8[($this2_i_i_i6)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=33;break;}else{label=32;break;}
 case 32: 
 var $110=(($__sn+4)|0);
 var $111=HEAP32[(($110)>>2)];
 var $115=$111;label=34;break;
 case 33: 
 var $113=($106&255);
 var $114=$113>>>1;
 var $115=$114;label=34;break;
 case 34: 
 var $115;
 var $116=HEAP8[($this2_i_i_i5)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=36;break;}else{label=35;break;}
 case 35: 
 var $120=(($__sym+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $125=$121;label=37;break;
 case 36: 
 var $123=($116&255);
 var $124=$123>>>1;
 var $125=$124;label=37;break;
 case 37: 
 var $125;
 var $126=((($115)+(2))|0);
 var $127=((($126)+($125))|0);
 var $_pn=$127;label=38;break;
 case 38: 
 var $_pn;
 var $129=((($_pn)+($70))|0);
 var $130=($129>>>0)>100;
 if($130){label=39;break;}else{var $__mb_0=$59;var $156=0;var $155=$60;label=47;break;}
 case 39: 
 var $131=$129<<2;
 var $132=_malloc($131);
 var $133=$132;
 var $134=($132|0)==0;
 if($134){label=40;break;}else{var $__mb_0=$133;var $156=$133;var $155=$60;label=47;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 var $_pre=HEAP8[($29)];
 var $__mb_0=0;var $156=0;var $155=$_pre;label=47;break;
 case 42: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1); var $136$1 = tempRet0;
 var $137=$136$0;
 var $138=$136$1;
 var $_0=$137;var $_01=$138;label=55;break;
 case 43: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $_1=$141;var $_12=$142;label=56;break;
 case 44: 
 var $144$0 = ___cxa_find_matching_catch(-1, -1); var $144$1 = tempRet0;
 var $145=$144$0;
 var $146=$144$1;
 var $_0=$145;var $_01=$146;label=55;break;
 case 45: 
 var $148$0 = ___cxa_find_matching_catch(-1, -1); var $148$1 = tempRet0;
 var $149=$148$0;
 var $150=$148$1;
 var $151=($156|0)==0;
 if($151){var $_0=$149;var $_01=$150;label=55;break;}else{label=46;break;}
 case 46: 
 var $153=$156;
 _free($153);
 var $_0=$149;var $_01=$150;label=55;break;
 case 47: 
 var $155;
 var $156;
 var $__mb_0;
 var $157=(($__iob+4)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$155&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=49;break;}else{label=48;break;}
 case 48: 
 var $162=(($__digits+8)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($__digits+4)|0);
 var $165=HEAP32[(($164)>>2)];
 var $171=$165;var $170=$163;label=50;break;
 case 49: 
 var $167=(($__digits+4)|0);
 var $168=($155&255);
 var $169=$168>>>1;
 var $171=$169;var $170=$167;label=50;break;
 case 50: 
 var $170;
 var $171;
 var $172=(($170+($171<<2))|0);
 var $173=HEAP32[(($__dp)>>2)];
 var $174=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$158,$170,$172,$28,$56,$tmpcast,$173,$174,$__grp,$__sym,$__sn,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=45;break; }
 case 51: 
 var $176=(($__s)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($1)|0);
 HEAP32[(($178)>>2)]=$177;
 var $179=HEAP32[(($__mi)>>2)];
 var $180=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$1,$__mb_0,$179,$180,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=45;break; }
 case 52: 
 var $182=($156|0)==0;
 if($182){label=54;break;}else{label=53;break;}
 case 53: 
 var $184=$156;
 _free($184);
 label=54;break;
 case 54: 
 var $$etemp$3$0=400;
 var $$etemp$3$1=0;

 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $185=HEAP32[(($2)>>2)];
 var $186=(($185)|0);
 var $187=__ZNSt3__114__shared_count16__release_sharedEv($186);
 STACKTOP=sp;return;
 case 55: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=56;break;
 case 56: 
 var $_12;
 var $_1;
 var $189=HEAP32[(($2)>>2)];
 var $190=(($189)|0);
 var $191=__ZNSt3__114__shared_count16__release_sharedEv($190);
 var $192$0=$_1;
 var $192$1=0;
 var $193$0=$192$0;
 var $193$1=$_12;
 ___resumeException($193$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18messagesIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18messagesIcED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $_=$14>>>($15>>>0);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__ndflt=sp;
 var $this2_i_i_i=$__ndflt;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $1=$__dflt;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($__dflt+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($__dflt+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $19=$9;var $18=$7;var $17=$7;label=4;break;
 case 3: 
 var $11=$__dflt;
 var $12=(($11+1)|0);
 var $13=$__dflt;
 var $14=(($13+1)|0);
 var $15=($2&255);
 var $16=$15>>>1;
 var $19=$16;var $18=$12;var $17=$14;label=4;break;
 case 4: 
 var $17;
 var $18;
 var $19;
 var $20=(($17+$19)|0);
 var $21=($18>>>0)<($20>>>0);
 if($21){var $_01_i7=$18;label=6;break;}else{label=5;break;}
 case 5: 
 var $22=($__c|0)==-1;
 var $23=$__c<<1;
 var $24=$23;
 var $25=($22?-1:$24);
 var $37=$25;label=10;break;
 case 6: 
 var $_01_i7;
 var $26=HEAP8[($_01_i7)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=12;break; }
 case 7: 
 var $27=(($_01_i7+1)|0);
 var $28=($27>>>0)<($20>>>0);
 if($28){var $_01_i7=$27;label=6;break;}else{label=8;break;}
 case 8: 
 var $_pre=HEAP8[($this2_i_i_i)];
 var $phitmp=$_pre&1;
 var $phitmp17=(($phitmp<<24)>>24)==0;
 var $29=($__c|0)==-1;
 var $30=$__c<<1;
 var $31=$30;
 var $32=($29?-1:$31);
 if($phitmp17){var $37=$32;label=10;break;}else{label=9;break;}
 case 9: 
 var $34=(($__ndflt+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $41=$35;var $40=$32;label=11;break;
 case 10: 
 var $37;
 var $38=$__ndflt;
 var $39=(($38+1)|0);
 var $41=$39;var $40=$37;label=11;break;
 case 11: 
 var $40;
 var $41;
 var $42=(function() { try { __THREW__ = 0; return _catgets($40,$__set,$__msgid,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=13;break; }
 case 12: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=14;break;
 case 14: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $44=$lpad_phi$0;
 var $45=$lpad_phi$1;
 var $_01=$44;var $_02=$45;label=20;break;
 case 15: 
 var $this2_i_i_i4=$agg_result;
 HEAP32[(($this2_i_i_i4)>>2)]=0; HEAP32[((($this2_i_i_i4)+(4))>>2)]=0; HEAP32[((($this2_i_i_i4)+(8))>>2)]=0;
 var $47=_strlen($42);
 var $48=(($42+$47)|0);
 var $49=($47|0)>0;
 if($49){var $_01_i=$42;label=16;break;}else{label=19;break;}
 case 16: 
 var $_01_i;
 var $50=HEAP8[($_01_i)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg_result,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $51=(($_01_i+1)|0);
 var $52=($51>>>0)<($48>>>0);
 if($52){var $_01_i=$51;label=16;break;}else{label=19;break;}
 case 18: 
 var $54$0 = ___cxa_find_matching_catch(-1, -1); var $54$1 = tempRet0;
 var $55=$54$0;
 var $56=$54$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
 var $_01=$55;var $_02=$56;label=20;break;
 case 19: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 20: 
 var $_02;
 var $_01;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $58$0=$_01;
 var $58$1=0;
 var $59$0=$58$0;
 var $59$1=$_02;
 ___resumeException($59$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c){
 var label=0;


 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}


function __ZNSt3__18messagesIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18messagesIwED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $_=$14>>>($15>>>0);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__mb_i11=sp;
 var $__buf_i13=(sp)+(8);
 var $__bn_i14=(sp)+(40);
 var $__wn_i=(sp)+(48);
 var $__mb_i=(sp)+(56);
 var $__buf_i=(sp)+(64);
 var $__bn_i=(sp)+(192);
 var $__nn_i=(sp)+(200);
 var $__ndflt=(sp)+(208);
 var $1=(sp)+(224);
 var $2=(sp)+(232);
 var $this2_i_i_i=$__ndflt;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $3=(($1+4)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($1)|0);
 HEAP32[(($4)>>2)]=5744;
 var $5=$__dflt;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__dflt+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__dflt+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $21=$13;var $20=$11;var $19=$11;label=4;break;
 case 3: 
 var $15=(($__dflt+4)|0);
 var $16=(($__dflt+4)|0);
 var $17=($6&255);
 var $18=$17>>>1;
 var $21=$18;var $20=$15;var $19=$16;label=4;break;
 case 4: 
 var $19;
 var $20;
 var $21;
 var $22=(($19+($21<<2))|0);
 var $23=$__mb_i11;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $24=(($__buf_i13)|0);
 var $$etemp$1$0=32;
 var $$etemp$1$1=0;

 var $25=$__bn_i14;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $26=$__wn_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $tmpcast_i12=$__mb_i11;
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $st$5$0=(($__mb_i11)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
 var $st$6$1=(($__mb_i11+4)|0);
 HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
 var $27=($20>>>0)<($22>>>0);
 if($27){label=5;break;}else{label=16;break;}
 case 5: 
 var $28=(($1)|0);
 var $29=$1;
 var $30=(($__buf_i13+32)|0);
 var $_04_i16=$20;var $32=5744;label=6;break;
 case 6: 
 var $32;
 var $_04_i16;
 HEAP32[(($__wn_i)>>2)]=$_04_i16;
 var $33=(($32+12)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($28,$tmpcast_i12,$_04_i16,$22,$__wn_i,$24,$30,$__bn_i14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $36=($35|0)==2;
 var $37=HEAP32[(($__wn_i)>>2)];
 var $38=($37|0)==($_04_i16|0);
 var $or_cond2_i17=$36|$38;
 if($or_cond2_i17){label=9;break;}else{label=8;break;}
 case 8: 
 var $39=HEAP32[(($__bn_i14)>>2)];
 var $40=($24>>>0)<($39>>>0);
 if($40){var $__p_03_i20=$24;label=11;break;}else{var $47=$37;label=14;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(1728) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=23;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $__p_03_i20;
 var $42=HEAP8[($__p_03_i20)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=21;break; }
 case 12: 
 var $43=(($__p_03_i20+1)|0);
 var $44=HEAP32[(($__bn_i14)>>2)];
 var $45=($43>>>0)<($44>>>0);
 if($45){var $__p_03_i20=$43;label=11;break;}else{label=13;break;}
 case 13: 
 var $_pre_i21=HEAP32[(($__wn_i)>>2)];
 var $47=$_pre_i21;label=14;break;
 case 14: 
 var $47;
 var $48=($47>>>0)<($22>>>0);
 if($48){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre=HEAP32[(($29)>>2)];
 var $_04_i16=$47;var $32=$_pre;label=6;break;
 case 16: 
 var $$etemp$7$0=8;
 var $$etemp$7$1=0;

 var $$etemp$8$0=32;
 var $$etemp$8$1=0;

 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $49=(($1)|0);
 __ZNSt3__114__shared_countD2Ev($49);
 var $50=($__c|0)==-1;
 var $51=$__c<<1;
 var $52=$51;
 var $53=($50?-1:$52);
 var $54=HEAP8[($this2_i_i_i)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=18;break;}else{label=17;break;}
 case 17: 
 var $58=(($__ndflt+8)|0);
 var $59=HEAP32[(($58)>>2)];
 var $63=$59;label=19;break;
 case 18: 
 var $61=$__ndflt;
 var $62=(($61+1)|0);
 var $63=$62;label=19;break;
 case 19: 
 var $63;
 var $64=(function() { try { __THREW__ = 0; return _catgets($53,$__set,$__msgid,$63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 20: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=$66$0;
 var $68=$66$1;
 var $_1=$67;var $_13=$68;label=42;break;
 case 21: 
 var $lpad_loopexit37$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit37$1 = tempRet0;
 var $lpad_phi38$1=$lpad_loopexit37$1;var $lpad_phi38$0=$lpad_loopexit37$0;label=24;break;
 case 22: 
 var $lpad_loopexit39$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit39$1 = tempRet0;
 var $lpad_phi38$1=$lpad_loopexit39$1;var $lpad_phi38$0=$lpad_loopexit39$0;label=24;break;
 case 23: 
 var $lpad_nonloopexit40$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit40$1 = tempRet0;
 var $lpad_phi38$1=$lpad_nonloopexit40$1;var $lpad_phi38$0=$lpad_nonloopexit40$0;label=24;break;
 case 24: 
 var $lpad_phi38$0;
 var $lpad_phi38$1;
 var $69=$lpad_phi38$0;
 var $70=$lpad_phi38$1;
 var $71=(($1)|0);
 __ZNSt3__114__shared_countD2Ev($71);
 var $_1=$69;var $_13=$70;label=42;break;
 case 25: 
 var $this2_i_i_i8=$agg_result;
 HEAP32[(($this2_i_i_i8)>>2)]=0; HEAP32[((($this2_i_i_i8)+(4))>>2)]=0; HEAP32[((($this2_i_i_i8)+(8))>>2)]=0;
 var $73=(($2+4)|0);
 HEAP32[(($73)>>2)]=0;
 var $74=(($2)|0);
 HEAP32[(($74)>>2)]=5688;
 var $75=_strlen($64);
 var $76=(($64+$75)|0);
 var $77=$__mb_i;
 var $$etemp$11$0=8;
 var $$etemp$11$1=0;

 var $78=$__bn_i;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $79=$__nn_i;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $tmpcast_i=$__mb_i;
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $st$15$0=(($__mb_i)|0);
 HEAP32[(($st$15$0)>>2)]=$$etemp$14$0;
 var $st$16$1=(($__mb_i+4)|0);
 HEAP32[(($st$16$1)>>2)]=$$etemp$14$1;
 var $80=($75|0)>0;
 if($80){label=26;break;}else{label=37;break;}
 case 26: 
 var $81=$__buf_i;
 var $82=(($2)|0);
 var $83=$2;
 var $84=$76;
 var $85=(($__buf_i)|0);
 var $86=(($__buf_i+128)|0);
 var $_04_i=$64;var $88=5688;label=27;break;
 case 27: 
 var $88;
 var $_04_i;
 var $$etemp$17$0=128;
 var $$etemp$17$1=0;

 HEAP32[(($__nn_i)>>2)]=$_04_i;
 var $89=(($88+16)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$_04_i;
 var $92=((($84)-($91))|0);
 var $93=($92|0)>32;
 var $94=(($_04_i+32)|0);
 var $95=($93?$94:$76);
 var $96=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($82,$tmpcast_i,$_04_i,$95,$__nn_i,$85,$86,$__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=39;break; }
 case 28: 
 var $97=($96|0)==2;
 var $98=HEAP32[(($__nn_i)>>2)];
 var $99=($98|0)==($_04_i|0);
 var $or_cond2_i=$97|$99;
 if($or_cond2_i){label=30;break;}else{label=29;break;}
 case 29: 
 var $100=HEAP32[(($__bn_i)>>2)];
 var $101=($85>>>0)<($100>>>0);
 if($101){var $__p_03_i=$85;label=32;break;}else{var $108=$98;label=35;break;}
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(1728) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=40;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $__p_03_i;
 var $103=HEAP32[(($__p_03_i)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg_result,$103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=38;break; }
 case 33: 
 var $104=(($__p_03_i+4)|0);
 var $105=HEAP32[(($__bn_i)>>2)];
 var $106=($104>>>0)<($105>>>0);
 if($106){var $__p_03_i=$104;label=32;break;}else{label=34;break;}
 case 34: 
 var $_pre_i=HEAP32[(($__nn_i)>>2)];
 var $108=$_pre_i;label=35;break;
 case 35: 
 var $108;
 var $$etemp$18$0=128;
 var $$etemp$18$1=0;

 var $109=($108>>>0)<($76>>>0);
 if($109){label=36;break;}else{label=37;break;}
 case 36: 
 var $_pre44=HEAP32[(($83)>>2)];
 var $_04_i=$108;var $88=$_pre44;label=27;break;
 case 37: 
 var $$etemp$19$0=8;
 var $$etemp$19$1=0;

 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 var $$etemp$21$0=4;
 var $$etemp$21$1=0;

 var $110=(($2)|0);
 __ZNSt3__114__shared_countD2Ev($110);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=41;break;
 case 39: 
 var $lpad_loopexit31$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit31$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit31$1;var $lpad_phi$0=$lpad_loopexit31$0;label=41;break;
 case 40: 
 var $lpad_nonloopexit32$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit32$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit32$1;var $lpad_phi$0=$lpad_nonloopexit32$0;label=41;break;
 case 41: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $111=$lpad_phi$0;
 var $112=$lpad_phi$1;
 var $113=(($2)|0);
 __ZNSt3__114__shared_countD2Ev($113);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg_result);
 var $_1=$111;var $_13=$112;label=42;break;
 case 42: 
 var $_13;
 var $_1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $115$0=$_1;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_13;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c){
 var label=0;


 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}


function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5208;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(15936)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(15936);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((13832)>>2)]=$10;

 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;

 label=9;break;
 case 6: 
 var $15=HEAP32[((13832)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $23=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($23);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2,2632) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $4=$1;
 HEAP32[(($4)>>2)]=4120;
 ___cxa_throw($1,10136,(78));
 throw "Reached an unreachable!";
 case 3: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($6$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__impC2Ej($this,$refs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i113=sp;
 var $__p_i_i_i109=(sp)+(16);
 var $__p_i_i_i102=(sp)+(32);
 var $__p_i_i_i96=(sp)+(48);
 var $__p_i_i_i92=(sp)+(64);
 var $__p_i_i_i88=(sp)+(80);
 var $__p_i_i_i84=(sp)+(96);
 var $__p_i_i_i80=(sp)+(112);
 var $__p_i_i_i76=(sp)+(128);
 var $__p_i_i_i72=(sp)+(144);
 var $__p_i_i_i68=(sp)+(160);
 var $__p_i_i_i64=(sp)+(176);
 var $__p_i_i_i60=(sp)+(192);
 var $__p_i_i_i56=(sp)+(208);
 var $__p_i_i_i52=(sp)+(224);
 var $__p_i_i_i48=(sp)+(240);
 var $__p_i_i_i44=(sp)+(256);
 var $__p_i_i_i40=(sp)+(272);
 var $__p_i_i_i36=(sp)+(288);
 var $__p_i_i_i32=(sp)+(304);
 var $__p_i_i_i28=(sp)+(320);
 var $__p_i_i_i24=(sp)+(336);
 var $__p_i_i_i20=(sp)+(352);
 var $__p_i_i_i16=(sp)+(368);
 var $__p_i_i_i12=(sp)+(384);
 var $__p_i_i_i8=(sp)+(400);
 var $__p_i_i_i4=(sp)+(416);
 var $__p_i_i_i=(sp)+(432);
 var $1=((($refs)-(1))|0);
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($this)|0);
 HEAP32[(($3)>>2)]=5464;
 var $4=(($this+8)|0);
 var $5=(($this+12)|0);
 var $6=(($this+16)|0);
 var $7=(($this+136)|0);
 var $8=(($this+24)|0);
 HEAP8[($7)]=1;
 var $9=$8;
 HEAP32[(($5)>>2)]=$9;
 HEAP32[(($4)>>2)]=$9;
 var $10=$7;
 HEAP32[(($6)>>2)]=$10;
 var $_0_i_i=28;var $12=$9;label=2;break;
 case 2: 
 var $12;
 var $_0_i_i;
 var $13=($12|0)==0;
 if($13){var $15=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($12)>>2)]=0;
 var $_pre1_i_i=HEAP32[(($5)>>2)];
 var $15=$_pre1_i_i;label=4;break;
 case 4: 
 var $15;
 var $16=(($15+4)|0);
 HEAP32[(($5)>>2)]=$16;
 var $17=((($_0_i_i)-(1))|0);
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $_0_i_i=$17;var $12=$16;label=2;break;}
 case 5: 
 var $19=(($this+144)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($19,2616,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=110;break; }
 case 6: 
 var $20=HEAP32[(($4)>>2)];
 var $21=HEAP32[(($5)>>2)];
 var $22=($21|0)==($20|0);
 if($22){label=8;break;}else{label=7;break;}
 case 7: 
 var $__new_last2_i_i_i=$20;
 var $scevgep_i_i_i=((($21)-(4))|0);
 var $scevgep1_i_i_i=$scevgep_i_i_i;
 var $23=(((-$__new_last2_i_i_i))|0);
 var $uglygep_i_i_i=(($scevgep1_i_i_i+$23)|0);
 var $uglygep3_i_i_i=$uglygep_i_i_i;
 var $24=$uglygep3_i_i_i>>>2;
 var $25=$24^-1;
 var $scevgep4_i_i_i=(($21+($25<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep4_i_i_i;
 label=8;break;
 case 8: 
 HEAP32[((14060)>>2)]=0;
 HEAP32[((14056)>>2)]=5168;
 var $27=$__p_i_i_i4;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $28=HEAP32[((15056)>>2)];
 var $29=($28|0)==-1;
 if($29){label=10;break;}else{label=9;break;}
 case 9: 
 var $31=(($__p_i_i_i4)|0);
 HEAP32[(($31)>>2)]=15056;
 var $32=(($__p_i_i_i4+4)|0);
 HEAP32[(($32)>>2)]=(26);
 var $33=(($__p_i_i_i4+8)|0);
 HEAP32[(($33)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15056,$27,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=111;break; }
 case 10: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $34=HEAP32[((15060)>>2)];
 var $35=((($34)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14056,$35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=111;break; }
 case 11: 
 HEAP32[((14052)>>2)]=0;
 HEAP32[((14048)>>2)]=5128;
 var $37=$__p_i_i_i8;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $38=HEAP32[((15048)>>2)];
 var $39=($38|0)==-1;
 if($39){label=13;break;}else{label=12;break;}
 case 12: 
 var $41=(($__p_i_i_i8)|0);
 HEAP32[(($41)>>2)]=15048;
 var $42=(($__p_i_i_i8+4)|0);
 HEAP32[(($42)>>2)]=(26);
 var $43=(($__p_i_i_i8+8)|0);
 HEAP32[(($43)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15048,$37,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=111;break; }
 case 13: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $44=HEAP32[((15052)>>2)];
 var $45=((($44)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14048,$45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=111;break; }
 case 14: 
 HEAP32[((14276)>>2)]=0;
 HEAP32[((14272)>>2)]=5576;
 HEAP32[((14280)>>2)]=0;
 HEAP8[(14284)]=0;
 var $46=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=15;break; }
 case 15: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1,0); var $48$1 = tempRet0;
 var $49=$48$0;
 ___clang_call_terminate($49);
 throw "Reached an unreachable!";
 case 16: 
 var $51=HEAP32[(($46)>>2)];
 HEAP32[((14280)>>2)]=$51;
 var $52=$__p_i_i_i12;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $53=HEAP32[((15376)>>2)];
 var $54=($53|0)==-1;
 if($54){label=18;break;}else{label=17;break;}
 case 17: 
 var $56=(($__p_i_i_i12)|0);
 HEAP32[(($56)>>2)]=15376;
 var $57=(($__p_i_i_i12+4)|0);
 HEAP32[(($57)>>2)]=(26);
 var $58=(($__p_i_i_i12+8)|0);
 HEAP32[(($58)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15376,$52,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=111;break; }
 case 18: 
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $59=HEAP32[((15380)>>2)];
 var $60=((($59)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14272,$60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=111;break; }
 case 19: 
 HEAP32[((14268)>>2)]=0;
 HEAP32[((14264)>>2)]=5496;
 var $62=$__p_i_i_i16;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $63=HEAP32[((15368)>>2)];
 var $64=($63|0)==-1;
 if($64){label=21;break;}else{label=20;break;}
 case 20: 
 var $66=(($__p_i_i_i16)|0);
 HEAP32[(($66)>>2)]=15368;
 var $67=(($__p_i_i_i16+4)|0);
 HEAP32[(($67)>>2)]=(26);
 var $68=(($__p_i_i_i16+8)|0);
 HEAP32[(($68)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15368,$62,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=111;break; }
 case 21: 
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $69=HEAP32[((15372)>>2)];
 var $70=((($69)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14264,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=111;break; }
 case 22: 
 HEAP32[((14084)>>2)]=0;
 HEAP32[((14080)>>2)]=5264;
 var $72=$__p_i_i_i20;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $73=HEAP32[((15072)>>2)];
 var $74=($73|0)==-1;
 if($74){label=24;break;}else{label=23;break;}
 case 23: 
 var $76=(($__p_i_i_i20)|0);
 HEAP32[(($76)>>2)]=15072;
 var $77=(($__p_i_i_i20+4)|0);
 HEAP32[(($77)>>2)]=(26);
 var $78=(($__p_i_i_i20+8)|0);
 HEAP32[(($78)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15072,$72,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=111;break; }
 case 24: 
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $79=HEAP32[((15076)>>2)];
 var $80=((($79)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14080,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=111;break; }
 case 25: 
 HEAP32[((14068)>>2)]=0;
 HEAP32[((14064)>>2)]=5208;
 var $81=HEAP8[(15936)];
 var $82=(($81<<24)>>24)==0;
 if($82){label=26;break;}else{label=30;break;}
 case 26: 
 var $84=___cxa_guard_acquire(15936);
 var $85=($84|0)==0;
 if($85){label=30;break;}else{label=27;break;}
 case 27: 
 var $87=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 HEAP32[((13832)>>2)]=$87;

 label=30;break;
 case 29: 
 var $89$0 = ___cxa_find_matching_catch(-1, -1); var $89$1 = tempRet0;

 __ZNSt3__114__shared_countD2Ev(14064);
 var $eh_lpad_body$1=$89$1;var $eh_lpad_body$0=$89$0;label=112;break;
 case 30: 
 var $91=HEAP32[((13832)>>2)];
 HEAP32[((14072)>>2)]=$91;
 var $92=$__p_i_i_i24;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 var $93=HEAP32[((15064)>>2)];
 var $94=($93|0)==-1;
 if($94){label=32;break;}else{label=31;break;}
 case 31: 
 var $96=(($__p_i_i_i24)|0);
 HEAP32[(($96)>>2)]=15064;
 var $97=(($__p_i_i_i24+4)|0);
 HEAP32[(($97)>>2)]=(26);
 var $98=(($__p_i_i_i24+8)|0);
 HEAP32[(($98)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15064,$92,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=111;break; }
 case 32: 
 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $99=HEAP32[((15068)>>2)];
 var $100=((($99)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14064,$100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=111;break; }
 case 33: 
 HEAP32[((14092)>>2)]=0;
 HEAP32[((14088)>>2)]=5320;
 var $102=$__p_i_i_i28;
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $103=HEAP32[((15080)>>2)];
 var $104=($103|0)==-1;
 if($104){label=35;break;}else{label=34;break;}
 case 34: 
 var $106=(($__p_i_i_i28)|0);
 HEAP32[(($106)>>2)]=15080;
 var $107=(($__p_i_i_i28+4)|0);
 HEAP32[(($107)>>2)]=(26);
 var $108=(($__p_i_i_i28+8)|0);
 HEAP32[(($108)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15080,$102,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=111;break; }
 case 35: 
 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $109=HEAP32[((15084)>>2)];
 var $110=((($109)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14088,$110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=111;break; }
 case 36: 
 HEAP32[((14100)>>2)]=0;
 HEAP32[((14096)>>2)]=5376;
 var $112=$__p_i_i_i32;
 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $113=HEAP32[((15088)>>2)];
 var $114=($113|0)==-1;
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=(($__p_i_i_i32)|0);
 HEAP32[(($116)>>2)]=15088;
 var $117=(($__p_i_i_i32+4)|0);
 HEAP32[(($117)>>2)]=(26);
 var $118=(($__p_i_i_i32+8)|0);
 HEAP32[(($118)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15088,$112,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=111;break; }
 case 38: 
 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $119=HEAP32[((15092)>>2)];
 var $120=((($119)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14096,$120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=111;break; }
 case 39: 
 HEAP32[((13980)>>2)]=0;
 HEAP32[((13976)>>2)]=4672;
 HEAP8[(13984)]=46;
 HEAP8[(13985)]=44;
 HEAP32[((13988)>>2)]=0; HEAP32[((13992)>>2)]=0; HEAP32[((13996)>>2)]=0;
 var $122=$__p_i_i_i36;
 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $123=HEAP32[((14992)>>2)];
 var $124=($123|0)==-1;
 if($124){label=41;break;}else{label=40;break;}
 case 40: 
 var $126=(($__p_i_i_i36)|0);
 HEAP32[(($126)>>2)]=14992;
 var $127=(($__p_i_i_i36+4)|0);
 HEAP32[(($127)>>2)]=(26);
 var $128=(($__p_i_i_i36+8)|0);
 HEAP32[(($128)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14992,$122,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=111;break; }
 case 41: 
 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $129=HEAP32[((14996)>>2)];
 var $130=((($129)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,13976,$130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=111;break; }
 case 42: 
 HEAP32[((13948)>>2)]=0;
 HEAP32[((13944)>>2)]=4624;
 HEAP32[((13952)>>2)]=46;
 HEAP32[((13956)>>2)]=44;
 HEAP32[((13960)>>2)]=0; HEAP32[((13964)>>2)]=0; HEAP32[((13968)>>2)]=0;
 var $132=$__p_i_i_i40;
 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $133=HEAP32[((14984)>>2)];
 var $134=($133|0)==-1;
 if($134){label=44;break;}else{label=43;break;}
 case 43: 
 var $136=(($__p_i_i_i40)|0);
 HEAP32[(($136)>>2)]=14984;
 var $137=(($__p_i_i_i40+4)|0);
 HEAP32[(($137)>>2)]=(26);
 var $138=(($__p_i_i_i40+8)|0);
 HEAP32[(($138)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14984,$132,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=111;break; }
 case 44: 
 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $139=HEAP32[((14988)>>2)];
 var $140=((($139)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,13944,$140) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=111;break; }
 case 45: 
 HEAP32[((14044)>>2)]=0;
 HEAP32[((14040)>>2)]=5056;
 var $142=$__p_i_i_i44;
 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $143=HEAP32[((15040)>>2)];
 var $144=($143|0)==-1;
 if($144){label=47;break;}else{label=46;break;}
 case 46: 
 var $146=(($__p_i_i_i44)|0);
 HEAP32[(($146)>>2)]=15040;
 var $147=(($__p_i_i_i44+4)|0);
 HEAP32[(($147)>>2)]=(26);
 var $148=(($__p_i_i_i44+8)|0);
 HEAP32[(($148)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15040,$142,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=111;break; }
 case 47: 
 var $$etemp$21$0=12;
 var $$etemp$21$1=0;

 var $149=HEAP32[((15044)>>2)];
 var $150=((($149)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14040,$150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=111;break; }
 case 48: 
 HEAP32[((14036)>>2)]=0;
 HEAP32[((14032)>>2)]=4984;
 var $152=$__p_i_i_i48;
 var $$etemp$22$0=12;
 var $$etemp$22$1=0;

 var $153=HEAP32[((15032)>>2)];
 var $154=($153|0)==-1;
 if($154){label=50;break;}else{label=49;break;}
 case 49: 
 var $156=(($__p_i_i_i48)|0);
 HEAP32[(($156)>>2)]=15032;
 var $157=(($__p_i_i_i48+4)|0);
 HEAP32[(($157)>>2)]=(26);
 var $158=(($__p_i_i_i48+8)|0);
 HEAP32[(($158)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15032,$152,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=111;break; }
 case 50: 
 var $$etemp$23$0=12;
 var $$etemp$23$1=0;

 var $159=HEAP32[((15036)>>2)];
 var $160=((($159)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14032,$160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=111;break; }
 case 51: 
 HEAP32[((14028)>>2)]=0;
 HEAP32[((14024)>>2)]=4920;
 var $162=$__p_i_i_i52;
 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $163=HEAP32[((15024)>>2)];
 var $164=($163|0)==-1;
 if($164){label=53;break;}else{label=52;break;}
 case 52: 
 var $166=(($__p_i_i_i52)|0);
 HEAP32[(($166)>>2)]=15024;
 var $167=(($__p_i_i_i52+4)|0);
 HEAP32[(($167)>>2)]=(26);
 var $168=(($__p_i_i_i52+8)|0);
 HEAP32[(($168)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15024,$162,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=111;break; }
 case 53: 
 var $$etemp$25$0=12;
 var $$etemp$25$1=0;

 var $169=HEAP32[((15028)>>2)];
 var $170=((($169)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14024,$170) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=111;break; }
 case 54: 
 HEAP32[((14020)>>2)]=0;
 HEAP32[((14016)>>2)]=4856;
 var $172=$__p_i_i_i56;
 var $$etemp$26$0=12;
 var $$etemp$26$1=0;

 var $173=HEAP32[((15016)>>2)];
 var $174=($173|0)==-1;
 if($174){label=56;break;}else{label=55;break;}
 case 55: 
 var $176=(($__p_i_i_i56)|0);
 HEAP32[(($176)>>2)]=15016;
 var $177=(($__p_i_i_i56+4)|0);
 HEAP32[(($177)>>2)]=(26);
 var $178=(($__p_i_i_i56+8)|0);
 HEAP32[(($178)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15016,$172,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=111;break; }
 case 56: 
 var $$etemp$27$0=12;
 var $$etemp$27$1=0;

 var $179=HEAP32[((15020)>>2)];
 var $180=((($179)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14016,$180) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=111;break; }
 case 57: 
 HEAP32[((14316)>>2)]=0;
 HEAP32[((14312)>>2)]=6624;
 var $182=$__p_i_i_i60;
 var $$etemp$28$0=12;
 var $$etemp$28$1=0;

 var $183=HEAP32[((15856)>>2)];
 var $184=($183|0)==-1;
 if($184){label=59;break;}else{label=58;break;}
 case 58: 
 var $186=(($__p_i_i_i60)|0);
 HEAP32[(($186)>>2)]=15856;
 var $187=(($__p_i_i_i60+4)|0);
 HEAP32[(($187)>>2)]=(26);
 var $188=(($__p_i_i_i60+8)|0);
 HEAP32[(($188)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15856,$182,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=111;break; }
 case 59: 
 var $$etemp$29$0=12;
 var $$etemp$29$1=0;

 var $189=HEAP32[((15860)>>2)];
 var $190=((($189)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14312,$190) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=111;break; }
 case 60: 
 HEAP32[((14308)>>2)]=0;
 HEAP32[((14304)>>2)]=6560;
 var $192=$__p_i_i_i64;
 var $$etemp$30$0=12;
 var $$etemp$30$1=0;

 var $193=HEAP32[((15848)>>2)];
 var $194=($193|0)==-1;
 if($194){label=62;break;}else{label=61;break;}
 case 61: 
 var $196=(($__p_i_i_i64)|0);
 HEAP32[(($196)>>2)]=15848;
 var $197=(($__p_i_i_i64+4)|0);
 HEAP32[(($197)>>2)]=(26);
 var $198=(($__p_i_i_i64+8)|0);
 HEAP32[(($198)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15848,$192,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=111;break; }
 case 62: 
 var $$etemp$31$0=12;
 var $$etemp$31$1=0;

 var $199=HEAP32[((15852)>>2)];
 var $200=((($199)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14304,$200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=111;break; }
 case 63: 
 HEAP32[((14300)>>2)]=0;
 HEAP32[((14296)>>2)]=6496;
 var $202=$__p_i_i_i68;
 var $$etemp$32$0=12;
 var $$etemp$32$1=0;

 var $203=HEAP32[((15840)>>2)];
 var $204=($203|0)==-1;
 if($204){label=65;break;}else{label=64;break;}
 case 64: 
 var $206=(($__p_i_i_i68)|0);
 HEAP32[(($206)>>2)]=15840;
 var $207=(($__p_i_i_i68+4)|0);
 HEAP32[(($207)>>2)]=(26);
 var $208=(($__p_i_i_i68+8)|0);
 HEAP32[(($208)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15840,$202,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=111;break; }
 case 65: 
 var $$etemp$33$0=12;
 var $$etemp$33$1=0;

 var $209=HEAP32[((15844)>>2)];
 var $210=((($209)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14296,$210) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=111;break; }
 case 66: 
 HEAP32[((14292)>>2)]=0;
 HEAP32[((14288)>>2)]=6432;
 var $212=$__p_i_i_i72;
 var $$etemp$34$0=12;
 var $$etemp$34$1=0;

 var $213=HEAP32[((15832)>>2)];
 var $214=($213|0)==-1;
 if($214){label=68;break;}else{label=67;break;}
 case 67: 
 var $216=(($__p_i_i_i72)|0);
 HEAP32[(($216)>>2)]=15832;
 var $217=(($__p_i_i_i72+4)|0);
 HEAP32[(($217)>>2)]=(26);
 var $218=(($__p_i_i_i72+8)|0);
 HEAP32[(($218)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15832,$212,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=111;break; }
 case 68: 
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $219=HEAP32[((15836)>>2)];
 var $220=((($219)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14288,$220) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=111;break; }
 case 69: 
 HEAP32[((13876)>>2)]=0;
 HEAP32[((13872)>>2)]=4304;
 var $222=$__p_i_i_i76;
 var $$etemp$36$0=12;
 var $$etemp$36$1=0;

 var $223=HEAP32[((14944)>>2)];
 var $224=($223|0)==-1;
 if($224){label=71;break;}else{label=70;break;}
 case 70: 
 var $226=(($__p_i_i_i76)|0);
 HEAP32[(($226)>>2)]=14944;
 var $227=(($__p_i_i_i76+4)|0);
 HEAP32[(($227)>>2)]=(26);
 var $228=(($__p_i_i_i76+8)|0);
 HEAP32[(($228)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14944,$222,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=111;break; }
 case 71: 
 var $$etemp$37$0=12;
 var $$etemp$37$1=0;

 var $229=HEAP32[((14948)>>2)];
 var $230=((($229)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,13872,$230) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=111;break; }
 case 72: 
 HEAP32[((13868)>>2)]=0;
 HEAP32[((13864)>>2)]=4264;
 var $232=$__p_i_i_i80;
 var $$etemp$38$0=12;
 var $$etemp$38$1=0;

 var $233=HEAP32[((14936)>>2)];
 var $234=($233|0)==-1;
 if($234){label=74;break;}else{label=73;break;}
 case 73: 
 var $236=(($__p_i_i_i80)|0);
 HEAP32[(($236)>>2)]=14936;
 var $237=(($__p_i_i_i80+4)|0);
 HEAP32[(($237)>>2)]=(26);
 var $238=(($__p_i_i_i80+8)|0);
 HEAP32[(($238)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14936,$232,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=111;break; }
 case 74: 
 var $$etemp$39$0=12;
 var $$etemp$39$1=0;

 var $239=HEAP32[((14940)>>2)];
 var $240=((($239)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,13864,$240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=111;break; }
 case 75: 
 HEAP32[((13860)>>2)]=0;
 HEAP32[((13856)>>2)]=4224;
 var $242=$__p_i_i_i84;
 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $243=HEAP32[((14928)>>2)];
 var $244=($243|0)==-1;
 if($244){label=77;break;}else{label=76;break;}
 case 76: 
 var $246=(($__p_i_i_i84)|0);
 HEAP32[(($246)>>2)]=14928;
 var $247=(($__p_i_i_i84+4)|0);
 HEAP32[(($247)>>2)]=(26);
 var $248=(($__p_i_i_i84+8)|0);
 HEAP32[(($248)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14928,$242,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=111;break; }
 case 77: 
 var $$etemp$41$0=12;
 var $$etemp$41$1=0;

 var $249=HEAP32[((14932)>>2)];
 var $250=((($249)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,13856,$250) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=111;break; }
 case 78: 
 HEAP32[((13852)>>2)]=0;
 HEAP32[((13848)>>2)]=4184;
 var $252=$__p_i_i_i88;
 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $253=HEAP32[((14920)>>2)];
 var $254=($253|0)==-1;
 if($254){label=80;break;}else{label=79;break;}
 case 79: 
 var $256=(($__p_i_i_i88)|0);
 HEAP32[(($256)>>2)]=14920;
 var $257=(($__p_i_i_i88+4)|0);
 HEAP32[(($257)>>2)]=(26);
 var $258=(($__p_i_i_i88+8)|0);
 HEAP32[(($258)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14920,$252,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=111;break; }
 case 80: 
 var $$etemp$43$0=12;
 var $$etemp$43$1=0;

 var $259=HEAP32[((14924)>>2)];
 var $260=((($259)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,13848,$260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=111;break; }
 case 81: 
 HEAP32[((13932)>>2)]=0;
 HEAP32[((13928)>>2)]=4528;
 HEAP32[((13936)>>2)]=4576;
 var $262=$__p_i_i_i92;
 var $$etemp$44$0=12;
 var $$etemp$44$1=0;

 var $263=HEAP32[((14976)>>2)];
 var $264=($263|0)==-1;
 if($264){label=83;break;}else{label=82;break;}
 case 82: 
 var $266=(($__p_i_i_i92)|0);
 HEAP32[(($266)>>2)]=14976;
 var $267=(($__p_i_i_i92+4)|0);
 HEAP32[(($267)>>2)]=(26);
 var $268=(($__p_i_i_i92+8)|0);
 HEAP32[(($268)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14976,$262,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=111;break; }
 case 83: 
 var $$etemp$45$0=12;
 var $$etemp$45$1=0;

 var $269=HEAP32[((14980)>>2)];
 var $270=((($269)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,13928,$270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=111;break; }
 case 84: 
 HEAP32[((13916)>>2)]=0;
 HEAP32[((13912)>>2)]=4432;
 HEAP32[((13920)>>2)]=4480;
 var $272=$__p_i_i_i96;
 var $$etemp$46$0=12;
 var $$etemp$46$1=0;

 var $273=HEAP32[((14968)>>2)];
 var $274=($273|0)==-1;
 if($274){label=86;break;}else{label=85;break;}
 case 85: 
 var $276=(($__p_i_i_i96)|0);
 HEAP32[(($276)>>2)]=14968;
 var $277=(($__p_i_i_i96+4)|0);
 HEAP32[(($277)>>2)]=(26);
 var $278=(($__p_i_i_i96+8)|0);
 HEAP32[(($278)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14968,$272,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=111;break; }
 case 86: 
 var $$etemp$47$0=12;
 var $$etemp$47$1=0;

 var $279=HEAP32[((14972)>>2)];
 var $280=((($279)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,13912,$280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=111;break; }
 case 87: 
 HEAP32[((13900)>>2)]=0;
 HEAP32[((13896)>>2)]=5432;
 var $281=HEAP8[(15936)];
 var $282=(($281<<24)>>24)==0;
 if($282){label=88;break;}else{label=92;break;}
 case 88: 
 var $284=___cxa_guard_acquire(15936);
 var $285=($284|0)==0;
 if($285){label=92;break;}else{label=89;break;}
 case 89: 
 var $287=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=91;break; }
 case 90: 
 HEAP32[((13832)>>2)]=$287;

 label=92;break;
 case 91: 
 var $289$0 = ___cxa_find_matching_catch(-1, -1); var $289$1 = tempRet0;

 __ZNSt3__114__shared_countD2Ev(13896);
 var $eh_lpad_body$1=$289$1;var $eh_lpad_body$0=$289$0;label=112;break;
 case 92: 
 var $291=HEAP32[((13832)>>2)];
 HEAP32[((13904)>>2)]=$291;
 HEAP32[((13896)>>2)]=4400;
 var $292=$__p_i_i_i102;
 var $$etemp$48$0=12;
 var $$etemp$48$1=0;

 var $293=HEAP32[((14960)>>2)];
 var $294=($293|0)==-1;
 if($294){label=94;break;}else{label=93;break;}
 case 93: 
 var $296=(($__p_i_i_i102)|0);
 HEAP32[(($296)>>2)]=14960;
 var $297=(($__p_i_i_i102+4)|0);
 HEAP32[(($297)>>2)]=(26);
 var $298=(($__p_i_i_i102+8)|0);
 HEAP32[(($298)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14960,$292,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=111;break; }
 case 94: 
 var $$etemp$49$0=12;
 var $$etemp$49$1=0;

 var $299=HEAP32[((14964)>>2)];
 var $300=((($299)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,13896,$300) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=111;break; }
 case 95: 
 HEAP32[((13884)>>2)]=0;
 HEAP32[((13880)>>2)]=5432;
 var $301=HEAP8[(15936)];
 var $302=(($301<<24)>>24)==0;
 if($302){label=96;break;}else{label=100;break;}
 case 96: 
 var $304=___cxa_guard_acquire(15936);
 var $305=($304|0)==0;
 if($305){label=100;break;}else{label=97;break;}
 case 97: 
 var $307=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=99;break; }
 case 98: 
 HEAP32[((13832)>>2)]=$307;

 label=100;break;
 case 99: 
 var $309$0 = ___cxa_find_matching_catch(-1, -1); var $309$1 = tempRet0;

 __ZNSt3__114__shared_countD2Ev(13880);
 var $eh_lpad_body$1=$309$1;var $eh_lpad_body$0=$309$0;label=112;break;
 case 100: 
 var $311=HEAP32[((13832)>>2)];
 HEAP32[((13888)>>2)]=$311;
 HEAP32[((13880)>>2)]=4368;
 var $312=$__p_i_i_i109;
 var $$etemp$50$0=12;
 var $$etemp$50$1=0;

 var $313=HEAP32[((14952)>>2)];
 var $314=($313|0)==-1;
 if($314){label=102;break;}else{label=101;break;}
 case 101: 
 var $316=(($__p_i_i_i109)|0);
 HEAP32[(($316)>>2)]=14952;
 var $317=(($__p_i_i_i109+4)|0);
 HEAP32[(($317)>>2)]=(26);
 var $318=(($__p_i_i_i109+8)|0);
 HEAP32[(($318)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14952,$312,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=111;break; }
 case 102: 
 var $$etemp$51$0=12;
 var $$etemp$51$1=0;

 var $319=HEAP32[((14956)>>2)];
 var $320=((($319)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,13880,$320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=111;break; }
 case 103: 
 HEAP32[((14012)>>2)]=0;
 HEAP32[((14008)>>2)]=4760;
 var $322=$__p_i_i_i113;
 var $$etemp$52$0=12;
 var $$etemp$52$1=0;

 var $323=HEAP32[((15008)>>2)];
 var $324=($323|0)==-1;
 if($324){label=105;break;}else{label=104;break;}
 case 104: 
 var $326=(($__p_i_i_i113)|0);
 HEAP32[(($326)>>2)]=15008;
 var $327=(($__p_i_i_i113+4)|0);
 HEAP32[(($327)>>2)]=(26);
 var $328=(($__p_i_i_i113+8)|0);
 HEAP32[(($328)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15008,$322,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=111;break; }
 case 105: 
 var $$etemp$53$0=12;
 var $$etemp$53$1=0;

 var $329=HEAP32[((15012)>>2)];
 var $330=((($329)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14008,$330) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=111;break; }
 case 106: 
 HEAP32[((14004)>>2)]=0;
 HEAP32[((14000)>>2)]=4720;
 var $332=$__p_i_i_i;
 var $$etemp$54$0=12;
 var $$etemp$54$1=0;

 var $333=HEAP32[((15000)>>2)];
 var $334=($333|0)==-1;
 if($334){label=108;break;}else{label=107;break;}
 case 107: 
 var $336=(($__p_i_i_i)|0);
 HEAP32[(($336)>>2)]=15000;
 var $337=(($__p_i_i_i+4)|0);
 HEAP32[(($337)>>2)]=(26);
 var $338=(($__p_i_i_i+8)|0);
 HEAP32[(($338)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(15000,$332,266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=111;break; }
 case 108: 
 var $$etemp$55$0=12;
 var $$etemp$55$1=0;

 var $339=HEAP32[((15004)>>2)];
 var $340=((($339)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,14000,$340) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=111;break; }
 case 109: 
 STACKTOP=sp;return;
 case 110: 
 var $342$0 = ___cxa_find_matching_catch(-1, -1); var $342$1 = tempRet0;
 var $343=$342$0;
 var $344=$342$1;
 var $_0=$344;var $_01=$343;label=113;break;
 case 111: 
 var $346$0 = ___cxa_find_matching_catch(-1, -1); var $346$1 = tempRet0;
 var $eh_lpad_body$1=$346$1;var $eh_lpad_body$0=$346$0;label=112;break;
 case 112: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $347=$eh_lpad_body$0;
 var $348=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($19);
 var $_0=$348;var $_01=$347;label=113;break;
 case 113: 
 var $_01;
 var $_0;
 var $350=HEAP32[(($4)>>2)];
 var $351=($350|0)==0;
 if($351){label=119;break;}else{label=114;break;}
 case 114: 
 var $353=HEAP32[(($5)>>2)];
 var $354=($353|0)==($350|0);
 if($354){label=116;break;}else{label=115;break;}
 case 115: 
 var $__new_last2_i_i_i_i_i=$350;
 var $scevgep_i_i_i_i_i=((($353)-(4))|0);
 var $scevgep1_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $355=(((-$__new_last2_i_i_i_i_i))|0);
 var $uglygep_i_i_i_i_i=(($scevgep1_i_i_i_i_i+$355)|0);
 var $uglygep3_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $356=$uglygep3_i_i_i_i_i>>>2;
 var $357=$356^-1;
 var $scevgep4_i_i_i_i_i=(($353+($357<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep4_i_i_i_i_i;
 label=116;break;
 case 116: 
 var $358=($9|0)==($350|0);
 if($358){label=117;break;}else{label=118;break;}
 case 117: 
 HEAP8[($7)]=0;
 label=119;break;
 case 118: 
 var $361=$350;
 __ZdlPv($361);
 label=119;break;
 case 119: 
 var $362=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($362);
 var $363$0=$_01;
 var $363$1=0;
 var $364$0=$363$0;
 var $364$1=$_0;
 ___resumeException($364$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 var $2=(($this+8)|0);
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=($10>>>0)>($id>>>0);
 if($11){var $30=$6;label=11;break;}else{label=2;break;}
 case 2: 
 var $13=((($id)+(1))|0);
 var $14=($10>>>0)<($13>>>0);
 if($14){label=3;break;}else{label=5;break;}
 case 3: 
 var $16=((($13)-($10))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($2,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=8;break; }
 case 4: 
 var $_pre2=HEAP32[(($5)>>2)];
 var $30=$_pre2;label=11;break;
 case 5: 
 var $18=($10>>>0)>($13>>>0);
 if($18){label=6;break;}else{var $30=$6;label=11;break;}
 case 6: 
 var $20=(($6+($13<<2))|0);
 var $21=($4|0)==($20|0);
 if($21){var $30=$6;label=11;break;}else{label=7;break;}
 case 7: 
 var $__new_last2_i_i_i=$20;
 var $scevgep_i_i_i=((($4)-(4))|0);
 var $scevgep1_i_i_i=$scevgep_i_i_i;
 var $22=(((-$__new_last2_i_i_i))|0);
 var $uglygep_i_i_i=(($scevgep1_i_i_i+$22)|0);
 var $uglygep3_i_i_i=$uglygep_i_i_i;
 var $23=$uglygep3_i_i_i>>>2;
 var $24=$23^-1;
 var $scevgep4_i_i_i=(($4+($24<<2))|0);
 HEAP32[(($3)>>2)]=$scevgep4_i_i_i;
 var $30=$6;label=11;break;
 case 8: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=($f|0)==0;
 if($27){label=10;break;}else{label=9;break;}
 case 9: 
 var $29=__ZNSt3__114__shared_count16__release_sharedEv($1);
 label=10;break;
 case 10: 
 ___resumeException($26$0)
 case 11: 
 var $30;
 var $31=(($30+($id<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 if($33){var $37=$30;label=13;break;}else{label=12;break;}
 case 12: 
 var $35=(($32)|0);
 var $36=__ZNSt3__114__shared_count16__release_sharedEv($35);
 var $_pre=HEAP32[(($5)>>2)];
 var $37=$_pre;label=13;break;
 case 13: 
 var $37;
 var $38=(($37+($id<<2))|0);
 HEAP32[(($38)>>2)]=$f;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__impD0Ev($this){
 var label=0;


 __ZNSt3__16locale5__impD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}


function __ZNSt3__16locale5__impD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5464;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($3|0)==($5|0);
 if($6){label=5;break;}else{var $i_02=0;var $8=$5;var $7=$3;label=2;break;}
 case 2: 
 var $7;
 var $8;
 var $i_02;
 var $9=(($8+($i_02<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $17=$7;var $16=$8;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($10)|0);
 var $14=__ZNSt3__114__shared_count16__release_sharedEv($13);
 var $_pre=HEAP32[(($2)>>2)];
 var $_pre4=HEAP32[(($4)>>2)];
 var $17=$_pre;var $16=$_pre4;label=4;break;
 case 4: 
 var $16;
 var $17;
 var $18=((($i_02)+(1))|0);
 var $19=$17;
 var $20=$16;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($18>>>0)<($22>>>0);
 if($23){var $i_02=$18;var $8=$16;var $7=$17;label=2;break;}else{label=5;break;}
 case 5: 
 var $24=(($this+144)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($24);
 var $25=HEAP32[(($4)>>2)];
 var $26=($25|0)==0;
 if($26){label=11;break;}else{label=6;break;}
 case 6: 
 var $28=HEAP32[(($2)>>2)];
 var $29=($28|0)==($25|0);
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 var $__new_last2_i_i_i_i_i=$25;
 var $scevgep_i_i_i_i_i=((($28)-(4))|0);
 var $scevgep1_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $30=(((-$__new_last2_i_i_i_i_i))|0);
 var $uglygep_i_i_i_i_i=(($scevgep1_i_i_i_i_i+$30)|0);
 var $uglygep3_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $31=$uglygep3_i_i_i_i_i>>>2;
 var $32=$31^-1;
 var $scevgep4_i_i_i_i_i=(($28+($32<<2))|0);
 HEAP32[(($2)>>2)]=$scevgep4_i_i_i_i_i;
 label=8;break;
 case 8: 
 var $33=(($this+24)|0);
 var $34=$33;
 var $35=($34|0)==($25|0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=(($this+136)|0);
 HEAP8[($37)]=0;
 label=11;break;
 case 10: 
 var $39=$25;
 __ZdlPv($39);
 label=11;break;
 case 11: 
 var $40=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($40);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale8__globalEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(15920)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=8;break;}
 case 2: 
 var $4=___cxa_guard_acquire(15920);
 var $5=($4|0)==0;
 if($5){label=8;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(15928)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=7;break;}
 case 4: 
 var $10=___cxa_guard_acquire(15928);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__impC2Ej(14104,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 HEAP32[((13816)>>2)]=14104;
 HEAP32[((13808)>>2)]=13816;

 label=7;break;
 case 7: 
 var $15=HEAP32[((13808)>>2)];
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 HEAP32[((13824)>>2)]=$17;
 var $18=(($17)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($18);
 HEAP32[((13800)>>2)]=13824;

 label=8;break;
 case 8: 
 var $20=HEAP32[((13800)>>2)];
 return $20;
 case 9: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;


 ___resumeException($21$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16localeC2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __ZNSt3__16locale8__globalEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=(($this)|0);
 var $4=(($1)|0);
 var $5=HEAP32[(($4)>>2)];
 HEAP32[(($3)>>2)]=$5;
 var $6=(($5)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($6);
 return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16localeC2ERKS0_($this,$l){
 var label=0;


 var $1=(($this)|0);
 var $2=(($l)|0);
 var $3=HEAP32[(($2)>>2)];
 HEAP32[(($1)>>2)]=$3;
 var $4=(($3)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($4);
 return;
}


function __ZNSt3__16localeD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=__ZNSt3__114__shared_count16__release_sharedEv($3);
 return;
}


function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=(($x)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__p_i_i)|0);
 HEAP32[(($8)>>2)]=$x;
 var $9=(($__p_i_i+4)|0);
 HEAP32[(($9)>>2)]=(26);
 var $10=(($__p_i_i+8)|0);
 HEAP32[(($10)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,266);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=(($x+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($2+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($2+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{var $27=0;label=5;break;}
 case 4: 
 var $24=(($17+($13<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)!=0;
 var $27=$26;label=5;break;
 case 5: 
 var $27;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=(($x)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__p_i_i)|0);
 HEAP32[(($8)>>2)]=$x;
 var $9=(($__p_i_i+4)|0);
 HEAP32[(($9)>>2)]=(26);
 var $10=(($__p_i_i+8)|0);
 HEAP32[(($10)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,266);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=(($x+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($2+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($2+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 ___cxa_throw($26,10104,(378));
 throw "Reached an unreachable!";
 case 6: 
 STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5facetD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__16locale5facet16__on_zero_sharedEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 FUNCTION_TABLE[$6]($this);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale2id6__initEv($this){
 var label=0;


 var $1=(tempValue=HEAP32[((15096)>>2)],HEAP32[((15096)>>2)]=tempValue+1,tempValue);
 var $2=((($1)+(1))|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}


function __ZNSt3__15ctypeIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $12=0;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<1))|0);
 var $8=HEAP16[(($7)>>1)];
 var $9=$8&$m;
 var $10=(($9<<16)>>16)!=0;
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=7;break;}else{var $_013=$low;var $_04=$vec;label=2;break;}
 case 2: 
 var $_04;
 var $_013;
 var $2=HEAP32[(($_013)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $_off0=0;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<1))|0);
 var $10=HEAP16[(($9)>>1)];
 var $_off0=$10;label=6;break;
 case 6: 
 var $_off0;
 HEAP16[(($_04)>>1)]=$_off0;
 var $12=(($_013+4)|0);
 var $13=(($_04+2)|0);
 var $14=($12|0)==($high|0);
 if($14){var $_01_lcssa=$high;label=7;break;}else{var $_013=$12;var $_04=$13;label=2;break;}
 case 7: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<1))|0);
 var $10=HEAP16[(($9)>>1)];
 var $11=$10&$m;
 var $12=(($11<<16)>>16)==0;
 if($12){label=6;break;}else{var $_0_lcssa=$_02;label=7;break;}
 case 6: 
 var $14=(($_02+4)|0);
 var $15=($14|0)==($high|0);
 if($15){var $_0_lcssa=$high;label=7;break;}else{var $_02=$14;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=3;break;}
 case 2: 
 var $3=($15|0)==($high|0);
 if($3){var $_0_lcssa=$high;label=7;break;}else{var $_02=$15;label=3;break;}
 case 3: 
 var $_02;
 var $4=HEAP32[(($_02)>>2)];
 var $isascii=($4>>>0)<128;
 if($isascii){label=4;break;}else{var $_0_lcssa=$_02;label=7;break;}
 case 4: 
 var $6=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
 case 6: 
 var $10=HEAP32[(($6)>>2)];
 var $11=(($10+($4<<1))|0);
 var $12=HEAP16[(($11)>>1)];
 var $13=$12&$m;
 var $14=(($13<<16)>>16)==0;
 var $15=(($_02+4)|0);
 if($14){var $_0_lcssa=$_02;label=7;break;}else{label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $12=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $12=$10;label=6;break;
 case 6: 
 var $12;
 HEAP32[(($_02)>>2)]=$12;
 var $13=(($_02+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_02=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $12=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $12=$10;label=6;break;
 case 6: 
 var $12;
 HEAP32[(($_02)>>2)]=$12;
 var $13=(($_02+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_02=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c){
 var label=0;


 var $1=(($c<<24)>>24);
 return $1;
}


function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_012=$low;var $_03=$dest;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP8[($_012)];
 var $3=(($2<<24)>>24);
 HEAP32[(($_03)>>2)]=$3;
 var $4=(($_012+1)|0);
 var $5=(($_03+4)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_01_lcssa=$high;label=3;break;}else{var $_012=$4;var $_03=$5;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault){
 var label=0;


 var $isascii=($c>>>0)<128;
 var $1=(($c)&255);
 var $_0=($isascii?$1:$dfault);
 return $_0;
}


function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=5;break;}else{label=2;break;}
 case 2: 
 var $low5=$low;
 var $scevgep=((($high)-(4))|0);
 var $scevgep4=$scevgep;
 var $2=(((-$low5))|0);
 var $uglygep=(($scevgep4+$2)|0);
 var $uglygep6=$uglygep;
 var $3=$uglygep6>>>2;
 var $4=((($3)+(1))|0);
 var $_012=$low;var $_03=$dest;label=3;break;
 case 3: 
 var $_03;
 var $_012;
 var $6=HEAP32[(($_012)>>2)];
 var $isascii=($6>>>0)<128;
 var $7=(($6)&255);
 var $_dfault=($isascii?$7:$dfault);
 HEAP8[($_03)]=$_dfault;
 var $8=(($_012+4)|0);
 var $9=(($_03+1)|0);
 var $10=($8|0)==($high|0);
 if($10){label=4;break;}else{var $_012=$8;var $_03=$9;label=3;break;}
 case 4: 
 var $scevgep7=(($low+($4<<2))|0);
 var $_01_lcssa=$scevgep7;label=5;break;
 case 5: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5576;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$3;
 __ZdaPv($10);
 label=4;break;
 case 4: 
 var $11=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($11);
 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5576;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$3;
 __ZdaPv($10);
 label=4;break;
 case 4: 
 var $12=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii1=(($c<<24)>>24)>-1;
 if($isascii1){label=2;break;}else{var $12=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=($c&255);
 var $7=HEAP32[(($2)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_03=$low;label=2;break;}
 case 2: 
 var $_03;
 var $2=HEAP8[($_03)];
 var $isascii1=(($2<<24)>>24)>-1;
 if($isascii1){label=3;break;}else{var $14=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_03)]=$14;
 var $15=(($_03+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_03=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii1=(($c<<24)>>24)>-1;
 if($isascii1){label=2;break;}else{var $12=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=(($c<<24)>>24);
 var $7=HEAP32[(($2)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_03=$low;label=2;break;}
 case 2: 
 var $_03;
 var $2=HEAP8[($_03)];
 var $isascii1=(($2<<24)>>24)>-1;
 if($isascii1){label=3;break;}else{var $14=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_03)]=$14;
 var $15=(($_03+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_03=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c){
 var label=0;


 return $c;
}


function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_012=$low;var $_03=$dest;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP8[($_012)];
 HEAP8[($_03)]=$2;
 var $3=(($_012+1)|0);
 var $4=(($_03+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_01_lcssa=$high;label=3;break;}else{var $_012=$3;var $_03=$4;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault){
 var label=0;


 var $isascii1=(($c<<24)>>24)>-1;
 var $c_dfault=($isascii1?$c:$dfault);
 return $c_dfault;
}


function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_013=$low;var $_04=$dest;label=2;break;}
 case 2: 
 var $_04;
 var $_013;
 var $2=HEAP8[($_013)];
 var $isascii2=(($2<<24)>>24)>-1;
 var $_dfault=($isascii2?$2:$dfault);
 HEAP8[($_04)]=$_dfault;
 var $3=(($_013+1)|0);
 var $4=(($_04+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_01_lcssa=$high;label=3;break;}else{var $_013=$3;var $_04=$4;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;


 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;


 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 1;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 1;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx){
 var label=0;


 var $2=$end;
 var $3=$frm;
 var $4=((($2)-($3))|0);
 var $5=($4>>>0)<($mx>>>0);
 var $6=($5?$4:$mx);
 return $6;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 1;
}


function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this){
 var label=0;


 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}


function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=($frm|0)==($frm_end|0);
 if($1){label=2;break;}else{var $fend_052=$frm;label=4;break;}
 case 2: 
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $119=$frm;label=50;break;
 case 3: 
 var $3=($6|0)==($frm_end|0);
 if($3){var $fend_0_lcssa=$frm_end;label=5;break;}else{var $fend_052=$6;label=4;break;}
 case 4: 
 var $fend_052;
 var $4=HEAP32[(($fend_052)>>2)];
 var $5=($4|0)==0;
 var $6=(($fend_052+4)|0);
 if($5){var $fend_0_lcssa=$fend_052;label=5;break;}else{label=3;break;}
 case 5: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $7=($to|0)==($to_end|0);
 var $or_cond46=$1|$7;
 if($or_cond46){var $119=$frm;label=50;break;}else{label=6;break;}
 case 6: 
 var $8=$st;
 var $9=$to_end;
 var $10=(($this+8)|0);
 var $11=(($tmp)|0);
 var $_0247=$to;var $_0148=$frm;var $fend_149=$fend_0_lcssa;label=7;break;
 case 7: 
 var $fend_149;
 var $_0148;
 var $_0247;
 var $ld$0$0=(($8)|0);
 var $13$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $13$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$13$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$13$1;
 var $14=$fend_149;
 var $15=$_0148;
 var $16=((($14)-($15))|0);
 var $17=$16>>2;
 var $18=$_0247;
 var $19=((($9)-($18))|0);
 var $20=HEAP32[(($10)>>2)];
 var $21=_uselocale($20);
 var $22=(function() { try { __THREW__ = 0; return _wcsnrtombs($_0247,$frm_nxt,$17,$19,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $24=($21|0)==0;
 if($24){label=15;break;}else{label=9;break;}
 case 9: 
 var $26=(function() { try { __THREW__ = 0; return _uselocale($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 10: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1,0); var $28$1 = tempRet0;
 var $29=$28$0;
 ___clang_call_terminate($29);
 throw "Reached an unreachable!";
 case 11: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=($21|0)==0;
 if($32){label=14;break;}else{label=12;break;}
 case 12: 
 var $34=(function() { try { __THREW__ = 0; return _uselocale($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=13;break; }
 case 13: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 var $37=$36$0;
 ___clang_call_terminate($37);
 throw "Reached an unreachable!";
 case 14: 
 ___resumeException($31$0)
 case 15: 
 if(($22|0)==-1){ label=16;break;}else if(($22|0)==0){ var $_0=1;label=51;break;}else{label=28;break;}
 case 16: 
 HEAP32[(($to_nxt)>>2)]=$_0247;
 var $39=HEAP32[(($frm_nxt)>>2)];
 var $40=($_0148|0)==($39|0);
 if($40){var $_1_lcssa=$_0148;label=27;break;}else{var $_19=$_0148;var $41=$_0247;label=17;break;}
 case 17: 
 var $41;
 var $_19;
 var $42=HEAP32[(($_19)>>2)];
 var $43=HEAP32[(($10)>>2)];
 var $44=_uselocale($43);
 var $45=(function() { try { __THREW__ = 0; return _wcrtomb($41,$42,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=21;break; }
 case 18: 
 var $47=($44|0)==0;
 if($47){label=25;break;}else{label=19;break;}
 case 19: 
 var $49=(function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 20: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 var $52=$51$0;
 ___clang_call_terminate($52);
 throw "Reached an unreachable!";
 case 21: 
 var $54$0 = ___cxa_find_matching_catch(-1, -1); var $54$1 = tempRet0;
 var $55=($44|0)==0;
 if($55){label=24;break;}else{label=22;break;}
 case 22: 
 var $57=(function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=23;break; }
 case 23: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 ___clang_call_terminate($60);
 throw "Reached an unreachable!";
 case 24: 
 ___resumeException($54$0)
 case 25: 
 var $61=($45|0)==-1;
 if($61){var $_1_lcssa=$_19;label=27;break;}else{label=26;break;}
 case 26: 
 var $63=HEAP32[(($to_nxt)>>2)];
 var $64=(($63+$45)|0);
 HEAP32[(($to_nxt)>>2)]=$64;
 var $65=(($_19+4)|0);
 var $66=HEAP32[(($frm_nxt)>>2)];
 var $67=($65|0)==($66|0);
 if($67){var $_1_lcssa=$65;label=27;break;}else{var $_19=$65;var $41=$64;label=17;break;}
 case 27: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $_0=2;label=51;break;
 case 28: 
 var $69=HEAP32[(($to_nxt)>>2)];
 var $70=(($69+$22)|0);
 HEAP32[(($to_nxt)>>2)]=$70;
 var $71=($70|0)==($to_end|0);
 if($71){label=49;break;}else{label=29;break;}
 case 29: 
 var $73=($fend_149|0)==($frm_end|0);
 if($73){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre98=HEAP32[(($frm_nxt)>>2)];
 var $fend_3=$frm_end;var $116=$70;var $115=$_pre98;label=48;break;
 case 31: 
 var $75=HEAP32[(($10)>>2)];
 var $76=_uselocale($75);
 var $77=(function() { try { __THREW__ = 0; return _wcrtomb($11,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $79=($76|0)==0;
 if($79){label=39;break;}else{label=33;break;}
 case 33: 
 var $81=(function() { try { __THREW__ = 0; return _uselocale($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 34: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1,0); var $83$1 = tempRet0;
 var $84=$83$0;
 ___clang_call_terminate($84);
 throw "Reached an unreachable!";
 case 35: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1); var $86$1 = tempRet0;
 var $87=($76|0)==0;
 if($87){label=38;break;}else{label=36;break;}
 case 36: 
 var $89=(function() { try { __THREW__ = 0; return _uselocale($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1,0); var $91$1 = tempRet0;
 var $92=$91$0;
 ___clang_call_terminate($92);
 throw "Reached an unreachable!";
 case 38: 
 ___resumeException($86$0)
 case 39: 
 var $93=($77|0)==-1;
 if($93){var $_0=2;label=51;break;}else{label=40;break;}
 case 40: 
 var $95=HEAP32[(($to_nxt)>>2)];
 var $96=$95;
 var $97=((($9)-($96))|0);
 var $98=($77>>>0)>($97>>>0);
 if($98){var $_0=1;label=51;break;}else{label=41;break;}
 case 41: 
 var $99=($77|0)==0;
 if($99){label=44;break;}else{var $n_011=$77;var $p_012=$11;var $100=$95;label=42;break;}
 case 42: 
 var $100;
 var $p_012;
 var $n_011;
 var $101=HEAP8[($p_012)];
 var $102=(($100+1)|0);
 HEAP32[(($to_nxt)>>2)]=$102;
 HEAP8[($100)]=$101;
 var $103=((($n_011)-(1))|0);
 var $104=($103|0)==0;
 if($104){label=44;break;}else{label=43;break;}
 case 43: 
 var $105=(($p_012+1)|0);
 var $_pre99=HEAP32[(($to_nxt)>>2)];
 var $n_011=$103;var $p_012=$105;var $100=$_pre99;label=42;break;
 case 44: 
 var $106=HEAP32[(($frm_nxt)>>2)];
 var $107=(($106+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$107;
 var $108=($107|0)==($frm_end|0);
 if($108){var $fend_2_lcssa=$frm_end;label=47;break;}else{var $fend_215=$107;label=46;break;}
 case 45: 
 var $110=($113|0)==($frm_end|0);
 if($110){var $fend_2_lcssa=$frm_end;label=47;break;}else{var $fend_215=$113;label=46;break;}
 case 46: 
 var $fend_215;
 var $111=HEAP32[(($fend_215)>>2)];
 var $112=($111|0)==0;
 var $113=(($fend_215+4)|0);
 if($112){var $fend_2_lcssa=$fend_215;label=47;break;}else{label=45;break;}
 case 47: 
 var $fend_2_lcssa;
 var $_pre95=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $116=$_pre95;var $115=$107;label=48;break;
 case 48: 
 var $115;
 var $116;
 var $fend_3;
 var $117=($115|0)==($frm_end|0);
 var $118=($116|0)==($to_end|0);
 var $or_cond=$117|$118;
 if($or_cond){var $119=$115;label=50;break;}else{var $_0247=$116;var $_0148=$115;var $fend_149=$fend_3;label=7;break;}
 case 49: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $119=$_pre;label=50;break;
 case 50: 
 var $119;
 var $not_=($119|0)!=($frm_end|0);
 var $120=($not_&1);
 var $_0=$120;label=51;break;
 case 51: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}



function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $1=($frm|0)==($frm_end|0);
 if($1){label=2;break;}else{var $fend_059=$frm;label=4;break;}
 case 2: 
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $112=$frm;label=49;break;
 case 3: 
 var $3=($6|0)==($frm_end|0);
 if($3){var $fend_0_lcssa=$frm_end;label=5;break;}else{var $fend_059=$6;label=4;break;}
 case 4: 
 var $fend_059;
 var $4=HEAP8[($fend_059)];
 var $5=(($4<<24)>>24)==0;
 var $6=(($fend_059+1)|0);
 if($5){var $fend_0_lcssa=$fend_059;label=5;break;}else{label=3;break;}
 case 5: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $7=($to|0)==($to_end|0);
 var $or_cond53=$1|$7;
 if($or_cond53){var $112=$frm;label=49;break;}else{label=6;break;}
 case 6: 
 var $8=$st;
 var $9=$to_end;
 var $10=(($this+8)|0);
 var $_0254=$to;var $_0155=$frm;var $fend_156=$fend_0_lcssa;label=7;break;
 case 7: 
 var $fend_156;
 var $_0155;
 var $_0254;
 var $ld$0$0=(($8)|0);
 var $12$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $12$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$12$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$12$1;
 var $13=$fend_156;
 var $14=$_0155;
 var $15=((($13)-($14))|0);
 var $16=$_0254;
 var $17=((($9)-($16))|0);
 var $18=$17>>2;
 var $19=HEAP32[(($10)>>2)];
 var $20=_uselocale($19);
 var $21=(function() { try { __THREW__ = 0; return _mbsnrtowcs($_0254,$frm_nxt,$15,$18,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $23=($20|0)==0;
 if($23){label=15;break;}else{label=9;break;}
 case 9: 
 var $25=(function() { try { __THREW__ = 0; return _uselocale($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 10: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1,0); var $27$1 = tempRet0;
 var $28=$27$0;
 ___clang_call_terminate($28);
 throw "Reached an unreachable!";
 case 11: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 var $31=($20|0)==0;
 if($31){label=14;break;}else{label=12;break;}
 case 12: 
 var $33=(function() { try { __THREW__ = 0; return _uselocale($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=13;break; }
 case 13: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1,0); var $35$1 = tempRet0;
 var $36=$35$0;
 ___clang_call_terminate($36);
 throw "Reached an unreachable!";
 case 14: 
 ___resumeException($30$0)
 case 15: 
 if(($21|0)==-1){ label=16;break;}else if(($21|0)==0){ var $_0=2;label=50;break;}else{label=32;break;}
 case 16: 
 HEAP32[(($to_nxt)>>2)]=$_0254;
 var $37=HEAP32[(($frm_nxt)>>2)];
 var $38=($_0155|0)==($37|0);
 if($38){var $_1_lcssa=$_0155;label=31;break;}else{var $storemerge14=$_0254;var $_115=$_0155;label=17;break;}
 case 17: 
 var $_115;
 var $storemerge14;
 var $39=$_115;
 var $40=((($13)-($39))|0);
 var $41=HEAP32[(($10)>>2)];
 var $42=_uselocale($41);
 var $43=(function() { try { __THREW__ = 0; return _mbrtowc($storemerge14,$_115,$40,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=21;break; }
 case 18: 
 var $45=($42|0)==0;
 if($45){label=25;break;}else{label=19;break;}
 case 19: 
 var $47=(function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 20: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1,0); var $49$1 = tempRet0;
 var $50=$49$0;
 ___clang_call_terminate($50);
 throw "Reached an unreachable!";
 case 21: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 var $53=($42|0)==0;
 if($53){label=24;break;}else{label=22;break;}
 case 22: 
 var $55=(function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=23;break; }
 case 23: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1,0); var $57$1 = tempRet0;
 var $58=$57$0;
 ___clang_call_terminate($58);
 throw "Reached an unreachable!";
 case 24: 
 ___resumeException($52$0)
 case 25: 
 if(($43|0)==0){ label=26;break;}else if(($43|0)==-1){ label=27;break;}else if(($43|0)==-2){ label=28;break;}else{label=29;break;}
 case 26: 
 var $60=(($_115+1)|0);
 var $_2=$60;label=30;break;
 case 27: 
 HEAP32[(($frm_nxt)>>2)]=$_115;
 var $_0=2;label=50;break;
 case 28: 
 HEAP32[(($frm_nxt)>>2)]=$_115;
 var $_0=1;label=50;break;
 case 29: 
 var $64=(($_115+$43)|0);
 var $_2=$64;label=30;break;
 case 30: 
 var $_2;
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+4)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 var $68=HEAP32[(($frm_nxt)>>2)];
 var $69=($_2|0)==($68|0);
 if($69){var $_1_lcssa=$_2;label=31;break;}else{var $storemerge14=$67;var $_115=$_2;label=17;break;}
 case 31: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $not_3=($_1_lcssa|0)!=($frm_end|0);
 var $70=($not_3&1);
 var $_0=$70;label=50;break;
 case 32: 
 var $72=HEAP32[(($to_nxt)>>2)];
 var $73=(($72+($21<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$73;
 var $74=($73|0)==($to_end|0);
 if($74){label=48;break;}else{label=33;break;}
 case 33: 
 var $76=($fend_156|0)==($frm_end|0);
 var $_pre113=HEAP32[(($frm_nxt)>>2)];
 if($76){var $fend_3=$frm_end;var $109=$73;var $108=$_pre113;label=47;break;}else{label=34;break;}
 case 34: 
 var $78=HEAP32[(($10)>>2)];
 var $79=_uselocale($78);
 var $80=(function() { try { __THREW__ = 0; return _mbrtowc($73,$_pre113,1,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $82=($79|0)==0;
 if($82){label=42;break;}else{label=36;break;}
 case 36: 
 var $84=(function() { try { __THREW__ = 0; return _uselocale($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 37: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1,0); var $86$1 = tempRet0;
 var $87=$86$0;
 ___clang_call_terminate($87);
 throw "Reached an unreachable!";
 case 38: 
 var $89$0 = ___cxa_find_matching_catch(-1, -1); var $89$1 = tempRet0;
 var $90=($79|0)==0;
 if($90){label=41;break;}else{label=39;break;}
 case 39: 
 var $92=(function() { try { __THREW__ = 0; return _uselocale($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=40;break; }
 case 40: 
 var $94$0 = ___cxa_find_matching_catch(-1, -1,0); var $94$1 = tempRet0;
 var $95=$94$0;
 ___clang_call_terminate($95);
 throw "Reached an unreachable!";
 case 41: 
 ___resumeException($89$0)
 case 42: 
 var $96=($80|0)==0;
 if($96){label=43;break;}else{var $_0=2;label=50;break;}
 case 43: 
 var $98=HEAP32[(($to_nxt)>>2)];
 var $99=(($98+4)|0);
 HEAP32[(($to_nxt)>>2)]=$99;
 var $100=HEAP32[(($frm_nxt)>>2)];
 var $101=(($100+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$101;
 var $102=($101|0)==($frm_end|0);
 if($102){var $fend_2_lcssa=$frm_end;label=46;break;}else{var $fend_216=$101;label=45;break;}
 case 44: 
 var $104=($107|0)==($frm_end|0);
 if($104){var $fend_2_lcssa=$frm_end;label=46;break;}else{var $fend_216=$107;label=45;break;}
 case 45: 
 var $fend_216;
 var $105=HEAP8[($fend_216)];
 var $106=(($105<<24)>>24)==0;
 var $107=(($fend_216+1)|0);
 if($106){var $fend_2_lcssa=$fend_216;label=46;break;}else{label=44;break;}
 case 46: 
 var $fend_2_lcssa;
 var $_pre111=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $109=$_pre111;var $108=$101;label=47;break;
 case 47: 
 var $108;
 var $109;
 var $fend_3;
 var $110=($108|0)==($frm_end|0);
 var $111=($109|0)==($to_end|0);
 var $or_cond=$110|$111;
 if($or_cond){var $112=$108;label=49;break;}else{var $_0254=$109;var $_0155=$108;var $fend_156=$fend_3;label=7;break;}
 case 48: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $112=$_pre;label=49;break;
 case 49: 
 var $112;
 var $not_=($112|0)!=($frm_end|0);
 var $113=($not_&1);
 var $_0=$113;label=50;break;
 case 50: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp=sp;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=(($tmp)|0);
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=_uselocale($3);
 var $5=(function() { try { __THREW__ = 0; return _wcrtomb($1,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $7=($4|0)==0;
 if($7){label=9;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 var $15=($4|0)==0;
 if($15){label=8;break;}else{label=6;break;}
 case 6: 
 var $17=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=7;break; }
 case 7: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $20=$19$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 8: 
 ___resumeException($14$0)
 case 9: 
 if(($5|0)==-1|($5|0)==0){ var $_0=2;label=14;break;}else{label=10;break;}
 case 10: 
 var $22=((($5)-(1))|0);
 var $23=HEAP32[(($to_nxt)>>2)];
 var $24=$to_end;
 var $25=$23;
 var $26=((($24)-($25))|0);
 var $27=($22>>>0)>($26>>>0);
 if($27){var $_0=1;label=14;break;}else{label=11;break;}
 case 11: 
 var $28=($22|0)==0;
 if($28){var $_0=0;label=14;break;}else{var $n_02=$22;var $p_03=$1;var $29=$23;label=12;break;}
 case 12: 
 var $29;
 var $p_03;
 var $n_02;
 var $30=HEAP8[($p_03)];
 var $31=(($29+1)|0);
 HEAP32[(($to_nxt)>>2)]=$31;
 HEAP8[($29)]=$30;
 var $32=((($n_02)-(1))|0);
 var $33=($32|0)==0;
 if($33){var $_0=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $34=(($p_03+1)|0);
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $n_02=$32;var $p_03=$34;var $29=$_pre;label=12;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $4=(function() { try { __THREW__ = 0; return _mbtowc(0,0,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $6=($3|0)==0;
 if($6){label=9;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 6: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 var $14=($3|0)==0;
 if($14){var $eh_lpad_body$1=$13$1;var $eh_lpad_body$0=$13$0;label=17;break;}else{label=7;break;}
 case 7: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body$1=$13$1;var $eh_lpad_body$0=$13$0;label=17;break; } else { label=8;break; }
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 var $19=$18$0;
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
 case 9: 
 var $20=($4|0)==0;
 if($20){label=10;break;}else{var $_0=-1;label=15;break;}
 case 10: 
 var $22=HEAP32[(($1)>>2)];
 var $23=($22|0)==0;
 if($23){var $_0=1;label=15;break;}else{label=11;break;}
 case 11: 
 var $25=(function() { try { __THREW__ = 0; return _uselocale($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 var $26=($25|0)==0;
 if($26){var $_0=0;label=15;break;}else{label=13;break;}
 case 13: 
 var $28=(function() { try { __THREW__ = 0; return _uselocale($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=0;label=15;break; } else { label=14;break; }
 case 14: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 var $31=$30$0;
 ___clang_call_terminate($31);
 throw "Reached an unreachable!";
 case 15: 
 var $_0;
 return $_0;
 case 16: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1,0); var $33$1 = tempRet0;
 var $eh_lpad_body$1=$33$1;var $eh_lpad_body$0=$33$0;label=17;break;
 case 17: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $34=$eh_lpad_body$0;
 ___clang_call_terminate($34);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mx|0)==0;
 var $2=($frm|0)==($frm_end|0);
 var $or_cond5=$1|$2;
 if($or_cond5){var $nbytes_0_lcssa=0;label=15;break;}else{label=2;break;}
 case 2: 
 var $3=$frm_end;
 var $4=(($this+8)|0);
 var $_016=$frm;var $nbytes_07=0;var $nwchar_t_08=0;label=3;break;
 case 3: 
 var $nwchar_t_08;
 var $nbytes_07;
 var $_016;
 var $6=$_016;
 var $7=((($3)-($6))|0);
 var $8=HEAP32[(($4)>>2)];
 var $9=_uselocale($8);
 var $10=(function() { try { __THREW__ = 0; return _mbrlen($_016,$7,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $12=($9|0)==0;
 if($12){label=11;break;}else{label=5;break;}
 case 5: 
 var $14=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1,0); var $16$1 = tempRet0;
 var $17=$16$0;
 ___clang_call_terminate($17);
 throw "Reached an unreachable!";
 case 7: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $20=($9|0)==0;
 if($20){label=10;break;}else{label=8;break;}
 case 8: 
 var $22=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1,0); var $24$1 = tempRet0;
 var $25=$24$0;
 ___clang_call_terminate($25);
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($19$0)
 case 11: 
 if(($10|0)==0){ label=12;break;}else if(($10|0)==-1|($10|0)==-2){ var $nbytes_0_lcssa=$nbytes_07;label=15;break;}else{label=13;break;}
 case 12: 
 var $27=(($_016+1)|0);
 var $_pn=1;var $_1=$27;label=14;break;
 case 13: 
 var $29=(($_016+$10)|0);
 var $_pn=$10;var $_1=$29;label=14;break;
 case 14: 
 var $_1;
 var $_pn;
 var $nbytes_1=((($_pn)+($nbytes_07))|0);
 var $31=((($nwchar_t_08)+(1))|0);
 var $32=($31>>>0)>=($mx>>>0);
 var $33=($_1|0)==($frm_end|0);
 var $or_cond=$32|$33;
 if($or_cond){var $nbytes_0_lcssa=$nbytes_1;label=15;break;}else{var $_016=$_1;var $nbytes_07=$nbytes_1;var $nwchar_t_08=$31;label=3;break;}
 case 15: 
 var $nbytes_0_lcssa;
 return $nbytes_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $12=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $6=($5|0)==0;
 if($6){var $12=4;label=6;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $12=4;label=6;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 6: 
 var $12;
 return $12;
 case 7: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1,0); var $14$1 = tempRet0;
 var $15=$14$0;
 ___clang_call_terminate($15);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6>>1;
 var $8=(($frm+($7<<1))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&2;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=$to_end;
 var $5=$to;
 var $6=((($4)-($5))|0);
 var $7=($6|0)<3;
 if($7){var $_0=1;label=26;break;}else{label=3;break;}
 case 3: 
 var $9=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$9;
 HEAP8[($to)]=-17;
 var $10=HEAP32[(($to_nxt)>>2)];
 var $11=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$11;
 HEAP8[($10)]=-69;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $13=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 HEAP8[($12)]=-65;
 label=4;break;
 case 4: 
 var $14=$frm_end;
 var $15=HEAP32[(($frm_nxt)>>2)];
 var $16=($15>>>0)<($frm_end>>>0);
 if($16){label=5;break;}else{var $_0=0;label=26;break;}
 case 5: 
 var $17=$to_end;
 var $19=$15;label=6;break;
 case 6: 
 var $19;
 var $20=HEAP16[(($19)>>1)];
 var $21=($20&65535);
 var $22=($21>>>0)>($Maxcode>>>0);
 if($22){var $_0=2;label=26;break;}else{label=7;break;}
 case 7: 
 var $24=($20&65535)<128;
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=HEAP32[(($to_nxt)>>2)];
 var $27=$26;
 var $28=((($17)-($27))|0);
 var $29=($28|0)<1;
 if($29){var $_0=1;label=26;break;}else{label=9;break;}
 case 9: 
 var $31=(($20)&255);
 var $32=(($26+1)|0);
 HEAP32[(($to_nxt)>>2)]=$32;
 HEAP8[($26)]=$31;
 label=25;break;
 case 10: 
 var $34=($20&65535)<2048;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=HEAP32[(($to_nxt)>>2)];
 var $37=$36;
 var $38=((($17)-($37))|0);
 var $39=($38|0)<2;
 if($39){var $_0=1;label=26;break;}else{label=12;break;}
 case 12: 
 var $41=$21>>>6;
 var $42=$41|192;
 var $43=(($42)&255);
 var $44=(($36+1)|0);
 HEAP32[(($to_nxt)>>2)]=$44;
 HEAP8[($36)]=$43;
 var $45=$21&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=HEAP32[(($to_nxt)>>2)];
 var $49=(($48+1)|0);
 HEAP32[(($to_nxt)>>2)]=$49;
 HEAP8[($48)]=$47;
 label=25;break;
 case 13: 
 var $51=($20&65535)<55296;
 if($51){label=14;break;}else{label=16;break;}
 case 14: 
 var $53=HEAP32[(($to_nxt)>>2)];
 var $54=$53;
 var $55=((($17)-($54))|0);
 var $56=($55|0)<3;
 if($56){var $_0=1;label=26;break;}else{label=15;break;}
 case 15: 
 var $58=$21>>>12;
 var $59=$58|224;
 var $60=(($59)&255);
 var $61=(($53+1)|0);
 HEAP32[(($to_nxt)>>2)]=$61;
 HEAP8[($53)]=$60;
 var $62=$21>>>6;
 var $63=$62&63;
 var $64=$63|128;
 var $65=(($64)&255);
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $68=$21&63;
 var $69=$68|128;
 var $70=(($69)&255);
 var $71=HEAP32[(($to_nxt)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($to_nxt)>>2)]=$72;
 HEAP8[($71)]=$70;
 label=25;break;
 case 16: 
 var $74=($20&65535)<56320;
 if($74){label=17;break;}else{label=22;break;}
 case 17: 
 var $76=$19;
 var $77=((($14)-($76))|0);
 var $78=($77|0)<4;
 if($78){var $_0=1;label=26;break;}else{label=18;break;}
 case 18: 
 var $80=(($19+2)|0);
 var $81=HEAP16[(($80)>>1)];
 var $82=($81&65535);
 var $83=$82&64512;
 var $84=($83|0)==56320;
 if($84){label=19;break;}else{var $_0=2;label=26;break;}
 case 19: 
 var $86=HEAP32[(($to_nxt)>>2)];
 var $87=$86;
 var $88=((($17)-($87))|0);
 var $89=($88|0)<4;
 if($89){var $_0=1;label=26;break;}else{label=20;break;}
 case 20: 
 var $91=$21&960;
 var $92=$91<<10;
 var $93=((($92)+(65536))|0);
 var $94=$21<<10;
 var $95=$94&64512;
 var $96=$93|$95;
 var $97=$82&1023;
 var $98=$96|$97;
 var $99=($98>>>0)>($Maxcode>>>0);
 if($99){var $_0=2;label=26;break;}else{label=21;break;}
 case 21: 
 HEAP32[(($frm_nxt)>>2)]=$80;
 var $101=$91>>>6;
 var $102=((($101)+(1))|0);
 var $103=$102>>>2;
 var $104=$103|240;
 var $105=(($104)&255);
 var $106=HEAP32[(($to_nxt)>>2)];
 var $107=(($106+1)|0);
 HEAP32[(($to_nxt)>>2)]=$107;
 HEAP8[($106)]=$105;
 var $108=$102<<4;
 var $109=$108&48;
 var $110=$21>>>2;
 var $111=$110&15;
 var $112=$111|$109;
 var $113=$112|128;
 var $114=(($113)&255);
 var $115=HEAP32[(($to_nxt)>>2)];
 var $116=(($115+1)|0);
 HEAP32[(($to_nxt)>>2)]=$116;
 HEAP8[($115)]=$114;
 var $117=$21<<4;
 var $118=$117&48;
 var $119=$82>>>6;
 var $120=$119&15;
 var $121=$118|$120;
 var $122=$121|128;
 var $123=(($122)&255);
 var $124=HEAP32[(($to_nxt)>>2)];
 var $125=(($124+1)|0);
 HEAP32[(($to_nxt)>>2)]=$125;
 HEAP8[($124)]=$123;
 var $126=$82&63;
 var $127=$126|128;
 var $128=(($127)&255);
 var $129=HEAP32[(($to_nxt)>>2)];
 var $130=(($129+1)|0);
 HEAP32[(($to_nxt)>>2)]=$130;
 HEAP8[($129)]=$128;
 label=25;break;
 case 22: 
 var $132=($20&65535)<57344;
 if($132){var $_0=2;label=26;break;}else{label=23;break;}
 case 23: 
 var $134=HEAP32[(($to_nxt)>>2)];
 var $135=$134;
 var $136=((($17)-($135))|0);
 var $137=($136|0)<3;
 if($137){var $_0=1;label=26;break;}else{label=24;break;}
 case 24: 
 var $139=$21>>>12;
 var $140=$139|224;
 var $141=(($140)&255);
 var $142=(($134+1)|0);
 HEAP32[(($to_nxt)>>2)]=$142;
 HEAP8[($134)]=$141;
 var $143=$21>>>6;
 var $144=$143&63;
 var $145=$144|128;
 var $146=(($145)&255);
 var $147=HEAP32[(($to_nxt)>>2)];
 var $148=(($147+1)|0);
 HEAP32[(($to_nxt)>>2)]=$148;
 HEAP8[($147)]=$146;
 var $149=$21&63;
 var $150=$149|128;
 var $151=(($150)&255);
 var $152=HEAP32[(($to_nxt)>>2)];
 var $153=(($152+1)|0);
 HEAP32[(($to_nxt)>>2)]=$153;
 HEAP8[($152)]=$151;
 label=25;break;
 case 25: 
 var $155=HEAP32[(($frm_nxt)>>2)];
 var $156=(($155+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$156;
 var $157=($156>>>0)<($frm_end>>>0);
 if($157){var $19=$156;label=6;break;}else{var $_0=0;label=26;break;}
 case 26: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11>>1;
 var $13=(($to+($12<<1))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&4;
 var $2=($1|0)==0;
 var $_pre5=HEAP32[(($frm_nxt)>>2)];
 if($2){var $21=$_pre5;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$_pre5;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $21=$_pre5;label=7;break;}
 case 3: 
 var $9=HEAP8[($_pre5)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $21=$_pre5;label=7;break;}
 case 4: 
 var $12=(($_pre5+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $21=$_pre5;label=7;break;}
 case 5: 
 var $16=(($_pre5+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 if($18){label=6;break;}else{var $21=$_pre5;label=7;break;}
 case 6: 
 var $20=(($_pre5+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$20;
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=($21>>>0)<($frm_end>>>0);
 if($22){label=8;break;}else{var $171=$21;label=40;break;}
 case 8: 
 var $23=$frm_end;
 var $24=$to_end;
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $27=$_pre;var $26=$21;label=9;break;
 case 9: 
 var $26;
 var $27;
 var $28=($27>>>0)<($to_end>>>0);
 if($28){label=10;break;}else{var $171=$26;label=40;break;}
 case 10: 
 var $30=HEAP8[($26)];
 var $31=($30&255);
 var $32=($31>>>0)>($Maxcode>>>0);
 if($32){var $_0=2;label=41;break;}else{label=11;break;}
 case 11: 
 var $34=(($30<<24)>>24)>-1;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $36=($30&255);
 HEAP16[(($27)>>1)]=$36;
 var $37=(($26+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$37;
 label=39;break;
 case 13: 
 var $39=($30&255)<194;
 if($39){var $_0=2;label=41;break;}else{label=14;break;}
 case 14: 
 var $41=($30&255)<224;
 if($41){label=15;break;}else{label=19;break;}
 case 15: 
 var $43=$26;
 var $44=((($23)-($43))|0);
 var $45=($44|0)<2;
 if($45){var $_0=1;label=41;break;}else{label=16;break;}
 case 16: 
 var $47=(($26+1)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=$49&192;
 var $51=($50|0)==128;
 if($51){label=17;break;}else{var $_0=2;label=41;break;}
 case 17: 
 var $53=$31<<6;
 var $54=$53&1984;
 var $55=$49&63;
 var $56=$55|$54;
 var $57=($56>>>0)>($Maxcode>>>0);
 if($57){var $_0=2;label=41;break;}else{label=18;break;}
 case 18: 
 var $59=(($56)&65535);
 HEAP16[(($27)>>1)]=$59;
 var $60=(($26+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$60;
 label=39;break;
 case 19: 
 var $62=($30&255)<240;
 if($62){label=20;break;}else{label=28;break;}
 case 20: 
 var $64=$26;
 var $65=((($23)-($64))|0);
 var $66=($65|0)<3;
 if($66){var $_0=1;label=41;break;}else{label=21;break;}
 case 21: 
 var $68=(($26+1)|0);
 var $69=HEAP8[($68)];
 var $70=(($26+2)|0);
 var $71=HEAP8[($70)];
 if(($31|0)==224){ label=22;break;}else if(($31|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $73=$69&-32;
 var $74=(($73<<24)>>24)==-96;
 if($74){label=25;break;}else{var $_0=2;label=41;break;}
 case 23: 
 var $76=$69&-32;
 var $77=(($76<<24)>>24)==-128;
 if($77){label=25;break;}else{var $_0=2;label=41;break;}
 case 24: 
 var $79=$69&-64;
 var $80=(($79<<24)>>24)==-128;
 if($80){label=25;break;}else{var $_0=2;label=41;break;}
 case 25: 
 var $82=($71&255);
 var $83=$82&192;
 var $84=($83|0)==128;
 if($84){label=26;break;}else{var $_0=2;label=41;break;}
 case 26: 
 var $86=$31<<12;
 var $87=($69&255);
 var $88=$87<<6;
 var $89=$88&4032;
 var $90=$89|$86;
 var $91=$82&63;
 var $92=$90|$91;
 var $93=$92&65535;
 var $94=($93>>>0)>($Maxcode>>>0);
 if($94){var $_0=2;label=41;break;}else{label=27;break;}
 case 27: 
 var $96=(($92)&65535);
 HEAP16[(($27)>>1)]=$96;
 var $97=(($26+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$97;
 label=39;break;
 case 28: 
 var $99=($30&255)<245;
 if($99){label=29;break;}else{var $_0=2;label=41;break;}
 case 29: 
 var $101=$26;
 var $102=((($23)-($101))|0);
 var $103=($102|0)<4;
 if($103){var $_0=1;label=41;break;}else{label=30;break;}
 case 30: 
 var $105=(($26+1)|0);
 var $106=HEAP8[($105)];
 var $107=(($26+2)|0);
 var $108=HEAP8[($107)];
 var $109=(($26+3)|0);
 var $110=HEAP8[($109)];
 if(($31|0)==240){ label=31;break;}else if(($31|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($106)+(112))&255);
 var $112=($_off&255)<48;
 if($112){label=34;break;}else{var $_0=2;label=41;break;}
 case 32: 
 var $114=$106&-16;
 var $115=(($114<<24)>>24)==-128;
 if($115){label=34;break;}else{var $_0=2;label=41;break;}
 case 33: 
 var $117=$106&-64;
 var $118=(($117<<24)>>24)==-128;
 if($118){label=34;break;}else{var $_0=2;label=41;break;}
 case 34: 
 var $120=($108&255);
 var $121=$120&192;
 var $122=($121|0)==128;
 if($122){label=35;break;}else{var $_0=2;label=41;break;}
 case 35: 
 var $124=($110&255);
 var $125=$124&192;
 var $126=($125|0)==128;
 if($126){label=36;break;}else{var $_0=2;label=41;break;}
 case 36: 
 var $128=$27;
 var $129=((($24)-($128))|0);
 var $130=($129|0)<4;
 if($130){var $_0=1;label=41;break;}else{label=37;break;}
 case 37: 
 var $132=$31&7;
 var $133=$132<<18;
 var $134=($106&255);
 var $135=$134<<12;
 var $136=$135&258048;
 var $137=$136|$133;
 var $138=$120<<6;
 var $139=$138&4032;
 var $140=$137|$139;
 var $141=$124&63;
 var $142=$140|$141;
 var $143=($142>>>0)>($Maxcode>>>0);
 if($143){var $_0=2;label=41;break;}else{label=38;break;}
 case 38: 
 var $145=$132<<2;
 var $146=$134>>>4;
 var $147=$146&3;
 var $148=$147|$145;
 var $149=$148<<6;
 var $150=((($149)+(16320))|0);
 var $151=$134<<2;
 var $152=$151&60;
 var $153=$120>>>4;
 var $154=$153&3;
 var $155=$152|$154;
 var $156=$155|$150;
 var $157=$156|55296;
 var $158=(($157)&65535);
 HEAP16[(($27)>>1)]=$158;
 var $159=$138&960;
 var $160=$141|$159;
 var $161=$160|56320;
 var $162=(($161)&65535);
 var $163=(($27+2)|0);
 HEAP32[(($to_nxt)>>2)]=$163;
 HEAP16[(($163)>>1)]=$162;
 var $164=HEAP32[(($frm_nxt)>>2)];
 var $165=(($164+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$165;
 label=39;break;
 case 39: 
 var $167=HEAP32[(($to_nxt)>>2)];
 var $168=(($167+2)|0);
 HEAP32[(($to_nxt)>>2)]=$168;
 var $169=HEAP32[(($frm_nxt)>>2)];
 var $170=($169>>>0)<($frm_end>>>0);
 if($170){var $27=$168;var $26=$169;label=9;break;}else{var $171=$169;label=40;break;}
 case 40: 
 var $171;
 var $172=($171>>>0)<($frm_end>>>0);
 var $173=($172&1);
 var $_0=$173;label=41;break;
 case 41: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;


 var $2=__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $2;
}


function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$mode&4;
 var $2=($1|0)==0;
 if($2){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $9=HEAP8[($frm)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $12=(($frm+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $16=(($frm+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 var $19=(($frm+3)|0);
 var $_frm=($18?$19:$frm);
 var $frm_nxt_1_ph=$_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $20=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $21=($mx|0)!=0;
 var $or_cond13=$20&$21;
 if($or_cond13){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=44;break;}
 case 7: 
 var $22=$frm_end;
 var $nchar16_t_014=0;var $frm_nxt_115=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_115;
 var $nchar16_t_014;
 var $23=HEAP8[($frm_nxt_115)];
 var $24=($23&255);
 var $25=($24>>>0)>($Maxcode>>>0);
 if($25){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=9;break;}
 case 9: 
 var $27=(($23<<24)>>24)>-1;
 if($27){label=10;break;}else{label=11;break;}
 case 10: 
 var $29=(($frm_nxt_115+1)|0);
 var $frm_nxt_2=$29;var $nchar16_t_1=$nchar16_t_014;label=43;break;
 case 11: 
 var $31=($23&255)<194;
 if($31){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=12;break;}
 case 12: 
 var $33=($23&255)<224;
 if($33){label=13;break;}else{label=17;break;}
 case 13: 
 var $35=$frm_nxt_115;
 var $36=((($22)-($35))|0);
 var $37=($36|0)<2;
 if($37){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=14;break;}
 case 14: 
 var $39=(($frm_nxt_115+1)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=$41&192;
 var $43=($42|0)==128;
 if($43){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 15: 
 var $45=$24<<6;
 var $46=$45&1984;
 var $47=$41&63;
 var $48=$47|$46;
 var $49=($48>>>0)>($Maxcode>>>0);
 if($49){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=16;break;}
 case 16: 
 var $51=(($frm_nxt_115+2)|0);
 var $frm_nxt_2=$51;var $nchar16_t_1=$nchar16_t_014;label=43;break;
 case 17: 
 var $53=($23&255)<240;
 if($53){label=18;break;}else{label=29;break;}
 case 18: 
 var $55=$frm_nxt_115;
 var $56=((($22)-($55))|0);
 var $57=($56|0)<3;
 if($57){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=19;break;}
 case 19: 
 var $59=(($frm_nxt_115+1)|0);
 var $60=HEAP8[($59)];
 var $61=(($frm_nxt_115+2)|0);
 var $62=HEAP8[($61)];
 if(($24|0)==224){ label=20;break;}else if(($24|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $64=$60&-32;
 var $65=(($64<<24)>>24)==-96;
 if($65){label=26;break;}else{label=21;break;}
 case 21: 
 var $67=$frm;
 var $68=((($55)-($67))|0);
 var $_0=$68;label=45;break;
 case 22: 
 var $70=$60&-32;
 var $71=(($70<<24)>>24)==-128;
 if($71){label=26;break;}else{label=23;break;}
 case 23: 
 var $73=$frm;
 var $74=((($55)-($73))|0);
 var $_0=$74;label=45;break;
 case 24: 
 var $76=$60&-64;
 var $77=(($76<<24)>>24)==-128;
 if($77){label=26;break;}else{label=25;break;}
 case 25: 
 var $79=$frm;
 var $80=((($55)-($79))|0);
 var $_0=$80;label=45;break;
 case 26: 
 var $82=($62&255);
 var $83=$82&192;
 var $84=($83|0)==128;
 if($84){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 27: 
 var $86=$24<<12;
 var $87=$86&61440;
 var $88=($60&255);
 var $89=$88<<6;
 var $90=$89&4032;
 var $91=$90|$87;
 var $92=$82&63;
 var $93=$91|$92;
 var $94=($93>>>0)>($Maxcode>>>0);
 if($94){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=28;break;}
 case 28: 
 var $96=(($frm_nxt_115+3)|0);
 var $frm_nxt_2=$96;var $nchar16_t_1=$nchar16_t_014;label=43;break;
 case 29: 
 var $98=($23&255)<245;
 if($98){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 30: 
 var $100=$frm_nxt_115;
 var $101=((($22)-($100))|0);
 var $102=($101|0)<4;
 if($102){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=31;break;}
 case 31: 
 var $104=((($mx)-($nchar16_t_014))|0);
 var $105=($104>>>0)<2;
 if($105){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=32;break;}
 case 32: 
 var $107=(($frm_nxt_115+1)|0);
 var $108=HEAP8[($107)];
 var $109=(($frm_nxt_115+2)|0);
 var $110=HEAP8[($109)];
 var $111=(($frm_nxt_115+3)|0);
 var $112=HEAP8[($111)];
 if(($24|0)==240){ label=33;break;}else if(($24|0)==244){ label=35;break;}else{label=37;break;}
 case 33: 
 var $_off=((($108)+(112))&255);
 var $114=($_off&255)<48;
 if($114){label=39;break;}else{label=34;break;}
 case 34: 
 var $116=$frm;
 var $117=((($100)-($116))|0);
 var $_0=$117;label=45;break;
 case 35: 
 var $119=$108&-16;
 var $120=(($119<<24)>>24)==-128;
 if($120){label=39;break;}else{label=36;break;}
 case 36: 
 var $122=$frm;
 var $123=((($100)-($122))|0);
 var $_0=$123;label=45;break;
 case 37: 
 var $125=$108&-64;
 var $126=(($125<<24)>>24)==-128;
 if($126){label=39;break;}else{label=38;break;}
 case 38: 
 var $128=$frm;
 var $129=((($100)-($128))|0);
 var $_0=$129;label=45;break;
 case 39: 
 var $131=($110&255);
 var $132=$131&192;
 var $133=($132|0)==128;
 if($133){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 40: 
 var $135=($112&255);
 var $136=$135&192;
 var $137=($136|0)==128;
 if($137){label=41;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 41: 
 var $139=$24<<18;
 var $140=$139&1835008;
 var $141=($108&255);
 var $142=$141<<12;
 var $143=$142&258048;
 var $144=$143|$140;
 var $145=$131<<6;
 var $146=$145&4032;
 var $147=$144|$146;
 var $148=$135&63;
 var $149=$147|$148;
 var $150=($149>>>0)>($Maxcode>>>0);
 if($150){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=42;break;}
 case 42: 
 var $152=((($nchar16_t_014)+(1))|0);
 var $153=(($frm_nxt_115+4)|0);
 var $frm_nxt_2=$153;var $nchar16_t_1=$152;label=43;break;
 case 43: 
 var $nchar16_t_1;
 var $frm_nxt_2;
 var $155=((($nchar16_t_1)+(1))|0);
 var $156=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $157=($155>>>0)<($mx>>>0);
 var $or_cond=$156&$157;
 if($or_cond){var $nchar16_t_014=$155;var $frm_nxt_115=$frm_nxt_2;label=8;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=44;break;}
 case 44: 
 var $frm_nxt_1_lcssa;
 var $158=$frm_nxt_1_lcssa;
 var $159=$frm;
 var $160=((($158)-($159))|0);
 var $_0=$160;label=45;break;
 case 45: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 4;
}


function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6>>2;
 var $8=(($frm+($7<<2))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&2;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=$to_end;
 var $5=$to;
 var $6=((($4)-($5))|0);
 var $7=($6|0)<3;
 if($7){var $_0=1;label=19;break;}else{label=3;break;}
 case 3: 
 var $9=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$9;
 HEAP8[($to)]=-17;
 var $10=HEAP32[(($to_nxt)>>2)];
 var $11=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$11;
 HEAP8[($10)]=-69;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $13=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 HEAP8[($12)]=-65;
 label=4;break;
 case 4: 
 var $14=HEAP32[(($frm_nxt)>>2)];
 var $15=($14>>>0)<($frm_end>>>0);
 if($15){label=5;break;}else{var $_0=0;label=19;break;}
 case 5: 
 var $16=$to_end;
 var $18=$14;label=6;break;
 case 6: 
 var $18;
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&-2048;
 var $21=($20|0)==55296;
 var $22=($19>>>0)>($Maxcode>>>0);
 var $or_cond=$21|$22;
 if($or_cond){var $_0=2;label=19;break;}else{label=7;break;}
 case 7: 
 var $24=($19>>>0)<128;
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=HEAP32[(($to_nxt)>>2)];
 var $27=$26;
 var $28=((($16)-($27))|0);
 var $29=($28|0)<1;
 if($29){var $_0=1;label=19;break;}else{label=9;break;}
 case 9: 
 var $31=(($19)&255);
 var $32=(($26+1)|0);
 HEAP32[(($to_nxt)>>2)]=$32;
 HEAP8[($26)]=$31;
 label=18;break;
 case 10: 
 var $34=($19>>>0)<2048;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=HEAP32[(($to_nxt)>>2)];
 var $37=$36;
 var $38=((($16)-($37))|0);
 var $39=($38|0)<2;
 if($39){var $_0=1;label=19;break;}else{label=12;break;}
 case 12: 
 var $41=$19>>>6;
 var $42=$41|192;
 var $43=(($42)&255);
 var $44=(($36+1)|0);
 HEAP32[(($to_nxt)>>2)]=$44;
 HEAP8[($36)]=$43;
 var $45=$19&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=HEAP32[(($to_nxt)>>2)];
 var $49=(($48+1)|0);
 HEAP32[(($to_nxt)>>2)]=$49;
 HEAP8[($48)]=$47;
 label=18;break;
 case 13: 
 var $51=($19>>>0)<65536;
 var $52=HEAP32[(($to_nxt)>>2)];
 var $53=$52;
 var $54=((($16)-($53))|0);
 if($51){label=14;break;}else{label=16;break;}
 case 14: 
 var $56=($54|0)<3;
 if($56){var $_0=1;label=19;break;}else{label=15;break;}
 case 15: 
 var $58=$19>>>12;
 var $59=$58|224;
 var $60=(($59)&255);
 var $61=(($52+1)|0);
 HEAP32[(($to_nxt)>>2)]=$61;
 HEAP8[($52)]=$60;
 var $62=$19>>>6;
 var $63=$62&63;
 var $64=$63|128;
 var $65=(($64)&255);
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $68=$19&63;
 var $69=$68|128;
 var $70=(($69)&255);
 var $71=HEAP32[(($to_nxt)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($to_nxt)>>2)]=$72;
 HEAP8[($71)]=$70;
 label=18;break;
 case 16: 
 var $74=($54|0)<4;
 if($74){var $_0=1;label=19;break;}else{label=17;break;}
 case 17: 
 var $76=$19>>>18;
 var $77=$76|240;
 var $78=(($77)&255);
 var $79=(($52+1)|0);
 HEAP32[(($to_nxt)>>2)]=$79;
 HEAP8[($52)]=$78;
 var $80=$19>>>12;
 var $81=$80&63;
 var $82=$81|128;
 var $83=(($82)&255);
 var $84=HEAP32[(($to_nxt)>>2)];
 var $85=(($84+1)|0);
 HEAP32[(($to_nxt)>>2)]=$85;
 HEAP8[($84)]=$83;
 var $86=$19>>>6;
 var $87=$86&63;
 var $88=$87|128;
 var $89=(($88)&255);
 var $90=HEAP32[(($to_nxt)>>2)];
 var $91=(($90+1)|0);
 HEAP32[(($to_nxt)>>2)]=$91;
 HEAP8[($90)]=$89;
 var $92=$19&63;
 var $93=$92|128;
 var $94=(($93)&255);
 var $95=HEAP32[(($to_nxt)>>2)];
 var $96=(($95+1)|0);
 HEAP32[(($to_nxt)>>2)]=$96;
 HEAP8[($95)]=$94;
 label=18;break;
 case 18: 
 var $98=HEAP32[(($frm_nxt)>>2)];
 var $99=(($98+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$99;
 var $100=($99>>>0)<($frm_end>>>0);
 if($100){var $18=$99;label=6;break;}else{var $_0=0;label=19;break;}
 case 19: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11>>2;
 var $13=(($to+($12<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&4;
 var $2=($1|0)==0;
 var $_pre5=HEAP32[(($frm_nxt)>>2)];
 if($2){var $21=$_pre5;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$_pre5;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $21=$_pre5;label=7;break;}
 case 3: 
 var $9=HEAP8[($_pre5)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $21=$_pre5;label=7;break;}
 case 4: 
 var $12=(($_pre5+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $21=$_pre5;label=7;break;}
 case 5: 
 var $16=(($_pre5+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 if($18){label=6;break;}else{var $21=$_pre5;label=7;break;}
 case 6: 
 var $20=(($_pre5+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$20;
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=($21>>>0)<($frm_end>>>0);
 if($22){label=8;break;}else{var $143=$21;label=39;break;}
 case 8: 
 var $23=$frm_end;
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $26=$_pre;var $25=$21;label=9;break;
 case 9: 
 var $25;
 var $26;
 var $27=($26>>>0)<($to_end>>>0);
 if($27){label=10;break;}else{var $143=$25;label=39;break;}
 case 10: 
 var $29=HEAP8[($25)];
 var $30=($29&255);
 var $31=(($29<<24)>>24)>-1;
 if($31){label=11;break;}else{label=13;break;}
 case 11: 
 var $33=($30>>>0)>($Maxcode>>>0);
 if($33){var $_0=2;label=40;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($26)>>2)]=$30;
 var $35=(($25+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$35;
 label=38;break;
 case 13: 
 var $37=($29&255)<194;
 if($37){var $_0=2;label=40;break;}else{label=14;break;}
 case 14: 
 var $39=($29&255)<224;
 if($39){label=15;break;}else{label=19;break;}
 case 15: 
 var $41=$25;
 var $42=((($23)-($41))|0);
 var $43=($42|0)<2;
 if($43){var $_0=1;label=40;break;}else{label=16;break;}
 case 16: 
 var $45=(($25+1)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=$47&192;
 var $49=($48|0)==128;
 if($49){label=17;break;}else{var $_0=2;label=40;break;}
 case 17: 
 var $51=$30<<6;
 var $52=$51&1984;
 var $53=$47&63;
 var $54=$53|$52;
 var $55=($54>>>0)>($Maxcode>>>0);
 if($55){var $_0=2;label=40;break;}else{label=18;break;}
 case 18: 
 HEAP32[(($26)>>2)]=$54;
 var $57=(($25+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$57;
 label=38;break;
 case 19: 
 var $59=($29&255)<240;
 if($59){label=20;break;}else{label=28;break;}
 case 20: 
 var $61=$25;
 var $62=((($23)-($61))|0);
 var $63=($62|0)<3;
 if($63){var $_0=1;label=40;break;}else{label=21;break;}
 case 21: 
 var $65=(($25+1)|0);
 var $66=HEAP8[($65)];
 var $67=(($25+2)|0);
 var $68=HEAP8[($67)];
 if(($30|0)==224){ label=22;break;}else if(($30|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $70=$66&-32;
 var $71=(($70<<24)>>24)==-96;
 if($71){label=25;break;}else{var $_0=2;label=40;break;}
 case 23: 
 var $73=$66&-32;
 var $74=(($73<<24)>>24)==-128;
 if($74){label=25;break;}else{var $_0=2;label=40;break;}
 case 24: 
 var $76=$66&-64;
 var $77=(($76<<24)>>24)==-128;
 if($77){label=25;break;}else{var $_0=2;label=40;break;}
 case 25: 
 var $79=($68&255);
 var $80=$79&192;
 var $81=($80|0)==128;
 if($81){label=26;break;}else{var $_0=2;label=40;break;}
 case 26: 
 var $83=$30<<12;
 var $84=$83&61440;
 var $85=($66&255);
 var $86=$85<<6;
 var $87=$86&4032;
 var $88=$87|$84;
 var $89=$79&63;
 var $90=$88|$89;
 var $91=($90>>>0)>($Maxcode>>>0);
 if($91){var $_0=2;label=40;break;}else{label=27;break;}
 case 27: 
 HEAP32[(($26)>>2)]=$90;
 var $93=(($25+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$93;
 label=38;break;
 case 28: 
 var $95=($29&255)<245;
 if($95){label=29;break;}else{var $_0=2;label=40;break;}
 case 29: 
 var $97=$25;
 var $98=((($23)-($97))|0);
 var $99=($98|0)<4;
 if($99){var $_0=1;label=40;break;}else{label=30;break;}
 case 30: 
 var $101=(($25+1)|0);
 var $102=HEAP8[($101)];
 var $103=(($25+2)|0);
 var $104=HEAP8[($103)];
 var $105=(($25+3)|0);
 var $106=HEAP8[($105)];
 if(($30|0)==240){ label=31;break;}else if(($30|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($102)+(112))&255);
 var $108=($_off&255)<48;
 if($108){label=34;break;}else{var $_0=2;label=40;break;}
 case 32: 
 var $110=$102&-16;
 var $111=(($110<<24)>>24)==-128;
 if($111){label=34;break;}else{var $_0=2;label=40;break;}
 case 33: 
 var $113=$102&-64;
 var $114=(($113<<24)>>24)==-128;
 if($114){label=34;break;}else{var $_0=2;label=40;break;}
 case 34: 
 var $116=($104&255);
 var $117=$116&192;
 var $118=($117|0)==128;
 if($118){label=35;break;}else{var $_0=2;label=40;break;}
 case 35: 
 var $120=($106&255);
 var $121=$120&192;
 var $122=($121|0)==128;
 if($122){label=36;break;}else{var $_0=2;label=40;break;}
 case 36: 
 var $124=$30<<18;
 var $125=$124&1835008;
 var $126=($102&255);
 var $127=$126<<12;
 var $128=$127&258048;
 var $129=$128|$125;
 var $130=$116<<6;
 var $131=$130&4032;
 var $132=$129|$131;
 var $133=$120&63;
 var $134=$132|$133;
 var $135=($134>>>0)>($Maxcode>>>0);
 if($135){var $_0=2;label=40;break;}else{label=37;break;}
 case 37: 
 HEAP32[(($26)>>2)]=$134;
 var $137=(($25+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$137;
 label=38;break;
 case 38: 
 var $139=HEAP32[(($to_nxt)>>2)];
 var $140=(($139+4)|0);
 HEAP32[(($to_nxt)>>2)]=$140;
 var $141=HEAP32[(($frm_nxt)>>2)];
 var $142=($141>>>0)<($frm_end>>>0);
 if($142){var $26=$140;var $25=$141;label=9;break;}else{var $143=$141;label=39;break;}
 case 39: 
 var $143;
 var $144=($143>>>0)<($frm_end>>>0);
 var $145=($144&1);
 var $_0=$145;label=40;break;
 case 40: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;


 var $2=__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $2;
}


function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$mode&4;
 var $2=($1|0)==0;
 if($2){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $9=HEAP8[($frm)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $12=(($frm+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $16=(($frm+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 var $19=(($frm+3)|0);
 var $_frm=($18?$19:$frm);
 var $frm_nxt_1_ph=$_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $20=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $21=($mx|0)!=0;
 var $or_cond13=$20&$21;
 if($or_cond13){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=44;break;}
 case 7: 
 var $22=$frm_end;
 var $nchar32_t_014=1;var $frm_nxt_115=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_115;
 var $nchar32_t_014;
 var $24=HEAP8[($frm_nxt_115)];
 var $25=($24&255);
 var $26=(($24<<24)>>24)>-1;
 if($26){label=9;break;}else{label=11;break;}
 case 9: 
 var $28=($25>>>0)>($Maxcode>>>0);
 if($28){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=10;break;}
 case 10: 
 var $30=(($frm_nxt_115+1)|0);
 var $frm_nxt_2=$30;label=42;break;
 case 11: 
 var $32=($24&255)<194;
 if($32){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=12;break;}
 case 12: 
 var $34=($24&255)<224;
 if($34){label=13;break;}else{label=17;break;}
 case 13: 
 var $36=$frm_nxt_115;
 var $37=((($22)-($36))|0);
 var $38=($37|0)<2;
 if($38){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=14;break;}
 case 14: 
 var $40=(($frm_nxt_115+1)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=$42&192;
 var $44=($43|0)==128;
 if($44){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 15: 
 var $46=$25<<6;
 var $47=$46&1984;
 var $48=$42&63;
 var $49=$48|$47;
 var $50=($49>>>0)>($Maxcode>>>0);
 if($50){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=16;break;}
 case 16: 
 var $52=(($frm_nxt_115+2)|0);
 var $frm_nxt_2=$52;label=42;break;
 case 17: 
 var $54=($24&255)<240;
 if($54){label=18;break;}else{label=29;break;}
 case 18: 
 var $56=$frm_nxt_115;
 var $57=((($22)-($56))|0);
 var $58=($57|0)<3;
 if($58){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=19;break;}
 case 19: 
 var $60=(($frm_nxt_115+1)|0);
 var $61=HEAP8[($60)];
 var $62=(($frm_nxt_115+2)|0);
 var $63=HEAP8[($62)];
 if(($25|0)==224){ label=20;break;}else if(($25|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $65=$61&-32;
 var $66=(($65<<24)>>24)==-96;
 if($66){label=26;break;}else{label=21;break;}
 case 21: 
 var $68=$frm;
 var $69=((($56)-($68))|0);
 var $_0=$69;label=45;break;
 case 22: 
 var $71=$61&-32;
 var $72=(($71<<24)>>24)==-128;
 if($72){label=26;break;}else{label=23;break;}
 case 23: 
 var $74=$frm;
 var $75=((($56)-($74))|0);
 var $_0=$75;label=45;break;
 case 24: 
 var $77=$61&-64;
 var $78=(($77<<24)>>24)==-128;
 if($78){label=26;break;}else{label=25;break;}
 case 25: 
 var $80=$frm;
 var $81=((($56)-($80))|0);
 var $_0=$81;label=45;break;
 case 26: 
 var $83=($63&255);
 var $84=$83&192;
 var $85=($84|0)==128;
 if($85){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 27: 
 var $87=$25<<12;
 var $88=$87&61440;
 var $89=($61&255);
 var $90=$89<<6;
 var $91=$90&4032;
 var $92=$91|$88;
 var $93=$83&63;
 var $94=$92|$93;
 var $95=($94>>>0)>($Maxcode>>>0);
 if($95){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=28;break;}
 case 28: 
 var $97=(($frm_nxt_115+3)|0);
 var $frm_nxt_2=$97;label=42;break;
 case 29: 
 var $99=($24&255)<245;
 if($99){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 30: 
 var $101=$frm_nxt_115;
 var $102=((($22)-($101))|0);
 var $103=($102|0)<4;
 if($103){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=31;break;}
 case 31: 
 var $105=(($frm_nxt_115+1)|0);
 var $106=HEAP8[($105)];
 var $107=(($frm_nxt_115+2)|0);
 var $108=HEAP8[($107)];
 var $109=(($frm_nxt_115+3)|0);
 var $110=HEAP8[($109)];
 if(($25|0)==240){ label=32;break;}else if(($25|0)==244){ label=34;break;}else{label=36;break;}
 case 32: 
 var $_off=((($106)+(112))&255);
 var $112=($_off&255)<48;
 if($112){label=38;break;}else{label=33;break;}
 case 33: 
 var $114=$frm;
 var $115=((($101)-($114))|0);
 var $_0=$115;label=45;break;
 case 34: 
 var $117=$106&-16;
 var $118=(($117<<24)>>24)==-128;
 if($118){label=38;break;}else{label=35;break;}
 case 35: 
 var $120=$frm;
 var $121=((($101)-($120))|0);
 var $_0=$121;label=45;break;
 case 36: 
 var $123=$106&-64;
 var $124=(($123<<24)>>24)==-128;
 if($124){label=38;break;}else{label=37;break;}
 case 37: 
 var $126=$frm;
 var $127=((($101)-($126))|0);
 var $_0=$127;label=45;break;
 case 38: 
 var $129=($108&255);
 var $130=$129&192;
 var $131=($130|0)==128;
 if($131){label=39;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 39: 
 var $133=($110&255);
 var $134=$133&192;
 var $135=($134|0)==128;
 if($135){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 40: 
 var $137=$25<<18;
 var $138=$137&1835008;
 var $139=($106&255);
 var $140=$139<<12;
 var $141=$140&258048;
 var $142=$141|$138;
 var $143=$129<<6;
 var $144=$143&4032;
 var $145=$142|$144;
 var $146=$133&63;
 var $147=$145|$146;
 var $148=($147>>>0)>($Maxcode>>>0);
 if($148){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=41;break;}
 case 41: 
 var $150=(($frm_nxt_115+4)|0);
 var $frm_nxt_2=$150;label=42;break;
 case 42: 
 var $frm_nxt_2;
 var $152=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $153=($nchar32_t_014>>>0)<($mx>>>0);
 var $or_cond=$152&$153;
 if($or_cond){label=43;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=44;break;}
 case 43: 
 var $phitmp=((($nchar32_t_014)+(1))|0);
 var $nchar32_t_014=$phitmp;var $frm_nxt_115=$frm_nxt_2;label=8;break;
 case 44: 
 var $frm_nxt_1_lcssa;
 var $154=$frm_nxt_1_lcssa;
 var $155=$frm;
 var $156=((($154)-($155))|0);
 var $_0=$156;label=45;break;
 case 45: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 4;
}


function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18numpunctIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4672;
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}


function __ZNSt3__18numpunctIcED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4672;
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}


function __ZNSt3__18numpunctIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4624;
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}


function __ZNSt3__18numpunctIwED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4624;
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}


function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP8[($1)];
 return $2;
}


function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this){
 var label=0;


 var $1=(($this+9)|0);
 var $2=HEAP8[($1)];
 return $2;
}


function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this){
 var label=0;


 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result,$this){
 var label=0;


 var $1=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}


function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result,$this){
 var label=0;


 var $1=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}


function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,2416,4);
 return;
}


function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result,$this){
 var label=0;


 var $1=_wcslen(2392);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,2392,$1);
 return;
}


function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,2304,5);
 return;
}


function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result,$this){
 var label=0;


 var $1=_wcslen(2272);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,2272,$1);
 return;
}


function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(16016)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(16016);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(15904)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(15904);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(13344, 0, 168)|0;
 var $12=_atexit(806,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13344,2872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13356,2864) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13368,2856) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13380,2840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13392,2824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13404,2816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13416,2800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13428,2792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13440,2784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13452,2768) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13464,2760) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13476,2752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13488,2736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13500,2728) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((14416)>>2)]=13344;

 label=21;break;
 case 21: 
 var $29=HEAP32[((14416)>>2)];
 return $29;
 case 22: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;

 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(15960)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(15960);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(15880)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(15880);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(12600, 0, 168)|0;
 var $12=_atexit(406,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12600,3368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12612,3336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12624,3304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12636,3264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12648,3168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12660,3136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12672,3096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12684,3080) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12696,3024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12708,3008) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12720,2992) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12732,2976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12744,2960) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12756,2888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((14328)>>2)]=12600;

 label=21;break;
 case 21: 
 var $29=HEAP32[((14328)>>2)];
 return $29;
 case 22: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;

 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(16008)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(16008);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(15896)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(15896);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(13056, 0, 288)|0;
 var $12=_atexit(454,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13056,376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13068,344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13080,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13092,264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13104,256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13116,248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13128,240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13140,232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13152,184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13164,176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13176,152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13188,136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13200,128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13212,120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13224,112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13236,104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13248,256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13260,56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13272,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13284,3432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13296,3424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13308,3416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13320,3408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13332,3400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((14408)>>2)]=13056;

 label=31;break;
 case 31: 
 var $39=HEAP32[((14408)>>2)];
 return $39;
 case 32: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;

 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(15952)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(15952);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(15872)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(15872);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(12312, 0, 288)|0;
 var $12=_atexit(346,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12312,1256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12324,1216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12336,1192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12348,1096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12360,576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12372,1064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12384,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12396,912) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12408,840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12420,808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12432,768) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12444,728) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12456,712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12468,688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12480,672) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12492,656) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12504,576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12516,496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12528,480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12540,456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12552,440) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12564,424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12576,408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12588,384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((14320)>>2)]=12312;

 label=31;break;
 case 31: 
 var $39=HEAP32[((14320)>>2)];
 return $39;
 case 32: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;

 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(16024)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(16024);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(15912)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(15912);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(13512, 0, 288)|0;
 var $12=_atexit(340,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13512,1320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13524,1288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((14424)>>2)]=13512;

 label=9;break;
 case 9: 
 var $17=HEAP32[((14424)>>2)];
 return $17;
 case 10: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;

 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(15968)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(15968);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(15888)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(15888);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(12768, 0, 288)|0;
 var $12=_atexit(760,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12768,1464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12780,1448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((14336)>>2)]=12768;

 label=9;break;
 case 9: 
 var $17=HEAP32[((14336)>>2)];
 return $17;
 case 10: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;

 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(16032)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(16032);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(14432,2256,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=_atexit((798),14432,___dso_handle);

 label=5;break;
 case 5: 
 return 14432;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;

 ___resumeException($10$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(15976)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(15976);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(2216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(14344,2216,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((526),14344,___dso_handle);

 label=6;break;
 case 6: 
 return 14344;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(16056)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(16056);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(14480,2184,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=_atexit((798),14480,___dso_handle);

 label=5;break;
 case 5: 
 return 14480;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;

 ___resumeException($10$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(16000)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(16000);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(2096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(14392,2096,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((526),14392,___dso_handle);

 label=6;break;
 case 6: 
 return 14392;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(16048)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(16048);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(14464,1992,20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=_atexit((798),14464,___dso_handle);

 label=5;break;
 case 5: 
 return 14464;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;

 ___resumeException($10$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(15992)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(15992);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(1896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(14376,1896,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((526),14376,___dso_handle);

 label=6;break;
 case 6: 
 return 14376;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(16040)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(16040);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(14448,1864,11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=_atexit((798),14448,___dso_handle);

 label=5;break;
 case 5: 
 return 14448;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;

 ___resumeException($10$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(15984)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(15984);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(1752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(14360,1752,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((526),14360,___dso_handle);

 label=6;break;
 case 6: 
 return 14360;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(15936)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(15936);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((13832)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((13832)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0=$16;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$16;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(15936)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(15936);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((13832)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((13832)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0=$16;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$16;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(15936)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(15936);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((13832)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((13832)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 label=13;break;
 case 13: 
 var $28=$16;
 var $_0=$28;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=15;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(15936)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(15936);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((13832)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((13832)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 13: 
 var $29=($21|0)==34;
 if($29){label=14;break;}else{var $_0$1=$20$1;var $_0$0=$20$0;label=16;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=-1;var $_0$0=-1;label=16;break;
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 16: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(15936)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(15936);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((13832)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((13832)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(15936)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(15936);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((13832)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((13832)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(15936)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(15936);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((13832)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((13832)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=65535;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0&65535;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(15936)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(15936);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((13832)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((13832)>>2)];
 var $16$0=_strtoll_l($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0$1=$16$1;var $_0$0=$16$0;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $27=(($16$1|0) > ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) >  ($$etemp$0$0>>>0))));
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=2147483647;
 var $_$0=($27?$$etemp$1$0:$$etemp$2$0);
 var $_$1=($27?$$etemp$1$1:$$etemp$2$1);
 STACKTOP=sp;return (tempRet0=$_$1,$_$0);
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 14: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=19;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(15936)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(15936);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2616,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((13832)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((13832)>>2)];
 var $16$0=_strtoll_l($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=20;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=16;break;}else{label=12;break;}
 case 12: 
 var $$etemp$0$0=-2147483648;
 var $$etemp$0$1=-1;
 var $27=(($16$1|0) < ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) <  ($$etemp$0$0>>>0))));
 if($27){label=13;break;}else{label=14;break;}
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 label=17;break;
 case 14: 
 var $$etemp$1$0=2147483647;
 var $$etemp$1$1=0;
 var $29=(($16$1|0) > ($$etemp$1$1|0)) | (((($16$1|0) == ($$etemp$1$1|0) & ($16$0>>>0) >  ($$etemp$1$0>>>0))));
 if($29){label=15;break;}else{label=18;break;}
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=2147483647;label=20;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $31=(($16$1|0) > ($$etemp$2$1|0)) | (((($16$1|0) == ($$etemp$2$1|0) & ($16$0>>>0) >  ($$etemp$2$0>>>0))));
 if($31){var $_0=2147483647;label=20;break;}else{label=17;break;}
 case 17: 
 var $_0=-2147483648;label=20;break;
 case 18: 
 var $34$0=$16$0;
 var $34=$34$0;
 var $_0=$34;label=20;break;
 case 19: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=20;break;
 case 20: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_idx=$__vp;
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx1=(($__vp+4)|0);
 var $1=$_idx1;
 var $ld$0$0=(($1)|0);
 var $_idx1_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $_idx1_val$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$_idx1_val$1;
 var $3=$2>>1;
 var $4=$_idx_val;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=$_idx1_val$0;
 var $8=$2&1;
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$5;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+$7)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$7;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 FUNCTION_TABLE[$18]($6);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=5;break;}else{var $_0_i=$__n;var $10=$4;label=2;break;}
 case 2: 
 var $10;
 var $_0_i;
 var $11=($10|0)==0;
 if($11){var $13=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($10)>>2)]=0;
 var $_pre1_i=HEAP32[(($3)>>2)];
 var $13=$_pre1_i;label=4;break;
 case 4: 
 var $13;
 var $14=(($13+4)|0);
 HEAP32[(($3)>>2)]=$14;
 var $15=((($_0_i)-(1))|0);
 var $16=($15|0)==0;
 if($16){label=20;break;}else{var $_0_i=$15;var $10=$14;label=2;break;}
 case 5: 
 var $18=(($this+16)|0);
 var $19=(($this)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=((($6)-($21))|0);
 var $23=$22>>2;
 var $24=((($23)+($__n))|0);
 var $25=($24>>>0)>1073741823;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 7: 
 var $28=((($5)-($21))|0);
 var $29=$28>>2;
 var $30=($29>>>0)<536870911;
 if($30){label=8;break;}else{var $_0_i569=1073741823;label=11;break;}
 case 8: 
 var $31=$28>>1;
 var $32=($31>>>0)<($24>>>0);
 var $33=($32?$24:$31);
 var $34=($33|0)==0;
 if($34){var $45=0;var $_0_i57=0;label=12;break;}else{label=9;break;}
 case 9: 
 var $36=(($this+128)|0);
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24)==0;
 var $39=($33>>>0)<29;
 var $or_cond_i_i_i_i=$38&$39;
 if($or_cond_i_i_i_i){label=10;break;}else{var $_0_i569=$33;label=11;break;}
 case 10: 
 HEAP8[($36)]=1;
 var $41=$18;
 var $45=$41;var $_0_i57=$33;label=12;break;
 case 11: 
 var $_0_i569;
 var $42=$_0_i569<<2;
 var $43=__Znwj($42);
 var $44=$43;
 var $45=$44;var $_0_i57=$_0_i569;label=12;break;
 case 12: 
 var $_0_i57;
 var $45;
 var $46=(($45+($23<<2))|0);
 var $_0_i2=$__n;var $48=$46;label=13;break;
 case 13: 
 var $48;
 var $_0_i2;
 var $49=($48|0)==0;
 if($49){var $51=0;label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($48)>>2)]=0;
 var $51=$48;label=15;break;
 case 15: 
 var $51;
 var $52=(($51+4)|0);
 var $53=((($_0_i2)-(1))|0);
 var $54=($53|0)==0;
 if($54){label=16;break;}else{var $_0_i2=$53;var $48=$52;label=13;break;}
 case 16: 
 var $55=(($45+($_0_i57<<2))|0);
 var $56=HEAP32[(($19)>>2)];
 var $57=HEAP32[(($3)>>2)];
 var $58=$57;
 var $59=$56;
 var $60=((($58)-($59))|0);
 var $61=$60>>2;
 var $_sum=((($23)-($61))|0);
 var $62=(($45+($_sum<<2))|0);
 var $63=$62;
 var $64=$56;
 assert($60 % 1 === 0);(_memcpy($63, $64, $60)|0);
 HEAP32[(($19)>>2)]=$62;
 HEAP32[(($3)>>2)]=$52;
 HEAP32[(($1)>>2)]=$55;
 var $65=($56|0)==0;
 if($65){label=20;break;}else{label=17;break;}
 case 17: 
 var $67=$18;
 var $68=($67|0)==($56|0);
 if($68){label=18;break;}else{label=19;break;}
 case 18: 
 var $70=(($this+128)|0);
 HEAP8[($70)]=0;
 label=20;break;
 case 19: 
 __ZdlPv($64);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor($0){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13044);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13032);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13020);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13008);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12996);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12984);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12972);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12960);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12948);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12936);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12924);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12912);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12900);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12888);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12876);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12864);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12852);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12840);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12828);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12816);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12804);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12792);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12780);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12768);
 return;
}


function ___cxx_global_array_dtor53($0){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13788);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13776);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13764);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13752);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13740);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13728);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13716);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13704);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13692);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13680);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13668);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13656);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13644);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13632);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13620);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13608);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13596);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13584);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13572);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13560);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13548);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13536);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13524);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13512);
 return;
}


function ___cxx_global_array_dtor56($0){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12588);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12576);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12564);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12552);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12540);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12528);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12516);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12504);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12492);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12480);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12468);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12456);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12444);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12432);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12420);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12408);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12396);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12384);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12372);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12360);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12348);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12336);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12324);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12312);
 return;
}


function ___cxx_global_array_dtor81($0){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13332);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13320);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13308);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13296);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13284);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13272);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13260);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13248);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13236);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13224);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13212);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13200);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13188);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13176);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13164);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13152);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13140);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13128);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13116);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13104);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13092);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13080);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13068);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13056);
 return;
}


function ___cxx_global_array_dtor105($0){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12756);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12744);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12732);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12720);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12708);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12696);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12684);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12672);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12660);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12648);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12636);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12624);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12612);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12600);
 return;
}


function ___cxx_global_array_dtor120($0){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13500);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13488);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13476);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13464);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13452);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13440);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13428);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13416);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13404);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13392);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13380);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13368);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13356);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13344);
 return;
}


function _mbrlen($s,$n,$st){
 var label=0;


 var $1=($st|0)!=0;
 var $2=($1?$st:11832);
 var $3=_mbrtowc(0,$s,$n,$2);
 return $3;
}


function _mbrtowc($wc,$src,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($st|0)==0;
 var $_01=($2?11824:$st);
 var $3=(($_01)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($src|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($4|0)==0;
 if($7){var $_0=0;label=19;break;}else{label=18;break;}
 case 3: 
 var $9=($wc|0)==0;
 if($9){label=4;break;}else{var $13=$wc;label=5;break;}
 case 4: 
 var $11=$1;
 HEAP32[(($1)>>2)]=$11;
 var $13=$11;label=5;break;
 case 5: 
 var $13;
 var $14=($n|0)==0;
 if($14){var $_0=-2;label=19;break;}else{label=6;break;}
 case 6: 
 var $16=($4|0)==0;
 if($16){label=7;break;}else{var $s_0=$src;var $c_0=$4;var $_02=$n;label=11;break;}
 case 7: 
 var $18=HEAP8[($src)];
 var $19=($18&255);
 var $20=(($18<<24)>>24)>-1;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($13)>>2)]=$19;
 var $22=(($18<<24)>>24)!=0;
 var $23=($22&1);
 var $_0=$23;label=19;break;
 case 9: 
 var $25=((($19)-(194))|0);
 var $26=($25>>>0)>50;
 if($26){label=18;break;}else{label=10;break;}
 case 10: 
 var $28=(($src+1)|0);
 var $29=((3504+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($n)-(1))|0);
 var $s_0=$28;var $c_0=$30;var $_02=$31;label=11;break;
 case 11: 
 var $_02;
 var $c_0;
 var $s_0;
 var $33=($_02|0)==0;
 if($33){var $c_2=$c_0;label=17;break;}else{label=12;break;}
 case 12: 
 var $35=HEAP8[($s_0)];
 var $36=($35&255);
 var $37=$36>>>3;
 var $38=((($37)-(16))|0);
 var $39=$c_0>>26;
 var $40=((($37)+($39))|0);
 var $41=$38|$40;
 var $42=($41>>>0)>7;
 if($42){label=18;break;}else{var $s_1=$s_0;var $c_1=$c_0;var $_1=$_02;var $43=$35;label=13;break;}
 case 13: 
 var $43;
 var $_1;
 var $c_1;
 var $s_1;
 var $44=$c_1<<6;
 var $45=(($s_1+1)|0);
 var $46=($43&255);
 var $47=((($46)-(128))|0);
 var $48=$47|$44;
 var $49=((($_1)-(1))|0);
 var $50=($48|0)<0;
 if($50){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($3)>>2)]=0;
 HEAP32[(($13)>>2)]=$48;
 var $52=((($n)-($49))|0);
 var $_0=$52;label=19;break;
 case 15: 
 var $54=($49|0)==0;
 if($54){var $c_2=$48;label=17;break;}else{label=16;break;}
 case 16: 
 var $56=HEAP8[($45)];
 var $57=($56&255);
 var $58=((($57)-(128))|0);
 var $59=($58>>>0)>63;
 if($59){label=18;break;}else{var $s_1=$45;var $c_1=$48;var $_1=$49;var $43=$56;label=13;break;}
 case 17: 
 var $c_2;
 HEAP32[(($3)>>2)]=$c_2;
 var $_0=-2;label=19;break;
 case 18: 
 HEAP32[(($3)>>2)]=0;
 var $60=___errno_location();
 HEAP32[(($60)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsnrtowcs($wcs,$src,$n,$wn,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wbuf=sp;
 var $s=(sp)+(1024);
 var $1=$wbuf;
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $2=HEAP32[(($src)>>2)];
 HEAP32[(($s)>>2)]=$2;
 var $3=($wcs|0)!=0;
 var $4=(($wbuf)|0);
 var $wn_=($3?$wn:256);
 var $wcs_=($3?$wcs:$4);
 var $5=($2|0)==0;
 var $6=($wn_|0)==0;
 var $or_cond22=$5|$6;
 if($or_cond22){var $_1=$n;var $cnt_1=0;var $_26=$wn_;var $ws_018=$wcs_;var $23=$2;label=8;break;}else{var $_0423=$wn_;var $cnt_024=0;var $ws_025=$wcs_;var $_026=$n;var $_pr41=$2;label=2;break;}
 case 2: 
 var $_pr41;
 var $_026;
 var $ws_025;
 var $cnt_024;
 var $_0423;
 var $7=$_026>>>2;
 var $8=($7>>>0)>=($_0423>>>0);
 var $9=($_026>>>0)>131;
 var $or_cond7=$8|$9;
 if($or_cond7){label=3;break;}else{var $_1=$_026;var $cnt_1=$cnt_024;var $_26=$_0423;var $ws_018=$ws_025;var $23=$_pr41;label=8;break;}
 case 3: 
 var $_04_=($8?$_0423:$7);
 var $10=((($_026)-($_04_))|0);
 var $11=_mbsrtowcs($ws_025,$s,$_04_,$st);
 var $12=($11|0)==-1;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $_pr_pre=HEAP32[(($s)>>2)];
 var $_1=$10;var $cnt_1=-1;var $_26=0;var $ws_018=$ws_025;var $23=$_pr_pre;label=8;break;
 case 5: 
 var $14=($ws_025|0)==($4|0);
 if($14){var $ws_1=$4;var $_15=$_0423;label=7;break;}else{label=6;break;}
 case 6: 
 var $16=(($ws_025+($11<<2))|0);
 var $17=((($_0423)-($11))|0);
 var $ws_1=$16;var $_15=$17;label=7;break;
 case 7: 
 var $_15;
 var $ws_1;
 var $19=((($11)+($cnt_024))|0);
 var $20=HEAP32[(($s)>>2)];
 var $21=($20|0)==0;
 var $22=($_15|0)==0;
 var $or_cond=$21|$22;
 if($or_cond){var $_1=$10;var $cnt_1=$19;var $_26=$_15;var $ws_018=$ws_1;var $23=$20;label=8;break;}else{var $_0423=$_15;var $cnt_024=$19;var $ws_025=$ws_1;var $_026=$10;var $_pr41=$20;label=2;break;}
 case 8: 
 var $23;
 var $ws_018;
 var $_26;
 var $cnt_1;
 var $_1;
 var $24=($23|0)==0;
 if($24){var $cnt_3=$cnt_1;label=15;break;}else{label=9;break;}
 case 9: 
 var $25=($_26|0)==0;
 var $26=($_1|0)==0;
 var $or_cond810=$25|$26;
 if($or_cond810){var $cnt_3=$cnt_1;label=15;break;}else{var $_311=$_26;var $cnt_212=$cnt_1;var $ws_213=$ws_018;var $_214=$_1;var $27=$23;label=10;break;}
 case 10: 
 var $27;
 var $_214;
 var $ws_213;
 var $cnt_212;
 var $_311;
 var $28=_mbrtowc($ws_213,$27,$_214,$st);
 var $29=((($28)+(2))|0);
 var $30=($29>>>0)<3;
 if($30){label=11;break;}else{label=14;break;}
 case 11: 
 if(($28|0)==0){ label=12;break;}else if(($28|0)==-1){ var $cnt_3=-1;label=15;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($s)>>2)]=0;
 var $cnt_3=$cnt_212;label=15;break;
 case 13: 
 var $34=(($st)|0);
 HEAP32[(($34)>>2)]=0;
 var $cnt_3=$cnt_212;label=15;break;
 case 14: 
 var $36=HEAP32[(($s)>>2)];
 var $37=(($36+$28)|0);
 HEAP32[(($s)>>2)]=$37;
 var $38=((($_214)-($28))|0);
 var $39=(($ws_213+4)|0);
 var $40=((($_311)-(1))|0);
 var $41=((($cnt_212)+(1))|0);
 var $42=($40|0)==0;
 var $43=($_214|0)==($28|0);
 var $or_cond8=$42|$43;
 if($or_cond8){var $cnt_3=$41;label=15;break;}else{var $_311=$40;var $cnt_212=$41;var $ws_213=$39;var $_214=$38;var $27=$37;label=10;break;}
 case 15: 
 var $cnt_3;
 if($3){label=16;break;}else{label=17;break;}
 case 16: 
 var $45=HEAP32[(($s)>>2)];
 HEAP32[(($src)>>2)]=$45;
 label=17;break;
 case 17: 
 var $$etemp$1$0=1024;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsrtowcs($ws,$src,$wn,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($src)>>2)];
 var $2=($st|0)==0;
 if($2){label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(($st)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=($ws|0)==0;
 if($8){var $c_2=$5;var $s_3=$1;var $_35=$wn;label=16;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($4)>>2)]=0;
 var $c_4=$5;var $s_8=$1;var $_3=$ws;var $_7=$wn;label=36;break;
 case 5: 
 var $11=($ws|0)==0;
 if($11){var $s_0=$1;var $_02=$wn;label=7;break;}else{var $s_5_ph=$1;var $_01_ph=$ws;var $_46_ph=$wn;label=6;break;}
 case 6: 
 var $_46_ph;
 var $_01_ph;
 var $s_5_ph;
 var $12=($_46_ph|0)==0;
 if($12){var $_0=$wn;label=53;break;}else{var $_4622=$_46_ph;var $_0123=$_01_ph;var $s_524=$s_5_ph;label=26;break;}
 case 7: 
 var $_02;
 var $s_0;
 var $13=HEAP8[($s_0)];
 var $14=($13&255);
 var $15=((($14)-(1))|0);
 var $16=($15>>>0)<127;
 if($16){label=8;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$13;label=12;break;}
 case 8: 
 var $18=$s_0;
 var $19=$18&3;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$13;label=12;break;}
 case 9: 
 var $21=$s_0;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$23|$22;
 var $25=$24&-2139062144;
 var $26=($25|0)==0;
 var $27=(($22)&255);
 if($26){var $_137=$_02;var $s_18=$s_0;label=10;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$27;label=12;break;}
 case 10: 
 var $s_18;
 var $_137;
 var $28=(($s_18+4)|0);
 var $29=((($_137)-(4))|0);
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)-(16843009))|0);
 var $33=$32|$31;
 var $34=$33&-2139062144;
 var $35=($34|0)==0;
 if($35){var $_137=$29;var $s_18=$28;label=10;break;}else{label=11;break;}
 case 11: 
 var $36=(($31)&255);
 var $s_2=$28;var $_24=$29;var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $_24;
 var $s_2;
 var $38=($37&255);
 var $39=((($38)-(1))|0);
 var $40=($39>>>0)<127;
 if($40){label=13;break;}else{label=14;break;}
 case 13: 
 var $42=(($s_2+1)|0);
 var $43=((($_24)-(1))|0);
 var $s_0=$42;var $_02=$43;label=7;break;
 case 14: 
 var $45=((($38)-(194))|0);
 var $46=($45>>>0)>50;
 if($46){var $_840=$_24;var $_442=$ws;var $s_1044=$s_2;label=47;break;}else{label=15;break;}
 case 15: 
 var $48=(($s_2+1)|0);
 var $49=((3504+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $c_2=$50;var $s_3=$48;var $_35=$_24;label=16;break;
 case 16: 
 var $_35;
 var $s_3;
 var $c_2;
 var $52=HEAP8[($s_3)];
 var $53=($52&255);
 var $54=$53>>>3;
 var $55=((($54)-(16))|0);
 var $56=$c_2>>26;
 var $57=((($54)+($56))|0);
 var $58=$55|$57;
 var $59=($58>>>0)>7;
 if($59){label=17;break;}else{label=18;break;}
 case 17: 
 var $61=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$61;var $_4=$ws;var $_8=$_35;label=46;break;
 case 18: 
 var $63=(($s_3+1)|0);
 var $64=$c_2&33554432;
 var $65=($64|0)==0;
 if($65){var $s_4=$63;label=25;break;}else{label=19;break;}
 case 19: 
 var $67=HEAP8[($63)];
 var $68=($67&255);
 var $69=((($68)-(128))|0);
 var $70=($69>>>0)>63;
 if($70){label=20;break;}else{label=21;break;}
 case 20: 
 var $72=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$72;var $_4=$ws;var $_8=$_35;label=46;break;
 case 21: 
 var $74=(($s_3+2)|0);
 var $75=$c_2&524288;
 var $76=($75|0)==0;
 if($76){var $s_4=$74;label=25;break;}else{label=22;break;}
 case 22: 
 var $78=HEAP8[($74)];
 var $79=($78&255);
 var $80=((($79)-(128))|0);
 var $81=($80>>>0)>63;
 if($81){label=23;break;}else{label=24;break;}
 case 23: 
 var $83=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$83;var $_4=$ws;var $_8=$_35;label=46;break;
 case 24: 
 var $85=(($s_3+3)|0);
 var $s_4=$85;label=25;break;
 case 25: 
 var $s_4;
 var $87=((($_35)-(1))|0);
 var $s_0=$s_4;var $_02=$87;label=7;break;
 case 26: 
 var $s_524;
 var $_0123;
 var $_4622;
 var $88=HEAP8[($s_524)];
 var $89=($88&255);
 var $90=((($89)-(1))|0);
 var $91=($90>>>0)<127;
 if($91){label=27;break;}else{var $s_7=$s_524;var $_2=$_0123;var $_6=$_4622;var $122=$88;label=32;break;}
 case 27: 
 var $93=$s_524;
 var $94=$93&3;
 var $95=($94|0)==0;
 var $96=($_4622>>>0)>3;
 var $or_cond=$95&$96;
 if($or_cond){var $_512=$_4622;var $_113=$_0123;var $s_614=$s_524;label=28;break;}else{var $s_7=$s_524;var $_2=$_0123;var $_6=$_4622;var $122=$88;label=32;break;}
 case 28: 
 var $s_614;
 var $_113;
 var $_512;
 var $97=$s_614;
 var $98=HEAP32[(($97)>>2)];
 var $99=((($98)-(16843009))|0);
 var $100=$99|$98;
 var $101=$100&-2139062144;
 var $102=($101|0)==0;
 if($102){label=29;break;}else{label=30;break;}
 case 29: 
 var $104=(($s_614+1)|0);
 var $105=$98&255;
 var $106=(($_113+4)|0);
 HEAP32[(($_113)>>2)]=$105;
 var $107=(($s_614+2)|0);
 var $108=HEAP8[($104)];
 var $109=($108&255);
 var $110=(($_113+8)|0);
 HEAP32[(($106)>>2)]=$109;
 var $111=(($s_614+3)|0);
 var $112=HEAP8[($107)];
 var $113=($112&255);
 var $114=(($_113+12)|0);
 HEAP32[(($110)>>2)]=$113;
 var $115=(($s_614+4)|0);
 var $116=HEAP8[($111)];
 var $117=($116&255);
 var $118=(($_113+16)|0);
 HEAP32[(($114)>>2)]=$117;
 var $119=((($_512)-(4))|0);
 var $120=($119>>>0)>3;
 if($120){var $_512=$119;var $_113=$118;var $s_614=$115;label=28;break;}else{label=31;break;}
 case 30: 
 var $121=(($98)&255);
 var $s_7=$s_614;var $_2=$_113;var $_6=$_512;var $122=$121;label=32;break;
 case 31: 
 var $_pre_pre=HEAP8[($115)];
 var $s_7=$115;var $_2=$118;var $_6=$119;var $122=$_pre_pre;label=32;break;
 case 32: 
 var $122;
 var $_6;
 var $_2;
 var $s_7;
 var $123=($122&255);
 var $124=((($123)-(1))|0);
 var $125=($124>>>0)<127;
 if($125){label=33;break;}else{label=34;break;}
 case 33: 
 var $127=(($s_7+1)|0);
 var $128=(($_2+4)|0);
 HEAP32[(($_2)>>2)]=$123;
 var $129=((($_6)-(1))|0);
 var $130=($129|0)==0;
 if($130){var $_0=$wn;label=53;break;}else{var $_4622=$129;var $_0123=$128;var $s_524=$127;label=26;break;}
 case 34: 
 var $132=((($123)-(194))|0);
 var $133=($132>>>0)>50;
 if($133){var $_840=$_6;var $_442=$_2;var $s_1044=$s_7;label=47;break;}else{label=35;break;}
 case 35: 
 var $135=(($s_7+1)|0);
 var $136=((3504+($132<<2))|0);
 var $137=HEAP32[(($136)>>2)];
 var $c_4=$137;var $s_8=$135;var $_3=$_2;var $_7=$_6;label=36;break;
 case 36: 
 var $_7;
 var $_3;
 var $s_8;
 var $c_4;
 var $139=HEAP8[($s_8)];
 var $140=($139&255);
 var $141=$140>>>3;
 var $142=((($141)-(16))|0);
 var $143=$c_4>>26;
 var $144=((($141)+($143))|0);
 var $145=$142|$144;
 var $146=($145>>>0)>7;
 if($146){label=37;break;}else{label=38;break;}
 case 37: 
 var $148=((($s_8)-(1))|0);
 var $c_6=$c_4;var $s_10=$148;var $_4=$_3;var $_8=$_7;label=46;break;
 case 38: 
 var $150=$c_4<<6;
 var $151=(($s_8+1)|0);
 var $152=((($140)-(128))|0);
 var $153=$152|$150;
 var $154=($153|0)<0;
 if($154){label=39;break;}else{var $c_5=$153;var $s_9=$151;label=45;break;}
 case 39: 
 var $156=HEAP8[($151)];
 var $157=($156&255);
 var $158=((($157)-(128))|0);
 var $159=($158>>>0)>63;
 if($159){label=40;break;}else{label=41;break;}
 case 40: 
 var $161=((($s_8)-(1))|0);
 var $c_6=$153;var $s_10=$161;var $_4=$_3;var $_8=$_7;label=46;break;
 case 41: 
 var $163=$153<<6;
 var $164=(($s_8+2)|0);
 var $165=$158|$163;
 var $166=($165|0)<0;
 if($166){label=42;break;}else{var $c_5=$165;var $s_9=$164;label=45;break;}
 case 42: 
 var $168=HEAP8[($164)];
 var $169=($168&255);
 var $170=((($169)-(128))|0);
 var $171=($170>>>0)>63;
 if($171){label=43;break;}else{label=44;break;}
 case 43: 
 var $173=((($s_8)-(1))|0);
 var $c_6=$165;var $s_10=$173;var $_4=$_3;var $_8=$_7;label=46;break;
 case 44: 
 var $175=$165<<6;
 var $176=(($s_8+3)|0);
 var $177=$170|$175;
 var $c_5=$177;var $s_9=$176;label=45;break;
 case 45: 
 var $s_9;
 var $c_5;
 var $179=(($_3+4)|0);
 HEAP32[(($_3)>>2)]=$c_5;
 var $180=((($_7)-(1))|0);
 var $s_5_ph=$s_9;var $_01_ph=$179;var $_46_ph=$180;label=6;break;
 case 46: 
 var $_8;
 var $_4;
 var $s_10;
 var $c_6;
 var $182=($c_6|0)==0;
 if($182){var $_840=$_8;var $_442=$_4;var $s_1044=$s_10;label=47;break;}else{var $_441=$_4;var $s_1043=$s_10;label=51;break;}
 case 47: 
 var $s_1044;
 var $_442;
 var $_840;
 var $183=HEAP8[($s_1044)];
 var $184=(($183<<24)>>24)==0;
 if($184){label=48;break;}else{var $_441=$_442;var $s_1043=$s_1044;label=51;break;}
 case 48: 
 var $186=($_442|0)==0;
 if($186){label=50;break;}else{label=49;break;}
 case 49: 
 HEAP32[(($_442)>>2)]=0;
 HEAP32[(($src)>>2)]=0;
 label=50;break;
 case 50: 
 var $189=((($wn)-($_840))|0);
 var $_0=$189;label=53;break;
 case 51: 
 var $s_1043;
 var $_441;
 var $191=___errno_location();
 HEAP32[(($191)>>2)]=84;
 var $192=($_441|0)==0;
 if($192){var $_0=-1;label=53;break;}else{label=52;break;}
 case 52: 
 HEAP32[(($src)>>2)]=$s_1043;
 var $_0=-1;label=53;break;
 case 53: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbtowc($wc,$src,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($src|0)==0;
 if($2){var $_0=0;label=19;break;}else{label=2;break;}
 case 2: 
 var $4=($n|0)==0;
 if($4){label=18;break;}else{label=3;break;}
 case 3: 
 var $6=($wc|0)==0;
 if($6){label=4;break;}else{var $10=$wc;label=5;break;}
 case 4: 
 var $8=$1;
 HEAP32[(($1)>>2)]=$8;
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 var $11=HEAP8[($src)];
 var $12=($11&255);
 var $13=(($11<<24)>>24)>-1;
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($10)>>2)]=$12;
 var $15=(($11<<24)>>24)!=0;
 var $16=($15&1);
 var $_0=$16;label=19;break;
 case 7: 
 var $18=((($12)-(194))|0);
 var $19=($18>>>0)>50;
 if($19){label=18;break;}else{label=8;break;}
 case 8: 
 var $21=(($src+1)|0);
 var $22=((3504+($18<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($n>>>0)<4;
 if($24){label=9;break;}else{label=10;break;}
 case 9: 
 var $26=((($n)*(6))&-1);
 var $27=((($26)-(6))|0);
 var $28=-2147483648>>>($27>>>0);
 var $29=$23&$28;
 var $30=($29|0)==0;
 if($30){label=10;break;}else{label=18;break;}
 case 10: 
 var $32=HEAP8[($21)];
 var $33=($32&255);
 var $34=$33>>>3;
 var $35=((($34)-(16))|0);
 var $36=$23>>26;
 var $37=((($34)+($36))|0);
 var $38=$35|$37;
 var $39=($38>>>0)>7;
 if($39){label=18;break;}else{label=11;break;}
 case 11: 
 var $41=$23<<6;
 var $42=((($33)-(128))|0);
 var $43=$42|$41;
 var $44=($43|0)<0;
 if($44){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($10)>>2)]=$43;
 var $_0=2;label=19;break;
 case 13: 
 var $47=(($src+2)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=((($49)-(128))|0);
 var $51=($50>>>0)>63;
 if($51){label=18;break;}else{label=14;break;}
 case 14: 
 var $53=$43<<6;
 var $54=$50|$53;
 var $55=($54|0)<0;
 if($55){label=16;break;}else{label=15;break;}
 case 15: 
 HEAP32[(($10)>>2)]=$54;
 var $_0=3;label=19;break;
 case 16: 
 var $58=(($src+3)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=((($60)-(128))|0);
 var $62=($61>>>0)>63;
 if($62){label=18;break;}else{label=17;break;}
 case 17: 
 var $64=$54<<6;
 var $65=$61|$64;
 HEAP32[(($10)>>2)]=$65;
 var $_0=4;label=19;break;
 case 18: 
 var $67=___errno_location();
 HEAP32[(($67)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcrtomb($s,$wc,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=($wc>>>0)<128;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=(($wc)&255);
 HEAP8[($s)]=$5;
 var $_0=1;label=11;break;
 case 4: 
 var $7=($wc>>>0)<2048;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=$wc>>>6;
 var $10=$9|192;
 var $11=(($10)&255);
 var $12=(($s+1)|0);
 HEAP8[($s)]=$11;
 var $13=$wc&63;
 var $14=$13|128;
 var $15=(($14)&255);
 HEAP8[($12)]=$15;
 var $_0=2;label=11;break;
 case 6: 
 var $17=($wc>>>0)<55296;
 var $18=((($wc)-(57344))|0);
 var $19=($18>>>0)<8192;
 var $or_cond=$17|$19;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$wc>>>12;
 var $22=$21|224;
 var $23=(($22)&255);
 var $24=(($s+1)|0);
 HEAP8[($s)]=$23;
 var $25=$wc>>>6;
 var $26=$25&63;
 var $27=$26|128;
 var $28=(($27)&255);
 var $29=(($s+2)|0);
 HEAP8[($24)]=$28;
 var $30=$wc&63;
 var $31=$30|128;
 var $32=(($31)&255);
 HEAP8[($29)]=$32;
 var $_0=3;label=11;break;
 case 8: 
 var $34=((($wc)-(65536))|0);
 var $35=($34>>>0)<1048576;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$wc>>>18;
 var $38=$37|240;
 var $39=(($38)&255);
 var $40=(($s+1)|0);
 HEAP8[($s)]=$39;
 var $41=$wc>>>12;
 var $42=$41&63;
 var $43=$42|128;
 var $44=(($43)&255);
 var $45=(($s+2)|0);
 HEAP8[($40)]=$44;
 var $46=$wc>>>6;
 var $47=$46&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($s+3)|0);
 HEAP8[($45)]=$49;
 var $51=$wc&63;
 var $52=$51|128;
 var $53=(($52)&255);
 HEAP8[($50)]=$53;
 var $_0=4;label=11;break;
 case 10: 
 var $55=___errno_location();
 HEAP32[(($55)>>2)]=84;
 var $_0=-1;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsnrtombs($dst,$wcs,$wn,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $ws=(sp)+(256);
 var $1=(($buf)|0);
 var $$etemp$0$0=256;
 var $$etemp$0$1=0;

 var $2=HEAP32[(($wcs)>>2)];
 HEAP32[(($ws)>>2)]=$2;
 var $3=($dst|0)!=0;
 var $n_=($3?$n:256);
 var $dst_=($3?$dst:$1);
 var $4=($2|0)==0;
 var $5=($n_|0)==0;
 var $or_cond22=$4|$5;
 if($or_cond22){var $_1=$wn;var $cnt_1=0;var $_26=$n_;var $s_018=$dst_;var $21=$2;label=8;break;}else{var $_0423=$n_;var $cnt_024=0;var $s_025=$dst_;var $_026=$wn;var $_pr41=$2;label=2;break;}
 case 2: 
 var $_pr41;
 var $_026;
 var $s_025;
 var $cnt_024;
 var $_0423;
 var $6=($_026>>>0)>=($_0423>>>0);
 var $7=($_026>>>0)>32;
 var $or_cond7=$6|$7;
 if($or_cond7){label=3;break;}else{var $_1=$_026;var $cnt_1=$cnt_024;var $_26=$_0423;var $s_018=$s_025;var $21=$_pr41;label=8;break;}
 case 3: 
 var $_04__0=($6?$_0423:$_026);
 var $8=((($_026)-($_04__0))|0);
 var $9=_wcsrtombs($s_025,$ws,$_04__0,0);
 var $10=($9|0)==-1;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $_pr_pre=HEAP32[(($ws)>>2)];
 var $_1=$8;var $cnt_1=-1;var $_26=0;var $s_018=$s_025;var $21=$_pr_pre;label=8;break;
 case 5: 
 var $12=($s_025|0)==($1|0);
 if($12){var $s_1=$1;var $_15=$_0423;label=7;break;}else{label=6;break;}
 case 6: 
 var $14=(($s_025+$9)|0);
 var $15=((($_0423)-($9))|0);
 var $s_1=$14;var $_15=$15;label=7;break;
 case 7: 
 var $_15;
 var $s_1;
 var $17=((($9)+($cnt_024))|0);
 var $18=HEAP32[(($ws)>>2)];
 var $19=($18|0)==0;
 var $20=($_15|0)==0;
 var $or_cond=$19|$20;
 if($or_cond){var $_1=$8;var $cnt_1=$17;var $_26=$_15;var $s_018=$s_1;var $21=$18;label=8;break;}else{var $_0423=$_15;var $cnt_024=$17;var $s_025=$s_1;var $_026=$8;var $_pr41=$18;label=2;break;}
 case 8: 
 var $21;
 var $s_018;
 var $_26;
 var $cnt_1;
 var $_1;
 var $22=($21|0)==0;
 if($22){var $cnt_3=$cnt_1;label=14;break;}else{label=9;break;}
 case 9: 
 var $23=($_26|0)==0;
 var $24=($_1|0)==0;
 var $or_cond810=$23|$24;
 if($or_cond810){var $cnt_3=$cnt_1;label=14;break;}else{var $_311=$_26;var $cnt_212=$cnt_1;var $s_213=$s_018;var $_214=$_1;var $25=$21;label=10;break;}
 case 10: 
 var $25;
 var $_214;
 var $s_213;
 var $cnt_212;
 var $_311;
 var $26=HEAP32[(($25)>>2)];
 var $27=_wcrtomb($s_213,$26,0);
 var $28=((($27)+(1))|0);
 var $29=($28>>>0)<2;
 if($29){label=11;break;}else{label=13;break;}
 case 11: 
 var $31=($27|0)==0;
 if($31){label=12;break;}else{var $cnt_3=-1;label=14;break;}
 case 12: 
 HEAP32[(($ws)>>2)]=0;
 var $cnt_3=$cnt_212;label=14;break;
 case 13: 
 var $34=HEAP32[(($ws)>>2)];
 var $35=(($34+4)|0);
 HEAP32[(($ws)>>2)]=$35;
 var $36=((($_214)-(1))|0);
 var $37=(($s_213+$27)|0);
 var $38=((($_311)-($27))|0);
 var $39=((($cnt_212)+(1))|0);
 var $40=($_311|0)==($27|0);
 var $41=($36|0)==0;
 var $or_cond8=$40|$41;
 if($or_cond8){var $cnt_3=$39;label=14;break;}else{var $_311=$38;var $cnt_212=$39;var $s_213=$37;var $_214=$36;var $25=$35;label=10;break;}
 case 14: 
 var $cnt_3;
 if($3){label=15;break;}else{label=16;break;}
 case 15: 
 var $43=HEAP32[(($ws)>>2)];
 HEAP32[(($wcs)>>2)]=$43;
 label=16;break;
 case 16: 
 var $$etemp$1$0=256;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsrtombs($s,$ws,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $1=($s|0)==0;
 if($1){label=4;break;}else{label=2;break;}
 case 2: 
 var $2=($n>>>0)>3;
 if($2){label=3;break;}else{var $_25_lcssa=$n;var $_02_lcssa=$s;label=9;break;}
 case 3: 
 var $_pre41=HEAP32[(($ws)>>2)];
 var $_2525=$n;var $_0226=$s;var $18=$_pre41;label=8;break;
 case 4: 
 var $4=HEAP32[(($ws)>>2)];
 var $5=(($buf)|0);
 var $6=HEAP32[(($4)>>2)];
 var $7=($6|0)==0;
 if($7){var $_0=0;label=26;break;}else{var $_038=0;var $ws2_09=$4;var $8=$6;label=5;break;}
 case 5: 
 var $8;
 var $ws2_09;
 var $_038;
 var $9=($8>>>0)>127;
 if($9){label=6;break;}else{var $_pn=1;label=7;break;}
 case 6: 
 var $11=_wcrtomb($5,$8,0);
 var $12=($11|0)==-1;
 if($12){var $_0=-1;label=26;break;}else{var $_pn=$11;label=7;break;}
 case 7: 
 var $_pn;
 var $_14=((($_pn)+($_038))|0);
 var $14=(($ws2_09+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $_0=$_14;label=26;break;}else{var $_038=$_14;var $ws2_09=$14;var $8=$15;label=5;break;}
 case 8: 
 var $18;
 var $_0226;
 var $_2525;
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){var $_25_lcssa=$_2525;var $_02_lcssa=$_0226;label=9;break;}else{label=11;break;}
 case 9: 
 var $_02_lcssa;
 var $_25_lcssa;
 var $21=($_25_lcssa|0)==0;
 if($21){var $_414=0;label=25;break;}else{label=10;break;}
 case 10: 
 var $22=(($buf)|0);
 var $_pre=HEAP32[(($ws)>>2)];
 var $_418=$_25_lcssa;var $_219=$_02_lcssa;var $40=$_pre;label=16;break;
 case 11: 
 var $24=($19>>>0)>127;
 if($24){label=12;break;}else{label=14;break;}
 case 12: 
 var $26=_wcrtomb($_0226,$19,0);
 var $27=($26|0)==-1;
 if($27){var $_0=-1;label=26;break;}else{label=13;break;}
 case 13: 
 var $29=(($_0226+$26)|0);
 var $30=((($_2525)-($26))|0);
 var $_1=$29;var $_36=$30;var $36=$18;label=15;break;
 case 14: 
 var $32=(($19)&255);
 var $33=(($_0226+1)|0);
 HEAP8[($_0226)]=$32;
 var $34=((($_2525)-(1))|0);
 var $_pre42=HEAP32[(($ws)>>2)];
 var $_1=$33;var $_36=$34;var $36=$_pre42;label=15;break;
 case 15: 
 var $36;
 var $_36;
 var $_1;
 var $37=(($36+4)|0);
 HEAP32[(($ws)>>2)]=$37;
 var $38=($_36>>>0)>3;
 if($38){var $_2525=$_36;var $_0226=$_1;var $18=$37;label=8;break;}else{var $_25_lcssa=$_36;var $_02_lcssa=$_1;label=9;break;}
 case 16: 
 var $40;
 var $_219;
 var $_418;
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=24;break;}else{label=17;break;}
 case 17: 
 var $44=($41>>>0)>127;
 if($44){label=18;break;}else{label=22;break;}
 case 18: 
 var $46=_wcrtomb($22,$41,0);
 var $47=($46|0)==-1;
 if($47){var $_0=-1;label=26;break;}else{label=19;break;}
 case 19: 
 var $49=($46>>>0)>($_418>>>0);
 if($49){label=20;break;}else{label=21;break;}
 case 20: 
 var $51=((($n)-($_418))|0);
 var $_0=$51;label=26;break;
 case 21: 
 var $53=HEAP32[(($40)>>2)];
 var $54=_wcrtomb($_219,$53,0);
 var $55=(($_219+$46)|0);
 var $56=((($_418)-($46))|0);
 var $_3=$55;var $_5=$56;var $61=$40;label=23;break;
 case 22: 
 var $58=(($41)&255);
 var $59=(($_219+1)|0);
 HEAP8[($_219)]=$58;
 var $60=((($_418)-(1))|0);
 var $_pre40=HEAP32[(($ws)>>2)];
 var $_3=$59;var $_5=$60;var $61=$_pre40;label=23;break;
 case 23: 
 var $61;
 var $_5;
 var $_3;
 var $62=(($61+4)|0);
 HEAP32[(($ws)>>2)]=$62;
 var $63=($_5|0)==0;
 if($63){var $_414=0;label=25;break;}else{var $_418=$_5;var $_219=$_3;var $40=$62;label=16;break;}
 case 24: 
 HEAP8[($_219)]=0;
 var $_414=$_418;label=25;break;
 case 25: 
 var $_414;
 HEAP32[(($ws)>>2)]=0;
 var $65=((($n)-($_414))|0);
 var $_0=$65;label=26;break;
 case 26: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcslen($s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$s;label=2;break;
 case 2: 
 var $_0;
 var $2=HEAP32[(($_0)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0+4)|0);
 if($3){label=3;break;}else{var $_0=$4;label=2;break;}
 case 3: 
 var $6=$_0;
 var $7=$s;
 var $8=((($6)-($7))|0);
 var $9=$8>>2;
 return $9;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemcpy($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_023=$s;var $_014=$n;var $_05=$d;label=2;break;}
 case 2: 
 var $_05;
 var $_014;
 var $_023;
 var $2=((($_014)-(1))|0);
 var $3=(($_023+4)|0);
 var $4=HEAP32[(($_023)>>2)];
 var $5=(($_05+4)|0);
 HEAP32[(($_05)>>2)]=$4;
 var $6=($2|0)==0;
 if($6){label=3;break;}else{var $_023=$3;var $_014=$2;var $_05=$5;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemmove($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$d;
 var $2=$s;
 var $3=((($1)-($2))|0);
 var $4=$3>>2;
 var $5=($4>>>0)<($n>>>0);
 var $6=($n|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 if($6){label=6;break;}else{var $_025=$s;var $_16=$n;var $_07=$d;label=5;break;}
 case 3: 
 if($6){label=6;break;}else{var $_in=$n;label=4;break;}
 case 4: 
 var $_in;
 var $7=((($_in)-(1))|0);
 var $8=(($s+($7<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($d+($7<<2))|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=($7|0)==0;
 if($11){label=6;break;}else{var $_in=$7;label=4;break;}
 case 5: 
 var $_07;
 var $_16;
 var $_025;
 var $12=((($_16)-(1))|0);
 var $13=(($_025+4)|0);
 var $14=HEAP32[(($_025)>>2)];
 var $15=(($_07+4)|0);
 HEAP32[(($_07)>>2)]=$14;
 var $16=($12|0)==0;
 if($16){label=6;break;}else{var $_025=$13;var $_16=$12;var $_07=$15;label=5;break;}
 case 6: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemset($d,$c,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_012=$n;var $_03=$d;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=((($_012)-(1))|0);
 var $3=(($_03+4)|0);
 HEAP32[(($_03)>>2)]=$c;
 var $4=($2|0)==0;
 if($4){label=3;break;}else{var $_012=$2;var $_03=$3;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt9type_infoD2Ev($this){
 var label=0;


 return;
}


function __ZNSt8bad_castC2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4056;
 return;
}


function __ZNSt8bad_castD0Ev($this){
 var label=0;


 var $1=(($this)|0);

 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt8bad_castD2Ev($this){
 var label=0;


 var $1=(($this)|0);

 return;
}


function __ZNKSt8bad_cast4whatEv($this){
 var label=0;


 return 1880;
}


function __ZN10__cxxabiv116__shim_type_infoD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 var label=0;


 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 var label=0;


 return;
}


function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=(($this)|0);
 var $2=(($thrown_type)|0);
 var $3=($1|0)==($2|0);
 if($3){var $_1=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=($thrown_type|0)==0;
 if($5){var $_1=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $7=$thrown_type;
 var $8=___dynamic_cast($7,11688,11672,0);
 var $9=$8;
 var $10=($8|0)==0;
 if($10){var $_1=0;label=6;break;}else{label=4;break;}
 case 4: 
 var $12=$info;
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 _memset($12, 0, 56)|0;
 var $13=(($info)|0);
 HEAP32[(($13)>>2)]=$9;
 var $14=(($info+8)|0);
 HEAP32[(($14)>>2)]=$this;
 var $15=(($info+12)|0);
 HEAP32[(($15)>>2)]=-1;
 var $16=(($info+48)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=$8;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+28)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$20]($9,$info,$21,1);
 var $22=(($info+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==1;
 if($24){label=5;break;}else{var $_1=0;label=6;break;}
 case 5: 
 var $26=(($info+16)|0);
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$27;
 var $_1=1;label=6;break;
 case 6: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($info+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($5)>>2)]=$adjustedPtr;
 var $9=(($info+24)|0);
 HEAP32[(($9)>>2)]=$path_below;
 var $10=(($info+36)|0);
 HEAP32[(($10)>>2)]=1;
 label=8;break;
 case 4: 
 var $12=($6|0)==($adjustedPtr|0);
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 var $14=(($info+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==2;
 if($16){label=6;break;}else{label=8;break;}
 case 6: 
 HEAP32[(($14)>>2)]=$path_below;
 label=8;break;
 case 7: 
 var $19=(($info+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+(1))|0);
 HEAP32[(($19)>>2)]=$21;
 var $22=(($info+24)|0);
 HEAP32[(($22)>>2)]=2;
 var $23=(($info+54)|0);
 HEAP8[($23)]=1;
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=9;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=9;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=9;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 FUNCTION_TABLE[$32]($28,$info,$adjustedPtr,$path_below);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=16;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=16;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=16;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=16;break;
 case 8: 
 var $27=(($this+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($this+16+($28<<3))|0);
 var $30=(($this+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31>>8;
 var $33=$31&1;
 var $34=($33|0)==0;
 if($34){var $offset_to_base_0_i1=$32;label=10;break;}else{label=9;break;}
 case 9: 
 var $36=$adjustedPtr;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+$32)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $offset_to_base_0_i1=$40;label=10;break;
 case 10: 
 var $offset_to_base_0_i1;
 var $41=(($this+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+28)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($adjustedPtr+$offset_to_base_0_i1)|0);
 var $48=$31&2;
 var $49=($48|0)!=0;
 var $50=($49?$path_below:2);
 FUNCTION_TABLE[$46]($42,$info,$47,$50);
 var $51=($28|0)>1;
 if($51){label=11;break;}else{label=16;break;}
 case 11: 
 var $52=(($this+24)|0);
 var $53=(($info+54)|0);
 var $54=$adjustedPtr;
 var $p_0=$52;label=12;break;
 case 12: 
 var $p_0;
 var $56=(($p_0+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57>>8;
 var $59=$57&1;
 var $60=($59|0)==0;
 if($60){var $offset_to_base_0_i=$58;label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($54)>>2)];
 var $63=(($62+$58)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i;
 var $66=(($p_0)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($adjustedPtr+$offset_to_base_0_i)|0);
 var $73=$57&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$72,$75);
 var $76=HEAP8[($53)];
 var $77=(($76<<24)>>24)==0;
 if($77){label=15;break;}else{label=16;break;}
 case 15: 
 var $79=(($p_0+8)|0);
 var $80=($79>>>0)<($29>>>0);
 if($80){var $p_0=$79;label=12;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=$static_ptr;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(8))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($static_ptr+$5)|0);
 var $7=((($2)-(4))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 var $10=$info;
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 var $11=(($info)|0);
 HEAP32[(($11)>>2)]=$dst_type;
 var $12=(($info+4)|0);
 HEAP32[(($12)>>2)]=$static_ptr;
 var $13=(($info+8)|0);
 HEAP32[(($13)>>2)]=$static_type;
 var $14=(($info+12)|0);
 HEAP32[(($14)>>2)]=$src2dst_offset;
 var $15=(($info+16)|0);
 var $16=(($info+20)|0);
 var $17=(($info+24)|0);
 var $18=(($info+28)|0);
 var $19=(($info+32)|0);
 var $20=(($info+40)|0);
 var $21=$8;
 var $22=(($dst_type)|0);
 var $23=($21|0)==($22|0);
 var $24=$15;
 _memset($24, 0, 39)|0;
 if($23){label=2;break;}else{label=3;break;}
 case 2: 
 var $26=(($info+48)|0);
 HEAP32[(($26)>>2)]=1;
 var $27=$8;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+20)|0);
 var $30=HEAP32[(($29)>>2)];
 FUNCTION_TABLE[$30]($9,$info,$6,$6,1,0);
 var $31=HEAP32[(($17)>>2)];
 var $32=($31|0)==1;
 var $_=($32?$6:0);
 var $dst_ptr_0=$_;label=12;break;
 case 3: 
 var $34=(($info+36)|0);
 var $35=$8;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+24)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($9,$info,$6,1,0);
 var $39=HEAP32[(($34)>>2)];
 if(($39|0)==0){ label=4;break;}else if(($39|0)==1){ label=7;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 4: 
 var $41=HEAP32[(($20)>>2)];
 var $42=($41|0)==1;
 if($42){label=5;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 5: 
 var $44=HEAP32[(($18)>>2)];
 var $45=($44|0)==1;
 if($45){label=6;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 6: 
 var $47=HEAP32[(($19)>>2)];
 var $48=($47|0)==1;
 var $49=HEAP32[(($16)>>2)];
 var $_1=($48?$49:0);
 var $dst_ptr_0=$_1;label=12;break;
 case 7: 
 var $51=HEAP32[(($17)>>2)];
 var $52=($51|0)==1;
 if($52){label=11;break;}else{label=8;break;}
 case 8: 
 var $54=HEAP32[(($20)>>2)];
 var $55=($54|0)==0;
 if($55){label=9;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 9: 
 var $57=HEAP32[(($18)>>2)];
 var $58=($57|0)==1;
 if($58){label=10;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 10: 
 var $60=HEAP32[(($19)>>2)];
 var $61=($60|0)==1;
 if($61){label=11;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 11: 
 var $63=HEAP32[(($15)>>2)];
 var $dst_ptr_0=$63;label=12;break;
 case 12: 
 var $dst_ptr_0;
 var $$etemp$1$0=56;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=53;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=53;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=53;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=29;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=53;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=53;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=53;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($this+16+($39<<3))|0);
 var $41=($39|0)>0;
 if($41){label=12;break;}else{var $is_dst_type_derived_from_static_type_2_off030=0;label=23;break;}
 case 12: 
 var $42=(($this+16)|0);
 var $43=(($info+52)|0);
 var $44=(($info+53)|0);
 var $45=(($info+54)|0);
 var $46=(($this+8)|0);
 var $47=(($info+24)|0);
 var $48=$current_ptr;
 var $does_dst_type_point_to_our_static_type_0_off019=0;var $p_020=$42;var $is_dst_type_derived_from_static_type_0_off021=0;label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off021;
 var $p_020;
 var $does_dst_type_point_to_our_static_type_0_off019;
 HEAP8[($43)]=0;
 HEAP8[($44)]=0;
 var $50=(($p_020+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51>>8;
 var $53=$51&1;
 var $54=($53|0)==0;
 if($54){var $offset_to_base_0_i13=$52;label=15;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($48)>>2)];
 var $57=(($56+$52)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $offset_to_base_0_i13=$59;label=15;break;
 case 15: 
 var $offset_to_base_0_i13;
 var $60=(($p_020)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($current_ptr+$offset_to_base_0_i13)|0);
 var $67=$51>>>1;
 var $68=$67&1;
 var $69=(((2)-($68))|0);
 FUNCTION_TABLE[$65]($61,$info,$current_ptr,$66,$69,$use_strcmp);
 var $70=HEAP8[($45)];
 var $71=(($70<<24)>>24)==0;
 if($71){label=16;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off019;label=22;break;}
 case 16: 
 var $73=HEAP8[($44)];
 var $74=(($73<<24)>>24)==0;
 if($74){var $is_dst_type_derived_from_static_type_1_off0=$is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off019;label=21;break;}else{label=17;break;}
 case 17: 
 var $76=HEAP8[($43)];
 var $77=(($76<<24)>>24)==0;
 if($77){label=20;break;}else{label=18;break;}
 case 18: 
 var $79=HEAP32[(($47)>>2)];
 var $80=($79|0)==1;
 if($80){label=27;break;}else{label=19;break;}
 case 19: 
 var $82=HEAP32[(($46)>>2)];
 var $83=$82&2;
 var $84=($83|0)==0;
 if($84){label=27;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=1;label=21;break;}
 case 20: 
 var $86=HEAP32[(($46)>>2)];
 var $87=$86&1;
 var $88=($87|0)==0;
 if($88){var $is_dst_type_derived_from_static_type_2_off0=1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off019;label=22;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off019;label=21;break;}
 case 21: 
 var $does_dst_type_point_to_our_static_type_1_off0;
 var $is_dst_type_derived_from_static_type_1_off0;
 var $90=(($p_020+8)|0);
 var $91=($90>>>0)<($40>>>0);
 if($91){var $does_dst_type_point_to_our_static_type_0_off019=$does_dst_type_point_to_our_static_type_1_off0;var $p_020=$90;var $is_dst_type_derived_from_static_type_0_off021=$is_dst_type_derived_from_static_type_1_off0;label=13;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;label=22;break;}
 case 22: 
 var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
 var $is_dst_type_derived_from_static_type_2_off0;
 if($does_dst_type_point_to_our_static_type_0_off0_lcssa){var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off0;label=26;break;}else{var $is_dst_type_derived_from_static_type_2_off030=$is_dst_type_derived_from_static_type_2_off0;label=23;break;}
 case 23: 
 var $is_dst_type_derived_from_static_type_2_off030;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $92=(($info+40)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=((($93)+(1))|0);
 HEAP32[(($92)>>2)]=$94;
 var $95=(($info+36)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($96|0)==1;
 if($97){label=24;break;}else{var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off030;label=26;break;}
 case 24: 
 var $99=(($info+24)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==2;
 if($101){label=25;break;}else{var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off030;label=26;break;}
 case 25: 
 var $103=(($info+54)|0);
 HEAP8[($103)]=1;
 if($is_dst_type_derived_from_static_type_2_off030){label=27;break;}else{label=28;break;}
 case 26: 
 var $is_dst_type_derived_from_static_type_2_off031;
 if($is_dst_type_derived_from_static_type_2_off031){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($34)>>2)]=3;
 label=53;break;
 case 28: 
 HEAP32[(($34)>>2)]=4;
 label=53;break;
 case 29: 
 var $107=(($this+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($this+16+($108<<3))|0);
 var $110=(($this+20)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=$111>>8;
 var $113=$111&1;
 var $114=($113|0)==0;
 if($114){var $offset_to_base_0_i14=$112;label=31;break;}else{label=30;break;}
 case 30: 
 var $116=$current_ptr;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+$112)|0);
 var $119=$118;
 var $120=HEAP32[(($119)>>2)];
 var $offset_to_base_0_i14=$120;label=31;break;
 case 31: 
 var $offset_to_base_0_i14;
 var $121=(($this+16)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=$122;
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+24)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($current_ptr+$offset_to_base_0_i14)|0);
 var $128=$111&2;
 var $129=($128|0)!=0;
 var $130=($129?$path_below:2);
 FUNCTION_TABLE[$126]($122,$info,$127,$130,$use_strcmp);
 var $131=(($this+24)|0);
 var $132=($108|0)>1;
 if($132){label=32;break;}else{label=53;break;}
 case 32: 
 var $134=(($this+8)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=$135&2;
 var $137=($136|0)==0;
 if($137){label=33;break;}else{label=34;break;}
 case 33: 
 var $139=(($info+36)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==1;
 if($141){label=34;break;}else{label=39;break;}
 case 34: 
 var $142=(($info+54)|0);
 var $143=$current_ptr;
 var $p2_0=$131;label=35;break;
 case 35: 
 var $p2_0;
 var $145=HEAP8[($142)];
 var $146=(($145<<24)>>24)==0;
 if($146){label=36;break;}else{label=53;break;}
 case 36: 
 var $148=(($p2_0+4)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$149>>8;
 var $151=$149&1;
 var $152=($151|0)==0;
 if($152){var $offset_to_base_0_i11=$150;label=38;break;}else{label=37;break;}
 case 37: 
 var $154=HEAP32[(($143)>>2)];
 var $155=(($154+$150)|0);
 var $156=$155;
 var $157=HEAP32[(($156)>>2)];
 var $offset_to_base_0_i11=$157;label=38;break;
 case 38: 
 var $offset_to_base_0_i11;
 var $158=(($p2_0)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$159;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+24)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($current_ptr+$offset_to_base_0_i11)|0);
 var $165=$149&2;
 var $166=($165|0)!=0;
 var $167=($166?$path_below:2);
 FUNCTION_TABLE[$163]($159,$info,$164,$167,$use_strcmp);
 var $168=(($p2_0+8)|0);
 var $169=($168>>>0)<($109>>>0);
 if($169){var $p2_0=$168;label=35;break;}else{label=53;break;}
 case 39: 
 var $171=$135&1;
 var $172=($171|0)==0;
 if($172){label=41;break;}else{label=40;break;}
 case 40: 
 var $173=(($info+24)|0);
 var $174=(($info+54)|0);
 var $175=$current_ptr;
 var $p2_1=$131;label=42;break;
 case 41: 
 var $176=(($info+54)|0);
 var $177=$current_ptr;
 var $p2_2=$131;label=48;break;
 case 42: 
 var $p2_1;
 var $179=HEAP8[($174)];
 var $180=(($179<<24)>>24)==0;
 if($180){label=43;break;}else{label=53;break;}
 case 43: 
 var $182=HEAP32[(($139)>>2)];
 var $183=($182|0)==1;
 if($183){label=44;break;}else{label=45;break;}
 case 44: 
 var $185=HEAP32[(($173)>>2)];
 var $186=($185|0)==1;
 if($186){label=53;break;}else{label=45;break;}
 case 45: 
 var $188=(($p2_1+4)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=$189>>8;
 var $191=$189&1;
 var $192=($191|0)==0;
 if($192){var $offset_to_base_0_i9=$190;label=47;break;}else{label=46;break;}
 case 46: 
 var $194=HEAP32[(($175)>>2)];
 var $195=(($194+$190)|0);
 var $196=$195;
 var $197=HEAP32[(($196)>>2)];
 var $offset_to_base_0_i9=$197;label=47;break;
 case 47: 
 var $offset_to_base_0_i9;
 var $198=(($p2_1)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=$199;
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+24)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(($current_ptr+$offset_to_base_0_i9)|0);
 var $205=$189&2;
 var $206=($205|0)!=0;
 var $207=($206?$path_below:2);
 FUNCTION_TABLE[$203]($199,$info,$204,$207,$use_strcmp);
 var $208=(($p2_1+8)|0);
 var $209=($208>>>0)<($109>>>0);
 if($209){var $p2_1=$208;label=42;break;}else{label=53;break;}
 case 48: 
 var $p2_2;
 var $211=HEAP8[($176)];
 var $212=(($211<<24)>>24)==0;
 if($212){label=49;break;}else{label=53;break;}
 case 49: 
 var $214=HEAP32[(($139)>>2)];
 var $215=($214|0)==1;
 if($215){label=53;break;}else{label=50;break;}
 case 50: 
 var $217=(($p2_2+4)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$218>>8;
 var $220=$218&1;
 var $221=($220|0)==0;
 if($221){var $offset_to_base_0_i=$219;label=52;break;}else{label=51;break;}
 case 51: 
 var $223=HEAP32[(($177)>>2)];
 var $224=(($223+$219)|0);
 var $225=$224;
 var $226=HEAP32[(($225)>>2)];
 var $offset_to_base_0_i=$226;label=52;break;
 case 52: 
 var $offset_to_base_0_i;
 var $227=(($p2_2)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=$228;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+24)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($current_ptr+$offset_to_base_0_i)|0);
 var $234=$218&2;
 var $235=($234|0)!=0;
 var $236=($235?$path_below:2);
 FUNCTION_TABLE[$232]($228,$info,$233,$236,$use_strcmp);
 var $237=(($p2_2+8)|0);
 var $238=($237>>>0)<($109>>>0);
 if($238){var $p2_2=$237;label=48;break;}else{label=53;break;}
 case 53: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=20;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=20;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=19;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=20;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=20;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=20;break;}else{label=11;break;}
 case 11: 
 var $38=(($info+52)|0);
 HEAP8[($38)]=0;
 var $39=(($info+53)|0);
 HEAP8[($39)]=0;
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+20)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $46=HEAP8[($39)];
 var $47=(($46<<24)>>24)==0;
 if($47){var $is_dst_type_derived_from_static_type_0_off01=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $49=HEAP8[($38)];
 var $not_=(($49<<24)>>24)==0;
 if($not_){var $is_dst_type_derived_from_static_type_0_off01=1;label=13;break;}else{label=17;break;}
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off01;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $50=(($info+40)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=((($51)+(1))|0);
 HEAP32[(($50)>>2)]=$52;
 var $53=(($info+36)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)==1;
 if($55){label=14;break;}else{label=16;break;}
 case 14: 
 var $57=(($info+24)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==2;
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $61=(($info+54)|0);
 HEAP8[($61)]=1;
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 16: 
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($34)>>2)]=3;
 label=20;break;
 case 18: 
 HEAP32[(($34)>>2)]=4;
 label=20;break;
 case 19: 
 var $65=(($this+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+24)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66,$info,$current_ptr,$path_below,$use_strcmp);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=5;break;}
 case 2: 
 var $5=(($info+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($current_ptr|0);
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 var $9=(($info+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==1;
 if($11){label=14;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($9)>>2)]=$path_below;
 label=14;break;
 case 5: 
 var $14=(($info)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==($this|0);
 if($16){label=6;break;}else{label=14;break;}
 case 6: 
 var $18=(($info+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==($current_ptr|0);
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $22=(($info+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==($current_ptr|0);
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=($path_below|0)==1;
 if($26){label=9;break;}else{label=14;break;}
 case 9: 
 var $28=(($info+32)|0);
 HEAP32[(($28)>>2)]=1;
 label=14;break;
 case 10: 
 var $30=(($info+32)|0);
 HEAP32[(($30)>>2)]=$path_below;
 HEAP32[(($22)>>2)]=$current_ptr;
 var $31=(($info+40)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=(($info+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 if($36){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=(($info+24)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==2;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=13;break;
 case 13: 
 var $44=(($info+44)|0);
 HEAP32[(($44)>>2)]=4;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=26;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=26;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=26;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond1_i=$36&$37;
 if($or_cond1_i){label=10;break;}else{label=26;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=26;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=26;break;
 case 12: 
 var $46=(($info+52)|0);
 var $47=HEAP8[($46)];
 var $48=(($info+53)|0);
 var $49=HEAP8[($48)];
 var $50=(($this+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($this+16+($51<<3))|0);
 HEAP8[($46)]=0;
 HEAP8[($48)]=0;
 var $53=(($this+20)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$54>>8;
 var $56=$54&1;
 var $57=($56|0)==0;
 if($57){var $offset_to_base_0_i1=$55;label=14;break;}else{label=13;break;}
 case 13: 
 var $59=$current_ptr;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+$55)|0);
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $offset_to_base_0_i1=$63;label=14;break;
 case 14: 
 var $offset_to_base_0_i1;
 var $64=(($this+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+20)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($current_ptr+$offset_to_base_0_i1)|0);
 var $71=$54&2;
 var $72=($71|0)!=0;
 var $73=($72?$path_below:2);
 FUNCTION_TABLE[$69]($65,$info,$dst_ptr,$70,$73,$use_strcmp);
 var $74=($51|0)>1;
 if($74){label=15;break;}else{label=25;break;}
 case 15: 
 var $75=(($this+24)|0);
 var $76=(($info+24)|0);
 var $77=(($this+8)|0);
 var $78=(($info+54)|0);
 var $79=$current_ptr;
 var $p_0=$75;label=16;break;
 case 16: 
 var $p_0;
 var $81=HEAP8[($78)];
 var $82=(($81<<24)>>24)==0;
 if($82){label=17;break;}else{label=25;break;}
 case 17: 
 var $84=HEAP8[($46)];
 var $85=(($84<<24)>>24)==0;
 if($85){label=20;break;}else{label=18;break;}
 case 18: 
 var $87=HEAP32[(($76)>>2)];
 var $88=($87|0)==1;
 if($88){label=25;break;}else{label=19;break;}
 case 19: 
 var $90=HEAP32[(($77)>>2)];
 var $91=$90&2;
 var $92=($91|0)==0;
 if($92){label=25;break;}else{label=22;break;}
 case 20: 
 var $94=HEAP8[($48)];
 var $95=(($94<<24)>>24)==0;
 if($95){label=22;break;}else{label=21;break;}
 case 21: 
 var $97=HEAP32[(($77)>>2)];
 var $98=$97&1;
 var $99=($98|0)==0;
 if($99){label=25;break;}else{label=22;break;}
 case 22: 
 HEAP8[($46)]=0;
 HEAP8[($48)]=0;
 var $101=(($p_0+4)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=$102>>8;
 var $104=$102&1;
 var $105=($104|0)==0;
 if($105){var $offset_to_base_0_i=$103;label=24;break;}else{label=23;break;}
 case 23: 
 var $107=HEAP32[(($79)>>2)];
 var $108=(($107+$103)|0);
 var $109=$108;
 var $110=HEAP32[(($109)>>2)];
 var $offset_to_base_0_i=$110;label=24;break;
 case 24: 
 var $offset_to_base_0_i;
 var $111=(($p_0)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$112;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+20)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($current_ptr+$offset_to_base_0_i)|0);
 var $118=$102&2;
 var $119=($118|0)!=0;
 var $120=($119?$path_below:2);
 FUNCTION_TABLE[$116]($112,$info,$dst_ptr,$117,$120,$use_strcmp);
 var $121=(($p_0+8)|0);
 var $122=($121>>>0)<($52>>>0);
 if($122){var $p_0=$121;label=16;break;}else{label=25;break;}
 case 25: 
 HEAP8[($46)]=$47;
 HEAP8[($48)]=$49;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=13;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=13;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=13;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond1_i=$36&$37;
 if($or_cond1_i){label=10;break;}else{label=13;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=13;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=13;break;
 case 12: 
 var $46=(($this+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+20)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($47,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=12;break;}
 case 2: 
 var $5=(($info+53)|0);
 HEAP8[($5)]=1;
 var $6=(($info+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==($current_ptr|0);
 if($8){label=3;break;}else{label=12;break;}
 case 3: 
 var $10=(($info+52)|0);
 HEAP8[($10)]=1;
 var $11=(($info+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$dst_ptr;
 var $15=(($info+24)|0);
 HEAP32[(($15)>>2)]=$path_below;
 var $16=(($info+36)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=(($info+48)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==1;
 var $20=($path_below|0)==1;
 var $or_cond_i=$19&$20;
 if($or_cond_i){label=5;break;}else{label=12;break;}
 case 5: 
 var $22=(($info+54)|0);
 HEAP8[($22)]=1;
 label=12;break;
 case 6: 
 var $24=($12|0)==($dst_ptr|0);
 if($24){label=7;break;}else{label=11;break;}
 case 7: 
 var $26=(($info+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==2;
 if($28){label=8;break;}else{var $31=$27;label=9;break;}
 case 8: 
 HEAP32[(($26)>>2)]=$path_below;
 var $31=$path_below;label=9;break;
 case 9: 
 var $31;
 var $32=(($info+48)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==1;
 var $35=($31|0)==1;
 var $or_cond1_i=$34&$35;
 if($or_cond1_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $37=(($info+54)|0);
 HEAP8[($37)]=1;
 label=12;break;
 case 11: 
 var $39=(($info+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((11840)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((11880+($18<<2))|0);
 var $20=$19;
 var $_sum11=((($18)+(2))|0);
 var $21=((11880+($_sum11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((11840)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((11856)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum1314=$40|4;
 var $44=(($43+$_sum1314)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=344;break;
 case 12: 
 var $50=HEAP32[((11848)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=161;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((11880+($83<<2))|0);
 var $85=$84;
 var $_sum4=((($83)+(2))|0);
 var $86=((11880+($_sum4<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((11840)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((11856)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum67=$8|4;
 var $113=(($109+$_sum67)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((11848)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((11860)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((11880+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((11840)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((11840)>>2)]=$130;
 var $_sum9_pre=((($122)+(2))|0);
 var $_pre=((11880+($_sum9_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum10=((($122)+(2))|0);
 var $132=((11880+($_sum10<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((11856)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((11848)>>2)]=$106;
 HEAP32[((11860)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=344;break;
 case 27: 
 var $145=HEAP32[((11844)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=161;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((12144+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((11856)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((12144+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=1<<$243;
 var $249=$248^-1;
 var $250=HEAP32[((11844)>>2)];
 var $251=$250&$249;
 HEAP32[((11844)>>2)]=$251;
 label=67;break;
 case 51: 
 var $253=$201;
 var $254=HEAP32[((11856)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=55;break;}else{label=52;break;}
 case 52: 
 var $257=(($201+16)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($v_0_i|0);
 if($259){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($257)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $262=(($201+20)|0);
 HEAP32[(($262)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $265=($R_1_i|0)==0;
 if($265){label=67;break;}else{label=57;break;}
 case 57: 
 var $267=$R_1_i;
 var $268=HEAP32[((11856)>>2)];
 var $269=($267>>>0)<($268>>>0);
 if($269){label=66;break;}else{label=58;break;}
 case 58: 
 var $271=(($R_1_i+24)|0);
 HEAP32[(($271)>>2)]=$201;
 var $272=(($v_0_i+16)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($273|0)==0;
 if($274){label=62;break;}else{label=59;break;}
 case 59: 
 var $276=$273;
 var $277=HEAP32[((11856)>>2)];
 var $278=($276>>>0)<($277>>>0);
 if($278){label=61;break;}else{label=60;break;}
 case 60: 
 var $280=(($R_1_i+16)|0);
 HEAP32[(($280)>>2)]=$273;
 var $281=(($273+24)|0);
 HEAP32[(($281)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $284=(($v_0_i+20)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($285|0)==0;
 if($286){label=67;break;}else{label=63;break;}
 case 63: 
 var $288=$285;
 var $289=HEAP32[((11856)>>2)];
 var $290=($288>>>0)<($289>>>0);
 if($290){label=65;break;}else{label=64;break;}
 case 64: 
 var $292=(($R_1_i+20)|0);
 HEAP32[(($292)>>2)]=$285;
 var $293=(($285+24)|0);
 HEAP32[(($293)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $297=($rsize_0_i>>>0)<16;
 if($297){label=68;break;}else{label=69;break;}
 case 68: 
 var $299=((($rsize_0_i)+($8))|0);
 var $300=$299|3;
 var $301=(($v_0_i+4)|0);
 HEAP32[(($301)>>2)]=$300;
 var $_sum4_i=((($299)+(4))|0);
 var $302=(($192+$_sum4_i)|0);
 var $303=$302;
 var $304=HEAP32[(($303)>>2)];
 var $305=$304|1;
 HEAP32[(($303)>>2)]=$305;
 label=77;break;
 case 69: 
 var $307=$8|3;
 var $308=(($v_0_i+4)|0);
 HEAP32[(($308)>>2)]=$307;
 var $309=$rsize_0_i|1;
 var $_sum_i37=$8|4;
 var $310=(($192+$_sum_i37)|0);
 var $311=$310;
 HEAP32[(($311)>>2)]=$309;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $312=(($192+$_sum1_i)|0);
 var $313=$312;
 HEAP32[(($313)>>2)]=$rsize_0_i;
 var $314=HEAP32[((11848)>>2)];
 var $315=($314|0)==0;
 if($315){label=75;break;}else{label=70;break;}
 case 70: 
 var $317=HEAP32[((11860)>>2)];
 var $318=$314>>>3;
 var $319=$318<<1;
 var $320=((11880+($319<<2))|0);
 var $321=$320;
 var $322=HEAP32[((11840)>>2)];
 var $323=1<<$318;
 var $324=$322&$323;
 var $325=($324|0)==0;
 if($325){label=71;break;}else{label=72;break;}
 case 71: 
 var $327=$322|$323;
 HEAP32[((11840)>>2)]=$327;
 var $_sum2_pre_i=((($319)+(2))|0);
 var $_pre_i=((11880+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$321;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($319)+(2))|0);
 var $329=((11880+($_sum3_i<<2))|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=$330;
 var $332=HEAP32[((11856)>>2)];
 var $333=($331>>>0)<($332>>>0);
 if($333){label=73;break;}else{var $F1_0_i=$330;var $_pre_phi_i=$329;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$317;
 var $336=(($F1_0_i+12)|0);
 HEAP32[(($336)>>2)]=$317;
 var $337=(($317+8)|0);
 HEAP32[(($337)>>2)]=$F1_0_i;
 var $338=(($317+12)|0);
 HEAP32[(($338)>>2)]=$321;
 label=75;break;
 case 75: 
 HEAP32[((11848)>>2)]=$rsize_0_i;
 HEAP32[((11860)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $341=(($v_0_i+8)|0);
 var $342=$341;
 var $mem_0=$342;label=344;break;
 case 78: 
 var $344=($bytes>>>0)>4294967231;
 if($344){var $nb_0=-1;label=161;break;}else{label=79;break;}
 case 79: 
 var $346=((($bytes)+(11))|0);
 var $347=$346&-8;
 var $348=HEAP32[((11844)>>2)];
 var $349=($348|0)==0;
 if($349){var $nb_0=$347;label=161;break;}else{label=80;break;}
 case 80: 
 var $351=(((-$347))|0);
 var $352=$346>>>8;
 var $353=($352|0)==0;
 if($353){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $355=($347>>>0)>16777215;
 if($355){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $357=((($352)+(1048320))|0);
 var $358=$357>>>16;
 var $359=$358&8;
 var $360=$352<<$359;
 var $361=((($360)+(520192))|0);
 var $362=$361>>>16;
 var $363=$362&4;
 var $364=$363|$359;
 var $365=$360<<$363;
 var $366=((($365)+(245760))|0);
 var $367=$366>>>16;
 var $368=$367&2;
 var $369=$364|$368;
 var $370=(((14)-($369))|0);
 var $371=$365<<$368;
 var $372=$371>>>15;
 var $373=((($370)+($372))|0);
 var $374=$373<<1;
 var $375=((($373)+(7))|0);
 var $376=$347>>>($375>>>0);
 var $377=$376&1;
 var $378=$377|$374;
 var $idx_0_i=$378;label=83;break;
 case 83: 
 var $idx_0_i;
 var $380=((12144+($idx_0_i<<2))|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=($381|0)==0;
 if($382){var $v_2_i=0;var $rsize_2_i=$351;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $384=($idx_0_i|0)==31;
 if($384){var $389=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $386=$idx_0_i>>>1;
 var $387=(((25)-($386))|0);
 var $389=$387;label=86;break;
 case 86: 
 var $389;
 var $390=$347<<$389;
 var $v_0_i18=0;var $rsize_0_i17=$351;var $t_0_i16=$381;var $sizebits_0_i=$390;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i16;
 var $rsize_0_i17;
 var $v_0_i18;
 var $392=(($t_0_i16+4)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=$393&-8;
 var $395=((($394)-($347))|0);
 var $396=($395>>>0)<($rsize_0_i17>>>0);
 if($396){label=88;break;}else{var $v_1_i=$v_0_i18;var $rsize_1_i=$rsize_0_i17;label=89;break;}
 case 88: 
 var $398=($394|0)==($347|0);
 if($398){var $v_2_i=$t_0_i16;var $rsize_2_i=$395;var $t_1_i=$t_0_i16;label=90;break;}else{var $v_1_i=$t_0_i16;var $rsize_1_i=$395;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $400=(($t_0_i16+20)|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=$sizebits_0_i>>>31;
 var $403=(($t_0_i16+16+($402<<2))|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=($401|0)==0;
 var $406=($401|0)==($404|0);
 var $or_cond_i=$405|$406;
 var $rst_1_i=($or_cond_i?$rst_0_i:$401);
 var $407=($404|0)==0;
 var $408=$sizebits_0_i<<1;
 if($407){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i18=$v_1_i;var $rsize_0_i17=$rsize_1_i;var $t_0_i16=$404;var $sizebits_0_i=$408;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $409=($t_1_i|0)==0;
 var $410=($v_2_i|0)==0;
 var $or_cond21_i=$409&$410;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $412=2<<$idx_0_i;
 var $413=(((-$412))|0);
 var $414=$412|$413;
 var $415=$348&$414;
 var $416=($415|0)==0;
 if($416){var $nb_0=$347;label=161;break;}else{label=92;break;}
 case 92: 
 var $418=(((-$415))|0);
 var $419=$415&$418;
 var $420=((($419)-(1))|0);
 var $421=$420>>>12;
 var $422=$421&16;
 var $423=$420>>>($422>>>0);
 var $424=$423>>>5;
 var $425=$424&8;
 var $426=$425|$422;
 var $427=$423>>>($425>>>0);
 var $428=$427>>>2;
 var $429=$428&4;
 var $430=$426|$429;
 var $431=$427>>>($429>>>0);
 var $432=$431>>>1;
 var $433=$432&2;
 var $434=$430|$433;
 var $435=$431>>>($433>>>0);
 var $436=$435>>>1;
 var $437=$436&1;
 var $438=$434|$437;
 var $439=$435>>>($437>>>0);
 var $440=((($438)+($439))|0);
 var $441=((12144+($440<<2))|0);
 var $442=HEAP32[(($441)>>2)];
 var $t_2_ph_i=$442;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $443=($t_2_ph_i|0)==0;
 if($443){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_230_i=$t_2_ph_i;var $rsize_331_i=$rsize_2_i;var $v_332_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_332_i;
 var $rsize_331_i;
 var $t_230_i;
 var $444=(($t_230_i+4)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=$445&-8;
 var $447=((($446)-($347))|0);
 var $448=($447>>>0)<($rsize_331_i>>>0);
 var $_rsize_3_i=($448?$447:$rsize_331_i);
 var $t_2_v_3_i=($448?$t_230_i:$v_332_i);
 var $449=(($t_230_i+16)|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=($450|0)==0;
 if($451){label=95;break;}else{var $t_230_i=$450;var $rsize_331_i=$_rsize_3_i;var $v_332_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $452=(($t_230_i+20)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=($453|0)==0;
 if($454){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_230_i=$453;var $rsize_331_i=$_rsize_3_i;var $v_332_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $455=($v_3_lcssa_i|0)==0;
 if($455){var $nb_0=$347;label=161;break;}else{label=97;break;}
 case 97: 
 var $457=HEAP32[((11848)>>2)];
 var $458=((($457)-($347))|0);
 var $459=($rsize_3_lcssa_i>>>0)<($458>>>0);
 if($459){label=98;break;}else{var $nb_0=$347;label=161;break;}
 case 98: 
 var $461=$v_3_lcssa_i;
 var $462=HEAP32[((11856)>>2)];
 var $463=($461>>>0)<($462>>>0);
 if($463){label=159;break;}else{label=99;break;}
 case 99: 
 var $465=(($461+$347)|0);
 var $466=$465;
 var $467=($461>>>0)<($465>>>0);
 if($467){label=100;break;}else{label=159;break;}
 case 100: 
 var $469=(($v_3_lcssa_i+24)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=(($v_3_lcssa_i+12)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=($472|0)==($v_3_lcssa_i|0);
 if($473){label=106;break;}else{label=101;break;}
 case 101: 
 var $475=(($v_3_lcssa_i+8)|0);
 var $476=HEAP32[(($475)>>2)];
 var $477=$476;
 var $478=($477>>>0)<($462>>>0);
 if($478){label=105;break;}else{label=102;break;}
 case 102: 
 var $480=(($476+12)|0);
 var $481=HEAP32[(($480)>>2)];
 var $482=($481|0)==($v_3_lcssa_i|0);
 if($482){label=103;break;}else{label=105;break;}
 case 103: 
 var $484=(($472+8)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=($485|0)==($v_3_lcssa_i|0);
 if($486){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($480)>>2)]=$472;
 HEAP32[(($484)>>2)]=$476;
 var $R_1_i22=$472;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $489=(($v_3_lcssa_i+20)|0);
 var $490=HEAP32[(($489)>>2)];
 var $491=($490|0)==0;
 if($491){label=107;break;}else{var $R_0_i20=$490;var $RP_0_i19=$489;label=108;break;}
 case 107: 
 var $493=(($v_3_lcssa_i+16)|0);
 var $494=HEAP32[(($493)>>2)];
 var $495=($494|0)==0;
 if($495){var $R_1_i22=0;label=113;break;}else{var $R_0_i20=$494;var $RP_0_i19=$493;label=108;break;}
 case 108: 
 var $RP_0_i19;
 var $R_0_i20;
 var $496=(($R_0_i20+20)|0);
 var $497=HEAP32[(($496)>>2)];
 var $498=($497|0)==0;
 if($498){label=109;break;}else{var $R_0_i20=$497;var $RP_0_i19=$496;label=108;break;}
 case 109: 
 var $500=(($R_0_i20+16)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=($501|0)==0;
 if($502){label=110;break;}else{var $R_0_i20=$501;var $RP_0_i19=$500;label=108;break;}
 case 110: 
 var $504=$RP_0_i19;
 var $505=($504>>>0)<($462>>>0);
 if($505){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i19)>>2)]=0;
 var $R_1_i22=$R_0_i20;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i22;
 var $509=($470|0)==0;
 if($509){label=133;break;}else{label=114;break;}
 case 114: 
 var $511=(($v_3_lcssa_i+28)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=((12144+($512<<2))|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=($v_3_lcssa_i|0)==($514|0);
 if($515){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($513)>>2)]=$R_1_i22;
 var $cond_i23=($R_1_i22|0)==0;
 if($cond_i23){label=116;break;}else{label=123;break;}
 case 116: 
 var $517=1<<$512;
 var $518=$517^-1;
 var $519=HEAP32[((11844)>>2)];
 var $520=$519&$518;
 HEAP32[((11844)>>2)]=$520;
 label=133;break;
 case 117: 
 var $522=$470;
 var $523=HEAP32[((11856)>>2)];
 var $524=($522>>>0)<($523>>>0);
 if($524){label=121;break;}else{label=118;break;}
 case 118: 
 var $526=(($470+16)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=($527|0)==($v_3_lcssa_i|0);
 if($528){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($526)>>2)]=$R_1_i22;
 label=122;break;
 case 120: 
 var $531=(($470+20)|0);
 HEAP32[(($531)>>2)]=$R_1_i22;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $534=($R_1_i22|0)==0;
 if($534){label=133;break;}else{label=123;break;}
 case 123: 
 var $536=$R_1_i22;
 var $537=HEAP32[((11856)>>2)];
 var $538=($536>>>0)<($537>>>0);
 if($538){label=132;break;}else{label=124;break;}
 case 124: 
 var $540=(($R_1_i22+24)|0);
 HEAP32[(($540)>>2)]=$470;
 var $541=(($v_3_lcssa_i+16)|0);
 var $542=HEAP32[(($541)>>2)];
 var $543=($542|0)==0;
 if($543){label=128;break;}else{label=125;break;}
 case 125: 
 var $545=$542;
 var $546=HEAP32[((11856)>>2)];
 var $547=($545>>>0)<($546>>>0);
 if($547){label=127;break;}else{label=126;break;}
 case 126: 
 var $549=(($R_1_i22+16)|0);
 HEAP32[(($549)>>2)]=$542;
 var $550=(($542+24)|0);
 HEAP32[(($550)>>2)]=$R_1_i22;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $553=(($v_3_lcssa_i+20)|0);
 var $554=HEAP32[(($553)>>2)];
 var $555=($554|0)==0;
 if($555){label=133;break;}else{label=129;break;}
 case 129: 
 var $557=$554;
 var $558=HEAP32[((11856)>>2)];
 var $559=($557>>>0)<($558>>>0);
 if($559){label=131;break;}else{label=130;break;}
 case 130: 
 var $561=(($R_1_i22+20)|0);
 HEAP32[(($561)>>2)]=$554;
 var $562=(($554+24)|0);
 HEAP32[(($562)>>2)]=$R_1_i22;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $566=($rsize_3_lcssa_i>>>0)<16;
 if($566){label=134;break;}else{label=135;break;}
 case 134: 
 var $568=((($rsize_3_lcssa_i)+($347))|0);
 var $569=$568|3;
 var $570=(($v_3_lcssa_i+4)|0);
 HEAP32[(($570)>>2)]=$569;
 var $_sum19_i=((($568)+(4))|0);
 var $571=(($461+$_sum19_i)|0);
 var $572=$571;
 var $573=HEAP32[(($572)>>2)];
 var $574=$573|1;
 HEAP32[(($572)>>2)]=$574;
 label=160;break;
 case 135: 
 var $576=$347|3;
 var $577=(($v_3_lcssa_i+4)|0);
 HEAP32[(($577)>>2)]=$576;
 var $578=$rsize_3_lcssa_i|1;
 var $_sum_i2536=$347|4;
 var $579=(($461+$_sum_i2536)|0);
 var $580=$579;
 HEAP32[(($580)>>2)]=$578;
 var $_sum1_i26=((($rsize_3_lcssa_i)+($347))|0);
 var $581=(($461+$_sum1_i26)|0);
 var $582=$581;
 HEAP32[(($582)>>2)]=$rsize_3_lcssa_i;
 var $583=$rsize_3_lcssa_i>>>3;
 var $584=($rsize_3_lcssa_i>>>0)<256;
 if($584){label=136;break;}else{label=141;break;}
 case 136: 
 var $586=$583<<1;
 var $587=((11880+($586<<2))|0);
 var $588=$587;
 var $589=HEAP32[((11840)>>2)];
 var $590=1<<$583;
 var $591=$589&$590;
 var $592=($591|0)==0;
 if($592){label=137;break;}else{label=138;break;}
 case 137: 
 var $594=$589|$590;
 HEAP32[((11840)>>2)]=$594;
 var $_sum15_pre_i=((($586)+(2))|0);
 var $_pre_i27=((11880+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$588;var $_pre_phi_i28=$_pre_i27;label=140;break;
 case 138: 
 var $_sum18_i=((($586)+(2))|0);
 var $596=((11880+($_sum18_i<<2))|0);
 var $597=HEAP32[(($596)>>2)];
 var $598=$597;
 var $599=HEAP32[((11856)>>2)];
 var $600=($598>>>0)<($599>>>0);
 if($600){label=139;break;}else{var $F5_0_i=$597;var $_pre_phi_i28=$596;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i28;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i28)>>2)]=$466;
 var $603=(($F5_0_i+12)|0);
 HEAP32[(($603)>>2)]=$466;
 var $_sum16_i=((($347)+(8))|0);
 var $604=(($461+$_sum16_i)|0);
 var $605=$604;
 HEAP32[(($605)>>2)]=$F5_0_i;
 var $_sum17_i=((($347)+(12))|0);
 var $606=(($461+$_sum17_i)|0);
 var $607=$606;
 HEAP32[(($607)>>2)]=$588;
 label=160;break;
 case 141: 
 var $609=$465;
 var $610=$rsize_3_lcssa_i>>>8;
 var $611=($610|0)==0;
 if($611){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $613=($rsize_3_lcssa_i>>>0)>16777215;
 if($613){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $615=((($610)+(1048320))|0);
 var $616=$615>>>16;
 var $617=$616&8;
 var $618=$610<<$617;
 var $619=((($618)+(520192))|0);
 var $620=$619>>>16;
 var $621=$620&4;
 var $622=$621|$617;
 var $623=$618<<$621;
 var $624=((($623)+(245760))|0);
 var $625=$624>>>16;
 var $626=$625&2;
 var $627=$622|$626;
 var $628=(((14)-($627))|0);
 var $629=$623<<$626;
 var $630=$629>>>15;
 var $631=((($628)+($630))|0);
 var $632=$631<<1;
 var $633=((($631)+(7))|0);
 var $634=$rsize_3_lcssa_i>>>($633>>>0);
 var $635=$634&1;
 var $636=$635|$632;
 var $I7_0_i=$636;label=144;break;
 case 144: 
 var $I7_0_i;
 var $638=((12144+($I7_0_i<<2))|0);
 var $_sum2_i=((($347)+(28))|0);
 var $639=(($461+$_sum2_i)|0);
 var $640=$639;
 HEAP32[(($640)>>2)]=$I7_0_i;
 var $_sum3_i29=((($347)+(16))|0);
 var $641=(($461+$_sum3_i29)|0);
 var $_sum4_i30=((($347)+(20))|0);
 var $642=(($461+$_sum4_i30)|0);
 var $643=$642;
 HEAP32[(($643)>>2)]=0;
 var $644=$641;
 HEAP32[(($644)>>2)]=0;
 var $645=HEAP32[((11844)>>2)];
 var $646=1<<$I7_0_i;
 var $647=$645&$646;
 var $648=($647|0)==0;
 if($648){label=145;break;}else{label=146;break;}
 case 145: 
 var $650=$645|$646;
 HEAP32[((11844)>>2)]=$650;
 HEAP32[(($638)>>2)]=$609;
 var $651=$638;
 var $_sum5_i=((($347)+(24))|0);
 var $652=(($461+$_sum5_i)|0);
 var $653=$652;
 HEAP32[(($653)>>2)]=$651;
 var $_sum6_i=((($347)+(12))|0);
 var $654=(($461+$_sum6_i)|0);
 var $655=$654;
 HEAP32[(($655)>>2)]=$609;
 var $_sum7_i=((($347)+(8))|0);
 var $656=(($461+$_sum7_i)|0);
 var $657=$656;
 HEAP32[(($657)>>2)]=$609;
 label=160;break;
 case 146: 
 var $659=HEAP32[(($638)>>2)];
 var $660=($I7_0_i|0)==31;
 if($660){var $665=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $662=$I7_0_i>>>1;
 var $663=(((25)-($662))|0);
 var $665=$663;label=148;break;
 case 148: 
 var $665;
 var $666=(($659+4)|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=$667&-8;
 var $669=($668|0)==($rsize_3_lcssa_i|0);
 if($669){var $T_0_lcssa_i=$659;label=155;break;}else{label=149;break;}
 case 149: 
 var $670=$rsize_3_lcssa_i<<$665;
 var $T_026_i=$659;var $K12_027_i=$670;label=151;break;
 case 150: 
 var $672=$K12_027_i<<1;
 var $673=(($680+4)|0);
 var $674=HEAP32[(($673)>>2)];
 var $675=$674&-8;
 var $676=($675|0)==($rsize_3_lcssa_i|0);
 if($676){var $T_0_lcssa_i=$680;label=155;break;}else{var $T_026_i=$680;var $K12_027_i=$672;label=151;break;}
 case 151: 
 var $K12_027_i;
 var $T_026_i;
 var $678=$K12_027_i>>>31;
 var $679=(($T_026_i+16+($678<<2))|0);
 var $680=HEAP32[(($679)>>2)];
 var $681=($680|0)==0;
 if($681){label=152;break;}else{label=150;break;}
 case 152: 
 var $683=$679;
 var $684=HEAP32[((11856)>>2)];
 var $685=($683>>>0)<($684>>>0);
 if($685){label=154;break;}else{label=153;break;}
 case 153: 
 HEAP32[(($679)>>2)]=$609;
 var $_sum12_i=((($347)+(24))|0);
 var $687=(($461+$_sum12_i)|0);
 var $688=$687;
 HEAP32[(($688)>>2)]=$T_026_i;
 var $_sum13_i=((($347)+(12))|0);
 var $689=(($461+$_sum13_i)|0);
 var $690=$689;
 HEAP32[(($690)>>2)]=$609;
 var $_sum14_i=((($347)+(8))|0);
 var $691=(($461+$_sum14_i)|0);
 var $692=$691;
 HEAP32[(($692)>>2)]=$609;
 label=160;break;
 case 154: 
 _abort();
 throw "Reached an unreachable!";
 case 155: 
 var $T_0_lcssa_i;
 var $694=(($T_0_lcssa_i+8)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=$T_0_lcssa_i;
 var $697=HEAP32[((11856)>>2)];
 var $698=($696>>>0)<($697>>>0);
 if($698){label=158;break;}else{label=156;break;}
 case 156: 
 var $700=$695;
 var $701=($700>>>0)<($697>>>0);
 if($701){label=158;break;}else{label=157;break;}
 case 157: 
 var $703=(($695+12)|0);
 HEAP32[(($703)>>2)]=$609;
 HEAP32[(($694)>>2)]=$609;
 var $_sum9_i=((($347)+(8))|0);
 var $704=(($461+$_sum9_i)|0);
 var $705=$704;
 HEAP32[(($705)>>2)]=$695;
 var $_sum10_i=((($347)+(12))|0);
 var $706=(($461+$_sum10_i)|0);
 var $707=$706;
 HEAP32[(($707)>>2)]=$T_0_lcssa_i;
 var $_sum11_i=((($347)+(24))|0);
 var $708=(($461+$_sum11_i)|0);
 var $709=$708;
 HEAP32[(($709)>>2)]=0;
 label=160;break;
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 _abort();
 throw "Reached an unreachable!";
 case 160: 
 var $711=(($v_3_lcssa_i+8)|0);
 var $712=$711;
 var $mem_0=$712;label=344;break;
 case 161: 
 var $nb_0;
 var $713=HEAP32[((11848)>>2)];
 var $714=($nb_0>>>0)>($713>>>0);
 if($714){label=166;break;}else{label=162;break;}
 case 162: 
 var $716=((($713)-($nb_0))|0);
 var $717=HEAP32[((11860)>>2)];
 var $718=($716>>>0)>15;
 if($718){label=163;break;}else{label=164;break;}
 case 163: 
 var $720=$717;
 var $721=(($720+$nb_0)|0);
 var $722=$721;
 HEAP32[((11860)>>2)]=$722;
 HEAP32[((11848)>>2)]=$716;
 var $723=$716|1;
 var $_sum2=((($nb_0)+(4))|0);
 var $724=(($720+$_sum2)|0);
 var $725=$724;
 HEAP32[(($725)>>2)]=$723;
 var $726=(($720+$713)|0);
 var $727=$726;
 HEAP32[(($727)>>2)]=$716;
 var $728=$nb_0|3;
 var $729=(($717+4)|0);
 HEAP32[(($729)>>2)]=$728;
 label=165;break;
 case 164: 
 HEAP32[((11848)>>2)]=0;
 HEAP32[((11860)>>2)]=0;
 var $731=$713|3;
 var $732=(($717+4)|0);
 HEAP32[(($732)>>2)]=$731;
 var $733=$717;
 var $_sum1=((($713)+(4))|0);
 var $734=(($733+$_sum1)|0);
 var $735=$734;
 var $736=HEAP32[(($735)>>2)];
 var $737=$736|1;
 HEAP32[(($735)>>2)]=$737;
 label=165;break;
 case 165: 
 var $739=(($717+8)|0);
 var $740=$739;
 var $mem_0=$740;label=344;break;
 case 166: 
 var $742=HEAP32[((11852)>>2)];
 var $743=($nb_0>>>0)<($742>>>0);
 if($743){label=167;break;}else{label=168;break;}
 case 167: 
 var $745=((($742)-($nb_0))|0);
 HEAP32[((11852)>>2)]=$745;
 var $746=HEAP32[((11864)>>2)];
 var $747=$746;
 var $748=(($747+$nb_0)|0);
 var $749=$748;
 HEAP32[((11864)>>2)]=$749;
 var $750=$745|1;
 var $_sum=((($nb_0)+(4))|0);
 var $751=(($747+$_sum)|0);
 var $752=$751;
 HEAP32[(($752)>>2)]=$750;
 var $753=$nb_0|3;
 var $754=(($746+4)|0);
 HEAP32[(($754)>>2)]=$753;
 var $755=(($746+8)|0);
 var $756=$755;
 var $mem_0=$756;label=344;break;
 case 168: 
 var $758=HEAP32[((11800)>>2)];
 var $759=($758|0)==0;
 if($759){label=169;break;}else{label=172;break;}
 case 169: 
 var $761=_sysconf(30);
 var $762=((($761)-(1))|0);
 var $763=$762&$761;
 var $764=($763|0)==0;
 if($764){label=171;break;}else{label=170;break;}
 case 170: 
 _abort();
 throw "Reached an unreachable!";
 case 171: 
 HEAP32[((11808)>>2)]=$761;
 HEAP32[((11804)>>2)]=$761;
 HEAP32[((11812)>>2)]=-1;
 HEAP32[((11816)>>2)]=-1;
 HEAP32[((11820)>>2)]=0;
 HEAP32[((12284)>>2)]=0;
 var $766=_time(0);
 var $767=$766&-16;
 var $768=$767^1431655768;
 HEAP32[((11800)>>2)]=$768;
 label=172;break;
 case 172: 
 var $770=((($nb_0)+(48))|0);
 var $771=HEAP32[((11808)>>2)];
 var $772=((($nb_0)+(47))|0);
 var $773=((($771)+($772))|0);
 var $774=(((-$771))|0);
 var $775=$773&$774;
 var $776=($775>>>0)>($nb_0>>>0);
 if($776){label=173;break;}else{var $mem_0=0;label=344;break;}
 case 173: 
 var $778=HEAP32[((12280)>>2)];
 var $779=($778|0)==0;
 if($779){label=175;break;}else{label=174;break;}
 case 174: 
 var $781=HEAP32[((12272)>>2)];
 var $782=((($781)+($775))|0);
 var $783=($782>>>0)<=($781>>>0);
 var $784=($782>>>0)>($778>>>0);
 var $or_cond1_i=$783|$784;
 if($or_cond1_i){var $mem_0=0;label=344;break;}else{label=175;break;}
 case 175: 
 var $786=HEAP32[((12284)>>2)];
 var $787=$786&4;
 var $788=($787|0)==0;
 if($788){label=176;break;}else{var $tsize_1_i=0;label=199;break;}
 case 176: 
 var $790=HEAP32[((11864)>>2)];
 var $791=($790|0)==0;
 if($791){label=182;break;}else{label=177;break;}
 case 177: 
 var $793=$790;
 var $sp_0_i_i=12288;label=178;break;
 case 178: 
 var $sp_0_i_i;
 var $795=(($sp_0_i_i)|0);
 var $796=HEAP32[(($795)>>2)];
 var $797=($796>>>0)>($793>>>0);
 if($797){label=180;break;}else{label=179;break;}
 case 179: 
 var $799=(($sp_0_i_i+4)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=(($796+$800)|0);
 var $802=($801>>>0)>($793>>>0);
 if($802){label=181;break;}else{label=180;break;}
 case 180: 
 var $804=(($sp_0_i_i+8)|0);
 var $805=HEAP32[(($804)>>2)];
 var $806=($805|0)==0;
 if($806){label=182;break;}else{var $sp_0_i_i=$805;label=178;break;}
 case 181: 
 var $807=($sp_0_i_i|0)==0;
 if($807){label=182;break;}else{label=189;break;}
 case 182: 
 var $808=_sbrk(0);
 var $809=($808|0)==-1;
 if($809){var $tsize_0323841_i=0;label=198;break;}else{label=183;break;}
 case 183: 
 var $811=$808;
 var $812=HEAP32[((11804)>>2)];
 var $813=((($812)-(1))|0);
 var $814=$813&$811;
 var $815=($814|0)==0;
 if($815){var $ssize_0_i=$775;label=185;break;}else{label=184;break;}
 case 184: 
 var $817=((($813)+($811))|0);
 var $818=(((-$812))|0);
 var $819=$817&$818;
 var $820=((($775)-($811))|0);
 var $821=((($820)+($819))|0);
 var $ssize_0_i=$821;label=185;break;
 case 185: 
 var $ssize_0_i;
 var $823=HEAP32[((12272)>>2)];
 var $824=((($823)+($ssize_0_i))|0);
 var $825=($ssize_0_i>>>0)>($nb_0>>>0);
 var $826=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i31=$825&$826;
 if($or_cond_i31){label=186;break;}else{var $tsize_0323841_i=0;label=198;break;}
 case 186: 
 var $828=HEAP32[((12280)>>2)];
 var $829=($828|0)==0;
 if($829){label=188;break;}else{label=187;break;}
 case 187: 
 var $831=($824>>>0)<=($823>>>0);
 var $832=($824>>>0)>($828>>>0);
 var $or_cond2_i=$831|$832;
 if($or_cond2_i){var $tsize_0323841_i=0;label=198;break;}else{label=188;break;}
 case 188: 
 var $834=_sbrk($ssize_0_i);
 var $835=($834|0)==($808|0);
 var $ssize_0__i=($835?$ssize_0_i:0);
 var $__i=($835?$808:-1);
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$834;var $ssize_1_i=$ssize_0_i;label=191;break;
 case 189: 
 var $837=HEAP32[((11852)>>2)];
 var $838=((($773)-($837))|0);
 var $839=$838&$774;
 var $840=($839>>>0)<2147483647;
 if($840){label=190;break;}else{var $tsize_0323841_i=0;label=198;break;}
 case 190: 
 var $842=_sbrk($839);
 var $843=HEAP32[(($795)>>2)];
 var $844=HEAP32[(($799)>>2)];
 var $845=(($843+$844)|0);
 var $846=($842|0)==($845|0);
 var $_3_i=($846?$839:0);
 var $_4_i=($846?$842:-1);
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$842;var $ssize_1_i=$839;label=191;break;
 case 191: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $848=(((-$ssize_1_i))|0);
 var $849=($tbase_0_i|0)==-1;
 if($849){label=192;break;}else{var $tsize_246_i=$tsize_0_i;var $tbase_247_i=$tbase_0_i;label=202;break;}
 case 192: 
 var $851=($br_0_i|0)!=-1;
 var $852=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$851&$852;
 var $853=($ssize_1_i>>>0)<($770>>>0);
 var $or_cond6_i=$or_cond5_i&$853;
 if($or_cond6_i){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=197;break;}
 case 193: 
 var $855=HEAP32[((11808)>>2)];
 var $856=((($772)-($ssize_1_i))|0);
 var $857=((($856)+($855))|0);
 var $858=(((-$855))|0);
 var $859=$857&$858;
 var $860=($859>>>0)<2147483647;
 if($860){label=194;break;}else{var $ssize_2_i=$ssize_1_i;label=197;break;}
 case 194: 
 var $862=_sbrk($859);
 var $863=($862|0)==-1;
 if($863){label=196;break;}else{label=195;break;}
 case 195: 
 var $865=((($859)+($ssize_1_i))|0);
 var $ssize_2_i=$865;label=197;break;
 case 196: 
 var $867=_sbrk($848);
 var $tsize_0323841_i=$tsize_0_i;label=198;break;
 case 197: 
 var $ssize_2_i;
 var $869=($br_0_i|0)==-1;
 if($869){var $tsize_0323841_i=$tsize_0_i;label=198;break;}else{var $tsize_246_i=$ssize_2_i;var $tbase_247_i=$br_0_i;label=202;break;}
 case 198: 
 var $tsize_0323841_i;
 var $870=HEAP32[((12284)>>2)];
 var $871=$870|4;
 HEAP32[((12284)>>2)]=$871;
 var $tsize_1_i=$tsize_0323841_i;label=199;break;
 case 199: 
 var $tsize_1_i;
 var $873=($775>>>0)<2147483647;
 if($873){label=200;break;}else{label=343;break;}
 case 200: 
 var $875=_sbrk($775);
 var $876=_sbrk(0);
 var $notlhs_i=($875|0)!=-1;
 var $notrhs_i=($876|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $877=($875>>>0)<($876>>>0);
 var $or_cond9_i=$or_cond8_not_i&$877;
 if($or_cond9_i){label=201;break;}else{label=343;break;}
 case 201: 
 var $878=$876;
 var $879=$875;
 var $880=((($878)-($879))|0);
 var $881=((($nb_0)+(40))|0);
 var $882=($880>>>0)>($881>>>0);
 var $_tsize_1_i=($882?$880:$tsize_1_i);
 if($882){var $tsize_246_i=$_tsize_1_i;var $tbase_247_i=$875;label=202;break;}else{label=343;break;}
 case 202: 
 var $tbase_247_i;
 var $tsize_246_i;
 var $883=HEAP32[((12272)>>2)];
 var $884=((($883)+($tsize_246_i))|0);
 HEAP32[((12272)>>2)]=$884;
 var $885=HEAP32[((12276)>>2)];
 var $886=($884>>>0)>($885>>>0);
 if($886){label=203;break;}else{label=204;break;}
 case 203: 
 HEAP32[((12276)>>2)]=$884;
 label=204;break;
 case 204: 
 var $888=HEAP32[((11864)>>2)];
 var $889=($888|0)==0;
 if($889){label=205;break;}else{var $sp_075_i=12288;label=212;break;}
 case 205: 
 var $891=HEAP32[((11856)>>2)];
 var $892=($891|0)==0;
 var $893=($tbase_247_i>>>0)<($891>>>0);
 var $or_cond10_i=$892|$893;
 if($or_cond10_i){label=206;break;}else{label=207;break;}
 case 206: 
 HEAP32[((11856)>>2)]=$tbase_247_i;
 label=207;break;
 case 207: 
 HEAP32[((12288)>>2)]=$tbase_247_i;
 HEAP32[((12292)>>2)]=$tsize_246_i;
 HEAP32[((12300)>>2)]=0;
 var $895=HEAP32[((11800)>>2)];
 HEAP32[((11876)>>2)]=$895;
 HEAP32[((11872)>>2)]=-1;
 var $i_02_i_i=0;label=208;break;
 case 208: 
 var $i_02_i_i;
 var $897=$i_02_i_i<<1;
 var $898=((11880+($897<<2))|0);
 var $899=$898;
 var $_sum_i_i=((($897)+(3))|0);
 var $900=((11880+($_sum_i_i<<2))|0);
 HEAP32[(($900)>>2)]=$899;
 var $_sum1_i_i=((($897)+(2))|0);
 var $901=((11880+($_sum1_i_i<<2))|0);
 HEAP32[(($901)>>2)]=$899;
 var $902=((($i_02_i_i)+(1))|0);
 var $903=($902>>>0)<32;
 if($903){var $i_02_i_i=$902;label=208;break;}else{label=209;break;}
 case 209: 
 var $904=((($tsize_246_i)-(40))|0);
 var $905=(($tbase_247_i+8)|0);
 var $906=$905;
 var $907=$906&7;
 var $908=($907|0)==0;
 if($908){var $912=0;label=211;break;}else{label=210;break;}
 case 210: 
 var $910=(((-$906))|0);
 var $911=$910&7;
 var $912=$911;label=211;break;
 case 211: 
 var $912;
 var $913=(($tbase_247_i+$912)|0);
 var $914=$913;
 var $915=((($904)-($912))|0);
 HEAP32[((11864)>>2)]=$914;
 HEAP32[((11852)>>2)]=$915;
 var $916=$915|1;
 var $_sum_i14_i=((($912)+(4))|0);
 var $917=(($tbase_247_i+$_sum_i14_i)|0);
 var $918=$917;
 HEAP32[(($918)>>2)]=$916;
 var $_sum2_i_i=((($tsize_246_i)-(36))|0);
 var $919=(($tbase_247_i+$_sum2_i_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=40;
 var $921=HEAP32[((11816)>>2)];
 HEAP32[((11868)>>2)]=$921;
 label=341;break;
 case 212: 
 var $sp_075_i;
 var $922=(($sp_075_i)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=(($sp_075_i+4)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($923+$925)|0);
 var $927=($tbase_247_i|0)==($926|0);
 if($927){label=214;break;}else{label=213;break;}
 case 213: 
 var $929=(($sp_075_i+8)|0);
 var $930=HEAP32[(($929)>>2)];
 var $931=($930|0)==0;
 if($931){label=219;break;}else{var $sp_075_i=$930;label=212;break;}
 case 214: 
 var $932=(($sp_075_i+12)|0);
 var $933=HEAP32[(($932)>>2)];
 var $934=$933&8;
 var $935=($934|0)==0;
 if($935){label=215;break;}else{label=219;break;}
 case 215: 
 var $937=$888;
 var $938=($937>>>0)>=($923>>>0);
 var $939=($937>>>0)<($tbase_247_i>>>0);
 var $or_cond49_i=$938&$939;
 if($or_cond49_i){label=216;break;}else{label=219;break;}
 case 216: 
 var $941=((($925)+($tsize_246_i))|0);
 HEAP32[(($924)>>2)]=$941;
 var $942=HEAP32[((11852)>>2)];
 var $943=((($942)+($tsize_246_i))|0);
 var $944=(($888+8)|0);
 var $945=$944;
 var $946=$945&7;
 var $947=($946|0)==0;
 if($947){var $951=0;label=218;break;}else{label=217;break;}
 case 217: 
 var $949=(((-$945))|0);
 var $950=$949&7;
 var $951=$950;label=218;break;
 case 218: 
 var $951;
 var $952=(($937+$951)|0);
 var $953=$952;
 var $954=((($943)-($951))|0);
 HEAP32[((11864)>>2)]=$953;
 HEAP32[((11852)>>2)]=$954;
 var $955=$954|1;
 var $_sum_i18_i=((($951)+(4))|0);
 var $956=(($937+$_sum_i18_i)|0);
 var $957=$956;
 HEAP32[(($957)>>2)]=$955;
 var $_sum2_i19_i=((($943)+(4))|0);
 var $958=(($937+$_sum2_i19_i)|0);
 var $959=$958;
 HEAP32[(($959)>>2)]=40;
 var $960=HEAP32[((11816)>>2)];
 HEAP32[((11868)>>2)]=$960;
 label=341;break;
 case 219: 
 var $961=HEAP32[((11856)>>2)];
 var $962=($tbase_247_i>>>0)<($961>>>0);
 if($962){label=220;break;}else{label=221;break;}
 case 220: 
 HEAP32[((11856)>>2)]=$tbase_247_i;
 label=221;break;
 case 221: 
 var $964=(($tbase_247_i+$tsize_246_i)|0);
 var $sp_168_i=12288;label=222;break;
 case 222: 
 var $sp_168_i;
 var $966=(($sp_168_i)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=($967|0)==($964|0);
 if($968){label=224;break;}else{label=223;break;}
 case 223: 
 var $970=(($sp_168_i+8)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=($971|0)==0;
 if($972){label=306;break;}else{var $sp_168_i=$971;label=222;break;}
 case 224: 
 var $973=(($sp_168_i+12)|0);
 var $974=HEAP32[(($973)>>2)];
 var $975=$974&8;
 var $976=($975|0)==0;
 if($976){label=225;break;}else{label=306;break;}
 case 225: 
 HEAP32[(($966)>>2)]=$tbase_247_i;
 var $978=(($sp_168_i+4)|0);
 var $979=HEAP32[(($978)>>2)];
 var $980=((($979)+($tsize_246_i))|0);
 HEAP32[(($978)>>2)]=$980;
 var $981=(($tbase_247_i+8)|0);
 var $982=$981;
 var $983=$982&7;
 var $984=($983|0)==0;
 if($984){var $989=0;label=227;break;}else{label=226;break;}
 case 226: 
 var $986=(((-$982))|0);
 var $987=$986&7;
 var $989=$987;label=227;break;
 case 227: 
 var $989;
 var $990=(($tbase_247_i+$989)|0);
 var $_sum107_i=((($tsize_246_i)+(8))|0);
 var $991=(($tbase_247_i+$_sum107_i)|0);
 var $992=$991;
 var $993=$992&7;
 var $994=($993|0)==0;
 if($994){var $999=0;label=229;break;}else{label=228;break;}
 case 228: 
 var $996=(((-$992))|0);
 var $997=$996&7;
 var $999=$997;label=229;break;
 case 229: 
 var $999;
 var $_sum108_i=((($999)+($tsize_246_i))|0);
 var $1000=(($tbase_247_i+$_sum108_i)|0);
 var $1001=$1000;
 var $1002=$1000;
 var $1003=$990;
 var $1004=((($1002)-($1003))|0);
 var $_sum_i21_i=((($989)+($nb_0))|0);
 var $1005=(($tbase_247_i+$_sum_i21_i)|0);
 var $1006=$1005;
 var $1007=((($1004)-($nb_0))|0);
 var $1008=$nb_0|3;
 var $_sum1_i22_i=((($989)+(4))|0);
 var $1009=(($tbase_247_i+$_sum1_i22_i)|0);
 var $1010=$1009;
 HEAP32[(($1010)>>2)]=$1008;
 var $1011=HEAP32[((11864)>>2)];
 var $1012=($1001|0)==($1011|0);
 if($1012){label=230;break;}else{label=231;break;}
 case 230: 
 var $1014=HEAP32[((11852)>>2)];
 var $1015=((($1014)+($1007))|0);
 HEAP32[((11852)>>2)]=$1015;
 HEAP32[((11864)>>2)]=$1006;
 var $1016=$1015|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1017=(($tbase_247_i+$_sum46_i_i)|0);
 var $1018=$1017;
 HEAP32[(($1018)>>2)]=$1016;
 label=305;break;
 case 231: 
 var $1020=HEAP32[((11860)>>2)];
 var $1021=($1001|0)==($1020|0);
 if($1021){label=232;break;}else{label=233;break;}
 case 232: 
 var $1023=HEAP32[((11848)>>2)];
 var $1024=((($1023)+($1007))|0);
 HEAP32[((11848)>>2)]=$1024;
 HEAP32[((11860)>>2)]=$1006;
 var $1025=$1024|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1026=(($tbase_247_i+$_sum44_i_i)|0);
 var $1027=$1026;
 HEAP32[(($1027)>>2)]=$1025;
 var $_sum45_i_i=((($1024)+($_sum_i21_i))|0);
 var $1028=(($tbase_247_i+$_sum45_i_i)|0);
 var $1029=$1028;
 HEAP32[(($1029)>>2)]=$1024;
 label=305;break;
 case 233: 
 var $_sum2_i23_i=((($tsize_246_i)+(4))|0);
 var $_sum109_i=((($_sum2_i23_i)+($999))|0);
 var $1031=(($tbase_247_i+$_sum109_i)|0);
 var $1032=$1031;
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=$1033&3;
 var $1035=($1034|0)==1;
 if($1035){label=234;break;}else{var $oldfirst_0_i_i=$1001;var $qsize_0_i_i=$1007;label=281;break;}
 case 234: 
 var $1037=$1033&-8;
 var $1038=$1033>>>3;
 var $1039=($1033>>>0)<256;
 if($1039){label=235;break;}else{label=247;break;}
 case 235: 
 var $_sum3940_i_i=$999|8;
 var $_sum119_i=((($_sum3940_i_i)+($tsize_246_i))|0);
 var $1041=(($tbase_247_i+$_sum119_i)|0);
 var $1042=$1041;
 var $1043=HEAP32[(($1042)>>2)];
 var $_sum41_i_i=((($tsize_246_i)+(12))|0);
 var $_sum120_i=((($_sum41_i_i)+($999))|0);
 var $1044=(($tbase_247_i+$_sum120_i)|0);
 var $1045=$1044;
 var $1046=HEAP32[(($1045)>>2)];
 var $1047=$1038<<1;
 var $1048=((11880+($1047<<2))|0);
 var $1049=$1048;
 var $1050=($1043|0)==($1049|0);
 if($1050){label=238;break;}else{label=236;break;}
 case 236: 
 var $1052=$1043;
 var $1053=HEAP32[((11856)>>2)];
 var $1054=($1052>>>0)<($1053>>>0);
 if($1054){label=246;break;}else{label=237;break;}
 case 237: 
 var $1056=(($1043+12)|0);
 var $1057=HEAP32[(($1056)>>2)];
 var $1058=($1057|0)==($1001|0);
 if($1058){label=238;break;}else{label=246;break;}
 case 238: 
 var $1059=($1046|0)==($1043|0);
 if($1059){label=239;break;}else{label=240;break;}
 case 239: 
 var $1061=1<<$1038;
 var $1062=$1061^-1;
 var $1063=HEAP32[((11840)>>2)];
 var $1064=$1063&$1062;
 HEAP32[((11840)>>2)]=$1064;
 label=280;break;
 case 240: 
 var $1066=($1046|0)==($1049|0);
 if($1066){label=241;break;}else{label=242;break;}
 case 241: 
 var $_pre61_i_i=(($1046+8)|0);
 var $_pre_phi62_i_i=$_pre61_i_i;label=244;break;
 case 242: 
 var $1068=$1046;
 var $1069=HEAP32[((11856)>>2)];
 var $1070=($1068>>>0)<($1069>>>0);
 if($1070){label=245;break;}else{label=243;break;}
 case 243: 
 var $1072=(($1046+8)|0);
 var $1073=HEAP32[(($1072)>>2)];
 var $1074=($1073|0)==($1001|0);
 if($1074){var $_pre_phi62_i_i=$1072;label=244;break;}else{label=245;break;}
 case 244: 
 var $_pre_phi62_i_i;
 var $1075=(($1043+12)|0);
 HEAP32[(($1075)>>2)]=$1046;
 HEAP32[(($_pre_phi62_i_i)>>2)]=$1043;
 label=280;break;
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 _abort();
 throw "Reached an unreachable!";
 case 247: 
 var $1077=$1000;
 var $_sum34_i_i=$999|24;
 var $_sum110_i=((($_sum34_i_i)+($tsize_246_i))|0);
 var $1078=(($tbase_247_i+$_sum110_i)|0);
 var $1079=$1078;
 var $1080=HEAP32[(($1079)>>2)];
 var $_sum5_i_i=((($tsize_246_i)+(12))|0);
 var $_sum111_i=((($_sum5_i_i)+($999))|0);
 var $1081=(($tbase_247_i+$_sum111_i)|0);
 var $1082=$1081;
 var $1083=HEAP32[(($1082)>>2)];
 var $1084=($1083|0)==($1077|0);
 if($1084){label=253;break;}else{label=248;break;}
 case 248: 
 var $_sum3637_i_i=$999|8;
 var $_sum112_i=((($_sum3637_i_i)+($tsize_246_i))|0);
 var $1086=(($tbase_247_i+$_sum112_i)|0);
 var $1087=$1086;
 var $1088=HEAP32[(($1087)>>2)];
 var $1089=$1088;
 var $1090=HEAP32[((11856)>>2)];
 var $1091=($1089>>>0)<($1090>>>0);
 if($1091){label=252;break;}else{label=249;break;}
 case 249: 
 var $1093=(($1088+12)|0);
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=($1094|0)==($1077|0);
 if($1095){label=250;break;}else{label=252;break;}
 case 250: 
 var $1097=(($1083+8)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=($1098|0)==($1077|0);
 if($1099){label=251;break;}else{label=252;break;}
 case 251: 
 HEAP32[(($1093)>>2)]=$1083;
 HEAP32[(($1097)>>2)]=$1088;
 var $R_1_i_i=$1083;label=260;break;
 case 252: 
 _abort();
 throw "Reached an unreachable!";
 case 253: 
 var $_sum67_i_i=$999|16;
 var $_sum117_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1102=(($tbase_247_i+$_sum117_i)|0);
 var $1103=$1102;
 var $1104=HEAP32[(($1103)>>2)];
 var $1105=($1104|0)==0;
 if($1105){label=254;break;}else{var $R_0_i_i=$1104;var $RP_0_i_i=$1103;label=255;break;}
 case 254: 
 var $_sum118_i=((($_sum67_i_i)+($tsize_246_i))|0);
 var $1107=(($tbase_247_i+$_sum118_i)|0);
 var $1108=$1107;
 var $1109=HEAP32[(($1108)>>2)];
 var $1110=($1109|0)==0;
 if($1110){var $R_1_i_i=0;label=260;break;}else{var $R_0_i_i=$1109;var $RP_0_i_i=$1108;label=255;break;}
 case 255: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1111=(($R_0_i_i+20)|0);
 var $1112=HEAP32[(($1111)>>2)];
 var $1113=($1112|0)==0;
 if($1113){label=256;break;}else{var $R_0_i_i=$1112;var $RP_0_i_i=$1111;label=255;break;}
 case 256: 
 var $1115=(($R_0_i_i+16)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1116|0)==0;
 if($1117){label=257;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=255;break;}
 case 257: 
 var $1119=$RP_0_i_i;
 var $1120=HEAP32[((11856)>>2)];
 var $1121=($1119>>>0)<($1120>>>0);
 if($1121){label=259;break;}else{label=258;break;}
 case 258: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=260;break;
 case 259: 
 _abort();
 throw "Reached an unreachable!";
 case 260: 
 var $R_1_i_i;
 var $1125=($1080|0)==0;
 if($1125){label=280;break;}else{label=261;break;}
 case 261: 
 var $_sum31_i_i=((($tsize_246_i)+(28))|0);
 var $_sum113_i=((($_sum31_i_i)+($999))|0);
 var $1127=(($tbase_247_i+$_sum113_i)|0);
 var $1128=$1127;
 var $1129=HEAP32[(($1128)>>2)];
 var $1130=((12144+($1129<<2))|0);
 var $1131=HEAP32[(($1130)>>2)];
 var $1132=($1077|0)==($1131|0);
 if($1132){label=262;break;}else{label=264;break;}
 case 262: 
 HEAP32[(($1130)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=263;break;}else{label=270;break;}
 case 263: 
 var $1134=1<<$1129;
 var $1135=$1134^-1;
 var $1136=HEAP32[((11844)>>2)];
 var $1137=$1136&$1135;
 HEAP32[((11844)>>2)]=$1137;
 label=280;break;
 case 264: 
 var $1139=$1080;
 var $1140=HEAP32[((11856)>>2)];
 var $1141=($1139>>>0)<($1140>>>0);
 if($1141){label=268;break;}else{label=265;break;}
 case 265: 
 var $1143=(($1080+16)|0);
 var $1144=HEAP32[(($1143)>>2)];
 var $1145=($1144|0)==($1077|0);
 if($1145){label=266;break;}else{label=267;break;}
 case 266: 
 HEAP32[(($1143)>>2)]=$R_1_i_i;
 label=269;break;
 case 267: 
 var $1148=(($1080+20)|0);
 HEAP32[(($1148)>>2)]=$R_1_i_i;
 label=269;break;
 case 268: 
 _abort();
 throw "Reached an unreachable!";
 case 269: 
 var $1151=($R_1_i_i|0)==0;
 if($1151){label=280;break;}else{label=270;break;}
 case 270: 
 var $1153=$R_1_i_i;
 var $1154=HEAP32[((11856)>>2)];
 var $1155=($1153>>>0)<($1154>>>0);
 if($1155){label=279;break;}else{label=271;break;}
 case 271: 
 var $1157=(($R_1_i_i+24)|0);
 HEAP32[(($1157)>>2)]=$1080;
 var $_sum3233_i_i=$999|16;
 var $_sum114_i=((($_sum3233_i_i)+($tsize_246_i))|0);
 var $1158=(($tbase_247_i+$_sum114_i)|0);
 var $1159=$1158;
 var $1160=HEAP32[(($1159)>>2)];
 var $1161=($1160|0)==0;
 if($1161){label=275;break;}else{label=272;break;}
 case 272: 
 var $1163=$1160;
 var $1164=HEAP32[((11856)>>2)];
 var $1165=($1163>>>0)<($1164>>>0);
 if($1165){label=274;break;}else{label=273;break;}
 case 273: 
 var $1167=(($R_1_i_i+16)|0);
 HEAP32[(($1167)>>2)]=$1160;
 var $1168=(($1160+24)|0);
 HEAP32[(($1168)>>2)]=$R_1_i_i;
 label=275;break;
 case 274: 
 _abort();
 throw "Reached an unreachable!";
 case 275: 
 var $_sum115_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1171=(($tbase_247_i+$_sum115_i)|0);
 var $1172=$1171;
 var $1173=HEAP32[(($1172)>>2)];
 var $1174=($1173|0)==0;
 if($1174){label=280;break;}else{label=276;break;}
 case 276: 
 var $1176=$1173;
 var $1177=HEAP32[((11856)>>2)];
 var $1178=($1176>>>0)<($1177>>>0);
 if($1178){label=278;break;}else{label=277;break;}
 case 277: 
 var $1180=(($R_1_i_i+20)|0);
 HEAP32[(($1180)>>2)]=$1173;
 var $1181=(($1173+24)|0);
 HEAP32[(($1181)>>2)]=$R_1_i_i;
 label=280;break;
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 _abort();
 throw "Reached an unreachable!";
 case 280: 
 var $_sum9_i_i=$1037|$999;
 var $_sum116_i=((($_sum9_i_i)+($tsize_246_i))|0);
 var $1185=(($tbase_247_i+$_sum116_i)|0);
 var $1186=$1185;
 var $1187=((($1037)+($1007))|0);
 var $oldfirst_0_i_i=$1186;var $qsize_0_i_i=$1187;label=281;break;
 case 281: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1189=(($oldfirst_0_i_i+4)|0);
 var $1190=HEAP32[(($1189)>>2)];
 var $1191=$1190&-2;
 HEAP32[(($1189)>>2)]=$1191;
 var $1192=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1193=(($tbase_247_i+$_sum10_i_i)|0);
 var $1194=$1193;
 HEAP32[(($1194)>>2)]=$1192;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1195=(($tbase_247_i+$_sum11_i_i)|0);
 var $1196=$1195;
 HEAP32[(($1196)>>2)]=$qsize_0_i_i;
 var $1197=$qsize_0_i_i>>>3;
 var $1198=($qsize_0_i_i>>>0)<256;
 if($1198){label=282;break;}else{label=287;break;}
 case 282: 
 var $1200=$1197<<1;
 var $1201=((11880+($1200<<2))|0);
 var $1202=$1201;
 var $1203=HEAP32[((11840)>>2)];
 var $1204=1<<$1197;
 var $1205=$1203&$1204;
 var $1206=($1205|0)==0;
 if($1206){label=283;break;}else{label=284;break;}
 case 283: 
 var $1208=$1203|$1204;
 HEAP32[((11840)>>2)]=$1208;
 var $_sum27_pre_i_i=((($1200)+(2))|0);
 var $_pre_i24_i=((11880+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1202;var $_pre_phi_i25_i=$_pre_i24_i;label=286;break;
 case 284: 
 var $_sum30_i_i=((($1200)+(2))|0);
 var $1210=((11880+($_sum30_i_i<<2))|0);
 var $1211=HEAP32[(($1210)>>2)];
 var $1212=$1211;
 var $1213=HEAP32[((11856)>>2)];
 var $1214=($1212>>>0)<($1213>>>0);
 if($1214){label=285;break;}else{var $F4_0_i_i=$1211;var $_pre_phi_i25_i=$1210;label=286;break;}
 case 285: 
 _abort();
 throw "Reached an unreachable!";
 case 286: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i25_i)>>2)]=$1006;
 var $1217=(($F4_0_i_i+12)|0);
 HEAP32[(($1217)>>2)]=$1006;
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1218=(($tbase_247_i+$_sum28_i_i)|0);
 var $1219=$1218;
 HEAP32[(($1219)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1220=(($tbase_247_i+$_sum29_i_i)|0);
 var $1221=$1220;
 HEAP32[(($1221)>>2)]=$1202;
 label=305;break;
 case 287: 
 var $1223=$1005;
 var $1224=$qsize_0_i_i>>>8;
 var $1225=($1224|0)==0;
 if($1225){var $I7_0_i_i=0;label=290;break;}else{label=288;break;}
 case 288: 
 var $1227=($qsize_0_i_i>>>0)>16777215;
 if($1227){var $I7_0_i_i=31;label=290;break;}else{label=289;break;}
 case 289: 
 var $1229=((($1224)+(1048320))|0);
 var $1230=$1229>>>16;
 var $1231=$1230&8;
 var $1232=$1224<<$1231;
 var $1233=((($1232)+(520192))|0);
 var $1234=$1233>>>16;
 var $1235=$1234&4;
 var $1236=$1235|$1231;
 var $1237=$1232<<$1235;
 var $1238=((($1237)+(245760))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&2;
 var $1241=$1236|$1240;
 var $1242=(((14)-($1241))|0);
 var $1243=$1237<<$1240;
 var $1244=$1243>>>15;
 var $1245=((($1242)+($1244))|0);
 var $1246=$1245<<1;
 var $1247=((($1245)+(7))|0);
 var $1248=$qsize_0_i_i>>>($1247>>>0);
 var $1249=$1248&1;
 var $1250=$1249|$1246;
 var $I7_0_i_i=$1250;label=290;break;
 case 290: 
 var $I7_0_i_i;
 var $1252=((12144+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1253=(($tbase_247_i+$_sum12_i26_i)|0);
 var $1254=$1253;
 HEAP32[(($1254)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1255=(($tbase_247_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1256=(($tbase_247_i+$_sum14_i_i)|0);
 var $1257=$1256;
 HEAP32[(($1257)>>2)]=0;
 var $1258=$1255;
 HEAP32[(($1258)>>2)]=0;
 var $1259=HEAP32[((11844)>>2)];
 var $1260=1<<$I7_0_i_i;
 var $1261=$1259&$1260;
 var $1262=($1261|0)==0;
 if($1262){label=291;break;}else{label=292;break;}
 case 291: 
 var $1264=$1259|$1260;
 HEAP32[((11844)>>2)]=$1264;
 HEAP32[(($1252)>>2)]=$1223;
 var $1265=$1252;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1266=(($tbase_247_i+$_sum15_i_i)|0);
 var $1267=$1266;
 HEAP32[(($1267)>>2)]=$1265;
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1268=(($tbase_247_i+$_sum16_i_i)|0);
 var $1269=$1268;
 HEAP32[(($1269)>>2)]=$1223;
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1270=(($tbase_247_i+$_sum17_i_i)|0);
 var $1271=$1270;
 HEAP32[(($1271)>>2)]=$1223;
 label=305;break;
 case 292: 
 var $1273=HEAP32[(($1252)>>2)];
 var $1274=($I7_0_i_i|0)==31;
 if($1274){var $1279=0;label=294;break;}else{label=293;break;}
 case 293: 
 var $1276=$I7_0_i_i>>>1;
 var $1277=(((25)-($1276))|0);
 var $1279=$1277;label=294;break;
 case 294: 
 var $1279;
 var $1280=(($1273+4)|0);
 var $1281=HEAP32[(($1280)>>2)];
 var $1282=$1281&-8;
 var $1283=($1282|0)==($qsize_0_i_i|0);
 if($1283){var $T_0_lcssa_i28_i=$1273;label=301;break;}else{label=295;break;}
 case 295: 
 var $1284=$qsize_0_i_i<<$1279;
 var $T_055_i_i=$1273;var $K8_056_i_i=$1284;label=297;break;
 case 296: 
 var $1286=$K8_056_i_i<<1;
 var $1287=(($1294+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){var $T_0_lcssa_i28_i=$1294;label=301;break;}else{var $T_055_i_i=$1294;var $K8_056_i_i=$1286;label=297;break;}
 case 297: 
 var $K8_056_i_i;
 var $T_055_i_i;
 var $1292=$K8_056_i_i>>>31;
 var $1293=(($T_055_i_i+16+($1292<<2))|0);
 var $1294=HEAP32[(($1293)>>2)];
 var $1295=($1294|0)==0;
 if($1295){label=298;break;}else{label=296;break;}
 case 298: 
 var $1297=$1293;
 var $1298=HEAP32[((11856)>>2)];
 var $1299=($1297>>>0)<($1298>>>0);
 if($1299){label=300;break;}else{label=299;break;}
 case 299: 
 HEAP32[(($1293)>>2)]=$1223;
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1301=(($tbase_247_i+$_sum24_i_i)|0);
 var $1302=$1301;
 HEAP32[(($1302)>>2)]=$T_055_i_i;
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1303=(($tbase_247_i+$_sum25_i_i)|0);
 var $1304=$1303;
 HEAP32[(($1304)>>2)]=$1223;
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1305=(($tbase_247_i+$_sum26_i_i)|0);
 var $1306=$1305;
 HEAP32[(($1306)>>2)]=$1223;
 label=305;break;
 case 300: 
 _abort();
 throw "Reached an unreachable!";
 case 301: 
 var $T_0_lcssa_i28_i;
 var $1308=(($T_0_lcssa_i28_i+8)|0);
 var $1309=HEAP32[(($1308)>>2)];
 var $1310=$T_0_lcssa_i28_i;
 var $1311=HEAP32[((11856)>>2)];
 var $1312=($1310>>>0)<($1311>>>0);
 if($1312){label=304;break;}else{label=302;break;}
 case 302: 
 var $1314=$1309;
 var $1315=($1314>>>0)<($1311>>>0);
 if($1315){label=304;break;}else{label=303;break;}
 case 303: 
 var $1317=(($1309+12)|0);
 HEAP32[(($1317)>>2)]=$1223;
 HEAP32[(($1308)>>2)]=$1223;
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1318=(($tbase_247_i+$_sum21_i_i)|0);
 var $1319=$1318;
 HEAP32[(($1319)>>2)]=$1309;
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1320=(($tbase_247_i+$_sum22_i_i)|0);
 var $1321=$1320;
 HEAP32[(($1321)>>2)]=$T_0_lcssa_i28_i;
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1322=(($tbase_247_i+$_sum23_i_i)|0);
 var $1323=$1322;
 HEAP32[(($1323)>>2)]=0;
 label=305;break;
 case 304: 
 _abort();
 throw "Reached an unreachable!";
 case 305: 
 var $_sum1819_i_i=$989|8;
 var $1324=(($tbase_247_i+$_sum1819_i_i)|0);
 var $mem_0=$1324;label=344;break;
 case 306: 
 var $1325=$888;
 var $sp_0_i_i_i=12288;label=307;break;
 case 307: 
 var $sp_0_i_i_i;
 var $1327=(($sp_0_i_i_i)|0);
 var $1328=HEAP32[(($1327)>>2)];
 var $1329=($1328>>>0)>($1325>>>0);
 if($1329){label=309;break;}else{label=308;break;}
 case 308: 
 var $1331=(($sp_0_i_i_i+4)|0);
 var $1332=HEAP32[(($1331)>>2)];
 var $1333=(($1328+$1332)|0);
 var $1334=($1333>>>0)>($1325>>>0);
 if($1334){label=310;break;}else{label=309;break;}
 case 309: 
 var $1336=(($sp_0_i_i_i+8)|0);
 var $1337=HEAP32[(($1336)>>2)];
 var $sp_0_i_i_i=$1337;label=307;break;
 case 310: 
 var $_sum_i15_i=((($1332)-(47))|0);
 var $_sum1_i16_i=((($1332)-(39))|0);
 var $1338=(($1328+$_sum1_i16_i)|0);
 var $1339=$1338;
 var $1340=$1339&7;
 var $1341=($1340|0)==0;
 if($1341){var $1346=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1343=(((-$1339))|0);
 var $1344=$1343&7;
 var $1346=$1344;label=312;break;
 case 312: 
 var $1346;
 var $_sum2_i17_i=((($_sum_i15_i)+($1346))|0);
 var $1347=(($1328+$_sum2_i17_i)|0);
 var $1348=(($888+16)|0);
 var $1349=$1348;
 var $1350=($1347>>>0)<($1349>>>0);
 var $1351=($1350?$1325:$1347);
 var $1352=(($1351+8)|0);
 var $1353=$1352;
 var $1354=((($tsize_246_i)-(40))|0);
 var $1355=(($tbase_247_i+8)|0);
 var $1356=$1355;
 var $1357=$1356&7;
 var $1358=($1357|0)==0;
 if($1358){var $1362=0;label=314;break;}else{label=313;break;}
 case 313: 
 var $1360=(((-$1356))|0);
 var $1361=$1360&7;
 var $1362=$1361;label=314;break;
 case 314: 
 var $1362;
 var $1363=(($tbase_247_i+$1362)|0);
 var $1364=$1363;
 var $1365=((($1354)-($1362))|0);
 HEAP32[((11864)>>2)]=$1364;
 HEAP32[((11852)>>2)]=$1365;
 var $1366=$1365|1;
 var $_sum_i_i_i=((($1362)+(4))|0);
 var $1367=(($tbase_247_i+$_sum_i_i_i)|0);
 var $1368=$1367;
 HEAP32[(($1368)>>2)]=$1366;
 var $_sum2_i_i_i=((($tsize_246_i)-(36))|0);
 var $1369=(($tbase_247_i+$_sum2_i_i_i)|0);
 var $1370=$1369;
 HEAP32[(($1370)>>2)]=40;
 var $1371=HEAP32[((11816)>>2)];
 HEAP32[((11868)>>2)]=$1371;
 var $1372=(($1351+4)|0);
 var $1373=$1372;
 HEAP32[(($1373)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1352)>>2)]=HEAP32[((12288)>>2)];HEAP32[((($1352)+(4))>>2)]=HEAP32[((12292)>>2)];HEAP32[((($1352)+(8))>>2)]=HEAP32[((12296)>>2)];HEAP32[((($1352)+(12))>>2)]=HEAP32[((12300)>>2)];
 HEAP32[((12288)>>2)]=$tbase_247_i;
 HEAP32[((12292)>>2)]=$tsize_246_i;
 HEAP32[((12300)>>2)]=0;
 HEAP32[((12296)>>2)]=$1353;
 var $1374=(($1351+28)|0);
 var $1375=$1374;
 HEAP32[(($1375)>>2)]=7;
 var $1376=(($1351+32)|0);
 var $1377=($1376>>>0)<($1333>>>0);
 if($1377){var $1378=$1375;label=315;break;}else{label=316;break;}
 case 315: 
 var $1378;
 var $1379=(($1378+4)|0);
 HEAP32[(($1379)>>2)]=7;
 var $1380=(($1378+8)|0);
 var $1381=$1380;
 var $1382=($1381>>>0)<($1333>>>0);
 if($1382){var $1378=$1379;label=315;break;}else{label=316;break;}
 case 316: 
 var $1383=($1351|0)==($1325|0);
 if($1383){label=341;break;}else{label=317;break;}
 case 317: 
 var $1385=$1351;
 var $1386=$888;
 var $1387=((($1385)-($1386))|0);
 var $1388=(($1325+$1387)|0);
 var $_sum3_i_i=((($1387)+(4))|0);
 var $1389=(($1325+$_sum3_i_i)|0);
 var $1390=$1389;
 var $1391=HEAP32[(($1390)>>2)];
 var $1392=$1391&-2;
 HEAP32[(($1390)>>2)]=$1392;
 var $1393=$1387|1;
 var $1394=(($888+4)|0);
 HEAP32[(($1394)>>2)]=$1393;
 var $1395=$1388;
 HEAP32[(($1395)>>2)]=$1387;
 var $1396=$1387>>>3;
 var $1397=($1387>>>0)<256;
 if($1397){label=318;break;}else{label=323;break;}
 case 318: 
 var $1399=$1396<<1;
 var $1400=((11880+($1399<<2))|0);
 var $1401=$1400;
 var $1402=HEAP32[((11840)>>2)];
 var $1403=1<<$1396;
 var $1404=$1402&$1403;
 var $1405=($1404|0)==0;
 if($1405){label=319;break;}else{label=320;break;}
 case 319: 
 var $1407=$1402|$1403;
 HEAP32[((11840)>>2)]=$1407;
 var $_sum11_pre_i_i=((($1399)+(2))|0);
 var $_pre_i_i=((11880+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1401;var $_pre_phi_i_i=$_pre_i_i;label=322;break;
 case 320: 
 var $_sum12_i_i=((($1399)+(2))|0);
 var $1409=((11880+($_sum12_i_i<<2))|0);
 var $1410=HEAP32[(($1409)>>2)];
 var $1411=$1410;
 var $1412=HEAP32[((11856)>>2)];
 var $1413=($1411>>>0)<($1412>>>0);
 if($1413){label=321;break;}else{var $F_0_i_i=$1410;var $_pre_phi_i_i=$1409;label=322;break;}
 case 321: 
 _abort();
 throw "Reached an unreachable!";
 case 322: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$888;
 var $1416=(($F_0_i_i+12)|0);
 HEAP32[(($1416)>>2)]=$888;
 var $1417=(($888+8)|0);
 HEAP32[(($1417)>>2)]=$F_0_i_i;
 var $1418=(($888+12)|0);
 HEAP32[(($1418)>>2)]=$1401;
 label=341;break;
 case 323: 
 var $1420=$888;
 var $1421=$1387>>>8;
 var $1422=($1421|0)==0;
 if($1422){var $I1_0_i_i=0;label=326;break;}else{label=324;break;}
 case 324: 
 var $1424=($1387>>>0)>16777215;
 if($1424){var $I1_0_i_i=31;label=326;break;}else{label=325;break;}
 case 325: 
 var $1426=((($1421)+(1048320))|0);
 var $1427=$1426>>>16;
 var $1428=$1427&8;
 var $1429=$1421<<$1428;
 var $1430=((($1429)+(520192))|0);
 var $1431=$1430>>>16;
 var $1432=$1431&4;
 var $1433=$1432|$1428;
 var $1434=$1429<<$1432;
 var $1435=((($1434)+(245760))|0);
 var $1436=$1435>>>16;
 var $1437=$1436&2;
 var $1438=$1433|$1437;
 var $1439=(((14)-($1438))|0);
 var $1440=$1434<<$1437;
 var $1441=$1440>>>15;
 var $1442=((($1439)+($1441))|0);
 var $1443=$1442<<1;
 var $1444=((($1442)+(7))|0);
 var $1445=$1387>>>($1444>>>0);
 var $1446=$1445&1;
 var $1447=$1446|$1443;
 var $I1_0_i_i=$1447;label=326;break;
 case 326: 
 var $I1_0_i_i;
 var $1449=((12144+($I1_0_i_i<<2))|0);
 var $1450=(($888+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1450)>>2)]=$I1_0_c_i_i;
 var $1451=(($888+20)|0);
 HEAP32[(($1451)>>2)]=0;
 var $1452=(($888+16)|0);
 HEAP32[(($1452)>>2)]=0;
 var $1453=HEAP32[((11844)>>2)];
 var $1454=1<<$I1_0_i_i;
 var $1455=$1453&$1454;
 var $1456=($1455|0)==0;
 if($1456){label=327;break;}else{label=328;break;}
 case 327: 
 var $1458=$1453|$1454;
 HEAP32[((11844)>>2)]=$1458;
 HEAP32[(($1449)>>2)]=$1420;
 var $1459=(($888+24)|0);
 var $_c_i_i=$1449;
 HEAP32[(($1459)>>2)]=$_c_i_i;
 var $1460=(($888+12)|0);
 HEAP32[(($1460)>>2)]=$888;
 var $1461=(($888+8)|0);
 HEAP32[(($1461)>>2)]=$888;
 label=341;break;
 case 328: 
 var $1463=HEAP32[(($1449)>>2)];
 var $1464=($I1_0_i_i|0)==31;
 if($1464){var $1469=0;label=330;break;}else{label=329;break;}
 case 329: 
 var $1466=$I1_0_i_i>>>1;
 var $1467=(((25)-($1466))|0);
 var $1469=$1467;label=330;break;
 case 330: 
 var $1469;
 var $1470=(($1463+4)|0);
 var $1471=HEAP32[(($1470)>>2)];
 var $1472=$1471&-8;
 var $1473=($1472|0)==($1387|0);
 if($1473){var $T_0_lcssa_i_i=$1463;label=337;break;}else{label=331;break;}
 case 331: 
 var $1474=$1387<<$1469;
 var $T_014_i_i=$1463;var $K2_015_i_i=$1474;label=333;break;
 case 332: 
 var $1476=$K2_015_i_i<<1;
 var $1477=(($1484+4)|0);
 var $1478=HEAP32[(($1477)>>2)];
 var $1479=$1478&-8;
 var $1480=($1479|0)==($1387|0);
 if($1480){var $T_0_lcssa_i_i=$1484;label=337;break;}else{var $T_014_i_i=$1484;var $K2_015_i_i=$1476;label=333;break;}
 case 333: 
 var $K2_015_i_i;
 var $T_014_i_i;
 var $1482=$K2_015_i_i>>>31;
 var $1483=(($T_014_i_i+16+($1482<<2))|0);
 var $1484=HEAP32[(($1483)>>2)];
 var $1485=($1484|0)==0;
 if($1485){label=334;break;}else{label=332;break;}
 case 334: 
 var $1487=$1483;
 var $1488=HEAP32[((11856)>>2)];
 var $1489=($1487>>>0)<($1488>>>0);
 if($1489){label=336;break;}else{label=335;break;}
 case 335: 
 HEAP32[(($1483)>>2)]=$1420;
 var $1491=(($888+24)|0);
 var $T_0_c8_i_i=$T_014_i_i;
 HEAP32[(($1491)>>2)]=$T_0_c8_i_i;
 var $1492=(($888+12)|0);
 HEAP32[(($1492)>>2)]=$888;
 var $1493=(($888+8)|0);
 HEAP32[(($1493)>>2)]=$888;
 label=341;break;
 case 336: 
 _abort();
 throw "Reached an unreachable!";
 case 337: 
 var $T_0_lcssa_i_i;
 var $1495=(($T_0_lcssa_i_i+8)|0);
 var $1496=HEAP32[(($1495)>>2)];
 var $1497=$T_0_lcssa_i_i;
 var $1498=HEAP32[((11856)>>2)];
 var $1499=($1497>>>0)<($1498>>>0);
 if($1499){label=340;break;}else{label=338;break;}
 case 338: 
 var $1501=$1496;
 var $1502=($1501>>>0)<($1498>>>0);
 if($1502){label=340;break;}else{label=339;break;}
 case 339: 
 var $1504=(($1496+12)|0);
 HEAP32[(($1504)>>2)]=$1420;
 HEAP32[(($1495)>>2)]=$1420;
 var $1505=(($888+8)|0);
 var $_c7_i_i=$1496;
 HEAP32[(($1505)>>2)]=$_c7_i_i;
 var $1506=(($888+12)|0);
 var $T_0_c_i_i=$T_0_lcssa_i_i;
 HEAP32[(($1506)>>2)]=$T_0_c_i_i;
 var $1507=(($888+24)|0);
 HEAP32[(($1507)>>2)]=0;
 label=341;break;
 case 340: 
 _abort();
 throw "Reached an unreachable!";
 case 341: 
 var $1508=HEAP32[((11852)>>2)];
 var $1509=($1508>>>0)>($nb_0>>>0);
 if($1509){label=342;break;}else{label=343;break;}
 case 342: 
 var $1511=((($1508)-($nb_0))|0);
 HEAP32[((11852)>>2)]=$1511;
 var $1512=HEAP32[((11864)>>2)];
 var $1513=$1512;
 var $1514=(($1513+$nb_0)|0);
 var $1515=$1514;
 HEAP32[((11864)>>2)]=$1515;
 var $1516=$1511|1;
 var $_sum_i34=((($nb_0)+(4))|0);
 var $1517=(($1513+$_sum_i34)|0);
 var $1518=$1517;
 HEAP32[(($1518)>>2)]=$1516;
 var $1519=$nb_0|3;
 var $1520=(($1512+4)|0);
 HEAP32[(($1520)>>2)]=$1519;
 var $1521=(($1512+8)|0);
 var $1522=$1521;
 var $mem_0=$1522;label=344;break;
 case 343: 
 var $1523=___errno_location();
 HEAP32[(($1523)>>2)]=12;
 var $mem_0=0;label=344;break;
 case 344: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_malloc"] = _malloc;

function _free($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=141;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((11856)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=140;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=140;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=141;break;}else{label=6;break;}
 case 6: 
 var $_sum3=(((-8)-($21))|0);
 var $24=(($mem+$_sum3)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=140;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((11860)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum47=((($_sum3)+(8))|0);
 var $35=(($mem+$_sum47)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum48=((($_sum3)+(12))|0);
 var $38=(($mem+$_sum48)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((11880+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((11840)>>2)];
 var $57=$56&$55;
 HEAP32[((11840)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre84=(($40+8)|0);
 var $_pre_phi85=$_pre84;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi85=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi85;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi85)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum37=((($_sum3)+(24))|0);
 var $70=(($mem+$_sum37)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum38=((($_sum3)+(12))|0);
 var $73=(($mem+$_sum38)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum44=((($_sum3)+(8))|0);
 var $78=(($mem+$_sum44)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum40=((($_sum3)+(20))|0);
 var $93=(($mem+$_sum40)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum39=((($_sum3)+(16))|0);
 var $98=(($mem+$_sum39)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum41=((($_sum3)+(28))|0);
 var $117=(($mem+$_sum41)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((12144+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=1<<$119;
 var $125=$124^-1;
 var $126=HEAP32[((11844)>>2)];
 var $127=$126&$125;
 HEAP32[((11844)>>2)]=$127;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $129=$72;
 var $130=HEAP32[((11856)>>2)];
 var $131=($129>>>0)<($130>>>0);
 if($131){label=42;break;}else{label=39;break;}
 case 39: 
 var $133=(($72+16)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($134|0)==($69|0);
 if($135){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($133)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $138=(($72+20)|0);
 HEAP32[(($138)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $141=($R_1|0)==0;
 if($141){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $143=$R_1;
 var $144=HEAP32[((11856)>>2)];
 var $145=($143>>>0)<($144>>>0);
 if($145){label=53;break;}else{label=45;break;}
 case 45: 
 var $147=(($R_1+24)|0);
 HEAP32[(($147)>>2)]=$72;
 var $_sum42=((($_sum3)+(16))|0);
 var $148=(($mem+$_sum42)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=49;break;}else{label=46;break;}
 case 46: 
 var $153=$150;
 var $154=HEAP32[((11856)>>2)];
 var $155=($153>>>0)<($154>>>0);
 if($155){label=48;break;}else{label=47;break;}
 case 47: 
 var $157=(($R_1+16)|0);
 HEAP32[(($157)>>2)]=$150;
 var $158=(($150+24)|0);
 HEAP32[(($158)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum43=((($_sum3)+(20))|0);
 var $161=(($mem+$_sum43)|0);
 var $162=$161;
 var $163=HEAP32[(($162)>>2)];
 var $164=($163|0)==0;
 if($164){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $166=$163;
 var $167=HEAP32[((11856)>>2)];
 var $168=($166>>>0)<($167>>>0);
 if($168){label=52;break;}else{label=51;break;}
 case 51: 
 var $170=(($R_1+20)|0);
 HEAP32[(($170)>>2)]=$163;
 var $171=(($163+24)|0);
 HEAP32[(($171)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum4=((($14)-(4))|0);
 var $175=(($mem+$_sum4)|0);
 var $176=$175;
 var $177=HEAP32[(($176)>>2)];
 var $178=$177&3;
 var $179=($178|0)==3;
 if($179){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((11848)>>2)]=$26;
 var $181=HEAP32[(($176)>>2)];
 var $182=$181&-2;
 HEAP32[(($176)>>2)]=$182;
 var $183=$26|1;
 var $_sum35=((($_sum3)+(4))|0);
 var $184=(($mem+$_sum35)|0);
 var $185=$184;
 HEAP32[(($185)>>2)]=$183;
 var $186=$15;
 HEAP32[(($186)>>2)]=$26;
 label=141;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $188=$p_0;
 var $189=($188>>>0)<($15>>>0);
 if($189){label=57;break;}else{label=140;break;}
 case 57: 
 var $_sum34=((($14)-(4))|0);
 var $191=(($mem+$_sum34)|0);
 var $192=$191;
 var $193=HEAP32[(($192)>>2)];
 var $194=$193&1;
 var $phitmp=($194|0)==0;
 if($phitmp){label=140;break;}else{label=58;break;}
 case 58: 
 var $196=$193&2;
 var $197=($196|0)==0;
 if($197){label=59;break;}else{label=112;break;}
 case 59: 
 var $199=HEAP32[((11864)>>2)];
 var $200=($16|0)==($199|0);
 if($200){label=60;break;}else{label=62;break;}
 case 60: 
 var $202=HEAP32[((11852)>>2)];
 var $203=((($202)+($psize_0))|0);
 HEAP32[((11852)>>2)]=$203;
 HEAP32[((11864)>>2)]=$p_0;
 var $204=$203|1;
 var $205=(($p_0+4)|0);
 HEAP32[(($205)>>2)]=$204;
 var $206=HEAP32[((11860)>>2)];
 var $207=($p_0|0)==($206|0);
 if($207){label=61;break;}else{label=141;break;}
 case 61: 
 HEAP32[((11860)>>2)]=0;
 HEAP32[((11848)>>2)]=0;
 label=141;break;
 case 62: 
 var $210=HEAP32[((11860)>>2)];
 var $211=($16|0)==($210|0);
 if($211){label=63;break;}else{label=64;break;}
 case 63: 
 var $213=HEAP32[((11848)>>2)];
 var $214=((($213)+($psize_0))|0);
 HEAP32[((11848)>>2)]=$214;
 HEAP32[((11860)>>2)]=$p_0;
 var $215=$214|1;
 var $216=(($p_0+4)|0);
 HEAP32[(($216)>>2)]=$215;
 var $217=(($188+$214)|0);
 var $218=$217;
 HEAP32[(($218)>>2)]=$214;
 label=141;break;
 case 64: 
 var $220=$193&-8;
 var $221=((($220)+($psize_0))|0);
 var $222=$193>>>3;
 var $223=($193>>>0)<256;
 if($223){label=65;break;}else{label=77;break;}
 case 65: 
 var $225=(($mem+$14)|0);
 var $226=$225;
 var $227=HEAP32[(($226)>>2)];
 var $_sum2829=$14|4;
 var $228=(($mem+$_sum2829)|0);
 var $229=$228;
 var $230=HEAP32[(($229)>>2)];
 var $231=$222<<1;
 var $232=((11880+($231<<2))|0);
 var $233=$232;
 var $234=($227|0)==($233|0);
 if($234){label=68;break;}else{label=66;break;}
 case 66: 
 var $236=$227;
 var $237=HEAP32[((11856)>>2)];
 var $238=($236>>>0)<($237>>>0);
 if($238){label=76;break;}else{label=67;break;}
 case 67: 
 var $240=(($227+12)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=($241|0)==($16|0);
 if($242){label=68;break;}else{label=76;break;}
 case 68: 
 var $243=($230|0)==($227|0);
 if($243){label=69;break;}else{label=70;break;}
 case 69: 
 var $245=1<<$222;
 var $246=$245^-1;
 var $247=HEAP32[((11840)>>2)];
 var $248=$247&$246;
 HEAP32[((11840)>>2)]=$248;
 label=110;break;
 case 70: 
 var $250=($230|0)==($233|0);
 if($250){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre82=(($230+8)|0);
 var $_pre_phi83=$_pre82;label=74;break;
 case 72: 
 var $252=$230;
 var $253=HEAP32[((11856)>>2)];
 var $254=($252>>>0)<($253>>>0);
 if($254){label=75;break;}else{label=73;break;}
 case 73: 
 var $256=(($230+8)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=($257|0)==($16|0);
 if($258){var $_pre_phi83=$256;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi83;
 var $259=(($227+12)|0);
 HEAP32[(($259)>>2)]=$230;
 HEAP32[(($_pre_phi83)>>2)]=$227;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $261=$15;
 var $_sum6=((($14)+(16))|0);
 var $262=(($mem+$_sum6)|0);
 var $263=$262;
 var $264=HEAP32[(($263)>>2)];
 var $_sum78=$14|4;
 var $265=(($mem+$_sum78)|0);
 var $266=$265;
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==($261|0);
 if($268){label=83;break;}else{label=78;break;}
 case 78: 
 var $270=(($mem+$14)|0);
 var $271=$270;
 var $272=HEAP32[(($271)>>2)];
 var $273=$272;
 var $274=HEAP32[((11856)>>2)];
 var $275=($273>>>0)<($274>>>0);
 if($275){label=82;break;}else{label=79;break;}
 case 79: 
 var $277=(($272+12)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=($278|0)==($261|0);
 if($279){label=80;break;}else{label=82;break;}
 case 80: 
 var $281=(($267+8)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)==($261|0);
 if($283){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($277)>>2)]=$267;
 HEAP32[(($281)>>2)]=$272;
 var $R7_1=$267;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum10=((($14)+(12))|0);
 var $286=(($mem+$_sum10)|0);
 var $287=$286;
 var $288=HEAP32[(($287)>>2)];
 var $289=($288|0)==0;
 if($289){label=84;break;}else{var $R7_0=$288;var $RP9_0=$287;label=85;break;}
 case 84: 
 var $_sum9=((($14)+(8))|0);
 var $291=(($mem+$_sum9)|0);
 var $292=$291;
 var $293=HEAP32[(($292)>>2)];
 var $294=($293|0)==0;
 if($294){var $R7_1=0;label=90;break;}else{var $R7_0=$293;var $RP9_0=$292;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $295=(($R7_0+20)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=($296|0)==0;
 if($297){label=86;break;}else{var $R7_0=$296;var $RP9_0=$295;label=85;break;}
 case 86: 
 var $299=(($R7_0+16)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=($300|0)==0;
 if($301){label=87;break;}else{var $R7_0=$300;var $RP9_0=$299;label=85;break;}
 case 87: 
 var $303=$RP9_0;
 var $304=HEAP32[((11856)>>2)];
 var $305=($303>>>0)<($304>>>0);
 if($305){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $309=($264|0)==0;
 if($309){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum21=((($14)+(20))|0);
 var $311=(($mem+$_sum21)|0);
 var $312=$311;
 var $313=HEAP32[(($312)>>2)];
 var $314=((12144+($313<<2))|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($261|0)==($315|0);
 if($316){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($314)>>2)]=$R7_1;
 var $cond69=($R7_1|0)==0;
 if($cond69){label=93;break;}else{label=100;break;}
 case 93: 
 var $318=1<<$313;
 var $319=$318^-1;
 var $320=HEAP32[((11844)>>2)];
 var $321=$320&$319;
 HEAP32[((11844)>>2)]=$321;
 label=110;break;
 case 94: 
 var $323=$264;
 var $324=HEAP32[((11856)>>2)];
 var $325=($323>>>0)<($324>>>0);
 if($325){label=98;break;}else{label=95;break;}
 case 95: 
 var $327=(($264+16)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=($328|0)==($261|0);
 if($329){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($327)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $332=(($264+20)|0);
 HEAP32[(($332)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $335=($R7_1|0)==0;
 if($335){label=110;break;}else{label=100;break;}
 case 100: 
 var $337=$R7_1;
 var $338=HEAP32[((11856)>>2)];
 var $339=($337>>>0)<($338>>>0);
 if($339){label=109;break;}else{label=101;break;}
 case 101: 
 var $341=(($R7_1+24)|0);
 HEAP32[(($341)>>2)]=$264;
 var $_sum22=((($14)+(8))|0);
 var $342=(($mem+$_sum22)|0);
 var $343=$342;
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=105;break;}else{label=102;break;}
 case 102: 
 var $347=$344;
 var $348=HEAP32[((11856)>>2)];
 var $349=($347>>>0)<($348>>>0);
 if($349){label=104;break;}else{label=103;break;}
 case 103: 
 var $351=(($R7_1+16)|0);
 HEAP32[(($351)>>2)]=$344;
 var $352=(($344+24)|0);
 HEAP32[(($352)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum23=((($14)+(12))|0);
 var $355=(($mem+$_sum23)|0);
 var $356=$355;
 var $357=HEAP32[(($356)>>2)];
 var $358=($357|0)==0;
 if($358){label=110;break;}else{label=106;break;}
 case 106: 
 var $360=$357;
 var $361=HEAP32[((11856)>>2)];
 var $362=($360>>>0)<($361>>>0);
 if($362){label=108;break;}else{label=107;break;}
 case 107: 
 var $364=(($R7_1+20)|0);
 HEAP32[(($364)>>2)]=$357;
 var $365=(($357+24)|0);
 HEAP32[(($365)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $368=$221|1;
 var $369=(($p_0+4)|0);
 HEAP32[(($369)>>2)]=$368;
 var $370=(($188+$221)|0);
 var $371=$370;
 HEAP32[(($371)>>2)]=$221;
 var $372=HEAP32[((11860)>>2)];
 var $373=($p_0|0)==($372|0);
 if($373){label=111;break;}else{var $psize_1=$221;label=113;break;}
 case 111: 
 HEAP32[((11848)>>2)]=$221;
 label=141;break;
 case 112: 
 var $376=$193&-2;
 HEAP32[(($192)>>2)]=$376;
 var $377=$psize_0|1;
 var $378=(($p_0+4)|0);
 HEAP32[(($378)>>2)]=$377;
 var $379=(($188+$psize_0)|0);
 var $380=$379;
 HEAP32[(($380)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $382=$psize_1>>>3;
 var $383=($psize_1>>>0)<256;
 if($383){label=114;break;}else{label=119;break;}
 case 114: 
 var $385=$382<<1;
 var $386=((11880+($385<<2))|0);
 var $387=$386;
 var $388=HEAP32[((11840)>>2)];
 var $389=1<<$382;
 var $390=$388&$389;
 var $391=($390|0)==0;
 if($391){label=115;break;}else{label=116;break;}
 case 115: 
 var $393=$388|$389;
 HEAP32[((11840)>>2)]=$393;
 var $_sum19_pre=((($385)+(2))|0);
 var $_pre=((11880+($_sum19_pre<<2))|0);
 var $F16_0=$387;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum20=((($385)+(2))|0);
 var $395=((11880+($_sum20<<2))|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=$396;
 var $398=HEAP32[((11856)>>2)];
 var $399=($397>>>0)<($398>>>0);
 if($399){label=117;break;}else{var $F16_0=$396;var $_pre_phi=$395;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $402=(($F16_0+12)|0);
 HEAP32[(($402)>>2)]=$p_0;
 var $403=(($p_0+8)|0);
 HEAP32[(($403)>>2)]=$F16_0;
 var $404=(($p_0+12)|0);
 HEAP32[(($404)>>2)]=$387;
 label=141;break;
 case 119: 
 var $406=$p_0;
 var $407=$psize_1>>>8;
 var $408=($407|0)==0;
 if($408){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $410=($psize_1>>>0)>16777215;
 if($410){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $412=((($407)+(1048320))|0);
 var $413=$412>>>16;
 var $414=$413&8;
 var $415=$407<<$414;
 var $416=((($415)+(520192))|0);
 var $417=$416>>>16;
 var $418=$417&4;
 var $419=$418|$414;
 var $420=$415<<$418;
 var $421=((($420)+(245760))|0);
 var $422=$421>>>16;
 var $423=$422&2;
 var $424=$419|$423;
 var $425=(((14)-($424))|0);
 var $426=$420<<$423;
 var $427=$426>>>15;
 var $428=((($425)+($427))|0);
 var $429=$428<<1;
 var $430=((($428)+(7))|0);
 var $431=$psize_1>>>($430>>>0);
 var $432=$431&1;
 var $433=$432|$429;
 var $I18_0=$433;label=122;break;
 case 122: 
 var $I18_0;
 var $435=((12144+($I18_0<<2))|0);
 var $436=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($436)>>2)]=$I18_0_c;
 var $437=(($p_0+20)|0);
 HEAP32[(($437)>>2)]=0;
 var $438=(($p_0+16)|0);
 HEAP32[(($438)>>2)]=0;
 var $439=HEAP32[((11844)>>2)];
 var $440=1<<$I18_0;
 var $441=$439&$440;
 var $442=($441|0)==0;
 if($442){label=123;break;}else{label=124;break;}
 case 123: 
 var $444=$439|$440;
 HEAP32[((11844)>>2)]=$444;
 HEAP32[(($435)>>2)]=$406;
 var $445=(($p_0+24)|0);
 var $_c=$435;
 HEAP32[(($445)>>2)]=$_c;
 var $446=(($p_0+12)|0);
 HEAP32[(($446)>>2)]=$p_0;
 var $447=(($p_0+8)|0);
 HEAP32[(($447)>>2)]=$p_0;
 label=137;break;
 case 124: 
 var $449=HEAP32[(($435)>>2)];
 var $450=($I18_0|0)==31;
 if($450){var $455=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $452=$I18_0>>>1;
 var $453=(((25)-($452))|0);
 var $455=$453;label=126;break;
 case 126: 
 var $455;
 var $456=(($449+4)|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=$457&-8;
 var $459=($458|0)==($psize_1|0);
 if($459){var $T_0_lcssa=$449;label=133;break;}else{label=127;break;}
 case 127: 
 var $460=$psize_1<<$455;
 var $T_071=$449;var $K19_072=$460;label=129;break;
 case 128: 
 var $462=$K19_072<<1;
 var $463=(($470+4)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=$464&-8;
 var $466=($465|0)==($psize_1|0);
 if($466){var $T_0_lcssa=$470;label=133;break;}else{var $T_071=$470;var $K19_072=$462;label=129;break;}
 case 129: 
 var $K19_072;
 var $T_071;
 var $468=$K19_072>>>31;
 var $469=(($T_071+16+($468<<2))|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=($470|0)==0;
 if($471){label=130;break;}else{label=128;break;}
 case 130: 
 var $473=$469;
 var $474=HEAP32[((11856)>>2)];
 var $475=($473>>>0)<($474>>>0);
 if($475){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP32[(($469)>>2)]=$406;
 var $477=(($p_0+24)|0);
 var $T_0_c16=$T_071;
 HEAP32[(($477)>>2)]=$T_0_c16;
 var $478=(($p_0+12)|0);
 HEAP32[(($478)>>2)]=$p_0;
 var $479=(($p_0+8)|0);
 HEAP32[(($479)>>2)]=$p_0;
 label=137;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $T_0_lcssa;
 var $481=(($T_0_lcssa+8)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$T_0_lcssa;
 var $484=HEAP32[((11856)>>2)];
 var $485=($483>>>0)<($484>>>0);
 if($485){label=136;break;}else{label=134;break;}
 case 134: 
 var $487=$482;
 var $488=($487>>>0)<($484>>>0);
 if($488){label=136;break;}else{label=135;break;}
 case 135: 
 var $490=(($482+12)|0);
 HEAP32[(($490)>>2)]=$406;
 HEAP32[(($481)>>2)]=$406;
 var $491=(($p_0+8)|0);
 var $_c15=$482;
 HEAP32[(($491)>>2)]=$_c15;
 var $492=(($p_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($492)>>2)]=$T_0_c;
 var $493=(($p_0+24)|0);
 HEAP32[(($493)>>2)]=0;
 label=137;break;
 case 136: 
 _abort();
 throw "Reached an unreachable!";
 case 137: 
 var $495=HEAP32[((11872)>>2)];
 var $496=((($495)-(1))|0);
 HEAP32[((11872)>>2)]=$496;
 var $497=($496|0)==0;
 if($497){var $sp_0_in_i=12296;label=138;break;}else{label=141;break;}
 case 138: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $498=($sp_0_i|0)==0;
 var $499=(($sp_0_i+8)|0);
 if($498){label=139;break;}else{var $sp_0_in_i=$499;label=138;break;}
 case 139: 
 HEAP32[((11872)>>2)]=-1;
 label=141;break;
 case 140: 
 _abort();
 throw "Reached an unreachable!";
 case 141: 
 return;
  default: assert(0, "bad label: " + label);
 }

}
Module["_free"] = _free;

function _realloc($oldmem,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=11;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=$15;
 var $17=_try_realloc_chunk($16,$14);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=8;break;}
 case 8: 
 var $20=(($17+8)|0);
 var $21=$20;
 var $mem_0=$21;label=11;break;
 case 9: 
 var $23=_malloc($bytes);
 var $24=($23|0)==0;
 if($24){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $26=((($oldmem)-(4))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&-8;
 var $30=$28&3;
 var $31=($30|0)==0;
 var $32=($31?8:4);
 var $33=((($29)-($32))|0);
 var $34=($33>>>0)<($bytes>>>0);
 var $35=($34?$33:$bytes);
 assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
 _free($oldmem);
 var $mem_0=$23;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_realloc"] = _realloc;

function _try_realloc_chunk($p,$nb){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&-8;
 var $4=$p;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=HEAP32[((11856)>>2)];
 var $8=($4>>>0)<($7>>>0);
 if($8){label=72;break;}else{label=2;break;}
 case 2: 
 var $10=$2&3;
 var $11=($10|0)!=1;
 var $12=($4>>>0)<($5>>>0);
 var $or_cond=$11&$12;
 if($or_cond){label=3;break;}else{label=72;break;}
 case 3: 
 var $_sum3334=$3|4;
 var $14=(($4+$_sum3334)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&1;
 var $phitmp=($17|0)==0;
 if($phitmp){label=72;break;}else{label=4;break;}
 case 4: 
 var $19=($10|0)==0;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=($nb>>>0)<256;
 if($21){var $newp_0=0;label=73;break;}else{label=6;break;}
 case 6: 
 var $23=((($nb)+(4))|0);
 var $24=($3>>>0)<($23>>>0);
 if($24){label=8;break;}else{label=7;break;}
 case 7: 
 var $26=((($3)-($nb))|0);
 var $27=HEAP32[((11808)>>2)];
 var $28=$27<<1;
 var $29=($26>>>0)>($28>>>0);
 if($29){label=8;break;}else{var $newp_0=$p;label=73;break;}
 case 8: 
 var $newp_0=0;label=73;break;
 case 9: 
 var $32=($3>>>0)<($nb>>>0);
 if($32){label=12;break;}else{label=10;break;}
 case 10: 
 var $34=((($3)-($nb))|0);
 var $35=($34>>>0)>15;
 if($35){label=11;break;}else{var $newp_0=$p;label=73;break;}
 case 11: 
 var $37=(($4+$nb)|0);
 var $38=$37;
 var $39=$2&1;
 var $40=$39|$nb;
 var $41=$40|2;
 HEAP32[(($1)>>2)]=$41;
 var $_sum29=((($nb)+(4))|0);
 var $42=(($4+$_sum29)|0);
 var $43=$42;
 var $44=$34|3;
 HEAP32[(($43)>>2)]=$44;
 var $45=HEAP32[(($15)>>2)];
 var $46=$45|1;
 HEAP32[(($15)>>2)]=$46;
 _dispose_chunk($38,$34);
 var $newp_0=$p;label=73;break;
 case 12: 
 var $48=HEAP32[((11864)>>2)];
 var $49=($6|0)==($48|0);
 if($49){label=13;break;}else{label=15;break;}
 case 13: 
 var $51=HEAP32[((11852)>>2)];
 var $52=((($51)+($3))|0);
 var $53=($52>>>0)>($nb>>>0);
 if($53){label=14;break;}else{var $newp_0=0;label=73;break;}
 case 14: 
 var $55=((($52)-($nb))|0);
 var $56=(($4+$nb)|0);
 var $57=$56;
 var $58=$2&1;
 var $59=$58|$nb;
 var $60=$59|2;
 HEAP32[(($1)>>2)]=$60;
 var $_sum28=((($nb)+(4))|0);
 var $61=(($4+$_sum28)|0);
 var $62=$61;
 var $63=$55|1;
 HEAP32[(($62)>>2)]=$63;
 HEAP32[((11864)>>2)]=$57;
 HEAP32[((11852)>>2)]=$55;
 var $newp_0=$p;label=73;break;
 case 15: 
 var $65=HEAP32[((11860)>>2)];
 var $66=($6|0)==($65|0);
 if($66){label=16;break;}else{label=21;break;}
 case 16: 
 var $68=HEAP32[((11848)>>2)];
 var $69=((($68)+($3))|0);
 var $70=($69>>>0)<($nb>>>0);
 if($70){var $newp_0=0;label=73;break;}else{label=17;break;}
 case 17: 
 var $72=((($69)-($nb))|0);
 var $73=($72>>>0)>15;
 if($73){label=18;break;}else{label=19;break;}
 case 18: 
 var $75=(($4+$nb)|0);
 var $76=$75;
 var $77=(($4+$69)|0);
 var $78=$2&1;
 var $79=$78|$nb;
 var $80=$79|2;
 HEAP32[(($1)>>2)]=$80;
 var $_sum25=((($nb)+(4))|0);
 var $81=(($4+$_sum25)|0);
 var $82=$81;
 var $83=$72|1;
 HEAP32[(($82)>>2)]=$83;
 var $84=$77;
 HEAP32[(($84)>>2)]=$72;
 var $_sum26=((($69)+(4))|0);
 var $85=(($4+$_sum26)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=$87&-2;
 HEAP32[(($86)>>2)]=$88;
 var $storemerge=$76;var $storemerge27=$72;label=20;break;
 case 19: 
 var $90=$2&1;
 var $91=$90|$69;
 var $92=$91|2;
 HEAP32[(($1)>>2)]=$92;
 var $_sum23=((($69)+(4))|0);
 var $93=(($4+$_sum23)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=$95|1;
 HEAP32[(($94)>>2)]=$96;
 var $storemerge=0;var $storemerge27=0;label=20;break;
 case 20: 
 var $storemerge27;
 var $storemerge;
 HEAP32[((11848)>>2)]=$storemerge27;
 HEAP32[((11860)>>2)]=$storemerge;
 var $newp_0=$p;label=73;break;
 case 21: 
 var $99=$16&2;
 var $100=($99|0)==0;
 if($100){label=22;break;}else{var $newp_0=0;label=73;break;}
 case 22: 
 var $102=$16&-8;
 var $103=((($102)+($3))|0);
 var $104=($103>>>0)<($nb>>>0);
 if($104){var $newp_0=0;label=73;break;}else{label=23;break;}
 case 23: 
 var $106=((($103)-($nb))|0);
 var $107=$16>>>3;
 var $108=($16>>>0)<256;
 if($108){label=24;break;}else{label=36;break;}
 case 24: 
 var $_sum17=((($3)+(8))|0);
 var $110=(($4+$_sum17)|0);
 var $111=$110;
 var $112=HEAP32[(($111)>>2)];
 var $_sum18=((($3)+(12))|0);
 var $113=(($4+$_sum18)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $116=$107<<1;
 var $117=((11880+($116<<2))|0);
 var $118=$117;
 var $119=($112|0)==($118|0);
 if($119){label=27;break;}else{label=25;break;}
 case 25: 
 var $121=$112;
 var $122=($121>>>0)<($7>>>0);
 if($122){label=35;break;}else{label=26;break;}
 case 26: 
 var $124=(($112+12)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($125|0)==($6|0);
 if($126){label=27;break;}else{label=35;break;}
 case 27: 
 var $127=($115|0)==($112|0);
 if($127){label=28;break;}else{label=29;break;}
 case 28: 
 var $129=1<<$107;
 var $130=$129^-1;
 var $131=HEAP32[((11840)>>2)];
 var $132=$131&$130;
 HEAP32[((11840)>>2)]=$132;
 label=69;break;
 case 29: 
 var $134=($115|0)==($118|0);
 if($134){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=(($115+8)|0);
 var $_pre_phi=$_pre;label=33;break;
 case 31: 
 var $136=$115;
 var $137=($136>>>0)<($7>>>0);
 if($137){label=34;break;}else{label=32;break;}
 case 32: 
 var $139=(($115+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==($6|0);
 if($141){var $_pre_phi=$139;label=33;break;}else{label=34;break;}
 case 33: 
 var $_pre_phi;
 var $142=(($112+12)|0);
 HEAP32[(($142)>>2)]=$115;
 HEAP32[(($_pre_phi)>>2)]=$112;
 label=69;break;
 case 34: 
 _abort();
 throw "Reached an unreachable!";
 case 35: 
 _abort();
 throw "Reached an unreachable!";
 case 36: 
 var $144=$5;
 var $_sum=((($3)+(24))|0);
 var $145=(($4+$_sum)|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $_sum2=((($3)+(12))|0);
 var $148=(($4+$_sum2)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==($144|0);
 if($151){label=42;break;}else{label=37;break;}
 case 37: 
 var $_sum14=((($3)+(8))|0);
 var $153=(($4+$_sum14)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=$155;
 var $157=($156>>>0)<($7>>>0);
 if($157){label=41;break;}else{label=38;break;}
 case 38: 
 var $159=(($155+12)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($160|0)==($144|0);
 if($161){label=39;break;}else{label=41;break;}
 case 39: 
 var $163=(($150+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==($144|0);
 if($165){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($159)>>2)]=$150;
 HEAP32[(($163)>>2)]=$155;
 var $R_1=$150;label=49;break;
 case 41: 
 _abort();
 throw "Reached an unreachable!";
 case 42: 
 var $_sum4=((($3)+(20))|0);
 var $168=(($4+$_sum4)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=($170|0)==0;
 if($171){label=43;break;}else{var $R_0=$170;var $RP_0=$169;label=44;break;}
 case 43: 
 var $_sum3=((($3)+(16))|0);
 var $173=(($4+$_sum3)|0);
 var $174=$173;
 var $175=HEAP32[(($174)>>2)];
 var $176=($175|0)==0;
 if($176){var $R_1=0;label=49;break;}else{var $R_0=$175;var $RP_0=$174;label=44;break;}
 case 44: 
 var $RP_0;
 var $R_0;
 var $177=(($R_0+20)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=($178|0)==0;
 if($179){label=45;break;}else{var $R_0=$178;var $RP_0=$177;label=44;break;}
 case 45: 
 var $181=(($R_0+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($182|0)==0;
 if($183){label=46;break;}else{var $R_0=$182;var $RP_0=$181;label=44;break;}
 case 46: 
 var $185=$RP_0;
 var $186=($185>>>0)<($7>>>0);
 if($186){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $R_1;
 var $190=($147|0)==0;
 if($190){label=69;break;}else{label=50;break;}
 case 50: 
 var $_sum11=((($3)+(28))|0);
 var $192=(($4+$_sum11)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=((12144+($194<<2))|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($144|0)==($196|0);
 if($197){label=51;break;}else{label=53;break;}
 case 51: 
 HEAP32[(($195)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=52;break;}else{label=59;break;}
 case 52: 
 var $199=1<<$194;
 var $200=$199^-1;
 var $201=HEAP32[((11844)>>2)];
 var $202=$201&$200;
 HEAP32[((11844)>>2)]=$202;
 label=69;break;
 case 53: 
 var $204=$147;
 var $205=HEAP32[((11856)>>2)];
 var $206=($204>>>0)<($205>>>0);
 if($206){label=57;break;}else{label=54;break;}
 case 54: 
 var $208=(($147+16)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($209|0)==($144|0);
 if($210){label=55;break;}else{label=56;break;}
 case 55: 
 HEAP32[(($208)>>2)]=$R_1;
 label=58;break;
 case 56: 
 var $213=(($147+20)|0);
 HEAP32[(($213)>>2)]=$R_1;
 label=58;break;
 case 57: 
 _abort();
 throw "Reached an unreachable!";
 case 58: 
 var $216=($R_1|0)==0;
 if($216){label=69;break;}else{label=59;break;}
 case 59: 
 var $218=$R_1;
 var $219=HEAP32[((11856)>>2)];
 var $220=($218>>>0)<($219>>>0);
 if($220){label=68;break;}else{label=60;break;}
 case 60: 
 var $222=(($R_1+24)|0);
 HEAP32[(($222)>>2)]=$147;
 var $_sum12=((($3)+(16))|0);
 var $223=(($4+$_sum12)|0);
 var $224=$223;
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){label=64;break;}else{label=61;break;}
 case 61: 
 var $228=$225;
 var $229=HEAP32[((11856)>>2)];
 var $230=($228>>>0)<($229>>>0);
 if($230){label=63;break;}else{label=62;break;}
 case 62: 
 var $232=(($R_1+16)|0);
 HEAP32[(($232)>>2)]=$225;
 var $233=(($225+24)|0);
 HEAP32[(($233)>>2)]=$R_1;
 label=64;break;
 case 63: 
 _abort();
 throw "Reached an unreachable!";
 case 64: 
 var $_sum13=((($3)+(20))|0);
 var $236=(($4+$_sum13)|0);
 var $237=$236;
 var $238=HEAP32[(($237)>>2)];
 var $239=($238|0)==0;
 if($239){label=69;break;}else{label=65;break;}
 case 65: 
 var $241=$238;
 var $242=HEAP32[((11856)>>2)];
 var $243=($241>>>0)<($242>>>0);
 if($243){label=67;break;}else{label=66;break;}
 case 66: 
 var $245=(($R_1+20)|0);
 HEAP32[(($245)>>2)]=$238;
 var $246=(($238+24)|0);
 HEAP32[(($246)>>2)]=$R_1;
 label=69;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 _abort();
 throw "Reached an unreachable!";
 case 69: 
 var $250=($106>>>0)<16;
 if($250){label=70;break;}else{label=71;break;}
 case 70: 
 var $252=HEAP32[(($1)>>2)];
 var $253=$252&1;
 var $254=$103|$253;
 var $255=$254|2;
 HEAP32[(($1)>>2)]=$255;
 var $_sum910=$103|4;
 var $256=(($4+$_sum910)|0);
 var $257=$256;
 var $258=HEAP32[(($257)>>2)];
 var $259=$258|1;
 HEAP32[(($257)>>2)]=$259;
 var $newp_0=$p;label=73;break;
 case 71: 
 var $261=(($4+$nb)|0);
 var $262=$261;
 var $263=HEAP32[(($1)>>2)];
 var $264=$263&1;
 var $265=$264|$nb;
 var $266=$265|2;
 HEAP32[(($1)>>2)]=$266;
 var $_sum5=((($nb)+(4))|0);
 var $267=(($4+$_sum5)|0);
 var $268=$267;
 var $269=$106|3;
 HEAP32[(($268)>>2)]=$269;
 var $_sum78=$103|4;
 var $270=(($4+$_sum78)|0);
 var $271=$270;
 var $272=HEAP32[(($271)>>2)];
 var $273=$272|1;
 HEAP32[(($271)>>2)]=$273;
 _dispose_chunk($262,$106);
 var $newp_0=$p;label=73;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $newp_0;
 return $newp_0;
  default: assert(0, "bad label: " + label);
 }

}


function _dispose_chunk($p,$psize){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_02=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=135;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((11856)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((11860)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((11880+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((11840)>>2)];
 var $49=$48&$47;
 HEAP32[((11840)>>2)]=$49;
 var $_0=$16;var $_02=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre71=(($32+8)|0);
 var $_pre_phi72=$_pre71;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi72=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi72;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi72)>>2)]=$29;
 var $_0=$16;var $_02=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_02=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((12144+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=1<<$111;
 var $117=$116^-1;
 var $118=HEAP32[((11844)>>2)];
 var $119=$118&$117;
 HEAP32[((11844)>>2)]=$119;
 var $_0=$16;var $_02=$17;label=54;break;
 case 35: 
 var $121=$64;
 var $122=HEAP32[((11856)>>2)];
 var $123=($121>>>0)<($122>>>0);
 if($123){label=39;break;}else{label=36;break;}
 case 36: 
 var $125=(($64+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($126|0)==($61|0);
 if($127){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($125)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $130=(($64+20)|0);
 HEAP32[(($130)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $133=($R_1|0)==0;
 if($133){var $_0=$16;var $_02=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $135=$R_1;
 var $136=HEAP32[((11856)>>2)];
 var $137=($135>>>0)<($136>>>0);
 if($137){label=50;break;}else{label=42;break;}
 case 42: 
 var $139=(($R_1+24)|0);
 HEAP32[(($139)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $140=(($1+$_sum31)|0);
 var $141=$140;
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=46;break;}else{label=43;break;}
 case 43: 
 var $145=$142;
 var $146=HEAP32[((11856)>>2)];
 var $147=($145>>>0)<($146>>>0);
 if($147){label=45;break;}else{label=44;break;}
 case 44: 
 var $149=(($R_1+16)|0);
 HEAP32[(($149)>>2)]=$142;
 var $150=(($142+24)|0);
 HEAP32[(($150)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $153=(($1+$_sum32)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=($155|0)==0;
 if($156){var $_0=$16;var $_02=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $158=$155;
 var $159=HEAP32[((11856)>>2)];
 var $160=($158>>>0)<($159>>>0);
 if($160){label=49;break;}else{label=48;break;}
 case 48: 
 var $162=(($R_1+20)|0);
 HEAP32[(($162)>>2)]=$155;
 var $163=(($155+24)|0);
 HEAP32[(($163)>>2)]=$R_1;
 var $_0=$16;var $_02=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $167=(($1+$_sum)|0);
 var $168=$167;
 var $169=HEAP32[(($168)>>2)];
 var $170=$169&3;
 var $171=($170|0)==3;
 if($171){label=52;break;}else{var $_0=$16;var $_02=$17;label=54;break;}
 case 52: 
 HEAP32[((11848)>>2)]=$17;
 var $173=HEAP32[(($168)>>2)];
 var $174=$173&-2;
 HEAP32[(($168)>>2)]=$174;
 var $175=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $176=(($1+$_sum24)|0);
 var $177=$176;
 HEAP32[(($177)>>2)]=$175;
 var $178=$2;
 HEAP32[(($178)>>2)]=$17;
 label=135;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_02;
 var $_0;
 var $180=HEAP32[((11856)>>2)];
 var $181=($2>>>0)<($180>>>0);
 if($181){label=134;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $183=(($1+$_sum1)|0);
 var $184=$183;
 var $185=HEAP32[(($184)>>2)];
 var $186=$185&2;
 var $187=($186|0)==0;
 if($187){label=56;break;}else{label=109;break;}
 case 56: 
 var $189=HEAP32[((11864)>>2)];
 var $190=($3|0)==($189|0);
 if($190){label=57;break;}else{label=59;break;}
 case 57: 
 var $192=HEAP32[((11852)>>2)];
 var $193=((($192)+($_02))|0);
 HEAP32[((11852)>>2)]=$193;
 HEAP32[((11864)>>2)]=$_0;
 var $194=$193|1;
 var $195=(($_0+4)|0);
 HEAP32[(($195)>>2)]=$194;
 var $196=HEAP32[((11860)>>2)];
 var $197=($_0|0)==($196|0);
 if($197){label=58;break;}else{label=135;break;}
 case 58: 
 HEAP32[((11860)>>2)]=0;
 HEAP32[((11848)>>2)]=0;
 label=135;break;
 case 59: 
 var $200=HEAP32[((11860)>>2)];
 var $201=($3|0)==($200|0);
 if($201){label=60;break;}else{label=61;break;}
 case 60: 
 var $203=HEAP32[((11848)>>2)];
 var $204=((($203)+($_02))|0);
 HEAP32[((11848)>>2)]=$204;
 HEAP32[((11860)>>2)]=$_0;
 var $205=$204|1;
 var $206=(($_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=$_0;
 var $208=(($207+$204)|0);
 var $209=$208;
 HEAP32[(($209)>>2)]=$204;
 label=135;break;
 case 61: 
 var $211=$185&-8;
 var $212=((($211)+($_02))|0);
 var $213=$185>>>3;
 var $214=($185>>>0)<256;
 if($214){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $216=(($1+$_sum20)|0);
 var $217=$216;
 var $218=HEAP32[(($217)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $219=(($1+$_sum21)|0);
 var $220=$219;
 var $221=HEAP32[(($220)>>2)];
 var $222=$213<<1;
 var $223=((11880+($222<<2))|0);
 var $224=$223;
 var $225=($218|0)==($224|0);
 if($225){label=65;break;}else{label=63;break;}
 case 63: 
 var $227=$218;
 var $228=($227>>>0)<($180>>>0);
 if($228){label=73;break;}else{label=64;break;}
 case 64: 
 var $230=(($218+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($231|0)==($3|0);
 if($232){label=65;break;}else{label=73;break;}
 case 65: 
 var $233=($221|0)==($218|0);
 if($233){label=66;break;}else{label=67;break;}
 case 66: 
 var $235=1<<$213;
 var $236=$235^-1;
 var $237=HEAP32[((11840)>>2)];
 var $238=$237&$236;
 HEAP32[((11840)>>2)]=$238;
 label=107;break;
 case 67: 
 var $240=($221|0)==($224|0);
 if($240){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre69=(($221+8)|0);
 var $_pre_phi70=$_pre69;label=71;break;
 case 69: 
 var $242=$221;
 var $243=($242>>>0)<($180>>>0);
 if($243){label=72;break;}else{label=70;break;}
 case 70: 
 var $245=(($221+8)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=($246|0)==($3|0);
 if($247){var $_pre_phi70=$245;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi70;
 var $248=(($218+12)|0);
 HEAP32[(($248)>>2)]=$221;
 HEAP32[(($_pre_phi70)>>2)]=$218;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $250=$2;
 var $_sum2=((($psize)+(24))|0);
 var $251=(($1+$_sum2)|0);
 var $252=$251;
 var $253=HEAP32[(($252)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $254=(($1+$_sum3)|0);
 var $255=$254;
 var $256=HEAP32[(($255)>>2)];
 var $257=($256|0)==($250|0);
 if($257){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $259=(($1+$_sum18)|0);
 var $260=$259;
 var $261=HEAP32[(($260)>>2)];
 var $262=$261;
 var $263=($262>>>0)<($180>>>0);
 if($263){label=79;break;}else{label=76;break;}
 case 76: 
 var $265=(($261+12)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=($266|0)==($250|0);
 if($267){label=77;break;}else{label=79;break;}
 case 77: 
 var $269=(($256+8)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=($270|0)==($250|0);
 if($271){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($265)>>2)]=$256;
 HEAP32[(($269)>>2)]=$261;
 var $R7_1=$256;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $274=(($1+$_sum5)|0);
 var $275=$274;
 var $276=HEAP32[(($275)>>2)];
 var $277=($276|0)==0;
 if($277){label=81;break;}else{var $R7_0=$276;var $RP9_0=$275;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $279=(($1+$_sum4)|0);
 var $280=$279;
 var $281=HEAP32[(($280)>>2)];
 var $282=($281|0)==0;
 if($282){var $R7_1=0;label=87;break;}else{var $R7_0=$281;var $RP9_0=$280;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $283=(($R7_0+20)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=($284|0)==0;
 if($285){label=83;break;}else{var $R7_0=$284;var $RP9_0=$283;label=82;break;}
 case 83: 
 var $287=(($R7_0+16)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=($288|0)==0;
 if($289){label=84;break;}else{var $R7_0=$288;var $RP9_0=$287;label=82;break;}
 case 84: 
 var $291=$RP9_0;
 var $292=($291>>>0)<($180>>>0);
 if($292){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $296=($253|0)==0;
 if($296){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $298=(($1+$_sum15)|0);
 var $299=$298;
 var $300=HEAP32[(($299)>>2)];
 var $301=((12144+($300<<2))|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($250|0)==($302|0);
 if($303){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($301)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $305=1<<$300;
 var $306=$305^-1;
 var $307=HEAP32[((11844)>>2)];
 var $308=$307&$306;
 HEAP32[((11844)>>2)]=$308;
 label=107;break;
 case 91: 
 var $310=$253;
 var $311=HEAP32[((11856)>>2)];
 var $312=($310>>>0)<($311>>>0);
 if($312){label=95;break;}else{label=92;break;}
 case 92: 
 var $314=(($253+16)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($315|0)==($250|0);
 if($316){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($314)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $319=(($253+20)|0);
 HEAP32[(($319)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $322=($R7_1|0)==0;
 if($322){label=107;break;}else{label=97;break;}
 case 97: 
 var $324=$R7_1;
 var $325=HEAP32[((11856)>>2)];
 var $326=($324>>>0)<($325>>>0);
 if($326){label=106;break;}else{label=98;break;}
 case 98: 
 var $328=(($R7_1+24)|0);
 HEAP32[(($328)>>2)]=$253;
 var $_sum16=((($psize)+(16))|0);
 var $329=(($1+$_sum16)|0);
 var $330=$329;
 var $331=HEAP32[(($330)>>2)];
 var $332=($331|0)==0;
 if($332){label=102;break;}else{label=99;break;}
 case 99: 
 var $334=$331;
 var $335=HEAP32[((11856)>>2)];
 var $336=($334>>>0)<($335>>>0);
 if($336){label=101;break;}else{label=100;break;}
 case 100: 
 var $338=(($R7_1+16)|0);
 HEAP32[(($338)>>2)]=$331;
 var $339=(($331+24)|0);
 HEAP32[(($339)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $342=(($1+$_sum17)|0);
 var $343=$342;
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=107;break;}else{label=103;break;}
 case 103: 
 var $347=$344;
 var $348=HEAP32[((11856)>>2)];
 var $349=($347>>>0)<($348>>>0);
 if($349){label=105;break;}else{label=104;break;}
 case 104: 
 var $351=(($R7_1+20)|0);
 HEAP32[(($351)>>2)]=$344;
 var $352=(($344+24)|0);
 HEAP32[(($352)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $355=$212|1;
 var $356=(($_0+4)|0);
 HEAP32[(($356)>>2)]=$355;
 var $357=$_0;
 var $358=(($357+$212)|0);
 var $359=$358;
 HEAP32[(($359)>>2)]=$212;
 var $360=HEAP32[((11860)>>2)];
 var $361=($_0|0)==($360|0);
 if($361){label=108;break;}else{var $_1=$212;label=110;break;}
 case 108: 
 HEAP32[((11848)>>2)]=$212;
 label=135;break;
 case 109: 
 var $364=$185&-2;
 HEAP32[(($184)>>2)]=$364;
 var $365=$_02|1;
 var $366=(($_0+4)|0);
 HEAP32[(($366)>>2)]=$365;
 var $367=$_0;
 var $368=(($367+$_02)|0);
 var $369=$368;
 HEAP32[(($369)>>2)]=$_02;
 var $_1=$_02;label=110;break;
 case 110: 
 var $_1;
 var $371=$_1>>>3;
 var $372=($_1>>>0)<256;
 if($372){label=111;break;}else{label=116;break;}
 case 111: 
 var $374=$371<<1;
 var $375=((11880+($374<<2))|0);
 var $376=$375;
 var $377=HEAP32[((11840)>>2)];
 var $378=1<<$371;
 var $379=$377&$378;
 var $380=($379|0)==0;
 if($380){label=112;break;}else{label=113;break;}
 case 112: 
 var $382=$377|$378;
 HEAP32[((11840)>>2)]=$382;
 var $_sum13_pre=((($374)+(2))|0);
 var $_pre=((11880+($_sum13_pre<<2))|0);
 var $F16_0=$376;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($374)+(2))|0);
 var $384=((11880+($_sum14<<2))|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=$385;
 var $387=HEAP32[((11856)>>2)];
 var $388=($386>>>0)<($387>>>0);
 if($388){label=114;break;}else{var $F16_0=$385;var $_pre_phi=$384;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $391=(($F16_0+12)|0);
 HEAP32[(($391)>>2)]=$_0;
 var $392=(($_0+8)|0);
 HEAP32[(($392)>>2)]=$F16_0;
 var $393=(($_0+12)|0);
 HEAP32[(($393)>>2)]=$376;
 label=135;break;
 case 116: 
 var $395=$_0;
 var $396=$_1>>>8;
 var $397=($396|0)==0;
 if($397){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $399=($_1>>>0)>16777215;
 if($399){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $401=((($396)+(1048320))|0);
 var $402=$401>>>16;
 var $403=$402&8;
 var $404=$396<<$403;
 var $405=((($404)+(520192))|0);
 var $406=$405>>>16;
 var $407=$406&4;
 var $408=$407|$403;
 var $409=$404<<$407;
 var $410=((($409)+(245760))|0);
 var $411=$410>>>16;
 var $412=$411&2;
 var $413=$408|$412;
 var $414=(((14)-($413))|0);
 var $415=$409<<$412;
 var $416=$415>>>15;
 var $417=((($414)+($416))|0);
 var $418=$417<<1;
 var $419=((($417)+(7))|0);
 var $420=$_1>>>($419>>>0);
 var $421=$420&1;
 var $422=$421|$418;
 var $I19_0=$422;label=119;break;
 case 119: 
 var $I19_0;
 var $424=((12144+($I19_0<<2))|0);
 var $425=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($425)>>2)]=$I19_0_c;
 var $426=(($_0+20)|0);
 HEAP32[(($426)>>2)]=0;
 var $427=(($_0+16)|0);
 HEAP32[(($427)>>2)]=0;
 var $428=HEAP32[((11844)>>2)];
 var $429=1<<$I19_0;
 var $430=$428&$429;
 var $431=($430|0)==0;
 if($431){label=120;break;}else{label=121;break;}
 case 120: 
 var $433=$428|$429;
 HEAP32[((11844)>>2)]=$433;
 HEAP32[(($424)>>2)]=$395;
 var $434=(($_0+24)|0);
 var $_c=$424;
 HEAP32[(($434)>>2)]=$_c;
 var $435=(($_0+12)|0);
 HEAP32[(($435)>>2)]=$_0;
 var $436=(($_0+8)|0);
 HEAP32[(($436)>>2)]=$_0;
 label=135;break;
 case 121: 
 var $438=HEAP32[(($424)>>2)];
 var $439=($I19_0|0)==31;
 if($439){var $444=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $441=$I19_0>>>1;
 var $442=(((25)-($441))|0);
 var $444=$442;label=123;break;
 case 123: 
 var $444;
 var $445=(($438+4)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=$446&-8;
 var $448=($447|0)==($_1|0);
 if($448){var $T_0_lcssa=$438;label=130;break;}else{label=124;break;}
 case 124: 
 var $449=$_1<<$444;
 var $T_055=$438;var $K20_056=$449;label=126;break;
 case 125: 
 var $451=$K20_056<<1;
 var $452=(($459+4)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=$453&-8;
 var $455=($454|0)==($_1|0);
 if($455){var $T_0_lcssa=$459;label=130;break;}else{var $T_055=$459;var $K20_056=$451;label=126;break;}
 case 126: 
 var $K20_056;
 var $T_055;
 var $457=$K20_056>>>31;
 var $458=(($T_055+16+($457<<2))|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=($459|0)==0;
 if($460){label=127;break;}else{label=125;break;}
 case 127: 
 var $462=$458;
 var $463=HEAP32[((11856)>>2)];
 var $464=($462>>>0)<($463>>>0);
 if($464){label=129;break;}else{label=128;break;}
 case 128: 
 HEAP32[(($458)>>2)]=$395;
 var $466=(($_0+24)|0);
 var $T_0_c10=$T_055;
 HEAP32[(($466)>>2)]=$T_0_c10;
 var $467=(($_0+12)|0);
 HEAP32[(($467)>>2)]=$_0;
 var $468=(($_0+8)|0);
 HEAP32[(($468)>>2)]=$_0;
 label=135;break;
 case 129: 
 _abort();
 throw "Reached an unreachable!";
 case 130: 
 var $T_0_lcssa;
 var $470=(($T_0_lcssa+8)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$T_0_lcssa;
 var $473=HEAP32[((11856)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=133;break;}else{label=131;break;}
 case 131: 
 var $476=$471;
 var $477=($476>>>0)<($473>>>0);
 if($477){label=133;break;}else{label=132;break;}
 case 132: 
 var $479=(($471+12)|0);
 HEAP32[(($479)>>2)]=$395;
 HEAP32[(($470)>>2)]=$395;
 var $480=(($_0+8)|0);
 var $_c9=$471;
 HEAP32[(($480)>>2)]=$_c9;
 var $481=(($_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($481)>>2)]=$T_0_c;
 var $482=(($_0+24)|0);
 HEAP32[(($482)>>2)]=0;
 label=135;break;
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 _abort();
 throw "Reached an unreachable!";
 case 135: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __Znwj($size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($size|0)==0;
 var $_size=($1?1:$size);
 label=2;break;
 case 2: 
 var $3=_malloc($_size);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=10;break;}
 case 3: 
 var $6=(tempValue=HEAP32[((15864)>>2)],HEAP32[((15864)>>2)]=tempValue+0,tempValue);
 var $7=($6|0)==0;
 if($7){label=9;break;}else{label=4;break;}
 case 4: 
 var $9=$6;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=7;break;
 case 7: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $11=$lpad_phi$1;
 var $12=($11|0)<0;
 if($12){label=8;break;}else{label=11;break;}
 case 8: 
 var $14=$lpad_phi$0;
 ___cxa_call_unexpected($14);
 throw "Reached an unreachable!";
 case 9: 
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=4024;
 (function() { try { __THREW__ = 0; return ___cxa_throw($16,10088,(74)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=6;break; }
 case 10: 
 return $3;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __Znaj($size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 return $1;
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=$4$1;
 var $6=($5|0)<0;
 if($6){label=4;break;}else{label=5;break;}
 case 4: 
 var $8=$4$0;
 ___cxa_call_unexpected($8);
 throw "Reached an unreachable!";
 case 5: 
 ___resumeException($4$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZdlPv($ptr){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ptr|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 _free($ptr);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZdaPv($ptr){
 var label=0;


 __ZdlPv($ptr);
 return;
}


function __ZNSt9bad_allocD0Ev($this){
 var label=0;


 var $1=(($this)|0);

 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt9bad_allocD2Ev($this){
 var label=0;


 var $1=(($this)|0);

 return;
}


function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;


 return 2016;
}


function __ZSt17__throw_bad_allocv(){
 var label=0;


 var $1=___cxa_allocate_exception(4);
 var $2=$1;
 HEAP32[(($2)>>2)]=4024;
 ___cxa_throw($1,10088,(74));
 throw "Reached an unreachable!";
}


function ___floatscan($f,$prec,$pok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $x_i=sp;
 if(($prec|0)==1){ label=2;break;}else if(($prec|0)==2){ label=3;break;}else if(($prec|0)==0){ var $emin_0_ph=-149;var $bits_0_ph=24;label=4;break;}else{var $_0=0;label=273;break;}
 case 2: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 3: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 4: 
 var $bits_0_ph;
 var $emin_0_ph;
 var $3=(($f+4)|0);
 var $4=(($f+100)|0);
 label=5;break;
 case 5: 
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=6;break;}else{label=7;break;}
 case 6: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $12=($11&255);
 var $16=$12;label=8;break;
 case 7: 
 var $14=___shgetc($f);
 var $16=$14;label=8;break;
 case 8: 
 var $16;
 var $17=_isspace($16);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=5;break;}
 case 9: 
 var $20=($16|0)==45;
 if(($16|0)==45|($16|0)==43){ label=10;break;}else{var $c_0=$16;var $sign_0=1;label=13;break;}
 case 10: 
 var $22=($20&1);
 var $23=$22<<1;
 var $24=(((1)-($23))|0);
 var $25=HEAP32[(($3)>>2)];
 var $26=HEAP32[(($4)>>2)];
 var $27=($25>>>0)<($26>>>0);
 if($27){label=11;break;}else{label=12;break;}
 case 11: 
 var $29=(($25+1)|0);
 HEAP32[(($3)>>2)]=$29;
 var $30=HEAP8[($25)];
 var $31=($30&255);
 var $c_0=$31;var $sign_0=$24;label=13;break;
 case 12: 
 var $33=___shgetc($f);
 var $c_0=$33;var $sign_0=$24;label=13;break;
 case 13: 
 var $sign_0;
 var $c_0;
 var $i_068=0;var $c_169=$c_0;label=14;break;
 case 14: 
 var $c_169;
 var $i_068;
 var $36=$c_169|32;
 var $37=((944+$i_068)|0);
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=($36|0)==($39|0);
 if($40){label=15;break;}else{var $i_0_lcssa=$i_068;var $c_1_lcssa=$c_169;label=20;break;}
 case 15: 
 var $42=($i_068>>>0)<7;
 if($42){label=16;break;}else{var $c_2=$c_169;label=19;break;}
 case 16: 
 var $44=HEAP32[(($3)>>2)];
 var $45=HEAP32[(($4)>>2)];
 var $46=($44>>>0)<($45>>>0);
 if($46){label=17;break;}else{label=18;break;}
 case 17: 
 var $48=(($44+1)|0);
 HEAP32[(($3)>>2)]=$48;
 var $49=HEAP8[($44)];
 var $50=($49&255);
 var $c_2=$50;label=19;break;
 case 18: 
 var $52=___shgetc($f);
 var $c_2=$52;label=19;break;
 case 19: 
 var $c_2;
 var $54=((($i_068)+(1))|0);
 var $55=($54>>>0)<8;
 if($55){var $i_068=$54;var $c_169=$c_2;label=14;break;}else{var $i_0_lcssa=$54;var $c_1_lcssa=$c_2;label=20;break;}
 case 20: 
 var $c_1_lcssa;
 var $i_0_lcssa;
 if(($i_0_lcssa|0)==3){ label=23;break;}else if(($i_0_lcssa|0)==8){ label=27;break;}else{label=21;break;}
 case 21: 
 var $57=($i_0_lcssa>>>0)<4;
 var $58=($pok|0)==0;
 var $or_cond=$57|$58;
 if($or_cond){label=28;break;}else{label=22;break;}
 case 22: 
 var $60=($i_0_lcssa|0)==8;
 if($60){label=27;break;}else{label=23;break;}
 case 23: 
 var $61=HEAP32[(($4)>>2)];
 var $62=($61|0)==0;
 if($62){label=25;break;}else{label=24;break;}
 case 24: 
 var $64=HEAP32[(($3)>>2)];
 var $65=((($64)-(1))|0);
 HEAP32[(($3)>>2)]=$65;
 label=25;break;
 case 25: 
 var $notlhs=($pok|0)==0;
 var $notrhs=($i_0_lcssa>>>0)<4;
 var $or_cond106_not=$notrhs|$notlhs;
 var $brmerge=$or_cond106_not|$62;
 if($brmerge){label=27;break;}else{var $i_166=$i_0_lcssa;label=26;break;}
 case 26: 
 var $i_166;
 var $68=HEAP32[(($3)>>2)];
 var $69=((($68)-(1))|0);
 HEAP32[(($3)>>2)]=$69;
 var $70=((($i_166)-(1))|0);
 var $71=($70>>>0)>3;
 if($71){var $i_166=$70;label=26;break;}else{label=27;break;}
 case 27: 
 var $72=($sign_0|0);
 var $73=($72)*(Infinity);
 var $74=$73;
 var $_0=$74;label=273;break;
 case 28: 
 var $76=($i_0_lcssa|0)==0;
 if($76){var $i_263=0;var $c_364=$c_1_lcssa;label=29;break;}else{var $c_5=$c_1_lcssa;var $i_3=$i_0_lcssa;label=35;break;}
 case 29: 
 var $c_364;
 var $i_263;
 var $77=$c_364|32;
 var $78=((2608+$i_263)|0);
 var $79=HEAP8[($78)];
 var $80=(($79<<24)>>24);
 var $81=($77|0)==($80|0);
 if($81){label=30;break;}else{var $c_5=$c_364;var $i_3=$i_263;label=35;break;}
 case 30: 
 var $83=($i_263>>>0)<2;
 if($83){label=31;break;}else{var $c_4=$c_364;label=34;break;}
 case 31: 
 var $85=HEAP32[(($3)>>2)];
 var $86=HEAP32[(($4)>>2)];
 var $87=($85>>>0)<($86>>>0);
 if($87){label=32;break;}else{label=33;break;}
 case 32: 
 var $89=(($85+1)|0);
 HEAP32[(($3)>>2)]=$89;
 var $90=HEAP8[($85)];
 var $91=($90&255);
 var $c_4=$91;label=34;break;
 case 33: 
 var $93=___shgetc($f);
 var $c_4=$93;label=34;break;
 case 34: 
 var $c_4;
 var $95=((($i_263)+(1))|0);
 var $96=($95>>>0)<3;
 if($96){var $i_263=$95;var $c_364=$c_4;label=29;break;}else{var $c_5=$c_4;var $i_3=$95;label=35;break;}
 case 35: 
 var $i_3;
 var $c_5;
 if(($i_3|0)==3){ label=36;break;}else if(($i_3|0)==0){ label=58;break;}else{label=55;break;}
 case 36: 
 var $98=HEAP32[(($3)>>2)];
 var $99=HEAP32[(($4)>>2)];
 var $100=($98>>>0)<($99>>>0);
 if($100){label=37;break;}else{label=38;break;}
 case 37: 
 var $102=(($98+1)|0);
 HEAP32[(($3)>>2)]=$102;
 var $103=HEAP8[($98)];
 var $104=($103&255);
 var $108=$104;label=39;break;
 case 38: 
 var $106=___shgetc($f);
 var $108=$106;label=39;break;
 case 39: 
 var $108;
 var $109=($108|0)==40;
 if($109){var $i_4=1;label=42;break;}else{label=40;break;}
 case 40: 
 var $111=HEAP32[(($4)>>2)];
 var $112=($111|0)==0;
 if($112){var $_0=NaN;label=273;break;}else{label=41;break;}
 case 41: 
 var $114=HEAP32[(($3)>>2)];
 var $115=((($114)-(1))|0);
 HEAP32[(($3)>>2)]=$115;
 var $_0=NaN;label=273;break;
 case 42: 
 var $i_4;
 var $116=HEAP32[(($3)>>2)];
 var $117=HEAP32[(($4)>>2)];
 var $118=($116>>>0)<($117>>>0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=(($116+1)|0);
 HEAP32[(($3)>>2)]=$120;
 var $121=HEAP8[($116)];
 var $122=($121&255);
 var $126=$122;label=45;break;
 case 44: 
 var $124=___shgetc($f);
 var $126=$124;label=45;break;
 case 45: 
 var $126;
 var $127=((($126)-(48))|0);
 var $128=($127>>>0)<10;
 var $129=((($126)-(65))|0);
 var $130=($129>>>0)<26;
 var $or_cond8=$128|$130;
 if($or_cond8){label=54;break;}else{label=46;break;}
 case 46: 
 var $132=((($126)-(97))|0);
 var $133=($132>>>0)<26;
 var $134=($126|0)==95;
 var $or_cond5=$133|$134;
 if($or_cond5){label=54;break;}else{label=47;break;}
 case 47: 
 var $136=($126|0)==41;
 if($136){var $_0=NaN;label=273;break;}else{label=48;break;}
 case 48: 
 var $138=HEAP32[(($4)>>2)];
 var $139=($138|0)==0;
 if($139){label=50;break;}else{label=49;break;}
 case 49: 
 var $141=HEAP32[(($3)>>2)];
 var $142=((($141)-(1))|0);
 HEAP32[(($3)>>2)]=$142;
 label=50;break;
 case 50: 
 if($58){label=52;break;}else{label=51;break;}
 case 51: 
 var $144=($i_4|0)==0;
 var $brmerge107=$144|$139;
 if($brmerge107){var $_0=NaN;label=273;break;}else{var $_in=$i_4;label=53;break;}
 case 52: 
 var $146=___errno_location();
 HEAP32[(($146)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 53: 
 var $_in;
 var $147=((($_in)-(1))|0);
 var $148=HEAP32[(($3)>>2)];
 var $149=((($148)-(1))|0);
 HEAP32[(($3)>>2)]=$149;
 var $150=($147|0)==0;
 if($150){var $_0=NaN;label=273;break;}else{var $_in=$147;label=53;break;}
 case 54: 
 var $152=((($i_4)+(1))|0);
 var $i_4=$152;label=42;break;
 case 55: 
 var $154=HEAP32[(($4)>>2)];
 var $155=($154|0)==0;
 if($155){label=57;break;}else{label=56;break;}
 case 56: 
 var $157=HEAP32[(($3)>>2)];
 var $158=((($157)-(1))|0);
 HEAP32[(($3)>>2)]=$158;
 label=57;break;
 case 57: 
 var $160=___errno_location();
 HEAP32[(($160)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 58: 
 var $162=($c_5|0)==48;
 if($162){label=59;break;}else{var $c_6=$c_5;label=134;break;}
 case 59: 
 var $164=HEAP32[(($3)>>2)];
 var $165=HEAP32[(($4)>>2)];
 var $166=($164>>>0)<($165>>>0);
 if($166){label=60;break;}else{label=61;break;}
 case 60: 
 var $168=(($164+1)|0);
 HEAP32[(($3)>>2)]=$168;
 var $169=HEAP8[($164)];
 var $170=($169&255);
 var $174=$170;label=62;break;
 case 61: 
 var $172=___shgetc($f);
 var $174=$172;label=62;break;
 case 62: 
 var $174;
 var $175=$174|32;
 var $176=($175|0)==120;
 if($176){label=63;break;}else{label=132;break;}
 case 63: 
 var $178=HEAP32[(($3)>>2)];
 var $179=HEAP32[(($4)>>2)];
 var $180=($178>>>0)<($179>>>0);
 if($180){label=64;break;}else{label=65;break;}
 case 64: 
 var $182=(($178+1)|0);
 HEAP32[(($3)>>2)]=$182;
 var $183=HEAP8[($178)];
 var $184=($183&255);
 var $c_0_i=$184;var $gotdig_0_i=0;label=66;break;
 case 65: 
 var $186=___shgetc($f);
 var $c_0_i=$186;var $gotdig_0_i=0;label=66;break;
 case 66: 
 var $gotdig_0_i;
 var $c_0_i;
 if(($c_0_i|0)==48){ label=67;break;}else if(($c_0_i|0)==46){ label=70;break;}else{var $c_2_i=$c_0_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=0;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 67: 
 var $188=HEAP32[(($3)>>2)];
 var $189=HEAP32[(($4)>>2)];
 var $190=($188>>>0)<($189>>>0);
 if($190){label=68;break;}else{label=69;break;}
 case 68: 
 var $192=(($188+1)|0);
 HEAP32[(($3)>>2)]=$192;
 var $193=HEAP8[($188)];
 var $194=($193&255);
 var $c_0_i=$194;var $gotdig_0_i=1;label=66;break;
 case 69: 
 var $196=___shgetc($f);
 var $c_0_i=$196;var $gotdig_0_i=1;label=66;break;
 case 70: 
 var $198=HEAP32[(($3)>>2)];
 var $199=HEAP32[(($4)>>2)];
 var $200=($198>>>0)<($199>>>0);
 if($200){label=71;break;}else{label=72;break;}
 case 71: 
 var $202=(($198+1)|0);
 HEAP32[(($3)>>2)]=$202;
 var $203=HEAP8[($198)];
 var $204=($203&255);
 var $c_1_ph_i=$204;label=73;break;
 case 72: 
 var $206=___shgetc($f);
 var $c_1_ph_i=$206;label=73;break;
 case 73: 
 var $c_1_ph_i;
 var $207=($c_1_ph_i|0)==48;
 if($207){var $rp_021_i$1=-1;var $rp_021_i$0=-1;label=74;break;}else{var $c_2_i=$c_1_ph_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 74: 
 var $rp_021_i$0;
 var $rp_021_i$1;
 var $208=HEAP32[(($3)>>2)];
 var $209=HEAP32[(($4)>>2)];
 var $210=($208>>>0)<($209>>>0);
 if($210){label=75;break;}else{label=76;break;}
 case 75: 
 var $212=(($208+1)|0);
 HEAP32[(($3)>>2)]=$212;
 var $213=HEAP8[($208)];
 var $214=($213&255);
 var $218=$214;label=77;break;
 case 76: 
 var $216=___shgetc($f);
 var $218=$216;label=77;break;
 case 77: 
 var $218;
 var $219=($218|0)==48;
 if($219){label=78;break;}else{var $c_2_i=$218;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=$rp_021_i$1;var $rp_1_i$0=$rp_021_i$0;var $gotdig_2_i=1;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 78: 
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $phitmp_i$0=_i64Add($rp_021_i$0,$rp_021_i$1,$$etemp$0$0,$$etemp$0$1);var $phitmp_i$1=tempRet0;
 var $rp_021_i$1=$phitmp_i$1;var $rp_021_i$0=$phitmp_i$0;label=74;break;
 case 79: 
 var $x_0_i;
 var $y_0_i;
 var $scale_0_i;
 var $gottail_0_i;
 var $gotrad_0_i;
 var $gotdig_2_i;
 var $rp_1_i$0;
 var $rp_1_i$1;
 var $dc_0_i$0;
 var $dc_0_i$1;
 var $c_2_i;
 var $220=((($c_2_i)-(48))|0);
 var $221=($220>>>0)<10;
 if($221){var $d_0_i=$220;label=84;break;}else{label=80;break;}
 case 80: 
 var $223=$c_2_i|32;
 var $224=((($223)-(97))|0);
 var $225=($224>>>0)<6;
 var $226=($c_2_i|0)==46;
 var $or_cond_i=$225|$226;
 if($or_cond_i){label=81;break;}else{var $c_2_lcssa_i=$c_2_i;label=94;break;}
 case 81: 
 if($226){label=82;break;}else{label=83;break;}
 case 82: 
 var $228=($gotrad_0_i|0)==0;
 if($228){var $dc_1_i$1=$dc_0_i$1;var $dc_1_i$0=$dc_0_i$0;var $rp_2_i$1=$dc_0_i$1;var $rp_2_i$0=$dc_0_i$0;var $gotdig_3_i=$gotdig_2_i;var $gotrad_1_i=1;var $gottail_2_i=$gottail_0_i;var $scale_2_i=$scale_0_i;var $y_2_i=$y_0_i;var $x_2_i=$x_0_i;label=91;break;}else{var $c_2_lcssa_i=46;label=94;break;}
 case 83: 
 var $230=($c_2_i|0)>57;
 var $231=((($223)-(87))|0);
 var $_38_i=($230?$231:$220);
 var $d_0_i=$_38_i;label=84;break;
 case 84: 
 var $d_0_i;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;
 var $232=(($dc_0_i$1|0) < ($$etemp$1$1|0)) | (((($dc_0_i$1|0) == ($$etemp$1$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$1$0>>>0))));
 if($232){label=85;break;}else{label=86;break;}
 case 85: 
 var $234=$x_0_i<<4;
 var $235=((($d_0_i)+($234))|0);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$235;label=90;break;
 case 86: 
 var $$etemp$2$0=14;
 var $$etemp$2$1=0;
 var $237=(($dc_0_i$1|0) < ($$etemp$2$1|0)) | (((($dc_0_i$1|0) == ($$etemp$2$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$2$0>>>0))));
 if($237){label=87;break;}else{label=88;break;}
 case 87: 
 var $239=($d_0_i|0);
 var $240=($scale_0_i)*((0.0625));
 var $241=($240)*($239);
 var $242=($y_0_i)+($241);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$240;var $y_1_i=$242;var $x_1_i=$x_0_i;label=90;break;
 case 88: 
 var $244=($d_0_i|0)!=0;
 var $245=($gottail_0_i|0)==0;
 var $or_cond3_i=$244&$245;
 if($or_cond3_i){label=89;break;}else{var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$x_0_i;label=90;break;}
 case 89: 
 var $247=($scale_0_i)*((0.5));
 var $248=($y_0_i)+($247);
 var $gottail_1_i=1;var $scale_1_i=$scale_0_i;var $y_1_i=$248;var $x_1_i=$x_0_i;label=90;break;
 case 90: 
 var $x_1_i;
 var $y_1_i;
 var $scale_1_i;
 var $gottail_1_i;
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;
 var $250$0=_i64Add($dc_0_i$0,$dc_0_i$1,$$etemp$3$0,$$etemp$3$1);var $250$1=tempRet0;
 var $dc_1_i$1=$250$1;var $dc_1_i$0=$250$0;var $rp_2_i$1=$rp_1_i$1;var $rp_2_i$0=$rp_1_i$0;var $gotdig_3_i=1;var $gotrad_1_i=$gotrad_0_i;var $gottail_2_i=$gottail_1_i;var $scale_2_i=$scale_1_i;var $y_2_i=$y_1_i;var $x_2_i=$x_1_i;label=91;break;
 case 91: 
 var $x_2_i;
 var $y_2_i;
 var $scale_2_i;
 var $gottail_2_i;
 var $gotrad_1_i;
 var $gotdig_3_i;
 var $rp_2_i$0;
 var $rp_2_i$1;
 var $dc_1_i$0;
 var $dc_1_i$1;
 var $251=HEAP32[(($3)>>2)];
 var $252=HEAP32[(($4)>>2)];
 var $253=($251>>>0)<($252>>>0);
 if($253){label=92;break;}else{label=93;break;}
 case 92: 
 var $255=(($251+1)|0);
 HEAP32[(($3)>>2)]=$255;
 var $256=HEAP8[($251)];
 var $257=($256&255);
 var $c_2_i=$257;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=79;break;
 case 93: 
 var $259=___shgetc($f);
 var $c_2_i=$259;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=79;break;
 case 94: 
 var $c_2_lcssa_i;
 var $261=($gotdig_2_i|0)==0;
 if($261){label=95;break;}else{label=103;break;}
 case 95: 
 var $263=HEAP32[(($4)>>2)];
 var $264=($263|0)==0;
 if($264){label=97;break;}else{label=96;break;}
 case 96: 
 var $266=HEAP32[(($3)>>2)];
 var $267=((($266)-(1))|0);
 HEAP32[(($3)>>2)]=$267;
 label=97;break;
 case 97: 
 if($58){label=101;break;}else{label=98;break;}
 case 98: 
 if($264){label=102;break;}else{label=99;break;}
 case 99: 
 var $271=HEAP32[(($3)>>2)];
 var $272=((($271)-(1))|0);
 HEAP32[(($3)>>2)]=$272;
 var $273=($gotrad_0_i|0)==0;
 if($273){label=102;break;}else{label=100;break;}
 case 100: 
 var $275=((($271)-(2))|0);
 HEAP32[(($3)>>2)]=$275;
 label=102;break;
 case 101: 
 ___shlim($f,0);
 label=102;break;
 case 102: 
 var $277=($sign_0|0);
 var $278=($277)*(0);
 var $_0=$278;label=273;break;
 case 103: 
 var $280=($gotrad_0_i|0)==0;
 var $dc_0_rp_1_i$0=($280?$dc_0_i$0:$rp_1_i$0);
 var $dc_0_rp_1_i$1=($280?$dc_0_i$1:$rp_1_i$1);
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;
 var $281=(($dc_0_i$1|0) < ($$etemp$4$1|0)) | (((($dc_0_i$1|0) == ($$etemp$4$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$4$0>>>0))));
 if($281){var $x_313_i=$x_0_i;var $dc_214_i$1=$dc_0_i$1;var $dc_214_i$0=$dc_0_i$0;label=104;break;}else{var $x_3_lcssa_i=$x_0_i;label=105;break;}
 case 104: 
 var $dc_214_i$0;
 var $dc_214_i$1;
 var $x_313_i;
 var $282=$x_313_i<<4;
 var $$etemp$5$0=1;
 var $$etemp$5$1=0;
 var $283$0=_i64Add($dc_214_i$0,$dc_214_i$1,$$etemp$5$0,$$etemp$5$1);var $283$1=tempRet0;
 var $$etemp$6$0=8;
 var $$etemp$6$1=0;
 var $284=(($283$1|0) < ($$etemp$6$1|0)) | (((($283$1|0) == ($$etemp$6$1|0) & ($283$0>>>0) <  ($$etemp$6$0>>>0))));
 if($284){var $x_313_i=$282;var $dc_214_i$1=$283$1;var $dc_214_i$0=$283$0;label=104;break;}else{var $x_3_lcssa_i=$282;label=105;break;}
 case 105: 
 var $x_3_lcssa_i;
 var $285=$c_2_lcssa_i|32;
 var $286=($285|0)==112;
 if($286){label=106;break;}else{label=111;break;}
 case 106: 
 var $288$0=_scanexp($f,$pok);
 var $288$1=tempRet0;
 var $$etemp$7$0=0;
 var $$etemp$7$1=-2147483648;
 var $289=(($288$0|0) == ($$etemp$7$0|0)) & (($288$1|0) == ($$etemp$7$1|0));
 if($289){label=107;break;}else{var $e2_0_i$1=$288$1;var $e2_0_i$0=$288$0;label=113;break;}
 case 107: 
 if($58){label=110;break;}else{label=108;break;}
 case 108: 
 var $292=HEAP32[(($4)>>2)];
 var $293=($292|0)==0;
 if($293){var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;}else{label=109;break;}
 case 109: 
 var $295=HEAP32[(($3)>>2)];
 var $296=((($295)-(1))|0);
 HEAP32[(($3)>>2)]=$296;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;
 case 110: 
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 111: 
 var $299=HEAP32[(($4)>>2)];
 var $300=($299|0)==0;
 if($300){var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;}else{label=112;break;}
 case 112: 
 var $302=HEAP32[(($3)>>2)];
 var $303=((($302)-(1))|0);
 HEAP32[(($3)>>2)]=$303;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;
 case 113: 
 var $e2_0_i$0;
 var $e2_0_i$1;
 var $305$0=($dc_0_rp_1_i$0<<2)|(0>>>30);
 var $305$1=($dc_0_rp_1_i$1<<2)|($dc_0_rp_1_i$0>>>30);
 var $$etemp$8$0=-32;
 var $$etemp$8$1=-1;
 var $306$0=_i64Add($305$0,$305$1,$$etemp$8$0,$$etemp$8$1);var $306$1=tempRet0;
 var $307$0=_i64Add($306$0,$306$1,$e2_0_i$0,$e2_0_i$1);var $307$1=tempRet0;
 var $308=($x_3_lcssa_i|0)==0;
 if($308){label=114;break;}else{label=115;break;}
 case 114: 
 var $310=($sign_0|0);
 var $311=($310)*(0);
 var $_0=$311;label=273;break;
 case 115: 
 var $313=(((-$emin_0_ph))|0);
 var $314$0=$313;
 var $314$1=0;
 var $315=(($307$1|0) > ($314$1|0)) | (((($307$1|0) == ($314$1|0) & ($307$0>>>0) >  ($314$0>>>0))));
 if($315){label=116;break;}else{label=117;break;}
 case 116: 
 var $317=___errno_location();
 HEAP32[(($317)>>2)]=34;
 var $318=($sign_0|0);
 var $319=($318)*((1.7976931348623157e+308));
 var $320=($319)*((1.7976931348623157e+308));
 var $_0=$320;label=273;break;
 case 117: 
 var $322=((($emin_0_ph)-(106))|0);
 var $323$0=$322;
 var $323$1=((((($322|0)<0))|0)?-1:0);
 var $324=(($307$1|0) < ($323$1|0)) | (((($307$1|0) == ($323$1|0) & ($307$0>>>0) <  ($323$0>>>0))));
 if($324){label=119;break;}else{label=118;break;}
 case 118: 
 var $325=($x_3_lcssa_i|0)>-1;
 if($325){var $x_48_i=$x_3_lcssa_i;var $y_39_i=$y_0_i;var $e2_110_i$1=$307$1;var $e2_110_i$0=$307$0;label=120;break;}else{var $x_4_lcssa_i=$x_3_lcssa_i;var $y_3_lcssa_i=$y_0_i;var $e2_1_lcssa_i$1=$307$1;var $e2_1_lcssa_i$0=$307$0;label=123;break;}
 case 119: 
 var $327=___errno_location();
 HEAP32[(($327)>>2)]=34;
 var $328=($sign_0|0);
 var $329=($328)*((2.2250738585072014e-308));
 var $330=($329)*((2.2250738585072014e-308));
 var $_0=$330;label=273;break;
 case 120: 
 var $e2_110_i$0;
 var $e2_110_i$1;
 var $y_39_i;
 var $x_48_i;
 var $331=$y_39_i<(0.5);
 var $332=$x_48_i<<1;
 if($331){var $_pn_i=$y_39_i;var $x_5_i=$332;label=122;break;}else{label=121;break;}
 case 121: 
 var $334=$332|1;
 var $335=($y_39_i)-(1);
 var $_pn_i=$335;var $x_5_i=$334;label=122;break;
 case 122: 
 var $x_5_i;
 var $_pn_i;
 var $y_4_i=($y_39_i)+($_pn_i);
 var $$etemp$9$0=-1;
 var $$etemp$9$1=-1;
 var $337$0=_i64Add($e2_110_i$0,$e2_110_i$1,$$etemp$9$0,$$etemp$9$1);var $337$1=tempRet0;
 var $338=($x_5_i|0)>-1;
 if($338){var $x_48_i=$x_5_i;var $y_39_i=$y_4_i;var $e2_110_i$1=$337$1;var $e2_110_i$0=$337$0;label=120;break;}else{var $x_4_lcssa_i=$x_5_i;var $y_3_lcssa_i=$y_4_i;var $e2_1_lcssa_i$1=$337$1;var $e2_1_lcssa_i$0=$337$0;label=123;break;}
 case 123: 
 var $e2_1_lcssa_i$0;
 var $e2_1_lcssa_i$1;
 var $y_3_lcssa_i;
 var $x_4_lcssa_i;
 var $339$0=$bits_0_ph;
 var $339$1=0;
 var $340$0=$emin_0_ph;
 var $340$1=((((($emin_0_ph|0)<0))|0)?-1:0);
 var $$etemp$10$0=32;
 var $$etemp$10$1=0;
 var $341$0=_i64Subtract($$etemp$10$0,$$etemp$10$1,$340$0,$340$1);var $341$1=tempRet0;
 var $342$0=_i64Add($e2_1_lcssa_i$0,$e2_1_lcssa_i$1,$341$0,$341$1);var $342$1=tempRet0;
 var $343=(($339$1|0) > ($342$1|0)) | (((($339$1|0) == ($342$1|0) & ($339$0>>>0) >  ($342$0>>>0))));
 if($343){label=124;break;}else{var $_02_i=$bits_0_ph;label=125;break;}
 case 124: 
 var $345$0=$342$0;
 var $345=$345$0;
 var $346=($345|0)<0;
 var $__i=($346?0:$345);
 var $_02_i=$__i;label=125;break;
 case 125: 
 var $_02_i;
 var $348=($_02_i|0)<53;
 if($348){label=127;break;}else{label=126;break;}
 case 126: 
 var $_pre_i=($sign_0|0);
 var $y_5_i=$y_3_lcssa_i;var $x_6_i=$x_4_lcssa_i;var $bias_07_i=0;var $_pre_phi_i=$_pre_i;label=129;break;
 case 127: 
 var $350=(((84)-($_02_i))|0);
 var $351=_scalbn(1,$350);
 var $352=($sign_0|0);
 var $353=_copysign($351,$352);
 var $354=($_02_i|0)<32;
 var $355=$y_3_lcssa_i!=0;
 var $or_cond4_i=$354&$355;
 if($or_cond4_i){label=128;break;}else{var $y_5_i=$y_3_lcssa_i;var $x_6_i=$x_4_lcssa_i;var $bias_07_i=$353;var $_pre_phi_i=$352;label=129;break;}
 case 128: 
 var $357=$x_4_lcssa_i&1;
 var $358=($357|0)==0;
 var $359=$357^1;
 var $_x_4_i=((($359)+($x_4_lcssa_i))|0);
 var $_y_3_i=($358?0:$y_3_lcssa_i);
 var $y_5_i=$_y_3_i;var $x_6_i=$_x_4_i;var $bias_07_i=$353;var $_pre_phi_i=$352;label=129;break;
 case 129: 
 var $_pre_phi_i;
 var $bias_07_i;
 var $x_6_i;
 var $y_5_i;
 var $360=($x_6_i>>>0);
 var $361=($_pre_phi_i)*($360);
 var $362=($bias_07_i)+($361);
 var $363=($_pre_phi_i)*($y_5_i);
 var $364=($363)+($362);
 var $365=($364)-($bias_07_i);
 var $366=$365!=0;
 if($366){label=131;break;}else{label=130;break;}
 case 130: 
 var $368=___errno_location();
 HEAP32[(($368)>>2)]=34;
 label=131;break;
 case 131: 
 var $370$0=$e2_1_lcssa_i$0;
 var $370=$370$0;
 var $371=_scalbnl($365,$370);
 var $_0=$371;label=273;break;
 case 132: 
 var $373=HEAP32[(($4)>>2)];
 var $374=($373|0)==0;
 if($374){var $c_6=48;label=134;break;}else{label=133;break;}
 case 133: 
 var $376=HEAP32[(($3)>>2)];
 var $377=((($376)-(1))|0);
 HEAP32[(($3)>>2)]=$377;
 var $c_6=48;label=134;break;
 case 134: 
 var $c_6;
 var $379=$x_i;
 var $$etemp$11$0=512;
 var $$etemp$11$1=0;

 var $sum_i=((($emin_0_ph)+($bits_0_ph))|0);
 var $380=(((-$sum_i))|0);
 var $_08_i=$c_6;var $gotdig_0_i9=0;label=135;break;
 case 135: 
 var $gotdig_0_i9;
 var $_08_i;
 if(($_08_i|0)==48){ label=136;break;}else if(($_08_i|0)==46){ label=139;break;}else{var $_2_i=$_08_i;var $gotrad_0_i12=0;var $gotdig_2_i11=$gotdig_0_i9;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=148;break;}
 case 136: 
 var $382=HEAP32[(($3)>>2)];
 var $383=HEAP32[(($4)>>2)];
 var $384=($382>>>0)<($383>>>0);
 if($384){label=137;break;}else{label=138;break;}
 case 137: 
 var $386=(($382+1)|0);
 HEAP32[(($3)>>2)]=$386;
 var $387=HEAP8[($382)];
 var $388=($387&255);
 var $_08_i=$388;var $gotdig_0_i9=1;label=135;break;
 case 138: 
 var $390=___shgetc($f);
 var $_08_i=$390;var $gotdig_0_i9=1;label=135;break;
 case 139: 
 var $392=HEAP32[(($3)>>2)];
 var $393=HEAP32[(($4)>>2)];
 var $394=($392>>>0)<($393>>>0);
 if($394){label=140;break;}else{label=141;break;}
 case 140: 
 var $396=(($392+1)|0);
 HEAP32[(($3)>>2)]=$396;
 var $397=HEAP8[($392)];
 var $398=($397&255);
 var $_1_ph_i=$398;label=142;break;
 case 141: 
 var $400=___shgetc($f);
 var $_1_ph_i=$400;label=142;break;
 case 142: 
 var $_1_ph_i;
 var $401=($_1_ph_i|0)==48;
 if($401){var $lrp_0110_i$1=-1;var $lrp_0110_i$0=-1;label=143;break;}else{var $_2_i=$_1_ph_i;var $gotrad_0_i12=1;var $gotdig_2_i11=$gotdig_0_i9;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=148;break;}
 case 143: 
 var $lrp_0110_i$0;
 var $lrp_0110_i$1;
 var $402=HEAP32[(($3)>>2)];
 var $403=HEAP32[(($4)>>2)];
 var $404=($402>>>0)<($403>>>0);
 if($404){label=144;break;}else{label=145;break;}
 case 144: 
 var $406=(($402+1)|0);
 HEAP32[(($3)>>2)]=$406;
 var $407=HEAP8[($402)];
 var $408=($407&255);
 var $_1_be_i=$408;label=146;break;
 case 145: 
 var $410=___shgetc($f);
 var $_1_be_i=$410;label=146;break;
 case 146: 
 var $_1_be_i;
 var $411=($_1_be_i|0)==48;
 if($411){label=147;break;}else{var $_2_i=$_1_be_i;var $gotrad_0_i12=1;var $gotdig_2_i11=1;var $lrp_1_i$1=$lrp_0110_i$1;var $lrp_1_i$0=$lrp_0110_i$0;label=148;break;}
 case 147: 
 var $$etemp$12$0=-1;
 var $$etemp$12$1=-1;
 var $phitmp_i10$0=_i64Add($lrp_0110_i$0,$lrp_0110_i$1,$$etemp$12$0,$$etemp$12$1);var $phitmp_i10$1=tempRet0;
 var $lrp_0110_i$1=$phitmp_i10$1;var $lrp_0110_i$0=$phitmp_i10$0;label=143;break;
 case 148: 
 var $lrp_1_i$0;
 var $lrp_1_i$1;
 var $gotdig_2_i11;
 var $gotrad_0_i12;
 var $_2_i;
 var $412=(($x_i)|0);
 HEAP32[(($412)>>2)]=0;
 var $413=((($_2_i)-(48))|0);
 var $414=($413>>>0)<10;
 var $415=($_2_i|0)==46;
 var $or_cond789_i=$414|$415;
 if($or_cond789_i){label=149;break;}else{var $lrp_2_lcssa_i$1=$lrp_1_i$1;var $lrp_2_lcssa_i$0=$lrp_1_i$0;var $dc_0_lcssa_i$1=0;var $dc_0_lcssa_i$0=0;var $lnz_0_lcssa_i=0;var $gotdig_3_lcssa_i=$gotdig_2_i11;var $gotrad_1_lcssa_i=$gotrad_0_i12;var $k_0_lcssa_i=0;var $j_0_lcssa_i=0;var $_3_lcssa_i=$_2_i;label=162;break;}
 case 149: 
 var $416=(($x_i+496)|0);
 var $lrp_290_i$1=$lrp_1_i$1;var $lrp_290_i$0=$lrp_1_i$0;var $dc_091_i$1=0;var $dc_091_i$0=0;var $lnz_092_i=0;var $gotdig_393_i=$gotdig_2_i11;var $gotrad_194_i=$gotrad_0_i12;var $k_095_i=0;var $j_096_i=0;var $_397_i=$_2_i;var $418=$413;var $417=$415;label=150;break;
 case 150: 
 var $417;
 var $418;
 var $_397_i;
 var $j_096_i;
 var $k_095_i;
 var $gotrad_194_i;
 var $gotdig_393_i;
 var $lnz_092_i;
 var $dc_091_i$0;
 var $dc_091_i$1;
 var $lrp_290_i$0;
 var $lrp_290_i$1;
 if($417){label=151;break;}else{label=152;break;}
 case 151: 
 var $cond_i=($gotrad_194_i|0)==0;
 if($cond_i){var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=1;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$dc_091_i$1;var $dc_1_i14$0=$dc_091_i$0;var $lrp_3_i$1=$dc_091_i$1;var $lrp_3_i$0=$dc_091_i$0;label=158;break;}else{var $lrp_4_i$1=$lrp_290_i$1;var $lrp_4_i$0=$lrp_290_i$0;var $dc_077_i$1=$dc_091_i$1;var $dc_077_i$0=$dc_091_i$0;var $lnz_079_i=$lnz_092_i;var $gotdig_381_i=$gotdig_393_i;var $k_084_i=$k_095_i;var $j_086_i=$j_096_i;var $_388_i=$_397_i;label=163;break;}
 case 152: 
 var $421=($k_095_i|0)<125;
 var $$etemp$13$0=1;
 var $$etemp$13$1=0;
 var $422$0=_i64Add($dc_091_i$0,$dc_091_i$1,$$etemp$13$0,$$etemp$13$1);var $422$1=tempRet0;
 var $423=($_397_i|0)!=48;
 if($421){label=153;break;}else{label=156;break;}
 case 153: 
 var $425$0=$422$0;
 var $425=$425$0;
 var $_lnz_0_i=($423?$425:$lnz_092_i);
 var $426=($j_096_i|0)==0;
 var $427=(($x_i+($k_095_i<<2))|0);
 if($426){var $storemerge_i=$418;label=155;break;}else{label=154;break;}
 case 154: 
 var $429=HEAP32[(($427)>>2)];
 var $430=((($429)*(10))&-1);
 var $431=((($_397_i)-(48))|0);
 var $432=((($431)+($430))|0);
 var $storemerge_i=$432;label=155;break;
 case 155: 
 var $storemerge_i;
 HEAP32[(($427)>>2)]=$storemerge_i;
 var $434=((($j_096_i)+(1))|0);
 var $435=($434|0)==9;
 var $436=($435&1);
 var $_k_0_i=((($436)+($k_095_i))|0);
 var $_10_i=($435?0:$434);
 var $j_2_i=$_10_i;var $k_2_i=$_k_0_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=1;var $lnz_2_i=$_lnz_0_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;
 case 156: 
 if($423){label=157;break;}else{var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;}
 case 157: 
 var $439=HEAP32[(($416)>>2)];
 var $440=$439|1;
 HEAP32[(($416)>>2)]=$440;
 var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;
 case 158: 
 var $lrp_3_i$0;
 var $lrp_3_i$1;
 var $dc_1_i14$0;
 var $dc_1_i14$1;
 var $lnz_2_i;
 var $gotdig_4_i;
 var $gotrad_2_i;
 var $k_2_i;
 var $j_2_i;
 var $441=HEAP32[(($3)>>2)];
 var $442=HEAP32[(($4)>>2)];
 var $443=($441>>>0)<($442>>>0);
 if($443){label=159;break;}else{label=160;break;}
 case 159: 
 var $445=(($441+1)|0);
 HEAP32[(($3)>>2)]=$445;
 var $446=HEAP8[($441)];
 var $447=($446&255);
 var $_3_be_i=$447;label=161;break;
 case 160: 
 var $449=___shgetc($f);
 var $_3_be_i=$449;label=161;break;
 case 161: 
 var $_3_be_i;
 var $450=((($_3_be_i)-(48))|0);
 var $451=($450>>>0)<10;
 var $452=($_3_be_i|0)==46;
 var $or_cond7_i=$451|$452;
 if($or_cond7_i){var $lrp_290_i$1=$lrp_3_i$1;var $lrp_290_i$0=$lrp_3_i$0;var $dc_091_i$1=$dc_1_i14$1;var $dc_091_i$0=$dc_1_i14$0;var $lnz_092_i=$lnz_2_i;var $gotdig_393_i=$gotdig_4_i;var $gotrad_194_i=$gotrad_2_i;var $k_095_i=$k_2_i;var $j_096_i=$j_2_i;var $_397_i=$_3_be_i;var $418=$450;var $417=$452;label=150;break;}else{var $lrp_2_lcssa_i$1=$lrp_3_i$1;var $lrp_2_lcssa_i$0=$lrp_3_i$0;var $dc_0_lcssa_i$1=$dc_1_i14$1;var $dc_0_lcssa_i$0=$dc_1_i14$0;var $lnz_0_lcssa_i=$lnz_2_i;var $gotdig_3_lcssa_i=$gotdig_4_i;var $gotrad_1_lcssa_i=$gotrad_2_i;var $k_0_lcssa_i=$k_2_i;var $j_0_lcssa_i=$j_2_i;var $_3_lcssa_i=$_3_be_i;label=162;break;}
 case 162: 
 var $_3_lcssa_i;
 var $j_0_lcssa_i;
 var $k_0_lcssa_i;
 var $gotrad_1_lcssa_i;
 var $gotdig_3_lcssa_i;
 var $lnz_0_lcssa_i;
 var $dc_0_lcssa_i$0;
 var $dc_0_lcssa_i$1;
 var $lrp_2_lcssa_i$0;
 var $lrp_2_lcssa_i$1;
 var $453=($gotrad_1_lcssa_i|0)==0;
 var $dc_0_lrp_2_i$0=($453?$dc_0_lcssa_i$0:$lrp_2_lcssa_i$0);
 var $dc_0_lrp_2_i$1=($453?$dc_0_lcssa_i$1:$lrp_2_lcssa_i$1);
 var $lrp_4_i$1=$dc_0_lrp_2_i$1;var $lrp_4_i$0=$dc_0_lrp_2_i$0;var $dc_077_i$1=$dc_0_lcssa_i$1;var $dc_077_i$0=$dc_0_lcssa_i$0;var $lnz_079_i=$lnz_0_lcssa_i;var $gotdig_381_i=$gotdig_3_lcssa_i;var $k_084_i=$k_0_lcssa_i;var $j_086_i=$j_0_lcssa_i;var $_388_i=$_3_lcssa_i;label=163;break;
 case 163: 
 var $_388_i;
 var $j_086_i;
 var $k_084_i;
 var $gotdig_381_i;
 var $lnz_079_i;
 var $dc_077_i$0;
 var $dc_077_i$1;
 var $lrp_4_i$0;
 var $lrp_4_i$1;
 var $454=($gotdig_381_i|0)!=0;
 if($454){label=164;break;}else{label=171;break;}
 case 164: 
 var $456=$_388_i|32;
 var $457=($456|0)==101;
 if($457){label=165;break;}else{label=171;break;}
 case 165: 
 var $459$0=_scanexp($f,$pok);
 var $459$1=tempRet0;
 var $$etemp$14$0=0;
 var $$etemp$14$1=-2147483648;
 var $460=(($459$0|0) == ($$etemp$14$0|0)) & (($459$1|0) == ($$etemp$14$1|0));
 if($460){label=166;break;}else{var $e10_0_i$1=$459$1;var $e10_0_i$0=$459$0;label=170;break;}
 case 166: 
 if($58){label=169;break;}else{label=167;break;}
 case 167: 
 var $463=HEAP32[(($4)>>2)];
 var $464=($463|0)==0;
 if($464){var $e10_0_i$1=0;var $e10_0_i$0=0;label=170;break;}else{label=168;break;}
 case 168: 
 var $466=HEAP32[(($3)>>2)];
 var $467=((($466)-(1))|0);
 HEAP32[(($3)>>2)]=$467;
 var $e10_0_i$1=0;var $e10_0_i$0=0;label=170;break;
 case 169: 
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 170: 
 var $e10_0_i$0;
 var $e10_0_i$1;
 var $470$0=_i64Add($e10_0_i$0,$e10_0_i$1,$lrp_4_i$0,$lrp_4_i$1);var $470$1=tempRet0;
 var $lrp_5_i$1=$470$1;var $lrp_5_i$0=$470$0;label=174;break;
 case 171: 
 var $472=($_388_i|0)>-1;
 if($472){label=172;break;}else{var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;}
 case 172: 
 var $474=HEAP32[(($4)>>2)];
 var $475=($474|0)==0;
 if($475){var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;}else{label=173;break;}
 case 173: 
 var $477=HEAP32[(($3)>>2)];
 var $478=((($477)-(1))|0);
 HEAP32[(($3)>>2)]=$478;
 var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;
 case 174: 
 var $lrp_5_i$0;
 var $lrp_5_i$1;
 if($454){label=176;break;}else{label=175;break;}
 case 175: 
 var $481=___errno_location();
 HEAP32[(($481)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 176: 
 var $483=HEAP32[(($412)>>2)];
 var $484=($483|0)==0;
 if($484){label=177;break;}else{label=178;break;}
 case 177: 
 var $486=($sign_0|0);
 var $487=($486)*(0);
 var $_0=$487;label=273;break;
 case 178: 
 var $489=(($lrp_5_i$0|0) == ($dc_077_i$0|0)) & (($lrp_5_i$1|0) == ($dc_077_i$1|0));
 var $$etemp$15$0=10;
 var $$etemp$15$1=0;
 var $490=(($dc_077_i$1|0) < ($$etemp$15$1|0)) | (((($dc_077_i$1|0) == ($$etemp$15$1|0) & ($dc_077_i$0>>>0) <  ($$etemp$15$0>>>0))));
 var $or_cond_i15=$489&$490;
 if($or_cond_i15){label=179;break;}else{label=182;break;}
 case 179: 
 var $492=($bits_0_ph>>>0)>30;
 if($492){label=181;break;}else{label=180;break;}
 case 180: 
 var $494=$483>>>($bits_0_ph>>>0);
 var $495=($494|0)==0;
 if($495){label=181;break;}else{label=182;break;}
 case 181: 
 var $497=($sign_0|0);
 var $498=($483>>>0);
 var $499=($497)*($498);
 var $_0=$499;label=273;break;
 case 182: 
 var $501=(((($emin_0_ph|0))/(-2))&-1);
 var $502$0=$501;
 var $502$1=((((($501|0)<0))|0)?-1:0);
 var $503=(($lrp_5_i$1|0) > ($502$1|0)) | (((($lrp_5_i$1|0) == ($502$1|0) & ($lrp_5_i$0>>>0) >  ($502$0>>>0))));
 if($503){label=183;break;}else{label=184;break;}
 case 183: 
 var $505=___errno_location();
 HEAP32[(($505)>>2)]=34;
 var $506=($sign_0|0);
 var $507=($506)*((1.7976931348623157e+308));
 var $508=($507)*((1.7976931348623157e+308));
 var $_0=$508;label=273;break;
 case 184: 
 var $510=((($emin_0_ph)-(106))|0);
 var $511$0=$510;
 var $511$1=((((($510|0)<0))|0)?-1:0);
 var $512=(($lrp_5_i$1|0) < ($511$1|0)) | (((($lrp_5_i$1|0) == ($511$1|0) & ($lrp_5_i$0>>>0) <  ($511$0>>>0))));
 if($512){label=185;break;}else{label=186;break;}
 case 185: 
 var $514=___errno_location();
 HEAP32[(($514)>>2)]=34;
 var $515=($sign_0|0);
 var $516=($515)*((2.2250738585072014e-308));
 var $517=($516)*((2.2250738585072014e-308));
 var $_0=$517;label=273;break;
 case 186: 
 var $519=($j_086_i|0)==0;
 if($519){var $k_3_i=$k_084_i;label=192;break;}else{label=187;break;}
 case 187: 
 var $520=($j_086_i|0)<9;
 if($520){label=188;break;}else{label=191;break;}
 case 188: 
 var $521=(($x_i+($k_084_i<<2))|0);
 var $_promoted_i=HEAP32[(($521)>>2)];
 var $j_371_i=$j_086_i;var $523=$_promoted_i;label=189;break;
 case 189: 
 var $523;
 var $j_371_i;
 var $524=((($523)*(10))&-1);
 var $525=((($j_371_i)+(1))|0);
 var $526=($525|0)<9;
 if($526){var $j_371_i=$525;var $523=$524;label=189;break;}else{label=190;break;}
 case 190: 
 HEAP32[(($521)>>2)]=$524;
 label=191;break;
 case 191: 
 var $528=((($k_084_i)+(1))|0);
 var $k_3_i=$528;label=192;break;
 case 192: 
 var $k_3_i;
 var $530$0=$lrp_5_i$0;
 var $530=$530$0;
 var $531=($lnz_079_i|0)<9;
 if($531){label=193;break;}else{label=201;break;}
 case 193: 
 var $533=($lnz_079_i|0)<=($530|0);
 var $534=($530|0)<18;
 var $or_cond3_i16=$533&$534;
 if($or_cond3_i16){label=194;break;}else{label=201;break;}
 case 194: 
 var $536=($530|0)==9;
 if($536){label=195;break;}else{label=196;break;}
 case 195: 
 var $538=($sign_0|0);
 var $539=HEAP32[(($412)>>2)];
 var $540=($539>>>0);
 var $541=($538)*($540);
 var $_0=$541;label=273;break;
 case 196: 
 var $543=($530|0)<9;
 if($543){label=197;break;}else{label=198;break;}
 case 197: 
 var $545=($sign_0|0);
 var $546=HEAP32[(($412)>>2)];
 var $547=($546>>>0);
 var $548=($545)*($547);
 var $549=(((8)-($530))|0);
 var $550=((16+($549<<2))|0);
 var $551=HEAP32[(($550)>>2)];
 var $552=($551|0);
 var $553=($548)/($552);
 var $_0=$553;label=273;break;
 case 198: 
 var $555=((($530)*(-3))&-1);
 var $_neg20_i=((($bits_0_ph)+(27))|0);
 var $556=((($_neg20_i)+($555))|0);
 var $557=($556|0)>30;
 var $_pre_i17=HEAP32[(($412)>>2)];
 if($557){label=200;break;}else{label=199;break;}
 case 199: 
 var $559=$_pre_i17>>>($556>>>0);
 var $560=($559|0)==0;
 if($560){label=200;break;}else{label=201;break;}
 case 200: 
 var $561=($sign_0|0);
 var $562=($_pre_i17>>>0);
 var $563=($561)*($562);
 var $564=((($530)-(10))|0);
 var $565=((16+($564<<2))|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=($566|0);
 var $568=($563)*($567);
 var $_0=$568;label=273;break;
 case 201: 
 var $570=(((($530|0))%(9))&-1);
 var $571=($570|0)==0;
 if($571){var $a_2_ph40_i=0;var $z_1_ph39_i=$k_3_i;var $e2_0_ph_i=0;var $rp_2_ph38_i=$530;label=210;break;}else{label=202;break;}
 case 202: 
 var $573=($530|0)>-1;
 var $574=((($570)+(9))|0);
 var $575=($573?$570:$574);
 var $576=(((8)-($575))|0);
 var $577=((16+($576<<2))|0);
 var $578=HEAP32[(($577)>>2)];
 var $579=($k_3_i|0)==0;
 if($579){var $z_0_i=0;var $a_0_lcssa161_i=0;var $rp_0_lcssa162_i=$530;label=209;break;}else{label=203;break;}
 case 203: 
 var $580=(((1000000000)/(($578|0)))&-1);
 var $rp_060_i=$530;var $a_061_i=0;var $k_462_i=0;var $carry_063_i=0;label=204;break;
 case 204: 
 var $carry_063_i;
 var $k_462_i;
 var $a_061_i;
 var $rp_060_i;
 var $581=(($x_i+($k_462_i<<2))|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=(((($582>>>0))%(($578>>>0)))&-1);
 var $584=(((($582>>>0))/(($578>>>0)))&-1);
 var $585=((($584)+($carry_063_i))|0);
 HEAP32[(($581)>>2)]=$585;
 var $586=(Math_imul($583,$580)|0);
 var $587=($k_462_i|0)==($a_061_i|0);
 var $588=($585|0)==0;
 var $or_cond11_i=$587&$588;
 var $589=((($k_462_i)+(1))|0);
 if($or_cond11_i){label=205;break;}else{var $a_1_i=$a_061_i;var $rp_1_i18=$rp_060_i;label=206;break;}
 case 205: 
 var $591=$589&127;
 var $592=((($rp_060_i)-(9))|0);
 var $a_1_i=$591;var $rp_1_i18=$592;label=206;break;
 case 206: 
 var $rp_1_i18;
 var $a_1_i;
 var $593=($589|0)==($k_3_i|0);
 if($593){label=207;break;}else{var $rp_060_i=$rp_1_i18;var $a_061_i=$a_1_i;var $k_462_i=$589;var $carry_063_i=$586;label=204;break;}
 case 207: 
 var $594=($586|0)==0;
 if($594){var $z_0_i=$k_3_i;var $a_0_lcssa161_i=$a_1_i;var $rp_0_lcssa162_i=$rp_1_i18;label=209;break;}else{label=208;break;}
 case 208: 
 var $596=((($k_3_i)+(1))|0);
 var $597=(($x_i+($k_3_i<<2))|0);
 HEAP32[(($597)>>2)]=$586;
 var $z_0_i=$596;var $a_0_lcssa161_i=$a_1_i;var $rp_0_lcssa162_i=$rp_1_i18;label=209;break;
 case 209: 
 var $rp_0_lcssa162_i;
 var $a_0_lcssa161_i;
 var $z_0_i;
 var $598=(((9)-($575))|0);
 var $599=((($598)+($rp_0_lcssa162_i))|0);
 var $a_2_ph40_i=$a_0_lcssa161_i;var $z_1_ph39_i=$z_0_i;var $e2_0_ph_i=0;var $rp_2_ph38_i=$599;label=210;break;
 case 210: 
 var $rp_2_ph38_i;
 var $e2_0_ph_i;
 var $z_1_ph39_i;
 var $a_2_ph40_i;
 var $600=($rp_2_ph38_i|0)<18;
 var $601=(($x_i+($a_2_ph40_i<<2))|0);
 if($600){var $z_1_us_i=$z_1_ph39_i;var $e2_0_us_i=$e2_0_ph_i;label=212;break;}else{label=211;break;}
 case 211: 
 var $602=($rp_2_ph38_i|0)==18;
 if($602){var $z_1_us45_i=$z_1_ph39_i;var $e2_0_us44_i=$e2_0_ph_i;label=219;break;}else{var $a_3_ph_i=$a_2_ph40_i;var $z_5_ph_i=$z_1_ph39_i;var $e2_1_ph_i=$e2_0_ph_i;var $rp_3_ph33_i=$rp_2_ph38_i;label=243;break;}
 case 212: 
 var $e2_0_us_i;
 var $z_1_us_i;
 var $603=((($z_1_us_i)+(127))|0);
 var $carry1_0_us_i=0;var $k_5_in_us_i=$603;var $z_2_us_i=$z_1_us_i;label=213;break;
 case 213: 
 var $z_2_us_i;
 var $k_5_in_us_i;
 var $carry1_0_us_i;
 var $k_5_us_i=$k_5_in_us_i&127;
 var $605=(($x_i+($k_5_us_i<<2))|0);
 var $606=HEAP32[(($605)>>2)];
 var $607$0=$606;
 var $607$1=0;
 var $608$0=($607$0<<29)|(0>>>3);
 var $608$1=($607$1<<29)|($607$0>>>3);
 var $609$0=$carry1_0_us_i;
 var $609$1=0;
 var $610$0=_i64Add($608$0,$608$1,$609$0,$609$1);var $610$1=tempRet0;
 var $$etemp$16$0=1000000000;
 var $$etemp$16$1=0;
 var $611=(($610$1>>>0) > ($$etemp$16$1>>>0)) | (((($610$1>>>0) == ($$etemp$16$1>>>0) & ($610$0>>>0) >  ($$etemp$16$0>>>0))));
 var $extract_t19_us_i$0=$610$0;
 var $extract_t19_us_i=$extract_t19_us_i$0;
 if($611){label=214;break;}else{var $carry1_1_us_i=0;var $_sink_off0_us_i=$extract_t19_us_i;label=215;break;}
 case 214: 
 var $$etemp$17$0=1000000000;
 var $$etemp$17$1=0;
 var $613$0=___udivdi3($610$0,$610$1,$$etemp$17$0,$$etemp$17$1);var $613$1=tempRet0;
 var $614$0=$613$0;
 var $614=$614$0;
 var $$etemp$18$0=1000000000;
 var $$etemp$18$1=0;
 var $615$0=___uremdi3($610$0,$610$1,$$etemp$18$0,$$etemp$18$1);var $615$1=tempRet0;
 var $extract_t_us_i$0=$615$0;
 var $extract_t_us_i=$extract_t_us_i$0;
 var $carry1_1_us_i=$614;var $_sink_off0_us_i=$extract_t_us_i;label=215;break;
 case 215: 
 var $_sink_off0_us_i;
 var $carry1_1_us_i;
 HEAP32[(($605)>>2)]=$_sink_off0_us_i;
 var $617=((($z_2_us_i)+(127))|0);
 var $618=$617&127;
 var $619=($k_5_us_i|0)!=($618|0);
 var $620=($k_5_us_i|0)==($a_2_ph40_i|0);
 var $or_cond12_us_i=$619|$620;
 if($or_cond12_us_i){var $z_3_us_i=$z_2_us_i;label=217;break;}else{label=216;break;}
 case 216: 
 var $622=($_sink_off0_us_i|0)==0;
 var $k_5_z_2_us_i=($622?$k_5_us_i:$z_2_us_i);
 var $z_3_us_i=$k_5_z_2_us_i;label=217;break;
 case 217: 
 var $z_3_us_i;
 var $624=((($k_5_us_i)-(1))|0);
 if($620){label=218;break;}else{var $carry1_0_us_i=$carry1_1_us_i;var $k_5_in_us_i=$624;var $z_2_us_i=$z_3_us_i;label=213;break;}
 case 218: 
 var $626=((($e2_0_us_i)-(29))|0);
 var $627=($carry1_1_us_i|0)==0;
 if($627){var $z_1_us_i=$z_3_us_i;var $e2_0_us_i=$626;label=212;break;}else{var $_lcssa43_i=$626;var $z_3_lcssa_lcssa_i=$z_3_us_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us_i;label=227;break;}
 case 219: 
 var $e2_0_us44_i;
 var $z_1_us45_i;
 var $628=HEAP32[(($601)>>2)];
 var $629=($628>>>0)<9007199;
 if($629){label=220;break;}else{var $a_3_ph_i=$a_2_ph40_i;var $z_5_ph_i=$z_1_us45_i;var $e2_1_ph_i=$e2_0_us44_i;var $rp_3_ph33_i=18;label=243;break;}
 case 220: 
 var $630=((($z_1_us45_i)+(127))|0);
 var $carry1_0_us49_i=0;var $k_5_in_us48_i=$630;var $z_2_us47_i=$z_1_us45_i;label=221;break;
 case 221: 
 var $z_2_us47_i;
 var $k_5_in_us48_i;
 var $carry1_0_us49_i;
 var $k_5_us50_i=$k_5_in_us48_i&127;
 var $632=(($x_i+($k_5_us50_i<<2))|0);
 var $633=HEAP32[(($632)>>2)];
 var $634$0=$633;
 var $634$1=0;
 var $635$0=($634$0<<29)|(0>>>3);
 var $635$1=($634$1<<29)|($634$0>>>3);
 var $636$0=$carry1_0_us49_i;
 var $636$1=0;
 var $637$0=_i64Add($635$0,$635$1,$636$0,$636$1);var $637$1=tempRet0;
 var $$etemp$19$0=1000000000;
 var $$etemp$19$1=0;
 var $638=(($637$1>>>0) > ($$etemp$19$1>>>0)) | (((($637$1>>>0) == ($$etemp$19$1>>>0) & ($637$0>>>0) >  ($$etemp$19$0>>>0))));
 var $extract_t19_us51_i$0=$637$0;
 var $extract_t19_us51_i=$extract_t19_us51_i$0;
 if($638){label=222;break;}else{var $carry1_1_us54_i=0;var $_sink_off0_us53_i=$extract_t19_us51_i;label=223;break;}
 case 222: 
 var $$etemp$20$0=1000000000;
 var $$etemp$20$1=0;
 var $640$0=___udivdi3($637$0,$637$1,$$etemp$20$0,$$etemp$20$1);var $640$1=tempRet0;
 var $641$0=$640$0;
 var $641=$641$0;
 var $$etemp$21$0=1000000000;
 var $$etemp$21$1=0;
 var $642$0=___uremdi3($637$0,$637$1,$$etemp$21$0,$$etemp$21$1);var $642$1=tempRet0;
 var $extract_t_us52_i$0=$642$0;
 var $extract_t_us52_i=$extract_t_us52_i$0;
 var $carry1_1_us54_i=$641;var $_sink_off0_us53_i=$extract_t_us52_i;label=223;break;
 case 223: 
 var $_sink_off0_us53_i;
 var $carry1_1_us54_i;
 HEAP32[(($632)>>2)]=$_sink_off0_us53_i;
 var $644=((($z_2_us47_i)+(127))|0);
 var $645=$644&127;
 var $646=($k_5_us50_i|0)!=($645|0);
 var $647=($k_5_us50_i|0)==($a_2_ph40_i|0);
 var $or_cond12_us55_i=$646|$647;
 if($or_cond12_us55_i){var $z_3_us57_i=$z_2_us47_i;label=225;break;}else{label=224;break;}
 case 224: 
 var $649=($_sink_off0_us53_i|0)==0;
 var $k_5_z_2_us56_i=($649?$k_5_us50_i:$z_2_us47_i);
 var $z_3_us57_i=$k_5_z_2_us56_i;label=225;break;
 case 225: 
 var $z_3_us57_i;
 var $651=((($k_5_us50_i)-(1))|0);
 if($647){label=226;break;}else{var $carry1_0_us49_i=$carry1_1_us54_i;var $k_5_in_us48_i=$651;var $z_2_us47_i=$z_3_us57_i;label=221;break;}
 case 226: 
 var $653=((($e2_0_us44_i)-(29))|0);
 var $654=($carry1_1_us54_i|0)==0;
 if($654){var $z_1_us45_i=$z_3_us57_i;var $e2_0_us44_i=$653;label=219;break;}else{var $_lcssa43_i=$653;var $z_3_lcssa_lcssa_i=$z_3_us57_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us54_i;label=227;break;}
 case 227: 
 var $carry1_1_lcssa_lcssa_i;
 var $z_3_lcssa_lcssa_i;
 var $_lcssa43_i;
 var $655=((($rp_2_ph38_i)+(9))|0);
 var $656=((($a_2_ph40_i)+(127))|0);
 var $657=$656&127;
 var $658=($657|0)==($z_3_lcssa_lcssa_i|0);
 if($658){label=228;break;}else{var $z_4_i=$z_3_lcssa_lcssa_i;label=229;break;}
 case 228: 
 var $660=((($z_3_lcssa_lcssa_i)+(127))|0);
 var $661=$660&127;
 var $662=(($x_i+($661<<2))|0);
 var $663=HEAP32[(($662)>>2)];
 var $664=((($z_3_lcssa_lcssa_i)+(126))|0);
 var $665=$664&127;
 var $666=(($x_i+($665<<2))|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=$667|$663;
 HEAP32[(($666)>>2)]=$668;
 var $z_4_i=$661;label=229;break;
 case 229: 
 var $z_4_i;
 var $670=(($x_i+($657<<2))|0);
 HEAP32[(($670)>>2)]=$carry1_1_lcssa_lcssa_i;
 var $a_2_ph40_i=$657;var $z_1_ph39_i=$z_4_i;var $e2_0_ph_i=$_lcssa43_i;var $rp_2_ph38_i=$655;label=210;break;
 case 230: 
 var $e2_1_i;
 var $a_3_i;
 var $i_025_i=0;label=232;break;
 case 231: 
 var $672=($685|0)<2;
 if($672){var $i_025_i=$685;label=232;break;}else{var $i_1_i=$685;label=235;break;}
 case 232: 
 var $i_025_i;
 var $674=((($i_025_i)+($a_3_i))|0);
 var $675=$674&127;
 var $676=($675|0)==($z_5_ph_i|0);
 if($676){var $i_1_i=2;label=235;break;}else{label=233;break;}
 case 233: 
 var $678=(($x_i+($675<<2))|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=((8+($i_025_i<<2))|0);
 var $681=HEAP32[(($680)>>2)];
 var $682=($679>>>0)<($681>>>0);
 if($682){var $i_1_i=2;label=235;break;}else{label=234;break;}
 case 234: 
 var $684=($679>>>0)>($681>>>0);
 var $685=((($i_025_i)+(1))|0);
 if($684){var $i_1_i=$i_025_i;label=235;break;}else{label=231;break;}
 case 235: 
 var $i_1_i;
 var $687=($i_1_i|0)==2;
 var $or_cond13_i=$687&$718;
 if($or_cond13_i){label=236;break;}else{label=237;break;}
 case 236: 
 var $688=$a_3_i&127;
 var $689=($688|0)==($z_5_ph_i|0);
 if($689){label=246;break;}else{var $z_7_i=$z_5_ph_i;label=247;break;}
 case 237: 
 var $691=((($_14_i)+($e2_1_i))|0);
 var $692=($a_3_i|0)==($z_5_ph_i|0);
 if($692){var $a_3_i=$z_5_ph_i;var $e2_1_i=$691;label=230;break;}else{label=238;break;}
 case 238: 
 var $693=1<<$_14_i;
 var $694=((($693)-(1))|0);
 var $695=1000000000>>>($_14_i>>>0);
 var $rp_426_i=$rp_3_i_ph;var $a_427_i=$a_3_i;var $k_628_i=$a_3_i;var $carry3_030_i=0;label=239;break;
 case 239: 
 var $carry3_030_i;
 var $k_628_i;
 var $a_427_i;
 var $rp_426_i;
 var $696=(($x_i+($k_628_i<<2))|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=$697&$694;
 var $699=$697>>>($_14_i>>>0);
 var $700=((($699)+($carry3_030_i))|0);
 HEAP32[(($696)>>2)]=$700;
 var $701=(Math_imul($698,$695)|0);
 var $702=($k_628_i|0)==($a_427_i|0);
 var $703=($700|0)==0;
 var $or_cond15_i=$702&$703;
 var $704=((($k_628_i)+(1))|0);
 var $705=$704&127;
 var $706=((($rp_426_i)-(9))|0);
 var $rp_5_i=($or_cond15_i?$706:$rp_426_i);
 var $a_5_i=($or_cond15_i?$705:$a_427_i);
 var $707=($705|0)==($z_5_ph_i|0);
 if($707){label=240;break;}else{var $rp_426_i=$rp_5_i;var $a_427_i=$a_5_i;var $k_628_i=$705;var $carry3_030_i=$701;label=239;break;}
 case 240: 
 var $708=($701|0)==0;
 if($708){var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$691;var $rp_3_i_ph=$rp_5_i;label=244;break;}else{label=241;break;}
 case 241: 
 var $710=($714|0)==($a_5_i|0);
 if($710){label=245;break;}else{label=242;break;}
 case 242: 
 var $712=(($x_i+($z_5_ph_i<<2))|0);
 HEAP32[(($712)>>2)]=$701;
 var $a_3_ph_i=$a_5_i;var $z_5_ph_i=$714;var $e2_1_ph_i=$691;var $rp_3_ph33_i=$rp_5_i;label=243;break;
 case 243: 
 var $rp_3_ph33_i;
 var $e2_1_ph_i;
 var $z_5_ph_i;
 var $a_3_ph_i;
 var $713=((($z_5_ph_i)+(1))|0);
 var $714=$713&127;
 var $715=((($z_5_ph_i)+(127))|0);
 var $716=$715&127;
 var $717=(($x_i+($716<<2))|0);
 var $a_3_i_ph=$a_3_ph_i;var $e2_1_i_ph=$e2_1_ph_i;var $rp_3_i_ph=$rp_3_ph33_i;label=244;break;
 case 244: 
 var $rp_3_i_ph;
 var $e2_1_i_ph;
 var $a_3_i_ph;
 var $718=($rp_3_i_ph|0)==18;
 var $719=($rp_3_i_ph|0)>27;
 var $_14_i=($719?9:1);
 var $a_3_i=$a_3_i_ph;var $e2_1_i=$e2_1_i_ph;label=230;break;
 case 245: 
 var $721=HEAP32[(($717)>>2)];
 var $722=$721|1;
 HEAP32[(($717)>>2)]=$722;
 var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$691;var $rp_3_i_ph=$rp_5_i;label=244;break;
 case 246: 
 var $724=((($714)-(1))|0);
 var $725=(($x_i+($724<<2))|0);
 HEAP32[(($725)>>2)]=0;
 var $z_7_i=$714;label=247;break;
 case 247: 
 var $z_7_i;
 var $727=(($x_i+($688<<2))|0);
 var $728=HEAP32[(($727)>>2)];
 var $729=($728>>>0);
 var $730=((($a_3_i)+(1))|0);
 var $731=$730&127;
 var $732=($731|0)==($z_7_i|0);
 if($732){label=271;break;}else{var $z_7_1_i=$z_7_i;label=272;break;}
 case 248: 
 var $734=($824|0)<0;
 var $__i22=($734?0:$824);
 var $_09_i=$__i22;var $denormal_0_i=1;label=249;break;
 case 249: 
 var $denormal_0_i;
 var $_09_i;
 var $736=($_09_i|0)<53;
 if($736){label=250;break;}else{var $bias_0_i=0;var $frac_0_i=0;var $y_1_i23=$822;label=251;break;}
 case 250: 
 var $738=(((105)-($_09_i))|0);
 var $739=_scalbn(1,$738);
 var $740=_copysign($739,$822);
 var $741=(((53)-($_09_i))|0);
 var $742=_scalbn(1,$741);
 var $743=_fmod($822,$742);
 var $744=($822)-($743);
 var $745=($740)+($744);
 var $bias_0_i=$740;var $frac_0_i=$743;var $y_1_i23=$745;label=251;break;
 case 251: 
 var $y_1_i23;
 var $frac_0_i;
 var $bias_0_i;
 var $747=((($a_3_i)+(2))|0);
 var $748=$747&127;
 var $749=($748|0)==($z_7_1_i|0);
 if($749){var $frac_2_i=$frac_0_i;label=264;break;}else{label=252;break;}
 case 252: 
 var $751=(($x_i+($748<<2))|0);
 var $752=HEAP32[(($751)>>2)];
 var $753=($752>>>0)<500000000;
 if($753){label=253;break;}else{label=256;break;}
 case 253: 
 var $755=($752|0)==0;
 if($755){label=254;break;}else{label=255;break;}
 case 254: 
 var $757=((($a_3_i)+(3))|0);
 var $758=$757&127;
 var $759=($758|0)==($z_7_1_i|0);
 if($759){var $frac_1_i=$frac_0_i;label=261;break;}else{label=255;break;}
 case 255: 
 var $761=($821)*((0.25));
 var $762=($761)+($frac_0_i);
 var $frac_1_i=$762;label=261;break;
 case 256: 
 var $764=($752>>>0)>500000000;
 if($764){label=257;break;}else{label=258;break;}
 case 257: 
 var $766=($821)*((0.75));
 var $767=($766)+($frac_0_i);
 var $frac_1_i=$767;label=261;break;
 case 258: 
 var $769=((($a_3_i)+(3))|0);
 var $770=$769&127;
 var $771=($770|0)==($z_7_1_i|0);
 if($771){label=259;break;}else{label=260;break;}
 case 259: 
 var $773=($821)*((0.5));
 var $774=($773)+($frac_0_i);
 var $frac_1_i=$774;label=261;break;
 case 260: 
 var $776=($821)*((0.75));
 var $777=($776)+($frac_0_i);
 var $frac_1_i=$777;label=261;break;
 case 261: 
 var $frac_1_i;
 var $779=(((53)-($_09_i))|0);
 var $780=($779|0)>1;
 if($780){label=262;break;}else{var $frac_2_i=$frac_1_i;label=264;break;}
 case 262: 
 var $782=_fmod($frac_1_i,1);
 var $783=$782!=0;
 if($783){var $frac_2_i=$frac_1_i;label=264;break;}else{label=263;break;}
 case 263: 
 var $785=($frac_1_i)+(1);
 var $frac_2_i=$785;label=264;break;
 case 264: 
 var $frac_2_i;
 var $787=($y_1_i23)+($frac_2_i);
 var $788=($787)-($bias_0_i);
 var $789=$823&2147483647;
 var $790=(((-2)-($sum_i))|0);
 var $791=($789|0)>($790|0);
 if($791){label=265;break;}else{var $y_3_i=$788;var $e2_3_i=$e2_1_i;label=270;break;}
 case 265: 
 var $793=Math_abs($788);
 var $794=$793<9007199254740992;
 if($794){var $y_2_i24=$788;var $denormal_2_i=$denormal_0_i;var $e2_2_i=$e2_1_i;label=267;break;}else{label=266;break;}
 case 266: 
 var $796=($denormal_0_i|0)!=0;
 var $797=($_09_i|0)==($824|0);
 var $or_cond16_i=$796&$797;
 var $denormal_1_i=($or_cond16_i?0:$denormal_0_i);
 var $798=($788)*((0.5));
 var $799=((($e2_1_i)+(1))|0);
 var $y_2_i24=$798;var $denormal_2_i=$denormal_1_i;var $e2_2_i=$799;label=267;break;
 case 267: 
 var $e2_2_i;
 var $denormal_2_i;
 var $y_2_i24;
 var $801=((($e2_2_i)+(50))|0);
 var $802=($801|0)>($380|0);
 if($802){label=269;break;}else{label=268;break;}
 case 268: 
 var $804=($denormal_2_i|0)!=0;
 var $805=$frac_2_i!=0;
 var $or_cond17_i=$804&$805;
 if($or_cond17_i){label=269;break;}else{var $y_3_i=$y_2_i24;var $e2_3_i=$e2_2_i;label=270;break;}
 case 269: 
 var $807=___errno_location();
 HEAP32[(($807)>>2)]=34;
 var $y_3_i=$y_2_i24;var $e2_3_i=$e2_2_i;label=270;break;
 case 270: 
 var $e2_3_i;
 var $y_3_i;
 var $809=_scalbnl($y_3_i,$e2_3_i);
 var $_0=$809;label=273;break;
 case 271: 
 var $811=((($z_7_i)+(1))|0);
 var $812=$811&127;
 var $813=((($812)-(1))|0);
 var $814=(($x_i+($813<<2))|0);
 HEAP32[(($814)>>2)]=0;
 var $z_7_1_i=$812;label=272;break;
 case 272: 
 var $z_7_1_i;
 var $816=($729)*(1000000000);
 var $817=(($x_i+($731<<2))|0);
 var $818=HEAP32[(($817)>>2)];
 var $819=($818>>>0);
 var $820=($816)+($819);
 var $821=($sign_0|0);
 var $822=($821)*($820);
 var $823=((($e2_1_i)+(53))|0);
 var $824=((($823)-($emin_0_ph))|0);
 var $825=($824|0)<($bits_0_ph|0);
 if($825){label=248;break;}else{var $_09_i=$bits_0_ph;var $denormal_0_i=0;label=249;break;}
 case 273: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _scanexp($f,$pok){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($f+100)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($2+1)|0);
 HEAP32[(($1)>>2)]=$7;
 var $8=HEAP8[($2)];
 var $9=($8&255);
 var $13=$9;label=4;break;
 case 3: 
 var $11=___shgetc($f);
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 var $14=($13|0)==45;
 if(($13|0)==45|($13|0)==43){ label=5;break;}else{var $neg_0=0;var $c_0=$13;label=11;break;}
 case 5: 
 var $15=($14&1);
 var $16=HEAP32[(($1)>>2)];
 var $17=HEAP32[(($3)>>2)];
 var $18=($16>>>0)<($17>>>0);
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($16+1)|0);
 HEAP32[(($1)>>2)]=$20;
 var $21=HEAP8[($16)];
 var $22=($21&255);
 var $26=$22;label=8;break;
 case 7: 
 var $24=___shgetc($f);
 var $26=$24;label=8;break;
 case 8: 
 var $26;
 var $27=((($26)-(48))|0);
 var $28=($27>>>0)<10;
 var $29=($pok|0)==0;
 var $or_cond=$28|$29;
 if($or_cond){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=9;break;}
 case 9: 
 var $31=HEAP32[(($3)>>2)];
 var $32=($31|0)==0;
 if($32){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=10;break;}
 case 10: 
 var $34=HEAP32[(($1)>>2)];
 var $35=((($34)-(1))|0);
 HEAP32[(($1)>>2)]=$35;
 var $neg_0=$15;var $c_0=$26;label=11;break;
 case 11: 
 var $c_0;
 var $neg_0;
 var $37=((($c_0)-(48))|0);
 var $38=($37>>>0)>9;
 if($38){label=12;break;}else{var $c_18=$c_0;var $x_09=0;label=14;break;}
 case 12: 
 var $40=HEAP32[(($3)>>2)];
 var $41=($40|0)==0;
 if($41){var $_0$1=-2147483648;var $_0$0=0;label=32;break;}else{label=13;break;}
 case 13: 
 var $43=HEAP32[(($1)>>2)];
 var $44=((($43)-(1))|0);
 HEAP32[(($1)>>2)]=$44;
 var $_0$1=-2147483648;var $_0$0=0;label=32;break;
 case 14: 
 var $x_09;
 var $c_18;
 var $45=((($c_18)-(48))|0);
 var $46=((($45)+($x_09))|0);
 var $47=HEAP32[(($1)>>2)];
 var $48=HEAP32[(($3)>>2)];
 var $49=($47>>>0)<($48>>>0);
 if($49){label=15;break;}else{label=16;break;}
 case 15: 
 var $51=(($47+1)|0);
 HEAP32[(($1)>>2)]=$51;
 var $52=HEAP8[($47)];
 var $53=($52&255);
 var $c_1_be=$53;label=17;break;
 case 16: 
 var $55=___shgetc($f);
 var $c_1_be=$55;label=17;break;
 case 17: 
 var $c_1_be;
 var $56=((($c_1_be)-(48))|0);
 var $57=($56>>>0)<10;
 var $58=($46|0)<214748364;
 var $_=$57&$58;
 if($_){label=18;break;}else{label=19;break;}
 case 18: 
 var $phitmp16=((($46)*(10))&-1);
 var $c_18=$c_1_be;var $x_09=$phitmp16;label=14;break;
 case 19: 
 var $phitmp$0=$46;
 var $phitmp$1=((((($46|0)<0))|0)?-1:0);
 var $60=((($c_1_be)-(48))|0);
 var $61=($60>>>0)<10;
 if($61){var $c_23=$c_1_be;var $y_04$1=$phitmp$1;var $y_04$0=$phitmp$0;label=21;break;}else{var $c_2_lcssa=$c_1_be;var $y_0_lcssa$1=$phitmp$1;var $y_0_lcssa$0=$phitmp$0;label=20;break;}
 case 20: 
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_2_lcssa;
 var $62=((($c_2_lcssa)-(48))|0);
 var $63=($62>>>0)<10;
 if($63){label=25;break;}else{label=29;break;}
 case 21: 
 var $y_04$0;
 var $y_04$1;
 var $c_23;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $64$0=___muldi3($y_04$0,$y_04$1,$$etemp$0$0,$$etemp$0$1);var $64$1=tempRet0;
 var $65$0=$c_23;
 var $65$1=((((($c_23|0)<0))|0)?-1:0);
 var $$etemp$1$0=-48;
 var $$etemp$1$1=-1;
 var $66$0=_i64Add($65$0,$65$1,$$etemp$1$0,$$etemp$1$1);var $66$1=tempRet0;
 var $67$0=_i64Add($66$0,$66$1,$64$0,$64$1);var $67$1=tempRet0;
 var $68=HEAP32[(($1)>>2)];
 var $69=HEAP32[(($3)>>2)];
 var $70=($68>>>0)<($69>>>0);
 if($70){label=22;break;}else{label=23;break;}
 case 22: 
 var $72=(($68+1)|0);
 HEAP32[(($1)>>2)]=$72;
 var $73=HEAP8[($68)];
 var $74=($73&255);
 var $c_2_be=$74;label=24;break;
 case 23: 
 var $76=___shgetc($f);
 var $c_2_be=$76;label=24;break;
 case 24: 
 var $c_2_be;
 var $77=((($c_2_be)-(48))|0);
 var $78=($77>>>0)<10;
 var $$etemp$2$0=2061584302;
 var $$etemp$2$1=21474836;
 var $79=(($67$1|0) < ($$etemp$2$1|0)) | (((($67$1|0) == ($$etemp$2$1|0) & ($67$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond2=$78&$79;
 if($or_cond2){var $c_23=$c_2_be;var $y_04$1=$67$1;var $y_04$0=$67$0;label=21;break;}else{var $c_2_lcssa=$c_2_be;var $y_0_lcssa$1=$67$1;var $y_0_lcssa$0=$67$0;label=20;break;}
 case 25: 
 var $80=HEAP32[(($1)>>2)];
 var $81=HEAP32[(($3)>>2)];
 var $82=($80>>>0)<($81>>>0);
 if($82){label=26;break;}else{label=27;break;}
 case 26: 
 var $84=(($80+1)|0);
 HEAP32[(($1)>>2)]=$84;
 var $85=HEAP8[($80)];
 var $86=($85&255);
 var $c_3_be=$86;label=28;break;
 case 27: 
 var $88=___shgetc($f);
 var $c_3_be=$88;label=28;break;
 case 28: 
 var $c_3_be;
 var $89=((($c_3_be)-(48))|0);
 var $90=($89>>>0)<10;
 if($90){label=25;break;}else{label=29;break;}
 case 29: 
 var $91=HEAP32[(($3)>>2)];
 var $92=($91|0)==0;
 if($92){label=31;break;}else{label=30;break;}
 case 30: 
 var $94=HEAP32[(($1)>>2)];
 var $95=((($94)-(1))|0);
 HEAP32[(($1)>>2)]=$95;
 label=31;break;
 case 31: 
 var $97=($neg_0|0)!=0;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $98$0=_i64Subtract($$etemp$3$0,$$etemp$3$1,$y_0_lcssa$0,$y_0_lcssa$1);var $98$1=tempRet0;
 var $99$0=($97?$98$0:$y_0_lcssa$0);
 var $99$1=($97?$98$1:$y_0_lcssa$1);
 var $_0$1=$99$1;var $_0$0=$99$0;label=32;break;
 case 32: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function ___shlim($f,$lim){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 HEAP32[(($1)>>2)]=$lim;
 var $2=(($f+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($f+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$3;
 var $7=$5;
 var $8=((($6)-($7))|0);
 var $9=(($f+108)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=($lim|0)!=0;
 var $11=($8|0)>($lim|0);
 var $or_cond=$10&$11;
 if($or_cond){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=(($5+$lim)|0);
 var $14=(($f+100)|0);
 HEAP32[(($14)>>2)]=$13;
 label=4;break;
 case 3: 
 var $16=(($f+100)|0);
 HEAP32[(($16)>>2)]=$3;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___shgetc($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($f+108)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)<($2|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=___uflow($f);
 var $10=($9|0)<0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=(($f+100)|0);
 HEAP32[(($12)>>2)]=0;
 var $_0=-1;label=13;break;
 case 5: 
 var $14=HEAP32[(($1)>>2)];
 var $15=($14|0)==0;
 var $_phi_trans_insert=(($f+8)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 if($15){label=8;break;}else{label=6;break;}
 case 6: 
 var $17=(($f+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$_pre;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=(($f+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($14)-($23))|0);
 var $25=((($24)-(1))|0);
 var $26=($21|0)>($25|0);
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=(($18+$25)|0);
 var $29=(($f+100)|0);
 HEAP32[(($29)>>2)]=$28;
 label=9;break;
 case 8: 
 var $30=(($f+100)|0);
 HEAP32[(($30)>>2)]=$_pre;
 label=9;break;
 case 9: 
 var $32=($_pre|0)==0;
 var $_phi_trans_insert2=(($f+4)|0);
 var $_pre3=HEAP32[(($_phi_trans_insert2)>>2)];
 if($32){label=11;break;}else{label=10;break;}
 case 10: 
 var $34=$_pre;
 var $35=$_pre3;
 var $36=(($f+108)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($34)+(1))|0);
 var $39=((($38)-($35))|0);
 var $40=((($39)+($37))|0);
 HEAP32[(($36)>>2)]=$40;
 label=11;break;
 case 11: 
 var $41=((($_pre3)-(1))|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 var $44=($43|0)==($9|0);
 if($44){var $_0=$9;label=13;break;}else{label=12;break;}
 case 12: 
 var $46=(($9)&255);
 HEAP8[($41)]=$46;
 var $_0=$9;label=13;break;
 case 13: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _scalbn($x,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)>1023;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 var $3=($x)*((8.98846567431158e+307));
 var $4=((($n)-(1023))|0);
 var $5=($4|0)>1023;
 if($5){label=3;break;}else{var $y_0=$3;var $_0=$4;label=7;break;}
 case 3: 
 var $7=($3)*((8.98846567431158e+307));
 var $8=((($n)-(2046))|0);
 var $9=($8|0)>1023;
 var $_=($9?1023:$8);
 var $y_0=$7;var $_0=$_;label=7;break;
 case 4: 
 var $11=($n|0)<-1022;
 if($11){label=5;break;}else{var $y_0=$x;var $_0=$n;label=7;break;}
 case 5: 
 var $13=($x)*((2.2250738585072014e-308));
 var $14=((($n)+(1022))|0);
 var $15=($14|0)<-1022;
 if($15){label=6;break;}else{var $y_0=$13;var $_0=$14;label=7;break;}
 case 6: 
 var $17=($13)*((2.2250738585072014e-308));
 var $18=((($n)+(2044))|0);
 var $19=($18|0)<-1022;
 var $_1=($19?-1022:$18);
 var $y_0=$17;var $_0=$_1;label=7;break;
 case 7: 
 var $_0;
 var $y_0;
 var $21=((($_0)+(1023))|0);
 var $22$0=$21;
 var $22$1=0;
 var $23$0=(0<<20)|(0>>>12);
 var $23$1=($22$0<<20)|(0>>>12);
 var $24=(HEAP32[((tempDoublePtr)>>2)]=$23$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$23$1, HEAPF64[(tempDoublePtr)>>3]);
 var $25=($y_0)*($24);
 return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _scalbnl($x,$n){
 var label=0;


 var $1=_scalbn($x,$n);
 return $1;
}


function ___toread($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+74)|0);
 var $2=HEAP8[($1)];
 var $3=((($2)-(1))&255);
 var $4=$3|$2;
 HEAP8[($1)]=$4;
 var $5=(($f+20)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($f+44)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6>>>0)>($8>>>0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($f+36)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($f,0,0);
 label=3;break;
 case 3: 
 var $15=(($f+16)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=(($f+28)|0);
 HEAP32[(($16)>>2)]=0;
 HEAP32[(($5)>>2)]=0;
 var $17=(($f)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&20;
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=4;break;}
 case 4: 
 var $22=$18&4;
 var $23=($22|0)==0;
 if($23){var $_0=-1;label=7;break;}else{label=5;break;}
 case 5: 
 var $25=$18|32;
 HEAP32[(($17)>>2)]=$25;
 var $_0=-1;label=7;break;
 case 6: 
 var $27=HEAP32[(($7)>>2)];
 var $28=(($f+8)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=(($f+4)|0);
 HEAP32[(($29)>>2)]=$27;
 var $_0=0;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___uflow($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($f+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=___toread($f);
 var $6=($5|0)==0;
 if($6){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 var $8=(($f+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=FUNCTION_TABLE[$9]($f,$c,1);
 var $11=($10|0)==1;
 if($11){label=4;break;}else{var $_0=-1;label=5;break;}
 case 4: 
 var $13=HEAP8[($c)];
 var $14=($13&255);
 var $_0=$14;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strtold_l($s,$p,$loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i=sp;
 var $1=$f_i_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i_i,0);
 var $6=___floatscan($f_i_i,2,1);
 var $7=(($f_i_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }

}


function _memcmp($vl,$vr,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $14=0;label=5;break;}else{var $_03=$n;var $l_04=$vl;var $r_05=$vr;label=2;break;}
 case 2: 
 var $r_05;
 var $l_04;
 var $_03;
 var $2=HEAP8[($l_04)];
 var $3=HEAP8[($r_05)];
 var $4=(($2<<24)>>24)==(($3<<24)>>24);
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $6=((($_03)-(1))|0);
 var $7=(($l_04+1)|0);
 var $8=(($r_05+1)|0);
 var $9=($6|0)==0;
 if($9){var $14=0;label=5;break;}else{var $_03=$6;var $l_04=$7;var $r_05=$8;label=2;break;}
 case 4: 
 var $11=($2&255);
 var $12=($3&255);
 var $13=((($11)-($12))|0);
 var $14=$13;label=5;break;
 case 5: 
 var $14;
 return $14;
  default: assert(0, "bad label: " + label);
 }

}



// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================


// EMSCRIPTEN_END_FUNCS

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



