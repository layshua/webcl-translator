
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "Trajectory1" :
                {
                    "x" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_x_size"
                        },
                    "_wcl_x_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "y" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_y_size"
                        },
                    "_wcl_y_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "vx" :
                        {
                            "index" : 4,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_vx_size"
                        },
                    "_wcl_vx_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "vy" :
                        {
                            "index" : 6,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_vy_size"
                        },
                    "_wcl_vy_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "v" :
                        {
                            "index" : 8,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_v_size"
                        },
                    "_wcl_v_size" :
                        {
                            "index" : 9,
                            "type" : "ulong"
                        },
                    "t0" :
                        {
                            "index" : 10,
                            "type" : "float"
                        },
                    "delta" :
                        {
                            "index" : 11,
                            "type" : "float"
                        },
                    "v0" :
                        {
                            "index" : 12,
                            "type" : "float"
                        },
                    "angle" :
                        {
                            "index" : 13,
                            "type" : "float"
                        }
                },
            "Trajectory2" :
                {
                    "x" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_x_size"
                        },
                    "_wcl_x_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "y" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_y_size"
                        },
                    "_wcl_y_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "vx" :
                        {
                            "index" : 4,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_vx_size"
                        },
                    "_wcl_vx_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "vy" :
                        {
                            "index" : 6,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_vy_size"
                        },
                    "_wcl_vy_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "v" :
                        {
                            "index" : 8,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_v_size"
                        },
                    "_wcl_v_size" :
                        {
                            "index" : 9,
                            "type" : "ulong"
                        },
                    "t0" :
                        {
                            "index" : 10,
                            "type" : "float"
                        },
                    "delta" :
                        {
                            "index" : 11,
                            "type" : "float"
                        },
                    "v0" :
                        {
                            "index" : 12,
                            "type" : "float"
                        },
                    "height" :
                        {
                            "index" : 13,
                            "type" : "float"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    __global float *Trajectory1__x_min;
    __global float *Trajectory1__x_max;
    __global float *Trajectory1__y_min;
    __global float *Trajectory1__y_max;
    __global float *Trajectory1__vx_min;
    __global float *Trajectory1__vx_max;
    __global float *Trajectory1__vy_min;
    __global float *Trajectory1__vy_max;
    __global float *Trajectory1__v_min;
    __global float *Trajectory1__v_max;
    __global float *Trajectory2__x_min;
    __global float *Trajectory2__x_max;
    __global float *Trajectory2__y_min;
    __global float *Trajectory2__y_max;
    __global float *Trajectory2__vx_min;
    __global float *Trajectory2__vx_max;
    __global float *Trajectory2__vy_min;
    __global float *Trajectory2__vy_max;
    __global float *Trajectory2__v_min;
    __global float *Trajectory2__v_max;
} _WclGlobalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[items_offset+i] = _WCL_FILLCHAR;                          \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

// <= General code that doesn't depend on input.

#define _WCL_ADDR_CHECK_global_10(type, addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9) \
    ( 0\
    || ( ((addr) >= ((type)min0)) && ((addr + size - 1) <= _WCL_LAST(type, max0)) ) \
        || ( ((addr) >= ((type)min1)) && ((addr + size - 1) <= _WCL_LAST(type, max1)) ) \
            || ( ((addr) >= ((type)min2)) && ((addr + size - 1) <= _WCL_LAST(type, max2)) ) \
                || ( ((addr) >= ((type)min3)) && ((addr + size - 1) <= _WCL_LAST(type, max3)) ) \
                    || ( ((addr) >= ((type)min4)) && ((addr + size - 1) <= _WCL_LAST(type, max4)) ) \
                        || ( ((addr) >= ((type)min5)) && ((addr + size - 1) <= _WCL_LAST(type, max5)) ) \
                            || ( ((addr) >= ((type)min6)) && ((addr + size - 1) <= _WCL_LAST(type, max6)) ) \
                                || ( ((addr) >= ((type)min7)) && ((addr + size - 1) <= _WCL_LAST(type, max7)) ) \
                                    || ( ((addr) >= ((type)min8)) && ((addr + size - 1) <= _WCL_LAST(type, max8)) ) \
                                        || ( ((addr) >= ((type)min9)) && ((addr + size - 1) <= _WCL_LAST(type, max9)) ) \
                                             )
#define _WCL_ADDR_CLAMP_global_10(type, addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9, asnull) \
    ( _WCL_ADDR_CHECK_global_10(type, addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9) ? (addr) : (type)(asnull))


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
//---------------------------------------------------------------------------
//
//	File: TrajectoriesKernel.cl
//
//  Abstract: Kernels to compute various trajectory forms
// 			 
//  Disclaimer: IMPORTANT:  This Apple software is supplied to you by
//  Inc. ("Apple") in consideration of your agreement to the following terms, 
//  and your use, installation, modification or redistribution of this Apple 
//  software constitutes acceptance of these terms.  If you do not agree with 
//  these terms, please do not use, install, modify or redistribute this 
//  Apple software.
//  
//  In consideration of your agreement to abide by the following terms, and
//  subject to these terms, Apple grants you a personal, non-exclusive
//  license, under Apple'v1 copyrights in this original Apple software (the
//  "Apple Software"), to use, reproduce, modify and redistribute the Apple
//  Software, with or without modifications, in source and/or binary forms;
//  provided that if you redistribute the Apple Software in its entirety and
//  without modifications, you must retain this notice and the following
//  text and disclaimers in all such redistributions of the Apple Software. 
//  Neither the name, trademarks, service marks or logos of Apple Inc. may 
//  be used to endorse or promote products derived from the Apple Software 
//  without specific prior written permission from Apple.  Except as 
//  expressly stated in this notice, no other rights or licenses, express
//  or implied, are granted by Apple herein, including but not limited to
//  any patent rights that may be infringed by your derivative works or by
//  other works in which the Apple Software may be incorporated.
//  
//  The Apple Software is provided by Apple on an "AS IS" basis.  APPLE
//  MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
//  THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS
//  FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND
//  OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.
//  
//  IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL
//  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION,
//  MODIFICATION AND/OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED
//  AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE),
//  STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
// 
//  Copyright (c) 2009 Apple Inc., All rights reserved.
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
//
// Compute trajectory when target and launch point are at the same level.
// Inputs are the initial time, time delta, initial speed, and the initial
// angle.  Outputs are the position vector, velocity vector, and speed.
// This kernel uses the parametric representation of projectile trajectory.
// To recover equations in the documentation use back substitution.
//
//---------------------------------------------------------------------------

__kernel void Trajectory1(
 __global float *x, ulong _wcl_x_size,
    __global float *y, ulong _wcl_y_size,
    __global float *vx, ulong _wcl_vx_size,
    __global float *vy, ulong _wcl_vy_size,
    __global float *v, ulong _wcl_v_size,
 const float t0,
 const float delta,
 const float v0,
 const float angle)
{
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &x[0], &x[_wcl_x_size],&y[0], &y[_wcl_y_size],&vx[0], &vx[_wcl_vx_size],&vy[0], &vy[_wcl_vy_size],&v[0], &v[_wcl_v_size],0, 0,0, 0,0, 0,0, 0,0, 0 },
        0
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, (__global uint*)0))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

 int gid = get_global_id(0);

 float t1 = gid * delta + t0;
 float v1 = (9.81f) * t1;
 float v2 = v0 * cos( angle );
 float v3 = v0 * sin( angle );
 float v4 = 2.0f * v3;
 float v5 = v4 - v1;
 float v6 = v0 * v0 - v1 * v5;

 (*(_WCL_ADDR_CLAMP_global_10(__global float *, (x)+(gid), 1, _wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, _wcl_allocs->gn))) = v2 * t1;
 (*(_WCL_ADDR_CLAMP_global_10(__global float *, (y)+(gid), 1, _wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, _wcl_allocs->gn))) = 0.5f * v5 * t1;
 (*(_WCL_ADDR_CLAMP_global_10(__global float *, (vx)+(gid), 1, _wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, _wcl_allocs->gn))) = v2;
 (*(_WCL_ADDR_CLAMP_global_10(__global float *, (vy)+(gid), 1, _wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, _wcl_allocs->gn))) = v3 - v1;
 (*(_WCL_ADDR_CLAMP_global_10(__global float *, (v)+(gid), 1, _wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, _wcl_allocs->gn))) = sqrt(v6);
} // Trajectory1

//---------------------------------------------------------------------------
//
// Compute trajectory when projectile is dropped from a moving system.
// Inputs are the initial time, time delta, initial speed, and the initial
// height.  Outputs are the position vector, velocity vector, and speed.
// This kernel uses the parametric representation of projectile trajectory.
// To recover equations in the documentation use back substitution.
//
//---------------------------------------------------------------------------

__kernel void Trajectory2(
    __global float *x, ulong _wcl_x_size,
    __global float *y, ulong _wcl_y_size,
 __global float *vx, ulong _wcl_vx_size,
    __global float *vy, ulong _wcl_vy_size,
    __global float *v, ulong _wcl_v_size,
 const float t0,
 const float delta,
 const float v0,
 const float height)
{
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,&x[0], &x[_wcl_x_size],&y[0], &y[_wcl_y_size],&vx[0], &vx[_wcl_vx_size],&vy[0], &vy[_wcl_vy_size],&v[0], &v[_wcl_v_size] },
        0
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, (__global uint*)0))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

 int gid = get_global_id(0);

 float t1 = gid * delta + t0;
 float v1 = (9.81f) * t1;
 float v2 = v0 * v0 + v1 * v1;

 (*(_WCL_ADDR_CLAMP_global_10(__global float *, (x)+(gid), 1, _wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, _wcl_allocs->gn))) = v0 * t1;
 (*(_WCL_ADDR_CLAMP_global_10(__global float *, (y)+(gid), 1, _wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, _wcl_allocs->gn))) = height - 0.5 * v1 * t1;
 (*(_WCL_ADDR_CLAMP_global_10(__global float *, (vx)+(gid), 1, _wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, _wcl_allocs->gn))) = v0;
 (*(_WCL_ADDR_CLAMP_global_10(__global float *, (vy)+(gid), 1, _wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, _wcl_allocs->gn))) = -v1;
 (*(_WCL_ADDR_CLAMP_global_10(__global float *, (v)+(gid), 1, _wcl_allocs->gl.Trajectory1__x_min, _wcl_allocs->gl.Trajectory1__x_max, _wcl_allocs->gl.Trajectory1__y_min, _wcl_allocs->gl.Trajectory1__y_max, _wcl_allocs->gl.Trajectory1__vx_min, _wcl_allocs->gl.Trajectory1__vx_max, _wcl_allocs->gl.Trajectory1__vy_min, _wcl_allocs->gl.Trajectory1__vy_max, _wcl_allocs->gl.Trajectory1__v_min, _wcl_allocs->gl.Trajectory1__v_max, _wcl_allocs->gl.Trajectory2__x_min, _wcl_allocs->gl.Trajectory2__x_max, _wcl_allocs->gl.Trajectory2__y_min, _wcl_allocs->gl.Trajectory2__y_max, _wcl_allocs->gl.Trajectory2__vx_min, _wcl_allocs->gl.Trajectory2__vx_max, _wcl_allocs->gl.Trajectory2__vy_min, _wcl_allocs->gl.Trajectory2__vy_max, _wcl_allocs->gl.Trajectory2__v_min, _wcl_allocs->gl.Trajectory2__v_max, _wcl_allocs->gn))) = sqrt(v2);
} // Trajectory2

//---------------------------------------------------------------------------
